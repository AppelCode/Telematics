
d:/CAR/TelematicsLocal/CybeSe/Telematics/src/telematics/target/telematics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f358  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080af370  080af370  0001f370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080af378  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000300  080af37c  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00002e18  20000368  20000368  00040368  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080af3e4  080af3e4  0003f3e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080af40c  080af40c  0003f40c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00157f43  00000000  00000000  0003f410  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001d856  00000000  00000000  00197353  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00041cc8  00000000  00000000  001b4ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003360  00000000  00000000  001f6871  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000050b8  00000000  00000000  001f9bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035fe7  00000000  00000000  001fec89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004550e  00000000  00000000  00234c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a7eb0  00000000  00000000  0027a17e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f914  00000000  00000000  00322030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	b4 d5 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f00d fa72 	bl	80ad516 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f00d fa92 	bl	80ad562 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080af37c 	.word	0x080af37c
 80a004c:	20000368 	.word	0x20000368
 80a0050:	20000368 	.word	0x20000368
 80a0054:	20003180 	.word	0x20003180
 80a0058:	20003180 	.word	0x20003180

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f00c fd81 	bl	80acb64 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080af2fc 	.word	0x080af2fc
 80a0084:	080af368 	.word	0x080af368

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b862 	b.w	80a0150 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f877 	bl	80a0180 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f00c bd23 	b.w	80acae0 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f00c b959 	b.w	80ac350 <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f00c b957 	b.w	80ac350 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f00c b95d 	b.w	80ac360 <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f00c b95b 	b.w	80ac360 <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr
	...

080a00bc <_Z8callbackPcPhj>:
AWS awsiot("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);

// recieve message
//used for handling all subscription messages
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
 80a00bc:	b5b0      	push	{r4, r5, r7, lr}
 80a00be:	4615      	mov	r5, r2
    char p[length + 1];
 80a00c0:	f102 0308 	add.w	r3, r2, #8
 80a00c4:	f023 0307 	bic.w	r3, r3, #7
AWS awsiot("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);

// recieve message
//used for handling all subscription messages
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
 80a00c8:	b084      	sub	sp, #16
 80a00ca:	af00      	add	r7, sp, #0
    char p[length + 1];
 80a00cc:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
 80a00d0:	4668      	mov	r0, sp
 80a00d2:	f00d fa20 	bl	80ad516 <memcpy>
    p[length] = NULL;
 80a00d6:	2400      	movs	r4, #0
    String message(p);
 80a00d8:	4669      	mov	r1, sp
 80a00da:	4638      	mov	r0, r7
//used for handling all subscription messages
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
 80a00dc:	f80d 4005 	strb.w	r4, [sp, r5]
    String message(p);
 80a00e0:	f00c fbeb 	bl	80ac8ba <_ZN6StringC1EPK19__FlashStringHelper>

    if (message.equals("RED"))
 80a00e4:	4914      	ldr	r1, [pc, #80]	; (80a0138 <_Z8callbackPcPhj+0x7c>)
 80a00e6:	4638      	mov	r0, r7
 80a00e8:	f00c fc1a 	bl	80ac920 <_ZNK6String6equalsEPKc>
 80a00ec:	4605      	mov	r5, r0
 80a00ee:	b118      	cbz	r0, 80a00f8 <_Z8callbackPcPhj+0x3c>
        RGB.color(255, 0, 0);
 80a00f0:	4622      	mov	r2, r4
 80a00f2:	4621      	mov	r1, r4
 80a00f4:	20ff      	movs	r0, #255	; 0xff
 80a00f6:	e013      	b.n	80a0120 <_Z8callbackPcPhj+0x64>
    else if (message.equals("GREEN"))
 80a00f8:	4910      	ldr	r1, [pc, #64]	; (80a013c <_Z8callbackPcPhj+0x80>)
 80a00fa:	4638      	mov	r0, r7
 80a00fc:	f00c fc10 	bl	80ac920 <_ZNK6String6equalsEPKc>
 80a0100:	4604      	mov	r4, r0
 80a0102:	b110      	cbz	r0, 80a010a <_Z8callbackPcPhj+0x4e>
        RGB.color(0, 255, 0);
 80a0104:	462a      	mov	r2, r5
 80a0106:	21ff      	movs	r1, #255	; 0xff
 80a0108:	e009      	b.n	80a011e <_Z8callbackPcPhj+0x62>
    else if (message.equals("BLUE"))
 80a010a:	490d      	ldr	r1, [pc, #52]	; (80a0140 <_Z8callbackPcPhj+0x84>)
 80a010c:	4638      	mov	r0, r7
 80a010e:	f00c fc07 	bl	80ac920 <_ZNK6String6equalsEPKc>
        RGB.color(0, 0, 255);
 80a0112:	22ff      	movs	r2, #255	; 0xff

    if (message.equals("RED"))
        RGB.color(255, 0, 0);
    else if (message.equals("GREEN"))
        RGB.color(0, 255, 0);
    else if (message.equals("BLUE"))
 80a0114:	b110      	cbz	r0, 80a011c <_Z8callbackPcPhj+0x60>
        RGB.color(0, 0, 255);
 80a0116:	4621      	mov	r1, r4
 80a0118:	4620      	mov	r0, r4
 80a011a:	e001      	b.n	80a0120 <_Z8callbackPcPhj+0x64>
    else
        RGB.color(255, 255, 255);
 80a011c:	4611      	mov	r1, r2
 80a011e:	4610      	mov	r0, r2
 80a0120:	f00c fc8a 	bl	80aca38 <_ZN8RGBClass5colorEiii>
    delay(1000);
 80a0124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0128:	f00c fc64 	bl	80ac9f4 <delay>
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    String message(p);
 80a012c:	4638      	mov	r0, r7
 80a012e:	f00c fb7d 	bl	80ac82c <_ZN6StringD1Ev>
    else if (message.equals("BLUE"))
        RGB.color(0, 0, 255);
    else
        RGB.color(255, 255, 255);
    delay(1000);
}
 80a0132:	3710      	adds	r7, #16
 80a0134:	46bd      	mov	sp, r7
 80a0136:	bdb0      	pop	{r4, r5, r7, pc}
 80a0138:	080ad5c8 	.word	0x080ad5c8
 80a013c:	080ad5cc 	.word	0x080ad5cc
 80a0140:	080ad5d2 	.word	0x080ad5d2

080a0144 <_ZN3AWSD1Ev>:
#ifndef AWS_H
#define AWS_H

#include <MQTT-TLS.h>

class AWS {
 80a0144:	b510      	push	{r4, lr}
 80a0146:	4604      	mov	r4, r0
 80a0148:	f000 f90c 	bl	80a0364 <_ZN4MQTTD1Ev>
 80a014c:	4620      	mov	r0, r4
 80a014e:	bd10      	pop	{r4, pc}

080a0150 <setup>:

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
int counter = 0;
void setup() {
 80a0150:	b510      	push	{r4, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0152:	f00b ffdd 	bl	80ac110 <HAL_Timer_Get_Milli_Seconds>
    //resync time everyday
    if (millis() - lastSync > ONE_DAY_MILLIS) {
 80a0156:	4c08      	ldr	r4, [pc, #32]	; (80a0178 <setup+0x28>)
 80a0158:	6823      	ldr	r3, [r4, #0]
 80a015a:	1ac0      	subs	r0, r0, r3
 80a015c:	4b07      	ldr	r3, [pc, #28]	; (80a017c <setup+0x2c>)
 80a015e:	4298      	cmp	r0, r3
 80a0160:	d905      	bls.n	80a016e <setup+0x1e>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
 80a0162:	2000      	movs	r0, #0
 80a0164:	f00c f8ec 	bl	80ac340 <spark_sync_time>
 80a0168:	f00b ffd2 	bl	80ac110 <HAL_Timer_Get_Milli_Seconds>
        Particle.syncTime();
        lastSync = millis();
 80a016c:	6020      	str	r0, [r4, #0]
    }


    RGB.control(true);
 80a016e:	2001      	movs	r0, #1

}
 80a0170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Particle.syncTime();
        lastSync = millis();
    }


    RGB.control(true);
 80a0174:	f00c bc50 	b.w	80aca18 <_ZN8RGBClass7controlEb>
 80a0178:	20000e00 	.word	0x20000e00
 80a017c:	05265c00 	.word	0x05265c00

080a0180 <loop>:
    /*
    if (awsiot.isConnected()) {
        awsiot.loop();
    }
    */
    delay(200);
 80a0180:	20c8      	movs	r0, #200	; 0xc8
 80a0182:	f00c bc37 	b.w	80ac9f4 <delay>
	...

080a0188 <_GLOBAL__sub_I_mutex>:
			Serial.println("thread called!");
            awsiot.loop();
		}
	}
	// You must not return from the thread function
 80a0188:	b510      	push	{r4, lr}
 * byte server[] = { XXX,XXX,XXX,XXX };
 * MQTT client(server, 1883, callback);
 * want to use domain name,
 * MQTT client("www.sample.com", 1883, callback);
 **/
AWS awsiot("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 80a018a:	4c0a      	ldr	r4, [pc, #40]	; (80a01b4 <_GLOBAL__sub_I_mutex+0x2c>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a018c:	f00b ffa8 	bl	80ac0e0 <HAL_Pin_Map>
 80a0190:	4b09      	ldr	r3, [pc, #36]	; (80a01b8 <_GLOBAL__sub_I_mutex+0x30>)
 80a0192:	f242 22b3 	movw	r2, #8883	; 0x22b3
 80a0196:	4909      	ldr	r1, [pc, #36]	; (80a01bc <_GLOBAL__sub_I_mutex+0x34>)
 80a0198:	4620      	mov	r0, r4
 80a019a:	f00b fed9 	bl	80abf50 <_ZN3AWSC1EPctPFvS0_PhjE>
 80a019e:	4a08      	ldr	r2, [pc, #32]	; (80a01c0 <_GLOBAL__sub_I_mutex+0x38>)
 80a01a0:	4908      	ldr	r1, [pc, #32]	; (80a01c4 <_GLOBAL__sub_I_mutex+0x3c>)
 80a01a2:	4620      	mov	r0, r4
 80a01a4:	f00c feb4 	bl	80acf10 <__aeabi_atexit>
 80a01a8:	f00b ffb2 	bl	80ac110 <HAL_Timer_Get_Milli_Seconds>
        RGB.color(255, 255, 255);
    delay(1000);
}

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
 80a01ac:	4b06      	ldr	r3, [pc, #24]	; (80a01c8 <_GLOBAL__sub_I_mutex+0x40>)
 80a01ae:	6018      	str	r0, [r3, #0]
 80a01b0:	bd10      	pop	{r4, pc}
 80a01b2:	bf00      	nop
 80a01b4:	20000370 	.word	0x20000370
 80a01b8:	080a00bd 	.word	0x080a00bd
 80a01bc:	080ad630 	.word	0x080ad630
 80a01c0:	20000368 	.word	0x20000368
 80a01c4:	080a0145 	.word	0x080a0145
 80a01c8:	20000e00 	.word	0x20000e00

080a01cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
	TCPClient();
	TCPClient(sock_handle_t sock);
        virtual ~TCPClient() {};
 80a01cc:	b538      	push	{r3, r4, r5, lr}
 80a01ce:	4b0b      	ldr	r3, [pc, #44]	; (80a01fc <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a01d0:	6984      	ldr	r4, [r0, #24]
 80a01d2:	4605      	mov	r5, r0
 80a01d4:	6003      	str	r3, [r0, #0]
 80a01d6:	b17c      	cbz	r4, 80a01f8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a01d8:	6863      	ldr	r3, [r4, #4]
 80a01da:	3b01      	subs	r3, #1
 80a01dc:	6063      	str	r3, [r4, #4]
 80a01de:	b95b      	cbnz	r3, 80a01f8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a01e0:	6823      	ldr	r3, [r4, #0]
 80a01e2:	4620      	mov	r0, r4
 80a01e4:	689b      	ldr	r3, [r3, #8]
 80a01e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a01e8:	68a3      	ldr	r3, [r4, #8]
 80a01ea:	3b01      	subs	r3, #1
 80a01ec:	60a3      	str	r3, [r4, #8]
 80a01ee:	b91b      	cbnz	r3, 80a01f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a01f0:	6823      	ldr	r3, [r4, #0]
 80a01f2:	4620      	mov	r0, r4
 80a01f4:	68db      	ldr	r3, [r3, #12]
 80a01f6:	4798      	blx	r3
 80a01f8:	4628      	mov	r0, r5
 80a01fa:	bd38      	pop	{r3, r4, r5, pc}
 80a01fc:	080af0dc 	.word	0x080af0dc

080a0200 <_ZN9TCPClientD0Ev>:
 80a0200:	b510      	push	{r4, lr}
 80a0202:	4604      	mov	r4, r0
 80a0204:	f7ff ffe2 	bl	80a01cc <_ZN9TCPClientD1Ev>
 80a0208:	4620      	mov	r0, r4
 80a020a:	f7ff ff4a 	bl	80a00a2 <_ZdlPv>
 80a020e:	4620      	mov	r0, r4
 80a0210:	bd10      	pop	{r4, pc}
	...

080a0214 <_ZN4MQTTC1Ev>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT() {
 80a0214:	b538      	push	{r3, r4, r5, lr}
 80a0216:	4604      	mov	r4, r0
 80a0218:	2500      	movs	r5, #0
 80a021a:	f00c fa45 	bl	80ac6a8 <_ZN9TCPClientC1Ev>
 80a021e:	61e5      	str	r5, [r4, #28]
 80a0220:	4905      	ldr	r1, [pc, #20]	; (80a0238 <_ZN4MQTTC1Ev+0x24>)
 80a0222:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0226:	f00c fb48 	bl	80ac8ba <_ZN6StringC1EPK19__FlashStringHelper>
 80a022a:	2301      	movs	r3, #1
 80a022c:	64a5      	str	r5, [r4, #72]	; 0x48
 80a022e:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->ip = NULL;
}
 80a0232:	4620      	mov	r0, r4
 80a0234:	bd38      	pop	{r3, r4, r5, pc}
 80a0236:	bf00      	nop
 80a0238:	080ada74 	.word	0x080ada74

080a023c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:
        disconnect();
        free(buffer);
    }
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a023c:	b538      	push	{r3, r4, r5, lr}
 80a023e:	4604      	mov	r4, r0
 80a0240:	461d      	mov	r5, r3
    this->callback = callback;
 80a0242:	9b05      	ldr	r3, [sp, #20]
 80a0244:	6303      	str	r3, [r0, #48]	; 0x30
    this->tls = false;
 80a0246:	2000      	movs	r0, #0
 80a0248:	f884 0681 	strb.w	r0, [r4, #1665]	; 0x681
    this->tlsConnected = false;
 80a024c:	f884 0680 	strb.w	r0, [r4, #1664]	; 0x680
    this->qoscallback = NULL;
 80a0250:	6360      	str	r0, [r4, #52]	; 0x34
    if (ip != NULL)
 80a0252:	b102      	cbz	r2, 80a0256 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1a>
        this->ip = ip;
 80a0254:	64a2      	str	r2, [r4, #72]	; 0x48
    if (domain != NULL)
 80a0256:	b119      	cbz	r1, 80a0260 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x24>
        this->domain = domain;
 80a0258:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a025c:	f00c fb4f 	bl	80ac8fe <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0260:	9b04      	ldr	r3, [sp, #16]

    this->maxpacketsize = maxpacketsize;
    if (buffer != NULL)
 80a0262:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a0264:	6523      	str	r3, [r4, #80]	; 0x50

    this->maxpacketsize = maxpacketsize;
 80a0266:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a0268:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    this->maxpacketsize = maxpacketsize;
 80a026c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0270:	b108      	cbz	r0, 80a0276 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x3a>
      delete[] buffer;
 80a0272:	f7ff ff18 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0276:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a027a:	f7ff ff10 	bl	80a009e <_Znaj>
 80a027e:	61e0      	str	r0, [r4, #28]
 80a0280:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0284 <_ZN4MQTTC1EPctPFvS0_PhjE>:

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0284:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0288:	4604      	mov	r4, r0
 80a028a:	4617      	mov	r7, r2
 80a028c:	4698      	mov	r8, r3
 80a028e:	460e      	mov	r6, r1
 80a0290:	2500      	movs	r5, #0
 80a0292:	f00c fa09 	bl	80ac6a8 <_ZN9TCPClientC1Ev>
 80a0296:	61e5      	str	r5, [r4, #28]
 80a0298:	490c      	ldr	r1, [pc, #48]	; (80a02cc <_ZN4MQTTC1EPctPFvS0_PhjE+0x48>)
 80a029a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a029e:	f00c fb0c 	bl	80ac8ba <_ZN6StringC1EPK19__FlashStringHelper>
 80a02a2:	2301      	movs	r3, #1
 80a02a4:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a02a8:	23ff      	movs	r3, #255	; 0xff
 80a02aa:	9302      	str	r3, [sp, #8]
 80a02ac:	230f      	movs	r3, #15
 80a02ae:	9300      	str	r3, [sp, #0]
 80a02b0:	4620      	mov	r0, r4

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a02b2:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a02b4:	f8cd 8004 	str.w	r8, [sp, #4]
 80a02b8:	463b      	mov	r3, r7
 80a02ba:	462a      	mov	r2, r5
 80a02bc:	4631      	mov	r1, r6
 80a02be:	f7ff ffbd 	bl	80a023c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a02c2:	4620      	mov	r0, r4
 80a02c4:	b004      	add	sp, #16
 80a02c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a02ca:	bf00      	nop
 80a02cc:	080ada74 	.word	0x080ada74

080a02d0 <_ZN4MQTT8netWriteEPhi>:
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


uint16_t MQTT::netWrite(unsigned char *buff, int length) {
 80a02d0:	b510      	push	{r4, lr}
    debug_tls("netWrite!!\n");
    if (tls == false) {
 80a02d2:	f890 4681 	ldrb.w	r4, [r0, #1665]	; 0x681
 80a02d6:	b914      	cbnz	r4, 80a02de <_ZN4MQTT8netWriteEPhi+0xe>
        return tcpClient.write(buff, length);
 80a02d8:	f00c fa66 	bl	80ac7a8 <_ZN9TCPClient5writeEPKhj>
 80a02dc:	e003      	b.n	80a02e6 <_ZN4MQTT8netWriteEPhi+0x16>
    } else {
        return mbedtls_ssl_write(&ssl, buff, length);
 80a02de:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 80a02e2:	f006 ff43 	bl	80a716c <mbedtls_ssl_write>
 80a02e6:	b280      	uxth	r0, r0
    }
}
 80a02e8:	bd10      	pop	{r4, pc}

080a02ea <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a02ea:	b538      	push	{r3, r4, r5, lr}
 80a02ec:	4604      	mov	r4, r0
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
 80a02ee:	69c3      	ldr	r3, [r0, #28]
 80a02f0:	22e0      	movs	r2, #224	; 0xe0
 80a02f2:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a02f4:	69c3      	ldr	r3, [r0, #28]
 80a02f6:	2500      	movs	r5, #0
 80a02f8:	705d      	strb	r5, [r3, #1]
    netWrite(buffer,2);
 80a02fa:	2202      	movs	r2, #2
 80a02fc:	69c1      	ldr	r1, [r0, #28]
 80a02fe:	f7ff ffe7 	bl	80a02d0 <_ZN4MQTT8netWriteEPhi>

    if (tls) {
 80a0302:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 80a0306:	b1bb      	cbz	r3, 80a0338 <_ZN4MQTT10disconnectEv+0x4e>
        debug_tls("tls close\n");
        tlsConnected = false;
        tls = false;
        mbedtls_x509_crt_free(&cacert);
 80a0308:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
    buffer[1] = 0;
    netWrite(buffer,2);

    if (tls) {
        debug_tls("tls close\n");
        tlsConnected = false;
 80a030c:	f884 5680 	strb.w	r5, [r4, #1664]	; 0x680
        tls = false;
 80a0310:	f884 5681 	strb.w	r5, [r4, #1665]	; 0x681
        mbedtls_x509_crt_free(&cacert);
 80a0314:	f005 fa97 	bl	80a5846 <mbedtls_x509_crt_free>
        mbedtls_x509_crt_free(&clicert);
 80a0318:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 80a031c:	f005 fa93 	bl	80a5846 <mbedtls_x509_crt_free>
        mbedtls_pk_free(&pkey);
 80a0320:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 80a0324:	f008 fdc0 	bl	80a8ea8 <mbedtls_pk_free>
        mbedtls_ssl_config_free (&conf);
 80a0328:	f504 7061 	add.w	r0, r4, #900	; 0x384
 80a032c:	f007 f815 	bl	80a735a <mbedtls_ssl_config_free>
        mbedtls_ssl_free (&ssl);
 80a0330:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 80a0334:	f006 ffc3 	bl	80a72be <mbedtls_ssl_free>
    }
    tcpClient.stop();
 80a0338:	4620      	mov	r0, r4
 80a033a:	f00c f963 	bl	80ac604 <_ZN9TCPClient4stopEv>
 80a033e:	f00b fee7 	bl	80ac110 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a0342:	6260      	str	r0, [r4, #36]	; 0x24
 80a0344:	62a0      	str	r0, [r4, #40]	; 0x28
 80a0346:	bd38      	pop	{r3, r4, r5, pc}

080a0348 <_ZN4MQTT11isConnectedEv>:
        return mbedtls_ssl_write(&ssl, buff, length);
    }
}


bool MQTT::isConnected() {
 80a0348:	b510      	push	{r4, lr}
 80a034a:	4604      	mov	r4, r0
    bool rc = (int)tcpClient.connected();
 80a034c:	f00c fa3e 	bl	80ac7cc <_ZN9TCPClient9connectedEv>
    if (tls)
 80a0350:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 80a0354:	b91b      	cbnz	r3, 80a035e <_ZN4MQTT11isConnectedEv+0x16>
    }
}


bool MQTT::isConnected() {
    bool rc = (int)tcpClient.connected();
 80a0356:	3000      	adds	r0, #0
 80a0358:	bf18      	it	ne
 80a035a:	2001      	movne	r0, #1
 80a035c:	bd10      	pop	{r4, pc}
    if (tls)
        return tlsConnected;
 80a035e:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
    return rc;
}
 80a0362:	bd10      	pop	{r4, pc}

080a0364 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a0364:	b510      	push	{r4, lr}
 80a0366:	4604      	mov	r4, r0
    if (isConnected()) {
 80a0368:	f7ff ffee 	bl	80a0348 <_ZN4MQTT11isConnectedEv>
 80a036c:	b128      	cbz	r0, 80a037a <_ZN4MQTTD1Ev+0x16>
        disconnect();
 80a036e:	4620      	mov	r0, r4
 80a0370:	f7ff ffbb 	bl	80a02ea <_ZN4MQTT10disconnectEv>
        free(buffer);
 80a0374:	69e0      	ldr	r0, [r4, #28]
 80a0376:	f00b fff3 	bl	80ac360 <free>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a037a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a037e:	f00c fa55 	bl	80ac82c <_ZN6StringD1Ev>
 80a0382:	4620      	mov	r0, r4
 80a0384:	f7ff ff22 	bl	80a01cc <_ZN9TCPClientD1Ev>
    if (isConnected()) {
        disconnect();
        free(buffer);
    }
}
 80a0388:	4620      	mov	r0, r4
 80a038a:	bd10      	pop	{r4, pc}

080a038c <_GLOBAL__sub_I__ZN4MQTTC2Ev>:
 80a038c:	f00b bea8 	b.w	80ac0e0 <HAL_Pin_Map>

080a0390 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 80a0390:	226c      	movs	r2, #108	; 0x6c
 80a0392:	2100      	movs	r1, #0
 80a0394:	f00d b8e5 	b.w	80ad562 <memset>

080a0398 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 80a0398:	b138      	cbz	r0, 80a03aa <mbedtls_sha256_free+0x12>
 80a039a:	f100 026c 	add.w	r2, r0, #108	; 0x6c

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a039e:	2300      	movs	r3, #0
 80a03a0:	4290      	cmp	r0, r2
 80a03a2:	d002      	beq.n	80a03aa <mbedtls_sha256_free+0x12>
 80a03a4:	7003      	strb	r3, [r0, #0]
 80a03a6:	3001      	adds	r0, #1
 80a03a8:	e7fa      	b.n	80a03a0 <mbedtls_sha256_free+0x8>
 80a03aa:	4770      	bx	lr

080a03ac <mbedtls_sha256_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 80a03ac:	b508      	push	{r3, lr}
    *dst = *src;
 80a03ae:	226c      	movs	r2, #108	; 0x6c
 80a03b0:	f00d f8b1 	bl	80ad516 <memcpy>
 80a03b4:	bd08      	pop	{r3, pc}
	...

080a03b8 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 80a03b8:	2300      	movs	r3, #0
 80a03ba:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 80a03bc:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 80a03be:	b9a1      	cbnz	r1, 80a03ea <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 80a03c0:	4b18      	ldr	r3, [pc, #96]	; (80a0424 <mbedtls_sha256_starts_ret+0x6c>)
 80a03c2:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 80a03c4:	4b18      	ldr	r3, [pc, #96]	; (80a0428 <mbedtls_sha256_starts_ret+0x70>)
 80a03c6:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 80a03c8:	4b18      	ldr	r3, [pc, #96]	; (80a042c <mbedtls_sha256_starts_ret+0x74>)
 80a03ca:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 80a03cc:	4b18      	ldr	r3, [pc, #96]	; (80a0430 <mbedtls_sha256_starts_ret+0x78>)
 80a03ce:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 80a03d0:	4b18      	ldr	r3, [pc, #96]	; (80a0434 <mbedtls_sha256_starts_ret+0x7c>)
 80a03d2:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 80a03d4:	4b18      	ldr	r3, [pc, #96]	; (80a0438 <mbedtls_sha256_starts_ret+0x80>)
 80a03d6:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 80a03d8:	4b18      	ldr	r3, [pc, #96]	; (80a043c <mbedtls_sha256_starts_ret+0x84>)
 80a03da:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 80a03dc:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80a03e0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80a03e4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80a03e8:	e018      	b.n	80a041c <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 80a03ea:	4b15      	ldr	r3, [pc, #84]	; (80a0440 <mbedtls_sha256_starts_ret+0x88>)
 80a03ec:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 80a03ee:	4b15      	ldr	r3, [pc, #84]	; (80a0444 <mbedtls_sha256_starts_ret+0x8c>)
 80a03f0:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 80a03f2:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 80a03f6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80a03fa:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80a03fe:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 80a0400:	4b11      	ldr	r3, [pc, #68]	; (80a0448 <mbedtls_sha256_starts_ret+0x90>)
 80a0402:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 80a0404:	4b11      	ldr	r3, [pc, #68]	; (80a044c <mbedtls_sha256_starts_ret+0x94>)
 80a0406:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 80a0408:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 80a040c:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 80a0410:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80a0414:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 80a0416:	4b0e      	ldr	r3, [pc, #56]	; (80a0450 <mbedtls_sha256_starts_ret+0x98>)
 80a0418:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 80a041a:	4b0e      	ldr	r3, [pc, #56]	; (80a0454 <mbedtls_sha256_starts_ret+0x9c>)
 80a041c:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 80a041e:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 80a0420:	2000      	movs	r0, #0
 80a0422:	4770      	bx	lr
 80a0424:	6a09e667 	.word	0x6a09e667
 80a0428:	bb67ae85 	.word	0xbb67ae85
 80a042c:	3c6ef372 	.word	0x3c6ef372
 80a0430:	a54ff53a 	.word	0xa54ff53a
 80a0434:	510e527f 	.word	0x510e527f
 80a0438:	9b05688c 	.word	0x9b05688c
 80a043c:	1f83d9ab 	.word	0x1f83d9ab
 80a0440:	c1059ed8 	.word	0xc1059ed8
 80a0444:	367cd507 	.word	0x367cd507
 80a0448:	f70e5939 	.word	0xf70e5939
 80a044c:	ffc00b31 	.word	0xffc00b31
 80a0450:	64f98fa7 	.word	0x64f98fa7
 80a0454:	befa4fa4 	.word	0xbefa4fa4

080a0458 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80a0458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a045c:	1d03      	adds	r3, r0, #4
 80a045e:	b0cf      	sub	sp, #316	; 0x13c
 80a0460:	9305      	str	r3, [sp, #20]
 80a0462:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 80a0464:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 80a0466:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80a046a:	ac06      	add	r4, sp, #24
 80a046c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
{
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 80a0470:	3301      	adds	r3, #1
 80a0472:	2b08      	cmp	r3, #8
 80a0474:	d1f7      	bne.n	80a0466 <mbedtls_internal_sha256_process+0xe>
 80a0476:	4608      	mov	r0, r1
 80a0478:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 80a047a:	ac0e      	add	r4, sp, #56	; 0x38
 80a047c:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
 80a0480:	78c3      	ldrb	r3, [r0, #3]
 80a0482:	3004      	adds	r0, #4
 80a0484:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80a0488:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80a048c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80a0490:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80a0494:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80a0498:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 80a049c:	3201      	adds	r2, #1
 80a049e:	2a10      	cmp	r2, #16
 80a04a0:	d1ec      	bne.n	80a047c <mbedtls_internal_sha256_process+0x24>
 80a04a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a04a4:	4c9f      	ldr	r4, [pc, #636]	; (80a0724 <mbedtls_internal_sha256_process+0x2cc>)
 80a04a6:	9300      	str	r3, [sp, #0]
 80a04a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a04aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a04ac:	9f08      	ldr	r7, [sp, #32]
 80a04ae:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80a04b2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80a04b6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80a04ba:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80a04be:	ad0f      	add	r5, sp, #60	; 0x3c
 80a04c0:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80a04c4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80a04c8:	ea4f 22f8 	mov.w	r2, r8, ror #11
 80a04cc:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80a04d0:	ea86 0c0b 	eor.w	ip, r6, fp
 80a04d4:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
 80a04d8:	4401      	add	r1, r0
 80a04da:	ea82 6278 	eor.w	r2, r2, r8, ror #25
 80a04de:	ea0c 0c08 	and.w	ip, ip, r8
 80a04e2:	ea8c 0c06 	eor.w	ip, ip, r6
 80a04e6:	440a      	add	r2, r1
 80a04e8:	9900      	ldr	r1, [sp, #0]
 80a04ea:	4462      	add	r2, ip
 80a04ec:	ea4f 3079 	mov.w	r0, r9, ror #13
 80a04f0:	ea4e 0c09 	orr.w	ip, lr, r9
 80a04f4:	440a      	add	r2, r1
 80a04f6:	ea0c 0c07 	and.w	ip, ip, r7
 80a04fa:	ea0e 0109 	and.w	r1, lr, r9
 80a04fe:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
 80a0502:	ea4c 0101 	orr.w	r1, ip, r1
 80a0506:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
 80a050a:	4408      	add	r0, r1
 80a050c:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80a050e:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80a0510:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80a0512:	6820      	ldr	r0, [r4, #0]
 80a0514:	ea8b 0c08 	eor.w	ip, fp, r8
 80a0518:	4401      	add	r1, r0
 80a051a:	ea0c 0c03 	and.w	ip, ip, r3
 80a051e:	ea4f 20f3 	mov.w	r0, r3, ror #11
 80a0522:	ea8c 0c0b 	eor.w	ip, ip, fp
 80a0526:	440e      	add	r6, r1
 80a0528:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
 80a052c:	eb06 010c 	add.w	r1, r6, ip
 80a0530:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 80a0534:	180e      	adds	r6, r1, r0
 80a0536:	eb06 0c07 	add.w	ip, r6, r7
 80a053a:	ea42 0009 	orr.w	r0, r2, r9
 80a053e:	ea4f 3772 	mov.w	r7, r2, ror #13
 80a0542:	ea02 0109 	and.w	r1, r2, r9
 80a0546:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 80a054a:	ea00 000e 	and.w	r0, r0, lr
 80a054e:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 80a0552:	4308      	orrs	r0, r1
 80a0554:	4438      	add	r0, r7
 80a0556:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80a0558:	6869      	ldr	r1, [r5, #4]
 80a055a:	6866      	ldr	r6, [r4, #4]
 80a055c:	ea83 0708 	eor.w	r7, r3, r8
 80a0560:	440e      	add	r6, r1
 80a0562:	ea07 070c 	and.w	r7, r7, ip
 80a0566:	ea4f 21fc 	mov.w	r1, ip, ror #11
 80a056a:	ea87 0708 	eor.w	r7, r7, r8
 80a056e:	44b3      	add	fp, r6
 80a0570:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
 80a0574:	eb0b 0607 	add.w	r6, fp, r7
 80a0578:	ea81 617c 	eor.w	r1, r1, ip, ror #25
 80a057c:	eb06 0b01 	add.w	fp, r6, r1
 80a0580:	ea4f 3770 	mov.w	r7, r0, ror #13
 80a0584:	ea42 0100 	orr.w	r1, r2, r0
 80a0588:	ea02 0600 	and.w	r6, r2, r0
 80a058c:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
 80a0590:	ea01 0109 	and.w	r1, r1, r9
 80a0594:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
 80a0598:	4331      	orrs	r1, r6
 80a059a:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80a059c:	68ae      	ldr	r6, [r5, #8]
 80a059e:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80a05a0:	4459      	add	r1, fp
 80a05a2:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80a05a4:	443e      	add	r6, r7
 80a05a6:	ea83 0b0c 	eor.w	fp, r3, ip
 80a05aa:	44b0      	add	r8, r6
 80a05ac:	ea0b 0b0e 	and.w	fp, fp, lr
 80a05b0:	ea4f 26fe 	mov.w	r6, lr, ror #11
 80a05b4:	ea8b 0b03 	eor.w	fp, fp, r3
 80a05b8:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 80a05bc:	44d8      	add	r8, fp
 80a05be:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 80a05c2:	4446      	add	r6, r8
 80a05c4:	ea4f 3b71 	mov.w	fp, r1, ror #13
 80a05c8:	ea40 0801 	orr.w	r8, r0, r1
 80a05cc:	ea00 0701 	and.w	r7, r0, r1
 80a05d0:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
 80a05d4:	ea08 0802 	and.w	r8, r8, r2
 80a05d8:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 80a05dc:	ea48 0807 	orr.w	r8, r8, r7
 80a05e0:	44d8      	add	r8, fp
 80a05e2:	44b0      	add	r8, r6
 80a05e4:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 80a05e6:	68e7      	ldr	r7, [r4, #12]
 80a05e8:	68ee      	ldr	r6, [r5, #12]
 80a05ea:	ea8c 0b0e 	eor.w	fp, ip, lr
 80a05ee:	4437      	add	r7, r6
 80a05f0:	ea0b 0b09 	and.w	fp, fp, r9
 80a05f4:	ea8b 0b0c 	eor.w	fp, fp, ip
 80a05f8:	443b      	add	r3, r7
 80a05fa:	eb03 070b 	add.w	r7, r3, fp
 80a05fe:	ea4f 23f9 	mov.w	r3, r9, ror #11
 80a0602:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
 80a0606:	ea83 6379 	eor.w	r3, r3, r9, ror #25
 80a060a:	18fe      	adds	r6, r7, r3
 80a060c:	1993      	adds	r3, r2, r6
 80a060e:	9300      	str	r3, [sp, #0]
 80a0610:	ea4f 3778 	mov.w	r7, r8, ror #13
 80a0614:	ea41 0308 	orr.w	r3, r1, r8
 80a0618:	ea01 0208 	and.w	r2, r1, r8
 80a061c:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
 80a0620:	4003      	ands	r3, r0
 80a0622:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
 80a0626:	4313      	orrs	r3, r2
 80a0628:	443b      	add	r3, r7
 80a062a:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80a062c:	692a      	ldr	r2, [r5, #16]
 80a062e:	6926      	ldr	r6, [r4, #16]
 80a0630:	ea4f 3b73 	mov.w	fp, r3, ror #13
 80a0634:	4432      	add	r2, r6
 80a0636:	4494      	add	ip, r2
 80a0638:	9a00      	ldr	r2, [sp, #0]
 80a063a:	ea8e 0609 	eor.w	r6, lr, r9
 80a063e:	4016      	ands	r6, r2
 80a0640:	ea4f 27f2 	mov.w	r7, r2, ror #11
 80a0644:	ea86 060e 	eor.w	r6, r6, lr
 80a0648:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80a064c:	44b4      	add	ip, r6
 80a064e:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80a0652:	eb0c 0207 	add.w	r2, ip, r7
 80a0656:	ea48 0703 	orr.w	r7, r8, r3
 80a065a:	1886      	adds	r6, r0, r2
 80a065c:	400f      	ands	r7, r1
 80a065e:	ea08 0003 	and.w	r0, r8, r3
 80a0662:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
 80a0666:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 80a066a:	4307      	orrs	r7, r0
 80a066c:	445f      	add	r7, fp
 80a066e:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80a0670:	6960      	ldr	r0, [r4, #20]
 80a0672:	696a      	ldr	r2, [r5, #20]
 80a0674:	3420      	adds	r4, #32
 80a0676:	4410      	add	r0, r2
 80a0678:	9a00      	ldr	r2, [sp, #0]
 80a067a:	4486      	add	lr, r0
 80a067c:	ea89 0c02 	eor.w	ip, r9, r2
 80a0680:	ea0c 0c06 	and.w	ip, ip, r6
 80a0684:	ea8c 0c09 	eor.w	ip, ip, r9
 80a0688:	eb0e 000c 	add.w	r0, lr, ip
 80a068c:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 80a0690:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80a0694:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80a0698:	eb00 020e 	add.w	r2, r0, lr
 80a069c:	ea4f 3077 	mov.w	r0, r7, ror #13
 80a06a0:	ea43 0e07 	orr.w	lr, r3, r7
 80a06a4:	eb01 0b02 	add.w	fp, r1, r2
 80a06a8:	ea0e 0e08 	and.w	lr, lr, r8
 80a06ac:	ea03 0107 	and.w	r1, r3, r7
 80a06b0:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 80a06b4:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 80a06b8:	ea4e 0e01 	orr.w	lr, lr, r1
 80a06bc:	4486      	add	lr, r0
 80a06be:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80a06c0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80a06c4:	69aa      	ldr	r2, [r5, #24]
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 80a06c6:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80a06c8:	4411      	add	r1, r2
 80a06ca:	9a00      	ldr	r2, [sp, #0]
 80a06cc:	4489      	add	r9, r1
 80a06ce:	ea82 0006 	eor.w	r0, r2, r6
 80a06d2:	ea00 000b 	and.w	r0, r0, fp
 80a06d6:	ea80 0002 	eor.w	r0, r0, r2
 80a06da:	eb09 0100 	add.w	r1, r9, r0
 80a06de:	ea4f 29fb 	mov.w	r9, fp, ror #11
 80a06e2:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
 80a06e6:	ea89 697b 	eor.w	r9, r9, fp, ror #25
 80a06ea:	eb01 0209 	add.w	r2, r1, r9
 80a06ee:	ea4f 307e 	mov.w	r0, lr, ror #13
 80a06f2:	ea47 090e 	orr.w	r9, r7, lr
 80a06f6:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 80a06fa:	ea09 0903 	and.w	r9, r9, r3
 80a06fe:	ea07 010e 	and.w	r1, r7, lr
 80a0702:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 80a0706:	ea49 0901 	orr.w	r9, r9, r1
 80a070a:	4481      	add	r9, r0
 80a070c:	4490      	add	r8, r2
 80a070e:	4491      	add	r9, r2
 80a0710:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 80a0714:	f47f aed6 	bne.w	80a04c4 <mbedtls_internal_sha256_process+0x6c>
 80a0718:	2200      	movs	r2, #0
 80a071a:	f8df a00c 	ldr.w	sl, [pc, #12]	; 80a0728 <mbedtls_internal_sha256_process+0x2d0>
 80a071e:	ac0e      	add	r4, sp, #56	; 0x38
 80a0720:	9204      	str	r2, [sp, #16]
 80a0722:	e003      	b.n	80a072c <mbedtls_internal_sha256_process+0x2d4>
 80a0724:	080ad670 	.word	0x080ad670
 80a0728:	080ad66c 	.word	0x080ad66c
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80a072c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80a072e:	6860      	ldr	r0, [r4, #4]
 80a0730:	ea4f 45f2 	mov.w	r5, r2, ror #19
 80a0734:	ea85 4572 	eor.w	r5, r5, r2, ror #17
 80a0738:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
 80a073c:	9a04      	ldr	r2, [sp, #16]
 80a073e:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80a0742:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80a0746:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a0748:	ea4f 4cb0 	mov.w	ip, r0, ror #18
 80a074c:	440a      	add	r2, r1
 80a074e:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
 80a0752:	ea4f 21f8 	mov.w	r1, r8, ror #11
 80a0756:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 80a075a:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
 80a075e:	4415      	add	r5, r2
 80a0760:	eb05 020c 	add.w	r2, r5, ip
 80a0764:	ea81 6578 	eor.w	r5, r1, r8, ror #25
 80a0768:	ea86 010b 	eor.w	r1, r6, fp
 80a076c:	ea01 0108 	and.w	r1, r1, r8
 80a0770:	9203      	str	r2, [sp, #12]
 80a0772:	ea81 0206 	eor.w	r2, r1, r6
 80a0776:	18a9      	adds	r1, r5, r2
 80a0778:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 80a077c:	ea4e 0509 	orr.w	r5, lr, r9
 80a0780:	440a      	add	r2, r1
 80a0782:	9903      	ldr	r1, [sp, #12]
 80a0784:	403d      	ands	r5, r7
 80a0786:	6421      	str	r1, [r4, #64]	; 0x40
 80a0788:	440a      	add	r2, r1
 80a078a:	9900      	ldr	r1, [sp, #0]
 80a078c:	f10a 0a20 	add.w	sl, sl, #32
 80a0790:	440a      	add	r2, r1
 80a0792:	18d3      	adds	r3, r2, r3
 80a0794:	ea4f 3179 	mov.w	r1, r9, ror #13
 80a0798:	9300      	str	r3, [sp, #0]
 80a079a:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 80a079e:	ea0e 0309 	and.w	r3, lr, r9
 80a07a2:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 80a07a6:	432b      	orrs	r3, r5
 80a07a8:	440b      	add	r3, r1
 80a07aa:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80a07ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a07ae:	68a5      	ldr	r5, [r4, #8]
 80a07b0:	ea4f 41f3 	mov.w	r1, r3, ror #19
 80a07b4:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 80a07b8:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 80a07bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a07be:	3420      	adds	r4, #32
 80a07c0:	4403      	add	r3, r0
 80a07c2:	4419      	add	r1, r3
 80a07c4:	ea4f 43b5 	mov.w	r3, r5, ror #18
 80a07c8:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 80a07cc:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
 80a07d0:	eb01 030c 	add.w	r3, r1, ip
 80a07d4:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 80a07d8:	9900      	ldr	r1, [sp, #0]
 80a07da:	ea8b 0c08 	eor.w	ip, fp, r8
 80a07de:	4430      	add	r0, r6
 80a07e0:	ea0c 0c01 	and.w	ip, ip, r1
 80a07e4:	ea8c 0c0b 	eor.w	ip, ip, fp
 80a07e8:	18c1      	adds	r1, r0, r3
 80a07ea:	448c      	add	ip, r1
 80a07ec:	9900      	ldr	r1, [sp, #0]
 80a07ee:	6263      	str	r3, [r4, #36]	; 0x24
 80a07f0:	ea4f 20f1 	mov.w	r0, r1, ror #11
 80a07f4:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 80a07f8:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 80a07fc:	eb00 010c 	add.w	r1, r0, ip
 80a0800:	19c8      	adds	r0, r1, r7
 80a0802:	9001      	str	r0, [sp, #4]
 80a0804:	ea4f 3c72 	mov.w	ip, r2, ror #13
 80a0808:	ea42 0009 	orr.w	r0, r2, r9
 80a080c:	ea02 0709 	and.w	r7, r2, r9
 80a0810:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 80a0814:	ea00 000e 	and.w	r0, r0, lr
 80a0818:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 80a081c:	4338      	orrs	r0, r7
 80a081e:	4460      	add	r0, ip
 80a0820:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80a0822:	9903      	ldr	r1, [sp, #12]
 80a0824:	f854 7c14 	ldr.w	r7, [r4, #-20]
 80a0828:	ea4f 46f1 	mov.w	r6, r1, ror #19
 80a082c:	ea86 4671 	eor.w	r6, r6, r1, ror #17
 80a0830:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
 80a0834:	68e1      	ldr	r1, [r4, #12]
 80a0836:	ea4f 4cb7 	mov.w	ip, r7, ror #18
 80a083a:	4429      	add	r1, r5
 80a083c:	440e      	add	r6, r1
 80a083e:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
 80a0842:	9900      	ldr	r1, [sp, #0]
 80a0844:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
 80a0848:	4466      	add	r6, ip
 80a084a:	ea81 0c08 	eor.w	ip, r1, r8
 80a084e:	9901      	ldr	r1, [sp, #4]
 80a0850:	62a6      	str	r6, [r4, #40]	; 0x28
 80a0852:	ea0c 0c01 	and.w	ip, ip, r1
 80a0856:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80a085a:	ea8c 0c08 	eor.w	ip, ip, r8
 80a085e:	4459      	add	r1, fp
 80a0860:	198d      	adds	r5, r1, r6
 80a0862:	9901      	ldr	r1, [sp, #4]
 80a0864:	44ac      	add	ip, r5
 80a0866:	9d01      	ldr	r5, [sp, #4]
 80a0868:	ea4f 21f1 	mov.w	r1, r1, ror #11
 80a086c:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
 80a0870:	ea81 6175 	eor.w	r1, r1, r5, ror #25
 80a0874:	eb01 050c 	add.w	r5, r1, ip
 80a0878:	ea42 0100 	orr.w	r1, r2, r0
 80a087c:	ea4f 3c70 	mov.w	ip, r0, ror #13
 80a0880:	eb05 0b0e 	add.w	fp, r5, lr
 80a0884:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
 80a0888:	ea02 0e00 	and.w	lr, r2, r0
 80a088c:	ea01 0109 	and.w	r1, r1, r9
 80a0890:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
 80a0894:	ea41 010e 	orr.w	r1, r1, lr
 80a0898:	4461      	add	r1, ip
 80a089a:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80a089c:	ea4f 45f3 	mov.w	r5, r3, ror #19
 80a08a0:	ea85 4573 	eor.w	r5, r5, r3, ror #17
 80a08a4:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
 80a08a8:	6925      	ldr	r5, [r4, #16]
 80a08aa:	f854 cc10 	ldr.w	ip, [r4, #-16]
 80a08ae:	442f      	add	r7, r5
 80a08b0:	443b      	add	r3, r7
 80a08b2:	ea4f 47bc 	mov.w	r7, ip, ror #18
 80a08b6:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
 80a08ba:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
 80a08be:	eb03 070e 	add.w	r7, r3, lr
 80a08c2:	e89d 0028 	ldmia.w	sp, {r3, r5}
 80a08c6:	405d      	eors	r5, r3
 80a08c8:	ea05 050b 	and.w	r5, r5, fp
 80a08cc:	405d      	eors	r5, r3
 80a08ce:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 80a08d2:	ea4f 3e71 	mov.w	lr, r1, ror #13
 80a08d6:	4498      	add	r8, r3
 80a08d8:	44b8      	add	r8, r7
 80a08da:	4445      	add	r5, r8
 80a08dc:	ea4f 28fb 	mov.w	r8, fp, ror #11
 80a08e0:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
 80a08e4:	ea88 687b 	eor.w	r8, r8, fp, ror #25
 80a08e8:	eb08 0305 	add.w	r3, r8, r5
 80a08ec:	eb03 0509 	add.w	r5, r3, r9
 80a08f0:	ea40 0801 	orr.w	r8, r0, r1
 80a08f4:	9502      	str	r5, [sp, #8]
 80a08f6:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 80a08fa:	ea00 0501 	and.w	r5, r0, r1
 80a08fe:	ea08 0802 	and.w	r8, r8, r2
 80a0902:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 80a0906:	ea48 0805 	orr.w	r8, r8, r5
 80a090a:	44f0      	add	r8, lr
 80a090c:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a090e:	ea4f 4ef6 	mov.w	lr, r6, ror #19
 80a0912:	6963      	ldr	r3, [r4, #20]
 80a0914:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
 80a0918:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 80a091c:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
 80a0920:	eb0c 0e03 	add.w	lr, ip, r3
 80a0924:	9b01      	ldr	r3, [sp, #4]
 80a0926:	4476      	add	r6, lr
 80a0928:	ea83 0c0b 	eor.w	ip, r3, fp
 80a092c:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 80a0930:	9b02      	ldr	r3, [sp, #8]
 80a0932:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 80a0936:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
 80a093a:	ea0c 0c03 	and.w	ip, ip, r3
 80a093e:	9b01      	ldr	r3, [sp, #4]
 80a0940:	eb06 0e09 	add.w	lr, r6, r9
 80a0944:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 80a0948:	ea8c 0c03 	eor.w	ip, ip, r3
 80a094c:	9b00      	ldr	r3, [sp, #0]
 80a094e:	4476      	add	r6, lr
 80a0950:	441e      	add	r6, r3
 80a0952:	9b02      	ldr	r3, [sp, #8]
 80a0954:	44b4      	add	ip, r6
 80a0956:	9e02      	ldr	r6, [sp, #8]
 80a0958:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80a095c:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
 80a0960:	ea83 6376 	eor.w	r3, r3, r6, ror #25
 80a0964:	eb03 060c 	add.w	r6, r3, ip
 80a0968:	1993      	adds	r3, r2, r6
 80a096a:	9300      	str	r3, [sp, #0]
 80a096c:	ea41 0308 	orr.w	r3, r1, r8
 80a0970:	ea01 0208 	and.w	r2, r1, r8
 80a0974:	4003      	ands	r3, r0
 80a0976:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0978:	ea4f 42f7 	mov.w	r2, r7, ror #19
 80a097c:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80a0980:	62e7      	str	r7, [r4, #44]	; 0x2c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a0982:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0986:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
 80a098a:	69a2      	ldr	r2, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a098c:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0990:	f854 9c08 	ldr.w	r9, [r4, #-8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a0994:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0998:	4415      	add	r5, r2
 80a099a:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a099c:	4463      	add	r3, ip
 80a099e:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a09a0:	442f      	add	r7, r5
 80a09a2:	ea8b 0602 	eor.w	r6, fp, r2
 80a09a6:	ea4f 45b9 	mov.w	r5, r9, ror #18
 80a09aa:	9a00      	ldr	r2, [sp, #0]
 80a09ac:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
 80a09b0:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
 80a09b4:	4016      	ands	r6, r2
 80a09b6:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 80a09ba:	443d      	add	r5, r7
 80a09bc:	9f01      	ldr	r7, [sp, #4]
 80a09be:	442a      	add	r2, r5
 80a09c0:	443a      	add	r2, r7
 80a09c2:	ea86 060b 	eor.w	r6, r6, fp
 80a09c6:	4416      	add	r6, r2
 80a09c8:	9a00      	ldr	r2, [sp, #0]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a09ca:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a09ce:	ea4f 27f2 	mov.w	r7, r2, ror #11
 80a09d2:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80a09d6:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80a09da:	19ba      	adds	r2, r7, r6
 80a09dc:	1886      	adds	r6, r0, r2
 80a09de:	ea4f 3073 	mov.w	r0, r3, ror #13
 80a09e2:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
 80a09e6:	ea48 0703 	orr.w	r7, r8, r3
 80a09ea:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
 80a09ee:	400f      	ands	r7, r1
 80a09f0:	ea08 0003 	and.w	r0, r8, r3
 80a09f4:	4307      	orrs	r7, r0
 80a09f6:	4467      	add	r7, ip
 80a09f8:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80a09fa:	ea4f 42fe 	mov.w	r2, lr, ror #19
 80a09fe:	ea82 427e 	eor.w	r2, r2, lr, ror #17
 80a0a02:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
 80a0a06:	69e2      	ldr	r2, [r4, #28]
 80a0a08:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80a0a0c:	4491      	add	r9, r2
 80a0a0e:	eb0e 0209 	add.w	r2, lr, r9
 80a0a12:	ea4f 49b0 	mov.w	r9, r0, ror #18
 80a0a16:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
 80a0a1a:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
 80a0a1e:	4491      	add	r9, r2
 80a0a20:	9a02      	ldr	r2, [sp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0a22:	6365      	str	r5, [r4, #52]	; 0x34
 80a0a24:	4696      	mov	lr, r2
 80a0a26:	9a00      	ldr	r2, [sp, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80a0a28:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 80a0a2c:	ea8e 0c02 	eor.w	ip, lr, r2
 80a0a30:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
 80a0a34:	ea0c 0c06 	and.w	ip, ip, r6
 80a0a38:	ea8c 0c0e 	eor.w	ip, ip, lr
 80a0a3c:	444a      	add	r2, r9
 80a0a3e:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 80a0a42:	445a      	add	r2, fp
 80a0a44:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80a0a48:	4462      	add	r2, ip
 80a0a4a:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80a0a4e:	4472      	add	r2, lr
 80a0a50:	ea4f 3c77 	mov.w	ip, r7, ror #13
 80a0a54:	ea43 0e07 	orr.w	lr, r3, r7
 80a0a58:	eb01 0b02 	add.w	fp, r1, r2
 80a0a5c:	ea0e 0e08 	and.w	lr, lr, r8
 80a0a60:	ea03 0107 	and.w	r1, r3, r7
 80a0a64:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80a0a68:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
 80a0a6c:	ea4e 0e01 	orr.w	lr, lr, r1
 80a0a70:	44e6      	add	lr, ip
 80a0a72:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80a0a74:	ea4f 42f5 	mov.w	r2, r5, ror #19
 80a0a78:	6821      	ldr	r1, [r4, #0]
 80a0a7a:	ea82 4275 	eor.w	r2, r2, r5, ror #17
 80a0a7e:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
 80a0a82:	9a03      	ldr	r2, [sp, #12]
 80a0a84:	ea4f 4cb1 	mov.w	ip, r1, ror #18
 80a0a88:	4410      	add	r0, r2
 80a0a8a:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
 80a0a8e:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
 80a0a92:	4405      	add	r5, r0
 80a0a94:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
 80a0a98:	440d      	add	r5, r1
 80a0a9a:	9902      	ldr	r1, [sp, #8]
 80a0a9c:	442a      	add	r2, r5
 80a0a9e:	eb02 0901 	add.w	r9, r2, r1
 80a0aa2:	9a00      	ldr	r2, [sp, #0]
 80a0aa4:	ea4f 307e 	mov.w	r0, lr, ror #13
 80a0aa8:	ea82 0106 	eor.w	r1, r2, r6
 80a0aac:	ea01 010b 	and.w	r1, r1, fp
 80a0ab0:	4051      	eors	r1, r2
 80a0ab2:	ea4f 22fb 	mov.w	r2, fp, ror #11
 80a0ab6:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 80a0aba:	4489      	add	r9, r1
 80a0abc:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 80a0ac0:	444a      	add	r2, r9
 80a0ac2:	ea47 090e 	orr.w	r9, r7, lr
 80a0ac6:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 80a0aca:	ea09 0903 	and.w	r9, r9, r3
 80a0ace:	ea07 010e 	and.w	r1, r7, lr
 80a0ad2:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 80a0ad6:	ea49 0901 	orr.w	r9, r9, r1
 80a0ada:	4481      	add	r9, r0
 80a0adc:	4490      	add	r8, r2
 80a0ade:	4491      	add	r9, r2
 80a0ae0:	9a04      	ldr	r2, [sp, #16]
 80a0ae2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a0ae4:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 80a0ae6:	2a30      	cmp	r2, #48	; 0x30
 80a0ae8:	9204      	str	r2, [sp, #16]
 80a0aea:	f47f ae1f 	bne.w	80a072c <mbedtls_internal_sha256_process+0x2d4>
 80a0aee:	9a00      	ldr	r2, [sp, #0]
 80a0af0:	9309      	str	r3, [sp, #36]	; 0x24
 80a0af2:	920d      	str	r2, [sp, #52]	; 0x34
 80a0af4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a0af8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80a0afc:	960c      	str	r6, [sp, #48]	; 0x30
 80a0afe:	f8cd 9018 	str.w	r9, [sp, #24]
 80a0b02:	f8cd e01c 	str.w	lr, [sp, #28]
 80a0b06:	9708      	str	r7, [sp, #32]
 80a0b08:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 80a0b0a:	9a05      	ldr	r2, [sp, #20]
 80a0b0c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80a0b10:	9205      	str	r2, [sp, #20]
 80a0b12:	aa06      	add	r2, sp, #24
 80a0b14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80a0b18:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 80a0b1a:	440a      	add	r2, r1
 80a0b1c:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80a0b1e:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 80a0b20:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80a0b22:	d1f2      	bne.n	80a0b0a <mbedtls_internal_sha256_process+0x6b2>
        ctx->state[i] += A[i];

    return( 0 );
}
 80a0b24:	2000      	movs	r0, #0
 80a0b26:	b04f      	add	sp, #316	; 0x13c
 80a0b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0b2c <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80a0b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0b30:	4604      	mov	r4, r0
 80a0b32:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 80a0b34:	4615      	mov	r5, r2
 80a0b36:	b382      	cbz	r2, 80a0b9a <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80a0b38:	6803      	ldr	r3, [r0, #0]
 80a0b3a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a0b3e:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80a0b40:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a0b42:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80a0b44:	bf82      	ittt	hi
 80a0b46:	6863      	ldrhi	r3, [r4, #4]
 80a0b48:	3301      	addhi	r3, #1
 80a0b4a:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 80a0b4c:	b180      	cbz	r0, 80a0b70 <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80a0b4e:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80a0b52:	42ba      	cmp	r2, r7
 80a0b54:	d31b      	bcc.n	80a0b8e <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80a0b56:	f104 0828 	add.w	r8, r4, #40	; 0x28
 80a0b5a:	463a      	mov	r2, r7
 80a0b5c:	4440      	add	r0, r8
 80a0b5e:	f00c fcda 	bl	80ad516 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80a0b62:	4641      	mov	r1, r8
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	f7ff fc77 	bl	80a0458 <mbedtls_internal_sha256_process>
 80a0b6a:	b9b8      	cbnz	r0, 80a0b9c <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
 80a0b6c:	443e      	add	r6, r7
        ilen  -= fill;
 80a0b6e:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80a0b70:	462f      	mov	r7, r5
 80a0b72:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 80a0b74:	2f3f      	cmp	r7, #63	; 0x3f
 80a0b76:	4431      	add	r1, r6
 80a0b78:	d905      	bls.n	80a0b86 <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80a0b7a:	4620      	mov	r0, r4
 80a0b7c:	f7ff fc6c 	bl	80a0458 <mbedtls_internal_sha256_process>
 80a0b80:	b960      	cbnz	r0, 80a0b9c <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 80a0b82:	3f40      	subs	r7, #64	; 0x40
 80a0b84:	e7f5      	b.n	80a0b72 <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
 80a0b86:	b147      	cbz	r7, 80a0b9a <mbedtls_sha256_update_ret+0x6e>
 80a0b88:	463d      	mov	r5, r7
 80a0b8a:	460e      	mov	r6, r1
 80a0b8c:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80a0b8e:	3428      	adds	r4, #40	; 0x28
 80a0b90:	462a      	mov	r2, r5
 80a0b92:	4631      	mov	r1, r6
 80a0b94:	4420      	add	r0, r4
 80a0b96:	f00c fcbe 	bl	80ad516 <memcpy>

    return( 0 );
 80a0b9a:	2000      	movs	r0, #0
}
 80a0b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0ba0 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80a0ba0:	b570      	push	{r4, r5, r6, lr}
 80a0ba2:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a0ba4:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 80a0ba6:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a0ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 80a0bac:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 80a0bae:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a0bb0:	4423      	add	r3, r4
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80a0bb2:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a0bb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80a0bb8:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
 80a0bbc:	d804      	bhi.n	80a0bc8 <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 80a0bbe:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80a0bc2:	2100      	movs	r1, #0
 80a0bc4:	4430      	add	r0, r6
 80a0bc6:	e00e      	b.n	80a0be6 <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 80a0bc8:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80a0bcc:	2100      	movs	r1, #0
 80a0bce:	4430      	add	r0, r6
 80a0bd0:	f00c fcc7 	bl	80ad562 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80a0bd4:	4631      	mov	r1, r6
 80a0bd6:	4620      	mov	r0, r4
 80a0bd8:	f7ff fc3e 	bl	80a0458 <mbedtls_internal_sha256_process>
 80a0bdc:	2800      	cmp	r0, #0
 80a0bde:	d175      	bne.n	80a0ccc <mbedtls_sha256_finish_ret+0x12c>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 80a0be0:	4601      	mov	r1, r0
 80a0be2:	4630      	mov	r0, r6
 80a0be4:	2238      	movs	r2, #56	; 0x38
 80a0be6:	f00c fcbc 	bl	80ad562 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80a0bea:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 80a0bec:	6861      	ldr	r1, [r4, #4]
 80a0bee:	0f5a      	lsrs	r2, r3, #29
 80a0bf0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a0bf4:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80a0bf6:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a0bf8:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 80a0bfc:	0c11      	lsrs	r1, r2, #16
 80a0bfe:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 80a0c02:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 80a0c06:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a0c08:	0e1a      	lsrs	r2, r3, #24
 80a0c0a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 80a0c0e:	0c1a      	lsrs	r2, r3, #16
 80a0c10:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80a0c14:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a0c16:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a0c1a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80a0c1e:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80a0c22:	4631      	mov	r1, r6
 80a0c24:	4620      	mov	r0, r4
 80a0c26:	f7ff fc17 	bl	80a0458 <mbedtls_internal_sha256_process>
 80a0c2a:	4603      	mov	r3, r0
 80a0c2c:	2800      	cmp	r0, #0
 80a0c2e:	d14c      	bne.n	80a0cca <mbedtls_sha256_finish_ret+0x12a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80a0c30:	7ae2      	ldrb	r2, [r4, #11]
 80a0c32:	702a      	strb	r2, [r5, #0]
 80a0c34:	8962      	ldrh	r2, [r4, #10]
 80a0c36:	706a      	strb	r2, [r5, #1]
 80a0c38:	68a2      	ldr	r2, [r4, #8]
 80a0c3a:	0a12      	lsrs	r2, r2, #8
 80a0c3c:	70aa      	strb	r2, [r5, #2]
 80a0c3e:	68a2      	ldr	r2, [r4, #8]
 80a0c40:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80a0c42:	7be2      	ldrb	r2, [r4, #15]
 80a0c44:	712a      	strb	r2, [r5, #4]
 80a0c46:	89e2      	ldrh	r2, [r4, #14]
 80a0c48:	716a      	strb	r2, [r5, #5]
 80a0c4a:	68e2      	ldr	r2, [r4, #12]
 80a0c4c:	0a12      	lsrs	r2, r2, #8
 80a0c4e:	71aa      	strb	r2, [r5, #6]
 80a0c50:	68e2      	ldr	r2, [r4, #12]
 80a0c52:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80a0c54:	7ce2      	ldrb	r2, [r4, #19]
 80a0c56:	722a      	strb	r2, [r5, #8]
 80a0c58:	8a62      	ldrh	r2, [r4, #18]
 80a0c5a:	726a      	strb	r2, [r5, #9]
 80a0c5c:	6922      	ldr	r2, [r4, #16]
 80a0c5e:	0a12      	lsrs	r2, r2, #8
 80a0c60:	72aa      	strb	r2, [r5, #10]
 80a0c62:	6922      	ldr	r2, [r4, #16]
 80a0c64:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80a0c66:	7de2      	ldrb	r2, [r4, #23]
 80a0c68:	732a      	strb	r2, [r5, #12]
 80a0c6a:	8ae2      	ldrh	r2, [r4, #22]
 80a0c6c:	736a      	strb	r2, [r5, #13]
 80a0c6e:	6962      	ldr	r2, [r4, #20]
 80a0c70:	0a12      	lsrs	r2, r2, #8
 80a0c72:	73aa      	strb	r2, [r5, #14]
 80a0c74:	6962      	ldr	r2, [r4, #20]
 80a0c76:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80a0c78:	7ee2      	ldrb	r2, [r4, #27]
 80a0c7a:	742a      	strb	r2, [r5, #16]
 80a0c7c:	8b62      	ldrh	r2, [r4, #26]
 80a0c7e:	746a      	strb	r2, [r5, #17]
 80a0c80:	69a2      	ldr	r2, [r4, #24]
 80a0c82:	0a12      	lsrs	r2, r2, #8
 80a0c84:	74aa      	strb	r2, [r5, #18]
 80a0c86:	69a2      	ldr	r2, [r4, #24]
 80a0c88:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 80a0c8a:	7fe2      	ldrb	r2, [r4, #31]
 80a0c8c:	752a      	strb	r2, [r5, #20]
 80a0c8e:	8be2      	ldrh	r2, [r4, #30]
 80a0c90:	756a      	strb	r2, [r5, #21]
 80a0c92:	69e2      	ldr	r2, [r4, #28]
 80a0c94:	0a12      	lsrs	r2, r2, #8
 80a0c96:	75aa      	strb	r2, [r5, #22]
 80a0c98:	69e2      	ldr	r2, [r4, #28]
 80a0c9a:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80a0c9c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80a0ca0:	762a      	strb	r2, [r5, #24]
 80a0ca2:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80a0ca4:	766a      	strb	r2, [r5, #25]
 80a0ca6:	6a22      	ldr	r2, [r4, #32]
 80a0ca8:	0a12      	lsrs	r2, r2, #8
 80a0caa:	76aa      	strb	r2, [r5, #26]
 80a0cac:	6a22      	ldr	r2, [r4, #32]
 80a0cae:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
 80a0cb0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80a0cb2:	b950      	cbnz	r0, 80a0cca <mbedtls_sha256_finish_ret+0x12a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 80a0cb4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80a0cb8:	772b      	strb	r3, [r5, #28]
 80a0cba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80a0cbc:	776b      	strb	r3, [r5, #29]
 80a0cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a0cc0:	0a1b      	lsrs	r3, r3, #8
 80a0cc2:	77ab      	strb	r3, [r5, #30]
 80a0cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a0cc6:	77eb      	strb	r3, [r5, #31]
 80a0cc8:	bd70      	pop	{r4, r5, r6, pc}

    return( 0 );
 80a0cca:	4618      	mov	r0, r3
}
 80a0ccc:	bd70      	pop	{r4, r5, r6, pc}

080a0cce <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 80a0cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0cd0:	461f      	mov	r7, r3
 80a0cd2:	b09d      	sub	sp, #116	; 0x74
 80a0cd4:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 80a0cd6:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 80a0cd8:	460e      	mov	r6, r1
 80a0cda:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 80a0cdc:	f7ff fb58 	bl	80a0390 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 80a0ce0:	4639      	mov	r1, r7
 80a0ce2:	a801      	add	r0, sp, #4
 80a0ce4:	f7ff fb68 	bl	80a03b8 <mbedtls_sha256_starts_ret>
 80a0ce8:	4601      	mov	r1, r0
 80a0cea:	b958      	cbnz	r0, 80a0d04 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 80a0cec:	4629      	mov	r1, r5
 80a0cee:	4632      	mov	r2, r6
 80a0cf0:	a801      	add	r0, sp, #4
 80a0cf2:	f7ff ff1b 	bl	80a0b2c <mbedtls_sha256_update_ret>
 80a0cf6:	4601      	mov	r1, r0
 80a0cf8:	b920      	cbnz	r0, 80a0d04 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 80a0cfa:	4621      	mov	r1, r4
 80a0cfc:	a801      	add	r0, sp, #4
 80a0cfe:	f7ff ff4f 	bl	80a0ba0 <mbedtls_sha256_finish_ret>
 80a0d02:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 80a0d04:	a801      	add	r0, sp, #4
 80a0d06:	f7ff fb47 	bl	80a0398 <mbedtls_sha256_free>

    return( ret );
}
 80a0d0a:	4608      	mov	r0, r1
 80a0d0c:	b01d      	add	sp, #116	; 0x74
 80a0d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0d10 <mbedtls_cipher_get_block_size>:
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 80a0d10:	b110      	cbz	r0, 80a0d18 <mbedtls_cipher_get_block_size+0x8>
 80a0d12:	6800      	ldr	r0, [r0, #0]
 80a0d14:	b100      	cbz	r0, 80a0d18 <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 80a0d16:	6940      	ldr	r0, [r0, #20]
}
 80a0d18:	4770      	bx	lr

080a0d1a <_ZL16add_pkcs_paddingPhjj>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 80a0d1a:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
 80a0d1c:	1a89      	subs	r1, r1, r2
 80a0d1e:	2400      	movs	r4, #0
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 80a0d20:	b2e3      	uxtb	r3, r4
 80a0d22:	4299      	cmp	r1, r3
 80a0d24:	f104 0401 	add.w	r4, r4, #1
 80a0d28:	d902      	bls.n	80a0d30 <_ZL16add_pkcs_paddingPhjj+0x16>
        output[data_len + i] = (unsigned char) padding_len;
 80a0d2a:	4403      	add	r3, r0
 80a0d2c:	5499      	strb	r1, [r3, r2]
        size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 80a0d2e:	e7f7      	b.n	80a0d20 <_ZL16add_pkcs_paddingPhjj+0x6>
 80a0d30:	bd10      	pop	{r4, pc}
	...

080a0d34 <_ZL16get_pkcs_paddingPhjPj>:
        output[data_len + i] = (unsigned char) padding_len;
}

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 80a0d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 80a0d36:	b300      	cbz	r0, 80a0d7a <_ZL16get_pkcs_paddingPhjPj+0x46>
 80a0d38:	b1fa      	cbz	r2, 80a0d7a <_ZL16get_pkcs_paddingPhjPj+0x46>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 80a0d3a:	1843      	adds	r3, r0, r1
 80a0d3c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 80a0d40:	fab4 f384 	clz	r3, r4
 80a0d44:	095b      	lsrs	r3, r3, #5
 80a0d46:	42a1      	cmp	r1, r4
 80a0d48:	bf38      	it	cc
 80a0d4a:	f043 0301 	orrcc.w	r3, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 80a0d4e:	1b0f      	subs	r7, r1, r4
 80a0d50:	6017      	str	r7, [r2, #0]
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 80a0d52:	2200      	movs	r2, #0
 80a0d54:	428a      	cmp	r2, r1
 80a0d56:	d00b      	beq.n	80a0d70 <_ZL16get_pkcs_paddingPhjPj+0x3c>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 80a0d58:	5c85      	ldrb	r5, [r0, r2]
 80a0d5a:	42ba      	cmp	r2, r7
 80a0d5c:	ea84 0605 	eor.w	r6, r4, r5
 80a0d60:	bf34      	ite	cc
 80a0d62:	2500      	movcc	r5, #0
 80a0d64:	2501      	movcs	r5, #1
 80a0d66:	4375      	muls	r5, r6
 80a0d68:	432b      	orrs	r3, r5
 80a0d6a:	b2db      	uxtb	r3, r3
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 80a0d6c:	3201      	adds	r2, #1
 80a0d6e:	e7f1      	b.n	80a0d54 <_ZL16get_pkcs_paddingPhjPj+0x20>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 80a0d70:	2b00      	cmp	r3, #0
 80a0d72:	4803      	ldr	r0, [pc, #12]	; (80a0d80 <_ZL16get_pkcs_paddingPhjPj+0x4c>)
 80a0d74:	bf08      	it	eq
 80a0d76:	2000      	moveq	r0, #0
 80a0d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a0d7a:	4802      	ldr	r0, [pc, #8]	; (80a0d84 <_ZL16get_pkcs_paddingPhjPj+0x50>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 80a0d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0d7e:	bf00      	nop
 80a0d80:	ffff9e00 	.word	0xffff9e00
 80a0d84:	ffff9f00 	.word	0xffff9f00

080a0d88 <_ZL25add_one_and_zeros_paddingPhjj>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 80a0d88:	2380      	movs	r3, #128	; 0x80
/*
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 80a0d8a:	b530      	push	{r4, r5, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 80a0d8c:	5483      	strb	r3, [r0, r2]
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 80a0d8e:	1a89      	subs	r1, r1, r2
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80a0d90:	2301      	movs	r3, #1
        output[data_len + i] = 0x00;
 80a0d92:	2500      	movs	r5, #0
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80a0d94:	4299      	cmp	r1, r3
 80a0d96:	d904      	bls.n	80a0da2 <_ZL25add_one_and_zeros_paddingPhjj+0x1a>
        output[data_len + i] = 0x00;
 80a0d98:	18c4      	adds	r4, r0, r3
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80a0d9a:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 80a0d9c:	54a5      	strb	r5, [r4, r2]
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80a0d9e:	b2db      	uxtb	r3, r3
 80a0da0:	e7f8      	b.n	80a0d94 <_ZL25add_one_and_zeros_paddingPhjj+0xc>
 80a0da2:	bd30      	pop	{r4, r5, pc}

080a0da4 <_ZL25add_zeros_and_len_paddingPhjj>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 80a0da4:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80a0da6:	2301      	movs	r3, #1
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 80a0da8:	1a8d      	subs	r5, r1, r2
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
        output[data_len + i - 1] = 0x00;
 80a0daa:	2600      	movs	r6, #0
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80a0dac:	429d      	cmp	r5, r3
 80a0dae:	d906      	bls.n	80a0dbe <_ZL25add_zeros_and_len_paddingPhjj+0x1a>
        output[data_len + i - 1] = 0x00;
 80a0db0:	18c4      	adds	r4, r0, r3
 80a0db2:	4414      	add	r4, r2
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80a0db4:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 80a0db6:	f804 6c01 	strb.w	r6, [r4, #-1]
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80a0dba:	b2db      	uxtb	r3, r3
 80a0dbc:	e7f6      	b.n	80a0dac <_ZL25add_zeros_and_len_paddingPhjj+0x8>
        output[data_len + i - 1] = 0x00;
    output[output_len - 1] = (unsigned char) padding_len;
 80a0dbe:	4401      	add	r1, r0
 80a0dc0:	f801 5c01 	strb.w	r5, [r1, #-1]
 80a0dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0dc8 <_ZL25get_zeros_and_len_paddingPhjPj>:
}

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 80a0dc8:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 80a0dca:	b1f0      	cbz	r0, 80a0e0a <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
 80a0dcc:	b1ea      	cbz	r2, 80a0e0a <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 80a0dce:	1e4e      	subs	r6, r1, #1
 80a0dd0:	5d84      	ldrb	r4, [r0, r6]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 80a0dd2:	fab4 f384 	clz	r3, r4

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 80a0dd6:	1b0d      	subs	r5, r1, r4

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 80a0dd8:	095b      	lsrs	r3, r3, #5
 80a0dda:	42a1      	cmp	r1, r4
 80a0ddc:	bf2c      	ite	cs
 80a0dde:	4619      	movcs	r1, r3
 80a0de0:	f043 0101 	orrcc.w	r1, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 80a0de4:	6015      	str	r5, [r2, #0]
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 80a0de6:	2300      	movs	r3, #0
 80a0de8:	42b3      	cmp	r3, r6
 80a0dea:	d209      	bcs.n	80a0e00 <_ZL25get_zeros_and_len_paddingPhjPj+0x38>
        bad |= input[i] * ( i >= pad_idx );
 80a0dec:	42ab      	cmp	r3, r5
 80a0dee:	5cc4      	ldrb	r4, [r0, r3]
 80a0df0:	bf34      	ite	cc
 80a0df2:	2200      	movcc	r2, #0
 80a0df4:	2201      	movcs	r2, #1
 80a0df6:	4362      	muls	r2, r4
 80a0df8:	4311      	orrs	r1, r2
 80a0dfa:	b2c9      	uxtb	r1, r1
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 80a0dfc:	3301      	adds	r3, #1
 80a0dfe:	e7f3      	b.n	80a0de8 <_ZL25get_zeros_and_len_paddingPhjPj+0x20>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 80a0e00:	2900      	cmp	r1, #0
 80a0e02:	4803      	ldr	r0, [pc, #12]	; (80a0e10 <_ZL25get_zeros_and_len_paddingPhjPj+0x48>)
 80a0e04:	bf08      	it	eq
 80a0e06:	2000      	moveq	r0, #0
 80a0e08:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a0e0a:	4802      	ldr	r0, [pc, #8]	; (80a0e14 <_ZL25get_zeros_and_len_paddingPhjPj+0x4c>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 80a0e0c:	bd70      	pop	{r4, r5, r6, pc}
 80a0e0e:	bf00      	nop
 80a0e10:	ffff9e00 	.word	0xffff9e00
 80a0e14:	ffff9f00 	.word	0xffff9f00

080a0e18 <_ZL17add_zeros_paddingPhjj>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 80a0e18:	b510      	push	{r4, lr}
 80a0e1a:	4402      	add	r2, r0
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 80a0e1c:	2300      	movs	r3, #0
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 80a0e1e:	1a14      	subs	r4, r2, r0
 80a0e20:	42a1      	cmp	r1, r4
 80a0e22:	d902      	bls.n	80a0e2a <_ZL17add_zeros_paddingPhjj+0x12>
        output[i] = 0x00;
 80a0e24:	f802 3b01 	strb.w	r3, [r2], #1
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 80a0e28:	e7f9      	b.n	80a0e1e <_ZL17add_zeros_paddingPhjj+0x6>
 80a0e2a:	bd10      	pop	{r4, pc}

080a0e2c <_ZL14get_no_paddingPhjPj>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 80a0e2c:	b118      	cbz	r0, 80a0e36 <_ZL14get_no_paddingPhjPj+0xa>
 80a0e2e:	b112      	cbz	r2, 80a0e36 <_ZL14get_no_paddingPhjPj+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 80a0e30:	6011      	str	r1, [r2, #0]

    return( 0 );
 80a0e32:	2000      	movs	r0, #0
 80a0e34:	4770      	bx	lr
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a0e36:	4801      	ldr	r0, [pc, #4]	; (80a0e3c <_ZL14get_no_paddingPhjPj+0x10>)

    *data_len = input_len;

    return( 0 );
}
 80a0e38:	4770      	bx	lr
 80a0e3a:	bf00      	nop
 80a0e3c:	ffff9f00 	.word	0xffff9f00

080a0e40 <_ZL25get_one_and_zeros_paddingPhjPj>:
        output[data_len + i] = 0x00;
}

static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 80a0e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
 80a0e42:	b1f0      	cbz	r0, 80a0e82 <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
 80a0e44:	b1ea      	cbz	r2, 80a0e82 <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
    *data_len = 0;
 80a0e46:	2300      	movs	r3, #0
 80a0e48:	6013      	str	r3, [r2, #0]
 80a0e4a:	4408      	add	r0, r1
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
 80a0e4c:	2480      	movs	r4, #128	; 0x80
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 80a0e4e:	b199      	cbz	r1, 80a0e78 <_ZL25get_one_and_zeros_paddingPhjPj+0x38>
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 80a0e50:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 80a0e54:	3901      	subs	r1, #1
 80a0e56:	2d00      	cmp	r5, #0
 80a0e58:	bf0c      	ite	eq
 80a0e5a:	461d      	moveq	r5, r3
 80a0e5c:	f043 0501 	orrne.w	r5, r3, #1
 80a0e60:	406b      	eors	r3, r5
        *data_len |= ( i - 1 ) * ( done != prev_done );
 80a0e62:	fb01 f603 	mul.w	r6, r1, r3
 80a0e66:	6817      	ldr	r7, [r2, #0]
 80a0e68:	433e      	orrs	r6, r7
 80a0e6a:	6016      	str	r6, [r2, #0]
        bad ^= input[i - 1] * ( done != prev_done );
 80a0e6c:	7806      	ldrb	r6, [r0, #0]
 80a0e6e:	4373      	muls	r3, r6
 80a0e70:	405c      	eors	r4, r3
 80a0e72:	b2e4      	uxtb	r4, r4
    bad = 0x80;
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 80a0e74:	462b      	mov	r3, r5
 80a0e76:	e7ea      	b.n	80a0e4e <_ZL25get_one_and_zeros_paddingPhjPj+0xe>
        *data_len |= ( i - 1 ) * ( done != prev_done );
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 80a0e78:	2c00      	cmp	r4, #0
 80a0e7a:	4803      	ldr	r0, [pc, #12]	; (80a0e88 <_ZL25get_one_and_zeros_paddingPhjPj+0x48>)
 80a0e7c:	bf08      	it	eq
 80a0e7e:	2000      	moveq	r0, #0
 80a0e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a0e82:	4802      	ldr	r0, [pc, #8]	; (80a0e8c <_ZL25get_one_and_zeros_paddingPhjPj+0x4c>)
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );

}
 80a0e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0e86:	bf00      	nop
 80a0e88:	ffff9e00 	.word	0xffff9e00
 80a0e8c:	ffff9f00 	.word	0xffff9f00

080a0e90 <_ZL17get_zeros_paddingPhjPj>:
        output[i] = 0x00;
}

static int get_zeros_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 80a0e90:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
 80a0e92:	b1a8      	cbz	r0, 80a0ec0 <_ZL17get_zeros_paddingPhjPj+0x30>
 80a0e94:	b1a2      	cbz	r2, 80a0ec0 <_ZL17get_zeros_paddingPhjPj+0x30>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = 0;
 80a0e96:	2300      	movs	r3, #0
 80a0e98:	6013      	str	r3, [r2, #0]
 80a0e9a:	4401      	add	r1, r0
    for( i = input_len; i > 0; i-- )
 80a0e9c:	4281      	cmp	r1, r0
 80a0e9e:	eba1 0400 	sub.w	r4, r1, r0
 80a0ea2:	d00f      	beq.n	80a0ec4 <_ZL17get_zeros_paddingPhjPj+0x34>
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 80a0ea4:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 80a0ea8:	2d00      	cmp	r5, #0
 80a0eaa:	bf0c      	ite	eq
 80a0eac:	461d      	moveq	r5, r3
 80a0eae:	f043 0501 	orrne.w	r5, r3, #1
        *data_len |= i * ( done != prev_done );
 80a0eb2:	406b      	eors	r3, r5
 80a0eb4:	4363      	muls	r3, r4
 80a0eb6:	6814      	ldr	r4, [r2, #0]
 80a0eb8:	4323      	orrs	r3, r4
 80a0eba:	6013      	str	r3, [r2, #0]

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 80a0ebc:	462b      	mov	r3, r5
 80a0ebe:	e7ed      	b.n	80a0e9c <_ZL17get_zeros_paddingPhjPj+0xc>
{
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a0ec0:	4801      	ldr	r0, [pc, #4]	; (80a0ec8 <_ZL17get_zeros_paddingPhjPj+0x38>)
 80a0ec2:	bd30      	pop	{r4, r5, pc}

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 80a0ec4:	2000      	movs	r0, #0
        done |= ( input[i-1] != 0 );
        *data_len |= i * ( done != prev_done );
    }

    return( 0 );
}
 80a0ec6:	bd30      	pop	{r4, r5, pc}
 80a0ec8:	ffff9f00 	.word	0xffff9f00

080a0ecc <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 80a0ecc:	4b05      	ldr	r3, [pc, #20]	; (80a0ee4 <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80a0ece:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80a0ed2:	b122      	cbz	r2, 80a0ede <mbedtls_cipher_info_from_type+0x12>
 80a0ed4:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 80a0ed6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a0eda:	4281      	cmp	r1, r0
 80a0edc:	d1f7      	bne.n	80a0ece <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
 80a0ede:	4610      	mov	r0, r2
 80a0ee0:	4770      	bx	lr
 80a0ee2:	bf00      	nop
 80a0ee4:	080ae284 	.word	0x080ae284

080a0ee8 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 80a0ee8:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80a0eea:	4c08      	ldr	r4, [pc, #32]	; (80a0f0c <mbedtls_cipher_info_from_values+0x24>)
 80a0eec:	6863      	ldr	r3, [r4, #4]
 80a0eee:	b15b      	cbz	r3, 80a0f08 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 80a0ef0:	699d      	ldr	r5, [r3, #24]
 80a0ef2:	782d      	ldrb	r5, [r5, #0]
 80a0ef4:	4285      	cmp	r5, r0
 80a0ef6:	d105      	bne.n	80a0f04 <mbedtls_cipher_info_from_values+0x1c>
 80a0ef8:	685d      	ldr	r5, [r3, #4]
 80a0efa:	428d      	cmp	r5, r1
 80a0efc:	d102      	bne.n	80a0f04 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 80a0efe:	785d      	ldrb	r5, [r3, #1]
 80a0f00:	4295      	cmp	r5, r2
 80a0f02:	d001      	beq.n	80a0f08 <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80a0f04:	3408      	adds	r4, #8
 80a0f06:	e7f1      	b.n	80a0eec <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 80a0f08:	4618      	mov	r0, r3
 80a0f0a:	bd30      	pop	{r4, r5, pc}
 80a0f0c:	080ae27c 	.word	0x080ae27c

080a0f10 <mbedtls_cipher_free>:
{
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 80a0f10:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80a0f12:	4604      	mov	r4, r0
 80a0f14:	b168      	cbz	r0, 80a0f32 <mbedtls_cipher_free+0x22>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 80a0f16:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a0f18:	b118      	cbz	r0, 80a0f22 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 80a0f1a:	6823      	ldr	r3, [r4, #0]
 80a0f1c:	699b      	ldr	r3, [r3, #24]
 80a0f1e:	699b      	ldr	r3, [r3, #24]
 80a0f20:	4798      	blx	r3
 80a0f22:	f104 0240 	add.w	r2, r4, #64	; 0x40
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80a0f26:	2300      	movs	r3, #0
 80a0f28:	4294      	cmp	r4, r2
 80a0f2a:	d002      	beq.n	80a0f32 <mbedtls_cipher_free+0x22>
 80a0f2c:	7023      	strb	r3, [r4, #0]
 80a0f2e:	3401      	adds	r4, #1
 80a0f30:	e7fa      	b.n	80a0f28 <mbedtls_cipher_free+0x18>
 80a0f32:	bd10      	pop	{r4, pc}

080a0f34 <mbedtls_cipher_setkey>:
    return( 0 );
}

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
 80a0f34:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 80a0f36:	b1c8      	cbz	r0, 80a0f6c <mbedtls_cipher_setkey+0x38>
 80a0f38:	6804      	ldr	r4, [r0, #0]
 80a0f3a:	b1bc      	cbz	r4, 80a0f6c <mbedtls_cipher_setkey+0x38>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 80a0f3c:	6925      	ldr	r5, [r4, #16]
 80a0f3e:	07ad      	lsls	r5, r5, #30
 80a0f40:	d402      	bmi.n	80a0f48 <mbedtls_cipher_setkey+0x14>
 80a0f42:	6865      	ldr	r5, [r4, #4]
 80a0f44:	4295      	cmp	r5, r2
 80a0f46:	d111      	bne.n	80a0f6c <mbedtls_cipher_setkey+0x38>
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80a0f48:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 80a0f4a:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 80a0f4c:	7203      	strb	r3, [r0, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80a0f4e:	d004      	beq.n	80a0f5a <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80a0f50:	7865      	ldrb	r5, [r4, #1]
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80a0f52:	2d03      	cmp	r5, #3
 80a0f54:	d001      	beq.n	80a0f5a <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80a0f56:	2d05      	cmp	r5, #5
 80a0f58:	d102      	bne.n	80a0f60 <mbedtls_cipher_setkey+0x2c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 80a0f5a:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 80a0f5c:	68db      	ldr	r3, [r3, #12]
 80a0f5e:	e002      	b.n	80a0f66 <mbedtls_cipher_setkey+0x32>
    }

    if( MBEDTLS_DECRYPT == operation )
 80a0f60:	b923      	cbnz	r3, 80a0f6c <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 80a0f62:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 80a0f64:	691b      	ldr	r3, [r3, #16]
 80a0f66:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 80a0f68:	bc30      	pop	{r4, r5}
                ctx->key_bitlen );
    }

    if( MBEDTLS_DECRYPT == operation )
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                ctx->key_bitlen );
 80a0f6a:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 80a0f6c:	4801      	ldr	r0, [pc, #4]	; (80a0f74 <mbedtls_cipher_setkey+0x40>)
 80a0f6e:	bc30      	pop	{r4, r5}
 80a0f70:	4770      	bx	lr
 80a0f72:	bf00      	nop
 80a0f74:	ffff9f00 	.word	0xffff9f00

080a0f78 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
 80a0f78:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 80a0f7a:	4604      	mov	r4, r0
 80a0f7c:	b1b0      	cbz	r0, 80a0fac <mbedtls_cipher_set_iv+0x34>
 80a0f7e:	6803      	ldr	r3, [r0, #0]
 80a0f80:	b1a3      	cbz	r3, 80a0fac <mbedtls_cipher_set_iv+0x34>
 80a0f82:	b199      	cbz	r1, 80a0fac <mbedtls_cipher_set_iv+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 80a0f84:	2a10      	cmp	r2, #16
 80a0f86:	d80f      	bhi.n	80a0fa8 <mbedtls_cipher_set_iv+0x30>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 80a0f88:	6918      	ldr	r0, [r3, #16]
 80a0f8a:	07c0      	lsls	r0, r0, #31
 80a0f8c:	d403      	bmi.n	80a0f96 <mbedtls_cipher_set_iv+0x1e>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 80a0f8e:	68dd      	ldr	r5, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 80a0f90:	42aa      	cmp	r2, r5
 80a0f92:	d201      	bcs.n	80a0f98 <mbedtls_cipher_set_iv+0x20>
 80a0f94:	e00a      	b.n	80a0fac <mbedtls_cipher_set_iv+0x34>
 80a0f96:	4615      	mov	r5, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    memcpy( ctx->iv, iv, actual_iv_size );
 80a0f98:	462a      	mov	r2, r5
 80a0f9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a0f9e:	f00c faba 	bl	80ad516 <memcpy>
    ctx->iv_size = actual_iv_size;
 80a0fa2:	63a5      	str	r5, [r4, #56]	; 0x38

    return( 0 );
 80a0fa4:	2000      	movs	r0, #0
 80a0fa6:	bd38      	pop	{r3, r4, r5, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a0fa8:	4801      	ldr	r0, [pc, #4]	; (80a0fb0 <mbedtls_cipher_set_iv+0x38>)
 80a0faa:	bd38      	pop	{r3, r4, r5, pc}
                   const unsigned char *iv, size_t iv_len )
{
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a0fac:	4801      	ldr	r0, [pc, #4]	; (80a0fb4 <mbedtls_cipher_set_iv+0x3c>)

    memcpy( ctx->iv, iv, actual_iv_size );
    ctx->iv_size = actual_iv_size;

    return( 0 );
}
 80a0fae:	bd38      	pop	{r3, r4, r5, pc}
 80a0fb0:	ffff9f80 	.word	0xffff9f80
 80a0fb4:	ffff9f00 	.word	0xffff9f00

080a0fb8 <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 80a0fb8:	b128      	cbz	r0, 80a0fc6 <mbedtls_cipher_reset+0xe>
 80a0fba:	6803      	ldr	r3, [r0, #0]
 80a0fbc:	b11b      	cbz	r3, 80a0fc6 <mbedtls_cipher_reset+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
 80a0fbe:	2300      	movs	r3, #0
 80a0fc0:	6243      	str	r3, [r0, #36]	; 0x24

    return( 0 );
 80a0fc2:	4618      	mov	r0, r3
 80a0fc4:	4770      	bx	lr
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a0fc6:	4801      	ldr	r0, [pc, #4]	; (80a0fcc <mbedtls_cipher_reset+0x14>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
 80a0fc8:	4770      	bx	lr
 80a0fca:	bf00      	nop
 80a0fcc:	ffff9f00 	.word	0xffff9f00

080a0fd0 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 80a0fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fd4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a0fd8:	460f      	mov	r7, r1
 80a0fda:	4615      	mov	r5, r2
 80a0fdc:	4699      	mov	r9, r3
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 80a0fde:	4604      	mov	r4, r0
 80a0fe0:	b908      	cbnz	r0, 80a0fe6 <mbedtls_cipher_update+0x16>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a0fe2:	485c      	ldr	r0, [pc, #368]	; (80a1154 <mbedtls_cipher_update+0x184>)
 80a0fe4:	e0b2      	b.n	80a114c <mbedtls_cipher_update+0x17c>
                   size_t ilen, unsigned char *output, size_t *olen )
{
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 80a0fe6:	6803      	ldr	r3, [r0, #0]
 80a0fe8:	2b00      	cmp	r3, #0
 80a0fea:	d0fa      	beq.n	80a0fe2 <mbedtls_cipher_update+0x12>
 80a0fec:	f1b8 0f00 	cmp.w	r8, #0
 80a0ff0:	d0f7      	beq.n	80a0fe2 <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
 80a0ff2:	2300      	movs	r3, #0
 80a0ff4:	f8c8 3000 	str.w	r3, [r8]
    block_size = mbedtls_cipher_get_block_size( ctx );
 80a0ff8:	f7ff fe8a 	bl	80a0d10 <mbedtls_cipher_get_block_size>

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 80a0ffc:	6823      	ldr	r3, [r4, #0]
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );
 80a0ffe:	4606      	mov	r6, r0

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 80a1000:	785b      	ldrb	r3, [r3, #1]
 80a1002:	2b01      	cmp	r3, #1
 80a1004:	d110      	bne.n	80a1028 <mbedtls_cipher_update+0x58>
    {
        if( ilen != block_size )
 80a1006:	4290      	cmp	r0, r2
 80a1008:	d17d      	bne.n	80a1106 <mbedtls_cipher_update+0x136>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 80a100a:	f8c8 0000 	str.w	r0, [r8]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80a100e:	6823      	ldr	r3, [r4, #0]
 80a1010:	460a      	mov	r2, r1
 80a1012:	699b      	ldr	r3, [r3, #24]
 80a1014:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a1018:	685d      	ldr	r5, [r3, #4]
 80a101a:	464b      	mov	r3, r9
 80a101c:	46ac      	mov	ip, r5
 80a101e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a1020:	b003      	add	sp, #12
 80a1022:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80a1026:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 80a1028:	2b06      	cmp	r3, #6
 80a102a:	d10a      	bne.n	80a1042 <mbedtls_cipher_update+0x72>
    {
        *olen = ilen;
 80a102c:	f8c8 2000 	str.w	r2, [r8]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 80a1030:	464b      	mov	r3, r9
 80a1032:	460a      	mov	r2, r1
 80a1034:	4629      	mov	r1, r5
 80a1036:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a1038:	b003      	add	sp, #12
 80a103a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 80a103e:	f003 bcdd 	b.w	80a49fc <mbedtls_gcm_update>
    }
#endif

    if ( 0 == block_size )
 80a1042:	2800      	cmp	r0, #0
 80a1044:	d061      	beq.n	80a110a <mbedtls_cipher_update+0x13a>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
    }

    if( input == output &&
 80a1046:	4549      	cmp	r1, r9
 80a1048:	d108      	bne.n	80a105c <mbedtls_cipher_update+0x8c>
 80a104a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a104c:	2a00      	cmp	r2, #0
 80a104e:	d1c8      	bne.n	80a0fe2 <mbedtls_cipher_update+0x12>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 80a1050:	fbb5 f2f0 	udiv	r2, r5, r0
 80a1054:	fb00 5212 	mls	r2, r0, r2, r5
 80a1058:	2a00      	cmp	r2, #0
 80a105a:	d1c2      	bne.n	80a0fe2 <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 80a105c:	2b02      	cmp	r3, #2
 80a105e:	d156      	bne.n	80a110e <mbedtls_cipher_update+0x13e>
        size_t copy_len = 0;

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 80a1060:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80a1064:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1066:	b92b      	cbnz	r3, 80a1074 <mbedtls_cipher_update+0xa4>
 80a1068:	68e3      	ldr	r3, [r4, #12]
 80a106a:	b12b      	cbz	r3, 80a1078 <mbedtls_cipher_update+0xa8>
 80a106c:	1a33      	subs	r3, r6, r0
 80a106e:	429d      	cmp	r5, r3
 80a1070:	d80f      	bhi.n	80a1092 <mbedtls_cipher_update+0xc2>
 80a1072:	e004      	b.n	80a107e <mbedtls_cipher_update+0xae>
                ilen <= block_size - ctx->unprocessed_len ) ||
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
                ilen < block_size - ctx->unprocessed_len ) ||
 80a1074:	2b01      	cmp	r3, #1
 80a1076:	d10c      	bne.n	80a1092 <mbedtls_cipher_update+0xc2>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 80a1078:	1a33      	subs	r3, r6, r0
 80a107a:	429d      	cmp	r5, r3
 80a107c:	d209      	bcs.n	80a1092 <mbedtls_cipher_update+0xc2>
                ilen < block_size - ctx->unprocessed_len ) )
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    ilen );
 80a107e:	4420      	add	r0, r4
 80a1080:	462a      	mov	r2, r5
 80a1082:	4639      	mov	r1, r7
 80a1084:	3014      	adds	r0, #20
 80a1086:	f00c fa46 	bl	80ad516 <memcpy>

            ctx->unprocessed_len += ilen;
 80a108a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a108c:	441d      	add	r5, r3
 80a108e:	6265      	str	r5, [r4, #36]	; 0x24
 80a1090:	e037      	b.n	80a1102 <mbedtls_cipher_update+0x132>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 80a1092:	b310      	cbz	r0, 80a10da <mbedtls_cipher_update+0x10a>
        {
            copy_len = block_size - ctx->unprocessed_len;
 80a1094:	ebc0 0a06 	rsb	sl, r0, r6

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    copy_len );
 80a1098:	4420      	add	r0, r4
 80a109a:	4652      	mov	r2, sl
 80a109c:	4639      	mov	r1, r7
 80a109e:	3014      	adds	r0, #20
 80a10a0:	f00c fa39 	bl	80ad516 <memcpy>

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80a10a4:	4623      	mov	r3, r4
 80a10a6:	f853 2b14 	ldr.w	r2, [r3], #20
 80a10aa:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a10ae:	6992      	ldr	r2, [r2, #24]
 80a10b0:	e88d 0208 	stmia.w	sp, {r3, r9}
 80a10b4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80a10b8:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80a10bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a10be:	4632      	mov	r2, r6
 80a10c0:	47d8      	blx	fp
 80a10c2:	2800      	cmp	r0, #0
 80a10c4:	d142      	bne.n	80a114c <mbedtls_cipher_update+0x17c>
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 80a10c6:	f8d8 3000 	ldr.w	r3, [r8]
            output += block_size;
 80a10ca:	44b1      	add	r9, r6
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 80a10cc:	4433      	add	r3, r6
 80a10ce:	f8c8 3000 	str.w	r3, [r8]
            output += block_size;
            ctx->unprocessed_len = 0;

            input += copy_len;
 80a10d2:	4457      	add	r7, sl
                return( ret );
            }

            *olen += block_size;
            output += block_size;
            ctx->unprocessed_len = 0;
 80a10d4:	6260      	str	r0, [r4, #36]	; 0x24

            input += copy_len;
            ilen -= copy_len;
 80a10d6:	ebca 0505 	rsb	r5, sl, r5
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 80a10da:	b195      	cbz	r5, 80a1102 <mbedtls_cipher_update+0x132>

            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 80a10dc:	fbb5 faf6 	udiv	sl, r5, r6
 80a10e0:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 &&
 80a10e4:	f1ba 0f00 	cmp.w	sl, #0
 80a10e8:	d013      	beq.n	80a1112 <mbedtls_cipher_update+0x142>
                NULL != ctx->add_padding)
            {
                copy_len = block_size;
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 80a10ea:	ebca 0505 	rsb	r5, sl, r5
                    copy_len );
 80a10ee:	4652      	mov	r2, sl
 80a10f0:	1979      	adds	r1, r7, r5
 80a10f2:	f104 0014 	add.w	r0, r4, #20
 80a10f6:	f00c fa0e 	bl	80ad516 <memcpy>

            ctx->unprocessed_len += copy_len;
 80a10fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a10fc:	4453      	add	r3, sl
 80a10fe:	6263      	str	r3, [r4, #36]	; 0x24
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 80a1100:	b995      	cbnz	r5, 80a1128 <mbedtls_cipher_update+0x158>
            }

            *olen += ilen;
        }

        return( 0 );
 80a1102:	2000      	movs	r0, #0
 80a1104:	e022      	b.n	80a114c <mbedtls_cipher_update+0x17c>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80a1106:	4814      	ldr	r0, [pc, #80]	; (80a1158 <mbedtls_cipher_update+0x188>)
 80a1108:	e020      	b.n	80a114c <mbedtls_cipher_update+0x17c>
    }
#endif

    if ( 0 == block_size )
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 80a110a:	4814      	ldr	r0, [pc, #80]	; (80a115c <mbedtls_cipher_update+0x18c>)
 80a110c:	e01e      	b.n	80a114c <mbedtls_cipher_update+0x17c>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a110e:	4814      	ldr	r0, [pc, #80]	; (80a1160 <mbedtls_cipher_update+0x190>)
 80a1110:	e01c      	b.n	80a114c <mbedtls_cipher_update+0x17c>
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
            if( copy_len == 0 &&
 80a1112:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80a1116:	2b00      	cmp	r3, #0
 80a1118:	d1e7      	bne.n	80a10ea <mbedtls_cipher_update+0x11a>
                ctx->operation == MBEDTLS_DECRYPT &&
 80a111a:	68e3      	ldr	r3, [r4, #12]
 80a111c:	2b00      	cmp	r3, #0
 80a111e:	bf0c      	ite	eq
 80a1120:	f04f 0a00 	moveq.w	sl, #0
 80a1124:	46b2      	movne	sl, r6
 80a1126:	e7e0      	b.n	80a10ea <mbedtls_cipher_update+0x11a>
        /*
         * Process remaining full blocks
         */
        if( ilen )
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80a1128:	6823      	ldr	r3, [r4, #0]
 80a112a:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a112e:	699b      	ldr	r3, [r3, #24]
 80a1130:	e88d 0280 	stmia.w	sp, {r7, r9}
 80a1134:	462a      	mov	r2, r5
 80a1136:	689e      	ldr	r6, [r3, #8]
 80a1138:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a113a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80a113e:	47b0      	blx	r6
 80a1140:	b920      	cbnz	r0, 80a114c <mbedtls_cipher_update+0x17c>
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
            {
                return( ret );
            }

            *olen += ilen;
 80a1142:	f8d8 3000 	ldr.w	r3, [r8]
 80a1146:	441d      	add	r5, r3
 80a1148:	f8c8 5000 	str.w	r5, [r8]
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a114c:	b003      	add	sp, #12
 80a114e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1152:	bf00      	nop
 80a1154:	ffff9f00 	.word	0xffff9f00
 80a1158:	ffff9d80 	.word	0xffff9d80
 80a115c:	ffff9c80 	.word	0xffff9c80
 80a1160:	ffff9f80 	.word	0xffff9f80

080a1164 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 80a1164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1166:	460e      	mov	r6, r1
 80a1168:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 80a116a:	4604      	mov	r4, r0
 80a116c:	2800      	cmp	r0, #0
 80a116e:	d052      	beq.n	80a1216 <mbedtls_cipher_finish+0xb2>
 80a1170:	6803      	ldr	r3, [r0, #0]
 80a1172:	2b00      	cmp	r3, #0
 80a1174:	d04f      	beq.n	80a1216 <mbedtls_cipher_finish+0xb2>
 80a1176:	2a00      	cmp	r2, #0
 80a1178:	d04d      	beq.n	80a1216 <mbedtls_cipher_finish+0xb2>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 80a117a:	2300      	movs	r3, #0
 80a117c:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80a117e:	6807      	ldr	r7, [r0, #0]
 80a1180:	787a      	ldrb	r2, [r7, #1]
 80a1182:	2a03      	cmp	r2, #3
 80a1184:	d04d      	beq.n	80a1222 <mbedtls_cipher_finish+0xbe>
 80a1186:	1f51      	subs	r1, r2, #5
 80a1188:	2902      	cmp	r1, #2
 80a118a:	d94a      	bls.n	80a1222 <mbedtls_cipher_finish+0xbe>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 80a118c:	2a01      	cmp	r2, #1
 80a118e:	d101      	bne.n	80a1194 <mbedtls_cipher_finish+0x30>
    {
        if( ctx->unprocessed_len != 0 )
 80a1190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a1192:	e016      	b.n	80a11c2 <mbedtls_cipher_finish+0x5e>

        return( 0 );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 80a1194:	2a02      	cmp	r2, #2
 80a1196:	d140      	bne.n	80a121a <mbedtls_cipher_finish+0xb6>
    {
        int ret = 0;

        if( MBEDTLS_ENCRYPT == ctx->operation )
 80a1198:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80a119c:	2b01      	cmp	r3, #1
 80a119e:	d109      	bne.n	80a11b4 <mbedtls_cipher_finish+0x50>
        {
            /* check for 'no padding' mode */
            if( NULL == ctx->add_padding )
 80a11a0:	68c3      	ldr	r3, [r0, #12]
 80a11a2:	2b00      	cmp	r3, #0
 80a11a4:	d0f4      	beq.n	80a1190 <mbedtls_cipher_finish+0x2c>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 80a11a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

                return( 0 );
            }

            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 80a11a8:	3014      	adds	r0, #20
 80a11aa:	b901      	cbnz	r1, 80a11ae <mbedtls_cipher_finish+0x4a>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 80a11ac:	68f9      	ldr	r1, [r7, #12]
                    ctx->unprocessed_len );
 80a11ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a11b0:	4798      	blx	r3
 80a11b2:	e00b      	b.n	80a11cc <mbedtls_cipher_finish+0x68>
        }
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 80a11b4:	f7ff fdac 	bl	80a0d10 <mbedtls_cipher_get_block_size>
 80a11b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a11ba:	4298      	cmp	r0, r3
 80a11bc:	d006      	beq.n	80a11cc <mbedtls_cipher_finish+0x68>
        {
            /*
             * For decrypt operations, expect a full block,
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 80a11be:	68e2      	ldr	r2, [r4, #12]
 80a11c0:	bb6a      	cbnz	r2, 80a121e <mbedtls_cipher_finish+0xba>
    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
    {
        if( ctx->unprocessed_len != 0 )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        return( 0 );
 80a11c2:	2b00      	cmp	r3, #0
 80a11c4:	4818      	ldr	r0, [pc, #96]	; (80a1228 <mbedtls_cipher_finish+0xc4>)
 80a11c6:	bf08      	it	eq
 80a11c8:	2000      	moveq	r0, #0
 80a11ca:	e02b      	b.n	80a1224 <mbedtls_cipher_finish+0xc0>

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80a11cc:	4620      	mov	r0, r4
 80a11ce:	f7ff fd9f 	bl	80a0d10 <mbedtls_cipher_get_block_size>
 80a11d2:	4623      	mov	r3, r4
 80a11d4:	f853 2b14 	ldr.w	r2, [r3], #20
 80a11d8:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a11dc:	6992      	ldr	r2, [r2, #24]
 80a11de:	e88d 0048 	stmia.w	sp, {r3, r6}
 80a11e2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80a11e6:	6897      	ldr	r7, [r2, #8]
 80a11e8:	4602      	mov	r2, r0
 80a11ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a11ec:	47b8      	blx	r7
 80a11ee:	4603      	mov	r3, r0
 80a11f0:	b9b8      	cbnz	r0, 80a1222 <mbedtls_cipher_finish+0xbe>
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 80a11f2:	f994 2008 	ldrsb.w	r2, [r4, #8]
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 80a11f6:	4620      	mov	r0, r4
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 80a11f8:	b94a      	cbnz	r2, 80a120e <mbedtls_cipher_finish+0xaa>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 80a11fa:	f7ff fd89 	bl	80a0d10 <mbedtls_cipher_get_block_size>
                                     olen );
 80a11fe:	462a      	mov	r2, r5
 80a1200:	4601      	mov	r1, r0
 80a1202:	4630      	mov	r0, r6
 80a1204:	6923      	ldr	r3, [r4, #16]
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a1206:	b003      	add	sp, #12
 80a1208:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
                                     olen );
 80a120c:	4718      	bx	r3

        /* Set output size for encryption */
        *olen = mbedtls_cipher_get_block_size( ctx );
 80a120e:	f7ff fd7f 	bl	80a0d10 <mbedtls_cipher_get_block_size>
 80a1212:	6028      	str	r0, [r5, #0]
 80a1214:	e005      	b.n	80a1222 <mbedtls_cipher_finish+0xbe>

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a1216:	4805      	ldr	r0, [pc, #20]	; (80a122c <mbedtls_cipher_finish+0xc8>)
 80a1218:	e004      	b.n	80a1224 <mbedtls_cipher_finish+0xc0>
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a121a:	4805      	ldr	r0, [pc, #20]	; (80a1230 <mbedtls_cipher_finish+0xcc>)
 80a121c:	e002      	b.n	80a1224 <mbedtls_cipher_finish+0xc0>
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80a121e:	4802      	ldr	r0, [pc, #8]	; (80a1228 <mbedtls_cipher_finish+0xc4>)
 80a1220:	e000      	b.n	80a1224 <mbedtls_cipher_finish+0xc0>
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80a1222:	4618      	mov	r0, r3
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a1224:	b003      	add	sp, #12
 80a1226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1228:	ffff9d80 	.word	0xffff9d80
 80a122c:	ffff9f00 	.word	0xffff9f00
 80a1230:	ffff9f80 	.word	0xffff9f80

080a1234 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 80a1234:	b308      	cbz	r0, 80a127a <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 80a1236:	6803      	ldr	r3, [r0, #0]
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 80a1238:	785b      	ldrb	r3, [r3, #1]
 80a123a:	2b02      	cmp	r3, #2
 80a123c:	d11d      	bne.n	80a127a <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 80a123e:	2904      	cmp	r1, #4
 80a1240:	d81d      	bhi.n	80a127e <mbedtls_cipher_set_padding_mode+0x4a>
 80a1242:	e8df f001 	tbb	[pc, r1]
 80a1246:	0703      	.short	0x0703
 80a1248:	110d      	.short	0x110d
 80a124a:	15          	.byte	0x15
 80a124b:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 80a124c:	4b0d      	ldr	r3, [pc, #52]	; (80a1284 <mbedtls_cipher_set_padding_mode+0x50>)
 80a124e:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 80a1250:	4b0d      	ldr	r3, [pc, #52]	; (80a1288 <mbedtls_cipher_set_padding_mode+0x54>)
 80a1252:	e002      	b.n	80a125a <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
 80a1254:	4b0d      	ldr	r3, [pc, #52]	; (80a128c <mbedtls_cipher_set_padding_mode+0x58>)
 80a1256:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 80a1258:	4b0d      	ldr	r3, [pc, #52]	; (80a1290 <mbedtls_cipher_set_padding_mode+0x5c>)
 80a125a:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80a125c:	2000      	movs	r0, #0
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
        break;
 80a125e:	4770      	bx	lr
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)
    case MBEDTLS_PADDING_ZEROS_AND_LEN:
        ctx->add_padding = add_zeros_and_len_padding;
 80a1260:	4b0c      	ldr	r3, [pc, #48]	; (80a1294 <mbedtls_cipher_set_padding_mode+0x60>)
 80a1262:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 80a1264:	4b0c      	ldr	r3, [pc, #48]	; (80a1298 <mbedtls_cipher_set_padding_mode+0x64>)
 80a1266:	e7f8      	b.n	80a125a <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)
    case MBEDTLS_PADDING_ZEROS:
        ctx->add_padding = add_zeros_padding;
 80a1268:	4b0c      	ldr	r3, [pc, #48]	; (80a129c <mbedtls_cipher_set_padding_mode+0x68>)
 80a126a:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 80a126c:	4b0c      	ldr	r3, [pc, #48]	; (80a12a0 <mbedtls_cipher_set_padding_mode+0x6c>)
 80a126e:	e7f4      	b.n	80a125a <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
 80a1270:	4a0c      	ldr	r2, [pc, #48]	; (80a12a4 <mbedtls_cipher_set_padding_mode+0x70>)
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 80a1272:	2300      	movs	r3, #0
 80a1274:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 80a1276:	6102      	str	r2, [r0, #16]
 80a1278:	e7f0      	b.n	80a125c <mbedtls_cipher_set_padding_mode+0x28>
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a127a:	480b      	ldr	r0, [pc, #44]	; (80a12a8 <mbedtls_cipher_set_padding_mode+0x74>)
 80a127c:	4770      	bx	lr
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
        break;

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a127e:	480b      	ldr	r0, [pc, #44]	; (80a12ac <mbedtls_cipher_set_padding_mode+0x78>)
    }

    return( 0 );
}
 80a1280:	4770      	bx	lr
 80a1282:	bf00      	nop
 80a1284:	080a0d1b 	.word	0x080a0d1b
 80a1288:	080a0d35 	.word	0x080a0d35
 80a128c:	080a0d89 	.word	0x080a0d89
 80a1290:	080a0e41 	.word	0x080a0e41
 80a1294:	080a0da5 	.word	0x080a0da5
 80a1298:	080a0dc9 	.word	0x080a0dc9
 80a129c:	080a0e19 	.word	0x080a0e19
 80a12a0:	080a0e91 	.word	0x080a0e91
 80a12a4:	080a0e2d 	.word	0x080a0e2d
 80a12a8:	ffff9f00 	.word	0xffff9f00
 80a12ac:	ffff9f80 	.word	0xffff9f80

080a12b0 <mbedtls_cipher_setup>:

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 80a12b0:	b538      	push	{r3, r4, r5, lr}
 80a12b2:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 80a12b4:	460d      	mov	r5, r1
 80a12b6:	b181      	cbz	r1, 80a12da <mbedtls_cipher_setup+0x2a>
 80a12b8:	b178      	cbz	r0, 80a12da <mbedtls_cipher_setup+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80a12ba:	2240      	movs	r2, #64	; 0x40
 80a12bc:	2100      	movs	r1, #0
 80a12be:	f00c f950 	bl	80ad562 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 80a12c2:	69ab      	ldr	r3, [r5, #24]
 80a12c4:	695b      	ldr	r3, [r3, #20]
 80a12c6:	4798      	blx	r3
 80a12c8:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a12ca:	b140      	cbz	r0, 80a12de <mbedtls_cipher_setup+0x2e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 80a12cc:	6025      	str	r5, [r4, #0]
#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
    /*
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 80a12ce:	2100      	movs	r1, #0
 80a12d0:	4620      	mov	r0, r4
 80a12d2:	f7ff ffaf 	bl	80a1234 <mbedtls_cipher_set_padding_mode>
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 80a12d6:	2000      	movs	r0, #0
 80a12d8:	bd38      	pop	{r3, r4, r5, pc}
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    if( NULL == cipher_info || NULL == ctx )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a12da:	4802      	ldr	r0, [pc, #8]	; (80a12e4 <mbedtls_cipher_setup+0x34>)
 80a12dc:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 80a12de:	4802      	ldr	r0, [pc, #8]	; (80a12e8 <mbedtls_cipher_setup+0x38>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 80a12e0:	bd38      	pop	{r3, r4, r5, pc}
 80a12e2:	bf00      	nop
 80a12e4:	ffff9f00 	.word	0xffff9f00
 80a12e8:	ffff9e80 	.word	0xffff9e80

080a12ec <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 80a12ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a12ee:	b085      	sub	sp, #20
 80a12f0:	4605      	mov	r5, r0
 80a12f2:	461f      	mov	r7, r3
 80a12f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a12f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 80a12f8:	f7ff fe3e 	bl	80a0f78 <mbedtls_cipher_set_iv>
 80a12fc:	b9b0      	cbnz	r0, 80a132c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 80a12fe:	4628      	mov	r0, r5
 80a1300:	f7ff fe5a 	bl	80a0fb8 <mbedtls_cipher_reset>
 80a1304:	b990      	cbnz	r0, 80a132c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 80a1306:	9400      	str	r4, [sp, #0]
 80a1308:	4633      	mov	r3, r6
 80a130a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a130c:	4639      	mov	r1, r7
 80a130e:	4628      	mov	r0, r5
 80a1310:	f7ff fe5e 	bl	80a0fd0 <mbedtls_cipher_update>
 80a1314:	b950      	cbnz	r0, 80a132c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 80a1316:	6821      	ldr	r1, [r4, #0]
 80a1318:	aa03      	add	r2, sp, #12
 80a131a:	4431      	add	r1, r6
 80a131c:	4628      	mov	r0, r5
 80a131e:	f7ff ff21 	bl	80a1164 <mbedtls_cipher_finish>
 80a1322:	b918      	cbnz	r0, 80a132c <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 80a1324:	6822      	ldr	r2, [r4, #0]
 80a1326:	9b03      	ldr	r3, [sp, #12]
 80a1328:	4413      	add	r3, r2
 80a132a:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 80a132c:	b005      	add	sp, #20
 80a132e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1330 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a1330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1334:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a1336:	4614      	mov	r4, r2
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1338:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a133a:	9d07      	ldr	r5, [sp, #28]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a133c:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a133e:	9e08      	ldr	r6, [sp, #32]
 80a1340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a1342:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80a1346:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80a134a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a134e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1352:	d112      	bne.n	80a137a <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
 80a1354:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 80a1358:	9308      	str	r3, [sp, #32]
 80a135a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80a135e:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80a1362:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80a1366:	960a      	str	r6, [sp, #40]	; 0x28
 80a1368:	9509      	str	r5, [sp, #36]	; 0x24
 80a136a:	9407      	str	r4, [sp, #28]
 80a136c:	460b      	mov	r3, r1
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a136e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 80a1372:	2101      	movs	r1, #1
 80a1374:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1376:	f003 bc2c 	b.w	80a4bd2 <mbedtls_gcm_crypt_and_tag>
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a137a:	4801      	ldr	r0, [pc, #4]	; (80a1380 <mbedtls_cipher_auth_encrypt+0x50>)
 80a137c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1380:	ffff9f80 	.word	0xffff9f80

080a1384 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a1384:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1386:	6805      	ldr	r5, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a1388:	b087      	sub	sp, #28
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a138a:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a138c:	460c      	mov	r4, r1
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a138e:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a1390:	990c      	ldr	r1, [sp, #48]	; 0x30
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1392:	d117      	bne.n	80a13c4 <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
 80a1394:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80a1396:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );
 80a1398:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80a139a:	9505      	str	r5, [sp, #20]
 80a139c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a139e:	9504      	str	r5, [sp, #16]
 80a13a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80a13a2:	9503      	str	r5, [sp, #12]
 80a13a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80a13a6:	9502      	str	r5, [sp, #8]
 80a13a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a13aa:	e88d 0028 	stmia.w	sp, {r3, r5}
 80a13ae:	4613      	mov	r3, r2
 80a13b0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a13b2:	4622      	mov	r2, r4
 80a13b4:	f003 fc32 	bl	80a4c1c <mbedtls_gcm_auth_decrypt>

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 80a13b8:	4b04      	ldr	r3, [pc, #16]	; (80a13cc <mbedtls_cipher_auth_decrypt+0x48>)
 80a13ba:	f110 0f12 	cmn.w	r0, #18
 80a13be:	bf08      	it	eq
 80a13c0:	4618      	moveq	r0, r3
 80a13c2:	e000      	b.n	80a13c6 <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a13c4:	4802      	ldr	r0, [pc, #8]	; (80a13d0 <mbedtls_cipher_auth_decrypt+0x4c>)
}
 80a13c6:	b007      	add	sp, #28
 80a13c8:	bd30      	pop	{r4, r5, pc}
 80a13ca:	bf00      	nop
 80a13cc:	ffff9d00 	.word	0xffff9d00
 80a13d0:	ffff9f80 	.word	0xffff9f80

080a13d4 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 80a13d4:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 80a13d6:	6803      	ldr	r3, [r0, #0]
 80a13d8:	1acd      	subs	r5, r1, r3
 80a13da:	2d00      	cmp	r5, #0
 80a13dc:	dc02      	bgt.n	80a13e4 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a13de:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80a13e2:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 80a13e4:	781c      	ldrb	r4, [r3, #0]
 80a13e6:	f014 0f80 	tst.w	r4, #128	; 0x80
 80a13ea:	d104      	bne.n	80a13f6 <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
 80a13ec:	1c5c      	adds	r4, r3, #1
 80a13ee:	6004      	str	r4, [r0, #0]
 80a13f0:	781b      	ldrb	r3, [r3, #0]
 80a13f2:	6013      	str	r3, [r2, #0]
 80a13f4:	e036      	b.n	80a1464 <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
 80a13f6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80a13fa:	3c01      	subs	r4, #1
 80a13fc:	2c03      	cmp	r4, #3
 80a13fe:	d838      	bhi.n	80a1472 <mbedtls_asn1_get_len+0x9e>
 80a1400:	e8df f004 	tbb	[pc, r4]
 80a1404:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
 80a1408:	2d01      	cmp	r5, #1
 80a140a:	d0e8      	beq.n	80a13de <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
 80a140c:	785b      	ldrb	r3, [r3, #1]
 80a140e:	6013      	str	r3, [r2, #0]
            (*p) += 2;
 80a1410:	6803      	ldr	r3, [r0, #0]
 80a1412:	3302      	adds	r3, #2
 80a1414:	e025      	b.n	80a1462 <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
 80a1416:	2d02      	cmp	r5, #2
 80a1418:	dde1      	ble.n	80a13de <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 80a141a:	785c      	ldrb	r4, [r3, #1]
 80a141c:	789b      	ldrb	r3, [r3, #2]
 80a141e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80a1422:	6013      	str	r3, [r2, #0]
            (*p) += 3;
 80a1424:	6803      	ldr	r3, [r0, #0]
 80a1426:	3303      	adds	r3, #3
 80a1428:	e01b      	b.n	80a1462 <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
 80a142a:	2d03      	cmp	r5, #3
 80a142c:	ddd7      	ble.n	80a13de <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80a142e:	789c      	ldrb	r4, [r3, #2]
 80a1430:	785d      	ldrb	r5, [r3, #1]
 80a1432:	0224      	lsls	r4, r4, #8
 80a1434:	78db      	ldrb	r3, [r3, #3]
 80a1436:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a143a:	431c      	orrs	r4, r3
 80a143c:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 80a143e:	6803      	ldr	r3, [r0, #0]
 80a1440:	3304      	adds	r3, #4
 80a1442:	e00e      	b.n	80a1462 <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
 80a1444:	2d04      	cmp	r5, #4
 80a1446:	ddca      	ble.n	80a13de <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 80a1448:	789c      	ldrb	r4, [r3, #2]
 80a144a:	785d      	ldrb	r5, [r3, #1]
 80a144c:	0424      	lsls	r4, r4, #16
 80a144e:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
 80a1452:	791c      	ldrb	r4, [r3, #4]
 80a1454:	78db      	ldrb	r3, [r3, #3]
 80a1456:	432c      	orrs	r4, r5
 80a1458:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a145c:	6013      	str	r3, [r2, #0]
            (*p) += 5;
 80a145e:	6803      	ldr	r3, [r0, #0]
 80a1460:	3305      	adds	r3, #5
 80a1462:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 80a1464:	6803      	ldr	r3, [r0, #0]
 80a1466:	1ac9      	subs	r1, r1, r3
 80a1468:	6813      	ldr	r3, [r2, #0]
 80a146a:	428b      	cmp	r3, r1
 80a146c:	d8b7      	bhi.n	80a13de <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 80a146e:	2000      	movs	r0, #0
 80a1470:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a1472:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 80a1476:	bd30      	pop	{r4, r5, pc}

080a1478 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 80a1478:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 80a147a:	6804      	ldr	r4, [r0, #0]
 80a147c:	1b0e      	subs	r6, r1, r4
 80a147e:	2e00      	cmp	r6, #0
 80a1480:	dd07      	ble.n	80a1492 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 80a1482:	7826      	ldrb	r6, [r4, #0]
 80a1484:	429e      	cmp	r6, r3
 80a1486:	d107      	bne.n	80a1498 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80a1488:	3401      	adds	r4, #1
 80a148a:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80a148c:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
 80a148e:	f7ff bfa1 	b.w	80a13d4 <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1492:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80a1496:	e001      	b.n	80a149c <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a1498:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80a149c:	bc70      	pop	{r4, r5, r6}
 80a149e:	4770      	bx	lr

080a14a0 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80a14a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80a14a2:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80a14a4:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80a14a6:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80a14a8:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80a14aa:	f7ff ffe5 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a14ae:	b970      	cbnz	r0, 80a14ce <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
 80a14b0:	9b01      	ldr	r3, [sp, #4]
 80a14b2:	2b01      	cmp	r3, #1
 80a14b4:	d109      	bne.n	80a14ca <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 80a14b6:	6823      	ldr	r3, [r4, #0]
 80a14b8:	781b      	ldrb	r3, [r3, #0]
 80a14ba:	3300      	adds	r3, #0
 80a14bc:	bf18      	it	ne
 80a14be:	2301      	movne	r3, #1
 80a14c0:	602b      	str	r3, [r5, #0]
    (*p)++;
 80a14c2:	6823      	ldr	r3, [r4, #0]
 80a14c4:	3301      	adds	r3, #1
 80a14c6:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a14c8:	e001      	b.n	80a14ce <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a14ca:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
 80a14ce:	b003      	add	sp, #12
 80a14d0:	bd30      	pop	{r4, r5, pc}

080a14d2 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80a14d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a14d4:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80a14d6:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a14d8:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80a14da:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a14dc:	f7ff ffcc 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a14e0:	b9c8      	cbnz	r0, 80a1516 <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 80a14e2:	9b01      	ldr	r3, [sp, #4]
 80a14e4:	3b01      	subs	r3, #1
 80a14e6:	2b03      	cmp	r3, #3
 80a14e8:	d813      	bhi.n	80a1512 <mbedtls_asn1_get_int+0x40>
 80a14ea:	6823      	ldr	r3, [r4, #0]
 80a14ec:	f993 3000 	ldrsb.w	r3, [r3]
 80a14f0:	2b00      	cmp	r3, #0
 80a14f2:	db0e      	blt.n	80a1512 <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 80a14f4:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 80a14f6:	9801      	ldr	r0, [sp, #4]
 80a14f8:	1e43      	subs	r3, r0, #1
 80a14fa:	9301      	str	r3, [sp, #4]
 80a14fc:	b158      	cbz	r0, 80a1516 <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
 80a14fe:	6823      	ldr	r3, [r4, #0]
 80a1500:	682a      	ldr	r2, [r5, #0]
 80a1502:	781b      	ldrb	r3, [r3, #0]
 80a1504:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1508:	602b      	str	r3, [r5, #0]
        (*p)++;
 80a150a:	6823      	ldr	r3, [r4, #0]
 80a150c:	3301      	adds	r3, #1
 80a150e:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
 80a1510:	e7f1      	b.n	80a14f6 <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a1512:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 80a1516:	b003      	add	sp, #12
 80a1518:	bd30      	pop	{r4, r5, pc}

080a151a <mbedtls_asn1_get_bitstring>:
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 80a151a:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a151c:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 80a151e:	4604      	mov	r4, r0
 80a1520:	460e      	mov	r6, r1
 80a1522:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a1524:	f7ff ffa8 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a1528:	b9d8      	cbnz	r0, 80a1562 <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 80a152a:	6813      	ldr	r3, [r2, #0]
 80a152c:	b1a3      	cbz	r3, 80a1558 <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 80a152e:	3b01      	subs	r3, #1
 80a1530:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80a1532:	6823      	ldr	r3, [r4, #0]
 80a1534:	781b      	ldrb	r3, [r3, #0]
    if( bs->unused_bits > 7 )
 80a1536:	2b07      	cmp	r3, #7
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80a1538:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
 80a153a:	d810      	bhi.n	80a155e <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 80a153c:	6823      	ldr	r3, [r4, #0]
 80a153e:	3301      	adds	r3, #1
 80a1540:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 80a1542:	6093      	str	r3, [r2, #8]
    *p += bs->len;
 80a1544:	6822      	ldr	r2, [r4, #0]
 80a1546:	682b      	ldr	r3, [r5, #0]
 80a1548:	4413      	add	r3, r2

    if( *p != end )
 80a154a:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 80a154c:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80a154e:	bf14      	ite	ne
 80a1550:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 80a1554:	2000      	moveq	r0, #0
 80a1556:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1558:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80a155c:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a155e:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80a1562:	bd70      	pop	{r4, r5, r6, pc}

080a1564 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80a1564:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a1566:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80a1568:	4604      	mov	r4, r0
 80a156a:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a156c:	f7ff ff84 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a1570:	b958      	cbnz	r0, 80a158a <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 80a1572:	6813      	ldr	r3, [r2, #0]
 80a1574:	1e5a      	subs	r2, r3, #1
 80a1576:	2b01      	cmp	r3, #1
 80a1578:	602a      	str	r2, [r5, #0]
 80a157a:	d904      	bls.n	80a1586 <mbedtls_asn1_get_bitstring_null+0x22>
 80a157c:	6823      	ldr	r3, [r4, #0]
 80a157e:	1c5a      	adds	r2, r3, #1
 80a1580:	6022      	str	r2, [r4, #0]
 80a1582:	7818      	ldrb	r0, [r3, #0]
 80a1584:	b108      	cbz	r0, 80a158a <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 80a1586:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 80a158a:	bd38      	pop	{r3, r4, r5, pc}

080a158c <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 80a158c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a1590:	4615      	mov	r5, r2
 80a1592:	461f      	mov	r7, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a1594:	aa01      	add	r2, sp, #4
 80a1596:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 80a1598:	4604      	mov	r4, r0
 80a159a:	460e      	mov	r6, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a159c:	f7ff ff6c 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a15a0:	bb68      	cbnz	r0, 80a15fe <mbedtls_asn1_get_sequence_of+0x72>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 80a15a2:	6822      	ldr	r2, [r4, #0]
 80a15a4:	9b01      	ldr	r3, [sp, #4]
 80a15a6:	4413      	add	r3, r2
 80a15a8:	429e      	cmp	r6, r3
 80a15aa:	d01d      	beq.n	80a15e8 <mbedtls_asn1_get_sequence_of+0x5c>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a15ac:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80a15b0:	e025      	b.n	80a15fe <mbedtls_asn1_get_sequence_of+0x72>

    while( *p < end )
 80a15b2:	6823      	ldr	r3, [r4, #0]
 80a15b4:	429e      	cmp	r6, r3
 80a15b6:	d91a      	bls.n	80a15ee <mbedtls_asn1_get_sequence_of+0x62>
    {
        buf = &(cur->buf);
        buf->tag = **p;
 80a15b8:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80a15ba:	4642      	mov	r2, r8
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;
 80a15bc:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80a15be:	4631      	mov	r1, r6
 80a15c0:	463b      	mov	r3, r7
 80a15c2:	4620      	mov	r0, r4
 80a15c4:	f7ff ff58 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a15c8:	b9c8      	cbnz	r0, 80a15fe <mbedtls_asn1_get_sequence_of+0x72>
            return( ret );

        buf->p = *p;
 80a15ca:	6823      	ldr	r3, [r4, #0]
 80a15cc:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
 80a15ce:	6822      	ldr	r2, [r4, #0]
 80a15d0:	686b      	ldr	r3, [r5, #4]
 80a15d2:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
 80a15d4:	429e      	cmp	r6, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
 80a15d6:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 80a15d8:	d9eb      	bls.n	80a15b2 <mbedtls_asn1_get_sequence_of+0x26>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 80a15da:	2110      	movs	r1, #16
 80a15dc:	2001      	movs	r0, #1
 80a15de:	f00b ff75 	bl	80ad4cc <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
 80a15e2:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
 80a15e4:	b148      	cbz	r0, 80a15fa <mbedtls_asn1_get_sequence_of+0x6e>
 80a15e6:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80a15e8:	f105 0804 	add.w	r8, r5, #4
 80a15ec:	e7e1      	b.n	80a15b2 <mbedtls_asn1_get_sequence_of+0x26>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 80a15ee:	2000      	movs	r0, #0
 80a15f0:	60e8      	str	r0, [r5, #12]

    if( *p != end )
 80a15f2:	6823      	ldr	r3, [r4, #0]
 80a15f4:	429e      	cmp	r6, r3
 80a15f6:	d002      	beq.n	80a15fe <mbedtls_asn1_get_sequence_of+0x72>
 80a15f8:	e7d8      	b.n	80a15ac <mbedtls_asn1_get_sequence_of+0x20>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 80a15fa:	f06f 0069 	mvn.w	r0, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80a15fe:	b002      	add	sp, #8
 80a1600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1604 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 80a1604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1606:	4617      	mov	r7, r2
 80a1608:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a160a:	aa01      	add	r2, sp, #4
 80a160c:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 80a160e:	4604      	mov	r4, r0
 80a1610:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a1612:	f7ff ff31 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a1616:	2800      	cmp	r0, #0
 80a1618:	d13a      	bne.n	80a1690 <mbedtls_asn1_get_alg+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 80a161a:	6823      	ldr	r3, [r4, #0]
 80a161c:	1af6      	subs	r6, r6, r3
 80a161e:	2e00      	cmp	r6, #0
 80a1620:	dd31      	ble.n	80a1686 <mbedtls_asn1_get_alg+0x82>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80a1622:	463a      	mov	r2, r7
 80a1624:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a1626:	4620      	mov	r0, r4
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80a1628:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 80a162c:	6826      	ldr	r6, [r4, #0]
 80a162e:	9b01      	ldr	r3, [sp, #4]
 80a1630:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a1632:	4631      	mov	r1, r6
 80a1634:	2306      	movs	r3, #6
 80a1636:	f7ff ff1f 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a163a:	bb48      	cbnz	r0, 80a1690 <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    alg->p = *p;
 80a163c:	6823      	ldr	r3, [r4, #0]
 80a163e:	60bb      	str	r3, [r7, #8]
    *p += alg->len;
 80a1640:	6822      	ldr	r2, [r4, #0]
 80a1642:	687b      	ldr	r3, [r7, #4]
 80a1644:	18d1      	adds	r1, r2, r3

    if( *p == end )
 80a1646:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
 80a1648:	6021      	str	r1, [r4, #0]

    if( *p == end )
 80a164a:	d106      	bne.n	80a165a <mbedtls_asn1_get_alg+0x56>
 80a164c:	f105 030c 	add.w	r3, r5, #12
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80a1650:	429d      	cmp	r5, r3
 80a1652:	d016      	beq.n	80a1682 <mbedtls_asn1_get_alg+0x7e>
 80a1654:	7028      	strb	r0, [r5, #0]
 80a1656:	3501      	adds	r5, #1
 80a1658:	e7fa      	b.n	80a1650 <mbedtls_asn1_get_alg+0x4c>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
 80a165a:	5cd3      	ldrb	r3, [r2, r3]
 80a165c:	462a      	mov	r2, r5
 80a165e:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
 80a1662:	6823      	ldr	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80a1664:	4631      	mov	r1, r6
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
    (*p)++;
 80a1666:	3301      	adds	r3, #1
 80a1668:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80a166a:	4620      	mov	r0, r4
 80a166c:	f7ff feb2 	bl	80a13d4 <mbedtls_asn1_get_len>
 80a1670:	b970      	cbnz	r0, 80a1690 <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    params->p = *p;
 80a1672:	6823      	ldr	r3, [r4, #0]
 80a1674:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 80a1676:	6822      	ldr	r2, [r4, #0]
 80a1678:	686b      	ldr	r3, [r5, #4]
 80a167a:	4413      	add	r3, r2

    if( *p != end )
 80a167c:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
 80a167e:	6023      	str	r3, [r4, #0]

    if( *p != end )
 80a1680:	d104      	bne.n	80a168c <mbedtls_asn1_get_alg+0x88>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80a1682:	2000      	movs	r0, #0
 80a1684:	e004      	b.n	80a1690 <mbedtls_asn1_get_alg+0x8c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1686:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80a168a:	e001      	b.n	80a1690 <mbedtls_asn1_get_alg+0x8c>

    params->p = *p;
    *p += params->len;

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a168c:	f06f 0065 	mvn.w	r0, #101	; 0x65

    return( 0 );
}
 80a1690:	b003      	add	sp, #12
 80a1692:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1694 <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
 80a1694:	f001 bb5e 	b.w	80a2d54 <mbedtls_internal_sha1_process>

080a1698 <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
 80a1698:	f001 bb3c 	b.w	80a2d14 <mbedtls_sha1_clone>

080a169c <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
 80a169c:	b510      	push	{r4, lr}
 80a169e:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 80a16a0:	f001 fb2e 	bl	80a2d00 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 80a16a4:	4620      	mov	r0, r4
}
 80a16a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
 80a16aa:	f00a be59 	b.w	80ac360 <free>

080a16ae <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
 80a16ae:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 80a16b0:	215c      	movs	r1, #92	; 0x5c
 80a16b2:	2001      	movs	r0, #1
 80a16b4:	f00b ff0a 	bl	80ad4cc <calloc>

    if( ctx != NULL )
 80a16b8:	4604      	mov	r4, r0
 80a16ba:	b108      	cbz	r0, 80a16c0 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 80a16bc:	f001 fb1c 	bl	80a2cf8 <mbedtls_sha1_init>

    return( ctx );
}
 80a16c0:	4620      	mov	r0, r4
 80a16c2:	bd10      	pop	{r4, pc}

080a16c4 <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 80a16c4:	f002 bb32 	b.w	80a3d2c <mbedtls_sha1_finish_ret>

080a16c8 <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
 80a16c8:	f002 baf6 	b.w	80a3cb8 <mbedtls_sha1_update_ret>

080a16cc <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 80a16cc:	f001 bb28 	b.w	80a2d20 <mbedtls_sha1_starts_ret>

080a16d0 <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
 80a16d0:	f7fe bec2 	b.w	80a0458 <mbedtls_internal_sha256_process>

080a16d4 <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
 80a16d4:	f7fe be6a 	b.w	80a03ac <mbedtls_sha256_clone>

080a16d8 <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 80a16d8:	b510      	push	{r4, lr}
 80a16da:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 80a16dc:	f7fe fe5c 	bl	80a0398 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 80a16e0:	4620      	mov	r0, r4
}
 80a16e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 80a16e6:	f00a be3b 	b.w	80ac360 <free>

080a16ea <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 80a16ea:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 80a16ec:	216c      	movs	r1, #108	; 0x6c
 80a16ee:	2001      	movs	r0, #1
 80a16f0:	f00b feec 	bl	80ad4cc <calloc>

    if( ctx != NULL )
 80a16f4:	4604      	mov	r4, r0
 80a16f6:	b108      	cbz	r0, 80a16fc <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 80a16f8:	f7fe fe4a 	bl	80a0390 <mbedtls_sha256_init>

    return( ctx );
}
 80a16fc:	4620      	mov	r0, r4
 80a16fe:	bd10      	pop	{r4, pc}

080a1700 <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 80a1700:	2301      	movs	r3, #1
 80a1702:	f7ff bae4 	b.w	80a0cce <mbedtls_sha256_ret>

080a1706 <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 80a1706:	2300      	movs	r3, #0
 80a1708:	f7ff bae1 	b.w	80a0cce <mbedtls_sha256_ret>

080a170c <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
 80a170c:	f7ff ba48 	b.w	80a0ba0 <mbedtls_sha256_finish_ret>

080a1710 <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
 80a1710:	f7ff ba0c 	b.w	80a0b2c <mbedtls_sha256_update_ret>

080a1714 <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 80a1714:	2101      	movs	r1, #1
 80a1716:	f7fe be4f 	b.w	80a03b8 <mbedtls_sha256_starts_ret>

080a171a <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 80a171a:	2100      	movs	r1, #0
 80a171c:	f7fe be4c 	b.w	80a03b8 <mbedtls_sha256_starts_ret>

080a1720 <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
 80a1720:	f008 bc16 	b.w	80a9f50 <mbedtls_internal_sha512_process>

080a1724 <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
 80a1724:	f008 bb71 	b.w	80a9e0a <mbedtls_sha512_clone>

080a1728 <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
 80a1728:	b510      	push	{r4, lr}
 80a172a:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 80a172c:	f008 fb63 	bl	80a9df6 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 80a1730:	4620      	mov	r0, r4
}
 80a1732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
 80a1736:	f00a be13 	b.w	80ac360 <free>

080a173a <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
 80a173a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 80a173c:	21d8      	movs	r1, #216	; 0xd8
 80a173e:	2001      	movs	r0, #1
 80a1740:	f00b fec4 	bl	80ad4cc <calloc>

    if( ctx != NULL )
 80a1744:	4604      	mov	r4, r0
 80a1746:	b108      	cbz	r0, 80a174c <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 80a1748:	f008 fb51 	bl	80a9dee <mbedtls_sha512_init>

    return( ctx );
}
 80a174c:	4620      	mov	r0, r4
 80a174e:	bd10      	pop	{r4, pc}

080a1750 <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 80a1750:	2301      	movs	r3, #1
 80a1752:	f009 bbb8 	b.w	80aaec6 <mbedtls_sha512_ret>

080a1756 <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 80a1756:	2300      	movs	r3, #0
 80a1758:	f009 bbb5 	b.w	80aaec6 <mbedtls_sha512_ret>

080a175c <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
 80a175c:	f009 ba80 	b.w	80aac60 <mbedtls_sha512_finish_ret>

080a1760 <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
 80a1760:	f009 ba36 	b.w	80aabd0 <mbedtls_sha512_update_ret>

080a1764 <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 80a1764:	2101      	movs	r1, #1
 80a1766:	f008 bb57 	b.w	80a9e18 <mbedtls_sha512_starts_ret>

080a176a <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 80a176a:	2100      	movs	r1, #0
 80a176c:	f008 bb54 	b.w	80a9e18 <mbedtls_sha512_starts_ret>

080a1770 <_ZL15mbedtls_zeroizePvj>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80a1770:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80a1772:	2300      	movs	r3, #0
 80a1774:	4288      	cmp	r0, r1
 80a1776:	d002      	beq.n	80a177e <_ZL15mbedtls_zeroizePvj+0xe>
 80a1778:	7003      	strb	r3, [r0, #0]
 80a177a:	3001      	adds	r0, #1
 80a177c:	e7fa      	b.n	80a1774 <_ZL15mbedtls_zeroizePvj+0x4>
 80a177e:	4770      	bx	lr

080a1780 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 80a1780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1784:	b095      	sub	sp, #84	; 0x54
 80a1786:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 80a1788:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 80a178a:	4607      	mov	r7, r0
 80a178c:	460c      	mov	r4, r1
 80a178e:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 80a1790:	2100      	movs	r1, #0
 80a1792:	2240      	movs	r2, #64	; 0x40
 80a1794:	4630      	mov	r0, r6
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 80a1796:	9301      	str	r3, [sp, #4]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 80a1798:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 80a179c:	f00b fee1 	bl	80ad562 <memset>
    memset( counter, 0, 4 );
 80a17a0:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 80a17a2:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 80a17a4:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 80a17a8:	f003 fbb6 	bl	80a4f18 <mbedtls_md_get_size>
 80a17ac:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 80a17ae:	b37c      	cbz	r4, 80a1810 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
 80a17b0:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 80a17b2:	4628      	mov	r0, r5
 80a17b4:	46a3      	mov	fp, r4
 80a17b6:	bf28      	it	cs
 80a17b8:	46d3      	movcs	fp, sl
 80a17ba:	f003 fabd 	bl	80a4d38 <mbedtls_md_starts>
 80a17be:	4602      	mov	r2, r0
 80a17c0:	bb38      	cbnz	r0, 80a1812 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 80a17c2:	9a01      	ldr	r2, [sp, #4]
 80a17c4:	4649      	mov	r1, r9
 80a17c6:	4628      	mov	r0, r5
 80a17c8:	f003 fac0 	bl	80a4d4c <mbedtls_md_update>
 80a17cc:	4602      	mov	r2, r0
 80a17ce:	bb00      	cbnz	r0, 80a1812 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 80a17d0:	2204      	movs	r2, #4
 80a17d2:	4641      	mov	r1, r8
 80a17d4:	4628      	mov	r0, r5
 80a17d6:	f003 fab9 	bl	80a4d4c <mbedtls_md_update>
 80a17da:	4602      	mov	r2, r0
 80a17dc:	b9c8      	cbnz	r0, 80a1812 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 80a17de:	4631      	mov	r1, r6
 80a17e0:	4628      	mov	r0, r5
 80a17e2:	f003 fabd 	bl	80a4d60 <mbedtls_md_finish>
 80a17e6:	4602      	mov	r2, r0
 80a17e8:	b998      	cbnz	r0, 80a1812 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
 80a17ea:	463b      	mov	r3, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
 80a17ec:	455a      	cmp	r2, fp
 80a17ee:	d007      	beq.n	80a1800 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
 80a17f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a17f4:	5cb1      	ldrb	r1, [r6, r2]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 80a17f6:	3201      	adds	r2, #1
            *p++ ^= mask[i];
 80a17f8:	4041      	eors	r1, r0
 80a17fa:	f803 1c01 	strb.w	r1, [r3, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 80a17fe:	e7f5      	b.n	80a17ec <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
 80a1800:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80a1804:	4417      	add	r7, r2
 80a1806:	3301      	adds	r3, #1
 80a1808:	f88d 300f 	strb.w	r3, [sp, #15]

        dlen -= use_len;
 80a180c:	1aa4      	subs	r4, r4, r2
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 80a180e:	e7ce      	b.n	80a17ae <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
 80a1810:	4622      	mov	r2, r4

        dlen -= use_len;
    }

exit:
    mbedtls_zeroize( mask, sizeof( mask ) );
 80a1812:	4630      	mov	r0, r6
 80a1814:	2140      	movs	r1, #64	; 0x40
 80a1816:	f7ff ffab 	bl	80a1770 <_ZL15mbedtls_zeroizePvj>

    return( ret );
}
 80a181a:	4610      	mov	r0, r2
 80a181c:	b015      	add	sp, #84	; 0x54
 80a181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a1824 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80a1824:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a1828:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 80a182a:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80a182c:	460e      	mov	r6, r1
 80a182e:	4691      	mov	r9, r2
 80a1830:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 80a1834:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 80a1836:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 80a1838:	4604      	mov	r4, r0
 80a183a:	b328      	cbz	r0, 80a1888 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80a183c:	f003 fa28 	bl	80a4c90 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80a1840:	4606      	mov	r6, r0
 80a1842:	2800      	cmp	r0, #0
 80a1844:	d063      	beq.n	80a190e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 80a1846:	4620      	mov	r0, r4
 80a1848:	466a      	mov	r2, sp
 80a184a:	a901      	add	r1, sp, #4
 80a184c:	f001 fa40 	bl	80a2cd0 <mbedtls_oid_get_oid_by_md>
 80a1850:	4604      	mov	r4, r0
 80a1852:	2800      	cmp	r0, #0
 80a1854:	d15b      	bne.n	80a190e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a1856:	4630      	mov	r0, r6
 80a1858:	f003 fb5e 	bl	80a4f18 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 80a185c:	9f00      	ldr	r7, [sp, #0]
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a185e:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 80a1860:	4407      	add	r7, r0
 80a1862:	f107 0308 	add.w	r3, r7, #8
 80a1866:	2b7f      	cmp	r3, #127	; 0x7f
 80a1868:	d851      	bhi.n	80a190e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 80a186a:	f110 020a 	adds.w	r2, r0, #10
 80a186e:	d24e      	bcs.n	80a190e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 80a1870:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
 80a1874:	429a      	cmp	r2, r3
 80a1876:	d84a      	bhi.n	80a190e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 80a1878:	429d      	cmp	r5, r3
 80a187a:	d348      	bcc.n	80a190e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
 80a187c:	f1a5 030a 	sub.w	r3, r5, #10
 80a1880:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 80a1882:	2f0a      	cmp	r7, #10
 80a1884:	d806      	bhi.n	80a1894 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
 80a1886:	e042      	b.n	80a190e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
 80a1888:	428d      	cmp	r5, r1
 80a188a:	d340      	bcc.n	80a190e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
 80a188c:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 80a188e:	2d0a      	cmp	r5, #10
 80a1890:	d93d      	bls.n	80a190e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 80a1892:	e03e      	b.n	80a1912 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a1894:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 80a1896:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a1898:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 80a189c:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 80a189e:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
 80a18a0:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
 80a18a4:	21ff      	movs	r1, #255	; 0xff
 80a18a6:	4650      	mov	r0, sl
 80a18a8:	f00b fe5b 	bl	80ad562 <memset>
    p += nb_pad;
 80a18ac:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80a18b0:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
 80a18b2:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80a18b6:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80a18b8:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80a18ba:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80a18bc:	f107 0208 	add.w	r2, r7, #8
 80a18c0:	4432      	add	r2, r6
 80a18c2:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 80a18c4:	b2fa      	uxtb	r2, r7
 80a18c6:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
 80a18c8:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 80a18cc:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 80a18ce:	2106      	movs	r1, #6
 80a18d0:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 80a18d2:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 80a18d4:	9901      	ldr	r1, [sp, #4]
 80a18d6:	463a      	mov	r2, r7
 80a18d8:	4650      	mov	r0, sl
 80a18da:	f00b fe1c 	bl	80ad516 <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
 80a18de:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
 80a18e0:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
 80a18e4:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80a18e8:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
 80a18ea:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80a18ec:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
 80a18ee:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
 80a18f0:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
 80a18f2:	4632      	mov	r2, r6
 80a18f4:	4649      	mov	r1, r9
 80a18f6:	4638      	mov	r0, r7
 80a18f8:	f00b fe0d 	bl	80ad516 <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 80a18fc:	443e      	add	r6, r7
 80a18fe:	eb08 0305 	add.w	r3, r8, r5
 80a1902:	429e      	cmp	r6, r3
 80a1904:	d019      	beq.n	80a193a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_zeroize( dst, dst_len );
 80a1906:	4629      	mov	r1, r5
 80a1908:	4640      	mov	r0, r8
 80a190a:	f7ff ff31 	bl	80a1770 <_ZL15mbedtls_zeroizePvj>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a190e:	4c0d      	ldr	r4, [pc, #52]	; (80a1944 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
 80a1910:	e013      	b.n	80a193a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a1912:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 80a1914:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a1916:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 80a191a:	2201      	movs	r2, #1
 80a191c:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
 80a1920:	21ff      	movs	r1, #255	; 0xff
 80a1922:	463a      	mov	r2, r7
 80a1924:	4618      	mov	r0, r3
 80a1926:	f00b fe1c 	bl	80ad562 <memset>
 80a192a:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
 80a192c:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
 80a192e:	1ea8      	subs	r0, r5, #2
 80a1930:	4632      	mov	r2, r6
 80a1932:	4649      	mov	r1, r9
 80a1934:	4418      	add	r0, r3
 80a1936:	f00b fdee 	bl	80ad516 <memcpy>
        mbedtls_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 80a193a:	4620      	mov	r0, r4
 80a193c:	b002      	add	sp, #8
 80a193e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1942:	bf00      	nop
 80a1944:	ffffbf80 	.word	0xffffbf80

080a1948 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80a1948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80a194a:	f100 0508 	add.w	r5, r0, #8
 80a194e:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80a1950:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80a1952:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80a1954:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80a1956:	f006 f924 	bl	80a7ba2 <mbedtls_mpi_size>
 80a195a:	4287      	cmp	r7, r0
 80a195c:	d117      	bne.n	80a198e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
 80a195e:	6863      	ldr	r3, [r4, #4]
 80a1960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80a1964:	d813      	bhi.n	80a198e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 80a1966:	2100      	movs	r1, #0
 80a1968:	4628      	mov	r0, r5
 80a196a:	f006 faeb 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a196e:	2800      	cmp	r0, #0
 80a1970:	dd0d      	ble.n	80a198e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 80a1972:	2100      	movs	r1, #0
 80a1974:	4628      	mov	r0, r5
 80a1976:	f006 f8ca 	bl	80a7b0e <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 80a197a:	b140      	cbz	r0, 80a198e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 80a197c:	b1ee      	cbz	r6, 80a19ba <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 80a197e:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 80a1982:	2100      	movs	r1, #0
 80a1984:	4628      	mov	r0, r5
 80a1986:	f006 fadd 	bl	80a7f44 <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 80a198a:	2800      	cmp	r0, #0
 80a198c:	dc01      	bgt.n	80a1992 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a198e:	481a      	ldr	r0, [pc, #104]	; (80a19f8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
 80a1990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 80a1992:	2100      	movs	r1, #0
 80a1994:	4628      	mov	r0, r5
 80a1996:	f006 f8ba 	bl	80a7b0e <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 80a199a:	2800      	cmp	r0, #0
 80a199c:	d0f7      	beq.n	80a198e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 80a199e:	f104 0538 	add.w	r5, r4, #56	; 0x38
 80a19a2:	2100      	movs	r1, #0
 80a19a4:	4628      	mov	r0, r5
 80a19a6:	f006 facd 	bl	80a7f44 <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 80a19aa:	2800      	cmp	r0, #0
 80a19ac:	ddef      	ble.n	80a198e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 80a19ae:	2100      	movs	r1, #0
 80a19b0:	4628      	mov	r0, r5
 80a19b2:	f006 f8ac 	bl	80a7b0e <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 80a19b6:	2800      	cmp	r0, #0
 80a19b8:	d0e9      	beq.n	80a198e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 80a19ba:	2100      	movs	r1, #0
 80a19bc:	f104 0014 	add.w	r0, r4, #20
 80a19c0:	f006 fac0 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a19c4:	2800      	cmp	r0, #0
 80a19c6:	dde2      	ble.n	80a198e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 80a19c8:	b1a6      	cbz	r6, 80a19f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 80a19ca:	2100      	movs	r1, #0
 80a19cc:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a19d0:	f006 fab8 	bl	80a7f44 <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 80a19d4:	2800      	cmp	r0, #0
 80a19d6:	ddda      	ble.n	80a198e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 80a19d8:	2100      	movs	r1, #0
 80a19da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80a19de:	f006 fab1 	bl	80a7f44 <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 80a19e2:	2800      	cmp	r0, #0
 80a19e4:	ddd3      	ble.n	80a198e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 80a19e6:	2100      	movs	r1, #0
 80a19e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80a19ec:	f006 faaa 	bl	80a7f44 <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 80a19f0:	2800      	cmp	r0, #0
 80a19f2:	ddcc      	ble.n	80a198e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
 80a19f4:	2000      	movs	r0, #0
 80a19f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a19f8:	ffffbf80 	.word	0xffffbf80

080a19fc <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 80a19fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1a00:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80a1a02:	4604      	mov	r4, r0
 80a1a04:	4698      	mov	r8, r3
 80a1a06:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a1a08:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;

    if( N != NULL )
 80a1a0a:	b149      	cbz	r1, 80a1a20 <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 80a1a0c:	f100 0908 	add.w	r9, r0, #8
 80a1a10:	4648      	mov	r0, r9
 80a1a12:	f006 f8cc 	bl	80a7bae <mbedtls_mpi_read_binary>
 80a1a16:	bb50      	cbnz	r0, 80a1a6e <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 80a1a18:	4648      	mov	r0, r9
 80a1a1a:	f006 f8c2 	bl	80a7ba2 <mbedtls_mpi_size>
 80a1a1e:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
 80a1a20:	f1b8 0f00 	cmp.w	r8, #0
 80a1a24:	d101      	bne.n	80a1a2a <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
 80a1a26:	b947      	cbnz	r7, 80a1a3a <mbedtls_rsa_import_raw+0x3e>
 80a1a28:	e00e      	b.n	80a1a48 <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 80a1a2a:	9a08      	ldr	r2, [sp, #32]
 80a1a2c:	4641      	mov	r1, r8
 80a1a2e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a1a32:	f006 f8bc 	bl	80a7bae <mbedtls_mpi_read_binary>
 80a1a36:	b9d0      	cbnz	r0, 80a1a6e <mbedtls_rsa_import_raw+0x72>
 80a1a38:	e7f5      	b.n	80a1a26 <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 80a1a3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a1a3c:	4639      	mov	r1, r7
 80a1a3e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a1a42:	f006 f8b4 	bl	80a7bae <mbedtls_mpi_read_binary>
 80a1a46:	b990      	cbnz	r0, 80a1a6e <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
 80a1a48:	b136      	cbz	r6, 80a1a58 <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 80a1a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a1a4c:	4631      	mov	r1, r6
 80a1a4e:	f104 0020 	add.w	r0, r4, #32
 80a1a52:	f006 f8ac 	bl	80a7bae <mbedtls_mpi_read_binary>
 80a1a56:	b950      	cbnz	r0, 80a1a6e <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
 80a1a58:	b135      	cbz	r5, 80a1a68 <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 80a1a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a1a5c:	4629      	mov	r1, r5
 80a1a5e:	f104 0014 	add.w	r0, r4, #20
 80a1a62:	f006 f8a4 	bl	80a7bae <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
 80a1a66:	b910      	cbnz	r0, 80a1a6e <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
 80a1a68:	2000      	movs	r0, #0
 80a1a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80a1a6e:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
 80a1a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080a1a78 <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 80a1a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 80a1a7c:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 80a1a80:	b087      	sub	sp, #28
 80a1a82:	4607      	mov	r7, r0
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 80a1a84:	2100      	movs	r1, #0
 80a1a86:	4658      	mov	r0, fp
 80a1a88:	f006 fa5c 	bl	80a7f44 <mbedtls_mpi_cmp_int>
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80a1a8c:	f107 092c 	add.w	r9, r7, #44	; 0x2c
 80a1a90:	2100      	movs	r1, #0

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 80a1a92:	4680      	mov	r8, r0
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80a1a94:	4648      	mov	r0, r9
 80a1a96:	f006 fa55 	bl	80a7f44 <mbedtls_mpi_cmp_int>
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80a1a9a:	f107 0a38 	add.w	sl, r7, #56	; 0x38
int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80a1a9e:	9005      	str	r0, [sp, #20]
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80a1aa0:	2100      	movs	r1, #0
 80a1aa2:	4650      	mov	r0, sl
 80a1aa4:	f006 fa4e 	bl	80a7f44 <mbedtls_mpi_cmp_int>
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80a1aa8:	f107 0320 	add.w	r3, r7, #32
 80a1aac:	2100      	movs	r1, #0
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80a1aae:	4605      	mov	r5, r0
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80a1ab0:	4618      	mov	r0, r3
 80a1ab2:	9302      	str	r3, [sp, #8]
 80a1ab4:	f006 fa46 	bl	80a7f44 <mbedtls_mpi_cmp_int>
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 80a1ab8:	f107 0314 	add.w	r3, r7, #20
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80a1abc:	9004      	str	r0, [sp, #16]
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 80a1abe:	2100      	movs	r1, #0
 80a1ac0:	4618      	mov	r0, r3
 80a1ac2:	9303      	str	r3, [sp, #12]
 80a1ac4:	f006 fa3e 	bl	80a7f44 <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80a1ac8:	9b05      	ldr	r3, [sp, #20]
 80a1aca:	9a04      	ldr	r2, [sp, #16]
 80a1acc:	b14b      	cbz	r3, 80a1ae2 <mbedtls_rsa_complete+0x6a>
 80a1ace:	b125      	cbz	r5, 80a1ada <mbedtls_rsa_complete+0x62>
 80a1ad0:	b12a      	cbz	r2, 80a1ade <mbedtls_rsa_complete+0x66>
 80a1ad2:	1c06      	adds	r6, r0, #0
 80a1ad4:	bf18      	it	ne
 80a1ad6:	2601      	movne	r6, #1
 80a1ad8:	e013      	b.n	80a1b02 <mbedtls_rsa_complete+0x8a>
 80a1ada:	462e      	mov	r6, r5
 80a1adc:	e011      	b.n	80a1b02 <mbedtls_rsa_complete+0x8a>
 80a1ade:	4616      	mov	r6, r2
 80a1ae0:	e00f      	b.n	80a1b02 <mbedtls_rsa_complete+0x8a>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80a1ae2:	f1b8 0f00 	cmp.w	r8, #0
 80a1ae6:	d103      	bne.n	80a1af0 <mbedtls_rsa_complete+0x78>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a1ae8:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80a1aea:	4646      	mov	r6, r8
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80a1aec:	2200      	movs	r2, #0
 80a1aee:	e024      	b.n	80a1b3a <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80a1af0:	b9cd      	cbnz	r5, 80a1b26 <mbedtls_rsa_complete+0xae>
 80a1af2:	b11a      	cbz	r2, 80a1afc <mbedtls_rsa_complete+0x84>
 80a1af4:	b9f0      	cbnz	r0, 80a1b34 <mbedtls_rsa_complete+0xbc>
 80a1af6:	4606      	mov	r6, r0
 80a1af8:	4604      	mov	r4, r0
 80a1afa:	e00e      	b.n	80a1b1a <mbedtls_rsa_complete+0xa2>
 80a1afc:	462e      	mov	r6, r5
 80a1afe:	462c      	mov	r4, r5
 80a1b00:	e00d      	b.n	80a1b1e <mbedtls_rsa_complete+0xa6>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a1b02:	b1ad      	cbz	r5, 80a1b30 <mbedtls_rsa_complete+0xb8>
 80a1b04:	b992      	cbnz	r2, 80a1b2c <mbedtls_rsa_complete+0xb4>
 80a1b06:	1c04      	adds	r4, r0, #0
 80a1b08:	bf18      	it	ne
 80a1b0a:	2401      	movne	r4, #1
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80a1b0c:	f1b8 0f00 	cmp.w	r8, #0
 80a1b10:	d0ec      	beq.n	80a1aec <mbedtls_rsa_complete+0x74>
 80a1b12:	2b00      	cmp	r3, #0
 80a1b14:	d1ea      	bne.n	80a1aec <mbedtls_rsa_complete+0x74>
 80a1b16:	2d00      	cmp	r5, #0
 80a1b18:	d1e8      	bne.n	80a1aec <mbedtls_rsa_complete+0x74>
 80a1b1a:	2a00      	cmp	r2, #0
 80a1b1c:	d1e6      	bne.n	80a1aec <mbedtls_rsa_complete+0x74>
 80a1b1e:	2800      	cmp	r0, #0
 80a1b20:	d0e4      	beq.n	80a1aec <mbedtls_rsa_complete+0x74>
 80a1b22:	2201      	movs	r2, #1
 80a1b24:	e009      	b.n	80a1b3a <mbedtls_rsa_complete+0xc2>
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a1b26:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80a1b28:	461e      	mov	r6, r3
 80a1b2a:	e7df      	b.n	80a1aec <mbedtls_rsa_complete+0x74>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a1b2c:	2400      	movs	r4, #0
 80a1b2e:	e7ed      	b.n	80a1b0c <mbedtls_rsa_complete+0x94>
 80a1b30:	462c      	mov	r4, r5
 80a1b32:	e7db      	b.n	80a1aec <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80a1b34:	2601      	movs	r6, #1
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a1b36:	462c      	mov	r4, r5
 80a1b38:	e002      	b.n	80a1b40 <mbedtls_rsa_complete+0xc8>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
 80a1b3a:	2e00      	cmp	r6, #0
 80a1b3c:	d03d      	beq.n	80a1bba <mbedtls_rsa_complete+0x142>
 80a1b3e:	2600      	movs	r6, #0
 80a1b40:	9404      	str	r4, [sp, #16]
 80a1b42:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 80a1b44:	f1b8 0f00 	cmp.w	r8, #0
 80a1b48:	d10b      	bne.n	80a1b62 <mbedtls_rsa_complete+0xea>
 80a1b4a:	b153      	cbz	r3, 80a1b62 <mbedtls_rsa_complete+0xea>
 80a1b4c:	b14d      	cbz	r5, 80a1b62 <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 80a1b4e:	4652      	mov	r2, sl
 80a1b50:	4649      	mov	r1, r9
 80a1b52:	4658      	mov	r0, fp
 80a1b54:	f006 fb15 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80a1b58:	bb28      	cbnz	r0, 80a1ba6 <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 80a1b5a:	4658      	mov	r0, fp
 80a1b5c:	f006 f821 	bl	80a7ba2 <mbedtls_mpi_size>
 80a1b60:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 80a1b62:	b146      	cbz	r6, 80a1b76 <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
 80a1b64:	f8cd a000 	str.w	sl, [sp]
 80a1b68:	464b      	mov	r3, r9
 80a1b6a:	9a02      	ldr	r2, [sp, #8]
 80a1b6c:	9903      	ldr	r1, [sp, #12]
 80a1b6e:	4658      	mov	r0, fp
 80a1b70:	f009 f9ca 	bl	80aaf08 <mbedtls_rsa_deduce_primes>
 80a1b74:	e007      	b.n	80a1b86 <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
 80a1b76:	9b04      	ldr	r3, [sp, #16]
 80a1b78:	b133      	cbz	r3, 80a1b88 <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 80a1b7a:	9b02      	ldr	r3, [sp, #8]
 80a1b7c:	9a03      	ldr	r2, [sp, #12]
 80a1b7e:	4651      	mov	r1, sl
 80a1b80:	4648      	mov	r0, r9
 80a1b82:	f009 fabd 	bl	80ab100 <mbedtls_rsa_deduce_private_exponent>
 80a1b86:	b970      	cbnz	r0, 80a1ba6 <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 80a1b88:	b184      	cbz	r4, 80a1bac <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 80a1b8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 80a1b8e:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 80a1b90:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 80a1b94:	9300      	str	r3, [sp, #0]
 80a1b96:	9a02      	ldr	r2, [sp, #8]
 80a1b98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80a1b9c:	4651      	mov	r1, sl
 80a1b9e:	4648      	mov	r0, r9
 80a1ba0:	f009 fc52 	bl	80ab448 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 80a1ba4:	b110      	cbz	r0, 80a1bac <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80a1ba6:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 80a1baa:	e00c      	b.n	80a1bc6 <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 80a1bac:	4621      	mov	r1, r4
 80a1bae:	4638      	mov	r0, r7
}
 80a1bb0:	b007      	add	sp, #28
 80a1bb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 80a1bb6:	f7ff bec7 	b.w	80a1948 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
 80a1bba:	b90c      	cbnz	r4, 80a1bc0 <mbedtls_rsa_complete+0x148>
 80a1bbc:	b112      	cbz	r2, 80a1bc4 <mbedtls_rsa_complete+0x14c>
 80a1bbe:	4626      	mov	r6, r4
 80a1bc0:	9404      	str	r4, [sp, #16]
 80a1bc2:	e7bf      	b.n	80a1b44 <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a1bc4:	4801      	ldr	r0, [pc, #4]	; (80a1bcc <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
 80a1bc6:	b007      	add	sp, #28
 80a1bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1bcc:	ffffbf80 	.word	0xffffbf80

080a1bd0 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 80a1bd0:	b570      	push	{r4, r5, r6, lr}
 80a1bd2:	4604      	mov	r4, r0
 80a1bd4:	460e      	mov	r6, r1
 80a1bd6:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 80a1bd8:	2100      	movs	r1, #0
 80a1bda:	22ac      	movs	r2, #172	; 0xac
 80a1bdc:	f00b fcc1 	bl	80ad562 <memset>
/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
    ctx->padding = padding;
 80a1be0:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 80a1be4:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 80a1be8:	bd70      	pop	{r4, r5, r6, pc}

080a1bea <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
 80a1bea:	6840      	ldr	r0, [r0, #4]
 80a1bec:	4770      	bx	lr
	...

080a1bf0 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 80a1bf0:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 80a1bf2:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 80a1bf4:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 80a1bf6:	f7ff fea7 	bl	80a1948 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80a1bfa:	4605      	mov	r5, r0
 80a1bfc:	b9b8      	cbnz	r0, 80a1c2e <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 80a1bfe:	f104 0608 	add.w	r6, r4, #8
 80a1c02:	4630      	mov	r0, r6
 80a1c04:	f005 ffad 	bl	80a7b62 <mbedtls_mpi_bitlen>
 80a1c08:	287f      	cmp	r0, #127	; 0x7f
 80a1c0a:	d910      	bls.n	80a1c2e <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80a1c0c:	3414      	adds	r4, #20
 80a1c0e:	4629      	mov	r1, r5
 80a1c10:	4620      	mov	r0, r4
 80a1c12:	f005 ff7c 	bl	80a7b0e <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80a1c16:	b150      	cbz	r0, 80a1c2e <mbedtls_rsa_check_pubkey+0x3e>
 80a1c18:	4620      	mov	r0, r4
 80a1c1a:	f005 ffa2 	bl	80a7b62 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80a1c1e:	2801      	cmp	r0, #1
 80a1c20:	d905      	bls.n	80a1c2e <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 80a1c22:	4631      	mov	r1, r6
 80a1c24:	4620      	mov	r0, r4
 80a1c26:	f006 f948 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80a1c2a:	2800      	cmp	r0, #0
 80a1c2c:	db00      	blt.n	80a1c30 <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80a1c2e:	4d01      	ldr	r5, [pc, #4]	; (80a1c34 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
 80a1c30:	4628      	mov	r0, r5
 80a1c32:	bd70      	pop	{r4, r5, r6, pc}
 80a1c34:	ffffbe00 	.word	0xffffbe00

080a1c38 <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 80a1c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1c3a:	b085      	sub	sp, #20
 80a1c3c:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80a1c3e:	f7ff ffd7 	bl	80a1bf0 <mbedtls_rsa_check_pubkey>
 80a1c42:	bb28      	cbnz	r0, 80a1c90 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 80a1c44:	2101      	movs	r1, #1
 80a1c46:	4620      	mov	r0, r4
 80a1c48:	f7ff fe7e 	bl	80a1948 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80a1c4c:	bb00      	cbnz	r0, 80a1c90 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 80a1c4e:	f104 0314 	add.w	r3, r4, #20
 80a1c52:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 80a1c56:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80a1c5a:	f104 0720 	add.w	r7, r4, #32
 80a1c5e:	9002      	str	r0, [sp, #8]
 80a1c60:	9001      	str	r0, [sp, #4]
 80a1c62:	9300      	str	r3, [sp, #0]
 80a1c64:	4632      	mov	r2, r6
 80a1c66:	463b      	mov	r3, r7
 80a1c68:	4629      	mov	r1, r5
 80a1c6a:	f104 0008 	add.w	r0, r4, #8
 80a1c6e:	f009 fb25 	bl	80ab2bc <mbedtls_rsa_validate_params>
 80a1c72:	b968      	cbnz	r0, 80a1c90 <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 80a1c74:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80a1c78:	9301      	str	r3, [sp, #4]
 80a1c7a:	f104 0350 	add.w	r3, r4, #80	; 0x50
 80a1c7e:	9300      	str	r3, [sp, #0]
 80a1c80:	463a      	mov	r2, r7
 80a1c82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80a1c86:	4631      	mov	r1, r6
 80a1c88:	4628      	mov	r0, r5
 80a1c8a:	f009 fa97 	bl	80ab1bc <mbedtls_rsa_validate_crt>
 80a1c8e:	b100      	cbz	r0, 80a1c92 <mbedtls_rsa_check_privkey+0x5a>
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80a1c90:	4801      	ldr	r0, [pc, #4]	; (80a1c98 <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
 80a1c92:	b005      	add	sp, #20
 80a1c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1c96:	bf00      	nop
 80a1c98:	ffffbe00 	.word	0xffffbe00

080a1c9c <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 80a1c9c:	b538      	push	{r3, r4, r5, lr}
 80a1c9e:	4605      	mov	r5, r0
 80a1ca0:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80a1ca2:	f7ff ffa5 	bl	80a1bf0 <mbedtls_rsa_check_pubkey>
 80a1ca6:	b950      	cbnz	r0, 80a1cbe <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 80a1ca8:	4620      	mov	r0, r4
 80a1caa:	f7ff ffc5 	bl	80a1c38 <mbedtls_rsa_check_privkey>
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80a1cae:	b930      	cbnz	r0, 80a1cbe <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80a1cb0:	f104 0108 	add.w	r1, r4, #8
 80a1cb4:	f105 0008 	add.w	r0, r5, #8
 80a1cb8:	f006 f8ff 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
 80a1cbc:	b108      	cbz	r0, 80a1cc2 <mbedtls_rsa_check_pub_priv+0x26>
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80a1cbe:	4805      	ldr	r0, [pc, #20]	; (80a1cd4 <mbedtls_rsa_check_pub_priv+0x38>)
 80a1cc0:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 80a1cc2:	f104 0114 	add.w	r1, r4, #20
 80a1cc6:	f105 0014 	add.w	r0, r5, #20
 80a1cca:	f006 f8f6 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80a1cce:	2800      	cmp	r0, #0
 80a1cd0:	d1f5      	bne.n	80a1cbe <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
 80a1cd2:	bd38      	pop	{r3, r4, r5, pc}
 80a1cd4:	ffffbe00 	.word	0xffffbe00

080a1cd8 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 80a1cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1cdc:	460c      	mov	r4, r1
 80a1cde:	b086      	sub	sp, #24
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 80a1ce0:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 80a1ce2:	4605      	mov	r5, r0
 80a1ce4:	4617      	mov	r7, r2
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 80a1ce6:	f7ff fe2f 	bl	80a1948 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80a1cea:	4606      	mov	r6, r0
 80a1cec:	bb78      	cbnz	r0, 80a1d4e <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
 80a1cee:	a803      	add	r0, sp, #12
 80a1cf0:	f005 fe7e 	bl	80a79f0 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80a1cf4:	4621      	mov	r1, r4
 80a1cf6:	686a      	ldr	r2, [r5, #4]
 80a1cf8:	a803      	add	r0, sp, #12
 80a1cfa:	f005 ff58 	bl	80a7bae <mbedtls_mpi_read_binary>
 80a1cfe:	4604      	mov	r4, r0
 80a1d00:	b9f0      	cbnz	r0, 80a1d40 <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80a1d02:	f105 0408 	add.w	r4, r5, #8
 80a1d06:	4621      	mov	r1, r4
 80a1d08:	a803      	add	r0, sp, #12
 80a1d0a:	f006 f8d6 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
 80a1d0e:	2800      	cmp	r0, #0
 80a1d10:	da14      	bge.n	80a1d3c <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80a1d12:	f105 0368 	add.w	r3, r5, #104	; 0x68
 80a1d16:	a903      	add	r1, sp, #12
 80a1d18:	9300      	str	r3, [sp, #0]
 80a1d1a:	f105 0214 	add.w	r2, r5, #20
 80a1d1e:	4623      	mov	r3, r4
 80a1d20:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
 80a1d22:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80a1d26:	f006 fc9a 	bl	80a865e <mbedtls_mpi_exp_mod>
 80a1d2a:	4604      	mov	r4, r0
 80a1d2c:	b940      	cbnz	r0, 80a1d40 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80a1d2e:	4642      	mov	r2, r8
 80a1d30:	4639      	mov	r1, r7
 80a1d32:	a803      	add	r0, sp, #12
 80a1d34:	f005 ff70 	bl	80a7c18 <mbedtls_mpi_write_binary>
 80a1d38:	4604      	mov	r4, r0
 80a1d3a:	e001      	b.n	80a1d40 <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80a1d3c:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 80a1d40:	a803      	add	r0, sp, #12
 80a1d42:	f005 fe5c 	bl	80a79fe <mbedtls_mpi_free>

    if( ret != 0 )
 80a1d46:	b11c      	cbz	r4, 80a1d50 <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 80a1d48:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
 80a1d4c:	e000      	b.n	80a1d50 <mbedtls_rsa_public+0x78>
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a1d4e:	4e02      	ldr	r6, [pc, #8]	; (80a1d58 <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
 80a1d50:	4630      	mov	r0, r6
 80a1d52:	b006      	add	sp, #24
 80a1d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1d58:	ffffbf80 	.word	0xffffbf80

080a1d5c <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 80a1d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1d60:	460e      	mov	r6, r1
 80a1d62:	b0a5      	sub	sp, #148	; 0x94

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 80a1d64:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 80a1d66:	4604      	mov	r4, r0
 80a1d68:	4692      	mov	sl, r2
 80a1d6a:	461d      	mov	r5, r3

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 80a1d6c:	f7ff fdec 	bl	80a1948 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80a1d70:	9003      	str	r0, [sp, #12]
 80a1d72:	2800      	cmp	r0, #0
 80a1d74:	f040 819b 	bne.w	80a20ae <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 80a1d78:	a806      	add	r0, sp, #24
 80a1d7a:	f005 fe39 	bl	80a79f0 <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 80a1d7e:	a809      	add	r0, sp, #36	; 0x24
 80a1d80:	f005 fe36 	bl	80a79f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 80a1d84:	a80c      	add	r0, sp, #48	; 0x30
 80a1d86:	f005 fe33 	bl	80a79f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 80a1d8a:	a80f      	add	r0, sp, #60	; 0x3c
 80a1d8c:	f005 fe30 	bl	80a79f0 <mbedtls_mpi_init>

    if( f_rng != NULL )
 80a1d90:	b12e      	cbz	r6, 80a1d9e <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 80a1d92:	a818      	add	r0, sp, #96	; 0x60
 80a1d94:	f005 fe2c 	bl	80a79f0 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 80a1d98:	a81b      	add	r0, sp, #108	; 0x6c
 80a1d9a:	f005 fe29 	bl	80a79f0 <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 80a1d9e:	a812      	add	r0, sp, #72	; 0x48
 80a1da0:	f005 fe26 	bl	80a79f0 <mbedtls_mpi_init>
 80a1da4:	a815      	add	r0, sp, #84	; 0x54
 80a1da6:	f005 fe23 	bl	80a79f0 <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 80a1daa:	a81e      	add	r0, sp, #120	; 0x78
 80a1dac:	f005 fe20 	bl	80a79f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 80a1db0:	a821      	add	r0, sp, #132	; 0x84
 80a1db2:	f005 fe1d 	bl	80a79f0 <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80a1db6:	6862      	ldr	r2, [r4, #4]
 80a1db8:	4629      	mov	r1, r5
 80a1dba:	a806      	add	r0, sp, #24
 80a1dbc:	f005 fef7 	bl	80a7bae <mbedtls_mpi_read_binary>
 80a1dc0:	4607      	mov	r7, r0
 80a1dc2:	2800      	cmp	r0, #0
 80a1dc4:	f040 8150 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80a1dc8:	f104 0508 	add.w	r5, r4, #8
 80a1dcc:	4629      	mov	r1, r5
 80a1dce:	a806      	add	r0, sp, #24
 80a1dd0:	f006 f873 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
 80a1dd4:	2800      	cmp	r0, #0
 80a1dd6:	f280 8143 	bge.w	80a2060 <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 80a1dda:	a906      	add	r1, sp, #24
 80a1ddc:	a81e      	add	r0, sp, #120	; 0x78
 80a1dde:	f005 fe50 	bl	80a7a82 <mbedtls_mpi_copy>
 80a1de2:	4607      	mov	r7, r0
 80a1de4:	2800      	cmp	r0, #0
 80a1de6:	f040 813f 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
 80a1dea:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 80a1dee:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 80a1df2:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
 80a1df4:	2e00      	cmp	r6, #0
 80a1df6:	f000 80c5 	beq.w	80a1f84 <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 80a1dfa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80a1dfe:	b323      	cbz	r3, 80a1e4a <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 80a1e00:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 80a1e04:	4642      	mov	r2, r8
 80a1e06:	4641      	mov	r1, r8
 80a1e08:	4640      	mov	r0, r8
 80a1e0a:	f006 f9ba 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80a1e0e:	4607      	mov	r7, r0
 80a1e10:	2800      	cmp	r0, #0
 80a1e12:	f040 8129 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 80a1e16:	462a      	mov	r2, r5
 80a1e18:	4641      	mov	r1, r8
 80a1e1a:	4640      	mov	r0, r8
 80a1e1c:	f006 fbed 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80a1e20:	4607      	mov	r7, r0
 80a1e22:	2800      	cmp	r0, #0
 80a1e24:	f040 8120 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 80a1e28:	f104 0898 	add.w	r8, r4, #152	; 0x98
 80a1e2c:	4642      	mov	r2, r8
 80a1e2e:	4641      	mov	r1, r8
 80a1e30:	4640      	mov	r0, r8
 80a1e32:	f006 f9a6 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80a1e36:	4607      	mov	r7, r0
 80a1e38:	2800      	cmp	r0, #0
 80a1e3a:	f040 8115 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 80a1e3e:	462a      	mov	r2, r5
 80a1e40:	4641      	mov	r1, r8
 80a1e42:	4640      	mov	r0, r8
 80a1e44:	f006 fbd9 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80a1e48:	e037      	b.n	80a1eba <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 80a1e4a:	230c      	movs	r3, #12
 80a1e4c:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80a1e4e:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80a1e52:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 80a1e56:	9b05      	ldr	r3, [sp, #20]
 80a1e58:	3b01      	subs	r3, #1
 80a1e5a:	9305      	str	r3, [sp, #20]
 80a1e5c:	f000 812a 	beq.w	80a20b4 <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80a1e60:	6861      	ldr	r1, [r4, #4]
 80a1e62:	4653      	mov	r3, sl
 80a1e64:	4632      	mov	r2, r6
 80a1e66:	3901      	subs	r1, #1
 80a1e68:	4658      	mov	r0, fp
 80a1e6a:	f006 fe9c 	bl	80a8ba6 <mbedtls_mpi_fill_random>
 80a1e6e:	4607      	mov	r7, r0
 80a1e70:	2800      	cmp	r0, #0
 80a1e72:	f040 80f9 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80a1e76:	462a      	mov	r2, r5
 80a1e78:	4659      	mov	r1, fp
 80a1e7a:	4640      	mov	r0, r8
 80a1e7c:	f006 fe0e 	bl	80a8a9c <mbedtls_mpi_gcd>
 80a1e80:	4607      	mov	r7, r0
 80a1e82:	2800      	cmp	r0, #0
 80a1e84:	f040 80f0 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 80a1e88:	2101      	movs	r1, #1
 80a1e8a:	4640      	mov	r0, r8
 80a1e8c:	f006 f85a 	bl	80a7f44 <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
 80a1e90:	2800      	cmp	r0, #0
 80a1e92:	d1e0      	bne.n	80a1e56 <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80a1e94:	462a      	mov	r2, r5
 80a1e96:	4659      	mov	r1, fp
 80a1e98:	4640      	mov	r0, r8
 80a1e9a:	f006 fea7 	bl	80a8bec <mbedtls_mpi_inv_mod>
 80a1e9e:	4607      	mov	r7, r0
 80a1ea0:	2800      	cmp	r0, #0
 80a1ea2:	f040 80e1 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 80a1ea6:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80a1eaa:	9300      	str	r3, [sp, #0]
 80a1eac:	f104 0214 	add.w	r2, r4, #20
 80a1eb0:	462b      	mov	r3, r5
 80a1eb2:	4641      	mov	r1, r8
 80a1eb4:	4640      	mov	r0, r8
 80a1eb6:	f006 fbd2 	bl	80a865e <mbedtls_mpi_exp_mod>
 80a1eba:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 80a1ebc:	2800      	cmp	r0, #0
 80a1ebe:	f040 80d3 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 80a1ec2:	a906      	add	r1, sp, #24
 80a1ec4:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80a1ec8:	4608      	mov	r0, r1
 80a1eca:	f006 f95a 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80a1ece:	4607      	mov	r7, r0
 80a1ed0:	2800      	cmp	r0, #0
 80a1ed2:	f040 80c9 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80a1ed6:	a906      	add	r1, sp, #24
 80a1ed8:	462a      	mov	r2, r5
 80a1eda:	4608      	mov	r0, r1
 80a1edc:	f006 fb8d 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80a1ee0:	4607      	mov	r7, r0
 80a1ee2:	2800      	cmp	r0, #0
 80a1ee4:	f040 80c0 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 80a1ee8:	2201      	movs	r2, #1
 80a1eea:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80a1eee:	a809      	add	r0, sp, #36	; 0x24
 80a1ef0:	f006 f931 	bl	80a8156 <mbedtls_mpi_sub_int>
 80a1ef4:	4607      	mov	r7, r0
 80a1ef6:	2800      	cmp	r0, #0
 80a1ef8:	f040 80b6 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 80a1efc:	2201      	movs	r2, #1
 80a1efe:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a1f02:	a80c      	add	r0, sp, #48	; 0x30
 80a1f04:	f006 f927 	bl	80a8156 <mbedtls_mpi_sub_int>
 80a1f08:	4607      	mov	r7, r0
 80a1f0a:	2800      	cmp	r0, #0
 80a1f0c:	f040 80ac 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80a1f10:	4653      	mov	r3, sl
 80a1f12:	4632      	mov	r2, r6
 80a1f14:	211c      	movs	r1, #28
 80a1f16:	a80f      	add	r0, sp, #60	; 0x3c
 80a1f18:	f006 fe45 	bl	80a8ba6 <mbedtls_mpi_fill_random>
 80a1f1c:	4607      	mov	r7, r0
 80a1f1e:	2800      	cmp	r0, #0
 80a1f20:	f040 80a2 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 80a1f24:	aa0f      	add	r2, sp, #60	; 0x3c
 80a1f26:	a909      	add	r1, sp, #36	; 0x24
 80a1f28:	a818      	add	r0, sp, #96	; 0x60
 80a1f2a:	f006 f92a 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80a1f2e:	4607      	mov	r7, r0
 80a1f30:	2800      	cmp	r0, #0
 80a1f32:	f040 8099 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 80a1f36:	a918      	add	r1, sp, #96	; 0x60
 80a1f38:	464a      	mov	r2, r9
 80a1f3a:	4608      	mov	r0, r1
 80a1f3c:	f006 f8b2 	bl	80a80a4 <mbedtls_mpi_add_mpi>
 80a1f40:	4607      	mov	r7, r0
 80a1f42:	2800      	cmp	r0, #0
 80a1f44:	f040 8090 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80a1f48:	4653      	mov	r3, sl
 80a1f4a:	4632      	mov	r2, r6
 80a1f4c:	211c      	movs	r1, #28
 80a1f4e:	a80f      	add	r0, sp, #60	; 0x3c
 80a1f50:	f006 fe29 	bl	80a8ba6 <mbedtls_mpi_fill_random>
 80a1f54:	4607      	mov	r7, r0
 80a1f56:	2800      	cmp	r0, #0
 80a1f58:	f040 8086 	bne.w	80a2068 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 80a1f5c:	aa0f      	add	r2, sp, #60	; 0x3c
 80a1f5e:	a90c      	add	r1, sp, #48	; 0x30
 80a1f60:	a81b      	add	r0, sp, #108	; 0x6c
 80a1f62:	f006 f90e 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80a1f66:	4607      	mov	r7, r0
 80a1f68:	2800      	cmp	r0, #0
 80a1f6a:	d17d      	bne.n	80a2068 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 80a1f6c:	a91b      	add	r1, sp, #108	; 0x6c
 80a1f6e:	9a04      	ldr	r2, [sp, #16]
 80a1f70:	4608      	mov	r0, r1
 80a1f72:	f006 f897 	bl	80a80a4 <mbedtls_mpi_add_mpi>
 80a1f76:	4607      	mov	r7, r0
 80a1f78:	2800      	cmp	r0, #0
 80a1f7a:	d175      	bne.n	80a2068 <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 80a1f7c:	ab1b      	add	r3, sp, #108	; 0x6c
 80a1f7e:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
 80a1f80:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 80a1f84:	f104 0374 	add.w	r3, r4, #116	; 0x74
 80a1f88:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80a1f8c:	9300      	str	r3, [sp, #0]
 80a1f8e:	464a      	mov	r2, r9
 80a1f90:	4643      	mov	r3, r8
 80a1f92:	a906      	add	r1, sp, #24
 80a1f94:	a812      	add	r0, sp, #72	; 0x48
 80a1f96:	f006 fb62 	bl	80a865e <mbedtls_mpi_exp_mod>
 80a1f9a:	4607      	mov	r7, r0
 80a1f9c:	2800      	cmp	r0, #0
 80a1f9e:	d163      	bne.n	80a2068 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 80a1fa0:	f104 0380 	add.w	r3, r4, #128	; 0x80
 80a1fa4:	f104 0938 	add.w	r9, r4, #56	; 0x38
 80a1fa8:	9300      	str	r3, [sp, #0]
 80a1faa:	9a04      	ldr	r2, [sp, #16]
 80a1fac:	464b      	mov	r3, r9
 80a1fae:	a906      	add	r1, sp, #24
 80a1fb0:	a815      	add	r0, sp, #84	; 0x54
 80a1fb2:	f006 fb54 	bl	80a865e <mbedtls_mpi_exp_mod>
 80a1fb6:	4607      	mov	r7, r0
 80a1fb8:	2800      	cmp	r0, #0
 80a1fba:	d155      	bne.n	80a2068 <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 80a1fbc:	aa15      	add	r2, sp, #84	; 0x54
 80a1fbe:	a912      	add	r1, sp, #72	; 0x48
 80a1fc0:	a806      	add	r0, sp, #24
 80a1fc2:	f006 f890 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a1fc6:	4607      	mov	r7, r0
 80a1fc8:	2800      	cmp	r0, #0
 80a1fca:	d14d      	bne.n	80a2068 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 80a1fcc:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 80a1fd0:	a906      	add	r1, sp, #24
 80a1fd2:	a812      	add	r0, sp, #72	; 0x48
 80a1fd4:	f006 f8d5 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80a1fd8:	4607      	mov	r7, r0
 80a1fda:	2800      	cmp	r0, #0
 80a1fdc:	d144      	bne.n	80a2068 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 80a1fde:	4642      	mov	r2, r8
 80a1fe0:	a912      	add	r1, sp, #72	; 0x48
 80a1fe2:	a806      	add	r0, sp, #24
 80a1fe4:	f006 fb09 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80a1fe8:	4607      	mov	r7, r0
 80a1fea:	2800      	cmp	r0, #0
 80a1fec:	d13c      	bne.n	80a2068 <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 80a1fee:	464a      	mov	r2, r9
 80a1ff0:	a906      	add	r1, sp, #24
 80a1ff2:	a812      	add	r0, sp, #72	; 0x48
 80a1ff4:	f006 f8c5 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80a1ff8:	4607      	mov	r7, r0
 80a1ffa:	2800      	cmp	r0, #0
 80a1ffc:	d134      	bne.n	80a2068 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 80a1ffe:	aa12      	add	r2, sp, #72	; 0x48
 80a2000:	a915      	add	r1, sp, #84	; 0x54
 80a2002:	a806      	add	r0, sp, #24
 80a2004:	f006 f84e 	bl	80a80a4 <mbedtls_mpi_add_mpi>
 80a2008:	4607      	mov	r7, r0
 80a200a:	bb68      	cbnz	r0, 80a2068 <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 80a200c:	b966      	cbnz	r6, 80a2028 <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 80a200e:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80a2012:	9300      	str	r3, [sp, #0]
 80a2014:	f104 0214 	add.w	r2, r4, #20
 80a2018:	462b      	mov	r3, r5
 80a201a:	a906      	add	r1, sp, #24
 80a201c:	a821      	add	r0, sp, #132	; 0x84
 80a201e:	f006 fb1e 	bl	80a865e <mbedtls_mpi_exp_mod>
 80a2022:	4607      	mov	r7, r0
 80a2024:	bb00      	cbnz	r0, 80a2068 <mbedtls_rsa_private+0x30c>
 80a2026:	e00f      	b.n	80a2048 <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 80a2028:	a906      	add	r1, sp, #24
 80a202a:	f104 0298 	add.w	r2, r4, #152	; 0x98
 80a202e:	4608      	mov	r0, r1
 80a2030:	f006 f8a7 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80a2034:	4607      	mov	r7, r0
 80a2036:	b9b8      	cbnz	r0, 80a2068 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80a2038:	a906      	add	r1, sp, #24
 80a203a:	462a      	mov	r2, r5
 80a203c:	4608      	mov	r0, r1
 80a203e:	f006 fadc 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80a2042:	4607      	mov	r7, r0
 80a2044:	b980      	cbnz	r0, 80a2068 <mbedtls_rsa_private+0x30c>
 80a2046:	e7e2      	b.n	80a200e <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 80a2048:	a91e      	add	r1, sp, #120	; 0x78
 80a204a:	a821      	add	r0, sp, #132	; 0x84
 80a204c:	f005 ff35 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
 80a2050:	b948      	cbnz	r0, 80a2066 <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80a2052:	6862      	ldr	r2, [r4, #4]
 80a2054:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80a2056:	a806      	add	r0, sp, #24
 80a2058:	f005 fdde 	bl	80a7c18 <mbedtls_mpi_write_binary>
 80a205c:	4607      	mov	r7, r0
 80a205e:	e003      	b.n	80a2068 <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80a2060:	f06f 0703 	mvn.w	r7, #3
 80a2064:	e000      	b.n	80a2068 <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80a2066:	4f16      	ldr	r7, [pc, #88]	; (80a20c0 <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 80a2068:	a809      	add	r0, sp, #36	; 0x24
 80a206a:	f005 fcc8 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80a206e:	a80c      	add	r0, sp, #48	; 0x30
 80a2070:	f005 fcc5 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 80a2074:	a80f      	add	r0, sp, #60	; 0x3c
 80a2076:	f005 fcc2 	bl	80a79fe <mbedtls_mpi_free>

    if( f_rng != NULL )
 80a207a:	b12e      	cbz	r6, 80a2088 <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 80a207c:	a818      	add	r0, sp, #96	; 0x60
 80a207e:	f005 fcbe 	bl	80a79fe <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 80a2082:	a81b      	add	r0, sp, #108	; 0x6c
 80a2084:	f005 fcbb 	bl	80a79fe <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 80a2088:	a806      	add	r0, sp, #24
 80a208a:	f005 fcb8 	bl	80a79fe <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 80a208e:	a812      	add	r0, sp, #72	; 0x48
 80a2090:	f005 fcb5 	bl	80a79fe <mbedtls_mpi_free>
 80a2094:	a815      	add	r0, sp, #84	; 0x54
 80a2096:	f005 fcb2 	bl	80a79fe <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 80a209a:	a821      	add	r0, sp, #132	; 0x84
 80a209c:	f005 fcaf 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 80a20a0:	a81e      	add	r0, sp, #120	; 0x78
 80a20a2:	f005 fcac 	bl	80a79fe <mbedtls_mpi_free>

    if( ret != 0 )
 80a20a6:	b13f      	cbz	r7, 80a20b8 <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 80a20a8:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
 80a20ac:	e000      	b.n	80a20b0 <mbedtls_rsa_private+0x354>
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a20ae:	4b05      	ldr	r3, [pc, #20]	; (80a20c4 <mbedtls_rsa_private+0x368>)
 80a20b0:	9303      	str	r3, [sp, #12]
 80a20b2:	e001      	b.n	80a20b8 <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 80a20b4:	4f04      	ldr	r7, [pc, #16]	; (80a20c8 <mbedtls_rsa_private+0x36c>)
 80a20b6:	e7d7      	b.n	80a2068 <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
 80a20b8:	9803      	ldr	r0, [sp, #12]
 80a20ba:	b025      	add	sp, #148	; 0x94
 80a20bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a20c0:	ffffbc80 	.word	0xffffbc80
 80a20c4:	ffffbf80 	.word	0xffffbf80
 80a20c8:	ffffbb80 	.word	0xffffbb80

080a20cc <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 80a20cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a20d0:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 80a20d2:	b08b      	sub	sp, #44	; 0x2c
 80a20d4:	4680      	mov	r8, r0
 80a20d6:	468b      	mov	fp, r1
 80a20d8:	9203      	str	r2, [sp, #12]
 80a20da:	9304      	str	r3, [sp, #16]
 80a20dc:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80a20de:	9e18      	ldr	r6, [sp, #96]	; 0x60
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a20e0:	d105      	bne.n	80a20ee <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
 80a20e2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a20e6:	2b01      	cmp	r3, #1
 80a20e8:	d001      	beq.n	80a20ee <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a20ea:	4840      	ldr	r0, [pc, #256]	; (80a21ec <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
 80a20ec:	e07a      	b.n	80a21e4 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    if( f_rng == NULL )
 80a20ee:	f1bb 0f00 	cmp.w	fp, #0
 80a20f2:	d0fa      	beq.n	80a20ea <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80a20f4:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 80a20f8:	f002 fdca 	bl	80a4c90 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a20fc:	9002      	str	r0, [sp, #8]
 80a20fe:	2800      	cmp	r0, #0
 80a2100:	d0f3      	beq.n	80a20ea <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80a2102:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
 80a2106:	f002 ff07 	bl	80a4f18 <mbedtls_md_get_size>

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 80a210a:	0043      	lsls	r3, r0, #1
 80a210c:	9305      	str	r3, [sp, #20]
 80a210e:	0042      	lsls	r2, r0, #1
 80a2110:	1cbb      	adds	r3, r7, #2
 80a2112:	4413      	add	r3, r2
 80a2114:	429f      	cmp	r7, r3
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
    hlen = mbedtls_md_get_size( md_info );
 80a2116:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 80a2118:	d8e7      	bhi.n	80a20ea <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 80a211a:	429c      	cmp	r4, r3
 80a211c:	d3e5      	bcc.n	80a20ea <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
 80a211e:	4622      	mov	r2, r4
 80a2120:	2100      	movs	r1, #0
 80a2122:	4630      	mov	r0, r6
 80a2124:	f00b fa1d 	bl	80ad562 <memset>

    *p++ = 0;
 80a2128:	f106 0901 	add.w	r9, r6, #1
 80a212c:	2300      	movs	r3, #0
 80a212e:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 80a2130:	462a      	mov	r2, r5
 80a2132:	4649      	mov	r1, r9
 80a2134:	9803      	ldr	r0, [sp, #12]
 80a2136:	47d8      	blx	fp
 80a2138:	b110      	cbz	r0, 80a2140 <mbedtls_rsa_rsaes_oaep_encrypt+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80a213a:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80a213e:	e051      	b.n	80a21e4 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    p += hlen;
 80a2140:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 80a2144:	4653      	mov	r3, sl
 80a2146:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80a2148:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a214a:	9802      	ldr	r0, [sp, #8]
 80a214c:	f002 fe12 	bl	80a4d74 <mbedtls_md>
 80a2150:	2800      	cmp	r0, #0
 80a2152:	d147      	bne.n	80a21e4 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 80a2154:	9005      	str	r0, [sp, #20]
 80a2156:	1ea0      	subs	r0, r4, #2
 80a2158:	1bc0      	subs	r0, r0, r7
 80a215a:	006b      	lsls	r3, r5, #1
 80a215c:	4428      	add	r0, r5
 80a215e:	1ac0      	subs	r0, r0, r3
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
 80a2160:	2201      	movs	r2, #1
 80a2162:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
 80a2166:	4410      	add	r0, r2
 80a2168:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80a216a:	463a      	mov	r2, r7
 80a216c:	4450      	add	r0, sl

    mbedtls_md_init( &md_ctx );
 80a216e:	af07      	add	r7, sp, #28
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
 80a2170:	f00b f9d1 	bl	80ad516 <memcpy>

    mbedtls_md_init( &md_ctx );
 80a2174:	4638      	mov	r0, r7
 80a2176:	f002 fd97 	bl	80a4ca8 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a217a:	9b05      	ldr	r3, [sp, #20]
 80a217c:	9902      	ldr	r1, [sp, #8]
 80a217e:	461a      	mov	r2, r3
 80a2180:	4638      	mov	r0, r7
 80a2182:	f002 fdb7 	bl	80a4cf4 <mbedtls_md_setup>
 80a2186:	4602      	mov	r2, r0
 80a2188:	b9a8      	cbnz	r0, 80a21b6 <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 80a218a:	f105 0a01 	add.w	sl, r5, #1
 80a218e:	3c01      	subs	r4, #1
 80a2190:	44b2      	add	sl, r6
 80a2192:	1b64      	subs	r4, r4, r5
 80a2194:	464a      	mov	r2, r9
 80a2196:	9700      	str	r7, [sp, #0]
 80a2198:	462b      	mov	r3, r5
 80a219a:	4621      	mov	r1, r4
 80a219c:	4650      	mov	r0, sl
 80a219e:	f7ff faef 	bl	80a1780 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a21a2:	4602      	mov	r2, r0
 80a21a4:	b938      	cbnz	r0, 80a21b6 <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 80a21a6:	4652      	mov	r2, sl
 80a21a8:	9700      	str	r7, [sp, #0]
 80a21aa:	4623      	mov	r3, r4
 80a21ac:	4629      	mov	r1, r5
 80a21ae:	4648      	mov	r0, r9
 80a21b0:	f7ff fae6 	bl	80a1780 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a21b4:	4602      	mov	r2, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
 80a21b6:	a807      	add	r0, sp, #28
 80a21b8:	9202      	str	r2, [sp, #8]
 80a21ba:	f002 fd7a 	bl	80a4cb2 <mbedtls_md_free>

    if( ret != 0 )
 80a21be:	9a02      	ldr	r2, [sp, #8]
 80a21c0:	b97a      	cbnz	r2, 80a21e2 <mbedtls_rsa_rsaes_oaep_encrypt+0x116>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a21c2:	9b04      	ldr	r3, [sp, #16]
 80a21c4:	b92b      	cbnz	r3, 80a21d2 <mbedtls_rsa_rsaes_oaep_encrypt+0x106>
 80a21c6:	4632      	mov	r2, r6
 80a21c8:	4631      	mov	r1, r6
 80a21ca:	4640      	mov	r0, r8
 80a21cc:	f7ff fd84 	bl	80a1cd8 <mbedtls_rsa_public>
 80a21d0:	e008      	b.n	80a21e4 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 80a21d2:	9600      	str	r6, [sp, #0]
 80a21d4:	4633      	mov	r3, r6
 80a21d6:	9a03      	ldr	r2, [sp, #12]
 80a21d8:	4659      	mov	r1, fp
 80a21da:	4640      	mov	r0, r8
 80a21dc:	f7ff fdbe 	bl	80a1d5c <mbedtls_rsa_private>
 80a21e0:	e000      	b.n	80a21e4 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 80a21e2:	4610      	mov	r0, r2
}
 80a21e4:	b00b      	add	sp, #44	; 0x2c
 80a21e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a21ea:	bf00      	nop
 80a21ec:	ffffbf80 	.word	0xffffbf80

080a21f0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 80a21f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a21f4:	469a      	mov	sl, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a21f6:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 80a21fa:	4607      	mov	r7, r0
 80a21fc:	4689      	mov	r9, r1
 80a21fe:	4693      	mov	fp, r2
 80a2200:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a2204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a2206:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2208:	d103      	bne.n	80a2212 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
 80a220a:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 80a220e:	2a00      	cmp	r2, #0
 80a2210:	d155      	bne.n	80a22be <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 80a2212:	f1b9 0f00 	cmp.w	r9, #0
 80a2216:	d052      	beq.n	80a22be <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80a2218:	2b00      	cmp	r3, #0
 80a221a:	d050      	beq.n	80a22be <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80a221c:	2e00      	cmp	r6, #0
 80a221e:	d04e      	beq.n	80a22be <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80a2220:	f118 020b 	adds.w	r2, r8, #11

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80a2224:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80a2226:	d24a      	bcs.n	80a22be <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80a2228:	4294      	cmp	r4, r2
 80a222a:	d348      	bcc.n	80a22be <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 80a222c:	4635      	mov	r5, r6

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80a222e:	3c03      	subs	r4, #3

    *p++ = 0;
 80a2230:	2200      	movs	r2, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80a2232:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
 80a2236:	f805 2b02 	strb.w	r2, [r5], #2
    if( mode == MBEDTLS_RSA_PUBLIC )
 80a223a:	f1ba 0f00 	cmp.w	sl, #0
 80a223e:	d118      	bne.n	80a2272 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 80a2240:	2202      	movs	r2, #2
 80a2242:	7072      	strb	r2, [r6, #1]
 80a2244:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
 80a2246:	42a5      	cmp	r5, r4
 80a2248:	d01c      	beq.n	80a2284 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
 80a224a:	2264      	movs	r2, #100	; 0x64
 80a224c:	9200      	str	r2, [sp, #0]
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
 80a224e:	2201      	movs	r2, #1
 80a2250:	4629      	mov	r1, r5
 80a2252:	4658      	mov	r0, fp
 80a2254:	9301      	str	r3, [sp, #4]
 80a2256:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
 80a2258:	782a      	ldrb	r2, [r5, #0]
 80a225a:	9b01      	ldr	r3, [sp, #4]
 80a225c:	bb8a      	cbnz	r2, 80a22c2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 80a225e:	9a00      	ldr	r2, [sp, #0]
 80a2260:	3a01      	subs	r2, #1
 80a2262:	9200      	str	r2, [sp, #0]
 80a2264:	d102      	bne.n	80a226c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7c>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80a2266:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80a226a:	e02e      	b.n	80a22ca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
 80a226c:	2800      	cmp	r0, #0
 80a226e:	d0ee      	beq.n	80a224e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5e>
 80a2270:	e7f9      	b.n	80a2266 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 80a2272:	2201      	movs	r2, #1
 80a2274:	7072      	strb	r2, [r6, #1]
 80a2276:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
 80a2278:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 80a227a:	42ac      	cmp	r4, r5
 80a227c:	d002      	beq.n	80a2284 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
            *p++ = 0xFF;
 80a227e:	f805 2b01 	strb.w	r2, [r5], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 80a2282:	e7fa      	b.n	80a227a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
    }

    *p++ = 0;
 80a2284:	4620      	mov	r0, r4
 80a2286:	2200      	movs	r2, #0
 80a2288:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 80a228c:	4619      	mov	r1, r3
 80a228e:	4642      	mov	r2, r8
 80a2290:	f00b f941 	bl	80ad516 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a2294:	f1ba 0f00 	cmp.w	sl, #0
 80a2298:	d107      	bne.n	80a22aa <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xba>
 80a229a:	4632      	mov	r2, r6
 80a229c:	4631      	mov	r1, r6
 80a229e:	4638      	mov	r0, r7
}
 80a22a0:	b003      	add	sp, #12
 80a22a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a22a6:	f7ff bd17 	b.w	80a1cd8 <mbedtls_rsa_public>
 80a22aa:	4633      	mov	r3, r6
 80a22ac:	465a      	mov	r2, fp
 80a22ae:	4649      	mov	r1, r9
 80a22b0:	4638      	mov	r0, r7
 80a22b2:	960c      	str	r6, [sp, #48]	; 0x30
}
 80a22b4:	b003      	add	sp, #12
 80a22b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a22ba:	f7ff bd4f 	b.w	80a1d5c <mbedtls_rsa_private>
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a22be:	4804      	ldr	r0, [pc, #16]	; (80a22d0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
 80a22c0:	e003      	b.n	80a22ca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 80a22c2:	2800      	cmp	r0, #0
 80a22c4:	d1cf      	bne.n	80a2266 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
 80a22c6:	3501      	adds	r5, #1
    *p++ = 0;
    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
 80a22c8:	e7bd      	b.n	80a2246 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 80a22ca:	b003      	add	sp, #12
 80a22cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a22d0:	ffffbf80 	.word	0xffffbf80

080a22d4 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 80a22d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a22d6:	b087      	sub	sp, #28
    switch( ctx->padding )
 80a22d8:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 80a22dc:	ac0c      	add	r4, sp, #48	; 0x30
 80a22de:	cc70      	ldmia	r4, {r4, r5, r6}
    switch( ctx->padding )
 80a22e0:	b157      	cbz	r7, 80a22f8 <mbedtls_rsa_pkcs1_encrypt+0x24>
 80a22e2:	2f01      	cmp	r7, #1
 80a22e4:	d110      	bne.n	80a2308 <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
 80a22e6:	9402      	str	r4, [sp, #8]
 80a22e8:	2400      	movs	r4, #0
 80a22ea:	9604      	str	r6, [sp, #16]
 80a22ec:	9503      	str	r5, [sp, #12]
 80a22ee:	9401      	str	r4, [sp, #4]
 80a22f0:	9400      	str	r4, [sp, #0]
 80a22f2:	f7ff feeb 	bl	80a20cc <mbedtls_rsa_rsaes_oaep_encrypt>
 80a22f6:	e008      	b.n	80a230a <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 80a22f8:	960e      	str	r6, [sp, #56]	; 0x38
 80a22fa:	950d      	str	r5, [sp, #52]	; 0x34
 80a22fc:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a22fe:	b007      	add	sp, #28
 80a2300:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 80a2304:	f7ff bf74 	b.w	80a21f0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80a2308:	4801      	ldr	r0, [pc, #4]	; (80a2310 <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
 80a230a:	b007      	add	sp, #28
 80a230c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a230e:	bf00      	nop
 80a2310:	ffffbf00 	.word	0xffffbf00

080a2314 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80a2314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2318:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80a231a:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80a231e:	4606      	mov	r6, r0
 80a2320:	468a      	mov	sl, r1
 80a2322:	9203      	str	r2, [sp, #12]
 80a2324:	469b      	mov	fp, r3
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2326:	d105      	bne.n	80a2334 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
 80a2328:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a232c:	2b01      	cmp	r3, #1
 80a232e:	d001      	beq.n	80a2334 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2330:	485c      	ldr	r0, [pc, #368]	; (80a24a4 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 80a2332:	e0b2      	b.n	80a249a <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
 80a2334:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 80a2336:	f1a7 0310 	sub.w	r3, r7, #16
 80a233a:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80a233e:	d8f7      	bhi.n	80a2330 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80a2340:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
 80a2344:	f002 fca4 	bl	80a4c90 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a2348:	9002      	str	r0, [sp, #8]
 80a234a:	2800      	cmp	r0, #0
 80a234c:	d0f0      	beq.n	80a2330 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a234e:	f002 fde3 	bl	80a4f18 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80a2352:	f100 0801 	add.w	r8, r0, #1
 80a2356:	ea4f 0548 	mov.w	r5, r8, lsl #1
 80a235a:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a235c:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80a235e:	d3e7      	bcc.n	80a2330 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 80a2360:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80a2364:	f1bb 0f00 	cmp.w	fp, #0
 80a2368:	d106      	bne.n	80a2378 <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
 80a236a:	464a      	mov	r2, r9
 80a236c:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 80a2370:	4630      	mov	r0, r6
 80a2372:	f7ff fcb1 	bl	80a1cd8 <mbedtls_rsa_public>
 80a2376:	e008      	b.n	80a238a <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
 80a2378:	f8cd 9000 	str.w	r9, [sp]
 80a237c:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 80a2380:	9a03      	ldr	r2, [sp, #12]
 80a2382:	4651      	mov	r1, sl
 80a2384:	4630      	mov	r0, r6
 80a2386:	f7ff fce9 	bl	80a1d5c <mbedtls_rsa_private>
 80a238a:	4682      	mov	sl, r0

    if( ret != 0 )
 80a238c:	2800      	cmp	r0, #0
 80a238e:	d13c      	bne.n	80a240a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
 80a2390:	ae05      	add	r6, sp, #20
 80a2392:	4630      	mov	r0, r6
 80a2394:	f002 fc88 	bl	80a4ca8 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a2398:	4652      	mov	r2, sl
 80a239a:	9902      	ldr	r1, [sp, #8]
 80a239c:	4630      	mov	r0, r6
 80a239e:	f002 fca9 	bl	80a4cf4 <mbedtls_md_setup>
 80a23a2:	4682      	mov	sl, r0
 80a23a4:	b108      	cbz	r0, 80a23aa <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
 80a23a6:	4630      	mov	r0, r6
 80a23a8:	e03b      	b.n	80a2422 <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 80a23aa:	f107 3bff 	add.w	fp, r7, #4294967295
 80a23ae:	44c8      	add	r8, r9
 80a23b0:	ebc4 0b0b 	rsb	fp, r4, fp
                          &md_ctx ) ) != 0 ||
 80a23b4:	9600      	str	r6, [sp, #0]
 80a23b6:	465b      	mov	r3, fp
 80a23b8:	4642      	mov	r2, r8
 80a23ba:	4621      	mov	r1, r4
 80a23bc:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 80a23c0:	f7ff f9de 	bl	80a1780 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a23c4:	4682      	mov	sl, r0
 80a23c6:	bb58      	cbnz	r0, 80a2420 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 80a23c8:	9600      	str	r6, [sp, #0]
 80a23ca:	4623      	mov	r3, r4
 80a23cc:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 80a23d0:	4659      	mov	r1, fp
 80a23d2:	4640      	mov	r0, r8
 80a23d4:	f7ff f9d4 	bl	80a1780 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a23d8:	4682      	mov	sl, r0
 80a23da:	bb08      	cbnz	r0, 80a2420 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 80a23dc:	e024      	b.n	80a2428 <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
 80a23de:	5c88      	ldrb	r0, [r1, r2]
 80a23e0:	f080 0001 	eor.w	r0, r0, #1
 80a23e4:	ea50 030e 	orrs.w	r3, r0, lr
 80a23e8:	d151      	bne.n	80a248e <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
 80a23ea:	3201      	adds	r2, #1
 80a23ec:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 80a23ee:	aa18      	add	r2, sp, #96	; 0x60
 80a23f0:	1a8a      	subs	r2, r1, r2
 80a23f2:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
 80a23f6:	1aba      	subs	r2, r7, r2
 80a23f8:	4282      	cmp	r2, r0
 80a23fa:	d84b      	bhi.n	80a2494 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 80a23fc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
 80a2400:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
 80a2402:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
 80a2406:	f00b f886 	bl	80ad516 <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 80a240a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80a240e:	a818      	add	r0, sp, #96	; 0x60
 80a2410:	f7ff f9ae 	bl	80a1770 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 80a2414:	a808      	add	r0, sp, #32
 80a2416:	2140      	movs	r1, #64	; 0x40
 80a2418:	f7ff f9aa 	bl	80a1770 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 80a241c:	4650      	mov	r0, sl
 80a241e:	e03c      	b.n	80a249a <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
 80a2420:	a805      	add	r0, sp, #20
 80a2422:	f002 fc46 	bl	80a4cb2 <mbedtls_md_free>
        goto cleanup;
 80a2426:	e7f0      	b.n	80a240a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
 80a2428:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80a242a:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
 80a242c:	f002 fc41 	bl	80a4cb2 <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80a2430:	4633      	mov	r3, r6
 80a2432:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80a2436:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 80a243a:	9802      	ldr	r0, [sp, #8]
 80a243c:	f002 fc9a 	bl	80a4d74 <mbedtls_md>
 80a2440:	4682      	mov	sl, r0
 80a2442:	2800      	cmp	r0, #0
 80a2444:	d1e1      	bne.n	80a240a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a2446:	4650      	mov	r0, sl
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
 80a2448:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
 80a244c:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
 80a2450:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a2452:	42a0      	cmp	r0, r4
 80a2454:	d208      	bcs.n	80a2468 <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
 80a2456:	5c32      	ldrb	r2, [r6, r0]
 80a2458:	f811 c000 	ldrb.w	ip, [r1, r0]
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a245c:	3001      	adds	r0, #1
        bad |= lhash[i] ^ *p++;
 80a245e:	ea82 0c0c 	eor.w	ip, r2, ip
 80a2462:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a2466:	e7f4      	b.n	80a2452 <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
 80a2468:	4421      	add	r1, r4

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 80a246a:	2400      	movs	r4, #0
 80a246c:	460e      	mov	r6, r1
 80a246e:	4622      	mov	r2, r4
 80a2470:	1b7d      	subs	r5, r7, r5
 80a2472:	440d      	add	r5, r1
 80a2474:	42b5      	cmp	r5, r6
 80a2476:	d0b2      	beq.n	80a23de <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
 80a2478:	f816 0b01 	ldrb.w	r0, [r6], #1
 80a247c:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80a247e:	4260      	negs	r0, r4
 80a2480:	4320      	orrs	r0, r4
 80a2482:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80a2486:	f080 0001 	eor.w	r0, r0, #1
 80a248a:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 80a248c:	e7f2      	b.n	80a2474 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80a248e:	f8df a018 	ldr.w	sl, [pc, #24]	; 80a24a8 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
 80a2492:	e7ba      	b.n	80a240a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 80a2494:	f8df a014 	ldr.w	sl, [pc, #20]	; 80a24ac <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
 80a2498:	e7b7      	b.n	80a240a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 80a249a:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 80a249e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a24a2:	bf00      	nop
 80a24a4:	ffffbf80 	.word	0xffffbf80
 80a24a8:	ffffbf00 	.word	0xffffbf00
 80a24ac:	ffffbc00 	.word	0xffffbc00

080a24b0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 80a24b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a24b2:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 80a24b4:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 80a24b8:	461d      	mov	r5, r3
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a24ba:	d103      	bne.n	80a24c4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14>
 80a24bc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a24c0:	2b00      	cmp	r3, #0
 80a24c2:	d17f      	bne.n	80a25c4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 80a24c4:	6847      	ldr	r7, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 80a24c6:	f1a7 0310 	sub.w	r3, r7, #16
 80a24ca:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80a24ce:	d879      	bhi.n	80a25c4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
 80a24d0:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80a24d2:	b945      	cbnz	r5, 80a24e6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x36>
 80a24d4:	4632      	mov	r2, r6
 80a24d6:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
 80a24da:	f7ff fbfd 	bl	80a1cd8 <mbedtls_rsa_public>

    if( ret != 0 )
 80a24de:	4604      	mov	r4, r0
 80a24e0:	2800      	cmp	r0, #0
 80a24e2:	d168      	bne.n	80a25b6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
 80a24e4:	e02f      	b.n	80a2546 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x96>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80a24e6:	9600      	str	r6, [sp, #0]
 80a24e8:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
 80a24ec:	f7ff fc36 	bl	80a1d5c <mbedtls_rsa_private>

    if( ret != 0 )
 80a24f0:	4604      	mov	r4, r0
 80a24f2:	2800      	cmp	r0, #0
 80a24f4:	d15f      	bne.n	80a25b6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 80a24f6:	2d01      	cmp	r5, #1
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 80a24f8:	7832      	ldrb	r2, [r6, #0]

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 80a24fa:	d125      	bne.n	80a2548 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x98>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a24fc:	4601      	mov	r1, r0
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 80a24fe:	4686      	mov	lr, r0
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 80a2500:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2502:	1efd      	subs	r5, r7, #3
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 80a2504:	f083 0302 	eor.w	r3, r3, #2
 80a2508:	4313      	orrs	r3, r2

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a250a:	42a9      	cmp	r1, r5
 80a250c:	d212      	bcs.n	80a2534 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 80a250e:	1872      	adds	r2, r6, r1
 80a2510:	7890      	ldrb	r0, [r2, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2512:	3101      	adds	r1, #1
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 80a2514:	4242      	negs	r2, r0
 80a2516:	4310      	orrs	r0, r2
 80a2518:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80a251c:	f080 0001 	eor.w	r0, r0, #1
 80a2520:	4304      	orrs	r4, r0
 80a2522:	b2e4      	uxtb	r4, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80a2524:	4262      	negs	r2, r4
 80a2526:	4322      	orrs	r2, r4
 80a2528:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80a252c:	f082 0201 	eor.w	r2, r2, #1
 80a2530:	4496      	add	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2532:	e7ea      	b.n	80a250a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5a>
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 80a2534:	f10d 020a 	add.w	r2, sp, #10
 80a2538:	f10e 0101 	add.w	r1, lr, #1
 80a253c:	4411      	add	r1, r2
 80a253e:	f812 200e 	ldrb.w	r2, [r2, lr]
 80a2542:	4313      	orrs	r3, r2
 80a2544:	e01e      	b.n	80a2584 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd4>
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 80a2546:	7832      	ldrb	r2, [r6, #0]
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80a2548:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a254a:	1efc      	subs	r4, r7, #3
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80a254c:	f083 0301 	eor.w	r3, r3, #1
 80a2550:	4313      	orrs	r3, r2
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
 80a2552:	2200      	movs	r2, #0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2554:	4611      	mov	r1, r2
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 80a2556:	4696      	mov	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2558:	42a1      	cmp	r1, r4
 80a255a:	d20b      	bcs.n	80a2574 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc4>
        {
            pad_done |= ( p[i] != 0xFF );
 80a255c:	1870      	adds	r0, r6, r1
 80a255e:	7880      	ldrb	r0, [r0, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2560:	3101      	adds	r1, #1
        {
            pad_done |= ( p[i] != 0xFF );
 80a2562:	28ff      	cmp	r0, #255	; 0xff
 80a2564:	bf18      	it	ne
 80a2566:	f042 0201 	orrne.w	r2, r2, #1
            pad_count += ( pad_done == 0 );
 80a256a:	f082 0001 	eor.w	r0, r2, #1
 80a256e:	b2c0      	uxtb	r0, r0
 80a2570:	4486      	add	lr, r0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2572:	e7f1      	b.n	80a2558 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 80a2574:	f10d 020a 	add.w	r2, sp, #10
 80a2578:	f812 500e 	ldrb.w	r5, [r2, lr]
 80a257c:	f10e 0101 	add.w	r1, lr, #1
 80a2580:	4411      	add	r1, r2
 80a2582:	432b      	orrs	r3, r5
    }

    bad |= ( pad_count < 8 );

    if( bad )
 80a2584:	f1be 0f07 	cmp.w	lr, #7
 80a2588:	bf8c      	ite	hi
 80a258a:	461c      	movhi	r4, r3
 80a258c:	f043 0401 	orrls.w	r4, r3, #1
 80a2590:	b264      	sxtb	r4, r4
 80a2592:	b96c      	cbnz	r4, 80a25b0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x100>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 80a2594:	1b8a      	subs	r2, r1, r6
 80a2596:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 80a259a:	1aba      	subs	r2, r7, r2
 80a259c:	429a      	cmp	r2, r3
 80a259e:	d809      	bhi.n	80a25b4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x104>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 80a25a0:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 80a25a4:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 80a25a8:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 80a25aa:	f00a ffb4 	bl	80ad516 <memcpy>
 80a25ae:	e002      	b.n	80a25b6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>

    bad |= ( pad_count < 8 );

    if( bad )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80a25b0:	4c06      	ldr	r4, [pc, #24]	; (80a25cc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11c>)
 80a25b2:	e000      	b.n	80a25b6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 80a25b4:	4c06      	ldr	r4, [pc, #24]	; (80a25d0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x120>)
    *olen = ilen - (p - buf);
    memcpy( output, p, *olen );
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 80a25b6:	4630      	mov	r0, r6
 80a25b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80a25bc:	f7ff f8d8 	bl	80a1770 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 80a25c0:	4620      	mov	r0, r4
 80a25c2:	e000      	b.n	80a25c6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x116>
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a25c4:	4803      	ldr	r0, [pc, #12]	; (80a25d4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x124>)

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 80a25c6:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 80a25ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a25cc:	ffffbf00 	.word	0xffffbf00
 80a25d0:	ffffbc00 	.word	0xffffbc00
 80a25d4:	ffffbf80 	.word	0xffffbf80

080a25d8 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 80a25d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a25da:	b087      	sub	sp, #28
    switch( ctx->padding )
 80a25dc:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 80a25e0:	ac0c      	add	r4, sp, #48	; 0x30
 80a25e2:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
    switch( ctx->padding )
 80a25e4:	f1be 0f00 	cmp.w	lr, #0
 80a25e8:	d00c      	beq.n	80a2604 <mbedtls_rsa_pkcs1_decrypt+0x2c>
 80a25ea:	f1be 0f01 	cmp.w	lr, #1
 80a25ee:	d112      	bne.n	80a2616 <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
 80a25f0:	9402      	str	r4, [sp, #8]
 80a25f2:	2400      	movs	r4, #0
 80a25f4:	9705      	str	r7, [sp, #20]
 80a25f6:	9604      	str	r6, [sp, #16]
 80a25f8:	9503      	str	r5, [sp, #12]
 80a25fa:	9401      	str	r4, [sp, #4]
 80a25fc:	9400      	str	r4, [sp, #0]
 80a25fe:	f7ff fe89 	bl	80a2314 <mbedtls_rsa_rsaes_oaep_decrypt>
 80a2602:	e009      	b.n	80a2618 <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 80a2604:	970f      	str	r7, [sp, #60]	; 0x3c
 80a2606:	960e      	str	r6, [sp, #56]	; 0x38
 80a2608:	950d      	str	r5, [sp, #52]	; 0x34
 80a260a:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a260c:	b007      	add	sp, #28
 80a260e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 80a2612:	f7ff bf4d 	b.w	80a24b0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80a2616:	4801      	ldr	r0, [pc, #4]	; (80a261c <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 80a2618:	b007      	add	sp, #28
 80a261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a261c:	ffffbf00 	.word	0xffffbf00

080a2620 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80a2620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2624:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80a2626:	b09d      	sub	sp, #116	; 0x74
 80a2628:	4680      	mov	r8, r0
 80a262a:	468a      	mov	sl, r1
 80a262c:	9204      	str	r2, [sp, #16]
 80a262e:	9305      	str	r3, [sp, #20]
 80a2630:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 80a2634:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2636:	d105      	bne.n	80a2644 <mbedtls_rsa_rsassa_pss_sign+0x24>
 80a2638:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 80a263c:	2b01      	cmp	r3, #1
 80a263e:	d001      	beq.n	80a2644 <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2640:	4858      	ldr	r0, [pc, #352]	; (80a27a4 <mbedtls_rsa_rsassa_pss_sign+0x184>)
 80a2642:	e0ab      	b.n	80a279c <mbedtls_rsa_rsassa_pss_sign+0x17c>

    if( f_rng == NULL )
 80a2644:	f1ba 0f00 	cmp.w	sl, #0
 80a2648:	d0fa      	beq.n	80a2640 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80a264a:	f8d8 6004 	ldr.w	r6, [r8, #4]

    if( md_alg != MBEDTLS_MD_NONE )
 80a264e:	b130      	cbz	r0, 80a265e <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80a2650:	f002 fb1e 	bl	80a4c90 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80a2654:	2800      	cmp	r0, #0
 80a2656:	d0f3      	beq.n	80a2640 <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a2658:	f002 fc5e 	bl	80a4f18 <mbedtls_md_get_size>
 80a265c:	9027      	str	r0, [sp, #156]	; 0x9c
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80a265e:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 80a2662:	f002 fb15 	bl	80a4c90 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a2666:	4683      	mov	fp, r0
 80a2668:	2800      	cmp	r0, #0
 80a266a:	d0e9      	beq.n	80a2640 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a266c:	f002 fc54 	bl	80a4f18 <mbedtls_md_get_size>
    slen = hlen;

    if( olen < hlen + slen + 2 )
 80a2670:	0045      	lsls	r5, r0, #1
 80a2672:	1cab      	adds	r3, r5, #2
 80a2674:	429e      	cmp	r6, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a2676:	4607      	mov	r7, r0
    slen = hlen;

    if( olen < hlen + slen + 2 )
 80a2678:	d3e2      	bcc.n	80a2640 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( sig, 0, olen );
 80a267a:	4632      	mov	r2, r6
 80a267c:	2100      	movs	r1, #0
 80a267e:	4620      	mov	r0, r4
 80a2680:	f00a ff6f 	bl	80ad562 <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 80a2684:	463a      	mov	r2, r7
 80a2686:	a90c      	add	r1, sp, #48	; 0x30
 80a2688:	9804      	ldr	r0, [sp, #16]
 80a268a:	47d0      	blx	sl
 80a268c:	b110      	cbz	r0, 80a2694 <mbedtls_rsa_rsassa_pss_sign+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80a268e:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80a2692:	e083      	b.n	80a279c <mbedtls_rsa_rsassa_pss_sign+0x17c>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a2694:	f108 0308 	add.w	r3, r8, #8
 80a2698:	9007      	str	r0, [sp, #28]
 80a269a:	4618      	mov	r0, r3
 80a269c:	9303      	str	r3, [sp, #12]
 80a269e:	f005 fa60 	bl	80a7b62 <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 80a26a2:	1b75      	subs	r5, r6, r5
    *p++ = 0x01;
 80a26a4:	f105 39ff 	add.w	r9, r5, #4294967295
 80a26a8:	2201      	movs	r2, #1
 80a26aa:	4425      	add	r5, r4
 80a26ac:	44a1      	add	r9, r4
 80a26ae:	f805 2c02 	strb.w	r2, [r5, #-2]
    memcpy( p, salt, slen );
 80a26b2:	a90c      	add	r1, sp, #48	; 0x30
 80a26b4:	463a      	mov	r2, r7
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a26b6:	9006      	str	r0, [sp, #24]
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;

    mbedtls_md_init( &md_ctx );
 80a26b8:	ad09      	add	r5, sp, #36	; 0x24

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
 80a26ba:	4648      	mov	r0, r9
 80a26bc:	f00a ff2b 	bl	80ad516 <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
 80a26c0:	4628      	mov	r0, r5
 80a26c2:	f002 faf1 	bl	80a4ca8 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a26c6:	9b07      	ldr	r3, [sp, #28]
 80a26c8:	4659      	mov	r1, fp
 80a26ca:	461a      	mov	r2, r3
 80a26cc:	4628      	mov	r0, r5
 80a26ce:	f002 fb11 	bl	80a4cf4 <mbedtls_md_setup>
 80a26d2:	4602      	mov	r2, r0
 80a26d4:	2800      	cmp	r0, #0
 80a26d6:	d14a      	bne.n	80a276e <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 80a26d8:	4628      	mov	r0, r5
 80a26da:	f002 fb2d 	bl	80a4d38 <mbedtls_md_starts>
 80a26de:	4602      	mov	r2, r0
 80a26e0:	2800      	cmp	r0, #0
 80a26e2:	d144      	bne.n	80a276e <mbedtls_rsa_rsassa_pss_sign+0x14e>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
 80a26e4:	eb09 0b07 	add.w	fp, r9, r7
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 80a26e8:	2208      	movs	r2, #8
 80a26ea:	4659      	mov	r1, fp
 80a26ec:	4628      	mov	r0, r5
 80a26ee:	f002 fb2d 	bl	80a4d4c <mbedtls_md_update>
 80a26f2:	4602      	mov	r2, r0
 80a26f4:	2800      	cmp	r0, #0
 80a26f6:	d13a      	bne.n	80a276e <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 80a26f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80a26fa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80a26fc:	4628      	mov	r0, r5
 80a26fe:	f002 fb25 	bl	80a4d4c <mbedtls_md_update>
 80a2702:	4602      	mov	r2, r0
 80a2704:	bb98      	cbnz	r0, 80a276e <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 80a2706:	463a      	mov	r2, r7
 80a2708:	a90c      	add	r1, sp, #48	; 0x30
 80a270a:	4628      	mov	r0, r5
 80a270c:	f002 fb1e 	bl	80a4d4c <mbedtls_md_update>
 80a2710:	4602      	mov	r2, r0
 80a2712:	bb60      	cbnz	r0, 80a276e <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 80a2714:	4659      	mov	r1, fp
 80a2716:	4628      	mov	r0, r5
 80a2718:	f002 fb22 	bl	80a4d60 <mbedtls_md_finish>
 80a271c:	4602      	mov	r2, r0
 80a271e:	bb30      	cbnz	r0, 80a276e <mbedtls_rsa_rsassa_pss_sign+0x14e>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 80a2720:	9b06      	ldr	r3, [sp, #24]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80a2722:	1e71      	subs	r1, r6, #1
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 80a2724:	3b01      	subs	r3, #1
 80a2726:	f013 0f07 	tst.w	r3, #7
 80a272a:	bf0c      	ite	eq
 80a272c:	2001      	moveq	r0, #1
 80a272e:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80a2730:	1bc9      	subs	r1, r1, r7
 80a2732:	465a      	mov	r2, fp
 80a2734:	1a09      	subs	r1, r1, r0
 80a2736:	9500      	str	r5, [sp, #0]
 80a2738:	463b      	mov	r3, r7
 80a273a:	4420      	add	r0, r4
 80a273c:	f7ff f820 	bl	80a1780 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a2740:	4602      	mov	r2, r0
 80a2742:	b9a0      	cbnz	r0, 80a276e <mbedtls_rsa_rsassa_pss_sign+0x14e>
 80a2744:	9006      	str	r0, [sp, #24]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a2746:	9803      	ldr	r0, [sp, #12]
 80a2748:	f005 fa0b 	bl	80a7b62 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80a274c:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 80a2750:	7823      	ldrb	r3, [r4, #0]
 80a2752:	3001      	adds	r0, #1
 80a2754:	26ff      	movs	r6, #255	; 0xff
 80a2756:	fa46 f000 	asr.w	r0, r6, r0
 80a275a:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
 80a275c:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80a275e:	7020      	strb	r0, [r4, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_zeroize( salt, sizeof( salt ) );
 80a2760:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
 80a2762:	f809 3017 	strb.w	r3, [r9, r7, lsl #1]

    mbedtls_zeroize( salt, sizeof( salt ) );
 80a2766:	a80c      	add	r0, sp, #48	; 0x30
 80a2768:	f7ff f802 	bl	80a1770 <_ZL15mbedtls_zeroizePvj>
 80a276c:	9a06      	ldr	r2, [sp, #24]

exit:
    mbedtls_md_free( &md_ctx );
 80a276e:	4628      	mov	r0, r5
 80a2770:	9203      	str	r2, [sp, #12]
 80a2772:	f002 fa9e 	bl	80a4cb2 <mbedtls_md_free>

    if( ret != 0 )
 80a2776:	9a03      	ldr	r2, [sp, #12]
 80a2778:	b97a      	cbnz	r2, 80a279a <mbedtls_rsa_rsassa_pss_sign+0x17a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 80a277a:	9b05      	ldr	r3, [sp, #20]
 80a277c:	b92b      	cbnz	r3, 80a278a <mbedtls_rsa_rsassa_pss_sign+0x16a>
 80a277e:	4622      	mov	r2, r4
 80a2780:	4621      	mov	r1, r4
 80a2782:	4640      	mov	r0, r8
 80a2784:	f7ff faa8 	bl	80a1cd8 <mbedtls_rsa_public>
 80a2788:	e008      	b.n	80a279c <mbedtls_rsa_rsassa_pss_sign+0x17c>
 80a278a:	9400      	str	r4, [sp, #0]
 80a278c:	4623      	mov	r3, r4
 80a278e:	9a04      	ldr	r2, [sp, #16]
 80a2790:	4651      	mov	r1, sl
 80a2792:	4640      	mov	r0, r8
 80a2794:	f7ff fae2 	bl	80a1d5c <mbedtls_rsa_private>
 80a2798:	e000      	b.n	80a279c <mbedtls_rsa_rsassa_pss_sign+0x17c>
 80a279a:	4610      	mov	r0, r2
}
 80a279c:	b01d      	add	sp, #116	; 0x74
 80a279e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a27a2:	bf00      	nop
 80a27a4:	ffffbf80 	.word	0xffffbf80

080a27a8 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80a27a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a27ac:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80a27ae:	4689      	mov	r9, r1
 80a27b0:	a90b      	add	r1, sp, #44	; 0x2c
 80a27b2:	4605      	mov	r5, r0
 80a27b4:	4692      	mov	sl, r2
 80a27b6:	c986      	ldmia	r1, {r1, r2, r7}
 80a27b8:	461c      	mov	r4, r3
 80a27ba:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a27be:	d103      	bne.n	80a27c8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 80a27c0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80a27c4:	2b00      	cmp	r3, #0
 80a27c6:	d14b      	bne.n	80a2860 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 80a27c8:	9700      	str	r7, [sp, #0]
 80a27ca:	686b      	ldr	r3, [r5, #4]
 80a27cc:	f7ff f82a 	bl	80a1824 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 80a27d0:	2800      	cmp	r0, #0
 80a27d2:	d149      	bne.n	80a2868 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 80a27d4:	b93c      	cbnz	r4, 80a27e6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 80a27d6:	463a      	mov	r2, r7
 80a27d8:	4639      	mov	r1, r7
 80a27da:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 80a27dc:	b002      	add	sp, #8
 80a27de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 80a27e2:	f7ff ba79 	b.w	80a1cd8 <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 80a27e6:	686c      	ldr	r4, [r5, #4]
 80a27e8:	2001      	movs	r0, #1
 80a27ea:	4621      	mov	r1, r4
 80a27ec:	f00a fe6e 	bl	80ad4cc <calloc>
    if( sig_try == NULL )
 80a27f0:	4606      	mov	r6, r0
 80a27f2:	b3b8      	cbz	r0, 80a2864 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 80a27f4:	4621      	mov	r1, r4
 80a27f6:	2001      	movs	r0, #1
 80a27f8:	f00a fe68 	bl	80ad4cc <calloc>
    if( verif == NULL )
 80a27fc:	4680      	mov	r8, r0
 80a27fe:	b918      	cbnz	r0, 80a2808 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
 80a2800:	4630      	mov	r0, r6
 80a2802:	f009 fdad 	bl	80ac360 <free>
 80a2806:	e02d      	b.n	80a2864 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 80a2808:	9600      	str	r6, [sp, #0]
 80a280a:	463b      	mov	r3, r7
 80a280c:	4652      	mov	r2, sl
 80a280e:	4649      	mov	r1, r9
 80a2810:	4628      	mov	r0, r5
 80a2812:	f7ff faa3 	bl	80a1d5c <mbedtls_rsa_private>
 80a2816:	4604      	mov	r4, r0
 80a2818:	b9d0      	cbnz	r0, 80a2850 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 80a281a:	4642      	mov	r2, r8
 80a281c:	4631      	mov	r1, r6
 80a281e:	4628      	mov	r0, r5
 80a2820:	f7ff fa5a 	bl	80a1cd8 <mbedtls_rsa_public>
 80a2824:	4604      	mov	r4, r0
 80a2826:	b998      	cbnz	r0, 80a2850 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
 80a2828:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
 80a282a:	4602      	mov	r2, r0
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80a282c:	686d      	ldr	r5, [r5, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a282e:	42aa      	cmp	r2, r5
 80a2830:	d007      	beq.n	80a2842 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
 80a2832:	f818 0002 	ldrb.w	r0, [r8, r2]
 80a2836:	5cb9      	ldrb	r1, [r7, r2]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a2838:	3201      	adds	r2, #1
        diff |= A[i] ^ B[i];
 80a283a:	4041      	eors	r1, r0
 80a283c:	430b      	orrs	r3, r1
 80a283e:	b2db      	uxtb	r3, r3
 80a2840:	e7f5      	b.n	80a282e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80a2842:	b923      	cbnz	r3, 80a284e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
 80a2844:	4631      	mov	r1, r6
 80a2846:	4638      	mov	r0, r7
 80a2848:	f00a fe65 	bl	80ad516 <memcpy>
 80a284c:	e000      	b.n	80a2850 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 80a284e:	4c08      	ldr	r4, [pc, #32]	; (80a2870 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
 80a2850:	4630      	mov	r0, r6
 80a2852:	f009 fd85 	bl	80ac360 <free>
    mbedtls_free( verif );
 80a2856:	4640      	mov	r0, r8
 80a2858:	f009 fd82 	bl	80ac360 <free>

    return( ret );
 80a285c:	4620      	mov	r0, r4
 80a285e:	e003      	b.n	80a2868 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
{
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2860:	4804      	ldr	r0, [pc, #16]	; (80a2874 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
 80a2862:	e001      	b.n	80a2868 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80a2864:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 80a2868:	b002      	add	sp, #8
 80a286a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a286e:	bf00      	nop
 80a2870:	ffffbd00 	.word	0xffffbd00
 80a2874:	ffffbf80 	.word	0xffffbf80

080a2878 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 80a2878:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 80a287a:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 80a287e:	ad06      	add	r5, sp, #24
 80a2880:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80a2884:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 80a2886:	f1be 0f00 	cmp.w	lr, #0
 80a288a:	d00a      	beq.n	80a28a2 <mbedtls_rsa_pkcs1_sign+0x2a>
 80a288c:	f1be 0f01 	cmp.w	lr, #1
 80a2890:	d10f      	bne.n	80a28b2 <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 80a2892:	9708      	str	r7, [sp, #32]
 80a2894:	9607      	str	r6, [sp, #28]
 80a2896:	9506      	str	r5, [sp, #24]
 80a2898:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a289a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 80a289e:	f7ff bebf 	b.w	80a2620 <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 80a28a2:	9708      	str	r7, [sp, #32]
 80a28a4:	9607      	str	r6, [sp, #28]
 80a28a6:	9506      	str	r5, [sp, #24]
 80a28a8:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a28aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 80a28ae:	f7ff bf7b 	b.w	80a27a8 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a28b2:	4801      	ldr	r0, [pc, #4]	; (80a28b8 <mbedtls_rsa_pkcs1_sign+0x40>)
 80a28b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a28b6:	bf00      	nop
 80a28b8:	ffffbf00 	.word	0xffffbf00

080a28bc <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 80a28bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a28c0:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 80a28c2:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80a28c6:	4605      	mov	r5, r0
 80a28c8:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a28cc:	d105      	bne.n	80a28da <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 80a28ce:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 80a28d2:	2801      	cmp	r0, #1
 80a28d4:	d001      	beq.n	80a28da <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a28d6:	4861      	ldr	r0, [pc, #388]	; (80a2a5c <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
 80a28d8:	e0bb      	b.n	80a2a52 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
 80a28da:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
 80a28dc:	f1a7 0010 	sub.w	r0, r7, #16
 80a28e0:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 80a28e4:	d8f7      	bhi.n	80a28d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
 80a28e6:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80a28e8:	b933      	cbnz	r3, 80a28f8 <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
 80a28ea:	4632      	mov	r2, r6
 80a28ec:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
 80a28f0:	4628      	mov	r0, r5
 80a28f2:	f7ff f9f1 	bl	80a1cd8 <mbedtls_rsa_public>
 80a28f6:	e005      	b.n	80a2904 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
 80a28f8:	9600      	str	r6, [sp, #0]
 80a28fa:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 80a28fe:	4628      	mov	r0, r5
 80a2900:	f7ff fa2c 	bl	80a1d5c <mbedtls_rsa_private>

    if( ret != 0 )
 80a2904:	2800      	cmp	r0, #0
 80a2906:	f040 80a4 	bne.w	80a2a52 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
 80a290a:	1e7c      	subs	r4, r7, #1
 80a290c:	5d33      	ldrb	r3, [r6, r4]
 80a290e:	2bbc      	cmp	r3, #188	; 0xbc
 80a2910:	f040 809e 	bne.w	80a2a50 <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
 80a2914:	f1b8 0f00 	cmp.w	r8, #0
 80a2918:	d008      	beq.n	80a292c <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80a291a:	4640      	mov	r0, r8
 80a291c:	f002 f9b8 	bl	80a4c90 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80a2920:	2800      	cmp	r0, #0
 80a2922:	d0d8      	beq.n	80a28d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a2924:	f002 faf8 	bl	80a4f18 <mbedtls_md_get_size>
 80a2928:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 80a292c:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
 80a2930:	f002 f9ae 	bl	80a4c90 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a2934:	4681      	mov	r9, r0
 80a2936:	2800      	cmp	r0, #0
 80a2938:	d0cd      	beq.n	80a28d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a293a:	f002 faed 	bl	80a4f18 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
 80a293e:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a2940:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a2942:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
 80a2946:	9303      	str	r3, [sp, #12]
 80a2948:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a294a:	f005 f90a 	bl	80a7b62 <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80a294e:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a2950:	f100 38ff 	add.w	r8, r0, #4294967295

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80a2954:	7832      	ldrb	r2, [r6, #0]
 80a2956:	f1c3 0308 	rsb	r3, r3, #8
 80a295a:	4443      	add	r3, r8
 80a295c:	fa52 f303 	asrs.w	r3, r2, r3
 80a2960:	d1b9      	bne.n	80a28d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
 80a2962:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
 80a2966:	bf08      	it	eq
 80a2968:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
 80a296a:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
 80a296e:	bf0c      	ite	eq
 80a2970:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
 80a2974:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
 80a2976:	429f      	cmp	r7, r3
 80a2978:	d3ad      	bcc.n	80a28d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
 80a297a:	ac05      	add	r4, sp, #20
 80a297c:	4620      	mov	r0, r4
 80a297e:	f002 f993 	bl	80a4ca8 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a2982:	2200      	movs	r2, #0
 80a2984:	4649      	mov	r1, r9
 80a2986:	4620      	mov	r0, r4
 80a2988:	f002 f9b4 	bl	80a4cf4 <mbedtls_md_setup>
 80a298c:	4683      	mov	fp, r0
 80a298e:	2800      	cmp	r0, #0
 80a2990:	d159      	bne.n	80a2a46 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
 80a2992:	ea6f 010a 	mvn.w	r1, sl
 80a2996:	4439      	add	r1, r7
 80a2998:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 80a299c:	9400      	str	r4, [sp, #0]
 80a299e:	4653      	mov	r3, sl
 80a29a0:	464a      	mov	r2, r9
 80a29a2:	4628      	mov	r0, r5
 80a29a4:	f7fe feec 	bl	80a1780 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
 80a29a8:	4683      	mov	fp, r0
 80a29aa:	2800      	cmp	r0, #0
 80a29ac:	d14b      	bne.n	80a2a46 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 80a29ae:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
 80a29b2:	7833      	ldrb	r3, [r6, #0]
 80a29b4:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80a29b8:	fa48 f707 	asr.w	r7, r8, r7
 80a29bc:	401f      	ands	r7, r3
 80a29be:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
 80a29c0:	f109 32ff 	add.w	r2, r9, #4294967295
 80a29c4:	4295      	cmp	r5, r2
 80a29c6:	4629      	mov	r1, r5
 80a29c8:	d203      	bcs.n	80a29d2 <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
 80a29ca:	780b      	ldrb	r3, [r1, #0]
 80a29cc:	3501      	adds	r5, #1
 80a29ce:	2b00      	cmp	r3, #0
 80a29d0:	d0f8      	beq.n	80a29c4 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
 80a29d2:	780b      	ldrb	r3, [r1, #0]
 80a29d4:	2b01      	cmp	r3, #1
 80a29d6:	d134      	bne.n	80a2a42 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80a29d8:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
 80a29dc:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80a29de:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
 80a29e0:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80a29e4:	d001      	beq.n	80a29ea <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
 80a29e6:	429e      	cmp	r6, r3
 80a29e8:	d12b      	bne.n	80a2a42 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
 80a29ea:	4620      	mov	r0, r4
 80a29ec:	f002 f9a4 	bl	80a4d38 <mbedtls_md_starts>
    if ( ret != 0 )
 80a29f0:	4683      	mov	fp, r0
 80a29f2:	bb40      	cbnz	r0, 80a2a46 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 80a29f4:	2208      	movs	r2, #8
 80a29f6:	a903      	add	r1, sp, #12
 80a29f8:	4620      	mov	r0, r4
 80a29fa:	f002 f9a7 	bl	80a4d4c <mbedtls_md_update>
    if ( ret != 0 )
 80a29fe:	4683      	mov	fp, r0
 80a2a00:	bb08      	cbnz	r0, 80a2a46 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 80a2a02:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80a2a06:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
 80a2a0a:	4620      	mov	r0, r4
 80a2a0c:	f002 f99e 	bl	80a4d4c <mbedtls_md_update>
    if ( ret != 0 )
 80a2a10:	4683      	mov	fp, r0
 80a2a12:	b9c0      	cbnz	r0, 80a2a46 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 80a2a14:	4632      	mov	r2, r6
 80a2a16:	4629      	mov	r1, r5
 80a2a18:	4620      	mov	r0, r4
 80a2a1a:	f002 f997 	bl	80a4d4c <mbedtls_md_update>
    if ( ret != 0 )
 80a2a1e:	4683      	mov	fp, r0
 80a2a20:	b988      	cbnz	r0, 80a2a46 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
 80a2a22:	a908      	add	r1, sp, #32
 80a2a24:	4620      	mov	r0, r4
 80a2a26:	f002 f99b 	bl	80a4d60 <mbedtls_md_finish>
    if ( ret != 0 )
 80a2a2a:	4683      	mov	fp, r0
 80a2a2c:	b958      	cbnz	r0, 80a2a46 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
 80a2a2e:	4652      	mov	r2, sl
 80a2a30:	a908      	add	r1, sp, #32
 80a2a32:	4648      	mov	r0, r9
 80a2a34:	f00a fd60 	bl	80ad4f8 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80a2a38:	4a09      	ldr	r2, [pc, #36]	; (80a2a60 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
 80a2a3a:	2800      	cmp	r0, #0
 80a2a3c:	bf18      	it	ne
 80a2a3e:	4693      	movne	fp, r2
 80a2a40:	e001      	b.n	80a2a46 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80a2a42:	f8df b020 	ldr.w	fp, [pc, #32]	; 80a2a64 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
 80a2a46:	4620      	mov	r0, r4
 80a2a48:	f002 f933 	bl	80a4cb2 <mbedtls_md_free>

    return( ret );
 80a2a4c:	4658      	mov	r0, fp
 80a2a4e:	e000      	b.n	80a2a52 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80a2a50:	4804      	ldr	r0, [pc, #16]	; (80a2a64 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
 80a2a52:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 80a2a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2a5a:	bf00      	nop
 80a2a5c:	ffffbf80 	.word	0xffffbf80
 80a2a60:	ffffbc80 	.word	0xffffbc80
 80a2a64:	ffffbf00 	.word	0xffffbf00

080a2a68 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 80a2a68:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 80a2a6a:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 80a2a6e:	b086      	sub	sp, #24
 80a2a70:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 80a2a74:	b10c      	cbz	r4, 80a2a7a <mbedtls_rsa_rsassa_pss_verify+0x12>
 80a2a76:	b2e4      	uxtb	r4, r4
 80a2a78:	e000      	b.n	80a2a7c <mbedtls_rsa_rsassa_pss_verify+0x14>
 80a2a7a:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
 80a2a7c:	9403      	str	r4, [sp, #12]
 80a2a7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a2a80:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a2a82:	9402      	str	r4, [sp, #8]
 80a2a84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a2a86:	9605      	str	r6, [sp, #20]
 80a2a88:	f04f 36ff 	mov.w	r6, #4294967295
 80a2a8c:	9604      	str	r6, [sp, #16]
 80a2a8e:	9401      	str	r4, [sp, #4]
 80a2a90:	9500      	str	r5, [sp, #0]
 80a2a92:	f7ff ff13 	bl	80a28bc <mbedtls_rsa_rsassa_pss_verify_ext>

}
 80a2a96:	b006      	add	sp, #24
 80a2a98:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2a9c <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 80a2a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2aa0:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 80a2aa2:	4680      	mov	r8, r0
 80a2aa4:	468a      	mov	sl, r1
 80a2aa6:	4693      	mov	fp, r2
 80a2aa8:	4699      	mov	r9, r3
    int ret = 0;
    const size_t sig_len = ctx->len;
 80a2aaa:	6845      	ldr	r5, [r0, #4]
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2aac:	d102      	bne.n	80a2ab4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
 80a2aae:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a2ab2:	b9eb      	cbnz	r3, 80a2af0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
 80a2ab4:	4629      	mov	r1, r5
 80a2ab6:	2001      	movs	r0, #1
 80a2ab8:	f00a fd08 	bl	80ad4cc <calloc>
 80a2abc:	4606      	mov	r6, r0
 80a2abe:	b1c8      	cbz	r0, 80a2af4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
 80a2ac0:	4629      	mov	r1, r5
 80a2ac2:	2001      	movs	r0, #1
 80a2ac4:	f00a fd02 	bl	80ad4cc <calloc>
 80a2ac8:	4607      	mov	r7, r0
 80a2aca:	b9c0      	cbnz	r0, 80a2afe <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80a2acc:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_zeroize( encoded, sig_len );
 80a2ad0:	4630      	mov	r0, r6
 80a2ad2:	4629      	mov	r1, r5
 80a2ad4:	f7fe fe4c 	bl	80a1770 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded );
 80a2ad8:	4630      	mov	r0, r6
 80a2ada:	f009 fc41 	bl	80ac360 <free>
    }

    if( encoded_expected != NULL )
 80a2ade:	b167      	cbz	r7, 80a2afa <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
 80a2ae0:	4638      	mov	r0, r7
 80a2ae2:	4629      	mov	r1, r5
 80a2ae4:	f7fe fe44 	bl	80a1770 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded_expected );
 80a2ae8:	4638      	mov	r0, r7
 80a2aea:	f009 fc39 	bl	80ac360 <free>
 80a2aee:	e004      	b.n	80a2afa <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2af0:	481b      	ldr	r0, [pc, #108]	; (80a2b60 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 80a2af2:	e031      	b.n	80a2b58 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80a2af4:	f06f 000f 	mvn.w	r0, #15
 80a2af8:	e02e      	b.n	80a2b58 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
 80a2afa:	4620      	mov	r0, r4
 80a2afc:	e02c      	b.n	80a2b58 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 80a2afe:	9000      	str	r0, [sp, #0]
 80a2b00:	462b      	mov	r3, r5
 80a2b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a2b04:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a2b06:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80a2b0a:	f7fe fe8b 	bl	80a1824 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 80a2b0e:	4604      	mov	r4, r0
 80a2b10:	2800      	cmp	r0, #0
 80a2b12:	d1dd      	bne.n	80a2ad0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 80a2b14:	f1b9 0f00 	cmp.w	r9, #0
 80a2b18:	d105      	bne.n	80a2b26 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
 80a2b1a:	4632      	mov	r2, r6
 80a2b1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a2b1e:	4640      	mov	r0, r8
 80a2b20:	f7ff f8da 	bl	80a1cd8 <mbedtls_rsa_public>
 80a2b24:	e006      	b.n	80a2b34 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
 80a2b26:	9600      	str	r6, [sp, #0]
 80a2b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a2b2a:	465a      	mov	r2, fp
 80a2b2c:	4651      	mov	r1, sl
 80a2b2e:	4640      	mov	r0, r8
 80a2b30:	f7ff f914 	bl	80a1d5c <mbedtls_rsa_private>
 80a2b34:	4604      	mov	r4, r0
    if( ret != 0 )
 80a2b36:	2800      	cmp	r0, #0
 80a2b38:	d1ca      	bne.n	80a2ad0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 80a2b3a:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a2b3c:	429d      	cmp	r5, r3
 80a2b3e:	d006      	beq.n	80a2b4e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
 80a2b40:	5cf0      	ldrb	r0, [r6, r3]
 80a2b42:	5cfa      	ldrb	r2, [r7, r3]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a2b44:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 80a2b46:	4050      	eors	r0, r2
 80a2b48:	4304      	orrs	r4, r0
 80a2b4a:	b2e4      	uxtb	r4, r4
 80a2b4c:	e7f6      	b.n	80a2b3c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80a2b4e:	2c00      	cmp	r4, #0
 80a2b50:	4c04      	ldr	r4, [pc, #16]	; (80a2b64 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
 80a2b52:	bf08      	it	eq
 80a2b54:	2400      	moveq	r4, #0
 80a2b56:	e7bb      	b.n	80a2ad0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
 80a2b58:	b003      	add	sp, #12
 80a2b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2b5e:	bf00      	nop
 80a2b60:	ffffbf80 	.word	0xffffbf80
 80a2b64:	ffffbc80 	.word	0xffffbc80

080a2b68 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 80a2b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 80a2b6a:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 80a2b6e:	ad06      	add	r5, sp, #24
 80a2b70:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80a2b74:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 80a2b76:	f1be 0f00 	cmp.w	lr, #0
 80a2b7a:	d00a      	beq.n	80a2b92 <mbedtls_rsa_pkcs1_verify+0x2a>
 80a2b7c:	f1be 0f01 	cmp.w	lr, #1
 80a2b80:	d10f      	bne.n	80a2ba2 <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 80a2b82:	9708      	str	r7, [sp, #32]
 80a2b84:	9607      	str	r6, [sp, #28]
 80a2b86:	9506      	str	r5, [sp, #24]
 80a2b88:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a2b8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 80a2b8e:	f7ff bf6b 	b.w	80a2a68 <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 80a2b92:	9708      	str	r7, [sp, #32]
 80a2b94:	9607      	str	r6, [sp, #28]
 80a2b96:	9506      	str	r5, [sp, #24]
 80a2b98:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a2b9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 80a2b9e:	f7ff bf7d 	b.w	80a2a9c <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a2ba2:	4801      	ldr	r0, [pc, #4]	; (80a2ba8 <mbedtls_rsa_pkcs1_verify+0x40>)
 80a2ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2ba6:	bf00      	nop
 80a2ba8:	ffffbf00 	.word	0xffffbf00

080a2bac <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 80a2bac:	b510      	push	{r4, lr}
 80a2bae:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 80a2bb0:	308c      	adds	r0, #140	; 0x8c
 80a2bb2:	f004 ff24 	bl	80a79fe <mbedtls_mpi_free>
 80a2bb6:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80a2bba:	f004 ff20 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 80a2bbe:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80a2bc2:	f004 ff1c 	bl	80a79fe <mbedtls_mpi_free>
 80a2bc6:	f104 0020 	add.w	r0, r4, #32
 80a2bca:	f004 ff18 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 80a2bce:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2bd2:	f004 ff14 	bl	80a79fe <mbedtls_mpi_free>
 80a2bd6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a2bda:	f004 ff10 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 80a2bde:	f104 0014 	add.w	r0, r4, #20
 80a2be2:	f004 ff0c 	bl	80a79fe <mbedtls_mpi_free>
 80a2be6:	f104 0008 	add.w	r0, r4, #8
 80a2bea:	f004 ff08 	bl	80a79fe <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 80a2bee:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80a2bf2:	f004 ff04 	bl	80a79fe <mbedtls_mpi_free>
 80a2bf6:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80a2bfa:	f004 ff00 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 80a2bfe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80a2c02:	f004 fefc 	bl	80a79fe <mbedtls_mpi_free>
 80a2c06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80a2c0a:	f004 fef8 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 80a2c0e:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 80a2c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
 80a2c16:	f004 bef2 	b.w	80a79fe <mbedtls_mpi_free>
	...

080a2c1c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 80a2c1c:	b538      	push	{r3, r4, r5, lr}
 80a2c1e:	4605      	mov	r5, r0
 80a2c20:	b160      	cbz	r0, 80a2c3c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
 80a2c22:	4c08      	ldr	r4, [pc, #32]	; (80a2c44 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
 80a2c24:	6820      	ldr	r0, [r4, #0]
 80a2c26:	b158      	cbz	r0, 80a2c40 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
 80a2c28:	6862      	ldr	r2, [r4, #4]
 80a2c2a:	686b      	ldr	r3, [r5, #4]
 80a2c2c:	429a      	cmp	r2, r3
 80a2c2e:	d103      	bne.n	80a2c38 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
 80a2c30:	68a9      	ldr	r1, [r5, #8]
 80a2c32:	f00a fc61 	bl	80ad4f8 <memcmp>
 80a2c36:	b110      	cbz	r0, 80a2c3e <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
 80a2c38:	3414      	adds	r4, #20
 80a2c3a:	e7f3      	b.n	80a2c24 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
 80a2c3c:	bd38      	pop	{r3, r4, r5, pc}
 80a2c3e:	4620      	mov	r0, r4
 80a2c40:	bd38      	pop	{r3, r4, r5, pc}
 80a2c42:	bf00      	nop
 80a2c44:	080ae0f4 	.word	0x080ae0f4

080a2c48 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80a2c48:	b570      	push	{r4, r5, r6, lr}
 80a2c4a:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 80a2c4c:	4605      	mov	r5, r0
 80a2c4e:	b160      	cbz	r0, 80a2c6a <mbedtls_oid_get_x509_ext_type+0x22>
 80a2c50:	4c09      	ldr	r4, [pc, #36]	; (80a2c78 <mbedtls_oid_get_x509_ext_type+0x30>)
 80a2c52:	6820      	ldr	r0, [r4, #0]
 80a2c54:	b148      	cbz	r0, 80a2c6a <mbedtls_oid_get_x509_ext_type+0x22>
 80a2c56:	6862      	ldr	r2, [r4, #4]
 80a2c58:	686b      	ldr	r3, [r5, #4]
 80a2c5a:	429a      	cmp	r2, r3
 80a2c5c:	d103      	bne.n	80a2c66 <mbedtls_oid_get_x509_ext_type+0x1e>
 80a2c5e:	68a9      	ldr	r1, [r5, #8]
 80a2c60:	f00a fc4a 	bl	80ad4f8 <memcmp>
 80a2c64:	b120      	cbz	r0, 80a2c70 <mbedtls_oid_get_x509_ext_type+0x28>
 80a2c66:	3414      	adds	r4, #20
 80a2c68:	e7f3      	b.n	80a2c52 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80a2c6a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a2c6e:	bd70      	pop	{r4, r5, r6, pc}
 80a2c70:	6923      	ldr	r3, [r4, #16]
 80a2c72:	6033      	str	r3, [r6, #0]
 80a2c74:	bd70      	pop	{r4, r5, r6, pc}
 80a2c76:	bf00      	nop
 80a2c78:	080ae194 	.word	0x080ae194

080a2c7c <mbedtls_oid_get_sig_alg>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 80a2c7c:	b538      	push	{r3, r4, r5, lr}
 80a2c7e:	460d      	mov	r5, r1
 80a2c80:	4614      	mov	r4, r2
 80a2c82:	f7ff ffcb 	bl	80a2c1c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 80a2c86:	b128      	cbz	r0, 80a2c94 <mbedtls_oid_get_sig_alg+0x18>
 80a2c88:	7c03      	ldrb	r3, [r0, #16]
 80a2c8a:	702b      	strb	r3, [r5, #0]
 80a2c8c:	7c43      	ldrb	r3, [r0, #17]
 80a2c8e:	2000      	movs	r0, #0
 80a2c90:	7023      	strb	r3, [r4, #0]
 80a2c92:	bd38      	pop	{r3, r4, r5, pc}
 80a2c94:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a2c98:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2c9c <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80a2c9c:	b570      	push	{r4, r5, r6, lr}
 80a2c9e:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80a2ca0:	4605      	mov	r5, r0
 80a2ca2:	b160      	cbz	r0, 80a2cbe <mbedtls_oid_get_pk_alg+0x22>
 80a2ca4:	4c09      	ldr	r4, [pc, #36]	; (80a2ccc <mbedtls_oid_get_pk_alg+0x30>)
 80a2ca6:	6820      	ldr	r0, [r4, #0]
 80a2ca8:	b148      	cbz	r0, 80a2cbe <mbedtls_oid_get_pk_alg+0x22>
 80a2caa:	6862      	ldr	r2, [r4, #4]
 80a2cac:	686b      	ldr	r3, [r5, #4]
 80a2cae:	429a      	cmp	r2, r3
 80a2cb0:	d103      	bne.n	80a2cba <mbedtls_oid_get_pk_alg+0x1e>
 80a2cb2:	68a9      	ldr	r1, [r5, #8]
 80a2cb4:	f00a fc20 	bl	80ad4f8 <memcmp>
 80a2cb8:	b120      	cbz	r0, 80a2cc4 <mbedtls_oid_get_pk_alg+0x28>
 80a2cba:	3414      	adds	r4, #20
 80a2cbc:	e7f3      	b.n	80a2ca6 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80a2cbe:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a2cc2:	bd70      	pop	{r4, r5, r6, pc}
 80a2cc4:	7c23      	ldrb	r3, [r4, #16]
 80a2cc6:	7033      	strb	r3, [r6, #0]
 80a2cc8:	bd70      	pop	{r4, r5, r6, pc}
 80a2cca:	bf00      	nop
 80a2ccc:	080ad85c 	.word	0x080ad85c

080a2cd0 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 80a2cd0:	b530      	push	{r4, r5, lr}
 80a2cd2:	4b08      	ldr	r3, [pc, #32]	; (80a2cf4 <mbedtls_oid_get_oid_by_md+0x24>)
 80a2cd4:	681c      	ldr	r4, [r3, #0]
 80a2cd6:	b14c      	cbz	r4, 80a2cec <mbedtls_oid_get_oid_by_md+0x1c>
 80a2cd8:	7c1d      	ldrb	r5, [r3, #16]
 80a2cda:	4285      	cmp	r5, r0
 80a2cdc:	d104      	bne.n	80a2ce8 <mbedtls_oid_get_oid_by_md+0x18>
 80a2cde:	600c      	str	r4, [r1, #0]
 80a2ce0:	685b      	ldr	r3, [r3, #4]
 80a2ce2:	2000      	movs	r0, #0
 80a2ce4:	6013      	str	r3, [r2, #0]
 80a2ce6:	bd30      	pop	{r4, r5, pc}
 80a2ce8:	3314      	adds	r3, #20
 80a2cea:	e7f3      	b.n	80a2cd4 <mbedtls_oid_get_oid_by_md+0x4>
 80a2cec:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a2cf0:	bd30      	pop	{r4, r5, pc}
 80a2cf2:	bf00      	nop
 80a2cf4:	080ae07c 	.word	0x080ae07c

080a2cf8 <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 80a2cf8:	225c      	movs	r2, #92	; 0x5c
 80a2cfa:	2100      	movs	r1, #0
 80a2cfc:	f00a bc31 	b.w	80ad562 <memset>

080a2d00 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 80a2d00:	b138      	cbz	r0, 80a2d12 <mbedtls_sha1_free+0x12>
 80a2d02:	f100 025c 	add.w	r2, r0, #92	; 0x5c

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80a2d06:	2300      	movs	r3, #0
 80a2d08:	4290      	cmp	r0, r2
 80a2d0a:	d002      	beq.n	80a2d12 <mbedtls_sha1_free+0x12>
 80a2d0c:	7003      	strb	r3, [r0, #0]
 80a2d0e:	3001      	adds	r0, #1
 80a2d10:	e7fa      	b.n	80a2d08 <mbedtls_sha1_free+0x8>
 80a2d12:	4770      	bx	lr

080a2d14 <mbedtls_sha1_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 80a2d14:	b508      	push	{r3, lr}
    *dst = *src;
 80a2d16:	225c      	movs	r2, #92	; 0x5c
 80a2d18:	f00a fbfd 	bl	80ad516 <memcpy>
 80a2d1c:	bd08      	pop	{r3, pc}
	...

080a2d20 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 80a2d20:	4603      	mov	r3, r0
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 80a2d22:	4a0a      	ldr	r2, [pc, #40]	; (80a2d4c <mbedtls_sha1_starts_ret+0x2c>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 80a2d24:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 80a2d26:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 80a2d28:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80a2d2c:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 80a2d2e:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 80a2d32:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 80a2d36:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 80a2d3a:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 80a2d3c:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 80a2d40:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 80a2d42:	4a03      	ldr	r2, [pc, #12]	; (80a2d50 <mbedtls_sha1_starts_ret+0x30>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 80a2d44:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
 80a2d46:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
 80a2d48:	619a      	str	r2, [r3, #24]

    return( 0 );
}
 80a2d4a:	4770      	bx	lr
 80a2d4c:	67452301 	.word	0x67452301
 80a2d50:	c3d2e1f0 	.word	0xc3d2e1f0

080a2d54 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 80a2d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 80a2d58:	784b      	ldrb	r3, [r1, #1]
 80a2d5a:	780a      	ldrb	r2, [r1, #0]
 80a2d5c:	041b      	lsls	r3, r3, #16
 80a2d5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a2d62:	78ca      	ldrb	r2, [r1, #3]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 80a2d64:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 80a2d66:	4313      	orrs	r3, r2
 80a2d68:	788a      	ldrb	r2, [r1, #2]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80a2d6a:	f891 c008 	ldrb.w	ip, [r1, #8]
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 80a2d6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2d72:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
 80a2d74:	794b      	ldrb	r3, [r1, #5]
 80a2d76:	790a      	ldrb	r2, [r1, #4]
 80a2d78:	041b      	lsls	r3, r3, #16
 80a2d7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a2d7e:	79ca      	ldrb	r2, [r1, #7]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
 80a2d80:	f891 800c 	ldrb.w	r8, [r1, #12]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 80a2d84:	4313      	orrs	r3, r2
 80a2d86:	798a      	ldrb	r2, [r1, #6]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
 80a2d88:	f891 e014 	ldrb.w	lr, [r1, #20]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 80a2d8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2d90:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
 80a2d92:	7a4b      	ldrb	r3, [r1, #9]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
 80a2d94:	7c0a      	ldrb	r2, [r1, #16]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80a2d96:	041b      	lsls	r3, r3, #16
 80a2d98:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80a2d9c:	f891 c00b 	ldrb.w	ip, [r1, #11]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80a2da0:	7e0f      	ldrb	r7, [r1, #24]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80a2da2:	ea43 030c 	orr.w	r3, r3, ip
 80a2da6:	f891 c00a 	ldrb.w	ip, [r1, #10]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 80a2daa:	9001      	str	r0, [sp, #4]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80a2dac:	ea43 2c0c 	orr.w	ip, r3, ip, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
 80a2db0:	7b4b      	ldrb	r3, [r1, #13]
 80a2db2:	041b      	lsls	r3, r3, #16
 80a2db4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80a2db8:	f891 800f 	ldrb.w	r8, [r1, #15]
 80a2dbc:	ea43 0308 	orr.w	r3, r3, r8
 80a2dc0:	f891 800e 	ldrb.w	r8, [r1, #14]
 80a2dc4:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
 80a2dc8:	7c4b      	ldrb	r3, [r1, #17]
 80a2dca:	041b      	lsls	r3, r3, #16
 80a2dcc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a2dd0:	7cca      	ldrb	r2, [r1, #19]
 80a2dd2:	4313      	orrs	r3, r2
 80a2dd4:	7c8a      	ldrb	r2, [r1, #18]
 80a2dd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2dda:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
 80a2ddc:	7d4b      	ldrb	r3, [r1, #21]
 80a2dde:	041b      	lsls	r3, r3, #16
 80a2de0:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 80a2de4:	f891 e017 	ldrb.w	lr, [r1, #23]
 80a2de8:	ea43 030e 	orr.w	r3, r3, lr
 80a2dec:	f891 e016 	ldrb.w	lr, [r1, #22]
 80a2df0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a2df4:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
 80a2df6:	7e4b      	ldrb	r3, [r1, #25]
 80a2df8:	041b      	lsls	r3, r3, #16
 80a2dfa:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80a2dfe:	7ecf      	ldrb	r7, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
 80a2e00:	7f0e      	ldrb	r6, [r1, #28]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80a2e02:	433b      	orrs	r3, r7
 80a2e04:	7e8f      	ldrb	r7, [r1, #26]
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
 80a2e06:	f891 4020 	ldrb.w	r4, [r1, #32]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80a2e0a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80a2e0e:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
 80a2e10:	7f4b      	ldrb	r3, [r1, #29]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
 80a2e12:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 80a2e16:	041b      	lsls	r3, r3, #16
 80a2e18:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80a2e1c:	7fce      	ldrb	r6, [r1, #31]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
 80a2e1e:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 80a2e22:	4333      	orrs	r3, r6
 80a2e24:	7f8e      	ldrb	r6, [r1, #30]
 80a2e26:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80a2e2a:	9311      	str	r3, [sp, #68]	; 0x44
    GET_UINT32_BE( W[ 8], data, 32 );
 80a2e2c:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 80a2e30:	041b      	lsls	r3, r3, #16
 80a2e32:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80a2e36:	f891 4023 	ldrb.w	r4, [r1, #35]	; 0x23
 80a2e3a:	4323      	orrs	r3, r4
 80a2e3c:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
 80a2e40:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80a2e44:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
 80a2e46:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 80a2e4a:	041b      	lsls	r3, r3, #16
 80a2e4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a2e50:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
 80a2e54:	4313      	orrs	r3, r2
 80a2e56:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 80a2e5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2e5e:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
 80a2e60:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 80a2e64:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 80a2e68:	041b      	lsls	r3, r3, #16
 80a2e6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a2e6e:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
 80a2e72:	4313      	orrs	r3, r2
 80a2e74:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 80a2e78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2e7c:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
 80a2e7e:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 80a2e82:	041b      	lsls	r3, r3, #16
 80a2e84:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a2e88:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
 80a2e8c:	4303      	orrs	r3, r0
 80a2e8e:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
 80a2e92:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a2e96:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
 80a2e98:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80a2e9c:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 80a2ea0:	041b      	lsls	r3, r3, #16
 80a2ea2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a2ea6:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
 80a2eaa:	4303      	orrs	r3, r0
 80a2eac:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 80a2eb0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a2eb4:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
 80a2eb6:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 80a2eba:	f891 9034 	ldrb.w	r9, [r1, #52]	; 0x34
 80a2ebe:	041b      	lsls	r3, r3, #16
 80a2ec0:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 80a2ec4:	f891 9037 	ldrb.w	r9, [r1, #55]	; 0x37
    GET_UINT32_BE( W[14], data, 56 );
 80a2ec8:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
    GET_UINT32_BE( W[13], data, 52 );
 80a2ecc:	ea43 0309 	orr.w	r3, r3, r9
 80a2ed0:	f891 9036 	ldrb.w	r9, [r1, #54]	; 0x36
 80a2ed4:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 80a2ed8:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
 80a2eda:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 80a2ede:	041b      	lsls	r3, r3, #16
 80a2ee0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a2ee4:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 80a2ee8:	4313      	orrs	r3, r2
 80a2eea:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80a2eee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2ef2:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
 80a2ef4:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 80a2ef8:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 80a2efc:	041b      	lsls	r3, r3, #16
 80a2efe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a2f02:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 80a2f06:	4313      	orrs	r3, r2
 80a2f08:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 80a2f0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2f10:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 80a2f12:	9b01      	ldr	r3, [sp, #4]
 80a2f14:	689b      	ldr	r3, [r3, #8]
 80a2f16:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
 80a2f18:	9b01      	ldr	r3, [sp, #4]
 80a2f1a:	68db      	ldr	r3, [r3, #12]
 80a2f1c:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 80a2f1e:	9b01      	ldr	r3, [sp, #4]
 80a2f20:	691b      	ldr	r3, [r3, #16]
 80a2f22:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 80a2f24:	9b01      	ldr	r3, [sp, #4]
 80a2f26:	695b      	ldr	r3, [r3, #20]
 80a2f28:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
 80a2f2a:	9b01      	ldr	r3, [sp, #4]
 80a2f2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a2f2e:	699b      	ldr	r3, [r3, #24]
 80a2f30:	9315      	str	r3, [sp, #84]	; 0x54
 80a2f32:	9b05      	ldr	r3, [sp, #20]
 80a2f34:	ea83 0e02 	eor.w	lr, r3, r2
 80a2f38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a2f3a:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a2f3c:	ea0e 0e03 	and.w	lr, lr, r3
 80a2f40:	ea8e 0e02 	eor.w	lr, lr, r2
 80a2f44:	4bdd      	ldr	r3, [pc, #884]	; (80a32bc <mbedtls_internal_sha1_process+0x568>)
 80a2f46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80a2f48:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80a2f4a:	441a      	add	r2, r3
 80a2f4c:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80a2f50:	4496      	add	lr, r2

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 80a2f52:	9a06      	ldr	r2, [sp, #24]
 80a2f54:	eb04 0b03 	add.w	fp, r4, r3
 80a2f58:	4496      	add	lr, r2
 80a2f5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a2f5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a2f5e:	ea4f 00b2 	mov.w	r0, r2, ror #2
 80a2f62:	9a05      	ldr	r2, [sp, #20]
 80a2f64:	18c5      	adds	r5, r0, r3
 80a2f66:	ea82 0700 	eor.w	r7, r2, r0
 80a2f6a:	9a05      	ldr	r2, [sp, #20]
 80a2f6c:	400f      	ands	r7, r1
 80a2f6e:	4057      	eors	r7, r2
 80a2f70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
 80a2f72:	ea4f 01b1 	mov.w	r1, r1, ror #2
 80a2f76:	441a      	add	r2, r3
 80a2f78:	4417      	add	r7, r2
 80a2f7a:	9a07      	ldr	r2, [sp, #28]
 80a2f7c:	ea80 0901 	eor.w	r9, r0, r1
 80a2f80:	4417      	add	r7, r2
 80a2f82:	9a05      	ldr	r2, [sp, #20]
 80a2f84:	ea09 090e 	and.w	r9, r9, lr
 80a2f88:	441a      	add	r2, r3
 80a2f8a:	eb07 67fe 	add.w	r7, r7, lr, ror #27
 80a2f8e:	4462      	add	r2, ip
    P( D, E, A, B, C, W[2]  );
 80a2f90:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 80a2f94:	ea89 0900 	eor.w	r9, r9, r0
 80a2f98:	4491      	add	r9, r2
 80a2f9a:	ea81 020e 	eor.w	r2, r1, lr
 80a2f9e:	403a      	ands	r2, r7
 80a2fa0:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 80a2fa4:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[3]  );
 80a2fa6:	ea4f 07b7 	mov.w	r7, r7, ror #2
 80a2faa:	4445      	add	r5, r8
 80a2fac:	18c8      	adds	r0, r1, r3
 80a2fae:	4415      	add	r5, r2
 80a2fb0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a2fb2:	ea8e 0207 	eor.w	r2, lr, r7
 80a2fb6:	ea02 0209 	and.w	r2, r2, r9
 80a2fba:	eb05 65f9 	add.w	r5, r5, r9, ror #27
 80a2fbe:	ea82 020e 	eor.w	r2, r2, lr
    P( B, C, D, E, A, W[4]  );
 80a2fc2:	ea4f 09b9 	mov.w	r9, r9, ror #2
 80a2fc6:	4408      	add	r0, r1
 80a2fc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a2fca:	4410      	add	r0, r2
 80a2fcc:	ea87 0209 	eor.w	r2, r7, r9
 80a2fd0:	18ce      	adds	r6, r1, r3
 80a2fd2:	402a      	ands	r2, r5
 80a2fd4:	407a      	eors	r2, r7
 80a2fd6:	4476      	add	r6, lr
 80a2fd8:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 80a2fdc:	4416      	add	r6, r2
    P( A, B, C, D, E, W[5]  );
 80a2fde:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80a2fe2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a2fe4:	ea89 0105 	eor.w	r1, r9, r5
 80a2fe8:	4001      	ands	r1, r0
 80a2fea:	441a      	add	r2, r3
 80a2fec:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 80a2ff0:	ea81 0109 	eor.w	r1, r1, r9
    P( E, A, B, C, D, W[6]  );
 80a2ff4:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80a2ff8:	443a      	add	r2, r7
 80a2ffa:	440a      	add	r2, r1
 80a2ffc:	ea85 0100 	eor.w	r1, r5, r0
 80a3000:	4031      	ands	r1, r6
 80a3002:	eb02 62f6 	add.w	r2, r2, r6, ror #27
 80a3006:	4069      	eors	r1, r5
    P( D, E, A, B, C, W[7]  );
 80a3008:	ea4f 06b6 	mov.w	r6, r6, ror #2
 80a300c:	44cb      	add	fp, r9
 80a300e:	448b      	add	fp, r1
 80a3010:	ea80 0106 	eor.w	r1, r0, r6
 80a3014:	4011      	ands	r1, r2
 80a3016:	441c      	add	r4, r3
 80a3018:	4041      	eors	r1, r0
 80a301a:	442c      	add	r4, r5
 80a301c:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
 80a3020:	440c      	add	r4, r1
    P( C, D, E, A, B, W[8]  );
 80a3022:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80a3026:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a3028:	ea86 0502 	eor.w	r5, r6, r2
 80a302c:	ea05 050b 	and.w	r5, r5, fp
 80a3030:	4419      	add	r1, r3
 80a3032:	4075      	eors	r5, r6
 80a3034:	4401      	add	r1, r0
 80a3036:	eb04 64fb 	add.w	r4, r4, fp, ror #27
 80a303a:	4429      	add	r1, r5
    P( B, C, D, E, A, W[9]  );
 80a303c:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 80a3040:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a3042:	ea82 000b 	eor.w	r0, r2, fp
 80a3046:	eb05 0a03 	add.w	sl, r5, r3
 80a304a:	4020      	ands	r0, r4
 80a304c:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80a3050:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[10] );
 80a3052:	ea4f 04b4 	mov.w	r4, r4, ror #2
 80a3056:	4050      	eors	r0, r2
 80a3058:	44b2      	add	sl, r6
 80a305a:	4482      	add	sl, r0
 80a305c:	ea8b 0004 	eor.w	r0, fp, r4
 80a3060:	eb05 0903 	add.w	r9, r5, r3
 80a3064:	4008      	ands	r0, r1
 80a3066:	ea80 000b 	eor.w	r0, r0, fp
 80a306a:	4491      	add	r9, r2
 80a306c:	eb0a 6af1 	add.w	sl, sl, r1, ror #27
 80a3070:	4481      	add	r9, r0
    P( E, A, B, C, D, W[11] );
 80a3072:	ea4f 01b1 	mov.w	r1, r1, ror #2
 80a3076:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a3078:	ea84 0201 	eor.w	r2, r4, r1
 80a307c:	eb00 0e03 	add.w	lr, r0, r3
 80a3080:	ea02 020a 	and.w	r2, r2, sl
 80a3084:	eb09 69fa 	add.w	r9, r9, sl, ror #27
 80a3088:	9802      	ldr	r0, [sp, #8]
    P( D, E, A, B, C, W[12] );
 80a308a:	ea4f 0aba 	mov.w	sl, sl, ror #2
 80a308e:	4062      	eors	r2, r4
 80a3090:	44de      	add	lr, fp
 80a3092:	4496      	add	lr, r2
 80a3094:	ea81 020a 	eor.w	r2, r1, sl
 80a3098:	18c5      	adds	r5, r0, r3
 80a309a:	ea02 0209 	and.w	r2, r2, r9
 80a309e:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
 80a30a2:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[13] );
 80a30a4:	ea4f 09b9 	mov.w	r9, r9, ror #2
 80a30a8:	9803      	ldr	r0, [sp, #12]
 80a30aa:	4425      	add	r5, r4
 80a30ac:	4415      	add	r5, r2
 80a30ae:	ea8a 0209 	eor.w	r2, sl, r9
 80a30b2:	ea02 020e 	and.w	r2, r2, lr
 80a30b6:	4418      	add	r0, r3
 80a30b8:	eb05 65fe 	add.w	r5, r5, lr, ror #27
 80a30bc:	ea82 020a 	eor.w	r2, r2, sl
    P( B, C, D, E, A, W[14] );
 80a30c0:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 80a30c4:	4408      	add	r0, r1
 80a30c6:	9904      	ldr	r1, [sp, #16]
 80a30c8:	4410      	add	r0, r2
 80a30ca:	ea89 020e 	eor.w	r2, r9, lr
 80a30ce:	18cf      	adds	r7, r1, r3
 80a30d0:	402a      	ands	r2, r5
 80a30d2:	ea82 0209 	eor.w	r2, r2, r9
 80a30d6:	4457      	add	r7, sl
 80a30d8:	4417      	add	r7, r2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80a30da:	9a06      	ldr	r2, [sp, #24]
 80a30dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a30de:	ea82 020c 	eor.w	r2, r2, ip
 80a30e2:	404a      	eors	r2, r1
 80a30e4:	9902      	ldr	r1, [sp, #8]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
 80a30e6:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80a30ea:	404a      	eors	r2, r1
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80a30ec:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80a30f0:	ea8e 0105 	eor.w	r1, lr, r5
    P( E, A, B, C, D, R(16) );
 80a30f4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a30f8:	9206      	str	r2, [sp, #24]
 80a30fa:	4001      	ands	r1, r0
 80a30fc:	441a      	add	r2, r3
 80a30fe:	ea81 010e 	eor.w	r1, r1, lr
 80a3102:	444a      	add	r2, r9
 80a3104:	440a      	add	r2, r1
    P( D, E, A, B, C, R(17) );
 80a3106:	9907      	ldr	r1, [sp, #28]
 80a3108:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a310a:	ea81 0108 	eor.w	r1, r1, r8
 80a310e:	4061      	eors	r1, r4
 80a3110:	9c03      	ldr	r4, [sp, #12]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80a3112:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80a3116:	4061      	eors	r1, r4
 80a3118:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80a311c:	9107      	str	r1, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80a311e:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80a3122:	9c07      	ldr	r4, [sp, #28]
 80a3124:	ea85 0100 	eor.w	r1, r5, r0
 80a3128:	18e6      	adds	r6, r4, r3
 80a312a:	4039      	ands	r1, r7
 80a312c:	4069      	eors	r1, r5
 80a312e:	4476      	add	r6, lr
 80a3130:	440e      	add	r6, r1
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a3132:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80a3134:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a3138:	ea8c 0c01 	eor.w	ip, ip, r1
 80a313c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80a313e:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(18) );
 80a3142:	ea8c 0c01 	eor.w	ip, ip, r1
 80a3146:	9904      	ldr	r1, [sp, #16]
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80a3148:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(18) );
 80a314c:	ea8c 0c01 	eor.w	ip, ip, r1
 80a3150:	ea4f 71fc 	mov.w	r1, ip, ror #31
 80a3154:	9108      	str	r1, [sp, #32]
 80a3156:	9c08      	ldr	r4, [sp, #32]
 80a3158:	ea80 0107 	eor.w	r1, r0, r7
 80a315c:	4011      	ands	r1, r2
 80a315e:	441c      	add	r4, r3
 80a3160:	4041      	eors	r1, r0
 80a3162:	442c      	add	r4, r5
 80a3164:	440c      	add	r4, r1
    P( B, C, D, E, A, R(19) );
 80a3166:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a3168:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(19) );
 80a316c:	ea88 0801 	eor.w	r8, r8, r1
 80a3170:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a3172:	ea87 0502 	eor.w	r5, r7, r2
 80a3176:	ea88 0801 	eor.w	r8, r8, r1
 80a317a:	9906      	ldr	r1, [sp, #24]
 80a317c:	4035      	ands	r5, r6
 80a317e:	ea88 0801 	eor.w	r8, r8, r1
 80a3182:	ea4f 78f8 	mov.w	r8, r8, ror #31
 80a3186:	4443      	add	r3, r8
 80a3188:	407d      	eors	r5, r7
 80a318a:	4403      	add	r3, r0
 80a318c:	18e9      	adds	r1, r5, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a318e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80a3190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a3192:	4d4b      	ldr	r5, [pc, #300]	; (80a32c0 <mbedtls_internal_sha1_process+0x56c>)
 80a3194:	ea83 0c00 	eor.w	ip, r3, r0
 80a3198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a319a:	eb04 64f6 	add.w	r4, r4, r6, ror #27
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a319e:	ea8c 0c03 	eor.w	ip, ip, r3
 80a31a2:	9b07      	ldr	r3, [sp, #28]
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 80a31a4:	ea4f 06b6 	mov.w	r6, r6, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a31a8:	ea8c 0c03 	eor.w	ip, ip, r3
 80a31ac:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80a31b0:	ea82 0306 	eor.w	r3, r2, r6
 80a31b4:	eb0c 0b05 	add.w	fp, ip, r5
 80a31b8:	4063      	eors	r3, r4
 80a31ba:	44bb      	add	fp, r7
    P( E, A, B, C, D, R(21) );
 80a31bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80a31be:	449b      	add	fp, r3
 80a31c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 80a31c2:	eb01 61f4 	add.w	r1, r1, r4, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80a31c6:	ea83 0e00 	eor.w	lr, r3, r0
 80a31ca:	9b02      	ldr	r3, [sp, #8]
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a31cc:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(21) );
 80a31d0:	ea8e 0e03 	eor.w	lr, lr, r3
 80a31d4:	9b08      	ldr	r3, [sp, #32]
 80a31d6:	ea86 0004 	eor.w	r0, r6, r4
 80a31da:	ea8e 0e03 	eor.w	lr, lr, r3
 80a31de:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80a31e2:	eb0e 0305 	add.w	r3, lr, r5
 80a31e6:	4048      	eors	r0, r1
 80a31e8:	4413      	add	r3, r2
 80a31ea:	4403      	add	r3, r0
    P( D, E, A, B, C, R(22) );
 80a31ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a31ee:	9809      	ldr	r0, [sp, #36]	; 0x24
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a31f0:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80a31f4:	ea82 0700 	eor.w	r7, r2, r0
 80a31f8:	9a03      	ldr	r2, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80a31fa:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(22) );
 80a31fe:	4057      	eors	r7, r2
 80a3200:	ea87 0708 	eor.w	r7, r7, r8
 80a3204:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80a3208:	ea84 0201 	eor.w	r2, r4, r1
 80a320c:	eb07 0a05 	add.w	sl, r7, r5
 80a3210:	ea82 020b 	eor.w	r2, r2, fp
 80a3214:	44b2      	add	sl, r6
    P( C, D, E, A, B, R(23) );
 80a3216:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a3218:	4492      	add	sl, r2
 80a321a:	9a11      	ldr	r2, [sp, #68]	; 0x44

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80a321c:	eb03 63fb 	add.w	r3, r3, fp, ror #27
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80a3220:	ea82 0600 	eor.w	r6, r2, r0
 80a3224:	9a04      	ldr	r2, [sp, #16]
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80a3226:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( C, D, E, A, B, R(23) );
 80a322a:	4056      	eors	r6, r2
 80a322c:	ea86 060c 	eor.w	r6, r6, ip
 80a3230:	ea4f 76f6 	mov.w	r6, r6, ror #31
 80a3234:	ea81 020b 	eor.w	r2, r1, fp
 80a3238:	eb06 0905 	add.w	r9, r6, r5
 80a323c:	405a      	eors	r2, r3
 80a323e:	44a1      	add	r9, r4
    P( B, C, D, E, A, R(24) );
 80a3240:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a3242:	4491      	add	r9, r2
 80a3244:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80a3246:	eb0a 6af3 	add.w	sl, sl, r3, ror #27
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 80a324a:	ea82 0400 	eor.w	r4, r2, r0
 80a324e:	9a06      	ldr	r2, [sp, #24]
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80a3250:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(24) );
 80a3254:	4054      	eors	r4, r2
 80a3256:	ea84 040e 	eor.w	r4, r4, lr
 80a325a:	ea4f 72f4 	mov.w	r2, r4, ror #31
 80a325e:	9209      	str	r2, [sp, #36]	; 0x24
 80a3260:	9809      	ldr	r0, [sp, #36]	; 0x24
 80a3262:	ea8b 0203 	eor.w	r2, fp, r3
 80a3266:	4428      	add	r0, r5
 80a3268:	ea82 020a 	eor.w	r2, r2, sl
 80a326c:	4408      	add	r0, r1
 80a326e:	4410      	add	r0, r2
    P( A, B, C, D, E, R(25) );
 80a3270:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a3272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80a3274:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 80a3278:	404a      	eors	r2, r1
 80a327a:	9907      	ldr	r1, [sp, #28]

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 80a327c:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(25) );
 80a3280:	404a      	eors	r2, r1
 80a3282:	407a      	eors	r2, r7
 80a3284:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a3288:	920a      	str	r2, [sp, #40]	; 0x28
 80a328a:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a328c:	ea83 020a 	eor.w	r2, r3, sl
 80a3290:	4429      	add	r1, r5
 80a3292:	ea82 0209 	eor.w	r2, r2, r9
 80a3296:	4459      	add	r1, fp
 80a3298:	4411      	add	r1, r2
    P( E, A, B, C, D, R(26) );
 80a329a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 80a329c:	eb00 60f9 	add.w	r0, r0, r9, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 80a32a0:	4614      	mov	r4, r2
 80a32a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 80a32a4:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( E, A, B, C, D, R(26) );
 80a32a8:	4062      	eors	r2, r4
 80a32aa:	9c08      	ldr	r4, [sp, #32]
 80a32ac:	ea8a 0b09 	eor.w	fp, sl, r9
 80a32b0:	4062      	eors	r2, r4
 80a32b2:	4072      	eors	r2, r6
 80a32b4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a32b8:	e004      	b.n	80a32c4 <mbedtls_internal_sha1_process+0x570>
 80a32ba:	bf00      	nop
 80a32bc:	5a827999 	.word	0x5a827999
 80a32c0:	6ed9eba1 	.word	0x6ed9eba1
 80a32c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80a32c6:	442a      	add	r2, r5
    P( D, E, A, B, C, R(27) );
 80a32c8:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 80a32ca:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80a32ce:	ea8b 0b00 	eor.w	fp, fp, r0
 80a32d2:	441a      	add	r2, r3
    P( E, A, B, C, D, R(26) );
 80a32d4:	ea4f 03b0 	mov.w	r3, r0, ror #2
    P( D, E, A, B, C, R(27) );
 80a32d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a32da:	445a      	add	r2, fp
 80a32dc:	4060      	eors	r0, r4
 80a32de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a32e0:	ea80 0008 	eor.w	r0, r0, r8
 80a32e4:	4060      	eors	r0, r4
 80a32e6:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80a32ea:	900c      	str	r0, [sp, #48]	; 0x30
 80a32ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a32ee:	ea89 0003 	eor.w	r0, r9, r3
 80a32f2:	eb04 0b05 	add.w	fp, r4, r5
 80a32f6:	4048      	eors	r0, r1
 80a32f8:	44da      	add	sl, fp
    P( C, D, E, A, B, R(28) );
 80a32fa:	9c03      	ldr	r4, [sp, #12]
 80a32fc:	4482      	add	sl, r0
 80a32fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 80a3300:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80a3304:	4060      	eors	r0, r4
 80a3306:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a3308:	ea80 000c 	eor.w	r0, r0, ip
 80a330c:	4060      	eors	r0, r4
 80a330e:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( B, C, D, E, A, R(29) );
 80a3312:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80a3314:	900d      	str	r0, [sp, #52]	; 0x34
 80a3316:	4428      	add	r0, r5
 80a3318:	4448      	add	r0, r9
    P( B, C, D, E, A, R(29) );
 80a331a:	46a1      	mov	r9, r4
 80a331c:	9c04      	ldr	r4, [sp, #16]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 80a331e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 80a3322:	ea89 0904 	eor.w	r9, r9, r4
 80a3326:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a3328:	ea89 090e 	eor.w	r9, r9, lr
 80a332c:	ea89 0904 	eor.w	r9, r9, r4
 80a3330:	ea4f 74f9 	mov.w	r4, r9, ror #31
 80a3334:	eb04 0905 	add.w	r9, r4, r5
 80a3338:	9402      	str	r4, [sp, #8]
 80a333a:	ea83 0b01 	eor.w	fp, r3, r1
    P( A, B, C, D, E, R(30) );
 80a333e:	9c06      	ldr	r4, [sp, #24]
 80a3340:	4499      	add	r9, r3
 80a3342:	9b03      	ldr	r3, [sp, #12]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 80a3344:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a3348:	4063      	eors	r3, r4
 80a334a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a334c:	407b      	eors	r3, r7
 80a334e:	4063      	eors	r3, r4
 80a3350:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3354:	9303      	str	r3, [sp, #12]
 80a3356:	ea8b 0b02 	eor.w	fp, fp, r2
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80a335a:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80a335e:	9c03      	ldr	r4, [sp, #12]
 80a3360:	4458      	add	r0, fp
 80a3362:	ea81 0b02 	eor.w	fp, r1, r2
 80a3366:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 80a336a:	ea8b 0b0a 	eor.w	fp, fp, sl
    P( B, C, D, E, A, R(29) );
 80a336e:	ea4f 0aba 	mov.w	sl, sl, ror #2
 80a3372:	ea82 030a 	eor.w	r3, r2, sl
 80a3376:	44d9      	add	r9, fp
 80a3378:	eb04 0b05 	add.w	fp, r4, r5
 80a337c:	4043      	eors	r3, r0
 80a337e:	4459      	add	r1, fp
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80a3380:	9c07      	ldr	r4, [sp, #28]
 80a3382:	4419      	add	r1, r3
 80a3384:	9b04      	ldr	r3, [sp, #16]
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 80a3386:	eb09 69f0 	add.w	r9, r9, r0, ror #27
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80a338a:	4063      	eors	r3, r4
 80a338c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a338e:	4073      	eors	r3, r6
 80a3390:	4063      	eors	r3, r4
 80a3392:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3396:	9304      	str	r3, [sp, #16]
 80a3398:	442b      	add	r3, r5
    P( D, E, A, B, C, R(32) );
 80a339a:	9c08      	ldr	r4, [sp, #32]
 80a339c:	4413      	add	r3, r2
 80a339e:	9a06      	ldr	r2, [sp, #24]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a33a0:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80a33a4:	4062      	eors	r2, r4
 80a33a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a33a8:	ea8a 0b00 	eor.w	fp, sl, r0
 80a33ac:	4062      	eors	r2, r4
 80a33ae:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a33b0:	eb01 61f9 	add.w	r1, r1, r9, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80a33b4:	4062      	eors	r2, r4
 80a33b6:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a33ba:	9206      	str	r2, [sp, #24]
 80a33bc:	9c06      	ldr	r4, [sp, #24]
 80a33be:	ea8b 0b09 	eor.w	fp, fp, r9
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80a33c2:	ea4f 09b9 	mov.w	r9, r9, ror #2
 80a33c6:	ea80 0209 	eor.w	r2, r0, r9
 80a33ca:	445b      	add	r3, fp
 80a33cc:	eb04 0b05 	add.w	fp, r4, r5
 80a33d0:	404a      	eors	r2, r1
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a33d2:	9c07      	ldr	r4, [sp, #28]
 80a33d4:	44da      	add	sl, fp
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80a33d6:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80a33da:	4492      	add	sl, r2
    P( D, E, A, B, C, R(32) );
 80a33dc:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
    P( C, D, E, A, B, R(33) );
 80a33e0:	ea84 0a08 	eor.w	sl, r4, r8
 80a33e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80a33e6:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(33) );
 80a33ea:	ea8a 0a04 	eor.w	sl, sl, r4
 80a33ee:	9c03      	ldr	r4, [sp, #12]
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 80a33f0:	ea88 080e 	eor.w	r8, r8, lr
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a33f4:	ea8a 0a04 	eor.w	sl, sl, r4
 80a33f8:	ea4f 74fa 	mov.w	r4, sl, ror #31
 80a33fc:	eb04 0b05 	add.w	fp, r4, r5
 80a3400:	ea89 0a01 	eor.w	sl, r9, r1
 80a3404:	4458      	add	r0, fp
 80a3406:	ea8a 0a03 	eor.w	sl, sl, r3
 80a340a:	4482      	add	sl, r0
    P( B, C, D, E, A, R(34) );
 80a340c:	9808      	ldr	r0, [sp, #32]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a340e:	9407      	str	r4, [sp, #28]
    P( B, C, D, E, A, R(34) );
 80a3410:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a3412:	ea80 000c 	eor.w	r0, r0, ip
 80a3416:	4060      	eors	r0, r4
 80a3418:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a341a:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(34) );
 80a341e:	4060      	eors	r0, r4
 80a3420:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80a3424:	9008      	str	r0, [sp, #32]
 80a3426:	9c08      	ldr	r4, [sp, #32]
 80a3428:	ea81 0003 	eor.w	r0, r1, r3
 80a342c:	eb04 0b05 	add.w	fp, r4, r5
    P( A, B, C, D, E, R(35) );
 80a3430:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a3432:	4050      	eors	r0, r2
 80a3434:	ea88 0804 	eor.w	r8, r8, r4
 80a3438:	9c06      	ldr	r4, [sp, #24]
 80a343a:	44d9      	add	r9, fp
 80a343c:	ea88 0804 	eor.w	r8, r8, r4
 80a3440:	ea4f 7bf8 	mov.w	fp, r8, ror #31
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a3444:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 80a3448:	4481      	add	r9, r0
    P( B, C, D, E, A, R(34) );
 80a344a:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80a344e:	eb09 60fa 	add.w	r0, r9, sl, ror #27
 80a3452:	ea83 0802 	eor.w	r8, r3, r2
 80a3456:	eb0b 0905 	add.w	r9, fp, r5
 80a345a:	ea88 080a 	eor.w	r8, r8, sl
 80a345e:	4449      	add	r1, r9
 80a3460:	4441      	add	r1, r8
    P( A, B, C, D, E, R(35) );
 80a3462:	eb01 68f0 	add.w	r8, r1, r0, ror #27
    P( E, A, B, C, D, R(36) );
 80a3466:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a3468:	ea8c 0c07 	eor.w	ip, ip, r7
 80a346c:	ea8c 0c01 	eor.w	ip, ip, r1
 80a3470:	9907      	ldr	r1, [sp, #28]
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 80a3472:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(36) );
 80a3476:	ea8c 0c01 	eor.w	ip, ip, r1
 80a347a:	ea4f 71fc 	mov.w	r1, ip, ror #31
 80a347e:	910e      	str	r1, [sp, #56]	; 0x38
 80a3480:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80a3482:	ea82 010a 	eor.w	r1, r2, sl
 80a3486:	eb04 0c05 	add.w	ip, r4, r5
 80a348a:	4041      	eors	r1, r0
 80a348c:	4463      	add	r3, ip
 80a348e:	440b      	add	r3, r1
 80a3490:	eb03 61f8 	add.w	r1, r3, r8, ror #27
    P( D, E, A, B, C, R(37) );
 80a3494:	9b02      	ldr	r3, [sp, #8]
 80a3496:	ea8e 0e06 	eor.w	lr, lr, r6
 80a349a:	ea8e 0e03 	eor.w	lr, lr, r3
 80a349e:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
 80a34a0:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(37) );
 80a34a4:	ea8e 0e03 	eor.w	lr, lr, r3
 80a34a8:	ea4f 73fe 	mov.w	r3, lr, ror #31
 80a34ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80a34ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80a34b0:	ea8a 0300 	eor.w	r3, sl, r0
 80a34b4:	eb04 0e05 	add.w	lr, r4, r5
 80a34b8:	ea83 0308 	eor.w	r3, r3, r8
 80a34bc:	4472      	add	r2, lr
 80a34be:	441a      	add	r2, r3
 80a34c0:	eb02 63f1 	add.w	r3, r2, r1, ror #27
    P( C, D, E, A, B, R(38) );
 80a34c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
 80a34c6:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(38) );
 80a34ca:	4057      	eors	r7, r2
 80a34cc:	9a03      	ldr	r2, [sp, #12]
 80a34ce:	4057      	eors	r7, r2
 80a34d0:	ea87 070b 	eor.w	r7, r7, fp
 80a34d4:	ea4f 72f7 	mov.w	r2, r7, ror #31
 80a34d8:	9210      	str	r2, [sp, #64]	; 0x40
 80a34da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80a34dc:	ea80 0208 	eor.w	r2, r0, r8
 80a34e0:	1967      	adds	r7, r4, r5
    P( B, C, D, E, A, R(39) );
 80a34e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a34e4:	404a      	eors	r2, r1
 80a34e6:	4066      	eors	r6, r4
 80a34e8:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80a34ea:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(39) );
 80a34ee:	4066      	eors	r6, r4
 80a34f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80a34f2:	44ba      	add	sl, r7
 80a34f4:	4066      	eors	r6, r4
 80a34f6:	ea4f 74f6 	mov.w	r4, r6, ror #31
 80a34fa:	4425      	add	r5, r4
 80a34fc:	9411      	str	r4, [sp, #68]	; 0x44
 80a34fe:	4428      	add	r0, r5
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80a3500:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a3502:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a3504:	ea88 0601 	eor.w	r6, r8, r1
 80a3508:	4065      	eors	r5, r4
 80a350a:	462c      	mov	r4, r5
 80a350c:	9d06      	ldr	r5, [sp, #24]
 80a350e:	405e      	eors	r6, r3
 80a3510:	406c      	eors	r4, r5
 80a3512:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80a3514:	4492      	add	sl, r2
 80a3516:	4430      	add	r0, r6
 80a3518:	406c      	eors	r4, r5
 80a351a:	4ed6      	ldr	r6, [pc, #856]	; (80a3874 <mbedtls_internal_sha1_process+0xb20>)
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80a351c:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80a3520:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 80a3524:	ea4f 03b3 	mov.w	r3, r3, ror #2
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80a3528:	9409      	str	r4, [sp, #36]	; 0x24
 80a352a:	ea42 0503 	orr.w	r5, r2, r3
 80a352e:	4434      	add	r4, r6
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 80a3530:	eb00 60f2 	add.w	r0, r0, r2, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80a3534:	400d      	ands	r5, r1
 80a3536:	44a0      	add	r8, r4
 80a3538:	ea02 0403 	and.w	r4, r2, r3
 80a353c:	432c      	orrs	r4, r5
 80a353e:	eb08 68f0 	add.w	r8, r8, r0, ror #27
 80a3542:	ea4f 0ab2 	mov.w	sl, r2, ror #2
 80a3546:	44a0      	add	r8, r4
    P( E, A, B, C, D, R(41) );
 80a3548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a354a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a354c:	ea4f 0cb0 	mov.w	ip, r0, ror #2
 80a3550:	4062      	eors	r2, r4
 80a3552:	9c07      	ldr	r4, [sp, #28]
 80a3554:	4062      	eors	r2, r4
 80a3556:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80a3558:	4062      	eors	r2, r4
 80a355a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a355e:	920a      	str	r2, [sp, #40]	; 0x28
 80a3560:	ea40 020a 	orr.w	r2, r0, sl
 80a3564:	ea02 0403 	and.w	r4, r2, r3
 80a3568:	ea00 020a 	and.w	r2, r0, sl
 80a356c:	4322      	orrs	r2, r4
 80a356e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(42) );
 80a3570:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a3572:	4434      	add	r4, r6
 80a3574:	4421      	add	r1, r4
 80a3576:	4411      	add	r1, r2
 80a3578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
 80a357a:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( D, E, A, B, C, R(42) );
 80a357e:	4042      	eors	r2, r0
 80a3580:	9808      	ldr	r0, [sp, #32]
 80a3582:	4042      	eors	r2, r0
 80a3584:	9811      	ldr	r0, [sp, #68]	; 0x44
 80a3586:	4042      	eors	r2, r0
 80a3588:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a358c:	920b      	str	r2, [sp, #44]	; 0x2c
 80a358e:	ea48 000c 	orr.w	r0, r8, ip
 80a3592:	4432      	add	r2, r6
 80a3594:	ea00 000a 	and.w	r0, r0, sl
 80a3598:	4413      	add	r3, r2
 80a359a:	ea08 020c 	and.w	r2, r8, ip
 80a359e:	4302      	orrs	r2, r0
 80a35a0:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80a35a4:	4413      	add	r3, r2
    P( C, D, E, A, B, R(43) );
 80a35a6:	9802      	ldr	r0, [sp, #8]
 80a35a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 80a35aa:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(43) );
 80a35ae:	4050      	eors	r0, r2
 80a35b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a35b2:	ea80 000b 	eor.w	r0, r0, fp
 80a35b6:	4050      	eors	r0, r2
 80a35b8:	ea4f 72f0 	mov.w	r2, r0, ror #31
 80a35bc:	ea41 0008 	orr.w	r0, r1, r8
 80a35c0:	920c      	str	r2, [sp, #48]	; 0x30
 80a35c2:	ea00 000c 	and.w	r0, r0, ip
 80a35c6:	ea01 0208 	and.w	r2, r1, r8
 80a35ca:	4310      	orrs	r0, r2
 80a35cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a35ce:	ea4f 01b1 	mov.w	r1, r1, ror #2
 80a35d2:	4432      	add	r2, r6
 80a35d4:	4452      	add	r2, sl
 80a35d6:	4402      	add	r2, r0
 80a35d8:	eb02 6af3 	add.w	sl, r2, r3, ror #27
    P( B, C, D, E, A, R(44) );
 80a35dc:	9803      	ldr	r0, [sp, #12]
 80a35de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a35e0:	ea43 0401 	orr.w	r4, r3, r1
 80a35e4:	4050      	eors	r0, r2
 80a35e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a35e8:	ea04 0408 	and.w	r4, r4, r8
 80a35ec:	4050      	eors	r0, r2
 80a35ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a35f0:	ea4f 07b3 	mov.w	r7, r3, ror #2
 80a35f4:	4050      	eors	r0, r2
 80a35f6:	ea4f 72f0 	mov.w	r2, r0, ror #31
 80a35fa:	1990      	adds	r0, r2, r6
 80a35fc:	920d      	str	r2, [sp, #52]	; 0x34
 80a35fe:	4460      	add	r0, ip
 80a3600:	ea03 0201 	and.w	r2, r3, r1
 80a3604:	4322      	orrs	r2, r4
 80a3606:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 80a360a:	4410      	add	r0, r2
    P( A, B, C, D, E, R(45) );
 80a360c:	9b02      	ldr	r3, [sp, #8]
 80a360e:	9a04      	ldr	r2, [sp, #16]
 80a3610:	ea4f 09ba 	mov.w	r9, sl, ror #2
 80a3614:	4053      	eors	r3, r2
 80a3616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a3618:	4053      	eors	r3, r2
 80a361a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a361c:	4053      	eors	r3, r2
 80a361e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3622:	9302      	str	r3, [sp, #8]
 80a3624:	9a02      	ldr	r2, [sp, #8]
 80a3626:	ea4a 0307 	orr.w	r3, sl, r7
 80a362a:	ea03 0e01 	and.w	lr, r3, r1
 80a362e:	ea0a 0307 	and.w	r3, sl, r7
 80a3632:	ea4e 0303 	orr.w	r3, lr, r3
 80a3636:	eb02 0e06 	add.w	lr, r2, r6
 80a363a:	44f0      	add	r8, lr
 80a363c:	4498      	add	r8, r3
    P( E, A, B, C, D, R(46) );
 80a363e:	9a06      	ldr	r2, [sp, #24]
 80a3640:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
 80a3642:	eb08 6ef0 	add.w	lr, r8, r0, ror #27
    P( E, A, B, C, D, R(46) );
 80a3646:	ea83 0802 	eor.w	r8, r3, r2
 80a364a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a364c:	ea88 0803 	eor.w	r8, r8, r3
 80a3650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3652:	ea88 0803 	eor.w	r8, r8, r3
 80a3656:	ea4f 73f8 	mov.w	r3, r8, ror #31
 80a365a:	199c      	adds	r4, r3, r6
 80a365c:	4421      	add	r1, r4
 80a365e:	ea40 0409 	orr.w	r4, r0, r9
 80a3662:	9303      	str	r3, [sp, #12]
 80a3664:	403c      	ands	r4, r7
 80a3666:	ea00 0309 	and.w	r3, r0, r9
 80a366a:	431c      	orrs	r4, r3
    P( D, E, A, B, C, R(47) );
 80a366c:	9b04      	ldr	r3, [sp, #16]
 80a366e:	9a07      	ldr	r2, [sp, #28]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 80a3670:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(47) );
 80a3674:	ea83 0c02 	eor.w	ip, r3, r2
 80a3678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a367a:	eb01 61fe 	add.w	r1, r1, lr, ror #27
 80a367e:	ea8c 0c03 	eor.w	ip, ip, r3
 80a3682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 80a3684:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
 80a3686:	ea8c 0c03 	eor.w	ip, ip, r3
 80a368a:	ea4f 73fc 	mov.w	r3, ip, ror #31
 80a368e:	ea4e 0100 	orr.w	r1, lr, r0
 80a3692:	9304      	str	r3, [sp, #16]
 80a3694:	ea01 0109 	and.w	r1, r1, r9
 80a3698:	ea0e 0300 	and.w	r3, lr, r0
 80a369c:	4319      	orrs	r1, r3
 80a369e:	9b04      	ldr	r3, [sp, #16]
    P( C, D, E, A, B, R(48) );
 80a36a0:	9a08      	ldr	r2, [sp, #32]
 80a36a2:	4433      	add	r3, r6
 80a36a4:	443b      	add	r3, r7
 80a36a6:	18cf      	adds	r7, r1, r3
 80a36a8:	9b06      	ldr	r3, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 80a36aa:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( C, D, E, A, B, R(48) );
 80a36ae:	ea83 0802 	eor.w	r8, r3, r2
 80a36b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 80a36b4:	eb07 67f4 	add.w	r7, r7, r4, ror #27
    P( C, D, E, A, B, R(48) );
 80a36b8:	ea88 0803 	eor.w	r8, r8, r3
 80a36bc:	9b02      	ldr	r3, [sp, #8]
    P( B, C, D, E, A, R(49) );
 80a36be:	ea4f 0ab7 	mov.w	sl, r7, ror #2
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80a36c2:	ea88 0803 	eor.w	r8, r8, r3
 80a36c6:	ea4f 73f8 	mov.w	r3, r8, ror #31
 80a36ca:	199a      	adds	r2, r3, r6
 80a36cc:	4491      	add	r9, r2
 80a36ce:	ea44 0201 	orr.w	r2, r4, r1
 80a36d2:	9306      	str	r3, [sp, #24]
 80a36d4:	4002      	ands	r2, r0
 80a36d6:	ea04 0301 	and.w	r3, r4, r1
 80a36da:	431a      	orrs	r2, r3
    P( B, C, D, E, A, R(49) );
 80a36dc:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80a36de:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(49) );
 80a36e2:	ea83 0c0b 	eor.w	ip, r3, fp
 80a36e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a36e8:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 80a36ec:	ea8c 0c03 	eor.w	ip, ip, r3
 80a36f0:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80a36f2:	444a      	add	r2, r9
    P( B, C, D, E, A, R(49) );
 80a36f4:	ea8c 0c03 	eor.w	ip, ip, r3
 80a36f8:	ea4f 73fc 	mov.w	r3, ip, ror #31
 80a36fc:	9307      	str	r3, [sp, #28]
 80a36fe:	9d07      	ldr	r5, [sp, #28]
 80a3700:	ea47 0304 	orr.w	r3, r7, r4
 80a3704:	ea03 0c01 	and.w	ip, r3, r1
 80a3708:	ea07 0304 	and.w	r3, r7, r4
 80a370c:	ea4c 0303 	orr.w	r3, ip, r3
 80a3710:	eb05 0c06 	add.w	ip, r5, r6
 80a3714:	4460      	add	r0, ip
 80a3716:	4418      	add	r0, r3
 80a3718:	eb00 6cf2 	add.w	ip, r0, r2, ror #27
    P( A, B, C, D, E, R(50) );
 80a371c:	9b08      	ldr	r3, [sp, #32]
 80a371e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80a3720:	ea83 0500 	eor.w	r5, r3, r0
 80a3724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a3726:	ea42 000a 	orr.w	r0, r2, sl
 80a372a:	405d      	eors	r5, r3
 80a372c:	9b04      	ldr	r3, [sp, #16]
 80a372e:	4020      	ands	r0, r4
 80a3730:	405d      	eors	r5, r3
 80a3732:	ea4f 77f5 	mov.w	r7, r5, ror #31
 80a3736:	19bb      	adds	r3, r7, r6
 80a3738:	4419      	add	r1, r3
 80a373a:	eb01 63fc 	add.w	r3, r1, ip, ror #27
 80a373e:	ea02 010a 	and.w	r1, r2, sl
 80a3742:	4301      	orrs	r1, r0
 80a3744:	4419      	add	r1, r3
    P( E, A, B, C, D, R(51) );
 80a3746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
 80a3748:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(51) );
 80a374c:	ea8b 0903 	eor.w	r9, fp, r3
 80a3750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3752:	ea4f 00bc 	mov.w	r0, ip, ror #2
 80a3756:	ea89 0903 	eor.w	r9, r9, r3
 80a375a:	9b06      	ldr	r3, [sp, #24]
 80a375c:	ea89 0903 	eor.w	r9, r9, r3
 80a3760:	ea4c 0302 	orr.w	r3, ip, r2
 80a3764:	ea4f 7ef9 	mov.w	lr, r9, ror #31
 80a3768:	ea03 050a 	and.w	r5, r3, sl
 80a376c:	ea0c 0302 	and.w	r3, ip, r2
 80a3770:	432b      	orrs	r3, r5
 80a3772:	eb0e 0506 	add.w	r5, lr, r6
 80a3776:	4425      	add	r5, r4
 80a3778:	441d      	add	r5, r3
    P( D, E, A, B, C, R(52) );
 80a377a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80a377c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
 80a377e:	eb05 65f1 	add.w	r5, r5, r1, ror #27
    P( D, E, A, B, C, R(52) );
 80a3782:	4063      	eors	r3, r4
 80a3784:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a3786:	4063      	eors	r3, r4
 80a3788:	9c07      	ldr	r4, [sp, #28]
 80a378a:	4063      	eors	r3, r4
 80a378c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3790:	9308      	str	r3, [sp, #32]
 80a3792:	4433      	add	r3, r6
 80a3794:	449a      	add	sl, r3
 80a3796:	eb0a 63f5 	add.w	r3, sl, r5, ror #27
 80a379a:	ea41 0a00 	orr.w	sl, r1, r0
 80a379e:	ea01 0400 	and.w	r4, r1, r0
 80a37a2:	ea0a 0a02 	and.w	sl, sl, r2
 80a37a6:	ea4a 0a04 	orr.w	sl, sl, r4
 80a37aa:	449a      	add	sl, r3
    P( C, D, E, A, B, R(53) );
 80a37ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80a37ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
 80a37b0:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(53) );
 80a37b4:	4063      	eors	r3, r4
 80a37b6:	9c02      	ldr	r4, [sp, #8]
 80a37b8:	4063      	eors	r3, r4
 80a37ba:	407b      	eors	r3, r7
 80a37bc:	ea45 0401 	orr.w	r4, r5, r1
 80a37c0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a37c4:	930e      	str	r3, [sp, #56]	; 0x38
 80a37c6:	4004      	ands	r4, r0
 80a37c8:	ea05 0301 	and.w	r3, r5, r1
 80a37cc:	431c      	orrs	r4, r3
 80a37ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a37d0:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80a37d4:	4433      	add	r3, r6
 80a37d6:	4413      	add	r3, r2
 80a37d8:	4423      	add	r3, r4
    P( B, C, D, E, A, R(54) );
 80a37da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a37dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
 80a37de:	eb03 63fa 	add.w	r3, r3, sl, ror #27
    P( B, C, D, E, A, R(54) );
 80a37e2:	ea82 0804 	eor.w	r8, r2, r4
 80a37e6:	9a03      	ldr	r2, [sp, #12]
 80a37e8:	ea88 0802 	eor.w	r8, r8, r2
 80a37ec:	ea88 080e 	eor.w	r8, r8, lr
 80a37f0:	ea4f 72f8 	mov.w	r2, r8, ror #31
 80a37f4:	eb02 0806 	add.w	r8, r2, r6
 80a37f8:	4480      	add	r8, r0
 80a37fa:	eb08 60f3 	add.w	r0, r8, r3, ror #27
 80a37fe:	ea4a 0805 	orr.w	r8, sl, r5
 80a3802:	920f      	str	r2, [sp, #60]	; 0x3c
 80a3804:	ea08 0801 	and.w	r8, r8, r1
 80a3808:	ea0a 0205 	and.w	r2, sl, r5
 80a380c:	ea48 0802 	orr.w	r8, r8, r2
 80a3810:	4480      	add	r8, r0
    P( A, B, C, D, E, R(55) );
 80a3812:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a3814:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
 80a3816:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(55) );
 80a381a:	ea82 0c00 	eor.w	ip, r2, r0
 80a381e:	9a04      	ldr	r2, [sp, #16]
 80a3820:	ea8c 0c02 	eor.w	ip, ip, r2
 80a3824:	9a08      	ldr	r2, [sp, #32]
 80a3826:	ea8c 0c02 	eor.w	ip, ip, r2
 80a382a:	ea4f 72fc 	mov.w	r2, ip, ror #31
 80a382e:	9210      	str	r2, [sp, #64]	; 0x40
 80a3830:	9810      	ldr	r0, [sp, #64]	; 0x40
 80a3832:	ea43 020a 	orr.w	r2, r3, sl
 80a3836:	ea02 0c05 	and.w	ip, r2, r5
 80a383a:	ea03 020a 	and.w	r2, r3, sl
 80a383e:	ea4c 0202 	orr.w	r2, ip, r2
 80a3842:	eb00 0c06 	add.w	ip, r0, r6
 80a3846:	448c      	add	ip, r1
    P( E, A, B, C, D, R(56) );
 80a3848:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a384a:	4494      	add	ip, r2
 80a384c:	9a06      	ldr	r2, [sp, #24]
 80a384e:	404c      	eors	r4, r1
 80a3850:	4054      	eors	r4, r2
 80a3852:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 80a3854:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(56) );
 80a3858:	4054      	eors	r4, r2
 80a385a:	ea4f 72f4 	mov.w	r2, r4, ror #31
 80a385e:	9209      	str	r2, [sp, #36]	; 0x24
 80a3860:	4432      	add	r2, r6
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 80a3862:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80a3866:	4415      	add	r5, r2
 80a3868:	eb05 62fc 	add.w	r2, r5, ip, ror #27
    P( E, A, B, C, D, R(56) );
 80a386c:	ea48 0503 	orr.w	r5, r8, r3
 80a3870:	e002      	b.n	80a3878 <mbedtls_internal_sha1_process+0xb24>
 80a3872:	bf00      	nop
 80a3874:	8f1bbcdc 	.word	0x8f1bbcdc
 80a3878:	ea08 0103 	and.w	r1, r8, r3
 80a387c:	ea05 050a 	and.w	r5, r5, sl
 80a3880:	430d      	orrs	r5, r1
 80a3882:	4415      	add	r5, r2
    P( D, E, A, B, C, R(57) );
 80a3884:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a3886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
 80a3888:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(57) );
 80a388c:	ea82 0b01 	eor.w	fp, r2, r1
 80a3890:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(58) );
 80a3892:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80a3894:	ea8b 0b02 	eor.w	fp, fp, r2
 80a3898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a389a:	ea8b 0b02 	eor.w	fp, fp, r2
 80a389e:	ea4c 0208 	orr.w	r2, ip, r8
 80a38a2:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80a38a6:	ea02 0903 	and.w	r9, r2, r3
 80a38aa:	ea0c 0208 	and.w	r2, ip, r8
 80a38ae:	ea49 0202 	orr.w	r2, r9, r2
 80a38b2:	eb0b 0906 	add.w	r9, fp, r6
 80a38b6:	44d1      	add	r9, sl
 80a38b8:	4491      	add	r9, r2
    P( C, D, E, A, B, R(58) );
 80a38ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80a38bc:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(58) );
 80a38c0:	ea82 0a01 	eor.w	sl, r2, r1
 80a38c4:	ea8a 0a07 	eor.w	sl, sl, r7
 80a38c8:	ea8a 0a00 	eor.w	sl, sl, r0
 80a38cc:	ea4f 72fa 	mov.w	r2, sl, ror #31
 80a38d0:	920a      	str	r2, [sp, #40]	; 0x28
 80a38d2:	4432      	add	r2, r6
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80a38d4:	eb09 69f5 	add.w	r9, r9, r5, ror #27
    P( C, D, E, A, B, R(58) );
 80a38d8:	ea45 010c 	orr.w	r1, r5, ip
 80a38dc:	441a      	add	r2, r3
 80a38de:	eb02 63f9 	add.w	r3, r2, r9, ror #27
 80a38e2:	ea01 0108 	and.w	r1, r1, r8
 80a38e6:	ea05 020c 	and.w	r2, r5, ip
 80a38ea:	430a      	orrs	r2, r1
 80a38ec:	441a      	add	r2, r3
    P( B, C, D, E, A, R(59) );
 80a38ee:	9902      	ldr	r1, [sp, #8]
 80a38f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
 80a38f2:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( B, C, D, E, A, R(59) );
 80a38f6:	ea83 0001 	eor.w	r0, r3, r1
 80a38fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a38fc:	ea80 000e 	eor.w	r0, r0, lr
 80a3900:	4058      	eors	r0, r3
 80a3902:	ea4f 73f0 	mov.w	r3, r0, ror #31
 80a3906:	930b      	str	r3, [sp, #44]	; 0x2c
 80a3908:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a390a:	ea49 0005 	orr.w	r0, r9, r5
 80a390e:	ea00 000c 	and.w	r0, r0, ip
 80a3912:	ea09 0305 	and.w	r3, r9, r5
 80a3916:	440e      	add	r6, r1
 80a3918:	4446      	add	r6, r8
 80a391a:	4303      	orrs	r3, r0
 80a391c:	1998      	adds	r0, r3, r6
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a391e:	9903      	ldr	r1, [sp, #12]
 80a3920:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a3922:	4ed8      	ldr	r6, [pc, #864]	; (80a3c84 <mbedtls_internal_sha1_process+0xf30>)
 80a3924:	4059      	eors	r1, r3
 80a3926:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 80a3928:	ea4f 09b9 	mov.w	r9, r9, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a392c:	4059      	eors	r1, r3
 80a392e:	ea81 010b 	eor.w	r1, r1, fp
 80a3932:	ea4f 73f1 	mov.w	r3, r1, ror #31
 80a3936:	930c      	str	r3, [sp, #48]	; 0x30
 80a3938:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a393a:	ea85 0309 	eor.w	r3, r5, r9
 80a393e:	4431      	add	r1, r6
 80a3940:	4053      	eors	r3, r2
 80a3942:	4461      	add	r1, ip
 80a3944:	4419      	add	r1, r3
    P( E, A, B, C, D, R(61) );
 80a3946:	9b02      	ldr	r3, [sp, #8]
 80a3948:	9c04      	ldr	r4, [sp, #16]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 80a394a:	eb00 60f2 	add.w	r0, r0, r2, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80a394e:	4063      	eors	r3, r4
 80a3950:	9c0e      	ldr	r4, [sp, #56]	; 0x38
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a3952:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(61) );
 80a3956:	4063      	eors	r3, r4
 80a3958:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a395a:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(61) );
 80a395e:	4063      	eors	r3, r4
 80a3960:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3964:	9302      	str	r3, [sp, #8]
 80a3966:	ea89 0402 	eor.w	r4, r9, r2
 80a396a:	4433      	add	r3, r6
 80a396c:	4044      	eors	r4, r0
 80a396e:	442b      	add	r3, r5
 80a3970:	4423      	add	r3, r4
    P( D, E, A, B, C, R(62) );
 80a3972:	9d06      	ldr	r5, [sp, #24]
 80a3974:	9c03      	ldr	r4, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80a3976:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
 80a397a:	ea84 0805 	eor.w	r8, r4, r5
 80a397e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80a3980:	ea82 0500 	eor.w	r5, r2, r0
 80a3984:	ea88 0804 	eor.w	r8, r8, r4
 80a3988:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a398a:	404d      	eors	r5, r1
 80a398c:	ea88 0804 	eor.w	r8, r8, r4
 80a3990:	ea4f 74f8 	mov.w	r4, r8, ror #31
 80a3994:	9403      	str	r4, [sp, #12]
 80a3996:	4434      	add	r4, r6
 80a3998:	444c      	add	r4, r9
 80a399a:	442c      	add	r4, r5
    P( C, D, E, A, B, R(63) );
 80a399c:	9d04      	ldr	r5, [sp, #16]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80a399e:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80a39a2:	46ac      	mov	ip, r5
 80a39a4:	9d07      	ldr	r5, [sp, #28]
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 80a39a6:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(63) );
 80a39aa:	ea8c 0c05 	eor.w	ip, ip, r5
 80a39ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 80a39b0:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(63) );
 80a39b4:	ea8c 0c05 	eor.w	ip, ip, r5
 80a39b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a39ba:	ea8c 0c05 	eor.w	ip, ip, r5
 80a39be:	ea4f 75fc 	mov.w	r5, ip, ror #31
 80a39c2:	9504      	str	r5, [sp, #16]
 80a39c4:	ea80 0501 	eor.w	r5, r0, r1
 80a39c8:	ea85 0c03 	eor.w	ip, r5, r3
 80a39cc:	9d04      	ldr	r5, [sp, #16]
 80a39ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80a39d2:	eb05 0a06 	add.w	sl, r5, r6
 80a39d6:	4492      	add	sl, r2
    P( B, C, D, E, A, R(64) );
 80a39d8:	9a06      	ldr	r2, [sp, #24]
 80a39da:	44e2      	add	sl, ip
 80a39dc:	ea82 0807 	eor.w	r8, r2, r7
 80a39e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80a39e2:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    P( B, C, D, E, A, R(64) );
 80a39e6:	ea88 0802 	eor.w	r8, r8, r2
 80a39ea:	9a02      	ldr	r2, [sp, #8]
 80a39ec:	ea88 0802 	eor.w	r8, r8, r2
 80a39f0:	ea4f 72f8 	mov.w	r2, r8, ror #31
 80a39f4:	9206      	str	r2, [sp, #24]
 80a39f6:	9d06      	ldr	r5, [sp, #24]
 80a39f8:	ea81 0203 	eor.w	r2, r1, r3
 80a39fc:	eb05 0806 	add.w	r8, r5, r6
 80a3a00:	4062      	eors	r2, r4
 80a3a02:	4480      	add	r8, r0
 80a3a04:	4490      	add	r8, r2
    P( A, B, C, D, E, R(65) );
 80a3a06:	9a07      	ldr	r2, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 80a3a08:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(65) );
 80a3a0c:	ea82 0c0e 	eor.w	ip, r2, lr
 80a3a10:	9a03      	ldr	r2, [sp, #12]
 80a3a12:	ea8c 0c0b 	eor.w	ip, ip, fp
 80a3a16:	ea8c 0c02 	eor.w	ip, ip, r2
 80a3a1a:	ea4f 72fc 	mov.w	r2, ip, ror #31
 80a3a1e:	9207      	str	r2, [sp, #28]
 80a3a20:	9807      	ldr	r0, [sp, #28]
 80a3a22:	ea83 0204 	eor.w	r2, r3, r4
 80a3a26:	eb00 0c06 	add.w	ip, r0, r6
 80a3a2a:	ea82 020a 	eor.w	r2, r2, sl
 80a3a2e:	448c      	add	ip, r1
 80a3a30:	4494      	add	ip, r2
    P( E, A, B, C, D, R(66) );
 80a3a32:	9a08      	ldr	r2, [sp, #32]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 80a3a34:	eb08 68fa 	add.w	r8, r8, sl, ror #27
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 80a3a38:	ea87 0502 	eor.w	r5, r7, r2
 80a3a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 80a3a3e:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(66) );
 80a3a42:	4055      	eors	r5, r2
 80a3a44:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 80a3a46:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(66) );
 80a3a4a:	4055      	eors	r5, r2
 80a3a4c:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80a3a50:	19af      	adds	r7, r5, r6
 80a3a52:	441f      	add	r7, r3
    P( D, E, A, B, C, R(67) );
 80a3a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a3a56:	ea84 020a 	eor.w	r2, r4, sl
 80a3a5a:	ea8e 0903 	eor.w	r9, lr, r3
 80a3a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a3a60:	ea82 0208 	eor.w	r2, r2, r8
 80a3a64:	ea89 0903 	eor.w	r9, r9, r3
 80a3a68:	9b06      	ldr	r3, [sp, #24]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 80a3a6a:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(67) );
 80a3a6e:	ea89 0903 	eor.w	r9, r9, r3
 80a3a72:	ea4f 79f9 	mov.w	r9, r9, ror #31
 80a3a76:	ea8a 0308 	eor.w	r3, sl, r8
 80a3a7a:	eb09 0e06 	add.w	lr, r9, r6
 80a3a7e:	ea83 030c 	eor.w	r3, r3, ip
 80a3a82:	44a6      	add	lr, r4
 80a3a84:	4417      	add	r7, r2
 80a3a86:	449e      	add	lr, r3
    P( C, D, E, A, B, R(68) );
 80a3a88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a3a8a:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 80a3a8c:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80a3a90:	4053      	eors	r3, r2
 80a3a92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80a3a94:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(68) );
 80a3a98:	4053      	eors	r3, r2
 80a3a9a:	4043      	eors	r3, r0
 80a3a9c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3aa0:	9308      	str	r3, [sp, #32]
 80a3aa2:	9a08      	ldr	r2, [sp, #32]
 80a3aa4:	ea88 030c 	eor.w	r3, r8, ip
 80a3aa8:	4432      	add	r2, r6
 80a3aaa:	407b      	eors	r3, r7
 80a3aac:	4452      	add	r2, sl
    P( B, C, D, E, A, R(69) );
 80a3aae:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a3ab0:	441a      	add	r2, r3
 80a3ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80a3ab4:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80a3ab8:	404b      	eors	r3, r1
 80a3aba:	9902      	ldr	r1, [sp, #8]
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80a3abc:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( B, C, D, E, A, R(69) );
 80a3ac0:	404b      	eors	r3, r1
 80a3ac2:	406b      	eors	r3, r5
 80a3ac4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3ac8:	930d      	str	r3, [sp, #52]	; 0x34
 80a3aca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a3acc:	ea8c 0307 	eor.w	r3, ip, r7
 80a3ad0:	1988      	adds	r0, r1, r6
 80a3ad2:	ea83 030e 	eor.w	r3, r3, lr
 80a3ad6:	4440      	add	r0, r8
    P( A, B, C, D, E, R(70) );
 80a3ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a3ada:	4418      	add	r0, r3
 80a3adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80a3ade:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80a3ae2:	ea83 0801 	eor.w	r8, r3, r1
 80a3ae6:	9b03      	ldr	r3, [sp, #12]
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80a3ae8:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, R(70) );
 80a3aec:	ea88 0803 	eor.w	r8, r8, r3
 80a3af0:	ea88 0809 	eor.w	r8, r8, r9
 80a3af4:	ea4f 78f8 	mov.w	r8, r8, ror #31
 80a3af8:	ea87 030e 	eor.w	r3, r7, lr
 80a3afc:	eb08 0106 	add.w	r1, r8, r6
 80a3b00:	4053      	eors	r3, r2
 80a3b02:	4461      	add	r1, ip
 80a3b04:	4419      	add	r1, r3
    P( E, A, B, C, D, R(71) );
 80a3b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80a3b08:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 80a3b0c:	ea83 0c0b 	eor.w	ip, r3, fp
 80a3b10:	9b04      	ldr	r3, [sp, #16]
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80a3b12:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(71) );
 80a3b16:	ea8c 0c03 	eor.w	ip, ip, r3
 80a3b1a:	9b08      	ldr	r3, [sp, #32]
 80a3b1c:	ea8e 0402 	eor.w	r4, lr, r2
 80a3b20:	ea8c 0c03 	eor.w	ip, ip, r3
 80a3b24:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80a3b28:	eb0c 0306 	add.w	r3, ip, r6
 80a3b2c:	4044      	eors	r4, r0
 80a3b2e:	443b      	add	r3, r7
 80a3b30:	4423      	add	r3, r4
    P( D, E, A, B, C, R(72) );
 80a3b32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a3b34:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80a3b36:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80a3b3a:	4067      	eors	r7, r4
 80a3b3c:	9c06      	ldr	r4, [sp, #24]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 80a3b3e:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(72) );
 80a3b42:	4067      	eors	r7, r4
 80a3b44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a3b46:	ea82 0a00 	eor.w	sl, r2, r0
 80a3b4a:	4067      	eors	r7, r4
 80a3b4c:	ea4f 74f7 	mov.w	r4, r7, ror #31
    P( C, D, E, A, B, R(73) );
 80a3b50:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80a3b52:	9409      	str	r4, [sp, #36]	; 0x24
 80a3b54:	4434      	add	r4, r6
 80a3b56:	4474      	add	r4, lr
    P( C, D, E, A, B, R(73) );
 80a3b58:	ea8b 0e07 	eor.w	lr, fp, r7
 80a3b5c:	9f07      	ldr	r7, [sp, #28]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 80a3b5e:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80a3b62:	ea8e 0e07 	eor.w	lr, lr, r7
 80a3b66:	ea8e 0e08 	eor.w	lr, lr, r8
 80a3b6a:	ea8a 0a01 	eor.w	sl, sl, r1
 80a3b6e:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80a3b72:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a3b76:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a3b78:	eb0e 0b06 	add.w	fp, lr, r6
 80a3b7c:	4454      	add	r4, sl
 80a3b7e:	ea80 0a01 	eor.w	sl, r0, r1
 80a3b82:	ea8a 0a03 	eor.w	sl, sl, r3
 80a3b86:	445a      	add	r2, fp
 80a3b88:	4452      	add	r2, sl
 80a3b8a:	46ba      	mov	sl, r7
 80a3b8c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80a3b8e:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a3b92:	ea8a 0a07 	eor.w	sl, sl, r7
 80a3b96:	ea8a 0505 	eor.w	r5, sl, r5
 80a3b9a:	ea85 050c 	eor.w	r5, r5, ip
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80a3b9e:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(74) );
 80a3ba2:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80a3ba6:	eb05 0b06 	add.w	fp, r5, r6
 80a3baa:	ea81 0a03 	eor.w	sl, r1, r3
 80a3bae:	4458      	add	r0, fp
 80a3bb0:	ea8a 0a04 	eor.w	sl, sl, r4
    P( A, B, C, D, E, R(75) );
 80a3bb4:	9f02      	ldr	r7, [sp, #8]
 80a3bb6:	4482      	add	sl, r0
 80a3bb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80a3bba:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80a3bbe:	4078      	eors	r0, r7
 80a3bc0:	ea80 0909 	eor.w	r9, r0, r9
 80a3bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a3bc6:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(75) );
 80a3bca:	ea89 0700 	eor.w	r7, r9, r0
 80a3bce:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80a3bd2:	eb07 0906 	add.w	r9, r7, r6
 80a3bd6:	ea83 0004 	eor.w	r0, r3, r4
 80a3bda:	4449      	add	r1, r9
 80a3bdc:	4050      	eors	r0, r2
 80a3bde:	4408      	add	r0, r1
    P( E, A, B, C, D, R(76) );
 80a3be0:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a3be2:	950a      	str	r5, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80a3be4:	460d      	mov	r5, r1
 80a3be6:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a3be8:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80a3bec:	4069      	eors	r1, r5
 80a3bee:	9d08      	ldr	r5, [sp, #32]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80a3bf0:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(76) );
 80a3bf4:	4069      	eors	r1, r5
 80a3bf6:	ea81 0e0e 	eor.w	lr, r1, lr
 80a3bfa:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80a3bfe:	eb0e 0906 	add.w	r9, lr, r6
 80a3c02:	ea84 0102 	eor.w	r1, r4, r2
 80a3c06:	444b      	add	r3, r9
 80a3c08:	ea81 010a 	eor.w	r1, r1, sl
 80a3c0c:	9d04      	ldr	r5, [sp, #16]
 80a3c0e:	4419      	add	r1, r3
 80a3c10:	9b02      	ldr	r3, [sp, #8]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80a3c12:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 80a3c16:	406b      	eors	r3, r5
 80a3c18:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(76) );
 80a3c1a:	ea4f 0aba 	mov.w	sl, sl, ror #2
 80a3c1e:	406b      	eors	r3, r5
 80a3c20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a3c22:	ea82 090a 	eor.w	r9, r2, sl
 80a3c26:	406b      	eors	r3, r5
 80a3c28:	eb06 73f3 	add.w	r3, r6, r3, ror #31
 80a3c2c:	9d06      	ldr	r5, [sp, #24]
 80a3c2e:	441c      	add	r4, r3
 80a3c30:	9b03      	ldr	r3, [sp, #12]
 80a3c32:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80a3c36:	406b      	eors	r3, r5
 80a3c38:	ea83 0808 	eor.w	r8, r3, r8
 80a3c3c:	ea89 0900 	eor.w	r9, r9, r0
 80a3c40:	ea88 0807 	eor.w	r8, r8, r7
    P( D, E, A, B, C, R(77) );
 80a3c44:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80a3c48:	eb06 78f8 	add.w	r8, r6, r8, ror #31
 80a3c4c:	ea8a 0500 	eor.w	r5, sl, r0
 80a3c50:	404d      	eors	r5, r1
 80a3c52:	4442      	add	r2, r8
 80a3c54:	442a      	add	r2, r5
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a3c56:	9b04      	ldr	r3, [sp, #16]
 80a3c58:	9d07      	ldr	r5, [sp, #28]
 80a3c5a:	444c      	add	r4, r9
 80a3c5c:	406b      	eors	r3, r5
 80a3c5e:	ea83 0c0c 	eor.w	ip, r3, ip
 80a3c62:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 80a3c64:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a3c68:	441e      	add	r6, r3
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 80a3c6a:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a3c6e:	ea8c 0e0e 	eor.w	lr, ip, lr
 80a3c72:	ea80 0501 	eor.w	r5, r0, r1
 80a3c76:	eb06 7efe 	add.w	lr, r6, lr, ror #31
 80a3c7a:	4065      	eors	r5, r4
 80a3c7c:	44f2      	add	sl, lr
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 80a3c7e:	eb02 62f4 	add.w	r2, r2, r4, ror #27
 80a3c82:	e001      	b.n	80a3c88 <mbedtls_internal_sha1_process+0xf34>
 80a3c84:	ca62c1d6 	.word	0xca62c1d6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a3c88:	eb0a 0305 	add.w	r3, sl, r5
 80a3c8c:	9d01      	ldr	r5, [sp, #4]
 80a3c8e:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 80a3c92:	60ab      	str	r3, [r5, #8]
    ctx->state[1] += B;
 80a3c94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a3c96:	441a      	add	r2, r3
    ctx->state[2] += C;
 80a3c98:	9b05      	ldr	r3, [sp, #20]

#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
 80a3c9a:	60ea      	str	r2, [r5, #12]
    ctx->state[2] += C;
 80a3c9c:	eb03 04b4 	add.w	r4, r3, r4, ror #2
    ctx->state[3] += D;
 80a3ca0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80a3ca2:	612c      	str	r4, [r5, #16]
    ctx->state[3] += D;
 80a3ca4:	4419      	add	r1, r3
    ctx->state[4] += E;
 80a3ca6:	9b15      	ldr	r3, [sp, #84]	; 0x54
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80a3ca8:	6169      	str	r1, [r5, #20]
    ctx->state[4] += E;
 80a3caa:	4418      	add	r0, r3
 80a3cac:	61a8      	str	r0, [r5, #24]

    return( 0 );
}
 80a3cae:	2000      	movs	r0, #0
 80a3cb0:	b017      	add	sp, #92	; 0x5c
 80a3cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3cb6:	bf00      	nop

080a3cb8 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 80a3cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3cbc:	4604      	mov	r4, r0
 80a3cbe:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 80a3cc0:	4615      	mov	r5, r2
 80a3cc2:	b382      	cbz	r2, 80a3d26 <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80a3cc4:	6803      	ldr	r3, [r0, #0]
 80a3cc6:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a3cca:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80a3ccc:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a3cce:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80a3cd0:	bf82      	ittt	hi
 80a3cd2:	6863      	ldrhi	r3, [r4, #4]
 80a3cd4:	3301      	addhi	r3, #1
 80a3cd6:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 80a3cd8:	b180      	cbz	r0, 80a3cfc <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80a3cda:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80a3cde:	42ba      	cmp	r2, r7
 80a3ce0:	d31b      	bcc.n	80a3d1a <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80a3ce2:	f104 081c 	add.w	r8, r4, #28
 80a3ce6:	463a      	mov	r2, r7
 80a3ce8:	4440      	add	r0, r8
 80a3cea:	f009 fc14 	bl	80ad516 <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80a3cee:	4641      	mov	r1, r8
 80a3cf0:	4620      	mov	r0, r4
 80a3cf2:	f7ff f82f 	bl	80a2d54 <mbedtls_internal_sha1_process>
 80a3cf6:	b9b8      	cbnz	r0, 80a3d28 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
 80a3cf8:	443e      	add	r6, r7
        ilen  -= fill;
 80a3cfa:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 80a3cfc:	462f      	mov	r7, r5
 80a3cfe:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 80a3d00:	2f3f      	cmp	r7, #63	; 0x3f
 80a3d02:	4431      	add	r1, r6
 80a3d04:	d905      	bls.n	80a3d12 <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 80a3d06:	4620      	mov	r0, r4
 80a3d08:	f7ff f824 	bl	80a2d54 <mbedtls_internal_sha1_process>
 80a3d0c:	b960      	cbnz	r0, 80a3d28 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 80a3d0e:	3f40      	subs	r7, #64	; 0x40
 80a3d10:	e7f5      	b.n	80a3cfe <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
 80a3d12:	b147      	cbz	r7, 80a3d26 <mbedtls_sha1_update_ret+0x6e>
 80a3d14:	463d      	mov	r5, r7
 80a3d16:	460e      	mov	r6, r1
 80a3d18:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80a3d1a:	341c      	adds	r4, #28
 80a3d1c:	462a      	mov	r2, r5
 80a3d1e:	4631      	mov	r1, r6
 80a3d20:	4420      	add	r0, r4
 80a3d22:	f009 fbf8 	bl	80ad516 <memcpy>

    return( 0 );
 80a3d26:	2000      	movs	r0, #0
}
 80a3d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3d2c <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 80a3d2c:	b570      	push	{r4, r5, r6, lr}
 80a3d2e:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a3d30:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 80a3d32:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a3d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 80a3d38:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 80a3d3a:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a3d3c:	4423      	add	r3, r4
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 80a3d3e:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a3d40:	771a      	strb	r2, [r3, #28]
 80a3d42:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
 80a3d46:	d804      	bhi.n	80a3d52 <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 80a3d48:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80a3d4c:	2100      	movs	r1, #0
 80a3d4e:	4430      	add	r0, r6
 80a3d50:	e00e      	b.n	80a3d70 <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 80a3d52:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80a3d56:	2100      	movs	r1, #0
 80a3d58:	4430      	add	r0, r6
 80a3d5a:	f009 fc02 	bl	80ad562 <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80a3d5e:	4631      	mov	r1, r6
 80a3d60:	4620      	mov	r0, r4
 80a3d62:	f7fe fff7 	bl	80a2d54 <mbedtls_internal_sha1_process>
 80a3d66:	2800      	cmp	r0, #0
 80a3d68:	d153      	bne.n	80a3e12 <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 80a3d6a:	4601      	mov	r1, r0
 80a3d6c:	4630      	mov	r0, r6
 80a3d6e:	2238      	movs	r2, #56	; 0x38
 80a3d70:	f009 fbf7 	bl	80ad562 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80a3d74:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 80a3d76:	6861      	ldr	r1, [r4, #4]
 80a3d78:	0f5a      	lsrs	r2, r3, #29
 80a3d7a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a3d7e:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80a3d80:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a3d82:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 80a3d86:	0c11      	lsrs	r1, r2, #16
 80a3d88:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 80a3d8c:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 80a3d90:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a3d92:	0e1a      	lsrs	r2, r3, #24
 80a3d94:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80a3d98:	0c1a      	lsrs	r2, r3, #16
 80a3d9a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80a3d9e:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a3da0:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a3da4:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 80a3da8:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80a3dac:	4631      	mov	r1, r6
 80a3dae:	4620      	mov	r0, r4
 80a3db0:	f7fe ffd0 	bl	80a2d54 <mbedtls_internal_sha1_process>
 80a3db4:	2800      	cmp	r0, #0
 80a3db6:	d12c      	bne.n	80a3e12 <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80a3db8:	7ae3      	ldrb	r3, [r4, #11]
 80a3dba:	702b      	strb	r3, [r5, #0]
 80a3dbc:	8963      	ldrh	r3, [r4, #10]
 80a3dbe:	706b      	strb	r3, [r5, #1]
 80a3dc0:	68a3      	ldr	r3, [r4, #8]
 80a3dc2:	0a1b      	lsrs	r3, r3, #8
 80a3dc4:	70ab      	strb	r3, [r5, #2]
 80a3dc6:	68a3      	ldr	r3, [r4, #8]
 80a3dc8:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80a3dca:	7be3      	ldrb	r3, [r4, #15]
 80a3dcc:	712b      	strb	r3, [r5, #4]
 80a3dce:	89e3      	ldrh	r3, [r4, #14]
 80a3dd0:	716b      	strb	r3, [r5, #5]
 80a3dd2:	68e3      	ldr	r3, [r4, #12]
 80a3dd4:	0a1b      	lsrs	r3, r3, #8
 80a3dd6:	71ab      	strb	r3, [r5, #6]
 80a3dd8:	68e3      	ldr	r3, [r4, #12]
 80a3dda:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80a3ddc:	7ce3      	ldrb	r3, [r4, #19]
 80a3dde:	722b      	strb	r3, [r5, #8]
 80a3de0:	8a63      	ldrh	r3, [r4, #18]
 80a3de2:	726b      	strb	r3, [r5, #9]
 80a3de4:	6923      	ldr	r3, [r4, #16]
 80a3de6:	0a1b      	lsrs	r3, r3, #8
 80a3de8:	72ab      	strb	r3, [r5, #10]
 80a3dea:	6923      	ldr	r3, [r4, #16]
 80a3dec:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80a3dee:	7de3      	ldrb	r3, [r4, #23]
 80a3df0:	732b      	strb	r3, [r5, #12]
 80a3df2:	8ae3      	ldrh	r3, [r4, #22]
 80a3df4:	736b      	strb	r3, [r5, #13]
 80a3df6:	6963      	ldr	r3, [r4, #20]
 80a3df8:	0a1b      	lsrs	r3, r3, #8
 80a3dfa:	73ab      	strb	r3, [r5, #14]
 80a3dfc:	6963      	ldr	r3, [r4, #20]
 80a3dfe:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80a3e00:	7ee3      	ldrb	r3, [r4, #27]
 80a3e02:	742b      	strb	r3, [r5, #16]
 80a3e04:	8b63      	ldrh	r3, [r4, #26]
 80a3e06:	746b      	strb	r3, [r5, #17]
 80a3e08:	69a3      	ldr	r3, [r4, #24]
 80a3e0a:	0a1b      	lsrs	r3, r3, #8
 80a3e0c:	74ab      	strb	r3, [r5, #18]
 80a3e0e:	69a3      	ldr	r3, [r4, #24]
 80a3e10:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
 80a3e12:	bd70      	pop	{r4, r5, r6, pc}

080a3e14 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 80a3e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3e16:	b099      	sub	sp, #100	; 0x64
 80a3e18:	4606      	mov	r6, r0
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 80a3e1a:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 80a3e1c:	460f      	mov	r7, r1
 80a3e1e:	4615      	mov	r5, r2
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 80a3e20:	f7fe ff6a 	bl	80a2cf8 <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 80a3e24:	a801      	add	r0, sp, #4
 80a3e26:	f7fe ff7b 	bl	80a2d20 <mbedtls_sha1_starts_ret>
 80a3e2a:	4604      	mov	r4, r0
 80a3e2c:	b958      	cbnz	r0, 80a3e46 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 80a3e2e:	463a      	mov	r2, r7
 80a3e30:	4631      	mov	r1, r6
 80a3e32:	a801      	add	r0, sp, #4
 80a3e34:	f7ff ff40 	bl	80a3cb8 <mbedtls_sha1_update_ret>
 80a3e38:	4604      	mov	r4, r0
 80a3e3a:	b920      	cbnz	r0, 80a3e46 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 80a3e3c:	4629      	mov	r1, r5
 80a3e3e:	a801      	add	r0, sp, #4
 80a3e40:	f7ff ff74 	bl	80a3d2c <mbedtls_sha1_finish_ret>
 80a3e44:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 80a3e46:	a801      	add	r0, sp, #4
 80a3e48:	f7fe ff5a 	bl	80a2d00 <mbedtls_sha1_free>

    return( ret );
}
 80a3e4c:	4620      	mov	r0, r4
 80a3e4e:	b019      	add	sp, #100	; 0x64
 80a3e50:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3e52 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 80a3e52:	b510      	push	{r4, lr}
 80a3e54:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
 80a3e56:	f000 ff0d 	bl	80a4c74 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 80a3e5a:	4620      	mov	r0, r4
}
 80a3e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
 80a3e60:	f008 ba7e 	b.w	80ac360 <free>

080a3e64 <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 80a3e64:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 80a3e66:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80a3e6a:	2001      	movs	r0, #1
 80a3e6c:	f009 fb2e 	bl	80ad4cc <calloc>

    if( ctx != NULL )
 80a3e70:	4604      	mov	r4, r0
 80a3e72:	b108      	cbz	r0, 80a3e78 <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 80a3e74:	f000 fc6c 	bl	80a4750 <mbedtls_gcm_init>

    return( ctx );
}
 80a3e78:	4620      	mov	r0, r4
 80a3e7a:	bd10      	pop	{r4, pc}

080a3e7c <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
 80a3e7c:	4613      	mov	r3, r2
 80a3e7e:	460a      	mov	r2, r1
 80a3e80:	2102      	movs	r1, #2
 80a3e82:	f000 bc6a 	b.w	80a475a <mbedtls_gcm_setkey>

080a3e86 <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 80a3e86:	b510      	push	{r4, lr}
 80a3e88:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 80a3e8a:	f005 fa28 	bl	80a92de <mbedtls_aes_free>
    mbedtls_free( ctx );
 80a3e8e:	4620      	mov	r0, r4
}
 80a3e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 80a3e94:	f008 ba64 	b.w	80ac360 <free>

080a3e98 <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 80a3e98:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 80a3e9a:	f44f 718c 	mov.w	r1, #280	; 0x118
 80a3e9e:	2001      	movs	r0, #1
 80a3ea0:	f009 fb14 	bl	80ad4cc <calloc>

    if( aes == NULL )
 80a3ea4:	4604      	mov	r4, r0
 80a3ea6:	b108      	cbz	r0, 80a3eac <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 80a3ea8:	f005 fa14 	bl	80a92d4 <mbedtls_aes_init>

    return( aes );
}
 80a3eac:	4620      	mov	r0, r4
 80a3eae:	bd10      	pop	{r4, pc}

080a3eb0 <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80a3eb0:	f005 bb1c 	b.w	80a94ec <mbedtls_aes_setkey_dec>

080a3eb4 <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80a3eb4:	f005 ba1e 	b.w	80a92f4 <mbedtls_aes_setkey_enc>

080a3eb8 <_ZL18aes_crypt_cbc_wrapPv19mbedtls_operation_tjPhPKhS1_>:
}

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 80a3eb8:	b410      	push	{r4}
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
}
 80a3eba:	bc10      	pop	{r4}
#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
 80a3ebc:	f005 bf2c 	b.w	80a9d18 <mbedtls_aes_crypt_cbc>

080a3ec0 <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 80a3ec0:	f005 bf1e 	b.w	80a9d00 <mbedtls_aes_crypt_ecb>

080a3ec4 <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 80a3ec4:	2801      	cmp	r0, #1
 80a3ec6:	d002      	beq.n	80a3ece <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
 80a3ec8:	1f83      	subs	r3, r0, #6
 80a3eca:	4258      	negs	r0, r3
 80a3ecc:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 80a3ece:	4770      	bx	lr

080a3ed0 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80a3ed0:	2301      	movs	r3, #1
    items->name = "rsa.N";
 80a3ed2:	4a06      	ldr	r2, [pc, #24]	; (80a3eec <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80a3ed4:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 80a3ed6:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 80a3ed8:	4b05      	ldr	r3, [pc, #20]	; (80a3ef0 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
 80a3eda:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80a3edc:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80a3ee0:	3014      	adds	r0, #20

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80a3ee2:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
 80a3ee4:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80a3ee6:	6148      	str	r0, [r1, #20]
 80a3ee8:	4770      	bx	lr
 80a3eea:	bf00      	nop
 80a3eec:	080ae3fc 	.word	0x080ae3fc
 80a3ef0:	080ae402 	.word	0x080ae402

080a3ef4 <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
 80a3ef4:	b510      	push	{r4, lr}
 80a3ef6:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 80a3ef8:	f7fe fe58 	bl	80a2bac <mbedtls_rsa_free>
    mbedtls_free( ctx );
 80a3efc:	4620      	mov	r0, r4
}
 80a3efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
 80a3f02:	f008 ba2d 	b.w	80ac360 <free>

080a3f06 <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
 80a3f06:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 80a3f08:	21ac      	movs	r1, #172	; 0xac
 80a3f0a:	2001      	movs	r0, #1
 80a3f0c:	f009 fade 	bl	80ad4cc <calloc>

    if( ctx != NULL )
 80a3f10:	4604      	mov	r4, r0
 80a3f12:	b118      	cbz	r0, 80a3f1c <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 80a3f14:	2200      	movs	r2, #0
 80a3f16:	4611      	mov	r1, r2
 80a3f18:	f7fd fe5a 	bl	80a1bd0 <mbedtls_rsa_init>

    return( ctx );
}
 80a3f1c:	4620      	mov	r0, r4
 80a3f1e:	bd10      	pop	{r4, pc}

080a3f20 <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
 80a3f20:	f7fd bebc 	b.w	80a1c9c <mbedtls_rsa_check_pub_priv>

080a3f24 <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
 80a3f24:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 80a3f26:	f7fd fe60 	bl	80a1bea <mbedtls_rsa_get_len>
}
 80a3f2a:	00c0      	lsls	r0, r0, #3
 80a3f2c:	bd08      	pop	{r3, pc}
	...

080a3f30 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a3f30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3f34:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80a3f38:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80a3f3c:	4604      	mov	r4, r0
 80a3f3e:	4688      	mov	r8, r1
 80a3f40:	4617      	mov	r7, r2
 80a3f42:	4699      	mov	r9, r3
 80a3f44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a3f46:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 80a3f48:	f7fd fe4f 	bl	80a1bea <mbedtls_rsa_get_len>

    if( *olen > osize )
 80a3f4c:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 80a3f4e:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
 80a3f52:	d80d      	bhi.n	80a3f70 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 80a3f54:	4632      	mov	r2, r6
 80a3f56:	4629      	mov	r1, r5
 80a3f58:	4620      	mov	r0, r4
 80a3f5a:	2300      	movs	r3, #0
 80a3f5c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80a3f60:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80a3f64:	970a      	str	r7, [sp, #40]	; 0x28
}
 80a3f66:	b001      	add	sp, #4
 80a3f68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 80a3f6c:	f7fe b9b2 	b.w	80a22d4 <mbedtls_rsa_pkcs1_encrypt>
}
 80a3f70:	4801      	ldr	r0, [pc, #4]	; (80a3f78 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 80a3f72:	b001      	add	sp, #4
 80a3f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3f78:	ffffbc00 	.word	0xffffbc00

080a3f7c <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a3f7c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3f80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a3f82:	4693      	mov	fp, r2
 80a3f84:	4604      	mov	r4, r0
 80a3f86:	4688      	mov	r8, r1
 80a3f88:	4699      	mov	r9, r3
 80a3f8a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80a3f8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a3f90:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 80a3f92:	f7fd fe2a 	bl	80a1bea <mbedtls_rsa_get_len>
 80a3f96:	4558      	cmp	r0, fp
 80a3f98:	d10f      	bne.n	80a3fba <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 80a3f9a:	4632      	mov	r2, r6
 80a3f9c:	4629      	mov	r1, r5
 80a3f9e:	4620      	mov	r0, r4
 80a3fa0:	2301      	movs	r3, #1
 80a3fa2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80a3fa6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80a3faa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80a3fae:	970a      	str	r7, [sp, #40]	; 0x28
}
 80a3fb0:	b001      	add	sp, #4
 80a3fb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 80a3fb6:	f7fe bb0f 	b.w	80a25d8 <mbedtls_rsa_pkcs1_decrypt>
}
 80a3fba:	4802      	ldr	r0, [pc, #8]	; (80a3fc4 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 80a3fbc:	b001      	add	sp, #4
 80a3fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3fc2:	bf00      	nop
 80a3fc4:	ffffbf80 	.word	0xffffbf80

080a3fc8 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a3fc8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3fcc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80a3fd0:	460f      	mov	r7, r1
 80a3fd2:	4691      	mov	r9, r2
 80a3fd4:	4698      	mov	r8, r3
 80a3fd6:	4604      	mov	r4, r0
 80a3fd8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80a3fdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a3fde:	9e0d      	ldr	r6, [sp, #52]	; 0x34
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 80a3fe0:	f7fd fe03 	bl	80a1bea <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 80a3fe4:	4632      	mov	r2, r6
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 80a3fe6:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 80a3fea:	4629      	mov	r1, r5
 80a3fec:	4620      	mov	r0, r4
 80a3fee:	2301      	movs	r3, #1
 80a3ff0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80a3ff4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80a3ff8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80a3ffc:	970a      	str	r7, [sp, #40]	; 0x28
}
 80a3ffe:	b001      	add	sp, #4
 80a4000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 80a4004:	f7fe bc38 	b.w	80a2878 <mbedtls_rsa_pkcs1_sign>

080a4008 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 80a4008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a400c:	b085      	sub	sp, #20
 80a400e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a4010:	4606      	mov	r6, r0
 80a4012:	460f      	mov	r7, r1
 80a4014:	4691      	mov	r9, r2
 80a4016:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80a4018:	f7fd fde7 	bl	80a1bea <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 80a401c:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80a401e:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 80a4020:	d810      	bhi.n	80a4044 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 80a4022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a4024:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 80a4028:	9303      	str	r3, [sp, #12]
 80a402a:	2300      	movs	r3, #0
 80a402c:	461a      	mov	r2, r3
 80a402e:	4619      	mov	r1, r3
 80a4030:	4630      	mov	r0, r6
 80a4032:	f7fe fd99 	bl	80a2b68 <mbedtls_rsa_pkcs1_verify>
 80a4036:	b930      	cbnz	r0, 80a4046 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
 80a4038:	f5a0 5064 	sub.w	r0, r0, #14592	; 0x3900
 80a403c:	42a5      	cmp	r5, r4
 80a403e:	bf28      	it	cs
 80a4040:	2000      	movcs	r0, #0
 80a4042:	e000      	b.n	80a4046 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80a4044:	4801      	ldr	r0, [pc, #4]	; (80a404c <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
 80a4046:	b005      	add	sp, #20
 80a4048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a404c:	ffffbc80 	.word	0xffffbc80

080a4050 <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 80a4050:	4b05      	ldr	r3, [pc, #20]	; (80a4068 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
 80a4052:	681a      	ldr	r2, [r3, #0]
 80a4054:	b11a      	cbz	r2, 80a405e <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
 80a4056:	4282      	cmp	r2, r0
 80a4058:	d003      	beq.n	80a4062 <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
 80a405a:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 80a405c:	e7f9      	b.n	80a4052 <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
 80a405e:	4610      	mov	r0, r2
 80a4060:	4770      	bx	lr
 80a4062:	4618      	mov	r0, r3
}
 80a4064:	4770      	bx	lr
 80a4066:	bf00      	nop
 80a4068:	080ae4fc 	.word	0x080ae4fc

080a406c <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 80a406c:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 80a406e:	b530      	push	{r4, r5, lr}
    *res = 0;
 80a4070:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80a4072:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 80a4074:	b189      	cbz	r1, 80a409a <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 80a4076:	6803      	ldr	r3, [r0, #0]
 80a4078:	781b      	ldrb	r3, [r3, #0]
 80a407a:	3b30      	subs	r3, #48	; 0x30
 80a407c:	2b09      	cmp	r3, #9
 80a407e:	d80e      	bhi.n	80a409e <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80a4080:	6813      	ldr	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 80a4082:	3901      	subs	r1, #1
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80a4084:	436b      	muls	r3, r5
 80a4086:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
 80a4088:	6803      	ldr	r3, [r0, #0]
 80a408a:	1c5c      	adds	r4, r3, #1
 80a408c:	6004      	str	r4, [r0, #0]
 80a408e:	781b      	ldrb	r3, [r3, #0]
 80a4090:	6814      	ldr	r4, [r2, #0]
 80a4092:	3b30      	subs	r3, #48	; 0x30
 80a4094:	4423      	add	r3, r4
 80a4096:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 80a4098:	e7ec      	b.n	80a4074 <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 80a409a:	4608      	mov	r0, r1
 80a409c:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 80a409e:	4801      	ldr	r0, [pc, #4]	; (80a40a4 <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
 80a40a0:	bd30      	pop	{r4, r5, pc}
 80a40a2:	bf00      	nop
 80a40a4:	ffffdc00 	.word	0xffffdc00

080a40a8 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80a40a8:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
 80a40aa:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80a40ac:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
 80a40ae:	1aca      	subs	r2, r1, r3
 80a40b0:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80a40b2:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
 80a40b4:	dd17      	ble.n	80a40e6 <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 80a40b6:	781a      	ldrb	r2, [r3, #0]
 80a40b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80a40bc:	2a02      	cmp	r2, #2
 80a40be:	d114      	bne.n	80a40ea <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 80a40c0:	1c5a      	adds	r2, r3, #1
 80a40c2:	6002      	str	r2, [r0, #0]
 80a40c4:	462a      	mov	r2, r5
 80a40c6:	781b      	ldrb	r3, [r3, #0]
 80a40c8:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 80a40cc:	f7fd f982 	bl	80a13d4 <mbedtls_asn1_get_len>
 80a40d0:	b110      	cbz	r0, 80a40d8 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 80a40d2:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 80a40d6:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
 80a40d8:	6823      	ldr	r3, [r4, #0]
 80a40da:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 80a40dc:	6822      	ldr	r2, [r4, #0]
 80a40de:	686b      	ldr	r3, [r5, #4]
 80a40e0:	4413      	add	r3, r2
 80a40e2:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a40e4:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a40e6:	4802      	ldr	r0, [pc, #8]	; (80a40f0 <mbedtls_x509_get_serial+0x48>)
 80a40e8:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a40ea:	4802      	ldr	r0, [pc, #8]	; (80a40f4 <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
 80a40ec:	bd38      	pop	{r3, r4, r5, pc}
 80a40ee:	bf00      	nop
 80a40f0:	ffffdd20 	.word	0xffffdd20
 80a40f4:	ffffdd1e 	.word	0xffffdd1e

080a40f8 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 80a40f8:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 80a40fa:	f7fd fa83 	bl	80a1604 <mbedtls_asn1_get_alg>
 80a40fe:	b108      	cbz	r0, 80a4104 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 80a4100:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
 80a4104:	bd08      	pop	{r3, pc}
	...

080a4108 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 80a4108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a410c:	4604      	mov	r4, r0
 80a410e:	460f      	mov	r7, r1
 80a4110:	4691      	mov	r9, r2
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80a4112:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80a41f4 <mbedtls_x509_get_name+0xec>
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 80a4116:	2331      	movs	r3, #49	; 0x31
 80a4118:	466a      	mov	r2, sp
 80a411a:	4639      	mov	r1, r7
 80a411c:	4620      	mov	r0, r4
 80a411e:	f7fd f9ab 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a4122:	b110      	cbz	r0, 80a412a <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80a4124:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 80a4128:	e05a      	b.n	80a41e0 <mbedtls_x509_get_name+0xd8>

        end_set  = *p + set_len;
 80a412a:	464d      	mov	r5, r9
 80a412c:	6826      	ldr	r6, [r4, #0]
 80a412e:	9b00      	ldr	r3, [sp, #0]
 80a4130:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a4132:	2330      	movs	r3, #48	; 0x30
 80a4134:	aa01      	add	r2, sp, #4
 80a4136:	4631      	mov	r1, r6
 80a4138:	4620      	mov	r0, r4
 80a413a:	f7fd f99d 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a413e:	bb50      	cbnz	r0, 80a4196 <mbedtls_x509_get_name+0x8e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    if( ( end - *p ) < 1 )
 80a4140:	6823      	ldr	r3, [r4, #0]
 80a4142:	1af2      	subs	r2, r6, r3
 80a4144:	2a00      	cmp	r2, #0
 80a4146:	dc01      	bgt.n	80a414c <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a4148:	4827      	ldr	r0, [pc, #156]	; (80a41e8 <mbedtls_x509_get_name+0xe0>)
 80a414a:	e049      	b.n	80a41e0 <mbedtls_x509_get_name+0xd8>

    oid = &cur->oid;
    oid->tag = **p;
 80a414c:	462a      	mov	r2, r5
 80a414e:	781b      	ldrb	r3, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a4150:	4631      	mov	r1, r6
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
    oid->tag = **p;
 80a4152:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a4156:	4620      	mov	r0, r4
 80a4158:	2306      	movs	r3, #6
 80a415a:	f7fd f98d 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a415e:	b9d0      	cbnz	r0, 80a4196 <mbedtls_x509_get_name+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 80a4160:	6823      	ldr	r3, [r4, #0]
    *p += oid->len;
 80a4162:	6869      	ldr	r1, [r5, #4]
    oid->tag = **p;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 80a4164:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
 80a4166:	6820      	ldr	r0, [r4, #0]
 80a4168:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
 80a416a:	1af2      	subs	r2, r6, r3
 80a416c:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
 80a416e:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
 80a4170:	ddea      	ble.n	80a4148 <mbedtls_x509_get_name+0x40>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 80a4172:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80a4174:	2a1e      	cmp	r2, #30
 80a4176:	d81a      	bhi.n	80a41ae <mbedtls_x509_get_name+0xa6>
 80a4178:	fa28 f202 	lsr.w	r2, r8, r2
 80a417c:	07d2      	lsls	r2, r2, #31
 80a417e:	d516      	bpl.n	80a41ae <mbedtls_x509_get_name+0xa6>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 80a4180:	3301      	adds	r3, #1
 80a4182:	6023      	str	r3, [r4, #0]
 80a4184:	5c43      	ldrb	r3, [r0, r1]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 80a4186:	f105 0210 	add.w	r2, r5, #16
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 80a418a:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 80a418c:	4631      	mov	r1, r6
 80a418e:	4620      	mov	r0, r4
 80a4190:	f7fd f920 	bl	80a13d4 <mbedtls_asn1_get_len>
 80a4194:	b118      	cbz	r0, 80a419e <mbedtls_x509_get_name+0x96>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80a4196:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 80a419a:	b150      	cbz	r0, 80a41b2 <mbedtls_x509_get_name+0xaa>
 80a419c:	e020      	b.n	80a41e0 <mbedtls_x509_get_name+0xd8>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
 80a419e:	6823      	ldr	r3, [r4, #0]
 80a41a0:	616b      	str	r3, [r5, #20]
    *p += val->len;
 80a41a2:	6822      	ldr	r2, [r4, #0]
 80a41a4:	692b      	ldr	r3, [r5, #16]
 80a41a6:	4413      	add	r3, r2
 80a41a8:	6023      	str	r3, [r4, #0]

    cur->next = NULL;
 80a41aa:	61a8      	str	r0, [r5, #24]
 80a41ac:	e001      	b.n	80a41b2 <mbedtls_x509_get_name+0xaa>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a41ae:	480f      	ldr	r0, [pc, #60]	; (80a41ec <mbedtls_x509_get_name+0xe4>)
 80a41b0:	e016      	b.n	80a41e0 <mbedtls_x509_get_name+0xd8>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
 80a41b2:	6823      	ldr	r3, [r4, #0]
 80a41b4:	429e      	cmp	r6, r3
 80a41b6:	d008      	beq.n	80a41ca <mbedtls_x509_get_name+0xc2>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 80a41b8:	2001      	movs	r0, #1
 80a41ba:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80a41bc:	2120      	movs	r1, #32
 80a41be:	f009 f985 	bl	80ad4cc <calloc>
 80a41c2:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
 80a41c4:	b158      	cbz	r0, 80a41de <mbedtls_x509_get_name+0xd6>
 80a41c6:	4605      	mov	r5, r0
 80a41c8:	e7b3      	b.n	80a4132 <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 80a41ca:	42b7      	cmp	r7, r6
 80a41cc:	d008      	beq.n	80a41e0 <mbedtls_x509_get_name+0xd8>
            return( 0 );

        cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80a41ce:	2120      	movs	r1, #32
 80a41d0:	2001      	movs	r0, #1
 80a41d2:	f009 f97b 	bl	80ad4cc <calloc>
 80a41d6:	4681      	mov	r9, r0
 80a41d8:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
 80a41da:	2800      	cmp	r0, #0
 80a41dc:	d19b      	bne.n	80a4116 <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80a41de:	4804      	ldr	r0, [pc, #16]	; (80a41f0 <mbedtls_x509_get_name+0xe8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
 80a41e0:	b003      	add	sp, #12
 80a41e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a41e6:	bf00      	nop
 80a41e8:	ffffdc20 	.word	0xffffdc20
 80a41ec:	ffffdc1e 	.word	0xffffdc1e
 80a41f0:	ffffd780 	.word	0xffffd780
 80a41f4:	50581008 	.word	0x50581008

080a41f8 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80a41f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80a41fa:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80a41fc:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80a41fe:	1aca      	subs	r2, r1, r3
 80a4200:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80a4202:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80a4204:	f340 80a1 	ble.w	80a434a <mbedtls_x509_get_time+0x152>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 80a4208:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 80a420a:	2a17      	cmp	r2, #23
 80a420c:	d004      	beq.n	80a4218 <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 80a420e:	2a18      	cmp	r2, #24
 80a4210:	f040 809d 	bne.w	80a434e <mbedtls_x509_get_time+0x156>
        year_len = 4;
 80a4214:	2704      	movs	r7, #4
 80a4216:	e000      	b.n	80a421a <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
 80a4218:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80a421a:	3301      	adds	r3, #1
 80a421c:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 80a421e:	aa01      	add	r2, sp, #4
 80a4220:	4628      	mov	r0, r5
 80a4222:	f7fd f8d7 	bl	80a13d4 <mbedtls_asn1_get_len>

    if( ret != 0 )
 80a4226:	b110      	cbz	r0, 80a422e <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 80a4228:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
 80a422c:	e092      	b.n	80a4354 <mbedtls_x509_get_time+0x15c>

    return x509_parse_time( p, len, year_len, tm );
 80a422e:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 80a4230:	f107 0308 	add.w	r3, r7, #8
 80a4234:	429e      	cmp	r6, r3
 80a4236:	f0c0 808c 	bcc.w	80a4352 <mbedtls_x509_get_time+0x15a>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 80a423a:	4622      	mov	r2, r4
 80a423c:	4639      	mov	r1, r7
 80a423e:	4628      	mov	r0, r5
 80a4240:	f7ff ff14 	bl	80a406c <_ZL14x509_parse_intPPhjPi>
 80a4244:	2800      	cmp	r0, #0
 80a4246:	f040 8085 	bne.w	80a4354 <mbedtls_x509_get_time+0x15c>
    if ( 2 == yearlen )
 80a424a:	2f02      	cmp	r7, #2
 80a424c:	d108      	bne.n	80a4260 <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
 80a424e:	6823      	ldr	r3, [r4, #0]
 80a4250:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 80a4252:	bfdc      	itt	le
 80a4254:	3364      	addle	r3, #100	; 0x64
 80a4256:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
 80a4258:	6823      	ldr	r3, [r4, #0]
 80a425a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a425e:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 80a4260:	1d22      	adds	r2, r4, #4
 80a4262:	2102      	movs	r1, #2
 80a4264:	4628      	mov	r0, r5
 80a4266:	f7ff ff01 	bl	80a406c <_ZL14x509_parse_intPPhjPi>
 80a426a:	2800      	cmp	r0, #0
 80a426c:	d172      	bne.n	80a4354 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 80a426e:	f104 0208 	add.w	r2, r4, #8
 80a4272:	2102      	movs	r1, #2
 80a4274:	4628      	mov	r0, r5
 80a4276:	f7ff fef9 	bl	80a406c <_ZL14x509_parse_intPPhjPi>
 80a427a:	2800      	cmp	r0, #0
 80a427c:	d16a      	bne.n	80a4354 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 80a427e:	f104 020c 	add.w	r2, r4, #12
 80a4282:	2102      	movs	r1, #2
 80a4284:	4628      	mov	r0, r5
 80a4286:	f7ff fef1 	bl	80a406c <_ZL14x509_parse_intPPhjPi>
 80a428a:	2800      	cmp	r0, #0
 80a428c:	d162      	bne.n	80a4354 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 80a428e:	f104 0210 	add.w	r2, r4, #16
 80a4292:	2102      	movs	r1, #2
 80a4294:	4628      	mov	r0, r5
 80a4296:	f7ff fee9 	bl	80a406c <_ZL14x509_parse_intPPhjPi>
 80a429a:	2800      	cmp	r0, #0
 80a429c:	d15a      	bne.n	80a4354 <mbedtls_x509_get_time+0x15c>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
 80a429e:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 80a42a0:	f1a6 0308 	sub.w	r3, r6, #8
 80a42a4:	2b01      	cmp	r3, #1
 80a42a6:	d954      	bls.n	80a4352 <mbedtls_x509_get_time+0x15a>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 80a42a8:	f104 0214 	add.w	r2, r4, #20
 80a42ac:	2102      	movs	r1, #2
 80a42ae:	4628      	mov	r0, r5
 80a42b0:	f7ff fedc 	bl	80a406c <_ZL14x509_parse_intPPhjPi>
 80a42b4:	2800      	cmp	r0, #0
 80a42b6:	d14d      	bne.n	80a4354 <mbedtls_x509_get_time+0x15c>
        len -= 2;
 80a42b8:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 80a42bc:	2b01      	cmp	r3, #1
 80a42be:	d107      	bne.n	80a42d0 <mbedtls_x509_get_time+0xd8>
 80a42c0:	682b      	ldr	r3, [r5, #0]
 80a42c2:	781a      	ldrb	r2, [r3, #0]
 80a42c4:	2a5a      	cmp	r2, #90	; 0x5a
 80a42c6:	d144      	bne.n	80a4352 <mbedtls_x509_get_time+0x15a>
    {
        (*p)++;
 80a42c8:	3301      	adds	r3, #1
 80a42ca:	602b      	str	r3, [r5, #0]
        len--;
 80a42cc:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 80a42d0:	2b00      	cmp	r3, #0
 80a42d2:	d13e      	bne.n	80a4352 <mbedtls_x509_get_time+0x15a>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 80a42d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80a42d8:	6823      	ldr	r3, [r4, #0]
 80a42da:	4293      	cmp	r3, r2
 80a42dc:	d839      	bhi.n	80a4352 <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 23,   t->hour );
 80a42de:	68e2      	ldr	r2, [r4, #12]
 80a42e0:	2a17      	cmp	r2, #23
 80a42e2:	d836      	bhi.n	80a4352 <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->min  );
 80a42e4:	6922      	ldr	r2, [r4, #16]
 80a42e6:	2a3b      	cmp	r2, #59	; 0x3b
 80a42e8:	d833      	bhi.n	80a4352 <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->sec  );
 80a42ea:	6962      	ldr	r2, [r4, #20]
 80a42ec:	2a3b      	cmp	r2, #59	; 0x3b
 80a42ee:	d830      	bhi.n	80a4352 <mbedtls_x509_get_time+0x15a>
 80a42f0:	6861      	ldr	r1, [r4, #4]
 80a42f2:	290c      	cmp	r1, #12
 80a42f4:	d82d      	bhi.n	80a4352 <mbedtls_x509_get_time+0x15a>
 80a42f6:	2201      	movs	r2, #1
 80a42f8:	408a      	lsls	r2, r1
 80a42fa:	f241 51aa 	movw	r1, #5546	; 0x15aa
 80a42fe:	4011      	ands	r1, r2
 80a4300:	b9b9      	cbnz	r1, 80a4332 <mbedtls_x509_get_time+0x13a>
 80a4302:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 80a4306:	d116      	bne.n	80a4336 <mbedtls_x509_get_time+0x13e>
 80a4308:	0751      	lsls	r1, r2, #29
 80a430a:	d522      	bpl.n	80a4352 <mbedtls_x509_get_time+0x15a>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 80a430c:	079a      	lsls	r2, r3, #30
 80a430e:	d105      	bne.n	80a431c <mbedtls_x509_get_time+0x124>
 80a4310:	2164      	movs	r1, #100	; 0x64
 80a4312:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4316:	fb01 3212 	mls	r2, r1, r2, r3
 80a431a:	b972      	cbnz	r2, 80a433a <mbedtls_x509_get_time+0x142>
 80a431c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a4320:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4324:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
 80a4328:	2b00      	cmp	r3, #0
 80a432a:	bf0c      	ite	eq
 80a432c:	231d      	moveq	r3, #29
 80a432e:	231c      	movne	r3, #28
 80a4330:	e004      	b.n	80a433c <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 80a4332:	231f      	movs	r3, #31
 80a4334:	e002      	b.n	80a433c <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
 80a4336:	231e      	movs	r3, #30
 80a4338:	e000      	b.n	80a433c <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
 80a433a:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
 80a433c:	68a2      	ldr	r2, [r4, #8]
 80a433e:	2a00      	cmp	r2, #0
 80a4340:	dd07      	ble.n	80a4352 <mbedtls_x509_get_time+0x15a>
 80a4342:	429a      	cmp	r2, r3
 80a4344:	dc05      	bgt.n	80a4352 <mbedtls_x509_get_time+0x15a>
    if ( 0 != len )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    CHECK( x509_date_is_valid( tm ) );

    return ( 0 );
 80a4346:	2000      	movs	r0, #0
 80a4348:	e004      	b.n	80a4354 <mbedtls_x509_get_time+0x15c>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a434a:	4803      	ldr	r0, [pc, #12]	; (80a4358 <mbedtls_x509_get_time+0x160>)
 80a434c:	e002      	b.n	80a4354 <mbedtls_x509_get_time+0x15c>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a434e:	4803      	ldr	r0, [pc, #12]	; (80a435c <mbedtls_x509_get_time+0x164>)
 80a4350:	e000      	b.n	80a4354 <mbedtls_x509_get_time+0x15c>

        tm->year += 1900;
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 80a4352:	4803      	ldr	r0, [pc, #12]	; (80a4360 <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
 80a4354:	b003      	add	sp, #12
 80a4356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4358:	ffffdba0 	.word	0xffffdba0
 80a435c:	ffffdb9e 	.word	0xffffdb9e
 80a4360:	ffffdc00 	.word	0xffffdc00

080a4364 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80a4364:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80a4366:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80a4368:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80a436a:	1aca      	subs	r2, r1, r3
 80a436c:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80a436e:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80a4370:	dd10      	ble.n	80a4394 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80a4372:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 80a4374:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80a4376:	f7fd f8f5 	bl	80a1564 <mbedtls_asn1_get_bitstring_null>
 80a437a:	b110      	cbz	r0, 80a4382 <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 80a437c:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
 80a4380:	e009      	b.n	80a4396 <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
 80a4382:	9b01      	ldr	r3, [sp, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
 80a4384:	602e      	str	r6, [r5, #0]
    sig->len = len;
 80a4386:	606b      	str	r3, [r5, #4]
    sig->p = *p;
 80a4388:	6822      	ldr	r2, [r4, #0]
 80a438a:	60aa      	str	r2, [r5, #8]

    *p += len;
 80a438c:	6822      	ldr	r2, [r4, #0]
 80a438e:	4413      	add	r3, r2
 80a4390:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a4392:	e000      	b.n	80a4396 <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a4394:	4801      	ldr	r0, [pc, #4]	; (80a439c <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
 80a4396:	b002      	add	sp, #8
 80a4398:	bd70      	pop	{r4, r5, r6, pc}
 80a439a:	bf00      	nop
 80a439c:	ffffdb20 	.word	0xffffdb20

080a43a0 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 80a43a0:	b510      	push	{r4, lr}
 80a43a2:	460c      	mov	r4, r1
 80a43a4:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 80a43a6:	9a02      	ldr	r2, [sp, #8]
 80a43a8:	6812      	ldr	r2, [r2, #0]
 80a43aa:	b982      	cbnz	r2, 80a43ce <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 80a43ac:	461a      	mov	r2, r3
 80a43ae:	f7fe fc65 	bl	80a2c7c <mbedtls_oid_get_sig_alg>
 80a43b2:	b110      	cbz	r0, 80a43ba <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 80a43b4:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 80a43b8:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 80a43ba:	6823      	ldr	r3, [r4, #0]
 80a43bc:	2b05      	cmp	r3, #5
 80a43be:	d000      	beq.n	80a43c2 <mbedtls_x509_get_sig_alg+0x22>
 80a43c0:	b93b      	cbnz	r3, 80a43d2 <mbedtls_x509_get_sig_alg+0x32>
 80a43c2:	6863      	ldr	r3, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
 80a43c4:	4804      	ldr	r0, [pc, #16]	; (80a43d8 <mbedtls_x509_get_sig_alg+0x38>)
 80a43c6:	2b00      	cmp	r3, #0
 80a43c8:	bf08      	it	eq
 80a43ca:	2000      	moveq	r0, #0
 80a43cc:	bd10      	pop	{r4, pc}
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a43ce:	4803      	ldr	r0, [pc, #12]	; (80a43dc <mbedtls_x509_get_sig_alg+0x3c>)
 80a43d0:	bd10      	pop	{r4, pc}
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 80a43d2:	4801      	ldr	r0, [pc, #4]	; (80a43d8 <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
 80a43d4:	bd10      	pop	{r4, pc}
 80a43d6:	bf00      	nop
 80a43d8:	ffffdd00 	.word	0xffffdd00
 80a43dc:	ffffd800 	.word	0xffffd800

080a43e0 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 80a43e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a43e2:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 80a43e4:	6802      	ldr	r2, [r0, #0]
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 80a43e6:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( *p == end )
 80a43e8:	428a      	cmp	r2, r1
 80a43ea:	d01c      	beq.n	80a4426 <mbedtls_x509_get_ext+0x46>
        return( 0 );

    ext->tag = **p;
 80a43ec:	7815      	ldrb	r5, [r2, #0]
 80a43ee:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 80a43f0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    size_t len;

    if( *p == end )
        return( 0 );

    ext->tag = **p;
 80a43f4:	f842 5b04 	str.w	r5, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 80a43f8:	f7fd f83e 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a43fc:	b9b0      	cbnz	r0, 80a442c <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 80a43fe:	6823      	ldr	r3, [r4, #0]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a4400:	aa01      	add	r2, sp, #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 80a4402:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 80a4404:	6825      	ldr	r5, [r4, #0]
 80a4406:	6873      	ldr	r3, [r6, #4]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a4408:	4620      	mov	r0, r4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
    end = *p + ext->len;
 80a440a:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a440c:	4629      	mov	r1, r5
 80a440e:	2330      	movs	r3, #48	; 0x30
 80a4410:	f7fd f832 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a4414:	b110      	cbz	r0, 80a441c <mbedtls_x509_get_ext+0x3c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80a4416:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 80a441a:	e007      	b.n	80a442c <mbedtls_x509_get_ext+0x4c>

    if( end != *p + len )
 80a441c:	6822      	ldr	r2, [r4, #0]
 80a441e:	9b01      	ldr	r3, [sp, #4]
 80a4420:	4413      	add	r3, r2
 80a4422:	429d      	cmp	r5, r3
 80a4424:	d101      	bne.n	80a442a <mbedtls_x509_get_ext+0x4a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80a4426:	2000      	movs	r0, #0
 80a4428:	e000      	b.n	80a442c <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a442a:	4801      	ldr	r0, [pc, #4]	; (80a4430 <mbedtls_x509_get_ext+0x50>)

    return( 0 );
}
 80a442c:	b002      	add	sp, #8
 80a442e:	bd70      	pop	{r4, r5, r6, pc}
 80a4430:	ffffda9a 	.word	0xffffda9a

080a4434 <mbedtls_x509_time_is_past>:
 80a4434:	2000      	movs	r0, #0
 80a4436:	4770      	bx	lr

080a4438 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 80a4438:	2000      	movs	r0, #0
 80a443a:	4770      	bx	lr

080a443c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 80a443c:	b530      	push	{r4, r5, lr}
 80a443e:	4615      	mov	r5, r2
 80a4440:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 80a4442:	2200      	movs	r2, #0
 80a4444:	601a      	str	r2, [r3, #0]
 80a4446:	605a      	str	r2, [r3, #4]
 80a4448:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80a444a:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 80a444c:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80a444e:	f7fd f8d9 	bl	80a1604 <mbedtls_asn1_get_alg>
 80a4452:	b110      	cbz	r0, 80a445a <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 80a4454:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
 80a4458:	e014      	b.n	80a4484 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 80a445a:	4629      	mov	r1, r5
 80a445c:	a801      	add	r0, sp, #4
 80a445e:	f7fe fc1d 	bl	80a2c9c <mbedtls_oid_get_pk_alg>
 80a4462:	b960      	cbnz	r0, 80a447e <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80a4464:	782b      	ldrb	r3, [r5, #0]
 80a4466:	2b01      	cmp	r3, #1
 80a4468:	d10c      	bne.n	80a4484 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80a446a:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80a446c:	2b05      	cmp	r3, #5
 80a446e:	d000      	beq.n	80a4472 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80a4470:	b93b      	cbnz	r3, 80a4482 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
 80a4472:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80a4474:	4804      	ldr	r0, [pc, #16]	; (80a4488 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
 80a4476:	2b00      	cmp	r3, #0
 80a4478:	bf08      	it	eq
 80a447a:	2000      	moveq	r0, #0
 80a447c:	e002      	b.n	80a4484 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80a447e:	4803      	ldr	r0, [pc, #12]	; (80a448c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
 80a4480:	e000      	b.n	80a4484 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80a4482:	4801      	ldr	r0, [pc, #4]	; (80a4488 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
 80a4484:	b005      	add	sp, #20
 80a4486:	bd30      	pop	{r4, r5, pc}
 80a4488:	ffffc580 	.word	0xffffc580
 80a448c:	ffffc380 	.word	0xffffc380

080a4490 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 80a4490:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80a4492:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 80a4494:	b08f      	sub	sp, #60	; 0x3c
 80a4496:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80a4498:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a449c:	aa09      	add	r2, sp, #36	; 0x24
 80a449e:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 80a44a0:	4605      	mov	r5, r0
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a44a2:	f7fc ffe9 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a44a6:	b110      	cbz	r0, 80a44ae <mbedtls_pk_parse_subpubkey+0x1e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80a44a8:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 80a44ac:	e090      	b.n	80a45d0 <mbedtls_pk_parse_subpubkey+0x140>
    }

    end = *p + len;
 80a44ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a44b0:	682e      	ldr	r6, [r5, #0]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 80a44b2:	f10d 0223 	add.w	r2, sp, #35	; 0x23
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = *p + len;
 80a44b6:	441e      	add	r6, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 80a44b8:	4631      	mov	r1, r6
 80a44ba:	ab0b      	add	r3, sp, #44	; 0x2c
 80a44bc:	4628      	mov	r0, r5
 80a44be:	f7ff ffbd 	bl	80a443c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 80a44c2:	2800      	cmp	r0, #0
 80a44c4:	f040 8084 	bne.w	80a45d0 <mbedtls_pk_parse_subpubkey+0x140>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80a44c8:	aa09      	add	r2, sp, #36	; 0x24
 80a44ca:	4631      	mov	r1, r6
 80a44cc:	4628      	mov	r0, r5
 80a44ce:	f7fd f849 	bl	80a1564 <mbedtls_asn1_get_bitstring_null>
 80a44d2:	b110      	cbz	r0, 80a44da <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 80a44d4:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 80a44d8:	e07a      	b.n	80a45d0 <mbedtls_pk_parse_subpubkey+0x140>

    if( *p + len != end )
 80a44da:	682a      	ldr	r2, [r5, #0]
 80a44dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a44de:	4413      	add	r3, r2
 80a44e0:	429e      	cmp	r6, r3
 80a44e2:	d169      	bne.n	80a45b8 <mbedtls_pk_parse_subpubkey+0x128>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 80a44e4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 80a44e8:	f004 fcf0 	bl	80a8ecc <mbedtls_pk_info_from_type>
 80a44ec:	4601      	mov	r1, r0
 80a44ee:	2800      	cmp	r0, #0
 80a44f0:	d064      	beq.n	80a45bc <mbedtls_pk_parse_subpubkey+0x12c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 80a44f2:	4638      	mov	r0, r7
 80a44f4:	f004 fcf2 	bl	80a8edc <mbedtls_pk_setup>
 80a44f8:	4604      	mov	r4, r0
 80a44fa:	2800      	cmp	r0, #0
 80a44fc:	d160      	bne.n	80a45c0 <mbedtls_pk_parse_subpubkey+0x130>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 80a44fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80a4502:	2b01      	cmp	r3, #1
 80a4504:	d162      	bne.n	80a45cc <mbedtls_pk_parse_subpubkey+0x13c>
                             mbedtls_rsa_context *rsa )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a4506:	2330      	movs	r3, #48	; 0x30
 80a4508:	aa0a      	add	r2, sp, #40	; 0x28
 80a450a:	4631      	mov	r1, r6
 80a450c:	4628      	mov	r0, r5
 80a450e:	687c      	ldr	r4, [r7, #4]
 80a4510:	f7fc ffb2 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a4514:	bb28      	cbnz	r0, 80a4562 <mbedtls_pk_parse_subpubkey+0xd2>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
 80a4516:	682a      	ldr	r2, [r5, #0]
 80a4518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a451a:	4413      	add	r3, r2
 80a451c:	429e      	cmp	r6, r3
 80a451e:	d146      	bne.n	80a45ae <mbedtls_pk_parse_subpubkey+0x11e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a4520:	2302      	movs	r3, #2
 80a4522:	aa0a      	add	r2, sp, #40	; 0x28
 80a4524:	4631      	mov	r1, r6
 80a4526:	4628      	mov	r0, r5
 80a4528:	f7fc ffa6 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a452c:	b9c8      	cbnz	r0, 80a4562 <mbedtls_pk_parse_subpubkey+0xd2>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 80a452e:	2300      	movs	r3, #0
 80a4530:	9306      	str	r3, [sp, #24]
 80a4532:	9305      	str	r3, [sp, #20]
 80a4534:	9304      	str	r3, [sp, #16]
 80a4536:	9303      	str	r3, [sp, #12]
 80a4538:	9302      	str	r3, [sp, #8]
 80a453a:	9301      	str	r3, [sp, #4]
 80a453c:	9300      	str	r3, [sp, #0]
 80a453e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a4540:	6829      	ldr	r1, [r5, #0]
 80a4542:	4620      	mov	r0, r4
 80a4544:	f7fd fa5a 	bl	80a19fc <mbedtls_rsa_import_raw>
 80a4548:	2800      	cmp	r0, #0
 80a454a:	d13d      	bne.n	80a45c8 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a454c:	682a      	ldr	r2, [r5, #0]
 80a454e:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a4550:	4631      	mov	r1, r6

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a4552:	4413      	add	r3, r2
 80a4554:	602b      	str	r3, [r5, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a4556:	aa0a      	add	r2, sp, #40	; 0x28
 80a4558:	2302      	movs	r3, #2
 80a455a:	4628      	mov	r0, r5
 80a455c:	f7fc ff8c 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a4560:	b118      	cbz	r0, 80a456a <mbedtls_pk_parse_subpubkey+0xda>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 80a4562:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 80a4566:	b1fc      	cbz	r4, 80a45a8 <mbedtls_pk_parse_subpubkey+0x118>
 80a4568:	e022      	b.n	80a45b0 <mbedtls_pk_parse_subpubkey+0x120>

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 80a456a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a456c:	9004      	str	r0, [sp, #16]
 80a456e:	9306      	str	r3, [sp, #24]
 80a4570:	682b      	ldr	r3, [r5, #0]
 80a4572:	9003      	str	r0, [sp, #12]
 80a4574:	9305      	str	r3, [sp, #20]
 80a4576:	9002      	str	r0, [sp, #8]
 80a4578:	9001      	str	r0, [sp, #4]
 80a457a:	9000      	str	r0, [sp, #0]
 80a457c:	4603      	mov	r3, r0
 80a457e:	4602      	mov	r2, r0
 80a4580:	4601      	mov	r1, r0
 80a4582:	4620      	mov	r0, r4
 80a4584:	f7fd fa3a 	bl	80a19fc <mbedtls_rsa_import_raw>
 80a4588:	b9f0      	cbnz	r0, 80a45c8 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a458a:	682a      	ldr	r2, [r5, #0]
 80a458c:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80a458e:	4620      	mov	r0, r4

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a4590:	4413      	add	r3, r2
 80a4592:	602b      	str	r3, [r5, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80a4594:	f7fd fa70 	bl	80a1a78 <mbedtls_rsa_complete>
 80a4598:	b9b0      	cbnz	r0, 80a45c8 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 80a459a:	4620      	mov	r0, r4
 80a459c:	f7fd fb28 	bl	80a1bf0 <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80a45a0:	b990      	cbnz	r0, 80a45c8 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
 80a45a2:	682b      	ldr	r3, [r5, #0]
 80a45a4:	429e      	cmp	r6, r3
 80a45a6:	d102      	bne.n	80a45ae <mbedtls_pk_parse_subpubkey+0x11e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 80a45a8:	682b      	ldr	r3, [r5, #0]
 80a45aa:	429e      	cmp	r6, r3
 80a45ac:	d00a      	beq.n	80a45c4 <mbedtls_pk_parse_subpubkey+0x134>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
 80a45ae:	4c09      	ldr	r4, [pc, #36]	; (80a45d4 <mbedtls_pk_parse_subpubkey+0x144>)

    if( ret != 0 )
        mbedtls_pk_free( pk );
 80a45b0:	4638      	mov	r0, r7
 80a45b2:	f004 fc79 	bl	80a8ea8 <mbedtls_pk_free>
 80a45b6:	e003      	b.n	80a45c0 <mbedtls_pk_parse_subpubkey+0x130>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a45b8:	4806      	ldr	r0, [pc, #24]	; (80a45d4 <mbedtls_pk_parse_subpubkey+0x144>)
 80a45ba:	e009      	b.n	80a45d0 <mbedtls_pk_parse_subpubkey+0x140>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80a45bc:	4806      	ldr	r0, [pc, #24]	; (80a45d8 <mbedtls_pk_parse_subpubkey+0x148>)
 80a45be:	e007      	b.n	80a45d0 <mbedtls_pk_parse_subpubkey+0x140>
 80a45c0:	4620      	mov	r0, r4
 80a45c2:	e005      	b.n	80a45d0 <mbedtls_pk_parse_subpubkey+0x140>
 80a45c4:	2000      	movs	r0, #0
 80a45c6:	e003      	b.n	80a45d0 <mbedtls_pk_parse_subpubkey+0x140>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 80a45c8:	4c04      	ldr	r4, [pc, #16]	; (80a45dc <mbedtls_pk_parse_subpubkey+0x14c>)
 80a45ca:	e7f1      	b.n	80a45b0 <mbedtls_pk_parse_subpubkey+0x120>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 80a45cc:	4c02      	ldr	r4, [pc, #8]	; (80a45d8 <mbedtls_pk_parse_subpubkey+0x148>)
 80a45ce:	e7ef      	b.n	80a45b0 <mbedtls_pk_parse_subpubkey+0x120>

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 80a45d0:	b00f      	add	sp, #60	; 0x3c
 80a45d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a45d4:	ffffc49a 	.word	0xffffc49a
 80a45d8:	ffffc380 	.word	0xffffc380
 80a45dc:	ffffc500 	.word	0xffffc500

080a45e0 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 80a45e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a45e4:	7bcb      	ldrb	r3, [r1, #15]
 80a45e6:	b093      	sub	sp, #76	; 0x4c
 80a45e8:	f003 030f 	and.w	r3, r3, #15
 80a45ec:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
 80a45f0:	e9d3 6730 	ldrd	r6, r7, [r3, #192]	; 0xc0
    zl = ctx->HL[lo];
 80a45f4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 80a45f8:	f8df c150 	ldr.w	ip, [pc, #336]	; 80a474c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
 80a45fc:	f101 0310 	add.w	r3, r1, #16
 80a4600:	9310      	str	r3, [sp, #64]	; 0x40
    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 80a4602:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a4604:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 80a4608:	9310      	str	r3, [sp, #64]	; 0x40
 80a460a:	f00e 030f 	and.w	r3, lr, #15
 80a460e:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
 80a4610:	9b10      	ldr	r3, [sp, #64]	; 0x40
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
 80a4612:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
 80a4616:	ebc1 0803 	rsb	r8, r1, r3
 80a461a:	f1b8 0f0f 	cmp.w	r8, #15
 80a461e:	d03a      	beq.n	80a4696 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
 80a4620:	0923      	lsrs	r3, r4, #4
 80a4622:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80a4626:	9300      	str	r3, [sp, #0]
 80a4628:	092b      	lsrs	r3, r5, #4
 80a462a:	9301      	str	r3, [sp, #4]
 80a462c:	0733      	lsls	r3, r6, #28
 80a462e:	9309      	str	r3, [sp, #36]	; 0x24
 80a4630:	2300      	movs	r3, #0
 80a4632:	9308      	str	r3, [sp, #32]
 80a4634:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a4636:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a463a:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 80a463e:	0933      	lsrs	r3, r6, #4
 80a4640:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80a4644:	9304      	str	r3, [sp, #16]
 80a4646:	093b      	lsrs	r3, r7, #4
 80a4648:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80a464c:	9305      	str	r3, [sp, #20]
 80a464e:	ea48 080a 	orr.w	r8, r8, sl
 80a4652:	ea49 090b 	orr.w	r9, r9, fp
 80a4656:	e9d5 6730 	ldrd	r6, r7, [r5, #192]	; 0xc0
 80a465a:	46c2      	mov	sl, r8
 80a465c:	46cb      	mov	fp, r9
 80a465e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80a4662:	ea88 0806 	eor.w	r8, r8, r6
 80a4666:	4646      	mov	r6, r8
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 80a4668:	f004 040f 	and.w	r4, r4, #15
            zh ^= ctx->HH[lo];
 80a466c:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 80a4670:	ea89 0907 	eor.w	r9, r9, r7
 80a4674:	0423      	lsls	r3, r4, #16
 80a4676:	930d      	str	r3, [sp, #52]	; 0x34
 80a4678:	2300      	movs	r3, #0
 80a467a:	464f      	mov	r7, r9
 80a467c:	930c      	str	r3, [sp, #48]	; 0x30
 80a467e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80a4682:	4073      	eors	r3, r6
 80a4684:	461e      	mov	r6, r3
 80a4686:	407c      	eors	r4, r7
 80a4688:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
 80a468a:	e9d5 4510 	ldrd	r4, r5, [r5, #64]	; 0x40
 80a468e:	ea84 040a 	eor.w	r4, r4, sl
 80a4692:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 80a4696:	0923      	lsrs	r3, r4, #4
 80a4698:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80a469c:	9302      	str	r3, [sp, #8]
 80a469e:	092b      	lsrs	r3, r5, #4
 80a46a0:	9303      	str	r3, [sp, #12]
 80a46a2:	0733      	lsls	r3, r6, #28
 80a46a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80a46a6:	2300      	movs	r3, #0
 80a46a8:	930a      	str	r3, [sp, #40]	; 0x28
 80a46aa:	0933      	lsrs	r3, r6, #4
 80a46ac:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80a46b0:	9306      	str	r3, [sp, #24]
 80a46b2:	093b      	lsrs	r3, r7, #4
 80a46b4:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80a46b8:	9307      	str	r3, [sp, #28]
 80a46ba:	e9de 6730 	ldrd	r6, r7, [lr, #192]	; 0xc0
 80a46be:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80a46c2:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80a46c6:	ea48 080a 	orr.w	r8, r8, sl
 80a46ca:	ea49 090b 	orr.w	r9, r9, fp
 80a46ce:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80a46d2:	ea8a 0a06 	eor.w	sl, sl, r6
 80a46d6:	4656      	mov	r6, sl
 80a46d8:	ea8b 0b07 	eor.w	fp, fp, r7
 80a46dc:	465f      	mov	r7, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 80a46de:	f004 040f 	and.w	r4, r4, #15
        zh ^= ctx->HH[hi];
 80a46e2:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 80a46e6:	0423      	lsls	r3, r4, #16
 80a46e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80a46ea:	2300      	movs	r3, #0
 80a46ec:	930e      	str	r3, [sp, #56]	; 0x38
 80a46ee:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 80a46f2:	4073      	eors	r3, r6
 80a46f4:	461e      	mov	r6, r3
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 80a46f6:	9b10      	ldr	r3, [sp, #64]	; 0x40

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 80a46f8:	407c      	eors	r4, r7
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 80a46fa:	4299      	cmp	r1, r3

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 80a46fc:	4627      	mov	r7, r4
        zl ^= ctx->HL[hi];
 80a46fe:	e9de 4510 	ldrd	r4, r5, [lr, #64]	; 0x40
 80a4702:	ea84 0408 	eor.w	r4, r4, r8
 80a4706:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 80a470a:	f47f af7a 	bne.w	80a4602 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 80a470e:	0e3b      	lsrs	r3, r7, #24
 80a4710:	7013      	strb	r3, [r2, #0]
 80a4712:	0c3b      	lsrs	r3, r7, #16
 80a4714:	7053      	strb	r3, [r2, #1]
 80a4716:	0a3b      	lsrs	r3, r7, #8
 80a4718:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 80a471a:	0e33      	lsrs	r3, r6, #24
 80a471c:	7113      	strb	r3, [r2, #4]
 80a471e:	0c33      	lsrs	r3, r6, #16
 80a4720:	7153      	strb	r3, [r2, #5]
 80a4722:	0a33      	lsrs	r3, r6, #8
 80a4724:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80a4726:	0e2b      	lsrs	r3, r5, #24
 80a4728:	7213      	strb	r3, [r2, #8]
 80a472a:	0c2b      	lsrs	r3, r5, #16
 80a472c:	7253      	strb	r3, [r2, #9]
 80a472e:	0a2b      	lsrs	r3, r5, #8
 80a4730:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 80a4732:	0e23      	lsrs	r3, r4, #24
 80a4734:	7313      	strb	r3, [r2, #12]
 80a4736:	0c23      	lsrs	r3, r4, #16
 80a4738:	7353      	strb	r3, [r2, #13]
 80a473a:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 80a473c:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 80a473e:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80a4740:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 80a4742:	7393      	strb	r3, [r2, #14]
 80a4744:	73d4      	strb	r4, [r2, #15]
}
 80a4746:	b013      	add	sp, #76	; 0x4c
 80a4748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a474c:	080ae5e0 	.word	0x080ae5e0

080a4750 <mbedtls_gcm_init>:
/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 80a4750:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80a4754:	2100      	movs	r1, #0
 80a4756:	f008 bf04 	b.w	80ad562 <memset>

080a475a <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 80a475a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a475e:	4604      	mov	r4, r0
 80a4760:	b08d      	sub	sp, #52	; 0x34
 80a4762:	4608      	mov	r0, r1
 80a4764:	4691      	mov	r9, r2
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80a4766:	4619      	mov	r1, r3
 80a4768:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 80a476a:	4698      	mov	r8, r3
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80a476c:	f7fc fbbc 	bl	80a0ee8 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 80a4770:	2800      	cmp	r0, #0
 80a4772:	f000 809b 	beq.w	80a48ac <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 80a4776:	6945      	ldr	r5, [r0, #20]
 80a4778:	9002      	str	r0, [sp, #8]
 80a477a:	2d10      	cmp	r5, #16
 80a477c:	f040 8096 	bne.w	80a48ac <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 80a4780:	4620      	mov	r0, r4
 80a4782:	f7fc fbc5 	bl	80a0f10 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 80a4786:	9902      	ldr	r1, [sp, #8]
 80a4788:	4620      	mov	r0, r4
 80a478a:	f7fc fd91 	bl	80a12b0 <mbedtls_cipher_setup>
 80a478e:	2800      	cmp	r0, #0
 80a4790:	f040 808e 	bne.w	80a48b0 <mbedtls_gcm_setkey+0x156>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 80a4794:	2301      	movs	r3, #1
 80a4796:	4642      	mov	r2, r8
 80a4798:	4649      	mov	r1, r9
 80a479a:	4620      	mov	r0, r4
 80a479c:	f7fc fbca 	bl	80a0f34 <mbedtls_cipher_setkey>
 80a47a0:	2800      	cmp	r0, #0
 80a47a2:	f040 8085 	bne.w	80a48b0 <mbedtls_gcm_setkey+0x156>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
 80a47a6:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 80a47a8:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
 80a47aa:	462a      	mov	r2, r5
 80a47ac:	a808      	add	r0, sp, #32
 80a47ae:	f008 fed8 	bl	80ad562 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 80a47b2:	ab07      	add	r3, sp, #28
 80a47b4:	9300      	str	r3, [sp, #0]
 80a47b6:	ab08      	add	r3, sp, #32
 80a47b8:	462a      	mov	r2, r5
 80a47ba:	4619      	mov	r1, r3
 80a47bc:	4620      	mov	r0, r4
 80a47be:	f7fc fc07 	bl	80a0fd0 <mbedtls_cipher_update>
 80a47c2:	2800      	cmp	r0, #0
 80a47c4:	d174      	bne.n	80a48b0 <mbedtls_gcm_setkey+0x156>
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 80a47c6:	4602      	mov	r2, r0
 80a47c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a47ca:	9908      	ldr	r1, [sp, #32]
 80a47cc:	ba1d      	rev	r5, r3
 80a47ce:	432a      	orrs	r2, r5

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 80a47d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 80a47d2:	ba0b      	rev	r3, r1
 80a47d4:	990b      	ldr	r1, [sp, #44]	; 0x2c

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 80a47d6:	fa95 f985 	rev.w	r9, r5
 80a47da:	fa91 fe81 	rev.w	lr, r1
 80a47de:	4649      	mov	r1, r9
 80a47e0:	ea40 000e 	orr.w	r0, r0, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
    ctx->HH[8] = vh;
 80a47e4:	f504 7580 	add.w	r5, r4, #256	; 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 80a47e8:	f04f 0800 	mov.w	r8, #0
 80a47ec:	f04f 0900 	mov.w	r9, #0
    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 80a47f0:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
    ctx->HH[8] = vh;
 80a47f4:	e9c5 2300 	strd	r2, r3, [r5]
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 80a47f8:	e9c4 8930 	strd	r8, r9, [r4, #192]	; 0xc0
    ctx->HL[0] = 0;
 80a47fc:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
 80a4800:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
 80a4804:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 80a4806:	f04f 4c61 	mov.w	ip, #3774873600	; 0xe1000000
 80a480a:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 80a480e:	07d7      	lsls	r7, r2, #31
 80a4810:	0849      	lsrs	r1, r1, #1
 80a4812:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 80a4816:	085b      	lsrs	r3, r3, #1
 80a4818:	ea4f 0232 	mov.w	r2, r2, rrx
 80a481c:	fb0c fb08 	mul.w	fp, ip, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
 80a4820:	2600      	movs	r6, #0
 80a4822:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 80a4826:	4330      	orrs	r0, r6
 80a4828:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 80a482a:	4072      	eors	r2, r6
 80a482c:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 80a4830:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
 80a4834:	e9c8 0110 	strd	r0, r1, [r8, #64]	; 0x40
        ctx->HH[i] = vh;
 80a4838:	e9c8 2330 	strd	r2, r3, [r8, #192]	; 0xc0

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 80a483c:	ea4f 0565 	mov.w	r5, r5, asr #1
 80a4840:	d1e3      	bne.n	80a480a <mbedtls_gcm_setkey+0xb0>
 80a4842:	2003      	movs	r0, #3
 80a4844:	2102      	movs	r1, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 80a4846:	f104 0840 	add.w	r8, r4, #64	; 0x40
 80a484a:	f104 0cc0 	add.w	ip, r4, #192	; 0xc0
 80a484e:	00cb      	lsls	r3, r1, #3
 80a4850:	eb08 0e03 	add.w	lr, r8, r3
 80a4854:	4463      	add	r3, ip
        vh = *HiH;
 80a4856:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a485a:	e9cd 4502 	strd	r4, r5, [sp, #8]
        vl = *HiL;
 80a485e:	e9de 4500 	ldrd	r4, r5, [lr]
 80a4862:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a4866:	4665      	mov	r5, ip
 80a4868:	4644      	mov	r4, r8
        for( j = 1; j < i; j++ )
 80a486a:	2201      	movs	r2, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
 80a486c:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 80a4870:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
 80a4874:	ea89 0906 	eor.w	r9, r9, r6
 80a4878:	ea8a 0a07 	eor.w	sl, sl, r7
 80a487c:	464e      	mov	r6, r9
 80a487e:	4657      	mov	r7, sl
            HiL[j] = vl ^ ctx->HL[j];
 80a4880:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
        {
            HiH[j] = vh ^ ctx->HH[j];
 80a4884:	e9e3 6702 	strd	r6, r7, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
 80a4888:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
 80a488c:	ea89 0906 	eor.w	r9, r9, r6
 80a4890:	ea8a 0a07 	eor.w	sl, sl, r7
 80a4894:	464e      	mov	r6, r9
 80a4896:	4657      	mov	r7, sl
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 80a4898:	3201      	adds	r2, #1
 80a489a:	428a      	cmp	r2, r1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
 80a489c:	e9ee 6702 	strd	r6, r7, [lr, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 80a48a0:	d1e4      	bne.n	80a486c <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
 80a48a2:	3801      	subs	r0, #1
 80a48a4:	ea4f 0142 	mov.w	r1, r2, lsl #1
 80a48a8:	d1d1      	bne.n	80a484e <mbedtls_gcm_setkey+0xf4>
 80a48aa:	e001      	b.n	80a48b0 <mbedtls_gcm_setkey+0x156>
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a48ac:	f06f 0013 	mvn.w	r0, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
 80a48b0:	b00d      	add	sp, #52	; 0x34
 80a48b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a48b6 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80a48b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80a48ba:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80a48be:	b08b      	sub	sp, #44	; 0x2c
 80a48c0:	4604      	mov	r4, r0
 80a48c2:	468b      	mov	fp, r1
 80a48c4:	4690      	mov	r8, r2
 80a48c6:	9e15      	ldr	r6, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80a48c8:	f8cd 9014 	str.w	r9, [sp, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 80a48cc:	461d      	mov	r5, r3
 80a48ce:	2b00      	cmp	r3, #0
 80a48d0:	f000 808d 	beq.w	80a49ee <mbedtls_gcm_starts+0x138>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80a48d4:	f500 77b0 	add.w	r7, r0, #352	; 0x160
 80a48d8:	2210      	movs	r2, #16
 80a48da:	4649      	mov	r1, r9
 80a48dc:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80a48de:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80a48e2:	f008 fe3e 	bl	80ad562 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80a48e6:	4649      	mov	r1, r9
 80a48e8:	2210      	movs	r2, #16
 80a48ea:	4650      	mov	r0, sl
 80a48ec:	f008 fe39 	bl	80ad562 <memset>

    ctx->mode = mode;
 80a48f0:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    ctx->len = 0;
    ctx->add_len = 0;
 80a48f4:	46a3      	mov	fp, r4

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 80a48f6:	2000      	movs	r0, #0
 80a48f8:	2100      	movs	r1, #0
 80a48fa:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    ctx->add_len = 0;

    if( iv_len == 12 )
 80a48fe:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 80a4900:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 80a4904:	e9eb 0152 	strd	r0, r1, [fp, #328]!	; 0x148

    if( iv_len == 12 )
 80a4908:	d10d      	bne.n	80a4926 <mbedtls_gcm_starts+0x70>
    {
        memcpy( ctx->y, iv, iv_len );
 80a490a:	f8d8 3000 	ldr.w	r3, [r8]
 80a490e:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 80a4912:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a4916:	607b      	str	r3, [r7, #4]
 80a4918:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a491c:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
 80a491e:	2301      	movs	r3, #1
 80a4920:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
 80a4924:	e03a      	b.n	80a499c <mbedtls_gcm_starts+0xe6>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 80a4926:	2210      	movs	r2, #16
 80a4928:	4649      	mov	r1, r9
 80a492a:	a806      	add	r0, sp, #24
 80a492c:	f008 fe19 	bl	80ad562 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 80a4930:	00eb      	lsls	r3, r5, #3
 80a4932:	0e1a      	lsrs	r2, r3, #24
 80a4934:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80a4938:	0c1a      	lsrs	r2, r3, #16
 80a493a:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 80a493e:	0a1a      	lsrs	r2, r3, #8
 80a4940:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 80a4944:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 80a4948:	462b      	mov	r3, r5
 80a494a:	f204 195f 	addw	r9, r4, #351	; 0x15f
 80a494e:	4649      	mov	r1, r9
 80a4950:	2d10      	cmp	r5, #16
 80a4952:	bf28      	it	cs
 80a4954:	2310      	movcs	r3, #16
 80a4956:	4642      	mov	r2, r8
 80a4958:	4498      	add	r8, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
 80a495a:	f812 eb01 	ldrb.w	lr, [r2], #1
 80a495e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80a4962:	4542      	cmp	r2, r8
                ctx->y[i] ^= p[i];
 80a4964:	ea8e 0000 	eor.w	r0, lr, r0
 80a4968:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80a496a:	d1f6      	bne.n	80a495a <mbedtls_gcm_starts+0xa4>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
 80a496c:	463a      	mov	r2, r7
 80a496e:	4639      	mov	r1, r7
 80a4970:	4620      	mov	r0, r4
 80a4972:	9303      	str	r3, [sp, #12]
 80a4974:	f7ff fe34 	bl	80a45e0 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
 80a4978:	9b03      	ldr	r3, [sp, #12]
 80a497a:	1aed      	subs	r5, r5, r3
 80a497c:	d1e4      	bne.n	80a4948 <mbedtls_gcm_starts+0x92>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
 80a497e:	ab06      	add	r3, sp, #24
 80a4980:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a4984:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80a4986:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 80a4988:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80a498a:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 80a498c:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80a4990:	d1f5      	bne.n	80a497e <mbedtls_gcm_starts+0xc8>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
 80a4992:	463a      	mov	r2, r7
 80a4994:	4639      	mov	r1, r7
 80a4996:	4620      	mov	r0, r4
 80a4998:	f7ff fe22 	bl	80a45e0 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 80a499c:	ab05      	add	r3, sp, #20
 80a499e:	9300      	str	r3, [sp, #0]
 80a49a0:	2210      	movs	r2, #16
 80a49a2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 80a49a6:	4639      	mov	r1, r7
 80a49a8:	4620      	mov	r0, r4
 80a49aa:	f7fc fb11 	bl	80a0fd0 <mbedtls_cipher_update>
 80a49ae:	bb10      	cbnz	r0, 80a49f6 <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
 80a49b0:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
 80a49b4:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
 80a49b8:	b1e6      	cbz	r6, 80a49f4 <mbedtls_gcm_starts+0x13e>
 80a49ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 80a49bc:	4635      	mov	r5, r6
 80a49be:	4619      	mov	r1, r3
 80a49c0:	2e10      	cmp	r6, #16
 80a49c2:	bf28      	it	cs
 80a49c4:	2510      	movcs	r5, #16
 80a49c6:	4429      	add	r1, r5
 80a49c8:	f204 126f 	addw	r2, r4, #367	; 0x16f
 80a49cc:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
 80a49ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a49d2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80a49d6:	4041      	eors	r1, r0
 80a49d8:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
 80a49da:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a49dc:	4299      	cmp	r1, r3
 80a49de:	d1f6      	bne.n	80a49ce <mbedtls_gcm_starts+0x118>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80a49e0:	4652      	mov	r2, sl
 80a49e2:	4651      	mov	r1, sl
 80a49e4:	4620      	mov	r0, r4
 80a49e6:	f7ff fdfb 	bl	80a45e0 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
 80a49ea:	1b76      	subs	r6, r6, r5
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 80a49ec:	e7e4      	b.n	80a49b8 <mbedtls_gcm_starts+0x102>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a49ee:	f06f 0013 	mvn.w	r0, #19
 80a49f2:	e000      	b.n	80a49f6 <mbedtls_gcm_starts+0x140>

        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
 80a49f4:	4630      	mov	r0, r6
}
 80a49f6:	b00b      	add	sp, #44	; 0x2c
 80a49f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a49fc <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80a49fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4a00:	461f      	mov	r7, r3
 80a4a02:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 80a4a04:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 80a4a06:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80a4a08:	4604      	mov	r4, r0
 80a4a0a:	460e      	mov	r6, r1
 80a4a0c:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 80a4a0e:	9305      	str	r3, [sp, #20]

    if( output > input && (size_t) ( output - input ) < length )
 80a4a10:	d902      	bls.n	80a4a18 <mbedtls_gcm_update+0x1c>
 80a4a12:	1abb      	subs	r3, r7, r2
 80a4a14:	428b      	cmp	r3, r1
 80a4a16:	d35c      	bcc.n	80a4ad2 <mbedtls_gcm_update+0xd6>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 80a4a18:	4625      	mov	r5, r4
 80a4a1a:	e9f5 0150 	ldrd	r0, r1, [r5, #320]!	; 0x140
 80a4a1e:	1982      	adds	r2, r0, r6
 80a4a20:	f141 0300 	adc.w	r3, r1, #0
 80a4a24:	428b      	cmp	r3, r1
 80a4a26:	bf08      	it	eq
 80a4a28:	4282      	cmpeq	r2, r0
 80a4a2a:	d352      	bcc.n	80a4ad2 <mbedtls_gcm_update+0xd6>
 80a4a2c:	210f      	movs	r1, #15
 80a4a2e:	f06f 001f 	mvn.w	r0, #31
 80a4a32:	4299      	cmp	r1, r3
 80a4a34:	bf08      	it	eq
 80a4a36:	4290      	cmpeq	r0, r2
 80a4a38:	d34b      	bcc.n	80a4ad2 <mbedtls_gcm_update+0xd6>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 80a4a3a:	e9c5 2300 	strd	r2, r3, [r5]
 80a4a3e:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 80a4a42:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80a4a44:	f504 73b0 	add.w	r3, r4, #352	; 0x160
 80a4a48:	f10d 0a18 	add.w	sl, sp, #24
 80a4a4c:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 80a4a4e:	2e00      	cmp	r6, #0
 80a4a50:	d042      	beq.n	80a4ad8 <mbedtls_gcm_update+0xdc>
 80a4a52:	f504 75b8 	add.w	r5, r4, #368	; 0x170
    {
        use_len = ( length < 16 ) ? length : 16;
 80a4a56:	462a      	mov	r2, r5
 80a4a58:	46ab      	mov	fp, r5
 80a4a5a:	2e10      	cmp	r6, #16
 80a4a5c:	46b1      	mov	r9, r6
 80a4a5e:	bf28      	it	cs
 80a4a60:	f04f 0910 	movcs.w	r9, #16

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
 80a4a64:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80a4a68:	3301      	adds	r3, #1
 80a4a6a:	b2db      	uxtb	r3, r3
 80a4a6c:	7013      	strb	r3, [r2, #0]
 80a4a6e:	b913      	cbnz	r3, 80a4a76 <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
 80a4a70:	9b02      	ldr	r3, [sp, #8]
 80a4a72:	429a      	cmp	r2, r3
 80a4a74:	d1f6      	bne.n	80a4a64 <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80a4a76:	ab05      	add	r3, sp, #20
 80a4a78:	9300      	str	r3, [sp, #0]
 80a4a7a:	2210      	movs	r2, #16
 80a4a7c:	4653      	mov	r3, sl
 80a4a7e:	9903      	ldr	r1, [sp, #12]
 80a4a80:	4620      	mov	r0, r4
 80a4a82:	f7fc faa5 	bl	80a0fd0 <mbedtls_cipher_update>
 80a4a86:	bb40      	cbnz	r0, 80a4ada <mbedtls_gcm_update+0xde>
 80a4a88:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 80a4a8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80a4a8e:	b91b      	cbnz	r3, 80a4a98 <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
 80a4a90:	7829      	ldrb	r1, [r5, #0]
 80a4a92:	7813      	ldrb	r3, [r2, #0]
 80a4a94:	404b      	eors	r3, r1
 80a4a96:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
 80a4a98:	f812 1b01 	ldrb.w	r1, [r2], #1
 80a4a9c:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80a4aa0:	3501      	adds	r5, #1
 80a4aa2:	404b      	eors	r3, r1
 80a4aa4:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80a4aa6:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 80a4aaa:	3001      	adds	r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80a4aac:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
 80a4aae:	bf02      	ittt	eq
 80a4ab0:	f815 1c01 	ldrbeq.w	r1, [r5, #-1]
 80a4ab4:	404b      	eoreq	r3, r1
 80a4ab6:	f805 3c01 	strbeq.w	r3, [r5, #-1]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 80a4aba:	4581      	cmp	r9, r0
 80a4abc:	d1e5      	bne.n	80a4a8a <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80a4abe:	465a      	mov	r2, fp
 80a4ac0:	4659      	mov	r1, fp
 80a4ac2:	4620      	mov	r0, r4
 80a4ac4:	f7ff fd8c 	bl	80a45e0 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
 80a4ac8:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
 80a4acc:	44c8      	add	r8, r9
        out_p += use_len;
 80a4ace:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 80a4ad0:	e7bd      	b.n	80a4a4e <mbedtls_gcm_update+0x52>
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a4ad2:	f06f 0013 	mvn.w	r0, #19
 80a4ad6:	e000      	b.n	80a4ada <mbedtls_gcm_update+0xde>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 80a4ad8:	4630      	mov	r0, r6
}
 80a4ada:	b00b      	add	sp, #44	; 0x2c
 80a4adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a4ae0 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80a4ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a4ae4:	4688      	mov	r8, r1
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 80a4ae6:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
 80a4aea:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 80a4aee:	00cd      	lsls	r5, r1, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 80a4af0:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
                unsigned char *tag,
                size_t tag_len )
{
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 80a4af4:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 80a4af8:	00dc      	lsls	r4, r3, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 80a4afa:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 80a4afe:	00cf      	lsls	r7, r1, #3
 80a4b00:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 80a4b04:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 80a4b06:	1f13      	subs	r3, r2, #4
 80a4b08:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80a4b0a:	4681      	mov	r9, r0
 80a4b0c:	4692      	mov	sl, r2
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
 80a4b0e:	d85b      	bhi.n	80a4bc8 <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 80a4b10:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 80a4b14:	4640      	mov	r0, r8
 80a4b16:	f008 fcfe 	bl	80ad516 <memcpy>

    if( orig_len || orig_add_len )
 80a4b1a:	ea54 0305 	orrs.w	r3, r4, r5
 80a4b1e:	d104      	bne.n	80a4b2a <mbedtls_gcm_finish+0x4a>
 80a4b20:	ea56 0307 	orrs.w	r3, r6, r7
 80a4b24:	d101      	bne.n	80a4b2a <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 80a4b26:	2000      	movs	r0, #0
 80a4b28:	e050      	b.n	80a4bcc <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
 80a4b2a:	2210      	movs	r2, #16
 80a4b2c:	2100      	movs	r1, #0
 80a4b2e:	4668      	mov	r0, sp
 80a4b30:	f008 fd17 	bl	80ad562 <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80a4b34:	0e3b      	lsrs	r3, r7, #24
 80a4b36:	f88d 3000 	strb.w	r3, [sp]
 80a4b3a:	0c3b      	lsrs	r3, r7, #16
 80a4b3c:	f88d 3001 	strb.w	r3, [sp, #1]
 80a4b40:	0a3b      	lsrs	r3, r7, #8
 80a4b42:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80a4b46:	0e33      	lsrs	r3, r6, #24
 80a4b48:	f88d 3004 	strb.w	r3, [sp, #4]
 80a4b4c:	0c33      	lsrs	r3, r6, #16
 80a4b4e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a4b52:	0a33      	lsrs	r3, r6, #8
 80a4b54:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80a4b58:	0e2b      	lsrs	r3, r5, #24
 80a4b5a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a4b5e:	0c2b      	lsrs	r3, r5, #16
 80a4b60:	f88d 3009 	strb.w	r3, [sp, #9]
 80a4b64:	0a2b      	lsrs	r3, r5, #8
 80a4b66:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 80a4b6a:	0e23      	lsrs	r3, r4, #24
 80a4b6c:	f88d 300c 	strb.w	r3, [sp, #12]
 80a4b70:	0c23      	lsrs	r3, r4, #16
 80a4b72:	f88d 300d 	strb.w	r3, [sp, #13]
 80a4b76:	f88d 400f 	strb.w	r4, [sp, #15]
 80a4b7a:	0a23      	lsrs	r3, r4, #8
 80a4b7c:	f209 146f 	addw	r4, r9, #367	; 0x16f
 80a4b80:	4622      	mov	r2, r4
 80a4b82:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80a4b86:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80a4b8a:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80a4b8e:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a4b92:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 80a4b94:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80a4b98:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a4b9c:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 80a4b9e:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a4ba0:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 80a4ba2:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a4ba4:	d1f6      	bne.n	80a4b94 <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80a4ba6:	f509 72b8 	add.w	r2, r9, #368	; 0x170
 80a4baa:	4611      	mov	r1, r2
 80a4bac:	4648      	mov	r0, r9
 80a4bae:	f7ff fd17 	bl	80a45e0 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
 80a4bb2:	4641      	mov	r1, r8
 80a4bb4:	44c2      	add	sl, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
 80a4bb6:	780a      	ldrb	r2, [r1, #0]
 80a4bb8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80a4bbc:	4053      	eors	r3, r2
 80a4bbe:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
 80a4bc2:	4551      	cmp	r1, sl
 80a4bc4:	d1f7      	bne.n	80a4bb6 <mbedtls_gcm_finish+0xd6>
 80a4bc6:	e7ae      	b.n	80a4b26 <mbedtls_gcm_finish+0x46>
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a4bc8:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
 80a4bcc:	b004      	add	sp, #16
 80a4bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a4bd2 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a4bd2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a4bd6:	4617      	mov	r7, r2
 80a4bd8:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a4bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a4bdc:	4604      	mov	r4, r0
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a4bde:	9301      	str	r3, [sp, #4]
 80a4be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a4be2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a4be6:	9300      	str	r3, [sp, #0]
 80a4be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a4bea:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80a4bee:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80a4bf0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a4bf2:	f7ff fe60 	bl	80a48b6 <mbedtls_gcm_starts>
 80a4bf6:	b970      	cbnz	r0, 80a4c16 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 80a4bf8:	464b      	mov	r3, r9
 80a4bfa:	4642      	mov	r2, r8
 80a4bfc:	4639      	mov	r1, r7
 80a4bfe:	4620      	mov	r0, r4
 80a4c00:	f7ff fefc 	bl	80a49fc <mbedtls_gcm_update>
 80a4c04:	b938      	cbnz	r0, 80a4c16 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80a4c06:	4632      	mov	r2, r6
 80a4c08:	4629      	mov	r1, r5
 80a4c0a:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 80a4c0c:	b003      	add	sp, #12
 80a4c0e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80a4c12:	f7ff bf65 	b.w	80a4ae0 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
 80a4c16:	b003      	add	sp, #12
 80a4c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a4c1c <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80a4c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4c1e:	460e      	mov	r6, r1
 80a4c20:	b08d      	sub	sp, #52	; 0x34
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80a4c22:	9916      	ldr	r1, [sp, #88]	; 0x58
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80a4c24:	9d15      	ldr	r5, [sp, #84]	; 0x54
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80a4c26:	9103      	str	r1, [sp, #12]
 80a4c28:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80a4c2a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80a4c2c:	9102      	str	r1, [sp, #8]
 80a4c2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a4c30:	af08      	add	r7, sp, #32
 80a4c32:	9101      	str	r1, [sp, #4]
 80a4c34:	9300      	str	r3, [sp, #0]
 80a4c36:	9706      	str	r7, [sp, #24]
 80a4c38:	4613      	mov	r3, r2
 80a4c3a:	9505      	str	r5, [sp, #20]
 80a4c3c:	9404      	str	r4, [sp, #16]
 80a4c3e:	4632      	mov	r2, r6
 80a4c40:	2100      	movs	r1, #0
 80a4c42:	f7ff ffc6 	bl	80a4bd2 <mbedtls_gcm_crypt_and_tag>
 80a4c46:	b998      	cbnz	r0, 80a4c70 <mbedtls_gcm_auth_decrypt+0x54>
 80a4c48:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80a4c4a:	42ab      	cmp	r3, r5
 80a4c4c:	d006      	beq.n	80a4c5c <mbedtls_gcm_auth_decrypt+0x40>
        diff |= tag[i] ^ check_tag[i];
 80a4c4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a4c50:	5cd1      	ldrb	r1, [r2, r3]
 80a4c52:	5cfa      	ldrb	r2, [r7, r3]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80a4c54:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 80a4c56:	404a      	eors	r2, r1
 80a4c58:	4310      	orrs	r0, r2
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80a4c5a:	e7f6      	b.n	80a4c4a <mbedtls_gcm_auth_decrypt+0x2e>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 80a4c5c:	b140      	cbz	r0, 80a4c70 <mbedtls_gcm_auth_decrypt+0x54>
 80a4c5e:	4426      	add	r6, r4
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a4c60:	2300      	movs	r3, #0
 80a4c62:	42a6      	cmp	r6, r4
 80a4c64:	d002      	beq.n	80a4c6c <mbedtls_gcm_auth_decrypt+0x50>
 80a4c66:	7023      	strb	r3, [r4, #0]
 80a4c68:	3401      	adds	r4, #1
 80a4c6a:	e7fa      	b.n	80a4c62 <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 80a4c6c:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 80a4c70:	b00d      	add	sp, #52	; 0x34
 80a4c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4c74 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 80a4c74:	b510      	push	{r4, lr}
 80a4c76:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 80a4c78:	f7fc f94a 	bl	80a0f10 <mbedtls_cipher_free>
 80a4c7c:	f504 72c4 	add.w	r2, r4, #392	; 0x188
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a4c80:	2300      	movs	r3, #0
 80a4c82:	4294      	cmp	r4, r2
 80a4c84:	d002      	beq.n	80a4c8c <mbedtls_gcm_free+0x18>
 80a4c86:	7023      	strb	r3, [r4, #0]
 80a4c88:	3401      	adds	r4, #1
 80a4c8a:	e7fa      	b.n	80a4c82 <mbedtls_gcm_free+0xe>
 80a4c8c:	bd10      	pop	{r4, pc}
	...

080a4c90 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 80a4c90:	3804      	subs	r0, #4
 80a4c92:	b2c0      	uxtb	r0, r0
 80a4c94:	2804      	cmp	r0, #4
 80a4c96:	bf9a      	itte	ls
 80a4c98:	4b02      	ldrls	r3, [pc, #8]	; (80a4ca4 <mbedtls_md_info_from_type+0x14>)
 80a4c9a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80a4c9e:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 80a4ca0:	4770      	bx	lr
 80a4ca2:	bf00      	nop
 80a4ca4:	080ae660 	.word	0x080ae660

080a4ca8 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 80a4ca8:	2300      	movs	r3, #0
 80a4caa:	6003      	str	r3, [r0, #0]
 80a4cac:	6043      	str	r3, [r0, #4]
 80a4cae:	6083      	str	r3, [r0, #8]
 80a4cb0:	4770      	bx	lr

080a4cb2 <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 80a4cb2:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 80a4cb4:	4604      	mov	r4, r0
 80a4cb6:	b1e0      	cbz	r0, 80a4cf2 <mbedtls_md_free+0x40>
 80a4cb8:	6803      	ldr	r3, [r0, #0]
 80a4cba:	b1d3      	cbz	r3, 80a4cf2 <mbedtls_md_free+0x40>
        return;

    if( ctx->md_ctx != NULL )
 80a4cbc:	6840      	ldr	r0, [r0, #4]
 80a4cbe:	b108      	cbz	r0, 80a4cc4 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 80a4cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a4cc2:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 80a4cc4:	68a3      	ldr	r3, [r4, #8]
 80a4cc6:	b163      	cbz	r3, 80a4ce2 <mbedtls_md_free+0x30>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 80a4cc8:	6822      	ldr	r2, [r4, #0]
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a4cca:	2100      	movs	r1, #0
 80a4ccc:	68d2      	ldr	r2, [r2, #12]
 80a4cce:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80a4cd2:	429a      	cmp	r2, r3
 80a4cd4:	d002      	beq.n	80a4cdc <mbedtls_md_free+0x2a>
 80a4cd6:	7019      	strb	r1, [r3, #0]
 80a4cd8:	3301      	adds	r3, #1
 80a4cda:	e7fa      	b.n	80a4cd2 <mbedtls_md_free+0x20>
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
 80a4cdc:	68a0      	ldr	r0, [r4, #8]
 80a4cde:	f007 fb3f 	bl	80ac360 <free>
 80a4ce2:	f104 020c 	add.w	r2, r4, #12
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a4ce6:	2300      	movs	r3, #0
 80a4ce8:	4294      	cmp	r4, r2
 80a4cea:	d002      	beq.n	80a4cf2 <mbedtls_md_free+0x40>
 80a4cec:	7023      	strb	r3, [r4, #0]
 80a4cee:	3401      	adds	r4, #1
 80a4cf0:	e7fa      	b.n	80a4ce8 <mbedtls_md_free+0x36>
 80a4cf2:	bd10      	pop	{r4, pc}

080a4cf4 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 80a4cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4cf6:	4605      	mov	r5, r0
 80a4cf8:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 80a4cfa:	460c      	mov	r4, r1
 80a4cfc:	b199      	cbz	r1, 80a4d26 <mbedtls_md_setup+0x32>
 80a4cfe:	b190      	cbz	r0, 80a4d26 <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 80a4d00:	6a0b      	ldr	r3, [r1, #32]
 80a4d02:	4798      	blx	r3
 80a4d04:	4606      	mov	r6, r0
 80a4d06:	6068      	str	r0, [r5, #4]
 80a4d08:	b178      	cbz	r0, 80a4d2a <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 80a4d0a:	b14f      	cbz	r7, 80a4d20 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 80a4d0c:	68e1      	ldr	r1, [r4, #12]
 80a4d0e:	2002      	movs	r0, #2
 80a4d10:	f008 fbdc 	bl	80ad4cc <calloc>
 80a4d14:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 80a4d16:	b918      	cbnz	r0, 80a4d20 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 80a4d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a4d1a:	4630      	mov	r0, r6
 80a4d1c:	4798      	blx	r3
 80a4d1e:	e004      	b.n	80a4d2a <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 80a4d20:	602c      	str	r4, [r5, #0]

    return( 0 );
 80a4d22:	2000      	movs	r0, #0
 80a4d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a4d26:	4802      	ldr	r0, [pc, #8]	; (80a4d30 <mbedtls_md_setup+0x3c>)
 80a4d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 80a4d2a:	4802      	ldr	r0, [pc, #8]	; (80a4d34 <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 80a4d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4d2e:	bf00      	nop
 80a4d30:	ffffaf00 	.word	0xffffaf00
 80a4d34:	ffffae80 	.word	0xffffae80

080a4d38 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80a4d38:	b120      	cbz	r0, 80a4d44 <mbedtls_md_starts+0xc>
 80a4d3a:	6803      	ldr	r3, [r0, #0]
 80a4d3c:	b113      	cbz	r3, 80a4d44 <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 80a4d3e:	691b      	ldr	r3, [r3, #16]
 80a4d40:	6840      	ldr	r0, [r0, #4]
 80a4d42:	4718      	bx	r3
}
 80a4d44:	4800      	ldr	r0, [pc, #0]	; (80a4d48 <mbedtls_md_starts+0x10>)
 80a4d46:	4770      	bx	lr
 80a4d48:	ffffaf00 	.word	0xffffaf00

080a4d4c <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80a4d4c:	b120      	cbz	r0, 80a4d58 <mbedtls_md_update+0xc>
 80a4d4e:	6803      	ldr	r3, [r0, #0]
 80a4d50:	b113      	cbz	r3, 80a4d58 <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80a4d52:	695b      	ldr	r3, [r3, #20]
 80a4d54:	6840      	ldr	r0, [r0, #4]
 80a4d56:	4718      	bx	r3
}
 80a4d58:	4800      	ldr	r0, [pc, #0]	; (80a4d5c <mbedtls_md_update+0x10>)
 80a4d5a:	4770      	bx	lr
 80a4d5c:	ffffaf00 	.word	0xffffaf00

080a4d60 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80a4d60:	b120      	cbz	r0, 80a4d6c <mbedtls_md_finish+0xc>
 80a4d62:	6803      	ldr	r3, [r0, #0]
 80a4d64:	b113      	cbz	r3, 80a4d6c <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 80a4d66:	699b      	ldr	r3, [r3, #24]
 80a4d68:	6840      	ldr	r0, [r0, #4]
 80a4d6a:	4718      	bx	r3
}
 80a4d6c:	4800      	ldr	r0, [pc, #0]	; (80a4d70 <mbedtls_md_finish+0x10>)
 80a4d6e:	4770      	bx	lr
 80a4d70:	ffffaf00 	.word	0xffffaf00

080a4d74 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 80a4d74:	b430      	push	{r4, r5}
 80a4d76:	460d      	mov	r5, r1
 80a4d78:	4611      	mov	r1, r2
    if( md_info == NULL )
 80a4d7a:	b128      	cbz	r0, 80a4d88 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 80a4d7c:	69c4      	ldr	r4, [r0, #28]
 80a4d7e:	461a      	mov	r2, r3
 80a4d80:	4628      	mov	r0, r5
 80a4d82:	4623      	mov	r3, r4
}
 80a4d84:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 80a4d86:	4718      	bx	r3
}
 80a4d88:	4801      	ldr	r0, [pc, #4]	; (80a4d90 <mbedtls_md+0x1c>)
 80a4d8a:	bc30      	pop	{r4, r5}
 80a4d8c:	4770      	bx	lr
 80a4d8e:	bf00      	nop
 80a4d90:	ffffaf00 	.word	0xffffaf00

080a4d94 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 80a4d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4d98:	460d      	mov	r5, r1
 80a4d9a:	b090      	sub	sp, #64	; 0x40
 80a4d9c:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a4d9e:	4604      	mov	r4, r0
 80a4da0:	2800      	cmp	r0, #0
 80a4da2:	d050      	beq.n	80a4e46 <mbedtls_md_hmac_starts+0xb2>
 80a4da4:	6803      	ldr	r3, [r0, #0]
 80a4da6:	2b00      	cmp	r3, #0
 80a4da8:	d04d      	beq.n	80a4e46 <mbedtls_md_hmac_starts+0xb2>
 80a4daa:	6882      	ldr	r2, [r0, #8]
 80a4dac:	2a00      	cmp	r2, #0
 80a4dae:	d04a      	beq.n	80a4e46 <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 80a4db0:	68da      	ldr	r2, [r3, #12]
 80a4db2:	42ba      	cmp	r2, r7
 80a4db4:	d215      	bcs.n	80a4de2 <mbedtls_md_hmac_starts+0x4e>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a4db6:	691b      	ldr	r3, [r3, #16]
 80a4db8:	6840      	ldr	r0, [r0, #4]
 80a4dba:	4798      	blx	r3
 80a4dbc:	2800      	cmp	r0, #0
 80a4dbe:	d139      	bne.n	80a4e34 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 80a4dc0:	6823      	ldr	r3, [r4, #0]
 80a4dc2:	463a      	mov	r2, r7
 80a4dc4:	695b      	ldr	r3, [r3, #20]
 80a4dc6:	4629      	mov	r1, r5
 80a4dc8:	6860      	ldr	r0, [r4, #4]
 80a4dca:	4798      	blx	r3
 80a4dcc:	2800      	cmp	r0, #0
 80a4dce:	d131      	bne.n	80a4e34 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 80a4dd0:	6823      	ldr	r3, [r4, #0]
 80a4dd2:	4669      	mov	r1, sp
 80a4dd4:	699b      	ldr	r3, [r3, #24]
 80a4dd6:	6860      	ldr	r0, [r4, #4]
 80a4dd8:	4798      	blx	r3
 80a4dda:	bb58      	cbnz	r0, 80a4e34 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 80a4ddc:	466d      	mov	r5, sp
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
            goto cleanup;

        keylen = ctx->md_info->size;
 80a4dde:	6823      	ldr	r3, [r4, #0]
 80a4de0:	689f      	ldr	r7, [r3, #8]
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a4de2:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 80a4de4:	68a6      	ldr	r6, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a4de6:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 80a4de8:	2136      	movs	r1, #54	; 0x36
 80a4dea:	4630      	mov	r0, r6
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a4dec:	eb06 0802 	add.w	r8, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
 80a4df0:	f008 fbb7 	bl	80ad562 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 80a4df4:	6823      	ldr	r3, [r4, #0]
 80a4df6:	215c      	movs	r1, #92	; 0x5c
 80a4df8:	68da      	ldr	r2, [r3, #12]
 80a4dfa:	4640      	mov	r0, r8
 80a4dfc:	f008 fbb1 	bl	80ad562 <memset>

    for( i = 0; i < keylen; i++ )
 80a4e00:	2300      	movs	r3, #0
 80a4e02:	429f      	cmp	r7, r3
 80a4e04:	d00b      	beq.n	80a4e1e <mbedtls_md_hmac_starts+0x8a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 80a4e06:	5cf1      	ldrb	r1, [r6, r3]
 80a4e08:	5cea      	ldrb	r2, [r5, r3]
 80a4e0a:	404a      	eors	r2, r1
 80a4e0c:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 80a4e0e:	f818 1003 	ldrb.w	r1, [r8, r3]
 80a4e12:	5cea      	ldrb	r2, [r5, r3]
 80a4e14:	404a      	eors	r2, r1
 80a4e16:	f808 2003 	strb.w	r2, [r8, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 80a4e1a:	3301      	adds	r3, #1
 80a4e1c:	e7f1      	b.n	80a4e02 <mbedtls_md_hmac_starts+0x6e>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a4e1e:	6823      	ldr	r3, [r4, #0]
 80a4e20:	6860      	ldr	r0, [r4, #4]
 80a4e22:	691b      	ldr	r3, [r3, #16]
 80a4e24:	4798      	blx	r3
 80a4e26:	b928      	cbnz	r0, 80a4e34 <mbedtls_md_hmac_starts+0xa0>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 80a4e28:	6823      	ldr	r3, [r4, #0]
 80a4e2a:	4631      	mov	r1, r6
 80a4e2c:	695d      	ldr	r5, [r3, #20]
 80a4e2e:	68da      	ldr	r2, [r3, #12]
 80a4e30:	6860      	ldr	r0, [r4, #4]
 80a4e32:	47a8      	blx	r5
 80a4e34:	2300      	movs	r3, #0
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a4e36:	4619      	mov	r1, r3
 80a4e38:	eb0d 0203 	add.w	r2, sp, r3
 80a4e3c:	3301      	adds	r3, #1
 80a4e3e:	2b41      	cmp	r3, #65	; 0x41
 80a4e40:	d002      	beq.n	80a4e48 <mbedtls_md_hmac_starts+0xb4>
 80a4e42:	7011      	strb	r1, [r2, #0]
 80a4e44:	e7f8      	b.n	80a4e38 <mbedtls_md_hmac_starts+0xa4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a4e46:	4802      	ldr	r0, [pc, #8]	; (80a4e50 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 80a4e48:	b010      	add	sp, #64	; 0x40
 80a4e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4e4e:	bf00      	nop
 80a4e50:	ffffaf00 	.word	0xffffaf00

080a4e54 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 80a4e54:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a4e56:	b138      	cbz	r0, 80a4e68 <mbedtls_md_hmac_update+0x14>
 80a4e58:	6803      	ldr	r3, [r0, #0]
 80a4e5a:	b12b      	cbz	r3, 80a4e68 <mbedtls_md_hmac_update+0x14>
 80a4e5c:	6884      	ldr	r4, [r0, #8]
 80a4e5e:	b11c      	cbz	r4, 80a4e68 <mbedtls_md_hmac_update+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80a4e60:	695b      	ldr	r3, [r3, #20]
 80a4e62:	6840      	ldr	r0, [r0, #4]
}
 80a4e64:	bc10      	pop	{r4}
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80a4e66:	4718      	bx	r3
}
 80a4e68:	4801      	ldr	r0, [pc, #4]	; (80a4e70 <mbedtls_md_hmac_update+0x1c>)
 80a4e6a:	bc10      	pop	{r4}
 80a4e6c:	4770      	bx	lr
 80a4e6e:	bf00      	nop
 80a4e70:	ffffaf00 	.word	0xffffaf00

080a4e74 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 80a4e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4e78:	460d      	mov	r5, r1
 80a4e7a:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a4e7c:	4604      	mov	r4, r0
 80a4e7e:	b318      	cbz	r0, 80a4ec8 <mbedtls_md_hmac_finish+0x54>
 80a4e80:	6803      	ldr	r3, [r0, #0]
 80a4e82:	b30b      	cbz	r3, 80a4ec8 <mbedtls_md_hmac_finish+0x54>
 80a4e84:	6886      	ldr	r6, [r0, #8]
 80a4e86:	b1fe      	cbz	r6, 80a4ec8 <mbedtls_md_hmac_finish+0x54>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a4e88:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 80a4e8a:	4669      	mov	r1, sp
 80a4e8c:	699b      	ldr	r3, [r3, #24]
 80a4e8e:	6840      	ldr	r0, [r0, #4]
 80a4e90:	4798      	blx	r3
 80a4e92:	b9d0      	cbnz	r0, 80a4eca <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a4e94:	6823      	ldr	r3, [r4, #0]
 80a4e96:	6860      	ldr	r0, [r4, #4]
 80a4e98:	691b      	ldr	r3, [r3, #16]
 80a4e9a:	4798      	blx	r3
 80a4e9c:	b9a8      	cbnz	r0, 80a4eca <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 80a4e9e:	6823      	ldr	r3, [r4, #0]
 80a4ea0:	19f1      	adds	r1, r6, r7
 80a4ea2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80a4ea6:	68da      	ldr	r2, [r3, #12]
 80a4ea8:	6860      	ldr	r0, [r4, #4]
 80a4eaa:	47c0      	blx	r8
 80a4eac:	b968      	cbnz	r0, 80a4eca <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 80a4eae:	6823      	ldr	r3, [r4, #0]
 80a4eb0:	4669      	mov	r1, sp
 80a4eb2:	695e      	ldr	r6, [r3, #20]
 80a4eb4:	689a      	ldr	r2, [r3, #8]
 80a4eb6:	6860      	ldr	r0, [r4, #4]
 80a4eb8:	47b0      	blx	r6
 80a4eba:	b930      	cbnz	r0, 80a4eca <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 80a4ebc:	6823      	ldr	r3, [r4, #0]
 80a4ebe:	4629      	mov	r1, r5
 80a4ec0:	699b      	ldr	r3, [r3, #24]
 80a4ec2:	6860      	ldr	r0, [r4, #4]
 80a4ec4:	4798      	blx	r3
 80a4ec6:	e000      	b.n	80a4eca <mbedtls_md_hmac_finish+0x56>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a4ec8:	4801      	ldr	r0, [pc, #4]	; (80a4ed0 <mbedtls_md_hmac_finish+0x5c>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 80a4eca:	b010      	add	sp, #64	; 0x40
 80a4ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4ed0:	ffffaf00 	.word	0xffffaf00

080a4ed4 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 80a4ed4:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a4ed6:	4604      	mov	r4, r0
 80a4ed8:	b180      	cbz	r0, 80a4efc <mbedtls_md_hmac_reset+0x28>
 80a4eda:	6803      	ldr	r3, [r0, #0]
 80a4edc:	b173      	cbz	r3, 80a4efc <mbedtls_md_hmac_reset+0x28>
 80a4ede:	6885      	ldr	r5, [r0, #8]
 80a4ee0:	b165      	cbz	r5, 80a4efc <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a4ee2:	691b      	ldr	r3, [r3, #16]
 80a4ee4:	6840      	ldr	r0, [r0, #4]
 80a4ee6:	4798      	blx	r3
 80a4ee8:	b948      	cbnz	r0, 80a4efe <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 80a4eea:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
 80a4eec:	4629      	mov	r1, r5
 80a4eee:	695e      	ldr	r6, [r3, #20]
 80a4ef0:	68da      	ldr	r2, [r3, #12]
 80a4ef2:	6860      	ldr	r0, [r4, #4]
 80a4ef4:	4633      	mov	r3, r6
}
 80a4ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
 80a4efa:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a4efc:	4800      	ldr	r0, [pc, #0]	; (80a4f00 <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 80a4efe:	bd70      	pop	{r4, r5, r6, pc}
 80a4f00:	ffffaf00 	.word	0xffffaf00

080a4f04 <mbedtls_md_process>:
    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80a4f04:	b120      	cbz	r0, 80a4f10 <mbedtls_md_process+0xc>
 80a4f06:	6803      	ldr	r3, [r0, #0]
 80a4f08:	b113      	cbz	r3, 80a4f10 <mbedtls_md_process+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 80a4f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a4f0c:	6840      	ldr	r0, [r0, #4]
 80a4f0e:	4718      	bx	r3
}
 80a4f10:	4800      	ldr	r0, [pc, #0]	; (80a4f14 <mbedtls_md_process+0x10>)
 80a4f12:	4770      	bx	lr
 80a4f14:	ffffaf00 	.word	0xffffaf00

080a4f18 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 80a4f18:	b100      	cbz	r0, 80a4f1c <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 80a4f1a:	7a00      	ldrb	r0, [r0, #8]
}
 80a4f1c:	4770      	bx	lr

080a4f1e <_ZL15mbedtls_zeroizePvj>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80a4f1e:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a4f20:	2300      	movs	r3, #0
 80a4f22:	4288      	cmp	r0, r1
 80a4f24:	d002      	beq.n	80a4f2c <_ZL15mbedtls_zeroizePvj+0xe>
 80a4f26:	7003      	strb	r3, [r0, #0]
 80a4f28:	3001      	adds	r0, #1
 80a4f2a:	e7fa      	b.n	80a4f22 <_ZL15mbedtls_zeroizePvj+0x4>
 80a4f2c:	4770      	bx	lr

080a4f2e <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 80a4f2e:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80a4f30:	2400      	movs	r4, #0
 80a4f32:	4294      	cmp	r4, r2
 80a4f34:	d00c      	beq.n	80a4f50 <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
 80a4f36:	5d03      	ldrb	r3, [r0, r4]
 80a4f38:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
 80a4f3a:	405d      	eors	r5, r3
 80a4f3c:	d006      	beq.n	80a4f4c <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
 80a4f3e:	2d20      	cmp	r5, #32
 80a4f40:	d108      	bne.n	80a4f54 <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 80a4f42:	f023 0320 	bic.w	r3, r3, #32
 80a4f46:	3b41      	subs	r3, #65	; 0x41
 80a4f48:	2b19      	cmp	r3, #25
 80a4f4a:	d803      	bhi.n	80a4f54 <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80a4f4c:	3401      	adds	r4, #1
 80a4f4e:	e7f0      	b.n	80a4f32 <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
 80a4f50:	2000      	movs	r0, #0
 80a4f52:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
 80a4f54:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return( 0 );
}
 80a4f58:	bd30      	pop	{r4, r5, pc}

080a4f5a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 80a4f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4f5c:	4605      	mov	r5, r0
 80a4f5e:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 80a4f60:	b925      	cbnz	r5, 80a4f6c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
 80a4f62:	1c20      	adds	r0, r4, #0
 80a4f64:	bf18      	it	ne
 80a4f66:	2001      	movne	r0, #1
 80a4f68:	4240      	negs	r0, r0
 80a4f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
 80a4f6c:	2c00      	cmp	r4, #0
 80a4f6e:	d031      	beq.n	80a4fd4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 80a4f70:	682a      	ldr	r2, [r5, #0]
 80a4f72:	6823      	ldr	r3, [r4, #0]
 80a4f74:	429a      	cmp	r2, r3
 80a4f76:	d12d      	bne.n	80a4fd4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
 80a4f78:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 80a4f7a:	6863      	ldr	r3, [r4, #4]
 80a4f7c:	429a      	cmp	r2, r3
 80a4f7e:	d129      	bne.n	80a4fd4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 80a4f80:	68a1      	ldr	r1, [r4, #8]
 80a4f82:	68a8      	ldr	r0, [r5, #8]
 80a4f84:	f008 fab8 	bl	80ad4f8 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
 80a4f88:	bb20      	cbnz	r0, 80a4fd4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 80a4f8a:	68ef      	ldr	r7, [r5, #12]
 80a4f8c:	68e6      	ldr	r6, [r4, #12]
 80a4f8e:	42b7      	cmp	r7, r6
 80a4f90:	d108      	bne.n	80a4fa4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
 80a4f92:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 80a4f94:	6923      	ldr	r3, [r4, #16]
 80a4f96:	429a      	cmp	r2, r3
 80a4f98:	d104      	bne.n	80a4fa4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
 80a4f9a:	6961      	ldr	r1, [r4, #20]
 80a4f9c:	6968      	ldr	r0, [r5, #20]
 80a4f9e:	f008 faab 	bl	80ad4f8 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
 80a4fa2:	b180      	cbz	r0, 80a4fc6 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
 80a4fa4:	2f0c      	cmp	r7, #12
 80a4fa6:	d001      	beq.n	80a4fac <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80a4fa8:	2f13      	cmp	r7, #19
 80a4faa:	d113      	bne.n	80a4fd4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 80a4fac:	2e0c      	cmp	r6, #12
 80a4fae:	d001      	beq.n	80a4fb4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80a4fb0:	2e13      	cmp	r6, #19
 80a4fb2:	d10f      	bne.n	80a4fd4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
 80a4fb4:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80a4fb6:	6923      	ldr	r3, [r4, #16]
 80a4fb8:	429a      	cmp	r2, r3
 80a4fba:	d10b      	bne.n	80a4fd4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 80a4fbc:	6961      	ldr	r1, [r4, #20]
 80a4fbe:	6968      	ldr	r0, [r5, #20]
 80a4fc0:	f7ff ffb5 	bl	80a4f2e <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 80a4fc4:	b930      	cbnz	r0, 80a4fd4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 80a4fc6:	7f2a      	ldrb	r2, [r5, #28]
 80a4fc8:	7f23      	ldrb	r3, [r4, #28]
 80a4fca:	429a      	cmp	r2, r3
 80a4fcc:	d102      	bne.n	80a4fd4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
 80a4fce:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 80a4fd0:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 80a4fd2:	e7c5      	b.n	80a4f60 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
 80a4fd4:	f04f 30ff 	mov.w	r0, #4294967295
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
 80a4fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4fda <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
 80a4fda:	b570      	push	{r4, r5, r6, lr}
 80a4fdc:	460e      	mov	r6, r1
 80a4fde:	4604      	mov	r4, r0
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 80a4fe0:	f008 fadf 	bl	80ad5a2 <strlen>

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 80a4fe4:	6875      	ldr	r5, [r6, #4]
 80a4fe6:	2d02      	cmp	r5, #2
 80a4fe8:	d91e      	bls.n	80a5028 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 80a4fea:	68b6      	ldr	r6, [r6, #8]
 80a4fec:	7833      	ldrb	r3, [r6, #0]
 80a4fee:	2b2a      	cmp	r3, #42	; 0x2a
 80a4ff0:	d11a      	bne.n	80a5028 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 80a4ff2:	7873      	ldrb	r3, [r6, #1]
 80a4ff4:	2b2e      	cmp	r3, #46	; 0x2e
 80a4ff6:	d117      	bne.n	80a5028 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 80a4ff8:	4623      	mov	r3, r4
 80a4ffa:	2200      	movs	r2, #0
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 80a4ffc:	4282      	cmp	r2, r0
 80a4ffe:	d015      	beq.n	80a502c <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
    {
        if( cn[i] == '.' )
 80a5000:	4619      	mov	r1, r3
 80a5002:	780c      	ldrb	r4, [r1, #0]
 80a5004:	3301      	adds	r3, #1
 80a5006:	2c2e      	cmp	r4, #46	; 0x2e
 80a5008:	d001      	beq.n	80a500e <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x34>
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 80a500a:	3201      	adds	r2, #1
 80a500c:	e7f6      	b.n	80a4ffc <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x22>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
 80a500e:	b16a      	cbz	r2, 80a502c <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80a5010:	1a82      	subs	r2, r0, r2
 80a5012:	3d01      	subs	r5, #1
 80a5014:	42aa      	cmp	r2, r5
 80a5016:	d109      	bne.n	80a502c <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 80a5018:	1c70      	adds	r0, r6, #1
 80a501a:	f7ff ff88 	bl	80a4f2e <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80a501e:	3000      	adds	r0, #0
 80a5020:	bf18      	it	ne
 80a5022:	2001      	movne	r0, #1
 80a5024:	4240      	negs	r0, r0
 80a5026:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
 80a5028:	2000      	movs	r0, #0
 80a502a:	bd70      	pop	{r4, r5, r6, pc}
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
 80a502c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a5030:	bd70      	pop	{r4, r5, r6, pc}

080a5032 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80a5032:	b570      	push	{r4, r5, r6, lr}
 80a5034:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
 80a5036:	6802      	ldr	r2, [r0, #0]
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80a5038:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
 80a503a:	428a      	cmp	r2, r1
 80a503c:	d00b      	beq.n	80a5056 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x24>
        return( 0 );

    uid->tag = **p;
 80a503e:	7816      	ldrb	r6, [r2, #0]
 80a5040:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80a5042:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
 80a5046:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80a504a:	f7fc fa15 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a504e:	b120      	cbz	r0, 80a505a <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x28>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a5050:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a5054:	d107      	bne.n	80a5066 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x34>
            return( 0 );
 80a5056:	2000      	movs	r0, #0
 80a5058:	bd70      	pop	{r4, r5, r6, pc}

        return( ret );
    }

    uid->p = *p;
 80a505a:	6823      	ldr	r3, [r4, #0]
 80a505c:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 80a505e:	6822      	ldr	r2, [r4, #0]
 80a5060:	686b      	ldr	r3, [r5, #4]
 80a5062:	4413      	add	r3, r2
 80a5064:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 80a5066:	bd70      	pop	{r4, r5, r6, pc}

080a5068 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>:
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80a5068:	2901      	cmp	r1, #1

/*
 * Check key against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 80a506a:	b510      	push	{r4, lr}
 80a506c:	4604      	mov	r4, r0
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80a506e:	d001      	beq.n	80a5074 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0xc>
 80a5070:	2906      	cmp	r1, #6
 80a5072:	d109      	bne.n	80a5088 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0x20>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 80a5074:	4610      	mov	r0, r2
 80a5076:	f003 ffc7 	bl	80a9008 <mbedtls_pk_get_bitlen>
 80a507a:	6823      	ldr	r3, [r4, #0]
 80a507c:	4298      	cmp	r0, r3
 80a507e:	f04f 30ff 	mov.w	r0, #4294967295
 80a5082:	bf28      	it	cs
 80a5084:	2000      	movcs	r0, #0
 80a5086:	bd10      	pop	{r4, pc}

        return( -1 );
    }
#endif

    return( -1 );
 80a5088:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a508c:	bd10      	pop	{r4, pc}
	...

080a5090 <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 80a5090:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 80a5094:	f013 0304 	ands.w	r3, r3, #4
 80a5098:	d01a      	beq.n	80a50d0 <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 80a509a:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 80a509e:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 80a50a2:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
 80a50a6:	f023 0301 	bic.w	r3, r3, #1
 80a50aa:	f020 0001 	bic.w	r0, r0, #1
 80a50ae:	400b      	ands	r3, r1
 80a50b0:	4298      	cmp	r0, r3
 80a50b2:	d10c      	bne.n	80a50ce <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 80a50b4:	f248 0301 	movw	r3, #32769	; 0x8001
 80a50b8:	f248 0001 	movw	r0, #32769	; 0x8001
 80a50bc:	430a      	orrs	r2, r1
 80a50be:	4013      	ands	r3, r2
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a50c0:	4a04      	ldr	r2, [pc, #16]	; (80a50d4 <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 80a50c2:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a50c4:	4298      	cmp	r0, r3
 80a50c6:	bf14      	ite	ne
 80a50c8:	4613      	movne	r3, r2
 80a50ca:	2300      	moveq	r3, #0
 80a50cc:	e000      	b.n	80a50d0 <mbedtls_x509_crt_check_key_usage+0x40>
 80a50ce:	4b01      	ldr	r3, [pc, #4]	; (80a50d4 <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
 80a50d0:	4618      	mov	r0, r3
 80a50d2:	4770      	bx	lr
 80a50d4:	ffffd800 	.word	0xffffd800

080a50d8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 80a50d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a50dc:	4606      	mov	r6, r0
 80a50de:	460d      	mov	r5, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 80a50e0:	304c      	adds	r0, #76	; 0x4c
 80a50e2:	316c      	adds	r1, #108	; 0x6c
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 80a50e4:	4617      	mov	r7, r2
 80a50e6:	4698      	mov	r8, r3
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 80a50e8:	f7ff ff37 	bl	80a4f5a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 80a50ec:	4604      	mov	r4, r0
 80a50ee:	b9d8      	cbnz	r0, 80a5128 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 80a50f0:	b177      	cbz	r7, 80a5110 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x38>
 80a50f2:	69af      	ldr	r7, [r5, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 80a50f4:	f1b8 0f00 	cmp.w	r8, #0
 80a50f8:	d008      	beq.n	80a510c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
 80a50fa:	6872      	ldr	r2, [r6, #4]
    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 80a50fc:	686b      	ldr	r3, [r5, #4]
 80a50fe:	429a      	cmp	r2, r3
 80a5100:	d104      	bne.n	80a510c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 80a5102:	68a9      	ldr	r1, [r5, #8]
 80a5104:	68b0      	ldr	r0, [r6, #8]
 80a5106:	f008 f9f7 	bl	80ad4f8 <memcmp>
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
        child->raw.len == parent->raw.len &&
 80a510a:	b178      	cbz	r0, 80a512c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 80a510c:	2f02      	cmp	r7, #2
 80a510e:	dd0d      	ble.n	80a512c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
 80a5110:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 80a5114:	b143      	cbz	r3, 80a5128 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 80a5116:	2104      	movs	r1, #4
 80a5118:	4628      	mov	r0, r5
 80a511a:	f7ff ffb9 	bl	80a5090 <mbedtls_x509_crt_check_key_usage>

    if( need_ca_bit && ! parent->ca_istrue )
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
 80a511e:	3000      	adds	r0, #0
 80a5120:	bf18      	it	ne
 80a5122:	2001      	movne	r0, #1
 80a5124:	4244      	negs	r4, r0
 80a5126:	e001      	b.n	80a512c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
        return( -1 );
 80a5128:	f04f 34ff 	mov.w	r4, #4294967295
        return( -1 );
    }
#endif

    return( 0 );
}
 80a512c:	4620      	mov	r0, r4
 80a512e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5132 <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
 80a5132:	b538      	push	{r3, r4, r5, lr}
 80a5134:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 80a5136:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
 80a513a:	b1a4      	cbz	r4, 80a5166 <mbedtls_x509_crt_is_revoked+0x34>
 80a513c:	6922      	ldr	r2, [r4, #16]
 80a513e:	b1a2      	cbz	r2, 80a516a <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
 80a5140:	6a2b      	ldr	r3, [r5, #32]
 80a5142:	429a      	cmp	r2, r3
 80a5144:	d001      	beq.n	80a514a <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
 80a5146:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
 80a5148:	e7f7      	b.n	80a513a <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 80a514a:	6961      	ldr	r1, [r4, #20]
 80a514c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80a514e:	f008 f9d3 	bl	80ad4f8 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
 80a5152:	2800      	cmp	r0, #0
 80a5154:	d1f7      	bne.n	80a5146 <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 80a5156:	f104 0018 	add.w	r0, r4, #24
 80a515a:	f7ff f96b 	bl	80a4434 <mbedtls_x509_time_is_past>
 80a515e:	2800      	cmp	r0, #0
 80a5160:	d0f1      	beq.n	80a5146 <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
 80a5162:	2001      	movs	r0, #1
 80a5164:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
 80a5166:	4620      	mov	r0, r4
 80a5168:	bd38      	pop	{r3, r4, r5, pc}
 80a516a:	4610      	mov	r0, r2
}
 80a516c:	bd38      	pop	{r3, r4, r5, pc}

080a516e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>:
 * Skip validation if no CRL for the given CA is present.
 */
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
                               mbedtls_x509_crl *crl_list,
                               const mbedtls_x509_crt_profile *profile )
{
 80a516e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5172:	b099      	sub	sp, #100	; 0x64
 80a5174:	9005      	str	r0, [sp, #20]
 80a5176:	4614      	mov	r4, r2
 80a5178:	461f      	mov	r7, r3
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
 80a517a:	460e      	mov	r6, r1
 80a517c:	2900      	cmp	r1, #0
 80a517e:	d077      	beq.n	80a5270 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x102>
 80a5180:	2500      	movs	r5, #0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a5182:	f04f 0a01 	mov.w	sl, #1
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
 80a5186:	2c00      	cmp	r4, #0
 80a5188:	d07a      	beq.n	80a5280 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
    {
        if( crl_list->version == 0 ||
 80a518a:	69a3      	ldr	r3, [r4, #24]
 80a518c:	2b00      	cmp	r3, #0
 80a518e:	d06c      	beq.n	80a526a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 80a5190:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
 80a5192:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a5194:	429a      	cmp	r2, r3
 80a5196:	d168      	bne.n	80a526a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 80a5198:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80a519a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a519c:	f008 f9ac 	bl	80ad4f8 <memcmp>
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 80a51a0:	2800      	cmp	r0, #0
 80a51a2:	d162      	bne.n	80a526a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 80a51a4:	2102      	movs	r1, #2
 80a51a6:	4630      	mov	r0, r6
 80a51a8:	f7ff ff72 	bl	80a5090 <mbedtls_x509_crt_check_key_usage>
 80a51ac:	2800      	cmp	r0, #0
 80a51ae:	d143      	bne.n	80a5238 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 80a51b0:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a51b4:	683a      	ldr	r2, [r7, #0]
 80a51b6:	1e43      	subs	r3, r0, #1
 80a51b8:	fa0a f303 	lsl.w	r3, sl, r3
 80a51bc:	4213      	tst	r3, r2
 80a51be:	d059      	beq.n	80a5274 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x106>
 80a51c0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 80a51c4:	2201      	movs	r2, #1
 80a51c6:	3b01      	subs	r3, #1
 80a51c8:	fa02 f303 	lsl.w	r3, r2, r3
 80a51cc:	687a      	ldr	r2, [r7, #4]
 80a51ce:	4213      	tst	r3, r2
 80a51d0:	d053      	beq.n	80a527a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x10c>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 80a51d2:	f7ff fd5d 	bl	80a4c90 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 80a51d6:	f10d 0920 	add.w	r9, sp, #32
 80a51da:	464b      	mov	r3, r9
 80a51dc:	6922      	ldr	r2, [r4, #16]
 80a51de:	6961      	ldr	r1, [r4, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 80a51e0:	4683      	mov	fp, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 80a51e2:	f7ff fdc7 	bl	80a4d74 <mbedtls_md>
 80a51e6:	bb38      	cbnz	r0, 80a5238 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 80a51e8:	f106 08bc 	add.w	r8, r6, #188	; 0xbc
 80a51ec:	4642      	mov	r2, r8
 80a51ee:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 80a51f2:	f107 000c 	add.w	r0, r7, #12
 80a51f6:	f7ff ff37 	bl	80a5068 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80a51fa:	b108      	cbz	r0, 80a5200 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x92>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80a51fc:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80a5200:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 80a5204:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 80a5208:	9304      	str	r3, [sp, #16]
 80a520a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a520e:	4658      	mov	r0, fp
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80a5210:	9107      	str	r1, [sp, #28]
 80a5212:	9306      	str	r3, [sp, #24]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a5214:	f7ff fe80 	bl	80a4f18 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80a5218:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 80a521c:	9b06      	ldr	r3, [sp, #24]
 80a521e:	9203      	str	r2, [sp, #12]
 80a5220:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 80a5224:	9907      	ldr	r1, [sp, #28]
 80a5226:	9202      	str	r2, [sp, #8]
 80a5228:	9001      	str	r0, [sp, #4]
 80a522a:	f8cd 9000 	str.w	r9, [sp]
 80a522e:	4642      	mov	r2, r8
 80a5230:	9804      	ldr	r0, [sp, #16]
 80a5232:	f003 fef1 	bl	80a9018 <mbedtls_pk_verify_ext>
 80a5236:	b110      	cbz	r0, 80a523e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xd0>
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 80a5238:	f045 0510 	orr.w	r5, r5, #16
            break;
 80a523c:	e020      	b.n	80a5280 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 80a523e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80a5242:	f7ff f8f7 	bl	80a4434 <mbedtls_x509_time_is_past>
 80a5246:	b108      	cbz	r0, 80a524c <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xde>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 80a5248:	f045 0520 	orr.w	r5, r5, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 80a524c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80a5250:	f7ff f8f2 	bl	80a4438 <mbedtls_x509_time_is_future>
 80a5254:	b108      	cbz	r0, 80a525a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xec>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 80a5256:	f445 6580 	orr.w	r5, r5, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 80a525a:	4621      	mov	r1, r4
 80a525c:	9805      	ldr	r0, [sp, #20]
 80a525e:	f7ff ff68 	bl	80a5132 <mbedtls_x509_crt_is_revoked>
 80a5262:	b110      	cbz	r0, 80a526a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 80a5264:	f045 0502 	orr.w	r5, r5, #2
            break;
 80a5268:	e00a      	b.n	80a5280 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        crl_list = crl_list->next;
 80a526a:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 80a526e:	e78a      	b.n	80a5186 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x18>
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );
 80a5270:	460d      	mov	r5, r1
 80a5272:	e005      	b.n	80a5280 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 80a5274:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 80a5278:	e7a2      	b.n	80a51c0 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x52>

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 80a527a:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 80a527e:	e7a8      	b.n	80a51d2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x64>

        crl_list = crl_list->next;
    }

    return( flags );
}
 80a5280:	4628      	mov	r0, r5
 80a5282:	b019      	add	sp, #100	; 0x64
 80a5284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a5288 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80a5288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a528c:	4604      	mov	r4, r0
 80a528e:	b09d      	sub	sp, #116	; 0x74
 80a5290:	4699      	mov	r9, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80a5292:	30a4      	adds	r0, #164	; 0xa4
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
    int ret;
    uint32_t ca_flags = 0;
 80a5294:	2300      	movs	r3, #0
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80a5296:	460d      	mov	r5, r1
 80a5298:	9206      	str	r2, [sp, #24]
 80a529a:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 80a529e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80a52a0:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
    int ret;
    uint32_t ca_flags = 0;
 80a52a4:	930b      	str	r3, [sp, #44]	; 0x2c
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80a52a6:	f7ff f8c5 	bl	80a4434 <mbedtls_x509_time_is_past>
 80a52aa:	b118      	cbz	r0, 80a52b4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2c>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 80a52ac:	6833      	ldr	r3, [r6, #0]
 80a52ae:	f043 0301 	orr.w	r3, r3, #1
 80a52b2:	6033      	str	r3, [r6, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 80a52b4:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80a52b8:	f7ff f8be 	bl	80a4438 <mbedtls_x509_time_is_future>
 80a52bc:	b118      	cbz	r0, 80a52c6 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x3e>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 80a52be:	6833      	ldr	r3, [r6, #0]
 80a52c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80a52c4:	6033      	str	r3, [r6, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a52c6:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 80a52ca:	1e5a      	subs	r2, r3, #1
 80a52cc:	2301      	movs	r3, #1
 80a52ce:	4093      	lsls	r3, r2
 80a52d0:	f8d9 2000 	ldr.w	r2, [r9]
 80a52d4:	4213      	tst	r3, r2
 80a52d6:	f000 80c0 	beq.w	80a545a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d2>
 80a52da:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 80a52de:	1e5a      	subs	r2, r3, #1
 80a52e0:	2301      	movs	r3, #1
 80a52e2:	4093      	lsls	r3, r2
 80a52e4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80a52e8:	4213      	tst	r3, r2
 80a52ea:	f000 80bb 	beq.w	80a5464 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a52ee:	6833      	ldr	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a52f0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a52f4:	f043 0308 	orr.w	r3, r3, #8
 80a52f8:	6033      	str	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80a52fa:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 80a52fe:	f7ff fcc7 	bl	80a4c90 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a5302:	465b      	mov	r3, fp
 80a5304:	6922      	ldr	r2, [r4, #16]
 80a5306:	6961      	ldr	r1, [r4, #20]
    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80a5308:	9005      	str	r0, [sp, #20]
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a530a:	f7ff fd33 	bl	80a4d74 <mbedtls_md>
 80a530e:	2800      	cmp	r0, #0
 80a5310:	d16d      	bne.n	80a53ee <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
 80a5312:	4607      	mov	r7, r0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80a5314:	f8cd b01c 	str.w	fp, [sp, #28]
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 80a5318:	b915      	cbnz	r5, 80a5320 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x98>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 80a531a:	2f00      	cmp	r7, #0
 80a531c:	d14c      	bne.n	80a53b8 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x130>
 80a531e:	e066      	b.n	80a53ee <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 80a5320:	fab8 f388 	clz	r3, r8
 80a5324:	2201      	movs	r2, #1
 80a5326:	095b      	lsrs	r3, r3, #5
 80a5328:	4629      	mov	r1, r5
 80a532a:	4620      	mov	r0, r4
 80a532c:	f7ff fed4 	bl	80a50d8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80a5330:	2800      	cmp	r0, #0
 80a5332:	d13e      	bne.n	80a53b2 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 80a5334:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80a5336:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
            continue;

        check_path_cnt = path_cnt + 1;
 80a5338:	f108 0b01 	add.w	fp, r8, #1

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 80a533c:	429a      	cmp	r2, r3
 80a533e:	d106      	bne.n	80a534e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xc6>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 80a5340:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80a5342:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80a5344:	f008 f8d8 	bl	80ad4f8 <memcmp>
                    child->subject_raw.len ) == 0 )
        {
            check_path_cnt--;
 80a5348:	2800      	cmp	r0, #0
 80a534a:	bf08      	it	eq
 80a534c:	46c3      	moveq	fp, r8
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
 80a534e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80a5352:	2b00      	cmp	r3, #0
 80a5354:	dd04      	ble.n	80a5360 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xd8>
 80a5356:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80a5358:	ebc2 0b0b 	rsb	fp, r2, fp
 80a535c:	455b      	cmp	r3, fp
 80a535e:	db28      	blt.n	80a53b2 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80a5360:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 80a5364:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a5368:	9805      	ldr	r0, [sp, #20]
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80a536a:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 80a536e:	9109      	str	r1, [sp, #36]	; 0x24
 80a5370:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a5372:	f7ff fdd1 	bl	80a4f18 <mbedtls_md_get_size>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80a5376:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80a537a:	9b07      	ldr	r3, [sp, #28]
 80a537c:	9203      	str	r2, [sp, #12]
 80a537e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80a5382:	9001      	str	r0, [sp, #4]
 80a5384:	9202      	str	r2, [sp, #8]
 80a5386:	9300      	str	r3, [sp, #0]
 80a5388:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
 80a538c:	9b08      	ldr	r3, [sp, #32]
 80a538e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a5390:	4658      	mov	r0, fp
 80a5392:	f003 fe41 	bl	80a9018 <mbedtls_pk_verify_ext>
 80a5396:	b960      	cbnz	r0, 80a53b2 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 80a5398:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 80a539c:	f7ff f84a 	bl	80a4434 <mbedtls_x509_time_is_past>
 80a53a0:	b920      	cbnz	r0, 80a53ac <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x124>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 80a53a2:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 80a53a6:	f7ff f847 	bl	80a4438 <mbedtls_x509_time_is_future>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 80a53aa:	b130      	cbz	r0, 80a53ba <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
        {
            if ( future_past_ca == NULL )
 80a53ac:	2f00      	cmp	r7, #0
 80a53ae:	bf08      	it	eq
 80a53b0:	462f      	moveq	r7, r5
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 80a53b2:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 80a53b6:	e7af      	b.n	80a5318 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x90>
 80a53b8:	463d      	mov	r5, r7
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a53ba:	6833      	ldr	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 80a53bc:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a53c0:	f023 0308 	bic.w	r3, r3, #8
 80a53c4:	6033      	str	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 80a53c6:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 80a53ca:	f109 000c 	add.w	r0, r9, #12
 80a53ce:	f7ff fe4b 	bl	80a5068 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80a53d2:	b118      	cbz	r0, 80a53dc <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x154>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80a53d4:	6833      	ldr	r3, [r6, #0]
 80a53d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80a53da:	6033      	str	r3, [r6, #0]
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 80a53dc:	6c62      	ldr	r2, [r4, #68]	; 0x44
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
 80a53de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80a53e0:	429a      	cmp	r2, r3
 80a53e2:	d10d      	bne.n	80a5400 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 80a53e4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80a53e6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80a53e8:	f008 f886 	bl	80ad4f8 <memcmp>
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 80a53ec:	b940      	cbnz	r0, 80a5400 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 80a53ee:	f1ba 0f00 	cmp.w	sl, #0
 80a53f2:	d12a      	bne.n	80a544a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1c2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 80a53f4:	6832      	ldr	r2, [r6, #0]
 80a53f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 80a53f8:	2000      	movs	r0, #0
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 80a53fa:	4313      	orrs	r3, r2
 80a53fc:	6033      	str	r3, [r6, #0]

    return( 0 );
 80a53fe:	e036      	b.n	80a546e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
                  child->subject_raw.len ) != 0 ) )
    {
#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the chain's top crt */
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 80a5400:	464b      	mov	r3, r9
 80a5402:	9a06      	ldr	r2, [sp, #24]
 80a5404:	4629      	mov	r1, r5
 80a5406:	4620      	mov	r0, r4
 80a5408:	f7ff feb1 	bl	80a516e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 80a540c:	6833      	ldr	r3, [r6, #0]
 80a540e:	4318      	orrs	r0, r3
 80a5410:	6030      	str	r0, [r6, #0]
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 80a5412:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 80a5416:	f7ff f80d 	bl	80a4434 <mbedtls_x509_time_is_past>
 80a541a:	b118      	cbz	r0, 80a5424 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x19c>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 80a541c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a541e:	f043 0301 	orr.w	r3, r3, #1
 80a5422:	930b      	str	r3, [sp, #44]	; 0x2c

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 80a5424:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 80a5428:	f7ff f806 	bl	80a4438 <mbedtls_x509_time_is_future>
 80a542c:	b118      	cbz	r0, 80a5436 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1ae>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 80a542e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a5430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80a5434:	930b      	str	r3, [sp, #44]	; 0x2c

        if( NULL != f_vrfy )
 80a5436:	f1ba 0f00 	cmp.w	sl, #0
 80a543a:	d0db      	beq.n	80a53f4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 80a543c:	ab0b      	add	r3, sp, #44	; 0x2c
 80a543e:	f108 0201 	add.w	r2, r8, #1
 80a5442:	4629      	mov	r1, r5
 80a5444:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80a5446:	47d0      	blx	sl
 80a5448:	b988      	cbnz	r0, 80a546e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 80a544a:	4633      	mov	r3, r6
 80a544c:	4642      	mov	r2, r8
 80a544e:	4621      	mov	r1, r4
 80a5450:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80a5452:	47d0      	blx	sl
 80a5454:	2800      	cmp	r0, #0
 80a5456:	d0cd      	beq.n	80a53f4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
 80a5458:	e009      	b.n	80a546e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 80a545a:	6833      	ldr	r3, [r6, #0]
 80a545c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80a5460:	6033      	str	r3, [r6, #0]
 80a5462:	e73a      	b.n	80a52da <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80a5464:	6833      	ldr	r3, [r6, #0]
 80a5466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80a546a:	6033      	str	r3, [r6, #0]
 80a546c:	e73f      	b.n	80a52ee <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x66>
    }

    *flags |= ca_flags;

    return( 0 );
}
 80a546e:	b01d      	add	sp, #116	; 0x74
 80a5470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a5474 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80a5474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5478:	b09d      	sub	sp, #116	; 0x74
 80a547a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80a547c:	469a      	mov	sl, r3
    int ret;
    uint32_t parent_flags = 0;
 80a547e:	2300      	movs	r3, #0
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80a5480:	4605      	mov	r5, r0
 80a5482:	460f      	mov	r7, r1
 80a5484:	9206      	str	r2, [sp, #24]
 80a5486:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 80a548a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    uint32_t parent_flags = 0;
 80a548c:	930b      	str	r3, [sp, #44]	; 0x2c
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 80a548e:	b146      	cbz	r6, 80a54a2 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2e>
 80a5490:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 80a5494:	304c      	adds	r0, #76	; 0x4c
 80a5496:	f7ff fd60 	bl	80a4f5a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 80a549a:	2800      	cmp	r0, #0
 80a549c:	d07a      	beq.n	80a5594 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x120>
        self_cnt++;

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 80a549e:	2e07      	cmp	r6, #7
 80a54a0:	dc76      	bgt.n	80a5590 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x11c>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80a54a2:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 80a54a6:	f7fe ffc5 	bl	80a4434 <mbedtls_x509_time_is_past>
 80a54aa:	b118      	cbz	r0, 80a54b4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x40>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 80a54ac:	6823      	ldr	r3, [r4, #0]
 80a54ae:	f043 0301 	orr.w	r3, r3, #1
 80a54b2:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 80a54b4:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 80a54b8:	f7fe ffbe 	bl	80a4438 <mbedtls_x509_time_is_future>
 80a54bc:	b118      	cbz	r0, 80a54c6 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 80a54be:	6823      	ldr	r3, [r4, #0]
 80a54c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80a54c4:	6023      	str	r3, [r4, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a54c6:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 80a54ca:	1e5a      	subs	r2, r3, #1
 80a54cc:	2301      	movs	r3, #1
 80a54ce:	4093      	lsls	r3, r2
 80a54d0:	f8d8 2000 	ldr.w	r2, [r8]
 80a54d4:	4213      	tst	r3, r2
 80a54d6:	d061      	beq.n	80a559c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x128>
 80a54d8:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 80a54dc:	1e5a      	subs	r2, r3, #1
 80a54de:	2301      	movs	r3, #1
 80a54e0:	4093      	lsls	r3, r2
 80a54e2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80a54e6:	4213      	tst	r3, r2
 80a54e8:	d05d      	beq.n	80a55a6 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80a54ea:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
 80a54ee:	f7ff fbcf 	bl	80a4c90 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a54f2:	ab0c      	add	r3, sp, #48	; 0x30
 80a54f4:	692a      	ldr	r2, [r5, #16]
 80a54f6:	6969      	ldr	r1, [r5, #20]
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80a54f8:	4683      	mov	fp, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a54fa:	f7ff fc3b 	bl	80a4d74 <mbedtls_md>
 80a54fe:	bb48      	cbnz	r0, 80a5554 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe0>
        /* Note: this can't happen except after an internal error */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
    }
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 80a5500:	f107 09bc 	add.w	r9, r7, #188	; 0xbc
 80a5504:	464a      	mov	r2, r9
 80a5506:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 80a550a:	f108 000c 	add.w	r0, r8, #12
 80a550e:	f7ff fdab 	bl	80a5068 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80a5512:	b118      	cbz	r0, 80a551c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xa8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80a5514:	6823      	ldr	r3, [r4, #0]
 80a5516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80a551a:	6023      	str	r3, [r4, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80a551c:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 80a5520:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 80a5524:	9307      	str	r3, [sp, #28]
 80a5526:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a552a:	4658      	mov	r0, fp
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80a552c:	9109      	str	r1, [sp, #36]	; 0x24
 80a552e:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a5530:	f7ff fcf2 	bl	80a4f18 <mbedtls_md_get_size>
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80a5534:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 80a5538:	9b08      	ldr	r3, [sp, #32]
 80a553a:	9203      	str	r2, [sp, #12]
 80a553c:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 80a5540:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a5542:	9202      	str	r2, [sp, #8]
 80a5544:	aa0c      	add	r2, sp, #48	; 0x30
 80a5546:	9001      	str	r0, [sp, #4]
 80a5548:	9200      	str	r2, [sp, #0]
 80a554a:	9807      	ldr	r0, [sp, #28]
 80a554c:	464a      	mov	r2, r9
 80a554e:	f003 fd63 	bl	80a9018 <mbedtls_pk_verify_ext>
 80a5552:	b118      	cbz	r0, 80a555c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe8>
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a5554:	6823      	ldr	r3, [r4, #0]
 80a5556:	f043 0308 	orr.w	r3, r3, #8
 80a555a:	6023      	str	r3, [r4, #0]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 80a555c:	4643      	mov	r3, r8
 80a555e:	4652      	mov	r2, sl
 80a5560:	4639      	mov	r1, r7
 80a5562:	4628      	mov	r0, r5
 80a5564:	f7ff fe03 	bl	80a516e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 80a5568:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 80a556a:	f8dd 9018 	ldr.w	r9, [sp, #24]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 80a556e:	4318      	orrs	r0, r3
 80a5570:	6020      	str	r0, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
         grandparent != NULL;
 80a5572:	f1b9 0f00 	cmp.w	r9, #0
 80a5576:	d029      	beq.n	80a55cc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x158>
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
 80a5578:	fab6 f386 	clz	r3, r6
 80a557c:	2200      	movs	r2, #0
 80a557e:	095b      	lsrs	r3, r3, #5
 80a5580:	4649      	mov	r1, r9
 80a5582:	4638      	mov	r0, r7
 80a5584:	f7ff fda8 	bl	80a50d8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80a5588:	b190      	cbz	r0, 80a55b0 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x13c>
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 80a558a:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 80a558e:	e7f0      	b.n	80a5572 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xfe>

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 80a5590:	4838      	ldr	r0, [pc, #224]	; (80a5674 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x200>)
 80a5592:	e06b      	b.n	80a566c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        self_cnt++;
 80a5594:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80a5596:	3301      	adds	r3, #1
 80a5598:	9328      	str	r3, [sp, #160]	; 0xa0
 80a559a:	e780      	b.n	80a549e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2a>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 80a559c:	6823      	ldr	r3, [r4, #0]
 80a559e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80a55a2:	6023      	str	r3, [r4, #0]
 80a55a4:	e798      	b.n	80a54d8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x64>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80a55a6:	6823      	ldr	r3, [r4, #0]
 80a55a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80a55ac:	6023      	str	r3, [r4, #0]
 80a55ae:	e79c      	b.n	80a54ea <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x76>
    }

    if( grandparent != NULL )
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
                                path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
 80a55b0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80a55b2:	4652      	mov	r2, sl
 80a55b4:	9304      	str	r3, [sp, #16]
 80a55b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80a55b8:	4649      	mov	r1, r9
 80a55ba:	9303      	str	r3, [sp, #12]
 80a55bc:	ab0b      	add	r3, sp, #44	; 0x2c
 80a55be:	9302      	str	r3, [sp, #8]
 80a55c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80a55c2:	9301      	str	r3, [sp, #4]
 80a55c4:	1c73      	adds	r3, r6, #1
 80a55c6:	9300      	str	r3, [sp, #0]
 80a55c8:	4643      	mov	r3, r8
 80a55ca:	e03b      	b.n	80a5644 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d0>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 80a55cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80a55ce:	f106 0b02 	add.w	fp, r6, #2
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 80a55d2:	f8d7 9130 	ldr.w	r9, [r7, #304]	; 0x130
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 80a55d6:	ebc3 0b0b 	rsb	fp, r3, fp
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
             grandparent != NULL;
 80a55da:	f1b9 0f00 	cmp.w	r9, #0
 80a55de:	d024      	beq.n	80a562a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1b6>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 80a55e0:	f8d9 3100 	ldr.w	r3, [r9, #256]	; 0x100
 80a55e4:	2b00      	cmp	r3, #0
 80a55e6:	dd01      	ble.n	80a55ec <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
 80a55e8:	455b      	cmp	r3, fp
 80a55ea:	db08      	blt.n	80a55fe <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x18a>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 80a55ec:	fab6 f386 	clz	r3, r6
 80a55f0:	2200      	movs	r2, #0
 80a55f2:	095b      	lsrs	r3, r3, #5
 80a55f4:	4649      	mov	r1, r9
 80a55f6:	4638      	mov	r0, r7
 80a55f8:	f7ff fd6e 	bl	80a50d8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80a55fc:	b110      	cbz	r0, 80a5604 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x190>
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 80a55fe:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 80a5602:	e7ea      	b.n	80a55da <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
                                         profile, path_cnt + 1, self_cnt, &parent_flags,
                                         f_vrfy, p_vrfy );
 80a5604:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80a5606:	f8cd 8000 	str.w	r8, [sp]
 80a560a:	9305      	str	r3, [sp, #20]
 80a560c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80a560e:	9a06      	ldr	r2, [sp, #24]
 80a5610:	9304      	str	r3, [sp, #16]
 80a5612:	ab0b      	add	r3, sp, #44	; 0x2c
 80a5614:	9303      	str	r3, [sp, #12]
 80a5616:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80a5618:	4649      	mov	r1, r9
 80a561a:	9302      	str	r3, [sp, #8]
 80a561c:	1c73      	adds	r3, r6, #1
 80a561e:	9301      	str	r3, [sp, #4]
 80a5620:	4638      	mov	r0, r7
 80a5622:	4653      	mov	r3, sl
 80a5624:	f7ff ff26 	bl	80a5474 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 80a5628:	e00f      	b.n	80a564a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d6>
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
 80a562a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80a562c:	4652      	mov	r2, sl
 80a562e:	9304      	str	r3, [sp, #16]
 80a5630:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80a5632:	9906      	ldr	r1, [sp, #24]
 80a5634:	9303      	str	r3, [sp, #12]
 80a5636:	ab0b      	add	r3, sp, #44	; 0x2c
 80a5638:	9302      	str	r3, [sp, #8]
 80a563a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80a563c:	9301      	str	r3, [sp, #4]
 80a563e:	1c73      	adds	r3, r6, #1
 80a5640:	9300      	str	r3, [sp, #0]
 80a5642:	4643      	mov	r3, r8
 80a5644:	4638      	mov	r0, r7
 80a5646:	f7ff fe1f 	bl	80a5288 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
            if( ret != 0 )
 80a564a:	b978      	cbnz	r0, 80a566c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
                return( ret );
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
 80a564c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80a564e:	b92b      	cbnz	r3, 80a565c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e8>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 80a5650:	6822      	ldr	r2, [r4, #0]
 80a5652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 80a5654:	2000      	movs	r0, #0
    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 80a5656:	4313      	orrs	r3, r2
 80a5658:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a565a:	e007      	b.n	80a566c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 80a565c:	4629      	mov	r1, r5
 80a565e:	4623      	mov	r3, r4
 80a5660:	4632      	mov	r2, r6
 80a5662:	982b      	ldr	r0, [sp, #172]	; 0xac
 80a5664:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80a5666:	47a8      	blx	r5
 80a5668:	2800      	cmp	r0, #0
 80a566a:	d0f1      	beq.n	80a5650 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
            return( ret );

    *flags |= parent_flags;

    return( 0 );
}
 80a566c:	b01d      	add	sp, #116	; 0x74
 80a566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5672:	bf00      	nop
 80a5674:	ffffd000 	.word	0xffffd000

080a5678 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80a5678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a567c:	b089      	sub	sp, #36	; 0x24
 80a567e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80a5680:	4693      	mov	fp, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 80a5682:	2200      	movs	r2, #0
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80a5684:	4605      	mov	r5, r0
 80a5686:	468a      	mov	sl, r1
 80a5688:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 80a568c:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
 80a568e:	461f      	mov	r7, r3
 80a5690:	2b00      	cmp	r3, #0
 80a5692:	d06e      	beq.n	80a5772 <mbedtls_x509_crt_verify_with_profile+0xfa>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 80a5694:	f1b8 0f00 	cmp.w	r8, #0
 80a5698:	d048      	beq.n	80a572c <mbedtls_x509_crt_verify_with_profile+0xb4>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 80a569a:	4640      	mov	r0, r8
 80a569c:	f007 ff81 	bl	80ad5a2 <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80a56a0:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    }

    if( cn != NULL )
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 80a56a4:	4681      	mov	r9, r0

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80a56a6:	069b      	lsls	r3, r3, #26
 80a56a8:	d50d      	bpl.n	80a56c6 <mbedtls_x509_crt_verify_with_profile+0x4e>
        {
            cur = &crt->subject_alt_names;
 80a56aa:	f105 06e8 	add.w	r6, r5, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 80a56ae:	6873      	ldr	r3, [r6, #4]
 80a56b0:	4599      	cmp	r9, r3
 80a56b2:	d12c      	bne.n	80a570e <mbedtls_x509_crt_verify_with_profile+0x96>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 80a56b4:	464a      	mov	r2, r9
 80a56b6:	68b1      	ldr	r1, [r6, #8]
 80a56b8:	4640      	mov	r0, r8
 80a56ba:	9307      	str	r3, [sp, #28]
 80a56bc:	f7ff fc37 	bl	80a4f2e <_ZL15x509_memcasecmpPKvS0_j>
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 80a56c0:	9b07      	ldr	r3, [sp, #28]
 80a56c2:	bb20      	cbnz	r0, 80a570e <mbedtls_x509_crt_verify_with_profile+0x96>
 80a56c4:	e032      	b.n	80a572c <mbedtls_x509_crt_verify_with_profile+0xb4>
        goto exit;
    }

    if( cn != NULL )
    {
        name = &crt->subject;
 80a56c6:	f105 066c 	add.w	r6, r5, #108	; 0x6c
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 80a56ca:	6872      	ldr	r2, [r6, #4]
 80a56cc:	2a03      	cmp	r2, #3
 80a56ce:	d118      	bne.n	80a5702 <mbedtls_x509_crt_verify_with_profile+0x8a>
 80a56d0:	68b1      	ldr	r1, [r6, #8]
 80a56d2:	4855      	ldr	r0, [pc, #340]	; (80a5828 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 80a56d4:	f007 ff10 	bl	80ad4f8 <memcmp>
 80a56d8:	b998      	cbnz	r0, 80a5702 <mbedtls_x509_crt_verify_with_profile+0x8a>
                {
                    if( name->val.len == cn_len &&
 80a56da:	6933      	ldr	r3, [r6, #16]
 80a56dc:	4599      	cmp	r9, r3
 80a56de:	d107      	bne.n	80a56f0 <mbedtls_x509_crt_verify_with_profile+0x78>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 80a56e0:	464a      	mov	r2, r9
 80a56e2:	4641      	mov	r1, r8
 80a56e4:	6970      	ldr	r0, [r6, #20]
 80a56e6:	9307      	str	r3, [sp, #28]
 80a56e8:	f7ff fc21 	bl	80a4f2e <_ZL15x509_memcasecmpPKvS0_j>
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
                {
                    if( name->val.len == cn_len &&
 80a56ec:	9b07      	ldr	r3, [sp, #28]
 80a56ee:	b1e8      	cbz	r0, 80a572c <mbedtls_x509_crt_verify_with_profile+0xb4>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 80a56f0:	2b02      	cmp	r3, #2
 80a56f2:	d906      	bls.n	80a5702 <mbedtls_x509_crt_verify_with_profile+0x8a>
 80a56f4:	2202      	movs	r2, #2
 80a56f6:	494d      	ldr	r1, [pc, #308]	; (80a582c <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 80a56f8:	6970      	ldr	r0, [r6, #20]
 80a56fa:	f007 fefd 	bl	80ad4f8 <memcmp>
                {
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
 80a56fe:	2800      	cmp	r0, #0
 80a5700:	d053      	beq.n	80a57aa <mbedtls_x509_crt_verify_with_profile+0x132>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
                        break;
                }

                name = name->next;
 80a5702:	69b6      	ldr	r6, [r6, #24]
            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
        else
        {
            while( name != NULL )
 80a5704:	2e00      	cmp	r6, #0
 80a5706:	d1e0      	bne.n	80a56ca <mbedtls_x509_crt_verify_with_profile+0x52>

                cur = cur->next;
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 80a5708:	2304      	movs	r3, #4
 80a570a:	6023      	str	r3, [r4, #0]
 80a570c:	e00e      	b.n	80a572c <mbedtls_x509_crt_verify_with_profile+0xb4>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 80a570e:	2b02      	cmp	r3, #2
 80a5710:	d947      	bls.n	80a57a2 <mbedtls_x509_crt_verify_with_profile+0x12a>
 80a5712:	2202      	movs	r2, #2
 80a5714:	4945      	ldr	r1, [pc, #276]	; (80a582c <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 80a5716:	68b0      	ldr	r0, [r6, #8]
 80a5718:	f007 feee 	bl	80ad4f8 <memcmp>
            {
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
 80a571c:	2800      	cmp	r0, #0
 80a571e:	d140      	bne.n	80a57a2 <mbedtls_x509_crt_verify_with_profile+0x12a>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 80a5720:	4631      	mov	r1, r6
 80a5722:	4640      	mov	r0, r8
 80a5724:	f7ff fc59 	bl	80a4fda <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 80a5728:	2800      	cmp	r0, #0
 80a572a:	d13a      	bne.n	80a57a2 <mbedtls_x509_crt_verify_with_profile+0x12a>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 80a572c:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
 80a5730:	4630      	mov	r0, r6
 80a5732:	f003 fccd 	bl	80a90d0 <mbedtls_pk_get_type>
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a5736:	2301      	movs	r3, #1
 80a5738:	1e42      	subs	r2, r0, #1
 80a573a:	4093      	lsls	r3, r2
 80a573c:	687a      	ldr	r2, [r7, #4]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 80a573e:	4601      	mov	r1, r0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a5740:	4213      	tst	r3, r2
 80a5742:	d03a      	beq.n	80a57ba <mbedtls_x509_crt_verify_with_profile+0x142>
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 80a5744:	4632      	mov	r2, r6
 80a5746:	f107 000c 	add.w	r0, r7, #12
 80a574a:	f7ff fc8d 	bl	80a5068 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80a574e:	b118      	cbz	r0, 80a5758 <mbedtls_x509_crt_verify_with_profile+0xe0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80a5750:	6823      	ldr	r3, [r4, #0]
 80a5752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80a5756:	6023      	str	r3, [r4, #0]
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80a5758:	4656      	mov	r6, sl

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80a575a:	2e00      	cmp	r6, #0
 80a575c:	d03d      	beq.n	80a57da <mbedtls_x509_crt_verify_with_profile+0x162>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 80a575e:	2301      	movs	r3, #1
 80a5760:	2200      	movs	r2, #0
 80a5762:	4631      	mov	r1, r6
 80a5764:	4628      	mov	r0, r5
 80a5766:	f7ff fcb7 	bl	80a50d8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80a576a:	b358      	cbz	r0, 80a57c4 <mbedtls_x509_crt_verify_with_profile+0x14c>

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80a576c:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80a5770:	e7f3      	b.n	80a575a <mbedtls_x509_crt_verify_with_profile+0xe2>

    *flags = 0;

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 80a5772:	482f      	ldr	r0, [pc, #188]	; (80a5830 <mbedtls_x509_crt_verify_with_profile+0x1b8>)
 80a5774:	e011      	b.n	80a579a <mbedtls_x509_crt_verify_with_profile+0x122>

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
                                         pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 80a5776:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a5778:	9002      	str	r0, [sp, #8]
 80a577a:	9305      	str	r3, [sp, #20]
 80a577c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a577e:	9001      	str	r0, [sp, #4]
 80a5780:	9304      	str	r3, [sp, #16]
 80a5782:	9403      	str	r4, [sp, #12]
 80a5784:	9700      	str	r7, [sp, #0]
 80a5786:	465b      	mov	r3, fp
 80a5788:	4652      	mov	r2, sl
 80a578a:	4631      	mov	r1, r6
 80a578c:	4628      	mov	r0, r5
 80a578e:	f7ff fe71 	bl	80a5474 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>

exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 80a5792:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 80a5796:	d12e      	bne.n	80a57f6 <mbedtls_x509_crt_verify_with_profile+0x17e>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 80a5798:	4826      	ldr	r0, [pc, #152]	; (80a5834 <mbedtls_x509_crt_verify_with_profile+0x1bc>)

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
 80a579a:	f04f 33ff 	mov.w	r3, #4294967295
 80a579e:	6023      	str	r3, [r4, #0]
        return( ret );
 80a57a0:	e03f      	b.n	80a5822 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
                {
                    break;
                }

                cur = cur->next;
 80a57a2:	68f6      	ldr	r6, [r6, #12]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
 80a57a4:	2e00      	cmp	r6, #0
 80a57a6:	d182      	bne.n	80a56ae <mbedtls_x509_crt_verify_with_profile+0x36>
 80a57a8:	e7ae      	b.n	80a5708 <mbedtls_x509_crt_verify_with_profile+0x90>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
 80a57aa:	f106 010c 	add.w	r1, r6, #12
 80a57ae:	4640      	mov	r0, r8
 80a57b0:	f7ff fc13 	bl	80a4fda <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 80a57b4:	2800      	cmp	r0, #0
 80a57b6:	d1a4      	bne.n	80a5702 <mbedtls_x509_crt_verify_with_profile+0x8a>
 80a57b8:	e7b8      	b.n	80a572c <mbedtls_x509_crt_verify_with_profile+0xb4>

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80a57ba:	6823      	ldr	r3, [r4, #0]
 80a57bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80a57c0:	6023      	str	r3, [r4, #0]
 80a57c2:	e7bf      	b.n	80a5744 <mbedtls_x509_crt_verify_with_profile+0xcc>
    }

    if( parent != NULL )
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 80a57c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a57c6:	9402      	str	r4, [sp, #8]
 80a57c8:	9304      	str	r3, [sp, #16]
 80a57ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a57cc:	9001      	str	r0, [sp, #4]
 80a57ce:	9303      	str	r3, [sp, #12]
 80a57d0:	9000      	str	r0, [sp, #0]
 80a57d2:	463b      	mov	r3, r7
 80a57d4:	465a      	mov	r2, fp
 80a57d6:	4631      	mov	r1, r6
 80a57d8:	e01f      	b.n	80a581a <mbedtls_x509_crt_verify_with_profile+0x1a2>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 80a57da:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
 80a57de:	b196      	cbz	r6, 80a5806 <mbedtls_x509_crt_verify_with_profile+0x18e>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 80a57e0:	2301      	movs	r3, #1
 80a57e2:	2200      	movs	r2, #0
 80a57e4:	4631      	mov	r1, r6
 80a57e6:	4628      	mov	r0, r5
 80a57e8:	f7ff fc76 	bl	80a50d8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80a57ec:	2800      	cmp	r0, #0
 80a57ee:	d0c2      	beq.n	80a5776 <mbedtls_x509_crt_verify_with_profile+0xfe>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 80a57f0:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80a57f4:	e7f3      	b.n	80a57de <mbedtls_x509_crt_verify_with_profile+0x166>
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
 80a57f6:	2800      	cmp	r0, #0
 80a57f8:	d1cf      	bne.n	80a579a <mbedtls_x509_crt_verify_with_profile+0x122>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 80a57fa:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
 80a57fc:	480e      	ldr	r0, [pc, #56]	; (80a5838 <mbedtls_x509_crt_verify_with_profile+0x1c0>)
 80a57fe:	2b00      	cmp	r3, #0
 80a5800:	bf08      	it	eq
 80a5802:	2000      	moveq	r0, #0
 80a5804:	e00d      	b.n	80a5822 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
                                       pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 80a5806:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a5808:	465a      	mov	r2, fp
 80a580a:	9304      	str	r3, [sp, #16]
 80a580c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a580e:	4651      	mov	r1, sl
 80a5810:	9303      	str	r3, [sp, #12]
 80a5812:	463b      	mov	r3, r7
 80a5814:	9402      	str	r4, [sp, #8]
 80a5816:	9601      	str	r6, [sp, #4]
 80a5818:	9600      	str	r6, [sp, #0]
 80a581a:	4628      	mov	r0, r5
 80a581c:	f7ff fd34 	bl	80a5288 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 80a5820:	e7b7      	b.n	80a5792 <mbedtls_x509_crt_verify_with_profile+0x11a>

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
 80a5822:	b009      	add	sp, #36	; 0x24
 80a5824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5828:	080addc8 	.word	0x080addc8
 80a582c:	080ae95d 	.word	0x080ae95d
 80a5830:	ffffd800 	.word	0xffffd800
 80a5834:	ffffd000 	.word	0xffffd000
 80a5838:	ffffd900 	.word	0xffffd900

080a583c <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 80a583c:	f44f 729a 	mov.w	r2, #308	; 0x134
 80a5840:	2100      	movs	r1, #0
 80a5842:	f007 be8e 	b.w	80ad562 <memset>

080a5846 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 80a5846:	b570      	push	{r4, r5, r6, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 80a5848:	4605      	mov	r5, r0
 80a584a:	2800      	cmp	r0, #0
 80a584c:	d053      	beq.n	80a58f6 <mbedtls_x509_crt_free+0xb0>
 80a584e:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 80a5850:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80a5854:	f003 fb28 	bl	80a8ea8 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 80a5858:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 80a585a:	b14a      	cbz	r2, 80a5870 <mbedtls_x509_crt_free+0x2a>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a585c:	4610      	mov	r0, r2
 80a585e:	2120      	movs	r1, #32

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a5860:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a5862:	f7ff fb5c 	bl	80a4f1e <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 80a5866:	4610      	mov	r0, r2
 80a5868:	f006 fd7a 	bl	80ac360 <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a586c:	4632      	mov	r2, r6
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
 80a586e:	e7f4      	b.n	80a585a <mbedtls_x509_crt_free+0x14>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 80a5870:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 80a5874:	b14a      	cbz	r2, 80a588a <mbedtls_x509_crt_free+0x44>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a5876:	4610      	mov	r0, r2
 80a5878:	2120      	movs	r1, #32

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a587a:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a587c:	f7ff fb4f 	bl	80a4f1e <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 80a5880:	4610      	mov	r0, r2
 80a5882:	f006 fd6d 	bl	80ac360 <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a5886:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
 80a5888:	e7f4      	b.n	80a5874 <mbedtls_x509_crt_free+0x2e>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 80a588a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 80a588e:	b14a      	cbz	r2, 80a58a4 <mbedtls_x509_crt_free+0x5e>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80a5890:	4610      	mov	r0, r2
 80a5892:	2110      	movs	r1, #16

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a5894:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80a5896:	f7ff fb42 	bl	80a4f1e <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 80a589a:	4610      	mov	r0, r2
 80a589c:	f006 fd60 	bl	80ac360 <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a58a0:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
 80a58a2:	e7f4      	b.n	80a588e <mbedtls_x509_crt_free+0x48>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 80a58a4:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 80a58a8:	b14a      	cbz	r2, 80a58be <mbedtls_x509_crt_free+0x78>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80a58aa:	4610      	mov	r0, r2
 80a58ac:	2110      	movs	r1, #16

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a58ae:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80a58b0:	f7ff fb35 	bl	80a4f1e <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 80a58b4:	4610      	mov	r0, r2
 80a58b6:	f006 fd53 	bl	80ac360 <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a58ba:	4632      	mov	r2, r6
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
 80a58bc:	e7f4      	b.n	80a58a8 <mbedtls_x509_crt_free+0x62>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 80a58be:	68a0      	ldr	r0, [r4, #8]
 80a58c0:	b128      	cbz	r0, 80a58ce <mbedtls_x509_crt_free+0x88>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 80a58c2:	6861      	ldr	r1, [r4, #4]
 80a58c4:	f7ff fb2b 	bl	80a4f1e <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( cert_cur->raw.p );
 80a58c8:	68a0      	ldr	r0, [r4, #8]
 80a58ca:	f006 fd49 	bl	80ac360 <free>
        }

        cert_cur = cert_cur->next;
 80a58ce:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 80a58d2:	2c00      	cmp	r4, #0
 80a58d4:	d1bc      	bne.n	80a5850 <mbedtls_x509_crt_free+0xa>
 80a58d6:	462a      	mov	r2, r5
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 80a58d8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80a58dc:	4610      	mov	r0, r2

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 80a58de:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 80a58e2:	f7ff fb1c 	bl	80a4f1e <_ZL15mbedtls_zeroizePvj>
        if( cert_prv != crt )
 80a58e6:	42aa      	cmp	r2, r5
 80a58e8:	d002      	beq.n	80a58f0 <mbedtls_x509_crt_free+0xaa>
            mbedtls_free( cert_prv );
 80a58ea:	4610      	mov	r0, r2
 80a58ec:	f006 fd38 	bl	80ac360 <free>
    }
    while( cert_cur != NULL );
 80a58f0:	4622      	mov	r2, r4
 80a58f2:	2c00      	cmp	r4, #0
 80a58f4:	d1f0      	bne.n	80a58d8 <mbedtls_x509_crt_free+0x92>
 80a58f6:	bd70      	pop	{r4, r5, r6, pc}

080a58f8 <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 80a58f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a58fc:	4688      	mov	r8, r1
 80a58fe:	b09b      	sub	sp, #108	; 0x6c
 80a5900:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 80a5902:	4682      	mov	sl, r0
 80a5904:	2800      	cmp	r0, #0
 80a5906:	f000 812c 	beq.w	80a5b62 <mbedtls_x509_crt_parse_der+0x26a>
 80a590a:	2900      	cmp	r1, #0
 80a590c:	f000 8129 	beq.w	80a5b62 <mbedtls_x509_crt_parse_der+0x26a>
 80a5910:	4604      	mov	r4, r0
 80a5912:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
 80a5916:	69a3      	ldr	r3, [r4, #24]
 80a5918:	b1a3      	cbz	r3, 80a5944 <mbedtls_x509_crt_parse_der+0x4c>
 80a591a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80a591e:	46a1      	mov	r9, r4
 80a5920:	b10b      	cbz	r3, 80a5926 <mbedtls_x509_crt_parse_der+0x2e>
 80a5922:	461c      	mov	r4, r3
 80a5924:	e7f7      	b.n	80a5916 <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 80a5926:	f44f 719a 	mov.w	r1, #308	; 0x134
 80a592a:	2001      	movs	r0, #1
 80a592c:	f007 fdce 	bl	80ad4cc <calloc>
 80a5930:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
 80a5934:	2800      	cmp	r0, #0
 80a5936:	f000 8116 	beq.w	80a5b66 <mbedtls_x509_crt_parse_der+0x26e>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
 80a593a:	f7ff ff7f 	bl	80a583c <mbedtls_x509_crt_init>
 80a593e:	46a1      	mov	r9, r4
        crt = crt->next;
 80a5940:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 80a5944:	2300      	movs	r3, #0
 80a5946:	930b      	str	r3, [sp, #44]	; 0x2c
 80a5948:	930c      	str	r3, [sp, #48]	; 0x30
 80a594a:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 80a594c:	930e      	str	r3, [sp, #56]	; 0x38
 80a594e:	930f      	str	r3, [sp, #60]	; 0x3c
 80a5950:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 80a5952:	9311      	str	r3, [sp, #68]	; 0x44
 80a5954:	9312      	str	r3, [sp, #72]	; 0x48
 80a5956:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 80a5958:	2c00      	cmp	r4, #0
 80a595a:	f000 80e9 	beq.w	80a5b30 <mbedtls_x509_crt_parse_der+0x238>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
 80a595e:	ae1a      	add	r6, sp, #104	; 0x68
 80a5960:	f846 5d54 	str.w	r5, [r6, #-84]!
    end = p + len;
 80a5964:	eb08 0b05 	add.w	fp, r8, r5
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a5968:	2330      	movs	r3, #48	; 0x30
 80a596a:	4632      	mov	r2, r6
 80a596c:	4659      	mov	r1, fp
 80a596e:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 80a5970:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a5974:	f7fb fd80 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a5978:	b120      	cbz	r0, 80a5984 <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80a597a:	4620      	mov	r0, r4
 80a597c:	f7ff ff63 	bl	80a5846 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 80a5980:	4da3      	ldr	r5, [pc, #652]	; (80a5c10 <mbedtls_x509_crt_parse_der+0x318>)
 80a5982:	e0e1      	b.n	80a5b48 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( len > (size_t) ( end - p ) )
 80a5984:	9d06      	ldr	r5, [sp, #24]
 80a5986:	9f05      	ldr	r7, [sp, #20]
 80a5988:	ebc5 0b0b 	rsb	fp, r5, fp
 80a598c:	45bb      	cmp	fp, r7
 80a598e:	f0c0 80ca 	bcc.w	80a5b26 <mbedtls_x509_crt_parse_der+0x22e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 80a5992:	443d      	add	r5, r7
 80a5994:	ebc8 0505 	rsb	r5, r8, r5
 80a5998:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
 80a599a:	4629      	mov	r1, r5
 80a599c:	2001      	movs	r0, #1
 80a599e:	f007 fd95 	bl	80ad4cc <calloc>
 80a59a2:	4683      	mov	fp, r0
 80a59a4:	9006      	str	r0, [sp, #24]
 80a59a6:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 80a59a8:	2800      	cmp	r0, #0
 80a59aa:	f000 80c3 	beq.w	80a5b34 <mbedtls_x509_crt_parse_der+0x23c>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80a59ae:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 80a59b0:	1bed      	subs	r5, r5, r7
 80a59b2:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80a59b4:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
 80a59b6:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80a59b8:	f007 fdad 	bl	80ad516 <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 80a59bc:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a59be:	2330      	movs	r3, #48	; 0x30
 80a59c0:	4632      	mov	r2, r6
 80a59c2:	4639      	mov	r1, r7
 80a59c4:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 80a59c6:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a59c8:	f7fb fd56 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a59cc:	4680      	mov	r8, r0
 80a59ce:	b128      	cbz	r0, 80a59dc <mbedtls_x509_crt_parse_der+0xe4>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80a59d0:	4620      	mov	r0, r4
 80a59d2:	f7ff ff38 	bl	80a5846 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80a59d6:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
 80a59da:	e0b2      	b.n	80a5b42 <mbedtls_x509_crt_parse_der+0x24a>
    }

    end = p + len;
 80a59dc:	9b05      	ldr	r3, [sp, #20]
 80a59de:	9e06      	ldr	r6, [sp, #24]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a59e0:	aa17      	add	r2, sp, #92	; 0x5c
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a59e2:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 80a59e4:	6963      	ldr	r3, [r4, #20]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a59e6:	4631      	mov	r1, r6
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
    crt->tbs.len = end - crt->tbs.p;
 80a59e8:	1af3      	subs	r3, r6, r3
 80a59ea:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a59ec:	a806      	add	r0, sp, #24
 80a59ee:	23a0      	movs	r3, #160	; 0xa0
 80a59f0:	f7fb fd42 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a59f4:	4605      	mov	r5, r0
 80a59f6:	b128      	cbz	r0, 80a5a04 <mbedtls_x509_crt_parse_der+0x10c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a59f8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a59fc:	d114      	bne.n	80a5a28 <mbedtls_x509_crt_parse_der+0x130>
        {
            *ver = 0;
 80a59fe:	f8c4 8018 	str.w	r8, [r4, #24]
 80a5a02:	e014      	b.n	80a5a2e <mbedtls_x509_crt_parse_der+0x136>
        }

        return( ret );
    }

    end = *p + len;
 80a5a04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5a06:	9d06      	ldr	r5, [sp, #24]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 80a5a08:	f104 0218 	add.w	r2, r4, #24
        }

        return( ret );
    }

    end = *p + len;
 80a5a0c:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 80a5a0e:	4629      	mov	r1, r5
 80a5a10:	a806      	add	r0, sp, #24
 80a5a12:	f7fb fd5e 	bl	80a14d2 <mbedtls_asn1_get_int>
 80a5a16:	b110      	cbz	r0, 80a5a1e <mbedtls_x509_crt_parse_der+0x126>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 80a5a18:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
 80a5a1c:	e004      	b.n	80a5a28 <mbedtls_x509_crt_parse_der+0x130>

    if( *p != end )
 80a5a1e:	9b06      	ldr	r3, [sp, #24]
 80a5a20:	429d      	cmp	r5, r3
 80a5a22:	d004      	beq.n	80a5a2e <mbedtls_x509_crt_parse_der+0x136>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a5a24:	4d7b      	ldr	r5, [pc, #492]	; (80a5c14 <mbedtls_x509_crt_parse_der+0x31c>)
 80a5a26:	e0d6      	b.n	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80a5a28:	2d00      	cmp	r5, #0
 80a5a2a:	f040 80d4 	bne.w	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80a5a2e:	f104 021c 	add.w	r2, r4, #28
 80a5a32:	4631      	mov	r1, r6
 80a5a34:	a806      	add	r0, sp, #24
 80a5a36:	f7fe fb37 	bl	80a40a8 <mbedtls_x509_get_serial>
 80a5a3a:	4605      	mov	r5, r0
 80a5a3c:	2800      	cmp	r0, #0
 80a5a3e:	f040 80ca 	bne.w	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 80a5a42:	f104 0828 	add.w	r8, r4, #40	; 0x28
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80a5a46:	ab0b      	add	r3, sp, #44	; 0x2c
 80a5a48:	4642      	mov	r2, r8
 80a5a4a:	4631      	mov	r1, r6
 80a5a4c:	a806      	add	r0, sp, #24
 80a5a4e:	f7fe fb53 	bl	80a40f8 <mbedtls_x509_get_alg>
 80a5a52:	4605      	mov	r5, r0
 80a5a54:	2800      	cmp	r0, #0
 80a5a56:	f040 80be 	bne.w	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
 80a5a5a:	e086      	b.n	80a5b6a <mbedtls_x509_crt_parse_der+0x272>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
 80a5a5c:	3301      	adds	r3, #1
 80a5a5e:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 80a5a60:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 80a5a64:	9300      	str	r3, [sp, #0]
 80a5a66:	f504 7294 	add.w	r2, r4, #296	; 0x128
 80a5a6a:	f204 1329 	addw	r3, r4, #297	; 0x129
 80a5a6e:	a90b      	add	r1, sp, #44	; 0x2c
 80a5a70:	4640      	mov	r0, r8
 80a5a72:	f7fe fc95 	bl	80a43a0 <mbedtls_x509_get_sig_alg>
 80a5a76:	4605      	mov	r5, r0
 80a5a78:	2800      	cmp	r0, #0
 80a5a7a:	f040 80ac 	bne.w	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80a5a7e:	9b06      	ldr	r3, [sp, #24]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a5a80:	aa05      	add	r2, sp, #20
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80a5a82:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a5a84:	4631      	mov	r1, r6
 80a5a86:	2330      	movs	r3, #48	; 0x30
 80a5a88:	a806      	add	r0, sp, #24
 80a5a8a:	f7fb fcf5 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a5a8e:	4605      	mov	r5, r0
 80a5a90:	2800      	cmp	r0, #0
 80a5a92:	d151      	bne.n	80a5b38 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 80a5a94:	9b05      	ldr	r3, [sp, #20]
 80a5a96:	9906      	ldr	r1, [sp, #24]
 80a5a98:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80a5a9c:	4419      	add	r1, r3
 80a5a9e:	a806      	add	r0, sp, #24
 80a5aa0:	f7fe fb32 	bl	80a4108 <mbedtls_x509_get_name>
 80a5aa4:	4605      	mov	r5, r0
 80a5aa6:	2800      	cmp	r0, #0
 80a5aa8:	f040 8095 	bne.w	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80a5aac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a5aae:	9b06      	ldr	r3, [sp, #24]
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a5ab0:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80a5ab2:	1a9b      	subs	r3, r3, r2
 80a5ab4:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a5ab6:	aa17      	add	r2, sp, #92	; 0x5c
 80a5ab8:	2330      	movs	r3, #48	; 0x30
 80a5aba:	a806      	add	r0, sp, #24
 80a5abc:	f7fb fcdc 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a5ac0:	2800      	cmp	r0, #0
 80a5ac2:	d05b      	beq.n	80a5b7c <mbedtls_x509_crt_parse_der+0x284>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 80a5ac4:	f5a0 5510 	sub.w	r5, r0, #9216	; 0x2400
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 80a5ac8:	2d00      	cmp	r5, #0
 80a5aca:	f040 8084 	bne.w	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 80a5ace:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 80a5ad2:	f85b 3d50 	ldr.w	r3, [fp, #-80]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a5ad6:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 80a5ad8:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a5ada:	4631      	mov	r1, r6
 80a5adc:	2330      	movs	r3, #48	; 0x30
 80a5ade:	4658      	mov	r0, fp
 80a5ae0:	f7fb fcca 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a5ae4:	4605      	mov	r5, r0
 80a5ae6:	bb38      	cbnz	r0, 80a5b38 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80a5ae8:	9b05      	ldr	r3, [sp, #20]
 80a5aea:	2b00      	cmp	r3, #0
 80a5aec:	d15f      	bne.n	80a5bae <mbedtls_x509_crt_parse_der+0x2b6>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 80a5aee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80a5af0:	9b06      	ldr	r3, [sp, #24]

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 80a5af2:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 80a5af4:	1a9b      	subs	r3, r3, r2
 80a5af6:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 80a5af8:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 80a5afc:	4658      	mov	r0, fp
 80a5afe:	f7fe fcc7 	bl	80a4490 <mbedtls_pk_parse_subpubkey>
 80a5b02:	4605      	mov	r5, r0
 80a5b04:	2800      	cmp	r0, #0
 80a5b06:	d166      	bne.n	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 80a5b08:	69a3      	ldr	r3, [r4, #24]
 80a5b0a:	3b02      	subs	r3, #2
 80a5b0c:	2b01      	cmp	r3, #1
 80a5b0e:	d958      	bls.n	80a5bc2 <mbedtls_x509_crt_parse_der+0x2ca>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 80a5b10:	69a3      	ldr	r3, [r4, #24]
 80a5b12:	3b02      	subs	r3, #2
 80a5b14:	2b01      	cmp	r3, #1
 80a5b16:	d962      	bls.n	80a5bde <mbedtls_x509_crt_parse_der+0x2e6>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 80a5b18:	69a3      	ldr	r3, [r4, #24]
 80a5b1a:	2b03      	cmp	r3, #3
 80a5b1c:	d06a      	beq.n	80a5bf4 <mbedtls_x509_crt_parse_der+0x2fc>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
 80a5b1e:	9b06      	ldr	r3, [sp, #24]
 80a5b20:	429e      	cmp	r6, r3
 80a5b22:	f000 811e 	beq.w	80a5d62 <mbedtls_x509_crt_parse_der+0x46a>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
 80a5b26:	4620      	mov	r0, r4
 80a5b28:	f7ff fe8d 	bl	80a5846 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a5b2c:	4d3a      	ldr	r5, [pc, #232]	; (80a5c18 <mbedtls_x509_crt_parse_der+0x320>)
 80a5b2e:	e00b      	b.n	80a5b48 <mbedtls_x509_crt_parse_der+0x250>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a5b30:	4d3a      	ldr	r5, [pc, #232]	; (80a5c1c <mbedtls_x509_crt_parse_der+0x324>)
 80a5b32:	e009      	b.n	80a5b48 <mbedtls_x509_crt_parse_der+0x250>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80a5b34:	4d3a      	ldr	r5, [pc, #232]	; (80a5c20 <mbedtls_x509_crt_parse_der+0x328>)
 80a5b36:	e007      	b.n	80a5b48 <mbedtls_x509_crt_parse_der+0x250>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80a5b38:	4620      	mov	r0, r4
 80a5b3a:	f7ff fe84 	bl	80a5846 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80a5b3e:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 80a5b42:	2d00      	cmp	r5, #0
 80a5b44:	f000 8204 	beq.w	80a5f50 <mbedtls_x509_crt_parse_der+0x658>
    {
        if( prev )
 80a5b48:	f1b9 0f00 	cmp.w	r9, #0
 80a5b4c:	d002      	beq.n	80a5b54 <mbedtls_x509_crt_parse_der+0x25c>
            prev->next = NULL;
 80a5b4e:	2300      	movs	r3, #0
 80a5b50:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
 80a5b54:	4554      	cmp	r4, sl
 80a5b56:	f000 81fb 	beq.w	80a5f50 <mbedtls_x509_crt_parse_der+0x658>
            mbedtls_free( crt );
 80a5b5a:	4620      	mov	r0, r4
 80a5b5c:	f006 fc00 	bl	80ac360 <free>
 80a5b60:	e1f6      	b.n	80a5f50 <mbedtls_x509_crt_parse_der+0x658>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a5b62:	4d2e      	ldr	r5, [pc, #184]	; (80a5c1c <mbedtls_x509_crt_parse_der+0x324>)
 80a5b64:	e1f4      	b.n	80a5f50 <mbedtls_x509_crt_parse_der+0x658>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80a5b66:	4d2e      	ldr	r5, [pc, #184]	; (80a5c20 <mbedtls_x509_crt_parse_der+0x328>)
 80a5b68:	e1f2      	b.n	80a5f50 <mbedtls_x509_crt_parse_der+0x658>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
 80a5b6a:	69a3      	ldr	r3, [r4, #24]
 80a5b6c:	2b02      	cmp	r3, #2
 80a5b6e:	f67f af75 	bls.w	80a5a5c <mbedtls_x509_crt_parse_der+0x164>
    {
        mbedtls_x509_crt_free( crt );
 80a5b72:	4620      	mov	r0, r4
 80a5b74:	f7ff fe67 	bl	80a5846 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 80a5b78:	4d2a      	ldr	r5, [pc, #168]	; (80a5c24 <mbedtls_x509_crt_parse_der+0x32c>)
 80a5b7a:	e7e5      	b.n	80a5b48 <mbedtls_x509_crt_parse_der+0x250>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 80a5b7c:	9a06      	ldr	r2, [sp, #24]
 80a5b7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80a5b80:	a806      	add	r0, sp, #24

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 80a5b82:	eb02 0b03 	add.w	fp, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80a5b86:	4659      	mov	r1, fp
 80a5b88:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80a5b8c:	f7fe fb34 	bl	80a41f8 <mbedtls_x509_get_time>
 80a5b90:	b958      	cbnz	r0, 80a5baa <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 80a5b92:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 80a5b96:	4659      	mov	r1, fp
 80a5b98:	a806      	add	r0, sp, #24
 80a5b9a:	f7fe fb2d 	bl	80a41f8 <mbedtls_x509_get_time>
 80a5b9e:	b920      	cbnz	r0, 80a5baa <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( *p != end )
 80a5ba0:	9b06      	ldr	r3, [sp, #24]
 80a5ba2:	459b      	cmp	fp, r3
 80a5ba4:	d093      	beq.n	80a5ace <mbedtls_x509_crt_parse_der+0x1d6>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a5ba6:	4d20      	ldr	r5, [pc, #128]	; (80a5c28 <mbedtls_x509_crt_parse_der+0x330>)
 80a5ba8:	e015      	b.n	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
    end = *p + len;

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 80a5baa:	4605      	mov	r5, r0
 80a5bac:	e78c      	b.n	80a5ac8 <mbedtls_x509_crt_parse_der+0x1d0>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80a5bae:	9906      	ldr	r1, [sp, #24]
 80a5bb0:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80a5bb4:	4419      	add	r1, r3
 80a5bb6:	4658      	mov	r0, fp
 80a5bb8:	f7fe faa6 	bl	80a4108 <mbedtls_x509_get_name>
 80a5bbc:	4605      	mov	r5, r0
 80a5bbe:	b950      	cbnz	r0, 80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
 80a5bc0:	e795      	b.n	80a5aee <mbedtls_x509_crt_parse_der+0x1f6>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 80a5bc2:	2301      	movs	r3, #1
 80a5bc4:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 80a5bc8:	4631      	mov	r1, r6
 80a5bca:	4658      	mov	r0, fp
 80a5bcc:	f7ff fa31 	bl	80a5032 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 80a5bd0:	4605      	mov	r5, r0
 80a5bd2:	2800      	cmp	r0, #0
 80a5bd4:	d09c      	beq.n	80a5b10 <mbedtls_x509_crt_parse_der+0x218>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80a5bd6:	4620      	mov	r0, r4
 80a5bd8:	f7ff fe35 	bl	80a5846 <mbedtls_x509_crt_free>
 80a5bdc:	e7b1      	b.n	80a5b42 <mbedtls_x509_crt_parse_der+0x24a>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 80a5bde:	2302      	movs	r3, #2
 80a5be0:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 80a5be4:	4631      	mov	r1, r6
 80a5be6:	4658      	mov	r0, fp
 80a5be8:	f7ff fa23 	bl	80a5032 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 80a5bec:	4605      	mov	r5, r0
 80a5bee:	2800      	cmp	r0, #0
 80a5bf0:	d092      	beq.n	80a5b18 <mbedtls_x509_crt_parse_der+0x220>
 80a5bf2:	e7f0      	b.n	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 80a5bf4:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 80a5bf8:	4631      	mov	r1, r6
 80a5bfa:	4658      	mov	r0, fp
 80a5bfc:	f7fe fbf0 	bl	80a43e0 <mbedtls_x509_get_ext>
 80a5c00:	b908      	cbnz	r0, 80a5c06 <mbedtls_x509_crt_parse_der+0x30e>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80a5c02:	4680      	mov	r8, r0
 80a5c04:	e05a      	b.n	80a5cbc <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a5c06:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a5c0a:	f040 80a5 	bne.w	80a5d58 <mbedtls_x509_crt_parse_der+0x460>
 80a5c0e:	e786      	b.n	80a5b1e <mbedtls_x509_crt_parse_der+0x226>
 80a5c10:	ffffde80 	.word	0xffffde80
 80a5c14:	ffffdd9a 	.word	0xffffdd9a
 80a5c18:	ffffde1a 	.word	0xffffde1a
 80a5c1c:	ffffd800 	.word	0xffffd800
 80a5c20:	ffffd780 	.word	0xffffd780
 80a5c24:	ffffda80 	.word	0xffffda80
 80a5c28:	ffffdb9a 	.word	0xffffdb9a
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a5c2c:	2330      	movs	r3, #48	; 0x30
 80a5c2e:	aa07      	add	r2, sp, #28
 80a5c30:	4631      	mov	r1, r6
 80a5c32:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80a5c34:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80a5c38:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 80a5c3c:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 80a5c40:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 80a5c44:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a5c48:	f7fb fc16 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a5c4c:	2800      	cmp	r0, #0
 80a5c4e:	f040 80bd 	bne.w	80a5dcc <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 80a5c52:	9b06      	ldr	r3, [sp, #24]
 80a5c54:	9d07      	ldr	r5, [sp, #28]

        /* Get extension ID */
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a5c56:	aa15      	add	r2, sp, #84	; 0x54

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 80a5c58:	441d      	add	r5, r3

        /* Get extension ID */
        extn_oid.tag = **p;
 80a5c5a:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a5c5c:	4631      	mov	r1, r6
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;

        /* Get extension ID */
        extn_oid.tag = **p;
 80a5c5e:	9314      	str	r3, [sp, #80]	; 0x50

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a5c60:	a806      	add	r0, sp, #24
 80a5c62:	2306      	movs	r3, #6
 80a5c64:	f7fb fc08 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a5c68:	2800      	cmp	r0, #0
 80a5c6a:	f040 80af 	bne.w	80a5dcc <mbedtls_x509_crt_parse_der+0x4d4>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 80a5c6e:	9a06      	ldr	r2, [sp, #24]
        *p += extn_oid.len;
 80a5c70:	9b15      	ldr	r3, [sp, #84]	; 0x54
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 80a5c72:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
 80a5c74:	4413      	add	r3, r2
 80a5c76:	9306      	str	r3, [sp, #24]

        if( ( end - *p ) < 1 )
 80a5c78:	1af3      	subs	r3, r6, r3
 80a5c7a:	2b00      	cmp	r3, #0
 80a5c7c:	dd51      	ble.n	80a5d22 <mbedtls_x509_crt_parse_der+0x42a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 80a5c7e:	aa08      	add	r2, sp, #32
 80a5c80:	4629      	mov	r1, r5
 80a5c82:	a806      	add	r0, sp, #24
 80a5c84:	f7fb fc0c 	bl	80a14a0 <mbedtls_asn1_get_bool>
 80a5c88:	b9e0      	cbnz	r0, 80a5cc4 <mbedtls_x509_crt_parse_der+0x3cc>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 80a5c8a:	2304      	movs	r3, #4
 80a5c8c:	aa07      	add	r2, sp, #28
 80a5c8e:	4629      	mov	r1, r5
 80a5c90:	a806      	add	r0, sp, #24
 80a5c92:	f7fb fbf1 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a5c96:	2800      	cmp	r0, #0
 80a5c98:	f040 8098 	bne.w	80a5dcc <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
 80a5c9c:	9b07      	ldr	r3, [sp, #28]
 80a5c9e:	9a06      	ldr	r2, [sp, #24]
 80a5ca0:	4413      	add	r3, r2
 80a5ca2:	429d      	cmp	r5, r3
 80a5ca4:	f040 814a 	bne.w	80a5f3c <mbedtls_x509_crt_parse_der+0x644>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 80a5ca8:	a909      	add	r1, sp, #36	; 0x24
 80a5caa:	a814      	add	r0, sp, #80	; 0x50
 80a5cac:	f7fc ffcc 	bl	80a2c48 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
 80a5cb0:	b160      	cbz	r0, 80a5ccc <mbedtls_x509_crt_parse_der+0x3d4>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 80a5cb2:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 80a5cb4:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 80a5cb6:	2b00      	cmp	r3, #0
 80a5cb8:	f040 8142 	bne.w	80a5f40 <mbedtls_x509_crt_parse_der+0x648>
            return( 0 );

        return( ret );
    }

    while( *p < end )
 80a5cbc:	9b06      	ldr	r3, [sp, #24]
 80a5cbe:	429e      	cmp	r6, r3
 80a5cc0:	d8b4      	bhi.n	80a5c2c <mbedtls_x509_crt_parse_der+0x334>
 80a5cc2:	e030      	b.n	80a5d26 <mbedtls_x509_crt_parse_der+0x42e>
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 80a5cc4:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a5cc8:	d0df      	beq.n	80a5c8a <mbedtls_x509_crt_parse_der+0x392>
 80a5cca:	e07f      	b.n	80a5dcc <mbedtls_x509_crt_parse_der+0x4d4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 80a5ccc:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 80a5cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5cd2:	ea12 0003 	ands.w	r0, r2, r3
 80a5cd6:	f040 8135 	bne.w	80a5f44 <mbedtls_x509_crt_parse_der+0x64c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 80a5cda:	431a      	orrs	r2, r3

        switch( ext_type )
 80a5cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 80a5ce0:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8

        switch( ext_type )
 80a5ce4:	d023      	beq.n	80a5d2e <mbedtls_x509_crt_parse_der+0x436>
 80a5ce6:	dc74      	bgt.n	80a5dd2 <mbedtls_x509_crt_parse_der+0x4da>
 80a5ce8:	2b04      	cmp	r3, #4
 80a5cea:	f000 80a9 	beq.w	80a5e40 <mbedtls_x509_crt_parse_der+0x548>
 80a5cee:	2b20      	cmp	r3, #32
 80a5cf0:	f040 812a 	bne.w	80a5f48 <mbedtls_x509_crt_parse_der+0x650>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a5cf4:	2330      	movs	r3, #48	; 0x30
 80a5cf6:	aa0a      	add	r2, sp, #40	; 0x28
 80a5cf8:	4629      	mov	r1, r5
 80a5cfa:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80a5cfc:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a5d00:	f7fb fbba 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a5d04:	bb20      	cbnz	r0, 80a5d50 <mbedtls_x509_crt_parse_der+0x458>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
 80a5d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5d08:	9a06      	ldr	r2, [sp, #24]
 80a5d0a:	4413      	add	r3, r2
 80a5d0c:	429d      	cmp	r5, r3
 80a5d0e:	f040 8115 	bne.w	80a5f3c <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
 80a5d12:	9a06      	ldr	r2, [sp, #24]
 80a5d14:	4295      	cmp	r5, r2
 80a5d16:	f240 80f3 	bls.w	80a5f00 <mbedtls_x509_crt_parse_der+0x608>
    {
        if( ( end - *p ) < 1 )
 80a5d1a:	1aab      	subs	r3, r5, r2
 80a5d1c:	2b00      	cmp	r3, #0
 80a5d1e:	f300 80be 	bgt.w	80a5e9e <mbedtls_x509_crt_parse_der+0x5a6>
        extn_oid.p = *p;
        *p += extn_oid.len;

        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a5d22:	488d      	ldr	r0, [pc, #564]	; (80a5f58 <mbedtls_x509_crt_parse_der+0x660>)
 80a5d24:	e018      	b.n	80a5d58 <mbedtls_x509_crt_parse_der+0x460>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
 80a5d26:	f43f aefa 	beq.w	80a5b1e <mbedtls_x509_crt_parse_der+0x226>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a5d2a:	4d8c      	ldr	r5, [pc, #560]	; (80a5f5c <mbedtls_x509_crt_parse_der+0x664>)
 80a5d2c:	e753      	b.n	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 80a5d2e:	f504 7380 	add.w	r3, r4, #256	; 0x100
 80a5d32:	9303      	str	r3, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 80a5d34:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 80a5d38:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a5d3c:	2330      	movs	r3, #48	; 0x30
 80a5d3e:	aa17      	add	r2, sp, #92	; 0x5c
 80a5d40:	4629      	mov	r1, r5
 80a5d42:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 80a5d44:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a5d48:	f7fb fb96 	bl	80a1478 <mbedtls_asn1_get_tag>
 80a5d4c:	2800      	cmp	r0, #0
 80a5d4e:	d048      	beq.n	80a5de2 <mbedtls_x509_crt_parse_der+0x4ea>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80a5d50:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80a5d54:	2800      	cmp	r0, #0
 80a5d56:	d0b1      	beq.n	80a5cbc <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a5d58:	4605      	mov	r5, r0
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
 80a5d5a:	2800      	cmp	r0, #0
 80a5d5c:	f43f aedf 	beq.w	80a5b1e <mbedtls_x509_crt_parse_der+0x226>
 80a5d60:	e739      	b.n	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 80a5d62:	ab0e      	add	r3, sp, #56	; 0x38
 80a5d64:	aa11      	add	r2, sp, #68	; 0x44
 80a5d66:	4639      	mov	r1, r7
 80a5d68:	a806      	add	r0, sp, #24
 80a5d6a:	f7fe f9c5 	bl	80a40f8 <mbedtls_x509_get_alg>
 80a5d6e:	4605      	mov	r5, r0
 80a5d70:	2800      	cmp	r0, #0
 80a5d72:	f47f af30 	bne.w	80a5bd6 <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 80a5d76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80a5d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a5d7a:	429a      	cmp	r2, r3
 80a5d7c:	d10f      	bne.n	80a5d9e <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80a5d7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a5d80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a5d82:	f007 fbb9 	bl	80ad4f8 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 80a5d86:	4605      	mov	r5, r0
 80a5d88:	b948      	cbnz	r0, 80a5d9e <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
 80a5d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80a5d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a5d8e:	429a      	cmp	r2, r3
 80a5d90:	d105      	bne.n	80a5d9e <mbedtls_x509_crt_parse_der+0x4a6>
        sig_params1.len != sig_params2.len ||
 80a5d92:	b14a      	cbz	r2, 80a5da8 <mbedtls_x509_crt_parse_der+0x4b0>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 80a5d94:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a5d96:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a5d98:	f007 fbae 	bl	80ad4f8 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
 80a5d9c:	b120      	cbz	r0, 80a5da8 <mbedtls_x509_crt_parse_der+0x4b0>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
 80a5d9e:	4620      	mov	r0, r4
 80a5da0:	f7ff fd51 	bl	80a5846 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 80a5da4:	4d6e      	ldr	r5, [pc, #440]	; (80a5f60 <mbedtls_x509_crt_parse_der+0x668>)
 80a5da6:	e6cf      	b.n	80a5b48 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 80a5da8:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80a5dac:	4639      	mov	r1, r7
 80a5dae:	a806      	add	r0, sp, #24
 80a5db0:	f7fe fad8 	bl	80a4364 <mbedtls_x509_get_sig>
 80a5db4:	4606      	mov	r6, r0
 80a5db6:	b120      	cbz	r0, 80a5dc2 <mbedtls_x509_crt_parse_der+0x4ca>
    {
        mbedtls_x509_crt_free( crt );
 80a5db8:	4620      	mov	r0, r4
 80a5dba:	f7ff fd44 	bl	80a5846 <mbedtls_x509_crt_free>
 80a5dbe:	4635      	mov	r5, r6
 80a5dc0:	e6bf      	b.n	80a5b42 <mbedtls_x509_crt_parse_der+0x24a>
        return( ret );
    }

    if( p != end )
 80a5dc2:	9b06      	ldr	r3, [sp, #24]
 80a5dc4:	429f      	cmp	r7, r3
 80a5dc6:	f000 80c3 	beq.w	80a5f50 <mbedtls_x509_crt_parse_der+0x658>
 80a5dca:	e6ac      	b.n	80a5b26 <mbedtls_x509_crt_parse_der+0x22e>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80a5dcc:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 80a5dd0:	e7c2      	b.n	80a5d58 <mbedtls_x509_crt_parse_der+0x460>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
 80a5dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80a5dd6:	d053      	beq.n	80a5e80 <mbedtls_x509_crt_parse_der+0x588>
 80a5dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80a5ddc:	f000 8097 	beq.w	80a5f0e <mbedtls_x509_crt_parse_der+0x616>
 80a5de0:	e0b2      	b.n	80a5f48 <mbedtls_x509_crt_parse_der+0x650>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
 80a5de2:	9b06      	ldr	r3, [sp, #24]
 80a5de4:	429d      	cmp	r5, r3
 80a5de6:	f43f af69 	beq.w	80a5cbc <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 80a5dea:	465a      	mov	r2, fp
 80a5dec:	4629      	mov	r1, r5
 80a5dee:	a806      	add	r0, sp, #24
 80a5df0:	f7fb fb56 	bl	80a14a0 <mbedtls_asn1_get_bool>
 80a5df4:	b178      	cbz	r0, 80a5e16 <mbedtls_x509_crt_parse_der+0x51e>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a5df6:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a5dfa:	d1a9      	bne.n	80a5d50 <mbedtls_x509_crt_parse_der+0x458>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 80a5dfc:	465a      	mov	r2, fp
 80a5dfe:	4629      	mov	r1, r5
 80a5e00:	a806      	add	r0, sp, #24
 80a5e02:	f7fb fb66 	bl	80a14d2 <mbedtls_asn1_get_int>

        if( ret != 0 )
 80a5e06:	2800      	cmp	r0, #0
 80a5e08:	d1a2      	bne.n	80a5d50 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
 80a5e0a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80a5e0e:	b113      	cbz	r3, 80a5e16 <mbedtls_x509_crt_parse_der+0x51e>
            *ca_istrue = 1;
 80a5e10:	2301      	movs	r3, #1
 80a5e12:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
 80a5e16:	9b06      	ldr	r3, [sp, #24]
 80a5e18:	429d      	cmp	r5, r3
 80a5e1a:	f43f af4f 	beq.w	80a5cbc <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 80a5e1e:	9a03      	ldr	r2, [sp, #12]
 80a5e20:	4629      	mov	r1, r5
 80a5e22:	a806      	add	r0, sp, #24
 80a5e24:	f7fb fb55 	bl	80a14d2 <mbedtls_asn1_get_int>
 80a5e28:	2800      	cmp	r0, #0
 80a5e2a:	d191      	bne.n	80a5d50 <mbedtls_x509_crt_parse_der+0x458>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
 80a5e2c:	9b06      	ldr	r3, [sp, #24]
 80a5e2e:	429d      	cmp	r5, r3
 80a5e30:	f040 8084 	bne.w	80a5f3c <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 80a5e34:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80a5e38:	3301      	adds	r3, #1
 80a5e3a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80a5e3e:	e73d      	b.n	80a5cbc <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80a5e40:	9017      	str	r0, [sp, #92]	; 0x5c
 80a5e42:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 80a5e46:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80a5e48:	aa17      	add	r2, sp, #92	; 0x5c
 80a5e4a:	4629      	mov	r1, r5
 80a5e4c:	a806      	add	r0, sp, #24
 80a5e4e:	f7fb fb64 	bl	80a151a <mbedtls_asn1_get_bitstring>
 80a5e52:	2800      	cmp	r0, #0
 80a5e54:	d165      	bne.n	80a5f22 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
 80a5e56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a5e58:	2a00      	cmp	r2, #0
 80a5e5a:	d077      	beq.n	80a5f4c <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 80a5e5c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80a5e60:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80a5e62:	5c2b      	ldrb	r3, [r5, r0]
 80a5e64:	00c1      	lsls	r1, r0, #3
 80a5e66:	408b      	lsls	r3, r1
 80a5e68:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80a5e6c:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80a5e6e:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80a5e70:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80a5e72:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80a5e76:	f43f af21 	beq.w	80a5cbc <mbedtls_x509_crt_parse_der+0x3c4>
 80a5e7a:	2804      	cmp	r0, #4
 80a5e7c:	d1f1      	bne.n	80a5e62 <mbedtls_x509_crt_parse_der+0x56a>
 80a5e7e:	e71d      	b.n	80a5cbc <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 80a5e80:	2306      	movs	r3, #6
 80a5e82:	f504 7284 	add.w	r2, r4, #264	; 0x108
 80a5e86:	4629      	mov	r1, r5
 80a5e88:	a806      	add	r0, sp, #24
 80a5e8a:	f7fb fb7f 	bl	80a158c <mbedtls_asn1_get_sequence_of>
 80a5e8e:	2800      	cmp	r0, #0
 80a5e90:	d147      	bne.n	80a5f22 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 80a5e92:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80a5e96:	2b00      	cmp	r3, #0
 80a5e98:	f47f af10 	bne.w	80a5cbc <mbedtls_x509_crt_parse_der+0x3c4>
 80a5e9c:	e056      	b.n	80a5f4c <mbedtls_x509_crt_parse_der+0x654>
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 80a5e9e:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80a5ea2:	4629      	mov	r1, r5
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
 80a5ea4:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80a5ea6:	a806      	add	r0, sp, #24
 80a5ea8:	aa17      	add	r2, sp, #92	; 0x5c
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 80a5eaa:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80a5eac:	f7fb fa92 	bl	80a13d4 <mbedtls_asn1_get_len>
 80a5eb0:	9b03      	ldr	r3, [sp, #12]
 80a5eb2:	2800      	cmp	r0, #0
 80a5eb4:	f47f af4c 	bne.w	80a5d50 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 80a5eb8:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a5ebc:	2a80      	cmp	r2, #128	; 0x80
 80a5ebe:	d13f      	bne.n	80a5f40 <mbedtls_x509_crt_parse_der+0x648>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 80a5ec0:	2b82      	cmp	r3, #130	; 0x82
 80a5ec2:	d002      	beq.n	80a5eca <mbedtls_x509_crt_parse_der+0x5d2>
        {
            *p += tag_len;
 80a5ec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5ec6:	9a06      	ldr	r2, [sp, #24]
 80a5ec8:	e017      	b.n	80a5efa <mbedtls_x509_crt_parse_der+0x602>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 80a5eca:	f8db 3008 	ldr.w	r3, [fp, #8]
 80a5ece:	b15b      	cbz	r3, 80a5ee8 <mbedtls_x509_crt_parse_der+0x5f0>
        {
            if( cur->next != NULL )
 80a5ed0:	f8db 300c 	ldr.w	r3, [fp, #12]
 80a5ed4:	2b00      	cmp	r3, #0
 80a5ed6:	d135      	bne.n	80a5f44 <mbedtls_x509_crt_parse_der+0x64c>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 80a5ed8:	2110      	movs	r1, #16
 80a5eda:	2001      	movs	r0, #1
 80a5edc:	f007 faf6 	bl	80ad4cc <calloc>
 80a5ee0:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
 80a5ee4:	b188      	cbz	r0, 80a5f0a <mbedtls_x509_crt_parse_der+0x612>
 80a5ee6:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
 80a5ee8:	2382      	movs	r3, #130	; 0x82
 80a5eea:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
 80a5eee:	9a06      	ldr	r2, [sp, #24]
 80a5ef0:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
 80a5ef4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5ef6:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
 80a5efa:	4413      	add	r3, r2
 80a5efc:	9306      	str	r3, [sp, #24]
 80a5efe:	e708      	b.n	80a5d12 <mbedtls_x509_crt_parse_der+0x41a>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 80a5f00:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
 80a5f04:	f43f aeda 	beq.w	80a5cbc <mbedtls_x509_crt_parse_der+0x3c4>
 80a5f08:	e018      	b.n	80a5f3c <mbedtls_x509_crt_parse_der+0x644>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 80a5f0a:	4816      	ldr	r0, [pc, #88]	; (80a5f64 <mbedtls_x509_crt_parse_der+0x66c>)
 80a5f0c:	e724      	b.n	80a5d58 <mbedtls_x509_crt_parse_der+0x460>
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80a5f0e:	9017      	str	r0, [sp, #92]	; 0x5c
 80a5f10:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 80a5f14:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80a5f16:	aa17      	add	r2, sp, #92	; 0x5c
 80a5f18:	4629      	mov	r1, r5
 80a5f1a:	a806      	add	r0, sp, #24
 80a5f1c:	f7fb fafd 	bl	80a151a <mbedtls_asn1_get_bitstring>
 80a5f20:	b120      	cbz	r0, 80a5f2c <mbedtls_x509_crt_parse_der+0x634>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 80a5f22:	f5b0 5014 	subs.w	r0, r0, #9472	; 0x2500
 80a5f26:	f43f aec9 	beq.w	80a5cbc <mbedtls_x509_crt_parse_der+0x3c4>
 80a5f2a:	e715      	b.n	80a5d58 <mbedtls_x509_crt_parse_der+0x460>
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
 80a5f2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5f2e:	2b01      	cmp	r3, #1
 80a5f30:	d10c      	bne.n	80a5f4c <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 80a5f32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a5f34:	781b      	ldrb	r3, [r3, #0]
 80a5f36:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 80a5f3a:	e6bf      	b.n	80a5cbc <mbedtls_x509_crt_parse_der+0x3c4>

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a5f3c:	4807      	ldr	r0, [pc, #28]	; (80a5f5c <mbedtls_x509_crt_parse_der+0x664>)
 80a5f3e:	e70b      	b.n	80a5d58 <mbedtls_x509_crt_parse_der+0x460>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a5f40:	4809      	ldr	r0, [pc, #36]	; (80a5f68 <mbedtls_x509_crt_parse_der+0x670>)
 80a5f42:	e709      	b.n	80a5d58 <mbedtls_x509_crt_parse_der+0x460>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 80a5f44:	4809      	ldr	r0, [pc, #36]	; (80a5f6c <mbedtls_x509_crt_parse_der+0x674>)
 80a5f46:	e707      	b.n	80a5d58 <mbedtls_x509_crt_parse_der+0x460>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 80a5f48:	4809      	ldr	r0, [pc, #36]	; (80a5f70 <mbedtls_x509_crt_parse_der+0x678>)
 80a5f4a:	e705      	b.n	80a5d58 <mbedtls_x509_crt_parse_der+0x460>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a5f4c:	4809      	ldr	r0, [pc, #36]	; (80a5f74 <mbedtls_x509_crt_parse_der+0x67c>)
 80a5f4e:	e703      	b.n	80a5d58 <mbedtls_x509_crt_parse_der+0x460>

        return( ret );
    }

    return( 0 );
}
 80a5f50:	4628      	mov	r0, r5
 80a5f52:	b01b      	add	sp, #108	; 0x6c
 80a5f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5f58:	ffffdaa0 	.word	0xffffdaa0
 80a5f5c:	ffffda9a 	.word	0xffffda9a
 80a5f60:	ffffd980 	.word	0xffffd980
 80a5f64:	ffffda96 	.word	0xffffda96
 80a5f68:	ffffda9e 	.word	0xffffda9e
 80a5f6c:	ffffdb00 	.word	0xffffdb00
 80a5f70:	ffffdf80 	.word	0xffffdf80
 80a5f74:	ffffda9c 	.word	0xffffda9c

080a5f78 <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80a5f78:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a5f7a:	2300      	movs	r3, #0
 80a5f7c:	4288      	cmp	r0, r1
 80a5f7e:	d002      	beq.n	80a5f86 <_ZL15mbedtls_zeroizePvj+0xe>
 80a5f80:	7003      	strb	r3, [r0, #0]
 80a5f82:	3001      	adds	r0, #1
 80a5f84:	e7fa      	b.n	80a5f7c <_ZL15mbedtls_zeroizePvj+0x4>
 80a5f86:	4770      	bx	lr

080a5f88 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80a5f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80a5f8a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80a5f8c:	b0a9      	sub	sp, #164	; 0xa4
 80a5f8e:	4604      	mov	r4, r0
 80a5f90:	460f      	mov	r7, r1
 80a5f92:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 80a5f94:	b905      	cbnz	r5, 80a5f98 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 80a5f96:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
 80a5f98:	a80d      	add	r0, sp, #52	; 0x34
 80a5f9a:	f7fa f9f9 	bl	80a0390 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 80a5f9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80a5fa0:	a80d      	add	r0, sp, #52	; 0x34
 80a5fa2:	3118      	adds	r1, #24
 80a5fa4:	f7fa fa02 	bl	80a03ac <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80a5fa8:	4b10      	ldr	r3, [pc, #64]	; (80a5fec <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
 80a5faa:	4911      	ldr	r1, [pc, #68]	; (80a5ff0 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 80a5fac:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80a5fae:	2e00      	cmp	r6, #0
 80a5fb0:	bf0c      	ite	eq
 80a5fb2:	461e      	moveq	r6, r3
 80a5fb4:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 80a5fb6:	a905      	add	r1, sp, #20
 80a5fb8:	f7fa fdf2 	bl	80a0ba0 <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 80a5fbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
 80a5fbe:	220c      	movs	r2, #12
 80a5fc0:	2420      	movs	r4, #32
 80a5fc2:	9202      	str	r2, [sp, #8]
 80a5fc4:	9701      	str	r7, [sp, #4]
 80a5fc6:	9400      	str	r4, [sp, #0]
 80a5fc8:	4632      	mov	r2, r6
 80a5fca:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 80a5fce:	2130      	movs	r1, #48	; 0x30
 80a5fd0:	ab05      	add	r3, sp, #20
 80a5fd2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80a5fd6:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
 80a5fd8:	a80d      	add	r0, sp, #52	; 0x34
 80a5fda:	f7fa f9dd 	bl	80a0398 <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 80a5fde:	4621      	mov	r1, r4
 80a5fe0:	a805      	add	r0, sp, #20
 80a5fe2:	f7ff ffc9 	bl	80a5f78 <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 80a5fe6:	b029      	add	sp, #164	; 0xa4
 80a5fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5fea:	bf00      	nop
 80a5fec:	080aed7d 	.word	0x080aed7d
 80a5ff0:	080aed8d 	.word	0x080aed8d

080a5ff4 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 80a5ff4:	b530      	push	{r4, r5, lr}
 80a5ff6:	4605      	mov	r5, r0
 80a5ff8:	460c      	mov	r4, r1
 80a5ffa:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 80a5ffc:	a801      	add	r0, sp, #4
 80a5ffe:	f7fa f9c7 	bl	80a0390 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 80a6002:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80a6004:	a801      	add	r0, sp, #4
 80a6006:	3118      	adds	r1, #24
 80a6008:	f7fa f9d0 	bl	80a03ac <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 80a600c:	4621      	mov	r1, r4
 80a600e:	a801      	add	r0, sp, #4
 80a6010:	f7fa fdc6 	bl	80a0ba0 <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
 80a6014:	a801      	add	r0, sp, #4
 80a6016:	f7fa f9bf 	bl	80a0398 <mbedtls_sha256_free>

    return;
}
 80a601a:	b01d      	add	sp, #116	; 0x74
 80a601c:	bd30      	pop	{r4, r5, pc}
	...

080a6020 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 80a6020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6024:	4604      	mov	r4, r0
 80a6026:	b0b7      	sub	sp, #220	; 0xdc
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80a6028:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 80a602a:	468a      	mov	sl, r1
 80a602c:	4693      	mov	fp, r2
 80a602e:	4699      	mov	r9, r3
 80a6030:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80a6032:	f7fe fe39 	bl	80a4ca8 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 80a6036:	4620      	mov	r0, r4
 80a6038:	f7fe fe2a 	bl	80a4c90 <mbedtls_md_info_from_type>
 80a603c:	4607      	mov	r7, r0
 80a603e:	2800      	cmp	r0, #0
 80a6040:	d073      	beq.n	80a612a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10a>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
 80a6042:	f7fe ff69 	bl	80a4f18 <mbedtls_md_get_size>
 80a6046:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 80a6048:	4648      	mov	r0, r9
 80a604a:	f007 faaa 	bl	80ad5a2 <strlen>
 80a604e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80a6050:	1823      	adds	r3, r4, r0
 80a6052:	189a      	adds	r2, r3, r2
 80a6054:	2a80      	cmp	r2, #128	; 0x80
 80a6056:	4605      	mov	r5, r0
 80a6058:	9301      	str	r3, [sp, #4]
 80a605a:	d868      	bhi.n	80a612e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
 80a605c:	ab16      	add	r3, sp, #88	; 0x58
 80a605e:	eb03 0804 	add.w	r8, r3, r4
 80a6062:	4602      	mov	r2, r0
 80a6064:	4649      	mov	r1, r9
 80a6066:	4640      	mov	r0, r8
 80a6068:	f007 fa55 	bl	80ad516 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 80a606c:	9b01      	ldr	r3, [sp, #4]
 80a606e:	a816      	add	r0, sp, #88	; 0x58
 80a6070:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80a6072:	9940      	ldr	r1, [sp, #256]	; 0x100
 80a6074:	4418      	add	r0, r3
 80a6076:	f007 fa4e 	bl	80ad516 <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 80a607a:	4639      	mov	r1, r7
 80a607c:	2201      	movs	r2, #1
 80a607e:	a803      	add	r0, sp, #12
 80a6080:	f7fe fe38 	bl	80a4cf4 <mbedtls_md_setup>
 80a6084:	4607      	mov	r7, r0
 80a6086:	2800      	cmp	r0, #0
 80a6088:	d152      	bne.n	80a6130 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 80a608a:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 80a608c:	465a      	mov	r2, fp
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 80a608e:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 80a6090:	4651      	mov	r1, sl
 80a6092:	a803      	add	r0, sp, #12
 80a6094:	f7fe fe7e 	bl	80a4d94 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 80a6098:	462a      	mov	r2, r5
 80a609a:	4641      	mov	r1, r8
 80a609c:	a803      	add	r0, sp, #12
 80a609e:	f7fe fed9 	bl	80a4e54 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 80a60a2:	a916      	add	r1, sp, #88	; 0x58
 80a60a4:	a803      	add	r0, sp, #12
 80a60a6:	f7fe fee5 	bl	80a4e74 <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 80a60aa:	46b9      	mov	r9, r7
 80a60ac:	f10d 0818 	add.w	r8, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 80a60b0:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 80a60b2:	45b1      	cmp	r9, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 80a60b4:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 80a60b6:	d22c      	bcs.n	80a6112 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 80a60b8:	f7fe ff0c 	bl	80a4ed4 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 80a60bc:	462a      	mov	r2, r5
 80a60be:	a916      	add	r1, sp, #88	; 0x58
 80a60c0:	a803      	add	r0, sp, #12
 80a60c2:	f7fe fec7 	bl	80a4e54 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 80a60c6:	4641      	mov	r1, r8
 80a60c8:	a803      	add	r0, sp, #12
 80a60ca:	f7fe fed3 	bl	80a4e74 <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 80a60ce:	a803      	add	r0, sp, #12
 80a60d0:	f7fe ff00 	bl	80a4ed4 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 80a60d4:	4622      	mov	r2, r4
 80a60d6:	a916      	add	r1, sp, #88	; 0x58
 80a60d8:	a803      	add	r0, sp, #12
 80a60da:	f7fe febb 	bl	80a4e54 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 80a60de:	a916      	add	r1, sp, #88	; 0x58
 80a60e0:	a803      	add	r0, sp, #12
 80a60e2:	f7fe fec7 	bl	80a4e74 <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 80a60e6:	eb09 0104 	add.w	r1, r9, r4
 80a60ea:	428e      	cmp	r6, r1
 80a60ec:	bf36      	itet	cc
 80a60ee:	fbb6 f2f4 	udivcc	r2, r6, r4
 80a60f2:	4622      	movcs	r2, r4
 80a60f4:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 80a60f8:	9842      	ldr	r0, [sp, #264]	; 0x108
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80a60fa:	2300      	movs	r3, #0
            dstbuf[i + j]  = h_i[j];
 80a60fc:	4481      	add	r9, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80a60fe:	4293      	cmp	r3, r2
 80a6100:	d101      	bne.n	80a6106 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe6>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 80a6102:	4689      	mov	r9, r1
 80a6104:	e7d5      	b.n	80a60b2 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 80a6106:	f818 0003 	ldrb.w	r0, [r8, r3]
 80a610a:	f809 0003 	strb.w	r0, [r9, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80a610e:	3301      	adds	r3, #1
 80a6110:	e7f5      	b.n	80a60fe <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xde>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 80a6112:	f7fe fdce 	bl	80a4cb2 <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
 80a6116:	2180      	movs	r1, #128	; 0x80
 80a6118:	a816      	add	r0, sp, #88	; 0x58
 80a611a:	f7ff ff2d 	bl	80a5f78 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 80a611e:	4640      	mov	r0, r8
 80a6120:	2140      	movs	r1, #64	; 0x40
 80a6122:	f7ff ff29 	bl	80a5f78 <_ZL15mbedtls_zeroizePvj>

    return( 0 );
 80a6126:	2000      	movs	r0, #0
 80a6128:	e002      	b.n	80a6130 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a612a:	4803      	ldr	r0, [pc, #12]	; (80a6138 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x118>)
 80a612c:	e000      	b.n	80a6130 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a612e:	4803      	ldr	r0, [pc, #12]	; (80a613c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)

    mbedtls_zeroize( tmp, sizeof( tmp ) );
    mbedtls_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
 80a6130:	b037      	add	sp, #220	; 0xdc
 80a6132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6136:	bf00      	nop
 80a6138:	ffff9400 	.word	0xffff9400
 80a613c:	ffff8f00 	.word	0xffff8f00

080a6140 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 80a6140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 80a6142:	9c08      	ldr	r4, [sp, #32]
 80a6144:	9403      	str	r4, [sp, #12]
 80a6146:	9c07      	ldr	r4, [sp, #28]
 80a6148:	9402      	str	r4, [sp, #8]
 80a614a:	9c06      	ldr	r4, [sp, #24]
 80a614c:	e88d 0018 	stmia.w	sp, {r3, r4}
 80a6150:	4613      	mov	r3, r2
 80a6152:	460a      	mov	r2, r1
 80a6154:	4601      	mov	r1, r0
 80a6156:	2006      	movs	r0, #6
 80a6158:	f7ff ff62 	bl	80a6020 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 80a615c:	b004      	add	sp, #16
 80a615e:	bd10      	pop	{r4, pc}

080a6160 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 80a6160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 80a6162:	9c08      	ldr	r4, [sp, #32]
 80a6164:	9403      	str	r4, [sp, #12]
 80a6166:	9c07      	ldr	r4, [sp, #28]
 80a6168:	9402      	str	r4, [sp, #8]
 80a616a:	9c06      	ldr	r4, [sp, #24]
 80a616c:	e88d 0018 	stmia.w	sp, {r3, r4}
 80a6170:	4613      	mov	r3, r2
 80a6172:	460a      	mov	r2, r1
 80a6174:	4601      	mov	r1, r0
 80a6176:	2007      	movs	r0, #7
 80a6178:	f7ff ff52 	bl	80a6020 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 80a617c:	b004      	add	sp, #16
 80a617e:	bd10      	pop	{r4, pc}

080a6180 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80a6180:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80a6182:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80a6184:	b0c7      	sub	sp, #284	; 0x11c
 80a6186:	4604      	mov	r4, r0
 80a6188:	460f      	mov	r7, r1
 80a618a:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 80a618c:	b905      	cbnz	r5, 80a6190 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 80a618e:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
 80a6190:	a810      	add	r0, sp, #64	; 0x40
 80a6192:	f003 fe2c 	bl	80a9dee <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 80a6196:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80a6198:	a810      	add	r0, sp, #64	; 0x40
 80a619a:	3188      	adds	r1, #136	; 0x88
 80a619c:	f003 fe35 	bl	80a9e0a <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80a61a0:	4b10      	ldr	r3, [pc, #64]	; (80a61e4 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
 80a61a2:	4911      	ldr	r1, [pc, #68]	; (80a61e8 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 80a61a4:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80a61a6:	2e00      	cmp	r6, #0
 80a61a8:	bf0c      	ite	eq
 80a61aa:	461e      	moveq	r6, r3
 80a61ac:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 80a61ae:	a904      	add	r1, sp, #16
 80a61b0:	f004 fd56 	bl	80aac60 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 80a61b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
 80a61b6:	220c      	movs	r2, #12
 80a61b8:	2430      	movs	r4, #48	; 0x30
 80a61ba:	9202      	str	r2, [sp, #8]
 80a61bc:	9701      	str	r7, [sp, #4]
 80a61be:	9400      	str	r4, [sp, #0]
 80a61c0:	4632      	mov	r2, r6
 80a61c2:	4621      	mov	r1, r4
 80a61c4:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 80a61c8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80a61cc:	ab04      	add	r3, sp, #16
 80a61ce:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
 80a61d0:	a810      	add	r0, sp, #64	; 0x40
 80a61d2:	f003 fe10 	bl	80a9df6 <mbedtls_sha512_free>

    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 80a61d6:	4621      	mov	r1, r4
 80a61d8:	a804      	add	r0, sp, #16
 80a61da:	f7ff fecd 	bl	80a5f78 <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 80a61de:	b047      	add	sp, #284	; 0x11c
 80a61e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a61e2:	bf00      	nop
 80a61e4:	080aed7d 	.word	0x080aed7d
 80a61e8:	080aed8d 	.word	0x080aed8d

080a61ec <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
 80a61ec:	b530      	push	{r4, r5, lr}
 80a61ee:	4605      	mov	r5, r0
 80a61f0:	460c      	mov	r4, r1
 80a61f2:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
 80a61f4:	4668      	mov	r0, sp
 80a61f6:	f003 fdfa 	bl	80a9dee <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 80a61fa:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80a61fc:	4668      	mov	r0, sp
 80a61fe:	3188      	adds	r1, #136	; 0x88
 80a6200:	f003 fe03 	bl	80a9e0a <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
 80a6204:	4621      	mov	r1, r4
 80a6206:	4668      	mov	r0, sp
 80a6208:	f004 fd2a 	bl	80aac60 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
 80a620c:	4668      	mov	r0, sp
 80a620e:	f003 fdf2 	bl	80a9df6 <mbedtls_sha512_free>

    return;
}
 80a6212:	b037      	add	sp, #220	; 0xdc
 80a6214:	bd30      	pop	{r4, r5, pc}

080a6216 <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 80a6216:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80a6218:	3018      	adds	r0, #24
 80a621a:	f7fa bc87 	b.w	80a0b2c <mbedtls_sha256_update_ret>

080a621e <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80a621e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80a6220:	3088      	adds	r0, #136	; 0x88
 80a6222:	f004 bcd5 	b.w	80aabd0 <mbedtls_sha512_update_ret>
	...

080a6228 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80a6228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80a622c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 80a622e:	6c04      	ldr	r4, [r0, #64]	; 0x40
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80a6230:	b0d7      	sub	sp, #348	; 0x15c
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80a6232:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 80a6234:	6823      	ldr	r3, [r4, #0]
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 80a6236:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80a6238:	4680      	mov	r8, r0
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 80a623a:	7a18      	ldrb	r0, [r3, #8]
 80a623c:	f7fa fe46 	bl	80a0ecc <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 80a6240:	4606      	mov	r6, r0
 80a6242:	b908      	cbnz	r0, 80a6248 <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a6244:	48a5      	ldr	r0, [pc, #660]	; (80a64dc <mbedtls_ssl_derive_keys+0x2b4>)
 80a6246:	e145      	b.n	80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 80a6248:	6823      	ldr	r3, [r4, #0]
 80a624a:	7a58      	ldrb	r0, [r3, #9]
 80a624c:	f7fe fd20 	bl	80a4c90 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a6250:	4682      	mov	sl, r0
 80a6252:	2800      	cmp	r0, #0
 80a6254:	d0f6      	beq.n	80a6244 <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 80a6256:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a625a:	2b03      	cmp	r3, #3
 80a625c:	d001      	beq.n	80a6262 <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a625e:	48a0      	ldr	r0, [pc, #640]	; (80a64e0 <mbedtls_ssl_derive_keys+0x2b8>)
 80a6260:	e138      	b.n	80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 80a6262:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 80a6264:	7a5b      	ldrb	r3, [r3, #9]
 80a6266:	2b07      	cmp	r3, #7
 80a6268:	d107      	bne.n	80a627a <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
 80a626a:	4b9e      	ldr	r3, [pc, #632]	; (80a64e4 <mbedtls_ssl_derive_keys+0x2bc>)
 80a626c:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 80a6270:	4b9d      	ldr	r3, [pc, #628]	; (80a64e8 <mbedtls_ssl_derive_keys+0x2c0>)
 80a6272:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 80a6276:	4b9d      	ldr	r3, [pc, #628]	; (80a64ec <mbedtls_ssl_derive_keys+0x2c4>)
 80a6278:	e006      	b.n	80a6288 <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
 80a627a:	4b9d      	ldr	r3, [pc, #628]	; (80a64f0 <mbedtls_ssl_derive_keys+0x2c8>)
 80a627c:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 80a6280:	4b9c      	ldr	r3, [pc, #624]	; (80a64f4 <mbedtls_ssl_derive_keys+0x2cc>)
 80a6282:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 80a6286:	4b9c      	ldr	r3, [pc, #624]	; (80a64f8 <mbedtls_ssl_derive_keys+0x2d0>)
 80a6288:	f8c5 3168 	str.w	r3, [r5, #360]	; 0x168
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 80a628c:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 80a6290:	f505 7bda 	add.w	fp, r5, #436	; 0x1b4
 80a6294:	f505 79ba 	add.w	r9, r5, #372	; 0x174
 80a6298:	b9ab      	cbnz	r3, 80a62c6 <mbedtls_ssl_derive_keys+0x9e>
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 80a629a:	2330      	movs	r3, #48	; 0x30
 80a629c:	9302      	str	r3, [sp, #8]
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 80a629e:	9b05      	ldr	r3, [sp, #20]
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 80a62a0:	4a96      	ldr	r2, [pc, #600]	; (80a64fc <mbedtls_ssl_derive_keys+0x2d4>)
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 80a62a2:	332c      	adds	r3, #44	; 0x2c
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 80a62a4:	9301      	str	r3, [sp, #4]
 80a62a6:	2340      	movs	r3, #64	; 0x40
 80a62a8:	9300      	str	r3, [sp, #0]
 80a62aa:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
 80a62ae:	464b      	mov	r3, r9
 80a62b0:	4658      	mov	r0, fp
 80a62b2:	f8d5 716c 	ldr.w	r7, [r5, #364]	; 0x16c
 80a62b6:	47b8      	blx	r7
        if( ret != 0 )
 80a62b8:	2800      	cmp	r0, #0
 80a62ba:	f040 810b 	bne.w	80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 80a62be:	2130      	movs	r1, #48	; 0x30
 80a62c0:	4658      	mov	r0, fp
 80a62c2:	f7ff fe59 	bl	80a5f78 <_ZL15mbedtls_zeroizePvj>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 80a62c6:	464b      	mov	r3, r9
 80a62c8:	af06      	add	r7, sp, #24
 80a62ca:	463a      	mov	r2, r7
 80a62cc:	6818      	ldr	r0, [r3, #0]
 80a62ce:	6859      	ldr	r1, [r3, #4]
 80a62d0:	3308      	adds	r3, #8
 80a62d2:	c203      	stmia	r2!, {r0, r1}
 80a62d4:	455b      	cmp	r3, fp
 80a62d6:	4617      	mov	r7, r2
 80a62d8:	d1f7      	bne.n	80a62ca <mbedtls_ssl_derive_keys+0xa2>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 80a62da:	464f      	mov	r7, r9
 80a62dc:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80a62e0:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 80a62e4:	4673      	mov	r3, lr
 80a62e6:	cb03      	ldmia	r3!, {r0, r1}
 80a62e8:	455b      	cmp	r3, fp
 80a62ea:	6038      	str	r0, [r7, #0]
 80a62ec:	6079      	str	r1, [r7, #4]
 80a62ee:	469e      	mov	lr, r3
 80a62f0:	f107 0708 	add.w	r7, r7, #8
 80a62f4:	d1f6      	bne.n	80a62e4 <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 80a62f6:	f10d 0e18 	add.w	lr, sp, #24
 80a62fa:	f505 77ca 	add.w	r7, r5, #404	; 0x194
 80a62fe:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80a6302:	4673      	mov	r3, lr
 80a6304:	cb03      	ldmia	r3!, {r0, r1}
 80a6306:	4563      	cmp	r3, ip
 80a6308:	6038      	str	r0, [r7, #0]
 80a630a:	6079      	str	r1, [r7, #4]
 80a630c:	469e      	mov	lr, r3
 80a630e:	f107 0708 	add.w	r7, r7, #8
 80a6312:	d1f6      	bne.n	80a6302 <mbedtls_ssl_derive_keys+0xda>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 80a6314:	2140      	movs	r1, #64	; 0x40
 80a6316:	a806      	add	r0, sp, #24
 80a6318:	f7ff fe2e 	bl	80a5f78 <_ZL15mbedtls_zeroizePvj>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80a631c:	9f05      	ldr	r7, [sp, #20]
                              handshake->randbytes, 64, keyblk, 256 );
 80a631e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80a6322:	f8cd b004 	str.w	fp, [sp, #4]
 80a6326:	f04f 0b40 	mov.w	fp, #64	; 0x40
 80a632a:	9302      	str	r3, [sp, #8]
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80a632c:	372c      	adds	r7, #44	; 0x2c
                              handshake->randbytes, 64, keyblk, 256 );
 80a632e:	f8cd b000 	str.w	fp, [sp]
 80a6332:	f8d5 516c 	ldr.w	r5, [r5, #364]	; 0x16c
 80a6336:	464b      	mov	r3, r9
 80a6338:	4a71      	ldr	r2, [pc, #452]	; (80a6500 <mbedtls_ssl_derive_keys+0x2d8>)
 80a633a:	2130      	movs	r1, #48	; 0x30
 80a633c:	4638      	mov	r0, r7
 80a633e:	47a8      	blx	r5
    if( ret != 0 )
 80a6340:	2800      	cmp	r0, #0
 80a6342:	f040 80c7 	bne.w	80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 80a6346:	4659      	mov	r1, fp
 80a6348:	4648      	mov	r0, r9
 80a634a:	f7ff fe15 	bl	80a5f78 <_ZL15mbedtls_zeroizePvj>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 80a634e:	6873      	ldr	r3, [r6, #4]
 80a6350:	08db      	lsrs	r3, r3, #3
 80a6352:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 80a6354:	7873      	ldrb	r3, [r6, #1]
 80a6356:	2b06      	cmp	r3, #6
 80a6358:	d001      	beq.n	80a635e <mbedtls_ssl_derive_keys+0x136>
 80a635a:	2b08      	cmp	r3, #8
 80a635c:	d10f      	bne.n	80a637e <mbedtls_ssl_derive_keys+0x156>
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;

        transform->ivlen = 12;
 80a635e:	220c      	movs	r2, #12
 80a6360:	60e2      	str	r2, [r4, #12]
        transform->fixed_ivlen = 4;
 80a6362:	2204      	movs	r2, #4
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 80a6364:	2300      	movs	r3, #0
        mac_key_len = 0;

        transform->ivlen = 12;
        transform->fixed_ivlen = 4;
 80a6366:	6122      	str	r2, [r4, #16]

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 80a6368:	6822      	ldr	r2, [r4, #0]
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 80a636a:	6163      	str	r3, [r4, #20]
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 80a636c:	7f12      	ldrb	r2, [r2, #28]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;
 80a636e:	469a      	mov	sl, r3
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 80a6370:	f012 0f02 	tst.w	r2, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 80a6374:	bf14      	ite	ne
 80a6376:	2210      	movne	r2, #16
 80a6378:	2218      	moveq	r2, #24
 80a637a:	60a2      	str	r2, [r4, #8]
 80a637c:	e01d      	b.n	80a63ba <mbedtls_ssl_derive_keys+0x192>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 80a637e:	2201      	movs	r2, #1
 80a6380:	4651      	mov	r1, sl
 80a6382:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a6386:	f7fe fcb5 	bl	80a4cf4 <mbedtls_md_setup>
 80a638a:	2800      	cmp	r0, #0
 80a638c:	f040 80a2 	bne.w	80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
 80a6390:	2201      	movs	r2, #1
 80a6392:	4651      	mov	r1, sl
 80a6394:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a6398:	f7fe fcac 	bl	80a4cf4 <mbedtls_md_setup>
 80a639c:	2800      	cmp	r0, #0
 80a639e:	f040 8099 	bne.w	80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 80a63a2:	4650      	mov	r0, sl
 80a63a4:	f7fe fdb8 	bl	80a4f18 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
 80a63a8:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 80a63aa:	68f1      	ldr	r1, [r6, #12]
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 80a63ac:	4682      	mov	sl, r0
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 80a63ae:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 80a63b0:	7873      	ldrb	r3, [r6, #1]
 80a63b2:	2b07      	cmp	r3, #7
 80a63b4:	d17f      	bne.n	80a64b6 <mbedtls_ssl_derive_keys+0x28e>
            transform->minlen = transform->maclen;
 80a63b6:	f8c4 a008 	str.w	sl, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80a63ba:	f8d8 3000 	ldr.w	r3, [r8]
 80a63be:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80a63c2:	07db      	lsls	r3, r3, #31
 80a63c4:	f53f af4b 	bmi.w	80a625e <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80a63c8:	6863      	ldr	r3, [r4, #4]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
 80a63ca:	ea4f 094a 	mov.w	r9, sl, lsl #1
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 80a63ce:	f8d4 b010 	ldr.w	fp, [r4, #16]
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80a63d2:	eb09 0503 	add.w	r5, r9, r3
 80a63d6:	aa16      	add	r2, sp, #88	; 0x58
 80a63d8:	4415      	add	r5, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
 80a63da:	f1bb 0f00 	cmp.w	fp, #0
 80a63de:	d101      	bne.n	80a63e4 <mbedtls_ssl_derive_keys+0x1bc>
 80a63e0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 80a63e4:	18e9      	adds	r1, r5, r3
 80a63e6:	465a      	mov	r2, fp
 80a63e8:	f104 0018 	add.w	r0, r4, #24
 80a63ec:	9305      	str	r3, [sp, #20]
 80a63ee:	f007 f892 	bl	80ad516 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
 80a63f2:	9b05      	ldr	r3, [sp, #20]
 80a63f4:	465a      	mov	r2, fp
 80a63f6:	eb0b 0103 	add.w	r1, fp, r3
 80a63fa:	4429      	add	r1, r5
 80a63fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a6400:	f007 f889 	bl	80ad516 <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80a6404:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a6408:	2b00      	cmp	r3, #0
 80a640a:	f77f af28 	ble.w	80a625e <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
 80a640e:	f1ba 0f00 	cmp.w	sl, #0
 80a6412:	d00d      	beq.n	80a6430 <mbedtls_ssl_derive_keys+0x208>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 80a6414:	4652      	mov	r2, sl
 80a6416:	a916      	add	r1, sp, #88	; 0x58
 80a6418:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a641c:	f7fe fcba 	bl	80a4d94 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 80a6420:	ab16      	add	r3, sp, #88	; 0x58
 80a6422:	4652      	mov	r2, sl
 80a6424:	eb03 010a 	add.w	r1, r3, sl
 80a6428:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a642c:	f7fe fcb2 	bl	80a4d94 <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
 80a6430:	f8d8 0000 	ldr.w	r0, [r8]
 80a6434:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80a6438:	f1b8 0f00 	cmp.w	r8, #0
 80a643c:	d008      	beq.n	80a6450 <mbedtls_ssl_derive_keys+0x228>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
 80a643e:	f8cd b004 	str.w	fp, [sp, #4]
 80a6442:	6863      	ldr	r3, [r4, #4]
 80a6444:	aa16      	add	r2, sp, #88	; 0x58
 80a6446:	9300      	str	r3, [sp, #0]
 80a6448:	4639      	mov	r1, r7
 80a644a:	4653      	mov	r3, sl
 80a644c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80a644e:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 80a6450:	f104 0750 	add.w	r7, r4, #80	; 0x50
 80a6454:	4631      	mov	r1, r6
 80a6456:	4638      	mov	r0, r7
 80a6458:	f7fa ff2a 	bl	80a12b0 <mbedtls_cipher_setup>
 80a645c:	2800      	cmp	r0, #0
 80a645e:	d139      	bne.n	80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 80a6460:	3490      	adds	r4, #144	; 0x90
 80a6462:	4631      	mov	r1, r6
 80a6464:	4620      	mov	r0, r4
 80a6466:	f7fa ff23 	bl	80a12b0 <mbedtls_cipher_setup>
 80a646a:	bb98      	cbnz	r0, 80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 80a646c:	a916      	add	r1, sp, #88	; 0x58
 80a646e:	2301      	movs	r3, #1
 80a6470:	6872      	ldr	r2, [r6, #4]
 80a6472:	4449      	add	r1, r9
 80a6474:	4638      	mov	r0, r7
 80a6476:	f7fa fd5d 	bl	80a0f34 <mbedtls_cipher_setkey>
 80a647a:	bb58      	cbnz	r0, 80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 80a647c:	4603      	mov	r3, r0
 80a647e:	6872      	ldr	r2, [r6, #4]
 80a6480:	4629      	mov	r1, r5
 80a6482:	4620      	mov	r0, r4
 80a6484:	f7fa fd56 	bl	80a0f34 <mbedtls_cipher_setkey>
 80a6488:	bb20      	cbnz	r0, 80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 80a648a:	7873      	ldrb	r3, [r6, #1]
 80a648c:	2b02      	cmp	r3, #2
 80a648e:	d006      	beq.n	80a649e <mbedtls_ssl_derive_keys+0x276>
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 80a6490:	a816      	add	r0, sp, #88	; 0x58
 80a6492:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a6496:	f7ff fd6f 	bl	80a5f78 <_ZL15mbedtls_zeroizePvj>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
 80a649a:	2000      	movs	r0, #0
 80a649c:	e01a      	b.n	80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
    {
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 80a649e:	2104      	movs	r1, #4
 80a64a0:	4638      	mov	r0, r7
 80a64a2:	f7fa fec7 	bl	80a1234 <mbedtls_cipher_set_padding_mode>
 80a64a6:	b9a8      	cbnz	r0, 80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
            return( ret );
        }

        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 80a64a8:	2104      	movs	r1, #4
 80a64aa:	4620      	mov	r0, r4
 80a64ac:	f7fa fec2 	bl	80a1234 <mbedtls_cipher_set_padding_mode>
 80a64b0:	2800      	cmp	r0, #0
 80a64b2:	d0ed      	beq.n	80a6490 <mbedtls_ssl_derive_keys+0x268>
 80a64b4:	e00e      	b.n	80a64d4 <mbedtls_ssl_derive_keys+0x2ac>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
 80a64b6:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
 80a64b8:	fbba f2f3 	udiv	r2, sl, r3
 80a64bc:	fb03 3302 	mla	r3, r3, r2, r3
 80a64c0:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 80a64c2:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80a64c6:	3a02      	subs	r2, #2
 80a64c8:	2a01      	cmp	r2, #1
 80a64ca:	f63f aec8 	bhi.w	80a625e <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
 80a64ce:	440b      	add	r3, r1
 80a64d0:	60a3      	str	r3, [r4, #8]
 80a64d2:	e772      	b.n	80a63ba <mbedtls_ssl_derive_keys+0x192>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
 80a64d4:	b057      	add	sp, #348	; 0x15c
 80a64d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a64da:	bf00      	nop
 80a64dc:	ffff8f00 	.word	0xffff8f00
 80a64e0:	ffff9400 	.word	0xffff9400
 80a64e4:	080a6161 	.word	0x080a6161
 80a64e8:	080a61ed 	.word	0x080a61ed
 80a64ec:	080a6181 	.word	0x080a6181
 80a64f0:	080a6141 	.word	0x080a6141
 80a64f4:	080a5ff5 	.word	0x080a5ff5
 80a64f8:	080a5f89 	.word	0x080a5f89
 80a64fc:	080aed9d 	.word	0x080aed9d
 80a6500:	080aedab 	.word	0x080aedab

080a6504 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 80a6504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 80a6506:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 80a6508:	4604      	mov	r4, r0
 80a650a:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 80a650c:	b90b      	cbnz	r3, 80a6512 <mbedtls_ssl_fetch_input+0xe>
 80a650e:	6983      	ldr	r3, [r0, #24]
 80a6510:	b19b      	cbz	r3, 80a653a <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 80a6512:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80a6514:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a6516:	1a9b      	subs	r3, r3, r2
 80a6518:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 80a651c:	330d      	adds	r3, #13
 80a651e:	42b3      	cmp	r3, r6
 80a6520:	d30b      	bcc.n	80a653a <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 80a6522:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80a6524:	42ae      	cmp	r6, r5
 80a6526:	d90a      	bls.n	80a653e <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 80a6528:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
 80a652a:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 80a652c:	b14b      	cbz	r3, 80a6542 <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 80a652e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80a6530:	4798      	blx	r3
 80a6532:	2802      	cmp	r0, #2
 80a6534:	d105      	bne.n	80a6542 <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 80a6536:	4812      	ldr	r0, [pc, #72]	; (80a6580 <mbedtls_ssl_fetch_input+0x7c>)
 80a6538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a653a:	4812      	ldr	r0, [pc, #72]	; (80a6584 <mbedtls_ssl_fetch_input+0x80>)
 80a653c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
 80a653e:	2000      	movs	r0, #0
 80a6540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
 80a6542:	69a7      	ldr	r7, [r4, #24]
 80a6544:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80a6546:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80a6548:	b137      	cbz	r7, 80a6558 <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
 80a654a:	6823      	ldr	r3, [r4, #0]
 80a654c:	4401      	add	r1, r0
 80a654e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a6550:	462a      	mov	r2, r5
 80a6552:	69e0      	ldr	r0, [r4, #28]
 80a6554:	47b8      	blx	r7
 80a6556:	e004      	b.n	80a6562 <mbedtls_ssl_fetch_input+0x5e>
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
                                       ssl->in_hdr + ssl->in_left, len );
 80a6558:	4401      	add	r1, r0
 80a655a:	6963      	ldr	r3, [r4, #20]
 80a655c:	462a      	mov	r2, r5
 80a655e:	69e0      	ldr	r0, [r4, #28]
 80a6560:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
 80a6562:	2800      	cmp	r0, #0
 80a6564:	d006      	beq.n	80a6574 <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
 80a6566:	db09      	blt.n	80a657c <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 80a6568:	4285      	cmp	r5, r0
 80a656a:	d305      	bcc.n	80a6578 <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
 80a656c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80a656e:	4418      	add	r0, r3
 80a6570:	6760      	str	r0, [r4, #116]	; 0x74
 80a6572:	e7d6      	b.n	80a6522 <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 80a6574:	4804      	ldr	r0, [pc, #16]	; (80a6588 <mbedtls_ssl_fetch_input+0x84>)
 80a6576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a6578:	4804      	ldr	r0, [pc, #16]	; (80a658c <mbedtls_ssl_fetch_input+0x88>)
 80a657a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
 80a657c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a657e:	bf00      	nop
 80a6580:	ffff9800 	.word	0xffff9800
 80a6584:	ffff8f00 	.word	0xffff8f00
 80a6588:	ffff8d80 	.word	0xffff8d80
 80a658c:	ffff9400 	.word	0xffff9400

080a6590 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 80a6590:	b510      	push	{r4, lr}
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 80a6592:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 80a6594:	4604      	mov	r4, r0
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 80a6596:	b34b      	cbz	r3, 80a65ec <mbedtls_ssl_flush_output+0x5c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 80a6598:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a659c:	b9a3      	cbnz	r3, 80a65c8 <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
 80a659e:	2000      	movs	r0, #0
 80a65a0:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
              ssl->out_msglen - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 80a65a2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80a65a6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80a65aa:	3105      	adds	r1, #5
 80a65ac:	1a89      	subs	r1, r1, r2
 80a65ae:	4401      	add	r1, r0
 80a65b0:	6923      	ldr	r3, [r4, #16]
 80a65b2:	69e0      	ldr	r0, [r4, #28]
 80a65b4:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
 80a65b6:	2800      	cmp	r0, #0
 80a65b8:	dd1b      	ble.n	80a65f2 <mbedtls_ssl_flush_output+0x62>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 80a65ba:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80a65be:	4283      	cmp	r3, r0
 80a65c0:	d316      	bcc.n	80a65f0 <mbedtls_ssl_flush_output+0x60>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
 80a65c2:	1a18      	subs	r0, r3, r0
 80a65c4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
 80a65c8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80a65cc:	2a00      	cmp	r2, #0
 80a65ce:	d1e8      	bne.n	80a65a2 <mbedtls_ssl_flush_output+0x12>
 80a65d0:	2207      	movs	r2, #7

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
        if( ++ssl->out_ctr[i - 1] != 0 )
 80a65d2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80a65d6:	5c8b      	ldrb	r3, [r1, r2]
 80a65d8:	3301      	adds	r3, #1
 80a65da:	b2db      	uxtb	r3, r3
 80a65dc:	548b      	strb	r3, [r1, r2]
 80a65de:	2b00      	cmp	r3, #0
 80a65e0:	d1dd      	bne.n	80a659e <mbedtls_ssl_flush_output+0xe>
        }

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 80a65e2:	f112 32ff 	adds.w	r2, r2, #4294967295
 80a65e6:	d2f4      	bcs.n	80a65d2 <mbedtls_ssl_flush_output+0x42>

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 80a65e8:	4802      	ldr	r0, [pc, #8]	; (80a65f4 <mbedtls_ssl_flush_output+0x64>)
 80a65ea:	bd10      	pop	{r4, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a65ec:	4802      	ldr	r0, [pc, #8]	; (80a65f8 <mbedtls_ssl_flush_output+0x68>)
 80a65ee:	bd10      	pop	{r4, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a65f0:	4802      	ldr	r0, [pc, #8]	; (80a65fc <mbedtls_ssl_flush_output+0x6c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
 80a65f2:	bd10      	pop	{r4, pc}
 80a65f4:	ffff9480 	.word	0xffff9480
 80a65f8:	ffff8f00 	.word	0xffff8f00
 80a65fc:	ffff9400 	.word	0xffff9400

080a6600 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80a6600:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a6602:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80a6606:	b097      	sub	sp, #92	; 0x5c
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a6608:	2b16      	cmp	r3, #22
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80a660a:	4604      	mov	r4, r0
    int ret, done = 0, out_msg_type;
    size_t len = ssl->out_msglen;
 80a660c:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a6610:	d11a      	bne.n	80a6648 <mbedtls_ssl_write_record+0x48>
    {
        out_msg_type = ssl->out_msg[0];
 80a6612:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 80a6616:	780a      	ldrb	r2, [r1, #0]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 80a6618:	b11a      	cbz	r2, 80a6622 <mbedtls_ssl_write_record+0x22>
 80a661a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80a661c:	2b00      	cmp	r3, #0
 80a661e:	f000 8139 	beq.w	80a6894 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 80a6622:	1f2b      	subs	r3, r5, #4
 80a6624:	0c18      	lsrs	r0, r3, #16
 80a6626:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 80a6628:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a662c:	0a18      	lsrs	r0, r3, #8
 80a662e:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 80a6630:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a6634:	70cb      	strb	r3, [r1, #3]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 80a6636:	b13a      	cbz	r2, 80a6648 <mbedtls_ssl_write_record+0x48>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 80a6638:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80a663a:	462a      	mov	r2, r5
 80a663c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80a6640:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a6644:	4620      	mov	r0, r4
 80a6646:	4798      	blx	r3
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 80a6648:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80a664c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80a6650:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80a6652:	68e2      	ldr	r2, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 80a6654:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a6658:	68a1      	ldr	r1, [r4, #8]
        ver[1] = (unsigned char) minor;
 80a665a:	709a      	strb	r2, [r3, #2]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a665c:	7059      	strb	r1, [r3, #1]
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        ssl->out_len[0] = (unsigned char)( len >> 8 );
 80a665e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80a6662:	0a2a      	lsrs	r2, r5, #8
 80a6664:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 80a6666:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80a666a:	705d      	strb	r5, [r3, #1]

        if( ssl->transform_out != NULL )
 80a666c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80a666e:	2800      	cmp	r0, #0
 80a6670:	f000 8107 	beq.w	80a6882 <mbedtls_ssl_write_record+0x282>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 80a6674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a6676:	2b00      	cmp	r3, #0
 80a6678:	f000 810c 	beq.w	80a6894 <mbedtls_ssl_write_record+0x294>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 80a667c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80a667e:	b105      	cbz	r5, 80a6682 <mbedtls_ssl_write_record+0x82>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 80a6680:	786d      	ldrb	r5, [r5, #1]
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 80a6682:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80a6686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80a668a:	f200 8105 	bhi.w	80a6898 <mbedtls_ssl_write_record+0x298>

    /*
     * Add MAC before if needed
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( mode == MBEDTLS_MODE_STREAM ||
 80a668e:	2d07      	cmp	r5, #7
 80a6690:	d001      	beq.n	80a6696 <mbedtls_ssl_write_record+0x96>
 80a6692:	2d02      	cmp	r5, #2
 80a6694:	d13b      	bne.n	80a670e <mbedtls_ssl_write_record+0x10e>
        }
        else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80a6696:	68e3      	ldr	r3, [r4, #12]
 80a6698:	2b00      	cmp	r3, #0
 80a669a:	f340 80fb 	ble.w	80a6894 <mbedtls_ssl_write_record+0x294>
        {
            unsigned char mac[MBEDTLS_SSL_MAC_ADD];

            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 80a669e:	2208      	movs	r2, #8
 80a66a0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80a66a4:	3038      	adds	r0, #56	; 0x38
 80a66a6:	f7fe fbd5 	bl	80a4e54 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 80a66aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80a66ac:	2203      	movs	r2, #3
 80a66ae:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80a66b2:	3038      	adds	r0, #56	; 0x38
 80a66b4:	f7fe fbce 	bl	80a4e54 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 80a66b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80a66ba:	2202      	movs	r2, #2
 80a66bc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80a66c0:	3038      	adds	r0, #56	; 0x38
 80a66c2:	f7fe fbc7 	bl	80a4e54 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 80a66c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
                             ssl->out_msg, ssl->out_msglen );
 80a66c8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80a66cc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a66d0:	3038      	adds	r0, #56	; 0x38
 80a66d2:	f7fe fbbf 	bl	80a4e54 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 80a66d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80a66d8:	a90a      	add	r1, sp, #40	; 0x28
 80a66da:	3038      	adds	r0, #56	; 0x38
 80a66dc:	f7fe fbca 	bl	80a4e74 <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 80a66e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
        auth_done++;
 80a66e2:	2601      	movs	r6, #1
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
                             ssl->out_msg, ssl->out_msglen );
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 80a66e4:	3038      	adds	r0, #56	; 0x38
 80a66e6:	f7fe fbf5 	bl	80a4ed4 <mbedtls_md_hmac_reset>

            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 80a66ea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80a66ee:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80a66f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80a66f4:	4418      	add	r0, r3
 80a66f6:	6952      	ldr	r2, [r2, #20]
 80a66f8:	a90a      	add	r1, sp, #40	; 0x28
 80a66fa:	f006 ff0c 	bl	80ad516 <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
 80a66fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a6700:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80a6704:	695b      	ldr	r3, [r3, #20]
 80a6706:	4413      	add	r3, r2
 80a6708:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 80a670c:	e000      	b.n	80a6710 <mbedtls_ssl_write_record+0x110>
 * Encryption/decryption functions
 */
static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
{
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 80a670e:	2600      	movs	r6, #0
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 80a6710:	2d06      	cmp	r5, #6
 80a6712:	d001      	beq.n	80a6718 <mbedtls_ssl_write_record+0x118>
 80a6714:	2d08      	cmp	r5, #8
 80a6716:	d15c      	bne.n	80a67d2 <mbedtls_ssl_write_record+0x1d2>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 80a6718:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 80a671a:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 80a671e:	681a      	ldr	r2, [r3, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 80a6720:	6879      	ldr	r1, [r7, #4]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80a6722:	7f12      	ldrb	r2, [r2, #28]

        memcpy( add_data, ssl->out_ctr, 8 );
 80a6724:	6838      	ldr	r0, [r7, #0]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80a6726:	f012 0f02 	tst.w	r2, #2

        memcpy( add_data, ssl->out_ctr, 8 );
 80a672a:	aa0a      	add	r2, sp, #40	; 0x28
 80a672c:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 80a672e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a6732:	68a1      	ldr	r1, [r4, #8]
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
 80a6734:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80a6738:	68e2      	ldr	r2, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a673a:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 80a673e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 80a6742:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80a6746:	bf08      	it	eq
 80a6748:	2510      	moveq	r5, #16

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 80a674a:	ea4f 2112 	mov.w	r1, r2, lsr #8
 80a674e:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
        add_data[12] = ssl->out_msglen & 0xFF;
 80a6752:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 80a6756:	6919      	ldr	r1, [r3, #16]
 80a6758:	68da      	ldr	r2, [r3, #12]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80a675a:	bf18      	it	ne
 80a675c:	2508      	movne	r5, #8
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 80a675e:	1a52      	subs	r2, r2, r1
 80a6760:	2a08      	cmp	r2, #8
 80a6762:	f040 8097 	bne.w	80a6894 <mbedtls_ssl_write_record+0x294>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
                             ssl->out_ctr, 8 );
 80a6766:	683a      	ldr	r2, [r7, #0]
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 80a6768:	3318      	adds	r3, #24
                             ssl->out_ctr, 8 );
 80a676a:	505a      	str	r2, [r3, r1]
 80a676c:	687a      	ldr	r2, [r7, #4]
 80a676e:	1858      	adds	r0, r3, r1
 80a6770:	6042      	str	r2, [r0, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 80a6772:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80a6776:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80a677a:	680b      	ldr	r3, [r1, #0]
 80a677c:	6013      	str	r3, [r2, #0]
 80a677e:	684b      	ldr	r3, [r1, #4]
 80a6780:	6053      	str	r3, [r2, #4]
        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
 80a6782:	6ba0      	ldr	r0, [r4, #56]	; 0x38

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
 80a6784:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 80a6788:	68c3      	ldr	r3, [r0, #12]
 80a678a:	6901      	ldr	r1, [r0, #16]
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
 80a678c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 80a6790:	443b      	add	r3, r7
 80a6792:	1a5b      	subs	r3, r3, r1
 80a6794:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 80a6798:	19d3      	adds	r3, r2, r7
 80a679a:	9305      	str	r3, [sp, #20]
 80a679c:	ab09      	add	r3, sp, #36	; 0x24
 80a679e:	9304      	str	r3, [sp, #16]
 80a67a0:	230d      	movs	r3, #13
 80a67a2:	9300      	str	r3, [sp, #0]
 80a67a4:	9506      	str	r5, [sp, #24]
 80a67a6:	9203      	str	r2, [sp, #12]
 80a67a8:	9702      	str	r7, [sp, #8]
 80a67aa:	9201      	str	r2, [sp, #4]
 80a67ac:	68c2      	ldr	r2, [r0, #12]
 80a67ae:	f100 0118 	add.w	r1, r0, #24
 80a67b2:	ab0a      	add	r3, sp, #40	; 0x28
 80a67b4:	3050      	adds	r0, #80	; 0x50
 80a67b6:	f7fa fdbb 	bl	80a1330 <mbedtls_cipher_auth_encrypt>
 80a67ba:	2800      	cmp	r0, #0
 80a67bc:	d173      	bne.n	80a68a6 <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
 80a67be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a67c0:	429f      	cmp	r7, r3
 80a67c2:	d167      	bne.n	80a6894 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 80a67c4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        auth_done++;
 80a67c8:	3601      	adds	r6, #1
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 80a67ca:	441d      	add	r5, r3
 80a67cc:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 80a67d0:	e04c      	b.n	80a686c <mbedtls_ssl_write_record+0x26c>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 80a67d2:	2d02      	cmp	r5, #2
 80a67d4:	d15e      	bne.n	80a6894 <mbedtls_ssl_write_record+0x294>
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
 80a67d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
    {
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;
 80a67d8:	2200      	movs	r2, #0
 80a67da:	920a      	str	r2, [sp, #40]	; 0x28

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 80a67dc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
                 ssl->transform_out->ivlen;
 80a67e0:	68d9      	ldr	r1, [r3, #12]
 80a67e2:	1c45      	adds	r5, r0, #1
 80a67e4:	fbb5 f3f1 	udiv	r3, r5, r1
 80a67e8:	fb01 5513 	mls	r5, r1, r3, r5
 80a67ec:	1b4b      	subs	r3, r1, r5
        if( padlen == ssl->transform_out->ivlen )
 80a67ee:	4299      	cmp	r1, r3
 80a67f0:	d054      	beq.n	80a689c <mbedtls_ssl_write_record+0x29c>
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 80a67f2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a67f6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80a67fa:	4411      	add	r1, r2
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 80a67fc:	3201      	adds	r2, #1
 80a67fe:	4293      	cmp	r3, r2
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 80a6800:	540b      	strb	r3, [r1, r0]
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 80a6802:	d2f6      	bcs.n	80a67f2 <mbedtls_ssl_write_record+0x1f2>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 80a6804:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 80a6808:	3501      	adds	r5, #1
 80a680a:	441d      	add	r5, r3
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80a680c:	68e3      	ldr	r3, [r4, #12]
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 80a680e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80a6812:	2b01      	cmp	r3, #1
 80a6814:	dc02      	bgt.n	80a681c <mbedtls_ssl_write_record+0x21c>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;

        enc_msglen = ssl->out_msglen;
        enc_msg = ssl->out_msg;
 80a6816:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80a681a:	e018      	b.n	80a684e <mbedtls_ssl_write_record+0x24e>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            /*
             * Generate IV
             */
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 80a681c:	6823      	ldr	r3, [r4, #0]
 80a681e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                  ssl->transform_out->ivlen );
 80a6820:	699d      	ldr	r5, [r3, #24]
 80a6822:	68ca      	ldr	r2, [r1, #12]
 80a6824:	69d8      	ldr	r0, [r3, #28]
 80a6826:	3118      	adds	r1, #24
 80a6828:	47a8      	blx	r5
            if( ret != 0 )
 80a682a:	2800      	cmp	r0, #0
 80a682c:	d13b      	bne.n	80a68a6 <mbedtls_ssl_write_record+0x2a6>
                return( ret );

            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 80a682e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    ssl->transform_out->ivlen );
 80a6830:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80a6834:	68ca      	ldr	r2, [r1, #12]
 80a6836:	3118      	adds	r1, #24
 80a6838:	f006 fe6d 	bl	80ad516 <memcpy>
            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 80a683c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
 80a683e:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 80a6842:	68d2      	ldr	r2, [r2, #12]
                    ssl->transform_out->ivlen );

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
 80a6844:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 80a6848:	442a      	add	r2, r5
 80a684a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
                            "including %d bytes of IV and %d bytes of padding",
                            ssl->out_msglen, ssl->transform_out->ivlen,
                            padlen + 1 ) );

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 80a684e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80a6850:	aa0a      	add	r2, sp, #40	; 0x28
 80a6852:	9202      	str	r2, [sp, #8]
 80a6854:	9301      	str	r3, [sp, #4]
 80a6856:	9500      	str	r5, [sp, #0]
 80a6858:	68c2      	ldr	r2, [r0, #12]
 80a685a:	f100 0118 	add.w	r1, r0, #24
 80a685e:	3050      	adds	r0, #80	; 0x50
 80a6860:	f7fa fd44 	bl	80a12ec <mbedtls_cipher_crypt>
 80a6864:	b9f8      	cbnz	r0, 80a68a6 <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( enc_msglen != olen )
 80a6866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6868:	429d      	cmp	r5, r3
 80a686a:	d113      	bne.n	80a6894 <mbedtls_ssl_write_record+0x294>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 80a686c:	2e01      	cmp	r6, #1
 80a686e:	d111      	bne.n	80a6894 <mbedtls_ssl_write_record+0x294>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
 80a6870:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 80a6874:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80a6878:	0a19      	lsrs	r1, r3, #8
 80a687a:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 80a687c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80a6880:	7053      	strb	r3, [r2, #1]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 80a6882:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80a6886:	4620      	mov	r0, r4
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 80a6888:	3305      	adds	r3, #5
 80a688a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80a688e:	f7ff fe7f 	bl	80a6590 <mbedtls_ssl_flush_output>
 80a6892:	e008      	b.n	80a68a6 <mbedtls_ssl_write_record+0x2a6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a6894:	4805      	ldr	r0, [pc, #20]	; (80a68ac <mbedtls_ssl_write_record+0x2ac>)
 80a6896:	e006      	b.n	80a68a6 <mbedtls_ssl_write_record+0x2a6>
    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a6898:	4805      	ldr	r0, [pc, #20]	; (80a68b0 <mbedtls_ssl_write_record+0x2b0>)
 80a689a:	e004      	b.n	80a68a6 <mbedtls_ssl_write_record+0x2a6>
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 80a689c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80a68a0:	541a      	strb	r2, [r3, r0]
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;
 80a68a2:	4613      	mov	r3, r2
 80a68a4:	e7ae      	b.n	80a6804 <mbedtls_ssl_write_record+0x204>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
}
 80a68a6:	b017      	add	sp, #92	; 0x5c
 80a68a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a68aa:	bf00      	nop
 80a68ac:	ffff9400 	.word	0xffff9400
 80a68b0:	ffff8f00 	.word	0xffff8f00

080a68b4 <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 80a68b4:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 80a68b6:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80a68b8:	2c03      	cmp	r4, #3
 80a68ba:	d90f      	bls.n	80a68dc <mbedtls_ssl_prepare_handshake_record+0x28>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
 80a68bc:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 80a68be:	788a      	ldrb	r2, [r1, #2]
 80a68c0:	784b      	ldrb	r3, [r1, #1]
 80a68c2:	0212      	lsls	r2, r2, #8
 80a68c4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80a68c8:	78ca      	ldrb	r2, [r1, #3]
 80a68ca:	4313      	orrs	r3, r2
 80a68cc:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80a68ce:	4a04      	ldr	r2, [pc, #16]	; (80a68e0 <mbedtls_ssl_prepare_handshake_record+0x2c>)
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
                    ( ssl->in_msg[2] << 8  ) |
                      ssl->in_msg[3] );
 80a68d0:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80a68d2:	429c      	cmp	r4, r3
 80a68d4:	bf34      	ite	cc
 80a68d6:	4610      	movcc	r0, r2
 80a68d8:	2000      	movcs	r0, #0
 80a68da:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80a68dc:	4801      	ldr	r0, [pc, #4]	; (80a68e4 <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
 80a68de:	bd10      	pop	{r4, pc}
 80a68e0:	ffff8f80 	.word	0xffff8f80
 80a68e4:	ffff8e00 	.word	0xffff8e00

080a68e8 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80a68e8:	6842      	ldr	r2, [r0, #4]

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 80a68ea:	b410      	push	{r4}

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80a68ec:	2a10      	cmp	r2, #16
 80a68ee:	d008      	beq.n	80a6902 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
 80a68f0:	6b02      	ldr	r2, [r0, #48]	; 0x30
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80a68f2:	b132      	cbz	r2, 80a6902 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 80a68f4:	f8d2 4160 	ldr.w	r4, [r2, #352]	; 0x160
 80a68f8:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80a68fa:	4623      	mov	r3, r4
 80a68fc:	6f82      	ldr	r2, [r0, #120]	; 0x78
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 80a68fe:	bc10      	pop	{r4}
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 80a6900:	4718      	bx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 80a6902:	bc10      	pop	{r4}
 80a6904:	4770      	bx	lr
	...

080a6908 <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 80a6908:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a690a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 80a690c:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a690e:	2b16      	cmp	r3, #22
 80a6910:	d004      	beq.n	80a691c <mbedtls_ssl_handle_message_type+0x14>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 80a6912:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80a6914:	2b15      	cmp	r3, #21
 80a6916:	d006      	beq.n	80a6926 <mbedtls_ssl_handle_message_type+0x1e>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 80a6918:	2000      	movs	r0, #0
 80a691a:	bd10      	pop	{r4, pc}
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 80a691c:	f7ff ffca 	bl	80a68b4 <mbedtls_ssl_prepare_handshake_record>
 80a6920:	2800      	cmp	r0, #0
 80a6922:	d0f6      	beq.n	80a6912 <mbedtls_ssl_handle_message_type+0xa>
 80a6924:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
    {
        if( ssl->in_msglen != 2 )
 80a6926:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a6928:	2b02      	cmp	r3, #2
 80a692a:	d10c      	bne.n	80a6946 <mbedtls_ssl_handle_message_type+0x3e>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 80a692c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80a692e:	781a      	ldrb	r2, [r3, #0]
 80a6930:	2a02      	cmp	r2, #2
 80a6932:	d00a      	beq.n	80a694a <mbedtls_ssl_handle_message_type+0x42>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80a6934:	2a01      	cmp	r2, #1
 80a6936:	d10a      	bne.n	80a694e <mbedtls_ssl_handle_message_type+0x46>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 80a6938:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80a693a:	b153      	cbz	r3, 80a6952 <mbedtls_ssl_handle_message_type+0x4a>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 80a693c:	2b64      	cmp	r3, #100	; 0x64
 80a693e:	4806      	ldr	r0, [pc, #24]	; (80a6958 <mbedtls_ssl_handle_message_type+0x50>)
 80a6940:	bf08      	it	eq
 80a6942:	2000      	moveq	r0, #0
 80a6944:	bd10      	pop	{r4, pc}
            /* Note: Standard allows for more than one 2 byte alert
               to be packed in a single message, but Mbed TLS doesn't
               currently support this. */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80a6946:	4805      	ldr	r0, [pc, #20]	; (80a695c <mbedtls_ssl_handle_message_type+0x54>)
 80a6948:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 80a694a:	4805      	ldr	r0, [pc, #20]	; (80a6960 <mbedtls_ssl_handle_message_type+0x58>)
 80a694c:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 80a694e:	4802      	ldr	r0, [pc, #8]	; (80a6958 <mbedtls_ssl_handle_message_type+0x50>)
 80a6950:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 80a6952:	4804      	ldr	r0, [pc, #16]	; (80a6964 <mbedtls_ssl_handle_message_type+0x5c>)
        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
}
 80a6954:	bd10      	pop	{r4, pc}
 80a6956:	bf00      	nop
 80a6958:	ffff9980 	.word	0xffff9980
 80a695c:	ffff8e00 	.word	0xffff8e00
 80a6960:	ffff8880 	.word	0xffff8880
 80a6964:	ffff8780 	.word	0xffff8780

080a6968 <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 80a6968:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 80a696a:	b180      	cbz	r0, 80a698e <mbedtls_ssl_send_alert_message+0x26>
 80a696c:	6804      	ldr	r4, [r0, #0]
 80a696e:	b174      	cbz	r4, 80a698e <mbedtls_ssl_send_alert_message+0x26>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 80a6970:	2415      	movs	r4, #21
 80a6972:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
 80a6976:	2402      	movs	r4, #2
 80a6978:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
 80a697c:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 80a6980:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
 80a6982:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 80a6986:	705a      	strb	r2, [r3, #1]
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 80a6988:	bc10      	pop	{r4}
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a698a:	f7ff be39 	b.w	80a6600 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 80a698e:	4801      	ldr	r0, [pc, #4]	; (80a6994 <mbedtls_ssl_send_alert_message+0x2c>)
 80a6990:	bc10      	pop	{r4}
 80a6992:	4770      	bx	lr
 80a6994:	ffff8f00 	.word	0xffff8f00

080a6998 <mbedtls_ssl_read_record_layer>:

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 80a6998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 80a699c:	6f81      	ldr	r1, [r0, #120]	; 0x78

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 80a699e:	b096      	sub	sp, #88	; 0x58
 80a69a0:	4604      	mov	r4, r0
 80a69a2:	6e83      	ldr	r3, [r0, #104]	; 0x68
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 80a69a4:	b181      	cbz	r1, 80a69c8 <mbedtls_ssl_read_record_layer+0x30>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 80a69a6:	2b00      	cmp	r3, #0
 80a69a8:	f040 821c 	bne.w	80a6de4 <mbedtls_ssl_read_record_layer+0x44c>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 80a69ac:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80a69ae:	4291      	cmp	r1, r2
 80a69b0:	d206      	bcs.n	80a69c0 <mbedtls_ssl_read_record_layer+0x28>
        {
            ssl->in_msglen -= ssl->in_hslen;
 80a69b2:	1a52      	subs	r2, r2, r1
 80a69b4:	6702      	str	r2, [r0, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 80a69b6:	6e40      	ldr	r0, [r0, #100]	; 0x64
                     ssl->in_msglen );
 80a69b8:	4401      	add	r1, r0
 80a69ba:	f006 fdb7 	bl	80ad52c <memmove>
 80a69be:	e000      	b.n	80a69c2 <mbedtls_ssl_read_record_layer+0x2a>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 80a69c0:	6703      	str	r3, [r0, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 80a69c2:	2300      	movs	r3, #0
 80a69c4:	67a3      	str	r3, [r4, #120]	; 0x78
 80a69c6:	e003      	b.n	80a69d0 <mbedtls_ssl_read_record_layer+0x38>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 80a69c8:	2b00      	cmp	r3, #0
 80a69ca:	f040 820f 	bne.w	80a6dec <mbedtls_ssl_read_record_layer+0x454>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 80a69ce:	6703      	str	r3, [r0, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
 80a69d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a69d2:	2b00      	cmp	r3, #0
 80a69d4:	f040 820a 	bne.w	80a6dec <mbedtls_ssl_read_record_layer+0x454>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 80a69d8:	2105      	movs	r1, #5
 80a69da:	4620      	mov	r0, r4
 80a69dc:	f7ff fd92 	bl	80a6504 <mbedtls_ssl_fetch_input>
 80a69e0:	2800      	cmp	r0, #0
 80a69e2:	f040 8204 	bne.w	80a6dee <mbedtls_ssl_read_record_layer+0x456>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 80a69e6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 80a69e8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 80a69ea:	7813      	ldrb	r3, [r2, #0]
 80a69ec:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 80a69ee:	7805      	ldrb	r5, [r0, #0]
 80a69f0:	7841      	ldrb	r1, [r0, #1]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80a69f2:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 80a69f4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80a69f8:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80a69fa:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 80a69fc:	7855      	ldrb	r5, [r2, #1]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 80a69fe:	6820      	ldr	r0, [r4, #0]
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 80a6a00:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80a6a02:	d905      	bls.n	80a6a10 <mbedtls_ssl_read_record_layer+0x78>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80a6a04:	220a      	movs	r2, #10
 80a6a06:	2102      	movs	r1, #2
 80a6a08:	4620      	mov	r0, r4
 80a6a0a:	f7ff ffad 	bl	80a6968 <mbedtls_ssl_send_alert_message>
 80a6a0e:	e1eb      	b.n	80a6de8 <mbedtls_ssl_read_record_layer+0x450>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 80a6a10:	68a3      	ldr	r3, [r4, #8]
 80a6a12:	429d      	cmp	r5, r3
 80a6a14:	f040 81e8 	bne.w	80a6de8 <mbedtls_ssl_read_record_layer+0x450>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 80a6a18:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80a6a1c:	429a      	cmp	r2, r3
 80a6a1e:	f300 81e3 	bgt.w	80a6de8 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 80a6a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80a6a24:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a6a26:	1a9b      	subs	r3, r3, r2
 80a6a28:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 80a6a2c:	330d      	adds	r3, #13
 80a6a2e:	4299      	cmp	r1, r3
 80a6a30:	f200 81da 	bhi.w	80a6de8 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 80a6a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80a6a36:	b923      	cbnz	r3, 80a6a42 <mbedtls_ssl_read_record_layer+0xaa>
    {
        if( ssl->in_msglen < 1 ||
 80a6a38:	1e4b      	subs	r3, r1, #1
 80a6a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80a6a3e:	d30c      	bcc.n	80a6a5a <mbedtls_ssl_read_record_layer+0xc2>
 80a6a40:	e1d2      	b.n	80a6de8 <mbedtls_ssl_read_record_layer+0x450>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 80a6a42:	689b      	ldr	r3, [r3, #8]
 80a6a44:	4299      	cmp	r1, r3
 80a6a46:	f0c0 81cf 	bcc.w	80a6de8 <mbedtls_ssl_read_record_layer+0x450>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 80a6a4a:	68e2      	ldr	r2, [r4, #12]
 80a6a4c:	2a00      	cmp	r2, #0
 80a6a4e:	dd04      	ble.n	80a6a5a <mbedtls_ssl_read_record_layer+0xc2>
 80a6a50:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80a6a54:	4299      	cmp	r1, r3
 80a6a56:	f200 81c7 	bhi.w	80a6de8 <mbedtls_ssl_read_record_layer+0x450>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 80a6a5a:	3105      	adds	r1, #5
 80a6a5c:	4620      	mov	r0, r4
 80a6a5e:	f7ff fd51 	bl	80a6504 <mbedtls_ssl_fetch_input>
 80a6a62:	2800      	cmp	r0, #0
 80a6a64:	f040 81c3 	bne.w	80a6dee <mbedtls_ssl_read_record_layer+0x456>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 80a6a68:	6b66      	ldr	r6, [r4, #52]	; 0x34
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
 80a6a6a:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 80a6a6c:	2e00      	cmp	r6, #0
 80a6a6e:	f000 81bd 	beq.w	80a6dec <mbedtls_ssl_read_record_layer+0x454>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 80a6a72:	6a23      	ldr	r3, [r4, #32]
 80a6a74:	2b00      	cmp	r3, #0
 80a6a76:	f000 81b5 	beq.w	80a6de4 <mbedtls_ssl_read_record_layer+0x44c>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 80a6a7a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80a6a7e:	b103      	cbz	r3, 80a6a82 <mbedtls_ssl_read_record_layer+0xea>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 80a6a80:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
 80a6a82:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80a6a84:	68b2      	ldr	r2, [r6, #8]
 80a6a86:	4295      	cmp	r5, r2
 80a6a88:	f0c0 819d 	bcc.w	80a6dc6 <mbedtls_ssl_read_record_layer+0x42e>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 80a6a8c:	2b06      	cmp	r3, #6
 80a6a8e:	d001      	beq.n	80a6a94 <mbedtls_ssl_read_record_layer+0xfc>
 80a6a90:	2b08      	cmp	r3, #8
 80a6a92:	d175      	bne.n	80a6b80 <mbedtls_ssl_read_record_layer+0x1e8>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 80a6a94:	6833      	ldr	r3, [r6, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 80a6a96:	68f2      	ldr	r2, [r6, #12]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80a6a98:	7f1b      	ldrb	r3, [r3, #28]
 80a6a9a:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 80a6a9e:	6933      	ldr	r3, [r6, #16]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80a6aa0:	bf14      	ite	ne
 80a6aa2:	2708      	movne	r7, #8
 80a6aa4:	2710      	moveq	r7, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 80a6aa6:	1ad3      	subs	r3, r2, r3

        if( ssl->in_msglen < explicit_iv_len + taglen )
 80a6aa8:	19da      	adds	r2, r3, r7
 80a6aaa:	4295      	cmp	r5, r2
 80a6aac:	f0c0 818b 	bcc.w	80a6dc6 <mbedtls_ssl_read_record_layer+0x42e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 80a6ab0:	1aed      	subs	r5, r5, r3
 80a6ab2:	1bed      	subs	r5, r5, r7

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
 80a6ab4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
 80a6ab6:	6725      	str	r5, [r4, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
 80a6ab8:	6810      	ldr	r0, [r2, #0]
 80a6aba:	6851      	ldr	r1, [r2, #4]
 80a6abc:	ab0a      	add	r3, sp, #40	; 0x28
 80a6abe:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 80a6ac0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a6ac2:	68a2      	ldr	r2, [r4, #8]
        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
 80a6ac4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80a6ac8:	68e3      	ldr	r3, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a6aca:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 80a6ace:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 80a6ad2:	0a2b      	lsrs	r3, r5, #8
 80a6ad4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        add_data[12] = ssl->in_msglen & 0xFF;
 80a6ad8:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 80a6adc:	6933      	ldr	r3, [r6, #16]
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 80a6ade:	68f2      	ldr	r2, [r6, #12]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
 80a6ae0:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
        add_data[12] = ssl->in_msglen & 0xFF;

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 80a6ae4:	f106 0028 	add.w	r0, r6, #40	; 0x28
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 80a6ae8:	1ad2      	subs	r2, r2, r3
 80a6aea:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80a6aec:	4418      	add	r0, r3
 80a6aee:	f006 fd12 	bl	80ad516 <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 80a6af2:	eb08 0305 	add.w	r3, r8, r5
 80a6af6:	9305      	str	r3, [sp, #20]
 80a6af8:	ab09      	add	r3, sp, #36	; 0x24
 80a6afa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a6afc:	9304      	str	r3, [sp, #16]
 80a6afe:	230d      	movs	r3, #13
 80a6b00:	9300      	str	r3, [sp, #0]
 80a6b02:	9706      	str	r7, [sp, #24]
 80a6b04:	f8cd 800c 	str.w	r8, [sp, #12]
 80a6b08:	9502      	str	r5, [sp, #8]
 80a6b0a:	f8cd 8004 	str.w	r8, [sp, #4]
 80a6b0e:	68c2      	ldr	r2, [r0, #12]
 80a6b10:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80a6b14:	ab0a      	add	r3, sp, #40	; 0x28
 80a6b16:	3090      	adds	r0, #144	; 0x90
 80a6b18:	f7fa fc34 	bl	80a1384 <mbedtls_cipher_auth_decrypt>
 80a6b1c:	b128      	cbz	r0, 80a6b2a <mbedtls_ssl_read_record_layer+0x192>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 80a6b1e:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 80a6b22:	f000 8150 	beq.w	80a6dc6 <mbedtls_ssl_read_record_layer+0x42e>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 80a6b26:	b328      	cbz	r0, 80a6b74 <mbedtls_ssl_read_record_layer+0x1dc>
 80a6b28:	e161      	b.n	80a6dee <mbedtls_ssl_read_record_layer+0x456>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
 80a6b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a6b2c:	429d      	cmp	r5, r3
 80a6b2e:	f040 8159 	bne.w	80a6de4 <mbedtls_ssl_read_record_layer+0x44c>
 80a6b32:	e007      	b.n	80a6b44 <mbedtls_ssl_read_record_layer+0x1ac>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 80a6b34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 80a6b38:	2b00      	cmp	r3, #0
 80a6b3a:	f040 8144 	bne.w	80a6dc6 <mbedtls_ssl_read_record_layer+0x42e>
        auth_done++;

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
 80a6b3e:	2d00      	cmp	r5, #0
 80a6b40:	f000 8141 	beq.w	80a6dc6 <mbedtls_ssl_read_record_layer+0x42e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
 80a6b44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a6b46:	2b00      	cmp	r3, #0
 80a6b48:	f040 8144 	bne.w	80a6dd4 <mbedtls_ssl_read_record_layer+0x43c>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 80a6b4c:	68e3      	ldr	r3, [r4, #12]
 80a6b4e:	2b03      	cmp	r3, #3
 80a6b50:	f000 813b 	beq.w	80a6dca <mbedtls_ssl_read_record_layer+0x432>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 80a6b54:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80a6b56:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 80a6b58:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 80a6b5a:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 80a6b5c:	f300 8133 	bgt.w	80a6dc6 <mbedtls_ssl_read_record_layer+0x42e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 80a6b60:	2208      	movs	r2, #8
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
 80a6b62:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80a6b64:	3a01      	subs	r2, #1
 80a6b66:	5c8b      	ldrb	r3, [r1, r2]
 80a6b68:	3301      	adds	r3, #1
 80a6b6a:	b2db      	uxtb	r3, r3
 80a6b6c:	548b      	strb	r3, [r1, r2]
 80a6b6e:	2b00      	cmp	r3, #0
 80a6b70:	f000 8133 	beq.w	80a6dda <mbedtls_ssl_read_record_layer+0x442>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 80a6b74:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a6b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80a6b7a:	f240 8137 	bls.w	80a6dec <mbedtls_ssl_read_record_layer+0x454>
 80a6b7e:	e133      	b.n	80a6de8 <mbedtls_ssl_read_record_layer+0x450>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 80a6b80:	2b02      	cmp	r3, #2
 80a6b82:	f040 812f 	bne.w	80a6de4 <mbedtls_ssl_read_record_layer+0x44c>
        int ret;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        size_t dec_msglen;
        size_t minlen = 0;
        size_t olen = 0;
 80a6b86:	2300      	movs	r3, #0
 80a6b88:	930a      	str	r3, [sp, #40]	; 0x28

        /*
         * Check immediate ciphertext sanity
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80a6b8a:	68e0      	ldr	r0, [r4, #12]
 80a6b8c:	68f2      	ldr	r2, [r6, #12]
            minlen += ssl->transform_in->ivlen;
 80a6b8e:	2802      	cmp	r0, #2
 80a6b90:	bfa8      	it	ge
 80a6b92:	4613      	movge	r3, r2
#endif

        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 80a6b94:	18d1      	adds	r1, r2, r3
 80a6b96:	428d      	cmp	r5, r1
 80a6b98:	f0c0 8115 	bcc.w	80a6dc6 <mbedtls_ssl_read_record_layer+0x42e>
 80a6b9c:	6971      	ldr	r1, [r6, #20]
 80a6b9e:	3101      	adds	r1, #1
 80a6ba0:	440b      	add	r3, r1
 80a6ba2:	429d      	cmp	r5, r3
 80a6ba4:	f0c0 810f 	bcc.w	80a6dc6 <mbedtls_ssl_read_record_layer+0x42e>
#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */

        /*
         * Check length sanity
         */
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 80a6ba8:	fbb5 f6f2 	udiv	r6, r5, r2
 80a6bac:	fb02 5616 	mls	r6, r2, r6, r5
 80a6bb0:	2e00      	cmp	r6, #0
 80a6bb2:	f040 8108 	bne.w	80a6dc6 <mbedtls_ssl_read_record_layer+0x42e>

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80a6bb6:	2801      	cmp	r0, #1
                                ssl->transform_in->maclen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }

        dec_msglen = ssl->in_msglen;
        dec_msg = ssl->in_msg;
 80a6bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80a6bba:	dd0d      	ble.n	80a6bd8 <mbedtls_ssl_read_record_layer+0x240>
        {
            dec_msglen -= ssl->transform_in->ivlen;
 80a6bbc:	1aad      	subs	r5, r5, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 80a6bbe:	4632      	mov	r2, r6
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;
 80a6bc0:	6725      	str	r5, [r4, #112]	; 0x70

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 80a6bc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a6bc4:	68c8      	ldr	r0, [r1, #12]
 80a6bc6:	4290      	cmp	r0, r2
 80a6bc8:	d906      	bls.n	80a6bd8 <mbedtls_ssl_read_record_layer+0x240>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 80a6bca:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80a6bcc:	4411      	add	r1, r2
 80a6bce:	5c80      	ldrb	r0, [r0, r2]
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 80a6bd0:	3201      	adds	r2, #1
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 80a6bd2:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
 80a6bd6:	e7f4      	b.n	80a6bc2 <mbedtls_ssl_read_record_layer+0x22a>
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 80a6bd8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a6bda:	af0a      	add	r7, sp, #40	; 0x28
 80a6bdc:	9702      	str	r7, [sp, #8]
 80a6bde:	9301      	str	r3, [sp, #4]
 80a6be0:	9500      	str	r5, [sp, #0]
 80a6be2:	68c2      	ldr	r2, [r0, #12]
 80a6be4:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80a6be8:	3090      	adds	r0, #144	; 0x90
 80a6bea:	f7fa fb7f 	bl	80a12ec <mbedtls_cipher_crypt>
 80a6bee:	2800      	cmp	r0, #0
 80a6bf0:	f040 80fd 	bne.w	80a6dee <mbedtls_ssl_read_record_layer+0x456>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( dec_msglen != olen )
 80a6bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6bf6:	429d      	cmp	r5, r3
 80a6bf8:	f040 80f4 	bne.w	80a6de4 <mbedtls_ssl_read_record_layer+0x44c>
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 80a6bfc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a6bfe:	6e65      	ldr	r5, [r4, #100]	; 0x64

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 80a6c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 80a6c02:	18ea      	adds	r2, r5, r3
 80a6c04:	f812 ac01 	ldrb.w	sl, [r2, #-1]

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 80a6c08:	f8d1 c014 	ldr.w	ip, [r1, #20]
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 80a6c0c:	f10a 0e01 	add.w	lr, sl, #1

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 80a6c10:	eb0e 020c 	add.w	r2, lr, ip
 80a6c14:	4293      	cmp	r3, r2
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 80a6c16:	68e2      	ldr	r2, [r4, #12]
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
#endif
            padlen = 0;
 80a6c18:	bf34      	ite	cc
 80a6c1a:	4686      	movcc	lr, r0
{
    size_t i;
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
#if defined(SSL_SOME_MODES_USE_MAC)
    size_t padlen = 0, correct = 1;
 80a6c1c:	2001      	movcs	r0, #1
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 80a6c1e:	2a00      	cmp	r2, #0
 80a6c20:	f340 80e0 	ble.w	80a6de4 <mbedtls_ssl_read_record_layer+0x44c>
             *                     ssl->transform_in->maclen
             *
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
 80a6c24:	4573      	cmp	r3, lr
 80a6c26:	bf34      	ite	cc
 80a6c28:	2000      	movcc	r0, #0
 80a6c2a:	f000 0001 	andcs.w	r0, r0, #1
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
            size_t padding_idx = ssl->in_msglen - padlen;
 80a6c2e:	ebce 0203 	rsb	r2, lr, r3
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );
 80a6c32:	f50c 5c00 	add.w	ip, ip, #8192	; 0x2000
 80a6c36:	4562      	cmp	r2, ip
 80a6c38:	bf8c      	ite	hi
 80a6c3a:	2000      	movhi	r0, #0
 80a6c3c:	f000 0001 	andls.w	r0, r0, #1
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 80a6c40:	f04f 0800 	mov.w	r8, #0
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 80a6c44:	46c4      	mov	ip, r8
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 80a6c46:	fb00 5202 	mla	r2, r0, r2, r5
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 80a6c4a:	f04f 0901 	mov.w	r9, #1

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 80a6c4e:	f10e 3aff 	add.w	sl, lr, #4294967295

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
 80a6c52:	45e6      	cmp	lr, ip
 80a6c54:	bf94      	ite	ls
 80a6c56:	f04f 0900 	movls.w	r9, #0
 80a6c5a:	f009 0901 	andhi.w	r9, r9, #1
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 80a6c5e:	f812 500c 	ldrb.w	r5, [r2, ip]
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 80a6c62:	f10c 0c01 	add.w	ip, ip, #1
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 80a6c66:	4555      	cmp	r5, sl
 80a6c68:	bf14      	ite	ne
 80a6c6a:	2500      	movne	r5, #0
 80a6c6c:	2501      	moveq	r5, #1
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 80a6c6e:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 80a6c72:	fb09 8805 	mla	r8, r9, r5, r8
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 80a6c76:	d1ec      	bne.n	80a6c52 <mbedtls_ssl_read_record_layer+0x2ba>
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
            }

            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 80a6c78:	45c6      	cmp	lr, r8
 80a6c7a:	bf14      	ite	ne
 80a6c7c:	2500      	movne	r5, #0
 80a6c7e:	f000 0501 	andeq.w	r5, r0, #1

#if defined(MBEDTLS_SSL_DEBUG_ALL)
            if( padlen > 0 && correct == 0 )
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
#endif
            padlen &= correct * 0x1FF;
 80a6c82:	ea4f 2a45 	mov.w	sl, r5, lsl #9
 80a6c86:	ebc5 0a0a 	rsb	sl, r5, sl
 80a6c8a:	ea0a 0a0e 	and.w	sl, sl, lr
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->in_msglen -= padlen;
 80a6c8e:	ebca 0303 	rsb	r3, sl, r3
 80a6c92:	6723      	str	r3, [r4, #112]	; 0x70
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 80a6c94:	694a      	ldr	r2, [r1, #20]
 80a6c96:	1a9b      	subs	r3, r3, r2

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 80a6c98:	6de2      	ldr	r2, [r4, #92]	; 0x5c
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 80a6c9a:	6723      	str	r3, [r4, #112]	; 0x70

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 80a6c9c:	0a1b      	lsrs	r3, r3, #8
 80a6c9e:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 80a6ca0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80a6ca2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80a6ca4:	705a      	strb	r2, [r3, #1]
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 80a6ca6:	68e3      	ldr	r3, [r4, #12]
 80a6ca8:	2b00      	cmp	r3, #0
 80a6caa:	f340 809b 	ble.w	80a6de4 <mbedtls_ssl_read_record_layer+0x44c>
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 80a6cae:	6b60      	ldr	r0, [r4, #52]	; 0x34
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 80a6cb0:	6f23      	ldr	r3, [r4, #112]	; 0x70
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 80a6cb2:	6802      	ldr	r2, [r0, #0]
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 80a6cb4:	eb0a 0903 	add.w	r9, sl, r3
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 80a6cb8:	7a52      	ldrb	r2, [r2, #9]
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 80a6cba:	f5b9 7f80 	cmp.w	r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 80a6cbe:	f1a2 0203 	sub.w	r2, r2, #3
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 80a6cc2:	bf88      	it	hi
 80a6cc4:	f5a9 7680 	subhi.w	r6, r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 80a6cc8:	2a04      	cmp	r2, #4
 80a6cca:	f200 808b 	bhi.w	80a6de4 <mbedtls_ssl_read_record_layer+0x44c>
 80a6cce:	e8df f002 	tbb	[pc, r2]
 80a6cd2:	0303      	.short	0x0303
 80a6cd4:	0389      	.short	0x0389
 80a6cd6:	0b          	.byte	0x0b
 80a6cd7:	00          	.byte	0x00
                case MBEDTLS_MD_MD5:
                case MBEDTLS_MD_SHA1:
                case MBEDTLS_MD_SHA256:
                    /* 8 bytes of message size, 64-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
                                ( 13 + ssl->in_msglen          + 8 ) / 64;
 80a6cd8:	f103 0215 	add.w	r2, r3, #21
 80a6cdc:	f109 0115 	add.w	r1, r9, #21
 80a6ce0:	0992      	lsrs	r2, r2, #6
 80a6ce2:	ebc2 1391 	rsb	r3, r2, r1, lsr #6
 80a6ce6:	e006      	b.n	80a6cf6 <mbedtls_ssl_read_record_layer+0x35e>
#endif
#if defined(MBEDTLS_SHA512_C)
                case MBEDTLS_MD_SHA384:
                    /* 16 bytes of message size, 128-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 16 ) / 128 -
                                ( 13 + ssl->in_msglen          + 16 ) / 128;
 80a6ce8:	f103 021d 	add.w	r2, r3, #29
 80a6cec:	f109 011d 	add.w	r1, r9, #29
 80a6cf0:	09d2      	lsrs	r2, r2, #7
 80a6cf2:	ebc2 13d1 	rsb	r3, r2, r1, lsr #7
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 80a6cf6:	ea4f 2805 	mov.w	r8, r5, lsl #8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 80a6cfa:	2208      	movs	r2, #8
 80a6cfc:	6d61      	ldr	r1, [r4, #84]	; 0x54
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 80a6cfe:	ebc5 0808 	rsb	r8, r5, r8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 80a6d02:	3044      	adds	r0, #68	; 0x44
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 80a6d04:	ea08 0803 	and.w	r8, r8, r3

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 80a6d08:	f7fe f8a4 	bl	80a4e54 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 80a6d0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a6d0e:	2203      	movs	r2, #3
 80a6d10:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80a6d12:	3044      	adds	r0, #68	; 0x44
 80a6d14:	f7fe f89e 	bl	80a4e54 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 80a6d18:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a6d1a:	2202      	movs	r2, #2
 80a6d1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80a6d1e:	3044      	adds	r0, #68	; 0x44
 80a6d20:	f7fe f898 	bl	80a4e54 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 80a6d24:	6b60      	ldr	r0, [r4, #52]	; 0x34
                             ssl->in_msglen );
 80a6d26:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80a6d28:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80a6d2a:	3044      	adds	r0, #68	; 0x44
 80a6d2c:	f7fe f892 	bl	80a4e54 <mbedtls_md_hmac_update>
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
 80a6d30:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80a6d32:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a6d34:	4413      	add	r3, r2
 80a6d36:	449a      	add	sl, r3
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 80a6d38:	2200      	movs	r2, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 80a6d3a:	4553      	cmp	r3, sl
 80a6d3c:	d003      	beq.n	80a6d46 <mbedtls_ssl_read_record_layer+0x3ae>
        acc ^= *p;
 80a6d3e:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a6d42:	404a      	eors	r2, r1
 80a6d44:	e7f9      	b.n	80a6d3a <mbedtls_ssl_read_record_layer+0x3a2>
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 80a6d46:	6b60      	ldr	r0, [r4, #52]	; 0x34
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
 80a6d48:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 80a6d4c:	4639      	mov	r1, r7
 80a6d4e:	3044      	adds	r0, #68	; 0x44

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
    (void) force;
 80a6d50:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 80a6d54:	f7fe f88e 	bl	80a4e74 <mbedtls_md_hmac_finish>

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 80a6d58:	f04f 0a00 	mov.w	sl, #0
 80a6d5c:	f108 0801 	add.w	r8, r8, #1
 80a6d60:	45d0      	cmp	r8, sl
 80a6d62:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a6d64:	d906      	bls.n	80a6d74 <mbedtls_ssl_read_record_layer+0x3dc>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 80a6d66:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80a6d68:	3044      	adds	r0, #68	; 0x44
 80a6d6a:	f7fe f8cb 	bl	80a4f04 <mbedtls_md_process>
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 80a6d6e:	f10a 0a01 	add.w	sl, sl, #1
 80a6d72:	e7f5      	b.n	80a6d60 <mbedtls_ssl_read_record_layer+0x3c8>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );

            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 80a6d74:	3044      	adds	r0, #68	; 0x44
 80a6d76:	f7fe f8ad 	bl	80a4ed4 <mbedtls_md_hmac_reset>
            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
                                 max_len - min_len + ssl->transform_in->maclen );
 80a6d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34

            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
 80a6d7c:	6e61      	ldr	r1, [r4, #100]	; 0x64
                                 max_len - min_len + ssl->transform_in->maclen );
 80a6d7e:	6958      	ldr	r0, [r3, #20]
 80a6d80:	440e      	add	r6, r1
 80a6d82:	4481      	add	r9, r0
 80a6d84:	4489      	add	r9, r1
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 80a6d86:	2300      	movs	r3, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 80a6d88:	454e      	cmp	r6, r9
 80a6d8a:	d003      	beq.n	80a6d94 <mbedtls_ssl_read_record_layer+0x3fc>
        acc ^= *p;
 80a6d8c:	f816 2b01 	ldrb.w	r2, [r6], #1
 80a6d90:	4053      	eors	r3, r2
 80a6d92:	e7f9      	b.n	80a6d88 <mbedtls_ssl_read_record_layer+0x3f0>

    force = acc;
 80a6d94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    (void) force;
 80a6d98:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 80a6d9c:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 80a6da0:	2300      	movs	r3, #0
 80a6da2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    for( i = 0; i < n; i++ )
 80a6da6:	4298      	cmp	r0, r3
 80a6da8:	f43f aec4 	beq.w	80a6b34 <mbedtls_ssl_read_record_layer+0x19c>
 80a6dac:	eb0c 0203 	add.w	r2, ip, r3
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 80a6db0:	5c8a      	ldrb	r2, [r1, r2]
 80a6db2:	5cfe      	ldrb	r6, [r7, r3]
        diff |= x ^ y;
 80a6db4:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
 80a6db8:	4072      	eors	r2, r6
 80a6dba:	ea4e 0202 	orr.w	r2, lr, r2
 80a6dbe:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a6dc2:	3301      	adds	r3, #1
 80a6dc4:	e7ef      	b.n	80a6da6 <mbedtls_ssl_read_record_layer+0x40e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 80a6dc6:	480b      	ldr	r0, [pc, #44]	; (80a6df4 <mbedtls_ssl_read_record_layer+0x45c>)
 80a6dc8:	e011      	b.n	80a6dee <mbedtls_ssl_read_record_layer+0x456>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 80a6dca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80a6dcc:	2b17      	cmp	r3, #23
 80a6dce:	f43f aec1 	beq.w	80a6b54 <mbedtls_ssl_read_record_layer+0x1bc>
 80a6dd2:	e009      	b.n	80a6de8 <mbedtls_ssl_read_record_layer+0x450>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
 80a6dd4:	2300      	movs	r3, #0
 80a6dd6:	67e3      	str	r3, [r4, #124]	; 0x7c
 80a6dd8:	e6c2      	b.n	80a6b60 <mbedtls_ssl_read_record_layer+0x1c8>
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 80a6dda:	2a00      	cmp	r2, #0
 80a6ddc:	f47f aec1 	bne.w	80a6b62 <mbedtls_ssl_read_record_layer+0x1ca>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 80a6de0:	4805      	ldr	r0, [pc, #20]	; (80a6df8 <mbedtls_ssl_read_record_layer+0x460>)
 80a6de2:	e004      	b.n	80a6dee <mbedtls_ssl_read_record_layer+0x456>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a6de4:	4805      	ldr	r0, [pc, #20]	; (80a6dfc <mbedtls_ssl_read_record_layer+0x464>)
 80a6de6:	e002      	b.n	80a6dee <mbedtls_ssl_read_record_layer+0x456>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80a6de8:	4805      	ldr	r0, [pc, #20]	; (80a6e00 <mbedtls_ssl_read_record_layer+0x468>)
 80a6dea:	e000      	b.n	80a6dee <mbedtls_ssl_read_record_layer+0x456>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
 80a6dec:	2000      	movs	r0, #0
}
 80a6dee:	b016      	add	sp, #88	; 0x58
 80a6df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6df4:	ffff8e80 	.word	0xffff8e80
 80a6df8:	ffff9480 	.word	0xffff9480
 80a6dfc:	ffff9400 	.word	0xffff9400
 80a6e00:	ffff8e00 	.word	0xffff8e00

080a6e04 <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 80a6e04:	b538      	push	{r3, r4, r5, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 80a6e06:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 80a6e0a:	4605      	mov	r5, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 80a6e0c:	b98c      	cbnz	r4, 80a6e32 <mbedtls_ssl_read_record+0x2e>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 80a6e0e:	4628      	mov	r0, r5
 80a6e10:	f7ff fdc2 	bl	80a6998 <mbedtls_ssl_read_record_layer>
 80a6e14:	b988      	cbnz	r0, 80a6e3a <mbedtls_ssl_read_record+0x36>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
                return( ret );
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 80a6e16:	4628      	mov	r0, r5
 80a6e18:	f7ff fd76 	bl	80a6908 <mbedtls_ssl_handle_message_type>

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 80a6e1c:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
 80a6e20:	d0f5      	beq.n	80a6e0e <mbedtls_ssl_read_record+0xa>

        if( 0 != ret )
 80a6e22:	b950      	cbnz	r0, 80a6e3a <mbedtls_ssl_read_record+0x36>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a6e24:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80a6e26:	2b16      	cmp	r3, #22
 80a6e28:	d108      	bne.n	80a6e3c <mbedtls_ssl_read_record+0x38>
        {
            mbedtls_ssl_update_handshake_status( ssl );
 80a6e2a:	4628      	mov	r0, r5
 80a6e2c:	f7ff fd5c 	bl	80a68e8 <mbedtls_ssl_update_handshake_status>
 80a6e30:	e004      	b.n	80a6e3c <mbedtls_ssl_read_record+0x38>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
        ssl->keep_current_message = 0;
 80a6e32:	2400      	movs	r4, #0
 80a6e34:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 80a6e38:	e000      	b.n	80a6e3c <mbedtls_ssl_read_record+0x38>
 80a6e3a:	4604      	mov	r4, r0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
 80a6e3c:	4620      	mov	r0, r4
 80a6e3e:	bd38      	pop	{r3, r4, r5, pc}

080a6e40 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 80a6e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 80a6e42:	6c03      	ldr	r3, [r0, #64]	; 0x40

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 80a6e44:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80a6e46:	681b      	ldr	r3, [r3, #0]
 80a6e48:	7a9a      	ldrb	r2, [r3, #10]
 80a6e4a:	2a0b      	cmp	r2, #11
 80a6e4c:	d809      	bhi.n	80a6e62 <mbedtls_ssl_write_certificate+0x22>
 80a6e4e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a6e52:	40d3      	lsrs	r3, r2
 80a6e54:	07da      	lsls	r2, r3, #31
 80a6e56:	d504      	bpl.n	80a6e62 <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 80a6e58:	6863      	ldr	r3, [r4, #4]
        return( 0 );
 80a6e5a:	2000      	movs	r0, #0
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 80a6e5c:	3301      	adds	r3, #1
 80a6e5e:	6063      	str	r3, [r4, #4]
        return( 0 );
 80a6e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80a6e62:	6822      	ldr	r2, [r4, #0]
 80a6e64:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
 80a6e68:	07db      	lsls	r3, r3, #31
 80a6e6a:	d403      	bmi.n	80a6e74 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
 80a6e6c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80a6e70:	2b00      	cmp	r3, #0
 80a6e72:	d0f1      	beq.n	80a6e58 <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80a6e74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80a6e76:	b10b      	cbz	r3, 80a6e7c <mbedtls_ssl_write_certificate+0x3c>
 80a6e78:	685b      	ldr	r3, [r3, #4]
 80a6e7a:	b90b      	cbnz	r3, 80a6e80 <mbedtls_ssl_write_certificate+0x40>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 80a6e7c:	6c93      	ldr	r3, [r2, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 80a6e7e:	b30b      	cbz	r3, 80a6ec4 <mbedtls_ssl_write_certificate+0x84>
 80a6e80:	681e      	ldr	r6, [r3, #0]
 80a6e82:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 80a6e84:	b1fe      	cbz	r6, 80a6ec6 <mbedtls_ssl_write_certificate+0x86>
    {
        n = crt->raw.len;
 80a6e86:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 80a6e88:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
 80a6e8c:	321d      	adds	r2, #29
 80a6e8e:	4295      	cmp	r5, r2
 80a6e90:	d836      	bhi.n	80a6f00 <mbedtls_ssl_write_certificate+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 80a6e92:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80a6e96:	0c29      	lsrs	r1, r5, #16
 80a6e98:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 80a6e9a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80a6e9e:	0a29      	lsrs	r1, r5, #8
 80a6ea0:	441a      	add	r2, r3
 80a6ea2:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 80a6ea4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 80a6ea8:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 80a6eaa:	441a      	add	r2, r3
 80a6eac:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 80a6eae:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80a6eb2:	68b1      	ldr	r1, [r6, #8]
 80a6eb4:	462a      	mov	r2, r5
 80a6eb6:	4438      	add	r0, r7
 80a6eb8:	f006 fb2d 	bl	80ad516 <memcpy>
        i += n; crt = crt->next;
 80a6ebc:	19eb      	adds	r3, r5, r7
 80a6ebe:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 80a6ec2:	e7df      	b.n	80a6e84 <mbedtls_ssl_write_certificate+0x44>
 80a6ec4:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 80a6ec6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a6eca:	1fda      	subs	r2, r3, #7
 80a6ecc:	0c10      	lsrs	r0, r2, #16
 80a6ece:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 80a6ed0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a6ed4:	0a10      	lsrs	r0, r2, #8
 80a6ed6:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 80a6ed8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a6edc:	4620      	mov	r0, r4
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 80a6ede:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
 80a6ee0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80a6ee4:	2316      	movs	r3, #22
 80a6ee6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 80a6eea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80a6eee:	220b      	movs	r2, #11
 80a6ef0:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 80a6ef2:	6863      	ldr	r3, [r4, #4]
 80a6ef4:	3301      	adds	r3, #1
 80a6ef6:	6063      	str	r3, [r4, #4]
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 80a6ef8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a6efc:	f7ff bb80 	b.w	80a6600 <mbedtls_ssl_write_record>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 80a6f00:	4800      	ldr	r0, [pc, #0]	; (80a6f04 <mbedtls_ssl_write_certificate+0xc4>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 80a6f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a6f04:	ffff8b00 	.word	0xffff8b00

080a6f08 <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 80a6f08:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
 80a6f0a:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 80a6f0e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
 80a6f12:	2201      	movs	r2, #1
 80a6f14:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 80a6f18:	700a      	strb	r2, [r1, #0]

    ssl->state++;
 80a6f1a:	6842      	ldr	r2, [r0, #4]
 80a6f1c:	3201      	adds	r2, #1
 80a6f1e:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a6f20:	f7ff bb6e 	b.w	80a6600 <mbedtls_ssl_write_record>

080a6f24 <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 80a6f24:	b510      	push	{r4, lr}
 80a6f26:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a6f28:	f7ff ff6c 	bl	80a6e04 <mbedtls_ssl_read_record>
 80a6f2c:	2800      	cmp	r0, #0
 80a6f2e:	d12f      	bne.n	80a6f90 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 80a6f30:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80a6f32:	2b14      	cmp	r3, #20
 80a6f34:	d006      	beq.n	80a6f44 <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80a6f36:	220a      	movs	r2, #10
 80a6f38:	2102      	movs	r1, #2
 80a6f3a:	4620      	mov	r0, r4
 80a6f3c:	f7ff fd14 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80a6f40:	4814      	ldr	r0, [pc, #80]	; (80a6f94 <mbedtls_ssl_parse_change_cipher_spec+0x70>)
 80a6f42:	bd10      	pop	{r4, pc}
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 80a6f44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a6f46:	2b01      	cmp	r3, #1
 80a6f48:	d103      	bne.n	80a6f52 <mbedtls_ssl_parse_change_cipher_spec+0x2e>
 80a6f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80a6f4c:	781b      	ldrb	r3, [r3, #0]
 80a6f4e:	2b01      	cmp	r3, #1
 80a6f50:	d006      	beq.n	80a6f60 <mbedtls_ssl_parse_change_cipher_spec+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80a6f52:	2232      	movs	r2, #50	; 0x32
 80a6f54:	2102      	movs	r1, #2
 80a6f56:	4620      	mov	r0, r4
 80a6f58:	f7ff fd06 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 80a6f5c:	480e      	ldr	r0, [pc, #56]	; (80a6f98 <mbedtls_ssl_parse_change_cipher_spec+0x74>)
 80a6f5e:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
 80a6f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a6f62:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 80a6f64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a6f66:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 80a6f68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a6f6a:	6018      	str	r0, [r3, #0]
 80a6f6c:	6058      	str	r0, [r3, #4]

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80a6f6e:	68e3      	ldr	r3, [r4, #12]
 80a6f70:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80a6f72:	2b01      	cmp	r3, #1
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 80a6f74:	bfc9      	itett	gt
 80a6f76:	6c23      	ldrgt	r3, [r4, #64]	; 0x40
                      ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
 80a6f78:	6661      	strle	r1, [r4, #100]	; 0x64
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 80a6f7a:	68da      	ldrgt	r2, [r3, #12]
 80a6f7c:	691b      	ldrgt	r3, [r3, #16]

    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
 80a6f7e:	f04f 0000 	mov.w	r0, #0
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 80a6f82:	bfc2      	ittt	gt
 80a6f84:	1ad3      	subgt	r3, r2, r3
 80a6f86:	185b      	addgt	r3, r3, r1
 80a6f88:	6663      	strgt	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 80a6f8a:	6863      	ldr	r3, [r4, #4]
 80a6f8c:	3301      	adds	r3, #1
 80a6f8e:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
 80a6f90:	bd10      	pop	{r4, pc}
 80a6f92:	bf00      	nop
 80a6f94:	ffff8900 	.word	0xffff8900
 80a6f98:	ffff8200 	.word	0xffff8200

080a6f9c <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 80a6f9c:	7a4b      	ldrb	r3, [r1, #9]
 80a6f9e:	2b07      	cmp	r3, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 80a6fa0:	bf08      	it	eq
 80a6fa2:	4a03      	ldreq	r2, [pc, #12]	; (80a6fb0 <mbedtls_ssl_optimize_checksum+0x14>)
 80a6fa4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 80a6fa6:	bf18      	it	ne
 80a6fa8:	4a02      	ldrne	r2, [pc, #8]	; (80a6fb4 <mbedtls_ssl_optimize_checksum+0x18>)
 80a6faa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 80a6fae:	4770      	bx	lr
 80a6fb0:	080a621f 	.word	0x080a621f
 80a6fb4:	080a6217 	.word	0x080a6217

080a6fb8 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 80a6fb8:	b510      	push	{r4, lr}
 80a6fba:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80a6fbc:	68c3      	ldr	r3, [r0, #12]
 80a6fbe:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 80a6fc2:	2b01      	cmp	r3, #1
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 80a6fc4:	bfc9      	itett	gt
 80a6fc6:	6c03      	ldrgt	r3, [r0, #64]	; 0x40
                       ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->out_msg = ssl->out_iv;
 80a6fc8:	f8c0 1098 	strle.w	r1, [r0, #152]	; 0x98
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
                       ssl->transform_negotiate->fixed_ivlen;
 80a6fcc:	68da      	ldrgt	r2, [r3, #12]
 80a6fce:	691b      	ldrgt	r3, [r3, #16]
 80a6fd0:	bfc2      	ittt	gt
 80a6fd2:	1ad3      	subgt	r3, r2, r3
 80a6fd4:	185b      	addgt	r3, r3, r1
 80a6fd6:	f8c0 3098 	strgt.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 80a6fda:	6803      	ldr	r3, [r0, #0]
 80a6fdc:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 80a6fe0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80a6fe4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80a6fe6:	f002 0201 	and.w	r2, r2, #1
 80a6fea:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80a6fee:	3104      	adds	r1, #4
 80a6ff0:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 80a6ff2:	68e3      	ldr	r3, [r4, #12]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 80a6ff4:	2214      	movs	r2, #20
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 80a6ff6:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 80a6ff8:	bf14      	ite	ne
 80a6ffa:	2310      	movne	r3, #16
 80a6ffc:	2328      	moveq	r3, #40	; 0x28
 80a6ffe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80a7002:	2316      	movs	r3, #22
 80a7004:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 80a7008:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80a700c:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 80a700e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80a7010:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80a7014:	b133      	cbz	r3, 80a7024 <mbedtls_ssl_write_finished+0x6c>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80a7016:	6823      	ldr	r3, [r4, #0]
 80a7018:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80a701c:	07db      	lsls	r3, r3, #31
 80a701e:	d404      	bmi.n	80a702a <mbedtls_ssl_write_finished+0x72>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 80a7020:	230f      	movs	r3, #15
 80a7022:	e001      	b.n	80a7028 <mbedtls_ssl_write_finished+0x70>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 80a7024:	6863      	ldr	r3, [r4, #4]
 80a7026:	3301      	adds	r3, #1
 80a7028:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
 80a702a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80a702e:	2200      	movs	r2, #0
 80a7030:	601a      	str	r2, [r3, #0]
 80a7032:	605a      	str	r2, [r3, #4]

    ssl->transform_out = ssl->transform_negotiate;
 80a7034:	6c23      	ldr	r3, [r4, #64]	; 0x40
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a7036:	4620      	mov	r0, r4
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );

    ssl->transform_out = ssl->transform_negotiate;
 80a7038:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 80a703a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a703c:	6263      	str	r3, [r4, #36]	; 0x24
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
 80a703e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a7042:	f7ff badd 	b.w	80a6600 <mbedtls_ssl_write_record>
	...

080a7048 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 80a7048:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 80a704a:	6803      	ldr	r3, [r0, #0]
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 80a704c:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 80a704e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80a7052:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80a7054:	43d2      	mvns	r2, r2
 80a7056:	ad01      	add	r5, sp, #4
 80a7058:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80a705c:	f002 0201 	and.w	r2, r2, #1
 80a7060:	4629      	mov	r1, r5
 80a7062:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a7064:	4620      	mov	r0, r4
 80a7066:	f7ff fecd 	bl	80a6e04 <mbedtls_ssl_read_record>
 80a706a:	2800      	cmp	r0, #0
 80a706c:	d13b      	bne.n	80a70e6 <mbedtls_ssl_parse_finished+0x9e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80a706e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80a7070:	2b16      	cmp	r3, #22
 80a7072:	d006      	beq.n	80a7082 <mbedtls_ssl_parse_finished+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80a7074:	220a      	movs	r2, #10
 80a7076:	2102      	movs	r1, #2
 80a7078:	4620      	mov	r0, r4
 80a707a:	f7ff fc75 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80a707e:	481b      	ldr	r0, [pc, #108]	; (80a70ec <mbedtls_ssl_parse_finished+0xa4>)
 80a7080:	e031      	b.n	80a70e6 <mbedtls_ssl_parse_finished+0x9e>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 80a7082:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80a7084:	780b      	ldrb	r3, [r1, #0]
 80a7086:	2b14      	cmp	r3, #20
 80a7088:	d115      	bne.n	80a70b6 <mbedtls_ssl_parse_finished+0x6e>
 80a708a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80a708c:	2b10      	cmp	r3, #16
 80a708e:	d112      	bne.n	80a70b6 <mbedtls_ssl_parse_finished+0x6e>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 80a7090:	f88d 0003 	strb.w	r0, [sp, #3]
 80a7094:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 80a7096:	5ccb      	ldrb	r3, [r1, r3]
 80a7098:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
 80a709a:	f89d 6003 	ldrb.w	r6, [sp, #3]
 80a709e:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a70a0:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 80a70a2:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a70a4:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 80a70a6:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a70aa:	d1f3      	bne.n	80a7094 <mbedtls_ssl_parse_finished+0x4c>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 80a70ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 80a70b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a70b4:	b133      	cbz	r3, 80a70c4 <mbedtls_ssl_parse_finished+0x7c>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80a70b6:	2232      	movs	r2, #50	; 0x32
 80a70b8:	2102      	movs	r1, #2
 80a70ba:	4620      	mov	r0, r4
 80a70bc:	f7ff fc54 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 80a70c0:	480b      	ldr	r0, [pc, #44]	; (80a70f0 <mbedtls_ssl_parse_finished+0xa8>)
 80a70c2:	e010      	b.n	80a70e6 <mbedtls_ssl_parse_finished+0x9e>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 80a70c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80a70c6:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
 80a70ca:	b138      	cbz	r0, 80a70dc <mbedtls_ssl_parse_finished+0x94>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80a70cc:	6823      	ldr	r3, [r4, #0]
 80a70ce:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
 80a70d2:	f010 0001 	ands.w	r0, r0, #1
 80a70d6:	d105      	bne.n	80a70e4 <mbedtls_ssl_parse_finished+0x9c>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 80a70d8:	230a      	movs	r3, #10
 80a70da:	e001      	b.n	80a70e0 <mbedtls_ssl_parse_finished+0x98>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 80a70dc:	6863      	ldr	r3, [r4, #4]
 80a70de:	3301      	adds	r3, #1
 80a70e0:	6063      	str	r3, [r4, #4]
 80a70e2:	e000      	b.n	80a70e6 <mbedtls_ssl_parse_finished+0x9e>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
 80a70e4:	4610      	mov	r0, r2
}
 80a70e6:	b004      	add	sp, #16
 80a70e8:	bd70      	pop	{r4, r5, r6, pc}
 80a70ea:	bf00      	nop
 80a70ec:	ffff8900 	.word	0xffff8900
 80a70f0:	ffff8180 	.word	0xffff8180

080a70f4 <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 80a70f4:	6803      	ldr	r3, [r0, #0]
 80a70f6:	4a09      	ldr	r2, [pc, #36]	; (80a711c <mbedtls_ssl_get_max_frag_len+0x28>)
 80a70f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 80a70fc:	6a41      	ldr	r1, [r0, #36]	; 0x24
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 80a70fe:	f3c3 1382 	ubfx	r3, r3, #6, #3
 80a7102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 80a7106:	b131      	cbz	r1, 80a7116 <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 80a7108:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80a710c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80a7110:	4293      	cmp	r3, r2
 80a7112:	bf28      	it	cs
 80a7114:	4613      	movcs	r3, r2
    {
        max_len = mfl_code_to_length[ssl->session_out->mfl_code];
    }

    return max_len;
}
 80a7116:	4618      	mov	r0, r3
 80a7118:	4770      	bx	lr
 80a711a:	bf00      	nop
 80a711c:	080aeddc 	.word	0x080aeddc

080a7120 <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
 80a7120:	b138      	cbz	r0, 80a7132 <mbedtls_ssl_handshake_step+0x12>
 80a7122:	6803      	ldr	r3, [r0, #0]
 80a7124:	b12b      	cbz	r3, 80a7132 <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80a7126:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80a712a:	07db      	lsls	r3, r3, #31
 80a712c:	d403      	bmi.n	80a7136 <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 80a712e:	f004 b9d7 	b.w	80ab4e0 <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a7132:	4802      	ldr	r0, [pc, #8]	; (80a713c <mbedtls_ssl_handshake_step+0x1c>)
 80a7134:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 80a7136:	4802      	ldr	r0, [pc, #8]	; (80a7140 <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
 80a7138:	4770      	bx	lr
 80a713a:	bf00      	nop
 80a713c:	ffff8f00 	.word	0xffff8f00
 80a7140:	ffff8f80 	.word	0xffff8f80

080a7144 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 80a7144:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
 80a7146:	4604      	mov	r4, r0
 80a7148:	b150      	cbz	r0, 80a7160 <mbedtls_ssl_handshake+0x1c>
 80a714a:	6803      	ldr	r3, [r0, #0]
 80a714c:	b143      	cbz	r3, 80a7160 <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80a714e:	6863      	ldr	r3, [r4, #4]
 80a7150:	2b10      	cmp	r3, #16
 80a7152:	d007      	beq.n	80a7164 <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 80a7154:	4620      	mov	r0, r4
 80a7156:	f7ff ffe3 	bl	80a7120 <mbedtls_ssl_handshake_step>

        if( ret != 0 )
 80a715a:	2800      	cmp	r0, #0
 80a715c:	d0f7      	beq.n	80a714e <mbedtls_ssl_handshake+0xa>
 80a715e:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a7160:	4801      	ldr	r0, [pc, #4]	; (80a7168 <mbedtls_ssl_handshake+0x24>)
 80a7162:	bd10      	pop	{r4, pc}
 80a7164:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
 80a7166:	bd10      	pop	{r4, pc}
 80a7168:	ffff8f00 	.word	0xffff8f00

080a716c <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
 80a716c:	b570      	push	{r4, r5, r6, lr}
 80a716e:	460e      	mov	r6, r1
 80a7170:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
 80a7172:	4604      	mov	r4, r0
 80a7174:	b350      	cbz	r0, 80a71cc <mbedtls_ssl_write+0x60>
 80a7176:	6803      	ldr	r3, [r0, #0]
 80a7178:	b343      	cbz	r3, 80a71cc <mbedtls_ssl_write+0x60>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80a717a:	6843      	ldr	r3, [r0, #4]
 80a717c:	2b10      	cmp	r3, #16
 80a717e:	d109      	bne.n	80a7194 <mbedtls_ssl_write+0x28>
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret;
#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 80a7180:	4620      	mov	r0, r4
 80a7182:	f7ff ffb7 	bl	80a70f4 <mbedtls_ssl_get_max_frag_len>
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
 80a7186:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80a718a:	4285      	cmp	r5, r0
 80a718c:	bf28      	it	cs
 80a718e:	4605      	movcs	r5, r0
 80a7190:	b92b      	cbnz	r3, 80a719e <mbedtls_ssl_write+0x32>
 80a7192:	e00a      	b.n	80a71aa <mbedtls_ssl_write+0x3e>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 80a7194:	f7ff ffd6 	bl	80a7144 <mbedtls_ssl_handshake>
 80a7198:	2800      	cmp	r0, #0
 80a719a:	d0f1      	beq.n	80a7180 <mbedtls_ssl_write+0x14>
 80a719c:	bd70      	pop	{r4, r5, r6, pc}
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80a719e:	4620      	mov	r0, r4
 80a71a0:	f7ff f9f6 	bl	80a6590 <mbedtls_ssl_flush_output>
 80a71a4:	b998      	cbnz	r0, 80a71ce <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
 80a71a6:	4628      	mov	r0, r5
 80a71a8:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 80a71aa:	2317      	movs	r3, #23
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
 80a71ac:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 80a71b0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 80a71b4:	462a      	mov	r2, r5
 80a71b6:	4631      	mov	r1, r6
 80a71b8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80a71bc:	f006 f9ab 	bl	80ad516 <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a71c0:	4620      	mov	r0, r4
 80a71c2:	f7ff fa1d 	bl	80a6600 <mbedtls_ssl_write_record>
 80a71c6:	2800      	cmp	r0, #0
 80a71c8:	d0ed      	beq.n	80a71a6 <mbedtls_ssl_write+0x3a>
 80a71ca:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a71cc:	4800      	ldr	r0, [pc, #0]	; (80a71d0 <mbedtls_ssl_write+0x64>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
 80a71ce:	bd70      	pop	{r4, r5, r6, pc}
 80a71d0:	ffff8f00 	.word	0xffff8f00

080a71d4 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 80a71d4:	b510      	push	{r4, lr}
    if( transform == NULL )
 80a71d6:	4604      	mov	r4, r0
 80a71d8:	b1a0      	cbz	r0, 80a7204 <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 80a71da:	3050      	adds	r0, #80	; 0x50
 80a71dc:	f7f9 fe98 	bl	80a0f10 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 80a71e0:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80a71e4:	f7f9 fe94 	bl	80a0f10 <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 80a71e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a71ec:	f7fd fd61 	bl	80a4cb2 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 80a71f0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a71f4:	f7fd fd5d 	bl	80a4cb2 <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 80a71f8:	4620      	mov	r0, r4
}
 80a71fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 80a71fe:	21d0      	movs	r1, #208	; 0xd0
 80a7200:	f7fe beba 	b.w	80a5f78 <_ZL15mbedtls_zeroizePvj>
 80a7204:	bd10      	pop	{r4, pc}

080a7206 <mbedtls_ssl_handshake_free>:
    }
}
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
 80a7206:	b538      	push	{r3, r4, r5, lr}
    if( handshake == NULL )
 80a7208:	4604      	mov	r4, r0
 80a720a:	b1a0      	cbz	r0, 80a7236 <mbedtls_ssl_handshake_free+0x30>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 80a720c:	3018      	adds	r0, #24
 80a720e:	f7f9 f8c3 	bl	80a0398 <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 80a7212:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80a7216:	f002 fdee 	bl	80a9df6 <mbedtls_sha512_free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
 80a721a:	68e0      	ldr	r0, [r4, #12]
 80a721c:	b930      	cbnz	r0, 80a722c <mbedtls_ssl_handshake_free+0x26>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 80a721e:	4620      	mov	r0, r4
}
 80a7220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 80a7224:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80a7228:	f7fe bea6 	b.w	80a5f78 <_ZL15mbedtls_zeroizePvj>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
 80a722c:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
 80a722e:	f005 f897 	bl	80ac360 <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
 80a7232:	4628      	mov	r0, r5
 80a7234:	e7f2      	b.n	80a721c <mbedtls_ssl_handshake_free+0x16>
 80a7236:	bd38      	pop	{r3, r4, r5, pc}

080a7238 <mbedtls_ssl_session_free>:

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 80a7238:	b510      	push	{r4, lr}
    if( session == NULL )
 80a723a:	4604      	mov	r4, r0
 80a723c:	b178      	cbz	r0, 80a725e <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 80a723e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80a7240:	b120      	cbz	r0, 80a724c <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 80a7242:	f7fe fb00 	bl	80a5846 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 80a7246:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80a7248:	f005 f88a 	bl	80ac360 <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
 80a724c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80a724e:	f005 f887 	bl	80ac360 <free>
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 80a7252:	4620      	mov	r0, r4
}
 80a7254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 80a7258:	2174      	movs	r1, #116	; 0x74
 80a725a:	f7fe be8d 	b.w	80a5f78 <_ZL15mbedtls_zeroizePvj>
 80a725e:	bd10      	pop	{r4, pc}

080a7260 <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 80a7260:	b538      	push	{r3, r4, r5, lr}
 80a7262:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 80a7264:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 80a7266:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
 80a7268:	f8d3 51e4 	ldr.w	r5, [r3, #484]	; 0x1e4
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 80a726c:	b120      	cbz	r0, 80a7278 <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 80a726e:	f7ff ffe3 	bl	80a7238 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 80a7272:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a7274:	f005 f874 	bl	80ac360 <free>
    }
    ssl->session = ssl->session_negotiate;
 80a7278:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;
 80a727a:	2300      	movs	r3, #0

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 80a727c:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
 80a727e:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 80a7280:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 80a7282:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80a7284:	b123      	cbz	r3, 80a7290 <mbedtls_ssl_handshake_wrapup+0x30>
 80a7286:	6888      	ldr	r0, [r1, #8]
 80a7288:	b110      	cbz	r0, 80a7290 <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
 80a728a:	b90d      	cbnz	r5, 80a7290 <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 80a728c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80a728e:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
 80a7290:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a7292:	f7ff ffb8 	bl	80a7206 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 80a7296:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a7298:	f005 f862 	bl	80ac360 <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 80a729c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
 80a729e:	2300      	movs	r3, #0
 80a72a0:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 80a72a2:	b120      	cbz	r0, 80a72ae <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 80a72a4:	f7ff ff96 	bl	80a71d4 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 80a72a8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a72aa:	f005 f859 	bl	80ac360 <free>
    }
    ssl->transform = ssl->transform_negotiate;
 80a72ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a72b0:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 80a72b2:	2300      	movs	r3, #0
 80a72b4:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
 80a72b6:	6863      	ldr	r3, [r4, #4]
 80a72b8:	3301      	adds	r3, #1
 80a72ba:	6063      	str	r3, [r4, #4]
 80a72bc:	bd38      	pop	{r3, r4, r5, pc}

080a72be <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
 80a72be:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
 80a72c0:	4604      	mov	r4, r0
 80a72c2:	2800      	cmp	r0, #0
 80a72c4:	d048      	beq.n	80a7358 <mbedtls_ssl_free+0x9a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
 80a72c6:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 80a72ca:	b138      	cbz	r0, 80a72dc <mbedtls_ssl_free+0x1e>
    {
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 80a72cc:	f242 114d 	movw	r1, #8525	; 0x214d
 80a72d0:	f7fe fe52 	bl	80a5f78 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->out_buf );
 80a72d4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80a72d8:	f005 f842 	bl	80ac360 <free>
    }

    if( ssl->in_buf != NULL )
 80a72dc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a72de:	b130      	cbz	r0, 80a72ee <mbedtls_ssl_free+0x30>
    {
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 80a72e0:	f242 114d 	movw	r1, #8525	; 0x214d
 80a72e4:	f7fe fe48 	bl	80a5f78 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->in_buf );
 80a72e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a72ea:	f005 f839 	bl	80ac360 <free>
        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
 80a72ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a72f0:	b120      	cbz	r0, 80a72fc <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 80a72f2:	f7ff ff6f 	bl	80a71d4 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 80a72f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a72f8:	f005 f832 	bl	80ac360 <free>
    }

    if( ssl->handshake )
 80a72fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a72fe:	b180      	cbz	r0, 80a7322 <mbedtls_ssl_free+0x64>
    {
        mbedtls_ssl_handshake_free( ssl->handshake );
 80a7300:	f7ff ff81 	bl	80a7206 <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 80a7304:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80a7306:	f7ff ff65 	bl	80a71d4 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 80a730a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a730c:	f7ff ff94 	bl	80a7238 <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
 80a7310:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a7312:	f005 f825 	bl	80ac360 <free>
        mbedtls_free( ssl->transform_negotiate );
 80a7316:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80a7318:	f005 f822 	bl	80ac360 <free>
        mbedtls_free( ssl->session_negotiate );
 80a731c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a731e:	f005 f81f 	bl	80ac360 <free>
    }

    if( ssl->session )
 80a7322:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a7324:	b120      	cbz	r0, 80a7330 <mbedtls_ssl_free+0x72>
    {
        mbedtls_ssl_session_free( ssl->session );
 80a7326:	f7ff ff87 	bl	80a7238 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 80a732a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a732c:	f005 f818 	bl	80ac360 <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
 80a7330:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 80a7334:	b155      	cbz	r5, 80a734c <mbedtls_ssl_free+0x8e>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 80a7336:	4628      	mov	r0, r5
 80a7338:	f006 f933 	bl	80ad5a2 <strlen>
 80a733c:	4601      	mov	r1, r0
 80a733e:	4628      	mov	r0, r5
 80a7340:	f7fe fe1a 	bl	80a5f78 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 80a7344:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80a7348:	f005 f80a 	bl	80ac360 <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 80a734c:	4620      	mov	r0, r4
}
 80a734e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 80a7352:	21b4      	movs	r1, #180	; 0xb4
 80a7354:	f7fe be10 	b.w	80a5f78 <_ZL15mbedtls_zeroizePvj>
 80a7358:	bd38      	pop	{r3, r4, r5, pc}

080a735a <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
 80a735a:	b538      	push	{r3, r4, r5, lr}
 80a735c:	4604      	mov	r4, r0
        conf->psk_identity_len = 0;
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
 80a735e:	6c80      	ldr	r0, [r0, #72]	; 0x48
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
 80a7360:	b120      	cbz	r0, 80a736c <mbedtls_ssl_config_free+0x12>
    {
        next = cur->next;
 80a7362:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 80a7364:	f004 fffc 	bl	80ac360 <free>
        cur = next;
 80a7368:	4628      	mov	r0, r5
 80a736a:	e7f9      	b.n	80a7360 <mbedtls_ssl_config_free+0x6>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 80a736c:	4620      	mov	r0, r4
}
 80a736e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 80a7372:	2164      	movs	r1, #100	; 0x64
 80a7374:	f7fe be00 	b.w	80a5f78 <_ZL15mbedtls_zeroizePvj>

080a7378 <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 80a7378:	b508      	push	{r3, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 80a737a:	2101      	movs	r1, #1
 80a737c:	f001 fdc4 	bl	80a8f08 <mbedtls_pk_can_do>
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
 80a7380:	3000      	adds	r0, #0
 80a7382:	bf18      	it	ne
 80a7384:	2001      	movne	r0, #1
 80a7386:	bd08      	pop	{r3, pc}

080a7388 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 80a7388:	3804      	subs	r0, #4
 80a738a:	2804      	cmp	r0, #4
 80a738c:	bf9a      	itte	ls
 80a738e:	4b02      	ldrls	r3, [pc, #8]	; (80a7398 <mbedtls_ssl_hash_from_md_alg+0x10>)
 80a7390:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
 80a7392:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
 80a7394:	4770      	bx	lr
 80a7396:	bf00      	nop
 80a7398:	080aed78 	.word	0x080aed78

080a739c <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 80a739c:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 80a739e:	b510      	push	{r4, lr}
 80a73a0:	461c      	mov	r4, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 80a73a2:	d10f      	bne.n	80a73c4 <mbedtls_ssl_check_cert_usage+0x28>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
 80a73a4:	7a8b      	ldrb	r3, [r1, #10]
 80a73a6:	2b0a      	cmp	r3, #10
 80a73a8:	d80e      	bhi.n	80a73c8 <mbedtls_ssl_check_cert_usage+0x2c>
 80a73aa:	409a      	lsls	r2, r3
 80a73ac:	f012 0f82 	tst.w	r2, #130	; 0x82
 80a73b0:	d10c      	bne.n	80a73cc <mbedtls_ssl_check_cert_usage+0x30>
 80a73b2:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 80a73b6:	d10b      	bne.n	80a73d0 <mbedtls_ssl_check_cert_usage+0x34>
 80a73b8:	f012 0f1c 	tst.w	r2, #28
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 80a73bc:	bf14      	ite	ne
 80a73be:	2180      	movne	r1, #128	; 0x80
 80a73c0:	2100      	moveq	r1, #0
 80a73c2:	e006      	b.n	80a73d2 <mbedtls_ssl_check_cert_usage+0x36>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 80a73c4:	2180      	movs	r1, #128	; 0x80
 80a73c6:	e004      	b.n	80a73d2 <mbedtls_ssl_check_cert_usage+0x36>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 80a73c8:	2100      	movs	r1, #0
 80a73ca:	e002      	b.n	80a73d2 <mbedtls_ssl_check_cert_usage+0x36>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
 80a73cc:	2120      	movs	r1, #32
 80a73ce:	e000      	b.n	80a73d2 <mbedtls_ssl_check_cert_usage+0x36>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 80a73d0:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 80a73d2:	f7fd fe5d 	bl	80a5090 <mbedtls_x509_crt_check_key_usage>
 80a73d6:	b128      	cbz	r0, 80a73e4 <mbedtls_ssl_check_cert_usage+0x48>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 80a73d8:	6822      	ldr	r2, [r4, #0]
        ret = -1;
 80a73da:	f04f 30ff 	mov.w	r0, #4294967295
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 80a73de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80a73e2:	6022      	str	r2, [r4, #0]
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
 80a73e4:	bd10      	pop	{r4, pc}
	...

080a73e8 <mbedtls_ssl_parse_certificate>:

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 80a73e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 80a73ec:	6c03      	ldr	r3, [r0, #64]	; 0x40

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 80a73ee:	b085      	sub	sp, #20
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 80a73f0:	f8d3 8000 	ldr.w	r8, [r3]

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 80a73f4:	4605      	mov	r5, r0
    int authmode = ssl->conf->authmode;
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80a73f6:	f898 200a 	ldrb.w	r2, [r8, #10]
 80a73fa:	2a0b      	cmp	r2, #11
 80a73fc:	d80b      	bhi.n	80a7416 <mbedtls_ssl_parse_certificate+0x2e>
 80a73fe:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a7402:	40d3      	lsrs	r3, r2
 80a7404:	f003 0301 	and.w	r3, r3, #1
 80a7408:	f083 0001 	eor.w	r0, r3, #1
 80a740c:	b11b      	cbz	r3, 80a7416 <mbedtls_ssl_parse_certificate+0x2e>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        ssl->state++;
 80a740e:	686b      	ldr	r3, [r5, #4]
 80a7410:	3301      	adds	r3, #1
 80a7412:	606b      	str	r3, [r5, #4]
        return( 0 );
 80a7414:	e0e0      	b.n	80a75d8 <mbedtls_ssl_parse_certificate+0x1f0>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 80a7416:	682b      	ldr	r3, [r5, #0]
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a7418:	4628      	mov	r0, r5
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 80a741a:	f893 7060 	ldrb.w	r7, [r3, #96]	; 0x60
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a741e:	f7ff fcf1 	bl	80a6e04 <mbedtls_ssl_read_record>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 80a7422:	f3c7 0781 	ubfx	r7, r7, #2, #2
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a7426:	4604      	mov	r4, r0
 80a7428:	bb80      	cbnz	r0, 80a748c <mbedtls_ssl_parse_certificate+0xa4>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    ssl->state++;
 80a742a:	686b      	ldr	r3, [r5, #4]
 80a742c:	3301      	adds	r3, #1
 80a742e:	606b      	str	r3, [r5, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80a7430:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80a7432:	2b16      	cmp	r3, #22
 80a7434:	d006      	beq.n	80a7444 <mbedtls_ssl_parse_certificate+0x5c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80a7436:	220a      	movs	r2, #10
 80a7438:	2102      	movs	r1, #2
 80a743a:	4628      	mov	r0, r5
 80a743c:	f7ff fa94 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80a7440:	4867      	ldr	r0, [pc, #412]	; (80a75e0 <mbedtls_ssl_parse_certificate+0x1f8>)
 80a7442:	e0c9      	b.n	80a75d8 <mbedtls_ssl_parse_certificate+0x1f0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 80a7444:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80a7446:	7813      	ldrb	r3, [r2, #0]
 80a7448:	2b0b      	cmp	r3, #11
 80a744a:	d10b      	bne.n	80a7464 <mbedtls_ssl_parse_certificate+0x7c>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 80a744c:	6fa9      	ldr	r1, [r5, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 80a744e:	2909      	cmp	r1, #9
 80a7450:	d908      	bls.n	80a7464 <mbedtls_ssl_parse_certificate+0x7c>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
 80a7452:	7913      	ldrb	r3, [r2, #4]
 80a7454:	b933      	cbnz	r3, 80a7464 <mbedtls_ssl_parse_certificate+0x7c>
 80a7456:	7950      	ldrb	r0, [r2, #5]
 80a7458:	7993      	ldrb	r3, [r2, #6]
 80a745a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a745e:	3307      	adds	r3, #7
 80a7460:	4299      	cmp	r1, r3
 80a7462:	d015      	beq.n	80a7490 <mbedtls_ssl_parse_certificate+0xa8>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80a7464:	2232      	movs	r2, #50	; 0x32
 80a7466:	2102      	movs	r1, #2
 80a7468:	4628      	mov	r0, r5
 80a746a:	f7ff fa7d 	bl	80a6968 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 80a746e:	485d      	ldr	r0, [pc, #372]	; (80a75e4 <mbedtls_ssl_parse_certificate+0x1fc>)
 80a7470:	e0b2      	b.n	80a75d8 <mbedtls_ssl_parse_certificate+0x1f0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 80a7472:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 80a7474:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80a75f0 <mbedtls_ssl_parse_certificate+0x208>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 80a7478:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80a747a:	f7fe f9df 	bl	80a583c <mbedtls_x509_crt_init>

    i += 3;
 80a747e:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
 80a7480:	f8d5 e078 	ldr.w	lr, [r5, #120]	; 0x78
 80a7484:	4576      	cmp	r6, lr
 80a7486:	d31c      	bcc.n	80a74c2 <mbedtls_ssl_parse_certificate+0xda>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 80a7488:	2f00      	cmp	r7, #0
 80a748a:	d13f      	bne.n	80a750c <mbedtls_ssl_parse_certificate+0x124>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 80a748c:	4620      	mov	r0, r4
 80a748e:	e0a3      	b.n	80a75d8 <mbedtls_ssl_parse_certificate+0x1f0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 80a7490:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80a7492:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80a7494:	b128      	cbz	r0, 80a74a2 <mbedtls_ssl_parse_certificate+0xba>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 80a7496:	f7fe f9d6 	bl	80a5846 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 80a749a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80a749c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80a749e:	f004 ff5f 	bl	80ac360 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
 80a74a2:	f44f 719a 	mov.w	r1, #308	; 0x134
 80a74a6:	2001      	movs	r0, #1
 80a74a8:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 80a74aa:	f006 f80f 	bl	80ad4cc <calloc>
 80a74ae:	65f0      	str	r0, [r6, #92]	; 0x5c
 80a74b0:	2800      	cmp	r0, #0
 80a74b2:	d1de      	bne.n	80a7472 <mbedtls_ssl_parse_certificate+0x8a>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80a74b4:	2250      	movs	r2, #80	; 0x50
 80a74b6:	2102      	movs	r1, #2
 80a74b8:	4628      	mov	r0, r5
 80a74ba:	f7ff fa55 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80a74be:	484a      	ldr	r0, [pc, #296]	; (80a75e8 <mbedtls_ssl_parse_certificate+0x200>)
 80a74c0:	e08a      	b.n	80a75d8 <mbedtls_ssl_parse_certificate+0x1f0>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
 80a74c2:	1cf1      	adds	r1, r6, #3
 80a74c4:	458e      	cmp	lr, r1
 80a74c6:	d3cd      	bcc.n	80a7464 <mbedtls_ssl_parse_certificate+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
 80a74c8:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80a74ca:	5d83      	ldrb	r3, [r0, r6]
 80a74cc:	2b00      	cmp	r3, #0
 80a74ce:	d1c9      	bne.n	80a7464 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 80a74d0:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
 80a74d2:	7872      	ldrb	r2, [r6, #1]
 80a74d4:	78b3      	ldrb	r3, [r6, #2]
 80a74d6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
 80a74da:	2a7f      	cmp	r2, #127	; 0x7f
 80a74dc:	d9c2      	bls.n	80a7464 <mbedtls_ssl_parse_certificate+0x7c>
 80a74de:	188e      	adds	r6, r1, r2
 80a74e0:	45b6      	cmp	lr, r6
 80a74e2:	d3bf      	bcc.n	80a7464 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 80a74e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                                  ssl->in_msg + i, n );
 80a74e6:	4401      	add	r1, r0
 80a74e8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80a74ea:	f7fe fa05 	bl	80a58f8 <mbedtls_x509_crt_parse_der>
        switch( ret )
 80a74ee:	4548      	cmp	r0, r9
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
 80a74f0:	4604      	mov	r4, r0
        switch( ret )
 80a74f2:	d0c5      	beq.n	80a7480 <mbedtls_ssl_parse_certificate+0x98>
 80a74f4:	dc04      	bgt.n	80a7500 <mbedtls_ssl_parse_certificate+0x118>
 80a74f6:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 80a74fa:	d158      	bne.n	80a75ae <mbedtls_ssl_parse_certificate+0x1c6>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 80a74fc:	2250      	movs	r2, #80	; 0x50
 80a74fe:	e05d      	b.n	80a75bc <mbedtls_ssl_parse_certificate+0x1d4>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 80a7500:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 80a7504:	d055      	beq.n	80a75b2 <mbedtls_ssl_parse_certificate+0x1ca>
 80a7506:	2800      	cmp	r0, #0
 80a7508:	d0ba      	beq.n	80a7480 <mbedtls_ssl_parse_certificate+0x98>
 80a750a:	e050      	b.n	80a75ae <mbedtls_ssl_parse_certificate+0x1c6>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
 80a750c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80a750e:	682b      	ldr	r3, [r5, #0]
 80a7510:	6916      	ldr	r6, [r2, #16]
 80a7512:	b10e      	cbz	r6, 80a7518 <mbedtls_ssl_parse_certificate+0x130>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
 80a7514:	6952      	ldr	r2, [r2, #20]
 80a7516:	e001      	b.n	80a751c <mbedtls_ssl_parse_certificate+0x134>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 80a7518:	6cde      	ldr	r6, [r3, #76]	; 0x4c
            ca_crl   = ssl->conf->ca_crl;
 80a751a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80a751c:	6b99      	ldr	r1, [r3, #56]	; 0x38

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
                                ssl->session_negotiate->peer_cert,
 80a751e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80a7520:	9103      	str	r1, [sp, #12]
 80a7522:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a7524:	9102      	str	r1, [sp, #8]
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
 80a7526:	f100 0160 	add.w	r1, r0, #96	; 0x60
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80a752a:	9101      	str	r1, [sp, #4]
 80a752c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 80a7530:	9100      	str	r1, [sp, #0]
 80a7532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a7534:	4631      	mov	r1, r6
 80a7536:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80a7538:	f7fe f89e 	bl	80a5678 <mbedtls_x509_crt_verify_with_profile>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 80a753c:	682b      	ldr	r3, [r5, #0]
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80a753e:	4604      	mov	r4, r0
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 80a7540:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80a7544:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80a7546:	f002 0201 	and.w	r2, r2, #1
 80a754a:	f100 0360 	add.w	r3, r0, #96	; 0x60
 80a754e:	f082 0201 	eor.w	r2, r2, #1
 80a7552:	4641      	mov	r1, r8
 80a7554:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80a7556:	f7ff ff21 	bl	80a739c <mbedtls_ssl_check_cert_usage>
 80a755a:	b100      	cbz	r0, 80a755e <mbedtls_ssl_parse_certificate+0x176>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
 80a755c:	b174      	cbz	r4, 80a757c <mbedtls_ssl_parse_certificate+0x194>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 80a755e:	2f01      	cmp	r7, #1
 80a7560:	d105      	bne.n	80a756e <mbedtls_ssl_parse_certificate+0x186>
 80a7562:	f514 5f1c 	cmn.w	r4, #9984	; 0x2700
 80a7566:	d02e      	beq.n	80a75c6 <mbedtls_ssl_parse_certificate+0x1de>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 80a7568:	f514 4ff4 	cmn.w	r4, #31232	; 0x7a00
 80a756c:	d02b      	beq.n	80a75c6 <mbedtls_ssl_parse_certificate+0x1de>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 80a756e:	b90e      	cbnz	r6, 80a7574 <mbedtls_ssl_parse_certificate+0x18c>
 80a7570:	2f02      	cmp	r7, #2
 80a7572:	d001      	beq.n	80a7578 <mbedtls_ssl_parse_certificate+0x190>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
 80a7574:	b934      	cbnz	r4, 80a7584 <mbedtls_ssl_parse_certificate+0x19c>
 80a7576:	e789      	b.n	80a748c <mbedtls_ssl_parse_certificate+0xa4>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 80a7578:	4c1c      	ldr	r4, [pc, #112]	; (80a75ec <mbedtls_ssl_parse_certificate+0x204>)
 80a757a:	e003      	b.n	80a7584 <mbedtls_ssl_parse_certificate+0x19c>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 80a757c:	2f01      	cmp	r7, #1
 80a757e:	d085      	beq.n	80a748c <mbedtls_ssl_parse_certificate+0xa4>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 80a7580:	b31e      	cbz	r6, 80a75ca <mbedtls_ssl_parse_certificate+0x1e2>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 80a7582:	4c18      	ldr	r4, [pc, #96]	; (80a75e4 <mbedtls_ssl_parse_certificate+0x1fc>)
        if( ret != 0 )
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 80a7584:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80a7586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a7588:	05df      	lsls	r7, r3, #23
 80a758a:	d40e      	bmi.n	80a75aa <mbedtls_ssl_parse_certificate+0x1c2>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 80a758c:	075e      	lsls	r6, r3, #29
 80a758e:	d40e      	bmi.n	80a75ae <mbedtls_ssl_parse_certificate+0x1c6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 80a7590:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 80a7594:	d10d      	bne.n	80a75b2 <mbedtls_ssl_parse_certificate+0x1ca>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 80a7596:	07d8      	lsls	r0, r3, #31
 80a7598:	d40d      	bmi.n	80a75b6 <mbedtls_ssl_parse_certificate+0x1ce>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 80a759a:	0799      	lsls	r1, r3, #30
 80a759c:	d40d      	bmi.n	80a75ba <mbedtls_ssl_parse_certificate+0x1d2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 80a759e:	f013 0f08 	tst.w	r3, #8
 80a75a2:	bf14      	ite	ne
 80a75a4:	2230      	movne	r2, #48	; 0x30
 80a75a6:	222e      	moveq	r2, #46	; 0x2e
 80a75a8:	e008      	b.n	80a75bc <mbedtls_ssl_parse_certificate+0x1d4>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 80a75aa:	2231      	movs	r2, #49	; 0x31
 80a75ac:	e006      	b.n	80a75bc <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 80a75ae:	222a      	movs	r2, #42	; 0x2a
 80a75b0:	e004      	b.n	80a75bc <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80a75b2:	222b      	movs	r2, #43	; 0x2b
 80a75b4:	e002      	b.n	80a75bc <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 80a75b6:	222d      	movs	r2, #45	; 0x2d
 80a75b8:	e000      	b.n	80a75bc <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 80a75ba:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
 80a75bc:	2102      	movs	r1, #2
 80a75be:	4628      	mov	r0, r5
 80a75c0:	f7ff f9d2 	bl	80a6968 <mbedtls_ssl_send_alert_message>
 80a75c4:	e762      	b.n	80a748c <mbedtls_ssl_parse_certificate+0xa4>
 80a75c6:	2000      	movs	r0, #0
 80a75c8:	e006      	b.n	80a75d8 <mbedtls_ssl_parse_certificate+0x1f0>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 80a75ca:	4b08      	ldr	r3, [pc, #32]	; (80a75ec <mbedtls_ssl_parse_certificate+0x204>)
 80a75cc:	4805      	ldr	r0, [pc, #20]	; (80a75e4 <mbedtls_ssl_parse_certificate+0x1fc>)
 80a75ce:	2f02      	cmp	r7, #2
 80a75d0:	bf14      	ite	ne
 80a75d2:	4604      	movne	r4, r0
 80a75d4:	461c      	moveq	r4, r3
 80a75d6:	e7d5      	b.n	80a7584 <mbedtls_ssl_parse_certificate+0x19c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
 80a75d8:	b005      	add	sp, #20
 80a75da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a75de:	bf00      	nop
 80a75e0:	ffff8900 	.word	0xffff8900
 80a75e4:	ffff8600 	.word	0xffff8600
 80a75e8:	ffff8100 	.word	0xffff8100
 80a75ec:	ffff8980 	.word	0xffff8980
 80a75f0:	ffffd9d2 	.word	0xffffd9d2

080a75f4 <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a75f4:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 80a75f6:	7059      	strb	r1, [r3, #1]
 80a75f8:	4770      	bx	lr

080a75fa <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 80a75fa:	781a      	ldrb	r2, [r3, #0]
 80a75fc:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 80a75fe:	785b      	ldrb	r3, [r3, #1]
 80a7600:	600b      	str	r3, [r1, #0]
 80a7602:	4770      	bx	lr

080a7604 <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80a7604:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 80a7606:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a7608:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80a760a:	461c      	mov	r4, r3
 80a760c:	4284      	cmp	r4, r0
 80a760e:	d016      	beq.n	80a763e <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
 80a7610:	f8d6 e000 	ldr.w	lr, [r6]
 80a7614:	ebc3 050e 	rsb	r5, r3, lr
 80a7618:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 80a761a:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80a761e:	3401      	adds	r4, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
 80a7620:	42bd      	cmp	r5, r7
 80a7622:	bf2c      	ite	cs
 80a7624:	f04f 0c00 	movcs.w	ip, #0
 80a7628:	f04f 0c01 	movcc.w	ip, #1
 80a762c:	1bed      	subs	r5, r5, r7
 80a762e:	4573      	cmp	r3, lr
 80a7630:	bf94      	ite	ls
 80a7632:	4663      	movls	r3, ip
 80a7634:	f10c 0301 	addhi.w	r3, ip, #1
 80a7638:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80a763c:	e7e6      	b.n	80a760c <_ZL11mpi_sub_hlpjPmS_+0x8>
 80a763e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 80a7642:	b143      	cbz	r3, 80a7656 <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
 80a7644:	6811      	ldr	r1, [r2, #0]
 80a7646:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 80a7648:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
 80a764a:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 80a764e:	bf94      	ite	ls
 80a7650:	2300      	movls	r3, #0
 80a7652:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 80a7654:	e7f5      	b.n	80a7642 <_ZL11mpi_sub_hlpjPmS_+0x3e>
 80a7656:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a7658 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 80a7658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a765c:	460d      	mov	r5, r1
 80a765e:	4614      	mov	r4, r2
 80a7660:	4686      	mov	lr, r0
    mbedtls_mpi_uint c = 0, t = 0;
 80a7662:	f04f 0c00 	mov.w	ip, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 80a7666:	f1be 0f0f 	cmp.w	lr, #15
 80a766a:	f105 0540 	add.w	r5, r5, #64	; 0x40
 80a766e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80a7672:	f240 811e 	bls.w	80a78b2 <_ZL11mpi_mul_hlpjPmS_m+0x25a>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 80a7676:	f855 6c40 	ldr.w	r6, [r5, #-64]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 80a767a:	f1ae 0e10 	sub.w	lr, lr, #16
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 80a767e:	fba6 9a03 	umull	r9, sl, r6, r3
 80a7682:	f854 6c40 	ldr.w	r6, [r4, #-64]
 80a7686:	eb1c 0c09 	adds.w	ip, ip, r9
 80a768a:	bf2c      	ite	cs
 80a768c:	f04f 0801 	movcs.w	r8, #1
 80a7690:	f04f 0800 	movcc.w	r8, #0
 80a7694:	eb1c 0606 	adds.w	r6, ip, r6
 80a7698:	f844 6c40 	str.w	r6, [r4, #-64]
 80a769c:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 80a76a0:	eb48 080a 	adc.w	r8, r8, sl
 80a76a4:	fba3 9a06 	umull	r9, sl, r3, r6
 80a76a8:	f854 6c3c 	ldr.w	r6, [r4, #-60]
 80a76ac:	eb18 0809 	adds.w	r8, r8, r9
 80a76b0:	bf2c      	ite	cs
 80a76b2:	f04f 0c01 	movcs.w	ip, #1
 80a76b6:	f04f 0c00 	movcc.w	ip, #0
 80a76ba:	eb18 0606 	adds.w	r6, r8, r6
 80a76be:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
 80a76c2:	f855 7c38 	ldr.w	r7, [r5, #-56]
 80a76c6:	f854 6c38 	ldr.w	r6, [r4, #-56]
 80a76ca:	fba3 8907 	umull	r8, r9, r3, r7
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 80a76ce:	eb4c 0c0a 	adc.w	ip, ip, sl
        MULADDC_CORE   MULADDC_CORE
 80a76d2:	eb1c 0c08 	adds.w	ip, ip, r8
 80a76d6:	bf2c      	ite	cs
 80a76d8:	2701      	movcs	r7, #1
 80a76da:	2700      	movcc	r7, #0
 80a76dc:	eb1c 0606 	adds.w	r6, ip, r6
 80a76e0:	f844 6c38 	str.w	r6, [r4, #-56]
 80a76e4:	f855 6c34 	ldr.w	r6, [r5, #-52]
 80a76e8:	eb47 0709 	adc.w	r7, r7, r9
 80a76ec:	fba3 8906 	umull	r8, r9, r3, r6
 80a76f0:	f854 6c34 	ldr.w	r6, [r4, #-52]
 80a76f4:	eb17 0708 	adds.w	r7, r7, r8
 80a76f8:	bf2c      	ite	cs
 80a76fa:	f04f 0c01 	movcs.w	ip, #1
 80a76fe:	f04f 0c00 	movcc.w	ip, #0
 80a7702:	19be      	adds	r6, r7, r6
 80a7704:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
 80a7708:	f855 7c30 	ldr.w	r7, [r5, #-48]
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a770c:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 80a7710:	fba3 8907 	umull	r8, r9, r3, r7
 80a7714:	f854 6c30 	ldr.w	r6, [r4, #-48]
 80a7718:	eb1c 0c08 	adds.w	ip, ip, r8
 80a771c:	bf2c      	ite	cs
 80a771e:	2701      	movcs	r7, #1
 80a7720:	2700      	movcc	r7, #0
 80a7722:	eb1c 0606 	adds.w	r6, ip, r6
 80a7726:	f844 6c30 	str.w	r6, [r4, #-48]
 80a772a:	f855 6c2c 	ldr.w	r6, [r5, #-44]
 80a772e:	eb47 0709 	adc.w	r7, r7, r9
 80a7732:	fba3 8906 	umull	r8, r9, r3, r6
 80a7736:	f854 6c2c 	ldr.w	r6, [r4, #-44]
 80a773a:	eb17 0708 	adds.w	r7, r7, r8
 80a773e:	bf2c      	ite	cs
 80a7740:	f04f 0c01 	movcs.w	ip, #1
 80a7744:	f04f 0c00 	movcc.w	ip, #0
 80a7748:	19be      	adds	r6, r7, r6
 80a774a:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
 80a774e:	f855 7c28 	ldr.w	r7, [r5, #-40]
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a7752:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 80a7756:	fba3 8907 	umull	r8, r9, r3, r7
 80a775a:	f854 6c28 	ldr.w	r6, [r4, #-40]
 80a775e:	eb1c 0c08 	adds.w	ip, ip, r8
 80a7762:	bf2c      	ite	cs
 80a7764:	2701      	movcs	r7, #1
 80a7766:	2700      	movcc	r7, #0
 80a7768:	eb1c 0606 	adds.w	r6, ip, r6
 80a776c:	f844 6c28 	str.w	r6, [r4, #-40]
 80a7770:	f855 6c24 	ldr.w	r6, [r5, #-36]
 80a7774:	eb47 0709 	adc.w	r7, r7, r9
 80a7778:	fba3 8906 	umull	r8, r9, r3, r6
 80a777c:	f854 6c24 	ldr.w	r6, [r4, #-36]
 80a7780:	eb17 0708 	adds.w	r7, r7, r8
 80a7784:	bf2c      	ite	cs
 80a7786:	f04f 0c01 	movcs.w	ip, #1
 80a778a:	f04f 0c00 	movcc.w	ip, #0
 80a778e:	19be      	adds	r6, r7, r6
 80a7790:	f844 6c24 	str.w	r6, [r4, #-36]

        MULADDC_CORE   MULADDC_CORE
 80a7794:	f855 7c20 	ldr.w	r7, [r5, #-32]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a7798:	eb4c 0c09 	adc.w	ip, ip, r9

        MULADDC_CORE   MULADDC_CORE
 80a779c:	fba3 8907 	umull	r8, r9, r3, r7
 80a77a0:	f854 6c20 	ldr.w	r6, [r4, #-32]
 80a77a4:	eb1c 0c08 	adds.w	ip, ip, r8
 80a77a8:	bf2c      	ite	cs
 80a77aa:	2701      	movcs	r7, #1
 80a77ac:	2700      	movcc	r7, #0
 80a77ae:	eb1c 0606 	adds.w	r6, ip, r6
 80a77b2:	f844 6c20 	str.w	r6, [r4, #-32]
 80a77b6:	f855 6c1c 	ldr.w	r6, [r5, #-28]
 80a77ba:	eb47 0709 	adc.w	r7, r7, r9
 80a77be:	fba3 8906 	umull	r8, r9, r3, r6
 80a77c2:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 80a77c6:	eb17 0708 	adds.w	r7, r7, r8
 80a77ca:	bf2c      	ite	cs
 80a77cc:	f04f 0c01 	movcs.w	ip, #1
 80a77d0:	f04f 0c00 	movcc.w	ip, #0
 80a77d4:	19be      	adds	r6, r7, r6
 80a77d6:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
 80a77da:	f855 7c18 	ldr.w	r7, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 80a77de:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 80a77e2:	fba3 8907 	umull	r8, r9, r3, r7
 80a77e6:	f854 6c18 	ldr.w	r6, [r4, #-24]
 80a77ea:	eb1c 0c08 	adds.w	ip, ip, r8
 80a77ee:	bf2c      	ite	cs
 80a77f0:	2701      	movcs	r7, #1
 80a77f2:	2700      	movcc	r7, #0
 80a77f4:	eb1c 0606 	adds.w	r6, ip, r6
 80a77f8:	f844 6c18 	str.w	r6, [r4, #-24]
 80a77fc:	f855 6c14 	ldr.w	r6, [r5, #-20]
 80a7800:	eb47 0709 	adc.w	r7, r7, r9
 80a7804:	fba3 8906 	umull	r8, r9, r3, r6
 80a7808:	f854 6c14 	ldr.w	r6, [r4, #-20]
 80a780c:	eb17 0708 	adds.w	r7, r7, r8
 80a7810:	bf2c      	ite	cs
 80a7812:	f04f 0c01 	movcs.w	ip, #1
 80a7816:	f04f 0c00 	movcc.w	ip, #0
 80a781a:	19be      	adds	r6, r7, r6
 80a781c:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
 80a7820:	f855 7c10 	ldr.w	r7, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a7824:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 80a7828:	fba3 8907 	umull	r8, r9, r3, r7
 80a782c:	f854 6c10 	ldr.w	r6, [r4, #-16]
 80a7830:	eb1c 0c08 	adds.w	ip, ip, r8
 80a7834:	bf2c      	ite	cs
 80a7836:	2701      	movcs	r7, #1
 80a7838:	2700      	movcc	r7, #0
 80a783a:	eb1c 0606 	adds.w	r6, ip, r6
 80a783e:	f844 6c10 	str.w	r6, [r4, #-16]
 80a7842:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 80a7846:	eb47 0709 	adc.w	r7, r7, r9
 80a784a:	fba3 8906 	umull	r8, r9, r3, r6
 80a784e:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 80a7852:	eb17 0708 	adds.w	r7, r7, r8
 80a7856:	bf2c      	ite	cs
 80a7858:	f04f 0c01 	movcs.w	ip, #1
 80a785c:	f04f 0c00 	movcc.w	ip, #0
 80a7860:	19be      	adds	r6, r7, r6
 80a7862:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
 80a7866:	f855 7c08 	ldr.w	r7, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a786a:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 80a786e:	fba3 8907 	umull	r8, r9, r3, r7
 80a7872:	f854 6c08 	ldr.w	r6, [r4, #-8]
 80a7876:	eb1c 0c08 	adds.w	ip, ip, r8
 80a787a:	bf2c      	ite	cs
 80a787c:	2701      	movcs	r7, #1
 80a787e:	2700      	movcc	r7, #0
 80a7880:	eb1c 0606 	adds.w	r6, ip, r6
 80a7884:	f844 6c08 	str.w	r6, [r4, #-8]
 80a7888:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80a788c:	eb47 0709 	adc.w	r7, r7, r9
 80a7890:	fba3 8906 	umull	r8, r9, r3, r6
 80a7894:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80a7898:	eb17 0708 	adds.w	r7, r7, r8
 80a789c:	bf2c      	ite	cs
 80a789e:	f04f 0c01 	movcs.w	ip, #1
 80a78a2:	f04f 0c00 	movcc.w	ip, #0
 80a78a6:	19be      	adds	r6, r7, r6
 80a78a8:	eb4c 0c09 	adc.w	ip, ip, r9
 80a78ac:	f844 6c04 	str.w	r6, [r4, #-4]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 80a78b0:	e6d9      	b.n	80a7666 <_ZL11mpi_mul_hlpjPmS_m+0xe>
 80a78b2:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 80a78b6:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 80a78ba:	2807      	cmp	r0, #7
 80a78bc:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 80a78c0:	eb01 050e 	add.w	r5, r1, lr
 80a78c4:	eb02 040e 	add.w	r4, r2, lr
 80a78c8:	d966      	bls.n	80a7998 <_ZL11mpi_mul_hlpjPmS_m+0x340>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 80a78ca:	f851 600e 	ldr.w	r6, [r1, lr]
 80a78ce:	fba6 7803 	umull	r7, r8, r6, r3
 80a78d2:	f852 600e 	ldr.w	r6, [r2, lr]
 80a78d6:	eb1c 0c07 	adds.w	ip, ip, r7
 80a78da:	bf2c      	ite	cs
 80a78dc:	2101      	movcs	r1, #1
 80a78de:	2100      	movcc	r1, #0
 80a78e0:	eb1c 0606 	adds.w	r6, ip, r6
 80a78e4:	f842 600e 	str.w	r6, [r2, lr]
 80a78e8:	686e      	ldr	r6, [r5, #4]
 80a78ea:	eb41 0108 	adc.w	r1, r1, r8
 80a78ee:	fba3 7806 	umull	r7, r8, r3, r6
 80a78f2:	6866      	ldr	r6, [r4, #4]
 80a78f4:	19ca      	adds	r2, r1, r7
 80a78f6:	bf2c      	ite	cs
 80a78f8:	2101      	movcs	r1, #1
 80a78fa:	2100      	movcc	r1, #0
 80a78fc:	1992      	adds	r2, r2, r6
 80a78fe:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 80a7900:	68ae      	ldr	r6, [r5, #8]
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 80a7902:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 80a7906:	fba3 7806 	umull	r7, r8, r3, r6
 80a790a:	68a6      	ldr	r6, [r4, #8]
 80a790c:	19c9      	adds	r1, r1, r7
 80a790e:	bf2c      	ite	cs
 80a7910:	2201      	movcs	r2, #1
 80a7912:	2200      	movcc	r2, #0
 80a7914:	1989      	adds	r1, r1, r6
 80a7916:	60a1      	str	r1, [r4, #8]
 80a7918:	68ee      	ldr	r6, [r5, #12]
 80a791a:	eb42 0208 	adc.w	r2, r2, r8
 80a791e:	fba3 7806 	umull	r7, r8, r3, r6
 80a7922:	68e6      	ldr	r6, [r4, #12]
 80a7924:	19d2      	adds	r2, r2, r7
 80a7926:	bf2c      	ite	cs
 80a7928:	2101      	movcs	r1, #1
 80a792a:	2100      	movcc	r1, #0
 80a792c:	1992      	adds	r2, r2, r6
 80a792e:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 80a7930:	692e      	ldr	r6, [r5, #16]

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a7932:	eb41 0108 	adc.w	r1, r1, r8

        MULADDC_CORE   MULADDC_CORE
 80a7936:	fba3 7806 	umull	r7, r8, r3, r6
 80a793a:	6926      	ldr	r6, [r4, #16]
 80a793c:	19c9      	adds	r1, r1, r7
 80a793e:	bf2c      	ite	cs
 80a7940:	2201      	movcs	r2, #1
 80a7942:	2200      	movcc	r2, #0
 80a7944:	1989      	adds	r1, r1, r6
 80a7946:	6121      	str	r1, [r4, #16]
 80a7948:	696e      	ldr	r6, [r5, #20]
 80a794a:	eb42 0208 	adc.w	r2, r2, r8
 80a794e:	fba3 7806 	umull	r7, r8, r3, r6
 80a7952:	6966      	ldr	r6, [r4, #20]
 80a7954:	19d2      	adds	r2, r2, r7
 80a7956:	bf2c      	ite	cs
 80a7958:	2101      	movcs	r1, #1
 80a795a:	2100      	movcc	r1, #0
 80a795c:	1992      	adds	r2, r2, r6
 80a795e:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 80a7960:	69ae      	ldr	r6, [r5, #24]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 80a7962:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 80a7966:	fba3 7806 	umull	r7, r8, r3, r6
 80a796a:	69a6      	ldr	r6, [r4, #24]
 80a796c:	19c9      	adds	r1, r1, r7
 80a796e:	bf2c      	ite	cs
 80a7970:	2201      	movcs	r2, #1
 80a7972:	2200      	movcc	r2, #0
 80a7974:	1989      	adds	r1, r1, r6
 80a7976:	61a1      	str	r1, [r4, #24]
 80a7978:	69ee      	ldr	r6, [r5, #28]
 80a797a:	69e1      	ldr	r1, [r4, #28]
 80a797c:	fba3 6706 	umull	r6, r7, r3, r6
 80a7980:	eb42 0208 	adc.w	r2, r2, r8
 80a7984:	1992      	adds	r2, r2, r6
 80a7986:	bf2c      	ite	cs
 80a7988:	f04f 0c01 	movcs.w	ip, #1
 80a798c:	f04f 0c00 	movcc.w	ip, #0
 80a7990:	1852      	adds	r2, r2, r1
 80a7992:	eb4c 0c07 	adc.w	ip, ip, r7
 80a7996:	61e2      	str	r2, [r4, #28]
 80a7998:	08c2      	lsrs	r2, r0, #3
 80a799a:	0151      	lsls	r1, r2, #5
 80a799c:	440c      	add	r4, r1
 80a799e:	440d      	add	r5, r1
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    mbedtls_mpi_uint c = 0, t = 0;
 80a79a0:	4621      	mov	r1, r4
 80a79a2:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 80a79a6:	0080      	lsls	r0, r0, #2
 80a79a8:	eb05 0e00 	add.w	lr, r5, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 80a79ac:	4575      	cmp	r5, lr
 80a79ae:	d011      	beq.n	80a79d4 <_ZL11mpi_mul_hlpjPmS_m+0x37c>
    {
        MULADDC_INIT
        MULADDC_CORE
 80a79b0:	f855 6b04 	ldr.w	r6, [r5], #4
 80a79b4:	fba6 7803 	umull	r7, r8, r6, r3
 80a79b8:	680e      	ldr	r6, [r1, #0]
 80a79ba:	eb1c 0207 	adds.w	r2, ip, r7
 80a79be:	bf2c      	ite	cs
 80a79c0:	f04f 0c01 	movcs.w	ip, #1
 80a79c4:	f04f 0c00 	movcc.w	ip, #0
 80a79c8:	1992      	adds	r2, r2, r6
 80a79ca:	eb4c 0c08 	adc.w	ip, ip, r8
 80a79ce:	f841 2b04 	str.w	r2, [r1], #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 80a79d2:	e7eb      	b.n	80a79ac <_ZL11mpi_mul_hlpjPmS_m+0x354>
 80a79d4:	4404      	add	r4, r0
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 80a79d6:	6823      	ldr	r3, [r4, #0]
 80a79d8:	4463      	add	r3, ip
 80a79da:	459c      	cmp	ip, r3
 80a79dc:	f844 3b04 	str.w	r3, [r4], #4
 80a79e0:	bf8c      	ite	hi
 80a79e2:	f04f 0c01 	movhi.w	ip, #1
 80a79e6:	f04f 0c00 	movls.w	ip, #0
    }
    while( c != 0 );
 80a79ea:	d8f4      	bhi.n	80a79d6 <_ZL11mpi_mul_hlpjPmS_m+0x37e>
}
 80a79ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a79f0 <mbedtls_mpi_init>:
/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
 80a79f0:	b120      	cbz	r0, 80a79fc <mbedtls_mpi_init+0xc>
        return;

    X->s = 1;
 80a79f2:	2301      	movs	r3, #1
 80a79f4:	6003      	str	r3, [r0, #0]
    X->n = 0;
 80a79f6:	2300      	movs	r3, #0
 80a79f8:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 80a79fa:	6083      	str	r3, [r0, #8]
 80a79fc:	4770      	bx	lr

080a79fe <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 80a79fe:	b510      	push	{r4, lr}
    if( X == NULL )
 80a7a00:	4604      	mov	r4, r0
 80a7a02:	b188      	cbz	r0, 80a7a28 <mbedtls_mpi_free+0x2a>
        return;

    if( X->p != NULL )
 80a7a04:	6883      	ldr	r3, [r0, #8]
 80a7a06:	b153      	cbz	r3, 80a7a1e <mbedtls_mpi_free+0x20>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 80a7a08:	6842      	ldr	r2, [r0, #4]
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 80a7a0a:	2100      	movs	r1, #0
 80a7a0c:	f112 32ff 	adds.w	r2, r2, #4294967295
 80a7a10:	d302      	bcc.n	80a7a18 <mbedtls_mpi_free+0x1a>
 80a7a12:	6019      	str	r1, [r3, #0]
 80a7a14:	3304      	adds	r3, #4
 80a7a16:	e7f9      	b.n	80a7a0c <mbedtls_mpi_free+0xe>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
 80a7a18:	68a0      	ldr	r0, [r4, #8]
 80a7a1a:	f004 fca1 	bl	80ac360 <free>
    }

    X->s = 1;
 80a7a1e:	2301      	movs	r3, #1
 80a7a20:	6023      	str	r3, [r4, #0]
    X->n = 0;
 80a7a22:	2300      	movs	r3, #0
 80a7a24:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 80a7a26:	60a3      	str	r3, [r4, #8]
 80a7a28:	bd10      	pop	{r4, pc}

080a7a2a <mbedtls_mpi_grow>:
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80a7a2a:	f242 7310 	movw	r3, #10000	; 0x2710
 80a7a2e:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 80a7a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7a34:	4604      	mov	r4, r0
 80a7a36:	460f      	mov	r7, r1
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80a7a38:	d903      	bls.n	80a7a42 <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80a7a3a:	f06f 000f 	mvn.w	r0, #15
 80a7a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
 80a7a42:	6846      	ldr	r6, [r0, #4]
 80a7a44:	42b1      	cmp	r1, r6
 80a7a46:	d919      	bls.n	80a7a7c <mbedtls_mpi_grow+0x52>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 80a7a48:	2104      	movs	r1, #4
 80a7a4a:	4638      	mov	r0, r7
 80a7a4c:	f005 fd3e 	bl	80ad4cc <calloc>
 80a7a50:	4680      	mov	r8, r0
 80a7a52:	2800      	cmp	r0, #0
 80a7a54:	d0f1      	beq.n	80a7a3a <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
 80a7a56:	68a5      	ldr	r5, [r4, #8]
 80a7a58:	b16d      	cbz	r5, 80a7a76 <mbedtls_mpi_grow+0x4c>
        {
            memcpy( p, X->p, X->n * ciL );
 80a7a5a:	00b2      	lsls	r2, r6, #2
 80a7a5c:	4629      	mov	r1, r5
 80a7a5e:	f005 fd5a 	bl	80ad516 <memcpy>
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 80a7a62:	2300      	movs	r3, #0
 80a7a64:	f116 36ff 	adds.w	r6, r6, #4294967295
 80a7a68:	d302      	bcc.n	80a7a70 <mbedtls_mpi_grow+0x46>
 80a7a6a:	602b      	str	r3, [r5, #0]
 80a7a6c:	3504      	adds	r5, #4
 80a7a6e:	e7f9      	b.n	80a7a64 <mbedtls_mpi_grow+0x3a>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
 80a7a70:	68a0      	ldr	r0, [r4, #8]
 80a7a72:	f004 fc75 	bl	80ac360 <free>
        }

        X->n = nblimbs;
 80a7a76:	6067      	str	r7, [r4, #4]
        X->p = p;
 80a7a78:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
 80a7a7c:	2000      	movs	r0, #0
}
 80a7a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a7a82 <mbedtls_mpi_copy>:
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    int ret;
    size_t i;

    if( X == Y )
 80a7a82:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80a7a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a7a86:	4606      	mov	r6, r0
 80a7a88:	460f      	mov	r7, r1
    int ret;
    size_t i;

    if( X == Y )
 80a7a8a:	d020      	beq.n	80a7ace <mbedtls_mpi_copy+0x4c>
        return( 0 );

    if( Y->p == NULL )
 80a7a8c:	688c      	ldr	r4, [r1, #8]
 80a7a8e:	b914      	cbnz	r4, 80a7a96 <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
 80a7a90:	f7ff ffb5 	bl	80a79fe <mbedtls_mpi_free>
 80a7a94:	e01d      	b.n	80a7ad2 <mbedtls_mpi_copy+0x50>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
 80a7a96:	6849      	ldr	r1, [r1, #4]
 80a7a98:	3901      	subs	r1, #1
 80a7a9a:	b119      	cbz	r1, 80a7aa4 <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
 80a7a9c:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 80a7aa0:	2b00      	cmp	r3, #0
 80a7aa2:	d0f9      	beq.n	80a7a98 <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;
 80a7aa4:	683b      	ldr	r3, [r7, #0]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
 80a7aa6:	1c4d      	adds	r5, r1, #1

    X->s = Y->s;
 80a7aa8:	6033      	str	r3, [r6, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 80a7aaa:	4629      	mov	r1, r5
 80a7aac:	4630      	mov	r0, r6
 80a7aae:	f7ff ffbc 	bl	80a7a2a <mbedtls_mpi_grow>
 80a7ab2:	4604      	mov	r4, r0
 80a7ab4:	b968      	cbnz	r0, 80a7ad2 <mbedtls_mpi_copy+0x50>

    memset( X->p, 0, X->n * ciL );
 80a7ab6:	6872      	ldr	r2, [r6, #4]
 80a7ab8:	4601      	mov	r1, r0
 80a7aba:	0092      	lsls	r2, r2, #2
 80a7abc:	68b0      	ldr	r0, [r6, #8]
 80a7abe:	f005 fd50 	bl	80ad562 <memset>
    memcpy( X->p, Y->p, i * ciL );
 80a7ac2:	00aa      	lsls	r2, r5, #2
 80a7ac4:	68b9      	ldr	r1, [r7, #8]
 80a7ac6:	68b0      	ldr	r0, [r6, #8]
 80a7ac8:	f005 fd25 	bl	80ad516 <memcpy>
 80a7acc:	e001      	b.n	80a7ad2 <mbedtls_mpi_copy+0x50>
{
    int ret;
    size_t i;

    if( X == Y )
        return( 0 );
 80a7ace:	2000      	movs	r0, #0
 80a7ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a7ad2:	4620      	mov	r0, r4
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
 80a7ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a7ad6 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 80a7ad6:	b570      	push	{r4, r5, r6, lr}
 80a7ad8:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 80a7ada:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 80a7adc:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 80a7ade:	f7ff ffa4 	bl	80a7a2a <mbedtls_mpi_grow>
 80a7ae2:	4605      	mov	r5, r0
 80a7ae4:	b988      	cbnz	r0, 80a7b0a <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 80a7ae6:	6862      	ldr	r2, [r4, #4]
 80a7ae8:	4601      	mov	r1, r0
 80a7aea:	0092      	lsls	r2, r2, #2
 80a7aec:	68a0      	ldr	r0, [r4, #8]
 80a7aee:	f005 fd38 	bl	80ad562 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 80a7af2:	68a3      	ldr	r3, [r4, #8]
 80a7af4:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 80a7af8:	2e00      	cmp	r6, #0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
 80a7afa:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 80a7afe:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 80a7b00:	bfb4      	ite	lt
 80a7b02:	f04f 33ff 	movlt.w	r3, #4294967295
 80a7b06:	2301      	movge	r3, #1
 80a7b08:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 80a7b0a:	4628      	mov	r0, r5
 80a7b0c:	bd70      	pop	{r4, r5, r6, pc}

080a7b0e <mbedtls_mpi_get_bit>:
/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
 80a7b0e:	6843      	ldr	r3, [r0, #4]
 80a7b10:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 80a7b14:	bf3f      	itttt	cc
 80a7b16:	6883      	ldrcc	r3, [r0, #8]
 80a7b18:	094a      	lsrcc	r2, r1, #5
 80a7b1a:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
 80a7b1e:	f001 001f 	andcc.w	r0, r1, #31
 80a7b22:	bf3a      	itte	cc
 80a7b24:	fa23 f000 	lsrcc.w	r0, r3, r0
 80a7b28:	f000 0001 	andcc.w	r0, r0, #1
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
        return( 0 );
 80a7b2c:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
 80a7b2e:	4770      	bx	lr

080a7b30 <mbedtls_mpi_lsb>:
/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
 80a7b30:	2300      	movs	r3, #0

    for( i = 0; i < X->n; i++ )
 80a7b32:	461a      	mov	r2, r3

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 80a7b34:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 80a7b36:	6844      	ldr	r4, [r0, #4]
 80a7b38:	42a2      	cmp	r2, r4
 80a7b3a:	d00e      	beq.n	80a7b5a <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 80a7b3c:	6881      	ldr	r1, [r0, #8]
 80a7b3e:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 80a7b42:	2100      	movs	r1, #0
 80a7b44:	fa25 f601 	lsr.w	r6, r5, r1
 80a7b48:	07f6      	lsls	r6, r6, #31
 80a7b4a:	d408      	bmi.n	80a7b5e <mbedtls_mpi_lsb+0x2e>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
 80a7b4c:	3101      	adds	r1, #1
 80a7b4e:	2920      	cmp	r1, #32
 80a7b50:	f103 0301 	add.w	r3, r3, #1
 80a7b54:	d1f6      	bne.n	80a7b44 <mbedtls_mpi_lsb+0x14>
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 80a7b56:	3201      	adds	r2, #1
 80a7b58:	e7ee      	b.n	80a7b38 <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
 80a7b5a:	2000      	movs	r0, #0
 80a7b5c:	bd70      	pop	{r4, r5, r6, pc}
 80a7b5e:	4618      	mov	r0, r3
}
 80a7b60:	bd70      	pop	{r4, r5, r6, pc}

080a7b62 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 80a7b62:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
 80a7b64:	6843      	ldr	r3, [r0, #4]
 80a7b66:	b1d3      	cbz	r3, 80a7b9e <mbedtls_mpi_bitlen+0x3c>
 80a7b68:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80a7b6c:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 80a7b6e:	1e59      	subs	r1, r3, #1
 80a7b70:	0092      	lsls	r2, r2, #2
 80a7b72:	6883      	ldr	r3, [r0, #8]
 80a7b74:	b121      	cbz	r1, 80a7b80 <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
 80a7b76:	589c      	ldr	r4, [r3, r2]
 80a7b78:	3a04      	subs	r2, #4
 80a7b7a:	b90c      	cbnz	r4, 80a7b80 <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 80a7b7c:	3901      	subs	r1, #1
 80a7b7e:	e7f8      	b.n	80a7b72 <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
 80a7b80:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 80a7b84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
 80a7b88:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
 80a7b8a:	4210      	tst	r0, r2
 80a7b8c:	d104      	bne.n	80a7b98 <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 80a7b8e:	3301      	adds	r3, #1
 80a7b90:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
 80a7b92:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 80a7b96:	d1f8      	bne.n	80a7b8a <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
 80a7b98:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
 80a7b9c:	3320      	adds	r3, #32
}
 80a7b9e:	4618      	mov	r0, r3
 80a7ba0:	bd10      	pop	{r4, pc}

080a7ba2 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 80a7ba2:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 80a7ba4:	f7ff ffdd 	bl	80a7b62 <mbedtls_mpi_bitlen>
 80a7ba8:	3007      	adds	r0, #7
}
 80a7baa:	08c0      	lsrs	r0, r0, #3
 80a7bac:	bd08      	pop	{r3, pc}

080a7bae <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 80a7bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a7bb0:	460d      	mov	r5, r1
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 80a7bb2:	f012 0103 	ands.w	r1, r2, #3
 80a7bb6:	bf18      	it	ne
 80a7bb8:	2101      	movne	r1, #1

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80a7bba:	6843      	ldr	r3, [r0, #4]
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 80a7bbc:	eb01 0492 	add.w	r4, r1, r2, lsr #2

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80a7bc0:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 80a7bc2:	4606      	mov	r6, r0
 80a7bc4:	4617      	mov	r7, r2
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80a7bc6:	d105      	bne.n	80a7bd4 <mbedtls_mpi_read_binary+0x26>
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80a7bc8:	2100      	movs	r1, #0
 80a7bca:	4630      	mov	r0, r6
 80a7bcc:	f7ff ff83 	bl	80a7ad6 <mbedtls_mpi_lset>
 80a7bd0:	b160      	cbz	r0, 80a7bec <mbedtls_mpi_read_binary+0x3e>
 80a7bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
 80a7bd4:	f7ff ff13 	bl	80a79fe <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 80a7bd8:	4630      	mov	r0, r6
 80a7bda:	f7ff ff09 	bl	80a79f0 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80a7bde:	4621      	mov	r1, r4
 80a7be0:	4630      	mov	r0, r6
 80a7be2:	f7ff ff22 	bl	80a7a2a <mbedtls_mpi_grow>
 80a7be6:	2800      	cmp	r0, #0
 80a7be8:	d0ee      	beq.n	80a7bc8 <mbedtls_mpi_read_binary+0x1a>
 80a7bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80a7bec:	4603      	mov	r3, r0
 80a7bee:	19e9      	adds	r1, r5, r7

    for( i = buflen, j = 0; i > 0; i--, j++ )
 80a7bf0:	42bb      	cmp	r3, r7
 80a7bf2:	d010      	beq.n	80a7c16 <mbedtls_mpi_read_binary+0x68>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 80a7bf4:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 80a7bf8:	68b2      	ldr	r2, [r6, #8]
 80a7bfa:	00dc      	lsls	r4, r3, #3
 80a7bfc:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80a7c00:	f004 0418 	and.w	r4, r4, #24
 80a7c04:	fa05 f404 	lsl.w	r4, r5, r4
 80a7c08:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 80a7c0c:	3301      	adds	r3, #1
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 80a7c0e:	432c      	orrs	r4, r5
 80a7c10:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 80a7c14:	e7ec      	b.n	80a7bf0 <mbedtls_mpi_read_binary+0x42>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);

cleanup:

    return( ret );
}
 80a7c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a7c18 <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
 80a7c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a7c1a:	4614      	mov	r4, r2
 80a7c1c:	4605      	mov	r5, r0
 80a7c1e:	460f      	mov	r7, r1
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 80a7c20:	f7ff ffbf 	bl	80a7ba2 <mbedtls_mpi_size>

    if( buflen < n )
 80a7c24:	42a0      	cmp	r0, r4
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 80a7c26:	4606      	mov	r6, r0

    if( buflen < n )
 80a7c28:	d814      	bhi.n	80a7c54 <mbedtls_mpi_write_binary+0x3c>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );
 80a7c2a:	4622      	mov	r2, r4
 80a7c2c:	2100      	movs	r1, #0
 80a7c2e:	4638      	mov	r0, r7
 80a7c30:	f005 fc97 	bl	80ad562 <memset>
 80a7c34:	443c      	add	r4, r7

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 80a7c36:	2300      	movs	r3, #0
 80a7c38:	42b3      	cmp	r3, r6
 80a7c3a:	d00e      	beq.n	80a7c5a <mbedtls_mpi_write_binary+0x42>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 80a7c3c:	68a8      	ldr	r0, [r5, #8]
 80a7c3e:	00da      	lsls	r2, r3, #3
 80a7c40:	089f      	lsrs	r7, r3, #2
 80a7c42:	f002 0118 	and.w	r1, r2, #24
 80a7c46:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 80a7c4a:	3301      	adds	r3, #1
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 80a7c4c:	40ca      	lsrs	r2, r1
 80a7c4e:	f804 2d01 	strb.w	r2, [r4, #-1]!
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 80a7c52:	e7f1      	b.n	80a7c38 <mbedtls_mpi_write_binary+0x20>
    size_t i, j, n;

    n = mbedtls_mpi_size( X );

    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 80a7c54:	f06f 0007 	mvn.w	r0, #7
 80a7c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );

    return( 0 );
 80a7c5a:	2000      	movs	r0, #0
}
 80a7c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a7c5e <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 80a7c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a7c60:	4604      	mov	r4, r0
 80a7c62:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
 80a7c64:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
 80a7c66:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
 80a7c6a:	f7ff ff7a 	bl	80a7b62 <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
 80a7c6e:	6863      	ldr	r3, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
 80a7c70:	4428      	add	r0, r5

    if( X->n * biL < i )
 80a7c72:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 80a7c76:	d809      	bhi.n	80a7c8c <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 80a7c78:	b346      	cbz	r6, 80a7ccc <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
 80a7c7a:	6863      	ldr	r3, [r4, #4]
 80a7c7c:	f06f 0103 	mvn.w	r1, #3
 80a7c80:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80a7c84:	3a01      	subs	r2, #1
 80a7c86:	0092      	lsls	r2, r2, #2
 80a7c88:	4371      	muls	r1, r6
 80a7c8a:	e00b      	b.n	80a7ca4 <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 80a7c8c:	f010 011f 	ands.w	r1, r0, #31
 80a7c90:	bf18      	it	ne
 80a7c92:	2101      	movne	r1, #1
 80a7c94:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 80a7c98:	4620      	mov	r0, r4
 80a7c9a:	f7ff fec6 	bl	80a7a2a <mbedtls_mpi_grow>
 80a7c9e:	2800      	cmp	r0, #0
 80a7ca0:	d0ea      	beq.n	80a7c78 <mbedtls_mpi_shift_l+0x1a>
 80a7ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 80a7ca4:	42b3      	cmp	r3, r6
 80a7ca6:	d906      	bls.n	80a7cb6 <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 80a7ca8:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 80a7caa:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 80a7cac:	1885      	adds	r5, r0, r2
 80a7cae:	586d      	ldr	r5, [r5, r1]
 80a7cb0:	5085      	str	r5, [r0, r2]
 80a7cb2:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 80a7cb4:	e7f6      	b.n	80a7ca4 <mbedtls_mpi_shift_l+0x46>
 80a7cb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a7cba:	3b01      	subs	r3, #1
 80a7cbc:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
 80a7cbe:	2100      	movs	r1, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 80a7cc0:	1d1a      	adds	r2, r3, #4
 80a7cc2:	d003      	beq.n	80a7ccc <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
 80a7cc4:	68a2      	ldr	r2, [r4, #8]
 80a7cc6:	50d1      	str	r1, [r2, r3]
 80a7cc8:	3b04      	subs	r3, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 80a7cca:	e7f9      	b.n	80a7cc0 <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 80a7ccc:	b90f      	cbnz	r7, 80a7cd2 <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
 80a7cce:	2000      	movs	r0, #0
 80a7cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a7cd2:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 80a7cd4:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
 80a7cd6:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 80a7cda:	6861      	ldr	r1, [r4, #4]
 80a7cdc:	428e      	cmp	r6, r1
 80a7cde:	d2f6      	bcs.n	80a7cce <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
 80a7ce0:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 80a7ce2:	3601      	adds	r6, #1
        {
            r1 = X->p[i] >> (biL - t1);
 80a7ce4:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
 80a7ce6:	fa01 f507 	lsl.w	r5, r1, r7
 80a7cea:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
 80a7cec:	68a0      	ldr	r0, [r4, #8]
 80a7cee:	58c5      	ldr	r5, [r0, r3]
 80a7cf0:	432a      	orrs	r2, r5
 80a7cf2:	50c2      	str	r2, [r0, r3]
 80a7cf4:	3304      	adds	r3, #4
            r0 = r1;
 80a7cf6:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 80a7cfa:	e7ee      	b.n	80a7cda <mbedtls_mpi_shift_l+0x7c>

080a7cfc <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 80a7cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80a7cfe:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
 80a7d00:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80a7d02:	429a      	cmp	r2, r3
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);
 80a7d04:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80a7d08:	d801      	bhi.n	80a7d0e <mbedtls_mpi_shift_r+0x12>
 80a7d0a:	d105      	bne.n	80a7d18 <mbedtls_mpi_shift_r+0x1c>
 80a7d0c:	b159      	cbz	r1, 80a7d26 <mbedtls_mpi_shift_r+0x2a>
            r0 = r1;
        }
    }

    return( 0 );
}
 80a7d0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
 80a7d12:	2100      	movs	r1, #0
 80a7d14:	f7ff bedf 	b.w	80a7ad6 <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 80a7d18:	b1d2      	cbz	r2, 80a7d50 <mbedtls_mpi_shift_r+0x54>
 80a7d1a:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
 80a7d1c:	6844      	ldr	r4, [r0, #4]
 80a7d1e:	1aa4      	subs	r4, r4, r2
 80a7d20:	42a3      	cmp	r3, r4
 80a7d22:	d305      	bcc.n	80a7d30 <mbedtls_mpi_shift_r+0x34>
 80a7d24:	e001      	b.n	80a7d2a <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 80a7d26:	b35a      	cbz	r2, 80a7d80 <mbedtls_mpi_shift_r+0x84>
 80a7d28:	460b      	mov	r3, r1
 80a7d2a:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
 80a7d2c:	2500      	movs	r5, #0
 80a7d2e:	e007      	b.n	80a7d40 <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
 80a7d30:	6884      	ldr	r4, [r0, #8]
 80a7d32:	189d      	adds	r5, r3, r2
 80a7d34:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80a7d38:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
 80a7d3c:	3301      	adds	r3, #1
 80a7d3e:	e7ed      	b.n	80a7d1c <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 80a7d40:	6844      	ldr	r4, [r0, #4]
 80a7d42:	42a3      	cmp	r3, r4
 80a7d44:	d204      	bcs.n	80a7d50 <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
 80a7d46:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 80a7d48:	3301      	adds	r3, #1
            X->p[i] = 0;
 80a7d4a:	50a5      	str	r5, [r4, r2]
 80a7d4c:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 80a7d4e:	e7f7      	b.n	80a7d40 <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 80a7d50:	b1b1      	cbz	r1, 80a7d80 <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
 80a7d52:	6844      	ldr	r4, [r0, #4]
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 80a7d54:	2200      	movs	r2, #0
 80a7d56:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80a7d5a:	3b01      	subs	r3, #1
 80a7d5c:	009b      	lsls	r3, r3, #2
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
 80a7d5e:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 80a7d62:	b16c      	cbz	r4, 80a7d80 <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
 80a7d64:	6886      	ldr	r6, [r0, #8]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 80a7d66:	3c01      	subs	r4, #1
        {
            r1 = X->p[i - 1] << (biL - v1);
 80a7d68:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
 80a7d6a:	fa25 f701 	lsr.w	r7, r5, r1
 80a7d6e:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
 80a7d70:	6886      	ldr	r6, [r0, #8]
 80a7d72:	58f7      	ldr	r7, [r6, r3]
 80a7d74:	433a      	orrs	r2, r7
 80a7d76:	50f2      	str	r2, [r6, r3]
 80a7d78:	3b04      	subs	r3, #4
            r0 = r1;
 80a7d7a:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 80a7d7e:	e7f0      	b.n	80a7d62 <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
 80a7d80:	2000      	movs	r0, #0
 80a7d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a7d84 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80a7d84:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 80a7d86:	6843      	ldr	r3, [r0, #4]
 80a7d88:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80a7d8c:	3a01      	subs	r2, #1
 80a7d8e:	0092      	lsls	r2, r2, #2
 80a7d90:	b12b      	cbz	r3, 80a7d9e <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
 80a7d92:	6884      	ldr	r4, [r0, #8]
 80a7d94:	58a4      	ldr	r4, [r4, r2]
 80a7d96:	3a04      	subs	r2, #4
 80a7d98:	b90c      	cbnz	r4, 80a7d9e <mbedtls_mpi_cmp_abs+0x1a>
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 80a7d9a:	3b01      	subs	r3, #1
 80a7d9c:	e7f8      	b.n	80a7d90 <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80a7d9e:	684c      	ldr	r4, [r1, #4]
 80a7da0:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80a7da4:	3a01      	subs	r2, #1
 80a7da6:	0092      	lsls	r2, r2, #2
 80a7da8:	b1c4      	cbz	r4, 80a7ddc <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
 80a7daa:	688d      	ldr	r5, [r1, #8]
 80a7dac:	58ae      	ldr	r6, [r5, r2]
 80a7dae:	3a04      	subs	r2, #4
 80a7db0:	b90e      	cbnz	r6, 80a7db6 <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80a7db2:	3c01      	subs	r4, #1
 80a7db4:	e7f8      	b.n	80a7da8 <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 80a7db6:	429c      	cmp	r4, r3
 80a7db8:	d30b      	bcc.n	80a7dd2 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 80a7dba:	d913      	bls.n	80a7de4 <mbedtls_mpi_cmp_abs+0x60>
 80a7dbc:	e00b      	b.n	80a7dd6 <mbedtls_mpi_cmp_abs+0x52>
 80a7dbe:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 80a7dc2:	d308      	bcc.n	80a7dd6 <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
 80a7dc4:	3b01      	subs	r3, #1
 80a7dc6:	b193      	cbz	r3, 80a7dee <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 80a7dc8:	6881      	ldr	r1, [r0, #8]
 80a7dca:	588c      	ldr	r4, [r1, r2]
 80a7dcc:	58a9      	ldr	r1, [r5, r2]
 80a7dce:	428c      	cmp	r4, r1
 80a7dd0:	d9f5      	bls.n	80a7dbe <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 80a7dd2:	2001      	movs	r0, #1
 80a7dd4:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 80a7dd6:	f04f 30ff 	mov.w	r0, #4294967295
 80a7dda:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
 80a7ddc:	1c18      	adds	r0, r3, #0
 80a7dde:	bf18      	it	ne
 80a7de0:	2001      	movne	r0, #1
 80a7de2:	bd70      	pop	{r4, r5, r6, pc}
 80a7de4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80a7de8:	3a01      	subs	r2, #1
 80a7dea:	0092      	lsls	r2, r2, #2
 80a7dec:	e7eb      	b.n	80a7dc6 <mbedtls_mpi_cmp_abs+0x42>
 80a7dee:	4618      	mov	r0, r3
 80a7df0:	bd70      	pop	{r4, r5, r6, pc}

080a7df2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 80a7df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7df6:	4616      	mov	r6, r2
 80a7df8:	b085      	sub	sp, #20
 80a7dfa:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 80a7dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 80a7dfe:	4681      	mov	r9, r0
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 80a7e00:	685a      	ldr	r2, [r3, #4]
 80a7e02:	6873      	ldr	r3, [r6, #4]
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 80a7e04:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 80a7e06:	3301      	adds	r3, #1
 80a7e08:	429a      	cmp	r2, r3
 80a7e0a:	d351      	bcc.n	80a7eb0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
 80a7e0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a7e0e:	6898      	ldr	r0, [r3, #8]
 80a7e10:	2800      	cmp	r0, #0
 80a7e12:	d04d      	beq.n	80a7eb0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 80a7e14:	0092      	lsls	r2, r2, #2
 80a7e16:	2100      	movs	r1, #0
 80a7e18:	f005 fba3 	bl	80ad562 <memset>

    d = T->p;
 80a7e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 80a7e1e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 80a7e22:	689b      	ldr	r3, [r3, #8]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 80a7e24:	f10a 0701 	add.w	r7, sl, #1
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 80a7e28:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
 80a7e2a:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 80a7e2e:	9d00      	ldr	r5, [sp, #0]
 80a7e30:	4553      	cmp	r3, sl
 80a7e32:	bf28      	it	cs
 80a7e34:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 80a7e36:	00bf      	lsls	r7, r7, #2
 80a7e38:	9302      	str	r3, [sp, #8]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 80a7e3a:	2400      	movs	r4, #0
 80a7e3c:	4554      	cmp	r4, sl
 80a7e3e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a7e42:	d01b      	beq.n	80a7e7c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80a7e44:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 80a7e48:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80a7e4c:	682a      	ldr	r2, [r5, #0]
 80a7e4e:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
 80a7e50:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80a7e52:	fb03 2308 	mla	r3, r3, r8, r2
 80a7e56:	9a03      	ldr	r2, [sp, #12]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 80a7e58:	3401      	adds	r4, #1
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80a7e5a:	4353      	muls	r3, r2

        mpi_mul_hlp( m, B->p, d, u0 );
 80a7e5c:	462a      	mov	r2, r5
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80a7e5e:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
 80a7e60:	4643      	mov	r3, r8
 80a7e62:	f7ff fbf9 	bl	80a7658 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
 80a7e66:	9b01      	ldr	r3, [sp, #4]
 80a7e68:	462a      	mov	r2, r5
 80a7e6a:	68b1      	ldr	r1, [r6, #8]
 80a7e6c:	4650      	mov	r0, sl
 80a7e6e:	f7ff fbf3 	bl	80a7658 <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
 80a7e72:	f845 8b04 	str.w	r8, [r5], #4
 80a7e76:	2300      	movs	r3, #0
 80a7e78:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 80a7e7a:	e7df      	b.n	80a7e3c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 80a7e7c:	9b00      	ldr	r3, [sp, #0]
 80a7e7e:	1f39      	subs	r1, r7, #4
 80a7e80:	440b      	add	r3, r1
 80a7e82:	463a      	mov	r2, r7
 80a7e84:	4619      	mov	r1, r3
 80a7e86:	f005 fb46 	bl	80ad516 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 80a7e8a:	4631      	mov	r1, r6
 80a7e8c:	4648      	mov	r0, r9
 80a7e8e:	f7ff ff79 	bl	80a7d84 <mbedtls_mpi_cmp_abs>
 80a7e92:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 80a7e94:	bfb8      	it	lt
 80a7e96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80a7e98:	4620      	mov	r0, r4
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
 80a7e9a:	bfa7      	ittee	ge
 80a7e9c:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 80a7ea0:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 80a7ea2:	689a      	ldrlt	r2, [r3, #8]
 80a7ea4:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 80a7ea8:	f7ff fbac 	bl	80a7604 <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
 80a7eac:	2000      	movs	r0, #0
 80a7eae:	e001      	b.n	80a7eb4 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80a7eb0:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
 80a7eb4:	b005      	add	sp, #20
 80a7eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a7eba <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80a7eba:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 80a7ebc:	6843      	ldr	r3, [r0, #4]
 80a7ebe:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80a7ec2:	3a01      	subs	r2, #1
 80a7ec4:	0092      	lsls	r2, r2, #2
 80a7ec6:	b12b      	cbz	r3, 80a7ed4 <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
 80a7ec8:	6884      	ldr	r4, [r0, #8]
 80a7eca:	58a4      	ldr	r4, [r4, r2]
 80a7ecc:	3a04      	subs	r2, #4
 80a7ece:	b90c      	cbnz	r4, 80a7ed4 <mbedtls_mpi_cmp_mpi+0x1a>
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 80a7ed0:	3b01      	subs	r3, #1
 80a7ed2:	e7f8      	b.n	80a7ec6 <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80a7ed4:	684c      	ldr	r4, [r1, #4]
 80a7ed6:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80a7eda:	3a01      	subs	r2, #1
 80a7edc:	0092      	lsls	r2, r2, #2
 80a7ede:	b364      	cbz	r4, 80a7f3a <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
 80a7ee0:	688d      	ldr	r5, [r1, #8]
 80a7ee2:	58ae      	ldr	r6, [r5, r2]
 80a7ee4:	3a04      	subs	r2, #4
 80a7ee6:	b90e      	cbnz	r6, 80a7eec <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80a7ee8:	3c01      	subs	r4, #1
 80a7eea:	e7f8      	b.n	80a7ede <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
 80a7eec:	429c      	cmp	r4, r3
 80a7eee:	d201      	bcs.n	80a7ef4 <mbedtls_mpi_cmp_mpi+0x3a>
 80a7ef0:	6802      	ldr	r2, [r0, #0]
 80a7ef2:	e025      	b.n	80a7f40 <mbedtls_mpi_cmp_mpi+0x86>
 80a7ef4:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 80a7ef6:	d901      	bls.n	80a7efc <mbedtls_mpi_cmp_mpi+0x42>
 80a7ef8:	424a      	negs	r2, r1
 80a7efa:	e021      	b.n	80a7f40 <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80a7efc:	6802      	ldr	r2, [r0, #0]
 80a7efe:	2a00      	cmp	r2, #0
 80a7f00:	dd01      	ble.n	80a7f06 <mbedtls_mpi_cmp_mpi+0x4c>
 80a7f02:	2900      	cmp	r1, #0
 80a7f04:	db14      	blt.n	80a7f30 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80a7f06:	2900      	cmp	r1, #0
 80a7f08:	dd01      	ble.n	80a7f0e <mbedtls_mpi_cmp_mpi+0x54>
 80a7f0a:	2a00      	cmp	r2, #0
 80a7f0c:	db12      	blt.n	80a7f34 <mbedtls_mpi_cmp_mpi+0x7a>
 80a7f0e:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80a7f12:	3901      	subs	r1, #1
 80a7f14:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
 80a7f16:	b193      	cbz	r3, 80a7f3e <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 80a7f18:	6884      	ldr	r4, [r0, #8]
 80a7f1a:	5866      	ldr	r6, [r4, r1]
 80a7f1c:	586c      	ldr	r4, [r5, r1]
 80a7f1e:	42a6      	cmp	r6, r4
 80a7f20:	d80e      	bhi.n	80a7f40 <mbedtls_mpi_cmp_mpi+0x86>
 80a7f22:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 80a7f26:	d201      	bcs.n	80a7f2c <mbedtls_mpi_cmp_mpi+0x72>
 80a7f28:	4252      	negs	r2, r2
 80a7f2a:	e009      	b.n	80a7f40 <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
 80a7f2c:	3b01      	subs	r3, #1
 80a7f2e:	e7f2      	b.n	80a7f16 <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80a7f30:	2201      	movs	r2, #1
 80a7f32:	e005      	b.n	80a7f40 <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80a7f34:	f04f 32ff 	mov.w	r2, #4294967295
 80a7f38:	e002      	b.n	80a7f40 <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
 80a7f3a:	2b00      	cmp	r3, #0
 80a7f3c:	d1d8      	bne.n	80a7ef0 <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
 80a7f3e:	461a      	mov	r2, r3
}
 80a7f40:	4610      	mov	r0, r2
 80a7f42:	bd70      	pop	{r4, r5, r6, pc}

080a7f44 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 80a7f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 80a7f46:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80a7f4a:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 80a7f4e:	2900      	cmp	r1, #0
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 80a7f50:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 80a7f52:	bfb4      	ite	lt
 80a7f54:	f04f 33ff 	movlt.w	r3, #4294967295
 80a7f58:	2301      	movge	r3, #1
 80a7f5a:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80a7f5c:	a901      	add	r1, sp, #4
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
 80a7f5e:	2301      	movs	r3, #1
 80a7f60:	9302      	str	r3, [sp, #8]
    Y.p = p;
 80a7f62:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80a7f66:	f7ff ffa8 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
}
 80a7f6a:	b005      	add	sp, #20
 80a7f6c:	f85d fb04 	ldr.w	pc, [sp], #4

080a7f70 <mbedtls_mpi_add_abs>:
{
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 80a7f70:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a7f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7f76:	4606      	mov	r6, r0
 80a7f78:	4615      	mov	r5, r2
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 80a7f7a:	d006      	beq.n	80a7f8a <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
 80a7f7c:	4288      	cmp	r0, r1
 80a7f7e:	d005      	beq.n	80a7f8c <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80a7f80:	f7ff fd7f 	bl	80a7a82 <mbedtls_mpi_copy>
 80a7f84:	4607      	mov	r7, r0
 80a7f86:	b108      	cbz	r0, 80a7f8c <mbedtls_mpi_add_abs+0x1c>
 80a7f88:	e049      	b.n	80a801e <mbedtls_mpi_add_abs+0xae>
 80a7f8a:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 80a7f8c:	2301      	movs	r3, #1
 80a7f8e:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
 80a7f90:	686c      	ldr	r4, [r5, #4]
 80a7f92:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80a7f96:	3b01      	subs	r3, #1
 80a7f98:	009b      	lsls	r3, r3, #2
 80a7f9a:	b12c      	cbz	r4, 80a7fa8 <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
 80a7f9c:	68aa      	ldr	r2, [r5, #8]
 80a7f9e:	58d2      	ldr	r2, [r2, r3]
 80a7fa0:	3b04      	subs	r3, #4
 80a7fa2:	b90a      	cbnz	r2, 80a7fa8 <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
 80a7fa4:	3c01      	subs	r4, #1
 80a7fa6:	e7f8      	b.n	80a7f9a <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80a7fa8:	4621      	mov	r1, r4
 80a7faa:	4630      	mov	r0, r6
 80a7fac:	f7ff fd3d 	bl	80a7a2a <mbedtls_mpi_grow>
 80a7fb0:	4607      	mov	r7, r0
 80a7fb2:	2800      	cmp	r0, #0
 80a7fb4:	d133      	bne.n	80a801e <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
 80a7fb6:	68b3      	ldr	r3, [r6, #8]
 80a7fb8:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80a7fbc:	4618      	mov	r0, r3
 80a7fbe:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 80a7fc0:	4639      	mov	r1, r7
 80a7fc2:	42a1      	cmp	r1, r4
 80a7fc4:	d00f      	beq.n	80a7fe6 <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 80a7fc6:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
 80a7fc8:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 80a7fcc:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
 80a7fce:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 80a7fd0:	bf2c      	ite	cs
 80a7fd2:	2201      	movcs	r2, #1
 80a7fd4:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
 80a7fd6:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 80a7fda:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
 80a7fdc:	45ae      	cmp	lr, r5
 80a7fde:	bf94      	ite	ls
 80a7fe0:	4615      	movls	r5, r2
 80a7fe2:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 80a7fe4:	e7ed      	b.n	80a7fc2 <mbedtls_mpi_add_abs+0x52>
 80a7fe6:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a7fea:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 80a7fec:	b1bd      	cbz	r5, 80a801e <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
 80a7fee:	6872      	ldr	r2, [r6, #4]
 80a7ff0:	4294      	cmp	r4, r2
 80a7ff2:	f104 0401 	add.w	r4, r4, #1
 80a7ff6:	d306      	bcc.n	80a8006 <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80a7ff8:	4621      	mov	r1, r4
 80a7ffa:	4630      	mov	r0, r6
 80a7ffc:	f7ff fd15 	bl	80a7a2a <mbedtls_mpi_grow>
 80a8000:	b960      	cbnz	r0, 80a801c <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
 80a8002:	68b3      	ldr	r3, [r6, #8]
 80a8004:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
 80a8006:	681a      	ldr	r2, [r3, #0]
 80a8008:	f108 0804 	add.w	r8, r8, #4
 80a800c:	442a      	add	r2, r5
 80a800e:	4295      	cmp	r5, r2
 80a8010:	f843 2b04 	str.w	r2, [r3], #4
 80a8014:	bf94      	ite	ls
 80a8016:	2500      	movls	r5, #0
 80a8018:	2501      	movhi	r5, #1
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 80a801a:	e7e7      	b.n	80a7fec <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80a801c:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
 80a801e:	4638      	mov	r0, r7
 80a8020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a8024 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a8024:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a8026:	460f      	mov	r7, r1
 80a8028:	b085      	sub	sp, #20
 80a802a:	4606      	mov	r6, r0
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80a802c:	4611      	mov	r1, r2
 80a802e:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a8030:	4615      	mov	r5, r2
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80a8032:	f7ff fea7 	bl	80a7d84 <mbedtls_mpi_cmp_abs>
 80a8036:	2800      	cmp	r0, #0
 80a8038:	db30      	blt.n	80a809c <mbedtls_mpi_sub_abs+0x78>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a803a:	2301      	movs	r3, #1
 80a803c:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 80a803e:	42b5      	cmp	r5, r6
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a8040:	f04f 0300 	mov.w	r3, #0
 80a8044:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80a8046:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 80a8048:	d106      	bne.n	80a8058 <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80a804a:	4629      	mov	r1, r5
 80a804c:	a801      	add	r0, sp, #4
 80a804e:	f7ff fd18 	bl	80a7a82 <mbedtls_mpi_copy>
 80a8052:	4604      	mov	r4, r0
 80a8054:	b9e8      	cbnz	r0, 80a8092 <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
 80a8056:	ad01      	add	r5, sp, #4
    }

    if( X != A )
 80a8058:	42b7      	cmp	r7, r6
 80a805a:	d107      	bne.n	80a806c <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 80a805c:	2301      	movs	r3, #1
 80a805e:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
 80a8060:	6868      	ldr	r0, [r5, #4]
 80a8062:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80a8066:	3b01      	subs	r3, #1
 80a8068:	009b      	lsls	r3, r3, #2
 80a806a:	e00b      	b.n	80a8084 <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80a806c:	4639      	mov	r1, r7
 80a806e:	4630      	mov	r0, r6
 80a8070:	f7ff fd07 	bl	80a7a82 <mbedtls_mpi_copy>
 80a8074:	4604      	mov	r4, r0
 80a8076:	b960      	cbnz	r0, 80a8092 <mbedtls_mpi_sub_abs+0x6e>
 80a8078:	e7f0      	b.n	80a805c <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
 80a807a:	68aa      	ldr	r2, [r5, #8]
 80a807c:	58d2      	ldr	r2, [r2, r3]
 80a807e:	3b04      	subs	r3, #4
 80a8080:	b912      	cbnz	r2, 80a8088 <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
 80a8082:	3801      	subs	r0, #1
 80a8084:	2800      	cmp	r0, #0
 80a8086:	d1f8      	bne.n	80a807a <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
 80a8088:	68b2      	ldr	r2, [r6, #8]
 80a808a:	68a9      	ldr	r1, [r5, #8]
 80a808c:	f7ff faba 	bl	80a7604 <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
 80a8090:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
 80a8092:	a801      	add	r0, sp, #4
 80a8094:	f7ff fcb3 	bl	80a79fe <mbedtls_mpi_free>

    return( ret );
 80a8098:	4620      	mov	r0, r4
 80a809a:	e001      	b.n	80a80a0 <mbedtls_mpi_sub_abs+0x7c>
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 80a809c:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
 80a80a0:	b005      	add	sp, #20
 80a80a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a80a4 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a80a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 80a80a6:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s < 0 )
 80a80a8:	6813      	ldr	r3, [r2, #0]

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a80aa:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 80a80ac:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a80ae:	460f      	mov	r7, r1
 80a80b0:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 80a80b2:	d513      	bpl.n	80a80dc <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80a80b4:	4611      	mov	r1, r2
 80a80b6:	4638      	mov	r0, r7
 80a80b8:	f7ff fe64 	bl	80a7d84 <mbedtls_mpi_cmp_abs>
 80a80bc:	2800      	cmp	r0, #0
 80a80be:	db05      	blt.n	80a80cc <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80a80c0:	4632      	mov	r2, r6
 80a80c2:	4639      	mov	r1, r7
 80a80c4:	4628      	mov	r0, r5
 80a80c6:	f7ff ffad 	bl	80a8024 <mbedtls_mpi_sub_abs>
 80a80ca:	e009      	b.n	80a80e0 <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80a80cc:	463a      	mov	r2, r7
 80a80ce:	4631      	mov	r1, r6
 80a80d0:	4628      	mov	r0, r5
 80a80d2:	f7ff ffa7 	bl	80a8024 <mbedtls_mpi_sub_abs>
 80a80d6:	b928      	cbnz	r0, 80a80e4 <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
 80a80d8:	4264      	negs	r4, r4
 80a80da:	e002      	b.n	80a80e2 <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80a80dc:	f7ff ff48 	bl	80a7f70 <mbedtls_mpi_add_abs>
 80a80e0:	b900      	cbnz	r0, 80a80e4 <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
 80a80e2:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 80a80e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a80e6 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a80e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 80a80e8:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s > 0 )
 80a80ea:	6813      	ldr	r3, [r2, #0]

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a80ec:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 80a80ee:	4363      	muls	r3, r4
 80a80f0:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a80f2:	460f      	mov	r7, r1
 80a80f4:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 80a80f6:	dd13      	ble.n	80a8120 <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80a80f8:	4611      	mov	r1, r2
 80a80fa:	4638      	mov	r0, r7
 80a80fc:	f7ff fe42 	bl	80a7d84 <mbedtls_mpi_cmp_abs>
 80a8100:	2800      	cmp	r0, #0
 80a8102:	db05      	blt.n	80a8110 <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80a8104:	4632      	mov	r2, r6
 80a8106:	4639      	mov	r1, r7
 80a8108:	4628      	mov	r0, r5
 80a810a:	f7ff ff8b 	bl	80a8024 <mbedtls_mpi_sub_abs>
 80a810e:	e009      	b.n	80a8124 <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80a8110:	463a      	mov	r2, r7
 80a8112:	4631      	mov	r1, r6
 80a8114:	4628      	mov	r0, r5
 80a8116:	f7ff ff85 	bl	80a8024 <mbedtls_mpi_sub_abs>
 80a811a:	b928      	cbnz	r0, 80a8128 <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
 80a811c:	4264      	negs	r4, r4
 80a811e:	e002      	b.n	80a8126 <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80a8120:	f7ff ff26 	bl	80a7f70 <mbedtls_mpi_add_abs>
 80a8124:	b900      	cbnz	r0, 80a8128 <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
 80a8126:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 80a8128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a812a <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 80a812a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 80a812c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80a8130:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 80a8134:	2a00      	cmp	r2, #0
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 80a8136:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 80a8138:	bfb4      	ite	lt
 80a813a:	f04f 33ff 	movlt.w	r3, #4294967295
 80a813e:	2301      	movge	r3, #1
 80a8140:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80a8142:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 80a8144:	2301      	movs	r3, #1
 80a8146:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80a8148:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80a814c:	f7ff ffaa 	bl	80a80a4 <mbedtls_mpi_add_mpi>
}
 80a8150:	b005      	add	sp, #20
 80a8152:	f85d fb04 	ldr.w	pc, [sp], #4

080a8156 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 80a8156:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 80a8158:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80a815c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 80a8160:	2a00      	cmp	r2, #0
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 80a8162:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 80a8164:	bfb4      	ite	lt
 80a8166:	f04f 33ff 	movlt.w	r3, #4294967295
 80a816a:	2301      	movge	r3, #1
 80a816c:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 80a816e:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 80a8170:	2301      	movs	r3, #1
 80a8172:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80a8174:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 80a8178:	f7ff ffb5 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
}
 80a817c:	b005      	add	sp, #20
 80a817e:	f85d fb04 	ldr.w	pc, [sp], #4

080a8182 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a8182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a8186:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a8188:	b086      	sub	sp, #24
 80a818a:	4615      	mov	r5, r2
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 80a818c:	4288      	cmp	r0, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a818e:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a8192:	4681      	mov	r9, r0
 80a8194:	460e      	mov	r6, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a8196:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 80a819a:	9302      	str	r3, [sp, #8]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a819c:	9203      	str	r2, [sp, #12]
    X->n = 0;
 80a819e:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 80a81a0:	9305      	str	r3, [sp, #20]
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 80a81a2:	d106      	bne.n	80a81b2 <mbedtls_mpi_mul_mpi+0x30>
 80a81a4:	4668      	mov	r0, sp
 80a81a6:	f7ff fc6c 	bl	80a7a82 <mbedtls_mpi_copy>
 80a81aa:	4604      	mov	r4, r0
 80a81ac:	2800      	cmp	r0, #0
 80a81ae:	d14d      	bne.n	80a824c <mbedtls_mpi_mul_mpi+0xca>
 80a81b0:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 80a81b2:	45a9      	cmp	r9, r5
 80a81b4:	d107      	bne.n	80a81c6 <mbedtls_mpi_mul_mpi+0x44>
 80a81b6:	4649      	mov	r1, r9
 80a81b8:	a803      	add	r0, sp, #12
 80a81ba:	f7ff fc62 	bl	80a7a82 <mbedtls_mpi_copy>
 80a81be:	4604      	mov	r4, r0
 80a81c0:	2800      	cmp	r0, #0
 80a81c2:	d143      	bne.n	80a824c <mbedtls_mpi_mul_mpi+0xca>
 80a81c4:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
 80a81c6:	f8d6 a004 	ldr.w	sl, [r6, #4]
 80a81ca:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80a81ce:	3b01      	subs	r3, #1
 80a81d0:	009b      	lsls	r3, r3, #2
 80a81d2:	f1ba 0f00 	cmp.w	sl, #0
 80a81d6:	d006      	beq.n	80a81e6 <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
 80a81d8:	68b2      	ldr	r2, [r6, #8]
 80a81da:	58d2      	ldr	r2, [r2, r3]
 80a81dc:	3b04      	subs	r3, #4
 80a81de:	b912      	cbnz	r2, 80a81e6 <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
 80a81e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80a81e4:	e7f5      	b.n	80a81d2 <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 80a81e6:	686f      	ldr	r7, [r5, #4]
 80a81e8:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 80a81ec:	3b01      	subs	r3, #1
 80a81ee:	009b      	lsls	r3, r3, #2
 80a81f0:	b12f      	cbz	r7, 80a81fe <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
 80a81f2:	68aa      	ldr	r2, [r5, #8]
 80a81f4:	58d2      	ldr	r2, [r2, r3]
 80a81f6:	3b04      	subs	r3, #4
 80a81f8:	b90a      	cbnz	r2, 80a81fe <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 80a81fa:	3f01      	subs	r7, #1
 80a81fc:	e7f8      	b.n	80a81f0 <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 80a81fe:	eb0a 0107 	add.w	r1, sl, r7
 80a8202:	4648      	mov	r0, r9
 80a8204:	f7ff fc11 	bl	80a7a2a <mbedtls_mpi_grow>
 80a8208:	4604      	mov	r4, r0
 80a820a:	b9f8      	cbnz	r0, 80a824c <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80a820c:	4601      	mov	r1, r0
 80a820e:	4648      	mov	r0, r9
 80a8210:	f7ff fc61 	bl	80a7ad6 <mbedtls_mpi_lset>
 80a8214:	4604      	mov	r4, r0
 80a8216:	b9c8      	cbnz	r0, 80a824c <mbedtls_mpi_mul_mpi+0xca>
 80a8218:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 80a821c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a8220:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( i++; j > 0; j-- )
 80a8224:	b16f      	cbz	r7, 80a8242 <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 80a8226:	68ab      	ldr	r3, [r5, #8]
 80a8228:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80a822c:	f853 3008 	ldr.w	r3, [r3, r8]
 80a8230:	4442      	add	r2, r8
 80a8232:	68b1      	ldr	r1, [r6, #8]
 80a8234:	4650      	mov	r0, sl
 80a8236:	f7ff fa0f 	bl	80a7658 <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i++; j > 0; j-- )
 80a823a:	3f01      	subs	r7, #1
 80a823c:	f1a8 0804 	sub.w	r8, r8, #4
 80a8240:	e7f0      	b.n	80a8224 <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
 80a8242:	6832      	ldr	r2, [r6, #0]
 80a8244:	682b      	ldr	r3, [r5, #0]
 80a8246:	4353      	muls	r3, r2
 80a8248:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 80a824c:	a803      	add	r0, sp, #12
 80a824e:	f7ff fbd6 	bl	80a79fe <mbedtls_mpi_free>
 80a8252:	4668      	mov	r0, sp
 80a8254:	f7ff fbd3 	bl	80a79fe <mbedtls_mpi_free>

    return( ret );
}
 80a8258:	4620      	mov	r0, r4
 80a825a:	b006      	add	sp, #24
 80a825c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a8260 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 80a8260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 80a8262:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
 80a8264:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 80a8266:	aa01      	add	r2, sp, #4
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 80a8268:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 80a826a:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80a826c:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 80a8270:	f7ff ff87 	bl	80a8182 <mbedtls_mpi_mul_mpi>
}
 80a8274:	b005      	add	sp, #20
 80a8276:	f85d fb04 	ldr.w	pc, [sp], #4

080a827a <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a827a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a827e:	b09b      	sub	sp, #108	; 0x6c
 80a8280:	9001      	str	r0, [sp, #4]
 80a8282:	460f      	mov	r7, r1
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 80a8284:	4618      	mov	r0, r3
 80a8286:	2100      	movs	r1, #0

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a8288:	4690      	mov	r8, r2
 80a828a:	9304      	str	r3, [sp, #16]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 80a828c:	f7ff fe5a 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a8290:	2800      	cmp	r0, #0
 80a8292:	f000 81ad 	beq.w	80a85f0 <mbedtls_mpi_div_mpi+0x376>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a8296:	2400      	movs	r4, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8298:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80a829a:	9904      	ldr	r1, [sp, #16]
 80a829c:	4640      	mov	r0, r8
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a829e:	950b      	str	r5, [sp, #44]	; 0x2c
    X->n = 0;
 80a82a0:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 80a82a2:	940d      	str	r4, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a82a4:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
 80a82a6:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 80a82a8:	9410      	str	r4, [sp, #64]	; 0x40
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a82aa:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
 80a82ac:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 80a82ae:	9413      	str	r4, [sp, #76]	; 0x4c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a82b0:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
 80a82b2:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 80a82b4:	9416      	str	r4, [sp, #88]	; 0x58
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a82b6:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
 80a82b8:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 80a82ba:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80a82bc:	f7ff fd62 	bl	80a7d84 <mbedtls_mpi_cmp_abs>
 80a82c0:	42a0      	cmp	r0, r4
 80a82c2:	da16      	bge.n	80a82f2 <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80a82c4:	9b01      	ldr	r3, [sp, #4]
 80a82c6:	b90b      	cbnz	r3, 80a82cc <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80a82c8:	b94f      	cbnz	r7, 80a82de <mbedtls_mpi_div_mpi+0x64>
 80a82ca:	e010      	b.n	80a82ee <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80a82cc:	4621      	mov	r1, r4
 80a82ce:	9801      	ldr	r0, [sp, #4]
 80a82d0:	f7ff fc01 	bl	80a7ad6 <mbedtls_mpi_lset>
 80a82d4:	4604      	mov	r4, r0
 80a82d6:	2800      	cmp	r0, #0
 80a82d8:	f040 8179 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>
 80a82dc:	e7f4      	b.n	80a82c8 <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80a82de:	4641      	mov	r1, r8
 80a82e0:	4638      	mov	r0, r7
 80a82e2:	f7ff fbce 	bl	80a7a82 <mbedtls_mpi_copy>
 80a82e6:	4604      	mov	r4, r0
 80a82e8:	2800      	cmp	r0, #0
 80a82ea:	f040 8170 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
 80a82ee:	2000      	movs	r0, #0
 80a82f0:	e180      	b.n	80a85f4 <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 80a82f2:	4641      	mov	r1, r8
 80a82f4:	a80b      	add	r0, sp, #44	; 0x2c
 80a82f6:	f7ff fbc4 	bl	80a7a82 <mbedtls_mpi_copy>
 80a82fa:	4604      	mov	r4, r0
 80a82fc:	2800      	cmp	r0, #0
 80a82fe:	f040 8166 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 80a8302:	ae0e      	add	r6, sp, #56	; 0x38
 80a8304:	9904      	ldr	r1, [sp, #16]
 80a8306:	4630      	mov	r0, r6
 80a8308:	f7ff fbbb 	bl	80a7a82 <mbedtls_mpi_copy>
 80a830c:	4604      	mov	r4, r0
 80a830e:	2800      	cmp	r0, #0
 80a8310:	f040 815d 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80a8314:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a8318:	a811      	add	r0, sp, #68	; 0x44
 80a831a:	3102      	adds	r1, #2
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
 80a831c:	950e      	str	r5, [sp, #56]	; 0x38
 80a831e:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80a8320:	f7ff fb83 	bl	80a7a2a <mbedtls_mpi_grow>
 80a8324:	4604      	mov	r4, r0
 80a8326:	2800      	cmp	r0, #0
 80a8328:	f040 8151 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 80a832c:	4601      	mov	r1, r0
 80a832e:	a811      	add	r0, sp, #68	; 0x44
 80a8330:	f7ff fbd1 	bl	80a7ad6 <mbedtls_mpi_lset>
 80a8334:	4604      	mov	r4, r0
 80a8336:	2800      	cmp	r0, #0
 80a8338:	f040 8149 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 80a833c:	2102      	movs	r1, #2
 80a833e:	a814      	add	r0, sp, #80	; 0x50
 80a8340:	f7ff fb73 	bl	80a7a2a <mbedtls_mpi_grow>
 80a8344:	4604      	mov	r4, r0
 80a8346:	2800      	cmp	r0, #0
 80a8348:	f040 8141 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 80a834c:	2103      	movs	r1, #3
 80a834e:	a817      	add	r0, sp, #92	; 0x5c
 80a8350:	f7ff fb6b 	bl	80a7a2a <mbedtls_mpi_grow>
 80a8354:	4604      	mov	r4, r0
 80a8356:	2800      	cmp	r0, #0
 80a8358:	f040 8139 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 80a835c:	4630      	mov	r0, r6
 80a835e:	f7ff fc00 	bl	80a7b62 <mbedtls_mpi_bitlen>
 80a8362:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 80a8366:	281f      	cmp	r0, #31
 80a8368:	d013      	beq.n	80a8392 <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
 80a836a:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80a836e:	4619      	mov	r1, r3
 80a8370:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
 80a8372:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80a8374:	f7ff fc73 	bl	80a7c5e <mbedtls_mpi_shift_l>
 80a8378:	4604      	mov	r4, r0
 80a837a:	2800      	cmp	r0, #0
 80a837c:	f040 8127 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 80a8380:	9903      	ldr	r1, [sp, #12]
 80a8382:	4630      	mov	r0, r6
 80a8384:	f7ff fc6b 	bl	80a7c5e <mbedtls_mpi_shift_l>
 80a8388:	4604      	mov	r4, r0
 80a838a:	2800      	cmp	r0, #0
 80a838c:	f040 811f 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>
 80a8390:	e000      	b.n	80a8394 <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
 80a8392:	9403      	str	r4, [sp, #12]

    n = X.n - 1;
 80a8394:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
 80a8396:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
 80a839a:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 80a839e:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 80a83a2:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
 80a83a6:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 80a83a8:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80a83ac:	4619      	mov	r1, r3
 80a83ae:	4630      	mov	r0, r6
 80a83b0:	9302      	str	r3, [sp, #8]
 80a83b2:	f7ff fc54 	bl	80a7c5e <mbedtls_mpi_shift_l>
 80a83b6:	4604      	mov	r4, r0
 80a83b8:	2800      	cmp	r0, #0
 80a83ba:	f040 8108 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
 80a83be:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 80a83c2:	4631      	mov	r1, r6
 80a83c4:	a80b      	add	r0, sp, #44	; 0x2c
 80a83c6:	f7ff fd78 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
 80a83ca:	2800      	cmp	r0, #0
 80a83cc:	db0e      	blt.n	80a83ec <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
 80a83ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a83d0:	f851 200b 	ldr.w	r2, [r1, fp]
 80a83d4:	3201      	adds	r2, #1
 80a83d6:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 80a83da:	a90b      	add	r1, sp, #44	; 0x2c
 80a83dc:	4632      	mov	r2, r6
 80a83de:	4608      	mov	r0, r1
 80a83e0:	f7ff fe81 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a83e4:	4604      	mov	r4, r0
 80a83e6:	2800      	cmp	r0, #0
 80a83e8:	d0eb      	beq.n	80a83c2 <mbedtls_mpi_div_mpi+0x148>
 80a83ea:	e0f0      	b.n	80a85ce <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 80a83ec:	9902      	ldr	r1, [sp, #8]
 80a83ee:	4630      	mov	r0, r6
 80a83f0:	f7ff fc84 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a83f4:	4604      	mov	r4, r0
 80a83f6:	2800      	cmp	r0, #0
 80a83f8:	f040 80e9 	bne.w	80a85ce <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
 80a83fc:	9b00      	ldr	r3, [sp, #0]
 80a83fe:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
 80a8402:	009b      	lsls	r3, r3, #2
 80a8404:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80a8406:	3b04      	subs	r3, #4
 80a8408:	9308      	str	r3, [sp, #32]
 80a840a:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
 80a840e:	3b01      	subs	r3, #1
 80a8410:	3e01      	subs	r6, #1
 80a8412:	ebca 0606 	rsb	r6, sl, r6
 80a8416:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80a841a:	ebca 0a03 	rsb	sl, sl, r3
 80a841e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80a8422:	3d02      	subs	r5, #2
 80a8424:	00b6      	lsls	r6, r6, #2
 80a8426:	9302      	str	r3, [sp, #8]
 80a8428:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 80a842a:	9b00      	ldr	r3, [sp, #0]
 80a842c:	4599      	cmp	r9, r3
 80a842e:	f240 80a8 	bls.w	80a8582 <mbedtls_mpi_div_mpi+0x308>
    {
        if( X.p[i] >= Y.p[t] )
 80a8432:	9805      	ldr	r0, [sp, #20]
 80a8434:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a8436:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a8438:	1d2b      	adds	r3, r5, #4
 80a843a:	5812      	ldr	r2, [r2, r0]
 80a843c:	9309      	str	r3, [sp, #36]	; 0x24
 80a843e:	58cb      	ldr	r3, [r1, r3]
 80a8440:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80a8442:	4293      	cmp	r3, r2
 80a8444:	d303      	bcc.n	80a844e <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
 80a8446:	f04f 33ff 	mov.w	r3, #4294967295
 80a844a:	5183      	str	r3, [r0, r6]
 80a844c:	e01b      	b.n	80a8486 <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80a844e:	eb00 0a06 	add.w	sl, r0, r6
 80a8452:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 80a8454:	b19a      	cbz	r2, 80a847e <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 80a8456:	9307      	str	r3, [sp, #28]
 80a8458:	2300      	movs	r3, #0
 80a845a:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
 80a845c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80a8460:	ea4b 0b00 	orr.w	fp, fp, r0
 80a8464:	4658      	mov	r0, fp
 80a8466:	4661      	mov	r1, ip
 80a8468:	f004 fea0 	bl	80ad1ac <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
 80a846c:	2300      	movs	r3, #0
 80a846e:	f04f 32ff 	mov.w	r2, #4294967295
 80a8472:	428b      	cmp	r3, r1
 80a8474:	bf08      	it	eq
 80a8476:	4282      	cmpeq	r2, r0
 80a8478:	d203      	bcs.n	80a8482 <mbedtls_mpi_div_mpi+0x208>
 80a847a:	4610      	mov	r0, r2
 80a847c:	e001      	b.n	80a8482 <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
 80a847e:	f04f 30ff 	mov.w	r0, #4294967295
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
 80a8482:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
 80a8486:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80a8488:	f1a5 0a04 	sub.w	sl, r5, #4
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
 80a848c:	5993      	ldr	r3, [r2, r6]
 80a848e:	3301      	adds	r3, #1
 80a8490:	5193      	str	r3, [r2, r6]
        do
        {
            Z.p[i - t - 1]--;
 80a8492:	9a13      	ldr	r2, [sp, #76]	; 0x4c

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80a8494:	2100      	movs	r1, #0
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 80a8496:	5993      	ldr	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80a8498:	a814      	add	r0, sp, #80	; 0x50
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 80a849a:	3b01      	subs	r3, #1
 80a849c:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80a849e:	f7ff fb1a 	bl	80a7ad6 <mbedtls_mpi_lset>
 80a84a2:	2800      	cmp	r0, #0
 80a84a4:	f040 8090 	bne.w	80a85c8 <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80a84a8:	9b00      	ldr	r3, [sp, #0]
 80a84aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80a84ac:	b11b      	cbz	r3, 80a84b6 <mbedtls_mpi_div_mpi+0x23c>
 80a84ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a84b0:	9908      	ldr	r1, [sp, #32]
 80a84b2:	585b      	ldr	r3, [r3, r1]
 80a84b4:	e000      	b.n	80a84b8 <mbedtls_mpi_div_mpi+0x23e>
 80a84b6:	9b00      	ldr	r3, [sp, #0]
 80a84b8:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 80a84ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a84bc:	9a05      	ldr	r2, [sp, #20]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80a84be:	a914      	add	r1, sp, #80	; 0x50
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 80a84c0:	589a      	ldr	r2, [r3, r2]
 80a84c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80a84c4:	4608      	mov	r0, r1
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 80a84c6:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80a84c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a84ca:	599a      	ldr	r2, [r3, r6]
 80a84cc:	f7ff fec8 	bl	80a8260 <mbedtls_mpi_mul_int>
 80a84d0:	4601      	mov	r1, r0
 80a84d2:	2800      	cmp	r0, #0
 80a84d4:	d17a      	bne.n	80a85cc <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 80a84d6:	a817      	add	r0, sp, #92	; 0x5c
 80a84d8:	f7ff fafd 	bl	80a7ad6 <mbedtls_mpi_lset>
 80a84dc:	2800      	cmp	r0, #0
 80a84de:	d173      	bne.n	80a85c8 <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80a84e0:	f1b9 0f01 	cmp.w	r9, #1
 80a84e4:	bf18      	it	ne
 80a84e6:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
 80a84e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a84ea:	bf18      	it	ne
 80a84ec:	f852 000a 	ldrne.w	r0, [r2, sl]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80a84f0:	a917      	add	r1, sp, #92	; 0x5c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80a84f2:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80a84f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80a84f6:	a814      	add	r0, sp, #80	; 0x50
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80a84f8:	595a      	ldr	r2, [r3, r5]
 80a84fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a84fc:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
 80a84fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a8500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a8502:	589a      	ldr	r2, [r3, r2]
 80a8504:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a8506:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80a8508:	f7ff fcd7 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
 80a850c:	2800      	cmp	r0, #0
 80a850e:	dcc0      	bgt.n	80a8492 <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 80a8510:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a8512:	a90e      	add	r1, sp, #56	; 0x38
 80a8514:	599a      	ldr	r2, [r3, r6]
 80a8516:	a814      	add	r0, sp, #80	; 0x50
 80a8518:	f7ff fea2 	bl	80a8260 <mbedtls_mpi_mul_int>
 80a851c:	2800      	cmp	r0, #0
 80a851e:	d153      	bne.n	80a85c8 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 80a8520:	9902      	ldr	r1, [sp, #8]
 80a8522:	a814      	add	r0, sp, #80	; 0x50
 80a8524:	f7ff fb9b 	bl	80a7c5e <mbedtls_mpi_shift_l>
 80a8528:	2800      	cmp	r0, #0
 80a852a:	d14d      	bne.n	80a85c8 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 80a852c:	a90b      	add	r1, sp, #44	; 0x2c
 80a852e:	4608      	mov	r0, r1
 80a8530:	aa14      	add	r2, sp, #80	; 0x50
 80a8532:	f7ff fdd8 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a8536:	4601      	mov	r1, r0
 80a8538:	2800      	cmp	r0, #0
 80a853a:	d147      	bne.n	80a85cc <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 80a853c:	a80b      	add	r0, sp, #44	; 0x2c
 80a853e:	f7ff fd01 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a8542:	2800      	cmp	r0, #0
 80a8544:	da15      	bge.n	80a8572 <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80a8546:	a90e      	add	r1, sp, #56	; 0x38
 80a8548:	a814      	add	r0, sp, #80	; 0x50
 80a854a:	f7ff fa9a 	bl	80a7a82 <mbedtls_mpi_copy>
 80a854e:	2800      	cmp	r0, #0
 80a8550:	d13a      	bne.n	80a85c8 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 80a8552:	9902      	ldr	r1, [sp, #8]
 80a8554:	a814      	add	r0, sp, #80	; 0x50
 80a8556:	f7ff fb82 	bl	80a7c5e <mbedtls_mpi_shift_l>
 80a855a:	2800      	cmp	r0, #0
 80a855c:	d134      	bne.n	80a85c8 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 80a855e:	a90b      	add	r1, sp, #44	; 0x2c
 80a8560:	aa14      	add	r2, sp, #80	; 0x50
 80a8562:	4608      	mov	r0, r1
 80a8564:	f7ff fd9e 	bl	80a80a4 <mbedtls_mpi_add_mpi>
 80a8568:	bb70      	cbnz	r0, 80a85c8 <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
 80a856a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a856c:	5993      	ldr	r3, [r2, r6]
 80a856e:	3b01      	subs	r3, #1
 80a8570:	5193      	str	r3, [r2, r6]
 80a8572:	9b02      	ldr	r3, [sp, #8]
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 80a8574:	f109 39ff 	add.w	r9, r9, #4294967295
 80a8578:	3b20      	subs	r3, #32
 80a857a:	3e04      	subs	r6, #4
 80a857c:	9302      	str	r3, [sp, #8]
 80a857e:	3d04      	subs	r5, #4
 80a8580:	e753      	b.n	80a842a <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
 80a8582:	9b01      	ldr	r3, [sp, #4]
 80a8584:	b15b      	cbz	r3, 80a859e <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80a8586:	a911      	add	r1, sp, #68	; 0x44
 80a8588:	4618      	mov	r0, r3
 80a858a:	f7ff fa7a 	bl	80a7a82 <mbedtls_mpi_copy>
 80a858e:	b9d8      	cbnz	r0, 80a85c8 <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
 80a8590:	9b04      	ldr	r3, [sp, #16]
 80a8592:	f8d8 2000 	ldr.w	r2, [r8]
 80a8596:	681b      	ldr	r3, [r3, #0]
 80a8598:	4353      	muls	r3, r2
 80a859a:	9a01      	ldr	r2, [sp, #4]
 80a859c:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
 80a859e:	b1b7      	cbz	r7, 80a85ce <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 80a85a0:	9903      	ldr	r1, [sp, #12]
 80a85a2:	a80b      	add	r0, sp, #44	; 0x2c
 80a85a4:	f7ff fbaa 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a85a8:	b970      	cbnz	r0, 80a85c8 <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
 80a85aa:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80a85ae:	a90b      	add	r1, sp, #44	; 0x2c
 80a85b0:	4638      	mov	r0, r7
    }

    if( R != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
        X.s = A->s;
 80a85b2:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80a85b4:	f7ff fa65 	bl	80a7a82 <mbedtls_mpi_copy>
 80a85b8:	4601      	mov	r1, r0
 80a85ba:	b938      	cbnz	r0, 80a85cc <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 80a85bc:	4638      	mov	r0, r7
 80a85be:	f7ff fcc1 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a85c2:	b920      	cbnz	r0, 80a85ce <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
 80a85c4:	2301      	movs	r3, #1
 80a85c6:	603b      	str	r3, [r7, #0]
 80a85c8:	4604      	mov	r4, r0
 80a85ca:	e000      	b.n	80a85ce <mbedtls_mpi_div_mpi+0x354>
 80a85cc:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 80a85ce:	a80b      	add	r0, sp, #44	; 0x2c
 80a85d0:	f7ff fa15 	bl	80a79fe <mbedtls_mpi_free>
 80a85d4:	a80e      	add	r0, sp, #56	; 0x38
 80a85d6:	f7ff fa12 	bl	80a79fe <mbedtls_mpi_free>
 80a85da:	a811      	add	r0, sp, #68	; 0x44
 80a85dc:	f7ff fa0f 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 80a85e0:	a814      	add	r0, sp, #80	; 0x50
 80a85e2:	f7ff fa0c 	bl	80a79fe <mbedtls_mpi_free>
 80a85e6:	a817      	add	r0, sp, #92	; 0x5c
 80a85e8:	f7ff fa09 	bl	80a79fe <mbedtls_mpi_free>

    return( ret );
 80a85ec:	4620      	mov	r0, r4
 80a85ee:	e001      	b.n	80a85f4 <mbedtls_mpi_div_mpi+0x37a>
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 80a85f0:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
 80a85f4:	b01b      	add	sp, #108	; 0x6c
 80a85f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a85fa <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a85fa:	b570      	push	{r4, r5, r6, lr}
 80a85fc:	4604      	mov	r4, r0
 80a85fe:	460e      	mov	r6, r1
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 80a8600:	4610      	mov	r0, r2
 80a8602:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a8604:	4615      	mov	r5, r2
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 80a8606:	f7ff fc9d 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a860a:	2800      	cmp	r0, #0
 80a860c:	db22      	blt.n	80a8654 <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 80a860e:	462b      	mov	r3, r5
 80a8610:	4632      	mov	r2, r6
 80a8612:	4621      	mov	r1, r4
 80a8614:	2000      	movs	r0, #0
 80a8616:	f7ff fe30 	bl	80a827a <mbedtls_mpi_div_mpi>
 80a861a:	b9f8      	cbnz	r0, 80a865c <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 80a861c:	2100      	movs	r1, #0
 80a861e:	4620      	mov	r0, r4
 80a8620:	f7ff fc90 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a8624:	2800      	cmp	r0, #0
 80a8626:	da07      	bge.n	80a8638 <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 80a8628:	462a      	mov	r2, r5
 80a862a:	4621      	mov	r1, r4
 80a862c:	4620      	mov	r0, r4
 80a862e:	f7ff fd39 	bl	80a80a4 <mbedtls_mpi_add_mpi>
 80a8632:	2800      	cmp	r0, #0
 80a8634:	d0f2      	beq.n	80a861c <mbedtls_mpi_mod_mpi+0x22>
 80a8636:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80a8638:	4629      	mov	r1, r5
 80a863a:	4620      	mov	r0, r4
 80a863c:	f7ff fc3d 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
 80a8640:	2800      	cmp	r0, #0
 80a8642:	db0a      	blt.n	80a865a <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 80a8644:	462a      	mov	r2, r5
 80a8646:	4621      	mov	r1, r4
 80a8648:	4620      	mov	r0, r4
 80a864a:	f7ff fd4c 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a864e:	2800      	cmp	r0, #0
 80a8650:	d0f2      	beq.n	80a8638 <mbedtls_mpi_mod_mpi+0x3e>
 80a8652:	bd70      	pop	{r4, r5, r6, pc}
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 80a8654:	f06f 0009 	mvn.w	r0, #9
 80a8658:	bd70      	pop	{r4, r5, r6, pc}
 80a865a:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
 80a865c:	bd70      	pop	{r4, r5, r6, pc}

080a865e <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 80a865e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8662:	4606      	mov	r6, r0
 80a8664:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 80a8668:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 80a866a:	4618      	mov	r0, r3
 80a866c:	2100      	movs	r1, #0

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 80a866e:	9202      	str	r2, [sp, #8]
 80a8670:	461d      	mov	r5, r3
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 80a8672:	f7ff fc67 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a8676:	2800      	cmp	r0, #0
 80a8678:	dd05      	ble.n	80a8686 <mbedtls_mpi_exp_mod+0x28>
 80a867a:	68ab      	ldr	r3, [r5, #8]
 80a867c:	f8d3 8000 	ldr.w	r8, [r3]
 80a8680:	f018 0f01 	tst.w	r8, #1
 80a8684:	d102      	bne.n	80a868c <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80a8686:	f06f 0003 	mvn.w	r0, #3
 80a868a:	e203      	b.n	80a8a94 <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 80a868c:	2100      	movs	r1, #0
 80a868e:	9802      	ldr	r0, [sp, #8]
 80a8690:	f7ff fc58 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a8694:	2800      	cmp	r0, #0
 80a8696:	dbf6      	blt.n	80a8686 <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
 80a8698:	f108 0402 	add.w	r4, r8, #2
 80a869c:	0064      	lsls	r4, r4, #1
 80a869e:	f004 0408 	and.w	r4, r4, #8
 80a86a2:	4444      	add	r4, r8
 80a86a4:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
 80a86a6:	fb04 f308 	mul.w	r3, r4, r8
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 80a86aa:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 80a86ac:	f1c3 0302 	rsb	r3, r3, #2
 80a86b0:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 80a86b4:	d1f7      	bne.n	80a86a6 <mbedtls_mpi_exp_mod+0x48>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a86b6:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 80a86b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80a86bc:	a814      	add	r0, sp, #80	; 0x50
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a86be:	9308      	str	r3, [sp, #32]
    X->n = 0;
 80a86c0:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 80a86c2:	910a      	str	r1, [sp, #40]	; 0x28
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a86c4:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 80a86c6:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 80a86c8:	910d      	str	r1, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a86ca:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 80a86cc:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 80a86ce:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 80a86d0:	f004 ff47 	bl	80ad562 <memset>

    i = mbedtls_mpi_bitlen( E );
 80a86d4:	9802      	ldr	r0, [sp, #8]
 80a86d6:	f7ff fa44 	bl	80a7b62 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
 80a86da:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 80a86de:	d20a      	bcs.n	80a86f6 <mbedtls_mpi_exp_mod+0x98>
 80a86e0:	28ef      	cmp	r0, #239	; 0xef
 80a86e2:	d80b      	bhi.n	80a86fc <mbedtls_mpi_exp_mod+0x9e>
 80a86e4:	284f      	cmp	r0, #79	; 0x4f
 80a86e6:	d80c      	bhi.n	80a8702 <mbedtls_mpi_exp_mod+0xa4>
 80a86e8:	2818      	cmp	r0, #24
 80a86ea:	bf34      	ite	cc
 80a86ec:	f04f 0b01 	movcc.w	fp, #1
 80a86f0:	f04f 0b03 	movcs.w	fp, #3
 80a86f4:	e007      	b.n	80a8706 <mbedtls_mpi_exp_mod+0xa8>
 80a86f6:	f04f 0b06 	mov.w	fp, #6
 80a86fa:	e004      	b.n	80a8706 <mbedtls_mpi_exp_mod+0xa8>
 80a86fc:	f04f 0b05 	mov.w	fp, #5
 80a8700:	e001      	b.n	80a8706 <mbedtls_mpi_exp_mod+0xa8>
 80a8702:	f04f 0b04 	mov.w	fp, #4

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 80a8706:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80a8708:	4630      	mov	r0, r6
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 80a870a:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80a870e:	4641      	mov	r1, r8
 80a8710:	f7ff f98b 	bl	80a7a2a <mbedtls_mpi_grow>
 80a8714:	4603      	mov	r3, r0
 80a8716:	2800      	cmp	r0, #0
 80a8718:	f040 8194 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 80a871c:	4641      	mov	r1, r8
 80a871e:	a817      	add	r0, sp, #92	; 0x5c
 80a8720:	f7ff f983 	bl	80a7a2a <mbedtls_mpi_grow>
 80a8724:	4603      	mov	r3, r0
 80a8726:	2800      	cmp	r0, #0
 80a8728:	f040 818c 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 80a872c:	ea4f 0148 	mov.w	r1, r8, lsl #1
 80a8730:	a80b      	add	r0, sp, #44	; 0x2c
 80a8732:	f7ff f97a 	bl	80a7a2a <mbedtls_mpi_grow>
 80a8736:	4603      	mov	r3, r0
 80a8738:	2800      	cmp	r0, #0
 80a873a:	f040 8183 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 80a873e:	683b      	ldr	r3, [r7, #0]
 80a8740:	9304      	str	r3, [sp, #16]
    if( neg )
 80a8742:	3301      	adds	r3, #1
 80a8744:	d10a      	bne.n	80a875c <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 80a8746:	4639      	mov	r1, r7
 80a8748:	a80e      	add	r0, sp, #56	; 0x38
 80a874a:	f7ff f99a 	bl	80a7a82 <mbedtls_mpi_copy>
 80a874e:	4603      	mov	r3, r0
 80a8750:	2800      	cmp	r0, #0
 80a8752:	f040 8177 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
 80a8756:	2301      	movs	r3, #1
 80a8758:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 80a875a:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 80a875c:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 80a8760:	b10b      	cbz	r3, 80a8766 <mbedtls_mpi_exp_mod+0x108>
 80a8762:	689b      	ldr	r3, [r3, #8]
 80a8764:	bb2b      	cbnz	r3, 80a87b2 <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 80a8766:	2101      	movs	r1, #1
 80a8768:	a808      	add	r0, sp, #32
 80a876a:	f7ff f9b4 	bl	80a7ad6 <mbedtls_mpi_lset>
 80a876e:	4603      	mov	r3, r0
 80a8770:	2800      	cmp	r0, #0
 80a8772:	f040 8167 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 80a8776:	6869      	ldr	r1, [r5, #4]
 80a8778:	a808      	add	r0, sp, #32
 80a877a:	0189      	lsls	r1, r1, #6
 80a877c:	f7ff fa6f 	bl	80a7c5e <mbedtls_mpi_shift_l>
 80a8780:	4603      	mov	r3, r0
 80a8782:	2800      	cmp	r0, #0
 80a8784:	f040 815e 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 80a8788:	a908      	add	r1, sp, #32
 80a878a:	462a      	mov	r2, r5
 80a878c:	4608      	mov	r0, r1
 80a878e:	f7ff ff34 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80a8792:	4603      	mov	r3, r0
 80a8794:	2800      	cmp	r0, #0
 80a8796:	f040 8155 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
 80a879a:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 80a879e:	b183      	cbz	r3, 80a87c2 <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 80a87a0:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 80a87a4:	ab08      	add	r3, sp, #32
 80a87a6:	cb03      	ldmia	r3!, {r0, r1}
 80a87a8:	6010      	str	r0, [r2, #0]
 80a87aa:	6818      	ldr	r0, [r3, #0]
 80a87ac:	6051      	str	r1, [r2, #4]
 80a87ae:	6090      	str	r0, [r2, #8]
 80a87b0:	e007      	b.n	80a87c2 <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 80a87b2:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 80a87b6:	ab08      	add	r3, sp, #32
 80a87b8:	6810      	ldr	r0, [r2, #0]
 80a87ba:	6851      	ldr	r1, [r2, #4]
 80a87bc:	c303      	stmia	r3!, {r0, r1}
 80a87be:	6890      	ldr	r0, [r2, #8]
 80a87c0:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 80a87c2:	4629      	mov	r1, r5
 80a87c4:	4638      	mov	r0, r7
 80a87c6:	f7ff fb78 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
 80a87ca:	2800      	cmp	r0, #0
 80a87cc:	db18      	blt.n	80a8800 <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 80a87ce:	462a      	mov	r2, r5
 80a87d0:	4639      	mov	r1, r7
 80a87d2:	a817      	add	r0, sp, #92	; 0x5c
 80a87d4:	f7ff ff11 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80a87d8:	4603      	mov	r3, r0
 80a87da:	2800      	cmp	r0, #0
 80a87dc:	f040 8132 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
 80a87e0:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 80a87e2:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 80a87e6:	4623      	mov	r3, r4
 80a87e8:	f8cd 9000 	str.w	r9, [sp]
 80a87ec:	462a      	mov	r2, r5
 80a87ee:	a908      	add	r1, sp, #32
 80a87f0:	a817      	add	r0, sp, #92	; 0x5c
 80a87f2:	f7ff fafe 	bl	80a7df2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80a87f6:	4603      	mov	r3, r0
 80a87f8:	2800      	cmp	r0, #0
 80a87fa:	f040 8123 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
 80a87fe:	e004      	b.n	80a880a <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 80a8800:	4639      	mov	r1, r7
 80a8802:	a817      	add	r0, sp, #92	; 0x5c
 80a8804:	f7ff f93d 	bl	80a7a82 <mbedtls_mpi_copy>
 80a8808:	e7e6      	b.n	80a87d8 <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 80a880a:	a908      	add	r1, sp, #32
 80a880c:	4630      	mov	r0, r6
 80a880e:	f7ff f938 	bl	80a7a82 <mbedtls_mpi_copy>
 80a8812:	4603      	mov	r3, r0
 80a8814:	2800      	cmp	r0, #0
 80a8816:	f040 8115 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 80a881a:	ab07      	add	r3, sp, #28
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 80a881c:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 80a881e:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 80a8820:	f8cd 9000 	str.w	r9, [sp]
 80a8824:	4623      	mov	r3, r4
 80a8826:	462a      	mov	r2, r5
 80a8828:	a911      	add	r1, sp, #68	; 0x44
 80a882a:	4630      	mov	r0, r6
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 80a882c:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 80a882e:	9711      	str	r7, [sp, #68]	; 0x44
 80a8830:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
 80a8832:	f7ff fade 	bl	80a7df2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 80a8836:	4603      	mov	r3, r0
 80a8838:	2800      	cmp	r0, #0
 80a883a:	f040 8103 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
 80a883e:	45bb      	cmp	fp, r7
 80a8840:	d05b      	beq.n	80a88fa <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 80a8842:	f10b 33ff 	add.w	r3, fp, #4294967295
 80a8846:	9303      	str	r3, [sp, #12]
 80a8848:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 80a884a:	f04f 080c 	mov.w	r8, #12
 80a884e:	ab14      	add	r3, sp, #80	; 0x50
 80a8850:	fb08 3807 	mla	r8, r8, r7, r3
 80a8854:	6869      	ldr	r1, [r5, #4]
 80a8856:	4640      	mov	r0, r8
 80a8858:	3101      	adds	r1, #1
 80a885a:	f7ff f8e6 	bl	80a7a2a <mbedtls_mpi_grow>
 80a885e:	4603      	mov	r3, r0
 80a8860:	2800      	cmp	r0, #0
 80a8862:	f040 80ef 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 80a8866:	a917      	add	r1, sp, #92	; 0x5c
 80a8868:	4640      	mov	r0, r8
 80a886a:	f7ff f90a 	bl	80a7a82 <mbedtls_mpi_copy>
 80a886e:	4603      	mov	r3, r0
 80a8870:	2800      	cmp	r0, #0
 80a8872:	f040 80e7 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
 80a8876:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 80a8878:	4623      	mov	r3, r4
 80a887a:	f8cd 9000 	str.w	r9, [sp]
 80a887e:	462a      	mov	r2, r5
 80a8880:	4641      	mov	r1, r8
 80a8882:	4640      	mov	r0, r8
 80a8884:	f7ff fab5 	bl	80a7df2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80a8888:	4603      	mov	r3, r0
 80a888a:	2800      	cmp	r0, #0
 80a888c:	f040 80da 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
 80a8890:	9b03      	ldr	r3, [sp, #12]
 80a8892:	f10a 0a01 	add.w	sl, sl, #1
 80a8896:	4553      	cmp	r3, sl
 80a8898:	d8ee      	bhi.n	80a8878 <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 80a889a:	3701      	adds	r7, #1
 80a889c:	f04f 080c 	mov.w	r8, #12
 80a88a0:	ab14      	add	r3, sp, #80	; 0x50
 80a88a2:	fb08 3807 	mla	r8, r8, r7, r3
 80a88a6:	f04f 0901 	mov.w	r9, #1
 80a88aa:	fa09 f90b 	lsl.w	r9, r9, fp
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 80a88ae:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 80a88b2:	454f      	cmp	r7, r9
 80a88b4:	d221      	bcs.n	80a88fa <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 80a88b6:	6869      	ldr	r1, [r5, #4]
 80a88b8:	4640      	mov	r0, r8
 80a88ba:	3101      	adds	r1, #1
 80a88bc:	f7ff f8b5 	bl	80a7a2a <mbedtls_mpi_grow>
 80a88c0:	4603      	mov	r3, r0
 80a88c2:	2800      	cmp	r0, #0
 80a88c4:	f040 80be 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 80a88c8:	f1a8 010c 	sub.w	r1, r8, #12
 80a88cc:	4640      	mov	r0, r8
 80a88ce:	f7ff f8d8 	bl	80a7a82 <mbedtls_mpi_copy>
 80a88d2:	4603      	mov	r3, r0
 80a88d4:	2800      	cmp	r0, #0
 80a88d6:	f040 80b5 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 80a88da:	4623      	mov	r3, r4
 80a88dc:	4640      	mov	r0, r8
 80a88de:	f8cd a000 	str.w	sl, [sp]
 80a88e2:	462a      	mov	r2, r5
 80a88e4:	a917      	add	r1, sp, #92	; 0x5c
 80a88e6:	f7ff fa84 	bl	80a7df2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80a88ea:	f108 080c 	add.w	r8, r8, #12
 80a88ee:	4603      	mov	r3, r0
 80a88f0:	2800      	cmp	r0, #0
 80a88f2:	f040 80a7 	bne.w	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 80a88f6:	3701      	adds	r7, #1
 80a88f8:	e7db      	b.n	80a88b2 <mbedtls_mpi_exp_mod+0x254>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 80a88fa:	2700      	movs	r7, #0
        }
    }

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
 80a88fc:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
 80a88fe:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
 80a8900:	46b8      	mov	r8, r7

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 80a8902:	9b02      	ldr	r3, [sp, #8]
 80a8904:	685b      	ldr	r3, [r3, #4]
 80a8906:	9303      	str	r3, [sp, #12]
    wbits   = 0;
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
 80a8908:	f1ba 0f00 	cmp.w	sl, #0
 80a890c:	d10e      	bne.n	80a892c <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
 80a890e:	9b03      	ldr	r3, [sp, #12]
 80a8910:	b93b      	cbnz	r3, 80a8922 <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 80a8912:	2301      	movs	r3, #1
 80a8914:	fa03 f30b 	lsl.w	r3, r3, fp
 80a8918:	9305      	str	r3, [sp, #20]
 80a891a:	9f03      	ldr	r7, [sp, #12]
 80a891c:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 80a8920:	e05e      	b.n	80a89e0 <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 80a8922:	9b03      	ldr	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 80a8924:	f04f 0a20 	mov.w	sl, #32
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 80a8928:	3b01      	subs	r3, #1
 80a892a:	9303      	str	r3, [sp, #12]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
 80a892c:	9b02      	ldr	r3, [sp, #8]
 80a892e:	9a03      	ldr	r2, [sp, #12]
 80a8930:	689b      	ldr	r3, [r3, #8]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
 80a8932:	f10a 3aff 	add.w	sl, sl, #4294967295

        ei = (E->p[nblimbs] >> bufsize) & 1;
 80a8936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a893a:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 80a893e:	f013 0301 	ands.w	r3, r3, #1
 80a8942:	d10f      	bne.n	80a8964 <mbedtls_mpi_exp_mod+0x306>
 80a8944:	2f00      	cmp	r7, #0
 80a8946:	d0df      	beq.n	80a8908 <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
 80a8948:	2f01      	cmp	r7, #1
 80a894a:	d10b      	bne.n	80a8964 <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 80a894c:	ab0b      	add	r3, sp, #44	; 0x2c
 80a894e:	9300      	str	r3, [sp, #0]
 80a8950:	462a      	mov	r2, r5
 80a8952:	4623      	mov	r3, r4
 80a8954:	4631      	mov	r1, r6
 80a8956:	4630      	mov	r0, r6
 80a8958:	f7ff fa4b 	bl	80a7df2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80a895c:	4603      	mov	r3, r0
 80a895e:	2800      	cmp	r0, #0
 80a8960:	d0d2      	beq.n	80a8908 <mbedtls_mpi_exp_mod+0x2aa>
 80a8962:	e06f      	b.n	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
 80a8964:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
 80a8968:	ebc9 020b 	rsb	r2, r9, fp
 80a896c:	4093      	lsls	r3, r2

        if( nbits == wsize )
 80a896e:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
 80a8970:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
 80a8974:	d001      	beq.n	80a897a <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
 80a8976:	2702      	movs	r7, #2
 80a8978:	e7c6      	b.n	80a8908 <mbedtls_mpi_exp_mod+0x2aa>
 80a897a:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 80a897c:	ab0b      	add	r3, sp, #44	; 0x2c
 80a897e:	9300      	str	r3, [sp, #0]
 80a8980:	462a      	mov	r2, r5
 80a8982:	4623      	mov	r3, r4
 80a8984:	4631      	mov	r1, r6
 80a8986:	4630      	mov	r0, r6
 80a8988:	f7ff fa33 	bl	80a7df2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80a898c:	4603      	mov	r3, r0
 80a898e:	2800      	cmp	r0, #0
 80a8990:	d158      	bne.n	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 80a8992:	3701      	adds	r7, #1
 80a8994:	45bb      	cmp	fp, r7
 80a8996:	d1f1      	bne.n	80a897c <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 80a8998:	ab0b      	add	r3, sp, #44	; 0x2c
 80a899a:	a814      	add	r0, sp, #80	; 0x50
 80a899c:	210c      	movs	r1, #12
 80a899e:	9300      	str	r3, [sp, #0]
 80a89a0:	fb01 0108 	mla	r1, r1, r8, r0
 80a89a4:	4623      	mov	r3, r4
 80a89a6:	462a      	mov	r2, r5
 80a89a8:	4630      	mov	r0, r6
 80a89aa:	f7ff fa22 	bl	80a7df2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80a89ae:	4603      	mov	r3, r0
 80a89b0:	2800      	cmp	r0, #0
 80a89b2:	d147      	bne.n	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>

            state--;
 80a89b4:	2701      	movs	r7, #1
            nbits = 0;
 80a89b6:	4680      	mov	r8, r0
            wbits = 0;
 80a89b8:	4681      	mov	r9, r0
 80a89ba:	e7a5      	b.n	80a8908 <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 80a89bc:	4623      	mov	r3, r4
 80a89be:	f8cd a000 	str.w	sl, [sp]
 80a89c2:	462a      	mov	r2, r5
 80a89c4:	4631      	mov	r1, r6
 80a89c6:	4630      	mov	r0, r6
 80a89c8:	f7ff fa13 	bl	80a7df2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80a89cc:	4603      	mov	r3, r0
 80a89ce:	2800      	cmp	r0, #0
 80a89d0:	d138      	bne.n	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 80a89d2:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
 80a89d4:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
 80a89d8:	ea18 0f03 	tst.w	r8, r3
 80a89dc:	d103      	bne.n	80a89e6 <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 80a89de:	3701      	adds	r7, #1
 80a89e0:	454f      	cmp	r7, r9
 80a89e2:	d1eb      	bne.n	80a89bc <mbedtls_mpi_exp_mod+0x35e>
 80a89e4:	e00b      	b.n	80a89fe <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 80a89e6:	4623      	mov	r3, r4
 80a89e8:	f8cd a000 	str.w	sl, [sp]
 80a89ec:	462a      	mov	r2, r5
 80a89ee:	a917      	add	r1, sp, #92	; 0x5c
 80a89f0:	4630      	mov	r0, r6
 80a89f2:	f7ff f9fe 	bl	80a7df2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80a89f6:	4603      	mov	r3, r0
 80a89f8:	2800      	cmp	r0, #0
 80a89fa:	d0f0      	beq.n	80a89de <mbedtls_mpi_exp_mod+0x380>
 80a89fc:	e022      	b.n	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 80a89fe:	2301      	movs	r3, #1
 80a8a00:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 80a8a02:	9311      	str	r3, [sp, #68]	; 0x44
 80a8a04:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 80a8a06:	ab07      	add	r3, sp, #28
 80a8a08:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 80a8a0a:	f8cd a000 	str.w	sl, [sp]
 80a8a0e:	4623      	mov	r3, r4
 80a8a10:	462a      	mov	r2, r5
 80a8a12:	a911      	add	r1, sp, #68	; 0x44
 80a8a14:	4630      	mov	r0, r6
 80a8a16:	f7ff f9ec 	bl	80a7df2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 80a8a1a:	4603      	mov	r3, r0
 80a8a1c:	b990      	cbnz	r0, 80a8a44 <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 80a8a1e:	9a04      	ldr	r2, [sp, #16]
 80a8a20:	3201      	adds	r2, #1
 80a8a22:	d10f      	bne.n	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
 80a8a24:	9a02      	ldr	r2, [sp, #8]
 80a8a26:	6852      	ldr	r2, [r2, #4]
 80a8a28:	b162      	cbz	r2, 80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
 80a8a2a:	9a02      	ldr	r2, [sp, #8]
 80a8a2c:	6892      	ldr	r2, [r2, #8]
 80a8a2e:	6812      	ldr	r2, [r2, #0]
 80a8a30:	07d2      	lsls	r2, r2, #31
 80a8a32:	d507      	bpl.n	80a8a44 <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
 80a8a34:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 80a8a36:	4632      	mov	r2, r6
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    {
        X->s = -1;
 80a8a38:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 80a8a3a:	4629      	mov	r1, r5
 80a8a3c:	4630      	mov	r0, r6
 80a8a3e:	f7ff fb31 	bl	80a80a4 <mbedtls_mpi_add_mpi>
 80a8a42:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 80a8a44:	2201      	movs	r2, #1
 80a8a46:	f10b 34ff 	add.w	r4, fp, #4294967295
 80a8a4a:	fa02 f404 	lsl.w	r4, r2, r4
 80a8a4e:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 80a8a52:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 80a8a54:	42ac      	cmp	r4, r5
 80a8a56:	9302      	str	r3, [sp, #8]
 80a8a58:	d207      	bcs.n	80a8a6a <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
 80a8a5a:	ab14      	add	r3, sp, #80	; 0x50
 80a8a5c:	fb06 3004 	mla	r0, r6, r4, r3
 80a8a60:	f7fe ffcd 	bl	80a79fe <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 80a8a64:	3401      	adds	r4, #1
 80a8a66:	9b02      	ldr	r3, [sp, #8]
 80a8a68:	e7f4      	b.n	80a8a54 <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 80a8a6a:	a817      	add	r0, sp, #92	; 0x5c
 80a8a6c:	f7fe ffc7 	bl	80a79fe <mbedtls_mpi_free>
 80a8a70:	a80b      	add	r0, sp, #44	; 0x2c
 80a8a72:	f7fe ffc4 	bl	80a79fe <mbedtls_mpi_free>
 80a8a76:	a80e      	add	r0, sp, #56	; 0x38
 80a8a78:	f7fe ffc1 	bl	80a79fe <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 80a8a7c:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 80a8a80:	9b02      	ldr	r3, [sp, #8]
 80a8a82:	b10a      	cbz	r2, 80a8a88 <mbedtls_mpi_exp_mod+0x42a>
 80a8a84:	6892      	ldr	r2, [r2, #8]
 80a8a86:	b922      	cbnz	r2, 80a8a92 <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
 80a8a88:	a808      	add	r0, sp, #32
 80a8a8a:	9302      	str	r3, [sp, #8]
 80a8a8c:	f7fe ffb7 	bl	80a79fe <mbedtls_mpi_free>

    return( ret );
 80a8a90:	9b02      	ldr	r3, [sp, #8]
 80a8a92:	4618      	mov	r0, r3
}
 80a8a94:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 80a8a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a8a9c <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a8a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a8a9e:	b08b      	sub	sp, #44	; 0x2c
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a8aa0:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8aa2:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a8aa4:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 80a8aa6:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a8aa8:	4615      	mov	r5, r2
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8aaa:	9601      	str	r6, [sp, #4]
    X->n = 0;
 80a8aac:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80a8aae:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8ab0:	9604      	str	r6, [sp, #16]
    X->n = 0;
 80a8ab2:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 80a8ab4:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8ab6:	9607      	str	r6, [sp, #28]
    X->n = 0;
 80a8ab8:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 80a8aba:	9309      	str	r3, [sp, #36]	; 0x24
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 80a8abc:	f7fe ffe1 	bl	80a7a82 <mbedtls_mpi_copy>
 80a8ac0:	4604      	mov	r4, r0
 80a8ac2:	2800      	cmp	r0, #0
 80a8ac4:	d163      	bne.n	80a8b8e <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80a8ac6:	4629      	mov	r1, r5
 80a8ac8:	a807      	add	r0, sp, #28
 80a8aca:	f7fe ffda 	bl	80a7a82 <mbedtls_mpi_copy>
 80a8ace:	4604      	mov	r4, r0
 80a8ad0:	2800      	cmp	r0, #0
 80a8ad2:	d15c      	bne.n	80a8b8e <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
 80a8ad4:	a804      	add	r0, sp, #16
 80a8ad6:	f7ff f82b 	bl	80a7b30 <mbedtls_mpi_lsb>
 80a8ada:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 80a8adc:	a807      	add	r0, sp, #28
 80a8ade:	f7ff f827 	bl	80a7b30 <mbedtls_mpi_lsb>
 80a8ae2:	4285      	cmp	r5, r0
 80a8ae4:	bf28      	it	cs
 80a8ae6:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 80a8ae8:	a804      	add	r0, sp, #16
 80a8aea:	4629      	mov	r1, r5
 80a8aec:	f7ff f906 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a8af0:	4604      	mov	r4, r0
 80a8af2:	2800      	cmp	r0, #0
 80a8af4:	d14b      	bne.n	80a8b8e <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 80a8af6:	4629      	mov	r1, r5
 80a8af8:	a807      	add	r0, sp, #28
 80a8afa:	f7ff f8ff 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a8afe:	4604      	mov	r4, r0
 80a8b00:	2800      	cmp	r0, #0
 80a8b02:	d144      	bne.n	80a8b8e <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
 80a8b04:	9607      	str	r6, [sp, #28]
 80a8b06:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 80a8b08:	2100      	movs	r1, #0
 80a8b0a:	a804      	add	r0, sp, #16
 80a8b0c:	f7ff fa1a 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a8b10:	2800      	cmp	r0, #0
 80a8b12:	d031      	beq.n	80a8b78 <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 80a8b14:	a804      	add	r0, sp, #16
 80a8b16:	f7ff f80b 	bl	80a7b30 <mbedtls_mpi_lsb>
 80a8b1a:	4601      	mov	r1, r0
 80a8b1c:	a804      	add	r0, sp, #16
 80a8b1e:	f7ff f8ed 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a8b22:	4604      	mov	r4, r0
 80a8b24:	2800      	cmp	r0, #0
 80a8b26:	d132      	bne.n	80a8b8e <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 80a8b28:	a807      	add	r0, sp, #28
 80a8b2a:	f7ff f801 	bl	80a7b30 <mbedtls_mpi_lsb>
 80a8b2e:	4601      	mov	r1, r0
 80a8b30:	a807      	add	r0, sp, #28
 80a8b32:	f7ff f8e3 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a8b36:	4604      	mov	r4, r0
 80a8b38:	bb48      	cbnz	r0, 80a8b8e <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 80a8b3a:	a907      	add	r1, sp, #28
 80a8b3c:	a804      	add	r0, sp, #16
 80a8b3e:	f7ff f9bc 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
 80a8b42:	2800      	cmp	r0, #0
 80a8b44:	db09      	blt.n	80a8b5a <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 80a8b46:	a904      	add	r1, sp, #16
 80a8b48:	aa07      	add	r2, sp, #28
 80a8b4a:	4608      	mov	r0, r1
 80a8b4c:	f7ff fa6a 	bl	80a8024 <mbedtls_mpi_sub_abs>
 80a8b50:	4604      	mov	r4, r0
 80a8b52:	b9e0      	cbnz	r0, 80a8b8e <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 80a8b54:	2101      	movs	r1, #1
 80a8b56:	a804      	add	r0, sp, #16
 80a8b58:	e008      	b.n	80a8b6c <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 80a8b5a:	a907      	add	r1, sp, #28
 80a8b5c:	aa04      	add	r2, sp, #16
 80a8b5e:	4608      	mov	r0, r1
 80a8b60:	f7ff fa60 	bl	80a8024 <mbedtls_mpi_sub_abs>
 80a8b64:	4604      	mov	r4, r0
 80a8b66:	b990      	cbnz	r0, 80a8b8e <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 80a8b68:	2101      	movs	r1, #1
 80a8b6a:	a807      	add	r0, sp, #28
 80a8b6c:	f7ff f8c6 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a8b70:	4604      	mov	r4, r0
 80a8b72:	2800      	cmp	r0, #0
 80a8b74:	d0c8      	beq.n	80a8b08 <mbedtls_mpi_gcd+0x6c>
 80a8b76:	e00a      	b.n	80a8b8e <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 80a8b78:	4629      	mov	r1, r5
 80a8b7a:	a807      	add	r0, sp, #28
 80a8b7c:	f7ff f86f 	bl	80a7c5e <mbedtls_mpi_shift_l>
 80a8b80:	4604      	mov	r4, r0
 80a8b82:	b920      	cbnz	r0, 80a8b8e <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 80a8b84:	a907      	add	r1, sp, #28
 80a8b86:	4638      	mov	r0, r7
 80a8b88:	f7fe ff7b 	bl	80a7a82 <mbedtls_mpi_copy>
 80a8b8c:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 80a8b8e:	a801      	add	r0, sp, #4
 80a8b90:	f7fe ff35 	bl	80a79fe <mbedtls_mpi_free>
 80a8b94:	a804      	add	r0, sp, #16
 80a8b96:	f7fe ff32 	bl	80a79fe <mbedtls_mpi_free>
 80a8b9a:	a807      	add	r0, sp, #28
 80a8b9c:	f7fe ff2f 	bl	80a79fe <mbedtls_mpi_free>

    return( ret );
}
 80a8ba0:	4620      	mov	r0, r4
 80a8ba2:	b00b      	add	sp, #44	; 0x2c
 80a8ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a8ba6 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80a8ba6:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 80a8ba8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80a8bac:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80a8bb0:	4605      	mov	r5, r0
 80a8bb2:	460c      	mov	r4, r1
 80a8bb4:	4616      	mov	r6, r2
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 80a8bb6:	d814      	bhi.n	80a8be2 <mbedtls_mpi_fill_random+0x3c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 80a8bb8:	460a      	mov	r2, r1
 80a8bba:	4618      	mov	r0, r3
 80a8bbc:	4669      	mov	r1, sp
 80a8bbe:	47b0      	blx	r6
 80a8bc0:	b920      	cbnz	r0, 80a8bcc <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 80a8bc2:	4622      	mov	r2, r4
 80a8bc4:	4669      	mov	r1, sp
 80a8bc6:	4628      	mov	r0, r5
 80a8bc8:	f7fe fff1 	bl	80a7bae <mbedtls_mpi_read_binary>
 80a8bcc:	2300      	movs	r3, #0
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
}

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a8bce:	f240 4401 	movw	r4, #1025	; 0x401
 80a8bd2:	4619      	mov	r1, r3
 80a8bd4:	eb0d 0203 	add.w	r2, sp, r3
 80a8bd8:	3301      	adds	r3, #1
 80a8bda:	42a3      	cmp	r3, r4
 80a8bdc:	d003      	beq.n	80a8be6 <mbedtls_mpi_fill_random+0x40>
 80a8bde:	7011      	strb	r1, [r2, #0]
 80a8be0:	e7f8      	b.n	80a8bd4 <mbedtls_mpi_fill_random+0x2e>
{
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80a8be2:	f06f 0003 	mvn.w	r0, #3
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    return( ret );
}
 80a8be6:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 80a8bea:	bd70      	pop	{r4, r5, r6, pc}

080a8bec <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 80a8bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a8bf0:	4680      	mov	r8, r0
 80a8bf2:	b09c      	sub	sp, #112	; 0x70
 80a8bf4:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 80a8bf6:	4610      	mov	r0, r2
 80a8bf8:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 80a8bfa:	4616      	mov	r6, r2
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 80a8bfc:	f7ff f9a2 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a8c00:	2800      	cmp	r0, #0
 80a8c02:	f340 814c 	ble.w	80a8e9e <mbedtls_mpi_inv_mod+0x2b2>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a8c06:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8c08:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 80a8c0a:	4632      	mov	r2, r6
 80a8c0c:	4639      	mov	r1, r7
 80a8c0e:	a801      	add	r0, sp, #4
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8c10:	9504      	str	r5, [sp, #16]
    X->n = 0;
 80a8c12:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 80a8c14:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8c16:	9507      	str	r5, [sp, #28]
    X->n = 0;
 80a8c18:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 80a8c1a:	9309      	str	r3, [sp, #36]	; 0x24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8c1c:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 80a8c1e:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 80a8c20:	930c      	str	r3, [sp, #48]	; 0x30
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8c22:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 80a8c24:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 80a8c26:	930f      	str	r3, [sp, #60]	; 0x3c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8c28:	9501      	str	r5, [sp, #4]
    X->n = 0;
 80a8c2a:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80a8c2c:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8c2e:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 80a8c30:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 80a8c32:	9312      	str	r3, [sp, #72]	; 0x48
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8c34:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 80a8c36:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 80a8c38:	9315      	str	r3, [sp, #84]	; 0x54
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8c3a:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 80a8c3c:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 80a8c3e:	9318      	str	r3, [sp, #96]	; 0x60
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a8c40:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 80a8c42:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 80a8c44:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 80a8c46:	f7ff ff29 	bl	80a8a9c <mbedtls_mpi_gcd>
 80a8c4a:	4604      	mov	r4, r0
 80a8c4c:	2800      	cmp	r0, #0
 80a8c4e:	f040 8109 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 80a8c52:	4629      	mov	r1, r5
 80a8c54:	a801      	add	r0, sp, #4
 80a8c56:	f7ff f975 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a8c5a:	2800      	cmp	r0, #0
 80a8c5c:	f040 8100 	bne.w	80a8e60 <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 80a8c60:	4632      	mov	r2, r6
 80a8c62:	4639      	mov	r1, r7
 80a8c64:	a804      	add	r0, sp, #16
 80a8c66:	f7ff fcc8 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80a8c6a:	4604      	mov	r4, r0
 80a8c6c:	2800      	cmp	r0, #0
 80a8c6e:	f040 80f9 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 80a8c72:	a904      	add	r1, sp, #16
 80a8c74:	a807      	add	r0, sp, #28
 80a8c76:	f7fe ff04 	bl	80a7a82 <mbedtls_mpi_copy>
 80a8c7a:	4604      	mov	r4, r0
 80a8c7c:	2800      	cmp	r0, #0
 80a8c7e:	f040 80f1 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 80a8c82:	4631      	mov	r1, r6
 80a8c84:	a810      	add	r0, sp, #64	; 0x40
 80a8c86:	f7fe fefc 	bl	80a7a82 <mbedtls_mpi_copy>
 80a8c8a:	4604      	mov	r4, r0
 80a8c8c:	2800      	cmp	r0, #0
 80a8c8e:	f040 80e9 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 80a8c92:	4631      	mov	r1, r6
 80a8c94:	a813      	add	r0, sp, #76	; 0x4c
 80a8c96:	f7fe fef4 	bl	80a7a82 <mbedtls_mpi_copy>
 80a8c9a:	4604      	mov	r4, r0
 80a8c9c:	2800      	cmp	r0, #0
 80a8c9e:	f040 80e1 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 80a8ca2:	4629      	mov	r1, r5
 80a8ca4:	a80a      	add	r0, sp, #40	; 0x28
 80a8ca6:	f7fe ff16 	bl	80a7ad6 <mbedtls_mpi_lset>
 80a8caa:	4604      	mov	r4, r0
 80a8cac:	2800      	cmp	r0, #0
 80a8cae:	f040 80d9 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 80a8cb2:	4601      	mov	r1, r0
 80a8cb4:	a80d      	add	r0, sp, #52	; 0x34
 80a8cb6:	f7fe ff0e 	bl	80a7ad6 <mbedtls_mpi_lset>
 80a8cba:	4604      	mov	r4, r0
 80a8cbc:	2800      	cmp	r0, #0
 80a8cbe:	f040 80d1 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 80a8cc2:	4601      	mov	r1, r0
 80a8cc4:	a816      	add	r0, sp, #88	; 0x58
 80a8cc6:	f7fe ff06 	bl	80a7ad6 <mbedtls_mpi_lset>
 80a8cca:	4604      	mov	r4, r0
 80a8ccc:	2800      	cmp	r0, #0
 80a8cce:	f040 80c9 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 80a8cd2:	4629      	mov	r1, r5
 80a8cd4:	a819      	add	r0, sp, #100	; 0x64
 80a8cd6:	f7fe fefe 	bl	80a7ad6 <mbedtls_mpi_lset>
 80a8cda:	4604      	mov	r4, r0
 80a8cdc:	2800      	cmp	r0, #0
 80a8cde:	f040 80c1 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 80a8ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8ce4:	681b      	ldr	r3, [r3, #0]
 80a8ce6:	07dd      	lsls	r5, r3, #31
 80a8ce8:	d44c      	bmi.n	80a8d84 <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 80a8cea:	2101      	movs	r1, #1
 80a8cec:	a807      	add	r0, sp, #28
 80a8cee:	f7ff f805 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a8cf2:	4604      	mov	r4, r0
 80a8cf4:	2800      	cmp	r0, #0
 80a8cf6:	f040 80b5 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 80a8cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a8cfc:	681b      	ldr	r3, [r3, #0]
 80a8cfe:	07dc      	lsls	r4, r3, #31
 80a8d00:	d410      	bmi.n	80a8d24 <mbedtls_mpi_inv_mod+0x138>
 80a8d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a8d04:	681b      	ldr	r3, [r3, #0]
 80a8d06:	07d8      	lsls	r0, r3, #31
 80a8d08:	d40c      	bmi.n	80a8d24 <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 80a8d0a:	2101      	movs	r1, #1
 80a8d0c:	a80a      	add	r0, sp, #40	; 0x28
 80a8d0e:	f7fe fff5 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a8d12:	4604      	mov	r4, r0
 80a8d14:	2800      	cmp	r0, #0
 80a8d16:	f040 80a5 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 80a8d1a:	2101      	movs	r1, #1
 80a8d1c:	a80d      	add	r0, sp, #52	; 0x34
 80a8d1e:	f7fe ffed 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a8d22:	e7da      	b.n	80a8cda <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 80a8d24:	a90a      	add	r1, sp, #40	; 0x28
 80a8d26:	aa10      	add	r2, sp, #64	; 0x40
 80a8d28:	4608      	mov	r0, r1
 80a8d2a:	f7ff f9bb 	bl	80a80a4 <mbedtls_mpi_add_mpi>
 80a8d2e:	4604      	mov	r4, r0
 80a8d30:	2800      	cmp	r0, #0
 80a8d32:	f040 8097 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 80a8d36:	a90d      	add	r1, sp, #52	; 0x34
 80a8d38:	aa04      	add	r2, sp, #16
 80a8d3a:	4608      	mov	r0, r1
 80a8d3c:	f7ff f9d3 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a8d40:	4604      	mov	r4, r0
 80a8d42:	2800      	cmp	r0, #0
 80a8d44:	d0e1      	beq.n	80a8d0a <mbedtls_mpi_inv_mod+0x11e>
 80a8d46:	e08d      	b.n	80a8e64 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 80a8d48:	2101      	movs	r1, #1
 80a8d4a:	a813      	add	r0, sp, #76	; 0x4c
 80a8d4c:	f7fe ffd6 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a8d50:	4604      	mov	r4, r0
 80a8d52:	2800      	cmp	r0, #0
 80a8d54:	f040 8086 	bne.w	80a8e64 <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 80a8d58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80a8d5a:	681b      	ldr	r3, [r3, #0]
 80a8d5c:	07da      	lsls	r2, r3, #31
 80a8d5e:	d416      	bmi.n	80a8d8e <mbedtls_mpi_inv_mod+0x1a2>
 80a8d60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a8d62:	681b      	ldr	r3, [r3, #0]
 80a8d64:	07db      	lsls	r3, r3, #31
 80a8d66:	d412      	bmi.n	80a8d8e <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 80a8d68:	2101      	movs	r1, #1
 80a8d6a:	a816      	add	r0, sp, #88	; 0x58
 80a8d6c:	f7fe ffc6 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a8d70:	4604      	mov	r4, r0
 80a8d72:	2800      	cmp	r0, #0
 80a8d74:	d176      	bne.n	80a8e64 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 80a8d76:	2101      	movs	r1, #1
 80a8d78:	a819      	add	r0, sp, #100	; 0x64
 80a8d7a:	f7fe ffbf 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80a8d7e:	4604      	mov	r4, r0
 80a8d80:	2800      	cmp	r0, #0
 80a8d82:	d16f      	bne.n	80a8e64 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
 80a8d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8d86:	681b      	ldr	r3, [r3, #0]
 80a8d88:	07d9      	lsls	r1, r3, #31
 80a8d8a:	d411      	bmi.n	80a8db0 <mbedtls_mpi_inv_mod+0x1c4>
 80a8d8c:	e7dc      	b.n	80a8d48 <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 80a8d8e:	a916      	add	r1, sp, #88	; 0x58
 80a8d90:	aa10      	add	r2, sp, #64	; 0x40
 80a8d92:	4608      	mov	r0, r1
 80a8d94:	f7ff f986 	bl	80a80a4 <mbedtls_mpi_add_mpi>
 80a8d98:	4604      	mov	r4, r0
 80a8d9a:	2800      	cmp	r0, #0
 80a8d9c:	d162      	bne.n	80a8e64 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 80a8d9e:	a919      	add	r1, sp, #100	; 0x64
 80a8da0:	aa04      	add	r2, sp, #16
 80a8da2:	4608      	mov	r0, r1
 80a8da4:	f7ff f99f 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a8da8:	4604      	mov	r4, r0
 80a8daa:	2800      	cmp	r0, #0
 80a8dac:	d0dc      	beq.n	80a8d68 <mbedtls_mpi_inv_mod+0x17c>
 80a8dae:	e059      	b.n	80a8e64 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 80a8db0:	a913      	add	r1, sp, #76	; 0x4c
 80a8db2:	a807      	add	r0, sp, #28
 80a8db4:	f7ff f881 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
 80a8db8:	2800      	cmp	r0, #0
 80a8dba:	db1f      	blt.n	80a8dfc <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 80a8dbc:	a907      	add	r1, sp, #28
 80a8dbe:	aa13      	add	r2, sp, #76	; 0x4c
 80a8dc0:	4608      	mov	r0, r1
 80a8dc2:	f7ff f990 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a8dc6:	4604      	mov	r4, r0
 80a8dc8:	2800      	cmp	r0, #0
 80a8dca:	d14b      	bne.n	80a8e64 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 80a8dcc:	a90a      	add	r1, sp, #40	; 0x28
 80a8dce:	aa16      	add	r2, sp, #88	; 0x58
 80a8dd0:	4608      	mov	r0, r1
 80a8dd2:	f7ff f988 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a8dd6:	4604      	mov	r4, r0
 80a8dd8:	2800      	cmp	r0, #0
 80a8dda:	d143      	bne.n	80a8e64 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 80a8ddc:	aa19      	add	r2, sp, #100	; 0x64
 80a8dde:	a90d      	add	r1, sp, #52	; 0x34
 80a8de0:	4608      	mov	r0, r1
 80a8de2:	f7ff f980 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a8de6:	4604      	mov	r4, r0
 80a8de8:	2800      	cmp	r0, #0
 80a8dea:	d13b      	bne.n	80a8e64 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 80a8dec:	2100      	movs	r1, #0
 80a8dee:	a807      	add	r0, sp, #28
 80a8df0:	f7ff f8a8 	bl	80a7f44 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
 80a8df4:	2800      	cmp	r0, #0
 80a8df6:	f47f af74 	bne.w	80a8ce2 <mbedtls_mpi_inv_mod+0xf6>
 80a8dfa:	e017      	b.n	80a8e2c <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 80a8dfc:	a913      	add	r1, sp, #76	; 0x4c
 80a8dfe:	aa07      	add	r2, sp, #28
 80a8e00:	4608      	mov	r0, r1
 80a8e02:	f7ff f970 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a8e06:	4604      	mov	r4, r0
 80a8e08:	bb60      	cbnz	r0, 80a8e64 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 80a8e0a:	a916      	add	r1, sp, #88	; 0x58
 80a8e0c:	aa0a      	add	r2, sp, #40	; 0x28
 80a8e0e:	4608      	mov	r0, r1
 80a8e10:	f7ff f969 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a8e14:	4604      	mov	r4, r0
 80a8e16:	bb28      	cbnz	r0, 80a8e64 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 80a8e18:	aa0d      	add	r2, sp, #52	; 0x34
 80a8e1a:	a919      	add	r1, sp, #100	; 0x64
 80a8e1c:	e7e0      	b.n	80a8de0 <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 80a8e1e:	a916      	add	r1, sp, #88	; 0x58
 80a8e20:	4632      	mov	r2, r6
 80a8e22:	4608      	mov	r0, r1
 80a8e24:	f7ff f93e 	bl	80a80a4 <mbedtls_mpi_add_mpi>
 80a8e28:	4604      	mov	r4, r0
 80a8e2a:	b9d8      	cbnz	r0, 80a8e64 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 80a8e2c:	2100      	movs	r1, #0
 80a8e2e:	a816      	add	r0, sp, #88	; 0x58
 80a8e30:	f7ff f888 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80a8e34:	2800      	cmp	r0, #0
 80a8e36:	dbf2      	blt.n	80a8e1e <mbedtls_mpi_inv_mod+0x232>
 80a8e38:	e006      	b.n	80a8e48 <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 80a8e3a:	a916      	add	r1, sp, #88	; 0x58
 80a8e3c:	4632      	mov	r2, r6
 80a8e3e:	4608      	mov	r0, r1
 80a8e40:	f7ff f951 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80a8e44:	4604      	mov	r4, r0
 80a8e46:	b968      	cbnz	r0, 80a8e64 <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 80a8e48:	4631      	mov	r1, r6
 80a8e4a:	a816      	add	r0, sp, #88	; 0x58
 80a8e4c:	f7ff f835 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
 80a8e50:	2800      	cmp	r0, #0
 80a8e52:	daf2      	bge.n	80a8e3a <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 80a8e54:	a916      	add	r1, sp, #88	; 0x58
 80a8e56:	4640      	mov	r0, r8
 80a8e58:	f7fe fe13 	bl	80a7a82 <mbedtls_mpi_copy>
 80a8e5c:	4604      	mov	r4, r0
 80a8e5e:	e001      	b.n	80a8e64 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 80a8e60:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 80a8e64:	a804      	add	r0, sp, #16
 80a8e66:	f7fe fdca 	bl	80a79fe <mbedtls_mpi_free>
 80a8e6a:	a807      	add	r0, sp, #28
 80a8e6c:	f7fe fdc7 	bl	80a79fe <mbedtls_mpi_free>
 80a8e70:	a80a      	add	r0, sp, #40	; 0x28
 80a8e72:	f7fe fdc4 	bl	80a79fe <mbedtls_mpi_free>
 80a8e76:	a80d      	add	r0, sp, #52	; 0x34
 80a8e78:	f7fe fdc1 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 80a8e7c:	a801      	add	r0, sp, #4
 80a8e7e:	f7fe fdbe 	bl	80a79fe <mbedtls_mpi_free>
 80a8e82:	a810      	add	r0, sp, #64	; 0x40
 80a8e84:	f7fe fdbb 	bl	80a79fe <mbedtls_mpi_free>
 80a8e88:	a813      	add	r0, sp, #76	; 0x4c
 80a8e8a:	f7fe fdb8 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 80a8e8e:	a816      	add	r0, sp, #88	; 0x58
 80a8e90:	f7fe fdb5 	bl	80a79fe <mbedtls_mpi_free>
 80a8e94:	a819      	add	r0, sp, #100	; 0x64
 80a8e96:	f7fe fdb2 	bl	80a79fe <mbedtls_mpi_free>

    return( ret );
 80a8e9a:	4620      	mov	r0, r4
 80a8e9c:	e001      	b.n	80a8ea2 <mbedtls_mpi_inv_mod+0x2b6>
{
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80a8e9e:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
 80a8ea2:	b01c      	add	sp, #112	; 0x70
 80a8ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a8ea8 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 80a8ea8:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 80a8eaa:	4604      	mov	r4, r0
 80a8eac:	b160      	cbz	r0, 80a8ec8 <mbedtls_pk_free+0x20>
 80a8eae:	6803      	ldr	r3, [r0, #0]
 80a8eb0:	b153      	cbz	r3, 80a8ec8 <mbedtls_pk_free+0x20>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 80a8eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a8eb4:	6840      	ldr	r0, [r0, #4]
 80a8eb6:	4798      	blx	r3
 80a8eb8:	f104 0208 	add.w	r2, r4, #8
#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a8ebc:	2300      	movs	r3, #0
 80a8ebe:	4294      	cmp	r4, r2
 80a8ec0:	d002      	beq.n	80a8ec8 <mbedtls_pk_free+0x20>
 80a8ec2:	7023      	strb	r3, [r4, #0]
 80a8ec4:	3401      	adds	r4, #1
 80a8ec6:	e7fa      	b.n	80a8ebe <mbedtls_pk_free+0x16>
 80a8ec8:	bd10      	pop	{r4, pc}
	...

080a8ecc <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 80a8ecc:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 80a8ece:	4802      	ldr	r0, [pc, #8]	; (80a8ed8 <mbedtls_pk_info_from_type+0xc>)
 80a8ed0:	bf18      	it	ne
 80a8ed2:	2000      	movne	r0, #0
 80a8ed4:	4770      	bx	lr
 80a8ed6:	bf00      	nop
 80a8ed8:	080ae408 	.word	0x080ae408

080a8edc <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 80a8edc:	b570      	push	{r4, r5, r6, lr}
 80a8ede:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 80a8ee0:	4605      	mov	r5, r0
 80a8ee2:	b148      	cbz	r0, 80a8ef8 <mbedtls_pk_setup+0x1c>
 80a8ee4:	b141      	cbz	r1, 80a8ef8 <mbedtls_pk_setup+0x1c>
 80a8ee6:	6804      	ldr	r4, [r0, #0]
 80a8ee8:	b934      	cbnz	r4, 80a8ef8 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 80a8eea:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80a8eec:	4798      	blx	r3
 80a8eee:	6068      	str	r0, [r5, #4]
 80a8ef0:	b120      	cbz	r0, 80a8efc <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 80a8ef2:	602e      	str	r6, [r5, #0]

    return( 0 );
 80a8ef4:	4620      	mov	r0, r4
 80a8ef6:	bd70      	pop	{r4, r5, r6, pc}
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80a8ef8:	4801      	ldr	r0, [pc, #4]	; (80a8f00 <mbedtls_pk_setup+0x24>)
 80a8efa:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 80a8efc:	4801      	ldr	r0, [pc, #4]	; (80a8f04 <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
 80a8efe:	bd70      	pop	{r4, r5, r6, pc}
 80a8f00:	ffffc180 	.word	0xffffc180
 80a8f04:	ffffc080 	.word	0xffffc080

080a8f08 <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 80a8f08:	b120      	cbz	r0, 80a8f14 <mbedtls_pk_can_do+0xc>
 80a8f0a:	6803      	ldr	r3, [r0, #0]
 80a8f0c:	b113      	cbz	r3, 80a8f14 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 80a8f0e:	68db      	ldr	r3, [r3, #12]
 80a8f10:	4608      	mov	r0, r1
 80a8f12:	4718      	bx	r3
}
 80a8f14:	2000      	movs	r0, #0
 80a8f16:	4770      	bx	lr

080a8f18 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 80a8f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a8f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80a8f20:	460e      	mov	r6, r1
 80a8f22:	4617      	mov	r7, r2
 80a8f24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( ctx == NULL || ctx->pk_info == NULL ||
 80a8f28:	4604      	mov	r4, r0
 80a8f2a:	b910      	cbnz	r0, 80a8f32 <mbedtls_pk_verify+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80a8f2c:	480f      	ldr	r0, [pc, #60]	; (80a8f6c <mbedtls_pk_verify+0x54>)
 80a8f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 80a8f32:	6802      	ldr	r2, [r0, #0]
 80a8f34:	2a00      	cmp	r2, #0
 80a8f36:	d0f9      	beq.n	80a8f2c <mbedtls_pk_verify+0x14>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 80a8f38:	b93b      	cbnz	r3, 80a8f4a <mbedtls_pk_verify+0x32>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 80a8f3a:	4608      	mov	r0, r1
 80a8f3c:	f7fb fea8 	bl	80a4c90 <mbedtls_md_info_from_type>
 80a8f40:	2800      	cmp	r0, #0
 80a8f42:	d0f3      	beq.n	80a8f2c <mbedtls_pk_verify+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 80a8f44:	f7fb ffe8 	bl	80a4f18 <mbedtls_md_get_size>
 80a8f48:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
 80a8f4a:	6822      	ldr	r2, [r4, #0]
 80a8f4c:	6915      	ldr	r5, [r2, #16]
 80a8f4e:	b155      	cbz	r5, 80a8f66 <mbedtls_pk_verify+0x4e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 80a8f50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80a8f54:	f8cd 8020 	str.w	r8, [sp, #32]
 80a8f58:	463a      	mov	r2, r7
 80a8f5a:	4631      	mov	r1, r6
 80a8f5c:	6860      	ldr	r0, [r4, #4]
 80a8f5e:	46ac      	mov	ip, r5
}
 80a8f60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 80a8f64:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80a8f66:	4802      	ldr	r0, [pc, #8]	; (80a8f70 <mbedtls_pk_verify+0x58>)
 80a8f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a8f6c:	ffffc180 	.word	0xffffc180
 80a8f70:	ffffc100 	.word	0xffffc100

080a8f74 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a8f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a8f78:	af08      	add	r7, sp, #32
 80a8f7a:	460d      	mov	r5, r1
 80a8f7c:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 80a8f80:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 80a8f82:	4604      	mov	r4, r0
 80a8f84:	b910      	cbnz	r0, 80a8f8c <mbedtls_pk_sign+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80a8f86:	4813      	ldr	r0, [pc, #76]	; (80a8fd4 <mbedtls_pk_sign+0x60>)
 80a8f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 80a8f8c:	6802      	ldr	r2, [r0, #0]
 80a8f8e:	2a00      	cmp	r2, #0
 80a8f90:	d0f9      	beq.n	80a8f86 <mbedtls_pk_sign+0x12>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 80a8f92:	b93b      	cbnz	r3, 80a8fa4 <mbedtls_pk_sign+0x30>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 80a8f94:	4608      	mov	r0, r1
 80a8f96:	f7fb fe7b 	bl	80a4c90 <mbedtls_md_info_from_type>
 80a8f9a:	2800      	cmp	r0, #0
 80a8f9c:	d0f3      	beq.n	80a8f86 <mbedtls_pk_sign+0x12>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 80a8f9e:	f7fb ffbb 	bl	80a4f18 <mbedtls_md_get_size>
 80a8fa2:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
 80a8fa4:	6822      	ldr	r2, [r4, #0]
 80a8fa6:	f8d2 e014 	ldr.w	lr, [r2, #20]
 80a8faa:	f1be 0f00 	cmp.w	lr, #0
 80a8fae:	d00d      	beq.n	80a8fcc <mbedtls_pk_sign+0x58>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 80a8fb0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80a8fb4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a8fb8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80a8fbc:	9708      	str	r7, [sp, #32]
 80a8fbe:	4632      	mov	r2, r6
 80a8fc0:	4629      	mov	r1, r5
 80a8fc2:	6860      	ldr	r0, [r4, #4]
 80a8fc4:	46f4      	mov	ip, lr
}
 80a8fc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 80a8fca:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80a8fcc:	4802      	ldr	r0, [pc, #8]	; (80a8fd8 <mbedtls_pk_sign+0x64>)
 80a8fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a8fd2:	bf00      	nop
 80a8fd4:	ffffc180 	.word	0xffffc180
 80a8fd8:	ffffc100 	.word	0xffffc100

080a8fdc <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a8fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a8fde:	f8dd e020 	ldr.w	lr, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL )
 80a8fe2:	b140      	cbz	r0, 80a8ff6 <mbedtls_pk_encrypt+0x1a>
 80a8fe4:	6804      	ldr	r4, [r0, #0]
 80a8fe6:	b134      	cbz	r4, 80a8ff6 <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 80a8fe8:	69e4      	ldr	r4, [r4, #28]
 80a8fea:	b134      	cbz	r4, 80a8ffa <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 80a8fec:	46a4      	mov	ip, r4
}
 80a8fee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 80a8ff2:	6840      	ldr	r0, [r0, #4]
 80a8ff4:	4760      	bx	ip
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80a8ff6:	4802      	ldr	r0, [pc, #8]	; (80a9000 <mbedtls_pk_encrypt+0x24>)
 80a8ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80a8ffa:	4802      	ldr	r0, [pc, #8]	; (80a9004 <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
 80a8ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a8ffe:	bf00      	nop
 80a9000:	ffffc180 	.word	0xffffc180
 80a9004:	ffffc100 	.word	0xffffc100

080a9008 <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80a9008:	b120      	cbz	r0, 80a9014 <mbedtls_pk_get_bitlen+0xc>
 80a900a:	6803      	ldr	r3, [r0, #0]
 80a900c:	b113      	cbz	r3, 80a9014 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 80a900e:	689b      	ldr	r3, [r3, #8]
 80a9010:	6840      	ldr	r0, [r0, #4]
 80a9012:	4718      	bx	r3
}
 80a9014:	2000      	movs	r0, #0
 80a9016:	4770      	bx	lr

080a9018 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 80a9018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a901c:	b087      	sub	sp, #28
 80a901e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80a9022:	4683      	mov	fp, r0
 80a9024:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
 80a9028:	460d      	mov	r5, r1
 80a902a:	461f      	mov	r7, r3
 80a902c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if( ctx == NULL || ctx->pk_info == NULL )
 80a902e:	4614      	mov	r4, r2
 80a9030:	b90a      	cbnz	r2, 80a9036 <mbedtls_pk_verify_ext+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80a9032:	4823      	ldr	r0, [pc, #140]	; (80a90c0 <mbedtls_pk_verify_ext+0xa8>)
 80a9034:	e040      	b.n	80a90b8 <mbedtls_pk_verify_ext+0xa0>
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80a9036:	6813      	ldr	r3, [r2, #0]
 80a9038:	2b00      	cmp	r3, #0
 80a903a:	d0fa      	beq.n	80a9032 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
 80a903c:	4601      	mov	r1, r0
 80a903e:	4610      	mov	r0, r2
 80a9040:	f7ff ff62 	bl	80a8f08 <mbedtls_pk_can_do>
 80a9044:	2800      	cmp	r0, #0
 80a9046:	d034      	beq.n	80a90b2 <mbedtls_pk_verify_ext+0x9a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
 80a9048:	f1bb 0f06 	cmp.w	fp, #6
 80a904c:	d123      	bne.n	80a9096 <mbedtls_pk_verify_ext+0x7e>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
 80a904e:	2d00      	cmp	r5, #0
 80a9050:	d0ef      	beq.n	80a9032 <mbedtls_pk_verify_ext+0x1a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 80a9052:	4620      	mov	r0, r4
 80a9054:	f7ff ffd8 	bl	80a9008 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
 80a9058:	3007      	adds	r0, #7
 80a905a:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 80a905e:	d32a      	bcc.n	80a90b6 <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
 80a9060:	686b      	ldr	r3, [r5, #4]
 80a9062:	e88d 0280 	stmia.w	sp, {r7, r9}
 80a9066:	9304      	str	r3, [sp, #16]
 80a9068:	782b      	ldrb	r3, [r5, #0]
 80a906a:	f8cd a014 	str.w	sl, [sp, #20]
 80a906e:	9303      	str	r3, [sp, #12]
 80a9070:	f8cd 8008 	str.w	r8, [sp, #8]
 80a9074:	2300      	movs	r3, #0
 80a9076:	461a      	mov	r2, r3
 80a9078:	4619      	mov	r1, r3
 80a907a:	6860      	ldr	r0, [r4, #4]
 80a907c:	f7f9 fc1e 	bl	80a28bc <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 80a9080:	b9d0      	cbnz	r0, 80a90b8 <mbedtls_pk_verify_ext+0xa0>
 80a9082:	4620      	mov	r0, r4
 80a9084:	f7ff ffc0 	bl	80a9008 <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
 80a9088:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
 80a908a:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 80a908e:	480d      	ldr	r0, [pc, #52]	; (80a90c4 <mbedtls_pk_verify_ext+0xac>)
 80a9090:	bf98      	it	ls
 80a9092:	2000      	movls	r0, #0
 80a9094:	e010      	b.n	80a90b8 <mbedtls_pk_verify_ext+0xa0>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 80a9096:	2d00      	cmp	r5, #0
 80a9098:	d1cb      	bne.n	80a9032 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 80a909a:	464b      	mov	r3, r9
 80a909c:	4642      	mov	r2, r8
 80a909e:	4639      	mov	r1, r7
 80a90a0:	4620      	mov	r0, r4
 80a90a2:	9611      	str	r6, [sp, #68]	; 0x44
 80a90a4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
 80a90a8:	b007      	add	sp, #28
 80a90aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 80a90ae:	f7ff bf33 	b.w	80a8f18 <mbedtls_pk_verify>
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80a90b2:	4805      	ldr	r0, [pc, #20]	; (80a90c8 <mbedtls_pk_verify_ext+0xb0>)
 80a90b4:	e000      	b.n	80a90b8 <mbedtls_pk_verify_ext+0xa0>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80a90b6:	4805      	ldr	r0, [pc, #20]	; (80a90cc <mbedtls_pk_verify_ext+0xb4>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 80a90b8:	b007      	add	sp, #28
 80a90ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a90be:	bf00      	nop
 80a90c0:	ffffc180 	.word	0xffffc180
 80a90c4:	ffffc700 	.word	0xffffc700
 80a90c8:	ffffc100 	.word	0xffffc100
 80a90cc:	ffffbc80 	.word	0xffffbc80

080a90d0 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80a90d0:	b110      	cbz	r0, 80a90d8 <mbedtls_pk_get_type+0x8>
 80a90d2:	6800      	ldr	r0, [r0, #0]
 80a90d4:	b100      	cbz	r0, 80a90d8 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 80a90d6:	7800      	ldrb	r0, [r0, #0]
}
 80a90d8:	4770      	bx	lr
	...

080a90dc <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 80a90dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a90e0:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80a90e4:	2301      	movs	r3, #1
 80a90e6:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 80a90e8:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 80a90ec:	a904      	add	r1, sp, #16
 80a90ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80a90f2:	f013 0180 	ands.w	r1, r3, #128	; 0x80
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 80a90f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80a90fa:	bf18      	it	ne
 80a90fc:	211b      	movne	r1, #27
 80a90fe:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80a9102:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80a9104:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80a9106:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80a910a:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80a910c:	d1ee      	bne.n	80a90ec <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 80a910e:	4c66      	ldr	r4, [pc, #408]	; (80a92a8 <_ZL14aes_gen_tablesv+0x1cc>)
 80a9110:	2301      	movs	r3, #1
 80a9112:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
 80a9114:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 80a9118:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 80a911c:	bf18      	it	ne
 80a911e:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80a9120:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 80a9122:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80a9126:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 80a9128:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80a912a:	d1f3      	bne.n	80a9114 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 80a912c:	4e5f      	ldr	r6, [pc, #380]	; (80a92ac <_ZL14aes_gen_tablesv+0x1d0>)
 80a912e:	2363      	movs	r3, #99	; 0x63
    RSb[0x63] = 0x00;
 80a9130:	4d5f      	ldr	r5, [pc, #380]	; (80a92b0 <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 80a9132:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 80a9134:	2300      	movs	r3, #0
 80a9136:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 80a913a:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
 80a913c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80a9140:	aa04      	add	r2, sp, #16
 80a9142:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80a9146:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80a914a:	ea4f 11ee 	mov.w	r1, lr, asr #7
 80a914e:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
 80a9152:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80a9154:	11ca      	asrs	r2, r1, #7
 80a9156:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80a915a:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80a915c:	11d3      	asrs	r3, r2, #7
 80a915e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80a9162:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
 80a9164:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80a9168:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
 80a916a:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80a916e:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
 80a9172:	404a      	eors	r2, r1
 80a9174:	4053      	eors	r3, r2
 80a9176:	b2fa      	uxtb	r2, r7
 80a9178:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 80a917a:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 80a917c:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 80a917e:	3401      	adds	r4, #1
 80a9180:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80a9184:	d1da      	bne.n	80a913c <_ZL14aes_gen_tablesv+0x60>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80a9186:	6b83      	ldr	r3, [r0, #56]	; 0x38
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80a9188:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80a918a:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80a918c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 80a918e:	f8df e11c 	ldr.w	lr, [pc, #284]	; 80a92ac <_ZL14aes_gen_tablesv+0x1d0>
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80a9192:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80a9194:	6b43      	ldr	r3, [r0, #52]	; 0x34
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
 80a9196:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80a92c4 <_ZL14aes_gen_tablesv+0x1e8>

        FT1[i] = ROTL8( FT0[i] );
 80a919a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80a92c8 <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
 80a919e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80a92cc <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
 80a91a2:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80a92d0 <_ZL14aes_gen_tablesv+0x1f4>

        x = RSb[i];
 80a91a6:	f8df b108 	ldr.w	fp, [pc, #264]	; 80a92b0 <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80a91aa:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80a91ac:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 80a91ae:	f812 000e 	ldrb.w	r0, [r2, lr]
 80a91b2:	0094      	lsls	r4, r2, #2
        y = XTIME( x ) & 0xFF;
 80a91b4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80a91b8:	bf14      	ite	ne
 80a91ba:	211b      	movne	r1, #27
 80a91bc:	2100      	moveq	r1, #0
 80a91be:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 80a91c2:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 80a91c4:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 80a91c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a91ca:	404b      	eors	r3, r1
 80a91cc:	4041      	eors	r1, r0
 80a91ce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
 80a91d2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 80a91d6:	ea4f 6333 	mov.w	r3, r3, ror #24
 80a91da:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 80a91de:	ea4f 6333 	mov.w	r3, r3, ror #24
 80a91e2:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 80a91e6:	ea4f 6333 	mov.w	r3, r3, ror #24
 80a91ea:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]

        x = RSb[i];
 80a91ee:	f81b 3002 	ldrb.w	r3, [fp, r2]

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80a91f2:	b1d3      	cbz	r3, 80a922a <_ZL14aes_gen_tablesv+0x14e>
 80a91f4:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80a91f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80a91fc:	9801      	ldr	r0, [sp, #4]
 80a91fe:	1845      	adds	r5, r0, r1
 80a9200:	20ff      	movs	r0, #255	; 0xff
 80a9202:	fb95 f6f0 	sdiv	r6, r5, r0
 80a9206:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 80a920a:	1bae      	subs	r6, r5, r6
 80a920c:	ad04      	add	r5, sp, #16
 80a920e:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80a9212:	9e02      	ldr	r6, [sp, #8]
 80a9214:	4431      	add	r1, r6
 80a9216:	fb91 f0f0 	sdiv	r0, r1, r0
 80a921a:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80a921e:	1a09      	subs	r1, r1, r0
 80a9220:	a804      	add	r0, sp, #16
 80a9222:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80a9226:	0209      	lsls	r1, r1, #8
 80a9228:	e001      	b.n	80a922e <_ZL14aes_gen_tablesv+0x152>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80a922a:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80a922c:	4619      	mov	r1, r3
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80a922e:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80a9230:	b183      	cbz	r3, 80a9254 <_ZL14aes_gen_tablesv+0x178>
 80a9232:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80a9236:	9803      	ldr	r0, [sp, #12]
 80a9238:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80a923c:	4401      	add	r1, r0
 80a923e:	20ff      	movs	r0, #255	; 0xff
 80a9240:	fb91 f0f0 	sdiv	r0, r1, r0
 80a9244:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80a9248:	1a08      	subs	r0, r1, r0
 80a924a:	a904      	add	r1, sp, #16
 80a924c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80a9250:	0409      	lsls	r1, r1, #16
 80a9252:	e000      	b.n	80a9256 <_ZL14aes_gen_tablesv+0x17a>
 80a9254:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80a9256:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80a9258:	b173      	cbz	r3, 80a9278 <_ZL14aes_gen_tablesv+0x19c>
 80a925a:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80a925e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80a9262:	21ff      	movs	r1, #255	; 0xff
 80a9264:	443b      	add	r3, r7
 80a9266:	fb93 f1f1 	sdiv	r1, r3, r1
 80a926a:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80a926e:	1a59      	subs	r1, r3, r1
 80a9270:	ab04      	add	r3, sp, #16
 80a9272:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a9276:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80a9278:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80a927a:	4b0e      	ldr	r3, [pc, #56]	; (80a92b4 <_ZL14aes_gen_tablesv+0x1d8>)
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80a927c:	3201      	adds	r2, #1
        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80a927e:	50e5      	str	r5, [r4, r3]

        RT1[i] = ROTL8( RT0[i] );
 80a9280:	4b0d      	ldr	r3, [pc, #52]	; (80a92b8 <_ZL14aes_gen_tablesv+0x1dc>)
 80a9282:	ea4f 6535 	mov.w	r5, r5, ror #24
 80a9286:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 80a9288:	4b0c      	ldr	r3, [pc, #48]	; (80a92bc <_ZL14aes_gen_tablesv+0x1e0>)
 80a928a:	ea4f 6535 	mov.w	r5, r5, ror #24
 80a928e:	50e5      	str	r5, [r4, r3]
        RT3[i] = ROTL8( RT2[i] );
 80a9290:	4b0b      	ldr	r3, [pc, #44]	; (80a92c0 <_ZL14aes_gen_tablesv+0x1e4>)
 80a9292:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80a9296:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 80a929a:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80a929c:	d187      	bne.n	80a91ae <_ZL14aes_gen_tablesv+0xd2>

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
    }
}
 80a929e:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 80a92a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a92a6:	bf00      	nop
 80a92a8:	20003008 	.word	0x20003008
 80a92ac:	20001f08 	.word	0x20001f08
 80a92b0:	20001e08 	.word	0x20001e08
 80a92b4:	20002408 	.word	0x20002408
 80a92b8:	20002808 	.word	0x20002808
 80a92bc:	20002c08 	.word	0x20002c08
 80a92c0:	20002008 	.word	0x20002008
 80a92c4:	20000e08 	.word	0x20000e08
 80a92c8:	20001208 	.word	0x20001208
 80a92cc:	20001608 	.word	0x20001608
 80a92d0:	20001a08 	.word	0x20001a08

080a92d4 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 80a92d4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80a92d8:	2100      	movs	r1, #0
 80a92da:	f004 b942 	b.w	80ad562 <memset>

080a92de <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 80a92de:	b138      	cbz	r0, 80a92f0 <mbedtls_aes_free+0x12>
 80a92e0:	f500 728c 	add.w	r2, r0, #280	; 0x118

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80a92e4:	2300      	movs	r3, #0
 80a92e6:	4290      	cmp	r0, r2
 80a92e8:	d002      	beq.n	80a92f0 <mbedtls_aes_free+0x12>
 80a92ea:	7003      	strb	r3, [r0, #0]
 80a92ec:	3001      	adds	r0, #1
 80a92ee:	e7fa      	b.n	80a92e6 <mbedtls_aes_free+0x8>
 80a92f0:	4770      	bx	lr
	...

080a92f4 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80a92f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80a92f6:	4e7a      	ldr	r6, [pc, #488]	; (80a94e0 <mbedtls_aes_setkey_enc+0x1ec>)
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80a92f8:	4604      	mov	r4, r0
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80a92fa:	6833      	ldr	r3, [r6, #0]
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80a92fc:	460f      	mov	r7, r1
 80a92fe:	4615      	mov	r5, r2
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80a9300:	b91b      	cbnz	r3, 80a930a <mbedtls_aes_setkey_enc+0x16>
    {
        aes_gen_tables();
 80a9302:	f7ff feeb 	bl	80a90dc <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
 80a9306:	2301      	movs	r3, #1
 80a9308:	6033      	str	r3, [r6, #0]

    }
#endif

    switch( keybits )
 80a930a:	2dc0      	cmp	r5, #192	; 0xc0
 80a930c:	d007      	beq.n	80a931e <mbedtls_aes_setkey_enc+0x2a>
 80a930e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80a9312:	d006      	beq.n	80a9322 <mbedtls_aes_setkey_enc+0x2e>
 80a9314:	2d80      	cmp	r5, #128	; 0x80
 80a9316:	f040 80dd 	bne.w	80a94d4 <mbedtls_aes_setkey_enc+0x1e0>
    {
        case 128: ctx->nr = 10; break;
 80a931a:	230a      	movs	r3, #10
 80a931c:	e002      	b.n	80a9324 <mbedtls_aes_setkey_enc+0x30>
        case 192: ctx->nr = 12; break;
 80a931e:	230c      	movs	r3, #12
 80a9320:	e000      	b.n	80a9324 <mbedtls_aes_setkey_enc+0x30>
        case 256: ctx->nr = 14; break;
 80a9322:	230e      	movs	r3, #14
 80a9324:	6023      	str	r3, [r4, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80a9326:	f104 0308 	add.w	r3, r4, #8
 80a932a:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80a932c:	096d      	lsrs	r5, r5, #5
 80a932e:	2000      	movs	r0, #0
 80a9330:	42a8      	cmp	r0, r5
 80a9332:	d010      	beq.n	80a9356 <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 80a9334:	eb07 0180 	add.w	r1, r7, r0, lsl #2
 80a9338:	788a      	ldrb	r2, [r1, #2]
 80a933a:	784e      	ldrb	r6, [r1, #1]
 80a933c:	0412      	lsls	r2, r2, #16
 80a933e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 80a9342:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
 80a9346:	78c9      	ldrb	r1, [r1, #3]
 80a9348:	4332      	orrs	r2, r6
 80a934a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80a934e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80a9352:	3001      	adds	r0, #1
 80a9354:	e7ec      	b.n	80a9330 <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80a9356:	6822      	ldr	r2, [r4, #0]
 80a9358:	2a0c      	cmp	r2, #12
 80a935a:	d031      	beq.n	80a93c0 <mbedtls_aes_setkey_enc+0xcc>
 80a935c:	2a0e      	cmp	r2, #14
 80a935e:	d068      	beq.n	80a9432 <mbedtls_aes_setkey_enc+0x13e>
 80a9360:	2a0a      	cmp	r2, #10
 80a9362:	f040 80ba 	bne.w	80a94da <mbedtls_aes_setkey_enc+0x1e6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 80a9366:	4f5f      	ldr	r7, [pc, #380]	; (80a94e4 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80a9368:	4e5f      	ldr	r6, [pc, #380]	; (80a94e8 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80a936a:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80a936c:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80a936e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 80a9372:	681a      	ldr	r2, [r3, #0]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80a9374:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80a9376:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80a9378:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80a937c:	5cb0      	ldrb	r0, [r6, r2]
 80a937e:	0e22      	lsrs	r2, r4, #24
 80a9380:	5cb2      	ldrb	r2, [r6, r2]
 80a9382:	4041      	eors	r1, r0
 80a9384:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 80a9388:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80a938a:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80a938c:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80a938e:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 80a9392:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80a9396:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80a9398:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80a939c:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 80a93a0:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 80a93a4:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 80a93a6:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 80a93aa:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 80a93ae:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 80a93b0:	ea82 0201 	eor.w	r2, r2, r1
 80a93b4:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 80a93b6:	ea82 0204 	eor.w	r2, r2, r4
 80a93ba:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80a93bc:	d1d6      	bne.n	80a936c <mbedtls_aes_setkey_enc+0x78>
 80a93be:	e08c      	b.n	80a94da <mbedtls_aes_setkey_enc+0x1e6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 80a93c0:	4e48      	ldr	r6, [pc, #288]	; (80a94e4 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80a93c2:	4d49      	ldr	r5, [pc, #292]	; (80a94e8 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80a93c4:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80a93c6:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80a93ca:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80a93cc:	681a      	ldr	r2, [r3, #0]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80a93ce:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80a93d0:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80a93d2:	f3c0 2107 	ubfx	r1, r0, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80a93d6:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80a93d8:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80a93da:	ea82 0201 	eor.w	r2, r2, r1
 80a93de:	ea4f 6110 	mov.w	r1, r0, lsr #24
 80a93e2:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80a93e4:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80a93e8:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80a93ec:	b2c1      	uxtb	r1, r0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80a93ee:	5c69      	ldrb	r1, [r5, r1]
 80a93f0:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80a93f4:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80a93f8:	5c69      	ldrb	r1, [r5, r1]
 80a93fa:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 80a93fe:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80a9402:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80a9404:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 80a9408:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 80a940c:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 80a940e:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 80a9412:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 80a9416:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 80a9418:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 80a941c:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 80a9420:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 80a9422:	ea82 0201 	eor.w	r2, r2, r1
 80a9426:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 80a9428:	ea82 0200 	eor.w	r2, r2, r0
 80a942c:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80a942e:	d1ca      	bne.n	80a93c6 <mbedtls_aes_setkey_enc+0xd2>
 80a9430:	e053      	b.n	80a94da <mbedtls_aes_setkey_enc+0x1e6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80a9432:	4e2c      	ldr	r6, [pc, #176]	; (80a94e4 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80a9434:	482c      	ldr	r0, [pc, #176]	; (80a94e8 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80a9436:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80a9438:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80a943c:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80a943e:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 80a9440:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80a9442:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80a9444:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80a9448:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80a944a:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80a944c:	4051      	eors	r1, r2
 80a944e:	0e22      	lsrs	r2, r4, #24
 80a9450:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80a9452:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80a9454:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80a9458:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80a945a:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80a945c:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80a9460:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80a9464:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80a9468:	5c82      	ldrb	r2, [r0, r2]
 80a946a:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 80a946e:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80a9472:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 80a9474:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 80a9478:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 80a947c:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 80a947e:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
 80a9482:	ea87 0701 	eor.w	r7, r7, r1
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 80a9486:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 80a9488:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80a948a:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80a948c:	5c82      	ldrb	r2, [r0, r2]
 80a948e:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80a9492:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80a9496:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80a949a:	5c82      	ldrb	r2, [r0, r2]
 80a949c:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80a94a0:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80a94a4:	5c82      	ldrb	r2, [r0, r2]
 80a94a6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80a94aa:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 80a94ae:	5dc2      	ldrb	r2, [r0, r7]
 80a94b0:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 80a94b4:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80a94b8:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
 80a94ba:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
 80a94be:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 80a94c2:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 80a94c4:	ea82 0201 	eor.w	r2, r2, r1
 80a94c8:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 80a94ca:	ea82 0204 	eor.w	r2, r2, r4
 80a94ce:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80a94d0:	d1b2      	bne.n	80a9438 <mbedtls_aes_setkey_enc+0x144>
 80a94d2:	e002      	b.n	80a94da <mbedtls_aes_setkey_enc+0x1e6>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80a94d4:	f06f 001f 	mvn.w	r0, #31
 80a94d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 80a94da:	2000      	movs	r0, #0
}
 80a94dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a94de:	bf00      	nop
 80a94e0:	20000e04 	.word	0x20000e04
 80a94e4:	20003008 	.word	0x20003008
 80a94e8:	20001f08 	.word	0x20001f08

080a94ec <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80a94ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a94f0:	4604      	mov	r4, r0
 80a94f2:	460d      	mov	r5, r1
 80a94f4:	4616      	mov	r6, r2
 80a94f6:	b0c9      	sub	sp, #292	; 0x124
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 80a94f8:	a802      	add	r0, sp, #8
 80a94fa:	f7ff feeb 	bl	80a92d4 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80a94fe:	f104 0308 	add.w	r3, r4, #8
 80a9502:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 80a9504:	4632      	mov	r2, r6
 80a9506:	4629      	mov	r1, r5
 80a9508:	a802      	add	r0, sp, #8
 80a950a:	f7ff fef3 	bl	80a92f4 <mbedtls_aes_setkey_enc>
 80a950e:	4680      	mov	r8, r0
 80a9510:	2800      	cmp	r0, #0
 80a9512:	d14b      	bne.n	80a95ac <mbedtls_aes_setkey_dec+0xc0>
        goto exit;

    ctx->nr = cty.nr;
 80a9514:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80a9516:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 80a9518:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80a951a:	010a      	lsls	r2, r1, #4
 80a951c:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
 80a951e:	5882      	ldr	r2, [r0, r2]
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 80a9520:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80a95c4 <mbedtls_aes_setkey_dec+0xd8>
    }
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
 80a9524:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 80a9526:	685a      	ldr	r2, [r3, #4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 80a9528:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80a95c8 <mbedtls_aes_setkey_dec+0xdc>
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
 80a952c:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 80a952e:	689a      	ldr	r2, [r3, #8]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 80a9530:	f8df a098 	ldr.w	sl, [pc, #152]	; 80a95cc <mbedtls_aes_setkey_dec+0xe0>

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 80a9534:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 80a9536:	68d8      	ldr	r0, [r3, #12]
 80a9538:	f104 0218 	add.w	r2, r4, #24
 80a953c:	6160      	str	r0, [r4, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 80a953e:	4c1f      	ldr	r4, [pc, #124]	; (80a95bc <mbedtls_aes_setkey_dec+0xd0>)
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80a9540:	3901      	subs	r1, #1
 80a9542:	3b10      	subs	r3, #16
 80a9544:	2900      	cmp	r1, #0
 80a9546:	dd29      	ble.n	80a959c <mbedtls_aes_setkey_dec+0xb0>
 80a9548:	1f1d      	subs	r5, r3, #4
 80a954a:	f1a2 0e04 	sub.w	lr, r2, #4
 80a954e:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 80a9552:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80a9556:	b2c6      	uxtb	r6, r0
 80a9558:	5da7      	ldrb	r7, [r4, r6]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 80a955a:	0e06      	lsrs	r6, r0, #24
 80a955c:	5da6      	ldrb	r6, [r4, r6]
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 80a955e:	45ab      	cmp	fp, r5
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 80a9560:	9601      	str	r6, [sp, #4]
 80a9562:	4e17      	ldr	r6, [pc, #92]	; (80a95c0 <mbedtls_aes_setkey_dec+0xd4>)
 80a9564:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80a9568:	9e01      	ldr	r6, [sp, #4]
 80a956a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80a956e:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 80a9572:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80a9576:	5da6      	ldrb	r6, [r4, r6]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 80a9578:	f3c0 4007 	ubfx	r0, r0, #16, #8
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 80a957c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 80a9580:	5c20      	ldrb	r0, [r4, r0]
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 80a9582:	ea86 0607 	eor.w	r6, r6, r7
 80a9586:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
 80a958a:	ea86 0607 	eor.w	r6, r6, r7
 80a958e:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 80a9592:	d1de      	bne.n	80a9552 <mbedtls_aes_setkey_dec+0x66>
 80a9594:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80a9596:	3901      	subs	r1, #1
 80a9598:	3b10      	subs	r3, #16
 80a959a:	e7d3      	b.n	80a9544 <mbedtls_aes_setkey_dec+0x58>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 80a959c:	6819      	ldr	r1, [r3, #0]
 80a959e:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 80a95a0:	6859      	ldr	r1, [r3, #4]
 80a95a2:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 80a95a4:	6899      	ldr	r1, [r3, #8]
 80a95a6:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 80a95a8:	68db      	ldr	r3, [r3, #12]
 80a95aa:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 80a95ac:	a802      	add	r0, sp, #8
 80a95ae:	f7ff fe96 	bl	80a92de <mbedtls_aes_free>

    return( ret );
}
 80a95b2:	4640      	mov	r0, r8
 80a95b4:	b049      	add	sp, #292	; 0x124
 80a95b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a95ba:	bf00      	nop
 80a95bc:	20001f08 	.word	0x20001f08
 80a95c0:	20002408 	.word	0x20002408
 80a95c4:	20002008 	.word	0x20002008
 80a95c8:	20002808 	.word	0x20002808
 80a95cc:	20002c08 	.word	0x20002c08

080a95d0 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80a95d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80a95d4:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80a95d6:	680d      	ldr	r5, [r1, #0]
 80a95d8:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a95da:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80a95dc:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80a95e0:	684d      	ldr	r5, [r1, #4]
 80a95e2:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80a95e4:	688e      	ldr	r6, [r1, #8]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80a95e6:	406c      	eors	r4, r5
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80a95e8:	689d      	ldr	r5, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a95ea:	1040      	asrs	r0, r0, #1
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80a95ec:	b085      	sub	sp, #20
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a95ee:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80a95f0:	4075      	eors	r5, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80a95f2:	68ce      	ldr	r6, [r1, #12]
 80a95f4:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a95f6:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80a95f8:	f853 0f10 	ldr.w	r0, [r3, #16]!
 80a95fc:	4071      	eors	r1, r6
 80a95fe:	f8df e364 	ldr.w	lr, [pc, #868]	; 80a9964 <mbedtls_internal_aes_encrypt+0x394>
 80a9602:	4ed4      	ldr	r6, [pc, #848]	; (80a9954 <mbedtls_internal_aes_encrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80a9604:	f8df a354 	ldr.w	sl, [pc, #852]	; 80a995c <mbedtls_internal_aes_encrypt+0x38c>
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80a9608:	9002      	str	r0, [sp, #8]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a960a:	9801      	ldr	r0, [sp, #4]
 80a960c:	461f      	mov	r7, r3
 80a960e:	2800      	cmp	r0, #0
 80a9610:	ea4f 6011 	mov.w	r0, r1, lsr #24
 80a9614:	f103 0320 	add.w	r3, r3, #32
 80a9618:	f8df 8348 	ldr.w	r8, [pc, #840]	; 80a9964 <mbedtls_internal_aes_encrypt+0x394>
 80a961c:	fa5f f98b 	uxtb.w	r9, fp
 80a9620:	f8df c330 	ldr.w	ip, [pc, #816]	; 80a9954 <mbedtls_internal_aes_encrypt+0x384>
 80a9624:	9003      	str	r0, [sp, #12]
 80a9626:	f340 80be 	ble.w	80a97a6 <mbedtls_internal_aes_encrypt+0x1d6>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80a962a:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 80a962e:	f85e 8029 	ldr.w	r8, [lr, r9, lsl #2]
 80a9632:	48c9      	ldr	r0, [pc, #804]	; (80a9958 <mbedtls_internal_aes_encrypt+0x388>)
 80a9634:	ea88 0807 	eor.w	r8, r8, r7
 80a9638:	f853 7c20 	ldr.w	r7, [r3, #-32]
 80a963c:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 80a9640:	ea88 0807 	eor.w	r8, r8, r7
 80a9644:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80a9648:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 80a964c:	ea88 0707 	eor.w	r7, r8, r7
 80a9650:	f85a 802c 	ldr.w	r8, [sl, ip, lsl #2]
 80a9654:	fa5f fc84 	uxtb.w	ip, r4
 80a9658:	ea87 0808 	eor.w	r8, r7, r8
 80a965c:	ea4f 671b 	mov.w	r7, fp, lsr #24
 80a9660:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 80a9664:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80a9668:	f3c5 2c07 	ubfx	ip, r5, #8, #8
 80a966c:	ea89 0907 	eor.w	r9, r9, r7
 80a9670:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 80a9674:	ea89 0707 	eor.w	r7, r9, r7
 80a9678:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 80a967c:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 80a9680:	ea87 0709 	eor.w	r7, r7, r9
 80a9684:	f85a 902c 	ldr.w	r9, [sl, ip, lsl #2]
 80a9688:	fa5f fc85 	uxtb.w	ip, r5
 80a968c:	ea87 0909 	eor.w	r9, r7, r9
 80a9690:	0e27      	lsrs	r7, r4, #24
 80a9692:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80a9696:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 80a969a:	0e2d      	lsrs	r5, r5, #24
 80a969c:	ea8c 0c07 	eor.w	ip, ip, r7
 80a96a0:	f853 7c18 	ldr.w	r7, [r3, #-24]
 80a96a4:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 80a96a8:	ea8c 0707 	eor.w	r7, ip, r7
 80a96ac:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80a96b0:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 80a96b4:	b2c9      	uxtb	r1, r1
 80a96b6:	ea87 070c 	eor.w	r7, r7, ip
 80a96ba:	f3cb 4c07 	ubfx	ip, fp, #16, #8
 80a96be:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 80a96c2:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80a96c6:	ea87 070c 	eor.w	r7, r7, ip
 80a96ca:	ea81 0c05 	eor.w	ip, r1, r5
 80a96ce:	f853 1c14 	ldr.w	r1, [r3, #-20]
 80a96d2:	f3cb 2507 	ubfx	r5, fp, #8, #8
 80a96d6:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 80a96da:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80a96de:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 80a96e2:	ea8c 0101 	eor.w	r1, ip, r1
 80a96e6:	4069      	eors	r1, r5
 80a96e8:	ea81 0c04 	eor.w	ip, r1, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80a96ec:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80a96f0:	fa5f f488 	uxtb.w	r4, r8
 80a96f4:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80a96f8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80a96fc:	b2fd      	uxtb	r5, r7
 80a96fe:	4061      	eors	r1, r4
 80a9700:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80a9704:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 80a9708:	404c      	eors	r4, r1
 80a970a:	f3c9 2107 	ubfx	r1, r9, #8, #8
 80a970e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80a9712:	404c      	eors	r4, r1
 80a9714:	f3c7 4107 	ubfx	r1, r7, #16, #8
 80a9718:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a971c:	ea84 0b01 	eor.w	fp, r4, r1
 80a9720:	fa5f f489 	uxtb.w	r4, r9
 80a9724:	ea4f 6118 	mov.w	r1, r8, lsr #24
 80a9728:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80a972c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80a9730:	4061      	eors	r1, r4
 80a9732:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 80a9736:	404c      	eors	r4, r1
 80a9738:	f3c7 2107 	ubfx	r1, r7, #8, #8
 80a973c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80a9740:	0e3f      	lsrs	r7, r7, #24
 80a9742:	404c      	eors	r4, r1
 80a9744:	f3cc 4107 	ubfx	r1, ip, #16, #8
 80a9748:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a974c:	404c      	eors	r4, r1
 80a974e:	ea4f 6119 	mov.w	r1, r9, lsr #24
 80a9752:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80a9756:	f3c9 4907 	ubfx	r9, r9, #16, #8
 80a975a:	404d      	eors	r5, r1
 80a975c:	f853 1c08 	ldr.w	r1, [r3, #-8]
 80a9760:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80a9764:	4069      	eors	r1, r5
 80a9766:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80a976a:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 80a976e:	fa5f fc8c 	uxtb.w	ip, ip
 80a9772:	4069      	eors	r1, r5
 80a9774:	f3c8 4507 	ubfx	r5, r8, #16, #8
 80a9778:	f85a 5025 	ldr.w	r5, [sl, r5, lsl #2]
 80a977c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80a9780:	404d      	eors	r5, r1
 80a9782:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 80a9786:	404f      	eors	r7, r1
 80a9788:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a978c:	4079      	eors	r1, r7
 80a978e:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a9792:	9801      	ldr	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80a9794:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a9796:	3801      	subs	r0, #1
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80a9798:	f85a 7029 	ldr.w	r7, [sl, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a979c:	9001      	str	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80a979e:	6818      	ldr	r0, [r3, #0]
 80a97a0:	4079      	eors	r1, r7
 80a97a2:	9002      	str	r0, [sp, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a97a4:	e731      	b.n	80a960a <mbedtls_internal_aes_encrypt+0x3a>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80a97a6:	0e0b      	lsrs	r3, r1, #24
 80a97a8:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 80a97ac:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80a97b0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80a9958 <mbedtls_internal_aes_encrypt+0x388>
 80a97b4:	4043      	eors	r3, r0
 80a97b6:	9802      	ldr	r0, [sp, #8]
 80a97b8:	4e68      	ldr	r6, [pc, #416]	; (80a995c <mbedtls_internal_aes_encrypt+0x38c>)
 80a97ba:	ea83 0900 	eor.w	r9, r3, r0
 80a97be:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80a97c2:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80a97c6:	b2e0      	uxtb	r0, r4
 80a97c8:	ea89 0903 	eor.w	r9, r9, r3
 80a97cc:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80a97d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80a97d4:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80a97d8:	ea89 0903 	eor.w	r9, r9, r3
 80a97dc:	ea4f 631b 	mov.w	r3, fp, lsr #24
 80a97e0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80a97e4:	fa5f fa85 	uxtb.w	sl, r5
 80a97e8:	4058      	eors	r0, r3
 80a97ea:	687b      	ldr	r3, [r7, #4]
 80a97ec:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80a97f0:	4043      	eors	r3, r0
 80a97f2:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80a97f6:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 80a97fa:	0e2d      	lsrs	r5, r5, #24
 80a97fc:	4043      	eors	r3, r0
 80a97fe:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80a9802:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80a9806:	4043      	eors	r3, r0
 80a9808:	0e20      	lsrs	r0, r4, #24
 80a980a:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80a980e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80a9812:	ea8a 0a00 	eor.w	sl, sl, r0
 80a9816:	68b8      	ldr	r0, [r7, #8]
 80a9818:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 80a981c:	ea8a 0000 	eor.w	r0, sl, r0
 80a9820:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80a9824:	b2c9      	uxtb	r1, r1
 80a9826:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 80a982a:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 80a982e:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 80a9832:	ea88 0501 	eor.w	r5, r8, r1
 80a9836:	68f9      	ldr	r1, [r7, #12]
 80a9838:	ea80 000a 	eor.w	r0, r0, sl
 80a983c:	4069      	eors	r1, r5
 80a983e:	f3cb 2507 	ubfx	r5, fp, #8, #8
 80a9842:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 80a9846:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 80a984a:	4069      	eors	r1, r5
 80a984c:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80a984e:	4c44      	ldr	r4, [pc, #272]	; (80a9960 <mbedtls_internal_aes_encrypt+0x390>)
 80a9850:	fa5f f589 	uxtb.w	r5, r9
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80a9854:	f814 e005 	ldrb.w	lr, [r4, r5]
 80a9858:	693d      	ldr	r5, [r7, #16]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80a985a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80a985e:	0e0e      	lsrs	r6, r1, #24
 80a9860:	ea8e 0505 	eor.w	r5, lr, r5
 80a9864:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80a9868:	f3c3 2607 	ubfx	r6, r3, #8, #8
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80a986c:	ea80 000a 	eor.w	r0, r0, sl

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80a9870:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 80a9874:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80a9878:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80a987c:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 80a9880:	f814 e006 	ldrb.w	lr, [r4, r6]
 80a9884:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 80a9888:	b2dd      	uxtb	r5, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80a988a:	5d66      	ldrb	r6, [r4, r5]
 80a988c:	697d      	ldr	r5, [r7, #20]
 80a988e:	4075      	eors	r5, r6
 80a9890:	ea4f 6619 	mov.w	r6, r9, lsr #24
 80a9894:	5da6      	ldrb	r6, [r4, r6]
 80a9896:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80a989a:	f3c0 2607 	ubfx	r6, r0, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80a989e:	5da6      	ldrb	r6, [r4, r6]
 80a98a0:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80a98a4:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80a98a8:	5da6      	ldrb	r6, [r4, r6]
 80a98aa:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 80a98ae:	b2c5      	uxtb	r5, r0
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80a98b0:	f814 c005 	ldrb.w	ip, [r4, r5]
 80a98b4:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80a98b6:	0e00      	lsrs	r0, r0, #24

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80a98b8:	ea8c 0505 	eor.w	r5, ip, r5
 80a98bc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80a98c0:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80a98c4:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80a98c6:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80a98ca:	f3c1 2c07 	ubfx	ip, r1, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80a98ce:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 80a98d2:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80a98d4:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80a98d8:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80a98dc:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80a98e0:	f3c9 2907 	ubfx	r9, r9, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80a98e4:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80a98e8:	f814 c001 	ldrb.w	ip, [r4, r1]
 80a98ec:	69f9      	ldr	r1, [r7, #28]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80a98ee:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80a98f2:	ea8c 0101 	eor.w	r1, ip, r1
 80a98f6:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
 80a98fa:	f814 0009 	ldrb.w	r0, [r4, r9]
 80a98fe:	5ce3      	ldrb	r3, [r4, r3]
 80a9900:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 80a9904:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 80a9908:	ea4f 211e 	mov.w	r1, lr, lsr #8
 80a990c:	7051      	strb	r1, [r2, #1]
 80a990e:	ea4f 411e 	mov.w	r1, lr, lsr #16
 80a9912:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 80a9914:	0a31      	lsrs	r1, r6, #8
 80a9916:	7151      	strb	r1, [r2, #5]
 80a9918:	0c31      	lsrs	r1, r6, #16
 80a991a:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 80a991c:	0a29      	lsrs	r1, r5, #8
 80a991e:	7251      	strb	r1, [r2, #9]
 80a9920:	0c29      	lsrs	r1, r5, #16
 80a9922:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 80a9924:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80a9926:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 80a992a:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80a992c:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 80a9930:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 80a9932:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 80a9934:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 80a9936:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 80a9938:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 80a993a:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 80a993c:	0c19      	lsrs	r1, r3, #16
 80a993e:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80a9940:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 80a9944:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 80a9946:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 80a9948:	7391      	strb	r1, [r2, #14]
 80a994a:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 80a994c:	b005      	add	sp, #20
 80a994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9952:	bf00      	nop
 80a9954:	20001a08 	.word	0x20001a08
 80a9958:	20001208 	.word	0x20001208
 80a995c:	20001608 	.word	0x20001608
 80a9960:	20001f08 	.word	0x20001f08
 80a9964:	20000e08 	.word	0x20000e08

080a9968 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80a9968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80a996c:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80a996e:	680d      	ldr	r5, [r1, #0]
 80a9970:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a9972:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80a9974:	ea85 0a04 	eor.w	sl, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80a9978:	684d      	ldr	r5, [r1, #4]
 80a997a:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a997c:	1040      	asrs	r0, r0, #1
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80a997e:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80a9982:	688d      	ldr	r5, [r1, #8]
 80a9984:	689c      	ldr	r4, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a9986:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80a9988:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80a998a:	68cd      	ldr	r5, [r1, #12]
 80a998c:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a998e:	9000      	str	r0, [sp, #0]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80a9990:	f853 0f10 	ldr.w	r0, [r3, #16]!
 80a9994:	4069      	eors	r1, r5
 80a9996:	f8df e364 	ldr.w	lr, [pc, #868]	; 80a9cfc <mbedtls_internal_aes_decrypt+0x394>
 80a999a:	4ed4      	ldr	r6, [pc, #848]	; (80a9cec <mbedtls_internal_aes_decrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80a999c:	4dd4      	ldr	r5, [pc, #848]	; (80a9cf0 <mbedtls_internal_aes_decrypt+0x388>)
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80a999e:	9001      	str	r0, [sp, #4]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a99a0:	9800      	ldr	r0, [sp, #0]
 80a99a2:	461f      	mov	r7, r3
 80a99a4:	2800      	cmp	r0, #0
 80a99a6:	f103 0320 	add.w	r3, r3, #32
 80a99aa:	f8df 8350 	ldr.w	r8, [pc, #848]	; 80a9cfc <mbedtls_internal_aes_decrypt+0x394>
 80a99ae:	fa5f f08a 	uxtb.w	r0, sl
 80a99b2:	f8df c338 	ldr.w	ip, [pc, #824]	; 80a9cec <mbedtls_internal_aes_decrypt+0x384>
 80a99b6:	ea4f 691b 	mov.w	r9, fp, lsr #24
 80a99ba:	f340 80c1 	ble.w	80a9b40 <mbedtls_internal_aes_decrypt+0x1d8>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80a99be:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 80a99c2:	f85e 8020 	ldr.w	r8, [lr, r0, lsl #2]
 80a99c6:	48cb      	ldr	r0, [pc, #812]	; (80a9cf4 <mbedtls_internal_aes_decrypt+0x38c>)
 80a99c8:	ea88 0807 	eor.w	r8, r8, r7
 80a99cc:	f853 7c20 	ldr.w	r7, [r3, #-32]
 80a99d0:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80a99d4:	ea88 0807 	eor.w	r8, r8, r7
 80a99d8:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80a99dc:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80a99e0:	ea88 0707 	eor.w	r7, r8, r7
 80a99e4:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 80a99e8:	fa5f fc8b 	uxtb.w	ip, fp
 80a99ec:	ea87 0808 	eor.w	r8, r7, r8
 80a99f0:	0e27      	lsrs	r7, r4, #24
 80a99f2:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 80a99f6:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80a99fa:	f3ca 2c07 	ubfx	ip, sl, #8, #8
 80a99fe:	ea89 0907 	eor.w	r9, r9, r7
 80a9a02:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 80a9a06:	ea89 0707 	eor.w	r7, r9, r7
 80a9a0a:	f855 902c 	ldr.w	r9, [r5, ip, lsl #2]
 80a9a0e:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 80a9a12:	ea87 0709 	eor.w	r7, r7, r9
 80a9a16:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 80a9a1a:	fa5f fc84 	uxtb.w	ip, r4
 80a9a1e:	ea87 0909 	eor.w	r9, r7, r9
 80a9a22:	0e0f      	lsrs	r7, r1, #24
 80a9a24:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80a9a28:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 80a9a2c:	b2c9      	uxtb	r1, r1
 80a9a2e:	ea8c 0c07 	eor.w	ip, ip, r7
 80a9a32:	f853 7c18 	ldr.w	r7, [r3, #-24]
 80a9a36:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80a9a3a:	ea8c 0707 	eor.w	r7, ip, r7
 80a9a3e:	f3cb 2c07 	ubfx	ip, fp, #8, #8
 80a9a42:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 80a9a46:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80a9a4a:	ea87 070c 	eor.w	r7, r7, ip
 80a9a4e:	f3ca 4c07 	ubfx	ip, sl, #16, #8
 80a9a52:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 80a9a56:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80a9a5a:	ea87 070c 	eor.w	r7, r7, ip
 80a9a5e:	f856 c02a 	ldr.w	ip, [r6, sl, lsl #2]
 80a9a62:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 80a9a66:	ea81 0c0c 	eor.w	ip, r1, ip
 80a9a6a:	f853 1c14 	ldr.w	r1, [r3, #-20]
 80a9a6e:	ea8c 0101 	eor.w	r1, ip, r1
 80a9a72:	4061      	eors	r1, r4
 80a9a74:	f3cb 4407 	ubfx	r4, fp, #16, #8
 80a9a78:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80a9a7c:	ea81 0c04 	eor.w	ip, r1, r4
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80a9a80:	fa5f f488 	uxtb.w	r4, r8
 80a9a84:	ea4f 6119 	mov.w	r1, r9, lsr #24
 80a9a88:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80a9a8c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80a9a90:	4061      	eors	r1, r4
 80a9a92:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80a9a96:	404c      	eors	r4, r1
 80a9a98:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80a9a9c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80a9aa0:	404c      	eors	r4, r1
 80a9aa2:	f3c7 4107 	ubfx	r1, r7, #16, #8
 80a9aa6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80a9aaa:	ea84 0a01 	eor.w	sl, r4, r1
 80a9aae:	fa5f f489 	uxtb.w	r4, r9
 80a9ab2:	0e39      	lsrs	r1, r7, #24
 80a9ab4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80a9ab8:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80a9abc:	404c      	eors	r4, r1
 80a9abe:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 80a9ac2:	4061      	eors	r1, r4
 80a9ac4:	f3c8 2407 	ubfx	r4, r8, #8, #8
 80a9ac8:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 80a9acc:	4061      	eors	r1, r4
 80a9ace:	f3cc 4407 	ubfx	r4, ip, #16, #8
 80a9ad2:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80a9ad6:	ea81 0b04 	eor.w	fp, r1, r4
 80a9ada:	b2fc      	uxtb	r4, r7
 80a9adc:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80a9ae0:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80a9ae4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80a9ae8:	fa5f fc8c 	uxtb.w	ip, ip
 80a9aec:	404c      	eors	r4, r1
 80a9aee:	f853 1c08 	ldr.w	r1, [r3, #-8]
 80a9af2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80a9af6:	4061      	eors	r1, r4
 80a9af8:	f3c9 2407 	ubfx	r4, r9, #8, #8
 80a9afc:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 80a9b00:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80a9b04:	4061      	eors	r1, r4
 80a9b06:	f3c8 4407 	ubfx	r4, r8, #16, #8
 80a9b0a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80a9b0e:	ea4f 6818 	mov.w	r8, r8, lsr #24
 80a9b12:	404c      	eors	r4, r1
 80a9b14:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 80a9b18:	f856 c028 	ldr.w	ip, [r6, r8, lsl #2]
 80a9b1c:	f3c9 4907 	ubfx	r9, r9, #16, #8
 80a9b20:	ea81 0c0c 	eor.w	ip, r1, ip
 80a9b24:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a9b28:	ea8c 0101 	eor.w	r1, ip, r1
 80a9b2c:	4079      	eors	r1, r7
 80a9b2e:	f850 7029 	ldr.w	r7, [r0, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a9b32:	9800      	ldr	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80a9b34:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a9b36:	3801      	subs	r0, #1
 80a9b38:	9000      	str	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80a9b3a:	6818      	ldr	r0, [r3, #0]
 80a9b3c:	9001      	str	r0, [sp, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80a9b3e:	e72f      	b.n	80a99a0 <mbedtls_internal_aes_decrypt+0x38>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80a9b40:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80a9b44:	f85c 3029 	ldr.w	r3, [ip, r9, lsl #2]
 80a9b48:	4e69      	ldr	r6, [pc, #420]	; (80a9cf0 <mbedtls_internal_aes_decrypt+0x388>)
 80a9b4a:	4043      	eors	r3, r0
 80a9b4c:	9801      	ldr	r0, [sp, #4]
 80a9b4e:	4d69      	ldr	r5, [pc, #420]	; (80a9cf4 <mbedtls_internal_aes_decrypt+0x38c>)
 80a9b50:	ea83 0900 	eor.w	r9, r3, r0
 80a9b54:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80a9b58:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80a9b5c:	fa5f f08b 	uxtb.w	r0, fp
 80a9b60:	ea89 0903 	eor.w	r9, r9, r3
 80a9b64:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80a9b68:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a9b6c:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80a9b70:	ea89 0903 	eor.w	r9, r9, r3
 80a9b74:	0e23      	lsrs	r3, r4, #24
 80a9b76:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80a9b7a:	fa5f fe84 	uxtb.w	lr, r4
 80a9b7e:	4058      	eors	r0, r3
 80a9b80:	687b      	ldr	r3, [r7, #4]
 80a9b82:	f858 e02e 	ldr.w	lr, [r8, lr, lsl #2]
 80a9b86:	4043      	eors	r3, r0
 80a9b88:	f3ca 2007 	ubfx	r0, sl, #8, #8
 80a9b8c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80a9b90:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80a9b94:	4043      	eors	r3, r0
 80a9b96:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80a9b9a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80a9b9e:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 80a9ba2:	4043      	eors	r3, r0
 80a9ba4:	0e08      	lsrs	r0, r1, #24
 80a9ba6:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80a9baa:	b2c9      	uxtb	r1, r1
 80a9bac:	ea8e 0e00 	eor.w	lr, lr, r0
 80a9bb0:	68b8      	ldr	r0, [r7, #8]
 80a9bb2:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 80a9bb6:	ea8e 0000 	eor.w	r0, lr, r0
 80a9bba:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 80a9bbe:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80a9bc2:	0e1e      	lsrs	r6, r3, #24
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80a9bc4:	ea80 000e 	eor.w	r0, r0, lr
 80a9bc8:	f3ca 4e07 	ubfx	lr, sl, #16, #8
 80a9bcc:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 80a9bd0:	ea80 000e 	eor.w	r0, r0, lr
 80a9bd4:	ea4f 6e1a 	mov.w	lr, sl, lsr #24
 80a9bd8:	f85c 102e 	ldr.w	r1, [ip, lr, lsl #2]
 80a9bdc:	ea88 0e01 	eor.w	lr, r8, r1
 80a9be0:	68f9      	ldr	r1, [r7, #12]
 80a9be2:	ea8e 0101 	eor.w	r1, lr, r1
 80a9be6:	4061      	eors	r1, r4
 80a9be8:	f3cb 4407 	ubfx	r4, fp, #16, #8
 80a9bec:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 80a9bf0:	fa5f f589 	uxtb.w	r5, r9
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80a9bf4:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 80a9bf6:	4c40      	ldr	r4, [pc, #256]	; (80a9cf8 <mbedtls_internal_aes_decrypt+0x390>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80a9bf8:	f814 e005 	ldrb.w	lr, [r4, r5]
 80a9bfc:	693d      	ldr	r5, [r7, #16]
 80a9bfe:	ea8e 0505 	eor.w	r5, lr, r5
 80a9c02:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80a9c06:	f3c1 2607 	ubfx	r6, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80a9c0a:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 80a9c0e:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80a9c12:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80a9c16:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 80a9c1a:	f814 e006 	ldrb.w	lr, [r4, r6]
 80a9c1e:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 80a9c22:	b2dd      	uxtb	r5, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80a9c24:	5d66      	ldrb	r6, [r4, r5]
 80a9c26:	697d      	ldr	r5, [r7, #20]
 80a9c28:	4075      	eors	r5, r6
 80a9c2a:	0e06      	lsrs	r6, r0, #24
 80a9c2c:	5da6      	ldrb	r6, [r4, r6]
 80a9c2e:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80a9c32:	f3c9 2607 	ubfx	r6, r9, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80a9c36:	5da6      	ldrb	r6, [r4, r6]
 80a9c38:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80a9c3c:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80a9c40:	5da6      	ldrb	r6, [r4, r6]
 80a9c42:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 80a9c46:	b2c5      	uxtb	r5, r0
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80a9c48:	f814 c005 	ldrb.w	ip, [r4, r5]
 80a9c4c:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80a9c4e:	f3c0 2007 	ubfx	r0, r0, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80a9c52:	ea8c 0505 	eor.w	r5, ip, r5
 80a9c56:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 80a9c5a:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 80a9c5e:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80a9c60:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80a9c64:	f3c3 2c07 	ubfx	ip, r3, #8, #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80a9c68:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80a9c6c:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80a9c6e:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80a9c72:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80a9c76:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80a9c7a:	ea4f 6919 	mov.w	r9, r9, lsr #24

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80a9c7e:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80a9c82:	f814 c001 	ldrb.w	ip, [r4, r1]
 80a9c86:	69f9      	ldr	r1, [r7, #28]
 80a9c88:	f814 7009 	ldrb.w	r7, [r4, r9]
 80a9c8c:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80a9c90:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80a9c94:	5ce3      	ldrb	r3, [r4, r3]
 80a9c96:	ea81 6107 	eor.w	r1, r1, r7, lsl #24
 80a9c9a:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 80a9c9e:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 80a9ca2:	ea4f 211e 	mov.w	r1, lr, lsr #8
 80a9ca6:	7051      	strb	r1, [r2, #1]
 80a9ca8:	ea4f 411e 	mov.w	r1, lr, lsr #16
 80a9cac:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 80a9cae:	0a31      	lsrs	r1, r6, #8
 80a9cb0:	7151      	strb	r1, [r2, #5]
 80a9cb2:	0c31      	lsrs	r1, r6, #16
 80a9cb4:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 80a9cb6:	0a29      	lsrs	r1, r5, #8
 80a9cb8:	7251      	strb	r1, [r2, #9]
 80a9cba:	0c29      	lsrs	r1, r5, #16
 80a9cbc:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 80a9cbe:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80a9cc0:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 80a9cc4:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80a9cc6:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 80a9cca:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 80a9ccc:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 80a9cce:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 80a9cd0:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 80a9cd2:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 80a9cd4:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 80a9cd6:	0c19      	lsrs	r1, r3, #16
 80a9cd8:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80a9cda:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 80a9cde:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 80a9ce0:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 80a9ce2:	7391      	strb	r1, [r2, #14]
 80a9ce4:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 80a9ce6:	b003      	add	sp, #12
 80a9ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9cec:	20002008 	.word	0x20002008
 80a9cf0:	20002808 	.word	0x20002808
 80a9cf4:	20002c08 	.word	0x20002c08
 80a9cf8:	20001e08 	.word	0x20001e08
 80a9cfc:	20002408 	.word	0x20002408

080a9d00 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 80a9d00:	b410      	push	{r4}
 80a9d02:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80a9d04:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 80a9d06:	461a      	mov	r2, r3
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80a9d08:	4621      	mov	r1, r4
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80a9d0a:	d102      	bne.n	80a9d12 <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 80a9d0c:	bc10      	pop	{r4}
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80a9d0e:	f7ff bc5f 	b.w	80a95d0 <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 80a9d12:	bc10      	pop	{r4}
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80a9d14:	f7ff be28 	b.w	80a9968 <mbedtls_internal_aes_decrypt>

080a9d18 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 80a9d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9d1c:	4698      	mov	r8, r3
 80a9d1e:	b085      	sub	sp, #20
    int i;
    unsigned char temp[16];

    if( length % 16 )
 80a9d20:	0713      	lsls	r3, r2, #28
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 80a9d22:	4681      	mov	r9, r0
 80a9d24:	460f      	mov	r7, r1
 80a9d26:	4616      	mov	r6, r2
 80a9d28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80a9d2a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    int i;
    unsigned char temp[16];

    if( length % 16 )
 80a9d2c:	d15a      	bne.n	80a9de4 <mbedtls_aes_crypt_cbc+0xcc>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 80a9d2e:	bba9      	cbnz	r1, 80a9d9c <mbedtls_aes_crypt_cbc+0x84>
 80a9d30:	462a      	mov	r2, r5
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 80a9d32:	f10d 0b10 	add.w	fp, sp, #16
 80a9d36:	1ab3      	subs	r3, r6, r2
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 80a9d38:	42dd      	cmn	r5, r3
 80a9d3a:	d101      	bne.n	80a9d40 <mbedtls_aes_crypt_cbc+0x28>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 80a9d3c:	2000      	movs	r0, #0
 80a9d3e:	e053      	b.n	80a9de8 <mbedtls_aes_crypt_cbc+0xd0>

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
 80a9d40:	4613      	mov	r3, r2
 80a9d42:	46ee      	mov	lr, sp
 80a9d44:	466f      	mov	r7, sp
 80a9d46:	f102 0a10 	add.w	sl, r2, #16
 80a9d4a:	46f4      	mov	ip, lr
 80a9d4c:	6818      	ldr	r0, [r3, #0]
 80a9d4e:	6859      	ldr	r1, [r3, #4]
 80a9d50:	3308      	adds	r3, #8
 80a9d52:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a9d56:	4553      	cmp	r3, sl
 80a9d58:	46e6      	mov	lr, ip
 80a9d5a:	d1f6      	bne.n	80a9d4a <mbedtls_aes_crypt_cbc+0x32>
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 80a9d5c:	4623      	mov	r3, r4
 80a9d5e:	2100      	movs	r1, #0
 80a9d60:	4648      	mov	r0, r9
 80a9d62:	f7ff ffcd 	bl	80a9d00 <mbedtls_aes_crypt_ecb>
 80a9d66:	1e63      	subs	r3, r4, #1
 80a9d68:	f108 31ff 	add.w	r1, r8, #4294967295
 80a9d6c:	f104 000f 	add.w	r0, r4, #15

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 80a9d70:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80a9d74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 80a9d78:	4283      	cmp	r3, r0
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 80a9d7a:	ea8e 0202 	eor.w	r2, lr, r2
 80a9d7e:	701a      	strb	r2, [r3, #0]
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 80a9d80:	d1f6      	bne.n	80a9d70 <mbedtls_aes_crypt_cbc+0x58>
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 80a9d82:	4642      	mov	r2, r8
 80a9d84:	463b      	mov	r3, r7
 80a9d86:	cb03      	ldmia	r3!, {r0, r1}
 80a9d88:	455b      	cmp	r3, fp
 80a9d8a:	6010      	str	r0, [r2, #0]
 80a9d8c:	6051      	str	r1, [r2, #4]
 80a9d8e:	461f      	mov	r7, r3
 80a9d90:	f102 0208 	add.w	r2, r2, #8
 80a9d94:	d1f6      	bne.n	80a9d84 <mbedtls_aes_crypt_cbc+0x6c>

            input  += 16;
 80a9d96:	4652      	mov	r2, sl
            output += 16;
 80a9d98:	3410      	adds	r4, #16
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 80a9d9a:	e7cc      	b.n	80a9d36 <mbedtls_aes_crypt_cbc+0x1e>
 80a9d9c:	1e6b      	subs	r3, r5, #1
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 80a9d9e:	2e00      	cmp	r6, #0
 80a9da0:	d0cc      	beq.n	80a9d3c <mbedtls_aes_crypt_cbc+0x24>
 80a9da2:	f108 30ff 	add.w	r0, r8, #4294967295
 80a9da6:	1e61      	subs	r1, r4, #1
 80a9da8:	f103 0510 	add.w	r5, r3, #16
        {
            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 80a9dac:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80a9db0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 80a9db4:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 80a9db6:	ea8e 0202 	eor.w	r2, lr, r2
 80a9dba:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 80a9dbe:	d1f5      	bne.n	80a9dac <mbedtls_aes_crypt_cbc+0x94>
                output[i] = (unsigned char)( input[i] ^ iv[i] );

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 80a9dc0:	4623      	mov	r3, r4
 80a9dc2:	4622      	mov	r2, r4
 80a9dc4:	4639      	mov	r1, r7
 80a9dc6:	4648      	mov	r0, r9
 80a9dc8:	f7ff ff9a 	bl	80a9d00 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 80a9dcc:	4643      	mov	r3, r8
 80a9dce:	f104 0210 	add.w	r2, r4, #16
 80a9dd2:	f854 1b04 	ldr.w	r1, [r4], #4
 80a9dd6:	4294      	cmp	r4, r2
 80a9dd8:	f843 1b04 	str.w	r1, [r3], #4
 80a9ddc:	d1f9      	bne.n	80a9dd2 <mbedtls_aes_crypt_cbc+0xba>

            input  += 16;
            output += 16;
            length -= 16;
 80a9dde:	3e10      	subs	r6, #16
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 80a9de0:	462b      	mov	r3, r5
 80a9de2:	e7dc      	b.n	80a9d9e <mbedtls_aes_crypt_cbc+0x86>
{
    int i;
    unsigned char temp[16];

    if( length % 16 )
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 80a9de4:	f06f 0021 	mvn.w	r0, #33	; 0x21
            length -= 16;
        }
    }

    return( 0 );
}
 80a9de8:	b005      	add	sp, #20
 80a9dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a9dee <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 80a9dee:	22d8      	movs	r2, #216	; 0xd8
 80a9df0:	2100      	movs	r1, #0
 80a9df2:	f003 bbb6 	b.w	80ad562 <memset>

080a9df6 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 80a9df6:	b138      	cbz	r0, 80a9e08 <mbedtls_sha512_free+0x12>
 80a9df8:	f100 02d8 	add.w	r2, r0, #216	; 0xd8

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a9dfc:	2300      	movs	r3, #0
 80a9dfe:	4290      	cmp	r0, r2
 80a9e00:	d002      	beq.n	80a9e08 <mbedtls_sha512_free+0x12>
 80a9e02:	7003      	strb	r3, [r0, #0]
 80a9e04:	3001      	adds	r0, #1
 80a9e06:	e7fa      	b.n	80a9dfe <mbedtls_sha512_free+0x8>
 80a9e08:	4770      	bx	lr

080a9e0a <mbedtls_sha512_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 80a9e0a:	b508      	push	{r3, lr}
    *dst = *src;
 80a9e0c:	22d8      	movs	r2, #216	; 0xd8
 80a9e0e:	f003 fb82 	bl	80ad516 <memcpy>
 80a9e12:	bd08      	pop	{r3, pc}
 80a9e14:	0000      	movs	r0, r0
	...

080a9e18 <mbedtls_sha512_starts_ret>:
/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 80a9e18:	2200      	movs	r2, #0
 80a9e1a:	2300      	movs	r3, #0
 80a9e1c:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 80a9e20:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 80a9e24:	bb31      	cbnz	r1, 80a9e74 <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 80a9e26:	a32a      	add	r3, pc, #168	; (adr r3, 80a9ed0 <mbedtls_sha512_starts_ret+0xb8>)
 80a9e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e2c:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 80a9e30:	a329      	add	r3, pc, #164	; (adr r3, 80a9ed8 <mbedtls_sha512_starts_ret+0xc0>)
 80a9e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e36:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 80a9e3a:	a329      	add	r3, pc, #164	; (adr r3, 80a9ee0 <mbedtls_sha512_starts_ret+0xc8>)
 80a9e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e40:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 80a9e44:	a328      	add	r3, pc, #160	; (adr r3, 80a9ee8 <mbedtls_sha512_starts_ret+0xd0>)
 80a9e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e4a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 80a9e4e:	a328      	add	r3, pc, #160	; (adr r3, 80a9ef0 <mbedtls_sha512_starts_ret+0xd8>)
 80a9e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e54:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 80a9e58:	a327      	add	r3, pc, #156	; (adr r3, 80a9ef8 <mbedtls_sha512_starts_ret+0xe0>)
 80a9e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e5e:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 80a9e62:	a327      	add	r3, pc, #156	; (adr r3, 80a9f00 <mbedtls_sha512_starts_ret+0xe8>)
 80a9e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e68:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 80a9e6c:	a326      	add	r3, pc, #152	; (adr r3, 80a9f08 <mbedtls_sha512_starts_ret+0xf0>)
 80a9e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e72:	e025      	b.n	80a9ec0 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 80a9e74:	a326      	add	r3, pc, #152	; (adr r3, 80a9f10 <mbedtls_sha512_starts_ret+0xf8>)
 80a9e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e7a:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 80a9e7e:	a326      	add	r3, pc, #152	; (adr r3, 80a9f18 <mbedtls_sha512_starts_ret+0x100>)
 80a9e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e84:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 80a9e88:	a325      	add	r3, pc, #148	; (adr r3, 80a9f20 <mbedtls_sha512_starts_ret+0x108>)
 80a9e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e8e:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 80a9e92:	a325      	add	r3, pc, #148	; (adr r3, 80a9f28 <mbedtls_sha512_starts_ret+0x110>)
 80a9e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9e98:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 80a9e9c:	a324      	add	r3, pc, #144	; (adr r3, 80a9f30 <mbedtls_sha512_starts_ret+0x118>)
 80a9e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9ea2:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 80a9ea6:	a324      	add	r3, pc, #144	; (adr r3, 80a9f38 <mbedtls_sha512_starts_ret+0x120>)
 80a9ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9eac:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 80a9eb0:	a323      	add	r3, pc, #140	; (adr r3, 80a9f40 <mbedtls_sha512_starts_ret+0x128>)
 80a9eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9eb6:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 80a9eba:	a323      	add	r3, pc, #140	; (adr r3, 80a9f48 <mbedtls_sha512_starts_ret+0x130>)
 80a9ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9ec0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 80a9ec4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 80a9ec8:	2000      	movs	r0, #0
 80a9eca:	4770      	bx	lr
 80a9ecc:	f3af 8000 	nop.w
 80a9ed0:	f3bcc908 	.word	0xf3bcc908
 80a9ed4:	6a09e667 	.word	0x6a09e667
 80a9ed8:	84caa73b 	.word	0x84caa73b
 80a9edc:	bb67ae85 	.word	0xbb67ae85
 80a9ee0:	fe94f82b 	.word	0xfe94f82b
 80a9ee4:	3c6ef372 	.word	0x3c6ef372
 80a9ee8:	5f1d36f1 	.word	0x5f1d36f1
 80a9eec:	a54ff53a 	.word	0xa54ff53a
 80a9ef0:	ade682d1 	.word	0xade682d1
 80a9ef4:	510e527f 	.word	0x510e527f
 80a9ef8:	2b3e6c1f 	.word	0x2b3e6c1f
 80a9efc:	9b05688c 	.word	0x9b05688c
 80a9f00:	fb41bd6b 	.word	0xfb41bd6b
 80a9f04:	1f83d9ab 	.word	0x1f83d9ab
 80a9f08:	137e2179 	.word	0x137e2179
 80a9f0c:	5be0cd19 	.word	0x5be0cd19
 80a9f10:	c1059ed8 	.word	0xc1059ed8
 80a9f14:	cbbb9d5d 	.word	0xcbbb9d5d
 80a9f18:	367cd507 	.word	0x367cd507
 80a9f1c:	629a292a 	.word	0x629a292a
 80a9f20:	3070dd17 	.word	0x3070dd17
 80a9f24:	9159015a 	.word	0x9159015a
 80a9f28:	f70e5939 	.word	0xf70e5939
 80a9f2c:	152fecd8 	.word	0x152fecd8
 80a9f30:	ffc00b31 	.word	0xffc00b31
 80a9f34:	67332667 	.word	0x67332667
 80a9f38:	68581511 	.word	0x68581511
 80a9f3c:	8eb44a87 	.word	0x8eb44a87
 80a9f40:	64f98fa7 	.word	0x64f98fa7
 80a9f44:	db0c2e0d 	.word	0xdb0c2e0d
 80a9f48:	befa4fa4 	.word	0xbefa4fa4
 80a9f4c:	47b5481d 	.word	0x47b5481d

080a9f50 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 80a9f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9f54:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 80a9f58:	4686      	mov	lr, r0
 80a9f5a:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 80a9f5e:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80a9f60:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
 80a9f64:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
 80a9f68:	7866      	ldrb	r6, [r4, #1]
 80a9f6a:	f04f 0a00 	mov.w	sl, #0
 80a9f6e:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 80a9f72:	0436      	lsls	r6, r6, #16
 80a9f74:	2300      	movs	r3, #0
 80a9f76:	ea43 030b 	orr.w	r3, r3, fp
 80a9f7a:	9609      	str	r6, [sp, #36]	; 0x24
 80a9f7c:	f8cd a020 	str.w	sl, [sp, #32]
 80a9f80:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 80a9f84:	431e      	orrs	r6, r3
 80a9f86:	4633      	mov	r3, r6
 80a9f88:	79e2      	ldrb	r2, [r4, #7]
 80a9f8a:	78a6      	ldrb	r6, [r4, #2]
 80a9f8c:	ea42 020a 	orr.w	r2, r2, sl
 80a9f90:	4315      	orrs	r5, r2
 80a9f92:	462a      	mov	r2, r5
 80a9f94:	0236      	lsls	r6, r6, #8
 80a9f96:	960b      	str	r6, [sp, #44]	; 0x2c
 80a9f98:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80a9f9c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80a9fa0:	431e      	orrs	r6, r3
 80a9fa2:	4633      	mov	r3, r6
 80a9fa4:	4315      	orrs	r5, r2
 80a9fa6:	78e6      	ldrb	r6, [r4, #3]
 80a9fa8:	462a      	mov	r2, r5
 80a9faa:	960d      	str	r6, [sp, #52]	; 0x34
 80a9fac:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80a9fb0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 80a9fb4:	431e      	orrs	r6, r3
 80a9fb6:	4633      	mov	r3, r6
 80a9fb8:	7926      	ldrb	r6, [r4, #4]
 80a9fba:	4315      	orrs	r5, r2
 80a9fbc:	462a      	mov	r2, r5
 80a9fbe:	0635      	lsls	r5, r6, #24
 80a9fc0:	f8cd a014 	str.w	sl, [sp, #20]
 80a9fc4:	9504      	str	r5, [sp, #16]
 80a9fc6:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 80a9fca:	431e      	orrs	r6, r3
 80a9fcc:	4633      	mov	r3, r6
 80a9fce:	7966      	ldrb	r6, [r4, #5]
 80a9fd0:	4315      	orrs	r5, r2
 80a9fd2:	462a      	mov	r2, r5
 80a9fd4:	0435      	lsls	r5, r6, #16
 80a9fd6:	f8cd a01c 	str.w	sl, [sp, #28]
 80a9fda:	9506      	str	r5, [sp, #24]
 80a9fdc:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 80a9fe0:	431e      	orrs	r6, r3
 80a9fe2:	4633      	mov	r3, r6
 80a9fe4:	79a6      	ldrb	r6, [r4, #6]
 80a9fe6:	4315      	orrs	r5, r2
 80a9fe8:	ea4f 2806 	mov.w	r8, r6, lsl #8
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 80a9fec:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80a9fee:	ea45 0208 	orr.w	r2, r5, r8
 80a9ff2:	ea43 030a 	orr.w	r3, r3, sl
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 80a9ff6:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80a9ff8:	e9ec 2302 	strd	r2, r3, [ip, #8]!
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 80a9ffc:	d1b0      	bne.n	80a9f60 <mbedtls_internal_sha512_process+0x10>
 80a9ffe:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80aa000:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 80aa002:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
 80aa004:	0cd4      	lsrs	r4, r2, #19
 80aa006:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 80aa00a:	940e      	str	r4, [sp, #56]	; 0x38
 80aa00c:	0cdc      	lsrs	r4, r3, #19
 80aa00e:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 80aa012:	940f      	str	r4, [sp, #60]	; 0x3c
 80aa014:	00dc      	lsls	r4, r3, #3
 80aa016:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
 80aa01a:	9411      	str	r4, [sp, #68]	; 0x44
 80aa01c:	00d4      	lsls	r4, r2, #3
 80aa01e:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 80aa022:	0992      	lsrs	r2, r2, #6
 80aa024:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
 80aa028:	9410      	str	r4, [sp, #64]	; 0x40
 80aa02a:	099b      	lsrs	r3, r3, #6
 80aa02c:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 80aa030:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80aa034:	9200      	str	r2, [sp, #0]
 80aa036:	4066      	eors	r6, r4
 80aa038:	9301      	str	r3, [sp, #4]
 80aa03a:	406f      	eors	r7, r5
 80aa03c:	e9dd 3400 	ldrd	r3, r4, [sp]
 80aa040:	4073      	eors	r3, r6
 80aa042:	461e      	mov	r6, r3
 80aa044:	e9d1 2300 	ldrd	r2, r3, [r1]
 80aa048:	407c      	eors	r4, r7
 80aa04a:	4627      	mov	r7, r4
 80aa04c:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
 80aa050:	f8d1 8008 	ldr.w	r8, [r1, #8]
 80aa054:	1912      	adds	r2, r2, r4
 80aa056:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80aa05a:	416b      	adcs	r3, r5
 80aa05c:	18b4      	adds	r4, r6, r2
 80aa05e:	eb47 0503 	adc.w	r5, r7, r3
 80aa062:	ea4f 0358 	mov.w	r3, r8, lsr #1
 80aa066:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
 80aa06a:	9312      	str	r3, [sp, #72]	; 0x48
 80aa06c:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80aa070:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
 80aa074:	9313      	str	r3, [sp, #76]	; 0x4c
 80aa076:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80aa07a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80aa07e:	9314      	str	r3, [sp, #80]	; 0x50
 80aa080:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80aa084:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80aa088:	9315      	str	r3, [sp, #84]	; 0x54
 80aa08a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80aa08e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80aa092:	4072      	eors	r2, r6
 80aa094:	ea4f 16d8 	mov.w	r6, r8, lsr #7
 80aa098:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
 80aa09c:	9602      	str	r6, [sp, #8]
 80aa09e:	ea4f 16dc 	mov.w	r6, ip, lsr #7
 80aa0a2:	9603      	str	r6, [sp, #12]
 80aa0a4:	407b      	eors	r3, r7
 80aa0a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80aa0aa:	4056      	eors	r6, r2
 80aa0ac:	1932      	adds	r2, r6, r4
 80aa0ae:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 80aa0b2:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 80aa0b6:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 80aa0ba:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 80aa0bc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 80aa0c0:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 80aa0c4:	d19c      	bne.n	80aa000 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 80aa0c6:	e9de 3404 	ldrd	r3, r4, [lr, #16]
 80aa0ca:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    B = ctx->state[1];
 80aa0ce:	e9de 3406 	ldrd	r3, r4, [lr, #24]
 80aa0d2:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    C = ctx->state[2];
 80aa0d6:	e9de 3408 	ldrd	r3, r4, [lr, #32]
 80aa0da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    D = ctx->state[3];
 80aa0de:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 80aa0e2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
    D = ctx->state[3];
 80aa0e6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    E = ctx->state[4];
 80aa0ea:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 80aa0ee:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    E = ctx->state[4];
 80aa0f2:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    F = ctx->state[5];
 80aa0f6:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
 80aa0fa:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    G = ctx->state[6];
 80aa0fe:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
 80aa102:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    H = ctx->state[7];
 80aa106:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
 80aa10a:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 80aa10e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80aa112:	4b0d      	ldr	r3, [pc, #52]	; (80aa148 <mbedtls_internal_sha512_process+0x1f8>)
 80aa114:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 80aa118:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80aa11c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 80aa120:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80aa124:	e9cd 0106 	strd	r0, r1, [sp, #24]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 80aa128:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80aa12c:	e9cd 0104 	strd	r0, r1, [sp, #16]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
 80aa130:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80aa134:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 80aa138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80aa13c:	e9cd 0100 	strd	r0, r1, [sp]
 80aa140:	aa80      	add	r2, sp, #512	; 0x200
 80aa142:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 80aa146:	e001      	b.n	80aa14c <mbedtls_internal_sha512_process+0x1fc>
 80aa148:	080aedf8 	.word	0x080aedf8
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 80aa14c:	9904      	ldr	r1, [sp, #16]
 80aa14e:	9805      	ldr	r0, [sp, #20]
 80aa150:	0b89      	lsrs	r1, r1, #14
 80aa152:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80aa156:	911e      	str	r1, [sp, #120]	; 0x78
 80aa158:	0b81      	lsrs	r1, r0, #14
 80aa15a:	9804      	ldr	r0, [sp, #16]
 80aa15c:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 80aa160:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80aa164:	911f      	str	r1, [sp, #124]	; 0x7c
 80aa166:	0c81      	lsrs	r1, r0, #18
 80aa168:	9805      	ldr	r0, [sp, #20]
 80aa16a:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
 80aa16e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80aa172:	9120      	str	r1, [sp, #128]	; 0x80
 80aa174:	0c81      	lsrs	r1, r0, #18
 80aa176:	9804      	ldr	r0, [sp, #16]
 80aa178:	3340      	adds	r3, #64	; 0x40
 80aa17a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80aa17e:	9121      	str	r1, [sp, #132]	; 0x84
 80aa180:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80aa184:	404f      	eors	r7, r1
 80aa186:	9905      	ldr	r1, [sp, #20]
 80aa188:	4046      	eors	r6, r0
 80aa18a:	9804      	ldr	r0, [sp, #16]
 80aa18c:	05c9      	lsls	r1, r1, #23
 80aa18e:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 80aa192:	9123      	str	r1, [sp, #140]	; 0x8c
 80aa194:	05c1      	lsls	r1, r0, #23
 80aa196:	9805      	ldr	r0, [sp, #20]
 80aa198:	3240      	adds	r2, #64	; 0x40
 80aa19a:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 80aa19e:	9122      	str	r1, [sp, #136]	; 0x88
 80aa1a0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 80aa1a4:	4070      	eors	r0, r6
 80aa1a6:	4079      	eors	r1, r7
 80aa1a8:	4606      	mov	r6, r0
 80aa1aa:	460f      	mov	r7, r1
 80aa1ac:	e952 0112 	ldrd	r0, r1, [r2, #-72]	; 0x48
 80aa1b0:	1900      	adds	r0, r0, r4
 80aa1b2:	4169      	adcs	r1, r5
 80aa1b4:	1836      	adds	r6, r6, r0
 80aa1b6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80aa1ba:	414f      	adcs	r7, r1
 80aa1bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80aa1c0:	4060      	eors	r0, r4
 80aa1c2:	4069      	eors	r1, r5
 80aa1c4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80aa1c8:	4004      	ands	r4, r0
 80aa1ca:	4620      	mov	r0, r4
 80aa1cc:	400d      	ands	r5, r1
 80aa1ce:	4629      	mov	r1, r5
 80aa1d0:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80aa1d4:	4044      	eors	r4, r0
 80aa1d6:	1936      	adds	r6, r6, r4
 80aa1d8:	ea85 0501 	eor.w	r5, r5, r1
 80aa1dc:	416f      	adcs	r7, r5
 80aa1de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80aa1e2:	1980      	adds	r0, r0, r6
 80aa1e4:	4179      	adcs	r1, r7
 80aa1e6:	4606      	mov	r6, r0
 80aa1e8:	460f      	mov	r7, r1
 80aa1ea:	eb18 0800 	adds.w	r8, r8, r0
 80aa1ee:	eb49 0901 	adc.w	r9, r9, r1
 80aa1f2:	9900      	ldr	r1, [sp, #0]
 80aa1f4:	9801      	ldr	r0, [sp, #4]
 80aa1f6:	0f09      	lsrs	r1, r1, #28
 80aa1f8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aa1fc:	9124      	str	r1, [sp, #144]	; 0x90
 80aa1fe:	0f01      	lsrs	r1, r0, #28
 80aa200:	9800      	ldr	r0, [sp, #0]
 80aa202:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aa206:	9125      	str	r1, [sp, #148]	; 0x94
 80aa208:	9901      	ldr	r1, [sp, #4]
 80aa20a:	0789      	lsls	r1, r1, #30
 80aa20c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aa210:	9127      	str	r1, [sp, #156]	; 0x9c
 80aa212:	0781      	lsls	r1, r0, #30
 80aa214:	9801      	ldr	r0, [sp, #4]
 80aa216:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aa21a:	9126      	str	r1, [sp, #152]	; 0x98
 80aa21c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80aa220:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 80aa224:	404d      	eors	r5, r1
 80aa226:	9901      	ldr	r1, [sp, #4]
 80aa228:	4044      	eors	r4, r0
 80aa22a:	9800      	ldr	r0, [sp, #0]
 80aa22c:	0649      	lsls	r1, r1, #25
 80aa22e:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aa232:	9129      	str	r1, [sp, #164]	; 0xa4
 80aa234:	0641      	lsls	r1, r0, #25
 80aa236:	9801      	ldr	r0, [sp, #4]
 80aa238:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aa23c:	9128      	str	r1, [sp, #160]	; 0xa0
 80aa23e:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 80aa242:	4060      	eors	r0, r4
 80aa244:	4069      	eors	r1, r5
 80aa246:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80aa24a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80aa24e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80aa252:	4320      	orrs	r0, r4
 80aa254:	4329      	orrs	r1, r5
 80aa256:	ea00 040a 	and.w	r4, r0, sl
 80aa25a:	ea01 050b 	and.w	r5, r1, fp
 80aa25e:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 80aa262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aa266:	e9dd 4500 	ldrd	r4, r5, [sp]
 80aa26a:	4004      	ands	r4, r0
 80aa26c:	400d      	ands	r5, r1
 80aa26e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80aa272:	4320      	orrs	r0, r4
 80aa274:	4329      	orrs	r1, r5
 80aa276:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80aa27a:	1824      	adds	r4, r4, r0
 80aa27c:	414d      	adcs	r5, r1
 80aa27e:	19a4      	adds	r4, r4, r6
 80aa280:	417d      	adcs	r5, r7
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 80aa282:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 80aa286:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 80aa28a:	e953 4510 	ldrd	r4, r5, [r3, #-64]	; 0x40
 80aa28e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80aa292:	1900      	adds	r0, r0, r4
 80aa294:	4169      	adcs	r1, r5
 80aa296:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80aa29a:	1824      	adds	r4, r4, r0
 80aa29c:	414d      	adcs	r5, r1
 80aa29e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80aa2a2:	4070      	eors	r0, r6
 80aa2a4:	ea00 0008 	and.w	r0, r0, r8
 80aa2a8:	4046      	eors	r6, r0
 80aa2aa:	19a0      	adds	r0, r4, r6
 80aa2ac:	ea4f 3498 	mov.w	r4, r8, lsr #14
 80aa2b0:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 80aa2b4:	942a      	str	r4, [sp, #168]	; 0xa8
 80aa2b6:	ea4f 3499 	mov.w	r4, r9, lsr #14
 80aa2ba:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 80aa2be:	942b      	str	r4, [sp, #172]	; 0xac
 80aa2c0:	ea4f 4498 	mov.w	r4, r8, lsr #18
 80aa2c4:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 80aa2c8:	942c      	str	r4, [sp, #176]	; 0xb0
 80aa2ca:	ea81 0107 	eor.w	r1, r1, r7
 80aa2ce:	ea4f 4499 	mov.w	r4, r9, lsr #18
 80aa2d2:	ea01 0109 	and.w	r1, r1, r9
 80aa2d6:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 80aa2da:	942d      	str	r4, [sp, #180]	; 0xb4
 80aa2dc:	ea87 0701 	eor.w	r7, r7, r1
 80aa2e0:	eb45 0107 	adc.w	r1, r5, r7
 80aa2e4:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 80aa2e8:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 80aa2ec:	4074      	eors	r4, r6
 80aa2ee:	ea4f 56c9 	mov.w	r6, r9, lsl #23
 80aa2f2:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
 80aa2f6:	962f      	str	r6, [sp, #188]	; 0xbc
 80aa2f8:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 80aa2fc:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
 80aa300:	962e      	str	r6, [sp, #184]	; 0xb8
 80aa302:	407d      	eors	r5, r7
 80aa304:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 80aa308:	4066      	eors	r6, r4
 80aa30a:	1986      	adds	r6, r0, r6
 80aa30c:	ea87 0705 	eor.w	r7, r7, r5
 80aa310:	eb41 0707 	adc.w	r7, r1, r7
 80aa314:	eb1a 0006 	adds.w	r0, sl, r6
 80aa318:	eb4b 0107 	adc.w	r1, fp, r7
 80aa31c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80aa320:	990a      	ldr	r1, [sp, #40]	; 0x28
 80aa322:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80aa324:	0f09      	lsrs	r1, r1, #28
 80aa326:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aa32a:	9130      	str	r1, [sp, #192]	; 0xc0
 80aa32c:	0f01      	lsrs	r1, r0, #28
 80aa32e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80aa330:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80aa334:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aa338:	9131      	str	r1, [sp, #196]	; 0xc4
 80aa33a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80aa33c:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
 80aa340:	0789      	lsls	r1, r1, #30
 80aa342:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aa346:	9133      	str	r1, [sp, #204]	; 0xcc
 80aa348:	0781      	lsls	r1, r0, #30
 80aa34a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80aa34c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aa350:	9132      	str	r1, [sp, #200]	; 0xc8
 80aa352:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 80aa356:	404d      	eors	r5, r1
 80aa358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80aa35a:	4044      	eors	r4, r0
 80aa35c:	980a      	ldr	r0, [sp, #40]	; 0x28
 80aa35e:	0649      	lsls	r1, r1, #25
 80aa360:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aa364:	9135      	str	r1, [sp, #212]	; 0xd4
 80aa366:	0641      	lsls	r1, r0, #25
 80aa368:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80aa36a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aa36e:	9134      	str	r1, [sp, #208]	; 0xd0
 80aa370:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 80aa374:	4060      	eors	r0, r4
 80aa376:	4604      	mov	r4, r0
 80aa378:	4069      	eors	r1, r5
 80aa37a:	460d      	mov	r5, r1
 80aa37c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80aa380:	ea40 000a 	orr.w	r0, r0, sl
 80aa384:	ea41 010b 	orr.w	r1, r1, fp
 80aa388:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80aa38c:	ea0a 0a00 	and.w	sl, sl, r0
 80aa390:	ea0b 0b01 	and.w	fp, fp, r1
 80aa394:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 80aa398:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80aa39c:	e9dd ab00 	ldrd	sl, fp, [sp]
 80aa3a0:	ea0a 0a00 	and.w	sl, sl, r0
 80aa3a4:	ea0b 0b01 	and.w	fp, fp, r1
 80aa3a8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80aa3ac:	ea40 000a 	orr.w	r0, r0, sl
 80aa3b0:	1900      	adds	r0, r0, r4
 80aa3b2:	ea41 010b 	orr.w	r1, r1, fp
 80aa3b6:	4169      	adcs	r1, r5
 80aa3b8:	eb10 0a06 	adds.w	sl, r0, r6
 80aa3bc:	eb41 0b07 	adc.w	fp, r1, r7
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 80aa3c0:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 80aa3c4:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 80aa3c8:	1900      	adds	r0, r0, r4
 80aa3ca:	4169      	adcs	r1, r5
 80aa3cc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80aa3d0:	1824      	adds	r4, r4, r0
 80aa3d2:	414d      	adcs	r5, r1
 80aa3d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80aa3d8:	ea80 0008 	eor.w	r0, r0, r8
 80aa3dc:	ea81 0109 	eor.w	r1, r1, r9
 80aa3e0:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80aa3e4:	4006      	ands	r6, r0
 80aa3e6:	4630      	mov	r0, r6
 80aa3e8:	400f      	ands	r7, r1
 80aa3ea:	4639      	mov	r1, r7
 80aa3ec:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80aa3f0:	4046      	eors	r6, r0
 80aa3f2:	19a0      	adds	r0, r4, r6
 80aa3f4:	ea87 0701 	eor.w	r7, r7, r1
 80aa3f8:	9c08      	ldr	r4, [sp, #32]
 80aa3fa:	eb45 0107 	adc.w	r1, r5, r7
 80aa3fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80aa400:	0ba4      	lsrs	r4, r4, #14
 80aa402:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aa406:	9436      	str	r4, [sp, #216]	; 0xd8
 80aa408:	0bac      	lsrs	r4, r5, #14
 80aa40a:	9d08      	ldr	r5, [sp, #32]
 80aa40c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aa410:	9437      	str	r4, [sp, #220]	; 0xdc
 80aa412:	0cac      	lsrs	r4, r5, #18
 80aa414:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80aa416:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aa41a:	9438      	str	r4, [sp, #224]	; 0xe0
 80aa41c:	0cac      	lsrs	r4, r5, #18
 80aa41e:	9d08      	ldr	r5, [sp, #32]
 80aa420:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aa424:	9439      	str	r4, [sp, #228]	; 0xe4
 80aa426:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 80aa42a:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 80aa42e:	4074      	eors	r4, r6
 80aa430:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80aa432:	407d      	eors	r5, r7
 80aa434:	9f08      	ldr	r7, [sp, #32]
 80aa436:	05f6      	lsls	r6, r6, #23
 80aa438:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aa43c:	963b      	str	r6, [sp, #236]	; 0xec
 80aa43e:	05fe      	lsls	r6, r7, #23
 80aa440:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80aa442:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aa446:	963a      	str	r6, [sp, #232]	; 0xe8
 80aa448:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 80aa44c:	4066      	eors	r6, r4
 80aa44e:	1986      	adds	r6, r0, r6
 80aa450:	ea87 0705 	eor.w	r7, r7, r5
 80aa454:	eb41 0707 	adc.w	r7, r1, r7
 80aa458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aa45c:	1980      	adds	r0, r0, r6
 80aa45e:	4179      	adcs	r1, r7
 80aa460:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80aa464:	ea4f 711a 	mov.w	r1, sl, lsr #28
 80aa468:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 80aa46c:	913c      	str	r1, [sp, #240]	; 0xf0
 80aa46e:	ea4f 711b 	mov.w	r1, fp, lsr #28
 80aa472:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 80aa476:	913d      	str	r1, [sp, #244]	; 0xf4
 80aa478:	ea4f 718b 	mov.w	r1, fp, lsl #30
 80aa47c:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 80aa480:	913f      	str	r1, [sp, #252]	; 0xfc
 80aa482:	ea4f 718a 	mov.w	r1, sl, lsl #30
 80aa486:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 80aa48a:	913e      	str	r1, [sp, #248]	; 0xf8
 80aa48c:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 80aa490:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
 80aa494:	404d      	eors	r5, r1
 80aa496:	ea4f 614b 	mov.w	r1, fp, lsl #25
 80aa49a:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 80aa49e:	9141      	str	r1, [sp, #260]	; 0x104
 80aa4a0:	ea4f 614a 	mov.w	r1, sl, lsl #25
 80aa4a4:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 80aa4a8:	4044      	eors	r4, r0
 80aa4aa:	9140      	str	r1, [sp, #256]	; 0x100
 80aa4ac:	a940      	add	r1, sp, #256	; 0x100
 80aa4ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aa4b2:	4060      	eors	r0, r4
 80aa4b4:	4069      	eors	r1, r5
 80aa4b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80aa4ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80aa4be:	e9dd 4500 	ldrd	r4, r5, [sp]
 80aa4c2:	ea40 000a 	orr.w	r0, r0, sl
 80aa4c6:	ea41 010b 	orr.w	r1, r1, fp
 80aa4ca:	4004      	ands	r4, r0
 80aa4cc:	4620      	mov	r0, r4
 80aa4ce:	400d      	ands	r5, r1
 80aa4d0:	4629      	mov	r1, r5
 80aa4d2:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80aa4d6:	ea04 040a 	and.w	r4, r4, sl
 80aa4da:	ea05 050b 	and.w	r5, r5, fp
 80aa4de:	4304      	orrs	r4, r0
 80aa4e0:	4620      	mov	r0, r4
 80aa4e2:	430d      	orrs	r5, r1
 80aa4e4:	4629      	mov	r1, r5
 80aa4e6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80aa4ea:	1824      	adds	r4, r4, r0
 80aa4ec:	414d      	adcs	r5, r1
 80aa4ee:	19a4      	adds	r4, r4, r6
 80aa4f0:	417d      	adcs	r5, r7
 80aa4f2:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 80aa4f6:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
 80aa4fa:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 80aa4fe:	1900      	adds	r0, r0, r4
 80aa500:	4169      	adcs	r1, r5
 80aa502:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80aa506:	1824      	adds	r4, r4, r0
 80aa508:	414d      	adcs	r5, r1
 80aa50a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80aa50e:	ea80 0008 	eor.w	r0, r0, r8
 80aa512:	ea81 0109 	eor.w	r1, r1, r9
 80aa516:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80aa51a:	4006      	ands	r6, r0
 80aa51c:	ea86 0608 	eor.w	r6, r6, r8
 80aa520:	400f      	ands	r7, r1
 80aa522:	19a0      	adds	r0, r4, r6
 80aa524:	ea87 0709 	eor.w	r7, r7, r9
 80aa528:	9c06      	ldr	r4, [sp, #24]
 80aa52a:	eb45 0107 	adc.w	r1, r5, r7
 80aa52e:	9d07      	ldr	r5, [sp, #28]
 80aa530:	0ba4      	lsrs	r4, r4, #14
 80aa532:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aa536:	9442      	str	r4, [sp, #264]	; 0x108
 80aa538:	0bac      	lsrs	r4, r5, #14
 80aa53a:	9d06      	ldr	r5, [sp, #24]
 80aa53c:	ae44      	add	r6, sp, #272	; 0x110
 80aa53e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aa542:	9443      	str	r4, [sp, #268]	; 0x10c
 80aa544:	0cac      	lsrs	r4, r5, #18
 80aa546:	9d07      	ldr	r5, [sp, #28]
 80aa548:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aa54c:	9444      	str	r4, [sp, #272]	; 0x110
 80aa54e:	0cac      	lsrs	r4, r5, #18
 80aa550:	9d06      	ldr	r5, [sp, #24]
 80aa552:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aa556:	9445      	str	r4, [sp, #276]	; 0x114
 80aa558:	ac42      	add	r4, sp, #264	; 0x108
 80aa55a:	cec0      	ldmia	r6, {r6, r7}
 80aa55c:	cc30      	ldmia	r4, {r4, r5}
 80aa55e:	4074      	eors	r4, r6
 80aa560:	9e07      	ldr	r6, [sp, #28]
 80aa562:	407d      	eors	r5, r7
 80aa564:	9f06      	ldr	r7, [sp, #24]
 80aa566:	05f6      	lsls	r6, r6, #23
 80aa568:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aa56c:	9647      	str	r6, [sp, #284]	; 0x11c
 80aa56e:	05fe      	lsls	r6, r7, #23
 80aa570:	9f07      	ldr	r7, [sp, #28]
 80aa572:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aa576:	9646      	str	r6, [sp, #280]	; 0x118
 80aa578:	ae46      	add	r6, sp, #280	; 0x118
 80aa57a:	cec0      	ldmia	r6, {r6, r7}
 80aa57c:	4066      	eors	r6, r4
 80aa57e:	1986      	adds	r6, r0, r6
 80aa580:	ea87 0705 	eor.w	r7, r7, r5
 80aa584:	eb41 0707 	adc.w	r7, r1, r7
 80aa588:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 80aa58c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80aa590:	e9dd 6700 	ldrd	r6, r7, [sp]
 80aa594:	1836      	adds	r6, r6, r0
 80aa596:	414f      	adcs	r7, r1
 80aa598:	9902      	ldr	r1, [sp, #8]
 80aa59a:	9803      	ldr	r0, [sp, #12]
 80aa59c:	0f09      	lsrs	r1, r1, #28
 80aa59e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aa5a2:	9148      	str	r1, [sp, #288]	; 0x120
 80aa5a4:	0f01      	lsrs	r1, r0, #28
 80aa5a6:	9802      	ldr	r0, [sp, #8]
 80aa5a8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80aa5ac:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aa5b0:	9149      	str	r1, [sp, #292]	; 0x124
 80aa5b2:	9903      	ldr	r1, [sp, #12]
 80aa5b4:	0789      	lsls	r1, r1, #30
 80aa5b6:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aa5ba:	914b      	str	r1, [sp, #300]	; 0x12c
 80aa5bc:	0781      	lsls	r1, r0, #30
 80aa5be:	9803      	ldr	r0, [sp, #12]
 80aa5c0:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80aa5c4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aa5c8:	914a      	str	r1, [sp, #296]	; 0x128
 80aa5ca:	a948      	add	r1, sp, #288	; 0x120
 80aa5cc:	e9d1 4500 	ldrd	r4, r5, [r1]
 80aa5d0:	a94a      	add	r1, sp, #296	; 0x128
 80aa5d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aa5d6:	404d      	eors	r5, r1
 80aa5d8:	9903      	ldr	r1, [sp, #12]
 80aa5da:	4044      	eors	r4, r0
 80aa5dc:	9802      	ldr	r0, [sp, #8]
 80aa5de:	0649      	lsls	r1, r1, #25
 80aa5e0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aa5e4:	914d      	str	r1, [sp, #308]	; 0x134
 80aa5e6:	0641      	lsls	r1, r0, #25
 80aa5e8:	9803      	ldr	r0, [sp, #12]
 80aa5ea:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aa5ee:	914c      	str	r1, [sp, #304]	; 0x130
 80aa5f0:	a94c      	add	r1, sp, #304	; 0x130
 80aa5f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aa5f6:	4060      	eors	r0, r4
 80aa5f8:	4069      	eors	r1, r5
 80aa5fa:	4604      	mov	r4, r0
 80aa5fc:	460d      	mov	r5, r1
 80aa5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aa602:	ea40 000a 	orr.w	r0, r0, sl
 80aa606:	ea41 010b 	orr.w	r1, r1, fp
 80aa60a:	4006      	ands	r6, r0
 80aa60c:	4630      	mov	r0, r6
 80aa60e:	400f      	ands	r7, r1
 80aa610:	4639      	mov	r1, r7
 80aa612:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80aa616:	ea06 060a 	and.w	r6, r6, sl
 80aa61a:	ea07 070b 	and.w	r7, r7, fp
 80aa61e:	4306      	orrs	r6, r0
 80aa620:	1930      	adds	r0, r6, r4
 80aa622:	ea47 0701 	orr.w	r7, r7, r1
 80aa626:	eb47 0105 	adc.w	r1, r7, r5
 80aa62a:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 80aa62e:	1824      	adds	r4, r4, r0
 80aa630:	414d      	adcs	r5, r1
 80aa632:	e9cd 4500 	strd	r4, r5, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 80aa636:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 80aa63a:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
 80aa63e:	1900      	adds	r0, r0, r4
 80aa640:	4169      	adcs	r1, r5
 80aa642:	eb10 0008 	adds.w	r0, r0, r8
 80aa646:	eb41 0109 	adc.w	r1, r1, r9
 80aa64a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80aa64e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80aa652:	ea88 0804 	eor.w	r8, r8, r4
 80aa656:	ea89 0905 	eor.w	r9, r9, r5
 80aa65a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80aa65e:	ea04 0408 	and.w	r4, r4, r8
 80aa662:	46a0      	mov	r8, r4
 80aa664:	ea05 0509 	and.w	r5, r5, r9
 80aa668:	46a9      	mov	r9, r5
 80aa66a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80aa66e:	ea84 0408 	eor.w	r4, r4, r8
 80aa672:	eb10 0804 	adds.w	r8, r0, r4
 80aa676:	ea85 0509 	eor.w	r5, r5, r9
 80aa67a:	eb41 0905 	adc.w	r9, r1, r5
 80aa67e:	9904      	ldr	r1, [sp, #16]
 80aa680:	9805      	ldr	r0, [sp, #20]
 80aa682:	0b89      	lsrs	r1, r1, #14
 80aa684:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80aa688:	914e      	str	r1, [sp, #312]	; 0x138
 80aa68a:	0b81      	lsrs	r1, r0, #14
 80aa68c:	9804      	ldr	r0, [sp, #16]
 80aa68e:	ac50      	add	r4, sp, #320	; 0x140
 80aa690:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80aa694:	914f      	str	r1, [sp, #316]	; 0x13c
 80aa696:	0c81      	lsrs	r1, r0, #18
 80aa698:	9805      	ldr	r0, [sp, #20]
 80aa69a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80aa69e:	9150      	str	r1, [sp, #320]	; 0x140
 80aa6a0:	0c81      	lsrs	r1, r0, #18
 80aa6a2:	9804      	ldr	r0, [sp, #16]
 80aa6a4:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80aa6a8:	9151      	str	r1, [sp, #324]	; 0x144
 80aa6aa:	a94e      	add	r1, sp, #312	; 0x138
 80aa6ac:	cc30      	ldmia	r4, {r4, r5}
 80aa6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aa6b2:	4060      	eors	r0, r4
 80aa6b4:	9c05      	ldr	r4, [sp, #20]
 80aa6b6:	4069      	eors	r1, r5
 80aa6b8:	9d04      	ldr	r5, [sp, #16]
 80aa6ba:	05e4      	lsls	r4, r4, #23
 80aa6bc:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 80aa6c0:	9453      	str	r4, [sp, #332]	; 0x14c
 80aa6c2:	05ec      	lsls	r4, r5, #23
 80aa6c4:	9d05      	ldr	r5, [sp, #20]
 80aa6c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80aa6ca:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 80aa6ce:	9452      	str	r4, [sp, #328]	; 0x148
 80aa6d0:	ac52      	add	r4, sp, #328	; 0x148
 80aa6d2:	cc30      	ldmia	r4, {r4, r5}
 80aa6d4:	4044      	eors	r4, r0
 80aa6d6:	eb18 0804 	adds.w	r8, r8, r4
 80aa6da:	ea85 0501 	eor.w	r5, r5, r1
 80aa6de:	eb49 0905 	adc.w	r9, r9, r5
 80aa6e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80aa6e6:	eb10 0008 	adds.w	r0, r0, r8
 80aa6ea:	eb41 0109 	adc.w	r1, r1, r9
 80aa6ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80aa6f2:	9900      	ldr	r1, [sp, #0]
 80aa6f4:	9801      	ldr	r0, [sp, #4]
 80aa6f6:	0f09      	lsrs	r1, r1, #28
 80aa6f8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aa6fc:	9154      	str	r1, [sp, #336]	; 0x150
 80aa6fe:	0f01      	lsrs	r1, r0, #28
 80aa700:	9800      	ldr	r0, [sp, #0]
 80aa702:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aa706:	9155      	str	r1, [sp, #340]	; 0x154
 80aa708:	9901      	ldr	r1, [sp, #4]
 80aa70a:	0789      	lsls	r1, r1, #30
 80aa70c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aa710:	9157      	str	r1, [sp, #348]	; 0x15c
 80aa712:	0781      	lsls	r1, r0, #30
 80aa714:	9801      	ldr	r0, [sp, #4]
 80aa716:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aa71a:	9156      	str	r1, [sp, #344]	; 0x158
 80aa71c:	a954      	add	r1, sp, #336	; 0x150
 80aa71e:	e9d1 4500 	ldrd	r4, r5, [r1]
 80aa722:	a956      	add	r1, sp, #344	; 0x158
 80aa724:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aa728:	404d      	eors	r5, r1
 80aa72a:	9901      	ldr	r1, [sp, #4]
 80aa72c:	4044      	eors	r4, r0
 80aa72e:	9800      	ldr	r0, [sp, #0]
 80aa730:	0649      	lsls	r1, r1, #25
 80aa732:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aa736:	9159      	str	r1, [sp, #356]	; 0x164
 80aa738:	0641      	lsls	r1, r0, #25
 80aa73a:	9801      	ldr	r0, [sp, #4]
 80aa73c:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aa740:	9158      	str	r1, [sp, #352]	; 0x160
 80aa742:	a958      	add	r1, sp, #352	; 0x160
 80aa744:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aa748:	4060      	eors	r0, r4
 80aa74a:	4604      	mov	r4, r0
 80aa74c:	4069      	eors	r1, r5
 80aa74e:	460d      	mov	r5, r1
 80aa750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aa754:	4330      	orrs	r0, r6
 80aa756:	4339      	orrs	r1, r7
 80aa758:	ea00 060a 	and.w	r6, r0, sl
 80aa75c:	ea01 070b 	and.w	r7, r1, fp
 80aa760:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 80aa764:	e9dd 0100 	ldrd	r0, r1, [sp]
 80aa768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80aa76c:	4006      	ands	r6, r0
 80aa76e:	400f      	ands	r7, r1
 80aa770:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80aa774:	4330      	orrs	r0, r6
 80aa776:	1900      	adds	r0, r0, r4
 80aa778:	ea41 0107 	orr.w	r1, r1, r7
 80aa77c:	4169      	adcs	r1, r5
 80aa77e:	eb18 0800 	adds.w	r8, r8, r0
 80aa782:	eb49 0901 	adc.w	r9, r9, r1
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 80aa786:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 80aa78a:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 80aa78e:	1900      	adds	r0, r0, r4
 80aa790:	4169      	adcs	r1, r5
 80aa792:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80aa796:	1824      	adds	r4, r4, r0
 80aa798:	414d      	adcs	r5, r1
 80aa79a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80aa79e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80aa7a2:	4046      	eors	r6, r0
 80aa7a4:	4630      	mov	r0, r6
 80aa7a6:	404f      	eors	r7, r1
 80aa7a8:	4639      	mov	r1, r7
 80aa7aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80aa7ae:	4006      	ands	r6, r0
 80aa7b0:	4630      	mov	r0, r6
 80aa7b2:	400f      	ands	r7, r1
 80aa7b4:	4639      	mov	r1, r7
 80aa7b6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80aa7ba:	4046      	eors	r6, r0
 80aa7bc:	1930      	adds	r0, r6, r4
 80aa7be:	ea87 0701 	eor.w	r7, r7, r1
 80aa7c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80aa7c4:	eb47 0105 	adc.w	r1, r7, r5
 80aa7c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80aa7ca:	0ba4      	lsrs	r4, r4, #14
 80aa7cc:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aa7d0:	945a      	str	r4, [sp, #360]	; 0x168
 80aa7d2:	0bac      	lsrs	r4, r5, #14
 80aa7d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80aa7d6:	ae5c      	add	r6, sp, #368	; 0x170
 80aa7d8:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aa7dc:	945b      	str	r4, [sp, #364]	; 0x16c
 80aa7de:	0cac      	lsrs	r4, r5, #18
 80aa7e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80aa7e2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aa7e6:	945c      	str	r4, [sp, #368]	; 0x170
 80aa7e8:	0cac      	lsrs	r4, r5, #18
 80aa7ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80aa7ec:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aa7f0:	945d      	str	r4, [sp, #372]	; 0x174
 80aa7f2:	ac5a      	add	r4, sp, #360	; 0x168
 80aa7f4:	cec0      	ldmia	r6, {r6, r7}
 80aa7f6:	cc30      	ldmia	r4, {r4, r5}
 80aa7f8:	4074      	eors	r4, r6
 80aa7fa:	4626      	mov	r6, r4
 80aa7fc:	407d      	eors	r5, r7
 80aa7fe:	462f      	mov	r7, r5
 80aa800:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80aa802:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80aa804:	05e4      	lsls	r4, r4, #23
 80aa806:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 80aa80a:	945f      	str	r4, [sp, #380]	; 0x17c
 80aa80c:	05ec      	lsls	r4, r5, #23
 80aa80e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80aa810:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 80aa814:	945e      	str	r4, [sp, #376]	; 0x178
 80aa816:	ac5e      	add	r4, sp, #376	; 0x178
 80aa818:	cc30      	ldmia	r4, {r4, r5}
 80aa81a:	4074      	eors	r4, r6
 80aa81c:	1906      	adds	r6, r0, r4
 80aa81e:	ea85 0507 	eor.w	r5, r5, r7
 80aa822:	eb41 0705 	adc.w	r7, r1, r5
 80aa826:	eb16 000a 	adds.w	r0, r6, sl
 80aa82a:	eb47 010b 	adc.w	r1, r7, fp
 80aa82e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80aa832:	ea4f 7118 	mov.w	r1, r8, lsr #28
 80aa836:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
 80aa83a:	9160      	str	r1, [sp, #384]	; 0x180
 80aa83c:	ea4f 7119 	mov.w	r1, r9, lsr #28
 80aa840:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 80aa844:	9161      	str	r1, [sp, #388]	; 0x184
 80aa846:	ea4f 7189 	mov.w	r1, r9, lsl #30
 80aa84a:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 80aa84e:	9163      	str	r1, [sp, #396]	; 0x18c
 80aa850:	ea4f 7188 	mov.w	r1, r8, lsl #30
 80aa854:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 80aa858:	9162      	str	r1, [sp, #392]	; 0x188
 80aa85a:	a960      	add	r1, sp, #384	; 0x180
 80aa85c:	e9d1 4500 	ldrd	r4, r5, [r1]
 80aa860:	a962      	add	r1, sp, #392	; 0x188
 80aa862:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aa866:	404d      	eors	r5, r1
 80aa868:	ea4f 6149 	mov.w	r1, r9, lsl #25
 80aa86c:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
 80aa870:	9165      	str	r1, [sp, #404]	; 0x194
 80aa872:	ea4f 6148 	mov.w	r1, r8, lsl #25
 80aa876:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
 80aa87a:	4044      	eors	r4, r0
 80aa87c:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 80aa880:	9164      	str	r1, [sp, #400]	; 0x190
 80aa882:	a964      	add	r1, sp, #400	; 0x190
 80aa884:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aa888:	4060      	eors	r0, r4
 80aa88a:	4604      	mov	r4, r0
 80aa88c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80aa890:	e9dd ab00 	ldrd	sl, fp, [sp]
 80aa894:	4069      	eors	r1, r5
 80aa896:	460d      	mov	r5, r1
 80aa898:	e9dd 0100 	ldrd	r0, r1, [sp]
 80aa89c:	ea40 0008 	orr.w	r0, r0, r8
 80aa8a0:	ea41 0109 	orr.w	r1, r1, r9
 80aa8a4:	4006      	ands	r6, r0
 80aa8a6:	ea0a 0a08 	and.w	sl, sl, r8
 80aa8aa:	ea46 000a 	orr.w	r0, r6, sl
 80aa8ae:	400f      	ands	r7, r1
 80aa8b0:	ea0b 0b09 	and.w	fp, fp, r9
 80aa8b4:	1900      	adds	r0, r0, r4
 80aa8b6:	ea47 010b 	orr.w	r1, r7, fp
 80aa8ba:	4169      	adcs	r1, r5
 80aa8bc:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
 80aa8c0:	eb1a 0a00 	adds.w	sl, sl, r0
 80aa8c4:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 80aa8c8:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 80aa8cc:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 80aa8d0:	1900      	adds	r0, r0, r4
 80aa8d2:	4169      	adcs	r1, r5
 80aa8d4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80aa8d8:	1824      	adds	r4, r4, r0
 80aa8da:	414d      	adcs	r5, r1
 80aa8dc:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80aa8e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80aa8e4:	4046      	eors	r6, r0
 80aa8e6:	4630      	mov	r0, r6
 80aa8e8:	404f      	eors	r7, r1
 80aa8ea:	4639      	mov	r1, r7
 80aa8ec:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80aa8f0:	4006      	ands	r6, r0
 80aa8f2:	4630      	mov	r0, r6
 80aa8f4:	400f      	ands	r7, r1
 80aa8f6:	4639      	mov	r1, r7
 80aa8f8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80aa8fc:	4046      	eors	r6, r0
 80aa8fe:	1930      	adds	r0, r6, r4
 80aa900:	ea87 0701 	eor.w	r7, r7, r1
 80aa904:	9c08      	ldr	r4, [sp, #32]
 80aa906:	eb47 0105 	adc.w	r1, r7, r5
 80aa90a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80aa90c:	0ba4      	lsrs	r4, r4, #14
 80aa90e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aa912:	9466      	str	r4, [sp, #408]	; 0x198
 80aa914:	0bac      	lsrs	r4, r5, #14
 80aa916:	9d08      	ldr	r5, [sp, #32]
 80aa918:	ae68      	add	r6, sp, #416	; 0x1a0
 80aa91a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aa91e:	9467      	str	r4, [sp, #412]	; 0x19c
 80aa920:	0cac      	lsrs	r4, r5, #18
 80aa922:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80aa924:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aa928:	9468      	str	r4, [sp, #416]	; 0x1a0
 80aa92a:	0cac      	lsrs	r4, r5, #18
 80aa92c:	9d08      	ldr	r5, [sp, #32]
 80aa92e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aa932:	9469      	str	r4, [sp, #420]	; 0x1a4
 80aa934:	ac66      	add	r4, sp, #408	; 0x198
 80aa936:	cec0      	ldmia	r6, {r6, r7}
 80aa938:	cc30      	ldmia	r4, {r4, r5}
 80aa93a:	4074      	eors	r4, r6
 80aa93c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80aa93e:	407d      	eors	r5, r7
 80aa940:	9f08      	ldr	r7, [sp, #32]
 80aa942:	05f6      	lsls	r6, r6, #23
 80aa944:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aa948:	966b      	str	r6, [sp, #428]	; 0x1ac
 80aa94a:	05fe      	lsls	r6, r7, #23
 80aa94c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80aa94e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aa952:	966a      	str	r6, [sp, #424]	; 0x1a8
 80aa954:	ae6a      	add	r6, sp, #424	; 0x1a8
 80aa956:	cec0      	ldmia	r6, {r6, r7}
 80aa958:	4066      	eors	r6, r4
 80aa95a:	1986      	adds	r6, r0, r6
 80aa95c:	ea87 0705 	eor.w	r7, r7, r5
 80aa960:	eb41 0707 	adc.w	r7, r1, r7
 80aa964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aa968:	1980      	adds	r0, r0, r6
 80aa96a:	4179      	adcs	r1, r7
 80aa96c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80aa970:	ea4f 711a 	mov.w	r1, sl, lsr #28
 80aa974:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 80aa978:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 80aa97c:	916c      	str	r1, [sp, #432]	; 0x1b0
 80aa97e:	ea4f 711b 	mov.w	r1, fp, lsr #28
 80aa982:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 80aa986:	916d      	str	r1, [sp, #436]	; 0x1b4
 80aa988:	ea4f 718b 	mov.w	r1, fp, lsl #30
 80aa98c:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 80aa990:	916f      	str	r1, [sp, #444]	; 0x1bc
 80aa992:	ea4f 718a 	mov.w	r1, sl, lsl #30
 80aa996:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 80aa99a:	916e      	str	r1, [sp, #440]	; 0x1b8
 80aa99c:	a96c      	add	r1, sp, #432	; 0x1b0
 80aa99e:	e9d1 4500 	ldrd	r4, r5, [r1]
 80aa9a2:	a96e      	add	r1, sp, #440	; 0x1b8
 80aa9a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aa9a8:	404d      	eors	r5, r1
 80aa9aa:	ea4f 614b 	mov.w	r1, fp, lsl #25
 80aa9ae:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 80aa9b2:	9171      	str	r1, [sp, #452]	; 0x1c4
 80aa9b4:	ea4f 614a 	mov.w	r1, sl, lsl #25
 80aa9b8:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 80aa9bc:	4044      	eors	r4, r0
 80aa9be:	9170      	str	r1, [sp, #448]	; 0x1c0
 80aa9c0:	a970      	add	r1, sp, #448	; 0x1c0
 80aa9c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aa9c6:	4060      	eors	r0, r4
 80aa9c8:	4604      	mov	r4, r0
 80aa9ca:	e9dd 6700 	ldrd	r6, r7, [sp]
 80aa9ce:	4069      	eors	r1, r5
 80aa9d0:	ea48 000a 	orr.w	r0, r8, sl
 80aa9d4:	460d      	mov	r5, r1
 80aa9d6:	4006      	ands	r6, r0
 80aa9d8:	ea49 010b 	orr.w	r1, r9, fp
 80aa9dc:	4630      	mov	r0, r6
 80aa9de:	400f      	ands	r7, r1
 80aa9e0:	4639      	mov	r1, r7
 80aa9e2:	ea08 060a 	and.w	r6, r8, sl
 80aa9e6:	4306      	orrs	r6, r0
 80aa9e8:	ea09 070b 	and.w	r7, r9, fp
 80aa9ec:	1930      	adds	r0, r6, r4
 80aa9ee:	ea47 0701 	orr.w	r7, r7, r1
 80aa9f2:	eb47 0105 	adc.w	r1, r7, r5
 80aa9f6:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 80aa9fa:	1824      	adds	r4, r4, r0
 80aa9fc:	414d      	adcs	r5, r1
 80aa9fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 80aaa02:	e952 0104 	ldrd	r0, r1, [r2, #-16]
 80aaa06:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 80aaa0a:	1900      	adds	r0, r0, r4
 80aaa0c:	4169      	adcs	r1, r5
 80aaa0e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80aaa12:	1824      	adds	r4, r4, r0
 80aaa14:	414d      	adcs	r5, r1
 80aaa16:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80aaa1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80aaa1e:	4070      	eors	r0, r6
 80aaa20:	4079      	eors	r1, r7
 80aaa22:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80aaa26:	4006      	ands	r6, r0
 80aaa28:	4630      	mov	r0, r6
 80aaa2a:	400f      	ands	r7, r1
 80aaa2c:	4639      	mov	r1, r7
 80aaa2e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80aaa32:	4046      	eors	r6, r0
 80aaa34:	19a0      	adds	r0, r4, r6
 80aaa36:	ea87 0701 	eor.w	r7, r7, r1
 80aaa3a:	9c06      	ldr	r4, [sp, #24]
 80aaa3c:	eb45 0107 	adc.w	r1, r5, r7
 80aaa40:	9d07      	ldr	r5, [sp, #28]
 80aaa42:	0ba4      	lsrs	r4, r4, #14
 80aaa44:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aaa48:	9472      	str	r4, [sp, #456]	; 0x1c8
 80aaa4a:	0bac      	lsrs	r4, r5, #14
 80aaa4c:	9d06      	ldr	r5, [sp, #24]
 80aaa4e:	ae74      	add	r6, sp, #464	; 0x1d0
 80aaa50:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aaa54:	9473      	str	r4, [sp, #460]	; 0x1cc
 80aaa56:	0cac      	lsrs	r4, r5, #18
 80aaa58:	9d07      	ldr	r5, [sp, #28]
 80aaa5a:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aaa5e:	9474      	str	r4, [sp, #464]	; 0x1d0
 80aaa60:	0cac      	lsrs	r4, r5, #18
 80aaa62:	9d06      	ldr	r5, [sp, #24]
 80aaa64:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aaa68:	9475      	str	r4, [sp, #468]	; 0x1d4
 80aaa6a:	ac72      	add	r4, sp, #456	; 0x1c8
 80aaa6c:	cec0      	ldmia	r6, {r6, r7}
 80aaa6e:	cc30      	ldmia	r4, {r4, r5}
 80aaa70:	4074      	eors	r4, r6
 80aaa72:	9e07      	ldr	r6, [sp, #28]
 80aaa74:	407d      	eors	r5, r7
 80aaa76:	9f06      	ldr	r7, [sp, #24]
 80aaa78:	05f6      	lsls	r6, r6, #23
 80aaa7a:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aaa7e:	9677      	str	r6, [sp, #476]	; 0x1dc
 80aaa80:	05fe      	lsls	r6, r7, #23
 80aaa82:	9f07      	ldr	r7, [sp, #28]
 80aaa84:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aaa88:	9676      	str	r6, [sp, #472]	; 0x1d8
 80aaa8a:	ae76      	add	r6, sp, #472	; 0x1d8
 80aaa8c:	cec0      	ldmia	r6, {r6, r7}
 80aaa8e:	4066      	eors	r6, r4
 80aaa90:	1986      	adds	r6, r0, r6
 80aaa92:	ea87 0705 	eor.w	r7, r7, r5
 80aaa96:	eb41 0707 	adc.w	r7, r1, r7
 80aaa9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 80aaa9e:	1980      	adds	r0, r0, r6
 80aaaa0:	4179      	adcs	r1, r7
 80aaaa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80aaaa6:	9902      	ldr	r1, [sp, #8]
 80aaaa8:	9803      	ldr	r0, [sp, #12]
 80aaaaa:	0f09      	lsrs	r1, r1, #28
 80aaaac:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aaab0:	9178      	str	r1, [sp, #480]	; 0x1e0
 80aaab2:	0f01      	lsrs	r1, r0, #28
 80aaab4:	9802      	ldr	r0, [sp, #8]
 80aaab6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aaaba:	9179      	str	r1, [sp, #484]	; 0x1e4
 80aaabc:	9903      	ldr	r1, [sp, #12]
 80aaabe:	0789      	lsls	r1, r1, #30
 80aaac0:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aaac4:	917b      	str	r1, [sp, #492]	; 0x1ec
 80aaac6:	0781      	lsls	r1, r0, #30
 80aaac8:	9803      	ldr	r0, [sp, #12]
 80aaaca:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aaace:	917a      	str	r1, [sp, #488]	; 0x1e8
 80aaad0:	a978      	add	r1, sp, #480	; 0x1e0
 80aaad2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80aaad6:	a97a      	add	r1, sp, #488	; 0x1e8
 80aaad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aaadc:	404d      	eors	r5, r1
 80aaade:	9903      	ldr	r1, [sp, #12]
 80aaae0:	4044      	eors	r4, r0
 80aaae2:	9802      	ldr	r0, [sp, #8]
 80aaae4:	0649      	lsls	r1, r1, #25
 80aaae6:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aaaea:	917d      	str	r1, [sp, #500]	; 0x1f4
 80aaaec:	0641      	lsls	r1, r0, #25
 80aaaee:	9803      	ldr	r0, [sp, #12]
 80aaaf0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aaaf4:	917c      	str	r1, [sp, #496]	; 0x1f0
 80aaaf6:	a97c      	add	r1, sp, #496	; 0x1f0
 80aaaf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aaafc:	4060      	eors	r0, r4
 80aaafe:	4069      	eors	r1, r5
 80aab00:	e9cd 0100 	strd	r0, r1, [sp]
 80aab04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aab08:	ea40 000a 	orr.w	r0, r0, sl
 80aab0c:	ea41 010b 	orr.w	r1, r1, fp
 80aab10:	ea00 0408 	and.w	r4, r0, r8
 80aab14:	ea01 0509 	and.w	r5, r1, r9
 80aab18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aab1c:	ea00 000a 	and.w	r0, r0, sl
 80aab20:	ea01 010b 	and.w	r1, r1, fp
 80aab24:	4304      	orrs	r4, r0
 80aab26:	430d      	orrs	r5, r1
 80aab28:	4620      	mov	r0, r4
 80aab2a:	4629      	mov	r1, r5
 80aab2c:	e9dd 4500 	ldrd	r4, r5, [sp]
 80aab30:	1824      	adds	r4, r4, r0
 80aab32:	414d      	adcs	r5, r1
 80aab34:	19a4      	adds	r4, r4, r6
 80aab36:	417d      	adcs	r5, r7
    }
    while( i < 80 );
 80aab38:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 80aab3a:	e9cd 4500 	strd	r4, r5, [sp]
    }
    while( i < 80 );
 80aab3e:	f47f ab05 	bne.w	80aa14c <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
 80aab42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80aab46:	4623      	mov	r3, r4
 80aab48:	18c0      	adds	r0, r0, r3
 80aab4a:	4169      	adcs	r1, r5
    ctx->state[1] += B;
 80aab4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80aab50:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 80aab54:	18a4      	adds	r4, r4, r2
 80aab56:	415d      	adcs	r5, r3
 80aab58:	e9ce 4506 	strd	r4, r5, [lr, #24]
    ctx->state[2] += C;
 80aab5c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 80aab60:	eb13 030a 	adds.w	r3, r3, sl
 80aab64:	eb44 040b 	adc.w	r4, r4, fp
 80aab68:	469a      	mov	sl, r3
    ctx->state[3] += D;
    ctx->state[4] += E;
 80aab6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80aab6e:	46a3      	mov	fp, r4
    ctx->state[3] += D;
    ctx->state[4] += E;
 80aab70:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
 80aab74:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80aab78:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80aab7c:	eb10 0008 	adds.w	r0, r0, r8
 80aab80:	eb41 0109 	adc.w	r1, r1, r9
    ctx->state[4] += E;
 80aab84:	18a4      	adds	r4, r4, r2
 80aab86:	415d      	adcs	r5, r3
 80aab88:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 80aab8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80aab90:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 80aab94:	18a4      	adds	r4, r4, r2
 80aab96:	415d      	adcs	r5, r3
 80aab98:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 80aab9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80aaba0:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 80aaba4:	18a4      	adds	r4, r4, r2
 80aaba6:	415d      	adcs	r5, r3
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80aaba8:	e9ce 010a 	strd	r0, r1, [lr, #40]	; 0x28
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 80aabac:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 80aabb0:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
 80aabb4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80aabb8:	18c0      	adds	r0, r0, r3
 80aabba:	4161      	adcs	r1, r4
 80aabbc:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
 80aabc0:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80aabc2:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
 80aabc6:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
 80aabca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aabce:	bf00      	nop

080aabd0 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80aabd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80aabd4:	4604      	mov	r4, r0
 80aabd6:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    unsigned int left;

    if( ilen == 0 )
 80aabd8:	4615      	mov	r5, r2
 80aabda:	2a00      	cmp	r2, #0
 80aabdc:	d03d      	beq.n	80aac5a <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 80aabde:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 80aabe2:	f04f 0900 	mov.w	r9, #0
    unsigned int left;

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 80aabe6:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 80aabea:	1952      	adds	r2, r2, r5
 80aabec:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
 80aabf0:	454b      	cmp	r3, r9
 80aabf2:	bf08      	it	eq
 80aabf4:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 80aabf6:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
 80aabfa:	d206      	bcs.n	80aac0a <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
 80aabfc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80aac00:	3201      	adds	r2, #1
 80aac02:	f143 0300 	adc.w	r3, r3, #0
 80aac06:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
 80aac0a:	b188      	cbz	r0, 80aac30 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
 80aac0c:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80aac10:	42bd      	cmp	r5, r7
 80aac12:	d31c      	bcc.n	80aac4e <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80aac14:	f104 0850 	add.w	r8, r4, #80	; 0x50
 80aac18:	4631      	mov	r1, r6
 80aac1a:	463a      	mov	r2, r7
 80aac1c:	4440      	add	r0, r8
 80aac1e:	f002 fc7a 	bl	80ad516 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 80aac22:	4641      	mov	r1, r8
 80aac24:	4620      	mov	r0, r4
 80aac26:	f7ff f993 	bl	80a9f50 <mbedtls_internal_sha512_process>
 80aac2a:	b9b8      	cbnz	r0, 80aac5c <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
 80aac2c:	443e      	add	r6, r7
        ilen  -= fill;
 80aac2e:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80aac30:	462f      	mov	r7, r5
 80aac32:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
 80aac34:	2f7f      	cmp	r7, #127	; 0x7f
 80aac36:	4431      	add	r1, r6
 80aac38:	d905      	bls.n	80aac46 <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 80aac3a:	4620      	mov	r0, r4
 80aac3c:	f7ff f988 	bl	80a9f50 <mbedtls_internal_sha512_process>
 80aac40:	b960      	cbnz	r0, 80aac5c <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
 80aac42:	3f80      	subs	r7, #128	; 0x80
 80aac44:	e7f5      	b.n	80aac32 <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
 80aac46:	b147      	cbz	r7, 80aac5a <mbedtls_sha512_update_ret+0x8a>
 80aac48:	463d      	mov	r5, r7
 80aac4a:	460e      	mov	r6, r1
 80aac4c:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80aac4e:	3450      	adds	r4, #80	; 0x50
 80aac50:	462a      	mov	r2, r5
 80aac52:	4631      	mov	r1, r6
 80aac54:	4420      	add	r0, r4
 80aac56:	f002 fc5e 	bl	80ad516 <memcpy>

    return( 0 );
 80aac5a:	2000      	movs	r0, #0
}
 80aac5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080aac60 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 80aac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80aac62:	4604      	mov	r4, r0
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 80aac64:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 80aac66:	2280      	movs	r2, #128	; 0x80
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 80aac68:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
 80aac6c:	1c58      	adds	r0, r3, #1

    if( used <= 112 )
 80aac6e:	2870      	cmp	r0, #112	; 0x70
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 80aac70:	4423      	add	r3, r4
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 80aac72:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 80aac74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80aac78:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
 80aac7c:	d804      	bhi.n	80aac88 <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 80aac7e:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 80aac82:	2100      	movs	r1, #0
 80aac84:	4430      	add	r0, r6
 80aac86:	e00f      	b.n	80aaca8 <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 80aac88:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 80aac8c:	2100      	movs	r1, #0
 80aac8e:	4430      	add	r0, r6
 80aac90:	f002 fc67 	bl	80ad562 <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 80aac94:	4631      	mov	r1, r6
 80aac96:	4620      	mov	r0, r4
 80aac98:	f7ff f95a 	bl	80a9f50 <mbedtls_internal_sha512_process>
 80aac9c:	2800      	cmp	r0, #0
 80aac9e:	f040 8111 	bne.w	80aaec4 <mbedtls_sha512_finish_ret+0x264>
            return( ret );

        memset( ctx->buffer, 0, 112 );
 80aaca2:	4601      	mov	r1, r0
 80aaca4:	4630      	mov	r0, r6
 80aaca6:	2270      	movs	r2, #112	; 0x70
 80aaca8:	f002 fc5b 	bl	80ad562 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 80aacac:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
 80aacb0:	68e3      	ldr	r3, [r4, #12]
 80aacb2:	68a2      	ldr	r2, [r4, #8]
 80aacb4:	00d9      	lsls	r1, r3, #3
 80aacb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80aacba:	2300      	movs	r3, #0
 80aacbc:	4319      	orrs	r1, r3
 80aacbe:	00d0      	lsls	r0, r2, #3
 80aacc0:	ea4f 725e 	mov.w	r2, lr, lsr #29
 80aacc4:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80aacc6:	0e0a      	lsrs	r2, r1, #24
 80aacc8:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 80aaccc:	0c0a      	lsrs	r2, r1, #16
 80aacce:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 80aacd2:	0a0a      	lsrs	r2, r1, #8
 80aacd4:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
 80aacd8:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80aacda:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80aacde:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
 80aace2:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80aace4:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80aace8:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
 80aacec:	0a02      	lsrs	r2, r0, #8
 80aacee:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 80aacf2:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80aacf4:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 80aacf6:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 80aacfa:	0c1a      	lsrs	r2, r3, #16
 80aacfc:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
 80aad00:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 80aad04:	0a1a      	lsrs	r2, r3, #8
 80aad06:	0e3b      	lsrs	r3, r7, #24
 80aad08:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 80aad0c:	0c3b      	lsrs	r3, r7, #16
 80aad0e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 80aad12:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80aad14:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
 80aad18:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 80aad1c:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 80aad20:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
 80aad24:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 80aad28:	4631      	mov	r1, r6
 80aad2a:	4620      	mov	r0, r4
 80aad2c:	f7ff f910 	bl	80a9f50 <mbedtls_internal_sha512_process>
 80aad30:	4603      	mov	r3, r0
 80aad32:	2800      	cmp	r0, #0
 80aad34:	f040 80c5 	bne.w	80aaec2 <mbedtls_sha512_finish_ret+0x262>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 80aad38:	7de2      	ldrb	r2, [r4, #23]
 80aad3a:	702a      	strb	r2, [r5, #0]
 80aad3c:	8ae2      	ldrh	r2, [r4, #22]
 80aad3e:	706a      	strb	r2, [r5, #1]
 80aad40:	6962      	ldr	r2, [r4, #20]
 80aad42:	0a12      	lsrs	r2, r2, #8
 80aad44:	70aa      	strb	r2, [r5, #2]
 80aad46:	6962      	ldr	r2, [r4, #20]
 80aad48:	70ea      	strb	r2, [r5, #3]
 80aad4a:	7ce2      	ldrb	r2, [r4, #19]
 80aad4c:	712a      	strb	r2, [r5, #4]
 80aad4e:	8a62      	ldrh	r2, [r4, #18]
 80aad50:	716a      	strb	r2, [r5, #5]
 80aad52:	6922      	ldr	r2, [r4, #16]
 80aad54:	0a12      	lsrs	r2, r2, #8
 80aad56:	71aa      	strb	r2, [r5, #6]
 80aad58:	6922      	ldr	r2, [r4, #16]
 80aad5a:	71ea      	strb	r2, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 80aad5c:	7fe2      	ldrb	r2, [r4, #31]
 80aad5e:	722a      	strb	r2, [r5, #8]
 80aad60:	8be2      	ldrh	r2, [r4, #30]
 80aad62:	726a      	strb	r2, [r5, #9]
 80aad64:	69e2      	ldr	r2, [r4, #28]
 80aad66:	0a12      	lsrs	r2, r2, #8
 80aad68:	72aa      	strb	r2, [r5, #10]
 80aad6a:	69e2      	ldr	r2, [r4, #28]
 80aad6c:	72ea      	strb	r2, [r5, #11]
 80aad6e:	7ee2      	ldrb	r2, [r4, #27]
 80aad70:	732a      	strb	r2, [r5, #12]
 80aad72:	8b62      	ldrh	r2, [r4, #26]
 80aad74:	736a      	strb	r2, [r5, #13]
 80aad76:	69a2      	ldr	r2, [r4, #24]
 80aad78:	0a12      	lsrs	r2, r2, #8
 80aad7a:	73aa      	strb	r2, [r5, #14]
 80aad7c:	69a2      	ldr	r2, [r4, #24]
 80aad7e:	73ea      	strb	r2, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 80aad80:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80aad84:	742a      	strb	r2, [r5, #16]
 80aad86:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80aad88:	746a      	strb	r2, [r5, #17]
 80aad8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80aad8c:	0a12      	lsrs	r2, r2, #8
 80aad8e:	74aa      	strb	r2, [r5, #18]
 80aad90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80aad92:	74ea      	strb	r2, [r5, #19]
 80aad94:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80aad98:	752a      	strb	r2, [r5, #20]
 80aad9a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80aad9c:	756a      	strb	r2, [r5, #21]
 80aad9e:	6a22      	ldr	r2, [r4, #32]
 80aada0:	0a12      	lsrs	r2, r2, #8
 80aada2:	75aa      	strb	r2, [r5, #22]
 80aada4:	6a22      	ldr	r2, [r4, #32]
 80aada6:	75ea      	strb	r2, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 80aada8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 80aadac:	762a      	strb	r2, [r5, #24]
 80aadae:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80aadb0:	766a      	strb	r2, [r5, #25]
 80aadb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80aadb4:	0a12      	lsrs	r2, r2, #8
 80aadb6:	76aa      	strb	r2, [r5, #26]
 80aadb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80aadba:	76ea      	strb	r2, [r5, #27]
 80aadbc:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 80aadc0:	772a      	strb	r2, [r5, #28]
 80aadc2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80aadc4:	776a      	strb	r2, [r5, #29]
 80aadc6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80aadc8:	0a12      	lsrs	r2, r2, #8
 80aadca:	77aa      	strb	r2, [r5, #30]
 80aadcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80aadce:	77ea      	strb	r2, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 80aadd0:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 80aadd4:	f885 2020 	strb.w	r2, [r5, #32]
 80aadd8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80aadda:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
 80aadde:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80aade0:	0a12      	lsrs	r2, r2, #8
 80aade2:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 80aade6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80aade8:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
 80aadec:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 80aadf0:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 80aadf4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80aadf6:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 80aadfa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80aadfc:	0a12      	lsrs	r2, r2, #8
 80aadfe:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
 80aae02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80aae04:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 80aae08:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80aae0c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
 80aae10:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80aae12:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 80aae16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80aae18:	0a12      	lsrs	r2, r2, #8
 80aae1a:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
 80aae1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80aae20:	f885 202b 	strb.w	r2, [r5, #43]	; 0x2b
 80aae24:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 80aae28:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
 80aae2c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80aae2e:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
 80aae32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80aae34:	0a12      	lsrs	r2, r2, #8
 80aae36:	f885 202e 	strb.w	r2, [r5, #46]	; 0x2e
 80aae3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80aae3c:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 80aae40:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 80aae44:	2800      	cmp	r0, #0
 80aae46:	d13c      	bne.n	80aaec2 <mbedtls_sha512_finish_ret+0x262>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 80aae48:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80aae4c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80aae50:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80aae54:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 80aae58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80aae5a:	0a1b      	lsrs	r3, r3, #8
 80aae5c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 80aae60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80aae62:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 80aae66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80aae6a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 80aae6e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80aae72:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 80aae76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80aae78:	0a1b      	lsrs	r3, r3, #8
 80aae7a:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 80aae7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80aae80:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 80aae84:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 80aae88:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 80aae8c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80aae90:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 80aae94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80aae96:	0a1b      	lsrs	r3, r3, #8
 80aae98:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 80aae9c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80aae9e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 80aaea2:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80aaea6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 80aaeaa:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80aaeae:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 80aaeb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80aaeb4:	0a1b      	lsrs	r3, r3, #8
 80aaeb6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 80aaeba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80aaebc:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 80aaec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    return( 0 );
 80aaec2:	4618      	mov	r0, r3
}
 80aaec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080aaec6 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 80aaec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80aaec8:	461f      	mov	r7, r3
 80aaeca:	b0b7      	sub	sp, #220	; 0xdc
 80aaecc:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 80aaece:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 80aaed0:	460e      	mov	r6, r1
 80aaed2:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 80aaed4:	f7fe ff8b 	bl	80a9dee <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 80aaed8:	4639      	mov	r1, r7
 80aaeda:	4668      	mov	r0, sp
 80aaedc:	f7fe ff9c 	bl	80a9e18 <mbedtls_sha512_starts_ret>
 80aaee0:	4601      	mov	r1, r0
 80aaee2:	b958      	cbnz	r0, 80aaefc <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 80aaee4:	4629      	mov	r1, r5
 80aaee6:	4632      	mov	r2, r6
 80aaee8:	4668      	mov	r0, sp
 80aaeea:	f7ff fe71 	bl	80aabd0 <mbedtls_sha512_update_ret>
 80aaeee:	4601      	mov	r1, r0
 80aaef0:	b920      	cbnz	r0, 80aaefc <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 80aaef2:	4621      	mov	r1, r4
 80aaef4:	4668      	mov	r0, sp
 80aaef6:	f7ff feb3 	bl	80aac60 <mbedtls_sha512_finish_ret>
 80aaefa:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 80aaefc:	4668      	mov	r0, sp
 80aaefe:	f7fe ff7a 	bl	80a9df6 <mbedtls_sha512_free>

    return( ret );
}
 80aaf02:	4608      	mov	r0, r1
 80aaf04:	b037      	add	sp, #220	; 0xdc
 80aaf06:	bdf0      	pop	{r4, r5, r6, r7, pc}

080aaf08 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 80aaf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80aaf0c:	4606      	mov	r6, r0
 80aaf0e:	4688      	mov	r8, r1
 80aaf10:	b096      	sub	sp, #88	; 0x58
 80aaf12:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 80aaf14:	4b79      	ldr	r3, [pc, #484]	; (80ab0fc <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 80aaf16:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80aaf1a:	4615      	mov	r5, r2
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 80aaf1c:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 80aaf20:	aa08      	add	r2, sp, #32
 80aaf22:	4614      	mov	r4, r2
 80aaf24:	6818      	ldr	r0, [r3, #0]
 80aaf26:	6859      	ldr	r1, [r3, #4]
 80aaf28:	3308      	adds	r3, #8
 80aaf2a:	c403      	stmia	r4!, {r0, r1}
 80aaf2c:	4573      	cmp	r3, lr
 80aaf2e:	4622      	mov	r2, r4
 80aaf30:	d1f7      	bne.n	80aaf22 <mbedtls_rsa_deduce_primes+0x1a>
 80aaf32:	6818      	ldr	r0, [r3, #0]
 80aaf34:	889b      	ldrh	r3, [r3, #4]
 80aaf36:	6020      	str	r0, [r4, #0]
 80aaf38:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 80aaf3a:	2f00      	cmp	r7, #0
 80aaf3c:	f000 80b8 	beq.w	80ab0b0 <mbedtls_rsa_deduce_primes+0x1a8>
 80aaf40:	f1b9 0f00 	cmp.w	r9, #0
 80aaf44:	f000 80b4 	beq.w	80ab0b0 <mbedtls_rsa_deduce_primes+0x1a8>
 80aaf48:	68bb      	ldr	r3, [r7, #8]
 80aaf4a:	2b00      	cmp	r3, #0
 80aaf4c:	f040 80b0 	bne.w	80ab0b0 <mbedtls_rsa_deduce_primes+0x1a8>
 80aaf50:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80aaf54:	2900      	cmp	r1, #0
 80aaf56:	f040 80ab 	bne.w	80ab0b0 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 80aaf5a:	4630      	mov	r0, r6
 80aaf5c:	f7fc fff2 	bl	80a7f44 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80aaf60:	2800      	cmp	r0, #0
 80aaf62:	f340 80a5 	ble.w	80ab0b0 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80aaf66:	2101      	movs	r1, #1
 80aaf68:	4628      	mov	r0, r5
 80aaf6a:	f7fc ffeb 	bl	80a7f44 <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 80aaf6e:	2800      	cmp	r0, #0
 80aaf70:	f340 809e 	ble.w	80ab0b0 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80aaf74:	4631      	mov	r1, r6
 80aaf76:	4628      	mov	r0, r5
 80aaf78:	f7fc ff9f 	bl	80a7eba <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80aaf7c:	2800      	cmp	r0, #0
 80aaf7e:	f280 8097 	bge.w	80ab0b0 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80aaf82:	2101      	movs	r1, #1
 80aaf84:	4640      	mov	r0, r8
 80aaf86:	f7fc ffdd 	bl	80a7f44 <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80aaf8a:	2800      	cmp	r0, #0
 80aaf8c:	f340 8090 	ble.w	80ab0b0 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 80aaf90:	4631      	mov	r1, r6
 80aaf92:	4640      	mov	r0, r8
 80aaf94:	f7fc ff91 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80aaf98:	2800      	cmp	r0, #0
 80aaf9a:	f280 8089 	bge.w	80ab0b0 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 80aaf9e:	a805      	add	r0, sp, #20
 80aafa0:	f7fc fd26 	bl	80a79f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 80aafa4:	a802      	add	r0, sp, #8
 80aafa6:	f7fc fd23 	bl	80a79f0 <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 80aafaa:	4642      	mov	r2, r8
 80aafac:	4629      	mov	r1, r5
 80aafae:	a802      	add	r0, sp, #8
 80aafb0:	f7fd f8e7 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80aafb4:	4604      	mov	r4, r0
 80aafb6:	2800      	cmp	r0, #0
 80aafb8:	d172      	bne.n	80ab0a0 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 80aafba:	a902      	add	r1, sp, #8
 80aafbc:	2201      	movs	r2, #1
 80aafbe:	4608      	mov	r0, r1
 80aafc0:	f7fd f8c9 	bl	80a8156 <mbedtls_mpi_sub_int>
 80aafc4:	4604      	mov	r4, r0
 80aafc6:	2800      	cmp	r0, #0
 80aafc8:	d16a      	bne.n	80ab0a0 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 80aafca:	a802      	add	r0, sp, #8
 80aafcc:	f7fc fdb0 	bl	80a7b30 <mbedtls_mpi_lsb>
 80aafd0:	fa1f fa80 	uxth.w	sl, r0
 80aafd4:	f1ba 0f00 	cmp.w	sl, #0
 80aafd8:	d102      	bne.n	80aafe0 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80aafda:	f06f 0403 	mvn.w	r4, #3
 80aafde:	e05f      	b.n	80ab0a0 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 80aafe0:	4651      	mov	r1, sl
 80aafe2:	a802      	add	r0, sp, #8
 80aafe4:	f7fc fe8a 	bl	80a7cfc <mbedtls_mpi_shift_r>
 80aafe8:	4604      	mov	r4, r0
 80aafea:	2800      	cmp	r0, #0
 80aafec:	d158      	bne.n	80ab0a0 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
 80aafee:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
 80aaff0:	681d      	ldr	r5, [r3, #0]
 80aaff2:	f005 0507 	and.w	r5, r5, #7
 80aaff6:	1e6b      	subs	r3, r5, #1
 80aaff8:	425d      	negs	r5, r3
 80aaffa:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 80aaffc:	ab16      	add	r3, sp, #88	; 0x58
 80aaffe:	442b      	add	r3, r5
 80ab000:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 80ab004:	a805      	add	r0, sp, #20
 80ab006:	f7fc fd66 	bl	80a7ad6 <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 80ab00a:	4632      	mov	r2, r6
 80ab00c:	a905      	add	r1, sp, #20
 80ab00e:	4638      	mov	r0, r7
 80ab010:	f7fd fd44 	bl	80a8a9c <mbedtls_mpi_gcd>
 80ab014:	4604      	mov	r4, r0
 80ab016:	2800      	cmp	r0, #0
 80ab018:	d142      	bne.n	80ab0a0 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 80ab01a:	2101      	movs	r1, #1
 80ab01c:	4638      	mov	r0, r7
 80ab01e:	f7fc ff91 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab022:	b120      	cbz	r0, 80ab02e <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
 80ab024:	3501      	adds	r5, #1
 80ab026:	b2ad      	uxth	r5, r5
 80ab028:	2d36      	cmp	r5, #54	; 0x36
 80ab02a:	d1e7      	bne.n	80aaffc <mbedtls_rsa_deduce_primes+0xf4>
 80ab02c:	e7d5      	b.n	80aafda <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 80ab02e:	a905      	add	r1, sp, #20
 80ab030:	f8cd 9000 	str.w	r9, [sp]
 80ab034:	4633      	mov	r3, r6
 80ab036:	aa02      	add	r2, sp, #8
 80ab038:	4608      	mov	r0, r1
 80ab03a:	f7fd fb10 	bl	80a865e <mbedtls_mpi_exp_mod>
 80ab03e:	4604      	mov	r4, r0
 80ab040:	bb70      	cbnz	r0, 80ab0a0 <mbedtls_rsa_deduce_primes+0x198>
 80ab042:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 80ab046:	2101      	movs	r1, #1
 80ab048:	a805      	add	r0, sp, #20
 80ab04a:	f7fc ff7b 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab04e:	b930      	cbnz	r0, 80ab05e <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 80ab050:	2101      	movs	r1, #1
 80ab052:	a805      	add	r0, sp, #20
 80ab054:	f7fc ff76 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab058:	2800      	cmp	r0, #0
 80ab05a:	d0e3      	beq.n	80ab024 <mbedtls_rsa_deduce_primes+0x11c>
 80ab05c:	e7bd      	b.n	80aafda <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 80ab05e:	a905      	add	r1, sp, #20
 80ab060:	2201      	movs	r2, #1
 80ab062:	4608      	mov	r0, r1
 80ab064:	f7fd f861 	bl	80a812a <mbedtls_mpi_add_int>
 80ab068:	4604      	mov	r4, r0
 80ab06a:	b9c8      	cbnz	r0, 80ab0a0 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 80ab06c:	4632      	mov	r2, r6
 80ab06e:	a905      	add	r1, sp, #20
 80ab070:	4638      	mov	r0, r7
 80ab072:	f7fd fd13 	bl	80a8a9c <mbedtls_mpi_gcd>
 80ab076:	4604      	mov	r4, r0
 80ab078:	b990      	cbnz	r0, 80ab0a0 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 80ab07a:	2101      	movs	r1, #1
 80ab07c:	4638      	mov	r0, r7
 80ab07e:	f7fc ff61 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab082:	2801      	cmp	r0, #1
 80ab084:	d117      	bne.n	80ab0b6 <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 80ab086:	4631      	mov	r1, r6
 80ab088:	4638      	mov	r0, r7
 80ab08a:	f7fc ff16 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 80ab08e:	3001      	adds	r0, #1
 80ab090:	d111      	bne.n	80ab0b6 <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 80ab092:	4621      	mov	r1, r4
 80ab094:	463b      	mov	r3, r7
 80ab096:	4632      	mov	r2, r6
 80ab098:	4648      	mov	r0, r9
 80ab09a:	f7fd f8ee 	bl	80a827a <mbedtls_mpi_div_mpi>
 80ab09e:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
 80ab0a0:	a805      	add	r0, sp, #20
 80ab0a2:	f7fc fcac 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 80ab0a6:	a802      	add	r0, sp, #8
 80ab0a8:	f7fc fca9 	bl	80a79fe <mbedtls_mpi_free>
    return( ret );
 80ab0ac:	4620      	mov	r0, r4
 80ab0ae:	e021      	b.n	80ab0f4 <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80ab0b0:	f06f 0003 	mvn.w	r0, #3
 80ab0b4:	e01e      	b.n	80ab0f4 <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80ab0b6:	a905      	add	r1, sp, #20
 80ab0b8:	2201      	movs	r2, #1
 80ab0ba:	4608      	mov	r0, r1
 80ab0bc:	f7fd f84b 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab0c0:	4604      	mov	r4, r0
 80ab0c2:	2800      	cmp	r0, #0
 80ab0c4:	d1ec      	bne.n	80ab0a0 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 80ab0c6:	aa05      	add	r2, sp, #20
 80ab0c8:	4611      	mov	r1, r2
 80ab0ca:	4610      	mov	r0, r2
 80ab0cc:	f7fd f859 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80ab0d0:	4604      	mov	r4, r0
 80ab0d2:	2800      	cmp	r0, #0
 80ab0d4:	d1e4      	bne.n	80ab0a0 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 80ab0d6:	a905      	add	r1, sp, #20
 80ab0d8:	4632      	mov	r2, r6
 80ab0da:	4608      	mov	r0, r1
 80ab0dc:	f7fd fa8d 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80ab0e0:	4604      	mov	r4, r0
 80ab0e2:	2800      	cmp	r0, #0
 80ab0e4:	d1dc      	bne.n	80ab0a0 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 80ab0e6:	f108 0801 	add.w	r8, r8, #1
 80ab0ea:	fa1f f888 	uxth.w	r8, r8
 80ab0ee:	45c2      	cmp	sl, r8
 80ab0f0:	d2a9      	bcs.n	80ab046 <mbedtls_rsa_deduce_primes+0x13e>
 80ab0f2:	e7ad      	b.n	80ab050 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 80ab0f4:	b016      	add	sp, #88	; 0x58
 80ab0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80ab0fa:	bf00      	nop
 80ab0fc:	080af070 	.word	0x080af070

080ab100 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 80ab100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80ab104:	4604      	mov	r4, r0
 80ab106:	b086      	sub	sp, #24
 80ab108:	460e      	mov	r6, r1
 80ab10a:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 80ab10c:	461d      	mov	r5, r3
 80ab10e:	b18b      	cbz	r3, 80ab134 <mbedtls_rsa_deduce_private_exponent+0x34>
 80ab110:	2100      	movs	r1, #0
 80ab112:	4618      	mov	r0, r3
 80ab114:	f7fc ff16 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab118:	4680      	mov	r8, r0
 80ab11a:	b958      	cbnz	r0, 80ab134 <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80ab11c:	2101      	movs	r1, #1
 80ab11e:	4620      	mov	r0, r4
 80ab120:	f7fc ff10 	bl	80a7f44 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 80ab124:	2800      	cmp	r0, #0
 80ab126:	dd05      	ble.n	80ab134 <mbedtls_rsa_deduce_private_exponent+0x34>
 80ab128:	2101      	movs	r1, #1
 80ab12a:	4630      	mov	r0, r6
 80ab12c:	f7fc ff0a 	bl	80a7f44 <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80ab130:	2800      	cmp	r0, #0
 80ab132:	dc02      	bgt.n	80ab13a <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80ab134:	f06f 0003 	mvn.w	r0, #3
 80ab138:	e03c      	b.n	80ab1b4 <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 80ab13a:	4641      	mov	r1, r8
 80ab13c:	4638      	mov	r0, r7
 80ab13e:	f7fc ff01 	bl	80a7f44 <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 80ab142:	2800      	cmp	r0, #0
 80ab144:	d0f6      	beq.n	80ab134 <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
 80ab146:	4668      	mov	r0, sp
 80ab148:	f7fc fc52 	bl	80a79f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80ab14c:	a803      	add	r0, sp, #12
 80ab14e:	f7fc fc4f 	bl	80a79f0 <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80ab152:	4621      	mov	r1, r4
 80ab154:	2201      	movs	r2, #1
 80ab156:	4668      	mov	r0, sp
 80ab158:	f7fc fffd 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab15c:	4604      	mov	r4, r0
 80ab15e:	bb10      	cbnz	r0, 80ab1a6 <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80ab160:	2201      	movs	r2, #1
 80ab162:	4631      	mov	r1, r6
 80ab164:	a803      	add	r0, sp, #12
 80ab166:	f7fc fff6 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab16a:	4604      	mov	r4, r0
 80ab16c:	b9d8      	cbnz	r0, 80ab1a6 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 80ab16e:	aa03      	add	r2, sp, #12
 80ab170:	4669      	mov	r1, sp
 80ab172:	4628      	mov	r0, r5
 80ab174:	f7fd fc92 	bl	80a8a9c <mbedtls_mpi_gcd>
 80ab178:	4604      	mov	r4, r0
 80ab17a:	b9a0      	cbnz	r0, 80ab1a6 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 80ab17c:	aa03      	add	r2, sp, #12
 80ab17e:	4669      	mov	r1, sp
 80ab180:	4668      	mov	r0, sp
 80ab182:	f7fc fffe 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80ab186:	4604      	mov	r4, r0
 80ab188:	b968      	cbnz	r0, 80ab1a6 <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 80ab18a:	4601      	mov	r1, r0
 80ab18c:	462b      	mov	r3, r5
 80ab18e:	466a      	mov	r2, sp
 80ab190:	4668      	mov	r0, sp
 80ab192:	f7fd f872 	bl	80a827a <mbedtls_mpi_div_mpi>
 80ab196:	4604      	mov	r4, r0
 80ab198:	b928      	cbnz	r0, 80ab1a6 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 80ab19a:	466a      	mov	r2, sp
 80ab19c:	4639      	mov	r1, r7
 80ab19e:	4628      	mov	r0, r5
 80ab1a0:	f7fd fd24 	bl	80a8bec <mbedtls_mpi_inv_mod>
 80ab1a4:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
 80ab1a6:	4668      	mov	r0, sp
 80ab1a8:	f7fc fc29 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80ab1ac:	a803      	add	r0, sp, #12
 80ab1ae:	f7fc fc26 	bl	80a79fe <mbedtls_mpi_free>

    return( ret );
 80ab1b2:	4620      	mov	r0, r4
}
 80ab1b4:	b006      	add	sp, #24
 80ab1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080ab1bc <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80ab1bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80ab1c0:	4699      	mov	r9, r3
 80ab1c2:	b087      	sub	sp, #28
 80ab1c4:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 80ab1c6:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80ab1c8:	460d      	mov	r5, r1
 80ab1ca:	4690      	mov	r8, r2
 80ab1cc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80ab1ce:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 80ab1d0:	f7fc fc0e 	bl	80a79f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80ab1d4:	a803      	add	r0, sp, #12
 80ab1d6:	f7fc fc0b 	bl	80a79f0 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 80ab1da:	f1b9 0f00 	cmp.w	r9, #0
 80ab1de:	d101      	bne.n	80ab1e4 <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 80ab1e0:	b9f7      	cbnz	r7, 80ab220 <mbedtls_rsa_validate_crt+0x64>
 80ab1e2:	e035      	b.n	80ab250 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
 80ab1e4:	2c00      	cmp	r4, #0
 80ab1e6:	d058      	beq.n	80ab29a <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80ab1e8:	2201      	movs	r2, #1
 80ab1ea:	4621      	mov	r1, r4
 80ab1ec:	4668      	mov	r0, sp
 80ab1ee:	f7fc ffb2 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab1f2:	2800      	cmp	r0, #0
 80ab1f4:	d148      	bne.n	80ab288 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 80ab1f6:	4642      	mov	r2, r8
 80ab1f8:	4649      	mov	r1, r9
 80ab1fa:	a803      	add	r0, sp, #12
 80ab1fc:	f7fc ff73 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80ab200:	2800      	cmp	r0, #0
 80ab202:	d141      	bne.n	80ab288 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80ab204:	a903      	add	r1, sp, #12
 80ab206:	466a      	mov	r2, sp
 80ab208:	4608      	mov	r0, r1
 80ab20a:	f7fd f9f6 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80ab20e:	2800      	cmp	r0, #0
 80ab210:	d13a      	bne.n	80ab288 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 80ab212:	4601      	mov	r1, r0
 80ab214:	a803      	add	r0, sp, #12
 80ab216:	f7fc fe95 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab21a:	2800      	cmp	r0, #0
 80ab21c:	d13f      	bne.n	80ab29e <mbedtls_rsa_validate_crt+0xe2>
 80ab21e:	e7df      	b.n	80ab1e0 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
 80ab220:	b3dd      	cbz	r5, 80ab29a <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 80ab222:	2201      	movs	r2, #1
 80ab224:	4629      	mov	r1, r5
 80ab226:	4668      	mov	r0, sp
 80ab228:	f7fc ff95 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab22c:	bb60      	cbnz	r0, 80ab288 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 80ab22e:	4642      	mov	r2, r8
 80ab230:	4639      	mov	r1, r7
 80ab232:	a803      	add	r0, sp, #12
 80ab234:	f7fc ff57 	bl	80a80e6 <mbedtls_mpi_sub_mpi>
 80ab238:	bb30      	cbnz	r0, 80ab288 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80ab23a:	a903      	add	r1, sp, #12
 80ab23c:	466a      	mov	r2, sp
 80ab23e:	4608      	mov	r0, r1
 80ab240:	f7fd f9db 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80ab244:	bb00      	cbnz	r0, 80ab288 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 80ab246:	4601      	mov	r1, r0
 80ab248:	a803      	add	r0, sp, #12
 80ab24a:	f7fc fe7b 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab24e:	bb30      	cbnz	r0, 80ab29e <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 80ab250:	b1c6      	cbz	r6, 80ab284 <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
 80ab252:	b314      	cbz	r4, 80ab29a <mbedtls_rsa_validate_crt+0xde>
 80ab254:	b30d      	cbz	r5, 80ab29a <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 80ab256:	462a      	mov	r2, r5
 80ab258:	4631      	mov	r1, r6
 80ab25a:	4668      	mov	r0, sp
 80ab25c:	f7fc ff91 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80ab260:	b990      	cbnz	r0, 80ab288 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80ab262:	2201      	movs	r2, #1
 80ab264:	4669      	mov	r1, sp
 80ab266:	4668      	mov	r0, sp
 80ab268:	f7fc ff75 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab26c:	b960      	cbnz	r0, 80ab288 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 80ab26e:	4622      	mov	r2, r4
 80ab270:	4669      	mov	r1, sp
 80ab272:	4668      	mov	r0, sp
 80ab274:	f7fd f9c1 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80ab278:	b930      	cbnz	r0, 80ab288 <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80ab27a:	4601      	mov	r1, r0
 80ab27c:	4668      	mov	r0, sp
 80ab27e:	f7fc fe61 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab282:	b960      	cbnz	r0, 80ab29e <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80ab284:	2400      	movs	r4, #0
 80ab286:	e00b      	b.n	80ab2a0 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 80ab288:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 80ab28c:	d007      	beq.n	80ab29e <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 80ab28e:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 80ab292:	d002      	beq.n	80ab29a <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80ab294:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 80ab298:	e002      	b.n	80ab2a0 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80ab29a:	4c06      	ldr	r4, [pc, #24]	; (80ab2b4 <mbedtls_rsa_validate_crt+0xf8>)
 80ab29c:	e000      	b.n	80ab2a0 <mbedtls_rsa_validate_crt+0xe4>
 80ab29e:	4c06      	ldr	r4, [pc, #24]	; (80ab2b8 <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 80ab2a0:	4668      	mov	r0, sp
 80ab2a2:	f7fc fbac 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80ab2a6:	a803      	add	r0, sp, #12
 80ab2a8:	f7fc fba9 	bl	80a79fe <mbedtls_mpi_free>

    return( ret );
}
 80ab2ac:	4620      	mov	r0, r4
 80ab2ae:	b007      	add	sp, #28
 80ab2b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80ab2b4:	ffffbf80 	.word	0xffffbf80
 80ab2b8:	ffffbe00 	.word	0xffffbe00

080ab2bc <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 80ab2bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80ab2c0:	4688      	mov	r8, r1
 80ab2c2:	b087      	sub	sp, #28
 80ab2c4:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 80ab2c6:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 80ab2c8:	4691      	mov	r9, r2
 80ab2ca:	461e      	mov	r6, r3
 80ab2cc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 80ab2ce:	f7fc fb8f 	bl	80a79f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80ab2d2:	a803      	add	r0, sp, #12
 80ab2d4:	f7fc fb8c 	bl	80a79f0 <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 80ab2d8:	f1b8 0f00 	cmp.w	r8, #0
 80ab2dc:	d018      	beq.n	80ab310 <mbedtls_rsa_validate_params+0x54>
 80ab2de:	f1b9 0f00 	cmp.w	r9, #0
 80ab2e2:	d015      	beq.n	80ab310 <mbedtls_rsa_validate_params+0x54>
 80ab2e4:	b90d      	cbnz	r5, 80ab2ea <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80ab2e6:	b9de      	cbnz	r6, 80ab320 <mbedtls_rsa_validate_params+0x64>
 80ab2e8:	e018      	b.n	80ab31c <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 80ab2ea:	464a      	mov	r2, r9
 80ab2ec:	4641      	mov	r1, r8
 80ab2ee:	4668      	mov	r0, sp
 80ab2f0:	f7fc ff47 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80ab2f4:	4604      	mov	r4, r0
 80ab2f6:	bb68      	cbnz	r0, 80ab354 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80ab2f8:	2101      	movs	r1, #1
 80ab2fa:	4628      	mov	r0, r5
 80ab2fc:	f7fc fe22 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab300:	2800      	cmp	r0, #0
 80ab302:	dd26      	ble.n	80ab352 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 80ab304:	4629      	mov	r1, r5
 80ab306:	4668      	mov	r0, sp
 80ab308:	f7fc fdd7 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80ab30c:	bb08      	cbnz	r0, 80ab352 <mbedtls_rsa_validate_params+0x96>
 80ab30e:	e016      	b.n	80ab33e <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 80ab310:	b125      	cbz	r5, 80ab31c <mbedtls_rsa_validate_params+0x60>
 80ab312:	b9b6      	cbnz	r6, 80ab342 <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80ab314:	f1b8 0f00 	cmp.w	r8, #0
 80ab318:	f040 808a 	bne.w	80ab430 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80ab31c:	2400      	movs	r4, #0
 80ab31e:	e019      	b.n	80ab354 <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80ab320:	2f00      	cmp	r7, #0
 80ab322:	d0fb      	beq.n	80ab31c <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80ab324:	2101      	movs	r1, #1
 80ab326:	4640      	mov	r0, r8
 80ab328:	f7fc fe0c 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab32c:	2800      	cmp	r0, #0
 80ab32e:	dd10      	ble.n	80ab352 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 80ab330:	2101      	movs	r1, #1
 80ab332:	4648      	mov	r0, r9
 80ab334:	f7fc fe06 	bl	80a7f44 <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80ab338:	2800      	cmp	r0, #0
 80ab33a:	dc19      	bgt.n	80ab370 <mbedtls_rsa_validate_params+0xb4>
 80ab33c:	e009      	b.n	80ab352 <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 80ab33e:	2e00      	cmp	r6, #0
 80ab340:	d0ec      	beq.n	80ab31c <mbedtls_rsa_validate_params+0x60>
 80ab342:	2f00      	cmp	r7, #0
 80ab344:	d0e6      	beq.n	80ab314 <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80ab346:	2101      	movs	r1, #1
 80ab348:	4630      	mov	r0, r6
 80ab34a:	f7fc fdfb 	bl	80a7f44 <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80ab34e:	2800      	cmp	r0, #0
 80ab350:	dc5b      	bgt.n	80ab40a <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80ab352:	4c3c      	ldr	r4, [pc, #240]	; (80ab444 <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 80ab354:	4668      	mov	r0, sp
 80ab356:	f7fc fb52 	bl	80a79fe <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80ab35a:	a803      	add	r0, sp, #12
 80ab35c:	f7fc fb4f 	bl	80a79fe <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 80ab360:	2c00      	cmp	r4, #0
 80ab362:	d06a      	beq.n	80ab43a <mbedtls_rsa_validate_params+0x17e>
 80ab364:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 80ab368:	d067      	beq.n	80ab43a <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80ab36a:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
 80ab36e:	e064      	b.n	80ab43a <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 80ab370:	463a      	mov	r2, r7
 80ab372:	4631      	mov	r1, r6
 80ab374:	4668      	mov	r0, sp
 80ab376:	f7fc ff04 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80ab37a:	4604      	mov	r4, r0
 80ab37c:	2800      	cmp	r0, #0
 80ab37e:	d1e9      	bne.n	80ab354 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80ab380:	2201      	movs	r2, #1
 80ab382:	4669      	mov	r1, sp
 80ab384:	4668      	mov	r0, sp
 80ab386:	f7fc fee6 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab38a:	4604      	mov	r4, r0
 80ab38c:	2800      	cmp	r0, #0
 80ab38e:	d1e1      	bne.n	80ab354 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 80ab390:	2201      	movs	r2, #1
 80ab392:	4641      	mov	r1, r8
 80ab394:	a803      	add	r0, sp, #12
 80ab396:	f7fc fede 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab39a:	4604      	mov	r4, r0
 80ab39c:	2800      	cmp	r0, #0
 80ab39e:	d1d9      	bne.n	80ab354 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80ab3a0:	aa03      	add	r2, sp, #12
 80ab3a2:	4669      	mov	r1, sp
 80ab3a4:	4668      	mov	r0, sp
 80ab3a6:	f7fd f928 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80ab3aa:	4604      	mov	r4, r0
 80ab3ac:	2800      	cmp	r0, #0
 80ab3ae:	d1d1      	bne.n	80ab354 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80ab3b0:	4601      	mov	r1, r0
 80ab3b2:	4668      	mov	r0, sp
 80ab3b4:	f7fc fdc6 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab3b8:	2800      	cmp	r0, #0
 80ab3ba:	d1ca      	bne.n	80ab352 <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 80ab3bc:	463a      	mov	r2, r7
 80ab3be:	4631      	mov	r1, r6
 80ab3c0:	4668      	mov	r0, sp
 80ab3c2:	f7fc fede 	bl	80a8182 <mbedtls_mpi_mul_mpi>
 80ab3c6:	4604      	mov	r4, r0
 80ab3c8:	2800      	cmp	r0, #0
 80ab3ca:	d1c3      	bne.n	80ab354 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80ab3cc:	2201      	movs	r2, #1
 80ab3ce:	4669      	mov	r1, sp
 80ab3d0:	4668      	mov	r0, sp
 80ab3d2:	f7fc fec0 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab3d6:	4604      	mov	r4, r0
 80ab3d8:	2800      	cmp	r0, #0
 80ab3da:	d1bb      	bne.n	80ab354 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80ab3dc:	2201      	movs	r2, #1
 80ab3de:	4649      	mov	r1, r9
 80ab3e0:	a803      	add	r0, sp, #12
 80ab3e2:	f7fc feb8 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab3e6:	4604      	mov	r4, r0
 80ab3e8:	2800      	cmp	r0, #0
 80ab3ea:	d1b3      	bne.n	80ab354 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80ab3ec:	aa03      	add	r2, sp, #12
 80ab3ee:	4669      	mov	r1, sp
 80ab3f0:	4668      	mov	r0, sp
 80ab3f2:	f7fd f902 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80ab3f6:	4604      	mov	r4, r0
 80ab3f8:	2800      	cmp	r0, #0
 80ab3fa:	d1ab      	bne.n	80ab354 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80ab3fc:	4601      	mov	r1, r0
 80ab3fe:	4668      	mov	r0, sp
 80ab400:	f7fc fda0 	bl	80a7f44 <mbedtls_mpi_cmp_int>
 80ab404:	2800      	cmp	r0, #0
 80ab406:	d089      	beq.n	80ab31c <mbedtls_rsa_validate_params+0x60>
 80ab408:	e7a3      	b.n	80ab352 <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80ab40a:	2101      	movs	r1, #1
 80ab40c:	4638      	mov	r0, r7
 80ab40e:	f7fc fd99 	bl	80a7f44 <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80ab412:	2800      	cmp	r0, #0
 80ab414:	dd9d      	ble.n	80ab352 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80ab416:	4629      	mov	r1, r5
 80ab418:	4630      	mov	r0, r6
 80ab41a:	f7fc fd4e 	bl	80a7eba <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80ab41e:	2800      	cmp	r0, #0
 80ab420:	da97      	bge.n	80ab352 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 80ab422:	4629      	mov	r1, r5
 80ab424:	4638      	mov	r0, r7
 80ab426:	f7fc fd48 	bl	80a7eba <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80ab42a:	2800      	cmp	r0, #0
 80ab42c:	da91      	bge.n	80ab352 <mbedtls_rsa_validate_params+0x96>
 80ab42e:	e771      	b.n	80ab314 <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80ab430:	f1b9 0f00 	cmp.w	r9, #0
 80ab434:	f47f af57 	bne.w	80ab2e6 <mbedtls_rsa_validate_params+0x2a>
 80ab438:	e770      	b.n	80ab31c <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
 80ab43a:	4620      	mov	r0, r4
 80ab43c:	b007      	add	sp, #28
 80ab43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80ab442:	bf00      	nop
 80ab444:	ffffbe00 	.word	0xffffbe00

080ab448 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 80ab448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80ab44c:	469a      	mov	sl, r3
 80ab44e:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 80ab450:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 80ab452:	460e      	mov	r6, r1
 80ab454:	4691      	mov	r9, r2
 80ab456:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80ab45a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 80ab45c:	f7fc fac8 	bl	80a79f0 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 80ab460:	f1ba 0f00 	cmp.w	sl, #0
 80ab464:	d103      	bne.n	80ab46e <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 80ab466:	f1b8 0f00 	cmp.w	r8, #0
 80ab46a:	d110      	bne.n	80ab48e <mbedtls_rsa_deduce_crt+0x46>
 80ab46c:	e01d      	b.n	80ab4aa <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 80ab46e:	2201      	movs	r2, #1
 80ab470:	4639      	mov	r1, r7
 80ab472:	a801      	add	r0, sp, #4
 80ab474:	f7fc fe6f 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab478:	4604      	mov	r4, r0
 80ab47a:	b9f8      	cbnz	r0, 80ab4bc <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 80ab47c:	aa01      	add	r2, sp, #4
 80ab47e:	4649      	mov	r1, r9
 80ab480:	4650      	mov	r0, sl
 80ab482:	f7fd f8ba 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80ab486:	4604      	mov	r4, r0
 80ab488:	2800      	cmp	r0, #0
 80ab48a:	d0ec      	beq.n	80ab466 <mbedtls_rsa_deduce_crt+0x1e>
 80ab48c:	e016      	b.n	80ab4bc <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 80ab48e:	2201      	movs	r2, #1
 80ab490:	4631      	mov	r1, r6
 80ab492:	a801      	add	r0, sp, #4
 80ab494:	f7fc fe5f 	bl	80a8156 <mbedtls_mpi_sub_int>
 80ab498:	4604      	mov	r4, r0
 80ab49a:	b978      	cbnz	r0, 80ab4bc <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 80ab49c:	aa01      	add	r2, sp, #4
 80ab49e:	4649      	mov	r1, r9
 80ab4a0:	4640      	mov	r0, r8
 80ab4a2:	f7fd f8aa 	bl	80a85fa <mbedtls_mpi_mod_mpi>
 80ab4a6:	4604      	mov	r4, r0
 80ab4a8:	b940      	cbnz	r0, 80ab4bc <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 80ab4aa:	b90d      	cbnz	r5, 80ab4b0 <mbedtls_rsa_deduce_crt+0x68>
 80ab4ac:	462c      	mov	r4, r5
 80ab4ae:	e005      	b.n	80ab4bc <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 80ab4b0:	463a      	mov	r2, r7
 80ab4b2:	4631      	mov	r1, r6
 80ab4b4:	4628      	mov	r0, r5
 80ab4b6:	f7fd fb99 	bl	80a8bec <mbedtls_mpi_inv_mod>
 80ab4ba:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
 80ab4bc:	a801      	add	r0, sp, #4
 80ab4be:	f7fc fa9e 	bl	80a79fe <mbedtls_mpi_free>

    return( ret );
}
 80ab4c2:	4620      	mov	r0, r4
 80ab4c4:	b004      	add	sp, #16
 80ab4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080ab4ca <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80ab4ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80ab4cc:	b10b      	cbz	r3, 80ab4d2 <mbedtls_ssl_own_key+0x8>
 80ab4ce:	685b      	ldr	r3, [r3, #4]
 80ab4d0:	b913      	cbnz	r3, 80ab4d8 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 80ab4d2:	6803      	ldr	r3, [r0, #0]
 80ab4d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->key );
 80ab4d6:	b10b      	cbz	r3, 80ab4dc <mbedtls_ssl_own_key+0x12>
 80ab4d8:	6858      	ldr	r0, [r3, #4]
 80ab4da:	4770      	bx	lr
 80ab4dc:	4618      	mov	r0, r3
}
 80ab4de:	4770      	bx	lr

080ab4e0 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 80ab4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 80ab4e4:	6843      	ldr	r3, [r0, #4]

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 80ab4e6:	b095      	sub	sp, #84	; 0x54
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 80ab4e8:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 80ab4ea:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 80ab4ec:	f000 80c1 	beq.w	80ab672 <mbedtls_ssl_handshake_client_step+0x192>
 80ab4f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80ab4f2:	2b00      	cmp	r3, #0
 80ab4f4:	f000 80bd 	beq.w	80ab672 <mbedtls_ssl_handshake_client_step+0x192>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80ab4f8:	f7fb f84a 	bl	80a6590 <mbedtls_ssl_flush_output>
 80ab4fc:	2800      	cmp	r0, #0
 80ab4fe:	f040 8514 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 80ab502:	6863      	ldr	r3, [r4, #4]
 80ab504:	2b0c      	cmp	r3, #12
 80ab506:	d105      	bne.n	80ab514 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
 80ab508:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 80ab50a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80ab50e:	b10b      	cbz	r3, 80ab514 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 80ab510:	2311      	movs	r3, #17
 80ab512:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 80ab514:	6860      	ldr	r0, [r4, #4]
 80ab516:	2811      	cmp	r0, #17
 80ab518:	f200 80ab 	bhi.w	80ab672 <mbedtls_ssl_handshake_client_step+0x192>
 80ab51c:	e8df f010 	tbh	[pc, r0, lsl #1]
 80ab520:	00140012 	.word	0x00140012
 80ab524:	00dc004b 	.word	0x00dc004b
 80ab528:	010500e1 	.word	0x010500e1
 80ab52c:	012b0117 	.word	0x012b0117
 80ab530:	0190012f 	.word	0x0190012f
 80ab534:	020201fe 	.word	0x020201fe
 80ab538:	02290225 	.word	0x02290225
 80ab53c:	022f022d 	.word	0x022f022d
 80ab540:	020c00a9 	.word	0x020c00a9
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 80ab544:	2301      	movs	r3, #1
 80ab546:	e0ed      	b.n	80ab724 <mbedtls_ssl_handshake_client_step+0x244>
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
 80ab548:	6821      	ldr	r1, [r4, #0]
 80ab54a:	698b      	ldr	r3, [r1, #24]
 80ab54c:	2b00      	cmp	r3, #0
 80ab54e:	f000 821a 	beq.w	80ab986 <mbedtls_ssl_handshake_client_step+0x4a6>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 80ab552:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
 80ab556:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 80ab558:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
 80ab55c:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 80ab55e:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80ab562:	2800      	cmp	r0, #0
 80ab564:	f000 8085 	beq.w	80ab672 <mbedtls_ssl_handshake_client_step+0x192>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80ab568:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 80ab56c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80ab570:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80ab574:	1d33      	adds	r3, r6, #4
 80ab576:	f891 105d 	ldrb.w	r1, [r1, #93]	; 0x5d
 80ab57a:	f7fc f83b 	bl	80a75f4 <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 80ab57e:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 80ab580:	6b25      	ldr	r5, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 80ab582:	699f      	ldr	r7, [r3, #24]
 80ab584:	2204      	movs	r2, #4
 80ab586:	f505 71ba 	add.w	r1, r5, #372	; 0x174
 80ab58a:	69d8      	ldr	r0, [r3, #28]
 80ab58c:	47b8      	blx	r7
 80ab58e:	2800      	cmp	r0, #0
 80ab590:	f040 84cb 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 80ab594:	6823      	ldr	r3, [r4, #0]
 80ab596:	221c      	movs	r2, #28
 80ab598:	699f      	ldr	r7, [r3, #24]
 80ab59a:	f505 71bc 	add.w	r1, r5, #376	; 0x178
 80ab59e:	69d8      	ldr	r0, [r3, #28]
 80ab5a0:	47b8      	blx	r7
 80ab5a2:	2800      	cmp	r0, #0
 80ab5a4:	f040 84c1 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 80ab5a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80ab5aa:	1db1      	adds	r1, r6, #6
 80ab5ac:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 80ab5b0:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80ab5b4:	e1eb      	b.n	80ab98e <mbedtls_ssl_handshake_client_step+0x4ae>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80ab5b6:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
 80ab5b8:	6e65      	ldr	r5, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80ab5ba:	f7fb fc23 	bl	80a6e04 <mbedtls_ssl_read_record>
 80ab5be:	2800      	cmp	r0, #0
 80ab5c0:	f040 84b3 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80ab5c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80ab5c6:	2b16      	cmp	r3, #22
 80ab5c8:	d006      	beq.n	80ab5d8 <mbedtls_ssl_handshake_client_step+0xf8>
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80ab5ca:	220a      	movs	r2, #10
 80ab5cc:	2102      	movs	r1, #2
 80ab5ce:	4620      	mov	r0, r4
 80ab5d0:	f7fb f9ca 	bl	80a6968 <mbedtls_ssl_send_alert_message>
 80ab5d4:	f000 bc5b 	b.w	80abe8e <mbedtls_ssl_handshake_client_step+0x9ae>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 80ab5d8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80ab5da:	2b29      	cmp	r3, #41	; 0x29
 80ab5dc:	d938      	bls.n	80ab650 <mbedtls_ssl_handshake_client_step+0x170>
 80ab5de:	782b      	ldrb	r3, [r5, #0]
 80ab5e0:	2b02      	cmp	r3, #2
 80ab5e2:	d135      	bne.n	80ab650 <mbedtls_ssl_handshake_client_step+0x170>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 80ab5e4:	4621      	mov	r1, r4
 80ab5e6:	f851 3b0c 	ldr.w	r3, [r1], #12
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 80ab5ea:	f105 0804 	add.w	r8, r5, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 80ab5ee:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80ab5f2:	f104 0008 	add.w	r0, r4, #8
 80ab5f6:	4643      	mov	r3, r8
 80ab5f8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80ab5fc:	f7fb fffd 	bl	80a75fa <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 80ab600:	6823      	ldr	r3, [r4, #0]
 80ab602:	68a2      	ldr	r2, [r4, #8]
 80ab604:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 80ab608:	428a      	cmp	r2, r1
 80ab60a:	f2c0 830f 	blt.w	80abc2c <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 80ab60e:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 80ab610:	f893 005f 	ldrb.w	r0, [r3, #95]	; 0x5f
 80ab614:	4281      	cmp	r1, r0
 80ab616:	f2c0 8309 	blt.w	80abc2c <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 80ab61a:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 80ab61e:	4282      	cmp	r2, r0
 80ab620:	f300 8304 	bgt.w	80abc2c <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->major_ver > ssl->conf->max_major_ver ||
 80ab624:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80ab628:	4299      	cmp	r1, r3
 80ab62a:	f300 82ff 	bgt.w	80abc2c <mbedtls_ssl_handshake_client_step+0x74c>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 80ab62e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80ab630:	1daa      	adds	r2, r5, #6
 80ab632:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80ab636:	f105 0126 	add.w	r1, r5, #38	; 0x26
 80ab63a:	f852 0b04 	ldr.w	r0, [r2], #4
 80ab63e:	428a      	cmp	r2, r1
 80ab640:	f843 0b04 	str.w	r0, [r3], #4
 80ab644:	d1f9      	bne.n	80ab63a <mbedtls_ssl_handshake_client_step+0x15a>

    n = buf[34];
 80ab646:	f895 6026 	ldrb.w	r6, [r5, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
 80ab64a:	2e20      	cmp	r6, #32
 80ab64c:	f240 82f5 	bls.w	80abc3a <mbedtls_ssl_handshake_client_step+0x75a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80ab650:	2232      	movs	r2, #50	; 0x32
 80ab652:	e03a      	b.n	80ab6ca <mbedtls_ssl_handshake_client_step+0x1ea>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 80ab654:	4648      	mov	r0, r9
 80ab656:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 80ab65a:	f7f8 fcf9 	bl	80a4050 <mbedtls_ssl_ciphersuite_from_id>
 80ab65e:	f8ca 0000 	str.w	r0, [sl]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 80ab662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ab664:	6819      	ldr	r1, [r3, #0]
 80ab666:	b939      	cbnz	r1, 80ab678 <mbedtls_ssl_handshake_client_step+0x198>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80ab668:	2250      	movs	r2, #80	; 0x50
 80ab66a:	2102      	movs	r1, #2
 80ab66c:	4620      	mov	r0, r4
 80ab66e:	f7fb f97b 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80ab672:	48ae      	ldr	r0, [pc, #696]	; (80ab92c <mbedtls_ssl_handshake_client_step+0x44c>)
 80ab674:	f000 bc59 	b.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 80ab678:	4620      	mov	r0, r4
 80ab67a:	f7fb fc8f 	bl	80a6f9c <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 80ab67e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80ab682:	3527      	adds	r5, #39	; 0x27
 80ab684:	f8da 31e4 	ldr.w	r3, [sl, #484]	; 0x1e4
 80ab688:	2b00      	cmp	r3, #0
 80ab68a:	f040 8311 	bne.w	80abcb0 <mbedtls_ssl_handshake_client_step+0x7d0>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 80ab68e:	6863      	ldr	r3, [r4, #4]
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 80ab690:	4629      	mov	r1, r5
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 80ab692:	3301      	adds	r3, #1
 80ab694:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
 80ab696:	2300      	movs	r3, #0
 80ab698:	f8ca 31e4 	str.w	r3, [sl, #484]	; 0x1e4
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 80ab69c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80ab69e:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
 80ab6a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80ab6a4:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
 80ab6a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 80ab6a8:	4632      	mov	r2, r6
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
 80ab6aa:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 80ab6ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80ab6ae:	300c      	adds	r0, #12
 80ab6b0:	f001 ff31 	bl	80ad516 <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 80ab6b4:	6823      	ldr	r3, [r4, #0]
 80ab6b6:	68e2      	ldr	r2, [r4, #12]
 80ab6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ab6bc:	3b04      	subs	r3, #4
 80ab6be:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80ab6c2:	2800      	cmp	r0, #0
 80ab6c4:	f040 831b 	bne.w	80abcfe <mbedtls_ssl_handshake_client_step+0x81e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 80ab6c8:	222f      	movs	r2, #47	; 0x2f
 80ab6ca:	2102      	movs	r1, #2
 80ab6cc:	4620      	mov	r0, r4
 80ab6ce:	f7fb f94b 	bl	80a6968 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80ab6d2:	4897      	ldr	r0, [pc, #604]	; (80ab930 <mbedtls_ssl_handshake_client_step+0x450>)
 80ab6d4:	f000 bc29 	b.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 80ab6d8:	4620      	mov	r0, r4
 80ab6da:	f7fb fe85 	bl	80a73e8 <mbedtls_ssl_parse_certificate>
           break;
 80ab6de:	f000 bc24 	b.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80ab6e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ab6e4:	681d      	ldr	r5, [r3, #0]
    unsigned char *p = NULL, *end = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 80ab6e6:	7aab      	ldrb	r3, [r5, #10]
 80ab6e8:	2b01      	cmp	r3, #1
 80ab6ea:	d101      	bne.n	80ab6f0 <mbedtls_ssl_handshake_client_step+0x210>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
 80ab6ec:	2305      	movs	r3, #5
 80ab6ee:	e386      	b.n	80abdfe <mbedtls_ssl_handshake_client_step+0x91e>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80ab6f0:	4620      	mov	r0, r4
 80ab6f2:	f7fb fb87 	bl	80a6e04 <mbedtls_ssl_read_record>
 80ab6f6:	2800      	cmp	r0, #0
 80ab6f8:	f040 8417 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80ab6fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80ab6fe:	2b16      	cmp	r3, #22
 80ab700:	f47f af63 	bne.w	80ab5ca <mbedtls_ssl_handshake_client_step+0xea>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 80ab704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80ab706:	781b      	ldrb	r3, [r3, #0]
 80ab708:	2b0c      	cmp	r3, #12
 80ab70a:	f000 813e 	beq.w	80ab98a <mbedtls_ssl_handshake_client_step+0x4aa>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80ab70e:	7aab      	ldrb	r3, [r5, #10]
 80ab710:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80ab714:	2b05      	cmp	r3, #5
 80ab716:	f47f af58 	bne.w	80ab5ca <mbedtls_ssl_handshake_client_step+0xea>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 80ab71a:	2301      	movs	r3, #1
 80ab71c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 80ab720:	6863      	ldr	r3, [r4, #4]
 80ab722:	3301      	adds	r3, #1
 80ab724:	6063      	str	r3, [r4, #4]
 80ab726:	f000 bc00 	b.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80ab72a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ab72c:	681b      	ldr	r3, [r3, #0]
 80ab72e:	7a9b      	ldrb	r3, [r3, #10]
 80ab730:	3b01      	subs	r3, #1
 80ab732:	b2db      	uxtb	r3, r3
 80ab734:	2b09      	cmp	r3, #9
 80ab736:	f200 8361 	bhi.w	80abdfc <mbedtls_ssl_handshake_client_step+0x91c>
 80ab73a:	f240 320f 	movw	r2, #783	; 0x30f
 80ab73e:	2501      	movs	r5, #1
 80ab740:	fa05 f303 	lsl.w	r3, r5, r3
 80ab744:	401a      	ands	r2, r3
 80ab746:	2a00      	cmp	r2, #0
 80ab748:	f000 8358 	beq.w	80abdfc <mbedtls_ssl_handshake_client_step+0x91c>
 80ab74c:	e35a      	b.n	80abe04 <mbedtls_ssl_handshake_client_step+0x924>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80ab74e:	4620      	mov	r0, r4
 80ab750:	f7fb fb58 	bl	80a6e04 <mbedtls_ssl_read_record>
 80ab754:	2800      	cmp	r0, #0
 80ab756:	f040 83e8 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80ab75a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80ab75c:	2b16      	cmp	r3, #22
 80ab75e:	f040 8396 	bne.w	80abe8e <mbedtls_ssl_handshake_client_step+0x9ae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 80ab762:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80ab764:	2b04      	cmp	r3, #4
 80ab766:	f040 838b 	bne.w	80abe80 <mbedtls_ssl_handshake_client_step+0x9a0>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 80ab76a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 80ab76c:	781b      	ldrb	r3, [r3, #0]
 80ab76e:	2b0e      	cmp	r3, #14
 80ab770:	f040 8386 	bne.w	80abe80 <mbedtls_ssl_handshake_client_step+0x9a0>
 80ab774:	e7d4      	b.n	80ab720 <mbedtls_ssl_handshake_client_step+0x240>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 80ab776:	4620      	mov	r0, r4
 80ab778:	f7fb fb62 	bl	80a6e40 <mbedtls_ssl_write_certificate>
           break;
 80ab77c:	e3d5      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80ab77e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 80ab780:	681b      	ldr	r3, [r3, #0]
 80ab782:	7a9f      	ldrb	r7, [r3, #10]
 80ab784:	2f01      	cmp	r7, #1
 80ab786:	f040 8100 	bne.w	80ab98a <mbedtls_ssl_handshake_client_step+0x4aa>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 80ab78a:	6820      	ldr	r0, [r4, #0]
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 80ab78c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80ab790:	68e3      	ldr	r3, [r4, #12]
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80ab792:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 80ab796:	f508 76da 	add.w	r6, r8, #436	; 0x1b4
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80ab79a:	2b00      	cmp	r3, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80ab79c:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80ab7a0:	4633      	mov	r3, r6
 80ab7a2:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80ab7a6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80ab7aa:	bf14      	ite	ne
 80ab7ac:	2502      	movne	r5, #2
 80ab7ae:	2500      	moveq	r5, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80ab7b0:	f7fb ff20 	bl	80a75f4 <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 80ab7b4:	6823      	ldr	r3, [r4, #0]
 80ab7b6:	222e      	movs	r2, #46	; 0x2e
 80ab7b8:	f8d3 9018 	ldr.w	r9, [r3, #24]
 80ab7bc:	f508 71db 	add.w	r1, r8, #438	; 0x1b6
 80ab7c0:	69d8      	ldr	r0, [r3, #28]
 80ab7c2:	47c8      	blx	r9
 80ab7c4:	2800      	cmp	r0, #0
 80ab7c6:	f040 83b0 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
 80ab7ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80ab7cc:	2230      	movs	r2, #48	; 0x30
 80ab7ce:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    if( ssl->session_negotiate->peer_cert == NULL )
 80ab7d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80ab7d4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80ab7d6:	2800      	cmp	r0, #0
 80ab7d8:	f000 8359 	beq.w	80abe8e <mbedtls_ssl_handshake_client_step+0x9ae>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 80ab7dc:	4639      	mov	r1, r7
 80ab7de:	30bc      	adds	r0, #188	; 0xbc
 80ab7e0:	f7fd fb92 	bl	80a8f08 <mbedtls_pk_can_do>
 80ab7e4:	2800      	cmp	r0, #0
 80ab7e6:	f000 8354 	beq.w	80abe92 <mbedtls_ssl_handshake_client_step+0x9b2>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 80ab7ea:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 80ab7ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80ab7ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80ab7f0:	9104      	str	r1, [sp, #16]
 80ab7f2:	69d1      	ldr	r1, [r2, #28]
 80ab7f4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80ab7f6:	9103      	str	r1, [sp, #12]
 80ab7f8:	6992      	ldr	r2, [r2, #24]
 80ab7fa:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 80ab7fe:	9202      	str	r2, [sp, #8]
 80ab800:	f5c5 52ff 	rsb	r2, r5, #8160	; 0x1fe0
 80ab804:	321c      	adds	r2, #28
 80ab806:	9201      	str	r2, [sp, #4]
 80ab808:	aa08      	add	r2, sp, #32
 80ab80a:	9200      	str	r2, [sp, #0]
 80ab80c:	9a04      	ldr	r2, [sp, #16]
 80ab80e:	1d2b      	adds	r3, r5, #4
 80ab810:	443b      	add	r3, r7
 80ab812:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 80ab816:	4631      	mov	r1, r6
 80ab818:	30bc      	adds	r0, #188	; 0xbc
 80ab81a:	f7fd fbdf 	bl	80a8fdc <mbedtls_pk_encrypt>
 80ab81e:	2800      	cmp	r0, #0
 80ab820:	f040 8383 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 80ab824:	2d00      	cmp	r5, #0
 80ab826:	f000 8336 	beq.w	80abe96 <mbedtls_ssl_handshake_client_step+0x9b6>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 80ab82a:	9b08      	ldr	r3, [sp, #32]
 80ab82c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80ab830:	0a19      	lsrs	r1, r3, #8
 80ab832:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 80ab834:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80ab838:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 80ab83a:	3302      	adds	r3, #2
 80ab83c:	9308      	str	r3, [sp, #32]
 80ab83e:	e32a      	b.n	80abe96 <mbedtls_ssl_handshake_client_step+0x9b6>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80ab840:	6c23      	ldr	r3, [r4, #64]	; 0x40
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80ab842:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80ab844:	681d      	ldr	r5, [r3, #0]
    size_t n = 0, offset = 0;
 80ab846:	2300      	movs	r3, #0
 80ab848:	9307      	str	r3, [sp, #28]
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80ab84a:	f7fa fced 	bl	80a6228 <mbedtls_ssl_derive_keys>
 80ab84e:	2800      	cmp	r0, #0
 80ab850:	f040 836b 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80ab854:	7aab      	ldrb	r3, [r5, #10]
 80ab856:	1f5a      	subs	r2, r3, #5
 80ab858:	2a03      	cmp	r2, #3
 80ab85a:	d901      	bls.n	80ab860 <mbedtls_ssl_handshake_client_step+0x380>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 80ab85c:	2b0b      	cmp	r3, #11
 80ab85e:	d102      	bne.n	80ab866 <mbedtls_ssl_handshake_client_step+0x386>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
 80ab860:	6863      	ldr	r3, [r4, #4]
 80ab862:	3301      	adds	r3, #1
 80ab864:	e2cb      	b.n	80abdfe <mbedtls_ssl_handshake_client_step+0x91e>
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 80ab866:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80ab86a:	2b00      	cmp	r3, #0
 80ab86c:	d0f8      	beq.n	80ab860 <mbedtls_ssl_handshake_client_step+0x380>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80ab86e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80ab870:	b10d      	cbz	r5, 80ab876 <mbedtls_ssl_handshake_client_step+0x396>
 80ab872:	686b      	ldr	r3, [r5, #4]
 80ab874:	b91b      	cbnz	r3, 80ab87e <mbedtls_ssl_handshake_client_step+0x39e>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 80ab876:	6823      	ldr	r3, [r4, #0]
 80ab878:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 80ab87a:	2b00      	cmp	r3, #0
 80ab87c:	d0f0      	beq.n	80ab860 <mbedtls_ssl_handshake_client_step+0x380>
 80ab87e:	681b      	ldr	r3, [r3, #0]
 80ab880:	2b00      	cmp	r3, #0
 80ab882:	d0ed      	beq.n	80ab860 <mbedtls_ssl_handshake_client_step+0x380>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 80ab884:	4620      	mov	r0, r4
 80ab886:	f7ff fe20 	bl	80ab4ca <mbedtls_ssl_own_key>
 80ab88a:	2800      	cmp	r0, #0
 80ab88c:	d044      	beq.n	80ab918 <mbedtls_ssl_handshake_client_step+0x438>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
 80ab88e:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
 80ab892:	a908      	add	r1, sp, #32
 80ab894:	4620      	mov	r0, r4
 80ab896:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80ab898:	68e3      	ldr	r3, [r4, #12]
 80ab89a:	2b03      	cmp	r3, #3
 80ab89c:	d175      	bne.n	80ab98a <mbedtls_ssl_handshake_client_step+0x4aa>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 80ab89e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 80ab8a0:	4620      	mov	r0, r4
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 80ab8a2:	681b      	ldr	r3, [r3, #0]
 80ab8a4:	7a5d      	ldrb	r5, [r3, #9]
 80ab8a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80ab8aa:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 80ab8ac:	bf0b      	itete	eq
 80ab8ae:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 80ab8b0:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 80ab8b2:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 80ab8b4:	711a      	strbne	r2, [r3, #4]
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 80ab8b6:	bf18      	it	ne
 80ab8b8:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 80ab8ba:	f7ff fe06 	bl	80ab4ca <mbedtls_ssl_own_key>
 80ab8be:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 80ab8c2:	f7fb fd59 	bl	80a7378 <mbedtls_ssl_sig_from_pk>
 80ab8c6:	7170      	strb	r0, [r6, #5]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 80ab8c8:	4620      	mov	r0, r4
 80ab8ca:	f7ff fdfe 	bl	80ab4ca <mbedtls_ssl_own_key>
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 80ab8ce:	6823      	ldr	r3, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 80ab8d0:	4629      	mov	r1, r5
 80ab8d2:	69da      	ldr	r2, [r3, #28]
 80ab8d4:	9203      	str	r2, [sp, #12]
 80ab8d6:	699b      	ldr	r3, [r3, #24]
 80ab8d8:	aa08      	add	r2, sp, #32
 80ab8da:	9302      	str	r3, [sp, #8]
 80ab8dc:	ab07      	add	r3, sp, #28
 80ab8de:	9301      	str	r3, [sp, #4]
 80ab8e0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80ab8e4:	3308      	adds	r3, #8
 80ab8e6:	9300      	str	r3, [sp, #0]
 80ab8e8:	2300      	movs	r3, #0
 80ab8ea:	f7fd fb43 	bl	80a8f74 <mbedtls_pk_sign>
 80ab8ee:	2800      	cmp	r0, #0
 80ab8f0:	f040 831b 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 80ab8f4:	9b07      	ldr	r3, [sp, #28]
 80ab8f6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80ab8fa:	0a19      	lsrs	r1, r3, #8
 80ab8fc:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 80ab8fe:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80ab902:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
 80ab904:	3308      	adds	r3, #8
 80ab906:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80ab90a:	2316      	movs	r3, #22
 80ab90c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 80ab910:	220f      	movs	r2, #15
 80ab912:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80ab916:	e2c8      	b.n	80abeaa <mbedtls_ssl_handshake_client_step+0x9ca>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 80ab918:	4806      	ldr	r0, [pc, #24]	; (80ab934 <mbedtls_ssl_handshake_client_step+0x454>)
 80ab91a:	e306      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 80ab91c:	4620      	mov	r0, r4
 80ab91e:	f7fb faf3 	bl	80a6f08 <mbedtls_ssl_write_change_cipher_spec>
           break;
 80ab922:	e302      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 80ab924:	4620      	mov	r0, r4
 80ab926:	f7fb fb47 	bl	80a6fb8 <mbedtls_ssl_write_finished>
           break;
 80ab92a:	e2fe      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
 80ab92c:	ffff8f00 	.word	0xffff8f00
 80ab930:	ffff8680 	.word	0xffff8680
 80ab934:	ffff8a00 	.word	0xffff8a00
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80ab938:	4620      	mov	r0, r4
 80ab93a:	f7fb fa63 	bl	80a6e04 <mbedtls_ssl_read_record>
 80ab93e:	2800      	cmp	r0, #0
 80ab940:	f040 82f3 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80ab944:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80ab946:	2b16      	cmp	r3, #22
 80ab948:	f47f ae3f 	bne.w	80ab5ca <mbedtls_ssl_handshake_client_step+0xea>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 80ab94c:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80ab94e:	783b      	ldrb	r3, [r7, #0]
 80ab950:	2b04      	cmp	r3, #4
 80ab952:	d103      	bne.n	80ab95c <mbedtls_ssl_handshake_client_step+0x47c>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 80ab954:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 80ab956:	2b09      	cmp	r3, #9
 80ab958:	f200 82af 	bhi.w	80abeba <mbedtls_ssl_handshake_client_step+0x9da>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80ab95c:	2232      	movs	r2, #50	; 0x32
 80ab95e:	2102      	movs	r1, #2
 80ab960:	4620      	mov	r0, r4
 80ab962:	f7fb f801 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 80ab966:	48c1      	ldr	r0, [pc, #772]	; (80abc6c <mbedtls_ssl_handshake_client_step+0x78c>)
 80ab968:	e2df      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 80ab96a:	4620      	mov	r0, r4
 80ab96c:	f7fb fada 	bl	80a6f24 <mbedtls_ssl_parse_change_cipher_spec>
           break;
 80ab970:	e2db      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 80ab972:	4620      	mov	r0, r4
 80ab974:	f7fb fb68 	bl	80a7048 <mbedtls_ssl_parse_finished>
           break;
 80ab978:	e2d7      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 80ab97a:	230f      	movs	r3, #15
 80ab97c:	e23f      	b.n	80abdfe <mbedtls_ssl_handshake_client_step+0x91e>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 80ab97e:	4620      	mov	r0, r4
 80ab980:	f7fb fc6e 	bl	80a7260 <mbedtls_ssl_handshake_wrapup>
 80ab984:	e23c      	b.n	80abe00 <mbedtls_ssl_handshake_client_step+0x920>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
 80ab986:	48ba      	ldr	r0, [pc, #744]	; (80abc70 <mbedtls_ssl_handshake_client_step+0x790>)
 80ab988:	e2cf      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80ab98a:	48ba      	ldr	r0, [pc, #744]	; (80abc74 <mbedtls_ssl_handshake_client_step+0x794>)
 80ab98c:	e2cd      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 80ab98e:	f852 0b04 	ldr.w	r0, [r2], #4
 80ab992:	429a      	cmp	r2, r3
 80ab994:	f841 0b04 	str.w	r0, [r1], #4
 80ab998:	d1f9      	bne.n	80ab98e <mbedtls_ssl_handshake_client_step+0x4ae>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 80ab99a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80ab99c:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
 80ab99e:	f1a3 0210 	sub.w	r2, r3, #16
 80ab9a2:	2a10      	cmp	r2, #16
 80ab9a4:	d806      	bhi.n	80ab9b4 <mbedtls_ssl_handshake_client_step+0x4d4>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 80ab9a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
 80ab9a8:	f8d2 21e4 	ldr.w	r2, [r2, #484]	; 0x1e4
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
 80ab9ac:	2a00      	cmp	r2, #0
 80ab9ae:	bf08      	it	eq
 80ab9b0:	2300      	moveq	r3, #0
 80ab9b2:	e000      	b.n	80ab9b6 <mbedtls_ssl_handshake_client_step+0x4d6>
 80ab9b4:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
 80ab9b6:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 80ab9b8:	b16a      	cbz	r2, 80ab9d6 <mbedtls_ssl_handshake_client_step+0x4f6>
 80ab9ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 80ab9bc:	b15a      	cbz	r2, 80ab9d6 <mbedtls_ssl_handshake_client_step+0x4f6>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 80ab9be:	6823      	ldr	r3, [r4, #0]
 80ab9c0:	2220      	movs	r2, #32
 80ab9c2:	699d      	ldr	r5, [r3, #24]
 80ab9c4:	310c      	adds	r1, #12
 80ab9c6:	69d8      	ldr	r0, [r3, #28]
 80ab9c8:	47a8      	blx	r5

            if( ret != 0 )
 80ab9ca:	2800      	cmp	r0, #0
 80ab9cc:	f040 82ad 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
 80ab9d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80ab9d2:	2320      	movs	r3, #32
 80ab9d4:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 80ab9d6:	f106 0527 	add.w	r5, r6, #39	; 0x27
 80ab9da:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26

    for( i = 0; i < n; i++ )
 80ab9de:	2200      	movs	r2, #0
 80ab9e0:	4293      	cmp	r3, r2
 80ab9e2:	d005      	beq.n	80ab9f0 <mbedtls_ssl_handshake_client_step+0x510>
        *p++ = ssl->session_negotiate->id[i];
 80ab9e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80ab9e6:	4411      	add	r1, r2
 80ab9e8:	7b09      	ldrb	r1, [r1, #12]
 80ab9ea:	54a9      	strb	r1, [r5, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
 80ab9ec:	3201      	adds	r2, #1
 80ab9ee:	e7f7      	b.n	80ab9e0 <mbedtls_ssl_handshake_client_step+0x500>
 80ab9f0:	441d      	add	r5, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 80ab9f2:	68e2      	ldr	r2, [r4, #12]
 80ab9f4:	6823      	ldr	r3, [r4, #0]

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
 80ab9f6:	f105 0902 	add.w	r9, r5, #2
 80ab9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
 80ab9fe:	2700      	movs	r7, #0
 80aba00:	f1a3 0804 	sub.w	r8, r3, #4
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
 80aba04:	f858 bf04 	ldr.w	fp, [r8, #4]!
 80aba08:	f1bb 0f00 	cmp.w	fp, #0
 80aba0c:	d01c      	beq.n	80aba48 <mbedtls_ssl_handshake_client_step+0x568>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 80aba0e:	4658      	mov	r0, fp
 80aba10:	f7f8 fb1e 	bl	80a4050 <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
 80aba14:	6822      	ldr	r2, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 80aba16:	f892 105d 	ldrb.w	r1, [r2, #93]	; 0x5d
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 80aba1a:	2800      	cmp	r0, #0
 80aba1c:	d0f2      	beq.n	80aba04 <mbedtls_ssl_handshake_client_step+0x524>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 80aba1e:	6903      	ldr	r3, [r0, #16]
 80aba20:	4299      	cmp	r1, r3
 80aba22:	dbef      	blt.n	80aba04 <mbedtls_ssl_handshake_client_step+0x524>
 80aba24:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 80aba28:	6983      	ldr	r3, [r0, #24]
 80aba2a:	429a      	cmp	r2, r3
 80aba2c:	dcea      	bgt.n	80aba04 <mbedtls_ssl_handshake_client_step+0x524>

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 80aba2e:	f8d8 3000 	ldr.w	r3, [r8]
            continue;

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
 80aba32:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 80aba34:	121a      	asrs	r2, r3, #8
 80aba36:	464b      	mov	r3, r9
 80aba38:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 80aba3c:	f8d8 2000 	ldr.w	r2, [r8]
 80aba40:	f889 2001 	strb.w	r2, [r9, #1]
 80aba44:	4699      	mov	r9, r3
 80aba46:	e7dd      	b.n	80aba04 <mbedtls_ssl_handshake_client_step+0x524>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 80aba48:	23ff      	movs	r3, #255	; 0xff
        n++;
 80aba4a:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 80aba4c:	f889 3001 	strb.w	r3, [r9, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 80aba50:	09fb      	lsrs	r3, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 80aba52:	f889 b000 	strb.w	fp, [r9]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 80aba56:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 80aba58:	702b      	strb	r3, [r5, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 80aba5a:	2301      	movs	r3, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 80aba5c:	706f      	strb	r7, [r5, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 80aba5e:	f889 3002 	strb.w	r3, [r9, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 80aba62:	f889 b003 	strb.w	fp, [r9, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80aba66:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 80aba6a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 80aba6e:	f109 0704 	add.w	r7, r9, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 80aba72:	f109 0806 	add.w	r8, r9, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80aba76:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 80aba7a:	b358      	cbz	r0, 80abad4 <mbedtls_ssl_handshake_client_step+0x5f4>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 80aba7c:	f001 fd91 	bl	80ad5a2 <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 80aba80:	45a8      	cmp	r8, r5
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 80aba82:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 80aba84:	d828      	bhi.n	80abad8 <mbedtls_ssl_handshake_client_step+0x5f8>
 80aba86:	f100 0a09 	add.w	sl, r0, #9
 80aba8a:	ebc8 0505 	rsb	r5, r8, r5
 80aba8e:	4555      	cmp	r5, sl
 80aba90:	d322      	bcc.n	80abad8 <mbedtls_ssl_handshake_client_step+0x5f8>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 80aba92:	1d43      	adds	r3, r0, #5
 80aba94:	0a1b      	lsrs	r3, r3, #8
 80aba96:	f889 3008 	strb.w	r3, [r9, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 80aba9a:	b2c3      	uxtb	r3, r0
 80aba9c:	1d59      	adds	r1, r3, #5
 80aba9e:	f889 1009 	strb.w	r1, [r9, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 80abaa2:	1cc1      	adds	r1, r0, #3
 80abaa4:	0a09      	lsrs	r1, r1, #8
 80abaa6:	f889 100a 	strb.w	r1, [r9, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 80abaaa:	1cd9      	adds	r1, r3, #3
 80abaac:	f889 100b 	strb.w	r1, [r9, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 80abab0:	0a01      	lsrs	r1, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 80abab2:	f889 b006 	strb.w	fp, [r9, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 80abab6:	f889 b007 	strb.w	fp, [r9, #7]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 80ababa:	f889 b00c 	strb.w	fp, [r9, #12]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 80ababe:	f889 100d 	strb.w	r1, [r9, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 80abac2:	f889 300e 	strb.w	r3, [r9, #14]

    memcpy( p, ssl->hostname, hostname_len );
 80abac6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80abaca:	f109 000f 	add.w	r0, r9, #15
 80abace:	f001 fd22 	bl	80ad516 <memcpy>
 80abad2:	e002      	b.n	80abada <mbedtls_ssl_handshake_client_step+0x5fa>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
 80abad4:	4682      	mov	sl, r0
 80abad6:	e000      	b.n	80abada <mbedtls_ssl_handshake_client_step+0x5fa>
 80abad8:	46da      	mov	sl, fp
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 80abada:	6823      	ldr	r3, [r4, #0]
 80abadc:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 80abae0:	2a03      	cmp	r2, #3
 80abae2:	d13c      	bne.n	80abb5e <mbedtls_ssl_handshake_client_step+0x67e>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 80abae4:	6d59      	ldr	r1, [r3, #84]	; 0x54
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t sig_alg_len = 0;
 80abae6:	2000      	movs	r0, #0
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 80abae8:	f851 3010 	ldr.w	r3, [r1, r0, lsl #1]
 80abaec:	b10b      	cbz	r3, 80abaf2 <mbedtls_ssl_handshake_client_step+0x612>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
 80abaee:	3002      	adds	r0, #2
 80abaf0:	e7fa      	b.n	80abae8 <mbedtls_ssl_handshake_client_step+0x608>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80abaf2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 80abaf6:	f10a 0b02 	add.w	fp, sl, #2
 80abafa:	44bb      	add	fp, r7
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80abafc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 80abb00:	4593      	cmp	fp, r2
 80abb02:	d82d      	bhi.n	80abb60 <mbedtls_ssl_handshake_client_step+0x680>
 80abb04:	ebcb 0202 	rsb	r2, fp, r2
 80abb08:	3006      	adds	r0, #6
 80abb0a:	4282      	cmp	r2, r0
 80abb0c:	d328      	bcc.n	80abb60 <mbedtls_ssl_handshake_client_step+0x680>
 80abb0e:	461d      	mov	r5, r3
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 80abb10:	f851 0015 	ldr.w	r0, [r1, r5, lsl #1]
 80abb14:	9105      	str	r1, [sp, #20]
 80abb16:	1caa      	adds	r2, r5, #2
 80abb18:	b170      	cbz	r0, 80abb38 <mbedtls_ssl_handshake_client_step+0x658>
 80abb1a:	9204      	str	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80abb1c:	f7fb fc34 	bl	80a7388 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 80abb20:	9a04      	ldr	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80abb22:	eb0b 0305 	add.w	r3, fp, r5
 80abb26:	7198      	strb	r0, [r3, #6]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 80abb28:	4615      	mov	r5, r2
 80abb2a:	eb0b 0302 	add.w	r3, fp, r2
 80abb2e:	f04f 0201 	mov.w	r2, #1
 80abb32:	9905      	ldr	r1, [sp, #20]
 80abb34:	715a      	strb	r2, [r3, #5]
 80abb36:	e7eb      	b.n	80abb10 <mbedtls_ssl_handshake_client_step+0x630>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 80abb38:	230d      	movs	r3, #13
 80abb3a:	f88b 3001 	strb.w	r3, [fp, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 80abb3e:	0a13      	lsrs	r3, r2, #8
 80abb40:	f88b 3002 	strb.w	r3, [fp, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 80abb44:	b2eb      	uxtb	r3, r5
 80abb46:	1c9a      	adds	r2, r3, #2
 80abb48:	f88b 2003 	strb.w	r2, [fp, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 80abb4c:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 80abb4e:	f88b 3005 	strb.w	r3, [fp, #5]
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 80abb52:	f88b 0000 	strb.w	r0, [fp]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 80abb56:	f88b 2004 	strb.w	r2, [fp, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );

    *olen = 6 + sig_alg_len;
 80abb5a:	1dab      	adds	r3, r5, #6
 80abb5c:	e000      	b.n	80abb60 <mbedtls_ssl_handshake_client_step+0x680>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
 80abb5e:	2300      	movs	r3, #0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 80abb60:	6822      	ldr	r2, [r4, #0]
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 80abb62:	4453      	add	r3, sl
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 80abb64:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80abb68:	f412 72e0 	ands.w	r2, r2, #448	; 0x1c0
 80abb6c:	d018      	beq.n	80abba0 <mbedtls_ssl_handshake_client_step+0x6c0>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80abb6e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 80abb72:	1c99      	adds	r1, r3, #2
 80abb74:	4439      	add	r1, r7
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80abb76:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
 80abb7a:	4281      	cmp	r1, r0
 80abb7c:	f04f 0200 	mov.w	r2, #0
 80abb80:	d80e      	bhi.n	80abba0 <mbedtls_ssl_handshake_client_step+0x6c0>
 80abb82:	1a40      	subs	r0, r0, r1
 80abb84:	2804      	cmp	r0, #4
 80abb86:	d90b      	bls.n	80abba0 <mbedtls_ssl_handshake_client_step+0x6c0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 80abb88:	2001      	movs	r0, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 80abb8a:	700a      	strb	r2, [r1, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 80abb8c:	7048      	strb	r0, [r1, #1]

    *p++ = 0x00;
 80abb8e:	708a      	strb	r2, [r1, #2]
    *p++ = 1;
 80abb90:	70c8      	strb	r0, [r1, #3]

    *p++ = ssl->conf->mfl_code;
 80abb92:	6822      	ldr	r2, [r4, #0]
 80abb94:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80abb98:	f3c2 1282 	ubfx	r2, r2, #6, #3
 80abb9c:	710a      	strb	r2, [r1, #4]

    *olen = 5;
 80abb9e:	2205      	movs	r2, #5
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 80abba0:	189d      	adds	r5, r3, r2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 80abba2:	6823      	ldr	r3, [r4, #0]
 80abba4:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 80abba8:	f001 0102 	and.w	r1, r1, #2
 80abbac:	f001 0aff 	and.w	sl, r1, #255	; 0xff
 80abbb0:	b329      	cbz	r1, 80abbfe <mbedtls_ssl_handshake_client_step+0x71e>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80abbb2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 80abbb6:	1ca8      	adds	r0, r5, #2
 80abbb8:	4438      	add	r0, r7
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80abbba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 80abbbe:	4298      	cmp	r0, r3
 80abbc0:	d816      	bhi.n	80abbf0 <mbedtls_ssl_handshake_client_step+0x710>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 80abbc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 80abbc4:	1a1b      	subs	r3, r3, r0
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 80abbc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 80abbc8:	f102 0a04 	add.w	sl, r2, #4
 80abbcc:	4553      	cmp	r3, sl
 80abbce:	f04f 0300 	mov.w	r3, #0
 80abbd2:	d310      	bcc.n	80abbf6 <mbedtls_ssl_handshake_client_step+0x716>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 80abbd4:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 80abbd6:	2323      	movs	r3, #35	; 0x23
 80abbd8:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 80abbda:	0a13      	lsrs	r3, r2, #8
 80abbdc:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 80abbde:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 80abbe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80abbe2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80abbe4:	b149      	cbz	r1, 80abbfa <mbedtls_ssl_handshake_client_step+0x71a>
 80abbe6:	b142      	cbz	r2, 80abbfa <mbedtls_ssl_handshake_client_step+0x71a>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
 80abbe8:	3004      	adds	r0, #4
 80abbea:	f001 fc94 	bl	80ad516 <memcpy>
 80abbee:	e006      	b.n	80abbfe <mbedtls_ssl_handshake_client_step+0x71e>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
 80abbf0:	f04f 0a00 	mov.w	sl, #0
 80abbf4:	e003      	b.n	80abbfe <mbedtls_ssl_handshake_client_step+0x71e>
 80abbf6:	469a      	mov	sl, r3
 80abbf8:	e001      	b.n	80abbfe <mbedtls_ssl_handshake_client_step+0x71e>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
 80abbfa:	f04f 0a04 	mov.w	sl, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
 80abbfe:	eb15 030a 	adds.w	r3, r5, sl
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 80abc02:	bf1f      	itttt	ne
 80abc04:	0a1a      	lsrne	r2, r3, #8
 80abc06:	f889 2004 	strbne.w	r2, [r9, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 80abc0a:	f889 3005 	strbne.w	r3, [r9, #5]
        p += ext_len;
 80abc0e:	eb08 0703 	addne.w	r7, r8, r3
    }

    ssl->out_msglen  = p - buf;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80abc12:	2316      	movs	r3, #22
 80abc14:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 80abc18:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80abc1c:	2201      	movs	r2, #1
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
 80abc1e:	1bbe      	subs	r6, r7, r6
 80abc20:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 80abc24:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 80abc26:	6863      	ldr	r3, [r4, #4]
 80abc28:	4413      	add	r3, r2
 80abc2a:	e141      	b.n	80abeb0 <mbedtls_ssl_handshake_client_step+0x9d0>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
 80abc2c:	2246      	movs	r2, #70	; 0x46
 80abc2e:	2102      	movs	r1, #2
 80abc30:	4620      	mov	r0, r4
 80abc32:	f7fa fe99 	bl	80a6968 <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 80abc36:	4810      	ldr	r0, [pc, #64]	; (80abc78 <mbedtls_ssl_handshake_client_step+0x798>)
 80abc38:	e177      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 80abc3a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80abc3c:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 80abc40:	4293      	cmp	r3, r2
 80abc42:	d91b      	bls.n	80abc7c <mbedtls_ssl_handshake_client_step+0x79c>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 80abc44:	eb08 0206 	add.w	r2, r8, r6
                  | ( buf[39 + n]       ) );
 80abc48:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
 80abc4c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80abc50:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
 80abc54:	1e7a      	subs	r2, r7, #1
 80abc56:	2a02      	cmp	r2, #2
 80abc58:	f67f acfa 	bls.w	80ab650 <mbedtls_ssl_handshake_client_step+0x170>
 80abc5c:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 80abc60:	443a      	add	r2, r7
 80abc62:	4293      	cmp	r3, r2
 80abc64:	f47f acf4 	bne.w	80ab650 <mbedtls_ssl_handshake_client_step+0x170>
 80abc68:	e00e      	b.n	80abc88 <mbedtls_ssl_handshake_client_step+0x7a8>
 80abc6a:	bf00      	nop
 80abc6c:	ffff9200 	.word	0xffff9200
 80abc70:	ffff8c00 	.word	0xffff8c00
 80abc74:	ffff9400 	.word	0xffff9400
 80abc78:	ffff9180 	.word	0xffff9180
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 80abc7c:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 80abc80:	4293      	cmp	r3, r2
 80abc82:	f47f ace5 	bne.w	80ab650 <mbedtls_ssl_handshake_client_step+0x170>
    {
        ext_len = 0;
 80abc86:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 80abc88:	eb08 0306 	add.w	r3, r8, r6
 80abc8c:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 80abc90:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 80abc94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 80abc98:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 80abc9c:	2b00      	cmp	r3, #0
 80abc9e:	f43f acd9 	beq.w	80ab654 <mbedtls_ssl_handshake_client_step+0x174>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 80abca2:	222f      	movs	r2, #47	; 0x2f
 80abca4:	2102      	movs	r1, #2
 80abca6:	4620      	mov	r0, r4
 80abca8:	f7fa fe5e 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 80abcac:	48a0      	ldr	r0, [pc, #640]	; (80abf30 <mbedtls_ssl_handshake_client_step+0xa50>)
 80abcae:	e13c      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 80abcb0:	2e00      	cmp	r6, #0
 80abcb2:	f43f acec 	beq.w	80ab68e <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 80abcb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 80abcb8:	6803      	ldr	r3, [r0, #0]
 80abcba:	4599      	cmp	r9, r3
 80abcbc:	f47f ace7 	bne.w	80ab68e <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 80abcc0:	6843      	ldr	r3, [r0, #4]
 80abcc2:	2b00      	cmp	r3, #0
 80abcc4:	f47f ace3 	bne.w	80ab68e <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->compression != comp ||
 80abcc8:	6883      	ldr	r3, [r0, #8]
 80abcca:	429e      	cmp	r6, r3
 80abccc:	f47f acdf 	bne.w	80ab68e <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 80abcd0:	4632      	mov	r2, r6
 80abcd2:	4629      	mov	r1, r5
 80abcd4:	300c      	adds	r0, #12
 80abcd6:	f001 fc0f 	bl	80ad4f8 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
 80abcda:	2800      	cmp	r0, #0
 80abcdc:	f47f acd7 	bne.w	80ab68e <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 80abce0:	230c      	movs	r3, #12
 80abce2:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80abce4:	4620      	mov	r0, r4
 80abce6:	f7fa fa9f 	bl	80a6228 <mbedtls_ssl_derive_keys>
 80abcea:	4605      	mov	r5, r0
 80abcec:	2800      	cmp	r0, #0
 80abcee:	f43f ace1 	beq.w	80ab6b4 <mbedtls_ssl_handshake_client_step+0x1d4>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80abcf2:	2250      	movs	r2, #80	; 0x50
 80abcf4:	2102      	movs	r1, #2
 80abcf6:	4620      	mov	r0, r4
 80abcf8:	f7fa fe36 	bl	80a6968 <mbedtls_ssl_send_alert_message>
 80abcfc:	e07c      	b.n	80abdf8 <mbedtls_ssl_handshake_client_step+0x918>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
 80abcfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80abd00:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 80abd02:	4290      	cmp	r0, r2
 80abd04:	f47f acdb 	bne.w	80ab6be <mbedtls_ssl_handshake_client_step+0x1de>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 80abd08:	f7f8 f9a2 	bl	80a4050 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
 80abd0c:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 80abd0e:	2800      	cmp	r0, #0
 80abd10:	f43f acda 	beq.w	80ab6c8 <mbedtls_ssl_handshake_client_step+0x1e8>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 80abd14:	6902      	ldr	r2, [r0, #16]
 80abd16:	429a      	cmp	r2, r3
 80abd18:	f73f acd6 	bgt.w	80ab6c8 <mbedtls_ssl_handshake_client_step+0x1e8>
 80abd1c:	6982      	ldr	r2, [r0, #24]
 80abd1e:	4293      	cmp	r3, r2
 80abd20:	f73f acd2 	bgt.w	80ab6c8 <mbedtls_ssl_handshake_client_step+0x1e8>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 80abd24:	f64f 7001 	movw	r0, #65281	; 0xff01
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 80abd28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80abd2a:	2200      	movs	r2, #0

    ext = buf + 40 + n;
 80abd2c:	3628      	adds	r6, #40	; 0x28
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 80abd2e:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 80abd30:	4446      	add	r6, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 80abd32:	2501      	movs	r5, #1

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
 80abd34:	2f00      	cmp	r7, #0
 80abd36:	d03d      	beq.n	80abdb4 <mbedtls_ssl_handshake_client_step+0x8d4>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 80abd38:	7873      	ldrb	r3, [r6, #1]
 80abd3a:	7832      	ldrb	r2, [r6, #0]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 80abd3c:	78b1      	ldrb	r1, [r6, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 80abd3e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 80abd42:	78f3      	ldrb	r3, [r6, #3]
 80abd44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

        if( ext_size + 4 > ext_len )
 80abd48:	1d19      	adds	r1, r3, #4
 80abd4a:	428f      	cmp	r7, r1
 80abd4c:	f4ff ac80 	bcc.w	80ab650 <mbedtls_ssl_handshake_client_step+0x170>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 80abd50:	2a23      	cmp	r2, #35	; 0x23
 80abd52:	d01e      	beq.n	80abd92 <mbedtls_ssl_handshake_client_step+0x8b2>
 80abd54:	4282      	cmp	r2, r0
 80abd56:	d002      	beq.n	80abd5e <mbedtls_ssl_handshake_client_step+0x87e>
 80abd58:	2a01      	cmp	r2, #1
 80abd5a:	d124      	bne.n	80abda6 <mbedtls_ssl_handshake_client_step+0x8c6>
 80abd5c:	e008      	b.n	80abd70 <mbedtls_ssl_handshake_client_step+0x890>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 80abd5e:	2b01      	cmp	r3, #1
 80abd60:	d101      	bne.n	80abd66 <mbedtls_ssl_handshake_client_step+0x886>
 80abd62:	7932      	ldrb	r2, [r6, #4]
 80abd64:	b10a      	cbz	r2, 80abd6a <mbedtls_ssl_handshake_client_step+0x88a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 80abd66:	2228      	movs	r2, #40	; 0x28
 80abd68:	e4af      	b.n	80ab6ca <mbedtls_ssl_handshake_client_step+0x1ea>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 80abd6a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80abd6e:	e01a      	b.n	80abda6 <mbedtls_ssl_handshake_client_step+0x8c6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 80abd70:	6822      	ldr	r2, [r4, #0]
 80abd72:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80abd76:	f402 7ee0 	and.w	lr, r2, #448	; 0x1c0
 80abd7a:	f1be 0f00 	cmp.w	lr, #0
 80abd7e:	d0f2      	beq.n	80abd66 <mbedtls_ssl_handshake_client_step+0x886>
 80abd80:	2b01      	cmp	r3, #1
 80abd82:	d1f0      	bne.n	80abd66 <mbedtls_ssl_handshake_client_step+0x886>
        len != 1 ||
 80abd84:	f896 e004 	ldrb.w	lr, [r6, #4]
 80abd88:	f3c2 1282 	ubfx	r2, r2, #6, #3
 80abd8c:	4596      	cmp	lr, r2
 80abd8e:	d00a      	beq.n	80abda6 <mbedtls_ssl_handshake_client_step+0x8c6>
 80abd90:	e7e9      	b.n	80abd66 <mbedtls_ssl_handshake_client_step+0x886>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 80abd92:	6822      	ldr	r2, [r4, #0]
 80abd94:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 80abd98:	0792      	lsls	r2, r2, #30
 80abd9a:	d5e4      	bpl.n	80abd66 <mbedtls_ssl_handshake_client_step+0x886>
 80abd9c:	2b00      	cmp	r3, #0
 80abd9e:	d1e2      	bne.n	80abd66 <mbedtls_ssl_handshake_client_step+0x886>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 80abda0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80abda2:	f8c2 51f4 	str.w	r5, [r2, #500]	; 0x1f4
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 80abda6:	1afb      	subs	r3, r7, r3
 80abda8:	1f1f      	subs	r7, r3, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
 80abdaa:	3b05      	subs	r3, #5
 80abdac:	2b02      	cmp	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
 80abdae:	440e      	add	r6, r1

        if( ext_len > 0 && ext_len < 4 )
 80abdb0:	d8c0      	bhi.n	80abd34 <mbedtls_ssl_handshake_client_step+0x854>
 80abdb2:	e48e      	b.n	80ab6d2 <mbedtls_ssl_handshake_client_step+0x1f2>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80abdb4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80abdb8:	bb13      	cbnz	r3, 80abe00 <mbedtls_ssl_handshake_client_step+0x920>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 80abdba:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80abdbc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80abdc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80abdc4:	2b20      	cmp	r3, #32
 80abdc6:	d11b      	bne.n	80abe00 <mbedtls_ssl_handshake_client_step+0x920>
 80abdc8:	e7cd      	b.n	80abd66 <mbedtls_ssl_handshake_client_step+0x886>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );
 80abdca:	465a      	mov	r2, fp
 80abdcc:	f107 010a 	add.w	r1, r7, #10
 80abdd0:	9004      	str	r0, [sp, #16]
 80abdd2:	f001 fba0 	bl	80ad516 <memcpy>

    ssl->session_negotiate->ticket = ticket;
 80abdd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80abdd8:	9b04      	ldr	r3, [sp, #16]
    ssl->session_negotiate->ticket_len = ticket_len;
    ssl->session_negotiate->ticket_lifetime = lifetime;
 80abdda:	0436      	lsls	r6, r6, #16
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
 80abddc:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
 80abdde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_lifetime = lifetime;
 80abde0:	ea46 660a 	orr.w	r6, r6, sl, lsl #24
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
    ssl->session_negotiate->ticket_len = ticket_len;
 80abde4:	f8c3 b068 	str.w	fp, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
 80abde8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80abdea:	ea46 0808 	orr.w	r8, r6, r8
 80abdee:	ea48 2609 	orr.w	r6, r8, r9, lsl #8
 80abdf2:	66de      	str	r6, [r3, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
 80abdf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80abdf6:	609d      	str	r5, [r3, #8]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );

    return( 0 );
 80abdf8:	4628      	mov	r0, r5
 80abdfa:	e096      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
 80abdfc:	2306      	movs	r3, #6
 80abdfe:	6063      	str	r3, [r4, #4]
        return( 0 );
 80abe00:	2000      	movs	r0, #0
 80abe02:	e092      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80abe04:	4620      	mov	r0, r4
 80abe06:	f7fa fffd 	bl	80a6e04 <mbedtls_ssl_read_record>
 80abe0a:	2800      	cmp	r0, #0
 80abe0c:	f040 808d 	bne.w	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80abe10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80abe12:	2b16      	cmp	r3, #22
 80abe14:	f47f abd9 	bne.w	80ab5ca <mbedtls_ssl_handshake_client_step+0xea>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 80abe18:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 80abe1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 80abe1c:	3301      	adds	r3, #1
 80abe1e:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 80abe20:	7813      	ldrb	r3, [r2, #0]
 80abe22:	2b0d      	cmp	r3, #13
 80abe24:	bf0c      	ite	eq
 80abe26:	2301      	moveq	r3, #1
 80abe28:	2300      	movne	r3, #0
 80abe2a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 80abe2e:	d002      	beq.n	80abe36 <mbedtls_ssl_handshake_client_step+0x956>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 80abe30:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80abe34:	e079      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 80abe36:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80abe38:	2904      	cmp	r1, #4
 80abe3a:	d806      	bhi.n	80abe4a <mbedtls_ssl_handshake_client_step+0x96a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80abe3c:	2232      	movs	r2, #50	; 0x32
 80abe3e:	2102      	movs	r1, #2
 80abe40:	4620      	mov	r0, r4
 80abe42:	f7fa fd91 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 80abe46:	483b      	ldr	r0, [pc, #236]	; (80abf34 <mbedtls_ssl_handshake_client_step+0xa54>)
 80abe48:	e06f      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 80abe4a:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80abe4c:	1ddd      	adds	r5, r3, #7
 80abe4e:	42a9      	cmp	r1, r5
 80abe50:	d9f4      	bls.n	80abe3c <mbedtls_ssl_handshake_client_step+0x95c>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80abe52:	68e0      	ldr	r0, [r4, #12]
 80abe54:	2803      	cmp	r0, #3
 80abe56:	d109      	bne.n	80abe6c <mbedtls_ssl_handshake_client_step+0x98c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80abe58:	18d6      	adds	r6, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 80abe5a:	7977      	ldrb	r7, [r6, #5]
 80abe5c:	79b0      	ldrb	r0, [r6, #6]
 80abe5e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 80abe62:	4405      	add	r5, r0
 80abe64:	42a9      	cmp	r1, r5
 80abe66:	d9e9      	bls.n	80abe3c <mbedtls_ssl_handshake_client_step+0x95c>
 80abe68:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 80abe6a:	4403      	add	r3, r0
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80abe6c:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80abe6e:	7950      	ldrb	r0, [r2, #5]
 80abe70:	7992      	ldrb	r2, [r2, #6]
 80abe72:	3307      	adds	r3, #7
 80abe74:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80abe78:	4413      	add	r3, r2
 80abe7a:	4299      	cmp	r1, r3
 80abe7c:	d0c0      	beq.n	80abe00 <mbedtls_ssl_handshake_client_step+0x920>
 80abe7e:	e7dd      	b.n	80abe3c <mbedtls_ssl_handshake_client_step+0x95c>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80abe80:	2232      	movs	r2, #50	; 0x32
 80abe82:	2102      	movs	r1, #2
 80abe84:	4620      	mov	r0, r4
 80abe86:	f7fa fd6f 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 80abe8a:	482b      	ldr	r0, [pc, #172]	; (80abf38 <mbedtls_ssl_handshake_client_step+0xa58>)
 80abe8c:	e04d      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80abe8e:	482b      	ldr	r0, [pc, #172]	; (80abf3c <mbedtls_ssl_handshake_client_step+0xa5c>)
 80abe90:	e04b      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 80abe92:	482b      	ldr	r0, [pc, #172]	; (80abf40 <mbedtls_ssl_handshake_client_step+0xa60>)
 80abe94:	e049      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 80abe96:	9b08      	ldr	r3, [sp, #32]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 80abe98:	2210      	movs	r2, #16
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 80abe9a:	3304      	adds	r3, #4
 80abe9c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80abea0:	2316      	movs	r3, #22
 80abea2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 80abea6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80abeaa:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 80abeac:	6863      	ldr	r3, [r4, #4]
 80abeae:	3301      	adds	r3, #1
 80abeb0:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80abeb2:	4620      	mov	r0, r4
 80abeb4:	f7fa fba4 	bl	80a6600 <mbedtls_ssl_write_record>
 80abeb8:	e037      	b.n	80abf2a <mbedtls_ssl_handshake_client_step+0xa4a>
    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 80abeba:	7a7a      	ldrb	r2, [r7, #9]
 80abebc:	f897 b008 	ldrb.w	fp, [r7, #8]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 80abec0:	f897 a004 	ldrb.w	sl, [r7, #4]
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 80abec4:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 80abec8:	f10b 020a 	add.w	r2, fp, #10
 80abecc:	4293      	cmp	r3, r2
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 80abece:	797e      	ldrb	r6, [r7, #5]
               ( msg[2] <<  8 ) | ( msg[3]       );
 80abed0:	f897 9006 	ldrb.w	r9, [r7, #6]
 80abed4:	f897 8007 	ldrb.w	r8, [r7, #7]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 80abed8:	f47f ad40 	bne.w	80ab95c <mbedtls_ssl_handshake_client_step+0x47c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
 80abedc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80abede:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 80abee2:	230c      	movs	r3, #12
 80abee4:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
 80abee6:	f1bb 0f00 	cmp.w	fp, #0
 80abeea:	d089      	beq.n	80abe00 <mbedtls_ssl_handshake_client_step+0x920>
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
 80abeec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80abeee:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80abef0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80abef2:	441a      	add	r2, r3
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80abef4:	429a      	cmp	r2, r3
 80abef6:	d002      	beq.n	80abefe <mbedtls_ssl_handshake_client_step+0xa1e>
 80abef8:	7018      	strb	r0, [r3, #0]
 80abefa:	3301      	adds	r3, #1
 80abefc:	e7fa      	b.n	80abef4 <mbedtls_ssl_handshake_client_step+0xa14>
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 80abefe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket = NULL;
 80abf00:	2500      	movs	r5, #0
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 80abf02:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80abf04:	f000 fa2c 	bl	80ac360 <free>
    ssl->session_negotiate->ticket = NULL;
 80abf08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_len = 0;

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 80abf0a:	4659      	mov	r1, fp
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
 80abf0c:	665d      	str	r5, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
 80abf0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 80abf10:	2001      	movs	r0, #1

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
 80abf12:	669d      	str	r5, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 80abf14:	f001 fada 	bl	80ad4cc <calloc>
 80abf18:	2800      	cmp	r0, #0
 80abf1a:	f47f af56 	bne.w	80abdca <mbedtls_ssl_handshake_client_step+0x8ea>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80abf1e:	2250      	movs	r2, #80	; 0x50
 80abf20:	2102      	movs	r1, #2
 80abf22:	4620      	mov	r0, r4
 80abf24:	f7fa fd20 	bl	80a6968 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80abf28:	4806      	ldr	r0, [pc, #24]	; (80abf44 <mbedtls_ssl_handshake_client_step+0xa64>)
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 80abf2a:	b015      	add	sp, #84	; 0x54
 80abf2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80abf30:	ffff8f80 	.word	0xffff8f80
 80abf34:	ffff8580 	.word	0xffff8580
 80abf38:	ffff8480 	.word	0xffff8480
 80abf3c:	ffff8900 	.word	0xffff8900
 80abf40:	ffff9300 	.word	0xffff9300
 80abf44:	ffff8100 	.word	0xffff8100

080abf48 <_GLOBAL__sub_I__ZN5Crypt11generateKeyEPh>:
 80abf48:	f000 b8ca 	b.w	80ac0e0 <HAL_Pin_Map>

080abf4c <_GLOBAL__sub_I__ZN4CarTC2Ev>:
 80abf4c:	f000 b8c8 	b.w	80ac0e0 <HAL_Pin_Map>

080abf50 <_ZN3AWSC1EPctPFvS0_PhjE>:

AWS::AWS() {
    //add initializations for default case
}

AWS::AWS(char* domain, uint16_t port,void (*callbackRef)(char *, uint8_t *, unsigned int)){
 80abf50:	b5f0      	push	{r4, r5, r6, r7, lr}
 80abf52:	4616      	mov	r6, r2
 80abf54:	460d      	mov	r5, r1
 80abf56:	461f      	mov	r7, r3
 80abf58:	4604      	mov	r4, r0
 80abf5a:	f2ad 6d8c 	subw	sp, sp, #1676	; 0x68c
 80abf5e:	f7f4 f959 	bl	80a0214 <_ZN4MQTTC1Ev>
    MQTT client(domain, port, callbackRef);
 80abf62:	463b      	mov	r3, r7
 80abf64:	4632      	mov	r2, r6
 80abf66:	4629      	mov	r1, r5
 80abf68:	4668      	mov	r0, sp
 80abf6a:	f7f4 f98b 	bl	80a0284 <_ZN4MQTTC1EPctPFvS0_PhjE>
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 80abf6e:	9b01      	ldr	r3, [sp, #4]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80abf70:	9e06      	ldr	r6, [sp, #24]
 80abf72:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 80abf74:	9b02      	ldr	r3, [sp, #8]
 80abf76:	60a3      	str	r3, [r4, #8]
 80abf78:	9b03      	ldr	r3, [sp, #12]
 80abf7a:	60e3      	str	r3, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80abf7c:	9b04      	ldr	r3, [sp, #16]
 80abf7e:	6123      	str	r3, [r4, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80abf80:	9b05      	ldr	r3, [sp, #20]
 80abf82:	6163      	str	r3, [r4, #20]

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
 80abf84:	69a3      	ldr	r3, [r4, #24]
 80abf86:	429e      	cmp	r6, r3
 80abf88:	d016      	beq.n	80abfb8 <_ZN3AWSC1EPctPFvS0_PhjE+0x68>
	  {
	    if (__tmp != 0)
 80abf8a:	b116      	cbz	r6, 80abf92 <_ZN3AWSC1EPctPFvS0_PhjE+0x42>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80abf8c:	6873      	ldr	r3, [r6, #4]
 80abf8e:	3301      	adds	r3, #1
 80abf90:	6073      	str	r3, [r6, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 80abf92:	69a5      	ldr	r5, [r4, #24]
 80abf94:	b17d      	cbz	r5, 80abfb6 <_ZN3AWSC1EPctPFvS0_PhjE+0x66>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80abf96:	686b      	ldr	r3, [r5, #4]
 80abf98:	3b01      	subs	r3, #1
 80abf9a:	606b      	str	r3, [r5, #4]
 80abf9c:	b95b      	cbnz	r3, 80abfb6 <_ZN3AWSC1EPctPFvS0_PhjE+0x66>
        {
          _M_dispose();
 80abf9e:	682b      	ldr	r3, [r5, #0]
 80abfa0:	4628      	mov	r0, r5
 80abfa2:	689b      	ldr	r3, [r3, #8]
 80abfa4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80abfa6:	68ab      	ldr	r3, [r5, #8]
 80abfa8:	3b01      	subs	r3, #1
 80abfaa:	60ab      	str	r3, [r5, #8]
 80abfac:	b91b      	cbnz	r3, 80abfb6 <_ZN3AWSC1EPctPFvS0_PhjE+0x66>
            _M_destroy();
 80abfae:	682b      	ldr	r3, [r5, #0]
 80abfb0:	4628      	mov	r0, r5
 80abfb2:	68db      	ldr	r3, [r3, #12]
 80abfb4:	4798      	blx	r3
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 80abfb6:	61a6      	str	r6, [r4, #24]
#define MQTTPINGREQ     12 << 4 // PING Request
#define MQTTPINGRESP    13 << 4 // PING Response
#define MQTTDISCONNECT  14 << 4 // Client is Disconnecting
#define MQTTReserved    15 << 4 // Reserved

class MQTT {
 80abfb8:	9b07      	ldr	r3, [sp, #28]
 80abfba:	a90e      	add	r1, sp, #56	; 0x38
 80abfbc:	61e3      	str	r3, [r4, #28]
 80abfbe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80abfc2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80abfc6:	8423      	strh	r3, [r4, #32]
 80abfc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80abfca:	f504 65cb 	add.w	r5, r4, #1624	; 0x658
 80abfce:	6263      	str	r3, [r4, #36]	; 0x24
 80abfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80abfd2:	f50d 66cb 	add.w	r6, sp, #1624	; 0x658
 80abfd6:	62a3      	str	r3, [r4, #40]	; 0x28
 80abfd8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80abfdc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80abfe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80abfe2:	6323      	str	r3, [r4, #48]	; 0x30
 80abfe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80abfe6:	6363      	str	r3, [r4, #52]	; 0x34
 80abfe8:	f000 fc7a 	bl	80ac8e0 <_ZN6StringaSERKS_>
 80abfec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80abfee:	a916      	add	r1, sp, #88	; 0x58
 80abff0:	64a3      	str	r3, [r4, #72]	; 0x48
 80abff2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80abff6:	f44f 721e 	mov.w	r2, #632	; 0x278
 80abffa:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 80abffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80ac000:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80ac004:	6523      	str	r3, [r4, #80]	; 0x50
 80ac006:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80ac00a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80ac00e:	f001 fa82 	bl	80ad516 <memcpy>
 80ac012:	a9b4      	add	r1, sp, #720	; 0x2d0
 80ac014:	22b4      	movs	r2, #180	; 0xb4
 80ac016:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 80ac01a:	f001 fa7c 	bl	80ad516 <memcpy>
 80ac01e:	a9e1      	add	r1, sp, #900	; 0x384
 80ac020:	2264      	movs	r2, #100	; 0x64
 80ac022:	f504 7061 	add.w	r0, r4, #900	; 0x384
 80ac026:	f001 fa76 	bl	80ad516 <memcpy>
 80ac02a:	a9fa      	add	r1, sp, #1000	; 0x3e8
 80ac02c:	f44f 729a 	mov.w	r2, #308	; 0x134
 80ac030:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 80ac034:	f001 fa6f 	bl	80ad516 <memcpy>
 80ac038:	f20d 511c 	addw	r1, sp, #1308	; 0x51c
 80ac03c:	f44f 729a 	mov.w	r2, #308	; 0x134
 80ac040:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 80ac044:	f001 fa67 	bl	80ad516 <memcpy>
 80ac048:	f504 63ca 	add.w	r3, r4, #1616	; 0x650
 80ac04c:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 80ac050:	e892 0003 	ldmia.w	r2, {r0, r1}
 80ac054:	e883 0003 	stmia.w	r3, {r0, r1}
 80ac058:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80ac05a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80ac05c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80ac05e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80ac060:	e896 0003 	ldmia.w	r6, {r0, r1}
 80ac064:	f89d 3680 	ldrb.w	r3, [sp, #1664]	; 0x680
 80ac068:	e885 0003 	stmia.w	r5, {r0, r1}
 80ac06c:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
 80ac070:	f89d 3681 	ldrb.w	r3, [sp, #1665]	; 0x681
 80ac074:	4668      	mov	r0, sp
 80ac076:	f884 3681 	strb.w	r3, [r4, #1665]	; 0x681
 80ac07a:	f89d 3682 	ldrb.w	r3, [sp, #1666]	; 0x682
 80ac07e:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
 80ac082:	f7f4 f96f 	bl	80a0364 <_ZN4MQTTD1Ev>
    awsMqtt = client;
}
 80ac086:	4620      	mov	r0, r4
 80ac088:	f20d 6d8c 	addw	sp, sp, #1676	; 0x68c
 80ac08c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080ac08e <_GLOBAL__sub_I__ZN7istream3getEv>:
 80ac08e:	f000 b827 	b.w	80ac0e0 <HAL_Pin_Map>

080ac092 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 80ac092:	f000 b825 	b.w	80ac0e0 <HAL_Pin_Map>

080ac096 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 80ac096:	f000 b823 	b.w	80ac0e0 <HAL_Pin_Map>

080ac09a <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 80ac09a:	f000 b821 	b.w	80ac0e0 <HAL_Pin_Map>

080ac09e <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 80ac09e:	f000 b81f 	b.w	80ac0e0 <HAL_Pin_Map>

080ac0a2 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 80ac0a2:	f000 b81d 	b.w	80ac0e0 <HAL_Pin_Map>

080ac0a6 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 80ac0a6:	f000 b81b 	b.w	80ac0e0 <HAL_Pin_Map>

080ac0aa <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 80ac0aa:	f000 b819 	b.w	80ac0e0 <HAL_Pin_Map>

080ac0ae <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80ac0ae:	b570      	push	{r4, r5, r6, lr}
 80ac0b0:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80ac0b2:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80ac0b4:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80ac0b6:	b149      	cbz	r1, 80ac0cc <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80ac0b8:	f001 fa73 	bl	80ad5a2 <strlen>
 80ac0bc:	682b      	ldr	r3, [r5, #0]
 80ac0be:	4602      	mov	r2, r0
 80ac0c0:	4621      	mov	r1, r4
 80ac0c2:	4628      	mov	r0, r5
    }
 80ac0c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80ac0c8:	68db      	ldr	r3, [r3, #12]
 80ac0ca:	4718      	bx	r3
    }
 80ac0cc:	bd70      	pop	{r4, r5, r6, pc}

080ac0ce <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 80ac0ce:	f000 b807 	b.w	80ac0e0 <HAL_Pin_Map>

080ac0d2 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 80ac0d2:	f000 b805 	b.w	80ac0e0 <HAL_Pin_Map>

080ac0d6 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 80ac0d6:	f000 b803 	b.w	80ac0e0 <HAL_Pin_Map>

080ac0da <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 80ac0da:	f000 b801 	b.w	80ac0e0 <HAL_Pin_Map>
	...

080ac0e0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80ac0e0:	b508      	push	{r3, lr}
 80ac0e2:	4b02      	ldr	r3, [pc, #8]	; (80ac0ec <HAL_Pin_Map+0xc>)
 80ac0e4:	681b      	ldr	r3, [r3, #0]
 80ac0e6:	681b      	ldr	r3, [r3, #0]
 80ac0e8:	9301      	str	r3, [sp, #4]
 80ac0ea:	bd08      	pop	{r3, pc}
 80ac0ec:	080601b0 	.word	0x080601b0

080ac0f0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80ac0f0:	b508      	push	{r3, lr}
 80ac0f2:	4b02      	ldr	r3, [pc, #8]	; (80ac0fc <HAL_SPI_Init+0xc>)
 80ac0f4:	681b      	ldr	r3, [r3, #0]
 80ac0f6:	69db      	ldr	r3, [r3, #28]
 80ac0f8:	9301      	str	r3, [sp, #4]
 80ac0fa:	bd08      	pop	{r3, pc}
 80ac0fc:	080601b4 	.word	0x080601b4

080ac100 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80ac100:	b508      	push	{r3, lr}
 80ac102:	4b02      	ldr	r3, [pc, #8]	; (80ac10c <HAL_RNG_GetRandomNumber+0xc>)
 80ac104:	681b      	ldr	r3, [r3, #0]
 80ac106:	685b      	ldr	r3, [r3, #4]
 80ac108:	9301      	str	r3, [sp, #4]
 80ac10a:	bd08      	pop	{r3, pc}
 80ac10c:	0806019c 	.word	0x0806019c

080ac110 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80ac110:	b508      	push	{r3, lr}
 80ac112:	4b02      	ldr	r3, [pc, #8]	; (80ac11c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80ac114:	681b      	ldr	r3, [r3, #0]
 80ac116:	695b      	ldr	r3, [r3, #20]
 80ac118:	9301      	str	r3, [sp, #4]
 80ac11a:	bd08      	pop	{r3, pc}
 80ac11c:	0806019c 	.word	0x0806019c

080ac120 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80ac120:	b508      	push	{r3, lr}
 80ac122:	4b02      	ldr	r3, [pc, #8]	; (80ac12c <os_mutex_create+0xc>)
 80ac124:	681b      	ldr	r3, [r3, #0]
 80ac126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80ac128:	9301      	str	r3, [sp, #4]
 80ac12a:	bd08      	pop	{r3, pc}
 80ac12c:	080601d0 	.word	0x080601d0

080ac130 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80ac130:	b508      	push	{r3, lr}
 80ac132:	4b02      	ldr	r3, [pc, #8]	; (80ac13c <HAL_USART_Init+0xc>)
 80ac134:	681b      	ldr	r3, [r3, #0]
 80ac136:	699b      	ldr	r3, [r3, #24]
 80ac138:	9301      	str	r3, [sp, #4]
 80ac13a:	bd08      	pop	{r3, pc}
 80ac13c:	080601c4 	.word	0x080601c4

080ac140 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80ac140:	b508      	push	{r3, lr}
 80ac142:	4b02      	ldr	r3, [pc, #8]	; (80ac14c <HAL_USART_Write_Data+0xc>)
 80ac144:	681b      	ldr	r3, [r3, #0]
 80ac146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80ac148:	9301      	str	r3, [sp, #4]
 80ac14a:	bd08      	pop	{r3, pc}
 80ac14c:	080601c4 	.word	0x080601c4

080ac150 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80ac150:	b508      	push	{r3, lr}
 80ac152:	4b02      	ldr	r3, [pc, #8]	; (80ac15c <HAL_USART_Available_Data+0xc>)
 80ac154:	681b      	ldr	r3, [r3, #0]
 80ac156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80ac158:	9301      	str	r3, [sp, #4]
 80ac15a:	bd08      	pop	{r3, pc}
 80ac15c:	080601c4 	.word	0x080601c4

080ac160 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80ac160:	b508      	push	{r3, lr}
 80ac162:	4b02      	ldr	r3, [pc, #8]	; (80ac16c <HAL_USART_Read_Data+0xc>)
 80ac164:	681b      	ldr	r3, [r3, #0]
 80ac166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80ac168:	9301      	str	r3, [sp, #4]
 80ac16a:	bd08      	pop	{r3, pc}
 80ac16c:	080601c4 	.word	0x080601c4

080ac170 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80ac170:	b508      	push	{r3, lr}
 80ac172:	4b02      	ldr	r3, [pc, #8]	; (80ac17c <HAL_USART_Peek_Data+0xc>)
 80ac174:	681b      	ldr	r3, [r3, #0]
 80ac176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80ac178:	9301      	str	r3, [sp, #4]
 80ac17a:	bd08      	pop	{r3, pc}
 80ac17c:	080601c4 	.word	0x080601c4

080ac180 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80ac180:	b508      	push	{r3, lr}
 80ac182:	4b02      	ldr	r3, [pc, #8]	; (80ac18c <HAL_USART_Flush_Data+0xc>)
 80ac184:	681b      	ldr	r3, [r3, #0]
 80ac186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80ac188:	9301      	str	r3, [sp, #4]
 80ac18a:	bd08      	pop	{r3, pc}
 80ac18c:	080601c4 	.word	0x080601c4

080ac190 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80ac190:	b508      	push	{r3, lr}
 80ac192:	4b02      	ldr	r3, [pc, #8]	; (80ac19c <HAL_USART_Available_Data_For_Write+0xc>)
 80ac194:	681b      	ldr	r3, [r3, #0]
 80ac196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80ac198:	9301      	str	r3, [sp, #4]
 80ac19a:	bd08      	pop	{r3, pc}
 80ac19c:	080601c4 	.word	0x080601c4

080ac1a0 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80ac1a0:	b508      	push	{r3, lr}
 80ac1a2:	4b02      	ldr	r3, [pc, #8]	; (80ac1ac <socket_active_status+0xc>)
 80ac1a4:	681b      	ldr	r3, [r3, #0]
 80ac1a6:	681b      	ldr	r3, [r3, #0]
 80ac1a8:	9301      	str	r3, [sp, #4]
 80ac1aa:	bd08      	pop	{r3, pc}
 80ac1ac:	080601bc 	.word	0x080601bc

080ac1b0 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80ac1b0:	b508      	push	{r3, lr}
 80ac1b2:	4b02      	ldr	r3, [pc, #8]	; (80ac1bc <socket_handle_valid+0xc>)
 80ac1b4:	681b      	ldr	r3, [r3, #0]
 80ac1b6:	685b      	ldr	r3, [r3, #4]
 80ac1b8:	9301      	str	r3, [sp, #4]
 80ac1ba:	bd08      	pop	{r3, pc}
 80ac1bc:	080601bc 	.word	0x080601bc

080ac1c0 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80ac1c0:	b508      	push	{r3, lr}
 80ac1c2:	4b02      	ldr	r3, [pc, #8]	; (80ac1cc <socket_create+0xc>)
 80ac1c4:	681b      	ldr	r3, [r3, #0]
 80ac1c6:	689b      	ldr	r3, [r3, #8]
 80ac1c8:	9301      	str	r3, [sp, #4]
 80ac1ca:	bd08      	pop	{r3, pc}
 80ac1cc:	080601bc 	.word	0x080601bc

080ac1d0 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80ac1d0:	b508      	push	{r3, lr}
 80ac1d2:	4b02      	ldr	r3, [pc, #8]	; (80ac1dc <socket_connect+0xc>)
 80ac1d4:	681b      	ldr	r3, [r3, #0]
 80ac1d6:	68db      	ldr	r3, [r3, #12]
 80ac1d8:	9301      	str	r3, [sp, #4]
 80ac1da:	bd08      	pop	{r3, pc}
 80ac1dc:	080601bc 	.word	0x080601bc

080ac1e0 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80ac1e0:	b508      	push	{r3, lr}
 80ac1e2:	4b02      	ldr	r3, [pc, #8]	; (80ac1ec <socket_receive+0xc>)
 80ac1e4:	681b      	ldr	r3, [r3, #0]
 80ac1e6:	691b      	ldr	r3, [r3, #16]
 80ac1e8:	9301      	str	r3, [sp, #4]
 80ac1ea:	bd08      	pop	{r3, pc}
 80ac1ec:	080601bc 	.word	0x080601bc

080ac1f0 <socket_send>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
 80ac1f0:	b508      	push	{r3, lr}
 80ac1f2:	4b02      	ldr	r3, [pc, #8]	; (80ac1fc <socket_send+0xc>)
 80ac1f4:	681b      	ldr	r3, [r3, #0]
 80ac1f6:	699b      	ldr	r3, [r3, #24]
 80ac1f8:	9301      	str	r3, [sp, #4]
 80ac1fa:	bd08      	pop	{r3, pc}
 80ac1fc:	080601bc 	.word	0x080601bc

080ac200 <socket_close>:
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80ac200:	b508      	push	{r3, lr}
 80ac202:	4b02      	ldr	r3, [pc, #8]	; (80ac20c <socket_close+0xc>)
 80ac204:	681b      	ldr	r3, [r3, #0]
 80ac206:	6a1b      	ldr	r3, [r3, #32]
 80ac208:	9301      	str	r3, [sp, #4]
 80ac20a:	bd08      	pop	{r3, pc}
 80ac20c:	080601bc 	.word	0x080601bc

080ac210 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80ac210:	b508      	push	{r3, lr}
 80ac212:	4b02      	ldr	r3, [pc, #8]	; (80ac21c <socket_handle_invalid+0xc>)
 80ac214:	681b      	ldr	r3, [r3, #0]
 80ac216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80ac218:	9301      	str	r3, [sp, #4]
 80ac21a:	bd08      	pop	{r3, pc}
 80ac21c:	080601bc 	.word	0x080601bc

080ac220 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80ac220:	b508      	push	{r3, lr}
 80ac222:	4b02      	ldr	r3, [pc, #8]	; (80ac22c <HAL_USB_USART_Init+0xc>)
 80ac224:	681b      	ldr	r3, [r3, #0]
 80ac226:	681b      	ldr	r3, [r3, #0]
 80ac228:	9301      	str	r3, [sp, #4]
 80ac22a:	bd08      	pop	{r3, pc}
 80ac22c:	080601d8 	.word	0x080601d8

080ac230 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80ac230:	b508      	push	{r3, lr}
 80ac232:	4b02      	ldr	r3, [pc, #8]	; (80ac23c <HAL_USB_USART_Available_Data+0xc>)
 80ac234:	681b      	ldr	r3, [r3, #0]
 80ac236:	691b      	ldr	r3, [r3, #16]
 80ac238:	9301      	str	r3, [sp, #4]
 80ac23a:	bd08      	pop	{r3, pc}
 80ac23c:	080601d8 	.word	0x080601d8

080ac240 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80ac240:	b508      	push	{r3, lr}
 80ac242:	4b02      	ldr	r3, [pc, #8]	; (80ac24c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80ac244:	681b      	ldr	r3, [r3, #0]
 80ac246:	695b      	ldr	r3, [r3, #20]
 80ac248:	9301      	str	r3, [sp, #4]
 80ac24a:	bd08      	pop	{r3, pc}
 80ac24c:	080601d8 	.word	0x080601d8

080ac250 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80ac250:	b508      	push	{r3, lr}
 80ac252:	4b02      	ldr	r3, [pc, #8]	; (80ac25c <HAL_USB_USART_Receive_Data+0xc>)
 80ac254:	681b      	ldr	r3, [r3, #0]
 80ac256:	699b      	ldr	r3, [r3, #24]
 80ac258:	9301      	str	r3, [sp, #4]
 80ac25a:	bd08      	pop	{r3, pc}
 80ac25c:	080601d8 	.word	0x080601d8

080ac260 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80ac260:	b508      	push	{r3, lr}
 80ac262:	4b02      	ldr	r3, [pc, #8]	; (80ac26c <HAL_USB_USART_Send_Data+0xc>)
 80ac264:	681b      	ldr	r3, [r3, #0]
 80ac266:	69db      	ldr	r3, [r3, #28]
 80ac268:	9301      	str	r3, [sp, #4]
 80ac26a:	bd08      	pop	{r3, pc}
 80ac26c:	080601d8 	.word	0x080601d8

080ac270 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80ac270:	b508      	push	{r3, lr}
 80ac272:	4b02      	ldr	r3, [pc, #8]	; (80ac27c <HAL_USB_USART_Flush_Data+0xc>)
 80ac274:	681b      	ldr	r3, [r3, #0]
 80ac276:	6a1b      	ldr	r3, [r3, #32]
 80ac278:	9301      	str	r3, [sp, #4]
 80ac27a:	bd08      	pop	{r3, pc}
 80ac27c:	080601d8 	.word	0x080601d8

080ac280 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, void(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80ac280:	b508      	push	{r3, lr}
 80ac282:	4b02      	ldr	r3, [pc, #8]	; (80ac28c <HAL_NET_SetNetWatchDog+0xc>)
 80ac284:	681b      	ldr	r3, [r3, #0]
 80ac286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80ac288:	9301      	str	r3, [sp, #4]
 80ac28a:	bd08      	pop	{r3, pc}
 80ac28c:	080601c0 	.word	0x080601c0

080ac290 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80ac290:	b508      	push	{r3, lr}
 80ac292:	4b02      	ldr	r3, [pc, #8]	; (80ac29c <inet_gethostbyname+0xc>)
 80ac294:	681b      	ldr	r3, [r3, #0]
 80ac296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80ac298:	9301      	str	r3, [sp, #4]
 80ac29a:	bd08      	pop	{r3, pc}
 80ac29c:	080601c0 	.word	0x080601c0

080ac2a0 <LED_SetSignalingColor>:
#include "dynalib.h"

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80ac2a0:	b508      	push	{r3, lr}
 80ac2a2:	4b02      	ldr	r3, [pc, #8]	; (80ac2ac <LED_SetSignalingColor+0xc>)
 80ac2a4:	681b      	ldr	r3, [r3, #0]
 80ac2a6:	685b      	ldr	r3, [r3, #4]
 80ac2a8:	9301      	str	r3, [sp, #4]
 80ac2aa:	bd08      	pop	{r3, pc}
 80ac2ac:	080201a8 	.word	0x080201a8

080ac2b0 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80ac2b0:	b508      	push	{r3, lr}
 80ac2b2:	4b02      	ldr	r3, [pc, #8]	; (80ac2bc <LED_Signaling_Start+0xc>)
 80ac2b4:	681b      	ldr	r3, [r3, #0]
 80ac2b6:	689b      	ldr	r3, [r3, #8]
 80ac2b8:	9301      	str	r3, [sp, #4]
 80ac2ba:	bd08      	pop	{r3, pc}
 80ac2bc:	080201a8 	.word	0x080201a8

080ac2c0 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80ac2c0:	b508      	push	{r3, lr}
 80ac2c2:	4b02      	ldr	r3, [pc, #8]	; (80ac2cc <LED_Signaling_Stop+0xc>)
 80ac2c4:	681b      	ldr	r3, [r3, #0]
 80ac2c6:	68db      	ldr	r3, [r3, #12]
 80ac2c8:	9301      	str	r3, [sp, #4]
 80ac2ca:	bd08      	pop	{r3, pc}
 80ac2cc:	080201a8 	.word	0x080201a8

080ac2d0 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80ac2d0:	b508      	push	{r3, lr}
 80ac2d2:	4b02      	ldr	r3, [pc, #8]	; (80ac2dc <LED_RGB_IsOverRidden+0xc>)
 80ac2d4:	681b      	ldr	r3, [r3, #0]
 80ac2d6:	699b      	ldr	r3, [r3, #24]
 80ac2d8:	9301      	str	r3, [sp, #4]
 80ac2da:	bd08      	pop	{r3, pc}
 80ac2dc:	080201a8 	.word	0x080201a8

080ac2e0 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80ac2e0:	b508      	push	{r3, lr}
 80ac2e2:	4b02      	ldr	r3, [pc, #8]	; (80ac2ec <LED_On+0xc>)
 80ac2e4:	681b      	ldr	r3, [r3, #0]
 80ac2e6:	69db      	ldr	r3, [r3, #28]
 80ac2e8:	9301      	str	r3, [sp, #4]
 80ac2ea:	bd08      	pop	{r3, pc}
 80ac2ec:	080201a8 	.word	0x080201a8

080ac2f0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80ac2f0:	b508      	push	{r3, lr}
 80ac2f2:	4b02      	ldr	r3, [pc, #8]	; (80ac2fc <set_system_mode+0xc>)
 80ac2f4:	681b      	ldr	r3, [r3, #0]
 80ac2f6:	685b      	ldr	r3, [r3, #4]
 80ac2f8:	9301      	str	r3, [sp, #4]
 80ac2fa:	bd08      	pop	{r3, pc}
 80ac2fc:	080601a4 	.word	0x080601a4

080ac300 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80ac300:	b508      	push	{r3, lr}
 80ac302:	4b02      	ldr	r3, [pc, #8]	; (80ac30c <system_delay_ms+0xc>)
 80ac304:	681b      	ldr	r3, [r3, #0]
 80ac306:	695b      	ldr	r3, [r3, #20]
 80ac308:	9301      	str	r3, [sp, #4]
 80ac30a:	bd08      	pop	{r3, pc}
 80ac30c:	080601a4 	.word	0x080601a4

080ac310 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80ac310:	b508      	push	{r3, lr}
 80ac312:	4b02      	ldr	r3, [pc, #8]	; (80ac31c <system_set_usb_request_app_handler+0xc>)
 80ac314:	681b      	ldr	r3, [r3, #0]
 80ac316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80ac318:	9301      	str	r3, [sp, #4]
 80ac31a:	bd08      	pop	{r3, pc}
 80ac31c:	080601a4 	.word	0x080601a4

080ac320 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80ac320:	b508      	push	{r3, lr}
 80ac322:	4b02      	ldr	r3, [pc, #8]	; (80ac32c <system_set_usb_request_result+0xc>)
 80ac324:	681b      	ldr	r3, [r3, #0]
 80ac326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80ac328:	9301      	str	r3, [sp, #4]
 80ac32a:	bd08      	pop	{r3, pc}
 80ac32c:	080601a4 	.word	0x080601a4

080ac330 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80ac330:	b508      	push	{r3, lr}
 80ac332:	4b02      	ldr	r3, [pc, #8]	; (80ac33c <network_ready+0xc>)
 80ac334:	681b      	ldr	r3, [r3, #0]
 80ac336:	691b      	ldr	r3, [r3, #16]
 80ac338:	9301      	str	r3, [sp, #4]
 80ac33a:	bd08      	pop	{r3, pc}
 80ac33c:	080601c8 	.word	0x080601c8

080ac340 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80ac340:	b508      	push	{r3, lr}
 80ac342:	4b02      	ldr	r3, [pc, #8]	; (80ac34c <spark_sync_time+0xc>)
 80ac344:	681b      	ldr	r3, [r3, #0]
 80ac346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80ac348:	9301      	str	r3, [sp, #4]
 80ac34a:	bd08      	pop	{r3, pc}
 80ac34c:	080601cc 	.word	0x080601cc

080ac350 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80ac350:	b508      	push	{r3, lr}
 80ac352:	4b02      	ldr	r3, [pc, #8]	; (80ac35c <malloc+0xc>)
 80ac354:	681b      	ldr	r3, [r3, #0]
 80ac356:	681b      	ldr	r3, [r3, #0]
 80ac358:	9301      	str	r3, [sp, #4]
 80ac35a:	bd08      	pop	{r3, pc}
 80ac35c:	080601a0 	.word	0x080601a0

080ac360 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80ac360:	b508      	push	{r3, lr}
 80ac362:	4b02      	ldr	r3, [pc, #8]	; (80ac36c <free+0xc>)
 80ac364:	681b      	ldr	r3, [r3, #0]
 80ac366:	685b      	ldr	r3, [r3, #4]
 80ac368:	9301      	str	r3, [sp, #4]
 80ac36a:	bd08      	pop	{r3, pc}
 80ac36c:	080601a0 	.word	0x080601a0

080ac370 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80ac370:	b508      	push	{r3, lr}
 80ac372:	4b02      	ldr	r3, [pc, #8]	; (80ac37c <realloc+0xc>)
 80ac374:	681b      	ldr	r3, [r3, #0]
 80ac376:	689b      	ldr	r3, [r3, #8]
 80ac378:	9301      	str	r3, [sp, #4]
 80ac37a:	bd08      	pop	{r3, pc}
 80ac37c:	080601a0 	.word	0x080601a0

080ac380 <_malloc_r>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80ac380:	b508      	push	{r3, lr}
 80ac382:	4b02      	ldr	r3, [pc, #8]	; (80ac38c <_malloc_r+0xc>)
 80ac384:	681b      	ldr	r3, [r3, #0]
 80ac386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80ac388:	9301      	str	r3, [sp, #4]
 80ac38a:	bd08      	pop	{r3, pc}
 80ac38c:	080601a0 	.word	0x080601a0

080ac390 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80ac390:	4770      	bx	lr

080ac392 <_ZN8SPIClassD0Ev>:
 80ac392:	b510      	push	{r4, lr}
 80ac394:	4604      	mov	r4, r0
 80ac396:	f7f3 fe84 	bl	80a00a2 <_ZdlPv>
 80ac39a:	4620      	mov	r0, r4
 80ac39c:	bd10      	pop	{r4, pc}
	...

080ac3a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80ac3a0:	b570      	push	{r4, r5, r6, lr}
 80ac3a2:	4604      	mov	r4, r0
 80ac3a4:	460e      	mov	r6, r1
 80ac3a6:	4b07      	ldr	r3, [pc, #28]	; (80ac3c4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80ac3a8:	2500      	movs	r5, #0
 80ac3aa:	6003      	str	r3, [r0, #0]
 80ac3ac:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80ac3b0:	f7ff feb6 	bl	80ac120 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80ac3b4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80ac3b6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80ac3b8:	f7ff fe9a 	bl	80ac0f0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80ac3bc:	60a5      	str	r5, [r4, #8]
}
 80ac3be:	4620      	mov	r0, r4
 80ac3c0:	bd70      	pop	{r4, r5, r6, pc}
 80ac3c2:	bf00      	nop
 80ac3c4:	080af0b0 	.word	0x080af0b0

080ac3c8 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80ac3c8:	2000      	movs	r0, #0
 80ac3ca:	f7ff bf91 	b.w	80ac2f0 <set_system_mode>

080ac3ce <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80ac3ce:	b513      	push	{r0, r1, r4, lr}
 80ac3d0:	ab02      	add	r3, sp, #8
        return write(&b, 1);
 80ac3d2:	6802      	ldr	r2, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80ac3d4:	f803 1d01 	strb.w	r1, [r3, #-1]!
        return write(&b, 1);
 80ac3d8:	68d4      	ldr	r4, [r2, #12]
 80ac3da:	4619      	mov	r1, r3
 80ac3dc:	2201      	movs	r2, #1
 80ac3de:	47a0      	blx	r4
}
 80ac3e0:	b002      	add	sp, #8
 80ac3e2:	bd10      	pop	{r4, pc}

080ac3e4 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80ac3e4:	4770      	bx	lr

080ac3e6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80ac3e6:	4770      	bx	lr

080ac3e8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80ac3e8:	2000      	movs	r0, #0
 80ac3ea:	4770      	bx	lr

080ac3ec <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80ac3ec:	b510      	push	{r4, lr}
 80ac3ee:	4604      	mov	r4, r0
 80ac3f0:	f7f3 fe57 	bl	80a00a2 <_ZdlPv>
 80ac3f4:	4620      	mov	r0, r4
 80ac3f6:	bd10      	pop	{r4, pc}

080ac3f8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80ac3f8:	f7f3 be53 	b.w	80a00a2 <_ZdlPv>

080ac3fc <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80ac3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80ac400:	461f      	mov	r7, r3
    stop();
 80ac402:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80ac404:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80ac406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80ac408:	4606      	mov	r6, r0
 80ac40a:	460c      	mov	r4, r1
 80ac40c:	4690      	mov	r8, r2
    stop();
 80ac40e:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80ac410:	4b13      	ldr	r3, [pc, #76]	; (80ac460 <_ZN9TCPClient7connectEPKctm+0x64>)
 80ac412:	6818      	ldr	r0, [r3, #0]
 80ac414:	6803      	ldr	r3, [r0, #0]
 80ac416:	681b      	ldr	r3, [r3, #0]
 80ac418:	4798      	blx	r3
 80ac41a:	b1f0      	cbz	r0, 80ac45a <_ZN9TCPClient7connectEPKctm+0x5e>
      {
        IPAddress ip_addr;
 80ac41c:	a802      	add	r0, sp, #8
 80ac41e:	f000 fbe5 	bl	80acbec <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80ac422:	4620      	mov	r0, r4
 80ac424:	f001 f8bd 	bl	80ad5a2 <strlen>
 80ac428:	2300      	movs	r3, #0
 80ac42a:	9300      	str	r3, [sp, #0]
 80ac42c:	b281      	uxth	r1, r0
 80ac42e:	463b      	mov	r3, r7
 80ac430:	aa03      	add	r2, sp, #12
 80ac432:	4620      	mov	r0, r4
 80ac434:	f7ff ff2c 	bl	80ac290 <inet_gethostbyname>
 80ac438:	b978      	cbnz	r0, 80ac45a <_ZN9TCPClient7connectEPKctm+0x5e>
        {
                return connect(ip_addr, port, nif);
 80ac43a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80ac43c:	ad09      	add	r5, sp, #36	; 0x24
 80ac43e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80ac442:	4b08      	ldr	r3, [pc, #32]	; (80ac464 <_ZN9TCPClient7connectEPKctm+0x68>)
 80ac444:	ac03      	add	r4, sp, #12
 80ac446:	9308      	str	r3, [sp, #32]
 80ac448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80ac44a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80ac44c:	6823      	ldr	r3, [r4, #0]
 80ac44e:	4642      	mov	r2, r8
 80ac450:	702b      	strb	r3, [r5, #0]
 80ac452:	a908      	add	r1, sp, #32
 80ac454:	463b      	mov	r3, r7
 80ac456:	4630      	mov	r0, r6
 80ac458:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80ac45a:	b00f      	add	sp, #60	; 0x3c
 80ac45c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80ac460:	080af298 	.word	0x080af298
 80ac464:	080af220 	.word	0x080af220

080ac468 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80ac468:	b510      	push	{r4, lr}
 80ac46a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80ac46c:	6803      	ldr	r3, [r0, #0]
 80ac46e:	689b      	ldr	r3, [r3, #8]
 80ac470:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80ac472:	68a3      	ldr	r3, [r4, #8]
 80ac474:	3b01      	subs	r3, #1
 80ac476:	60a3      	str	r3, [r4, #8]
 80ac478:	b92b      	cbnz	r3, 80ac486 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32+0x1e>
            _M_destroy();
 80ac47a:	6823      	ldr	r3, [r4, #0]
 80ac47c:	4620      	mov	r0, r4
        }
    }
 80ac47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80ac482:	68db      	ldr	r3, [r3, #12]
 80ac484:	4718      	bx	r3
 80ac486:	bd10      	pop	{r4, pc}

080ac488 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80ac488:	b570      	push	{r4, r5, r6, lr}
 80ac48a:	4604      	mov	r4, r0
 80ac48c:	4606      	mov	r6, r0
 80ac48e:	694d      	ldr	r5, [r1, #20]
 80ac490:	4b04      	ldr	r3, [pc, #16]	; (80ac4a4 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80ac492:	358c      	adds	r5, #140	; 0x8c
 80ac494:	f844 3b04 	str.w	r3, [r4], #4
 80ac498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80ac49a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80ac49c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80ac49e:	4630      	mov	r0, r6
 80ac4a0:	7023      	strb	r3, [r4, #0]
 80ac4a2:	bd70      	pop	{r4, r5, r6, pc}
 80ac4a4:	080af220 	.word	0x080af220

080ac4a8 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80ac4a8:	b510      	push	{r4, lr}
 80ac4aa:	6943      	ldr	r3, [r0, #20]
 80ac4ac:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80ac4ae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80ac4b2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80ac4b6:	429a      	cmp	r2, r3
 80ac4b8:	d005      	beq.n	80ac4c6 <_ZN9TCPClient4peekEv+0x1e>
 80ac4ba:	6962      	ldr	r2, [r4, #20]
 80ac4bc:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80ac4c0:	4413      	add	r3, r2
 80ac4c2:	7918      	ldrb	r0, [r3, #4]
 80ac4c4:	bd10      	pop	{r4, pc}
 80ac4c6:	6803      	ldr	r3, [r0, #0]
 80ac4c8:	691b      	ldr	r3, [r3, #16]
 80ac4ca:	4798      	blx	r3
 80ac4cc:	2800      	cmp	r0, #0
 80ac4ce:	d1f4      	bne.n	80ac4ba <_ZN9TCPClient4peekEv+0x12>
 80ac4d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80ac4d4:	bd10      	pop	{r4, pc}

080ac4d6 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80ac4d6:	b510      	push	{r4, lr}
 80ac4d8:	6943      	ldr	r3, [r0, #20]
 80ac4da:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80ac4dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80ac4e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80ac4e4:	429a      	cmp	r2, r3
 80ac4e6:	d008      	beq.n	80ac4fa <_ZN9TCPClient4readEv+0x24>
 80ac4e8:	6962      	ldr	r2, [r4, #20]
 80ac4ea:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80ac4ee:	1c59      	adds	r1, r3, #1
 80ac4f0:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80ac4f4:	4413      	add	r3, r2
 80ac4f6:	7918      	ldrb	r0, [r3, #4]
 80ac4f8:	bd10      	pop	{r4, pc}
 80ac4fa:	6803      	ldr	r3, [r0, #0]
 80ac4fc:	691b      	ldr	r3, [r3, #16]
 80ac4fe:	4798      	blx	r3
 80ac500:	2800      	cmp	r0, #0
 80ac502:	d1f1      	bne.n	80ac4e8 <_ZN9TCPClient4readEv+0x12>
 80ac504:	f04f 30ff 	mov.w	r0, #4294967295
}
 80ac508:	bd10      	pop	{r4, pc}

080ac50a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80ac50a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80ac50c:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 80ac50e:	6820      	ldr	r0, [r4, #0]
 80ac510:	f7ff fe4e 	bl	80ac1b0 <socket_handle_valid>
 80ac514:	b110      	cbz	r0, 80ac51c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 80ac516:	6820      	ldr	r0, [r4, #0]
 80ac518:	f7ff fe72 	bl	80ac200 <socket_close>
 80ac51c:	4620      	mov	r0, r4
 80ac51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80ac522:	f7f3 bdbe 	b.w	80a00a2 <_ZdlPv>

080ac526 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80ac526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ac528:	6943      	ldr	r3, [r0, #20]
 80ac52a:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80ac52c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80ac530:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80ac534:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80ac536:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80ac538:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80ac53a:	d106      	bne.n	80ac54a <_ZN9TCPClient4readEPhj+0x24>
 80ac53c:	6803      	ldr	r3, [r0, #0]
 80ac53e:	691b      	ldr	r3, [r3, #16]
 80ac540:	4798      	blx	r3
 80ac542:	b910      	cbnz	r0, 80ac54a <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80ac544:	f04f 34ff 	mov.w	r4, #4294967295
 80ac548:	e014      	b.n	80ac574 <_ZN9TCPClient4readEPhj+0x4e>
 80ac54a:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80ac54c:	4630      	mov	r0, r6
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80ac54e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80ac552:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80ac556:	4419      	add	r1, r3
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80ac558:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80ac55a:	42bc      	cmp	r4, r7
 80ac55c:	bf28      	it	cs
 80ac55e:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80ac560:	3104      	adds	r1, #4
 80ac562:	4622      	mov	r2, r4
 80ac564:	f000 ffd7 	bl	80ad516 <memcpy>
 80ac568:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80ac56a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80ac56e:	4423      	add	r3, r4
 80ac570:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80ac574:	4620      	mov	r0, r4
 80ac576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080ac578 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80ac578:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80ac57a:	2300      	movs	r3, #0
 80ac57c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80ac580:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80ac582:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80ac586:	4770      	bx	lr

080ac588 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80ac588:	b538      	push	{r3, r4, r5, lr}
 80ac58a:	6942      	ldr	r2, [r0, #20]
 80ac58c:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80ac58e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80ac592:	b11b      	cbz	r3, 80ac59c <_ZN9TCPClient9availableEv+0x14>
 80ac594:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80ac598:	429a      	cmp	r2, r3
 80ac59a:	d00b      	beq.n	80ac5b4 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80ac59c:	4b18      	ldr	r3, [pc, #96]	; (80ac600 <_ZN9TCPClient9availableEv+0x78>)
 80ac59e:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80ac5a0:	6803      	ldr	r3, [r0, #0]
 80ac5a2:	681b      	ldr	r3, [r3, #0]
 80ac5a4:	4798      	blx	r3
 80ac5a6:	b318      	cbz	r0, 80ac5f0 <_ZN9TCPClient9availableEv+0x68>
 80ac5a8:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80ac5aa:	6818      	ldr	r0, [r3, #0]
 80ac5ac:	f7ff fe00 	bl	80ac1b0 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80ac5b0:	b918      	cbnz	r0, 80ac5ba <_ZN9TCPClient9availableEv+0x32>
 80ac5b2:	e01d      	b.n	80ac5f0 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80ac5b4:	f7ff ffe0 	bl	80ac578 <_ZN9TCPClient12flush_bufferEv>
 80ac5b8:	e7f0      	b.n	80ac59c <_ZN9TCPClient9availableEv+0x14>
 80ac5ba:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80ac5bc:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80ac5c0:	297f      	cmp	r1, #127	; 0x7f
 80ac5c2:	d815      	bhi.n	80ac5f0 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80ac5c4:	1d05      	adds	r5, r0, #4
 80ac5c6:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80ac5ca:	2300      	movs	r3, #0
 80ac5cc:	4429      	add	r1, r5
 80ac5ce:	6800      	ldr	r0, [r0, #0]
 80ac5d0:	f7ff fe06 	bl	80ac1e0 <socket_receive>
            if (ret > 0)
 80ac5d4:	2800      	cmp	r0, #0
 80ac5d6:	dd0b      	ble.n	80ac5f0 <_ZN9TCPClient9availableEv+0x68>
 80ac5d8:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80ac5da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80ac5de:	b90a      	cbnz	r2, 80ac5e4 <_ZN9TCPClient9availableEv+0x5c>
 80ac5e0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80ac5e4:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80ac5e6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80ac5ea:	4418      	add	r0, r3
 80ac5ec:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80ac5f0:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80ac5f2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80ac5f6:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80ac5fa:	1a18      	subs	r0, r3, r0
}
 80ac5fc:	bd38      	pop	{r3, r4, r5, pc}
 80ac5fe:	bf00      	nop
 80ac600:	080af298 	.word	0x080af298

080ac604 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80ac604:	b538      	push	{r3, r4, r5, lr}
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80ac606:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80ac608:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80ac60a:	6818      	ldr	r0, [r3, #0]
 80ac60c:	f7ff fdd0 	bl	80ac1b0 <socket_handle_valid>

void TCPClient::stop()
{
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80ac610:	b118      	cbz	r0, 80ac61a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80ac612:	6963      	ldr	r3, [r4, #20]
 80ac614:	6818      	ldr	r0, [r3, #0]
 80ac616:	f7ff fdf3 	bl	80ac200 <socket_close>
 80ac61a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80ac61c:	f7ff fdf8 	bl	80ac210 <socket_handle_invalid>
 80ac620:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80ac622:	6960      	ldr	r0, [r4, #20]
 80ac624:	2211      	movs	r2, #17
 80ac626:	2100      	movs	r1, #0
 80ac628:	308c      	adds	r0, #140	; 0x8c
 80ac62a:	f000 ff9a 	bl	80ad562 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80ac62e:	4620      	mov	r0, r4
}
 80ac630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80ac634:	f7ff bfa0 	b.w	80ac578 <_ZN9TCPClient12flush_bufferEv>

080ac638 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80ac638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80ac63a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80ac63e:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80ac640:	4b17      	ldr	r3, [pc, #92]	; (80ac6a0 <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80ac642:	2600      	movs	r6, #0
 80ac644:	6046      	str	r6, [r0, #4]
 80ac646:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80ac648:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80ac64a:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80ac64c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80ac64e:	20a0      	movs	r0, #160	; 0xa0
 80ac650:	460f      	mov	r7, r1
 80ac652:	f7f3 fd22 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80ac656:	4605      	mov	r5, r0
 80ac658:	b138      	cbz	r0, 80ac66a <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 80ac65a:	6007      	str	r7, [r0, #0]
 80ac65c:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 80ac660:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 80ac664:	3088      	adds	r0, #136	; 0x88
 80ac666:	f000 fac1 	bl	80acbec <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80ac66a:	2014      	movs	r0, #20
 80ac66c:	f7f3 fd15 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80ac670:	4603      	mov	r3, r0
 80ac672:	b128      	cbz	r0, 80ac680 <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80ac674:	2201      	movs	r2, #1
 80ac676:	6042      	str	r2, [r0, #4]
 80ac678:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80ac67a:	4a0a      	ldr	r2, [pc, #40]	; (80ac6a4 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80ac67c:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80ac67e:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80ac680:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80ac682:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80ac684:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80ac686:	b128      	cbz	r0, 80ac694 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80ac688:	6843      	ldr	r3, [r0, #4]
 80ac68a:	3b01      	subs	r3, #1
 80ac68c:	6043      	str	r3, [r0, #4]
 80ac68e:	b90b      	cbnz	r3, 80ac694 <_ZN9TCPClientC1Em+0x5c>
 80ac690:	f7ff feea 	bl	80ac468 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80ac694:	4620      	mov	r0, r4
 80ac696:	f7ff ff6f 	bl	80ac578 <_ZN9TCPClient12flush_bufferEv>
}
 80ac69a:	4620      	mov	r0, r4
 80ac69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ac69e:	bf00      	nop
 80ac6a0:	080af0dc 	.word	0x080af0dc
 80ac6a4:	080af0c0 	.word	0x080af0c0

080ac6a8 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80ac6a8:	b510      	push	{r4, lr}
 80ac6aa:	4604      	mov	r4, r0
 80ac6ac:	f7ff fdb0 	bl	80ac210 <socket_handle_invalid>
 80ac6b0:	4601      	mov	r1, r0
 80ac6b2:	4620      	mov	r0, r4
 80ac6b4:	f7ff ffc0 	bl	80ac638 <_ZN9TCPClientC1Em>
{
}
 80ac6b8:	4620      	mov	r0, r4
 80ac6ba:	bd10      	pop	{r4, pc}

080ac6bc <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80ac6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80ac6c0:	4698      	mov	r8, r3
    stop();
 80ac6c2:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80ac6c4:	b086      	sub	sp, #24
    stop();
 80ac6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80ac6c8:	4606      	mov	r6, r0
 80ac6ca:	460c      	mov	r4, r1
 80ac6cc:	4615      	mov	r5, r2
    stop();
 80ac6ce:	4798      	blx	r3
 80ac6d0:	4b27      	ldr	r3, [pc, #156]	; (80ac770 <_ZN9TCPClient7connectE9IPAddresstm+0xb4>)
 80ac6d2:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80ac6d4:	6803      	ldr	r3, [r0, #0]
 80ac6d6:	681b      	ldr	r3, [r3, #0]
 80ac6d8:	4798      	blx	r3
 80ac6da:	2800      	cmp	r0, #0
 80ac6dc:	d044      	beq.n	80ac768 <_ZN9TCPClient7connectE9IPAddresstm+0xac>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80ac6de:	462b      	mov	r3, r5
 80ac6e0:	f8cd 8000 	str.w	r8, [sp]
 80ac6e4:	2206      	movs	r2, #6
 80ac6e6:	2101      	movs	r1, #1
 80ac6e8:	2002      	movs	r0, #2
 80ac6ea:	6977      	ldr	r7, [r6, #20]
 80ac6ec:	f7ff fd68 	bl	80ac1c0 <socket_create>
 80ac6f0:	6038      	str	r0, [r7, #0]
          DEBUG("socket=%d",d_->sock);

          if (socket_handle_valid(d_->sock))
 80ac6f2:	6973      	ldr	r3, [r6, #20]
 80ac6f4:	6818      	ldr	r0, [r3, #0]
 80ac6f6:	f7ff fd5b 	bl	80ac1b0 <socket_handle_valid>
 80ac6fa:	2800      	cmp	r0, #0
 80ac6fc:	d034      	beq.n	80ac768 <_ZN9TCPClient7connectE9IPAddresstm+0xac>
          {
            flush_buffer();
 80ac6fe:	4630      	mov	r0, r6
 80ac700:	f7ff ff3a 	bl	80ac578 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80ac704:	2302      	movs	r3, #2
 80ac706:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80ac70a:	0a2b      	lsrs	r3, r5, #8
 80ac70c:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80ac710:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80ac712:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80ac716:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80ac71a:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80ac71c:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80ac720:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80ac724:	7963      	ldrb	r3, [r4, #5]
 80ac726:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80ac72a:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80ac72e:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80ac732:	f7ff fda5 	bl	80ac280 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80ac736:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80ac738:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80ac73a:	2210      	movs	r2, #16
 80ac73c:	a902      	add	r1, sp, #8
 80ac73e:	6818      	ldr	r0, [r3, #0]
 80ac740:	f7ff fd46 	bl	80ac1d0 <socket_connect>
 80ac744:	4607      	mov	r7, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80ac746:	4628      	mov	r0, r5
 80ac748:	f7ff fd9a 	bl	80ac280 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80ac74c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80ac74e:	6975      	ldr	r5, [r6, #20]
 80ac750:	358c      	adds	r5, #140	; 0x8c
 80ac752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80ac754:	6823      	ldr	r3, [r4, #0]
 80ac756:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80ac758:	b12f      	cbz	r7, 80ac766 <_ZN9TCPClient7connectE9IPAddresstm+0xaa>
            {
                stop();
 80ac75a:	6833      	ldr	r3, [r6, #0]
 80ac75c:	4630      	mov	r0, r6
 80ac75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80ac760:	4798      	blx	r3
 80ac762:	2000      	movs	r0, #0
 80ac764:	e000      	b.n	80ac768 <_ZN9TCPClient7connectE9IPAddresstm+0xac>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80ac766:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80ac768:	b006      	add	sp, #24
 80ac76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80ac76e:	bf00      	nop
 80ac770:	080af298 	.word	0x080af298

080ac774 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80ac774:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80ac776:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80ac778:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80ac77a:	6818      	ldr	r0, [r3, #0]
 80ac77c:	f7ff fd18 	bl	80ac1b0 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80ac780:	b908      	cbnz	r0, 80ac786 <_ZN9TCPClient6statusEv+0x12>
 80ac782:	2000      	movs	r0, #0
 80ac784:	bd10      	pop	{r4, pc}
 80ac786:	4b07      	ldr	r3, [pc, #28]	; (80ac7a4 <_ZN9TCPClient6statusEv+0x30>)
 80ac788:	6818      	ldr	r0, [r3, #0]
 80ac78a:	6803      	ldr	r3, [r0, #0]
 80ac78c:	681b      	ldr	r3, [r3, #0]
 80ac78e:	4798      	blx	r3
 80ac790:	2800      	cmp	r0, #0
 80ac792:	d0f6      	beq.n	80ac782 <_ZN9TCPClient6statusEv+0xe>
 80ac794:	6963      	ldr	r3, [r4, #20]
 80ac796:	6818      	ldr	r0, [r3, #0]
 80ac798:	f7ff fd02 	bl	80ac1a0 <socket_active_status>
 80ac79c:	fab0 f080 	clz	r0, r0
 80ac7a0:	0940      	lsrs	r0, r0, #5
}
 80ac7a2:	bd10      	pop	{r4, pc}
 80ac7a4:	080af298 	.word	0x080af298

080ac7a8 <_ZN9TCPClient5writeEPKhj>:
{
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80ac7a8:	b570      	push	{r4, r5, r6, lr}
 80ac7aa:	4606      	mov	r6, r0
 80ac7ac:	460c      	mov	r4, r1
 80ac7ae:	4615      	mov	r5, r2
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 80ac7b0:	f7ff ffe0 	bl	80ac774 <_ZN9TCPClient6statusEv>
 80ac7b4:	b138      	cbz	r0, 80ac7c6 <_ZN9TCPClient5writeEPKhj+0x1e>
 80ac7b6:	6973      	ldr	r3, [r6, #20]
 80ac7b8:	462a      	mov	r2, r5
 80ac7ba:	4621      	mov	r1, r4
}
 80ac7bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 80ac7c0:	6818      	ldr	r0, [r3, #0]
 80ac7c2:	f7ff bd15 	b.w	80ac1f0 <socket_send>
}
 80ac7c6:	f04f 30ff 	mov.w	r0, #4294967295
 80ac7ca:	bd70      	pop	{r4, r5, r6, pc}

080ac7cc <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80ac7cc:	b538      	push	{r3, r4, r5, lr}
 80ac7ce:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80ac7d0:	f7ff ffd0 	bl	80ac774 <_ZN9TCPClient6statusEv>
 80ac7d4:	bb00      	cbnz	r0, 80ac818 <_ZN9TCPClient9connectedEv+0x4c>
 80ac7d6:	6963      	ldr	r3, [r4, #20]
 80ac7d8:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80ac7dc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80ac7e0:	4291      	cmp	r1, r2
 80ac7e2:	d119      	bne.n	80ac818 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80ac7e4:	6818      	ldr	r0, [r3, #0]
 80ac7e6:	f7ff fce3 	bl	80ac1b0 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80ac7ea:	b128      	cbz	r0, 80ac7f8 <_ZN9TCPClient9connectedEv+0x2c>
 80ac7ec:	6963      	ldr	r3, [r4, #20]
 80ac7ee:	6818      	ldr	r0, [r3, #0]
 80ac7f0:	f7ff fcd6 	bl	80ac1a0 <socket_active_status>
 80ac7f4:	2801      	cmp	r0, #1
 80ac7f6:	d001      	beq.n	80ac7fc <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80ac7f8:	2500      	movs	r5, #0
 80ac7fa:	e00e      	b.n	80ac81a <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80ac7fc:	6823      	ldr	r3, [r4, #0]
 80ac7fe:	4620      	mov	r0, r4
 80ac800:	691b      	ldr	r3, [r3, #16]
 80ac802:	4798      	blx	r3
 80ac804:	2800      	cmp	r0, #0
 80ac806:	bf14      	ite	ne
 80ac808:	2501      	movne	r5, #1
 80ac80a:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80ac80c:	d105      	bne.n	80ac81a <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80ac80e:	6823      	ldr	r3, [r4, #0]
 80ac810:	4620      	mov	r0, r4
 80ac812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80ac814:	4798      	blx	r3
 80ac816:	e000      	b.n	80ac81a <_ZN9TCPClient9connectedEv+0x4e>
 80ac818:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80ac81a:	4628      	mov	r0, r5
 80ac81c:	bd38      	pop	{r3, r4, r5, pc}

080ac81e <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80ac81e:	b508      	push	{r3, lr}
   return (status()!=0);
 80ac820:	f7ff ffa8 	bl	80ac774 <_ZN9TCPClient6statusEv>
}
 80ac824:	3000      	adds	r0, #0
 80ac826:	bf18      	it	ne
 80ac828:	2001      	movne	r0, #1
 80ac82a:	bd08      	pop	{r3, pc}

080ac82c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80ac82c:	b510      	push	{r4, lr}
 80ac82e:	4604      	mov	r4, r0
{
	free(buffer);
 80ac830:	6800      	ldr	r0, [r0, #0]
 80ac832:	f7ff fd95 	bl	80ac360 <free>
}
 80ac836:	4620      	mov	r0, r4
 80ac838:	bd10      	pop	{r4, pc}

080ac83a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80ac83a:	b510      	push	{r4, lr}
 80ac83c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80ac83e:	6800      	ldr	r0, [r0, #0]
 80ac840:	b108      	cbz	r0, 80ac846 <_ZN6String10invalidateEv+0xc>
 80ac842:	f7ff fd8d 	bl	80ac360 <free>
	buffer = NULL;
 80ac846:	2300      	movs	r3, #0
 80ac848:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80ac84a:	60a3      	str	r3, [r4, #8]
 80ac84c:	6063      	str	r3, [r4, #4]
 80ac84e:	bd10      	pop	{r4, pc}

080ac850 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80ac850:	b538      	push	{r3, r4, r5, lr}
 80ac852:	4604      	mov	r4, r0
 80ac854:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80ac856:	6800      	ldr	r0, [r0, #0]
 80ac858:	3101      	adds	r1, #1
 80ac85a:	f7ff fd89 	bl	80ac370 <realloc>
	if (newbuffer) {
 80ac85e:	b110      	cbz	r0, 80ac866 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80ac860:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80ac864:	2001      	movs	r0, #1
	}
	return 0;
}
 80ac866:	bd38      	pop	{r3, r4, r5, pc}

080ac868 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80ac868:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80ac86a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80ac86c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80ac86e:	b113      	cbz	r3, 80ac876 <_ZN6String7reserveEj+0xe>
 80ac870:	6843      	ldr	r3, [r0, #4]
 80ac872:	428b      	cmp	r3, r1
 80ac874:	d207      	bcs.n	80ac886 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80ac876:	4620      	mov	r0, r4
 80ac878:	f7ff ffea 	bl	80ac850 <_ZN6String12changeBufferEj>
 80ac87c:	b120      	cbz	r0, 80ac888 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80ac87e:	68a3      	ldr	r3, [r4, #8]
 80ac880:	b90b      	cbnz	r3, 80ac886 <_ZN6String7reserveEj+0x1e>
 80ac882:	6822      	ldr	r2, [r4, #0]
 80ac884:	7013      	strb	r3, [r2, #0]
 80ac886:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80ac888:	bd10      	pop	{r4, pc}

080ac88a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80ac88a:	b570      	push	{r4, r5, r6, lr}
 80ac88c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80ac88e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80ac890:	4604      	mov	r4, r0
 80ac892:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80ac894:	f7ff ffe8 	bl	80ac868 <_ZN6String7reserveEj>
 80ac898:	b918      	cbnz	r0, 80ac8a2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80ac89a:	4620      	mov	r0, r4
 80ac89c:	f7ff ffcd 	bl	80ac83a <_ZN6String10invalidateEv>
		return *this;
 80ac8a0:	e009      	b.n	80ac8b6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80ac8a2:	462a      	mov	r2, r5
 80ac8a4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80ac8a6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80ac8a8:	6820      	ldr	r0, [r4, #0]
 80ac8aa:	f000 fe34 	bl	80ad516 <memcpy>
	buffer[len] = 0;
 80ac8ae:	6822      	ldr	r2, [r4, #0]
 80ac8b0:	68a3      	ldr	r3, [r4, #8]
 80ac8b2:	2100      	movs	r1, #0
 80ac8b4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80ac8b6:	4620      	mov	r0, r4
 80ac8b8:	bd70      	pop	{r4, r5, r6, pc}

080ac8ba <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80ac8ba:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80ac8bc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80ac8be:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80ac8c0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80ac8c2:	6043      	str	r3, [r0, #4]
	len = 0;
 80ac8c4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80ac8c6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80ac8c8:	460d      	mov	r5, r1
 80ac8ca:	b139      	cbz	r1, 80ac8dc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80ac8cc:	4608      	mov	r0, r1
 80ac8ce:	f000 fe68 	bl	80ad5a2 <strlen>
 80ac8d2:	4629      	mov	r1, r5
 80ac8d4:	4602      	mov	r2, r0
 80ac8d6:	4620      	mov	r0, r4
 80ac8d8:	f7ff ffd7 	bl	80ac88a <_ZN6String4copyEPKcj>
}
 80ac8dc:	4620      	mov	r0, r4
 80ac8de:	bd38      	pop	{r3, r4, r5, pc}

080ac8e0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80ac8e0:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80ac8e2:	b510      	push	{r4, lr}
 80ac8e4:	460b      	mov	r3, r1
 80ac8e6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80ac8e8:	d007      	beq.n	80ac8fa <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80ac8ea:	6809      	ldr	r1, [r1, #0]
 80ac8ec:	b119      	cbz	r1, 80ac8f6 <_ZN6StringaSERKS_+0x16>
 80ac8ee:	689a      	ldr	r2, [r3, #8]
 80ac8f0:	f7ff ffcb 	bl	80ac88a <_ZN6String4copyEPKcj>
 80ac8f4:	e001      	b.n	80ac8fa <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80ac8f6:	f7ff ffa0 	bl	80ac83a <_ZN6String10invalidateEv>

	return *this;
}
 80ac8fa:	4620      	mov	r0, r4
 80ac8fc:	bd10      	pop	{r4, pc}

080ac8fe <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80ac8fe:	b538      	push	{r3, r4, r5, lr}
 80ac900:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80ac902:	460c      	mov	r4, r1
 80ac904:	b141      	cbz	r1, 80ac918 <_ZN6StringaSEPKc+0x1a>
 80ac906:	4608      	mov	r0, r1
 80ac908:	f000 fe4b 	bl	80ad5a2 <strlen>
 80ac90c:	4621      	mov	r1, r4
 80ac90e:	4602      	mov	r2, r0
 80ac910:	4628      	mov	r0, r5
 80ac912:	f7ff ffba 	bl	80ac88a <_ZN6String4copyEPKcj>
 80ac916:	e001      	b.n	80ac91c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80ac918:	f7ff ff8f 	bl	80ac83a <_ZN6String10invalidateEv>

	return *this;
}
 80ac91c:	4628      	mov	r0, r5
 80ac91e:	bd38      	pop	{r3, r4, r5, pc}

080ac920 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80ac920:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80ac922:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80ac924:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80ac926:	b912      	cbnz	r2, 80ac92e <_ZNK6String6equalsEPKc+0xe>
 80ac928:	b919      	cbnz	r1, 80ac932 <_ZNK6String6equalsEPKc+0x12>
 80ac92a:	2001      	movs	r0, #1
 80ac92c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80ac92e:	b911      	cbnz	r1, 80ac936 <_ZNK6String6equalsEPKc+0x16>
 80ac930:	6803      	ldr	r3, [r0, #0]
 80ac932:	7818      	ldrb	r0, [r3, #0]
 80ac934:	e002      	b.n	80ac93c <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80ac936:	6800      	ldr	r0, [r0, #0]
 80ac938:	f000 fe29 	bl	80ad58e <strcmp>
 80ac93c:	fab0 f080 	clz	r0, r0
 80ac940:	0940      	lsrs	r0, r0, #5
}
 80ac942:	bd08      	pop	{r3, pc}

080ac944 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80ac944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ac946:	4606      	mov	r6, r0
 80ac948:	460d      	mov	r5, r1
 80ac94a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80ac94c:	2400      	movs	r4, #0
  while (size--) {
 80ac94e:	42bd      	cmp	r5, r7
 80ac950:	d00c      	beq.n	80ac96c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80ac952:	6833      	ldr	r3, [r6, #0]
 80ac954:	f815 1b01 	ldrb.w	r1, [r5], #1
 80ac958:	689b      	ldr	r3, [r3, #8]
 80ac95a:	4630      	mov	r0, r6
 80ac95c:	4798      	blx	r3
     if (chunk>=0)
 80ac95e:	2800      	cmp	r0, #0
 80ac960:	db01      	blt.n	80ac966 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80ac962:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80ac964:	e7f3      	b.n	80ac94e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80ac966:	2c00      	cmp	r4, #0
 80ac968:	bf08      	it	eq
 80ac96a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80ac96c:	4620      	mov	r0, r4
 80ac96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080ac970 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80ac970:	6803      	ldr	r3, [r0, #0]
 80ac972:	689b      	ldr	r3, [r3, #8]
 80ac974:	4718      	bx	r3

080ac976 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80ac976:	2a01      	cmp	r2, #1
 80ac978:	bf98      	it	ls
 80ac97a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80ac97c:	b530      	push	{r4, r5, lr}
 80ac97e:	460b      	mov	r3, r1
 80ac980:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80ac982:	2100      	movs	r1, #0
 80ac984:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80ac988:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80ac98c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80ac990:	fb05 3312 	mls	r3, r5, r2, r3
 80ac994:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80ac996:	2b09      	cmp	r3, #9
 80ac998:	bf94      	ite	ls
 80ac99a:	3330      	addls	r3, #48	; 0x30
 80ac99c:	3337      	addhi	r3, #55	; 0x37
 80ac99e:	b2db      	uxtb	r3, r3
 80ac9a0:	4621      	mov	r1, r4
 80ac9a2:	f804 3901 	strb.w	r3, [r4], #-1
 80ac9a6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80ac9a8:	2d00      	cmp	r5, #0
 80ac9aa:	d1ef      	bne.n	80ac98c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80ac9ac:	f7ff fb7f 	bl	80ac0ae <_ZN5Print5writeEPKc>
}
 80ac9b0:	b00b      	add	sp, #44	; 0x2c
 80ac9b2:	bd30      	pop	{r4, r5, pc}

080ac9b4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80ac9b4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80ac9b6:	b922      	cbnz	r2, 80ac9c2 <_ZN5Print5printEmi+0xe>
 80ac9b8:	6803      	ldr	r3, [r0, #0]
 80ac9ba:	b2c9      	uxtb	r1, r1
 80ac9bc:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80ac9be:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80ac9c0:	4718      	bx	r3
  else return printNumber(n, base);
 80ac9c2:	b2d2      	uxtb	r2, r2
}
 80ac9c4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80ac9c6:	f7ff bfd6 	b.w	80ac976 <_ZN5Print11printNumberEmh>

080ac9ca <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80ac9ca:	f7ff bff3 	b.w	80ac9b4 <_ZN5Print5printEmi>
	...

080ac9d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80ac9d0:	4a01      	ldr	r2, [pc, #4]	; (80ac9d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80ac9d2:	4b02      	ldr	r3, [pc, #8]	; (80ac9dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80ac9d4:	601a      	str	r2, [r3, #0]
 80ac9d6:	4770      	bx	lr
 80ac9d8:	080af1c3 	.word	0x080af1c3
 80ac9dc:	20003030 	.word	0x20003030

080ac9e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80ac9e0:	4b02      	ldr	r3, [pc, #8]	; (80ac9ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80ac9e2:	681a      	ldr	r2, [r3, #0]
 80ac9e4:	4b02      	ldr	r3, [pc, #8]	; (80ac9f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80ac9e6:	601a      	str	r2, [r3, #0]
 80ac9e8:	4770      	bx	lr
 80ac9ea:	bf00      	nop
 80ac9ec:	20000300 	.word	0x20000300
 80ac9f0:	20003034 	.word	0x20003034

080ac9f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80ac9f4:	2100      	movs	r1, #0
 80ac9f6:	f7ff bc83 	b.w	80ac300 <system_delay_ms>

080ac9fa <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80ac9fa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80ac9fc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80ac9fe:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80aca00:	b113      	cbz	r3, 80aca08 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80aca02:	2203      	movs	r2, #3
 80aca04:	4601      	mov	r1, r0
 80aca06:	4798      	blx	r3
    }
 80aca08:	4620      	mov	r0, r4
 80aca0a:	bd10      	pop	{r4, pc}

080aca0c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80aca0c:	b510      	push	{r4, lr}
 80aca0e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80aca10:	f7ff fff3 	bl	80ac9fa <_ZNSt14_Function_baseD1Ev>
 80aca14:	4620      	mov	r0, r4
 80aca16:	bd10      	pop	{r4, pc}

080aca18 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80aca18:	b510      	push	{r4, lr}
 80aca1a:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80aca1c:	f7ff fc58 	bl	80ac2d0 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
 80aca20:	4284      	cmp	r4, r0
 80aca22:	d008      	beq.n	80aca36 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80aca24:	b11c      	cbz	r4, 80aca2e <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80aca26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
 80aca2a:	f7ff bc41 	b.w	80ac2b0 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
 80aca2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
 80aca32:	f7ff bc45 	b.w	80ac2c0 <LED_Signaling_Stop>
 80aca36:	bd10      	pop	{r4, pc}

080aca38 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80aca38:	b570      	push	{r4, r5, r6, lr}
 80aca3a:	4605      	mov	r5, r0
 80aca3c:	460e      	mov	r6, r1
 80aca3e:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80aca40:	f7ff fc46 	bl	80ac2d0 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
 80aca44:	b150      	cbz	r0, 80aca5c <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80aca46:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 80aca4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80aca4e:	f7ff fc27 	bl	80ac2a0 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80aca52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
 80aca56:	20e7      	movs	r0, #231	; 0xe7
 80aca58:	f7ff bc42 	b.w	80ac2e0 <LED_On>
 80aca5c:	bd70      	pop	{r4, r5, r6, pc}
	...

080aca60 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80aca60:	4803      	ldr	r0, [pc, #12]	; (80aca70 <_GLOBAL__sub_I_RGB+0x10>)
 80aca62:	2300      	movs	r3, #0
 80aca64:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80aca66:	4a03      	ldr	r2, [pc, #12]	; (80aca74 <_GLOBAL__sub_I_RGB+0x14>)
 80aca68:	4903      	ldr	r1, [pc, #12]	; (80aca78 <_GLOBAL__sub_I_RGB+0x18>)
 80aca6a:	f000 ba51 	b.w	80acf10 <__aeabi_atexit>
 80aca6e:	bf00      	nop
 80aca70:	20003038 	.word	0x20003038
 80aca74:	20000368 	.word	0x20000368
 80aca78:	080aca0d 	.word	0x080aca0d

080aca7c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80aca7c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80aca7e:	4b14      	ldr	r3, [pc, #80]	; (80acad0 <serialEventRun+0x54>)
 80aca80:	b133      	cbz	r3, 80aca90 <serialEventRun+0x14>
 80aca82:	f000 f921 	bl	80accc8 <_Z16_fetch_usbserialv>
 80aca86:	6803      	ldr	r3, [r0, #0]
 80aca88:	691b      	ldr	r3, [r3, #16]
 80aca8a:	4798      	blx	r3
 80aca8c:	2800      	cmp	r0, #0
 80aca8e:	dc16      	bgt.n	80acabe <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80aca90:	4b10      	ldr	r3, [pc, #64]	; (80acad4 <serialEventRun+0x58>)
 80aca92:	b133      	cbz	r3, 80acaa2 <serialEventRun+0x26>
 80aca94:	f000 f9ac 	bl	80acdf0 <_Z22__fetch_global_Serial1v>
 80aca98:	6803      	ldr	r3, [r0, #0]
 80aca9a:	691b      	ldr	r3, [r3, #16]
 80aca9c:	4798      	blx	r3
 80aca9e:	2800      	cmp	r0, #0
 80acaa0:	dc10      	bgt.n	80acac4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80acaa2:	4b0d      	ldr	r3, [pc, #52]	; (80acad8 <serialEventRun+0x5c>)
 80acaa4:	b10b      	cbz	r3, 80acaaa <serialEventRun+0x2e>
 80acaa6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80acaaa:	4b0c      	ldr	r3, [pc, #48]	; (80acadc <serialEventRun+0x60>)
 80acaac:	b17b      	cbz	r3, 80acace <serialEventRun+0x52>
 80acaae:	f000 f939 	bl	80acd24 <_Z17_fetch_usbserial1v>
 80acab2:	6803      	ldr	r3, [r0, #0]
 80acab4:	691b      	ldr	r3, [r3, #16]
 80acab6:	4798      	blx	r3
 80acab8:	2800      	cmp	r0, #0
 80acaba:	dc06      	bgt.n	80acaca <serialEventRun+0x4e>
 80acabc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80acabe:	f3af 8000 	nop.w
 80acac2:	e7e5      	b.n	80aca90 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80acac4:	f3af 8000 	nop.w
 80acac8:	e7eb      	b.n	80acaa2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80acaca:	f3af 8000 	nop.w
 80acace:	bd08      	pop	{r3, pc}
	...

080acae0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80acae0:	b508      	push	{r3, lr}
	serialEventRun();
 80acae2:	f7ff ffcb 	bl	80aca7c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80acae6:	f7ff fb13 	bl	80ac110 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80acaea:	4b01      	ldr	r3, [pc, #4]	; (80acaf0 <_post_loop+0x10>)
 80acaec:	6018      	str	r0, [r3, #0]
 80acaee:	bd08      	pop	{r3, pc}
 80acaf0:	200030c4 	.word	0x200030c4

080acaf4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80acaf4:	4802      	ldr	r0, [pc, #8]	; (80acb00 <_Z33system_initialize_user_backup_ramv+0xc>)
 80acaf6:	4a03      	ldr	r2, [pc, #12]	; (80acb04 <_Z33system_initialize_user_backup_ramv+0x10>)
 80acaf8:	4903      	ldr	r1, [pc, #12]	; (80acb08 <_Z33system_initialize_user_backup_ramv+0x14>)
 80acafa:	1a12      	subs	r2, r2, r0
 80acafc:	f000 bd0b 	b.w	80ad516 <memcpy>
 80acb00:	40024000 	.word	0x40024000
 80acb04:	40024004 	.word	0x40024004
 80acb08:	080af378 	.word	0x080af378

080acb0c <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80acb0c:	2000      	movs	r0, #0
 80acb0e:	4770      	bx	lr

080acb10 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80acb10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80acb12:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80acb14:	4604      	mov	r4, r0
    switch (req->type) {
 80acb16:	2b0a      	cmp	r3, #10
 80acb18:	d00e      	beq.n	80acb38 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80acb1a:	2b50      	cmp	r3, #80	; 0x50
 80acb1c:	d11c      	bne.n	80acb58 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80acb1e:	4b10      	ldr	r3, [pc, #64]	; (80acb60 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80acb20:	681d      	ldr	r5, [r3, #0]
 80acb22:	b1cd      	cbz	r5, 80acb58 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80acb24:	7d03      	ldrb	r3, [r0, #20]
 80acb26:	f44f 7100 	mov.w	r1, #512	; 0x200
 80acb2a:	9300      	str	r3, [sp, #0]
 80acb2c:	68c2      	ldr	r2, [r0, #12]
 80acb2e:	f100 0310 	add.w	r3, r0, #16
 80acb32:	6880      	ldr	r0, [r0, #8]
 80acb34:	47a8      	blx	r5
 80acb36:	e007      	b.n	80acb48 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80acb38:	f100 0310 	add.w	r3, r0, #16
 80acb3c:	68c2      	ldr	r2, [r0, #12]
 80acb3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80acb42:	6880      	ldr	r0, [r0, #8]
 80acb44:	f7ff ffe2 	bl	80acb0c <_Z26usb_request_custom_handlerPcjjPj>
 80acb48:	b130      	cbz	r0, 80acb58 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80acb4a:	2200      	movs	r2, #0
 80acb4c:	4620      	mov	r0, r4
 80acb4e:	4611      	mov	r1, r2
 80acb50:	f7ff fbe6 	bl	80ac320 <system_set_usb_request_result>
        return true;
 80acb54:	2001      	movs	r0, #1
 80acb56:	e000      	b.n	80acb5a <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80acb58:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80acb5a:	b003      	add	sp, #12
 80acb5c:	bd30      	pop	{r4, r5, pc}
 80acb5e:	bf00      	nop
 80acb60:	20003048 	.word	0x20003048

080acb64 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80acb64:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80acb66:	4c0c      	ldr	r4, [pc, #48]	; (80acb98 <module_user_init_hook+0x34>)
 80acb68:	4d0c      	ldr	r5, [pc, #48]	; (80acb9c <module_user_init_hook+0x38>)
 80acb6a:	6823      	ldr	r3, [r4, #0]
 80acb6c:	42ab      	cmp	r3, r5
 80acb6e:	4b0c      	ldr	r3, [pc, #48]	; (80acba0 <module_user_init_hook+0x3c>)
 80acb70:	bf0c      	ite	eq
 80acb72:	2201      	moveq	r2, #1
 80acb74:	2200      	movne	r2, #0
 80acb76:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80acb78:	d002      	beq.n	80acb80 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80acb7a:	f7ff ffbb 	bl	80acaf4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80acb7e:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80acb80:	4b08      	ldr	r3, [pc, #32]	; (80acba4 <module_user_init_hook+0x40>)
 80acb82:	b11b      	cbz	r3, 80acb8c <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80acb84:	f7ff fabc 	bl	80ac100 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80acb88:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80acb8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80acb90:	2100      	movs	r1, #0
 80acb92:	4805      	ldr	r0, [pc, #20]	; (80acba8 <module_user_init_hook+0x44>)
 80acb94:	f7ff bbbc 	b.w	80ac310 <system_set_usb_request_app_handler>
 80acb98:	40024000 	.word	0x40024000
 80acb9c:	9a271c1e 	.word	0x9a271c1e
 80acba0:	2000304c 	.word	0x2000304c
 80acba4:	00000000 	.word	0x00000000
 80acba8:	080acb11 	.word	0x080acb11

080acbac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80acbac:	4770      	bx	lr

080acbae <_ZN9IPAddressD0Ev>:
 80acbae:	b510      	push	{r4, lr}
 80acbb0:	4604      	mov	r4, r0
 80acbb2:	f7f3 fa76 	bl	80a00a2 <_ZdlPv>
 80acbb6:	4620      	mov	r0, r4
 80acbb8:	bd10      	pop	{r4, pc}

080acbba <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80acbba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80acbbc:	460f      	mov	r7, r1
 80acbbe:	f100 0608 	add.w	r6, r0, #8
 80acbc2:	1d05      	adds	r5, r0, #4
 80acbc4:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80acbc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80acbca:	220a      	movs	r2, #10
 80acbcc:	4638      	mov	r0, r7
 80acbce:	f7ff fefc 	bl	80ac9ca <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80acbd2:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80acbd4:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80acbd6:	d007      	beq.n	80acbe8 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80acbd8:	2c00      	cmp	r4, #0
 80acbda:	d0f4      	beq.n	80acbc6 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80acbdc:	212e      	movs	r1, #46	; 0x2e
 80acbde:	4638      	mov	r0, r7
 80acbe0:	f7ff fec6 	bl	80ac970 <_ZN5Print5printEc>
 80acbe4:	4404      	add	r4, r0
 80acbe6:	e7ee      	b.n	80acbc6 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80acbe8:	4620      	mov	r0, r4
 80acbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080acbec <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80acbec:	b510      	push	{r4, lr}
 80acbee:	4604      	mov	r4, r0
 80acbf0:	4b04      	ldr	r3, [pc, #16]	; (80acc04 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80acbf2:	2211      	movs	r2, #17
 80acbf4:	f840 3b04 	str.w	r3, [r0], #4
 80acbf8:	2100      	movs	r1, #0
 80acbfa:	f000 fcb2 	bl	80ad562 <memset>
{
    clear();
}
 80acbfe:	4620      	mov	r0, r4
 80acc00:	bd10      	pop	{r4, pc}
 80acc02:	bf00      	nop
 80acc04:	080af220 	.word	0x080af220

080acc08 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80acc08:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80acc0a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80acc0e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80acc12:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80acc16:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80acc1a:	2304      	movs	r3, #4
 80acc1c:	6041      	str	r1, [r0, #4]
 80acc1e:	7503      	strb	r3, [r0, #20]
 80acc20:	bd10      	pop	{r4, pc}
	...

080acc24 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80acc24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80acc26:	4d04      	ldr	r5, [pc, #16]	; (80acc38 <_ZN9IPAddressC1Ehhhh+0x14>)
 80acc28:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80acc2a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80acc2e:	9500      	str	r5, [sp, #0]
 80acc30:	f7ff ffea 	bl	80acc08 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80acc34:	b003      	add	sp, #12
 80acc36:	bd30      	pop	{r4, r5, pc}
 80acc38:	080af220 	.word	0x080af220

080acc3c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80acc3c:	7441      	strb	r1, [r0, #17]
 80acc3e:	4770      	bx	lr

080acc40 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80acc40:	4770      	bx	lr

080acc42 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80acc42:	2100      	movs	r1, #0
 80acc44:	7c00      	ldrb	r0, [r0, #16]
 80acc46:	f7ff bb03 	b.w	80ac250 <HAL_USB_USART_Receive_Data>

080acc4a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80acc4a:	2101      	movs	r1, #1
 80acc4c:	7c00      	ldrb	r0, [r0, #16]
 80acc4e:	f7ff baff 	b.w	80ac250 <HAL_USB_USART_Receive_Data>

080acc52 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80acc52:	7c00      	ldrb	r0, [r0, #16]
 80acc54:	f7ff baf4 	b.w	80ac240 <HAL_USB_USART_Available_Data_For_Write>

080acc58 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80acc58:	7c00      	ldrb	r0, [r0, #16]
 80acc5a:	f7ff bae9 	b.w	80ac230 <HAL_USB_USART_Available_Data>

080acc5e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80acc5e:	b538      	push	{r3, r4, r5, lr}
 80acc60:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80acc62:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80acc64:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80acc66:	f7ff faeb 	bl	80ac240 <HAL_USB_USART_Available_Data_For_Write>
 80acc6a:	2800      	cmp	r0, #0
 80acc6c:	dc01      	bgt.n	80acc72 <_ZN9USBSerial5writeEh+0x14>
 80acc6e:	7c60      	ldrb	r0, [r4, #17]
 80acc70:	b120      	cbz	r0, 80acc7c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80acc72:	4629      	mov	r1, r5
 80acc74:	7c20      	ldrb	r0, [r4, #16]
 80acc76:	f7ff faf3 	bl	80ac260 <HAL_USB_USART_Send_Data>
    return 1;
 80acc7a:	2001      	movs	r0, #1
  }
  return 0;
}
 80acc7c:	bd38      	pop	{r3, r4, r5, pc}

080acc7e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80acc7e:	7c00      	ldrb	r0, [r0, #16]
 80acc80:	f7ff baf6 	b.w	80ac270 <HAL_USB_USART_Flush_Data>

080acc84 <_ZN9USBSerialD0Ev>:
 80acc84:	b510      	push	{r4, lr}
 80acc86:	4604      	mov	r4, r0
 80acc88:	f7f3 fa0b 	bl	80a00a2 <_ZdlPv>
 80acc8c:	4620      	mov	r0, r4
 80acc8e:	bd10      	pop	{r4, pc}

080acc90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80acc90:	b510      	push	{r4, lr}
 80acc92:	4604      	mov	r4, r0
 80acc94:	2300      	movs	r3, #0
 80acc96:	6063      	str	r3, [r4, #4]
 80acc98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80acc9c:	60a3      	str	r3, [r4, #8]
 80acc9e:	4b05      	ldr	r3, [pc, #20]	; (80accb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80acca0:	4608      	mov	r0, r1
 80acca2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80acca4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80acca6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80acca8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80accaa:	4611      	mov	r1, r2
 80accac:	f7ff fab8 	bl	80ac220 <HAL_USB_USART_Init>
}
 80accb0:	4620      	mov	r0, r4
 80accb2:	bd10      	pop	{r4, pc}
 80accb4:	080af234 	.word	0x080af234

080accb8 <_Z19acquireSerialBufferv>:
 80accb8:	b510      	push	{r4, lr}
 80accba:	4604      	mov	r4, r0
 80accbc:	2214      	movs	r2, #20
 80accbe:	2100      	movs	r1, #0
 80accc0:	f000 fc4f 	bl	80ad562 <memset>
 80accc4:	4620      	mov	r0, r4
 80accc6:	bd10      	pop	{r4, pc}

080accc8 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80accc8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80accca:	4d0e      	ldr	r5, [pc, #56]	; (80acd04 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80acccc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80accce:	a801      	add	r0, sp, #4
 80accd0:	f7ff fff2 	bl	80accb8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80accd4:	6829      	ldr	r1, [r5, #0]
 80accd6:	f011 0401 	ands.w	r4, r1, #1
 80accda:	d110      	bne.n	80accfe <_Z16_fetch_usbserialv+0x36>
 80accdc:	4628      	mov	r0, r5
 80accde:	f7f3 f9e4 	bl	80a00aa <__cxa_guard_acquire>
 80acce2:	b160      	cbz	r0, 80accfe <_Z16_fetch_usbserialv+0x36>
 80acce4:	aa01      	add	r2, sp, #4
 80acce6:	4621      	mov	r1, r4
 80acce8:	4807      	ldr	r0, [pc, #28]	; (80acd08 <_Z16_fetch_usbserialv+0x40>)
 80accea:	f7ff ffd1 	bl	80acc90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80accee:	4628      	mov	r0, r5
 80accf0:	f7f3 f9e0 	bl	80a00b4 <__cxa_guard_release>
 80accf4:	4a05      	ldr	r2, [pc, #20]	; (80acd0c <_Z16_fetch_usbserialv+0x44>)
 80accf6:	4906      	ldr	r1, [pc, #24]	; (80acd10 <_Z16_fetch_usbserialv+0x48>)
 80accf8:	4803      	ldr	r0, [pc, #12]	; (80acd08 <_Z16_fetch_usbserialv+0x40>)
 80accfa:	f000 f909 	bl	80acf10 <__aeabi_atexit>
	return _usbserial;
}
 80accfe:	4802      	ldr	r0, [pc, #8]	; (80acd08 <_Z16_fetch_usbserialv+0x40>)
 80acd00:	b007      	add	sp, #28
 80acd02:	bd30      	pop	{r4, r5, pc}
 80acd04:	20003050 	.word	0x20003050
 80acd08:	20003058 	.word	0x20003058
 80acd0c:	20000368 	.word	0x20000368
 80acd10:	080acc41 	.word	0x080acc41

080acd14 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80acd14:	b510      	push	{r4, lr}
 80acd16:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80acd18:	2214      	movs	r2, #20
 80acd1a:	2100      	movs	r1, #0
 80acd1c:	f000 fc21 	bl	80ad562 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80acd20:	4620      	mov	r0, r4
 80acd22:	bd10      	pop	{r4, pc}

080acd24 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80acd24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80acd26:	4c0e      	ldr	r4, [pc, #56]	; (80acd60 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80acd28:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80acd2a:	a801      	add	r0, sp, #4
 80acd2c:	f7ff fff2 	bl	80acd14 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80acd30:	6823      	ldr	r3, [r4, #0]
 80acd32:	07db      	lsls	r3, r3, #31
 80acd34:	d410      	bmi.n	80acd58 <_Z17_fetch_usbserial1v+0x34>
 80acd36:	4620      	mov	r0, r4
 80acd38:	f7f3 f9b7 	bl	80a00aa <__cxa_guard_acquire>
 80acd3c:	b160      	cbz	r0, 80acd58 <_Z17_fetch_usbserial1v+0x34>
 80acd3e:	aa01      	add	r2, sp, #4
 80acd40:	2101      	movs	r1, #1
 80acd42:	4808      	ldr	r0, [pc, #32]	; (80acd64 <_Z17_fetch_usbserial1v+0x40>)
 80acd44:	f7ff ffa4 	bl	80acc90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80acd48:	4620      	mov	r0, r4
 80acd4a:	f7f3 f9b3 	bl	80a00b4 <__cxa_guard_release>
 80acd4e:	4a06      	ldr	r2, [pc, #24]	; (80acd68 <_Z17_fetch_usbserial1v+0x44>)
 80acd50:	4906      	ldr	r1, [pc, #24]	; (80acd6c <_Z17_fetch_usbserial1v+0x48>)
 80acd52:	4804      	ldr	r0, [pc, #16]	; (80acd64 <_Z17_fetch_usbserial1v+0x40>)
 80acd54:	f000 f8dc 	bl	80acf10 <__aeabi_atexit>
  return _usbserial1;
}
 80acd58:	4802      	ldr	r0, [pc, #8]	; (80acd64 <_Z17_fetch_usbserial1v+0x40>)
 80acd5a:	b006      	add	sp, #24
 80acd5c:	bd10      	pop	{r4, pc}
 80acd5e:	bf00      	nop
 80acd60:	20003054 	.word	0x20003054
 80acd64:	2000306c 	.word	0x2000306c
 80acd68:	20000368 	.word	0x20000368
 80acd6c:	080acc41 	.word	0x080acc41

080acd70 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80acd70:	4770      	bx	lr

080acd72 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80acd72:	7441      	strb	r1, [r0, #17]
 80acd74:	4770      	bx	lr

080acd76 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80acd76:	7c00      	ldrb	r0, [r0, #16]
 80acd78:	f7ff ba0a 	b.w	80ac190 <HAL_USART_Available_Data_For_Write>

080acd7c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80acd7c:	7c00      	ldrb	r0, [r0, #16]
 80acd7e:	f7ff b9e7 	b.w	80ac150 <HAL_USART_Available_Data>

080acd82 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80acd82:	7c00      	ldrb	r0, [r0, #16]
 80acd84:	f7ff b9f4 	b.w	80ac170 <HAL_USART_Peek_Data>

080acd88 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80acd88:	7c00      	ldrb	r0, [r0, #16]
 80acd8a:	f7ff b9e9 	b.w	80ac160 <HAL_USART_Read_Data>

080acd8e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80acd8e:	7c00      	ldrb	r0, [r0, #16]
 80acd90:	f7ff b9f6 	b.w	80ac180 <HAL_USART_Flush_Data>

080acd94 <_ZN11USARTSerialD0Ev>:
 80acd94:	b510      	push	{r4, lr}
 80acd96:	4604      	mov	r4, r0
 80acd98:	f7f3 f983 	bl	80a00a2 <_ZdlPv>
 80acd9c:	4620      	mov	r0, r4
 80acd9e:	bd10      	pop	{r4, pc}

080acda0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80acda0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80acda2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80acda4:	4604      	mov	r4, r0
 80acda6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80acda8:	b925      	cbnz	r5, 80acdb4 <_ZN11USARTSerial5writeEh+0x14>
 80acdaa:	7c00      	ldrb	r0, [r0, #16]
 80acdac:	f7ff f9f0 	bl	80ac190 <HAL_USART_Available_Data_For_Write>
 80acdb0:	2800      	cmp	r0, #0
 80acdb2:	dd05      	ble.n	80acdc0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80acdb4:	4631      	mov	r1, r6
 80acdb6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80acdb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80acdbc:	f7ff b9c0 	b.w	80ac140 <HAL_USART_Write_Data>
  }
  return 0;
}
 80acdc0:	4628      	mov	r0, r5
 80acdc2:	bd70      	pop	{r4, r5, r6, pc}

080acdc4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80acdc4:	b510      	push	{r4, lr}
 80acdc6:	4604      	mov	r4, r0
 80acdc8:	4608      	mov	r0, r1
 80acdca:	4611      	mov	r1, r2
 80acdcc:	2200      	movs	r2, #0
 80acdce:	6062      	str	r2, [r4, #4]
 80acdd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80acdd4:	60a2      	str	r2, [r4, #8]
 80acdd6:	4a05      	ldr	r2, [pc, #20]	; (80acdec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80acdd8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80acdda:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80acddc:	2201      	movs	r2, #1
 80acdde:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80acde0:	461a      	mov	r2, r3
 80acde2:	f7ff f9a5 	bl	80ac130 <HAL_USART_Init>
}
 80acde6:	4620      	mov	r0, r4
 80acde8:	bd10      	pop	{r4, pc}
 80acdea:	bf00      	nop
 80acdec:	080af264 	.word	0x080af264

080acdf0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80acdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80acdf2:	4c19      	ldr	r4, [pc, #100]	; (80ace58 <_Z22__fetch_global_Serial1v+0x68>)
 80acdf4:	6825      	ldr	r5, [r4, #0]
 80acdf6:	b94d      	cbnz	r5, 80ace0c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80acdf8:	2084      	movs	r0, #132	; 0x84
 80acdfa:	f7f3 f94e 	bl	80a009a <_Znwj>
 80acdfe:	4606      	mov	r6, r0
 80ace00:	b118      	cbz	r0, 80ace0a <_Z22__fetch_global_Serial1v+0x1a>
 80ace02:	2284      	movs	r2, #132	; 0x84
 80ace04:	4629      	mov	r1, r5
 80ace06:	f000 fbac 	bl	80ad562 <memset>
 80ace0a:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80ace0c:	4d13      	ldr	r5, [pc, #76]	; (80ace5c <_Z22__fetch_global_Serial1v+0x6c>)
 80ace0e:	682e      	ldr	r6, [r5, #0]
 80ace10:	b94e      	cbnz	r6, 80ace26 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80ace12:	2084      	movs	r0, #132	; 0x84
 80ace14:	f7f3 f941 	bl	80a009a <_Znwj>
 80ace18:	4607      	mov	r7, r0
 80ace1a:	b118      	cbz	r0, 80ace24 <_Z22__fetch_global_Serial1v+0x34>
 80ace1c:	2284      	movs	r2, #132	; 0x84
 80ace1e:	4631      	mov	r1, r6
 80ace20:	f000 fb9f 	bl	80ad562 <memset>
 80ace24:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80ace26:	4f0e      	ldr	r7, [pc, #56]	; (80ace60 <_Z22__fetch_global_Serial1v+0x70>)
 80ace28:	6839      	ldr	r1, [r7, #0]
 80ace2a:	f011 0601 	ands.w	r6, r1, #1
 80ace2e:	d111      	bne.n	80ace54 <_Z22__fetch_global_Serial1v+0x64>
 80ace30:	4638      	mov	r0, r7
 80ace32:	f7f3 f93a 	bl	80a00aa <__cxa_guard_acquire>
 80ace36:	b168      	cbz	r0, 80ace54 <_Z22__fetch_global_Serial1v+0x64>
 80ace38:	6822      	ldr	r2, [r4, #0]
 80ace3a:	4631      	mov	r1, r6
 80ace3c:	682b      	ldr	r3, [r5, #0]
 80ace3e:	4809      	ldr	r0, [pc, #36]	; (80ace64 <_Z22__fetch_global_Serial1v+0x74>)
 80ace40:	f7ff ffc0 	bl	80acdc4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80ace44:	4638      	mov	r0, r7
 80ace46:	f7f3 f935 	bl	80a00b4 <__cxa_guard_release>
 80ace4a:	4a07      	ldr	r2, [pc, #28]	; (80ace68 <_Z22__fetch_global_Serial1v+0x78>)
 80ace4c:	4907      	ldr	r1, [pc, #28]	; (80ace6c <_Z22__fetch_global_Serial1v+0x7c>)
 80ace4e:	4805      	ldr	r0, [pc, #20]	; (80ace64 <_Z22__fetch_global_Serial1v+0x74>)
 80ace50:	f000 f85e 	bl	80acf10 <__aeabi_atexit>
#endif
	return serial1;
}
 80ace54:	4803      	ldr	r0, [pc, #12]	; (80ace64 <_Z22__fetch_global_Serial1v+0x74>)
 80ace56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ace58:	2000309c 	.word	0x2000309c
 80ace5c:	20003094 	.word	0x20003094
 80ace60:	20003098 	.word	0x20003098
 80ace64:	20003080 	.word	0x20003080
 80ace68:	20000368 	.word	0x20000368
 80ace6c:	080acd71 	.word	0x080acd71

080ace70 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80ace70:	4770      	bx	lr

080ace72 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80ace72:	2200      	movs	r2, #0
 80ace74:	4611      	mov	r1, r2
 80ace76:	4610      	mov	r0, r2
 80ace78:	f7ff ba5a 	b.w	80ac330 <network_ready>

080ace7c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80ace7c:	4803      	ldr	r0, [pc, #12]	; (80ace8c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80ace7e:	4b04      	ldr	r3, [pc, #16]	; (80ace90 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80ace80:	4a04      	ldr	r2, [pc, #16]	; (80ace94 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80ace82:	4905      	ldr	r1, [pc, #20]	; (80ace98 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80ace84:	6003      	str	r3, [r0, #0]
 80ace86:	f000 b843 	b.w	80acf10 <__aeabi_atexit>
 80ace8a:	bf00      	nop
 80ace8c:	200030a0 	.word	0x200030a0
 80ace90:	080af294 	.word	0x080af294
 80ace94:	20000368 	.word	0x20000368
 80ace98:	080ace71 	.word	0x080ace71

080ace9c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80ace9c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80ace9e:	4c0c      	ldr	r4, [pc, #48]	; (80aced0 <_GLOBAL__sub_I_SPI+0x34>)
 80acea0:	4e0c      	ldr	r6, [pc, #48]	; (80aced4 <_GLOBAL__sub_I_SPI+0x38>)
 80acea2:	4d0d      	ldr	r5, [pc, #52]	; (80aced8 <_GLOBAL__sub_I_SPI+0x3c>)
 80acea4:	2100      	movs	r1, #0
 80acea6:	4620      	mov	r0, r4
 80acea8:	f7ff fa7a 	bl	80ac3a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80aceac:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80aceae:	4c0b      	ldr	r4, [pc, #44]	; (80acedc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80aceb0:	4632      	mov	r2, r6
 80aceb2:	4629      	mov	r1, r5
 80aceb4:	f000 f82c 	bl	80acf10 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80aceb8:	2101      	movs	r1, #1
 80aceba:	4620      	mov	r0, r4
 80acebc:	f7ff fa70 	bl	80ac3a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80acec0:	4632      	mov	r2, r6
 80acec2:	4629      	mov	r1, r5
 80acec4:	4620      	mov	r0, r4
 80acec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80aceca:	f000 b821 	b.w	80acf10 <__aeabi_atexit>
 80acece:	bf00      	nop
 80aced0:	200030a4 	.word	0x200030a4
 80aced4:	20000368 	.word	0x20000368
 80aced8:	080ac391 	.word	0x080ac391
 80acedc:	200030b4 	.word	0x200030b4

080acee0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80acee0:	b513      	push	{r0, r1, r4, lr}
 80acee2:	4c08      	ldr	r4, [pc, #32]	; (80acf04 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80acee4:	2300      	movs	r3, #0
 80acee6:	461a      	mov	r2, r3
 80acee8:	4619      	mov	r1, r3
 80aceea:	9300      	str	r3, [sp, #0]
 80aceec:	4620      	mov	r0, r4
 80aceee:	f7ff fe99 	bl	80acc24 <_ZN9IPAddressC1Ehhhh>
 80acef2:	4620      	mov	r0, r4
 80acef4:	4a04      	ldr	r2, [pc, #16]	; (80acf08 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80acef6:	4905      	ldr	r1, [pc, #20]	; (80acf0c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80acef8:	b002      	add	sp, #8
 80acefa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80acefe:	f000 b807 	b.w	80acf10 <__aeabi_atexit>
 80acf02:	bf00      	nop
 80acf04:	200030c8 	.word	0x200030c8
 80acf08:	20000368 	.word	0x20000368
 80acf0c:	080acbad 	.word	0x080acbad

080acf10 <__aeabi_atexit>:
 80acf10:	460b      	mov	r3, r1
 80acf12:	4601      	mov	r1, r0
 80acf14:	4618      	mov	r0, r3
 80acf16:	f000 bae1 	b.w	80ad4dc <__cxa_atexit>
	...

080acf1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80acf1c:	4b18      	ldr	r3, [pc, #96]	; (80acf80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80acf1e:	681a      	ldr	r2, [r3, #0]
 80acf20:	07d1      	lsls	r1, r2, #31
 80acf22:	bf5c      	itt	pl
 80acf24:	2201      	movpl	r2, #1
 80acf26:	601a      	strpl	r2, [r3, #0]
 80acf28:	4b16      	ldr	r3, [pc, #88]	; (80acf84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80acf2a:	681a      	ldr	r2, [r3, #0]
 80acf2c:	07d2      	lsls	r2, r2, #31
 80acf2e:	bf5c      	itt	pl
 80acf30:	2201      	movpl	r2, #1
 80acf32:	601a      	strpl	r2, [r3, #0]
 80acf34:	4b14      	ldr	r3, [pc, #80]	; (80acf88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80acf36:	681a      	ldr	r2, [r3, #0]
 80acf38:	07d0      	lsls	r0, r2, #31
 80acf3a:	bf5c      	itt	pl
 80acf3c:	2201      	movpl	r2, #1
 80acf3e:	601a      	strpl	r2, [r3, #0]
 80acf40:	4b12      	ldr	r3, [pc, #72]	; (80acf8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80acf42:	681a      	ldr	r2, [r3, #0]
 80acf44:	07d1      	lsls	r1, r2, #31
 80acf46:	bf5c      	itt	pl
 80acf48:	2201      	movpl	r2, #1
 80acf4a:	601a      	strpl	r2, [r3, #0]
 80acf4c:	4b10      	ldr	r3, [pc, #64]	; (80acf90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80acf4e:	681a      	ldr	r2, [r3, #0]
 80acf50:	07d2      	lsls	r2, r2, #31
 80acf52:	bf5c      	itt	pl
 80acf54:	2201      	movpl	r2, #1
 80acf56:	601a      	strpl	r2, [r3, #0]
 80acf58:	4b0e      	ldr	r3, [pc, #56]	; (80acf94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80acf5a:	681a      	ldr	r2, [r3, #0]
 80acf5c:	07d0      	lsls	r0, r2, #31
 80acf5e:	bf5c      	itt	pl
 80acf60:	2201      	movpl	r2, #1
 80acf62:	601a      	strpl	r2, [r3, #0]
 80acf64:	4b0c      	ldr	r3, [pc, #48]	; (80acf98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80acf66:	681a      	ldr	r2, [r3, #0]
 80acf68:	07d1      	lsls	r1, r2, #31
 80acf6a:	bf5c      	itt	pl
 80acf6c:	2201      	movpl	r2, #1
 80acf6e:	601a      	strpl	r2, [r3, #0]
 80acf70:	4b0a      	ldr	r3, [pc, #40]	; (80acf9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80acf72:	681a      	ldr	r2, [r3, #0]
 80acf74:	07d2      	lsls	r2, r2, #31
 80acf76:	bf5c      	itt	pl
 80acf78:	2201      	movpl	r2, #1
 80acf7a:	601a      	strpl	r2, [r3, #0]
 80acf7c:	4770      	bx	lr
 80acf7e:	bf00      	nop
 80acf80:	200030fc 	.word	0x200030fc
 80acf84:	200030f8 	.word	0x200030f8
 80acf88:	200030f4 	.word	0x200030f4
 80acf8c:	200030f0 	.word	0x200030f0
 80acf90:	200030ec 	.word	0x200030ec
 80acf94:	200030e8 	.word	0x200030e8
 80acf98:	200030e4 	.word	0x200030e4
 80acf9c:	200030e0 	.word	0x200030e0

080acfa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80acfa0:	4b24      	ldr	r3, [pc, #144]	; (80ad034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80acfa2:	681a      	ldr	r2, [r3, #0]
 80acfa4:	07d0      	lsls	r0, r2, #31
 80acfa6:	bf5c      	itt	pl
 80acfa8:	2201      	movpl	r2, #1
 80acfaa:	601a      	strpl	r2, [r3, #0]
 80acfac:	4b22      	ldr	r3, [pc, #136]	; (80ad038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80acfae:	681a      	ldr	r2, [r3, #0]
 80acfb0:	07d1      	lsls	r1, r2, #31
 80acfb2:	bf5c      	itt	pl
 80acfb4:	2201      	movpl	r2, #1
 80acfb6:	601a      	strpl	r2, [r3, #0]
 80acfb8:	4b20      	ldr	r3, [pc, #128]	; (80ad03c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80acfba:	681a      	ldr	r2, [r3, #0]
 80acfbc:	07d2      	lsls	r2, r2, #31
 80acfbe:	bf5c      	itt	pl
 80acfc0:	2201      	movpl	r2, #1
 80acfc2:	601a      	strpl	r2, [r3, #0]
 80acfc4:	4b1e      	ldr	r3, [pc, #120]	; (80ad040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80acfc6:	681a      	ldr	r2, [r3, #0]
 80acfc8:	07d0      	lsls	r0, r2, #31
 80acfca:	bf5c      	itt	pl
 80acfcc:	2201      	movpl	r2, #1
 80acfce:	601a      	strpl	r2, [r3, #0]
 80acfd0:	4b1c      	ldr	r3, [pc, #112]	; (80ad044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80acfd2:	681a      	ldr	r2, [r3, #0]
 80acfd4:	07d1      	lsls	r1, r2, #31
 80acfd6:	bf5c      	itt	pl
 80acfd8:	2201      	movpl	r2, #1
 80acfda:	601a      	strpl	r2, [r3, #0]
 80acfdc:	4b1a      	ldr	r3, [pc, #104]	; (80ad048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80acfde:	681a      	ldr	r2, [r3, #0]
 80acfe0:	07d2      	lsls	r2, r2, #31
 80acfe2:	bf5c      	itt	pl
 80acfe4:	2201      	movpl	r2, #1
 80acfe6:	601a      	strpl	r2, [r3, #0]
 80acfe8:	4b18      	ldr	r3, [pc, #96]	; (80ad04c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80acfea:	681a      	ldr	r2, [r3, #0]
 80acfec:	07d0      	lsls	r0, r2, #31
 80acfee:	bf5c      	itt	pl
 80acff0:	2201      	movpl	r2, #1
 80acff2:	601a      	strpl	r2, [r3, #0]
 80acff4:	4b16      	ldr	r3, [pc, #88]	; (80ad050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80acff6:	681a      	ldr	r2, [r3, #0]
 80acff8:	07d1      	lsls	r1, r2, #31
 80acffa:	bf5c      	itt	pl
 80acffc:	2201      	movpl	r2, #1
 80acffe:	601a      	strpl	r2, [r3, #0]
 80ad000:	4b14      	ldr	r3, [pc, #80]	; (80ad054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80ad002:	681a      	ldr	r2, [r3, #0]
 80ad004:	07d2      	lsls	r2, r2, #31
 80ad006:	bf5c      	itt	pl
 80ad008:	2201      	movpl	r2, #1
 80ad00a:	601a      	strpl	r2, [r3, #0]
 80ad00c:	4b12      	ldr	r3, [pc, #72]	; (80ad058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80ad00e:	681a      	ldr	r2, [r3, #0]
 80ad010:	07d0      	lsls	r0, r2, #31
 80ad012:	bf5c      	itt	pl
 80ad014:	2201      	movpl	r2, #1
 80ad016:	601a      	strpl	r2, [r3, #0]
 80ad018:	4b10      	ldr	r3, [pc, #64]	; (80ad05c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80ad01a:	681a      	ldr	r2, [r3, #0]
 80ad01c:	07d1      	lsls	r1, r2, #31
 80ad01e:	bf5c      	itt	pl
 80ad020:	2201      	movpl	r2, #1
 80ad022:	601a      	strpl	r2, [r3, #0]
 80ad024:	4b0e      	ldr	r3, [pc, #56]	; (80ad060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80ad026:	681a      	ldr	r2, [r3, #0]
 80ad028:	07d2      	lsls	r2, r2, #31
 80ad02a:	bf5c      	itt	pl
 80ad02c:	2201      	movpl	r2, #1
 80ad02e:	601a      	strpl	r2, [r3, #0]
 80ad030:	4770      	bx	lr
 80ad032:	bf00      	nop
 80ad034:	2000312c 	.word	0x2000312c
 80ad038:	20003128 	.word	0x20003128
 80ad03c:	20003124 	.word	0x20003124
 80ad040:	20003120 	.word	0x20003120
 80ad044:	2000311c 	.word	0x2000311c
 80ad048:	20003118 	.word	0x20003118
 80ad04c:	20003114 	.word	0x20003114
 80ad050:	20003110 	.word	0x20003110
 80ad054:	2000310c 	.word	0x2000310c
 80ad058:	20003108 	.word	0x20003108
 80ad05c:	20003104 	.word	0x20003104
 80ad060:	20003100 	.word	0x20003100

080ad064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80ad064:	4b24      	ldr	r3, [pc, #144]	; (80ad0f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80ad066:	681a      	ldr	r2, [r3, #0]
 80ad068:	07d0      	lsls	r0, r2, #31
 80ad06a:	bf5c      	itt	pl
 80ad06c:	2201      	movpl	r2, #1
 80ad06e:	601a      	strpl	r2, [r3, #0]
 80ad070:	4b22      	ldr	r3, [pc, #136]	; (80ad0fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80ad072:	681a      	ldr	r2, [r3, #0]
 80ad074:	07d1      	lsls	r1, r2, #31
 80ad076:	bf5c      	itt	pl
 80ad078:	2201      	movpl	r2, #1
 80ad07a:	601a      	strpl	r2, [r3, #0]
 80ad07c:	4b20      	ldr	r3, [pc, #128]	; (80ad100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80ad07e:	681a      	ldr	r2, [r3, #0]
 80ad080:	07d2      	lsls	r2, r2, #31
 80ad082:	bf5c      	itt	pl
 80ad084:	2201      	movpl	r2, #1
 80ad086:	601a      	strpl	r2, [r3, #0]
 80ad088:	4b1e      	ldr	r3, [pc, #120]	; (80ad104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80ad08a:	681a      	ldr	r2, [r3, #0]
 80ad08c:	07d0      	lsls	r0, r2, #31
 80ad08e:	bf5c      	itt	pl
 80ad090:	2201      	movpl	r2, #1
 80ad092:	601a      	strpl	r2, [r3, #0]
 80ad094:	4b1c      	ldr	r3, [pc, #112]	; (80ad108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80ad096:	681a      	ldr	r2, [r3, #0]
 80ad098:	07d1      	lsls	r1, r2, #31
 80ad09a:	bf5c      	itt	pl
 80ad09c:	2201      	movpl	r2, #1
 80ad09e:	601a      	strpl	r2, [r3, #0]
 80ad0a0:	4b1a      	ldr	r3, [pc, #104]	; (80ad10c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80ad0a2:	681a      	ldr	r2, [r3, #0]
 80ad0a4:	07d2      	lsls	r2, r2, #31
 80ad0a6:	bf5c      	itt	pl
 80ad0a8:	2201      	movpl	r2, #1
 80ad0aa:	601a      	strpl	r2, [r3, #0]
 80ad0ac:	4b18      	ldr	r3, [pc, #96]	; (80ad110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80ad0ae:	681a      	ldr	r2, [r3, #0]
 80ad0b0:	07d0      	lsls	r0, r2, #31
 80ad0b2:	bf5c      	itt	pl
 80ad0b4:	2201      	movpl	r2, #1
 80ad0b6:	601a      	strpl	r2, [r3, #0]
 80ad0b8:	4b16      	ldr	r3, [pc, #88]	; (80ad114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80ad0ba:	681a      	ldr	r2, [r3, #0]
 80ad0bc:	07d1      	lsls	r1, r2, #31
 80ad0be:	bf5c      	itt	pl
 80ad0c0:	2201      	movpl	r2, #1
 80ad0c2:	601a      	strpl	r2, [r3, #0]
 80ad0c4:	4b14      	ldr	r3, [pc, #80]	; (80ad118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80ad0c6:	681a      	ldr	r2, [r3, #0]
 80ad0c8:	07d2      	lsls	r2, r2, #31
 80ad0ca:	bf5c      	itt	pl
 80ad0cc:	2201      	movpl	r2, #1
 80ad0ce:	601a      	strpl	r2, [r3, #0]
 80ad0d0:	4b12      	ldr	r3, [pc, #72]	; (80ad11c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80ad0d2:	681a      	ldr	r2, [r3, #0]
 80ad0d4:	07d0      	lsls	r0, r2, #31
 80ad0d6:	bf5c      	itt	pl
 80ad0d8:	2201      	movpl	r2, #1
 80ad0da:	601a      	strpl	r2, [r3, #0]
 80ad0dc:	4b10      	ldr	r3, [pc, #64]	; (80ad120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80ad0de:	681a      	ldr	r2, [r3, #0]
 80ad0e0:	07d1      	lsls	r1, r2, #31
 80ad0e2:	bf5c      	itt	pl
 80ad0e4:	2201      	movpl	r2, #1
 80ad0e6:	601a      	strpl	r2, [r3, #0]
 80ad0e8:	4b0e      	ldr	r3, [pc, #56]	; (80ad124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80ad0ea:	681a      	ldr	r2, [r3, #0]
 80ad0ec:	07d2      	lsls	r2, r2, #31
 80ad0ee:	bf5c      	itt	pl
 80ad0f0:	2201      	movpl	r2, #1
 80ad0f2:	601a      	strpl	r2, [r3, #0]
 80ad0f4:	4770      	bx	lr
 80ad0f6:	bf00      	nop
 80ad0f8:	2000315c 	.word	0x2000315c
 80ad0fc:	20003158 	.word	0x20003158
 80ad100:	20003154 	.word	0x20003154
 80ad104:	20003150 	.word	0x20003150
 80ad108:	2000314c 	.word	0x2000314c
 80ad10c:	20003148 	.word	0x20003148
 80ad110:	20003144 	.word	0x20003144
 80ad114:	20003140 	.word	0x20003140
 80ad118:	2000313c 	.word	0x2000313c
 80ad11c:	20003138 	.word	0x20003138
 80ad120:	20003134 	.word	0x20003134
 80ad124:	20003130 	.word	0x20003130

080ad128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80ad128:	4b18      	ldr	r3, [pc, #96]	; (80ad18c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80ad12a:	681a      	ldr	r2, [r3, #0]
 80ad12c:	07d1      	lsls	r1, r2, #31
 80ad12e:	bf5c      	itt	pl
 80ad130:	2201      	movpl	r2, #1
 80ad132:	601a      	strpl	r2, [r3, #0]
 80ad134:	4b16      	ldr	r3, [pc, #88]	; (80ad190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80ad136:	681a      	ldr	r2, [r3, #0]
 80ad138:	07d2      	lsls	r2, r2, #31
 80ad13a:	bf5c      	itt	pl
 80ad13c:	2201      	movpl	r2, #1
 80ad13e:	601a      	strpl	r2, [r3, #0]
 80ad140:	4b14      	ldr	r3, [pc, #80]	; (80ad194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80ad142:	681a      	ldr	r2, [r3, #0]
 80ad144:	07d0      	lsls	r0, r2, #31
 80ad146:	bf5c      	itt	pl
 80ad148:	2201      	movpl	r2, #1
 80ad14a:	601a      	strpl	r2, [r3, #0]
 80ad14c:	4b12      	ldr	r3, [pc, #72]	; (80ad198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80ad14e:	681a      	ldr	r2, [r3, #0]
 80ad150:	07d1      	lsls	r1, r2, #31
 80ad152:	bf5c      	itt	pl
 80ad154:	2201      	movpl	r2, #1
 80ad156:	601a      	strpl	r2, [r3, #0]
 80ad158:	4b10      	ldr	r3, [pc, #64]	; (80ad19c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80ad15a:	681a      	ldr	r2, [r3, #0]
 80ad15c:	07d2      	lsls	r2, r2, #31
 80ad15e:	bf5c      	itt	pl
 80ad160:	2201      	movpl	r2, #1
 80ad162:	601a      	strpl	r2, [r3, #0]
 80ad164:	4b0e      	ldr	r3, [pc, #56]	; (80ad1a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80ad166:	681a      	ldr	r2, [r3, #0]
 80ad168:	07d0      	lsls	r0, r2, #31
 80ad16a:	bf5c      	itt	pl
 80ad16c:	2201      	movpl	r2, #1
 80ad16e:	601a      	strpl	r2, [r3, #0]
 80ad170:	4b0c      	ldr	r3, [pc, #48]	; (80ad1a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80ad172:	681a      	ldr	r2, [r3, #0]
 80ad174:	07d1      	lsls	r1, r2, #31
 80ad176:	bf5c      	itt	pl
 80ad178:	2201      	movpl	r2, #1
 80ad17a:	601a      	strpl	r2, [r3, #0]
 80ad17c:	4b0a      	ldr	r3, [pc, #40]	; (80ad1a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80ad17e:	681a      	ldr	r2, [r3, #0]
 80ad180:	07d2      	lsls	r2, r2, #31
 80ad182:	bf5c      	itt	pl
 80ad184:	2201      	movpl	r2, #1
 80ad186:	601a      	strpl	r2, [r3, #0]
 80ad188:	4770      	bx	lr
 80ad18a:	bf00      	nop
 80ad18c:	2000317c 	.word	0x2000317c
 80ad190:	20003178 	.word	0x20003178
 80ad194:	20003174 	.word	0x20003174
 80ad198:	20003170 	.word	0x20003170
 80ad19c:	2000316c 	.word	0x2000316c
 80ad1a0:	20003168 	.word	0x20003168
 80ad1a4:	20003164 	.word	0x20003164
 80ad1a8:	20003160 	.word	0x20003160

080ad1ac <__aeabi_uldivmod>:
 80ad1ac:	b953      	cbnz	r3, 80ad1c4 <__aeabi_uldivmod+0x18>
 80ad1ae:	b94a      	cbnz	r2, 80ad1c4 <__aeabi_uldivmod+0x18>
 80ad1b0:	2900      	cmp	r1, #0
 80ad1b2:	bf08      	it	eq
 80ad1b4:	2800      	cmpeq	r0, #0
 80ad1b6:	bf1c      	itt	ne
 80ad1b8:	f04f 31ff 	movne.w	r1, #4294967295
 80ad1bc:	f04f 30ff 	movne.w	r0, #4294967295
 80ad1c0:	f000 b982 	b.w	80ad4c8 <__aeabi_idiv0>
 80ad1c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80ad1c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80ad1cc:	f000 f806 	bl	80ad1dc <__udivmoddi4>
 80ad1d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80ad1d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80ad1d8:	b004      	add	sp, #16
 80ad1da:	4770      	bx	lr

080ad1dc <__udivmoddi4>:
 80ad1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80ad1e0:	468c      	mov	ip, r1
 80ad1e2:	460c      	mov	r4, r1
 80ad1e4:	4605      	mov	r5, r0
 80ad1e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80ad1e8:	2b00      	cmp	r3, #0
 80ad1ea:	d14f      	bne.n	80ad28c <__udivmoddi4+0xb0>
 80ad1ec:	428a      	cmp	r2, r1
 80ad1ee:	4617      	mov	r7, r2
 80ad1f0:	d96b      	bls.n	80ad2ca <__udivmoddi4+0xee>
 80ad1f2:	fab2 fe82 	clz	lr, r2
 80ad1f6:	f1be 0f00 	cmp.w	lr, #0
 80ad1fa:	d00b      	beq.n	80ad214 <__udivmoddi4+0x38>
 80ad1fc:	f1ce 0520 	rsb	r5, lr, #32
 80ad200:	fa20 f505 	lsr.w	r5, r0, r5
 80ad204:	fa01 f30e 	lsl.w	r3, r1, lr
 80ad208:	ea45 0c03 	orr.w	ip, r5, r3
 80ad20c:	fa02 f70e 	lsl.w	r7, r2, lr
 80ad210:	fa00 f50e 	lsl.w	r5, r0, lr
 80ad214:	0c39      	lsrs	r1, r7, #16
 80ad216:	fbbc f0f1 	udiv	r0, ip, r1
 80ad21a:	b2ba      	uxth	r2, r7
 80ad21c:	fb01 c310 	mls	r3, r1, r0, ip
 80ad220:	fb00 f802 	mul.w	r8, r0, r2
 80ad224:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80ad228:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80ad22c:	45a0      	cmp	r8, r4
 80ad22e:	d909      	bls.n	80ad244 <__udivmoddi4+0x68>
 80ad230:	19e4      	adds	r4, r4, r7
 80ad232:	f100 33ff 	add.w	r3, r0, #4294967295
 80ad236:	f080 8128 	bcs.w	80ad48a <__udivmoddi4+0x2ae>
 80ad23a:	45a0      	cmp	r8, r4
 80ad23c:	f240 8125 	bls.w	80ad48a <__udivmoddi4+0x2ae>
 80ad240:	3802      	subs	r0, #2
 80ad242:	443c      	add	r4, r7
 80ad244:	ebc8 0404 	rsb	r4, r8, r4
 80ad248:	fbb4 f3f1 	udiv	r3, r4, r1
 80ad24c:	fb01 4c13 	mls	ip, r1, r3, r4
 80ad250:	fb03 f202 	mul.w	r2, r3, r2
 80ad254:	b2ac      	uxth	r4, r5
 80ad256:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80ad25a:	428a      	cmp	r2, r1
 80ad25c:	d909      	bls.n	80ad272 <__udivmoddi4+0x96>
 80ad25e:	19c9      	adds	r1, r1, r7
 80ad260:	f103 34ff 	add.w	r4, r3, #4294967295
 80ad264:	f080 810f 	bcs.w	80ad486 <__udivmoddi4+0x2aa>
 80ad268:	428a      	cmp	r2, r1
 80ad26a:	f240 810c 	bls.w	80ad486 <__udivmoddi4+0x2aa>
 80ad26e:	3b02      	subs	r3, #2
 80ad270:	4439      	add	r1, r7
 80ad272:	1a8a      	subs	r2, r1, r2
 80ad274:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80ad278:	2100      	movs	r1, #0
 80ad27a:	2e00      	cmp	r6, #0
 80ad27c:	d063      	beq.n	80ad346 <__udivmoddi4+0x16a>
 80ad27e:	fa22 f20e 	lsr.w	r2, r2, lr
 80ad282:	2300      	movs	r3, #0
 80ad284:	e886 000c 	stmia.w	r6, {r2, r3}
 80ad288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ad28c:	428b      	cmp	r3, r1
 80ad28e:	d907      	bls.n	80ad2a0 <__udivmoddi4+0xc4>
 80ad290:	2e00      	cmp	r6, #0
 80ad292:	d056      	beq.n	80ad342 <__udivmoddi4+0x166>
 80ad294:	2100      	movs	r1, #0
 80ad296:	e886 0011 	stmia.w	r6, {r0, r4}
 80ad29a:	4608      	mov	r0, r1
 80ad29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ad2a0:	fab3 f183 	clz	r1, r3
 80ad2a4:	2900      	cmp	r1, #0
 80ad2a6:	f040 8093 	bne.w	80ad3d0 <__udivmoddi4+0x1f4>
 80ad2aa:	42a3      	cmp	r3, r4
 80ad2ac:	d302      	bcc.n	80ad2b4 <__udivmoddi4+0xd8>
 80ad2ae:	4282      	cmp	r2, r0
 80ad2b0:	f200 80fe 	bhi.w	80ad4b0 <__udivmoddi4+0x2d4>
 80ad2b4:	1a85      	subs	r5, r0, r2
 80ad2b6:	eb64 0303 	sbc.w	r3, r4, r3
 80ad2ba:	469c      	mov	ip, r3
 80ad2bc:	2001      	movs	r0, #1
 80ad2be:	2e00      	cmp	r6, #0
 80ad2c0:	d041      	beq.n	80ad346 <__udivmoddi4+0x16a>
 80ad2c2:	e886 1020 	stmia.w	r6, {r5, ip}
 80ad2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ad2ca:	b912      	cbnz	r2, 80ad2d2 <__udivmoddi4+0xf6>
 80ad2cc:	2701      	movs	r7, #1
 80ad2ce:	fbb7 f7f2 	udiv	r7, r7, r2
 80ad2d2:	fab7 fe87 	clz	lr, r7
 80ad2d6:	f1be 0f00 	cmp.w	lr, #0
 80ad2da:	d136      	bne.n	80ad34a <__udivmoddi4+0x16e>
 80ad2dc:	1be4      	subs	r4, r4, r7
 80ad2de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80ad2e2:	fa1f f987 	uxth.w	r9, r7
 80ad2e6:	2101      	movs	r1, #1
 80ad2e8:	fbb4 f3f8 	udiv	r3, r4, r8
 80ad2ec:	fb08 4413 	mls	r4, r8, r3, r4
 80ad2f0:	fb09 f203 	mul.w	r2, r9, r3
 80ad2f4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80ad2f8:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80ad2fc:	42a2      	cmp	r2, r4
 80ad2fe:	d907      	bls.n	80ad310 <__udivmoddi4+0x134>
 80ad300:	19e4      	adds	r4, r4, r7
 80ad302:	f103 30ff 	add.w	r0, r3, #4294967295
 80ad306:	d202      	bcs.n	80ad30e <__udivmoddi4+0x132>
 80ad308:	42a2      	cmp	r2, r4
 80ad30a:	f200 80d3 	bhi.w	80ad4b4 <__udivmoddi4+0x2d8>
 80ad30e:	4603      	mov	r3, r0
 80ad310:	1aa4      	subs	r4, r4, r2
 80ad312:	fbb4 f0f8 	udiv	r0, r4, r8
 80ad316:	fb08 4810 	mls	r8, r8, r0, r4
 80ad31a:	fb09 f900 	mul.w	r9, r9, r0
 80ad31e:	b2ac      	uxth	r4, r5
 80ad320:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80ad324:	4591      	cmp	r9, r2
 80ad326:	d907      	bls.n	80ad338 <__udivmoddi4+0x15c>
 80ad328:	19d2      	adds	r2, r2, r7
 80ad32a:	f100 34ff 	add.w	r4, r0, #4294967295
 80ad32e:	d202      	bcs.n	80ad336 <__udivmoddi4+0x15a>
 80ad330:	4591      	cmp	r9, r2
 80ad332:	f200 80ba 	bhi.w	80ad4aa <__udivmoddi4+0x2ce>
 80ad336:	4620      	mov	r0, r4
 80ad338:	ebc9 0202 	rsb	r2, r9, r2
 80ad33c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80ad340:	e79b      	b.n	80ad27a <__udivmoddi4+0x9e>
 80ad342:	4631      	mov	r1, r6
 80ad344:	4630      	mov	r0, r6
 80ad346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ad34a:	fa07 f70e 	lsl.w	r7, r7, lr
 80ad34e:	f1ce 0c20 	rsb	ip, lr, #32
 80ad352:	fa24 f30c 	lsr.w	r3, r4, ip
 80ad356:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80ad35a:	fbb3 faf8 	udiv	sl, r3, r8
 80ad35e:	fa1f f987 	uxth.w	r9, r7
 80ad362:	fb08 351a 	mls	r5, r8, sl, r3
 80ad366:	fa20 fc0c 	lsr.w	ip, r0, ip
 80ad36a:	fa04 f40e 	lsl.w	r4, r4, lr
 80ad36e:	fb0a fb09 	mul.w	fp, sl, r9
 80ad372:	ea4c 0c04 	orr.w	ip, ip, r4
 80ad376:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80ad37a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80ad37e:	459b      	cmp	fp, r3
 80ad380:	fa00 f50e 	lsl.w	r5, r0, lr
 80ad384:	d90a      	bls.n	80ad39c <__udivmoddi4+0x1c0>
 80ad386:	19db      	adds	r3, r3, r7
 80ad388:	f10a 32ff 	add.w	r2, sl, #4294967295
 80ad38c:	f080 808b 	bcs.w	80ad4a6 <__udivmoddi4+0x2ca>
 80ad390:	459b      	cmp	fp, r3
 80ad392:	f240 8088 	bls.w	80ad4a6 <__udivmoddi4+0x2ca>
 80ad396:	f1aa 0a02 	sub.w	sl, sl, #2
 80ad39a:	443b      	add	r3, r7
 80ad39c:	ebcb 0303 	rsb	r3, fp, r3
 80ad3a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80ad3a4:	fb08 3310 	mls	r3, r8, r0, r3
 80ad3a8:	fb00 f409 	mul.w	r4, r0, r9
 80ad3ac:	fa1f fc8c 	uxth.w	ip, ip
 80ad3b0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80ad3b4:	429c      	cmp	r4, r3
 80ad3b6:	d907      	bls.n	80ad3c8 <__udivmoddi4+0x1ec>
 80ad3b8:	19db      	adds	r3, r3, r7
 80ad3ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80ad3be:	d26e      	bcs.n	80ad49e <__udivmoddi4+0x2c2>
 80ad3c0:	429c      	cmp	r4, r3
 80ad3c2:	d96c      	bls.n	80ad49e <__udivmoddi4+0x2c2>
 80ad3c4:	3802      	subs	r0, #2
 80ad3c6:	443b      	add	r3, r7
 80ad3c8:	1b1c      	subs	r4, r3, r4
 80ad3ca:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80ad3ce:	e78b      	b.n	80ad2e8 <__udivmoddi4+0x10c>
 80ad3d0:	f1c1 0e20 	rsb	lr, r1, #32
 80ad3d4:	408b      	lsls	r3, r1
 80ad3d6:	fa22 fc0e 	lsr.w	ip, r2, lr
 80ad3da:	ea4c 0c03 	orr.w	ip, ip, r3
 80ad3de:	fa24 f70e 	lsr.w	r7, r4, lr
 80ad3e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80ad3e6:	fbb7 faf9 	udiv	sl, r7, r9
 80ad3ea:	fa1f f38c 	uxth.w	r3, ip
 80ad3ee:	fb09 771a 	mls	r7, r9, sl, r7
 80ad3f2:	fa20 f80e 	lsr.w	r8, r0, lr
 80ad3f6:	408c      	lsls	r4, r1
 80ad3f8:	fb0a f503 	mul.w	r5, sl, r3
 80ad3fc:	ea48 0404 	orr.w	r4, r8, r4
 80ad400:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80ad404:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80ad408:	42bd      	cmp	r5, r7
 80ad40a:	fa02 f201 	lsl.w	r2, r2, r1
 80ad40e:	fa00 fb01 	lsl.w	fp, r0, r1
 80ad412:	d909      	bls.n	80ad428 <__udivmoddi4+0x24c>
 80ad414:	eb17 070c 	adds.w	r7, r7, ip
 80ad418:	f10a 30ff 	add.w	r0, sl, #4294967295
 80ad41c:	d241      	bcs.n	80ad4a2 <__udivmoddi4+0x2c6>
 80ad41e:	42bd      	cmp	r5, r7
 80ad420:	d93f      	bls.n	80ad4a2 <__udivmoddi4+0x2c6>
 80ad422:	f1aa 0a02 	sub.w	sl, sl, #2
 80ad426:	4467      	add	r7, ip
 80ad428:	1b7f      	subs	r7, r7, r5
 80ad42a:	fbb7 f5f9 	udiv	r5, r7, r9
 80ad42e:	fb09 7715 	mls	r7, r9, r5, r7
 80ad432:	fb05 f303 	mul.w	r3, r5, r3
 80ad436:	b2a4      	uxth	r4, r4
 80ad438:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80ad43c:	42bb      	cmp	r3, r7
 80ad43e:	d908      	bls.n	80ad452 <__udivmoddi4+0x276>
 80ad440:	eb17 070c 	adds.w	r7, r7, ip
 80ad444:	f105 30ff 	add.w	r0, r5, #4294967295
 80ad448:	d227      	bcs.n	80ad49a <__udivmoddi4+0x2be>
 80ad44a:	42bb      	cmp	r3, r7
 80ad44c:	d925      	bls.n	80ad49a <__udivmoddi4+0x2be>
 80ad44e:	3d02      	subs	r5, #2
 80ad450:	4467      	add	r7, ip
 80ad452:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80ad456:	fba0 8902 	umull	r8, r9, r0, r2
 80ad45a:	1aff      	subs	r7, r7, r3
 80ad45c:	454f      	cmp	r7, r9
 80ad45e:	4645      	mov	r5, r8
 80ad460:	464c      	mov	r4, r9
 80ad462:	d314      	bcc.n	80ad48e <__udivmoddi4+0x2b2>
 80ad464:	d029      	beq.n	80ad4ba <__udivmoddi4+0x2de>
 80ad466:	b366      	cbz	r6, 80ad4c2 <__udivmoddi4+0x2e6>
 80ad468:	ebbb 0305 	subs.w	r3, fp, r5
 80ad46c:	eb67 0704 	sbc.w	r7, r7, r4
 80ad470:	fa07 fe0e 	lsl.w	lr, r7, lr
 80ad474:	40cb      	lsrs	r3, r1
 80ad476:	40cf      	lsrs	r7, r1
 80ad478:	ea4e 0303 	orr.w	r3, lr, r3
 80ad47c:	e886 0088 	stmia.w	r6, {r3, r7}
 80ad480:	2100      	movs	r1, #0
 80ad482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ad486:	4623      	mov	r3, r4
 80ad488:	e6f3      	b.n	80ad272 <__udivmoddi4+0x96>
 80ad48a:	4618      	mov	r0, r3
 80ad48c:	e6da      	b.n	80ad244 <__udivmoddi4+0x68>
 80ad48e:	ebb8 0502 	subs.w	r5, r8, r2
 80ad492:	eb69 040c 	sbc.w	r4, r9, ip
 80ad496:	3801      	subs	r0, #1
 80ad498:	e7e5      	b.n	80ad466 <__udivmoddi4+0x28a>
 80ad49a:	4605      	mov	r5, r0
 80ad49c:	e7d9      	b.n	80ad452 <__udivmoddi4+0x276>
 80ad49e:	4610      	mov	r0, r2
 80ad4a0:	e792      	b.n	80ad3c8 <__udivmoddi4+0x1ec>
 80ad4a2:	4682      	mov	sl, r0
 80ad4a4:	e7c0      	b.n	80ad428 <__udivmoddi4+0x24c>
 80ad4a6:	4692      	mov	sl, r2
 80ad4a8:	e778      	b.n	80ad39c <__udivmoddi4+0x1c0>
 80ad4aa:	3802      	subs	r0, #2
 80ad4ac:	443a      	add	r2, r7
 80ad4ae:	e743      	b.n	80ad338 <__udivmoddi4+0x15c>
 80ad4b0:	4608      	mov	r0, r1
 80ad4b2:	e704      	b.n	80ad2be <__udivmoddi4+0xe2>
 80ad4b4:	3b02      	subs	r3, #2
 80ad4b6:	443c      	add	r4, r7
 80ad4b8:	e72a      	b.n	80ad310 <__udivmoddi4+0x134>
 80ad4ba:	45c3      	cmp	fp, r8
 80ad4bc:	d3e7      	bcc.n	80ad48e <__udivmoddi4+0x2b2>
 80ad4be:	463c      	mov	r4, r7
 80ad4c0:	e7d1      	b.n	80ad466 <__udivmoddi4+0x28a>
 80ad4c2:	4631      	mov	r1, r6
 80ad4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080ad4c8 <__aeabi_idiv0>:
 80ad4c8:	4770      	bx	lr
 80ad4ca:	bf00      	nop

080ad4cc <calloc>:
 80ad4cc:	4b02      	ldr	r3, [pc, #8]	; (80ad4d8 <calloc+0xc>)
 80ad4ce:	460a      	mov	r2, r1
 80ad4d0:	4601      	mov	r1, r0
 80ad4d2:	6818      	ldr	r0, [r3, #0]
 80ad4d4:	f000 b84d 	b.w	80ad572 <_calloc_r>
 80ad4d8:	20000364 	.word	0x20000364

080ad4dc <__cxa_atexit>:
 80ad4dc:	b510      	push	{r4, lr}
 80ad4de:	4c05      	ldr	r4, [pc, #20]	; (80ad4f4 <__cxa_atexit+0x18>)
 80ad4e0:	4613      	mov	r3, r2
 80ad4e2:	b12c      	cbz	r4, 80ad4f0 <__cxa_atexit+0x14>
 80ad4e4:	460a      	mov	r2, r1
 80ad4e6:	4601      	mov	r1, r0
 80ad4e8:	2002      	movs	r0, #2
 80ad4ea:	f3af 8000 	nop.w
 80ad4ee:	bd10      	pop	{r4, pc}
 80ad4f0:	4620      	mov	r0, r4
 80ad4f2:	bd10      	pop	{r4, pc}
 80ad4f4:	00000000 	.word	0x00000000

080ad4f8 <memcmp>:
 80ad4f8:	b510      	push	{r4, lr}
 80ad4fa:	3901      	subs	r1, #1
 80ad4fc:	4402      	add	r2, r0
 80ad4fe:	4290      	cmp	r0, r2
 80ad500:	d007      	beq.n	80ad512 <memcmp+0x1a>
 80ad502:	f810 3b01 	ldrb.w	r3, [r0], #1
 80ad506:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80ad50a:	42a3      	cmp	r3, r4
 80ad50c:	d0f7      	beq.n	80ad4fe <memcmp+0x6>
 80ad50e:	1b18      	subs	r0, r3, r4
 80ad510:	bd10      	pop	{r4, pc}
 80ad512:	2000      	movs	r0, #0
 80ad514:	bd10      	pop	{r4, pc}

080ad516 <memcpy>:
 80ad516:	b510      	push	{r4, lr}
 80ad518:	1e43      	subs	r3, r0, #1
 80ad51a:	440a      	add	r2, r1
 80ad51c:	4291      	cmp	r1, r2
 80ad51e:	d004      	beq.n	80ad52a <memcpy+0x14>
 80ad520:	f811 4b01 	ldrb.w	r4, [r1], #1
 80ad524:	f803 4f01 	strb.w	r4, [r3, #1]!
 80ad528:	e7f8      	b.n	80ad51c <memcpy+0x6>
 80ad52a:	bd10      	pop	{r4, pc}

080ad52c <memmove>:
 80ad52c:	4288      	cmp	r0, r1
 80ad52e:	b510      	push	{r4, lr}
 80ad530:	eb01 0302 	add.w	r3, r1, r2
 80ad534:	d801      	bhi.n	80ad53a <memmove+0xe>
 80ad536:	1e42      	subs	r2, r0, #1
 80ad538:	e00b      	b.n	80ad552 <memmove+0x26>
 80ad53a:	4298      	cmp	r0, r3
 80ad53c:	d2fb      	bcs.n	80ad536 <memmove+0xa>
 80ad53e:	1881      	adds	r1, r0, r2
 80ad540:	1ad2      	subs	r2, r2, r3
 80ad542:	42d3      	cmn	r3, r2
 80ad544:	d004      	beq.n	80ad550 <memmove+0x24>
 80ad546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80ad54a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80ad54e:	e7f8      	b.n	80ad542 <memmove+0x16>
 80ad550:	bd10      	pop	{r4, pc}
 80ad552:	4299      	cmp	r1, r3
 80ad554:	d004      	beq.n	80ad560 <memmove+0x34>
 80ad556:	f811 4b01 	ldrb.w	r4, [r1], #1
 80ad55a:	f802 4f01 	strb.w	r4, [r2, #1]!
 80ad55e:	e7f8      	b.n	80ad552 <memmove+0x26>
 80ad560:	bd10      	pop	{r4, pc}

080ad562 <memset>:
 80ad562:	4603      	mov	r3, r0
 80ad564:	4402      	add	r2, r0
 80ad566:	4293      	cmp	r3, r2
 80ad568:	d002      	beq.n	80ad570 <memset+0xe>
 80ad56a:	f803 1b01 	strb.w	r1, [r3], #1
 80ad56e:	e7fa      	b.n	80ad566 <memset+0x4>
 80ad570:	4770      	bx	lr

080ad572 <_calloc_r>:
 80ad572:	b538      	push	{r3, r4, r5, lr}
 80ad574:	fb02 f401 	mul.w	r4, r2, r1
 80ad578:	4621      	mov	r1, r4
 80ad57a:	f7fe ff01 	bl	80ac380 <_malloc_r>
 80ad57e:	4605      	mov	r5, r0
 80ad580:	b118      	cbz	r0, 80ad58a <_calloc_r+0x18>
 80ad582:	4622      	mov	r2, r4
 80ad584:	2100      	movs	r1, #0
 80ad586:	f7ff ffec 	bl	80ad562 <memset>
 80ad58a:	4628      	mov	r0, r5
 80ad58c:	bd38      	pop	{r3, r4, r5, pc}

080ad58e <strcmp>:
 80ad58e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80ad592:	f811 3b01 	ldrb.w	r3, [r1], #1
 80ad596:	2a01      	cmp	r2, #1
 80ad598:	bf28      	it	cs
 80ad59a:	429a      	cmpcs	r2, r3
 80ad59c:	d0f7      	beq.n	80ad58e <strcmp>
 80ad59e:	1ad0      	subs	r0, r2, r3
 80ad5a0:	4770      	bx	lr

080ad5a2 <strlen>:
 80ad5a2:	4603      	mov	r3, r0
 80ad5a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80ad5a8:	2a00      	cmp	r2, #0
 80ad5aa:	d1fb      	bne.n	80ad5a4 <strlen+0x2>
 80ad5ac:	1a18      	subs	r0, r3, r0
 80ad5ae:	3801      	subs	r0, #1
 80ad5b0:	4770      	bx	lr

080ad5b2 <link_code_end>:
	...

080ad5b4 <dynalib_user>:
 80ad5b4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80ad5c4:	0000 0000 4552 0044 5247 4545 004e 4c42     ....RED.GREEN.BL
 80ad5d4:	4555 7300 6170 6b72 6c63 6569 746e 6300     UE.sparkclient.c
 80ad5e4:	696c 6e65 2074 6f63 6e6e 6365 6574 0064     lient connected.
 80ad5f4:	6568 6c6c 206f 6f77 6c72 0064 756f 5474     hello world.outT
 80ad604:	706f 6369 6d2f 7365 6173 6567 6900 546e     opic/message.inT
 80ad614:	706f 6369 6d2f 7365 6173 6567 7400 7268     opic/message.thr
 80ad624:	6165 2064 6163 6c6c 6465 0021 3361 626d     ead called!.a3mb
 80ad634:	6d30 367a 656c 6267 3873 692e 746f 752e     0mz6legbs8.iot.u
 80ad644:	2d73 6165 7473 322d 612e 616d 6f7a 616e     s-east-2.amazona
 80ad654:	7377 632e 6d6f 2000 2120 0020 6425 252e     ws.com.  ! .%d.%
 80ad664:	2e64 6425 252e 0064                         d.%d.%d.

080ad66c <_ZL1K>:
 80ad66c:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 80ad67c:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 80ad68c:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 80ad69c:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 80ad6ac:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 80ad6bc:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 80ad6cc:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 80ad6dc:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 80ad6ec:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 80ad6fc:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 80ad70c:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 80ad71c:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 80ad72c:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 80ad73c:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 80ad74c:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 80ad75c:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

080ad76c <mbedtls_sha1_info>:
 80ad76c:	0004 0000 daf5 080a 0014 0000 0040 0000     ............@...
 80ad77c:	16cd 080a 16c9 080a 16c5 080a 3e15 080a     .............>..
 80ad78c:	16af 080a 169d 080a 1699 080a 1695 080a     ................

080ad79c <mbedtls_sha224_info>:
 80ad79c:	0005 0000 d966 080a 001c 0000 0040 0000     ....f.......@...
 80ad7ac:	1715 080a 1711 080a 170d 080a 1701 080a     ................
 80ad7bc:	16eb 080a 16d9 080a 16d5 080a 16d1 080a     ................

080ad7cc <mbedtls_sha384_info>:
 80ad7cc:	0007 0000 e459 080a 0030 0000 0080 0000     ....Y...0.......
 80ad7dc:	1765 080a 1761 080a 175d 080a 1751 080a     e...a...]...Q...
 80ad7ec:	173b 080a 1729 080a 1725 080a 1721 080a     ;...)...%...!...

080ad7fc <mbedtls_sha512_info>:
 80ad7fc:	0008 0000 d9c9 080a 0040 0000 0080 0000     ........@.......
 80ad80c:	176b 080a 1761 080a 175d 080a 1757 080a     k...a...]...W...
 80ad81c:	173b 080a 1729 080a 1725 080a 1721 080a     ;...)...%...!...

080ad82c <mbedtls_sha256_info>:
 80ad82c:	0006 0000 e4b9 080a 0020 0000 0040 0000     ........ ...@...
 80ad83c:	171b 080a 1711 080a 170d 080a 1707 080a     ................
 80ad84c:	16eb 080a 16d9 080a 16d5 080a 16d1 080a     ................

080ad85c <_ZL10oid_pk_alg>:
 80ad85c:	da6b 080a 0009 0000 da75 080a da83 080a     k.......u.......
 80ad86c:	0001 0000 da87 080a 0007 0000 da8f 080a     ................
 80ad87c:	da9e 080a 0002 0000 daad 080a 0005 0000     ................
 80ad88c:	dab3 080a dabb 080a 0003 0000 0000 0000     ................
	...
 80ad8ac:	862a 8648 0df7 0c01 0301 7000 6562 6957     *.H........pbeWi
 80ad8bc:	6874 4853 4141 646e 2d33 654b 5479 6972     thSHAAnd3-KeyTri
 80ad8cc:	6c70 4465 5345 432d 4342 5000 4542 7720     pleDES-CBC.PBE w
 80ad8dc:	7469 2068 4853 3141 6120 646e 3320 4b2d     ith SHA1 and 3-K
 80ad8ec:	7965 3320 4544 0053 862a 8648 0df7 0c01     ey 3DES.*.H.....
 80ad8fc:	0401 7000 6562 6957 6874 4853 4141 646e     ...pbeWithSHAAnd
 80ad90c:	2d32 654b 5479 6972 6c70 4465 5345 432d     2-KeyTripleDES-C
 80ad91c:	4342 5000 4542 7720 7469 2068 4853 3141     BC.PBE with SHA1
 80ad92c:	6120 646e 3220 4b2d 7965 3320 4544 0053      and 2-Key 3DES.
 80ad93c:	862a 8648 0df7 0702 6800 616d 5363 4148     *.H......hmacSHA
 80ad94c:	0031 4d48 4341 532d 4148 312d 2a00 4886     1.HMAC-SHA-1.*.H
 80ad95c:	f786 020d 0008 6d68 6361 4853 3241 3432     ......hmacSHA224
 80ad96c:	4800 414d 2d43 4853 2d41 3232 0034 862a     .HMAC-SHA-224.*.
 80ad97c:	8648 0df7 0902 6800 616d 5363 4148 3532     H......hmacSHA25
 80ad98c:	0036 4d48 4341 532d 4148 322d 3635 2a00     6.HMAC-SHA-256.*
 80ad99c:	4886 f786 020d 000a 6d68 6361 4853 3341     .H......hmacSHA3
 80ad9ac:	3438 4800 414d 2d43 4853 2d41 3833 0034     84.HMAC-SHA-384.
 80ad9bc:	862a 8648 0df7 0b02 6800 616d 5363 4148     *.H......hmacSHA
 80ad9cc:	3135 0032 4d48 4341 532d 4148 352d 3231     512.HMAC-SHA-512
 80ad9dc:	2b00 030e 1a02 6900 2d64 6873 3161 6000     .+.....id-sha1.`
 80ad9ec:	4886 6501 0403 0402 6900 2d64 6873 3261     .H.e.....id-sha2
 80ad9fc:	3432 6000 4886 6501 0403 0102 6900 2d64     24.`.H.e.....id-
 80ada0c:	6873 3261 3635 6000 4886 6501 0403 0202     sha256.`.H.e....
 80ada1c:	6900 2d64 6873 3361 3438 6000 4886 6501     .id-sha384.`.H.e
 80ada2c:	0403 0302 6900 2d64 6873 3561 3231 2b00     .....id-sha512.+
 80ada3c:	030e 0702 6400 7365 4243 0043 862a 8648     .....desCBC.*.H.
 80ada4c:	0df7 0703 6400 7365 652d 6564 2d33 6263     .....des-ede3-cb
 80ada5c:	0063 4544 2d53 4445 3345 432d 4342 2a00     c.DES-EDE3-CBC.*
 80ada6c:	4886 f786 010d 0101 7200 6173 6e45 7263     .H.......rsaEncr
 80ada7c:	7079 6974 6e6f 5200 4153 2a00 4886 3dce     yption.RSA.*.H.=
 80ada8c:	0102 6900 2d64 6365 7550 6c62 6369 654b     ...id-ecPublicKe
 80ada9c:	0079 6547 656e 6972 2063 4345 6b20 7965     y.Generic EC key
 80adaac:	2b00 0481 0c01 6900 2d64 6365 4844 4500     .+.....id-ecDH.E
 80adabc:	2043 656b 2079 6f66 2072 4345 4844 2a00     C key for ECDH.*
 80adacc:	4886 f786 010d 0501 7300 6168 312d 6957     .H.......sha-1Wi
 80adadc:	6874 5352 4541 636e 7972 7470 6f69 006e     thRSAEncryption.
 80adaec:	5352 2041 6977 6874 5320 4148 0031 862a     RSA with SHA1.*.
 80adafc:	8648 0df7 0101 000e 6873 3261 3432 6957     H.......sha224Wi
 80adb0c:	6874 5352 4541 636e 7972 7470 6f69 006e     thRSAEncryption.
 80adb1c:	5352 2041 6977 6874 5320 4148 322d 3432     RSA with SHA-224
 80adb2c:	2a00 4886 f786 010d 0b01 7300 6168 3532     .*.H.......sha25
 80adb3c:	5736 7469 5268 4153 6e45 7263 7079 6974     6WithRSAEncrypti
 80adb4c:	6e6f 5200 4153 7720 7469 2068 4853 2d41     on.RSA with SHA-
 80adb5c:	3532 0036 862a 8648 0df7 0101 000c 6873     256.*.H.......sh
 80adb6c:	3361 3438 6957 6874 5352 4541 636e 7972     a384WithRSAEncry
 80adb7c:	7470 6f69 006e 5352 2041 6977 6874 5320     ption.RSA with S
 80adb8c:	4148 332d 3438 2a00 4886 f786 010d 0d01     HA-384.*.H......
 80adb9c:	7300 6168 3135 5732 7469 5268 4153 6e45     .sha512WithRSAEn
 80adbac:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
 80adbbc:	2068 4853 2d41 3135 0032 0e2b 0203 001d     h SHA-512.+.....
 80adbcc:	862a 8648 0df7 0101 000a 5352 5341 4153     *.H.......RSASSA
 80adbdc:	502d 5353 2b00 0106 0505 0307 0001 6469     -PSS.+........id
 80adbec:	6b2d 2d70 6573 7672 7265 7541 6874 5400     -kp-serverAuth.T
 80adbfc:	534c 5720 6265 5320 7265 6576 2072 7541     LS Web Server Au
 80adc0c:	6874 6e65 6974 6163 6974 6e6f 2b00 0106     thentication.+..
 80adc1c:	0505 0307 0002 6469 6b2d 2d70 6c63 6569     ......id-kp-clie
 80adc2c:	746e 7541 6874 5400 534c 5720 6265 4320     ntAuth.TLS Web C
 80adc3c:	696c 6e65 2074 7541 6874 6e65 6974 6163     lient Authentica
 80adc4c:	6974 6e6f 2b00 0106 0505 0307 0003 6469     tion.+........id
 80adc5c:	6b2d 2d70 6f63 6564 6953 6e67 6e69 0067     -kp-codeSigning.
 80adc6c:	6f43 6564 5320 6769 696e 676e 2b00 0106     Code Signing.+..
 80adc7c:	0505 0307 0004 6469 6b2d 2d70 6d65 6961     ......id-kp-emai
 80adc8c:	506c 6f72 6574 7463 6f69 006e 2d45 616d     lProtection.E-ma
 80adc9c:	6c69 5020 6f72 6574 7463 6f69 006e 062b     il Protection.+.
 80adcac:	0501 0705 0803 6900 2d64 706b 742d 6d69     .......id-kp-tim
 80adcbc:	5365 6174 706d 6e69 0067 6954 656d 5320     eStamping.Time S
 80adccc:	6174 706d 6e69 0067 062b 0501 0705 0903     tamping.+.......
 80adcdc:	6900 2d64 706b 4f2d 5343 5350 6769 696e     .id-kp-OCSPSigni
 80adcec:	676e 4f00 5343 2050 6953 6e67 6e69 0067     ng.OCSP Signing.
 80adcfc:	1d55 0013 6469 632d 2d65 6162 6973 4363     U...id-ce-basicC
 80add0c:	6e6f 7473 6172 6e69 7374 4200 7361 6369     onstraints.Basic
 80add1c:	4320 6e6f 7473 6172 6e69 7374 5500 0f1d      Constraints.U..
 80add2c:	6900 2d64 6563 6b2d 7965 7355 6761 0065     .id-ce-keyUsage.
 80add3c:	1d55 0025 6469 632d 2d65 7865 4b74 7965     U.%.id-ce-extKey
 80add4c:	7355 6761 0065 7845 6574 646e 6465 4b20     Usage.Extended K
 80add5c:	7965 5520 6173 6567 5500 111d 6900 2d64     ey Usage.U...id-
 80add6c:	6563 732d 6275 656a 7463 6c41 4e74 6d61     ce-subjectAltNam
 80add7c:	0065 7553 6a62 6365 2074 6c41 2074 614e     e.Subject Alt Na
 80add8c:	656d 6000 4886 8601 42f8 0101 6900 2d64     me.`.H...B...id-
 80add9c:	656e 7374 6163 6570 632d 7265 7474 7079     netscape-certtyp
 80addac:	0065 654e 7374 6163 6570 4320 7265 6974     e.Netscape Certi
 80addbc:	6966 6163 6574 5420 7079 0065 0455 0003     ficate Type.U...
 80addcc:	6469 612d 2d74 6f63 6d6d 6e6f 614e 656d     id-at-commonName
 80adddc:	4300 6d6f 6f6d 206e 614e 656d 5500 0604     .Common Name.U..
 80addec:	6900 2d64 7461 632d 756f 746e 7972 614e     .id-at-countryNa
 80addfc:	656d 4300 756f 746e 7972 5500 0704 6900     me.Country.U...i
 80ade0c:	2d64 7461 6c2d 636f 6c61 7469 0079 6f4c     d-at-locality.Lo
 80ade1c:	6163 696c 7974 4c00 5500 0804 6900 2d64     cality.L.U...id-
 80ade2c:	7461 732d 6174 6574 5300 6174 6574 5300     at-state.State.S
 80ade3c:	0054 0455 000a 6469 612d 2d74 726f 6167     T.U...id-at-orga
 80ade4c:	696e 617a 6974 6e6f 614e 656d 4f00 6772     nizationName.Org
 80ade5c:	6e61 7a69 7461 6f69 006e 004f 0455 000b     anization.O.U...
 80ade6c:	6469 612d 2d74 726f 6167 696e 617a 6974     id-at-organizati
 80ade7c:	6e6f 6c61 6e55 7469 614e 656d 4f00 6772     onalUnitName.Org
 80ade8c:	5520 696e 0074 554f 2a00 4886 f786 010d      Unit.OU.*.H....
 80ade9c:	0109 6500 616d 6c69 6441 7264 7365 0073     ...emailAddress.
 80adeac:	2d45 616d 6c69 6120 6464 6572 7373 5500     E-mail address.U
 80adebc:	0504 6900 2d64 7461 732d 7265 6169 4e6c     ...id-at-serialN
 80adecc:	6d75 6562 0072 6553 6972 6c61 6e20 6d75     umber.Serial num
 80adedc:	6562 0072 0455 0010 6469 612d 2d74 6f70     ber.U...id-at-po
 80adeec:	7473 6c61 6441 7264 7365 0073 6f50 7473     stalAddress.Post
 80adefc:	6c61 6120 6464 6572 7373 5500 1104 6900     al address.U...i
 80adf0c:	2d64 7461 702d 736f 6174 436c 646f 0065     d-at-postalCode.
 80adf1c:	6f50 7473 6c61 6320 646f 0065 0455 0004     Postal code.U...
 80adf2c:	6469 612d 2d74 7573 4e72 6d61 0065 7553     id-at-surName.Su
 80adf3c:	6e72 6d61 0065 4e53 5500 2a04 6900 2d64     rname.SN.U.*.id-
 80adf4c:	7461 672d 7669 6e65 614e 656d 4700 7669     at-givenName.Giv
 80adf5c:	6e65 6e20 6d61 0065 4e47 5500 2b04 6900     en name.GN.U.+.i
 80adf6c:	2d64 7461 692d 696e 6974 6c61 0073 6e49     d-at-initials.In
 80adf7c:	7469 6169 736c 5500 2c04 6900 2d64 7461     itials.U.,.id-at
 80adf8c:	672d 6e65 7265 7461 6f69 516e 6175 696c     -generationQuali
 80adf9c:	6966 7265 4700 6e65 7265 7461 6f69 206e     fier.Generation 
 80adfac:	7571 6c61 6669 6569 0072 0455 000c 6469     qualifier.U...id
 80adfbc:	612d 2d74 6974 6c74 0065 6954 6c74 0065     -at-title.Title.
 80adfcc:	0455 002e 6469 612d 2d74 6e64 7551 6c61     U...id-at-dnQual
 80adfdc:	6669 6569 0072 6944 7473 6e69 7567 7369     ifier.Distinguis
 80adfec:	6568 2064 614e 656d 7120 6175 696c 6966     hed Name qualifi
 80adffc:	7265 5500 4104 6900 2d64 7461 702d 6573     er.U.A.id-at-pse
 80ae00c:	6475 6e6f 6d79 5000 6573 6475 6e6f 6d79     udonym.Pseudonym
 80ae01c:	0900 2692 9389 2cf2 0164 0019 6469 642d     ...&...,d...id-d
 80ae02c:	6d6f 6961 436e 6d6f 6f70 656e 746e 4400     omainComponent.D
 80ae03c:	6d6f 6961 206e 6f63 706d 6e6f 6e65 0074     omain component.
 80ae04c:	4344 5500 2d04 6900 2d64 7461 752d 696e     DC.U.-.id-at-uni
 80ae05c:	7571 4965 6564 746e 6669 6569 0072 6e55     queIdentifier.Un
 80ae06c:	7169 6575 4920 6564 746e 6669 6569 0072     ique Identifier.

080ae07c <_ZL10oid_md_alg>:
 80ae07c:	d9dd 080a 0005 0000 d9e3 080a d953 080a     ............S...
 80ae08c:	0004 0000 d9eb 080a 0009 0000 d9f5 080a     ................
 80ae09c:	db25 080a 0005 0000 d9ff 080a 0009 0000     %...............
 80ae0ac:	da09 080a db58 080a 0006 0000 da13 080a     ....X...........
 80ae0bc:	0009 0000 da1d 080a db8b 080a 0007 0000     ................
 80ae0cc:	da27 080a 0009 0000 da31 080a dbbe 080a     '.......1.......
 80ae0dc:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

080ae0f4 <_ZL11oid_sig_alg>:
 80ae0f4:	dacb 080a 0009 0000 dad5 080a daec 080a     ................
 80ae104:	0104 0000 dafa 080a 0009 0000 db04 080a     ................
 80ae114:	db1c 080a 0105 0000 db2d 080a 0009 0000     ........-.......
 80ae124:	db37 080a db4f 080a 0106 0000 db60 080a     7...O.......`...
 80ae134:	0009 0000 db6a 080a db82 080a 0107 0000     ....j...........
 80ae144:	db93 080a 0009 0000 db9d 080a dbb5 080a     ................
 80ae154:	0108 0000 dbc6 080a 0005 0000 dad5 080a     ................
 80ae164:	daec 080a 0104 0000 dbcc 080a 0009 0000     ................
 80ae174:	dbd6 080a dbd6 080a 0600 0000 0000 0000     ................
	...

080ae194 <_ZL12oid_x509_ext>:
 80ae194:	dcfc 080a 0003 0000 dd00 080a dd17 080a     ................
 80ae1a4:	0100 0000 dd29 080a 0003 0000 dd2d 080a     ....).......-...
 80ae1b4:	dd5b 080a 0004 0000 dd3c 080a 0003 0000     [.......<.......
 80ae1c4:	dd40 080a dd52 080a 0800 0000 dd65 080a     @...R.......e...
 80ae1d4:	0003 0000 dd69 080a dd7e 080a 0020 0000     ....i...~... ...
 80ae1e4:	dd8f 080a 0009 0000 dd99 080a ddae 080a     ................
 80ae1f4:	0000 0001 0000 0000 0000 0000 0000 0000     ................
	...

080ae20c <_ZL16aes_192_cbc_info>:
 80ae20c:	0206 0000 00c0 0000 e334 080a 0010 0000     ........4.......
 80ae21c:	0000 0000 0010 0000 e3c4 080a               ............

080ae228 <_ZL16aes_256_ecb_info>:
 80ae228:	0104 0000 0100 0000 e34c 080a 0010 0000     ........L.......
 80ae238:	0000 0000 0010 0000 e3c4 080a               ............

080ae244 <_ZL16aes_128_ecb_info>:
 80ae244:	0102 0000 0080 0000 e364 080a 0010 0000     ........d.......
 80ae254:	0000 0000 0010 0000 e3c4 080a               ............

080ae260 <_ZL12gcm_aes_info>:
 80ae260:	0002 0000 0000 0000 0000 0000 3e7d 080a     ............}>..
 80ae270:	3e7d 080a 3e65 080a 3e53 080a               }>..e>..S>..

080ae27c <mbedtls_cipher_definitions>:
 80ae27c:	0002 0000 e244 080a 0003 0000 e38c 080a     ....D...........
 80ae28c:	0004 0000 e228 080a 0005 0000 e2e8 080a     ....(...........
 80ae29c:	0006 0000 e20c 080a 0007 0000 e370 080a     ............p...
 80ae2ac:	000e 0000 e3a8 080a 000f 0000 e2cc 080a     ................
 80ae2bc:	0010 0000 e3e0 080a 0000 0000 0000 0000     ................

080ae2cc <_ZL16aes_192_gcm_info>:
 80ae2cc:	060f 0000 00c0 0000 e310 080a 000c 0000     ................
 80ae2dc:	0001 0000 0010 0000 e260 080a               ........`...

080ae2e8 <_ZL16aes_128_cbc_info>:
 80ae2e8:	0205 0000 0080 0000 e340 080a 0010 0000     ........@.......
 80ae2f8:	0000 0000 0010 0000 e3c4 080a 4541 2d53     ............AES-
 80ae308:	3532 2d36 4347 004d 4541 2d53 3931 2d32     256-GCM.AES-192-
 80ae318:	4347 004d 4541 2d53 3231 2d38 4347 004d     GCM.AES-128-GCM.
 80ae328:	4541 2d53 3532 2d36 4243 0043 4541 2d53     AES-256-CBC.AES-
 80ae338:	3931 2d32 4243 0043 4541 2d53 3231 2d38     192-CBC.AES-128-
 80ae348:	4243 0043 4541 2d53 3532 2d36 4345 0042     CBC.AES-256-ECB.
 80ae358:	4541 2d53 3931 2d32 4345 0042 4541 2d53     AES-192-ECB.AES-
 80ae368:	3231 2d38 4345 0042                         128-ECB.

080ae370 <_ZL16aes_256_cbc_info>:
 80ae370:	0207 0000 0100 0000 e328 080a 0010 0000     ........(.......
 80ae380:	0000 0000 0010 0000 e3c4 080a               ............

080ae38c <_ZL16aes_192_ecb_info>:
 80ae38c:	0103 0000 00c0 0000 e358 080a 0010 0000     ........X.......
 80ae39c:	0000 0000 0010 0000 e3c4 080a               ............

080ae3a8 <_ZL16aes_128_gcm_info>:
 80ae3a8:	060e 0000 0080 0000 e31c 080a 000c 0000     ................
 80ae3b8:	0001 0000 0010 0000 e260 080a               ........`...

080ae3c4 <_ZL8aes_info>:
 80ae3c4:	0002 0000 3ec1 080a 3eb9 080a 3eb5 080a     .....>...>...>..
 80ae3d4:	3eb1 080a 3e99 080a 3e87 080a               .>...>...>..

080ae3e0 <_ZL16aes_256_gcm_info>:
 80ae3e0:	0610 0000 0100 0000 e304 080a 000c 0000     ................
 80ae3f0:	0001 0000 0010 0000 e260 080a 7372 2e61     ........`...rsa.
 80ae400:	004e 7372 2e61 0045                         N.rsa.E.

080ae408 <mbedtls_rsa_info>:
 80ae408:	0001 0000 da83 080a 3f25 080a 3ec5 080a     ........%?...>..
 80ae418:	4009 080a 3fc9 080a 3f7d 080a 3f31 080a     .@...?..}?..1?..
 80ae428:	3f21 080a 3f07 080a 3ef5 080a 3ed1 080a     !?...?...>...>..
 80ae438:	6e75 6e6b 776f 006e 4c54 2d53 5352 2d41     unknown.TLS-RSA-
 80ae448:	4957 4854 412d 5345 322d 3635 472d 4d43     WITH-AES-256-GCM
 80ae458:	532d 4148 3833 0034 4c54 2d53 5352 2d41     -SHA384.TLS-RSA-
 80ae468:	4957 4854 412d 5345 312d 3832 472d 4d43     WITH-AES-128-GCM
 80ae478:	532d 4148 3532 0036 4c54 2d53 5352 2d41     -SHA256.TLS-RSA-
 80ae488:	4957 4854 412d 5345 312d 3832 432d 4342     WITH-AES-128-CBC
 80ae498:	532d 4148 3532 0036 4c54 2d53 5352 2d41     -SHA256.TLS-RSA-
 80ae4a8:	4957 4854 412d 5345 322d 3635 432d 4342     WITH-AES-256-CBC
 80ae4b8:	532d 4148 3532 0036 4c54 2d53 5352 2d41     -SHA256.TLS-RSA-
 80ae4c8:	4957 4854 412d 5345 312d 3832 432d 4342     WITH-AES-128-CBC
 80ae4d8:	532d 4148 5400 534c 522d 4153 572d 5449     -SHA.TLS-RSA-WIT
 80ae4e8:	2d48 4541 2d53 3532 2d36 4243 2d43 4853     H-AES-256-CBC-SH
 80ae4f8:	0041 0000                                   A...

080ae4fc <_ZL23ciphersuite_definitions>:
 80ae4fc:	009d 0000 e440 080a 0710 0001 0003 0000     ....@...........
 80ae50c:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80ae51c:	009c 0000 e460 080a 060e 0001 0003 0000     ....`...........
 80ae52c:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80ae53c:	003c 0000 e480 080a 0605 0001 0003 0000     <...............
 80ae54c:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80ae55c:	003d 0000 e4a0 080a 0607 0001 0003 0000     =...............
 80ae56c:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80ae57c:	002f 0000 e4c0 080a 0405 0001 0003 0000     /...............
 80ae58c:	0000 0000 0003 0000 0003 0000 0000 0000     ................
 80ae59c:	0035 0000 e4dd 080a 0407 0001 0003 0000     5...............
 80ae5ac:	0000 0000 0003 0000 0003 0000 0000 0000     ................
 80ae5bc:	0000 0000 da74 080a 0000 0000 0000 0000     ....t...........
	...

080ae5e0 <_ZL5last4>:
	...
 80ae5e8:	1c20 0000 0000 0000 3840 0000 0000 0000      .......@8......
 80ae5f8:	2460 0000 0000 0000 7080 0000 0000 0000     `$.......p......
 80ae608:	6ca0 0000 0000 0000 48c0 0000 0000 0000     .l.......H......
 80ae618:	54e0 0000 0000 0000 e100 0000 0000 0000     .T..............
 80ae628:	fd20 0000 0000 0000 d940 0000 0000 0000      .......@.......
 80ae638:	c560 0000 0000 0000 9180 0000 0000 0000     `...............
 80ae648:	8da0 0000 0000 0000 a9c0 0000 0000 0000     ................
 80ae658:	b5e0 0000 0000 0000                         ........

080ae660 <CSWTCH.21>:
 80ae660:	d76c 080a d79c 080a d82c 080a d7cc 080a     l.......,.......
 80ae670:	d7fc 080a 7274 6575 6600 6c61 6573 2c00     ....true.false.,
 80ae680:	0020 430a 7265 6974 6966 6163 6574 6920      ..Certificate i
 80ae690:	2073 6e75 6e69 7469 6169 696c 6573 2164     s uninitialised!
 80ae6a0:	000a 7325 6563 7472 202e 6576 7372 6f69     ..%scert. versio
 80ae6b0:	206e 2020 2020 203a 6425 000a 7325 6573     n     : %d..%sse
 80ae6c0:	6972 6c61 6e20 6d75 6562 2072 2020 2020     rial number     
 80ae6d0:	203a 0a00 7325 7369 7573 7265 6e20 6d61     : ..%sissuer nam
 80ae6e0:	2065 2020 2020 2020 203a 0a00 7325 7573     e       : ..%ssu
 80ae6f0:	6a62 6365 2074 616e 656d 2020 2020 2020     bject name      
 80ae700:	203a 0a00 7325 7369 7573 6465 2020 6e6f     : ..%sissued  on
 80ae710:	2020 2020 2020 2020 203a 3025 6434 252d             : %04d-%
 80ae720:	3230 2d64 3025 6432 2520 3230 3a64 3025     02d-%02d %02d:%0
 80ae730:	6432 253a 3230 0064 250a 6573 7078 7269     2d:%02d..%sexpir
 80ae740:	7365 6f20 206e 2020 2020 2020 3a20 2520     es on        : %
 80ae750:	3430 2d64 3025 6432 252d 3230 2064 3025     04d-%02d-%02d %0
 80ae760:	6432 253a 3230 3a64 3025 6432 0a00 7325     2d:%02d:%02d..%s
 80ae770:	6973 6e67 6465 7520 6973 676e 2020 2020     signed using    
 80ae780:	2020 203a 0a00 7325 2d25 3831 3a73 2520       : ..%s%-18s: %
 80ae790:	2064 6962 7374 0a00 7325 6162 6973 2063     d bits..%sbasic 
 80ae7a0:	6f63 736e 7274 6961 746e 2073 203a 4143     constraints : CA
 80ae7b0:	253d 0073 202c 616d 5f78 6170 6874 656c     =%s., max_pathle
 80ae7c0:	3d6e 6425 0a00 7325 7573 6a62 6365 2074     n=%d..%ssubject 
 80ae7d0:	6c61 2074 616e 656d 2020 203a 0a00 7325     alt name  : ..%s
 80ae7e0:	6563 7472 202e 7974 6570 2020 2020 2020     cert. type      
 80ae7f0:	2020 203a 2500 5373 4c53 4320 696c 6e65       : .%sSSL Clien
 80ae800:	0074 7325 5353 204c 6553 7672 7265 2500     t.%sSSL Server.%
 80ae810:	4573 616d 6c69 2500 4f73 6a62 6365 2074     sEmail.%sObject 
 80ae820:	6953 6e67 6e69 0067 7325 6552 6573 7672     Signing.%sReserv
 80ae830:	6465 2500 5373 4c53 4320 0041 7325 6d45     ed.%sSSL CA.%sEm
 80ae840:	6961 206c 4143 2500 4f73 6a62 6365 2074     ail CA.%sObject 
 80ae850:	6953 6e67 6e69 2067 4143 0a00 7325 656b     Signing CA..%ske
 80ae860:	2079 7375 6761 2065 2020 2020 2020 2020     y usage         
 80ae870:	203a 2500 4473 6769 7469 6c61 5320 6769     : .%sDigital Sig
 80ae880:	616e 7574 6572 2500 4e73 6e6f 5220 7065     nature.%sNon Rep
 80ae890:	6475 6169 6974 6e6f 2500 4b73 7965 4520     udiation.%sKey E
 80ae8a0:	636e 7069 6568 6d72 6e65 0074 7325 6144     ncipherment.%sDa
 80ae8b0:	6174 4520 636e 7069 6568 6d72 6e65 0074     ta Encipherment.
 80ae8c0:	7325 654b 2079 6741 6572 6d65 6e65 0074     %sKey Agreement.
 80ae8d0:	7325 654b 2079 6543 7472 5320 6769 006e     %sKey Cert Sign.
 80ae8e0:	7325 5243 204c 6953 6e67 2500 4573 636e     %sCRL Sign.%sEnc
 80ae8f0:	7069 6568 2072 6e4f 796c 2500 4473 6365     ipher Only.%sDec
 80ae900:	7069 6568 2072 6e4f 796c 0a00 7325 7865     ipher Only..%sex
 80ae910:	2074 656b 2079 7375 6761 2065 2020 2020     t key usage     
 80ae920:	203a 3f00 3f3f 2500 2573 0073 7325 7325     : .???.%s%s.%s%s
 80ae930:	000a 7325 6e55 6e6b 776f 206e 6572 7361     ..%sUnknown reas
 80ae940:	6e6f 2820 6874 7369 7320 6f68 6c75 2064     on (this should 
 80ae950:	6f6e 2074 6168 7070 6e65 0a29 2a00 002e     not happen)..*..
 80ae960:	2d2d 2d2d 422d 4745 4e49 4320 5245 4954     -----BEGIN CERTI
 80ae970:	4946 4143 4554 2d2d 2d2d 002d 2d2d 2d2d     FICATE-----.----
 80ae980:	452d 444e 4320 5245 4954 4946 4143 4554     -END CERTIFICATE
 80ae990:	2d2d 2d2d 002d 6854 2065 6563 7472 6669     -----.The certif
 80ae9a0:	6369 7461 2065 6176 696c 6964 7974 6820     icate validity h
 80ae9b0:	7361 6520 7078 7269 6465 5400 6568 6320     as expired.The c
 80ae9c0:	7265 6974 6966 6163 6574 6820 7361 6220     ertificate has b
 80ae9d0:	6565 206e 6572 6f76 656b 2064 6928 2073     een revoked (is 
 80ae9e0:	6e6f 6120 4320 4c52 0029 6854 2065 6563     on a CRL).The ce
 80ae9f0:	7472 6669 6369 7461 2065 6f43 6d6d 6e6f     rtificate Common
 80aea00:	4e20 6d61 2065 4328 294e 6420 656f 2073      Name (CN) does 
 80aea10:	6f6e 2074 616d 6374 2068 6977 6874 7420     not match with t
 80aea20:	6568 6520 7078 6365 6574 2064 4e43 5400     he expected CN.T
 80aea30:	6568 6320 7265 6974 6966 6163 6574 6920     he certificate i
 80aea40:	2073 6f6e 2074 6f63 7272 6365 6c74 2079     s not correctly 
 80aea50:	6973 6e67 6465 6220 2079 6874 2065 7274     signed by the tr
 80aea60:	7375 6574 2064 4143 5400 6568 4320 4c52     usted CA.The CRL
 80aea70:	6920 2073 6f6e 2074 6f63 7272 6365 6c74      is not correctl
 80aea80:	2079 6973 6e67 6465 6220 2079 6874 2065     y signed by the 
 80aea90:	7274 7375 6574 2064 4143 5400 6568 4320     trusted CA.The C
 80aeaa0:	4c52 6920 2073 7865 6970 6572 0064 6543     RL is expired.Ce
 80aeab0:	7472 6669 6369 7461 2065 6177 2073 696d     rtificate was mi
 80aeac0:	7373 6e69 0067 6543 7472 6669 6369 7461     ssing.Certificat
 80aead0:	2065 6576 6972 6966 6163 6974 6e6f 7720     e verification w
 80aeae0:	7361 7320 696b 7070 6465 4f00 6874 7265     as skipped.Other
 80aeaf0:	7220 6165 6f73 206e 6328 6e61 6220 2065      reason (can be 
 80aeb00:	7375 6465 6220 2079 6576 6972 7966 6320     used by verify c
 80aeb10:	6c61 626c 6361 296b 5400 6568 6320 7265     allback).The cer
 80aeb20:	6974 6966 6163 6574 7620 6c61 6469 7469     tificate validit
 80aeb30:	2079 7473 7261 7374 6920 206e 6874 2065     y starts in the 
 80aeb40:	7566 7574 6572 5400 6568 4320 4c52 6920     future.The CRL i
 80aeb50:	2073 7266 6d6f 7420 6568 6620 7475 7275     s from the futur
 80aeb60:	0065 7355 6761 2065 6f64 7365 6e20 746f     e.Usage does not
 80aeb70:	6d20 7461 6863 7420 6568 6b20 7965 7355      match the keyUs
 80aeb80:	6761 2065 7865 6574 736e 6f69 006e 7355     age extension.Us
 80aeb90:	6761 2065 6f64 7365 6e20 746f 6d20 7461     age does not mat
 80aeba0:	6863 7420 6568 6520 7478 6e65 6564 4b64     ch the extendedK
 80aebb0:	7965 7355 6761 2065 7865 6574 736e 6f69     eyUsage extensio
 80aebc0:	006e 7355 6761 2065 6f64 7365 6e20 746f     n.Usage does not
 80aebd0:	6d20 7461 6863 7420 6568 6e20 4373 7265      match the nsCer
 80aebe0:	5474 7079 2065 7865 6574 736e 6f69 006e     tType extension.
 80aebf0:	6854 2065 6563 7472 6669 6369 7461 2065     The certificate 
 80aec00:	7369 7320 6769 656e 2064 6977 6874 6120     is signed with a
 80aec10:	206e 6e75 6361 6563 7470 6261 656c 6820     n unacceptable h
 80aec20:	7361 2e68 5400 6568 6320 7265 6974 6966     ash..The certifi
 80aec30:	6163 6574 6920 2073 6973 6e67 6465 7720     cate is signed w
 80aec40:	7469 2068 6e61 7520 616e 6363 7065 6174     ith an unaccepta
 80aec50:	6c62 2065 4b50 6120 676c 2820 6765 5220     ble PK alg (eg R
 80aec60:	4153 7620 2073 4345 5344 2941 002e 6854     SA vs ECDSA)..Th
 80aec70:	2065 6563 7472 6669 6369 7461 2065 7369     e certificate is
 80aec80:	7320 6769 656e 2064 6977 6874 6120 206e      signed with an 
 80aec90:	6e75 6361 6563 7470 6261 656c 6b20 7965     unacceptable key
 80aeca0:	2820 6765 6220 6461 6320 7275 6576 202c      (eg bad curve, 
 80aecb0:	5352 2041 6f74 206f 6873 726f 2974 002e     RSA too short)..
 80aecc0:	6854 2065 5243 204c 7369 7320 6769 656e     The CRL is signe
 80aecd0:	2064 6977 6874 6120 206e 6e75 6361 6563     d with an unacce
 80aece0:	7470 6261 656c 6820 7361 2e68 5400 6568     ptable hash..The
 80aecf0:	4320 4c52 6920 2073 6973 6e67 6465 7720      CRL is signed w
 80aed00:	7469 2068 6e61 7520 616e 6363 7065 6174     ith an unaccepta
 80aed10:	6c62 2065 4b50 6120 676c 2820 6765 5220     ble PK alg (eg R
 80aed20:	4153 7620 2073 4345 5344 2941 002e 6854     SA vs ECDSA)..Th
 80aed30:	2065 5243 204c 7369 7320 6769 656e 2064     e CRL is signed 
 80aed40:	6977 6874 6120 206e 6e75 6361 6563 7470     with an unaccept
 80aed50:	6261 656c 6b20 7965 2820 6765 6220 6461     able key (eg bad
 80aed60:	6320 7275 6576 202c 5352 2041 6f74 206f      curve, RSA too 
 80aed70:	6873 726f 2974 002e                         short)..

080aed78 <CSWTCH.205>:
 80aed78:	0302 0504 6306 696c 6e65 2074 6966 696e     .....client fini
 80aed88:	6873 6465 7300 7265 6576 2072 6966 696e     shed.server fini
 80aed98:	6873 6465 6d00 7361 6574 2072 6573 7263     shed.master secr
 80aeda8:	7465 6b00 7965 6520 7078 6e61 6973 6e6f     et.key expansion
 80aedb8:	5300 4c53 3376 302e 5400 534c 3176 302e     .SSLv3.0.TLSv1.0
 80aedc8:	5400 534c 3176 312e 5400 534c 3176 322e     .TLSv1.1.TLSv1.2
 80aedd8:	0000 0000                                   ....

080aeddc <_ZL18mfl_code_to_length>:
 80aeddc:	2000 0000 0200 0000 0400 0000 0800 0000     . ..............
 80aedec:	1000 0000                                   ....

080aedf0 <_ZL1K>:
 80aedf0:	ae22 d728 2f98 428a 65cd 23ef 4491 7137     ".(../.B.e.#.D7q
 80aee00:	3b2f ec4d fbcf b5c0 dbbc 8189 dba5 e9b5     /;M.............
 80aee10:	b538 f348 c25b 3956 d019 b605 11f1 59f1     8.H.[.V9.......Y
 80aee20:	4f9b af19 82a4 923f 8118 da6d 5ed5 ab1c     .O....?...m..^..
 80aee30:	0242 a303 aa98 d807 6fbe 4570 5b01 1283     B........opE.[..
 80aee40:	b28c 4ee4 85be 2431 b4e2 d5ff 7dc3 550c     ...N..1$.....}.U
 80aee50:	896f f27b 5d74 72be 96b1 3b16 b1fe 80de     o.{.t].r...;....
 80aee60:	1235 25c7 06a7 9bdc 2694 cf69 f174 c19b     5..%.....&i.t...
 80aee70:	4ad2 9ef1 69c1 e49b 25e3 384f 4786 efbe     .J...i...%O8.G..
 80aee80:	d5b5 8b8c 9dc6 0fc1 9c65 77ac a1cc 240c     ........e..w...$
 80aee90:	0275 592b 2c6f 2de9 e483 6ea6 84aa 4a74     u.+Yo,.-...n..tJ
 80aeea0:	fbd4 bd41 a9dc 5cb0 53b5 8311 88da 76f9     ..A....\.S.....v
 80aeeb0:	dfab ee66 5152 983e 3210 2db4 c66d a831     ..f.RQ>..2.-m.1.
 80aeec0:	213f 98fb 27c8 b003 0ee4 beef 7fc7 bf59     ?!...'........Y.
 80aeed0:	8fc2 3da8 0bf3 c6e0 a725 930a 9147 d5a7     ...=....%...G...
 80aeee0:	826f e003 6351 06ca 6e70 0a0e 2967 1429     o...Qc..pn..g)).
 80aeef0:	2ffc 46d2 0a85 27b7 c926 5c26 2138 2e1b     ./.F...'&.&\8!..
 80aef00:	2aed 5ac4 6dfc 4d2c b3df 9d95 0d13 5338     .*.Z.m,M......8S
 80aef10:	63de 8baf 7354 650a b2a8 3c77 0abb 766a     .c..Ts.e..w<..jv
 80aef20:	aee6 47ed c92e 81c2 353b 1482 2c85 9272     ...G....;5...,r.
 80aef30:	0364 4cf1 e8a1 a2bf 3001 bc42 664b a81a     d..L.....0B.Kf..
 80aef40:	9791 d0f8 8b70 c24b be30 0654 51a3 c76c     ....p.K.0.T..Ql.
 80aef50:	5218 d6ef e819 d192 a910 5565 0624 d699     .R........eU$...
 80aef60:	202a 5771 3585 f40e d1b8 32bb a070 106a     * qW.5.....2p.j.
 80aef70:	d0c8 b8d2 c116 19a4 ab53 5141 6c08 1e37     ........S.AQ.l7.
 80aef80:	eb99 df8e 774c 2748 48a8 e19b bcb5 34b0     ....LwH'.H.....4
 80aef90:	5a63 c5c9 0cb3 391c 8acb e341 aa4a 4ed8     cZ.....9..A.J..N
 80aefa0:	e373 7763 ca4f 5b9c b8a3 d6b2 6ff3 682e     s.cwO..[.....o.h
 80aefb0:	b2fc 5def 82ee 748f 2f60 4317 636f 78a5     ...]...t`/.Coc.x
 80aefc0:	ab72 a1f0 7814 84c8 39ec 1a64 0208 8cc7     r....x...9d.....
 80aefd0:	1e28 2363 fffa 90be bde9 de82 6ceb a450     (.c#.........lP.
 80aefe0:	7915 b2c6 a3f7 bef9 532b e372 78f2 c671     .y......+Sr..xq.
 80aeff0:	619c ea26 3ece ca27 c207 21c0 b8c7 d186     .a&..>'....!....
 80af000:	eb1e cde0 7dd6 eada d178 ee6e 4f7f f57d     .....}..x.n..O}.
 80af010:	6fba 7217 67aa 06f0 98a6 a2c8 7dc5 0a63     .o.r.g.......}c.
 80af020:	0dae bef9 9804 113f 471b 131c 0b35 1b71     ......?..G..5.q.
 80af030:	7d84 2304 77f5 28db 2493 40c7 ab7b 32ca     .}.#.w.(.$.@{..2
 80af040:	bebc 15c9 be0a 3c9e 0d4c 9c10 67c4 431d     .......<L....g.C
 80af050:	42b6 cb3e d4be 4cc5 7e2a fc65 299c 597f     .B>....L*~e..).Y
 80af060:	faec 3ad6 6fab 5fcb 5817 4a47 198c 6c44     ...:.o._.XGJ..Dl
 80af070:	0302 0705 0d0b 1311 1d17 251f 2b29 352f     ...........%)+/5
 80af080:	3d3b 4743 4f49 5953 6561 6b67 716d 837f     ;=CGIOSYaegkmq..
 80af090:	8b89 9795 a39d ada7 b5b3 c1bf c7c5 dfd3     ................
 80af0a0:	e5e3 efe9 fbf1 0000                         ........

080af0a8 <_ZTV8SPIClass>:
	...
 80af0b0:	c391 080a c393 080a                         ........

080af0b8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80af0c0:	c3e7 080a c3ed 080a c50b 080a c3f9 080a     ................
 80af0d0:	c3e9 080a                                   ....

080af0d4 <_ZTV9TCPClient>:
	...
 80af0dc:	01cd 080a 0201 080a c3cf 080a c7a9 080a     ................
 80af0ec:	c589 080a c4d7 080a c4a9 080a c3e5 080a     ................
 80af0fc:	c6bd 080a c3fd 080a c527 080a c605 080a     ........'.......
 80af10c:	c7cd 080a c81f 080a c489 080a 0066 6e6c     ............f.ln
 80af11c:	6600 006e 6564 6174 6c69 0d00 000a 3025     .fn.detail....%0
 80af12c:	3031 2075 5d00 0020 2928 203a 2000 005b     10u .] .(): . [.
 80af13c:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 80af14c:	736c 3d20 0020 6162 6475 5300 7265 6169     ls = .baud.Seria
 80af15c:	006c 5355 5342 7265 6169 316c 7000 7261     l.USBSerial1.par
 80af16c:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80af17c:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80af18c:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80af19c:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80af1ac:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80af1bc:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80af1cc:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80af1dc:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
 80af1ec:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
 80af1fc:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
 80af20c:	6100 6373 6974 656d 0000 0000               .asctime....

080af218 <_ZTV9IPAddress>:
	...
 80af220:	cbbb 080a cbad 080a cbaf 080a               ............

080af22c <_ZTV9USBSerial>:
	...
 80af234:	cc41 080a cc85 080a cc5f 080a c945 080a     A......._...E...
 80af244:	cc59 080a cc43 080a cc4b 080a cc7f 080a     Y...C...K.......
 80af254:	cc53 080a cc3d 080a                         S...=...

080af25c <_ZTV11USARTSerial>:
	...
 80af264:	cd71 080a cd95 080a cda1 080a c945 080a     q...........E...
 80af274:	cd7d 080a cd89 080a cd83 080a cd8f 080a     }...............
 80af284:	cd73 080a cd77 080a                         s...w...

080af28c <_ZTVN5spark9WiFiClassE>:
	...
 80af294:	ce73 080a                                   s...

080af298 <_ZN5spark7NetworkE>:
 80af298:	30a0 2000                                   .0. 

080af29c <__sf_fake_stdin>:
	...

080af2bc <__sf_fake_stdout>:
	...

080af2dc <__sf_fake_stderr>:
	...

080af2fc <link_const_variable_data_end>:
 80af2fc:	080a0189 	.word	0x080a0189
 80af300:	080a038d 	.word	0x080a038d
 80af304:	080abf49 	.word	0x080abf49
 80af308:	080abf4d 	.word	0x080abf4d
 80af30c:	080ac08f 	.word	0x080ac08f
 80af310:	080ac093 	.word	0x080ac093
 80af314:	080ac097 	.word	0x080ac097
 80af318:	080ac09b 	.word	0x080ac09b
 80af31c:	080ac09f 	.word	0x080ac09f
 80af320:	080ac0a3 	.word	0x080ac0a3
 80af324:	080ac0a7 	.word	0x080ac0a7
 80af328:	080ac0ab 	.word	0x080ac0ab
 80af32c:	080ac0cf 	.word	0x080ac0cf
 80af330:	080ac0d3 	.word	0x080ac0d3
 80af334:	080ac0d7 	.word	0x080ac0d7
 80af338:	080ac0db 	.word	0x080ac0db
 80af33c:	080ac3c9 	.word	0x080ac3c9
 80af340:	080ac9d1 	.word	0x080ac9d1
 80af344:	080ac9e1 	.word	0x080ac9e1
 80af348:	080aca61 	.word	0x080aca61
 80af34c:	080ace7d 	.word	0x080ace7d
 80af350:	080ace9d 	.word	0x080ace9d
 80af354:	080acee1 	.word	0x080acee1
 80af358:	080acf1d 	.word	0x080acf1d
 80af35c:	080acfa1 	.word	0x080acfa1
 80af360:	080ad065 	.word	0x080ad065
 80af364:	080ad129 	.word	0x080ad129

080af368 <link_constructors_end>:
	...
