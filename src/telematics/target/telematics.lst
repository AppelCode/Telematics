
d:/CAR/TelematicsLocal/CybeSe/Telematics/src/telematics/target/telematics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f48  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  08093f60  08093f60  00023f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  08093f68  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000098  20000400  08093f6c  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000037ac  20000498  20000498  00040498  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08094004  08094004  00034004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0809402c  0809402c  0003402c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0016122a  00000000  00000000  00034030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002054f  00000000  00000000  0019525a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004664e  00000000  00000000  001b57a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003668  00000000  00000000  001fbdf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005338  00000000  00000000  001ff45f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b7dc  00000000  00000000  00204797  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004f307  00000000  00000000  0023ff73  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aa3fa  00000000  00000000  0028f27a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0001026c  00000000  00000000  00339674  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	f8 06 09 08                                         ....

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f010 fae0 	bl	80905f2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f010 fb00 	bl	809063e <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08093f6c 	.word	0x08093f6c
 808004c:	20000498 	.word	0x20000498
 8080050:	20000498 	.word	0x20000498
 8080054:	20003c44 	.word	0x20003c44
 8080058:	20003c44 	.word	0x20003c44

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f00f fdc1 	bl	808fbe4 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08093ee0 	.word	0x08093ee0
 8080084:	08093f5c 	.word	0x08093f5c

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b862 	b.w	8080150 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f89f 	bl	80801d0 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f00f bd63 	b.w	808fb60 <_post_loop>

0808009a <_Znwj>:
 808009a:	f00f b95b 	b.w	808f354 <malloc>

0808009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 808009e:	f00f b959 	b.w	808f354 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f00f b95f 	b.w	808f364 <free>

080800a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80800a6:	f00f b95d 	b.w	808f364 <free>

080800aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800aa:	7800      	ldrb	r0, [r0, #0]
 80800ac:	fab0 f080 	clz	r0, r0
 80800b0:	0940      	lsrs	r0, r0, #5
 80800b2:	4770      	bx	lr

080800b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b4:	2301      	movs	r3, #1
 80800b6:	7003      	strb	r3, [r0, #0]
 80800b8:	4770      	bx	lr
	...

080800bc <_Z8callbackPcPhj>:
unsigned char key[32];

// recieve message
//used for handling all subscription messages
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
 80800bc:	b5b0      	push	{r4, r5, r7, lr}
 80800be:	4615      	mov	r5, r2
    char p[length + 1];
 80800c0:	f102 0308 	add.w	r3, r2, #8
 80800c4:	f023 0307 	bic.w	r3, r3, #7
unsigned char key[32];

// recieve message
//used for handling all subscription messages
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
 80800c8:	b084      	sub	sp, #16
 80800ca:	af00      	add	r7, sp, #0
    char p[length + 1];
 80800cc:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
 80800d0:	4668      	mov	r0, sp
 80800d2:	f010 fa8e 	bl	80905f2 <memcpy>
    p[length] = NULL;
 80800d6:	2400      	movs	r4, #0
    String message(p);
 80800d8:	4669      	mov	r1, sp
 80800da:	4638      	mov	r0, r7
//used for handling all subscription messages
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
 80800dc:	f80d 4005 	strb.w	r4, [sp, r5]
    String message(p);
 80800e0:	f00f fbed 	bl	808f8be <_ZN6StringC1EPK19__FlashStringHelper>

    if (message.equals("RED"))
 80800e4:	4914      	ldr	r1, [pc, #80]	; (8080138 <_Z8callbackPcPhj+0x7c>)
 80800e6:	4638      	mov	r0, r7
 80800e8:	f00f fc1c 	bl	808f924 <_ZNK6String6equalsEPKc>
 80800ec:	4605      	mov	r5, r0
 80800ee:	b118      	cbz	r0, 80800f8 <_Z8callbackPcPhj+0x3c>
        RGB.color(255, 0, 0);
 80800f0:	4622      	mov	r2, r4
 80800f2:	4621      	mov	r1, r4
 80800f4:	20ff      	movs	r0, #255	; 0xff
 80800f6:	e013      	b.n	8080120 <_Z8callbackPcPhj+0x64>
    else if (message.equals("GREEN"))
 80800f8:	4910      	ldr	r1, [pc, #64]	; (808013c <_Z8callbackPcPhj+0x80>)
 80800fa:	4638      	mov	r0, r7
 80800fc:	f00f fc12 	bl	808f924 <_ZNK6String6equalsEPKc>
 8080100:	4604      	mov	r4, r0
 8080102:	b110      	cbz	r0, 808010a <_Z8callbackPcPhj+0x4e>
        RGB.color(0, 255, 0);
 8080104:	462a      	mov	r2, r5
 8080106:	21ff      	movs	r1, #255	; 0xff
 8080108:	e009      	b.n	808011e <_Z8callbackPcPhj+0x62>
    else if (message.equals("BLUE"))
 808010a:	490d      	ldr	r1, [pc, #52]	; (8080140 <_Z8callbackPcPhj+0x84>)
 808010c:	4638      	mov	r0, r7
 808010e:	f00f fc09 	bl	808f924 <_ZNK6String6equalsEPKc>
        RGB.color(0, 0, 255);
 8080112:	22ff      	movs	r2, #255	; 0xff

    if (message.equals("RED"))
        RGB.color(255, 0, 0);
    else if (message.equals("GREEN"))
        RGB.color(0, 255, 0);
    else if (message.equals("BLUE"))
 8080114:	b110      	cbz	r0, 808011c <_Z8callbackPcPhj+0x60>
        RGB.color(0, 0, 255);
 8080116:	4621      	mov	r1, r4
 8080118:	4620      	mov	r0, r4
 808011a:	e001      	b.n	8080120 <_Z8callbackPcPhj+0x64>
    else
        RGB.color(255, 255, 255);
 808011c:	4611      	mov	r1, r2
 808011e:	4610      	mov	r0, r2
 8080120:	f00f fcbe 	bl	808faa0 <_ZN8RGBClass5colorEiii>
    delay(1000);
 8080124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080128:	f00f fca8 	bl	808fa7c <delay>
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    String message(p);
 808012c:	4638      	mov	r0, r7
 808012e:	f00f fb7f 	bl	808f830 <_ZN6StringD1Ev>
    else if (message.equals("BLUE"))
        RGB.color(0, 0, 255);
    else
        RGB.color(255, 255, 255);
    delay(1000);
}
 8080132:	3710      	adds	r7, #16
 8080134:	46bd      	mov	sp, r7
 8080136:	bdb0      	pop	{r4, r5, r7, pc}
 8080138:	0809070c 	.word	0x0809070c
 808013c:	08090710 	.word	0x08090710
 8080140:	08090716 	.word	0x08090716

08080144 <_ZN3AWSD1Ev>:
#ifndef AWS_H
#define AWS_H

#include <MQTT-TLS.h>

class AWS {
 8080144:	b510      	push	{r4, lr}
 8080146:	4604      	mov	r4, r0
 8080148:	f000 fb7a 	bl	8080840 <_ZN4MQTTD1Ev>
 808014c:	4620      	mov	r0, r4
 808014e:	bd10      	pop	{r4, pc}

08080150 <setup>:

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
int counter = 0;
void setup() {
 8080150:	b508      	push	{r3, lr}


    Serial.begin(9600);
 8080152:	f00f fe19 	bl	808fd88 <_Z16_fetch_usbserialv>
 8080156:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808015a:	f00f fdfb 	bl	808fd54 <_ZN9USBSerial5beginEl>
    if (millis() - lastSync > ONE_DAY_MILLIS) {
        Particle.syncTime();
        lastSync = millis();
    }
    */
       awsiot.connect("sparkclient");
 808015e:	4914      	ldr	r1, [pc, #80]	; (80801b0 <setup+0x60>)
 8080160:	4814      	ldr	r0, [pc, #80]	; (80801b4 <setup+0x64>)
 8080162:	f00e ff9d 	bl	808f0a0 <_ZN3AWS7connectEPKc>

    // publish/subscribe
    if (awsiot.isConnected()) {
 8080166:	4813      	ldr	r0, [pc, #76]	; (80801b4 <setup+0x64>)
 8080168:	f00e ff71 	bl	808f04e <_ZN3AWS11isConnectedEv>
 808016c:	b168      	cbz	r0, 808018a <setup+0x3a>
        Serial.println("client connected");
 808016e:	f00f fe0b 	bl	808fd88 <_Z16_fetch_usbserialv>
 8080172:	4911      	ldr	r1, [pc, #68]	; (80801b8 <setup+0x68>)
 8080174:	f00f fc0d 	bl	808f992 <_ZN5Print7printlnEPKc>
        awsiot.publish("outTopic/message", "hello world");
 8080178:	4910      	ldr	r1, [pc, #64]	; (80801bc <setup+0x6c>)
 808017a:	4a11      	ldr	r2, [pc, #68]	; (80801c0 <setup+0x70>)
 808017c:	480d      	ldr	r0, [pc, #52]	; (80801b4 <setup+0x64>)
 808017e:	f00e ff68 	bl	808f052 <_ZN3AWS7publishEPKcS1_>
        awsiot.subscribe("inTopic/message");
 8080182:	4910      	ldr	r1, [pc, #64]	; (80801c4 <setup+0x74>)
 8080184:	480b      	ldr	r0, [pc, #44]	; (80801b4 <setup+0x64>)
 8080186:	f00e ff66 	bl	808f056 <_ZN3AWS9subscribeEPKc>
    }

   while(1){
        Serial.println("hello world");
 808018a:	f00f fdfd 	bl	808fd88 <_Z16_fetch_usbserialv>
 808018e:	490c      	ldr	r1, [pc, #48]	; (80801c0 <setup+0x70>)
 8080190:	f00f fbff 	bl	808f992 <_ZN5Print7printlnEPKc>
        secretStuff.generateKey(key);
 8080194:	490c      	ldr	r1, [pc, #48]	; (80801c8 <setup+0x78>)
 8080196:	480d      	ldr	r0, [pc, #52]	; (80801cc <setup+0x7c>)
 8080198:	f00e fe94 	bl	808eec4 <_ZN5Crypt11generateKeyEPh>
        Serial.println((int)key);
 808019c:	f00f fdf4 	bl	808fd88 <_Z16_fetch_usbserialv>
 80801a0:	220a      	movs	r2, #10
 80801a2:	4909      	ldr	r1, [pc, #36]	; (80801c8 <setup+0x78>)
 80801a4:	f00f fc4d 	bl	808fa42 <_ZN5Print7printlnEii>
        delay(200);
 80801a8:	20c8      	movs	r0, #200	; 0xc8
 80801aa:	f00f fc67 	bl	808fa7c <delay>
 80801ae:	e7ec      	b.n	808018a <setup+0x3a>
 80801b0:	0809071b 	.word	0x0809071b
 80801b4:	200009a8 	.word	0x200009a8
 80801b8:	08090727 	.word	0x08090727
 80801bc:	08090744 	.word	0x08090744
 80801c0:	08090738 	.word	0x08090738
 80801c4:	08090755 	.word	0x08090755
 80801c8:	200004a0 	.word	0x200004a0
 80801cc:	200004c0 	.word	0x200004c0

080801d0 <loop>:

    RGB.control(true);

}

void loop() {
 80801d0:	b508      	push	{r3, lr}
    
    if (awsiot.isConnected()) {
 80801d2:	4806      	ldr	r0, [pc, #24]	; (80801ec <loop+0x1c>)
 80801d4:	f00e ff3b 	bl	808f04e <_ZN3AWS11isConnectedEv>
 80801d8:	b110      	cbz	r0, 80801e0 <loop+0x10>
        awsiot.loop();
 80801da:	4804      	ldr	r0, [pc, #16]	; (80801ec <loop+0x1c>)
 80801dc:	f00e ff3d 	bl	808f05a <_ZN3AWS4loopEv>
    }
    
    delay(200);
}
 80801e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    
    if (awsiot.isConnected()) {
        awsiot.loop();
    }
    
    delay(200);
 80801e4:	20c8      	movs	r0, #200	; 0xc8
 80801e6:	f00f bc49 	b.w	808fa7c <delay>
 80801ea:	bf00      	nop
 80801ec:	200009a8 	.word	0x200009a8

080801f0 <_Z15startupFunctionv>:

//use for thread setup
//use for connection setup
void startupFunction() {
    
    cellular_credentials_set("wireless.twilio.com", "", "", NULL);
 80801f0:	4a0d      	ldr	r2, [pc, #52]	; (8080228 <_Z15startupFunctionv+0x38>)
    delay(200);
}

//use for thread setup
//use for connection setup
void startupFunction() {
 80801f2:	b510      	push	{r4, lr}
    
    cellular_credentials_set("wireless.twilio.com", "", "", NULL);
 80801f4:	4611      	mov	r1, r2
 80801f6:	2300      	movs	r3, #0
 80801f8:	480c      	ldr	r0, [pc, #48]	; (808022c <_Z15startupFunctionv+0x3c>)
 80801fa:	f00f f803 	bl	808f204 <cellular_credentials_set>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80801fe:	2300      	movs	r3, #0
 8080200:	461a      	mov	r2, r3
 8080202:	4619      	mov	r1, r3
 8080204:	4618      	mov	r0, r3
 8080206:	f00f f89d 	bl	808f344 <network_on>
    Cellular.connect();
    

    // Create the mutex
	os_mutex_create(&mutex);

 808020a:	4c09      	ldr	r4, [pc, #36]	; (8080230 <_Z15startupFunctionv+0x40>)
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808020c:	2300      	movs	r3, #0
 808020e:	4618      	mov	r0, r3
 8080210:	461a      	mov	r2, r3
 8080212:	4619      	mov	r1, r3
 8080214:	f00f f886 	bl	808f324 <network_connect>
 8080218:	4620      	mov	r0, r4
 808021a:	f00e ff6b 	bl	808f0f4 <os_mutex_create>
	// Initially lock it, so when the thread tries to lock it, it will block.
	os_mutex_lock(mutex);
}
 808021e:	6820      	ldr	r0, [r4, #0]

 8080220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Create the mutex
	os_mutex_create(&mutex);

	// Initially lock it, so when the thread tries to lock it, it will block.
	os_mutex_lock(mutex);
}
 8080224:	f00e bf6e 	b.w	808f104 <os_mutex_lock>
 8080228:	08090e20 	.word	0x08090e20
 808022c:	08090765 	.word	0x08090765
 8080230:	2000049c 	.word	0x2000049c

08080234 <_GLOBAL__sub_I_SystemMode>:

 8080234:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080236:	f00e ff35 	bl	808f0a4 <HAL_Pin_Map>
 * MQTT client(server, 1883, callback);
 * want to use domain name,
 * MQTT client("www.sample.com", 1883, callback);
 **/

AWS awsiot("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 808023a:	4c0f      	ldr	r4, [pc, #60]	; (8080278 <_GLOBAL__sub_I_SystemMode+0x44>)
#include "cellular_hal.h"
#include <MQTT-TLS.h>
#include <CarT.h>

//setup threading
SYSTEM_THREAD(ENABLED);
 808023c:	2100      	movs	r1, #0
 808023e:	2001      	movs	r0, #1
 8080240:	f00f f858 	bl	808f2f4 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080244:	2003      	movs	r0, #3
 8080246:	f00f f845 	bl	808f2d4 <set_system_mode>

void startupFunction();
void threadFunction(void *param);

//setup mutex
STARTUP(startupFunction());
 808024a:	f7ff ffd1 	bl	80801f0 <_Z15startupFunctionv>
 * MQTT client(server, 1883, callback);
 * want to use domain name,
 * MQTT client("www.sample.com", 1883, callback);
 **/

AWS awsiot("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 808024e:	4b0b      	ldr	r3, [pc, #44]	; (808027c <_GLOBAL__sub_I_SystemMode+0x48>)
 8080250:	f242 22b3 	movw	r2, #8883	; 0x22b3
 8080254:	490a      	ldr	r1, [pc, #40]	; (8080280 <_GLOBAL__sub_I_SystemMode+0x4c>)
 8080256:	4620      	mov	r0, r4
 8080258:	f00e fe5a 	bl	808ef10 <_ZN3AWSC1EPctPFvS0_PhjE>
 808025c:	4a09      	ldr	r2, [pc, #36]	; (8080284 <_GLOBAL__sub_I_SystemMode+0x50>)
 808025e:	490a      	ldr	r1, [pc, #40]	; (8080288 <_GLOBAL__sub_I_SystemMode+0x54>)
 8080260:	4620      	mov	r0, r4
 8080262:	f00f fec3 	bl	808ffec <__aeabi_atexit>
#define CRYPT_H

#include <MQTT-TLS.h>


class Crypt {
 8080266:	4b09      	ldr	r3, [pc, #36]	; (808028c <_GLOBAL__sub_I_SystemMode+0x58>)
 8080268:	4a09      	ldr	r2, [pc, #36]	; (8080290 <_GLOBAL__sub_I_SystemMode+0x5c>)
 808026a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808026e:	f00e ff31 	bl	808f0d4 <HAL_Timer_Get_Milli_Seconds>
        RGB.color(255, 255, 255);
    delay(1000);
}

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
 8080272:	4b08      	ldr	r3, [pc, #32]	; (8080294 <_GLOBAL__sub_I_SystemMode+0x60>)
 8080274:	6018      	str	r0, [r3, #0]
 8080276:	bd10      	pop	{r4, pc}
 8080278:	200009a8 	.word	0x200009a8
 808027c:	080800bd 	.word	0x080800bd
 8080280:	08090779 	.word	0x08090779
 8080284:	20000498 	.word	0x20000498
 8080288:	08080145 	.word	0x08080145
 808028c:	200004c0 	.word	0x200004c0
 8080290:	080907a4 	.word	0x080907a4
 8080294:	20001438 	.word	0x20001438

08080298 <_GLOBAL__sub_I__ZN4NmeaC2E6Stringh9NmeaCache>:
 8080298:	f00e bf04 	b.w	808f0a4 <HAL_Pin_Map>

0808029c <_GLOBAL__sub_I__ZN9NmeaCacheC2Ev>:
 808029c:	f00e bf02 	b.w	808f0a4 <HAL_Pin_Map>

080802a0 <_GLOBAL__sub_I__ZN5PgtopC2E9NmeaCache>:
 80802a0:	f00e bf00 	b.w	808f0a4 <HAL_Pin_Map>

080802a4 <_GLOBAL__sub_I__ZN3GpsC2EP11USARTSerial>:
 80802a4:	f00e befe 	b.w	808f0a4 <HAL_Pin_Map>

080802a8 <_GLOBAL__sub_I__ZN7istream3getEv>:
 80802a8:	f00e befc 	b.w	808f0a4 <HAL_Pin_Map>

080802ac <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 80802ac:	f00e befa 	b.w	808f0a4 <HAL_Pin_Map>

080802b0 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 80802b0:	f00e bef8 	b.w	808f0a4 <HAL_Pin_Map>

080802b4 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 80802b4:	f00e bef6 	b.w	808f0a4 <HAL_Pin_Map>

080802b8 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 80802b8:	f00e bef4 	b.w	808f0a4 <HAL_Pin_Map>

080802bc <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 80802bc:	f00e bef2 	b.w	808f0a4 <HAL_Pin_Map>

080802c0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 80802c0:	f00e bef0 	b.w	808f0a4 <HAL_Pin_Map>

080802c4 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 80802c4:	f00e beee 	b.w	808f0a4 <HAL_Pin_Map>

080802c8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80802c8:	b570      	push	{r4, r5, r6, lr}
 80802ca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80802cc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80802ce:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80802d0:	b149      	cbz	r1, 80802e6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80802d2:	f010 f9d4 	bl	809067e <strlen>
 80802d6:	682b      	ldr	r3, [r5, #0]
 80802d8:	4602      	mov	r2, r0
 80802da:	4621      	mov	r1, r4
 80802dc:	4628      	mov	r0, r5
    }
 80802de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80802e2:	68db      	ldr	r3, [r3, #12]
 80802e4:	4718      	bx	r3
    }
 80802e6:	bd70      	pop	{r4, r5, r6, pc}

080802e8 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 80802e8:	f00e bedc 	b.w	808f0a4 <HAL_Pin_Map>

080802ec <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 80802ec:	f00e beda 	b.w	808f0a4 <HAL_Pin_Map>

080802f0 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 80802f0:	f00e bed8 	b.w	808f0a4 <HAL_Pin_Map>

080802f4 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 80802f4:	f00e bed6 	b.w	808f0a4 <HAL_Pin_Map>

080802f8 <_ZN4MQTT9debug_TlsEPviPKciS2_>:
  return 0;
}

void MQTT::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
 80802f8:	4770      	bx	lr
	...

080802fc <_ZN4MQTT8send_TlsEPvPKhj>:

bool MQTT::available() {
    return tcpClient.available();
}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
 80802fc:	b570      	push	{r4, r5, r6, lr}
 80802fe:	4605      	mov	r5, r0
 8080300:	460c      	mov	r4, r1
 8080302:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
 8080304:	f00f fa64 	bl	808f7d0 <_ZN9TCPClient9connectedEv>
 8080308:	b158      	cbz	r0, 8080322 <_ZN4MQTT8send_TlsEPvPKhj+0x26>
    return -1;
  }

  int ret = sock->tcpClient.write(buf, len);
 808030a:	4621      	mov	r1, r4
 808030c:	4632      	mov	r2, r6
 808030e:	4628      	mov	r0, r5
 8080310:	f00f fa4c 	bl	808f7ac <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
 8080314:	4604      	mov	r4, r0
 8080316:	b138      	cbz	r0, 8080328 <_ZN4MQTT8send_TlsEPvPKhj+0x2c>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->tcpClient.flush();
 8080318:	4628      	mov	r0, r5
 808031a:	f00f f875 	bl	808f408 <_ZN9TCPClient5flushEv>
  return ret;
 808031e:	4620      	mov	r0, r4
 8080320:	bd70      	pop	{r4, r5, r6, pc}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
    return -1;
 8080322:	f04f 30ff 	mov.w	r0, #4294967295
 8080326:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->tcpClient.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
 8080328:	4800      	ldr	r0, [pc, #0]	; (808032c <_ZN4MQTT8send_TlsEPvPKhj+0x30>)
  }
  sock->tcpClient.flush();
  return ret;
}
 808032a:	bd70      	pop	{r4, r5, r6, pc}
 808032c:	ffff9780 	.word	0xffff9780

08080330 <_ZN4MQTT8recv_TlsEPvPhj>:

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
 8080330:	b570      	push	{r4, r5, r6, lr}
 8080332:	4604      	mov	r4, r0
 8080334:	460d      	mov	r5, r1
 8080336:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
 8080338:	f00f fa4a 	bl	808f7d0 <_ZN9TCPClient9connectedEv>
 808033c:	b158      	cbz	r0, 8080356 <_ZN4MQTT8recv_TlsEPvPhj+0x26>
    return -1;
  }

  if (sock->tcpClient.available() == 0) {
 808033e:	4620      	mov	r0, r4
 8080340:	f00f f92a 	bl	808f598 <_ZN9TCPClient9availableEv>
 8080344:	b128      	cbz	r0, 8080352 <_ZN4MQTT8recv_TlsEPvPhj+0x22>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->tcpClient.read(buf, len);
 8080346:	4632      	mov	r2, r6
 8080348:	4629      	mov	r1, r5
 808034a:	4620      	mov	r0, r4
 808034c:	f00f f8f3 	bl	808f536 <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
 8080350:	b918      	cbnz	r0, 808035a <_ZN4MQTT8recv_TlsEPvPhj+0x2a>
    return MBEDTLS_ERR_SSL_WANT_READ;
 8080352:	4802      	ldr	r0, [pc, #8]	; (808035c <_ZN4MQTT8recv_TlsEPvPhj+0x2c>)
 8080354:	bd70      	pop	{r4, r5, r6, pc}
}

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
    return -1;
 8080356:	f04f 30ff 	mov.w	r0, #4294967295
  int ret = sock->tcpClient.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
 808035a:	bd70      	pop	{r4, r5, r6, pc}
 808035c:	ffff9700 	.word	0xffff9700

08080360 <_ZN4MQTT7rng_TlsEPvPhj>:

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
 8080360:	b570      	push	{r4, r5, r6, lr}
 8080362:	460e      	mov	r6, r1
 8080364:	4615      	mov	r5, r2
 8080366:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
 8080368:	1b2b      	subs	r3, r5, r4
 808036a:	4433      	add	r3, r6
 808036c:	2b03      	cmp	r3, #3
 808036e:	d904      	bls.n	808037a <_ZN4MQTT7rng_TlsEPvPhj+0x1a>
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
 8080370:	f00e fea8 	bl	808f0c4 <HAL_RNG_GetRandomNumber>
 8080374:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
 8080378:	e7f6      	b.n	8080368 <_ZN4MQTT7rng_TlsEPvPhj+0x8>
 808037a:	08ac      	lsrs	r4, r5, #2
 808037c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8080380:	4435      	add	r5, r6
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 8080382:	42ac      	cmp	r4, r5
 8080384:	d004      	beq.n	8080390 <_ZN4MQTT7rng_TlsEPvPhj+0x30>
      *data++ = HAL_RNG_GetRandomNumber();
 8080386:	f00e fe9d 	bl	808f0c4 <HAL_RNG_GetRandomNumber>
 808038a:	f804 0b01 	strb.w	r0, [r4], #1
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 808038e:	e7f8      	b.n	8080382 <_ZN4MQTT7rng_TlsEPvPhj+0x22>
      *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
 8080390:	2000      	movs	r0, #0
 8080392:	bd70      	pop	{r4, r5, r6, pc}

08080394 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:
    return false;
  }
  return true;
}

int MQTT::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
 8080394:	b500      	push	{lr}
 8080396:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
 808039a:	460b      	mov	r3, r1
 808039c:	4a05      	ldr	r2, [pc, #20]	; (80803b4 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
 808039e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80803a2:	4668      	mov	r0, sp
 80803a4:	f006 faca 	bl	808693c <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
 80803a8:	2000      	movs	r0, #0
 80803aa:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 80803ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80803b2:	bf00      	nop
 80803b4:	08090e20 	.word	0x08090e20

080803b8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
	TCPClient();
	TCPClient(sock_handle_t sock);
        virtual ~TCPClient() {};
 80803b8:	b538      	push	{r3, r4, r5, lr}
 80803ba:	4b0b      	ldr	r3, [pc, #44]	; (80803e8 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80803bc:	6984      	ldr	r4, [r0, #24]
 80803be:	4605      	mov	r5, r0
 80803c0:	6003      	str	r3, [r0, #0]
 80803c2:	b17c      	cbz	r4, 80803e4 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80803c4:	6863      	ldr	r3, [r4, #4]
 80803c6:	3b01      	subs	r3, #1
 80803c8:	6063      	str	r3, [r4, #4]
 80803ca:	b95b      	cbnz	r3, 80803e4 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80803cc:	6823      	ldr	r3, [r4, #0]
 80803ce:	4620      	mov	r0, r4
 80803d0:	689b      	ldr	r3, [r3, #8]
 80803d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80803d4:	68a3      	ldr	r3, [r4, #8]
 80803d6:	3b01      	subs	r3, #1
 80803d8:	60a3      	str	r3, [r4, #8]
 80803da:	b91b      	cbnz	r3, 80803e4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80803dc:	6823      	ldr	r3, [r4, #0]
 80803de:	4620      	mov	r0, r4
 80803e0:	68db      	ldr	r3, [r3, #12]
 80803e2:	4798      	blx	r3
 80803e4:	4628      	mov	r0, r5
 80803e6:	bd38      	pop	{r3, r4, r5, pc}
 80803e8:	08093cc0 	.word	0x08093cc0

080803ec <_ZN9TCPClientD0Ev>:
 80803ec:	b510      	push	{r4, lr}
 80803ee:	4604      	mov	r4, r0
 80803f0:	f7ff ffe2 	bl	80803b8 <_ZN9TCPClientD1Ev>
 80803f4:	4620      	mov	r0, r4
 80803f6:	f7ff fe54 	bl	80800a2 <_ZdlPv>
 80803fa:	4620      	mov	r0, r4
 80803fc:	bd10      	pop	{r4, pc}
	...

08080400 <_ZN4MQTTC1Ev>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT() {
 8080400:	b538      	push	{r3, r4, r5, lr}
 8080402:	4604      	mov	r4, r0
 8080404:	2500      	movs	r5, #0
 8080406:	f00f f955 	bl	808f6b4 <_ZN9TCPClientC1Ev>
 808040a:	61e5      	str	r5, [r4, #28]
 808040c:	4905      	ldr	r1, [pc, #20]	; (8080424 <_ZN4MQTTC1Ev+0x24>)
 808040e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8080412:	f00f fa54 	bl	808f8be <_ZN6StringC1EPK19__FlashStringHelper>
 8080416:	2301      	movs	r3, #1
 8080418:	64a5      	str	r5, [r4, #72]	; 0x48
 808041a:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->ip = NULL;
}
 808041e:	4620      	mov	r0, r4
 8080420:	bd38      	pop	{r3, r4, r5, pc}
 8080422:	bf00      	nop
 8080424:	08090e20 	.word	0x08090e20

08080428 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:
        disconnect();
        free(buffer);
    }
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 8080428:	b538      	push	{r3, r4, r5, lr}
 808042a:	4604      	mov	r4, r0
 808042c:	461d      	mov	r5, r3
    this->callback = callback;
 808042e:	9b05      	ldr	r3, [sp, #20]
 8080430:	6303      	str	r3, [r0, #48]	; 0x30
    this->tls = false;
 8080432:	2000      	movs	r0, #0
 8080434:	f884 0681 	strb.w	r0, [r4, #1665]	; 0x681
    this->tlsConnected = false;
 8080438:	f884 0680 	strb.w	r0, [r4, #1664]	; 0x680
    this->qoscallback = NULL;
 808043c:	6360      	str	r0, [r4, #52]	; 0x34
    if (ip != NULL)
 808043e:	b102      	cbz	r2, 8080442 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1a>
        this->ip = ip;
 8080440:	64a2      	str	r2, [r4, #72]	; 0x48
    if (domain != NULL)
 8080442:	b119      	cbz	r1, 808044c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x24>
        this->domain = domain;
 8080444:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8080448:	f00f fa5b 	bl	808f902 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 808044c:	9b04      	ldr	r3, [sp, #16]

    this->maxpacketsize = maxpacketsize;
    if (buffer != NULL)
 808044e:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 8080450:	6523      	str	r3, [r4, #80]	; 0x50

    this->maxpacketsize = maxpacketsize;
 8080452:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 8080454:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    this->maxpacketsize = maxpacketsize;
 8080458:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 808045c:	b108      	cbz	r0, 8080462 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x3a>
      delete[] buffer;
 808045e:	f7ff fe22 	bl	80800a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 8080462:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 8080466:	f7ff fe1a 	bl	808009e <_Znaj>
 808046a:	61e0      	str	r0, [r4, #28]
 808046c:	bd38      	pop	{r3, r4, r5, pc}
	...

08080470 <_ZN4MQTTC1EPctPFvS0_PhjE>:

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 8080470:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8080474:	4604      	mov	r4, r0
 8080476:	4617      	mov	r7, r2
 8080478:	4698      	mov	r8, r3
 808047a:	460e      	mov	r6, r1
 808047c:	2500      	movs	r5, #0
 808047e:	f00f f919 	bl	808f6b4 <_ZN9TCPClientC1Ev>
 8080482:	61e5      	str	r5, [r4, #28]
 8080484:	490c      	ldr	r1, [pc, #48]	; (80804b8 <_ZN4MQTTC1EPctPFvS0_PhjE+0x48>)
 8080486:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808048a:	f00f fa18 	bl	808f8be <_ZN6StringC1EPK19__FlashStringHelper>
 808048e:	2301      	movs	r3, #1
 8080490:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 8080494:	23ff      	movs	r3, #255	; 0xff
 8080496:	9302      	str	r3, [sp, #8]
 8080498:	230f      	movs	r3, #15
 808049a:	9300      	str	r3, [sp, #0]
 808049c:	4620      	mov	r0, r4

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 808049e:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80804a0:	f8cd 8004 	str.w	r8, [sp, #4]
 80804a4:	463b      	mov	r3, r7
 80804a6:	462a      	mov	r2, r5
 80804a8:	4631      	mov	r1, r6
 80804aa:	f7ff ffbd 	bl	8080428 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80804ae:	4620      	mov	r0, r4
 80804b0:	b004      	add	sp, #16
 80804b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80804b6:	bf00      	nop
 80804b8:	08090e20 	.word	0x08090e20

080804bc <_ZN4MQTT11writeStringEPKcPht>:
    }
    tcpClient.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80804bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80804be:	460d      	mov	r5, r1
 80804c0:	3302      	adds	r3, #2
 80804c2:	b29b      	uxth	r3, r3
 80804c4:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80804c6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80804ca:	b2a4      	uxth	r4, r4
 80804cc:	b13e      	cbz	r6, 80804de <_ZN4MQTT11writeStringEPKcPht+0x22>
 80804ce:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80804d2:	429f      	cmp	r7, r3
 80804d4:	d903      	bls.n	80804de <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80804d6:	1c5c      	adds	r4, r3, #1
 80804d8:	54d6      	strb	r6, [r2, r3]
 80804da:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80804dc:	e7f2      	b.n	80804c4 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80804de:	1b19      	subs	r1, r3, r4
 80804e0:	440a      	add	r2, r1
 80804e2:	1221      	asrs	r1, r4, #8
 80804e4:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80804e8:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80804ec:	4618      	mov	r0, r3
 80804ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080804f0 <_ZN4MQTT8netWriteEPhi>:


uint16_t MQTT::netWrite(unsigned char *buff, int length) {
 80804f0:	b510      	push	{r4, lr}
    debug_tls("netWrite!!\n");
    if (tls == false) {
 80804f2:	f890 4681 	ldrb.w	r4, [r0, #1665]	; 0x681
 80804f6:	b914      	cbnz	r4, 80804fe <_ZN4MQTT8netWriteEPhi+0xe>
        return tcpClient.write(buff, length);
 80804f8:	f00f f958 	bl	808f7ac <_ZN9TCPClient5writeEPKhj>
 80804fc:	e003      	b.n	8080506 <_ZN4MQTT8netWriteEPhi+0x16>
    } else {
        return mbedtls_ssl_write(&ssl, buff, length);
 80804fe:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8080502:	f008 ff83 	bl	808940c <mbedtls_ssl_write>
 8080506:	b280      	uxth	r0, r0
    }
}
 8080508:	bd10      	pop	{r4, pc}

0808050a <_ZN4MQTT5writeEhPht>:
    }
    return false;
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 808050a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808050c:	4607      	mov	r7, r0
 808050e:	468e      	mov	lr, r1
 8080510:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 8080512:	461d      	mov	r5, r3
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 8080514:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 8080516:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 808051a:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 808051c:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 808051e:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 8080520:	bf18      	it	ne
 8080522:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 8080526:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 8080528:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 808052c:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 808052e:	2d00      	cmp	r5, #0
 8080530:	d1f1      	bne.n	8080516 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 8080532:	f1c4 0304 	rsb	r3, r4, #4
 8080536:	18d1      	adds	r1, r2, r3
 8080538:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 808053c:	42a5      	cmp	r5, r4
 808053e:	da06      	bge.n	808054e <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 8080540:	a801      	add	r0, sp, #4
 8080542:	1b2b      	subs	r3, r5, r4
 8080544:	5c28      	ldrb	r0, [r5, r0]
 8080546:	4413      	add	r3, r2
 8080548:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 808054a:	3501      	adds	r5, #1
 808054c:	e7f6      	b.n	808053c <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);
 808054e:	1c72      	adds	r2, r6, #1
 8080550:	4422      	add	r2, r4
 8080552:	4638      	mov	r0, r7
 8080554:	f7ff ffcc 	bl	80804f0 <_ZN4MQTT8netWriteEPhi>
 8080558:	4605      	mov	r5, r0
 808055a:	f00e fdbb 	bl	808f0d4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 808055e:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 8080560:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 8080562:	19a0      	adds	r0, r4, r6
}
 8080564:	1b43      	subs	r3, r0, r5
 8080566:	4258      	negs	r0, r3
 8080568:	4158      	adcs	r0, r3
 808056a:	b003      	add	sp, #12
 808056c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808056e <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 808056e:	b538      	push	{r3, r4, r5, lr}
 8080570:	4604      	mov	r4, r0
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
 8080572:	69c3      	ldr	r3, [r0, #28]
 8080574:	22e0      	movs	r2, #224	; 0xe0
 8080576:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 8080578:	69c3      	ldr	r3, [r0, #28]
 808057a:	2500      	movs	r5, #0
 808057c:	705d      	strb	r5, [r3, #1]
    netWrite(buffer,2);
 808057e:	2202      	movs	r2, #2
 8080580:	69c1      	ldr	r1, [r0, #28]
 8080582:	f7ff ffb5 	bl	80804f0 <_ZN4MQTT8netWriteEPhi>

    if (tls) {
 8080586:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 808058a:	b1bb      	cbz	r3, 80805bc <_ZN4MQTT10disconnectEv+0x4e>
        debug_tls("tls close\n");
        tlsConnected = false;
        tls = false;
        mbedtls_x509_crt_free(&cacert);
 808058c:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
    buffer[1] = 0;
    netWrite(buffer,2);

    if (tls) {
        debug_tls("tls close\n");
        tlsConnected = false;
 8080590:	f884 5680 	strb.w	r5, [r4, #1664]	; 0x680
        tls = false;
 8080594:	f884 5681 	strb.w	r5, [r4, #1665]	; 0x681
        mbedtls_x509_crt_free(&cacert);
 8080598:	f007 f907 	bl	80877aa <mbedtls_x509_crt_free>
        mbedtls_x509_crt_free(&clicert);
 808059c:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 80805a0:	f007 f903 	bl	80877aa <mbedtls_x509_crt_free>
        mbedtls_pk_free(&pkey);
 80805a4:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 80805a8:	f00a fecd 	bl	808b346 <mbedtls_pk_free>
        mbedtls_ssl_config_free (&conf);
 80805ac:	f504 7061 	add.w	r0, r4, #900	; 0x384
 80805b0:	f009 f91c 	bl	80897ec <mbedtls_ssl_config_free>
        mbedtls_ssl_free (&ssl);
 80805b4:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 80805b8:	f009 f884 	bl	80896c4 <mbedtls_ssl_free>
    }
    tcpClient.stop();
 80805bc:	4620      	mov	r0, r4
 80805be:	f00f f829 	bl	808f614 <_ZN9TCPClient4stopEv>
 80805c2:	f00e fd87 	bl	808f0d4 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80805c6:	6260      	str	r0, [r4, #36]	; 0x24
 80805c8:	62a0      	str	r0, [r4, #40]	; 0x28
 80805ca:	bd38      	pop	{r3, r4, r5, pc}

080805cc <_ZN4MQTT8readByteEv>:
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80805cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (tls == false) {
 80805ce:	f890 3681 	ldrb.w	r3, [r0, #1665]	; 0x681
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80805d2:	4604      	mov	r4, r0
    if (tls == false) {
 80805d4:	b94b      	cbnz	r3, 80805ea <_ZN4MQTT8readByteEv+0x1e>
        while(!tcpClient.available()) {}
 80805d6:	4620      	mov	r0, r4
 80805d8:	f00e ffde 	bl	808f598 <_ZN9TCPClient9availableEv>
 80805dc:	2800      	cmp	r0, #0
 80805de:	d0fa      	beq.n	80805d6 <_ZN4MQTT8readByteEv+0xa>
        return tcpClient.read();
 80805e0:	4620      	mov	r0, r4
 80805e2:	f00e ff80 	bl	808f4e6 <_ZN9TCPClient4readEv>
 80805e6:	b2c0      	uxtb	r0, r0
 80805e8:	e017      	b.n	808061a <_ZN4MQTT8readByteEv+0x4e>
    } else {
        uint8_t val = 0;
        uint8_t buff;

        if (tlsConnected) {
 80805ea:	f890 3680 	ldrb.w	r3, [r0, #1664]	; 0x680
 80805ee:	b19b      	cbz	r3, 8080618 <_ZN4MQTT8readByteEv+0x4c>
            while (1) {
                int ret = mbedtls_ssl_read(&ssl, &buff, 1);
 80805f0:	f500 7534 	add.w	r5, r0, #720	; 0x2d0
 80805f4:	2201      	movs	r2, #1
 80805f6:	f10d 0107 	add.w	r1, sp, #7
 80805fa:	4628      	mov	r0, r5
 80805fc:	f008 fe80 	bl	8089300 <mbedtls_ssl_read>
                if (ret < 0) {
 8080600:	2800      	cmp	r0, #0
 8080602:	da06      	bge.n	8080612 <_ZN4MQTT8readByteEv+0x46>
                      switch (ret) {
 8080604:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 8080608:	d0f4      	beq.n	80805f4 <_ZN4MQTT8readByteEv+0x28>
                        case MBEDTLS_ERR_SSL_WANT_READ:
                          break;
                      case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                      case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
                      default:
                          disconnect();
 808060a:	4620      	mov	r0, r4
 808060c:	f7ff ffaf 	bl	808056e <_ZN4MQTT10disconnectEv>
 8080610:	e002      	b.n	8080618 <_ZN4MQTT8readByteEv+0x4c>
                          return -1;
                    }
                } else {
                    return buff;
 8080612:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8080616:	e000      	b.n	808061a <_ZN4MQTT8readByteEv+0x4e>
                }
            }
        } else {
            return -1;
 8080618:	20ff      	movs	r0, #255	; 0xff
        }
    }
}
 808061a:	b003      	add	sp, #12
 808061c:	bd30      	pop	{r4, r5, pc}

0808061e <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 808061e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080622:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 8080624:	69c4      	ldr	r4, [r0, #28]
            return -1;
        }
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 8080626:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 8080628:	f7ff ffd0 	bl	80805cc <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 808062c:	f04f 0801 	mov.w	r8, #1
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 8080630:	4646      	mov	r6, r8
 8080632:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 8080634:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 8080636:	2700      	movs	r7, #0
 8080638:	f893 9000 	ldrb.w	r9, [r3]
 808063c:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 8080640:	4628      	mov	r0, r5
 8080642:	f7ff ffc3 	bl	80805cc <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 8080646:	69eb      	ldr	r3, [r5, #28]
 8080648:	1c74      	adds	r4, r6, #1
 808064a:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 808064c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8080650:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 8080654:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 8080656:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 8080658:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 808065a:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 808065e:	d501      	bpl.n	8080664 <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 8080660:	4626      	mov	r6, r4
 8080662:	e7ed      	b.n	8080640 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 8080664:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 8080666:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 808066a:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 808066e:	d113      	bne.n	8080698 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 8080670:	4628      	mov	r0, r5
 8080672:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8080676:	f7ff ffa9 	bl	80805cc <_ZN4MQTT8readByteEv>
 808067a:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 808067e:	4628      	mov	r0, r5
 8080680:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8080684:	f7ff ffa2 	bl	80805cc <_ZN4MQTT8readByteEv>
 8080688:	1cf4      	adds	r4, r6, #3
 808068a:	3602      	adds	r6, #2
 808068c:	b2b6      	uxth	r6, r6
 808068e:	b2a4      	uxth	r4, r4
 8080690:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 8080694:	2302      	movs	r3, #2
 8080696:	e000      	b.n	808069a <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 8080698:	2300      	movs	r3, #0
 808069a:	1b1b      	subs	r3, r3, r4
 808069c:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 808069e:	19a3      	adds	r3, r4, r6
 80806a0:	b29b      	uxth	r3, r3
 80806a2:	429f      	cmp	r7, r3
 80806a4:	d90b      	bls.n	80806be <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80806a6:	4628      	mov	r0, r5
 80806a8:	f7ff ff90 	bl	80805cc <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80806ac:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80806b0:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80806b2:	bf84      	itt	hi
 80806b4:	69eb      	ldrhi	r3, [r5, #28]
 80806b6:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80806b8:	3401      	adds	r4, #1
 80806ba:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80806bc:	e7ef      	b.n	808069e <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80806be:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80806c2:	42a0      	cmp	r0, r4
 80806c4:	bf2c      	ite	cs
 80806c6:	4620      	movcs	r0, r4
 80806c8:	2000      	movcc	r0, #0
 80806ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080806ce <_ZN4MQTT11isConnectedEv>:
        return mbedtls_ssl_write(&ssl, buff, length);
    }
}


bool MQTT::isConnected() {
 80806ce:	b510      	push	{r4, lr}
 80806d0:	4604      	mov	r4, r0
    bool rc = (int)tcpClient.connected();
 80806d2:	f00f f87d 	bl	808f7d0 <_ZN9TCPClient9connectedEv>
    if (tls)
 80806d6:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 80806da:	b91b      	cbnz	r3, 80806e4 <_ZN4MQTT11isConnectedEv+0x16>
    }
}


bool MQTT::isConnected() {
    bool rc = (int)tcpClient.connected();
 80806dc:	3000      	adds	r0, #0
 80806de:	bf18      	it	ne
 80806e0:	2001      	movne	r0, #1
 80806e2:	bd10      	pop	{r4, pc}
    if (tls)
        return tlsConnected;
 80806e4:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
    return rc;
}
 80806e8:	bd10      	pop	{r4, pc}

080806ea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80806ea:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80806ee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80806f0:	4604      	mov	r4, r0
 80806f2:	468b      	mov	fp, r1
 80806f4:	4691      	mov	r9, r2
 80806f6:	469a      	mov	sl, r3
 80806f8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80806fc:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8080700:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 8080704:	f7ff ffe3 	bl	80806ce <_ZN4MQTT11isConnectedEv>
 8080708:	2800      	cmp	r0, #0
 808070a:	d048      	beq.n	808079e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, sizeof(buffer));
 808070c:	69e3      	ldr	r3, [r4, #28]
 808070e:	2200      	movs	r2, #0
 8080710:	601a      	str	r2, [r3, #0]

        length = writeString(topic, buffer, length);
 8080712:	69e2      	ldr	r2, [r4, #28]
 8080714:	2305      	movs	r3, #5
 8080716:	4659      	mov	r1, fp
 8080718:	4620      	mov	r0, r4
 808071a:	f7ff fecf 	bl	80804bc <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 808071e:	1e6b      	subs	r3, r5, #1
 8080720:	2b01      	cmp	r3, #1
 8080722:	d812      	bhi.n	808074a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
            nextMsgId += 1;
 8080724:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 8080726:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, sizeof(buffer));

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 8080728:	3301      	adds	r3, #1
 808072a:	b29b      	uxth	r3, r3
 808072c:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 808072e:	121b      	asrs	r3, r3, #8
 8080730:	5413      	strb	r3, [r2, r0]
 8080732:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 8080734:	69e3      	ldr	r3, [r4, #28]
 8080736:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 8080738:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 808073a:	3002      	adds	r0, #2
 808073c:	b280      	uxth	r0, r0
 808073e:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 8080740:	b11e      	cbz	r6, 808074a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
                *messageid = nextMsgId++;
 8080742:	8c23      	ldrh	r3, [r4, #32]
 8080744:	1c5a      	adds	r2, r3, #1
 8080746:	8422      	strh	r2, [r4, #32]
 8080748:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 808074a:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 808074c:	b291      	uxth	r1, r2
 808074e:	1883      	adds	r3, r0, r2
 8080750:	458a      	cmp	sl, r1
 8080752:	b29b      	uxth	r3, r3
 8080754:	d909      	bls.n	808076a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x80>
 8080756:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 808075a:	3201      	adds	r2, #1
 808075c:	429e      	cmp	r6, r3
 808075e:	d904      	bls.n	808076a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x80>
            buffer[length++] = payload[i];
 8080760:	f819 6001 	ldrb.w	r6, [r9, r1]
 8080764:	69e1      	ldr	r1, [r4, #28]
 8080766:	54ce      	strb	r6, [r1, r3]
 8080768:	e7f0      	b.n	808074c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x62>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 808076a:	f1b8 0f00 	cmp.w	r8, #0
 808076e:	bf0c      	ite	eq
 8080770:	2130      	moveq	r1, #48	; 0x30
 8080772:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 8080774:	b10f      	cbz	r7, 808077a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
            header |= DUP_FLAG_ON_MASK;
 8080776:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 808077a:	2d02      	cmp	r5, #2
 808077c:	d102      	bne.n	8080784 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x9a>
            header |= MQTTQOS2_HEADER_MASK;
 808077e:	f041 0104 	orr.w	r1, r1, #4
 8080782:	e003      	b.n	808078c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
        else if (qos == QOS1)
 8080784:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 8080786:	bf08      	it	eq
 8080788:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 808078c:	4620      	mov	r0, r4
 808078e:	3b05      	subs	r3, #5
 8080790:	69e2      	ldr	r2, [r4, #28]
 8080792:	b29b      	uxth	r3, r3
    }
    return false;
}
 8080794:	b001      	add	sp, #4
 8080796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 808079a:	f7ff beb6 	b.w	808050a <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 808079e:	b001      	add	sp, #4
 80807a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080807a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80807a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80807a6:	9c08      	ldr	r4, [sp, #32]
 80807a8:	9403      	str	r4, [sp, #12]
 80807aa:	2400      	movs	r4, #0
 80807ac:	9402      	str	r4, [sp, #8]
 80807ae:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80807b2:	9401      	str	r4, [sp, #4]
 80807b4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80807b8:	9400      	str	r4, [sp, #0]
 80807ba:	f7ff ff96 	bl	80806ea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80807be:	b004      	add	sp, #16
 80807c0:	bd10      	pop	{r4, pc}

080807c2 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80807c2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80807c4:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80807c6:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80807c8:	460e      	mov	r6, r1
 80807ca:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80807cc:	f00f ff57 	bl	809067e <strlen>
 80807d0:	2300      	movs	r3, #0
 80807d2:	9302      	str	r3, [sp, #8]
 80807d4:	9301      	str	r3, [sp, #4]
 80807d6:	9300      	str	r3, [sp, #0]
 80807d8:	4622      	mov	r2, r4
 80807da:	4603      	mov	r3, r0
 80807dc:	4631      	mov	r1, r6
 80807de:	4628      	mov	r0, r5
 80807e0:	f7ff ffe0 	bl	80807a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80807e4:	b004      	add	sp, #16
 80807e6:	bd70      	pop	{r4, r5, r6, pc}

080807e8 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
    if (qos < 0 || qos > 1)
 80807e8:	2a01      	cmp	r2, #1

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80807ea:	b570      	push	{r4, r5, r6, lr}
 80807ec:	4604      	mov	r4, r0
 80807ee:	460e      	mov	r6, r1
 80807f0:	4615      	mov	r5, r2
    if (qos < 0 || qos > 1)
 80807f2:	d820      	bhi.n	8080836 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4e>
        return false;

    if (isConnected()) {
 80807f4:	f7ff ff6b 	bl	80806ce <_ZN4MQTT11isConnectedEv>
 80807f8:	b1e8      	cbz	r0, 8080836 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4e>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80807fa:	8c23      	ldrh	r3, [r4, #32]
 80807fc:	3301      	adds	r3, #1
 80807fe:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 8080800:	b903      	cbnz	r3, 8080804 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x1c>
            nextMsgId = 1;
 8080802:	2301      	movs	r3, #1
 8080804:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 8080806:	8c23      	ldrh	r3, [r4, #32]
 8080808:	69e2      	ldr	r2, [r4, #28]
 808080a:	121b      	asrs	r3, r3, #8
 808080c:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 808080e:	69e3      	ldr	r3, [r4, #28]
 8080810:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 8080812:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 8080814:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 8080816:	69e2      	ldr	r2, [r4, #28]
 8080818:	2307      	movs	r3, #7
 808081a:	4620      	mov	r0, r4
 808081c:	f7ff fe4e 	bl	80804bc <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 8080820:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 8080822:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 8080824:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 8080826:	1f03      	subs	r3, r0, #4
 8080828:	69e2      	ldr	r2, [r4, #28]
 808082a:	4620      	mov	r0, r4
    }
    return false;
}
 808082c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 8080830:	b29b      	uxth	r3, r3
 8080832:	f7ff be6a 	b.w	808050a <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 8080836:	2000      	movs	r0, #0
 8080838:	bd70      	pop	{r4, r5, r6, pc}

0808083a <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
 808083a:	2200      	movs	r2, #0
 808083c:	f7ff bfd4 	b.w	80807e8 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

08080840 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 8080840:	b510      	push	{r4, lr}
 8080842:	4604      	mov	r4, r0
    if (isConnected()) {
 8080844:	f7ff ff43 	bl	80806ce <_ZN4MQTT11isConnectedEv>
 8080848:	b128      	cbz	r0, 8080856 <_ZN4MQTTD1Ev+0x16>
        disconnect();
 808084a:	4620      	mov	r0, r4
 808084c:	f7ff fe8f 	bl	808056e <_ZN4MQTT10disconnectEv>
        free(buffer);
 8080850:	69e0      	ldr	r0, [r4, #28]
 8080852:	f00e fd87 	bl	808f364 <free>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 8080856:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808085a:	f00e ffe9 	bl	808f830 <_ZN6StringD1Ev>
 808085e:	4620      	mov	r0, r4
 8080860:	f7ff fdaa 	bl	80803b8 <_ZN9TCPClientD1Ev>
    if (isConnected()) {
        disconnect();
        free(buffer);
    }
}
 8080864:	4620      	mov	r0, r4
 8080866:	bd10      	pop	{r4, pc}

08080868 <_ZN4MQTT9availableEv>:
    if (tls)
        return tlsConnected;
    return rc;
}

bool MQTT::available() {
 8080868:	b508      	push	{r3, lr}
    return tcpClient.available();
 808086a:	f00e fe95 	bl	808f598 <_ZN9TCPClient9availableEv>
}
 808086e:	3000      	adds	r0, #0
 8080870:	bf18      	it	ne
 8080872:	2001      	movne	r0, #1
 8080874:	bd08      	pop	{r3, pc}

08080876 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 8080876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808087a:	b083      	sub	sp, #12
 808087c:	af00      	add	r7, sp, #0
 808087e:	4604      	mov	r4, r0
    if (isConnected()) {
 8080880:	f7ff ff25 	bl	80806ce <_ZN4MQTT11isConnectedEv>
 8080884:	4606      	mov	r6, r0
 8080886:	2800      	cmp	r0, #0
 8080888:	f000 80be 	beq.w	8080a08 <_ZN4MQTT4loopEv+0x192>
 808088c:	f00e fc22 	bl	808f0d4 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 8080890:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8080892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080896:	4353      	muls	r3, r2
 8080898:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808089a:	4605      	mov	r5, r0
 808089c:	1a82      	subs	r2, r0, r2
 808089e:	429a      	cmp	r2, r3
 80808a0:	d803      	bhi.n	80808aa <_ZN4MQTT4loopEv+0x34>
 80808a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80808a4:	1a82      	subs	r2, r0, r2
 80808a6:	4293      	cmp	r3, r2
 80808a8:	d216      	bcs.n	80808d8 <_ZN4MQTT4loopEv+0x62>
            if (pingOutstanding) {
 80808aa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80808ae:	b123      	cbz	r3, 80808ba <_ZN4MQTT4loopEv+0x44>
                disconnect();
 80808b0:	4620      	mov	r0, r4
 80808b2:	f7ff fe5c 	bl	808056e <_ZN4MQTT10disconnectEv>
                return false;
 80808b6:	2600      	movs	r6, #0
 80808b8:	e0a6      	b.n	8080a08 <_ZN4MQTT4loopEv+0x192>
            } else {
                buffer[0] = MQTTPINGREQ;
 80808ba:	69e2      	ldr	r2, [r4, #28]
 80808bc:	21c0      	movs	r1, #192	; 0xc0
 80808be:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80808c0:	69e2      	ldr	r2, [r4, #28]
                netWrite(buffer,2);
 80808c2:	4620      	mov	r0, r4
            if (pingOutstanding) {
                disconnect();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80808c4:	7053      	strb	r3, [r2, #1]
                netWrite(buffer,2);
 80808c6:	69e1      	ldr	r1, [r4, #28]
 80808c8:	2202      	movs	r2, #2
 80808ca:	f7ff fe11 	bl	80804f0 <_ZN4MQTT8netWriteEPhi>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80808ce:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                netWrite(buffer,2);
                lastOutActivity = t;
 80808d0:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80808d2:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80808d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (available()) {
 80808d8:	4620      	mov	r0, r4
 80808da:	f7ff ffc5 	bl	8080868 <_ZN4MQTT9availableEv>
 80808de:	4681      	mov	r9, r0
 80808e0:	2800      	cmp	r0, #0
 80808e2:	f000 8091 	beq.w	8080a08 <_ZN4MQTT4loopEv+0x192>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80808e6:	1df9      	adds	r1, r7, #7
 80808e8:	4620      	mov	r0, r4
 80808ea:	f7ff fe98 	bl	808061e <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80808ee:	4602      	mov	r2, r0
 80808f0:	2800      	cmp	r0, #0
 80808f2:	f000 8088 	beq.w	8080a06 <_ZN4MQTT4loopEv+0x190>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80808f6:	69e1      	ldr	r1, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80808f8:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80808fa:	7808      	ldrb	r0, [r1, #0]
 80808fc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 8080900:	2b30      	cmp	r3, #48	; 0x30
 8080902:	d158      	bne.n	80809b6 <_ZN4MQTT4loopEv+0x140>
                    if (callback) {
 8080904:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 8080908:	f1bb 0f00 	cmp.w	fp, #0
 808090c:	d07b      	beq.n	8080a06 <_ZN4MQTT4loopEv+0x190>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
 808090e:	f897 e007 	ldrb.w	lr, [r7, #7]
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 8080912:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
 8080914:	eb01 000e 	add.w	r0, r1, lr
 8080918:	7846      	ldrb	r6, [r0, #1]
 808091a:	7883      	ldrb	r3, [r0, #2]
 808091c:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8080920:	b29b      	uxth	r3, r3
                        char topic[tl+1];
 8080922:	f103 0008 	add.w	r0, r3, #8
 8080926:	f020 0007 	bic.w	r0, r0, #7
 808092a:	ebad 0d00 	sub.w	sp, sp, r0
 808092e:	4668      	mov	r0, sp
 8080930:	2600      	movs	r6, #0
                        for (uint16_t i=0;i<tl;i++) {
 8080932:	fa1f fc86 	uxth.w	ip, r6
 8080936:	4563      	cmp	r3, ip
 8080938:	d908      	bls.n	808094c <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 808093a:	eb0e 0c06 	add.w	ip, lr, r6
 808093e:	448c      	add	ip, r1
 8080940:	f89c c003 	ldrb.w	ip, [ip, #3]
 8080944:	f800 c006 	strb.w	ip, [r0, r6]
 8080948:	3601      	adds	r6, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 808094a:	e7f2      	b.n	8080932 <_ZN4MQTT4loopEv+0xbc>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 808094c:	2600      	movs	r6, #0
 808094e:	54c6      	strb	r6, [r0, r3]
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
 8080950:	f891 8000 	ldrb.w	r8, [r1]
 8080954:	f10e 0603 	add.w	r6, lr, #3
 8080958:	f008 0806 	and.w	r8, r8, #6
 808095c:	f1b8 0f02 	cmp.w	r8, #2
 8080960:	ebce 0202 	rsb	r2, lr, r2
 8080964:	d120      	bne.n	80809a8 <_ZN4MQTT4loopEv+0x132>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 8080966:	441e      	add	r6, r3
 8080968:	f811 c006 	ldrb.w	ip, [r1, r6]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 808096c:	f10e 0e05 	add.w	lr, lr, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 8080970:	440e      	add	r6, r1
 8080972:	7876      	ldrb	r6, [r6, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 8080974:	1ad2      	subs	r2, r2, r3
 8080976:	4473      	add	r3, lr
 8080978:	4419      	add	r1, r3
 808097a:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 808097c:	eb06 260c 	add.w	r6, r6, ip, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 8080980:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK;
 8080982:	69e3      	ldr	r3, [r4, #28]
 8080984:	2240      	movs	r2, #64	; 0x40
 8080986:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 8080988:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 808098a:	b2b6      	uxth	r6, r6
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
 808098c:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 8080990:	69e3      	ldr	r3, [r4, #28]
 8080992:	1232      	asrs	r2, r6, #8
 8080994:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 8080996:	69e3      	ldr	r3, [r4, #28]
                            netWrite(buffer,4);
 8080998:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 808099a:	70de      	strb	r6, [r3, #3]
                            netWrite(buffer,4);
 808099c:	69e1      	ldr	r1, [r4, #28]
 808099e:	4620      	mov	r0, r4
 80809a0:	f7ff fda6 	bl	80804f0 <_ZN4MQTT8netWriteEPhi>
                            lastOutActivity = t;
 80809a4:	6265      	str	r5, [r4, #36]	; 0x24
 80809a6:	e004      	b.n	80809b2 <_ZN4MQTT4loopEv+0x13c>
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80809a8:	3a03      	subs	r2, #3
 80809aa:	441e      	add	r6, r3
 80809ac:	1ad2      	subs	r2, r2, r3
 80809ae:	4431      	add	r1, r6
 80809b0:	47d8      	blx	fp
 80809b2:	46d5      	mov	sp, sl
 80809b4:	e027      	b.n	8080a06 <_ZN4MQTT4loopEv+0x190>
                        }
                    }
                } else if (type == MQTTPUBACK || type == MQTTPUBREC) {
 80809b6:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 80809ba:	2d40      	cmp	r5, #64	; 0x40
 80809bc:	d10d      	bne.n	80809da <_ZN4MQTT4loopEv+0x164>
                    if (qoscallback) {
 80809be:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80809c0:	b30c      	cbz	r4, 8080a06 <_ZN4MQTT4loopEv+0x190>
                        // msgId only present for QOS==0
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80809c2:	2a04      	cmp	r2, #4
 80809c4:	d11f      	bne.n	8080a06 <_ZN4MQTT4loopEv+0x190>
 80809c6:	f010 0f06 	tst.w	r0, #6
 80809ca:	d11c      	bne.n	8080a06 <_ZN4MQTT4loopEv+0x190>
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
 80809cc:	7888      	ldrb	r0, [r1, #2]
 80809ce:	78cb      	ldrb	r3, [r1, #3]
 80809d0:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80809d4:	b280      	uxth	r0, r0
 80809d6:	47a0      	blx	r4
 80809d8:	e015      	b.n	8080a06 <_ZN4MQTT4loopEv+0x190>
                        }
                    }
                } else if (type == MQTTPUBCOMP) {
 80809da:	2b70      	cmp	r3, #112	; 0x70
 80809dc:	d013      	beq.n	8080a06 <_ZN4MQTT4loopEv+0x190>
                    // TODO:if something...
                } else if (type == MQTTSUBACK) {
 80809de:	2b90      	cmp	r3, #144	; 0x90
 80809e0:	d011      	beq.n	8080a06 <_ZN4MQTT4loopEv+0x190>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80809e2:	2bc0      	cmp	r3, #192	; 0xc0
 80809e4:	d10a      	bne.n	80809fc <_ZN4MQTT4loopEv+0x186>
                    buffer[0] = MQTTPINGRESP;
 80809e6:	23d0      	movs	r3, #208	; 0xd0
 80809e8:	700b      	strb	r3, [r1, #0]
                    buffer[1] = 0;
 80809ea:	69e3      	ldr	r3, [r4, #28]
 80809ec:	2200      	movs	r2, #0
 80809ee:	705a      	strb	r2, [r3, #1]
                    netWrite(buffer,2);
 80809f0:	69e1      	ldr	r1, [r4, #28]
 80809f2:	2202      	movs	r2, #2
 80809f4:	4620      	mov	r0, r4
 80809f6:	f7ff fd7b 	bl	80804f0 <_ZN4MQTT8netWriteEPhi>
 80809fa:	e004      	b.n	8080a06 <_ZN4MQTT4loopEv+0x190>
                } else if (type == MQTTPINGRESP) {
 80809fc:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
 80809fe:	bf04      	itt	eq
 8080a00:	2300      	moveq	r3, #0
 8080a02:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
                }
            }
        }
        return true;
 8080a06:	464e      	mov	r6, r9
    }
    return false;
}
 8080a08:	4630      	mov	r0, r6
 8080a0a:	370c      	adds	r7, #12
 8080a0c:	46bd      	mov	sp, r7
 8080a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08080a14 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>:
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8080a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080a18:	4605      	mov	r5, r0
 8080a1a:	4693      	mov	fp, r2
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8080a1c:	f500 7461 	add.w	r4, r0, #900	; 0x384
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8080a20:	4699      	mov	r9, r3
    int ret;
    tls = true;
 8080a22:	2301      	movs	r3, #1
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8080a24:	b085      	sub	sp, #20
    int ret;
    tls = true;
 8080a26:	f880 3681 	strb.w	r3, [r0, #1665]	; 0x681

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
 8080a2a:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8080a2e:	4620      	mov	r0, r4
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8080a30:	9103      	str	r1, [sp, #12]
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 8080a32:	f505 7a7a 	add.w	sl, r5, #1000	; 0x3e8
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8080a36:	f008 fe93 	bl	8089760 <mbedtls_ssl_config_init>
    mbedtls_ssl_init(&ssl);
 8080a3a:	4630      	mov	r0, r6
 8080a3c:	f008 fbb8 	bl	80891b0 <mbedtls_ssl_init>
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 8080a40:	f205 571c 	addw	r7, r5, #1308	; 0x51c
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 8080a44:	4650      	mov	r0, sl
 8080a46:	f006 feab 	bl	80877a0 <mbedtls_x509_crt_init>
    mbedtls_x509_crt_init(&clicert);
    mbedtls_pk_init(&pkey);
 8080a4a:	f505 68ca 	add.w	r8, r5, #1616	; 0x650
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 8080a4e:	4638      	mov	r0, r7
 8080a50:	f006 fea6 	bl	80877a0 <mbedtls_x509_crt_init>
    mbedtls_pk_init(&pkey);
 8080a54:	4640      	mov	r0, r8
 8080a56:	f00a fc71 	bl	808b33c <mbedtls_pk_init>

    mbedtls_ssl_conf_dbg(&conf, &MQTT::debug_Tls, nullptr);
 8080a5a:	2200      	movs	r2, #0
 8080a5c:	4935      	ldr	r1, [pc, #212]	; (8080b34 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x120>)
 8080a5e:	4620      	mov	r0, r4
 8080a60:	f008 fbb7 	bl	80891d2 <mbedtls_ssl_conf_dbg>
    #if defined(MBEDTLS_DEBUG_C)
      mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
    #endif

    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
 8080a64:	465a      	mov	r2, fp
 8080a66:	9903      	ldr	r1, [sp, #12]
 8080a68:	4650      	mov	r0, sl
 8080a6a:	f007 fa37 	bl	8087edc <mbedtls_x509_crt_parse>
 8080a6e:	2800      	cmp	r0, #0
 8080a70:	db5d      	blt.n	8080b2e <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 8080a72:	f1b9 0f00 	cmp.w	r9, #0
 8080a76:	d102      	bne.n	8080a7e <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x6a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 8080a78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8080a7a:	b95b      	cbnz	r3, 8080a94 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x80>
 8080a7c:	e00c      	b.n	8080a98 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 8080a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8080a80:	2b00      	cmp	r3, #0
 8080a82:	d0f9      	beq.n	8080a78 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
      if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
 8080a84:	461a      	mov	r2, r3
 8080a86:	4649      	mov	r1, r9
 8080a88:	4638      	mov	r0, r7
 8080a8a:	f007 fa27 	bl	8087edc <mbedtls_x509_crt_parse>
 8080a8e:	2800      	cmp	r0, #0
 8080a90:	daf2      	bge.n	8080a78 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
 8080a92:	e04c      	b.n	8080b2e <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 8080a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8080a96:	b94b      	cbnz	r3, 8080aac <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x98>
        debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
        return ret;
      }
    }

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
 8080a98:	2300      	movs	r3, #0
 8080a9a:	461a      	mov	r2, r3
 8080a9c:	4619      	mov	r1, r3
 8080a9e:	4620      	mov	r0, r4
 8080aa0:	f008 fe62 	bl	8089768 <mbedtls_ssl_config_defaults>
 8080aa4:	4683      	mov	fp, r0
 8080aa6:	2800      	cmp	r0, #0
 8080aa8:	d141      	bne.n	8080b2e <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
 8080aaa:	e009      	b.n	8080ac0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xac>
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
      if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
 8080aac:	2300      	movs	r3, #0
 8080aae:	9300      	str	r3, [sp, #0]
 8080ab0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8080ab2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8080ab4:	4640      	mov	r0, r8
 8080ab6:	f005 f871 	bl	8085b9c <mbedtls_pk_parse_key>
 8080aba:	2800      	cmp	r0, #0
 8080abc:	d0ec      	beq.n	8080a98 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
 8080abe:	e036      	b.n	8080b2e <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                   MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
      return ret;
    }
    mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
 8080ac0:	2203      	movs	r2, #3
 8080ac2:	4611      	mov	r1, r2
 8080ac4:	4620      	mov	r0, r4
 8080ac6:	f008 fbd1 	bl	808926c <mbedtls_ssl_conf_min_version>
    mbedtls_ssl_conf_verify(&conf, &MQTT::veryfyCert_Tls, NULL);
 8080aca:	465a      	mov	r2, fp
 8080acc:	491a      	ldr	r1, [pc, #104]	; (8080b38 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x124>)
 8080ace:	4620      	mov	r0, r4
 8080ad0:	f008 fb79 	bl	80891c6 <mbedtls_ssl_conf_verify>

    // if server certificates is not valid, connection will success. check certificates on verify() function.
    mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 8080ad4:	2101      	movs	r1, #1
 8080ad6:	4620      	mov	r0, r4
 8080ad8:	f008 fb6e 	bl	80891b8 <mbedtls_ssl_conf_authmode>
    mbedtls_ssl_conf_rng(&conf, &MQTT::rng_Tls, nullptr);
 8080adc:	465a      	mov	r2, fp
 8080ade:	4917      	ldr	r1, [pc, #92]	; (8080b3c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x128>)
 8080ae0:	4620      	mov	r0, r4
 8080ae2:	f008 fb73 	bl	80891cc <mbedtls_ssl_conf_rng>
    mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
 8080ae6:	465a      	mov	r2, fp
 8080ae8:	4651      	mov	r1, sl
 8080aea:	4620      	mov	r0, r4
 8080aec:	f008 fb85 	bl	80891fa <mbedtls_ssl_conf_ca_chain>

    if (clientCertPem != NULL && clientKeyPem != NULL) {
 8080af0:	f1b9 0f00 	cmp.w	r9, #0
 8080af4:	d006      	beq.n	8080b04 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
 8080af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8080af8:	b123      	cbz	r3, 8080b04 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
      mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
 8080afa:	4642      	mov	r2, r8
 8080afc:	4639      	mov	r1, r7
 8080afe:	4620      	mov	r0, r4
 8080b00:	f008 fb78 	bl	80891f4 <mbedtls_ssl_conf_own_cert>
    }

    if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
 8080b04:	4621      	mov	r1, r4
 8080b06:	4630      	mov	r0, r6
 8080b08:	f008 fda2 	bl	8089650 <mbedtls_ssl_setup>
 8080b0c:	4604      	mov	r4, r0
 8080b0e:	b968      	cbnz	r0, 8080b2c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x118>
      return ret;
    }

    mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
 8080b10:	4b0b      	ldr	r3, [pc, #44]	; (8080b40 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x12c>)
 8080b12:	4a0c      	ldr	r2, [pc, #48]	; (8080b44 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x130>)
 8080b14:	f505 61cb 	add.w	r1, r5, #1624	; 0x658
 8080b18:	4630      	mov	r0, r6
 8080b1a:	f008 fb63 	bl	80891e4 <mbedtls_ssl_set_timer_cb>
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
 8080b1e:	9400      	str	r4, [sp, #0]
 8080b20:	4b09      	ldr	r3, [pc, #36]	; (8080b48 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x134>)
 8080b22:	4a0a      	ldr	r2, [pc, #40]	; (8080b4c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x138>)
 8080b24:	4629      	mov	r1, r5
 8080b26:	4630      	mov	r0, r6
 8080b28:	f008 fb56 	bl	80891d8 <mbedtls_ssl_set_bio>
 8080b2c:	4620      	mov	r0, r4
    return 0;
}
 8080b2e:	b005      	add	sp, #20
 8080b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080b34:	080802f9 	.word	0x080802f9
 8080b38:	08080395 	.word	0x08080395
 8080b3c:	08080361 	.word	0x08080361
 8080b40:	08084de7 	.word	0x08084de7
 8080b44:	08084dd9 	.word	0x08084dd9
 8080b48:	08080331 	.word	0x08080331
 8080b4c:	080802fd 	.word	0x080802fd

08080b50 <_ZN4MQTT6verifyEv>:
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
 8080b50:	b500      	push	{lr}
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 8080b52:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
 8080b56:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 8080b5a:	f008 fb8c 	bl	8089276 <mbedtls_ssl_get_verify_result>
 8080b5e:	4603      	mov	r3, r0
 8080b60:	b138      	cbz	r0, 8080b72 <_ZN4MQTT6verifyEv+0x22>
    char vrfy_buf[512];
    mbedtls_x509_crt_verify_info( vrfy_buf, sizeof( vrfy_buf ), "  ! ", ret );
 8080b62:	4a06      	ldr	r2, [pc, #24]	; (8080b7c <_ZN4MQTT6verifyEv+0x2c>)
 8080b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8080b68:	4668      	mov	r0, sp
 8080b6a:	f006 fa03 	bl	8086f74 <mbedtls_x509_crt_verify_info>
    debug_tls("%s\n", vrfy_buf);
    return false;
 8080b6e:	2000      	movs	r0, #0
 8080b70:	e000      	b.n	8080b74 <_ZN4MQTT6verifyEv+0x24>
  }
  return true;
 8080b72:	2001      	movs	r0, #1
}
 8080b74:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 8080b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8080b7c:	080907be 	.word	0x080907be

08080b80 <_ZN4MQTT12handShakeTlsEv>:
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
    return 0;
}


int MQTT::handShakeTls() {
 8080b80:	b570      	push	{r4, r5, r6, lr}
 8080b82:	4604      	mov	r4, r0
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 8080b84:	f500 7634 	add.w	r6, r0, #720	; 0x2d0

int MQTT::handShakeTls() {
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
 8080b88:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8080b8c:	2b10      	cmp	r3, #16
 8080b8e:	d005      	beq.n	8080b9c <_ZN4MQTT12handShakeTlsEv+0x1c>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 8080b90:	4630      	mov	r0, r6
 8080b92:	f00d fc63 	bl	808e45c <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
 8080b96:	4605      	mov	r5, r0
 8080b98:	2800      	cmp	r0, #0
 8080b9a:	d0f5      	beq.n	8080b88 <_ZN4MQTT12handShakeTlsEv+0x8>
              break;
      }
  } while (ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
 8080b9c:	f515 4fd2 	cmn.w	r5, #26880	; 0x6900
 8080ba0:	d0f2      	beq.n	8080b88 <_ZN4MQTT12handShakeTlsEv+0x8>
 8080ba2:	f515 4fd1 	cmn.w	r5, #26752	; 0x6880
 8080ba6:	d0ef      	beq.n	8080b88 <_ZN4MQTT12handShakeTlsEv+0x8>

  // clean ca cert/crt/pkey for memory limitation
  mbedtls_x509_crt_free(&cacert);
 8080ba8:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8080bac:	f006 fdfd 	bl	80877aa <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
 8080bb0:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 8080bb4:	f006 fdf9 	bl	80877aa <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
 8080bb8:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8080bbc:	f00a fbc3 	bl	808b346 <mbedtls_pk_free>

  debug_tls("%s, ret = %d\n", "handshake done", ret);
  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
 8080bc0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8080bc4:	2b10      	cmp	r3, #16
 8080bc6:	d109      	bne.n	8080bdc <_ZN4MQTT12handShakeTlsEv+0x5c>
      if (enableVerify && !verify())
 8080bc8:	f894 3682 	ldrb.w	r3, [r4, #1666]	; 0x682
 8080bcc:	b143      	cbz	r3, 8080be0 <_ZN4MQTT12handShakeTlsEv+0x60>
 8080bce:	4620      	mov	r0, r4
 8080bd0:	f7ff ffbe 	bl	8080b50 <_ZN4MQTT6verifyEv>
 8080bd4:	b920      	cbnz	r0, 8080be0 <_ZN4MQTT12handShakeTlsEv+0x60>
        return -1;
 8080bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8080bda:	bd70      	pop	{r4, r5, r6, pc}
 8080bdc:	4628      	mov	r0, r5
 8080bde:	bd70      	pop	{r4, r5, r6, pc}
      tlsConnected = true;
 8080be0:	2301      	movs	r3, #1
 8080be2:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
      debug_tls("tls connected\n");
      return 0;
 8080be6:	2000      	movs	r0, #0
  }
  return ret;
}
 8080be8:	bd70      	pop	{r4, r5, r6, pc}
	...

08080bec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage,true,MQTT_V311);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 8080bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8080bf0:	b08b      	sub	sp, #44	; 0x2c
 8080bf2:	4604      	mov	r4, r0
 8080bf4:	4689      	mov	r9, r1
 8080bf6:	4617      	mov	r7, r2
 8080bf8:	461e      	mov	r6, r3
 8080bfa:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    if (!isConnected()) {
 8080bfe:	f7ff fd66 	bl	80806ce <_ZN4MQTT11isConnectedEv>
 8080c02:	4605      	mov	r5, r0
 8080c04:	2800      	cmp	r0, #0
 8080c06:	f040 80e7 	bne.w	8080dd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ec>
        int result = 0;
        if (ip == NULL) {
 8080c0a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8080c0c:	2900      	cmp	r1, #0
 8080c0e:	d138      	bne.n	8080c82 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
            result = tcpClient.connect(this->domain.c_str(), this->port);
 8080c10:	4603      	mov	r3, r0
 8080c12:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8080c16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8080c18:	4620      	mov	r0, r4
 8080c1a:	f00e fc0d 	bl	808f438 <_ZN9TCPClient7connectEPKctm>
            if (tls) {
 8080c1e:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8080c22:	2b00      	cmp	r3, #0
 8080c24:	d050      	beq.n	8080cc8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                mbedtls_ssl_set_hostname(&ssl, domain);
 8080c26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8080c28:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8080c2c:	f008 fae8 	bl	8089200 <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
 8080c30:	4620      	mov	r0, r4
 8080c32:	f7ff ffa5 	bl	8080b80 <_ZN4MQTT12handShakeTlsEv>
 8080c36:	2800      	cmp	r0, #0
 8080c38:	f040 80ca 	bne.w	8080dd0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
                result = (0 == this->handShakeTls() ? 1 : 0);
            }
        }

        if (result) {
            nextMsgId = 1;
 8080c3c:	2301      	movs	r3, #1
 8080c3e:	8423      	strh	r3, [r4, #32]

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 8080c40:	4b68      	ldr	r3, [pc, #416]	; (8080de4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1f8>)
 8080c42:	aa06      	add	r2, sp, #24
 8080c44:	6859      	ldr	r1, [r3, #4]
 8080c46:	6818      	ldr	r0, [r3, #0]
 8080c48:	c203      	stmia	r2!, {r0, r1}
 8080c4a:	7a19      	ldrb	r1, [r3, #8]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 8080c4c:	f853 0f09 	ldr.w	r0, [r3, #9]!
        if (result) {
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 8080c50:	7011      	strb	r1, [r2, #0]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 8080c52:	889a      	ldrh	r2, [r3, #4]
 8080c54:	799b      	ldrb	r3, [r3, #6]
 8080c56:	f8ad 2014 	strh.w	r2, [sp, #20]
 8080c5a:	f88d 3016 	strb.w	r3, [sp, #22]

            if (version == MQTT_V311) {
 8080c5e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 8080c62:	9004      	str	r0, [sp, #16]

            if (version == MQTT_V311) {
 8080c64:	2b04      	cmp	r3, #4
 8080c66:	69e2      	ldr	r2, [r4, #28]
 8080c68:	d131      	bne.n	8080cce <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 8080c6a:	9804      	ldr	r0, [sp, #16]
 8080c6c:	1d53      	adds	r3, r2, #5
 8080c6e:	f8c2 0005 	str.w	r0, [r2, #5]
 8080c72:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8080c76:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8080c7a:	8099      	strh	r1, [r3, #4]
 8080c7c:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 8080c7e:	230c      	movs	r3, #12
 8080c80:	e02e      	b.n	8080ce0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xf4>
                mbedtls_ssl_set_hostname(&ssl, domain);
                result = (0 == this->handShakeTls() ? 1 : 0);
            }

        } else {
            result = tcpClient.connect(this->ip, this->port);
 8080c82:	a806      	add	r0, sp, #24
 8080c84:	f00f f81e 	bl	808fcc4 <_ZN9IPAddressC1EPKh>
 8080c88:	462b      	mov	r3, r5
 8080c8a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8080c8e:	a906      	add	r1, sp, #24
 8080c90:	4620      	mov	r0, r4
 8080c92:	f00e fd19 	bl	808f6c8 <_ZN9TCPClient7connectE9IPAddresstm>
            if (tls) {
 8080c96:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8080c9a:	b1ab      	cbz	r3, 8080cc8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                char buffername[16];
                sprintf(buffername, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
 8080c9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8080c9e:	78c8      	ldrb	r0, [r1, #3]
 8080ca0:	784b      	ldrb	r3, [r1, #1]
 8080ca2:	780a      	ldrb	r2, [r1, #0]
 8080ca4:	9001      	str	r0, [sp, #4]
 8080ca6:	7889      	ldrb	r1, [r1, #2]
 8080ca8:	a806      	add	r0, sp, #24
 8080caa:	9100      	str	r1, [sp, #0]
 8080cac:	494e      	ldr	r1, [pc, #312]	; (8080de8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1fc>)
 8080cae:	f00e fb69 	bl	808f384 <sprintf>
                mbedtls_ssl_set_hostname(&ssl, buffername);
 8080cb2:	a906      	add	r1, sp, #24
 8080cb4:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8080cb8:	f008 faa2 	bl	8089200 <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
 8080cbc:	4620      	mov	r0, r4
 8080cbe:	f7ff ff5f 	bl	8080b80 <_ZN4MQTT12handShakeTlsEv>
 8080cc2:	fab0 f080 	clz	r0, r0
 8080cc6:	0940      	lsrs	r0, r0, #5
            }
        }

        if (result) {
 8080cc8:	2800      	cmp	r0, #0
 8080cca:	d1b7      	bne.n	8080c3c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x50>
 8080ccc:	e080      	b.n	8080dd0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>

            if (version == MQTT_V311) {
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 8080cce:	ab06      	add	r3, sp, #24
 8080cd0:	cb03      	ldmia	r3!, {r0, r1}
 8080cd2:	f8c2 0005 	str.w	r0, [r2, #5]
 8080cd6:	f8c2 1009 	str.w	r1, [r2, #9]
 8080cda:	781b      	ldrb	r3, [r3, #0]
 8080cdc:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 8080cde:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 8080ce0:	f1b8 0f00 	cmp.w	r8, #0
 8080ce4:	d00a      	beq.n	8080cfc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x110>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 8080ce6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8080cea:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 8080cee:	0152      	lsls	r2, r2, #5
 8080cf0:	f042 0206 	orr.w	r2, r2, #6
 8080cf4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8080cf8:	b2d2      	uxtb	r2, r2
 8080cfa:	e000      	b.n	8080cfe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x112>
            } else {
                v = 0x02;
 8080cfc:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 8080cfe:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 8080d02:	b909      	cbnz	r1, 8080d08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x11c>
              v = v&0xfd;
 8080d04:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 8080d08:	b12f      	cbz	r7, 8080d16 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>
                v = v|0x80;

                if(pass != NULL) {
 8080d0a:	b916      	cbnz	r6, 8080d12 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x126>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 8080d0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8080d10:	e001      	b.n	8080d16 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 8080d12:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 8080d16:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 8080d18:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 8080d1a:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 8080d1c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8080d1e:	69e1      	ldr	r1, [r4, #28]
 8080d20:	1212      	asrs	r2, r2, #8
 8080d22:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 8080d24:	69e1      	ldr	r1, [r4, #28]
 8080d26:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8080d28:	1c9a      	adds	r2, r3, #2
 8080d2a:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 8080d2c:	3303      	adds	r3, #3
 8080d2e:	69e2      	ldr	r2, [r4, #28]
 8080d30:	4649      	mov	r1, r9
 8080d32:	4620      	mov	r0, r4
 8080d34:	f7ff fbc2 	bl	80804bc <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 8080d38:	f1b8 0f00 	cmp.w	r8, #0
 8080d3c:	d00b      	beq.n	8080d56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x16a>
                length = writeString(willTopic, buffer, length);
 8080d3e:	4603      	mov	r3, r0
 8080d40:	69e2      	ldr	r2, [r4, #28]
 8080d42:	4641      	mov	r1, r8
 8080d44:	4620      	mov	r0, r4
 8080d46:	f7ff fbb9 	bl	80804bc <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 8080d4a:	69e2      	ldr	r2, [r4, #28]
 8080d4c:	4603      	mov	r3, r0
 8080d4e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8080d50:	4620      	mov	r0, r4
 8080d52:	f7ff fbb3 	bl	80804bc <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 8080d56:	b167      	cbz	r7, 8080d72 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                length = writeString(user,buffer,length);
 8080d58:	4603      	mov	r3, r0
 8080d5a:	69e2      	ldr	r2, [r4, #28]
 8080d5c:	4639      	mov	r1, r7
 8080d5e:	4620      	mov	r0, r4
 8080d60:	f7ff fbac 	bl	80804bc <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 8080d64:	b12e      	cbz	r6, 8080d72 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                    length = writeString(pass,buffer,length);
 8080d66:	4603      	mov	r3, r0
 8080d68:	69e2      	ldr	r2, [r4, #28]
 8080d6a:	4631      	mov	r1, r6
 8080d6c:	4620      	mov	r0, r4
 8080d6e:	f7ff fba5 	bl	80804bc <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 8080d72:	1f43      	subs	r3, r0, #5
 8080d74:	b29b      	uxth	r3, r3
 8080d76:	69e2      	ldr	r2, [r4, #28]
 8080d78:	2110      	movs	r1, #16
 8080d7a:	4620      	mov	r0, r4
 8080d7c:	f7ff fbc5 	bl	808050a <_ZN4MQTT5writeEhPht>
 8080d80:	f00e f9a8 	bl	808f0d4 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 8080d84:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 8080d88:	6260      	str	r0, [r4, #36]	; 0x24
 8080d8a:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!available()) {
 8080d8c:	4620      	mov	r0, r4
 8080d8e:	f7ff fd6b 	bl	8080868 <_ZN4MQTT9availableEv>
 8080d92:	4606      	mov	r6, r0
 8080d94:	b958      	cbnz	r0, 8080dae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c2>
 8080d96:	f00e f99d 	bl	808f0d4 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 8080d9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8080d9c:	1ac0      	subs	r0, r0, r3
 8080d9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080da0:	437b      	muls	r3, r7
 8080da2:	4298      	cmp	r0, r3
 8080da4:	d9f2      	bls.n	8080d8c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
 8080da6:	4620      	mov	r0, r4
 8080da8:	f7ff fbe1 	bl	808056e <_ZN4MQTT10disconnectEv>
 8080dac:	e00e      	b.n	8080dcc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e0>
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 8080dae:	f10d 010f 	add.w	r1, sp, #15
 8080db2:	4620      	mov	r0, r4
 8080db4:	f7ff fc33 	bl	808061e <_ZN4MQTT10readPacketEPh>

            if (len == 4 && buffer[3] == 0) {
 8080db8:	2804      	cmp	r0, #4
 8080dba:	d109      	bne.n	8080dd0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
 8080dbc:	69e3      	ldr	r3, [r4, #28]
 8080dbe:	78df      	ldrb	r7, [r3, #3]
 8080dc0:	b937      	cbnz	r7, 8080dd0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
 8080dc2:	f00e f987 	bl	808f0d4 <HAL_Timer_Get_Milli_Seconds>
                lastInActivity = millis();
                pingOutstanding = false;
 8080dc6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4 && buffer[3] == 0) {
                lastInActivity = millis();
 8080dca:	62a0      	str	r0, [r4, #40]	; 0x28
            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
                    return false;
 8080dcc:	4635      	mov	r5, r6
 8080dce:	e004      	b.n	8080dda <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
                pingOutstanding = false;
                debug_tls("MQTT connected.\n");
                return true;
            }
        }
        disconnect();
 8080dd0:	4620      	mov	r0, r4
 8080dd2:	f7ff fbcc 	bl	808056e <_ZN4MQTT10disconnectEv>
 8080dd6:	e000      	b.n	8080dda <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
    }
    return false;
 8080dd8:	2500      	movs	r5, #0
}
 8080dda:	4628      	mov	r0, r5
 8080ddc:	b00b      	add	sp, #44	; 0x2c
 8080dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080de2:	bf00      	nop
 8080de4:	080907ae 	.word	0x080907ae
 8080de8:	080907c3 	.word	0x080907c3

08080dec <_ZN4MQTT7connectEPKc>:

void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}

bool MQTT::connect(const char *id) {
 8080dec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id,NULL,NULL,0,QOS0,0,0,true,MQTT_V311);
 8080dee:	2304      	movs	r3, #4
 8080df0:	9305      	str	r3, [sp, #20]
 8080df2:	2301      	movs	r3, #1
 8080df4:	9304      	str	r3, [sp, #16]
 8080df6:	2300      	movs	r3, #0
 8080df8:	9303      	str	r3, [sp, #12]
 8080dfa:	9302      	str	r3, [sp, #8]
 8080dfc:	9301      	str	r3, [sp, #4]
 8080dfe:	9300      	str	r3, [sp, #0]
 8080e00:	461a      	mov	r2, r3
 8080e02:	f7ff fef3 	bl	8080bec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 8080e06:	b007      	add	sp, #28
 8080e08:	f85d fb04 	ldr.w	pc, [sp], #4

08080e0c <_GLOBAL__sub_I__ZN4MQTTC2Ev>:
 8080e0c:	f00e b94a 	b.w	808f0a4 <HAL_Pin_Map>

08080e10 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8080e10:	226c      	movs	r2, #108	; 0x6c
 8080e12:	2100      	movs	r1, #0
 8080e14:	f00f bc13 	b.w	809063e <memset>

08080e18 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 8080e18:	b138      	cbz	r0, 8080e2a <mbedtls_sha256_free+0x12>
 8080e1a:	f100 026c 	add.w	r2, r0, #108	; 0x6c

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8080e1e:	2300      	movs	r3, #0
 8080e20:	4290      	cmp	r0, r2
 8080e22:	d002      	beq.n	8080e2a <mbedtls_sha256_free+0x12>
 8080e24:	7003      	strb	r3, [r0, #0]
 8080e26:	3001      	adds	r0, #1
 8080e28:	e7fa      	b.n	8080e20 <mbedtls_sha256_free+0x8>
 8080e2a:	4770      	bx	lr

08080e2c <mbedtls_sha256_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8080e2c:	b508      	push	{r3, lr}
    *dst = *src;
 8080e2e:	226c      	movs	r2, #108	; 0x6c
 8080e30:	f00f fbdf 	bl	80905f2 <memcpy>
 8080e34:	bd08      	pop	{r3, pc}
	...

08080e38 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 8080e38:	2300      	movs	r3, #0
 8080e3a:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 8080e3c:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 8080e3e:	b9a1      	cbnz	r1, 8080e6a <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8080e40:	4b18      	ldr	r3, [pc, #96]	; (8080ea4 <mbedtls_sha256_starts_ret+0x6c>)
 8080e42:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 8080e44:	4b18      	ldr	r3, [pc, #96]	; (8080ea8 <mbedtls_sha256_starts_ret+0x70>)
 8080e46:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 8080e48:	4b18      	ldr	r3, [pc, #96]	; (8080eac <mbedtls_sha256_starts_ret+0x74>)
 8080e4a:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 8080e4c:	4b18      	ldr	r3, [pc, #96]	; (8080eb0 <mbedtls_sha256_starts_ret+0x78>)
 8080e4e:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 8080e50:	4b18      	ldr	r3, [pc, #96]	; (8080eb4 <mbedtls_sha256_starts_ret+0x7c>)
 8080e52:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 8080e54:	4b18      	ldr	r3, [pc, #96]	; (8080eb8 <mbedtls_sha256_starts_ret+0x80>)
 8080e56:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 8080e58:	4b18      	ldr	r3, [pc, #96]	; (8080ebc <mbedtls_sha256_starts_ret+0x84>)
 8080e5a:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8080e5c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8080e60:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8080e64:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8080e68:	e018      	b.n	8080e9c <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8080e6a:	4b15      	ldr	r3, [pc, #84]	; (8080ec0 <mbedtls_sha256_starts_ret+0x88>)
 8080e6c:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 8080e6e:	4b15      	ldr	r3, [pc, #84]	; (8080ec4 <mbedtls_sha256_starts_ret+0x8c>)
 8080e70:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 8080e72:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 8080e76:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8080e7a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8080e7e:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 8080e80:	4b11      	ldr	r3, [pc, #68]	; (8080ec8 <mbedtls_sha256_starts_ret+0x90>)
 8080e82:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 8080e84:	4b11      	ldr	r3, [pc, #68]	; (8080ecc <mbedtls_sha256_starts_ret+0x94>)
 8080e86:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 8080e88:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 8080e8c:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 8080e90:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8080e94:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 8080e96:	4b0e      	ldr	r3, [pc, #56]	; (8080ed0 <mbedtls_sha256_starts_ret+0x98>)
 8080e98:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8080e9a:	4b0e      	ldr	r3, [pc, #56]	; (8080ed4 <mbedtls_sha256_starts_ret+0x9c>)
 8080e9c:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 8080e9e:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 8080ea0:	2000      	movs	r0, #0
 8080ea2:	4770      	bx	lr
 8080ea4:	6a09e667 	.word	0x6a09e667
 8080ea8:	bb67ae85 	.word	0xbb67ae85
 8080eac:	3c6ef372 	.word	0x3c6ef372
 8080eb0:	a54ff53a 	.word	0xa54ff53a
 8080eb4:	510e527f 	.word	0x510e527f
 8080eb8:	9b05688c 	.word	0x9b05688c
 8080ebc:	1f83d9ab 	.word	0x1f83d9ab
 8080ec0:	c1059ed8 	.word	0xc1059ed8
 8080ec4:	367cd507 	.word	0x367cd507
 8080ec8:	f70e5939 	.word	0xf70e5939
 8080ecc:	ffc00b31 	.word	0xffc00b31
 8080ed0:	64f98fa7 	.word	0x64f98fa7
 8080ed4:	befa4fa4 	.word	0xbefa4fa4

08080ed8 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8080ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080edc:	1d03      	adds	r3, r0, #4
 8080ede:	b0cf      	sub	sp, #316	; 0x13c
 8080ee0:	9305      	str	r3, [sp, #20]
 8080ee2:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 8080ee4:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 8080ee6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8080eea:	ac06      	add	r4, sp, #24
 8080eec:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
{
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 8080ef0:	3301      	adds	r3, #1
 8080ef2:	2b08      	cmp	r3, #8
 8080ef4:	d1f7      	bne.n	8080ee6 <mbedtls_internal_sha256_process+0xe>
 8080ef6:	4608      	mov	r0, r1
 8080ef8:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 8080efa:	ac0e      	add	r4, sp, #56	; 0x38
 8080efc:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
 8080f00:	78c3      	ldrb	r3, [r0, #3]
 8080f02:	3004      	adds	r0, #4
 8080f04:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8080f08:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8080f0c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8080f10:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 8080f14:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8080f18:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8080f1c:	3201      	adds	r2, #1
 8080f1e:	2a10      	cmp	r2, #16
 8080f20:	d1ec      	bne.n	8080efc <mbedtls_internal_sha256_process+0x24>
 8080f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8080f24:	4c9f      	ldr	r4, [pc, #636]	; (80811a4 <mbedtls_internal_sha256_process+0x2cc>)
 8080f26:	9300      	str	r3, [sp, #0]
 8080f28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8080f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8080f2c:	9f08      	ldr	r7, [sp, #32]
 8080f2e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8080f32:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8080f36:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8080f3a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8080f3e:	ad0f      	add	r5, sp, #60	; 0x3c
 8080f40:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8080f44:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8080f48:	ea4f 22f8 	mov.w	r2, r8, ror #11
 8080f4c:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8080f50:	ea86 0c0b 	eor.w	ip, r6, fp
 8080f54:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
 8080f58:	4401      	add	r1, r0
 8080f5a:	ea82 6278 	eor.w	r2, r2, r8, ror #25
 8080f5e:	ea0c 0c08 	and.w	ip, ip, r8
 8080f62:	ea8c 0c06 	eor.w	ip, ip, r6
 8080f66:	440a      	add	r2, r1
 8080f68:	9900      	ldr	r1, [sp, #0]
 8080f6a:	4462      	add	r2, ip
 8080f6c:	ea4f 3079 	mov.w	r0, r9, ror #13
 8080f70:	ea4e 0c09 	orr.w	ip, lr, r9
 8080f74:	440a      	add	r2, r1
 8080f76:	ea0c 0c07 	and.w	ip, ip, r7
 8080f7a:	ea0e 0109 	and.w	r1, lr, r9
 8080f7e:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
 8080f82:	ea4c 0101 	orr.w	r1, ip, r1
 8080f86:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
 8080f8a:	4408      	add	r0, r1
 8080f8c:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8080f8e:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8080f90:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8080f92:	6820      	ldr	r0, [r4, #0]
 8080f94:	ea8b 0c08 	eor.w	ip, fp, r8
 8080f98:	4401      	add	r1, r0
 8080f9a:	ea0c 0c03 	and.w	ip, ip, r3
 8080f9e:	ea4f 20f3 	mov.w	r0, r3, ror #11
 8080fa2:	ea8c 0c0b 	eor.w	ip, ip, fp
 8080fa6:	440e      	add	r6, r1
 8080fa8:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
 8080fac:	eb06 010c 	add.w	r1, r6, ip
 8080fb0:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 8080fb4:	180e      	adds	r6, r1, r0
 8080fb6:	eb06 0c07 	add.w	ip, r6, r7
 8080fba:	ea42 0009 	orr.w	r0, r2, r9
 8080fbe:	ea4f 3772 	mov.w	r7, r2, ror #13
 8080fc2:	ea02 0109 	and.w	r1, r2, r9
 8080fc6:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 8080fca:	ea00 000e 	and.w	r0, r0, lr
 8080fce:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 8080fd2:	4308      	orrs	r0, r1
 8080fd4:	4438      	add	r0, r7
 8080fd6:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8080fd8:	6869      	ldr	r1, [r5, #4]
 8080fda:	6866      	ldr	r6, [r4, #4]
 8080fdc:	ea83 0708 	eor.w	r7, r3, r8
 8080fe0:	440e      	add	r6, r1
 8080fe2:	ea07 070c 	and.w	r7, r7, ip
 8080fe6:	ea4f 21fc 	mov.w	r1, ip, ror #11
 8080fea:	ea87 0708 	eor.w	r7, r7, r8
 8080fee:	44b3      	add	fp, r6
 8080ff0:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
 8080ff4:	eb0b 0607 	add.w	r6, fp, r7
 8080ff8:	ea81 617c 	eor.w	r1, r1, ip, ror #25
 8080ffc:	eb06 0b01 	add.w	fp, r6, r1
 8081000:	ea4f 3770 	mov.w	r7, r0, ror #13
 8081004:	ea42 0100 	orr.w	r1, r2, r0
 8081008:	ea02 0600 	and.w	r6, r2, r0
 808100c:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
 8081010:	ea01 0109 	and.w	r1, r1, r9
 8081014:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
 8081018:	4331      	orrs	r1, r6
 808101a:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 808101c:	68ae      	ldr	r6, [r5, #8]
 808101e:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8081020:	4459      	add	r1, fp
 8081022:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8081024:	443e      	add	r6, r7
 8081026:	ea83 0b0c 	eor.w	fp, r3, ip
 808102a:	44b0      	add	r8, r6
 808102c:	ea0b 0b0e 	and.w	fp, fp, lr
 8081030:	ea4f 26fe 	mov.w	r6, lr, ror #11
 8081034:	ea8b 0b03 	eor.w	fp, fp, r3
 8081038:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 808103c:	44d8      	add	r8, fp
 808103e:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 8081042:	4446      	add	r6, r8
 8081044:	ea4f 3b71 	mov.w	fp, r1, ror #13
 8081048:	ea40 0801 	orr.w	r8, r0, r1
 808104c:	ea00 0701 	and.w	r7, r0, r1
 8081050:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
 8081054:	ea08 0802 	and.w	r8, r8, r2
 8081058:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 808105c:	ea48 0807 	orr.w	r8, r8, r7
 8081060:	44d8      	add	r8, fp
 8081062:	44b0      	add	r8, r6
 8081064:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8081066:	68e7      	ldr	r7, [r4, #12]
 8081068:	68ee      	ldr	r6, [r5, #12]
 808106a:	ea8c 0b0e 	eor.w	fp, ip, lr
 808106e:	4437      	add	r7, r6
 8081070:	ea0b 0b09 	and.w	fp, fp, r9
 8081074:	ea8b 0b0c 	eor.w	fp, fp, ip
 8081078:	443b      	add	r3, r7
 808107a:	eb03 070b 	add.w	r7, r3, fp
 808107e:	ea4f 23f9 	mov.w	r3, r9, ror #11
 8081082:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
 8081086:	ea83 6379 	eor.w	r3, r3, r9, ror #25
 808108a:	18fe      	adds	r6, r7, r3
 808108c:	1993      	adds	r3, r2, r6
 808108e:	9300      	str	r3, [sp, #0]
 8081090:	ea4f 3778 	mov.w	r7, r8, ror #13
 8081094:	ea41 0308 	orr.w	r3, r1, r8
 8081098:	ea01 0208 	and.w	r2, r1, r8
 808109c:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
 80810a0:	4003      	ands	r3, r0
 80810a2:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
 80810a6:	4313      	orrs	r3, r2
 80810a8:	443b      	add	r3, r7
 80810aa:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80810ac:	692a      	ldr	r2, [r5, #16]
 80810ae:	6926      	ldr	r6, [r4, #16]
 80810b0:	ea4f 3b73 	mov.w	fp, r3, ror #13
 80810b4:	4432      	add	r2, r6
 80810b6:	4494      	add	ip, r2
 80810b8:	9a00      	ldr	r2, [sp, #0]
 80810ba:	ea8e 0609 	eor.w	r6, lr, r9
 80810be:	4016      	ands	r6, r2
 80810c0:	ea4f 27f2 	mov.w	r7, r2, ror #11
 80810c4:	ea86 060e 	eor.w	r6, r6, lr
 80810c8:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80810cc:	44b4      	add	ip, r6
 80810ce:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80810d2:	eb0c 0207 	add.w	r2, ip, r7
 80810d6:	ea48 0703 	orr.w	r7, r8, r3
 80810da:	1886      	adds	r6, r0, r2
 80810dc:	400f      	ands	r7, r1
 80810de:	ea08 0003 	and.w	r0, r8, r3
 80810e2:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
 80810e6:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 80810ea:	4307      	orrs	r7, r0
 80810ec:	445f      	add	r7, fp
 80810ee:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80810f0:	6960      	ldr	r0, [r4, #20]
 80810f2:	696a      	ldr	r2, [r5, #20]
 80810f4:	3420      	adds	r4, #32
 80810f6:	4410      	add	r0, r2
 80810f8:	9a00      	ldr	r2, [sp, #0]
 80810fa:	4486      	add	lr, r0
 80810fc:	ea89 0c02 	eor.w	ip, r9, r2
 8081100:	ea0c 0c06 	and.w	ip, ip, r6
 8081104:	ea8c 0c09 	eor.w	ip, ip, r9
 8081108:	eb0e 000c 	add.w	r0, lr, ip
 808110c:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 8081110:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 8081114:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 8081118:	eb00 020e 	add.w	r2, r0, lr
 808111c:	ea4f 3077 	mov.w	r0, r7, ror #13
 8081120:	ea43 0e07 	orr.w	lr, r3, r7
 8081124:	eb01 0b02 	add.w	fp, r1, r2
 8081128:	ea0e 0e08 	and.w	lr, lr, r8
 808112c:	ea03 0107 	and.w	r1, r3, r7
 8081130:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 8081134:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 8081138:	ea4e 0e01 	orr.w	lr, lr, r1
 808113c:	4486      	add	lr, r0
 808113e:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8081140:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8081144:	69aa      	ldr	r2, [r5, #24]
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 8081146:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8081148:	4411      	add	r1, r2
 808114a:	9a00      	ldr	r2, [sp, #0]
 808114c:	4489      	add	r9, r1
 808114e:	ea82 0006 	eor.w	r0, r2, r6
 8081152:	ea00 000b 	and.w	r0, r0, fp
 8081156:	ea80 0002 	eor.w	r0, r0, r2
 808115a:	eb09 0100 	add.w	r1, r9, r0
 808115e:	ea4f 29fb 	mov.w	r9, fp, ror #11
 8081162:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
 8081166:	ea89 697b 	eor.w	r9, r9, fp, ror #25
 808116a:	eb01 0209 	add.w	r2, r1, r9
 808116e:	ea4f 307e 	mov.w	r0, lr, ror #13
 8081172:	ea47 090e 	orr.w	r9, r7, lr
 8081176:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 808117a:	ea09 0903 	and.w	r9, r9, r3
 808117e:	ea07 010e 	and.w	r1, r7, lr
 8081182:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 8081186:	ea49 0901 	orr.w	r9, r9, r1
 808118a:	4481      	add	r9, r0
 808118c:	4490      	add	r8, r2
 808118e:	4491      	add	r9, r2
 8081190:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 8081194:	f47f aed6 	bne.w	8080f44 <mbedtls_internal_sha256_process+0x6c>
 8081198:	2200      	movs	r2, #0
 808119a:	f8df a00c 	ldr.w	sl, [pc, #12]	; 80811a8 <mbedtls_internal_sha256_process+0x2d0>
 808119e:	ac0e      	add	r4, sp, #56	; 0x38
 80811a0:	9204      	str	r2, [sp, #16]
 80811a2:	e003      	b.n	80811ac <mbedtls_internal_sha256_process+0x2d4>
 80811a4:	080907d4 	.word	0x080907d4
 80811a8:	080907d0 	.word	0x080907d0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80811ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80811ae:	6860      	ldr	r0, [r4, #4]
 80811b0:	ea4f 45f2 	mov.w	r5, r2, ror #19
 80811b4:	ea85 4572 	eor.w	r5, r5, r2, ror #17
 80811b8:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
 80811bc:	9a04      	ldr	r2, [sp, #16]
 80811be:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80811c2:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80811c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80811c8:	ea4f 4cb0 	mov.w	ip, r0, ror #18
 80811cc:	440a      	add	r2, r1
 80811ce:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
 80811d2:	ea4f 21f8 	mov.w	r1, r8, ror #11
 80811d6:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 80811da:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
 80811de:	4415      	add	r5, r2
 80811e0:	eb05 020c 	add.w	r2, r5, ip
 80811e4:	ea81 6578 	eor.w	r5, r1, r8, ror #25
 80811e8:	ea86 010b 	eor.w	r1, r6, fp
 80811ec:	ea01 0108 	and.w	r1, r1, r8
 80811f0:	9203      	str	r2, [sp, #12]
 80811f2:	ea81 0206 	eor.w	r2, r1, r6
 80811f6:	18a9      	adds	r1, r5, r2
 80811f8:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 80811fc:	ea4e 0509 	orr.w	r5, lr, r9
 8081200:	440a      	add	r2, r1
 8081202:	9903      	ldr	r1, [sp, #12]
 8081204:	403d      	ands	r5, r7
 8081206:	6421      	str	r1, [r4, #64]	; 0x40
 8081208:	440a      	add	r2, r1
 808120a:	9900      	ldr	r1, [sp, #0]
 808120c:	f10a 0a20 	add.w	sl, sl, #32
 8081210:	440a      	add	r2, r1
 8081212:	18d3      	adds	r3, r2, r3
 8081214:	ea4f 3179 	mov.w	r1, r9, ror #13
 8081218:	9300      	str	r3, [sp, #0]
 808121a:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 808121e:	ea0e 0309 	and.w	r3, lr, r9
 8081222:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 8081226:	432b      	orrs	r3, r5
 8081228:	440b      	add	r3, r1
 808122a:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 808122c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808122e:	68a5      	ldr	r5, [r4, #8]
 8081230:	ea4f 41f3 	mov.w	r1, r3, ror #19
 8081234:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 8081238:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 808123c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 808123e:	3420      	adds	r4, #32
 8081240:	4403      	add	r3, r0
 8081242:	4419      	add	r1, r3
 8081244:	ea4f 43b5 	mov.w	r3, r5, ror #18
 8081248:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 808124c:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
 8081250:	eb01 030c 	add.w	r3, r1, ip
 8081254:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8081258:	9900      	ldr	r1, [sp, #0]
 808125a:	ea8b 0c08 	eor.w	ip, fp, r8
 808125e:	4430      	add	r0, r6
 8081260:	ea0c 0c01 	and.w	ip, ip, r1
 8081264:	ea8c 0c0b 	eor.w	ip, ip, fp
 8081268:	18c1      	adds	r1, r0, r3
 808126a:	448c      	add	ip, r1
 808126c:	9900      	ldr	r1, [sp, #0]
 808126e:	6263      	str	r3, [r4, #36]	; 0x24
 8081270:	ea4f 20f1 	mov.w	r0, r1, ror #11
 8081274:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 8081278:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 808127c:	eb00 010c 	add.w	r1, r0, ip
 8081280:	19c8      	adds	r0, r1, r7
 8081282:	9001      	str	r0, [sp, #4]
 8081284:	ea4f 3c72 	mov.w	ip, r2, ror #13
 8081288:	ea42 0009 	orr.w	r0, r2, r9
 808128c:	ea02 0709 	and.w	r7, r2, r9
 8081290:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 8081294:	ea00 000e 	and.w	r0, r0, lr
 8081298:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 808129c:	4338      	orrs	r0, r7
 808129e:	4460      	add	r0, ip
 80812a0:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80812a2:	9903      	ldr	r1, [sp, #12]
 80812a4:	f854 7c14 	ldr.w	r7, [r4, #-20]
 80812a8:	ea4f 46f1 	mov.w	r6, r1, ror #19
 80812ac:	ea86 4671 	eor.w	r6, r6, r1, ror #17
 80812b0:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
 80812b4:	68e1      	ldr	r1, [r4, #12]
 80812b6:	ea4f 4cb7 	mov.w	ip, r7, ror #18
 80812ba:	4429      	add	r1, r5
 80812bc:	440e      	add	r6, r1
 80812be:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
 80812c2:	9900      	ldr	r1, [sp, #0]
 80812c4:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
 80812c8:	4466      	add	r6, ip
 80812ca:	ea81 0c08 	eor.w	ip, r1, r8
 80812ce:	9901      	ldr	r1, [sp, #4]
 80812d0:	62a6      	str	r6, [r4, #40]	; 0x28
 80812d2:	ea0c 0c01 	and.w	ip, ip, r1
 80812d6:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80812da:	ea8c 0c08 	eor.w	ip, ip, r8
 80812de:	4459      	add	r1, fp
 80812e0:	198d      	adds	r5, r1, r6
 80812e2:	9901      	ldr	r1, [sp, #4]
 80812e4:	44ac      	add	ip, r5
 80812e6:	9d01      	ldr	r5, [sp, #4]
 80812e8:	ea4f 21f1 	mov.w	r1, r1, ror #11
 80812ec:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
 80812f0:	ea81 6175 	eor.w	r1, r1, r5, ror #25
 80812f4:	eb01 050c 	add.w	r5, r1, ip
 80812f8:	ea42 0100 	orr.w	r1, r2, r0
 80812fc:	ea4f 3c70 	mov.w	ip, r0, ror #13
 8081300:	eb05 0b0e 	add.w	fp, r5, lr
 8081304:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
 8081308:	ea02 0e00 	and.w	lr, r2, r0
 808130c:	ea01 0109 	and.w	r1, r1, r9
 8081310:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
 8081314:	ea41 010e 	orr.w	r1, r1, lr
 8081318:	4461      	add	r1, ip
 808131a:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 808131c:	ea4f 45f3 	mov.w	r5, r3, ror #19
 8081320:	ea85 4573 	eor.w	r5, r5, r3, ror #17
 8081324:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
 8081328:	6925      	ldr	r5, [r4, #16]
 808132a:	f854 cc10 	ldr.w	ip, [r4, #-16]
 808132e:	442f      	add	r7, r5
 8081330:	443b      	add	r3, r7
 8081332:	ea4f 47bc 	mov.w	r7, ip, ror #18
 8081336:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
 808133a:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
 808133e:	eb03 070e 	add.w	r7, r3, lr
 8081342:	e89d 0028 	ldmia.w	sp, {r3, r5}
 8081346:	405d      	eors	r5, r3
 8081348:	ea05 050b 	and.w	r5, r5, fp
 808134c:	405d      	eors	r5, r3
 808134e:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8081352:	ea4f 3e71 	mov.w	lr, r1, ror #13
 8081356:	4498      	add	r8, r3
 8081358:	44b8      	add	r8, r7
 808135a:	4445      	add	r5, r8
 808135c:	ea4f 28fb 	mov.w	r8, fp, ror #11
 8081360:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
 8081364:	ea88 687b 	eor.w	r8, r8, fp, ror #25
 8081368:	eb08 0305 	add.w	r3, r8, r5
 808136c:	eb03 0509 	add.w	r5, r3, r9
 8081370:	ea40 0801 	orr.w	r8, r0, r1
 8081374:	9502      	str	r5, [sp, #8]
 8081376:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 808137a:	ea00 0501 	and.w	r5, r0, r1
 808137e:	ea08 0802 	and.w	r8, r8, r2
 8081382:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 8081386:	ea48 0805 	orr.w	r8, r8, r5
 808138a:	44f0      	add	r8, lr
 808138c:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 808138e:	ea4f 4ef6 	mov.w	lr, r6, ror #19
 8081392:	6963      	ldr	r3, [r4, #20]
 8081394:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
 8081398:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 808139c:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
 80813a0:	eb0c 0e03 	add.w	lr, ip, r3
 80813a4:	9b01      	ldr	r3, [sp, #4]
 80813a6:	4476      	add	r6, lr
 80813a8:	ea83 0c0b 	eor.w	ip, r3, fp
 80813ac:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 80813b0:	9b02      	ldr	r3, [sp, #8]
 80813b2:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 80813b6:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
 80813ba:	ea0c 0c03 	and.w	ip, ip, r3
 80813be:	9b01      	ldr	r3, [sp, #4]
 80813c0:	eb06 0e09 	add.w	lr, r6, r9
 80813c4:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 80813c8:	ea8c 0c03 	eor.w	ip, ip, r3
 80813cc:	9b00      	ldr	r3, [sp, #0]
 80813ce:	4476      	add	r6, lr
 80813d0:	441e      	add	r6, r3
 80813d2:	9b02      	ldr	r3, [sp, #8]
 80813d4:	44b4      	add	ip, r6
 80813d6:	9e02      	ldr	r6, [sp, #8]
 80813d8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80813dc:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
 80813e0:	ea83 6376 	eor.w	r3, r3, r6, ror #25
 80813e4:	eb03 060c 	add.w	r6, r3, ip
 80813e8:	1993      	adds	r3, r2, r6
 80813ea:	9300      	str	r3, [sp, #0]
 80813ec:	ea41 0308 	orr.w	r3, r1, r8
 80813f0:	ea01 0208 	and.w	r2, r1, r8
 80813f4:	4003      	ands	r3, r0
 80813f6:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80813f8:	ea4f 42f7 	mov.w	r2, r7, ror #19
 80813fc:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8081400:	62e7      	str	r7, [r4, #44]	; 0x2c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8081402:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8081406:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
 808140a:	69a2      	ldr	r2, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 808140c:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8081410:	f854 9c08 	ldr.w	r9, [r4, #-8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8081414:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8081418:	4415      	add	r5, r2
 808141a:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 808141c:	4463      	add	r3, ip
 808141e:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8081420:	442f      	add	r7, r5
 8081422:	ea8b 0602 	eor.w	r6, fp, r2
 8081426:	ea4f 45b9 	mov.w	r5, r9, ror #18
 808142a:	9a00      	ldr	r2, [sp, #0]
 808142c:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
 8081430:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
 8081434:	4016      	ands	r6, r2
 8081436:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 808143a:	443d      	add	r5, r7
 808143c:	9f01      	ldr	r7, [sp, #4]
 808143e:	442a      	add	r2, r5
 8081440:	443a      	add	r2, r7
 8081442:	ea86 060b 	eor.w	r6, r6, fp
 8081446:	4416      	add	r6, r2
 8081448:	9a00      	ldr	r2, [sp, #0]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 808144a:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 808144e:	ea4f 27f2 	mov.w	r7, r2, ror #11
 8081452:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 8081456:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 808145a:	19ba      	adds	r2, r7, r6
 808145c:	1886      	adds	r6, r0, r2
 808145e:	ea4f 3073 	mov.w	r0, r3, ror #13
 8081462:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
 8081466:	ea48 0703 	orr.w	r7, r8, r3
 808146a:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
 808146e:	400f      	ands	r7, r1
 8081470:	ea08 0003 	and.w	r0, r8, r3
 8081474:	4307      	orrs	r7, r0
 8081476:	4467      	add	r7, ip
 8081478:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 808147a:	ea4f 42fe 	mov.w	r2, lr, ror #19
 808147e:	ea82 427e 	eor.w	r2, r2, lr, ror #17
 8081482:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
 8081486:	69e2      	ldr	r2, [r4, #28]
 8081488:	f854 0c04 	ldr.w	r0, [r4, #-4]
 808148c:	4491      	add	r9, r2
 808148e:	eb0e 0209 	add.w	r2, lr, r9
 8081492:	ea4f 49b0 	mov.w	r9, r0, ror #18
 8081496:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
 808149a:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
 808149e:	4491      	add	r9, r2
 80814a0:	9a02      	ldr	r2, [sp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80814a2:	6365      	str	r5, [r4, #52]	; 0x34
 80814a4:	4696      	mov	lr, r2
 80814a6:	9a00      	ldr	r2, [sp, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80814a8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 80814ac:	ea8e 0c02 	eor.w	ip, lr, r2
 80814b0:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
 80814b4:	ea0c 0c06 	and.w	ip, ip, r6
 80814b8:	ea8c 0c0e 	eor.w	ip, ip, lr
 80814bc:	444a      	add	r2, r9
 80814be:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 80814c2:	445a      	add	r2, fp
 80814c4:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80814c8:	4462      	add	r2, ip
 80814ca:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80814ce:	4472      	add	r2, lr
 80814d0:	ea4f 3c77 	mov.w	ip, r7, ror #13
 80814d4:	ea43 0e07 	orr.w	lr, r3, r7
 80814d8:	eb01 0b02 	add.w	fp, r1, r2
 80814dc:	ea0e 0e08 	and.w	lr, lr, r8
 80814e0:	ea03 0107 	and.w	r1, r3, r7
 80814e4:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80814e8:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
 80814ec:	ea4e 0e01 	orr.w	lr, lr, r1
 80814f0:	44e6      	add	lr, ip
 80814f2:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80814f4:	ea4f 42f5 	mov.w	r2, r5, ror #19
 80814f8:	6821      	ldr	r1, [r4, #0]
 80814fa:	ea82 4275 	eor.w	r2, r2, r5, ror #17
 80814fe:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
 8081502:	9a03      	ldr	r2, [sp, #12]
 8081504:	ea4f 4cb1 	mov.w	ip, r1, ror #18
 8081508:	4410      	add	r0, r2
 808150a:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
 808150e:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
 8081512:	4405      	add	r5, r0
 8081514:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
 8081518:	440d      	add	r5, r1
 808151a:	9902      	ldr	r1, [sp, #8]
 808151c:	442a      	add	r2, r5
 808151e:	eb02 0901 	add.w	r9, r2, r1
 8081522:	9a00      	ldr	r2, [sp, #0]
 8081524:	ea4f 307e 	mov.w	r0, lr, ror #13
 8081528:	ea82 0106 	eor.w	r1, r2, r6
 808152c:	ea01 010b 	and.w	r1, r1, fp
 8081530:	4051      	eors	r1, r2
 8081532:	ea4f 22fb 	mov.w	r2, fp, ror #11
 8081536:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 808153a:	4489      	add	r9, r1
 808153c:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 8081540:	444a      	add	r2, r9
 8081542:	ea47 090e 	orr.w	r9, r7, lr
 8081546:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 808154a:	ea09 0903 	and.w	r9, r9, r3
 808154e:	ea07 010e 	and.w	r1, r7, lr
 8081552:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 8081556:	ea49 0901 	orr.w	r9, r9, r1
 808155a:	4481      	add	r9, r0
 808155c:	4490      	add	r8, r2
 808155e:	4491      	add	r9, r2
 8081560:	9a04      	ldr	r2, [sp, #16]
 8081562:	63e5      	str	r5, [r4, #60]	; 0x3c
 8081564:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 8081566:	2a30      	cmp	r2, #48	; 0x30
 8081568:	9204      	str	r2, [sp, #16]
 808156a:	f47f ae1f 	bne.w	80811ac <mbedtls_internal_sha256_process+0x2d4>
 808156e:	9a00      	ldr	r2, [sp, #0]
 8081570:	9309      	str	r3, [sp, #36]	; 0x24
 8081572:	920d      	str	r2, [sp, #52]	; 0x34
 8081574:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8081578:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 808157c:	960c      	str	r6, [sp, #48]	; 0x30
 808157e:	f8cd 9018 	str.w	r9, [sp, #24]
 8081582:	f8cd e01c 	str.w	lr, [sp, #28]
 8081586:	9708      	str	r7, [sp, #32]
 8081588:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 808158a:	9a05      	ldr	r2, [sp, #20]
 808158c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8081590:	9205      	str	r2, [sp, #20]
 8081592:	aa06      	add	r2, sp, #24
 8081594:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8081598:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 808159a:	440a      	add	r2, r1
 808159c:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 808159e:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 80815a0:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80815a2:	d1f2      	bne.n	808158a <mbedtls_internal_sha256_process+0x6b2>
        ctx->state[i] += A[i];

    return( 0 );
}
 80815a4:	2000      	movs	r0, #0
 80815a6:	b04f      	add	sp, #316	; 0x13c
 80815a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080815ac <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80815ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80815b0:	4604      	mov	r4, r0
 80815b2:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 80815b4:	4615      	mov	r5, r2
 80815b6:	b382      	cbz	r2, 808161a <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80815b8:	6803      	ldr	r3, [r0, #0]
 80815ba:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80815be:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80815c0:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80815c2:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80815c4:	bf82      	ittt	hi
 80815c6:	6863      	ldrhi	r3, [r4, #4]
 80815c8:	3301      	addhi	r3, #1
 80815ca:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 80815cc:	b180      	cbz	r0, 80815f0 <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80815ce:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80815d2:	42ba      	cmp	r2, r7
 80815d4:	d31b      	bcc.n	808160e <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80815d6:	f104 0828 	add.w	r8, r4, #40	; 0x28
 80815da:	463a      	mov	r2, r7
 80815dc:	4440      	add	r0, r8
 80815de:	f00f f808 	bl	80905f2 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80815e2:	4641      	mov	r1, r8
 80815e4:	4620      	mov	r0, r4
 80815e6:	f7ff fc77 	bl	8080ed8 <mbedtls_internal_sha256_process>
 80815ea:	b9b8      	cbnz	r0, 808161c <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
 80815ec:	443e      	add	r6, r7
        ilen  -= fill;
 80815ee:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80815f0:	462f      	mov	r7, r5
 80815f2:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 80815f4:	2f3f      	cmp	r7, #63	; 0x3f
 80815f6:	4431      	add	r1, r6
 80815f8:	d905      	bls.n	8081606 <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80815fa:	4620      	mov	r0, r4
 80815fc:	f7ff fc6c 	bl	8080ed8 <mbedtls_internal_sha256_process>
 8081600:	b960      	cbnz	r0, 808161c <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 8081602:	3f40      	subs	r7, #64	; 0x40
 8081604:	e7f5      	b.n	80815f2 <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
 8081606:	b147      	cbz	r7, 808161a <mbedtls_sha256_update_ret+0x6e>
 8081608:	463d      	mov	r5, r7
 808160a:	460e      	mov	r6, r1
 808160c:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 808160e:	3428      	adds	r4, #40	; 0x28
 8081610:	462a      	mov	r2, r5
 8081612:	4631      	mov	r1, r6
 8081614:	4420      	add	r0, r4
 8081616:	f00e ffec 	bl	80905f2 <memcpy>

    return( 0 );
 808161a:	2000      	movs	r0, #0
}
 808161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081620 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8081620:	b570      	push	{r4, r5, r6, lr}
 8081622:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8081624:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 8081626:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8081628:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 808162c:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 808162e:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8081630:	4423      	add	r3, r4
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8081632:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8081634:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8081638:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
 808163c:	d804      	bhi.n	8081648 <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 808163e:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8081642:	2100      	movs	r1, #0
 8081644:	4430      	add	r0, r6
 8081646:	e00e      	b.n	8081666 <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8081648:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 808164c:	2100      	movs	r1, #0
 808164e:	4430      	add	r0, r6
 8081650:	f00e fff5 	bl	809063e <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8081654:	4631      	mov	r1, r6
 8081656:	4620      	mov	r0, r4
 8081658:	f7ff fc3e 	bl	8080ed8 <mbedtls_internal_sha256_process>
 808165c:	2800      	cmp	r0, #0
 808165e:	d175      	bne.n	808174c <mbedtls_sha256_finish_ret+0x12c>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8081660:	4601      	mov	r1, r0
 8081662:	4630      	mov	r0, r6
 8081664:	2238      	movs	r2, #56	; 0x38
 8081666:	f00e ffea 	bl	809063e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 808166a:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 808166c:	6861      	ldr	r1, [r4, #4]
 808166e:	0f5a      	lsrs	r2, r3, #29
 8081670:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8081674:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 8081676:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8081678:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 808167c:	0c11      	lsrs	r1, r2, #16
 808167e:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 8081682:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 8081686:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8081688:	0e1a      	lsrs	r2, r3, #24
 808168a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 808168e:	0c1a      	lsrs	r2, r3, #16
 8081690:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8081694:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8081696:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 808169a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 808169e:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80816a2:	4631      	mov	r1, r6
 80816a4:	4620      	mov	r0, r4
 80816a6:	f7ff fc17 	bl	8080ed8 <mbedtls_internal_sha256_process>
 80816aa:	4603      	mov	r3, r0
 80816ac:	2800      	cmp	r0, #0
 80816ae:	d14c      	bne.n	808174a <mbedtls_sha256_finish_ret+0x12a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80816b0:	7ae2      	ldrb	r2, [r4, #11]
 80816b2:	702a      	strb	r2, [r5, #0]
 80816b4:	8962      	ldrh	r2, [r4, #10]
 80816b6:	706a      	strb	r2, [r5, #1]
 80816b8:	68a2      	ldr	r2, [r4, #8]
 80816ba:	0a12      	lsrs	r2, r2, #8
 80816bc:	70aa      	strb	r2, [r5, #2]
 80816be:	68a2      	ldr	r2, [r4, #8]
 80816c0:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80816c2:	7be2      	ldrb	r2, [r4, #15]
 80816c4:	712a      	strb	r2, [r5, #4]
 80816c6:	89e2      	ldrh	r2, [r4, #14]
 80816c8:	716a      	strb	r2, [r5, #5]
 80816ca:	68e2      	ldr	r2, [r4, #12]
 80816cc:	0a12      	lsrs	r2, r2, #8
 80816ce:	71aa      	strb	r2, [r5, #6]
 80816d0:	68e2      	ldr	r2, [r4, #12]
 80816d2:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80816d4:	7ce2      	ldrb	r2, [r4, #19]
 80816d6:	722a      	strb	r2, [r5, #8]
 80816d8:	8a62      	ldrh	r2, [r4, #18]
 80816da:	726a      	strb	r2, [r5, #9]
 80816dc:	6922      	ldr	r2, [r4, #16]
 80816de:	0a12      	lsrs	r2, r2, #8
 80816e0:	72aa      	strb	r2, [r5, #10]
 80816e2:	6922      	ldr	r2, [r4, #16]
 80816e4:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80816e6:	7de2      	ldrb	r2, [r4, #23]
 80816e8:	732a      	strb	r2, [r5, #12]
 80816ea:	8ae2      	ldrh	r2, [r4, #22]
 80816ec:	736a      	strb	r2, [r5, #13]
 80816ee:	6962      	ldr	r2, [r4, #20]
 80816f0:	0a12      	lsrs	r2, r2, #8
 80816f2:	73aa      	strb	r2, [r5, #14]
 80816f4:	6962      	ldr	r2, [r4, #20]
 80816f6:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80816f8:	7ee2      	ldrb	r2, [r4, #27]
 80816fa:	742a      	strb	r2, [r5, #16]
 80816fc:	8b62      	ldrh	r2, [r4, #26]
 80816fe:	746a      	strb	r2, [r5, #17]
 8081700:	69a2      	ldr	r2, [r4, #24]
 8081702:	0a12      	lsrs	r2, r2, #8
 8081704:	74aa      	strb	r2, [r5, #18]
 8081706:	69a2      	ldr	r2, [r4, #24]
 8081708:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 808170a:	7fe2      	ldrb	r2, [r4, #31]
 808170c:	752a      	strb	r2, [r5, #20]
 808170e:	8be2      	ldrh	r2, [r4, #30]
 8081710:	756a      	strb	r2, [r5, #21]
 8081712:	69e2      	ldr	r2, [r4, #28]
 8081714:	0a12      	lsrs	r2, r2, #8
 8081716:	75aa      	strb	r2, [r5, #22]
 8081718:	69e2      	ldr	r2, [r4, #28]
 808171a:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 808171c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8081720:	762a      	strb	r2, [r5, #24]
 8081722:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8081724:	766a      	strb	r2, [r5, #25]
 8081726:	6a22      	ldr	r2, [r4, #32]
 8081728:	0a12      	lsrs	r2, r2, #8
 808172a:	76aa      	strb	r2, [r5, #26]
 808172c:	6a22      	ldr	r2, [r4, #32]
 808172e:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
 8081730:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8081732:	b950      	cbnz	r0, 808174a <mbedtls_sha256_finish_ret+0x12a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8081734:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8081738:	772b      	strb	r3, [r5, #28]
 808173a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 808173c:	776b      	strb	r3, [r5, #29]
 808173e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8081740:	0a1b      	lsrs	r3, r3, #8
 8081742:	77ab      	strb	r3, [r5, #30]
 8081744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8081746:	77eb      	strb	r3, [r5, #31]
 8081748:	bd70      	pop	{r4, r5, r6, pc}

    return( 0 );
 808174a:	4618      	mov	r0, r3
}
 808174c:	bd70      	pop	{r4, r5, r6, pc}

0808174e <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 808174e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081750:	461f      	mov	r7, r3
 8081752:	b09d      	sub	sp, #116	; 0x74
 8081754:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 8081756:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8081758:	460e      	mov	r6, r1
 808175a:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 808175c:	f7ff fb58 	bl	8080e10 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8081760:	4639      	mov	r1, r7
 8081762:	a801      	add	r0, sp, #4
 8081764:	f7ff fb68 	bl	8080e38 <mbedtls_sha256_starts_ret>
 8081768:	4601      	mov	r1, r0
 808176a:	b958      	cbnz	r0, 8081784 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 808176c:	4629      	mov	r1, r5
 808176e:	4632      	mov	r2, r6
 8081770:	a801      	add	r0, sp, #4
 8081772:	f7ff ff1b 	bl	80815ac <mbedtls_sha256_update_ret>
 8081776:	4601      	mov	r1, r0
 8081778:	b920      	cbnz	r0, 8081784 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 808177a:	4621      	mov	r1, r4
 808177c:	a801      	add	r0, sp, #4
 808177e:	f7ff ff4f 	bl	8081620 <mbedtls_sha256_finish_ret>
 8081782:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 8081784:	a801      	add	r0, sp, #4
 8081786:	f7ff fb47 	bl	8080e18 <mbedtls_sha256_free>

    return( ret );
}
 808178a:	4608      	mov	r0, r1
 808178c:	b01d      	add	sp, #116	; 0x74
 808178e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081790 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 8081790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081794:	4604      	mov	r4, r0
 8081796:	b0a5      	sub	sp, #148	; 0x94
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 8081798:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 808179a:	9301      	str	r3, [sp, #4]
 808179c:	460f      	mov	r7, r1
 808179e:	4693      	mov	fp, r2
 80817a0:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 80817a2:	f005 f80f 	bl	80867c4 <mbedtls_md_get_size>
 80817a6:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
 80817a8:	2300      	movs	r3, #0
 80817aa:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
 80817ac:	2301      	movs	r3, #1
 80817ae:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 80817b2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
 80817b6:	2e00      	cmp	r6, #0
 80817b8:	d05c      	beq.n	8081874 <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 80817ba:	465a      	mov	r2, fp
 80817bc:	4639      	mov	r1, r7
 80817be:	4620      	mov	r0, r4
 80817c0:	f004 ff3e 	bl	8086640 <mbedtls_md_hmac_starts>
 80817c4:	2800      	cmp	r0, #0
 80817c6:	d156      	bne.n	8081876 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
 80817c8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80817ca:	9901      	ldr	r1, [sp, #4]
 80817cc:	4620      	mov	r0, r4
 80817ce:	f004 ff97 	bl	8086700 <mbedtls_md_hmac_update>
 80817d2:	2800      	cmp	r0, #0
 80817d4:	d14f      	bne.n	8081876 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
 80817d6:	2204      	movs	r2, #4
 80817d8:	a903      	add	r1, sp, #12
 80817da:	4620      	mov	r0, r4
 80817dc:	f004 ff90 	bl	8086700 <mbedtls_md_hmac_update>
 80817e0:	2800      	cmp	r0, #0
 80817e2:	d148      	bne.n	8081876 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 80817e4:	4641      	mov	r1, r8
 80817e6:	4620      	mov	r0, r4
 80817e8:	f004 ff9a 	bl	8086720 <mbedtls_md_hmac_finish>
 80817ec:	2800      	cmp	r0, #0
 80817ee:	d142      	bne.n	8081876 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
 80817f0:	ad04      	add	r5, sp, #16
 80817f2:	464a      	mov	r2, r9
 80817f4:	4641      	mov	r1, r8
 80817f6:	4628      	mov	r0, r5
 80817f8:	f00e fefb 	bl	80905f2 <memcpy>

        for( i = 1; i < iteration_count; i++ )
 80817fc:	f04f 0a01 	mov.w	sl, #1
 8081800:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8081802:	459a      	cmp	sl, r3
 8081804:	d21d      	bcs.n	8081842 <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 8081806:	465a      	mov	r2, fp
 8081808:	4639      	mov	r1, r7
 808180a:	4620      	mov	r0, r4
 808180c:	f004 ff18 	bl	8086640 <mbedtls_md_hmac_starts>
 8081810:	bb88      	cbnz	r0, 8081876 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
 8081812:	464a      	mov	r2, r9
 8081814:	4629      	mov	r1, r5
 8081816:	4620      	mov	r0, r4
 8081818:	f004 ff72 	bl	8086700 <mbedtls_md_hmac_update>
 808181c:	bb58      	cbnz	r0, 8081876 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
 808181e:	4629      	mov	r1, r5
 8081820:	4620      	mov	r0, r4
 8081822:	f004 ff7d 	bl	8086720 <mbedtls_md_hmac_finish>
 8081826:	bb30      	cbnz	r0, 8081876 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 8081828:	4548      	cmp	r0, r9
 808182a:	da07      	bge.n	808183c <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
 808182c:	f810 2008 	ldrb.w	r2, [r0, r8]
 8081830:	5d43      	ldrb	r3, [r0, r5]
 8081832:	4053      	eors	r3, r2
 8081834:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 8081838:	3001      	adds	r0, #1
 808183a:	e7f5      	b.n	8081828 <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
 808183c:	f10a 0a01 	add.w	sl, sl, #1
 8081840:	e7de      	b.n	8081800 <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
 8081842:	454e      	cmp	r6, r9
 8081844:	4635      	mov	r5, r6
 8081846:	bf28      	it	cs
 8081848:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
 808184a:	4641      	mov	r1, r8
 808184c:	462a      	mov	r2, r5
 808184e:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8081850:	f00e fecf 	bl	80905f2 <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
 8081854:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
 8081856:	1b76      	subs	r6, r6, r5
        out_p += use_len;
 8081858:	442b      	add	r3, r5
 808185a:	9331      	str	r3, [sp, #196]	; 0xc4
 808185c:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
 808185e:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8081862:	3301      	adds	r3, #1
 8081864:	b2db      	uxtb	r3, r3
 8081866:	7013      	strb	r3, [r2, #0]
 8081868:	2b00      	cmp	r3, #0
 808186a:	d1a4      	bne.n	80817b6 <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
 808186c:	ab03      	add	r3, sp, #12
 808186e:	4293      	cmp	r3, r2
 8081870:	d1f5      	bne.n	808185e <mbedtls_pkcs5_pbkdf2_hmac+0xce>
 8081872:	e7a0      	b.n	80817b6 <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
 8081874:	4630      	mov	r0, r6
}
 8081876:	b025      	add	sp, #148	; 0x94
 8081878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808187c <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 808187c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081880:	461f      	mov	r7, r3
 8081882:	b0bd      	sub	sp, #244	; 0xf4
    int ret, iterations = 0, keylen = 0;
 8081884:	2300      	movs	r3, #0
 8081886:	9306      	str	r3, [sp, #24]
 8081888:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
 808188a:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
 808188c:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 808188e:	6883      	ldr	r3, [r0, #8]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 8081890:	f04f 0904 	mov.w	r9, #4
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 8081894:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
 8081896:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8081898:	6803      	ldr	r3, [r0, #0]

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 808189a:	460d      	mov	r5, r1
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 808189c:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 808189e:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 80818a0:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80818a4:	f040 80c9 	bne.w	8081a3a <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
 80818a8:	ab10      	add	r3, sp, #64	; 0x40
 80818aa:	aa0a      	add	r2, sp, #40	; 0x28
 80818ac:	4621      	mov	r1, r4
 80818ae:	a808      	add	r0, sp, #32
 80818b0:	f000 fd65 	bl	808237e <mbedtls_asn1_get_alg>
 80818b4:	2800      	cmp	r0, #0
 80818b6:	d158      	bne.n	808196a <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 80818b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80818ba:	2a09      	cmp	r2, #9
 80818bc:	d14c      	bne.n	8081958 <mbedtls_pkcs5_pbes2+0xdc>
 80818be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80818c0:	4861      	ldr	r0, [pc, #388]	; (8081a48 <mbedtls_pkcs5_pbes2+0x1cc>)
 80818c2:	f00e fe87 	bl	80905d4 <memcmp>
 80818c6:	2800      	cmp	r0, #0
 80818c8:	d146      	bne.n	8081958 <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 80818ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
 80818cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 80818ce:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
 80818d0:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80818d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80818d6:	2b30      	cmp	r3, #48	; 0x30
 80818d8:	f040 80af 	bne.w	8081a3a <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80818dc:	464b      	mov	r3, r9
 80818de:	aa17      	add	r2, sp, #92	; 0x5c
 80818e0:	4641      	mov	r1, r8
 80818e2:	a824      	add	r0, sp, #144	; 0x90
 80818e4:	f000 fc72 	bl	80821cc <mbedtls_asn1_get_tag>
 80818e8:	b9f8      	cbnz	r0, 808192a <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 80818ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
 80818ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 80818ee:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
 80818f0:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 80818f2:	4641      	mov	r1, r8
 80818f4:	aa06      	add	r2, sp, #24
 80818f6:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
 80818f8:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 80818fa:	f000 fc94 	bl	8082226 <mbedtls_asn1_get_int>
 80818fe:	b9a0      	cbnz	r0, 808192a <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
 8081900:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8081902:	4598      	cmp	r8, r3
 8081904:	d022      	beq.n	808194c <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
 8081906:	aa07      	add	r2, sp, #28
 8081908:	4641      	mov	r1, r8
 808190a:	a824      	add	r0, sp, #144	; 0x90
 808190c:	f000 fc8b 	bl	8082226 <mbedtls_asn1_get_int>
 8081910:	b110      	cbz	r0, 8081918 <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8081912:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8081916:	d108      	bne.n	808192a <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
 8081918:	9b24      	ldr	r3, [sp, #144]	; 0x90
 808191a:	4598      	cmp	r8, r3
 808191c:	d016      	beq.n	808194c <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
 808191e:	aa2c      	add	r2, sp, #176	; 0xb0
 8081920:	4641      	mov	r1, r8
 8081922:	a824      	add	r0, sp, #144	; 0x90
 8081924:	f000 fd73 	bl	808240e <mbedtls_asn1_get_alg_null>
 8081928:	b128      	cbz	r0, 8081936 <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 808192a:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
 808192e:	2800      	cmp	r0, #0
 8081930:	f040 8086 	bne.w	8081a40 <mbedtls_pkcs5_pbes2+0x1c4>
 8081934:	e00a      	b.n	808194c <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
 8081936:	f10d 0116 	add.w	r1, sp, #22
 808193a:	a82c      	add	r0, sp, #176	; 0xb0
 808193c:	f002 f922 	bl	8083b84 <mbedtls_oid_get_md_hmac>
 8081940:	b950      	cbnz	r0, 8081958 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
 8081942:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8081944:	4598      	cmp	r8, r3
 8081946:	d001      	beq.n	808194c <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8081948:	4840      	ldr	r0, [pc, #256]	; (8081a4c <mbedtls_pkcs5_pbes2+0x1d0>)
 808194a:	e079      	b.n	8081a40 <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
 808194c:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8081950:	f004 fdf4 	bl	808653c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8081954:	4681      	mov	r9, r0
 8081956:	b908      	cbnz	r0, 808195c <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
 8081958:	483d      	ldr	r0, [pc, #244]	; (8081a50 <mbedtls_pkcs5_pbes2+0x1d4>)
 808195a:	e071      	b.n	8081a40 <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
 808195c:	ab13      	add	r3, sp, #76	; 0x4c
 808195e:	aa0d      	add	r2, sp, #52	; 0x34
 8081960:	4621      	mov	r1, r4
 8081962:	a808      	add	r0, sp, #32
 8081964:	f000 fd0b 	bl	808237e <mbedtls_asn1_get_alg>
 8081968:	b110      	cbz	r0, 8081970 <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 808196a:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
 808196e:	e067      	b.n	8081a40 <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
 8081970:	f10d 0117 	add.w	r1, sp, #23
 8081974:	a80d      	add	r0, sp, #52	; 0x34
 8081976:	f002 f8d7 	bl	8083b28 <mbedtls_oid_get_cipher_alg>
 808197a:	2800      	cmp	r0, #0
 808197c:	d1ec      	bne.n	8081958 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
 808197e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8081982:	f000 f949 	bl	8081c18 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 8081986:	4680      	mov	r8, r0
 8081988:	2800      	cmp	r0, #0
 808198a:	d0e5      	beq.n	8081958 <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
 808198c:	6843      	ldr	r3, [r0, #4]
 808198e:	08db      	lsrs	r3, r3, #3
 8081990:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
 8081992:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8081994:	2b04      	cmp	r3, #4
 8081996:	d152      	bne.n	8081a3e <mbedtls_pkcs5_pbes2+0x1c2>
 8081998:	68c3      	ldr	r3, [r0, #12]
 808199a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808199c:	429a      	cmp	r2, r3
 808199e:	d14e      	bne.n	8081a3e <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
 80819a0:	a819      	add	r0, sp, #100	; 0x64
 80819a2:	f004 fdd7 	bl	8086554 <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
 80819a6:	a82c      	add	r0, sp, #176	; 0xb0
 80819a8:	f000 f958 	bl	8081c5c <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
 80819ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80819ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 80819b0:	a824      	add	r0, sp, #144	; 0x90
 80819b2:	f00e fe1e 	bl	80905f2 <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 80819b6:	2201      	movs	r2, #1
 80819b8:	4649      	mov	r1, r9
 80819ba:	a819      	add	r0, sp, #100	; 0x64
 80819bc:	f004 fdf0 	bl	80865a0 <mbedtls_md_setup>
 80819c0:	4604      	mov	r4, r0
 80819c2:	2800      	cmp	r0, #0
 80819c4:	d131      	bne.n	8081a2a <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
 80819c6:	9b07      	ldr	r3, [sp, #28]
 80819c8:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 80819cc:	9302      	str	r3, [sp, #8]
 80819ce:	9b06      	ldr	r3, [sp, #24]
 80819d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80819d4:	9301      	str	r3, [sp, #4]
 80819d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80819d8:	463a      	mov	r2, r7
 80819da:	9300      	str	r3, [sp, #0]
 80819dc:	4631      	mov	r1, r6
 80819de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80819e0:	a819      	add	r0, sp, #100	; 0x64
 80819e2:	f7ff fed5 	bl	8081790 <mbedtls_pkcs5_pbkdf2_hmac>
 80819e6:	4604      	mov	r4, r0
 80819e8:	b9f8      	cbnz	r0, 8081a2a <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 80819ea:	4641      	mov	r1, r8
 80819ec:	a82c      	add	r0, sp, #176	; 0xb0
 80819ee:	f000 fb09 	bl	8082004 <mbedtls_cipher_setup>
 80819f2:	4604      	mov	r4, r0
 80819f4:	b9c8      	cbnz	r0, 8081a2a <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 80819f6:	9a07      	ldr	r2, [sp, #28]
 80819f8:	b26b      	sxtb	r3, r5
 80819fa:	00d2      	lsls	r2, r2, #3
 80819fc:	4649      	mov	r1, r9
 80819fe:	a82c      	add	r0, sp, #176	; 0xb0
 8081a00:	f000 f942 	bl	8081c88 <mbedtls_cipher_setkey>
 8081a04:	4604      	mov	r4, r0
 8081a06:	b980      	cbnz	r0, 8081a2a <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
 8081a08:	ab09      	add	r3, sp, #36	; 0x24
 8081a0a:	9302      	str	r3, [sp, #8]
 8081a0c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8081a0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8081a10:	9301      	str	r3, [sp, #4]
 8081a12:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8081a14:	a924      	add	r1, sp, #144	; 0x90
 8081a16:	9300      	str	r3, [sp, #0]
 8081a18:	a82c      	add	r0, sp, #176	; 0xb0
 8081a1a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8081a1c:	f000 fb10 	bl	8082040 <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
 8081a20:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
 8081a24:	2800      	cmp	r0, #0
 8081a26:	bf08      	it	eq
 8081a28:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
 8081a2a:	a819      	add	r0, sp, #100	; 0x64
 8081a2c:	f004 fd97 	bl	808655e <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
 8081a30:	a82c      	add	r0, sp, #176	; 0xb0
 8081a32:	f000 f917 	bl	8081c64 <mbedtls_cipher_free>

    return( ret );
 8081a36:	4620      	mov	r0, r4
 8081a38:	e002      	b.n	8081a40 <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8081a3a:	4806      	ldr	r0, [pc, #24]	; (8081a54 <mbedtls_pkcs5_pbes2+0x1d8>)
 8081a3c:	e000      	b.n	8081a40 <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
 8081a3e:	4806      	ldr	r0, [pc, #24]	; (8081a58 <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 8081a40:	b03d      	add	sp, #244	; 0xf4
 8081a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8081a46:	bf00      	nop
 8081a48:	080908d0 	.word	0x080908d0
 8081a4c:	ffffd09a 	.word	0xffffd09a
 8081a50:	ffffd180 	.word	0xffffd180
 8081a54:	ffffd09e 	.word	0xffffd09e
 8081a58:	ffffd100 	.word	0xffffd100

08081a5c <mbedtls_cipher_get_block_size>:
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8081a5c:	b110      	cbz	r0, 8081a64 <mbedtls_cipher_get_block_size+0x8>
 8081a5e:	6800      	ldr	r0, [r0, #0]
 8081a60:	b100      	cbz	r0, 8081a64 <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 8081a62:	6940      	ldr	r0, [r0, #20]
}
 8081a64:	4770      	bx	lr

08081a66 <_ZL16add_pkcs_paddingPhjj>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 8081a66:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
 8081a68:	1a89      	subs	r1, r1, r2
 8081a6a:	2400      	movs	r4, #0
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 8081a6c:	b2e3      	uxtb	r3, r4
 8081a6e:	4299      	cmp	r1, r3
 8081a70:	f104 0401 	add.w	r4, r4, #1
 8081a74:	d902      	bls.n	8081a7c <_ZL16add_pkcs_paddingPhjj+0x16>
        output[data_len + i] = (unsigned char) padding_len;
 8081a76:	4403      	add	r3, r0
 8081a78:	5499      	strb	r1, [r3, r2]
        size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 8081a7a:	e7f7      	b.n	8081a6c <_ZL16add_pkcs_paddingPhjj+0x6>
 8081a7c:	bd10      	pop	{r4, pc}
	...

08081a80 <_ZL16get_pkcs_paddingPhjPj>:
        output[data_len + i] = (unsigned char) padding_len;
}

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 8081a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 8081a82:	b300      	cbz	r0, 8081ac6 <_ZL16get_pkcs_paddingPhjPj+0x46>
 8081a84:	b1fa      	cbz	r2, 8081ac6 <_ZL16get_pkcs_paddingPhjPj+0x46>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 8081a86:	1843      	adds	r3, r0, r1
 8081a88:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8081a8c:	fab4 f384 	clz	r3, r4
 8081a90:	095b      	lsrs	r3, r3, #5
 8081a92:	42a1      	cmp	r1, r4
 8081a94:	bf38      	it	cc
 8081a96:	f043 0301 	orrcc.w	r3, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8081a9a:	1b0f      	subs	r7, r1, r4
 8081a9c:	6017      	str	r7, [r2, #0]
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 8081a9e:	2200      	movs	r2, #0
 8081aa0:	428a      	cmp	r2, r1
 8081aa2:	d00b      	beq.n	8081abc <_ZL16get_pkcs_paddingPhjPj+0x3c>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 8081aa4:	5c85      	ldrb	r5, [r0, r2]
 8081aa6:	42ba      	cmp	r2, r7
 8081aa8:	ea84 0605 	eor.w	r6, r4, r5
 8081aac:	bf34      	ite	cc
 8081aae:	2500      	movcc	r5, #0
 8081ab0:	2501      	movcs	r5, #1
 8081ab2:	4375      	muls	r5, r6
 8081ab4:	432b      	orrs	r3, r5
 8081ab6:	b2db      	uxtb	r3, r3
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 8081ab8:	3201      	adds	r2, #1
 8081aba:	e7f1      	b.n	8081aa0 <_ZL16get_pkcs_paddingPhjPj+0x20>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8081abc:	2b00      	cmp	r3, #0
 8081abe:	4803      	ldr	r0, [pc, #12]	; (8081acc <_ZL16get_pkcs_paddingPhjPj+0x4c>)
 8081ac0:	bf08      	it	eq
 8081ac2:	2000      	moveq	r0, #0
 8081ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8081ac6:	4802      	ldr	r0, [pc, #8]	; (8081ad0 <_ZL16get_pkcs_paddingPhjPj+0x50>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 8081ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081aca:	bf00      	nop
 8081acc:	ffff9e00 	.word	0xffff9e00
 8081ad0:	ffff9f00 	.word	0xffff9f00

08081ad4 <_ZL25add_one_and_zeros_paddingPhjj>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 8081ad4:	2380      	movs	r3, #128	; 0x80
/*
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 8081ad6:	b530      	push	{r4, r5, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 8081ad8:	5483      	strb	r3, [r0, r2]
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 8081ada:	1a89      	subs	r1, r1, r2
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8081adc:	2301      	movs	r3, #1
        output[data_len + i] = 0x00;
 8081ade:	2500      	movs	r5, #0
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8081ae0:	4299      	cmp	r1, r3
 8081ae2:	d904      	bls.n	8081aee <_ZL25add_one_and_zeros_paddingPhjj+0x1a>
        output[data_len + i] = 0x00;
 8081ae4:	18c4      	adds	r4, r0, r3
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8081ae6:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 8081ae8:	54a5      	strb	r5, [r4, r2]
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8081aea:	b2db      	uxtb	r3, r3
 8081aec:	e7f8      	b.n	8081ae0 <_ZL25add_one_and_zeros_paddingPhjj+0xc>
 8081aee:	bd30      	pop	{r4, r5, pc}

08081af0 <_ZL25add_zeros_and_len_paddingPhjj>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 8081af0:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8081af2:	2301      	movs	r3, #1
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 8081af4:	1a8d      	subs	r5, r1, r2
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
        output[data_len + i - 1] = 0x00;
 8081af6:	2600      	movs	r6, #0
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8081af8:	429d      	cmp	r5, r3
 8081afa:	d906      	bls.n	8081b0a <_ZL25add_zeros_and_len_paddingPhjj+0x1a>
        output[data_len + i - 1] = 0x00;
 8081afc:	18c4      	adds	r4, r0, r3
 8081afe:	4414      	add	r4, r2
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8081b00:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 8081b02:	f804 6c01 	strb.w	r6, [r4, #-1]
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8081b06:	b2db      	uxtb	r3, r3
 8081b08:	e7f6      	b.n	8081af8 <_ZL25add_zeros_and_len_paddingPhjj+0x8>
        output[data_len + i - 1] = 0x00;
    output[output_len - 1] = (unsigned char) padding_len;
 8081b0a:	4401      	add	r1, r0
 8081b0c:	f801 5c01 	strb.w	r5, [r1, #-1]
 8081b10:	bd70      	pop	{r4, r5, r6, pc}
	...

08081b14 <_ZL25get_zeros_and_len_paddingPhjPj>:
}

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 8081b14:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 8081b16:	b1f0      	cbz	r0, 8081b56 <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
 8081b18:	b1ea      	cbz	r2, 8081b56 <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 8081b1a:	1e4e      	subs	r6, r1, #1
 8081b1c:	5d84      	ldrb	r4, [r0, r6]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8081b1e:	fab4 f384 	clz	r3, r4

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8081b22:	1b0d      	subs	r5, r1, r4

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8081b24:	095b      	lsrs	r3, r3, #5
 8081b26:	42a1      	cmp	r1, r4
 8081b28:	bf2c      	ite	cs
 8081b2a:	4619      	movcs	r1, r3
 8081b2c:	f043 0101 	orrcc.w	r1, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8081b30:	6015      	str	r5, [r2, #0]
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 8081b32:	2300      	movs	r3, #0
 8081b34:	42b3      	cmp	r3, r6
 8081b36:	d209      	bcs.n	8081b4c <_ZL25get_zeros_and_len_paddingPhjPj+0x38>
        bad |= input[i] * ( i >= pad_idx );
 8081b38:	42ab      	cmp	r3, r5
 8081b3a:	5cc4      	ldrb	r4, [r0, r3]
 8081b3c:	bf34      	ite	cc
 8081b3e:	2200      	movcc	r2, #0
 8081b40:	2201      	movcs	r2, #1
 8081b42:	4362      	muls	r2, r4
 8081b44:	4311      	orrs	r1, r2
 8081b46:	b2c9      	uxtb	r1, r1
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 8081b48:	3301      	adds	r3, #1
 8081b4a:	e7f3      	b.n	8081b34 <_ZL25get_zeros_and_len_paddingPhjPj+0x20>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8081b4c:	2900      	cmp	r1, #0
 8081b4e:	4803      	ldr	r0, [pc, #12]	; (8081b5c <_ZL25get_zeros_and_len_paddingPhjPj+0x48>)
 8081b50:	bf08      	it	eq
 8081b52:	2000      	moveq	r0, #0
 8081b54:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8081b56:	4802      	ldr	r0, [pc, #8]	; (8081b60 <_ZL25get_zeros_and_len_paddingPhjPj+0x4c>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 8081b58:	bd70      	pop	{r4, r5, r6, pc}
 8081b5a:	bf00      	nop
 8081b5c:	ffff9e00 	.word	0xffff9e00
 8081b60:	ffff9f00 	.word	0xffff9f00

08081b64 <_ZL17add_zeros_paddingPhjj>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 8081b64:	b510      	push	{r4, lr}
 8081b66:	4402      	add	r2, r0
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 8081b68:	2300      	movs	r3, #0
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 8081b6a:	1a14      	subs	r4, r2, r0
 8081b6c:	42a1      	cmp	r1, r4
 8081b6e:	d902      	bls.n	8081b76 <_ZL17add_zeros_paddingPhjj+0x12>
        output[i] = 0x00;
 8081b70:	f802 3b01 	strb.w	r3, [r2], #1
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 8081b74:	e7f9      	b.n	8081b6a <_ZL17add_zeros_paddingPhjj+0x6>
 8081b76:	bd10      	pop	{r4, pc}

08081b78 <_ZL14get_no_paddingPhjPj>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 8081b78:	b118      	cbz	r0, 8081b82 <_ZL14get_no_paddingPhjPj+0xa>
 8081b7a:	b112      	cbz	r2, 8081b82 <_ZL14get_no_paddingPhjPj+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 8081b7c:	6011      	str	r1, [r2, #0]

    return( 0 );
 8081b7e:	2000      	movs	r0, #0
 8081b80:	4770      	bx	lr
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8081b82:	4801      	ldr	r0, [pc, #4]	; (8081b88 <_ZL14get_no_paddingPhjPj+0x10>)

    *data_len = input_len;

    return( 0 );
}
 8081b84:	4770      	bx	lr
 8081b86:	bf00      	nop
 8081b88:	ffff9f00 	.word	0xffff9f00

08081b8c <_ZL25get_one_and_zeros_paddingPhjPj>:
        output[data_len + i] = 0x00;
}

static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 8081b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
 8081b8e:	b1f0      	cbz	r0, 8081bce <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
 8081b90:	b1ea      	cbz	r2, 8081bce <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
    *data_len = 0;
 8081b92:	2300      	movs	r3, #0
 8081b94:	6013      	str	r3, [r2, #0]
 8081b96:	4408      	add	r0, r1
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
 8081b98:	2480      	movs	r4, #128	; 0x80
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 8081b9a:	b199      	cbz	r1, 8081bc4 <_ZL25get_one_and_zeros_paddingPhjPj+0x38>
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 8081b9c:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 8081ba0:	3901      	subs	r1, #1
 8081ba2:	2d00      	cmp	r5, #0
 8081ba4:	bf0c      	ite	eq
 8081ba6:	461d      	moveq	r5, r3
 8081ba8:	f043 0501 	orrne.w	r5, r3, #1
 8081bac:	406b      	eors	r3, r5
        *data_len |= ( i - 1 ) * ( done != prev_done );
 8081bae:	fb01 f603 	mul.w	r6, r1, r3
 8081bb2:	6817      	ldr	r7, [r2, #0]
 8081bb4:	433e      	orrs	r6, r7
 8081bb6:	6016      	str	r6, [r2, #0]
        bad ^= input[i - 1] * ( done != prev_done );
 8081bb8:	7806      	ldrb	r6, [r0, #0]
 8081bba:	4373      	muls	r3, r6
 8081bbc:	405c      	eors	r4, r3
 8081bbe:	b2e4      	uxtb	r4, r4
    bad = 0x80;
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 8081bc0:	462b      	mov	r3, r5
 8081bc2:	e7ea      	b.n	8081b9a <_ZL25get_one_and_zeros_paddingPhjPj+0xe>
        *data_len |= ( i - 1 ) * ( done != prev_done );
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8081bc4:	2c00      	cmp	r4, #0
 8081bc6:	4803      	ldr	r0, [pc, #12]	; (8081bd4 <_ZL25get_one_and_zeros_paddingPhjPj+0x48>)
 8081bc8:	bf08      	it	eq
 8081bca:	2000      	moveq	r0, #0
 8081bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8081bce:	4802      	ldr	r0, [pc, #8]	; (8081bd8 <_ZL25get_one_and_zeros_paddingPhjPj+0x4c>)
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );

}
 8081bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081bd2:	bf00      	nop
 8081bd4:	ffff9e00 	.word	0xffff9e00
 8081bd8:	ffff9f00 	.word	0xffff9f00

08081bdc <_ZL17get_zeros_paddingPhjPj>:
        output[i] = 0x00;
}

static int get_zeros_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 8081bdc:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
 8081bde:	b1a8      	cbz	r0, 8081c0c <_ZL17get_zeros_paddingPhjPj+0x30>
 8081be0:	b1a2      	cbz	r2, 8081c0c <_ZL17get_zeros_paddingPhjPj+0x30>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = 0;
 8081be2:	2300      	movs	r3, #0
 8081be4:	6013      	str	r3, [r2, #0]
 8081be6:	4401      	add	r1, r0
    for( i = input_len; i > 0; i-- )
 8081be8:	4281      	cmp	r1, r0
 8081bea:	eba1 0400 	sub.w	r4, r1, r0
 8081bee:	d00f      	beq.n	8081c10 <_ZL17get_zeros_paddingPhjPj+0x34>
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 8081bf0:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 8081bf4:	2d00      	cmp	r5, #0
 8081bf6:	bf0c      	ite	eq
 8081bf8:	461d      	moveq	r5, r3
 8081bfa:	f043 0501 	orrne.w	r5, r3, #1
        *data_len |= i * ( done != prev_done );
 8081bfe:	406b      	eors	r3, r5
 8081c00:	4363      	muls	r3, r4
 8081c02:	6814      	ldr	r4, [r2, #0]
 8081c04:	4323      	orrs	r3, r4
 8081c06:	6013      	str	r3, [r2, #0]

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 8081c08:	462b      	mov	r3, r5
 8081c0a:	e7ed      	b.n	8081be8 <_ZL17get_zeros_paddingPhjPj+0xc>
{
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8081c0c:	4801      	ldr	r0, [pc, #4]	; (8081c14 <_ZL17get_zeros_paddingPhjPj+0x38>)
 8081c0e:	bd30      	pop	{r4, r5, pc}

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 8081c10:	2000      	movs	r0, #0
        done |= ( input[i-1] != 0 );
        *data_len |= i * ( done != prev_done );
    }

    return( 0 );
}
 8081c12:	bd30      	pop	{r4, r5, pc}
 8081c14:	ffff9f00 	.word	0xffff9f00

08081c18 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 8081c18:	4b05      	ldr	r3, [pc, #20]	; (8081c30 <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8081c1a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8081c1e:	b122      	cbz	r2, 8081c2a <mbedtls_cipher_info_from_type+0x12>
 8081c20:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 8081c22:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8081c26:	4281      	cmp	r1, r0
 8081c28:	d1f7      	bne.n	8081c1a <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
 8081c2a:	4610      	mov	r0, r2
 8081c2c:	4770      	bx	lr
 8081c2e:	bf00      	nop
 8081c30:	080916e4 	.word	0x080916e4

08081c34 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 8081c34:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8081c36:	4c08      	ldr	r4, [pc, #32]	; (8081c58 <mbedtls_cipher_info_from_values+0x24>)
 8081c38:	6863      	ldr	r3, [r4, #4]
 8081c3a:	b15b      	cbz	r3, 8081c54 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 8081c3c:	699d      	ldr	r5, [r3, #24]
 8081c3e:	782d      	ldrb	r5, [r5, #0]
 8081c40:	4285      	cmp	r5, r0
 8081c42:	d105      	bne.n	8081c50 <mbedtls_cipher_info_from_values+0x1c>
 8081c44:	685d      	ldr	r5, [r3, #4]
 8081c46:	428d      	cmp	r5, r1
 8081c48:	d102      	bne.n	8081c50 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 8081c4a:	785d      	ldrb	r5, [r3, #1]
 8081c4c:	4295      	cmp	r5, r2
 8081c4e:	d001      	beq.n	8081c54 <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8081c50:	3408      	adds	r4, #8
 8081c52:	e7f1      	b.n	8081c38 <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 8081c54:	4618      	mov	r0, r3
 8081c56:	bd30      	pop	{r4, r5, pc}
 8081c58:	080916dc 	.word	0x080916dc

08081c5c <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8081c5c:	2240      	movs	r2, #64	; 0x40
 8081c5e:	2100      	movs	r1, #0
 8081c60:	f00e bced 	b.w	809063e <memset>

08081c64 <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 8081c64:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8081c66:	4604      	mov	r4, r0
 8081c68:	b168      	cbz	r0, 8081c86 <mbedtls_cipher_free+0x22>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 8081c6a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8081c6c:	b118      	cbz	r0, 8081c76 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8081c6e:	6823      	ldr	r3, [r4, #0]
 8081c70:	699b      	ldr	r3, [r3, #24]
 8081c72:	699b      	ldr	r3, [r3, #24]
 8081c74:	4798      	blx	r3
 8081c76:	f104 0240 	add.w	r2, r4, #64	; 0x40
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8081c7a:	2300      	movs	r3, #0
 8081c7c:	4294      	cmp	r4, r2
 8081c7e:	d002      	beq.n	8081c86 <mbedtls_cipher_free+0x22>
 8081c80:	7023      	strb	r3, [r4, #0]
 8081c82:	3401      	adds	r4, #1
 8081c84:	e7fa      	b.n	8081c7c <mbedtls_cipher_free+0x18>
 8081c86:	bd10      	pop	{r4, pc}

08081c88 <mbedtls_cipher_setkey>:
    return( 0 );
}

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
 8081c88:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 8081c8a:	b1c8      	cbz	r0, 8081cc0 <mbedtls_cipher_setkey+0x38>
 8081c8c:	6804      	ldr	r4, [r0, #0]
 8081c8e:	b1bc      	cbz	r4, 8081cc0 <mbedtls_cipher_setkey+0x38>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8081c90:	6925      	ldr	r5, [r4, #16]
 8081c92:	07ad      	lsls	r5, r5, #30
 8081c94:	d402      	bmi.n	8081c9c <mbedtls_cipher_setkey+0x14>
 8081c96:	6865      	ldr	r5, [r4, #4]
 8081c98:	4295      	cmp	r5, r2
 8081c9a:	d111      	bne.n	8081cc0 <mbedtls_cipher_setkey+0x38>
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8081c9c:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 8081c9e:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 8081ca0:	7203      	strb	r3, [r0, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8081ca2:	d004      	beq.n	8081cae <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8081ca4:	7865      	ldrb	r5, [r4, #1]
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8081ca6:	2d03      	cmp	r5, #3
 8081ca8:	d001      	beq.n	8081cae <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8081caa:	2d05      	cmp	r5, #5
 8081cac:	d102      	bne.n	8081cb4 <mbedtls_cipher_setkey+0x2c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8081cae:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 8081cb0:	68db      	ldr	r3, [r3, #12]
 8081cb2:	e002      	b.n	8081cba <mbedtls_cipher_setkey+0x32>
    }

    if( MBEDTLS_DECRYPT == operation )
 8081cb4:	b923      	cbnz	r3, 8081cc0 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8081cb6:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 8081cb8:	691b      	ldr	r3, [r3, #16]
 8081cba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8081cbc:	bc30      	pop	{r4, r5}
                ctx->key_bitlen );
    }

    if( MBEDTLS_DECRYPT == operation )
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                ctx->key_bitlen );
 8081cbe:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8081cc0:	4801      	ldr	r0, [pc, #4]	; (8081cc8 <mbedtls_cipher_setkey+0x40>)
 8081cc2:	bc30      	pop	{r4, r5}
 8081cc4:	4770      	bx	lr
 8081cc6:	bf00      	nop
 8081cc8:	ffff9f00 	.word	0xffff9f00

08081ccc <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
 8081ccc:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 8081cce:	4604      	mov	r4, r0
 8081cd0:	b1b0      	cbz	r0, 8081d00 <mbedtls_cipher_set_iv+0x34>
 8081cd2:	6803      	ldr	r3, [r0, #0]
 8081cd4:	b1a3      	cbz	r3, 8081d00 <mbedtls_cipher_set_iv+0x34>
 8081cd6:	b199      	cbz	r1, 8081d00 <mbedtls_cipher_set_iv+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 8081cd8:	2a10      	cmp	r2, #16
 8081cda:	d80f      	bhi.n	8081cfc <mbedtls_cipher_set_iv+0x30>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 8081cdc:	6918      	ldr	r0, [r3, #16]
 8081cde:	07c0      	lsls	r0, r0, #31
 8081ce0:	d403      	bmi.n	8081cea <mbedtls_cipher_set_iv+0x1e>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 8081ce2:	68dd      	ldr	r5, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 8081ce4:	42aa      	cmp	r2, r5
 8081ce6:	d201      	bcs.n	8081cec <mbedtls_cipher_set_iv+0x20>
 8081ce8:	e00a      	b.n	8081d00 <mbedtls_cipher_set_iv+0x34>
 8081cea:	4615      	mov	r5, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    memcpy( ctx->iv, iv, actual_iv_size );
 8081cec:	462a      	mov	r2, r5
 8081cee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8081cf2:	f00e fc7e 	bl	80905f2 <memcpy>
    ctx->iv_size = actual_iv_size;
 8081cf6:	63a5      	str	r5, [r4, #56]	; 0x38

    return( 0 );
 8081cf8:	2000      	movs	r0, #0
 8081cfa:	bd38      	pop	{r3, r4, r5, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8081cfc:	4801      	ldr	r0, [pc, #4]	; (8081d04 <mbedtls_cipher_set_iv+0x38>)
 8081cfe:	bd38      	pop	{r3, r4, r5, pc}
                   const unsigned char *iv, size_t iv_len )
{
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8081d00:	4801      	ldr	r0, [pc, #4]	; (8081d08 <mbedtls_cipher_set_iv+0x3c>)

    memcpy( ctx->iv, iv, actual_iv_size );
    ctx->iv_size = actual_iv_size;

    return( 0 );
}
 8081d02:	bd38      	pop	{r3, r4, r5, pc}
 8081d04:	ffff9f80 	.word	0xffff9f80
 8081d08:	ffff9f00 	.word	0xffff9f00

08081d0c <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8081d0c:	b128      	cbz	r0, 8081d1a <mbedtls_cipher_reset+0xe>
 8081d0e:	6803      	ldr	r3, [r0, #0]
 8081d10:	b11b      	cbz	r3, 8081d1a <mbedtls_cipher_reset+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
 8081d12:	2300      	movs	r3, #0
 8081d14:	6243      	str	r3, [r0, #36]	; 0x24

    return( 0 );
 8081d16:	4618      	mov	r0, r3
 8081d18:	4770      	bx	lr
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8081d1a:	4801      	ldr	r0, [pc, #4]	; (8081d20 <mbedtls_cipher_reset+0x14>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
 8081d1c:	4770      	bx	lr
 8081d1e:	bf00      	nop
 8081d20:	ffff9f00 	.word	0xffff9f00

08081d24 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 8081d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081d28:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8081d2c:	460f      	mov	r7, r1
 8081d2e:	4615      	mov	r5, r2
 8081d30:	4699      	mov	r9, r3
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8081d32:	4604      	mov	r4, r0
 8081d34:	b908      	cbnz	r0, 8081d3a <mbedtls_cipher_update+0x16>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8081d36:	485c      	ldr	r0, [pc, #368]	; (8081ea8 <mbedtls_cipher_update+0x184>)
 8081d38:	e0b2      	b.n	8081ea0 <mbedtls_cipher_update+0x17c>
                   size_t ilen, unsigned char *output, size_t *olen )
{
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8081d3a:	6803      	ldr	r3, [r0, #0]
 8081d3c:	2b00      	cmp	r3, #0
 8081d3e:	d0fa      	beq.n	8081d36 <mbedtls_cipher_update+0x12>
 8081d40:	f1b8 0f00 	cmp.w	r8, #0
 8081d44:	d0f7      	beq.n	8081d36 <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
 8081d46:	2300      	movs	r3, #0
 8081d48:	f8c8 3000 	str.w	r3, [r8]
    block_size = mbedtls_cipher_get_block_size( ctx );
 8081d4c:	f7ff fe86 	bl	8081a5c <mbedtls_cipher_get_block_size>

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8081d50:	6823      	ldr	r3, [r4, #0]
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );
 8081d52:	4606      	mov	r6, r0

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8081d54:	785b      	ldrb	r3, [r3, #1]
 8081d56:	2b01      	cmp	r3, #1
 8081d58:	d110      	bne.n	8081d7c <mbedtls_cipher_update+0x58>
    {
        if( ilen != block_size )
 8081d5a:	4290      	cmp	r0, r2
 8081d5c:	d17d      	bne.n	8081e5a <mbedtls_cipher_update+0x136>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 8081d5e:	f8c8 0000 	str.w	r0, [r8]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8081d62:	6823      	ldr	r3, [r4, #0]
 8081d64:	460a      	mov	r2, r1
 8081d66:	699b      	ldr	r3, [r3, #24]
 8081d68:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8081d6c:	685d      	ldr	r5, [r3, #4]
 8081d6e:	464b      	mov	r3, r9
 8081d70:	46ac      	mov	ip, r5
 8081d72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8081d74:	b003      	add	sp, #12
 8081d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8081d7a:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8081d7c:	2b06      	cmp	r3, #6
 8081d7e:	d10a      	bne.n	8081d96 <mbedtls_cipher_update+0x72>
    {
        *olen = ilen;
 8081d80:	f8c8 2000 	str.w	r2, [r8]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 8081d84:	464b      	mov	r3, r9
 8081d86:	460a      	mov	r2, r1
 8081d88:	4629      	mov	r1, r5
 8081d8a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8081d8c:	b003      	add	sp, #12
 8081d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 8081d92:	f004 b9f1 	b.w	8086178 <mbedtls_gcm_update>
    }
#endif

    if ( 0 == block_size )
 8081d96:	2800      	cmp	r0, #0
 8081d98:	d061      	beq.n	8081e5e <mbedtls_cipher_update+0x13a>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
    }

    if( input == output &&
 8081d9a:	4549      	cmp	r1, r9
 8081d9c:	d108      	bne.n	8081db0 <mbedtls_cipher_update+0x8c>
 8081d9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8081da0:	2a00      	cmp	r2, #0
 8081da2:	d1c8      	bne.n	8081d36 <mbedtls_cipher_update+0x12>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8081da4:	fbb5 f2f0 	udiv	r2, r5, r0
 8081da8:	fb00 5212 	mls	r2, r0, r2, r5
 8081dac:	2a00      	cmp	r2, #0
 8081dae:	d1c2      	bne.n	8081d36 <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8081db0:	2b02      	cmp	r3, #2
 8081db2:	d156      	bne.n	8081e62 <mbedtls_cipher_update+0x13e>
        size_t copy_len = 0;

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8081db4:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8081db8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8081dba:	b92b      	cbnz	r3, 8081dc8 <mbedtls_cipher_update+0xa4>
 8081dbc:	68e3      	ldr	r3, [r4, #12]
 8081dbe:	b12b      	cbz	r3, 8081dcc <mbedtls_cipher_update+0xa8>
 8081dc0:	1a33      	subs	r3, r6, r0
 8081dc2:	429d      	cmp	r5, r3
 8081dc4:	d80f      	bhi.n	8081de6 <mbedtls_cipher_update+0xc2>
 8081dc6:	e004      	b.n	8081dd2 <mbedtls_cipher_update+0xae>
                ilen <= block_size - ctx->unprocessed_len ) ||
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
                ilen < block_size - ctx->unprocessed_len ) ||
 8081dc8:	2b01      	cmp	r3, #1
 8081dca:	d10c      	bne.n	8081de6 <mbedtls_cipher_update+0xc2>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8081dcc:	1a33      	subs	r3, r6, r0
 8081dce:	429d      	cmp	r5, r3
 8081dd0:	d209      	bcs.n	8081de6 <mbedtls_cipher_update+0xc2>
                ilen < block_size - ctx->unprocessed_len ) )
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    ilen );
 8081dd2:	4420      	add	r0, r4
 8081dd4:	462a      	mov	r2, r5
 8081dd6:	4639      	mov	r1, r7
 8081dd8:	3014      	adds	r0, #20
 8081dda:	f00e fc0a 	bl	80905f2 <memcpy>

            ctx->unprocessed_len += ilen;
 8081dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8081de0:	441d      	add	r5, r3
 8081de2:	6265      	str	r5, [r4, #36]	; 0x24
 8081de4:	e037      	b.n	8081e56 <mbedtls_cipher_update+0x132>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 8081de6:	b310      	cbz	r0, 8081e2e <mbedtls_cipher_update+0x10a>
        {
            copy_len = block_size - ctx->unprocessed_len;
 8081de8:	ebc0 0a06 	rsb	sl, r0, r6

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    copy_len );
 8081dec:	4420      	add	r0, r4
 8081dee:	4652      	mov	r2, sl
 8081df0:	4639      	mov	r1, r7
 8081df2:	3014      	adds	r0, #20
 8081df4:	f00e fbfd 	bl	80905f2 <memcpy>

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8081df8:	4623      	mov	r3, r4
 8081dfa:	f853 2b14 	ldr.w	r2, [r3], #20
 8081dfe:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8081e02:	6992      	ldr	r2, [r2, #24]
 8081e04:	e88d 0208 	stmia.w	sp, {r3, r9}
 8081e08:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8081e0c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8081e10:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8081e12:	4632      	mov	r2, r6
 8081e14:	47d8      	blx	fp
 8081e16:	2800      	cmp	r0, #0
 8081e18:	d142      	bne.n	8081ea0 <mbedtls_cipher_update+0x17c>
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 8081e1a:	f8d8 3000 	ldr.w	r3, [r8]
            output += block_size;
 8081e1e:	44b1      	add	r9, r6
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 8081e20:	4433      	add	r3, r6
 8081e22:	f8c8 3000 	str.w	r3, [r8]
            output += block_size;
            ctx->unprocessed_len = 0;

            input += copy_len;
 8081e26:	4457      	add	r7, sl
                return( ret );
            }

            *olen += block_size;
            output += block_size;
            ctx->unprocessed_len = 0;
 8081e28:	6260      	str	r0, [r4, #36]	; 0x24

            input += copy_len;
            ilen -= copy_len;
 8081e2a:	ebca 0505 	rsb	r5, sl, r5
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 8081e2e:	b195      	cbz	r5, 8081e56 <mbedtls_cipher_update+0x132>

            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 8081e30:	fbb5 faf6 	udiv	sl, r5, r6
 8081e34:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 &&
 8081e38:	f1ba 0f00 	cmp.w	sl, #0
 8081e3c:	d013      	beq.n	8081e66 <mbedtls_cipher_update+0x142>
                NULL != ctx->add_padding)
            {
                copy_len = block_size;
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8081e3e:	ebca 0505 	rsb	r5, sl, r5
                    copy_len );
 8081e42:	4652      	mov	r2, sl
 8081e44:	1979      	adds	r1, r7, r5
 8081e46:	f104 0014 	add.w	r0, r4, #20
 8081e4a:	f00e fbd2 	bl	80905f2 <memcpy>

            ctx->unprocessed_len += copy_len;
 8081e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8081e50:	4453      	add	r3, sl
 8081e52:	6263      	str	r3, [r4, #36]	; 0x24
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 8081e54:	b995      	cbnz	r5, 8081e7c <mbedtls_cipher_update+0x158>
            }

            *olen += ilen;
        }

        return( 0 );
 8081e56:	2000      	movs	r0, #0
 8081e58:	e022      	b.n	8081ea0 <mbedtls_cipher_update+0x17c>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8081e5a:	4814      	ldr	r0, [pc, #80]	; (8081eac <mbedtls_cipher_update+0x188>)
 8081e5c:	e020      	b.n	8081ea0 <mbedtls_cipher_update+0x17c>
    }
#endif

    if ( 0 == block_size )
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 8081e5e:	4814      	ldr	r0, [pc, #80]	; (8081eb0 <mbedtls_cipher_update+0x18c>)
 8081e60:	e01e      	b.n	8081ea0 <mbedtls_cipher_update+0x17c>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8081e62:	4814      	ldr	r0, [pc, #80]	; (8081eb4 <mbedtls_cipher_update+0x190>)
 8081e64:	e01c      	b.n	8081ea0 <mbedtls_cipher_update+0x17c>
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
            if( copy_len == 0 &&
 8081e66:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8081e6a:	2b00      	cmp	r3, #0
 8081e6c:	d1e7      	bne.n	8081e3e <mbedtls_cipher_update+0x11a>
                ctx->operation == MBEDTLS_DECRYPT &&
 8081e6e:	68e3      	ldr	r3, [r4, #12]
 8081e70:	2b00      	cmp	r3, #0
 8081e72:	bf0c      	ite	eq
 8081e74:	f04f 0a00 	moveq.w	sl, #0
 8081e78:	46b2      	movne	sl, r6
 8081e7a:	e7e0      	b.n	8081e3e <mbedtls_cipher_update+0x11a>
        /*
         * Process remaining full blocks
         */
        if( ilen )
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8081e7c:	6823      	ldr	r3, [r4, #0]
 8081e7e:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8081e82:	699b      	ldr	r3, [r3, #24]
 8081e84:	e88d 0280 	stmia.w	sp, {r7, r9}
 8081e88:	462a      	mov	r2, r5
 8081e8a:	689e      	ldr	r6, [r3, #8]
 8081e8c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8081e8e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8081e92:	47b0      	blx	r6
 8081e94:	b920      	cbnz	r0, 8081ea0 <mbedtls_cipher_update+0x17c>
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
            {
                return( ret );
            }

            *olen += ilen;
 8081e96:	f8d8 3000 	ldr.w	r3, [r8]
 8081e9a:	441d      	add	r5, r3
 8081e9c:	f8c8 5000 	str.w	r5, [r8]
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8081ea0:	b003      	add	sp, #12
 8081ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081ea6:	bf00      	nop
 8081ea8:	ffff9f00 	.word	0xffff9f00
 8081eac:	ffff9d80 	.word	0xffff9d80
 8081eb0:	ffff9c80 	.word	0xffff9c80
 8081eb4:	ffff9f80 	.word	0xffff9f80

08081eb8 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 8081eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8081eba:	460e      	mov	r6, r1
 8081ebc:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8081ebe:	4604      	mov	r4, r0
 8081ec0:	2800      	cmp	r0, #0
 8081ec2:	d052      	beq.n	8081f6a <mbedtls_cipher_finish+0xb2>
 8081ec4:	6803      	ldr	r3, [r0, #0]
 8081ec6:	2b00      	cmp	r3, #0
 8081ec8:	d04f      	beq.n	8081f6a <mbedtls_cipher_finish+0xb2>
 8081eca:	2a00      	cmp	r2, #0
 8081ecc:	d04d      	beq.n	8081f6a <mbedtls_cipher_finish+0xb2>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 8081ece:	2300      	movs	r3, #0
 8081ed0:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8081ed2:	6807      	ldr	r7, [r0, #0]
 8081ed4:	787a      	ldrb	r2, [r7, #1]
 8081ed6:	2a03      	cmp	r2, #3
 8081ed8:	d04d      	beq.n	8081f76 <mbedtls_cipher_finish+0xbe>
 8081eda:	1f51      	subs	r1, r2, #5
 8081edc:	2902      	cmp	r1, #2
 8081ede:	d94a      	bls.n	8081f76 <mbedtls_cipher_finish+0xbe>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 8081ee0:	2a01      	cmp	r2, #1
 8081ee2:	d101      	bne.n	8081ee8 <mbedtls_cipher_finish+0x30>
    {
        if( ctx->unprocessed_len != 0 )
 8081ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8081ee6:	e016      	b.n	8081f16 <mbedtls_cipher_finish+0x5e>

        return( 0 );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 8081ee8:	2a02      	cmp	r2, #2
 8081eea:	d140      	bne.n	8081f6e <mbedtls_cipher_finish+0xb6>
    {
        int ret = 0;

        if( MBEDTLS_ENCRYPT == ctx->operation )
 8081eec:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8081ef0:	2b01      	cmp	r3, #1
 8081ef2:	d109      	bne.n	8081f08 <mbedtls_cipher_finish+0x50>
        {
            /* check for 'no padding' mode */
            if( NULL == ctx->add_padding )
 8081ef4:	68c3      	ldr	r3, [r0, #12]
 8081ef6:	2b00      	cmp	r3, #0
 8081ef8:	d0f4      	beq.n	8081ee4 <mbedtls_cipher_finish+0x2c>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 8081efa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

                return( 0 );
            }

            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 8081efc:	3014      	adds	r0, #20
 8081efe:	b901      	cbnz	r1, 8081f02 <mbedtls_cipher_finish+0x4a>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 8081f00:	68f9      	ldr	r1, [r7, #12]
                    ctx->unprocessed_len );
 8081f02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8081f04:	4798      	blx	r3
 8081f06:	e00b      	b.n	8081f20 <mbedtls_cipher_finish+0x68>
        }
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 8081f08:	f7ff fda8 	bl	8081a5c <mbedtls_cipher_get_block_size>
 8081f0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8081f0e:	4298      	cmp	r0, r3
 8081f10:	d006      	beq.n	8081f20 <mbedtls_cipher_finish+0x68>
        {
            /*
             * For decrypt operations, expect a full block,
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 8081f12:	68e2      	ldr	r2, [r4, #12]
 8081f14:	bb6a      	cbnz	r2, 8081f72 <mbedtls_cipher_finish+0xba>
    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
    {
        if( ctx->unprocessed_len != 0 )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        return( 0 );
 8081f16:	2b00      	cmp	r3, #0
 8081f18:	4818      	ldr	r0, [pc, #96]	; (8081f7c <mbedtls_cipher_finish+0xc4>)
 8081f1a:	bf08      	it	eq
 8081f1c:	2000      	moveq	r0, #0
 8081f1e:	e02b      	b.n	8081f78 <mbedtls_cipher_finish+0xc0>

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8081f20:	4620      	mov	r0, r4
 8081f22:	f7ff fd9b 	bl	8081a5c <mbedtls_cipher_get_block_size>
 8081f26:	4623      	mov	r3, r4
 8081f28:	f853 2b14 	ldr.w	r2, [r3], #20
 8081f2c:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8081f30:	6992      	ldr	r2, [r2, #24]
 8081f32:	e88d 0048 	stmia.w	sp, {r3, r6}
 8081f36:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8081f3a:	6897      	ldr	r7, [r2, #8]
 8081f3c:	4602      	mov	r2, r0
 8081f3e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8081f40:	47b8      	blx	r7
 8081f42:	4603      	mov	r3, r0
 8081f44:	b9b8      	cbnz	r0, 8081f76 <mbedtls_cipher_finish+0xbe>
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 8081f46:	f994 2008 	ldrsb.w	r2, [r4, #8]
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8081f4a:	4620      	mov	r0, r4
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 8081f4c:	b94a      	cbnz	r2, 8081f62 <mbedtls_cipher_finish+0xaa>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8081f4e:	f7ff fd85 	bl	8081a5c <mbedtls_cipher_get_block_size>
                                     olen );
 8081f52:	462a      	mov	r2, r5
 8081f54:	4601      	mov	r1, r0
 8081f56:	4630      	mov	r0, r6
 8081f58:	6923      	ldr	r3, [r4, #16]
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8081f5a:	b003      	add	sp, #12
 8081f5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
                                     olen );
 8081f60:	4718      	bx	r3

        /* Set output size for encryption */
        *olen = mbedtls_cipher_get_block_size( ctx );
 8081f62:	f7ff fd7b 	bl	8081a5c <mbedtls_cipher_get_block_size>
 8081f66:	6028      	str	r0, [r5, #0]
 8081f68:	e005      	b.n	8081f76 <mbedtls_cipher_finish+0xbe>

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8081f6a:	4805      	ldr	r0, [pc, #20]	; (8081f80 <mbedtls_cipher_finish+0xc8>)
 8081f6c:	e004      	b.n	8081f78 <mbedtls_cipher_finish+0xc0>
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8081f6e:	4805      	ldr	r0, [pc, #20]	; (8081f84 <mbedtls_cipher_finish+0xcc>)
 8081f70:	e002      	b.n	8081f78 <mbedtls_cipher_finish+0xc0>
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8081f72:	4802      	ldr	r0, [pc, #8]	; (8081f7c <mbedtls_cipher_finish+0xc4>)
 8081f74:	e000      	b.n	8081f78 <mbedtls_cipher_finish+0xc0>
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8081f76:	4618      	mov	r0, r3
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8081f78:	b003      	add	sp, #12
 8081f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081f7c:	ffff9d80 	.word	0xffff9d80
 8081f80:	ffff9f00 	.word	0xffff9f00
 8081f84:	ffff9f80 	.word	0xffff9f80

08081f88 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8081f88:	b308      	cbz	r0, 8081fce <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8081f8a:	6803      	ldr	r3, [r0, #0]
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8081f8c:	785b      	ldrb	r3, [r3, #1]
 8081f8e:	2b02      	cmp	r3, #2
 8081f90:	d11d      	bne.n	8081fce <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 8081f92:	2904      	cmp	r1, #4
 8081f94:	d81d      	bhi.n	8081fd2 <mbedtls_cipher_set_padding_mode+0x4a>
 8081f96:	e8df f001 	tbb	[pc, r1]
 8081f9a:	0703      	.short	0x0703
 8081f9c:	110d      	.short	0x110d
 8081f9e:	15          	.byte	0x15
 8081f9f:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 8081fa0:	4b0d      	ldr	r3, [pc, #52]	; (8081fd8 <mbedtls_cipher_set_padding_mode+0x50>)
 8081fa2:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 8081fa4:	4b0d      	ldr	r3, [pc, #52]	; (8081fdc <mbedtls_cipher_set_padding_mode+0x54>)
 8081fa6:	e002      	b.n	8081fae <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
 8081fa8:	4b0d      	ldr	r3, [pc, #52]	; (8081fe0 <mbedtls_cipher_set_padding_mode+0x58>)
 8081faa:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 8081fac:	4b0d      	ldr	r3, [pc, #52]	; (8081fe4 <mbedtls_cipher_set_padding_mode+0x5c>)
 8081fae:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8081fb0:	2000      	movs	r0, #0
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
        break;
 8081fb2:	4770      	bx	lr
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)
    case MBEDTLS_PADDING_ZEROS_AND_LEN:
        ctx->add_padding = add_zeros_and_len_padding;
 8081fb4:	4b0c      	ldr	r3, [pc, #48]	; (8081fe8 <mbedtls_cipher_set_padding_mode+0x60>)
 8081fb6:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 8081fb8:	4b0c      	ldr	r3, [pc, #48]	; (8081fec <mbedtls_cipher_set_padding_mode+0x64>)
 8081fba:	e7f8      	b.n	8081fae <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)
    case MBEDTLS_PADDING_ZEROS:
        ctx->add_padding = add_zeros_padding;
 8081fbc:	4b0c      	ldr	r3, [pc, #48]	; (8081ff0 <mbedtls_cipher_set_padding_mode+0x68>)
 8081fbe:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 8081fc0:	4b0c      	ldr	r3, [pc, #48]	; (8081ff4 <mbedtls_cipher_set_padding_mode+0x6c>)
 8081fc2:	e7f4      	b.n	8081fae <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
 8081fc4:	4a0c      	ldr	r2, [pc, #48]	; (8081ff8 <mbedtls_cipher_set_padding_mode+0x70>)
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 8081fc6:	2300      	movs	r3, #0
 8081fc8:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 8081fca:	6102      	str	r2, [r0, #16]
 8081fcc:	e7f0      	b.n	8081fb0 <mbedtls_cipher_set_padding_mode+0x28>
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8081fce:	480b      	ldr	r0, [pc, #44]	; (8081ffc <mbedtls_cipher_set_padding_mode+0x74>)
 8081fd0:	4770      	bx	lr
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
        break;

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8081fd2:	480b      	ldr	r0, [pc, #44]	; (8082000 <mbedtls_cipher_set_padding_mode+0x78>)
    }

    return( 0 );
}
 8081fd4:	4770      	bx	lr
 8081fd6:	bf00      	nop
 8081fd8:	08081a67 	.word	0x08081a67
 8081fdc:	08081a81 	.word	0x08081a81
 8081fe0:	08081ad5 	.word	0x08081ad5
 8081fe4:	08081b8d 	.word	0x08081b8d
 8081fe8:	08081af1 	.word	0x08081af1
 8081fec:	08081b15 	.word	0x08081b15
 8081ff0:	08081b65 	.word	0x08081b65
 8081ff4:	08081bdd 	.word	0x08081bdd
 8081ff8:	08081b79 	.word	0x08081b79
 8081ffc:	ffff9f00 	.word	0xffff9f00
 8082000:	ffff9f80 	.word	0xffff9f80

08082004 <mbedtls_cipher_setup>:

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 8082004:	b538      	push	{r3, r4, r5, lr}
 8082006:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 8082008:	460d      	mov	r5, r1
 808200a:	b181      	cbz	r1, 808202e <mbedtls_cipher_setup+0x2a>
 808200c:	b178      	cbz	r0, 808202e <mbedtls_cipher_setup+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 808200e:	2240      	movs	r2, #64	; 0x40
 8082010:	2100      	movs	r1, #0
 8082012:	f00e fb14 	bl	809063e <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8082016:	69ab      	ldr	r3, [r5, #24]
 8082018:	695b      	ldr	r3, [r3, #20]
 808201a:	4798      	blx	r3
 808201c:	63e0      	str	r0, [r4, #60]	; 0x3c
 808201e:	b140      	cbz	r0, 8082032 <mbedtls_cipher_setup+0x2e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 8082020:	6025      	str	r5, [r4, #0]
#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
    /*
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 8082022:	2100      	movs	r1, #0
 8082024:	4620      	mov	r0, r4
 8082026:	f7ff ffaf 	bl	8081f88 <mbedtls_cipher_set_padding_mode>
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 808202a:	2000      	movs	r0, #0
 808202c:	bd38      	pop	{r3, r4, r5, pc}
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    if( NULL == cipher_info || NULL == ctx )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 808202e:	4802      	ldr	r0, [pc, #8]	; (8082038 <mbedtls_cipher_setup+0x34>)
 8082030:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8082032:	4802      	ldr	r0, [pc, #8]	; (808203c <mbedtls_cipher_setup+0x38>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 8082034:	bd38      	pop	{r3, r4, r5, pc}
 8082036:	bf00      	nop
 8082038:	ffff9f00 	.word	0xffff9f00
 808203c:	ffff9e80 	.word	0xffff9e80

08082040 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 8082040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082042:	b085      	sub	sp, #20
 8082044:	4605      	mov	r5, r0
 8082046:	461f      	mov	r7, r3
 8082048:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 808204a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 808204c:	f7ff fe3e 	bl	8081ccc <mbedtls_cipher_set_iv>
 8082050:	b9b0      	cbnz	r0, 8082080 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 8082052:	4628      	mov	r0, r5
 8082054:	f7ff fe5a 	bl	8081d0c <mbedtls_cipher_reset>
 8082058:	b990      	cbnz	r0, 8082080 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 808205a:	9400      	str	r4, [sp, #0]
 808205c:	4633      	mov	r3, r6
 808205e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8082060:	4639      	mov	r1, r7
 8082062:	4628      	mov	r0, r5
 8082064:	f7ff fe5e 	bl	8081d24 <mbedtls_cipher_update>
 8082068:	b950      	cbnz	r0, 8082080 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 808206a:	6821      	ldr	r1, [r4, #0]
 808206c:	aa03      	add	r2, sp, #12
 808206e:	4431      	add	r1, r6
 8082070:	4628      	mov	r0, r5
 8082072:	f7ff ff21 	bl	8081eb8 <mbedtls_cipher_finish>
 8082076:	b918      	cbnz	r0, 8082080 <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 8082078:	6822      	ldr	r2, [r4, #0]
 808207a:	9b03      	ldr	r3, [sp, #12]
 808207c:	4413      	add	r3, r2
 808207e:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8082080:	b005      	add	sp, #20
 8082082:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082084 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8082084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8082088:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 808208a:	4614      	mov	r4, r2
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 808208c:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 808208e:	9d07      	ldr	r5, [sp, #28]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8082090:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8082092:	9e08      	ldr	r6, [sp, #32]
 8082094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8082096:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 808209a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 808209e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80820a2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80820a6:	d112      	bne.n	80820ce <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
 80820a8:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 80820ac:	9308      	str	r3, [sp, #32]
 80820ae:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80820b2:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80820b6:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80820ba:	960a      	str	r6, [sp, #40]	; 0x28
 80820bc:	9509      	str	r5, [sp, #36]	; 0x24
 80820be:	9407      	str	r4, [sp, #28]
 80820c0:	460b      	mov	r3, r1
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80820c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 80820c6:	2101      	movs	r1, #1
 80820c8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80820ca:	f004 b940 	b.w	808634e <mbedtls_gcm_crypt_and_tag>
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80820ce:	4801      	ldr	r0, [pc, #4]	; (80820d4 <mbedtls_cipher_auth_encrypt+0x50>)
 80820d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80820d4:	ffff9f80 	.word	0xffff9f80

080820d8 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80820d8:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80820da:	6805      	ldr	r5, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80820dc:	b087      	sub	sp, #28
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80820de:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80820e0:	460c      	mov	r4, r1
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80820e2:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80820e4:	990c      	ldr	r1, [sp, #48]	; 0x30
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80820e6:	d117      	bne.n	8082118 <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
 80820e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80820ea:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );
 80820ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80820ee:	9505      	str	r5, [sp, #20]
 80820f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80820f2:	9504      	str	r5, [sp, #16]
 80820f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80820f6:	9503      	str	r5, [sp, #12]
 80820f8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80820fa:	9502      	str	r5, [sp, #8]
 80820fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80820fe:	e88d 0028 	stmia.w	sp, {r3, r5}
 8082102:	4613      	mov	r3, r2
 8082104:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8082106:	4622      	mov	r2, r4
 8082108:	f004 f946 	bl	8086398 <mbedtls_gcm_auth_decrypt>

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 808210c:	4b04      	ldr	r3, [pc, #16]	; (8082120 <mbedtls_cipher_auth_decrypt+0x48>)
 808210e:	f110 0f12 	cmn.w	r0, #18
 8082112:	bf08      	it	eq
 8082114:	4618      	moveq	r0, r3
 8082116:	e000      	b.n	808211a <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8082118:	4802      	ldr	r0, [pc, #8]	; (8082124 <mbedtls_cipher_auth_decrypt+0x4c>)
}
 808211a:	b007      	add	sp, #28
 808211c:	bd30      	pop	{r4, r5, pc}
 808211e:	bf00      	nop
 8082120:	ffff9d00 	.word	0xffff9d00
 8082124:	ffff9f80 	.word	0xffff9f80

08082128 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 8082128:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 808212a:	6803      	ldr	r3, [r0, #0]
 808212c:	1acd      	subs	r5, r1, r3
 808212e:	2d00      	cmp	r5, #0
 8082130:	dc02      	bgt.n	8082138 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8082132:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8082136:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 8082138:	781c      	ldrb	r4, [r3, #0]
 808213a:	f014 0f80 	tst.w	r4, #128	; 0x80
 808213e:	d104      	bne.n	808214a <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
 8082140:	1c5c      	adds	r4, r3, #1
 8082142:	6004      	str	r4, [r0, #0]
 8082144:	781b      	ldrb	r3, [r3, #0]
 8082146:	6013      	str	r3, [r2, #0]
 8082148:	e036      	b.n	80821b8 <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
 808214a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 808214e:	3c01      	subs	r4, #1
 8082150:	2c03      	cmp	r4, #3
 8082152:	d838      	bhi.n	80821c6 <mbedtls_asn1_get_len+0x9e>
 8082154:	e8df f004 	tbb	[pc, r4]
 8082158:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
 808215c:	2d01      	cmp	r5, #1
 808215e:	d0e8      	beq.n	8082132 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
 8082160:	785b      	ldrb	r3, [r3, #1]
 8082162:	6013      	str	r3, [r2, #0]
            (*p) += 2;
 8082164:	6803      	ldr	r3, [r0, #0]
 8082166:	3302      	adds	r3, #2
 8082168:	e025      	b.n	80821b6 <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
 808216a:	2d02      	cmp	r5, #2
 808216c:	dde1      	ble.n	8082132 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 808216e:	785c      	ldrb	r4, [r3, #1]
 8082170:	789b      	ldrb	r3, [r3, #2]
 8082172:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8082176:	6013      	str	r3, [r2, #0]
            (*p) += 3;
 8082178:	6803      	ldr	r3, [r0, #0]
 808217a:	3303      	adds	r3, #3
 808217c:	e01b      	b.n	80821b6 <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
 808217e:	2d03      	cmp	r5, #3
 8082180:	ddd7      	ble.n	8082132 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8082182:	789c      	ldrb	r4, [r3, #2]
 8082184:	785d      	ldrb	r5, [r3, #1]
 8082186:	0224      	lsls	r4, r4, #8
 8082188:	78db      	ldrb	r3, [r3, #3]
 808218a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 808218e:	431c      	orrs	r4, r3
 8082190:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 8082192:	6803      	ldr	r3, [r0, #0]
 8082194:	3304      	adds	r3, #4
 8082196:	e00e      	b.n	80821b6 <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
 8082198:	2d04      	cmp	r5, #4
 808219a:	ddca      	ble.n	8082132 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 808219c:	789c      	ldrb	r4, [r3, #2]
 808219e:	785d      	ldrb	r5, [r3, #1]
 80821a0:	0424      	lsls	r4, r4, #16
 80821a2:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
 80821a6:	791c      	ldrb	r4, [r3, #4]
 80821a8:	78db      	ldrb	r3, [r3, #3]
 80821aa:	432c      	orrs	r4, r5
 80821ac:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80821b0:	6013      	str	r3, [r2, #0]
            (*p) += 5;
 80821b2:	6803      	ldr	r3, [r0, #0]
 80821b4:	3305      	adds	r3, #5
 80821b6:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 80821b8:	6803      	ldr	r3, [r0, #0]
 80821ba:	1ac9      	subs	r1, r1, r3
 80821bc:	6813      	ldr	r3, [r2, #0]
 80821be:	428b      	cmp	r3, r1
 80821c0:	d8b7      	bhi.n	8082132 <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 80821c2:	2000      	movs	r0, #0
 80821c4:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80821c6:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 80821ca:	bd30      	pop	{r4, r5, pc}

080821cc <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 80821cc:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 80821ce:	6804      	ldr	r4, [r0, #0]
 80821d0:	1b0e      	subs	r6, r1, r4
 80821d2:	2e00      	cmp	r6, #0
 80821d4:	dd07      	ble.n	80821e6 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 80821d6:	7826      	ldrb	r6, [r4, #0]
 80821d8:	429e      	cmp	r6, r3
 80821da:	d107      	bne.n	80821ec <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80821dc:	3401      	adds	r4, #1
 80821de:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80821e0:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
 80821e2:	f7ff bfa1 	b.w	8082128 <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80821e6:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80821ea:	e001      	b.n	80821f0 <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80821ec:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80821f0:	bc70      	pop	{r4, r5, r6}
 80821f2:	4770      	bx	lr

080821f4 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80821f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80821f6:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80821f8:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80821fa:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80821fc:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80821fe:	f7ff ffe5 	bl	80821cc <mbedtls_asn1_get_tag>
 8082202:	b970      	cbnz	r0, 8082222 <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
 8082204:	9b01      	ldr	r3, [sp, #4]
 8082206:	2b01      	cmp	r3, #1
 8082208:	d109      	bne.n	808221e <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 808220a:	6823      	ldr	r3, [r4, #0]
 808220c:	781b      	ldrb	r3, [r3, #0]
 808220e:	3300      	adds	r3, #0
 8082210:	bf18      	it	ne
 8082212:	2301      	movne	r3, #1
 8082214:	602b      	str	r3, [r5, #0]
    (*p)++;
 8082216:	6823      	ldr	r3, [r4, #0]
 8082218:	3301      	adds	r3, #1
 808221a:	6023      	str	r3, [r4, #0]

    return( 0 );
 808221c:	e001      	b.n	8082222 <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 808221e:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
 8082222:	b003      	add	sp, #12
 8082224:	bd30      	pop	{r4, r5, pc}

08082226 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8082226:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8082228:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 808222a:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 808222c:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 808222e:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8082230:	f7ff ffcc 	bl	80821cc <mbedtls_asn1_get_tag>
 8082234:	b9c8      	cbnz	r0, 808226a <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8082236:	9b01      	ldr	r3, [sp, #4]
 8082238:	3b01      	subs	r3, #1
 808223a:	2b03      	cmp	r3, #3
 808223c:	d813      	bhi.n	8082266 <mbedtls_asn1_get_int+0x40>
 808223e:	6823      	ldr	r3, [r4, #0]
 8082240:	f993 3000 	ldrsb.w	r3, [r3]
 8082244:	2b00      	cmp	r3, #0
 8082246:	db0e      	blt.n	8082266 <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 8082248:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 808224a:	9801      	ldr	r0, [sp, #4]
 808224c:	1e43      	subs	r3, r0, #1
 808224e:	9301      	str	r3, [sp, #4]
 8082250:	b158      	cbz	r0, 808226a <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
 8082252:	6823      	ldr	r3, [r4, #0]
 8082254:	682a      	ldr	r2, [r5, #0]
 8082256:	781b      	ldrb	r3, [r3, #0]
 8082258:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808225c:	602b      	str	r3, [r5, #0]
        (*p)++;
 808225e:	6823      	ldr	r3, [r4, #0]
 8082260:	3301      	adds	r3, #1
 8082262:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
 8082264:	e7f1      	b.n	808224a <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8082266:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 808226a:	b003      	add	sp, #12
 808226c:	bd30      	pop	{r4, r5, pc}

0808226e <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 808226e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8082270:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8082272:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8082274:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8082276:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8082278:	f7ff ffa8 	bl	80821cc <mbedtls_asn1_get_tag>
 808227c:	b940      	cbnz	r0, 8082290 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 808227e:	9a01      	ldr	r2, [sp, #4]
 8082280:	6821      	ldr	r1, [r4, #0]
 8082282:	4628      	mov	r0, r5
 8082284:	f007 fedd 	bl	808a042 <mbedtls_mpi_read_binary>

    *p += len;
 8082288:	6822      	ldr	r2, [r4, #0]
 808228a:	9b01      	ldr	r3, [sp, #4]
 808228c:	4413      	add	r3, r2
 808228e:	6023      	str	r3, [r4, #0]

    return( ret );
}
 8082290:	b003      	add	sp, #12
 8082292:	bd30      	pop	{r4, r5, pc}

08082294 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8082294:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8082296:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8082298:	4604      	mov	r4, r0
 808229a:	460e      	mov	r6, r1
 808229c:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 808229e:	f7ff ff95 	bl	80821cc <mbedtls_asn1_get_tag>
 80822a2:	b9d8      	cbnz	r0, 80822dc <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 80822a4:	6813      	ldr	r3, [r2, #0]
 80822a6:	b1a3      	cbz	r3, 80822d2 <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 80822a8:	3b01      	subs	r3, #1
 80822aa:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80822ac:	6823      	ldr	r3, [r4, #0]
 80822ae:	781b      	ldrb	r3, [r3, #0]
    if( bs->unused_bits > 7 )
 80822b0:	2b07      	cmp	r3, #7
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80822b2:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
 80822b4:	d810      	bhi.n	80822d8 <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 80822b6:	6823      	ldr	r3, [r4, #0]
 80822b8:	3301      	adds	r3, #1
 80822ba:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 80822bc:	6093      	str	r3, [r2, #8]
    *p += bs->len;
 80822be:	6822      	ldr	r2, [r4, #0]
 80822c0:	682b      	ldr	r3, [r5, #0]
 80822c2:	4413      	add	r3, r2

    if( *p != end )
 80822c4:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 80822c6:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80822c8:	bf14      	ite	ne
 80822ca:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 80822ce:	2000      	moveq	r0, #0
 80822d0:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80822d2:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80822d6:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80822d8:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80822dc:	bd70      	pop	{r4, r5, r6, pc}

080822de <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80822de:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80822e0:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80822e2:	4604      	mov	r4, r0
 80822e4:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80822e6:	f7ff ff71 	bl	80821cc <mbedtls_asn1_get_tag>
 80822ea:	b958      	cbnz	r0, 8082304 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 80822ec:	6813      	ldr	r3, [r2, #0]
 80822ee:	1e5a      	subs	r2, r3, #1
 80822f0:	2b01      	cmp	r3, #1
 80822f2:	602a      	str	r2, [r5, #0]
 80822f4:	d904      	bls.n	8082300 <mbedtls_asn1_get_bitstring_null+0x22>
 80822f6:	6823      	ldr	r3, [r4, #0]
 80822f8:	1c5a      	adds	r2, r3, #1
 80822fa:	6022      	str	r2, [r4, #0]
 80822fc:	7818      	ldrb	r0, [r3, #0]
 80822fe:	b108      	cbz	r0, 8082304 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8082300:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 8082304:	bd38      	pop	{r3, r4, r5, pc}

08082306 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 8082306:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808230a:	4615      	mov	r5, r2
 808230c:	461f      	mov	r7, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808230e:	aa01      	add	r2, sp, #4
 8082310:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 8082312:	4604      	mov	r4, r0
 8082314:	460e      	mov	r6, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8082316:	f7ff ff59 	bl	80821cc <mbedtls_asn1_get_tag>
 808231a:	bb68      	cbnz	r0, 8082378 <mbedtls_asn1_get_sequence_of+0x72>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 808231c:	6822      	ldr	r2, [r4, #0]
 808231e:	9b01      	ldr	r3, [sp, #4]
 8082320:	4413      	add	r3, r2
 8082322:	429e      	cmp	r6, r3
 8082324:	d01d      	beq.n	8082362 <mbedtls_asn1_get_sequence_of+0x5c>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8082326:	f06f 0065 	mvn.w	r0, #101	; 0x65
 808232a:	e025      	b.n	8082378 <mbedtls_asn1_get_sequence_of+0x72>

    while( *p < end )
 808232c:	6823      	ldr	r3, [r4, #0]
 808232e:	429e      	cmp	r6, r3
 8082330:	d91a      	bls.n	8082368 <mbedtls_asn1_get_sequence_of+0x62>
    {
        buf = &(cur->buf);
        buf->tag = **p;
 8082332:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8082334:	4642      	mov	r2, r8
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;
 8082336:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8082338:	4631      	mov	r1, r6
 808233a:	463b      	mov	r3, r7
 808233c:	4620      	mov	r0, r4
 808233e:	f7ff ff45 	bl	80821cc <mbedtls_asn1_get_tag>
 8082342:	b9c8      	cbnz	r0, 8082378 <mbedtls_asn1_get_sequence_of+0x72>
            return( ret );

        buf->p = *p;
 8082344:	6823      	ldr	r3, [r4, #0]
 8082346:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
 8082348:	6822      	ldr	r2, [r4, #0]
 808234a:	686b      	ldr	r3, [r5, #4]
 808234c:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
 808234e:	429e      	cmp	r6, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
 8082350:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 8082352:	d9eb      	bls.n	808232c <mbedtls_asn1_get_sequence_of+0x26>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 8082354:	2110      	movs	r1, #16
 8082356:	2001      	movs	r0, #1
 8082358:	f00e f926 	bl	80905a8 <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
 808235c:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
 808235e:	b148      	cbz	r0, 8082374 <mbedtls_asn1_get_sequence_of+0x6e>
 8082360:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8082362:	f105 0804 	add.w	r8, r5, #4
 8082366:	e7e1      	b.n	808232c <mbedtls_asn1_get_sequence_of+0x26>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8082368:	2000      	movs	r0, #0
 808236a:	60e8      	str	r0, [r5, #12]

    if( *p != end )
 808236c:	6823      	ldr	r3, [r4, #0]
 808236e:	429e      	cmp	r6, r3
 8082370:	d002      	beq.n	8082378 <mbedtls_asn1_get_sequence_of+0x72>
 8082372:	e7d8      	b.n	8082326 <mbedtls_asn1_get_sequence_of+0x20>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8082374:	f06f 0069 	mvn.w	r0, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8082378:	b002      	add	sp, #8
 808237a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808237e <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 808237e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8082380:	4617      	mov	r7, r2
 8082382:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8082384:	aa01      	add	r2, sp, #4
 8082386:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8082388:	4604      	mov	r4, r0
 808238a:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808238c:	f7ff ff1e 	bl	80821cc <mbedtls_asn1_get_tag>
 8082390:	2800      	cmp	r0, #0
 8082392:	d13a      	bne.n	808240a <mbedtls_asn1_get_alg+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 8082394:	6823      	ldr	r3, [r4, #0]
 8082396:	1af6      	subs	r6, r6, r3
 8082398:	2e00      	cmp	r6, #0
 808239a:	dd31      	ble.n	8082400 <mbedtls_asn1_get_alg+0x82>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 808239c:	463a      	mov	r2, r7
 808239e:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80823a0:	4620      	mov	r0, r4
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80823a2:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 80823a6:	6826      	ldr	r6, [r4, #0]
 80823a8:	9b01      	ldr	r3, [sp, #4]
 80823aa:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80823ac:	4631      	mov	r1, r6
 80823ae:	2306      	movs	r3, #6
 80823b0:	f7ff ff0c 	bl	80821cc <mbedtls_asn1_get_tag>
 80823b4:	bb48      	cbnz	r0, 808240a <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    alg->p = *p;
 80823b6:	6823      	ldr	r3, [r4, #0]
 80823b8:	60bb      	str	r3, [r7, #8]
    *p += alg->len;
 80823ba:	6822      	ldr	r2, [r4, #0]
 80823bc:	687b      	ldr	r3, [r7, #4]
 80823be:	18d1      	adds	r1, r2, r3

    if( *p == end )
 80823c0:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
 80823c2:	6021      	str	r1, [r4, #0]

    if( *p == end )
 80823c4:	d106      	bne.n	80823d4 <mbedtls_asn1_get_alg+0x56>
 80823c6:	f105 030c 	add.w	r3, r5, #12
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80823ca:	429d      	cmp	r5, r3
 80823cc:	d016      	beq.n	80823fc <mbedtls_asn1_get_alg+0x7e>
 80823ce:	7028      	strb	r0, [r5, #0]
 80823d0:	3501      	adds	r5, #1
 80823d2:	e7fa      	b.n	80823ca <mbedtls_asn1_get_alg+0x4c>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
 80823d4:	5cd3      	ldrb	r3, [r2, r3]
 80823d6:	462a      	mov	r2, r5
 80823d8:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
 80823dc:	6823      	ldr	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80823de:	4631      	mov	r1, r6
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
    (*p)++;
 80823e0:	3301      	adds	r3, #1
 80823e2:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80823e4:	4620      	mov	r0, r4
 80823e6:	f7ff fe9f 	bl	8082128 <mbedtls_asn1_get_len>
 80823ea:	b970      	cbnz	r0, 808240a <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    params->p = *p;
 80823ec:	6823      	ldr	r3, [r4, #0]
 80823ee:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 80823f0:	6822      	ldr	r2, [r4, #0]
 80823f2:	686b      	ldr	r3, [r5, #4]
 80823f4:	4413      	add	r3, r2

    if( *p != end )
 80823f6:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
 80823f8:	6023      	str	r3, [r4, #0]

    if( *p != end )
 80823fa:	d104      	bne.n	8082406 <mbedtls_asn1_get_alg+0x88>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80823fc:	2000      	movs	r0, #0
 80823fe:	e004      	b.n	808240a <mbedtls_asn1_get_alg+0x8c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8082400:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8082404:	e001      	b.n	808240a <mbedtls_asn1_get_alg+0x8c>

    params->p = *p;
    *p += params->len;

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8082406:	f06f 0065 	mvn.w	r0, #101	; 0x65

    return( 0 );
}
 808240a:	b003      	add	sp, #12
 808240c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808240e <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 808240e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 8082410:	2300      	movs	r3, #0
 8082412:	9301      	str	r3, [sp, #4]
 8082414:	9302      	str	r3, [sp, #8]
 8082416:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 8082418:	ab01      	add	r3, sp, #4
 808241a:	f7ff ffb0 	bl	808237e <mbedtls_asn1_get_alg>
 808241e:	b960      	cbnz	r0, 808243a <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 8082420:	9b01      	ldr	r3, [sp, #4]
 8082422:	2b05      	cmp	r3, #5
 8082424:	d000      	beq.n	8082428 <mbedtls_asn1_get_alg_null+0x1a>
 8082426:	b933      	cbnz	r3, 8082436 <mbedtls_asn1_get_alg_null+0x28>
 8082428:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );

    return( 0 );
 808242a:	2b00      	cmp	r3, #0
 808242c:	bf14      	ite	ne
 808242e:	f06f 0067 	mvnne.w	r0, #103	; 0x67
 8082432:	2000      	moveq	r0, #0
 8082434:	e001      	b.n	808243a <mbedtls_asn1_get_alg_null+0x2c>

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8082436:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 808243a:	b005      	add	sp, #20
 808243c:	f85d fb04 	ldr.w	pc, [sp], #4

08082440 <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
 8082440:	f001 bc04 	b.w	8083c4c <mbedtls_internal_sha1_process>

08082444 <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
 8082444:	f001 bbe2 	b.w	8083c0c <mbedtls_sha1_clone>

08082448 <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
 8082448:	b510      	push	{r4, lr}
 808244a:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 808244c:	f001 fbd4 	bl	8083bf8 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 8082450:	4620      	mov	r0, r4
}
 8082452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
 8082456:	f00c bf85 	b.w	808f364 <free>

0808245a <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
 808245a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 808245c:	215c      	movs	r1, #92	; 0x5c
 808245e:	2001      	movs	r0, #1
 8082460:	f00e f8a2 	bl	80905a8 <calloc>

    if( ctx != NULL )
 8082464:	4604      	mov	r4, r0
 8082466:	b108      	cbz	r0, 808246c <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 8082468:	f001 fbc2 	bl	8083bf0 <mbedtls_sha1_init>

    return( ctx );
}
 808246c:	4620      	mov	r0, r4
 808246e:	bd10      	pop	{r4, pc}

08082470 <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 8082470:	f002 bbd8 	b.w	8084c24 <mbedtls_sha1_finish_ret>

08082474 <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
 8082474:	f002 bb9c 	b.w	8084bb0 <mbedtls_sha1_update_ret>

08082478 <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 8082478:	f001 bbce 	b.w	8083c18 <mbedtls_sha1_starts_ret>

0808247c <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
 808247c:	f7fe bd2c 	b.w	8080ed8 <mbedtls_internal_sha256_process>

08082480 <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
 8082480:	f7fe bcd4 	b.w	8080e2c <mbedtls_sha256_clone>

08082484 <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 8082484:	b510      	push	{r4, lr}
 8082486:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 8082488:	f7fe fcc6 	bl	8080e18 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 808248c:	4620      	mov	r0, r4
}
 808248e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 8082492:	f00c bf67 	b.w	808f364 <free>

08082496 <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 8082496:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8082498:	216c      	movs	r1, #108	; 0x6c
 808249a:	2001      	movs	r0, #1
 808249c:	f00e f884 	bl	80905a8 <calloc>

    if( ctx != NULL )
 80824a0:	4604      	mov	r4, r0
 80824a2:	b108      	cbz	r0, 80824a8 <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 80824a4:	f7fe fcb4 	bl	8080e10 <mbedtls_sha256_init>

    return( ctx );
}
 80824a8:	4620      	mov	r0, r4
 80824aa:	bd10      	pop	{r4, pc}

080824ac <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 80824ac:	2301      	movs	r3, #1
 80824ae:	f7ff b94e 	b.w	808174e <mbedtls_sha256_ret>

080824b2 <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 80824b2:	2300      	movs	r3, #0
 80824b4:	f7ff b94b 	b.w	808174e <mbedtls_sha256_ret>

080824b8 <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
 80824b8:	f7ff b8b2 	b.w	8081620 <mbedtls_sha256_finish_ret>

080824bc <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
 80824bc:	f7ff b876 	b.w	80815ac <mbedtls_sha256_update_ret>

080824c0 <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 80824c0:	2101      	movs	r1, #1
 80824c2:	f7fe bcb9 	b.w	8080e38 <mbedtls_sha256_starts_ret>

080824c6 <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 80824c6:	2100      	movs	r1, #0
 80824c8:	f7fe bcb6 	b.w	8080e38 <mbedtls_sha256_starts_ret>

080824cc <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
 80824cc:	f00a b960 	b.w	808c790 <mbedtls_internal_sha512_process>

080824d0 <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
 80824d0:	f00a b8ba 	b.w	808c648 <mbedtls_sha512_clone>

080824d4 <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
 80824d4:	b510      	push	{r4, lr}
 80824d6:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 80824d8:	f00a f8ac 	bl	808c634 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 80824dc:	4620      	mov	r0, r4
}
 80824de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
 80824e2:	f00c bf3f 	b.w	808f364 <free>

080824e6 <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
 80824e6:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 80824e8:	21d8      	movs	r1, #216	; 0xd8
 80824ea:	2001      	movs	r0, #1
 80824ec:	f00e f85c 	bl	80905a8 <calloc>

    if( ctx != NULL )
 80824f0:	4604      	mov	r4, r0
 80824f2:	b108      	cbz	r0, 80824f8 <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 80824f4:	f00a f89a 	bl	808c62c <mbedtls_sha512_init>

    return( ctx );
}
 80824f8:	4620      	mov	r0, r4
 80824fa:	bd10      	pop	{r4, pc}

080824fc <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 80824fc:	2301      	movs	r3, #1
 80824fe:	f00b b902 	b.w	808d706 <mbedtls_sha512_ret>

08082502 <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 8082502:	2300      	movs	r3, #0
 8082504:	f00b b8ff 	b.w	808d706 <mbedtls_sha512_ret>

08082508 <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
 8082508:	f00a bfca 	b.w	808d4a0 <mbedtls_sha512_finish_ret>

0808250c <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
 808250c:	f00a bf80 	b.w	808d410 <mbedtls_sha512_update_ret>

08082510 <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 8082510:	2101      	movs	r1, #1
 8082512:	f00a b8a1 	b.w	808c658 <mbedtls_sha512_starts_ret>

08082516 <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 8082516:	2100      	movs	r1, #0
 8082518:	f00a b89e 	b.w	808c658 <mbedtls_sha512_starts_ret>

0808251c <_ZL15mbedtls_zeroizePvj>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808251c:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 808251e:	2300      	movs	r3, #0
 8082520:	4288      	cmp	r0, r1
 8082522:	d002      	beq.n	808252a <_ZL15mbedtls_zeroizePvj+0xe>
 8082524:	7003      	strb	r3, [r0, #0]
 8082526:	3001      	adds	r0, #1
 8082528:	e7fa      	b.n	8082520 <_ZL15mbedtls_zeroizePvj+0x4>
 808252a:	4770      	bx	lr

0808252c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 808252c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082530:	b095      	sub	sp, #84	; 0x54
 8082532:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8082534:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8082536:	4607      	mov	r7, r0
 8082538:	460c      	mov	r4, r1
 808253a:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 808253c:	2100      	movs	r1, #0
 808253e:	2240      	movs	r2, #64	; 0x40
 8082540:	4630      	mov	r0, r6
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8082542:	9301      	str	r3, [sp, #4]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 8082544:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8082548:	f00e f879 	bl	809063e <memset>
    memset( counter, 0, 4 );
 808254c:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 808254e:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 8082550:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8082554:	f004 f936 	bl	80867c4 <mbedtls_md_get_size>
 8082558:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 808255a:	b37c      	cbz	r4, 80825bc <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
 808255c:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 808255e:	4628      	mov	r0, r5
 8082560:	46a3      	mov	fp, r4
 8082562:	bf28      	it	cs
 8082564:	46d3      	movcs	fp, sl
 8082566:	f004 f83d 	bl	80865e4 <mbedtls_md_starts>
 808256a:	4602      	mov	r2, r0
 808256c:	bb38      	cbnz	r0, 80825be <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 808256e:	9a01      	ldr	r2, [sp, #4]
 8082570:	4649      	mov	r1, r9
 8082572:	4628      	mov	r0, r5
 8082574:	f004 f840 	bl	80865f8 <mbedtls_md_update>
 8082578:	4602      	mov	r2, r0
 808257a:	bb00      	cbnz	r0, 80825be <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 808257c:	2204      	movs	r2, #4
 808257e:	4641      	mov	r1, r8
 8082580:	4628      	mov	r0, r5
 8082582:	f004 f839 	bl	80865f8 <mbedtls_md_update>
 8082586:	4602      	mov	r2, r0
 8082588:	b9c8      	cbnz	r0, 80825be <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 808258a:	4631      	mov	r1, r6
 808258c:	4628      	mov	r0, r5
 808258e:	f004 f83d 	bl	808660c <mbedtls_md_finish>
 8082592:	4602      	mov	r2, r0
 8082594:	b998      	cbnz	r0, 80825be <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
 8082596:	463b      	mov	r3, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
 8082598:	455a      	cmp	r2, fp
 808259a:	d007      	beq.n	80825ac <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
 808259c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80825a0:	5cb1      	ldrb	r1, [r6, r2]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 80825a2:	3201      	adds	r2, #1
            *p++ ^= mask[i];
 80825a4:	4041      	eors	r1, r0
 80825a6:	f803 1c01 	strb.w	r1, [r3, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 80825aa:	e7f5      	b.n	8082598 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
 80825ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80825b0:	4417      	add	r7, r2
 80825b2:	3301      	adds	r3, #1
 80825b4:	f88d 300f 	strb.w	r3, [sp, #15]

        dlen -= use_len;
 80825b8:	1aa4      	subs	r4, r4, r2
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 80825ba:	e7ce      	b.n	808255a <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
 80825bc:	4622      	mov	r2, r4

        dlen -= use_len;
    }

exit:
    mbedtls_zeroize( mask, sizeof( mask ) );
 80825be:	4630      	mov	r0, r6
 80825c0:	2140      	movs	r1, #64	; 0x40
 80825c2:	f7ff ffab 	bl	808251c <_ZL15mbedtls_zeroizePvj>

    return( ret );
}
 80825c6:	4610      	mov	r0, r2
 80825c8:	b015      	add	sp, #84	; 0x54
 80825ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080825d0 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80825d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80825d4:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 80825d6:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80825d8:	460e      	mov	r6, r1
 80825da:	4691      	mov	r9, r2
 80825dc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 80825e0:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 80825e2:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 80825e4:	4604      	mov	r4, r0
 80825e6:	b328      	cbz	r0, 8082634 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80825e8:	f003 ffa8 	bl	808653c <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80825ec:	4606      	mov	r6, r0
 80825ee:	2800      	cmp	r0, #0
 80825f0:	d063      	beq.n	80826ba <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 80825f2:	4620      	mov	r0, r4
 80825f4:	466a      	mov	r2, sp
 80825f6:	a901      	add	r1, sp, #4
 80825f8:	f001 fab0 	bl	8083b5c <mbedtls_oid_get_oid_by_md>
 80825fc:	4604      	mov	r4, r0
 80825fe:	2800      	cmp	r0, #0
 8082600:	d15b      	bne.n	80826ba <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8082602:	4630      	mov	r0, r6
 8082604:	f004 f8de 	bl	80867c4 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8082608:	9f00      	ldr	r7, [sp, #0]
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 808260a:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 808260c:	4407      	add	r7, r0
 808260e:	f107 0308 	add.w	r3, r7, #8
 8082612:	2b7f      	cmp	r3, #127	; 0x7f
 8082614:	d851      	bhi.n	80826ba <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 8082616:	f110 020a 	adds.w	r2, r0, #10
 808261a:	d24e      	bcs.n	80826ba <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 808261c:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
 8082620:	429a      	cmp	r2, r3
 8082622:	d84a      	bhi.n	80826ba <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 8082624:	429d      	cmp	r5, r3
 8082626:	d348      	bcc.n	80826ba <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
 8082628:	f1a5 030a 	sub.w	r3, r5, #10
 808262c:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 808262e:	2f0a      	cmp	r7, #10
 8082630:	d806      	bhi.n	8082640 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
 8082632:	e042      	b.n	80826ba <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
 8082634:	428d      	cmp	r5, r1
 8082636:	d340      	bcc.n	80826ba <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
 8082638:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 808263a:	2d0a      	cmp	r5, #10
 808263c:	d93d      	bls.n	80826ba <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 808263e:	e03e      	b.n	80826be <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8082640:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 8082642:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8082644:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8082648:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 808264a:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
 808264c:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
 8082650:	21ff      	movs	r1, #255	; 0xff
 8082652:	4650      	mov	r0, sl
 8082654:	f00d fff3 	bl	809063e <memset>
    p += nb_pad;
 8082658:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 808265c:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
 808265e:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8082662:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8082664:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8082666:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8082668:	f107 0208 	add.w	r2, r7, #8
 808266c:	4432      	add	r2, r6
 808266e:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 8082670:	b2fa      	uxtb	r2, r7
 8082672:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
 8082674:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 8082678:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 808267a:	2106      	movs	r1, #6
 808267c:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 808267e:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 8082680:	9901      	ldr	r1, [sp, #4]
 8082682:	463a      	mov	r2, r7
 8082684:	4650      	mov	r0, sl
 8082686:	f00d ffb4 	bl	80905f2 <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
 808268a:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
 808268c:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
 8082690:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8082694:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
 8082696:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8082698:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
 808269a:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
 808269c:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
 808269e:	4632      	mov	r2, r6
 80826a0:	4649      	mov	r1, r9
 80826a2:	4638      	mov	r0, r7
 80826a4:	f00d ffa5 	bl	80905f2 <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 80826a8:	443e      	add	r6, r7
 80826aa:	eb08 0305 	add.w	r3, r8, r5
 80826ae:	429e      	cmp	r6, r3
 80826b0:	d019      	beq.n	80826e6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_zeroize( dst, dst_len );
 80826b2:	4629      	mov	r1, r5
 80826b4:	4640      	mov	r0, r8
 80826b6:	f7ff ff31 	bl	808251c <_ZL15mbedtls_zeroizePvj>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80826ba:	4c0d      	ldr	r4, [pc, #52]	; (80826f0 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
 80826bc:	e013      	b.n	80826e6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80826be:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 80826c0:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80826c2:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 80826c6:	2201      	movs	r2, #1
 80826c8:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
 80826cc:	21ff      	movs	r1, #255	; 0xff
 80826ce:	463a      	mov	r2, r7
 80826d0:	4618      	mov	r0, r3
 80826d2:	f00d ffb4 	bl	809063e <memset>
 80826d6:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
 80826d8:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
 80826da:	1ea8      	subs	r0, r5, #2
 80826dc:	4632      	mov	r2, r6
 80826de:	4649      	mov	r1, r9
 80826e0:	4418      	add	r0, r3
 80826e2:	f00d ff86 	bl	80905f2 <memcpy>
        mbedtls_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 80826e6:	4620      	mov	r0, r4
 80826e8:	b002      	add	sp, #8
 80826ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80826ee:	bf00      	nop
 80826f0:	ffffbf80 	.word	0xffffbf80

080826f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80826f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80826f6:	f100 0508 	add.w	r5, r0, #8
 80826fa:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80826fc:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80826fe:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8082700:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8082702:	f007 fc98 	bl	808a036 <mbedtls_mpi_size>
 8082706:	4287      	cmp	r7, r0
 8082708:	d117      	bne.n	808273a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
 808270a:	6863      	ldr	r3, [r4, #4]
 808270c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8082710:	d813      	bhi.n	808273a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8082712:	2100      	movs	r1, #0
 8082714:	4628      	mov	r0, r5
 8082716:	f007 fe5f 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808271a:	2800      	cmp	r0, #0
 808271c:	dd0d      	ble.n	808273a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 808271e:	2100      	movs	r1, #0
 8082720:	4628      	mov	r0, r5
 8082722:	f007 fc3e 	bl	8089fa2 <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8082726:	b140      	cbz	r0, 808273a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 8082728:	b1ee      	cbz	r6, 8082766 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 808272a:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 808272e:	2100      	movs	r1, #0
 8082730:	4628      	mov	r0, r5
 8082732:	f007 fe51 	bl	808a3d8 <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 8082736:	2800      	cmp	r0, #0
 8082738:	dc01      	bgt.n	808273e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808273a:	481a      	ldr	r0, [pc, #104]	; (80827a4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
 808273c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 808273e:	2100      	movs	r1, #0
 8082740:	4628      	mov	r0, r5
 8082742:	f007 fc2e 	bl	8089fa2 <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8082746:	2800      	cmp	r0, #0
 8082748:	d0f7      	beq.n	808273a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 808274a:	f104 0538 	add.w	r5, r4, #56	; 0x38
 808274e:	2100      	movs	r1, #0
 8082750:	4628      	mov	r0, r5
 8082752:	f007 fe41 	bl	808a3d8 <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8082756:	2800      	cmp	r0, #0
 8082758:	ddef      	ble.n	808273a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 808275a:	2100      	movs	r1, #0
 808275c:	4628      	mov	r0, r5
 808275e:	f007 fc20 	bl	8089fa2 <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8082762:	2800      	cmp	r0, #0
 8082764:	d0e9      	beq.n	808273a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 8082766:	2100      	movs	r1, #0
 8082768:	f104 0014 	add.w	r0, r4, #20
 808276c:	f007 fe34 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 8082770:	2800      	cmp	r0, #0
 8082772:	dde2      	ble.n	808273a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 8082774:	b1a6      	cbz	r6, 80827a0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8082776:	2100      	movs	r1, #0
 8082778:	f104 0044 	add.w	r0, r4, #68	; 0x44
 808277c:	f007 fe2c 	bl	808a3d8 <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 8082780:	2800      	cmp	r0, #0
 8082782:	ddda      	ble.n	808273a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 8082784:	2100      	movs	r1, #0
 8082786:	f104 0050 	add.w	r0, r4, #80	; 0x50
 808278a:	f007 fe25 	bl	808a3d8 <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 808278e:	2800      	cmp	r0, #0
 8082790:	ddd3      	ble.n	808273a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 8082792:	2100      	movs	r1, #0
 8082794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8082798:	f007 fe1e 	bl	808a3d8 <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 808279c:	2800      	cmp	r0, #0
 808279e:	ddcc      	ble.n	808273a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
 80827a0:	2000      	movs	r0, #0
 80827a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80827a4:	ffffbf80 	.word	0xffffbf80

080827a8 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 80827a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80827ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80827ae:	4604      	mov	r4, r0
 80827b0:	4698      	mov	r8, r3
 80827b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80827b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;

    if( N != NULL )
 80827b6:	b149      	cbz	r1, 80827cc <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 80827b8:	f100 0908 	add.w	r9, r0, #8
 80827bc:	4648      	mov	r0, r9
 80827be:	f007 fc40 	bl	808a042 <mbedtls_mpi_read_binary>
 80827c2:	bb50      	cbnz	r0, 808281a <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 80827c4:	4648      	mov	r0, r9
 80827c6:	f007 fc36 	bl	808a036 <mbedtls_mpi_size>
 80827ca:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
 80827cc:	f1b8 0f00 	cmp.w	r8, #0
 80827d0:	d101      	bne.n	80827d6 <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
 80827d2:	b947      	cbnz	r7, 80827e6 <mbedtls_rsa_import_raw+0x3e>
 80827d4:	e00e      	b.n	80827f4 <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 80827d6:	9a08      	ldr	r2, [sp, #32]
 80827d8:	4641      	mov	r1, r8
 80827da:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80827de:	f007 fc30 	bl	808a042 <mbedtls_mpi_read_binary>
 80827e2:	b9d0      	cbnz	r0, 808281a <mbedtls_rsa_import_raw+0x72>
 80827e4:	e7f5      	b.n	80827d2 <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 80827e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80827e8:	4639      	mov	r1, r7
 80827ea:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80827ee:	f007 fc28 	bl	808a042 <mbedtls_mpi_read_binary>
 80827f2:	b990      	cbnz	r0, 808281a <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
 80827f4:	b136      	cbz	r6, 8082804 <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 80827f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80827f8:	4631      	mov	r1, r6
 80827fa:	f104 0020 	add.w	r0, r4, #32
 80827fe:	f007 fc20 	bl	808a042 <mbedtls_mpi_read_binary>
 8082802:	b950      	cbnz	r0, 808281a <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
 8082804:	b135      	cbz	r5, 8082814 <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 8082806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8082808:	4629      	mov	r1, r5
 808280a:	f104 0014 	add.w	r0, r4, #20
 808280e:	f007 fc18 	bl	808a042 <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
 8082812:	b910      	cbnz	r0, 808281a <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
 8082814:	2000      	movs	r0, #0
 8082816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 808281a:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
 808281e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08082824 <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 8082824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8082828:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 808282c:	b087      	sub	sp, #28
 808282e:	4607      	mov	r7, r0
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8082830:	2100      	movs	r1, #0
 8082832:	4658      	mov	r0, fp
 8082834:	f007 fdd0 	bl	808a3d8 <mbedtls_mpi_cmp_int>
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8082838:	f107 092c 	add.w	r9, r7, #44	; 0x2c
 808283c:	2100      	movs	r1, #0

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 808283e:	4680      	mov	r8, r0
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8082840:	4648      	mov	r0, r9
 8082842:	f007 fdc9 	bl	808a3d8 <mbedtls_mpi_cmp_int>
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8082846:	f107 0a38 	add.w	sl, r7, #56	; 0x38
int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 808284a:	9005      	str	r0, [sp, #20]
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 808284c:	2100      	movs	r1, #0
 808284e:	4650      	mov	r0, sl
 8082850:	f007 fdc2 	bl	808a3d8 <mbedtls_mpi_cmp_int>
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8082854:	f107 0320 	add.w	r3, r7, #32
 8082858:	2100      	movs	r1, #0
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 808285a:	4605      	mov	r5, r0
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 808285c:	4618      	mov	r0, r3
 808285e:	9302      	str	r3, [sp, #8]
 8082860:	f007 fdba 	bl	808a3d8 <mbedtls_mpi_cmp_int>
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8082864:	f107 0314 	add.w	r3, r7, #20
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8082868:	9004      	str	r0, [sp, #16]
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 808286a:	2100      	movs	r1, #0
 808286c:	4618      	mov	r0, r3
 808286e:	9303      	str	r3, [sp, #12]
 8082870:	f007 fdb2 	bl	808a3d8 <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8082874:	9b05      	ldr	r3, [sp, #20]
 8082876:	9a04      	ldr	r2, [sp, #16]
 8082878:	b14b      	cbz	r3, 808288e <mbedtls_rsa_complete+0x6a>
 808287a:	b125      	cbz	r5, 8082886 <mbedtls_rsa_complete+0x62>
 808287c:	b12a      	cbz	r2, 808288a <mbedtls_rsa_complete+0x66>
 808287e:	1c06      	adds	r6, r0, #0
 8082880:	bf18      	it	ne
 8082882:	2601      	movne	r6, #1
 8082884:	e013      	b.n	80828ae <mbedtls_rsa_complete+0x8a>
 8082886:	462e      	mov	r6, r5
 8082888:	e011      	b.n	80828ae <mbedtls_rsa_complete+0x8a>
 808288a:	4616      	mov	r6, r2
 808288c:	e00f      	b.n	80828ae <mbedtls_rsa_complete+0x8a>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 808288e:	f1b8 0f00 	cmp.w	r8, #0
 8082892:	d103      	bne.n	808289c <mbedtls_rsa_complete+0x78>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8082894:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8082896:	4646      	mov	r6, r8
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 8082898:	2200      	movs	r2, #0
 808289a:	e024      	b.n	80828e6 <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 808289c:	b9cd      	cbnz	r5, 80828d2 <mbedtls_rsa_complete+0xae>
 808289e:	b11a      	cbz	r2, 80828a8 <mbedtls_rsa_complete+0x84>
 80828a0:	b9f0      	cbnz	r0, 80828e0 <mbedtls_rsa_complete+0xbc>
 80828a2:	4606      	mov	r6, r0
 80828a4:	4604      	mov	r4, r0
 80828a6:	e00e      	b.n	80828c6 <mbedtls_rsa_complete+0xa2>
 80828a8:	462e      	mov	r6, r5
 80828aa:	462c      	mov	r4, r5
 80828ac:	e00d      	b.n	80828ca <mbedtls_rsa_complete+0xa6>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80828ae:	b1ad      	cbz	r5, 80828dc <mbedtls_rsa_complete+0xb8>
 80828b0:	b992      	cbnz	r2, 80828d8 <mbedtls_rsa_complete+0xb4>
 80828b2:	1c04      	adds	r4, r0, #0
 80828b4:	bf18      	it	ne
 80828b6:	2401      	movne	r4, #1
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80828b8:	f1b8 0f00 	cmp.w	r8, #0
 80828bc:	d0ec      	beq.n	8082898 <mbedtls_rsa_complete+0x74>
 80828be:	2b00      	cmp	r3, #0
 80828c0:	d1ea      	bne.n	8082898 <mbedtls_rsa_complete+0x74>
 80828c2:	2d00      	cmp	r5, #0
 80828c4:	d1e8      	bne.n	8082898 <mbedtls_rsa_complete+0x74>
 80828c6:	2a00      	cmp	r2, #0
 80828c8:	d1e6      	bne.n	8082898 <mbedtls_rsa_complete+0x74>
 80828ca:	2800      	cmp	r0, #0
 80828cc:	d0e4      	beq.n	8082898 <mbedtls_rsa_complete+0x74>
 80828ce:	2201      	movs	r2, #1
 80828d0:	e009      	b.n	80828e6 <mbedtls_rsa_complete+0xc2>
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80828d2:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80828d4:	461e      	mov	r6, r3
 80828d6:	e7df      	b.n	8082898 <mbedtls_rsa_complete+0x74>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80828d8:	2400      	movs	r4, #0
 80828da:	e7ed      	b.n	80828b8 <mbedtls_rsa_complete+0x94>
 80828dc:	462c      	mov	r4, r5
 80828de:	e7db      	b.n	8082898 <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80828e0:	2601      	movs	r6, #1
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80828e2:	462c      	mov	r4, r5
 80828e4:	e002      	b.n	80828ec <mbedtls_rsa_complete+0xc8>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
 80828e6:	2e00      	cmp	r6, #0
 80828e8:	d03d      	beq.n	8082966 <mbedtls_rsa_complete+0x142>
 80828ea:	2600      	movs	r6, #0
 80828ec:	9404      	str	r4, [sp, #16]
 80828ee:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 80828f0:	f1b8 0f00 	cmp.w	r8, #0
 80828f4:	d10b      	bne.n	808290e <mbedtls_rsa_complete+0xea>
 80828f6:	b153      	cbz	r3, 808290e <mbedtls_rsa_complete+0xea>
 80828f8:	b14d      	cbz	r5, 808290e <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 80828fa:	4652      	mov	r2, sl
 80828fc:	4649      	mov	r1, r9
 80828fe:	4658      	mov	r0, fp
 8082900:	f007 fe89 	bl	808a616 <mbedtls_mpi_mul_mpi>
 8082904:	bb28      	cbnz	r0, 8082952 <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 8082906:	4658      	mov	r0, fp
 8082908:	f007 fb95 	bl	808a036 <mbedtls_mpi_size>
 808290c:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 808290e:	b146      	cbz	r6, 8082922 <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
 8082910:	f8cd a000 	str.w	sl, [sp]
 8082914:	464b      	mov	r3, r9
 8082916:	9a02      	ldr	r2, [sp, #8]
 8082918:	9903      	ldr	r1, [sp, #12]
 808291a:	4658      	mov	r0, fp
 808291c:	f00b f8d8 	bl	808dad0 <mbedtls_rsa_deduce_primes>
 8082920:	e007      	b.n	8082932 <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
 8082922:	9b04      	ldr	r3, [sp, #16]
 8082924:	b133      	cbz	r3, 8082934 <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 8082926:	9b02      	ldr	r3, [sp, #8]
 8082928:	9a03      	ldr	r2, [sp, #12]
 808292a:	4651      	mov	r1, sl
 808292c:	4648      	mov	r0, r9
 808292e:	f00b f9cb 	bl	808dcc8 <mbedtls_rsa_deduce_private_exponent>
 8082932:	b970      	cbnz	r0, 8082952 <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 8082934:	b184      	cbz	r4, 8082958 <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8082936:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 808293a:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 808293c:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 8082940:	9300      	str	r3, [sp, #0]
 8082942:	9a02      	ldr	r2, [sp, #8]
 8082944:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8082948:	4651      	mov	r1, sl
 808294a:	4648      	mov	r0, r9
 808294c:	f00b fb60 	bl	808e010 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 8082950:	b110      	cbz	r0, 8082958 <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8082952:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 8082956:	e00c      	b.n	8082972 <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 8082958:	4621      	mov	r1, r4
 808295a:	4638      	mov	r0, r7
}
 808295c:	b007      	add	sp, #28
 808295e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 8082962:	f7ff bec7 	b.w	80826f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
 8082966:	b90c      	cbnz	r4, 808296c <mbedtls_rsa_complete+0x148>
 8082968:	b112      	cbz	r2, 8082970 <mbedtls_rsa_complete+0x14c>
 808296a:	4626      	mov	r6, r4
 808296c:	9404      	str	r4, [sp, #16]
 808296e:	e7bf      	b.n	80828f0 <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8082970:	4801      	ldr	r0, [pc, #4]	; (8082978 <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
 8082972:	b007      	add	sp, #28
 8082974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082978:	ffffbf80 	.word	0xffffbf80

0808297c <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 808297c:	b570      	push	{r4, r5, r6, lr}
 808297e:	4604      	mov	r4, r0
 8082980:	460e      	mov	r6, r1
 8082982:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 8082984:	2100      	movs	r1, #0
 8082986:	22ac      	movs	r2, #172	; 0xac
 8082988:	f00d fe59 	bl	809063e <memset>
/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
    ctx->padding = padding;
 808298c:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 8082990:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8082994:	bd70      	pop	{r4, r5, r6, pc}

08082996 <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
 8082996:	6840      	ldr	r0, [r0, #4]
 8082998:	4770      	bx	lr
	...

0808299c <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 808299c:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 808299e:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 80829a0:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 80829a2:	f7ff fea7 	bl	80826f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80829a6:	4605      	mov	r5, r0
 80829a8:	b9b8      	cbnz	r0, 80829da <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 80829aa:	f104 0608 	add.w	r6, r4, #8
 80829ae:	4630      	mov	r0, r6
 80829b0:	f007 fb21 	bl	8089ff6 <mbedtls_mpi_bitlen>
 80829b4:	287f      	cmp	r0, #127	; 0x7f
 80829b6:	d910      	bls.n	80829da <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80829b8:	3414      	adds	r4, #20
 80829ba:	4629      	mov	r1, r5
 80829bc:	4620      	mov	r0, r4
 80829be:	f007 faf0 	bl	8089fa2 <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80829c2:	b150      	cbz	r0, 80829da <mbedtls_rsa_check_pubkey+0x3e>
 80829c4:	4620      	mov	r0, r4
 80829c6:	f007 fb16 	bl	8089ff6 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80829ca:	2801      	cmp	r0, #1
 80829cc:	d905      	bls.n	80829da <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 80829ce:	4631      	mov	r1, r6
 80829d0:	4620      	mov	r0, r4
 80829d2:	f007 fcbc 	bl	808a34e <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80829d6:	2800      	cmp	r0, #0
 80829d8:	db00      	blt.n	80829dc <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80829da:	4d01      	ldr	r5, [pc, #4]	; (80829e0 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
 80829dc:	4628      	mov	r0, r5
 80829de:	bd70      	pop	{r4, r5, r6, pc}
 80829e0:	ffffbe00 	.word	0xffffbe00

080829e4 <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 80829e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80829e6:	b085      	sub	sp, #20
 80829e8:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80829ea:	f7ff ffd7 	bl	808299c <mbedtls_rsa_check_pubkey>
 80829ee:	bb28      	cbnz	r0, 8082a3c <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 80829f0:	2101      	movs	r1, #1
 80829f2:	4620      	mov	r0, r4
 80829f4:	f7ff fe7e 	bl	80826f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80829f8:	bb00      	cbnz	r0, 8082a3c <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 80829fa:	f104 0314 	add.w	r3, r4, #20
 80829fe:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8082a02:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8082a06:	f104 0720 	add.w	r7, r4, #32
 8082a0a:	9002      	str	r0, [sp, #8]
 8082a0c:	9001      	str	r0, [sp, #4]
 8082a0e:	9300      	str	r3, [sp, #0]
 8082a10:	4632      	mov	r2, r6
 8082a12:	463b      	mov	r3, r7
 8082a14:	4629      	mov	r1, r5
 8082a16:	f104 0008 	add.w	r0, r4, #8
 8082a1a:	f00b fa33 	bl	808de84 <mbedtls_rsa_validate_params>
 8082a1e:	b968      	cbnz	r0, 8082a3c <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 8082a20:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8082a24:	9301      	str	r3, [sp, #4]
 8082a26:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8082a2a:	9300      	str	r3, [sp, #0]
 8082a2c:	463a      	mov	r2, r7
 8082a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8082a32:	4631      	mov	r1, r6
 8082a34:	4628      	mov	r0, r5
 8082a36:	f00b f9a5 	bl	808dd84 <mbedtls_rsa_validate_crt>
 8082a3a:	b100      	cbz	r0, 8082a3e <mbedtls_rsa_check_privkey+0x5a>
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8082a3c:	4801      	ldr	r0, [pc, #4]	; (8082a44 <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
 8082a3e:	b005      	add	sp, #20
 8082a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082a42:	bf00      	nop
 8082a44:	ffffbe00 	.word	0xffffbe00

08082a48 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 8082a48:	b538      	push	{r3, r4, r5, lr}
 8082a4a:	4605      	mov	r5, r0
 8082a4c:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8082a4e:	f7ff ffa5 	bl	808299c <mbedtls_rsa_check_pubkey>
 8082a52:	b950      	cbnz	r0, 8082a6a <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 8082a54:	4620      	mov	r0, r4
 8082a56:	f7ff ffc5 	bl	80829e4 <mbedtls_rsa_check_privkey>
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8082a5a:	b930      	cbnz	r0, 8082a6a <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8082a5c:	f104 0108 	add.w	r1, r4, #8
 8082a60:	f105 0008 	add.w	r0, r5, #8
 8082a64:	f007 fc73 	bl	808a34e <mbedtls_mpi_cmp_mpi>
 8082a68:	b108      	cbz	r0, 8082a6e <mbedtls_rsa_check_pub_priv+0x26>
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8082a6a:	4805      	ldr	r0, [pc, #20]	; (8082a80 <mbedtls_rsa_check_pub_priv+0x38>)
 8082a6c:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 8082a6e:	f104 0114 	add.w	r1, r4, #20
 8082a72:	f105 0014 	add.w	r0, r5, #20
 8082a76:	f007 fc6a 	bl	808a34e <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8082a7a:	2800      	cmp	r0, #0
 8082a7c:	d1f5      	bne.n	8082a6a <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
 8082a7e:	bd38      	pop	{r3, r4, r5, pc}
 8082a80:	ffffbe00 	.word	0xffffbe00

08082a84 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 8082a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082a88:	460c      	mov	r4, r1
 8082a8a:	b086      	sub	sp, #24
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8082a8c:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 8082a8e:	4605      	mov	r5, r0
 8082a90:	4617      	mov	r7, r2
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8082a92:	f7ff fe2f 	bl	80826f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8082a96:	4606      	mov	r6, r0
 8082a98:	bb78      	cbnz	r0, 8082afa <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
 8082a9a:	a803      	add	r0, sp, #12
 8082a9c:	f007 f9f2 	bl	8089e84 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8082aa0:	4621      	mov	r1, r4
 8082aa2:	686a      	ldr	r2, [r5, #4]
 8082aa4:	a803      	add	r0, sp, #12
 8082aa6:	f007 facc 	bl	808a042 <mbedtls_mpi_read_binary>
 8082aaa:	4604      	mov	r4, r0
 8082aac:	b9f0      	cbnz	r0, 8082aec <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8082aae:	f105 0408 	add.w	r4, r5, #8
 8082ab2:	4621      	mov	r1, r4
 8082ab4:	a803      	add	r0, sp, #12
 8082ab6:	f007 fc4a 	bl	808a34e <mbedtls_mpi_cmp_mpi>
 8082aba:	2800      	cmp	r0, #0
 8082abc:	da14      	bge.n	8082ae8 <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8082abe:	f105 0368 	add.w	r3, r5, #104	; 0x68
 8082ac2:	a903      	add	r1, sp, #12
 8082ac4:	9300      	str	r3, [sp, #0]
 8082ac6:	f105 0214 	add.w	r2, r5, #20
 8082aca:	4623      	mov	r3, r4
 8082acc:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
 8082ace:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8082ad2:	f008 f80e 	bl	808aaf2 <mbedtls_mpi_exp_mod>
 8082ad6:	4604      	mov	r4, r0
 8082ad8:	b940      	cbnz	r0, 8082aec <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8082ada:	4642      	mov	r2, r8
 8082adc:	4639      	mov	r1, r7
 8082ade:	a803      	add	r0, sp, #12
 8082ae0:	f007 fae4 	bl	808a0ac <mbedtls_mpi_write_binary>
 8082ae4:	4604      	mov	r4, r0
 8082ae6:	e001      	b.n	8082aec <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8082ae8:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 8082aec:	a803      	add	r0, sp, #12
 8082aee:	f007 f9d0 	bl	8089e92 <mbedtls_mpi_free>

    if( ret != 0 )
 8082af2:	b11c      	cbz	r4, 8082afc <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 8082af4:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
 8082af8:	e000      	b.n	8082afc <mbedtls_rsa_public+0x78>
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8082afa:	4e02      	ldr	r6, [pc, #8]	; (8082b04 <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
 8082afc:	4630      	mov	r0, r6
 8082afe:	b006      	add	sp, #24
 8082b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082b04:	ffffbf80 	.word	0xffffbf80

08082b08 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 8082b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082b0c:	460e      	mov	r6, r1
 8082b0e:	b0a5      	sub	sp, #148	; 0x94

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 8082b10:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 8082b12:	4604      	mov	r4, r0
 8082b14:	4692      	mov	sl, r2
 8082b16:	461d      	mov	r5, r3

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 8082b18:	f7ff fdec 	bl	80826f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8082b1c:	9003      	str	r0, [sp, #12]
 8082b1e:	2800      	cmp	r0, #0
 8082b20:	f040 819b 	bne.w	8082e5a <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 8082b24:	a806      	add	r0, sp, #24
 8082b26:	f007 f9ad 	bl	8089e84 <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 8082b2a:	a809      	add	r0, sp, #36	; 0x24
 8082b2c:	f007 f9aa 	bl	8089e84 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 8082b30:	a80c      	add	r0, sp, #48	; 0x30
 8082b32:	f007 f9a7 	bl	8089e84 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 8082b36:	a80f      	add	r0, sp, #60	; 0x3c
 8082b38:	f007 f9a4 	bl	8089e84 <mbedtls_mpi_init>

    if( f_rng != NULL )
 8082b3c:	b12e      	cbz	r6, 8082b4a <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 8082b3e:	a818      	add	r0, sp, #96	; 0x60
 8082b40:	f007 f9a0 	bl	8089e84 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 8082b44:	a81b      	add	r0, sp, #108	; 0x6c
 8082b46:	f007 f99d 	bl	8089e84 <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 8082b4a:	a812      	add	r0, sp, #72	; 0x48
 8082b4c:	f007 f99a 	bl	8089e84 <mbedtls_mpi_init>
 8082b50:	a815      	add	r0, sp, #84	; 0x54
 8082b52:	f007 f997 	bl	8089e84 <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 8082b56:	a81e      	add	r0, sp, #120	; 0x78
 8082b58:	f007 f994 	bl	8089e84 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 8082b5c:	a821      	add	r0, sp, #132	; 0x84
 8082b5e:	f007 f991 	bl	8089e84 <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8082b62:	6862      	ldr	r2, [r4, #4]
 8082b64:	4629      	mov	r1, r5
 8082b66:	a806      	add	r0, sp, #24
 8082b68:	f007 fa6b 	bl	808a042 <mbedtls_mpi_read_binary>
 8082b6c:	4607      	mov	r7, r0
 8082b6e:	2800      	cmp	r0, #0
 8082b70:	f040 8150 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8082b74:	f104 0508 	add.w	r5, r4, #8
 8082b78:	4629      	mov	r1, r5
 8082b7a:	a806      	add	r0, sp, #24
 8082b7c:	f007 fbe7 	bl	808a34e <mbedtls_mpi_cmp_mpi>
 8082b80:	2800      	cmp	r0, #0
 8082b82:	f280 8143 	bge.w	8082e0c <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 8082b86:	a906      	add	r1, sp, #24
 8082b88:	a81e      	add	r0, sp, #120	; 0x78
 8082b8a:	f007 f9c4 	bl	8089f16 <mbedtls_mpi_copy>
 8082b8e:	4607      	mov	r7, r0
 8082b90:	2800      	cmp	r0, #0
 8082b92:	f040 813f 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
 8082b96:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 8082b9a:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 8082b9e:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
 8082ba0:	2e00      	cmp	r6, #0
 8082ba2:	f000 80c5 	beq.w	8082d30 <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 8082ba6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8082baa:	b323      	cbz	r3, 8082bf6 <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8082bac:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 8082bb0:	4642      	mov	r2, r8
 8082bb2:	4641      	mov	r1, r8
 8082bb4:	4640      	mov	r0, r8
 8082bb6:	f007 fd2e 	bl	808a616 <mbedtls_mpi_mul_mpi>
 8082bba:	4607      	mov	r7, r0
 8082bbc:	2800      	cmp	r0, #0
 8082bbe:	f040 8129 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 8082bc2:	462a      	mov	r2, r5
 8082bc4:	4641      	mov	r1, r8
 8082bc6:	4640      	mov	r0, r8
 8082bc8:	f007 ff61 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 8082bcc:	4607      	mov	r7, r0
 8082bce:	2800      	cmp	r0, #0
 8082bd0:	f040 8120 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 8082bd4:	f104 0898 	add.w	r8, r4, #152	; 0x98
 8082bd8:	4642      	mov	r2, r8
 8082bda:	4641      	mov	r1, r8
 8082bdc:	4640      	mov	r0, r8
 8082bde:	f007 fd1a 	bl	808a616 <mbedtls_mpi_mul_mpi>
 8082be2:	4607      	mov	r7, r0
 8082be4:	2800      	cmp	r0, #0
 8082be6:	f040 8115 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 8082bea:	462a      	mov	r2, r5
 8082bec:	4641      	mov	r1, r8
 8082bee:	4640      	mov	r0, r8
 8082bf0:	f007 ff4d 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 8082bf4:	e037      	b.n	8082c66 <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 8082bf6:	230c      	movs	r3, #12
 8082bf8:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8082bfa:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8082bfe:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 8082c02:	9b05      	ldr	r3, [sp, #20]
 8082c04:	3b01      	subs	r3, #1
 8082c06:	9305      	str	r3, [sp, #20]
 8082c08:	f000 812a 	beq.w	8082e60 <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8082c0c:	6861      	ldr	r1, [r4, #4]
 8082c0e:	4653      	mov	r3, sl
 8082c10:	4632      	mov	r2, r6
 8082c12:	3901      	subs	r1, #1
 8082c14:	4658      	mov	r0, fp
 8082c16:	f008 fa10 	bl	808b03a <mbedtls_mpi_fill_random>
 8082c1a:	4607      	mov	r7, r0
 8082c1c:	2800      	cmp	r0, #0
 8082c1e:	f040 80f9 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8082c22:	462a      	mov	r2, r5
 8082c24:	4659      	mov	r1, fp
 8082c26:	4640      	mov	r0, r8
 8082c28:	f008 f982 	bl	808af30 <mbedtls_mpi_gcd>
 8082c2c:	4607      	mov	r7, r0
 8082c2e:	2800      	cmp	r0, #0
 8082c30:	f040 80f0 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 8082c34:	2101      	movs	r1, #1
 8082c36:	4640      	mov	r0, r8
 8082c38:	f007 fbce 	bl	808a3d8 <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
 8082c3c:	2800      	cmp	r0, #0
 8082c3e:	d1e0      	bne.n	8082c02 <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8082c40:	462a      	mov	r2, r5
 8082c42:	4659      	mov	r1, fp
 8082c44:	4640      	mov	r0, r8
 8082c46:	f008 fa1b 	bl	808b080 <mbedtls_mpi_inv_mod>
 8082c4a:	4607      	mov	r7, r0
 8082c4c:	2800      	cmp	r0, #0
 8082c4e:	f040 80e1 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 8082c52:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8082c56:	9300      	str	r3, [sp, #0]
 8082c58:	f104 0214 	add.w	r2, r4, #20
 8082c5c:	462b      	mov	r3, r5
 8082c5e:	4641      	mov	r1, r8
 8082c60:	4640      	mov	r0, r8
 8082c62:	f007 ff46 	bl	808aaf2 <mbedtls_mpi_exp_mod>
 8082c66:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 8082c68:	2800      	cmp	r0, #0
 8082c6a:	f040 80d3 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 8082c6e:	a906      	add	r1, sp, #24
 8082c70:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8082c74:	4608      	mov	r0, r1
 8082c76:	f007 fcce 	bl	808a616 <mbedtls_mpi_mul_mpi>
 8082c7a:	4607      	mov	r7, r0
 8082c7c:	2800      	cmp	r0, #0
 8082c7e:	f040 80c9 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8082c82:	a906      	add	r1, sp, #24
 8082c84:	462a      	mov	r2, r5
 8082c86:	4608      	mov	r0, r1
 8082c88:	f007 ff01 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 8082c8c:	4607      	mov	r7, r0
 8082c8e:	2800      	cmp	r0, #0
 8082c90:	f040 80c0 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 8082c94:	2201      	movs	r2, #1
 8082c96:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8082c9a:	a809      	add	r0, sp, #36	; 0x24
 8082c9c:	f007 fca5 	bl	808a5ea <mbedtls_mpi_sub_int>
 8082ca0:	4607      	mov	r7, r0
 8082ca2:	2800      	cmp	r0, #0
 8082ca4:	f040 80b6 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 8082ca8:	2201      	movs	r2, #1
 8082caa:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8082cae:	a80c      	add	r0, sp, #48	; 0x30
 8082cb0:	f007 fc9b 	bl	808a5ea <mbedtls_mpi_sub_int>
 8082cb4:	4607      	mov	r7, r0
 8082cb6:	2800      	cmp	r0, #0
 8082cb8:	f040 80ac 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8082cbc:	4653      	mov	r3, sl
 8082cbe:	4632      	mov	r2, r6
 8082cc0:	211c      	movs	r1, #28
 8082cc2:	a80f      	add	r0, sp, #60	; 0x3c
 8082cc4:	f008 f9b9 	bl	808b03a <mbedtls_mpi_fill_random>
 8082cc8:	4607      	mov	r7, r0
 8082cca:	2800      	cmp	r0, #0
 8082ccc:	f040 80a2 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8082cd0:	aa0f      	add	r2, sp, #60	; 0x3c
 8082cd2:	a909      	add	r1, sp, #36	; 0x24
 8082cd4:	a818      	add	r0, sp, #96	; 0x60
 8082cd6:	f007 fc9e 	bl	808a616 <mbedtls_mpi_mul_mpi>
 8082cda:	4607      	mov	r7, r0
 8082cdc:	2800      	cmp	r0, #0
 8082cde:	f040 8099 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 8082ce2:	a918      	add	r1, sp, #96	; 0x60
 8082ce4:	464a      	mov	r2, r9
 8082ce6:	4608      	mov	r0, r1
 8082ce8:	f007 fc26 	bl	808a538 <mbedtls_mpi_add_mpi>
 8082cec:	4607      	mov	r7, r0
 8082cee:	2800      	cmp	r0, #0
 8082cf0:	f040 8090 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8082cf4:	4653      	mov	r3, sl
 8082cf6:	4632      	mov	r2, r6
 8082cf8:	211c      	movs	r1, #28
 8082cfa:	a80f      	add	r0, sp, #60	; 0x3c
 8082cfc:	f008 f99d 	bl	808b03a <mbedtls_mpi_fill_random>
 8082d00:	4607      	mov	r7, r0
 8082d02:	2800      	cmp	r0, #0
 8082d04:	f040 8086 	bne.w	8082e14 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 8082d08:	aa0f      	add	r2, sp, #60	; 0x3c
 8082d0a:	a90c      	add	r1, sp, #48	; 0x30
 8082d0c:	a81b      	add	r0, sp, #108	; 0x6c
 8082d0e:	f007 fc82 	bl	808a616 <mbedtls_mpi_mul_mpi>
 8082d12:	4607      	mov	r7, r0
 8082d14:	2800      	cmp	r0, #0
 8082d16:	d17d      	bne.n	8082e14 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8082d18:	a91b      	add	r1, sp, #108	; 0x6c
 8082d1a:	9a04      	ldr	r2, [sp, #16]
 8082d1c:	4608      	mov	r0, r1
 8082d1e:	f007 fc0b 	bl	808a538 <mbedtls_mpi_add_mpi>
 8082d22:	4607      	mov	r7, r0
 8082d24:	2800      	cmp	r0, #0
 8082d26:	d175      	bne.n	8082e14 <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 8082d28:	ab1b      	add	r3, sp, #108	; 0x6c
 8082d2a:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
 8082d2c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 8082d30:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8082d34:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8082d38:	9300      	str	r3, [sp, #0]
 8082d3a:	464a      	mov	r2, r9
 8082d3c:	4643      	mov	r3, r8
 8082d3e:	a906      	add	r1, sp, #24
 8082d40:	a812      	add	r0, sp, #72	; 0x48
 8082d42:	f007 fed6 	bl	808aaf2 <mbedtls_mpi_exp_mod>
 8082d46:	4607      	mov	r7, r0
 8082d48:	2800      	cmp	r0, #0
 8082d4a:	d163      	bne.n	8082e14 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8082d4c:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8082d50:	f104 0938 	add.w	r9, r4, #56	; 0x38
 8082d54:	9300      	str	r3, [sp, #0]
 8082d56:	9a04      	ldr	r2, [sp, #16]
 8082d58:	464b      	mov	r3, r9
 8082d5a:	a906      	add	r1, sp, #24
 8082d5c:	a815      	add	r0, sp, #84	; 0x54
 8082d5e:	f007 fec8 	bl	808aaf2 <mbedtls_mpi_exp_mod>
 8082d62:	4607      	mov	r7, r0
 8082d64:	2800      	cmp	r0, #0
 8082d66:	d155      	bne.n	8082e14 <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 8082d68:	aa15      	add	r2, sp, #84	; 0x54
 8082d6a:	a912      	add	r1, sp, #72	; 0x48
 8082d6c:	a806      	add	r0, sp, #24
 8082d6e:	f007 fc04 	bl	808a57a <mbedtls_mpi_sub_mpi>
 8082d72:	4607      	mov	r7, r0
 8082d74:	2800      	cmp	r0, #0
 8082d76:	d14d      	bne.n	8082e14 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 8082d78:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8082d7c:	a906      	add	r1, sp, #24
 8082d7e:	a812      	add	r0, sp, #72	; 0x48
 8082d80:	f007 fc49 	bl	808a616 <mbedtls_mpi_mul_mpi>
 8082d84:	4607      	mov	r7, r0
 8082d86:	2800      	cmp	r0, #0
 8082d88:	d144      	bne.n	8082e14 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 8082d8a:	4642      	mov	r2, r8
 8082d8c:	a912      	add	r1, sp, #72	; 0x48
 8082d8e:	a806      	add	r0, sp, #24
 8082d90:	f007 fe7d 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 8082d94:	4607      	mov	r7, r0
 8082d96:	2800      	cmp	r0, #0
 8082d98:	d13c      	bne.n	8082e14 <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 8082d9a:	464a      	mov	r2, r9
 8082d9c:	a906      	add	r1, sp, #24
 8082d9e:	a812      	add	r0, sp, #72	; 0x48
 8082da0:	f007 fc39 	bl	808a616 <mbedtls_mpi_mul_mpi>
 8082da4:	4607      	mov	r7, r0
 8082da6:	2800      	cmp	r0, #0
 8082da8:	d134      	bne.n	8082e14 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 8082daa:	aa12      	add	r2, sp, #72	; 0x48
 8082dac:	a915      	add	r1, sp, #84	; 0x54
 8082dae:	a806      	add	r0, sp, #24
 8082db0:	f007 fbc2 	bl	808a538 <mbedtls_mpi_add_mpi>
 8082db4:	4607      	mov	r7, r0
 8082db6:	bb68      	cbnz	r0, 8082e14 <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 8082db8:	b966      	cbnz	r6, 8082dd4 <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 8082dba:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8082dbe:	9300      	str	r3, [sp, #0]
 8082dc0:	f104 0214 	add.w	r2, r4, #20
 8082dc4:	462b      	mov	r3, r5
 8082dc6:	a906      	add	r1, sp, #24
 8082dc8:	a821      	add	r0, sp, #132	; 0x84
 8082dca:	f007 fe92 	bl	808aaf2 <mbedtls_mpi_exp_mod>
 8082dce:	4607      	mov	r7, r0
 8082dd0:	bb00      	cbnz	r0, 8082e14 <mbedtls_rsa_private+0x30c>
 8082dd2:	e00f      	b.n	8082df4 <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8082dd4:	a906      	add	r1, sp, #24
 8082dd6:	f104 0298 	add.w	r2, r4, #152	; 0x98
 8082dda:	4608      	mov	r0, r1
 8082ddc:	f007 fc1b 	bl	808a616 <mbedtls_mpi_mul_mpi>
 8082de0:	4607      	mov	r7, r0
 8082de2:	b9b8      	cbnz	r0, 8082e14 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8082de4:	a906      	add	r1, sp, #24
 8082de6:	462a      	mov	r2, r5
 8082de8:	4608      	mov	r0, r1
 8082dea:	f007 fe50 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 8082dee:	4607      	mov	r7, r0
 8082df0:	b980      	cbnz	r0, 8082e14 <mbedtls_rsa_private+0x30c>
 8082df2:	e7e2      	b.n	8082dba <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 8082df4:	a91e      	add	r1, sp, #120	; 0x78
 8082df6:	a821      	add	r0, sp, #132	; 0x84
 8082df8:	f007 faa9 	bl	808a34e <mbedtls_mpi_cmp_mpi>
 8082dfc:	b948      	cbnz	r0, 8082e12 <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8082dfe:	6862      	ldr	r2, [r4, #4]
 8082e00:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8082e02:	a806      	add	r0, sp, #24
 8082e04:	f007 f952 	bl	808a0ac <mbedtls_mpi_write_binary>
 8082e08:	4607      	mov	r7, r0
 8082e0a:	e003      	b.n	8082e14 <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8082e0c:	f06f 0703 	mvn.w	r7, #3
 8082e10:	e000      	b.n	8082e14 <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8082e12:	4f16      	ldr	r7, [pc, #88]	; (8082e6c <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 8082e14:	a809      	add	r0, sp, #36	; 0x24
 8082e16:	f007 f83c 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 8082e1a:	a80c      	add	r0, sp, #48	; 0x30
 8082e1c:	f007 f839 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8082e20:	a80f      	add	r0, sp, #60	; 0x3c
 8082e22:	f007 f836 	bl	8089e92 <mbedtls_mpi_free>

    if( f_rng != NULL )
 8082e26:	b12e      	cbz	r6, 8082e34 <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 8082e28:	a818      	add	r0, sp, #96	; 0x60
 8082e2a:	f007 f832 	bl	8089e92 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 8082e2e:	a81b      	add	r0, sp, #108	; 0x6c
 8082e30:	f007 f82f 	bl	8089e92 <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 8082e34:	a806      	add	r0, sp, #24
 8082e36:	f007 f82c 	bl	8089e92 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 8082e3a:	a812      	add	r0, sp, #72	; 0x48
 8082e3c:	f007 f829 	bl	8089e92 <mbedtls_mpi_free>
 8082e40:	a815      	add	r0, sp, #84	; 0x54
 8082e42:	f007 f826 	bl	8089e92 <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 8082e46:	a821      	add	r0, sp, #132	; 0x84
 8082e48:	f007 f823 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 8082e4c:	a81e      	add	r0, sp, #120	; 0x78
 8082e4e:	f007 f820 	bl	8089e92 <mbedtls_mpi_free>

    if( ret != 0 )
 8082e52:	b13f      	cbz	r7, 8082e64 <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 8082e54:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
 8082e58:	e000      	b.n	8082e5c <mbedtls_rsa_private+0x354>
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8082e5a:	4b05      	ldr	r3, [pc, #20]	; (8082e70 <mbedtls_rsa_private+0x368>)
 8082e5c:	9303      	str	r3, [sp, #12]
 8082e5e:	e001      	b.n	8082e64 <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8082e60:	4f04      	ldr	r7, [pc, #16]	; (8082e74 <mbedtls_rsa_private+0x36c>)
 8082e62:	e7d7      	b.n	8082e14 <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
 8082e64:	9803      	ldr	r0, [sp, #12]
 8082e66:	b025      	add	sp, #148	; 0x94
 8082e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082e6c:	ffffbc80 	.word	0xffffbc80
 8082e70:	ffffbf80 	.word	0xffffbf80
 8082e74:	ffffbb80 	.word	0xffffbb80

08082e78 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8082e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8082e7c:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8082e7e:	b08b      	sub	sp, #44	; 0x2c
 8082e80:	4680      	mov	r8, r0
 8082e82:	468b      	mov	fp, r1
 8082e84:	9203      	str	r2, [sp, #12]
 8082e86:	9304      	str	r3, [sp, #16]
 8082e88:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8082e8a:	9e18      	ldr	r6, [sp, #96]	; 0x60
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8082e8c:	d105      	bne.n	8082e9a <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
 8082e8e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8082e92:	2b01      	cmp	r3, #1
 8082e94:	d001      	beq.n	8082e9a <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8082e96:	4840      	ldr	r0, [pc, #256]	; (8082f98 <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
 8082e98:	e07a      	b.n	8082f90 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    if( f_rng == NULL )
 8082e9a:	f1bb 0f00 	cmp.w	fp, #0
 8082e9e:	d0fa      	beq.n	8082e96 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8082ea0:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 8082ea4:	f003 fb4a 	bl	808653c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8082ea8:	9002      	str	r0, [sp, #8]
 8082eaa:	2800      	cmp	r0, #0
 8082eac:	d0f3      	beq.n	8082e96 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 8082eae:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
 8082eb2:	f003 fc87 	bl	80867c4 <mbedtls_md_get_size>

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8082eb6:	0043      	lsls	r3, r0, #1
 8082eb8:	9305      	str	r3, [sp, #20]
 8082eba:	0042      	lsls	r2, r0, #1
 8082ebc:	1cbb      	adds	r3, r7, #2
 8082ebe:	4413      	add	r3, r2
 8082ec0:	429f      	cmp	r7, r3
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
    hlen = mbedtls_md_get_size( md_info );
 8082ec2:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8082ec4:	d8e7      	bhi.n	8082e96 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 8082ec6:	429c      	cmp	r4, r3
 8082ec8:	d3e5      	bcc.n	8082e96 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
 8082eca:	4622      	mov	r2, r4
 8082ecc:	2100      	movs	r1, #0
 8082ece:	4630      	mov	r0, r6
 8082ed0:	f00d fbb5 	bl	809063e <memset>

    *p++ = 0;
 8082ed4:	f106 0901 	add.w	r9, r6, #1
 8082ed8:	2300      	movs	r3, #0
 8082eda:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 8082edc:	462a      	mov	r2, r5
 8082ede:	4649      	mov	r1, r9
 8082ee0:	9803      	ldr	r0, [sp, #12]
 8082ee2:	47d8      	blx	fp
 8082ee4:	b110      	cbz	r0, 8082eec <mbedtls_rsa_rsaes_oaep_encrypt+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8082ee6:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 8082eea:	e051      	b.n	8082f90 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    p += hlen;
 8082eec:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 8082ef0:	4653      	mov	r3, sl
 8082ef2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8082ef4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8082ef6:	9802      	ldr	r0, [sp, #8]
 8082ef8:	f003 fb92 	bl	8086620 <mbedtls_md>
 8082efc:	2800      	cmp	r0, #0
 8082efe:	d147      	bne.n	8082f90 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8082f00:	9005      	str	r0, [sp, #20]
 8082f02:	1ea0      	subs	r0, r4, #2
 8082f04:	1bc0      	subs	r0, r0, r7
 8082f06:	006b      	lsls	r3, r5, #1
 8082f08:	4428      	add	r0, r5
 8082f0a:	1ac0      	subs	r0, r0, r3
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
 8082f0c:	2201      	movs	r2, #1
 8082f0e:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
 8082f12:	4410      	add	r0, r2
 8082f14:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8082f16:	463a      	mov	r2, r7
 8082f18:	4450      	add	r0, sl

    mbedtls_md_init( &md_ctx );
 8082f1a:	af07      	add	r7, sp, #28
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
 8082f1c:	f00d fb69 	bl	80905f2 <memcpy>

    mbedtls_md_init( &md_ctx );
 8082f20:	4638      	mov	r0, r7
 8082f22:	f003 fb17 	bl	8086554 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8082f26:	9b05      	ldr	r3, [sp, #20]
 8082f28:	9902      	ldr	r1, [sp, #8]
 8082f2a:	461a      	mov	r2, r3
 8082f2c:	4638      	mov	r0, r7
 8082f2e:	f003 fb37 	bl	80865a0 <mbedtls_md_setup>
 8082f32:	4602      	mov	r2, r0
 8082f34:	b9a8      	cbnz	r0, 8082f62 <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 8082f36:	f105 0a01 	add.w	sl, r5, #1
 8082f3a:	3c01      	subs	r4, #1
 8082f3c:	44b2      	add	sl, r6
 8082f3e:	1b64      	subs	r4, r4, r5
 8082f40:	464a      	mov	r2, r9
 8082f42:	9700      	str	r7, [sp, #0]
 8082f44:	462b      	mov	r3, r5
 8082f46:	4621      	mov	r1, r4
 8082f48:	4650      	mov	r0, sl
 8082f4a:	f7ff faef 	bl	808252c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8082f4e:	4602      	mov	r2, r0
 8082f50:	b938      	cbnz	r0, 8082f62 <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 8082f52:	4652      	mov	r2, sl
 8082f54:	9700      	str	r7, [sp, #0]
 8082f56:	4623      	mov	r3, r4
 8082f58:	4629      	mov	r1, r5
 8082f5a:	4648      	mov	r0, r9
 8082f5c:	f7ff fae6 	bl	808252c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8082f60:	4602      	mov	r2, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
 8082f62:	a807      	add	r0, sp, #28
 8082f64:	9202      	str	r2, [sp, #8]
 8082f66:	f003 fafa 	bl	808655e <mbedtls_md_free>

    if( ret != 0 )
 8082f6a:	9a02      	ldr	r2, [sp, #8]
 8082f6c:	b97a      	cbnz	r2, 8082f8e <mbedtls_rsa_rsaes_oaep_encrypt+0x116>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8082f6e:	9b04      	ldr	r3, [sp, #16]
 8082f70:	b92b      	cbnz	r3, 8082f7e <mbedtls_rsa_rsaes_oaep_encrypt+0x106>
 8082f72:	4632      	mov	r2, r6
 8082f74:	4631      	mov	r1, r6
 8082f76:	4640      	mov	r0, r8
 8082f78:	f7ff fd84 	bl	8082a84 <mbedtls_rsa_public>
 8082f7c:	e008      	b.n	8082f90 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8082f7e:	9600      	str	r6, [sp, #0]
 8082f80:	4633      	mov	r3, r6
 8082f82:	9a03      	ldr	r2, [sp, #12]
 8082f84:	4659      	mov	r1, fp
 8082f86:	4640      	mov	r0, r8
 8082f88:	f7ff fdbe 	bl	8082b08 <mbedtls_rsa_private>
 8082f8c:	e000      	b.n	8082f90 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8082f8e:	4610      	mov	r0, r2
}
 8082f90:	b00b      	add	sp, #44	; 0x2c
 8082f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082f96:	bf00      	nop
 8082f98:	ffffbf80 	.word	0xffffbf80

08082f9c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8082f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082fa0:	469a      	mov	sl, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8082fa2:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8082fa6:	4607      	mov	r7, r0
 8082fa8:	4689      	mov	r9, r1
 8082faa:	4693      	mov	fp, r2
 8082fac:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8082fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8082fb2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8082fb4:	d103      	bne.n	8082fbe <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
 8082fb6:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8082fba:	2a00      	cmp	r2, #0
 8082fbc:	d155      	bne.n	808306a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 8082fbe:	f1b9 0f00 	cmp.w	r9, #0
 8082fc2:	d052      	beq.n	808306a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 8082fc4:	2b00      	cmp	r3, #0
 8082fc6:	d050      	beq.n	808306a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 8082fc8:	2e00      	cmp	r6, #0
 8082fca:	d04e      	beq.n	808306a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8082fcc:	f118 020b 	adds.w	r2, r8, #11

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 8082fd0:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8082fd2:	d24a      	bcs.n	808306a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 8082fd4:	4294      	cmp	r4, r2
 8082fd6:	d348      	bcc.n	808306a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 8082fd8:	4635      	mov	r5, r6

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 8082fda:	3c03      	subs	r4, #3

    *p++ = 0;
 8082fdc:	2200      	movs	r2, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 8082fde:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
 8082fe2:	f805 2b02 	strb.w	r2, [r5], #2
    if( mode == MBEDTLS_RSA_PUBLIC )
 8082fe6:	f1ba 0f00 	cmp.w	sl, #0
 8082fea:	d118      	bne.n	808301e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 8082fec:	2202      	movs	r2, #2
 8082fee:	7072      	strb	r2, [r6, #1]
 8082ff0:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
 8082ff2:	42a5      	cmp	r5, r4
 8082ff4:	d01c      	beq.n	8083030 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
 8082ff6:	2264      	movs	r2, #100	; 0x64
 8082ff8:	9200      	str	r2, [sp, #0]
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
 8082ffa:	2201      	movs	r2, #1
 8082ffc:	4629      	mov	r1, r5
 8082ffe:	4658      	mov	r0, fp
 8083000:	9301      	str	r3, [sp, #4]
 8083002:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
 8083004:	782a      	ldrb	r2, [r5, #0]
 8083006:	9b01      	ldr	r3, [sp, #4]
 8083008:	bb8a      	cbnz	r2, 808306e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 808300a:	9a00      	ldr	r2, [sp, #0]
 808300c:	3a01      	subs	r2, #1
 808300e:	9200      	str	r2, [sp, #0]
 8083010:	d102      	bne.n	8083018 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7c>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8083012:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 8083016:	e02e      	b.n	8083076 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
 8083018:	2800      	cmp	r0, #0
 808301a:	d0ee      	beq.n	8082ffa <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5e>
 808301c:	e7f9      	b.n	8083012 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 808301e:	2201      	movs	r2, #1
 8083020:	7072      	strb	r2, [r6, #1]
 8083022:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
 8083024:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 8083026:	42ac      	cmp	r4, r5
 8083028:	d002      	beq.n	8083030 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
            *p++ = 0xFF;
 808302a:	f805 2b01 	strb.w	r2, [r5], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 808302e:	e7fa      	b.n	8083026 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
    }

    *p++ = 0;
 8083030:	4620      	mov	r0, r4
 8083032:	2200      	movs	r2, #0
 8083034:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 8083038:	4619      	mov	r1, r3
 808303a:	4642      	mov	r2, r8
 808303c:	f00d fad9 	bl	80905f2 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8083040:	f1ba 0f00 	cmp.w	sl, #0
 8083044:	d107      	bne.n	8083056 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xba>
 8083046:	4632      	mov	r2, r6
 8083048:	4631      	mov	r1, r6
 808304a:	4638      	mov	r0, r7
}
 808304c:	b003      	add	sp, #12
 808304e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8083052:	f7ff bd17 	b.w	8082a84 <mbedtls_rsa_public>
 8083056:	4633      	mov	r3, r6
 8083058:	465a      	mov	r2, fp
 808305a:	4649      	mov	r1, r9
 808305c:	4638      	mov	r0, r7
 808305e:	960c      	str	r6, [sp, #48]	; 0x30
}
 8083060:	b003      	add	sp, #12
 8083062:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8083066:	f7ff bd4f 	b.w	8082b08 <mbedtls_rsa_private>
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808306a:	4804      	ldr	r0, [pc, #16]	; (808307c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
 808306c:	e003      	b.n	8083076 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 808306e:	2800      	cmp	r0, #0
 8083070:	d1cf      	bne.n	8083012 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
 8083072:	3501      	adds	r5, #1
    *p++ = 0;
    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
 8083074:	e7bd      	b.n	8082ff2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 8083076:	b003      	add	sp, #12
 8083078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808307c:	ffffbf80 	.word	0xffffbf80

08083080 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8083080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083082:	b087      	sub	sp, #28
    switch( ctx->padding )
 8083084:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8083088:	ac0c      	add	r4, sp, #48	; 0x30
 808308a:	cc70      	ldmia	r4, {r4, r5, r6}
    switch( ctx->padding )
 808308c:	b157      	cbz	r7, 80830a4 <mbedtls_rsa_pkcs1_encrypt+0x24>
 808308e:	2f01      	cmp	r7, #1
 8083090:	d110      	bne.n	80830b4 <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
 8083092:	9402      	str	r4, [sp, #8]
 8083094:	2400      	movs	r4, #0
 8083096:	9604      	str	r6, [sp, #16]
 8083098:	9503      	str	r5, [sp, #12]
 808309a:	9401      	str	r4, [sp, #4]
 808309c:	9400      	str	r4, [sp, #0]
 808309e:	f7ff feeb 	bl	8082e78 <mbedtls_rsa_rsaes_oaep_encrypt>
 80830a2:	e008      	b.n	80830b6 <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 80830a4:	960e      	str	r6, [sp, #56]	; 0x38
 80830a6:	950d      	str	r5, [sp, #52]	; 0x34
 80830a8:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80830aa:	b007      	add	sp, #28
 80830ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 80830b0:	f7ff bf74 	b.w	8082f9c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80830b4:	4801      	ldr	r0, [pc, #4]	; (80830bc <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
 80830b6:	b007      	add	sp, #28
 80830b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80830ba:	bf00      	nop
 80830bc:	ffffbf00 	.word	0xffffbf00

080830c0 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80830c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80830c4:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80830c6:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80830ca:	4606      	mov	r6, r0
 80830cc:	468a      	mov	sl, r1
 80830ce:	9203      	str	r2, [sp, #12]
 80830d0:	469b      	mov	fp, r3
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80830d2:	d105      	bne.n	80830e0 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
 80830d4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80830d8:	2b01      	cmp	r3, #1
 80830da:	d001      	beq.n	80830e0 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80830dc:	485c      	ldr	r0, [pc, #368]	; (8083250 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 80830de:	e0b2      	b.n	8083246 <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
 80830e0:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 80830e2:	f1a7 0310 	sub.w	r3, r7, #16
 80830e6:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80830ea:	d8f7      	bhi.n	80830dc <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80830ec:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
 80830f0:	f003 fa24 	bl	808653c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80830f4:	9002      	str	r0, [sp, #8]
 80830f6:	2800      	cmp	r0, #0
 80830f8:	d0f0      	beq.n	80830dc <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80830fa:	f003 fb63 	bl	80867c4 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80830fe:	f100 0801 	add.w	r8, r0, #1
 8083102:	ea4f 0548 	mov.w	r5, r8, lsl #1
 8083106:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8083108:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 808310a:	d3e7      	bcc.n	80830dc <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 808310c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8083110:	f1bb 0f00 	cmp.w	fp, #0
 8083114:	d106      	bne.n	8083124 <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
 8083116:	464a      	mov	r2, r9
 8083118:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 808311c:	4630      	mov	r0, r6
 808311e:	f7ff fcb1 	bl	8082a84 <mbedtls_rsa_public>
 8083122:	e008      	b.n	8083136 <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
 8083124:	f8cd 9000 	str.w	r9, [sp]
 8083128:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 808312c:	9a03      	ldr	r2, [sp, #12]
 808312e:	4651      	mov	r1, sl
 8083130:	4630      	mov	r0, r6
 8083132:	f7ff fce9 	bl	8082b08 <mbedtls_rsa_private>
 8083136:	4682      	mov	sl, r0

    if( ret != 0 )
 8083138:	2800      	cmp	r0, #0
 808313a:	d13c      	bne.n	80831b6 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
 808313c:	ae05      	add	r6, sp, #20
 808313e:	4630      	mov	r0, r6
 8083140:	f003 fa08 	bl	8086554 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8083144:	4652      	mov	r2, sl
 8083146:	9902      	ldr	r1, [sp, #8]
 8083148:	4630      	mov	r0, r6
 808314a:	f003 fa29 	bl	80865a0 <mbedtls_md_setup>
 808314e:	4682      	mov	sl, r0
 8083150:	b108      	cbz	r0, 8083156 <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
 8083152:	4630      	mov	r0, r6
 8083154:	e03b      	b.n	80831ce <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 8083156:	f107 3bff 	add.w	fp, r7, #4294967295
 808315a:	44c8      	add	r8, r9
 808315c:	ebc4 0b0b 	rsb	fp, r4, fp
                          &md_ctx ) ) != 0 ||
 8083160:	9600      	str	r6, [sp, #0]
 8083162:	465b      	mov	r3, fp
 8083164:	4642      	mov	r2, r8
 8083166:	4621      	mov	r1, r4
 8083168:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 808316c:	f7ff f9de 	bl	808252c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8083170:	4682      	mov	sl, r0
 8083172:	bb58      	cbnz	r0, 80831cc <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 8083174:	9600      	str	r6, [sp, #0]
 8083176:	4623      	mov	r3, r4
 8083178:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 808317c:	4659      	mov	r1, fp
 808317e:	4640      	mov	r0, r8
 8083180:	f7ff f9d4 	bl	808252c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8083184:	4682      	mov	sl, r0
 8083186:	bb08      	cbnz	r0, 80831cc <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 8083188:	e024      	b.n	80831d4 <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
 808318a:	5c88      	ldrb	r0, [r1, r2]
 808318c:	f080 0001 	eor.w	r0, r0, #1
 8083190:	ea50 030e 	orrs.w	r3, r0, lr
 8083194:	d151      	bne.n	808323a <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
 8083196:	3201      	adds	r2, #1
 8083198:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 808319a:	aa18      	add	r2, sp, #96	; 0x60
 808319c:	1a8a      	subs	r2, r1, r2
 808319e:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
 80831a2:	1aba      	subs	r2, r7, r2
 80831a4:	4282      	cmp	r2, r0
 80831a6:	d84b      	bhi.n	8083240 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 80831a8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
 80831ac:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
 80831ae:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
 80831b2:	f00d fa1e 	bl	80905f2 <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 80831b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80831ba:	a818      	add	r0, sp, #96	; 0x60
 80831bc:	f7ff f9ae 	bl	808251c <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 80831c0:	a808      	add	r0, sp, #32
 80831c2:	2140      	movs	r1, #64	; 0x40
 80831c4:	f7ff f9aa 	bl	808251c <_ZL15mbedtls_zeroizePvj>

    return( ret );
 80831c8:	4650      	mov	r0, sl
 80831ca:	e03c      	b.n	8083246 <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
 80831cc:	a805      	add	r0, sp, #20
 80831ce:	f003 f9c6 	bl	808655e <mbedtls_md_free>
        goto cleanup;
 80831d2:	e7f0      	b.n	80831b6 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
 80831d4:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80831d6:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
 80831d8:	f003 f9c1 	bl	808655e <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80831dc:	4633      	mov	r3, r6
 80831de:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80831e2:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 80831e6:	9802      	ldr	r0, [sp, #8]
 80831e8:	f003 fa1a 	bl	8086620 <mbedtls_md>
 80831ec:	4682      	mov	sl, r0
 80831ee:	2800      	cmp	r0, #0
 80831f0:	d1e1      	bne.n	80831b6 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80831f2:	4650      	mov	r0, sl
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
 80831f4:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
 80831f8:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
 80831fc:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80831fe:	42a0      	cmp	r0, r4
 8083200:	d208      	bcs.n	8083214 <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
 8083202:	5c32      	ldrb	r2, [r6, r0]
 8083204:	f811 c000 	ldrb.w	ip, [r1, r0]
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8083208:	3001      	adds	r0, #1
        bad |= lhash[i] ^ *p++;
 808320a:	ea82 0c0c 	eor.w	ip, r2, ip
 808320e:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8083212:	e7f4      	b.n	80831fe <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
 8083214:	4421      	add	r1, r4

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8083216:	2400      	movs	r4, #0
 8083218:	460e      	mov	r6, r1
 808321a:	4622      	mov	r2, r4
 808321c:	1b7d      	subs	r5, r7, r5
 808321e:	440d      	add	r5, r1
 8083220:	42b5      	cmp	r5, r6
 8083222:	d0b2      	beq.n	808318a <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
 8083224:	f816 0b01 	ldrb.w	r0, [r6], #1
 8083228:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 808322a:	4260      	negs	r0, r4
 808322c:	4320      	orrs	r0, r4
 808322e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8083232:	f080 0001 	eor.w	r0, r0, #1
 8083236:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8083238:	e7f2      	b.n	8083220 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 808323a:	f8df a018 	ldr.w	sl, [pc, #24]	; 8083254 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
 808323e:	e7ba      	b.n	80831b6 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8083240:	f8df a014 	ldr.w	sl, [pc, #20]	; 8083258 <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
 8083244:	e7b7      	b.n	80831b6 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 8083246:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 808324a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808324e:	bf00      	nop
 8083250:	ffffbf80 	.word	0xffffbf80
 8083254:	ffffbf00 	.word	0xffffbf00
 8083258:	ffffbc00 	.word	0xffffbc00

0808325c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 808325c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 808325e:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8083260:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8083264:	461d      	mov	r5, r3
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8083266:	d103      	bne.n	8083270 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14>
 8083268:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 808326c:	2b00      	cmp	r3, #0
 808326e:	d17f      	bne.n	8083370 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 8083270:	6847      	ldr	r7, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 8083272:	f1a7 0310 	sub.w	r3, r7, #16
 8083276:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 808327a:	d879      	bhi.n	8083370 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
 808327c:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 808327e:	b945      	cbnz	r5, 8083292 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x36>
 8083280:	4632      	mov	r2, r6
 8083282:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
 8083286:	f7ff fbfd 	bl	8082a84 <mbedtls_rsa_public>

    if( ret != 0 )
 808328a:	4604      	mov	r4, r0
 808328c:	2800      	cmp	r0, #0
 808328e:	d168      	bne.n	8083362 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
 8083290:	e02f      	b.n	80832f2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x96>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8083292:	9600      	str	r6, [sp, #0]
 8083294:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
 8083298:	f7ff fc36 	bl	8082b08 <mbedtls_rsa_private>

    if( ret != 0 )
 808329c:	4604      	mov	r4, r0
 808329e:	2800      	cmp	r0, #0
 80832a0:	d15f      	bne.n	8083362 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 80832a2:	2d01      	cmp	r5, #1
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 80832a4:	7832      	ldrb	r2, [r6, #0]

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 80832a6:	d125      	bne.n	80832f4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x98>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80832a8:	4601      	mov	r1, r0
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 80832aa:	4686      	mov	lr, r0
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 80832ac:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80832ae:	1efd      	subs	r5, r7, #3
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 80832b0:	f083 0302 	eor.w	r3, r3, #2
 80832b4:	4313      	orrs	r3, r2

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80832b6:	42a9      	cmp	r1, r5
 80832b8:	d212      	bcs.n	80832e0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 80832ba:	1872      	adds	r2, r6, r1
 80832bc:	7890      	ldrb	r0, [r2, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80832be:	3101      	adds	r1, #1
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 80832c0:	4242      	negs	r2, r0
 80832c2:	4310      	orrs	r0, r2
 80832c4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80832c8:	f080 0001 	eor.w	r0, r0, #1
 80832cc:	4304      	orrs	r4, r0
 80832ce:	b2e4      	uxtb	r4, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80832d0:	4262      	negs	r2, r4
 80832d2:	4322      	orrs	r2, r4
 80832d4:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80832d8:	f082 0201 	eor.w	r2, r2, #1
 80832dc:	4496      	add	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80832de:	e7ea      	b.n	80832b6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5a>
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 80832e0:	f10d 020a 	add.w	r2, sp, #10
 80832e4:	f10e 0101 	add.w	r1, lr, #1
 80832e8:	4411      	add	r1, r2
 80832ea:	f812 200e 	ldrb.w	r2, [r2, lr]
 80832ee:	4313      	orrs	r3, r2
 80832f0:	e01e      	b.n	8083330 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd4>
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 80832f2:	7832      	ldrb	r2, [r6, #0]
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80832f4:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80832f6:	1efc      	subs	r4, r7, #3
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80832f8:	f083 0301 	eor.w	r3, r3, #1
 80832fc:	4313      	orrs	r3, r2
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
 80832fe:	2200      	movs	r2, #0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8083300:	4611      	mov	r1, r2
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 8083302:	4696      	mov	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8083304:	42a1      	cmp	r1, r4
 8083306:	d20b      	bcs.n	8083320 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc4>
        {
            pad_done |= ( p[i] != 0xFF );
 8083308:	1870      	adds	r0, r6, r1
 808330a:	7880      	ldrb	r0, [r0, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 808330c:	3101      	adds	r1, #1
        {
            pad_done |= ( p[i] != 0xFF );
 808330e:	28ff      	cmp	r0, #255	; 0xff
 8083310:	bf18      	it	ne
 8083312:	f042 0201 	orrne.w	r2, r2, #1
            pad_count += ( pad_done == 0 );
 8083316:	f082 0001 	eor.w	r0, r2, #1
 808331a:	b2c0      	uxtb	r0, r0
 808331c:	4486      	add	lr, r0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 808331e:	e7f1      	b.n	8083304 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 8083320:	f10d 020a 	add.w	r2, sp, #10
 8083324:	f812 500e 	ldrb.w	r5, [r2, lr]
 8083328:	f10e 0101 	add.w	r1, lr, #1
 808332c:	4411      	add	r1, r2
 808332e:	432b      	orrs	r3, r5
    }

    bad |= ( pad_count < 8 );

    if( bad )
 8083330:	f1be 0f07 	cmp.w	lr, #7
 8083334:	bf8c      	ite	hi
 8083336:	461c      	movhi	r4, r3
 8083338:	f043 0401 	orrls.w	r4, r3, #1
 808333c:	b264      	sxtb	r4, r4
 808333e:	b96c      	cbnz	r4, 808335c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x100>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 8083340:	1b8a      	subs	r2, r1, r6
 8083342:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 8083346:	1aba      	subs	r2, r7, r2
 8083348:	429a      	cmp	r2, r3
 808334a:	d809      	bhi.n	8083360 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x104>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 808334c:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 8083350:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8083354:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 8083356:	f00d f94c 	bl	80905f2 <memcpy>
 808335a:	e002      	b.n	8083362 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>

    bad |= ( pad_count < 8 );

    if( bad )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 808335c:	4c06      	ldr	r4, [pc, #24]	; (8083378 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11c>)
 808335e:	e000      	b.n	8083362 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8083360:	4c06      	ldr	r4, [pc, #24]	; (808337c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x120>)
    *olen = ilen - (p - buf);
    memcpy( output, p, *olen );
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 8083362:	4630      	mov	r0, r6
 8083364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8083368:	f7ff f8d8 	bl	808251c <_ZL15mbedtls_zeroizePvj>

    return( ret );
 808336c:	4620      	mov	r0, r4
 808336e:	e000      	b.n	8083372 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x116>
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083370:	4803      	ldr	r0, [pc, #12]	; (8083380 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x124>)

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 8083372:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 8083376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083378:	ffffbf00 	.word	0xffffbf00
 808337c:	ffffbc00 	.word	0xffffbc00
 8083380:	ffffbf80 	.word	0xffffbf80

08083384 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8083384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083386:	b087      	sub	sp, #28
    switch( ctx->padding )
 8083388:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 808338c:	ac0c      	add	r4, sp, #48	; 0x30
 808338e:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
    switch( ctx->padding )
 8083390:	f1be 0f00 	cmp.w	lr, #0
 8083394:	d00c      	beq.n	80833b0 <mbedtls_rsa_pkcs1_decrypt+0x2c>
 8083396:	f1be 0f01 	cmp.w	lr, #1
 808339a:	d112      	bne.n	80833c2 <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
 808339c:	9402      	str	r4, [sp, #8]
 808339e:	2400      	movs	r4, #0
 80833a0:	9705      	str	r7, [sp, #20]
 80833a2:	9604      	str	r6, [sp, #16]
 80833a4:	9503      	str	r5, [sp, #12]
 80833a6:	9401      	str	r4, [sp, #4]
 80833a8:	9400      	str	r4, [sp, #0]
 80833aa:	f7ff fe89 	bl	80830c0 <mbedtls_rsa_rsaes_oaep_decrypt>
 80833ae:	e009      	b.n	80833c4 <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 80833b0:	970f      	str	r7, [sp, #60]	; 0x3c
 80833b2:	960e      	str	r6, [sp, #56]	; 0x38
 80833b4:	950d      	str	r5, [sp, #52]	; 0x34
 80833b6:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80833b8:	b007      	add	sp, #28
 80833ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 80833be:	f7ff bf4d 	b.w	808325c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80833c2:	4801      	ldr	r0, [pc, #4]	; (80833c8 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 80833c4:	b007      	add	sp, #28
 80833c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80833c8:	ffffbf00 	.word	0xffffbf00

080833cc <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80833cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80833d0:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80833d2:	b09d      	sub	sp, #116	; 0x74
 80833d4:	4680      	mov	r8, r0
 80833d6:	468a      	mov	sl, r1
 80833d8:	9204      	str	r2, [sp, #16]
 80833da:	9305      	str	r3, [sp, #20]
 80833dc:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 80833e0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80833e2:	d105      	bne.n	80833f0 <mbedtls_rsa_rsassa_pss_sign+0x24>
 80833e4:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 80833e8:	2b01      	cmp	r3, #1
 80833ea:	d001      	beq.n	80833f0 <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80833ec:	4858      	ldr	r0, [pc, #352]	; (8083550 <mbedtls_rsa_rsassa_pss_sign+0x184>)
 80833ee:	e0ab      	b.n	8083548 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    if( f_rng == NULL )
 80833f0:	f1ba 0f00 	cmp.w	sl, #0
 80833f4:	d0fa      	beq.n	80833ec <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80833f6:	f8d8 6004 	ldr.w	r6, [r8, #4]

    if( md_alg != MBEDTLS_MD_NONE )
 80833fa:	b130      	cbz	r0, 808340a <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80833fc:	f003 f89e 	bl	808653c <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8083400:	2800      	cmp	r0, #0
 8083402:	d0f3      	beq.n	80833ec <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8083404:	f003 f9de 	bl	80867c4 <mbedtls_md_get_size>
 8083408:	9027      	str	r0, [sp, #156]	; 0x9c
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 808340a:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 808340e:	f003 f895 	bl	808653c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8083412:	4683      	mov	fp, r0
 8083414:	2800      	cmp	r0, #0
 8083416:	d0e9      	beq.n	80833ec <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8083418:	f003 f9d4 	bl	80867c4 <mbedtls_md_get_size>
    slen = hlen;

    if( olen < hlen + slen + 2 )
 808341c:	0045      	lsls	r5, r0, #1
 808341e:	1cab      	adds	r3, r5, #2
 8083420:	429e      	cmp	r6, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8083422:	4607      	mov	r7, r0
    slen = hlen;

    if( olen < hlen + slen + 2 )
 8083424:	d3e2      	bcc.n	80833ec <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( sig, 0, olen );
 8083426:	4632      	mov	r2, r6
 8083428:	2100      	movs	r1, #0
 808342a:	4620      	mov	r0, r4
 808342c:	f00d f907 	bl	809063e <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 8083430:	463a      	mov	r2, r7
 8083432:	a90c      	add	r1, sp, #48	; 0x30
 8083434:	9804      	ldr	r0, [sp, #16]
 8083436:	47d0      	blx	sl
 8083438:	b110      	cbz	r0, 8083440 <mbedtls_rsa_rsassa_pss_sign+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 808343a:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 808343e:	e083      	b.n	8083548 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8083440:	f108 0308 	add.w	r3, r8, #8
 8083444:	9007      	str	r0, [sp, #28]
 8083446:	4618      	mov	r0, r3
 8083448:	9303      	str	r3, [sp, #12]
 808344a:	f006 fdd4 	bl	8089ff6 <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 808344e:	1b75      	subs	r5, r6, r5
    *p++ = 0x01;
 8083450:	f105 39ff 	add.w	r9, r5, #4294967295
 8083454:	2201      	movs	r2, #1
 8083456:	4425      	add	r5, r4
 8083458:	44a1      	add	r9, r4
 808345a:	f805 2c02 	strb.w	r2, [r5, #-2]
    memcpy( p, salt, slen );
 808345e:	a90c      	add	r1, sp, #48	; 0x30
 8083460:	463a      	mov	r2, r7
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8083462:	9006      	str	r0, [sp, #24]
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;

    mbedtls_md_init( &md_ctx );
 8083464:	ad09      	add	r5, sp, #36	; 0x24

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
 8083466:	4648      	mov	r0, r9
 8083468:	f00d f8c3 	bl	80905f2 <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
 808346c:	4628      	mov	r0, r5
 808346e:	f003 f871 	bl	8086554 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8083472:	9b07      	ldr	r3, [sp, #28]
 8083474:	4659      	mov	r1, fp
 8083476:	461a      	mov	r2, r3
 8083478:	4628      	mov	r0, r5
 808347a:	f003 f891 	bl	80865a0 <mbedtls_md_setup>
 808347e:	4602      	mov	r2, r0
 8083480:	2800      	cmp	r0, #0
 8083482:	d14a      	bne.n	808351a <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 8083484:	4628      	mov	r0, r5
 8083486:	f003 f8ad 	bl	80865e4 <mbedtls_md_starts>
 808348a:	4602      	mov	r2, r0
 808348c:	2800      	cmp	r0, #0
 808348e:	d144      	bne.n	808351a <mbedtls_rsa_rsassa_pss_sign+0x14e>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
 8083490:	eb09 0b07 	add.w	fp, r9, r7
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 8083494:	2208      	movs	r2, #8
 8083496:	4659      	mov	r1, fp
 8083498:	4628      	mov	r0, r5
 808349a:	f003 f8ad 	bl	80865f8 <mbedtls_md_update>
 808349e:	4602      	mov	r2, r0
 80834a0:	2800      	cmp	r0, #0
 80834a2:	d13a      	bne.n	808351a <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 80834a4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80834a6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80834a8:	4628      	mov	r0, r5
 80834aa:	f003 f8a5 	bl	80865f8 <mbedtls_md_update>
 80834ae:	4602      	mov	r2, r0
 80834b0:	bb98      	cbnz	r0, 808351a <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 80834b2:	463a      	mov	r2, r7
 80834b4:	a90c      	add	r1, sp, #48	; 0x30
 80834b6:	4628      	mov	r0, r5
 80834b8:	f003 f89e 	bl	80865f8 <mbedtls_md_update>
 80834bc:	4602      	mov	r2, r0
 80834be:	bb60      	cbnz	r0, 808351a <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 80834c0:	4659      	mov	r1, fp
 80834c2:	4628      	mov	r0, r5
 80834c4:	f003 f8a2 	bl	808660c <mbedtls_md_finish>
 80834c8:	4602      	mov	r2, r0
 80834ca:	bb30      	cbnz	r0, 808351a <mbedtls_rsa_rsassa_pss_sign+0x14e>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 80834cc:	9b06      	ldr	r3, [sp, #24]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80834ce:	1e71      	subs	r1, r6, #1
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 80834d0:	3b01      	subs	r3, #1
 80834d2:	f013 0f07 	tst.w	r3, #7
 80834d6:	bf0c      	ite	eq
 80834d8:	2001      	moveq	r0, #1
 80834da:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80834dc:	1bc9      	subs	r1, r1, r7
 80834de:	465a      	mov	r2, fp
 80834e0:	1a09      	subs	r1, r1, r0
 80834e2:	9500      	str	r5, [sp, #0]
 80834e4:	463b      	mov	r3, r7
 80834e6:	4420      	add	r0, r4
 80834e8:	f7ff f820 	bl	808252c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80834ec:	4602      	mov	r2, r0
 80834ee:	b9a0      	cbnz	r0, 808351a <mbedtls_rsa_rsassa_pss_sign+0x14e>
 80834f0:	9006      	str	r0, [sp, #24]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80834f2:	9803      	ldr	r0, [sp, #12]
 80834f4:	f006 fd7f 	bl	8089ff6 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80834f8:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 80834fc:	7823      	ldrb	r3, [r4, #0]
 80834fe:	3001      	adds	r0, #1
 8083500:	26ff      	movs	r6, #255	; 0xff
 8083502:	fa46 f000 	asr.w	r0, r6, r0
 8083506:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
 8083508:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 808350a:	7020      	strb	r0, [r4, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_zeroize( salt, sizeof( salt ) );
 808350c:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
 808350e:	f809 3017 	strb.w	r3, [r9, r7, lsl #1]

    mbedtls_zeroize( salt, sizeof( salt ) );
 8083512:	a80c      	add	r0, sp, #48	; 0x30
 8083514:	f7ff f802 	bl	808251c <_ZL15mbedtls_zeroizePvj>
 8083518:	9a06      	ldr	r2, [sp, #24]

exit:
    mbedtls_md_free( &md_ctx );
 808351a:	4628      	mov	r0, r5
 808351c:	9203      	str	r2, [sp, #12]
 808351e:	f003 f81e 	bl	808655e <mbedtls_md_free>

    if( ret != 0 )
 8083522:	9a03      	ldr	r2, [sp, #12]
 8083524:	b97a      	cbnz	r2, 8083546 <mbedtls_rsa_rsassa_pss_sign+0x17a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 8083526:	9b05      	ldr	r3, [sp, #20]
 8083528:	b92b      	cbnz	r3, 8083536 <mbedtls_rsa_rsassa_pss_sign+0x16a>
 808352a:	4622      	mov	r2, r4
 808352c:	4621      	mov	r1, r4
 808352e:	4640      	mov	r0, r8
 8083530:	f7ff faa8 	bl	8082a84 <mbedtls_rsa_public>
 8083534:	e008      	b.n	8083548 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 8083536:	9400      	str	r4, [sp, #0]
 8083538:	4623      	mov	r3, r4
 808353a:	9a04      	ldr	r2, [sp, #16]
 808353c:	4651      	mov	r1, sl
 808353e:	4640      	mov	r0, r8
 8083540:	f7ff fae2 	bl	8082b08 <mbedtls_rsa_private>
 8083544:	e000      	b.n	8083548 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 8083546:	4610      	mov	r0, r2
}
 8083548:	b01d      	add	sp, #116	; 0x74
 808354a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808354e:	bf00      	nop
 8083550:	ffffbf80 	.word	0xffffbf80

08083554 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8083554:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8083558:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 808355a:	4689      	mov	r9, r1
 808355c:	a90b      	add	r1, sp, #44	; 0x2c
 808355e:	4605      	mov	r5, r0
 8083560:	4692      	mov	sl, r2
 8083562:	c986      	ldmia	r1, {r1, r2, r7}
 8083564:	461c      	mov	r4, r3
 8083566:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 808356a:	d103      	bne.n	8083574 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 808356c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8083570:	2b00      	cmp	r3, #0
 8083572:	d14b      	bne.n	808360c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 8083574:	9700      	str	r7, [sp, #0]
 8083576:	686b      	ldr	r3, [r5, #4]
 8083578:	f7ff f82a 	bl	80825d0 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 808357c:	2800      	cmp	r0, #0
 808357e:	d149      	bne.n	8083614 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 8083580:	b93c      	cbnz	r4, 8083592 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8083582:	463a      	mov	r2, r7
 8083584:	4639      	mov	r1, r7
 8083586:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8083588:	b002      	add	sp, #8
 808358a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 808358e:	f7ff ba79 	b.w	8082a84 <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 8083592:	686c      	ldr	r4, [r5, #4]
 8083594:	2001      	movs	r0, #1
 8083596:	4621      	mov	r1, r4
 8083598:	f00d f806 	bl	80905a8 <calloc>
    if( sig_try == NULL )
 808359c:	4606      	mov	r6, r0
 808359e:	b3b8      	cbz	r0, 8083610 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 80835a0:	4621      	mov	r1, r4
 80835a2:	2001      	movs	r0, #1
 80835a4:	f00d f800 	bl	80905a8 <calloc>
    if( verif == NULL )
 80835a8:	4680      	mov	r8, r0
 80835aa:	b918      	cbnz	r0, 80835b4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
 80835ac:	4630      	mov	r0, r6
 80835ae:	f00b fed9 	bl	808f364 <free>
 80835b2:	e02d      	b.n	8083610 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 80835b4:	9600      	str	r6, [sp, #0]
 80835b6:	463b      	mov	r3, r7
 80835b8:	4652      	mov	r2, sl
 80835ba:	4649      	mov	r1, r9
 80835bc:	4628      	mov	r0, r5
 80835be:	f7ff faa3 	bl	8082b08 <mbedtls_rsa_private>
 80835c2:	4604      	mov	r4, r0
 80835c4:	b9d0      	cbnz	r0, 80835fc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 80835c6:	4642      	mov	r2, r8
 80835c8:	4631      	mov	r1, r6
 80835ca:	4628      	mov	r0, r5
 80835cc:	f7ff fa5a 	bl	8082a84 <mbedtls_rsa_public>
 80835d0:	4604      	mov	r4, r0
 80835d2:	b998      	cbnz	r0, 80835fc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
 80835d4:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
 80835d6:	4602      	mov	r2, r0
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80835d8:	686d      	ldr	r5, [r5, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80835da:	42aa      	cmp	r2, r5
 80835dc:	d007      	beq.n	80835ee <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
 80835de:	f818 0002 	ldrb.w	r0, [r8, r2]
 80835e2:	5cb9      	ldrb	r1, [r7, r2]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80835e4:	3201      	adds	r2, #1
        diff |= A[i] ^ B[i];
 80835e6:	4041      	eors	r1, r0
 80835e8:	430b      	orrs	r3, r1
 80835ea:	b2db      	uxtb	r3, r3
 80835ec:	e7f5      	b.n	80835da <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80835ee:	b923      	cbnz	r3, 80835fa <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
 80835f0:	4631      	mov	r1, r6
 80835f2:	4638      	mov	r0, r7
 80835f4:	f00c fffd 	bl	80905f2 <memcpy>
 80835f8:	e000      	b.n	80835fc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 80835fa:	4c08      	ldr	r4, [pc, #32]	; (808361c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
 80835fc:	4630      	mov	r0, r6
 80835fe:	f00b feb1 	bl	808f364 <free>
    mbedtls_free( verif );
 8083602:	4640      	mov	r0, r8
 8083604:	f00b feae 	bl	808f364 <free>

    return( ret );
 8083608:	4620      	mov	r0, r4
 808360a:	e003      	b.n	8083614 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
{
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808360c:	4804      	ldr	r0, [pc, #16]	; (8083620 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
 808360e:	e001      	b.n	8083614 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8083610:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8083614:	b002      	add	sp, #8
 8083616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808361a:	bf00      	nop
 808361c:	ffffbd00 	.word	0xffffbd00
 8083620:	ffffbf80 	.word	0xffffbf80

08083624 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8083624:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8083626:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 808362a:	ad06      	add	r5, sp, #24
 808362c:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8083630:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 8083632:	f1be 0f00 	cmp.w	lr, #0
 8083636:	d00a      	beq.n	808364e <mbedtls_rsa_pkcs1_sign+0x2a>
 8083638:	f1be 0f01 	cmp.w	lr, #1
 808363c:	d10f      	bne.n	808365e <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 808363e:	9708      	str	r7, [sp, #32]
 8083640:	9607      	str	r6, [sp, #28]
 8083642:	9506      	str	r5, [sp, #24]
 8083644:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8083646:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 808364a:	f7ff bebf 	b.w	80833cc <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 808364e:	9708      	str	r7, [sp, #32]
 8083650:	9607      	str	r6, [sp, #28]
 8083652:	9506      	str	r5, [sp, #24]
 8083654:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8083656:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 808365a:	f7ff bf7b 	b.w	8083554 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808365e:	4801      	ldr	r0, [pc, #4]	; (8083664 <mbedtls_rsa_pkcs1_sign+0x40>)
 8083660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083662:	bf00      	nop
 8083664:	ffffbf00 	.word	0xffffbf00

08083668 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8083668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 808366c:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 808366e:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 8083672:	4605      	mov	r5, r0
 8083674:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8083678:	d105      	bne.n	8083686 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 808367a:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 808367e:	2801      	cmp	r0, #1
 8083680:	d001      	beq.n	8083686 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083682:	4861      	ldr	r0, [pc, #388]	; (8083808 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
 8083684:	e0bb      	b.n	80837fe <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
 8083686:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
 8083688:	f1a7 0010 	sub.w	r0, r7, #16
 808368c:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 8083690:	d8f7      	bhi.n	8083682 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
 8083692:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 8083694:	b933      	cbnz	r3, 80836a4 <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
 8083696:	4632      	mov	r2, r6
 8083698:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
 808369c:	4628      	mov	r0, r5
 808369e:	f7ff f9f1 	bl	8082a84 <mbedtls_rsa_public>
 80836a2:	e005      	b.n	80836b0 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
 80836a4:	9600      	str	r6, [sp, #0]
 80836a6:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 80836aa:	4628      	mov	r0, r5
 80836ac:	f7ff fa2c 	bl	8082b08 <mbedtls_rsa_private>

    if( ret != 0 )
 80836b0:	2800      	cmp	r0, #0
 80836b2:	f040 80a4 	bne.w	80837fe <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
 80836b6:	1e7c      	subs	r4, r7, #1
 80836b8:	5d33      	ldrb	r3, [r6, r4]
 80836ba:	2bbc      	cmp	r3, #188	; 0xbc
 80836bc:	f040 809e 	bne.w	80837fc <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
 80836c0:	f1b8 0f00 	cmp.w	r8, #0
 80836c4:	d008      	beq.n	80836d8 <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80836c6:	4640      	mov	r0, r8
 80836c8:	f002 ff38 	bl	808653c <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80836cc:	2800      	cmp	r0, #0
 80836ce:	d0d8      	beq.n	8083682 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80836d0:	f003 f878 	bl	80867c4 <mbedtls_md_get_size>
 80836d4:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 80836d8:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
 80836dc:	f002 ff2e 	bl	808653c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80836e0:	4681      	mov	r9, r0
 80836e2:	2800      	cmp	r0, #0
 80836e4:	d0cd      	beq.n	8083682 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80836e6:	f003 f86d 	bl	80867c4 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
 80836ea:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80836ec:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80836ee:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
 80836f2:	9303      	str	r3, [sp, #12]
 80836f4:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80836f6:	f006 fc7e 	bl	8089ff6 <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80836fa:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80836fc:	f100 38ff 	add.w	r8, r0, #4294967295

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8083700:	7832      	ldrb	r2, [r6, #0]
 8083702:	f1c3 0308 	rsb	r3, r3, #8
 8083706:	4443      	add	r3, r8
 8083708:	fa52 f303 	asrs.w	r3, r2, r3
 808370c:	d1b9      	bne.n	8083682 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
 808370e:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
 8083712:	bf08      	it	eq
 8083714:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
 8083716:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
 808371a:	bf0c      	ite	eq
 808371c:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
 8083720:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
 8083722:	429f      	cmp	r7, r3
 8083724:	d3ad      	bcc.n	8083682 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
 8083726:	ac05      	add	r4, sp, #20
 8083728:	4620      	mov	r0, r4
 808372a:	f002 ff13 	bl	8086554 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808372e:	2200      	movs	r2, #0
 8083730:	4649      	mov	r1, r9
 8083732:	4620      	mov	r0, r4
 8083734:	f002 ff34 	bl	80865a0 <mbedtls_md_setup>
 8083738:	4683      	mov	fp, r0
 808373a:	2800      	cmp	r0, #0
 808373c:	d159      	bne.n	80837f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
 808373e:	ea6f 010a 	mvn.w	r1, sl
 8083742:	4439      	add	r1, r7
 8083744:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 8083748:	9400      	str	r4, [sp, #0]
 808374a:	4653      	mov	r3, sl
 808374c:	464a      	mov	r2, r9
 808374e:	4628      	mov	r0, r5
 8083750:	f7fe feec 	bl	808252c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
 8083754:	4683      	mov	fp, r0
 8083756:	2800      	cmp	r0, #0
 8083758:	d14b      	bne.n	80837f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 808375a:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
 808375e:	7833      	ldrb	r3, [r6, #0]
 8083760:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8083764:	fa48 f707 	asr.w	r7, r8, r7
 8083768:	401f      	ands	r7, r3
 808376a:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
 808376c:	f109 32ff 	add.w	r2, r9, #4294967295
 8083770:	4295      	cmp	r5, r2
 8083772:	4629      	mov	r1, r5
 8083774:	d203      	bcs.n	808377e <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
 8083776:	780b      	ldrb	r3, [r1, #0]
 8083778:	3501      	adds	r5, #1
 808377a:	2b00      	cmp	r3, #0
 808377c:	d0f8      	beq.n	8083770 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
 808377e:	780b      	ldrb	r3, [r1, #0]
 8083780:	2b01      	cmp	r3, #1
 8083782:	d134      	bne.n	80837ee <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8083784:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
 8083788:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 808378a:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
 808378c:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8083790:	d001      	beq.n	8083796 <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
 8083792:	429e      	cmp	r6, r3
 8083794:	d12b      	bne.n	80837ee <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
 8083796:	4620      	mov	r0, r4
 8083798:	f002 ff24 	bl	80865e4 <mbedtls_md_starts>
    if ( ret != 0 )
 808379c:	4683      	mov	fp, r0
 808379e:	bb40      	cbnz	r0, 80837f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 80837a0:	2208      	movs	r2, #8
 80837a2:	a903      	add	r1, sp, #12
 80837a4:	4620      	mov	r0, r4
 80837a6:	f002 ff27 	bl	80865f8 <mbedtls_md_update>
    if ( ret != 0 )
 80837aa:	4683      	mov	fp, r0
 80837ac:	bb08      	cbnz	r0, 80837f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 80837ae:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80837b2:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
 80837b6:	4620      	mov	r0, r4
 80837b8:	f002 ff1e 	bl	80865f8 <mbedtls_md_update>
    if ( ret != 0 )
 80837bc:	4683      	mov	fp, r0
 80837be:	b9c0      	cbnz	r0, 80837f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 80837c0:	4632      	mov	r2, r6
 80837c2:	4629      	mov	r1, r5
 80837c4:	4620      	mov	r0, r4
 80837c6:	f002 ff17 	bl	80865f8 <mbedtls_md_update>
    if ( ret != 0 )
 80837ca:	4683      	mov	fp, r0
 80837cc:	b988      	cbnz	r0, 80837f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
 80837ce:	a908      	add	r1, sp, #32
 80837d0:	4620      	mov	r0, r4
 80837d2:	f002 ff1b 	bl	808660c <mbedtls_md_finish>
    if ( ret != 0 )
 80837d6:	4683      	mov	fp, r0
 80837d8:	b958      	cbnz	r0, 80837f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
 80837da:	4652      	mov	r2, sl
 80837dc:	a908      	add	r1, sp, #32
 80837de:	4648      	mov	r0, r9
 80837e0:	f00c fef8 	bl	80905d4 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80837e4:	4a09      	ldr	r2, [pc, #36]	; (808380c <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
 80837e6:	2800      	cmp	r0, #0
 80837e8:	bf18      	it	ne
 80837ea:	4693      	movne	fp, r2
 80837ec:	e001      	b.n	80837f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80837ee:	f8df b020 	ldr.w	fp, [pc, #32]	; 8083810 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
 80837f2:	4620      	mov	r0, r4
 80837f4:	f002 feb3 	bl	808655e <mbedtls_md_free>

    return( ret );
 80837f8:	4658      	mov	r0, fp
 80837fa:	e000      	b.n	80837fe <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80837fc:	4804      	ldr	r0, [pc, #16]	; (8083810 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
 80837fe:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 8083802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083806:	bf00      	nop
 8083808:	ffffbf80 	.word	0xffffbf80
 808380c:	ffffbc80 	.word	0xffffbc80
 8083810:	ffffbf00 	.word	0xffffbf00

08083814 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 8083814:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 8083816:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 808381a:	b086      	sub	sp, #24
 808381c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 8083820:	b10c      	cbz	r4, 8083826 <mbedtls_rsa_rsassa_pss_verify+0x12>
 8083822:	b2e4      	uxtb	r4, r4
 8083824:	e000      	b.n	8083828 <mbedtls_rsa_rsassa_pss_verify+0x14>
 8083826:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
 8083828:	9403      	str	r4, [sp, #12]
 808382a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 808382c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 808382e:	9402      	str	r4, [sp, #8]
 8083830:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8083832:	9605      	str	r6, [sp, #20]
 8083834:	f04f 36ff 	mov.w	r6, #4294967295
 8083838:	9604      	str	r6, [sp, #16]
 808383a:	9401      	str	r4, [sp, #4]
 808383c:	9500      	str	r5, [sp, #0]
 808383e:	f7ff ff13 	bl	8083668 <mbedtls_rsa_rsassa_pss_verify_ext>

}
 8083842:	b006      	add	sp, #24
 8083844:	bd70      	pop	{r4, r5, r6, pc}
	...

08083848 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8083848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 808384c:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 808384e:	4680      	mov	r8, r0
 8083850:	468a      	mov	sl, r1
 8083852:	4693      	mov	fp, r2
 8083854:	4699      	mov	r9, r3
    int ret = 0;
    const size_t sig_len = ctx->len;
 8083856:	6845      	ldr	r5, [r0, #4]
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8083858:	d102      	bne.n	8083860 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
 808385a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 808385e:	b9eb      	cbnz	r3, 808389c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
 8083860:	4629      	mov	r1, r5
 8083862:	2001      	movs	r0, #1
 8083864:	f00c fea0 	bl	80905a8 <calloc>
 8083868:	4606      	mov	r6, r0
 808386a:	b1c8      	cbz	r0, 80838a0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
 808386c:	4629      	mov	r1, r5
 808386e:	2001      	movs	r0, #1
 8083870:	f00c fe9a 	bl	80905a8 <calloc>
 8083874:	4607      	mov	r7, r0
 8083876:	b9c0      	cbnz	r0, 80838aa <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8083878:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_zeroize( encoded, sig_len );
 808387c:	4630      	mov	r0, r6
 808387e:	4629      	mov	r1, r5
 8083880:	f7fe fe4c 	bl	808251c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded );
 8083884:	4630      	mov	r0, r6
 8083886:	f00b fd6d 	bl	808f364 <free>
    }

    if( encoded_expected != NULL )
 808388a:	b167      	cbz	r7, 80838a6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
 808388c:	4638      	mov	r0, r7
 808388e:	4629      	mov	r1, r5
 8083890:	f7fe fe44 	bl	808251c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded_expected );
 8083894:	4638      	mov	r0, r7
 8083896:	f00b fd65 	bl	808f364 <free>
 808389a:	e004      	b.n	80838a6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808389c:	481b      	ldr	r0, [pc, #108]	; (808390c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 808389e:	e031      	b.n	8083904 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80838a0:	f06f 000f 	mvn.w	r0, #15
 80838a4:	e02e      	b.n	8083904 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
 80838a6:	4620      	mov	r0, r4
 80838a8:	e02c      	b.n	8083904 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 80838aa:	9000      	str	r0, [sp, #0]
 80838ac:	462b      	mov	r3, r5
 80838ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80838b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80838b2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80838b6:	f7fe fe8b 	bl	80825d0 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 80838ba:	4604      	mov	r4, r0
 80838bc:	2800      	cmp	r0, #0
 80838be:	d1dd      	bne.n	808387c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 80838c0:	f1b9 0f00 	cmp.w	r9, #0
 80838c4:	d105      	bne.n	80838d2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
 80838c6:	4632      	mov	r2, r6
 80838c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80838ca:	4640      	mov	r0, r8
 80838cc:	f7ff f8da 	bl	8082a84 <mbedtls_rsa_public>
 80838d0:	e006      	b.n	80838e0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
 80838d2:	9600      	str	r6, [sp, #0]
 80838d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80838d6:	465a      	mov	r2, fp
 80838d8:	4651      	mov	r1, sl
 80838da:	4640      	mov	r0, r8
 80838dc:	f7ff f914 	bl	8082b08 <mbedtls_rsa_private>
 80838e0:	4604      	mov	r4, r0
    if( ret != 0 )
 80838e2:	2800      	cmp	r0, #0
 80838e4:	d1ca      	bne.n	808387c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 80838e6:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80838e8:	429d      	cmp	r5, r3
 80838ea:	d006      	beq.n	80838fa <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
 80838ec:	5cf0      	ldrb	r0, [r6, r3]
 80838ee:	5cfa      	ldrb	r2, [r7, r3]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80838f0:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 80838f2:	4050      	eors	r0, r2
 80838f4:	4304      	orrs	r4, r0
 80838f6:	b2e4      	uxtb	r4, r4
 80838f8:	e7f6      	b.n	80838e8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80838fa:	2c00      	cmp	r4, #0
 80838fc:	4c04      	ldr	r4, [pc, #16]	; (8083910 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
 80838fe:	bf08      	it	eq
 8083900:	2400      	moveq	r4, #0
 8083902:	e7bb      	b.n	808387c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
 8083904:	b003      	add	sp, #12
 8083906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808390a:	bf00      	nop
 808390c:	ffffbf80 	.word	0xffffbf80
 8083910:	ffffbc80 	.word	0xffffbc80

08083914 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8083914:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8083916:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 808391a:	ad06      	add	r5, sp, #24
 808391c:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8083920:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 8083922:	f1be 0f00 	cmp.w	lr, #0
 8083926:	d00a      	beq.n	808393e <mbedtls_rsa_pkcs1_verify+0x2a>
 8083928:	f1be 0f01 	cmp.w	lr, #1
 808392c:	d10f      	bne.n	808394e <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 808392e:	9708      	str	r7, [sp, #32]
 8083930:	9607      	str	r6, [sp, #28]
 8083932:	9506      	str	r5, [sp, #24]
 8083934:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8083936:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 808393a:	f7ff bf6b 	b.w	8083814 <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 808393e:	9708      	str	r7, [sp, #32]
 8083940:	9607      	str	r6, [sp, #28]
 8083942:	9506      	str	r5, [sp, #24]
 8083944:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8083946:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 808394a:	f7ff bf7d 	b.w	8083848 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808394e:	4801      	ldr	r0, [pc, #4]	; (8083954 <mbedtls_rsa_pkcs1_verify+0x40>)
 8083950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083952:	bf00      	nop
 8083954:	ffffbf00 	.word	0xffffbf00

08083958 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8083958:	b510      	push	{r4, lr}
 808395a:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 808395c:	308c      	adds	r0, #140	; 0x8c
 808395e:	f006 fa98 	bl	8089e92 <mbedtls_mpi_free>
 8083962:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8083966:	f006 fa94 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 808396a:	f104 0068 	add.w	r0, r4, #104	; 0x68
 808396e:	f006 fa90 	bl	8089e92 <mbedtls_mpi_free>
 8083972:	f104 0020 	add.w	r0, r4, #32
 8083976:	f006 fa8c 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 808397a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808397e:	f006 fa88 	bl	8089e92 <mbedtls_mpi_free>
 8083982:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8083986:	f006 fa84 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 808398a:	f104 0014 	add.w	r0, r4, #20
 808398e:	f006 fa80 	bl	8089e92 <mbedtls_mpi_free>
 8083992:	f104 0008 	add.w	r0, r4, #8
 8083996:	f006 fa7c 	bl	8089e92 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 808399a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 808399e:	f006 fa78 	bl	8089e92 <mbedtls_mpi_free>
 80839a2:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80839a6:	f006 fa74 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 80839aa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80839ae:	f006 fa70 	bl	8089e92 <mbedtls_mpi_free>
 80839b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80839b6:	f006 fa6c 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 80839ba:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 80839be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
 80839c2:	f006 ba66 	b.w	8089e92 <mbedtls_mpi_free>

080839c6 <mbedtls_hardclock_poll>:
#endif

#if defined(MBEDTLS_TIMING_C)
int mbedtls_hardclock_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
 80839c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80839c8:	461c      	mov	r4, r3
 80839ca:	460d      	mov	r5, r1
 80839cc:	4616      	mov	r6, r2
    unsigned long timer = mbedtls_timing_hardclock();
 80839ce:	f001 f9e3 	bl	8084d98 <mbedtls_timing_hardclock>
    ((void) data);
    *olen = 0;

    if( len < sizeof(unsigned long) )
 80839d2:	2e03      	cmp	r6, #3

#if defined(MBEDTLS_TIMING_C)
int mbedtls_hardclock_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
    unsigned long timer = mbedtls_timing_hardclock();
 80839d4:	9001      	str	r0, [sp, #4]
    *olen = 0;

    if( len < sizeof(unsigned long) )
        return( 0 );

    memcpy( output, &timer, sizeof(unsigned long) );
 80839d6:	bf88      	it	hi
 80839d8:	9801      	ldrhi	r0, [sp, #4]
int mbedtls_hardclock_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
    unsigned long timer = mbedtls_timing_hardclock();
    ((void) data);
    *olen = 0;
 80839da:	f04f 0300 	mov.w	r3, #0
 80839de:	6023      	str	r3, [r4, #0]

    if( len < sizeof(unsigned long) )
        return( 0 );

    memcpy( output, &timer, sizeof(unsigned long) );
 80839e0:	bf84      	itt	hi
 80839e2:	6028      	strhi	r0, [r5, #0]
    *olen = sizeof(unsigned long);
 80839e4:	2304      	movhi	r3, #4

    return( 0 );
}
 80839e6:	f04f 0000 	mov.w	r0, #0

    if( len < sizeof(unsigned long) )
        return( 0 );

    memcpy( output, &timer, sizeof(unsigned long) );
    *olen = sizeof(unsigned long);
 80839ea:	bf88      	it	hi
 80839ec:	6023      	strhi	r3, [r4, #0]

    return( 0 );
}
 80839ee:	b002      	add	sp, #8
 80839f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080839f4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 80839f4:	b538      	push	{r3, r4, r5, lr}
 80839f6:	4605      	mov	r5, r0
 80839f8:	b160      	cbz	r0, 8083a14 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
 80839fa:	4c08      	ldr	r4, [pc, #32]	; (8083a1c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
 80839fc:	6820      	ldr	r0, [r4, #0]
 80839fe:	b158      	cbz	r0, 8083a18 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
 8083a00:	6862      	ldr	r2, [r4, #4]
 8083a02:	686b      	ldr	r3, [r5, #4]
 8083a04:	429a      	cmp	r2, r3
 8083a06:	d103      	bne.n	8083a10 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
 8083a08:	68a9      	ldr	r1, [r5, #8]
 8083a0a:	f00c fde3 	bl	80905d4 <memcmp>
 8083a0e:	b110      	cbz	r0, 8083a16 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
 8083a10:	3414      	adds	r4, #20
 8083a12:	e7f3      	b.n	80839fc <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
 8083a14:	bd38      	pop	{r3, r4, r5, pc}
 8083a16:	4620      	mov	r0, r4
 8083a18:	bd38      	pop	{r3, r4, r5, pc}
 8083a1a:	bf00      	nop
 8083a1c:	080914dc 	.word	0x080914dc

08083a20 <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8083a20:	b570      	push	{r4, r5, r6, lr}
 8083a22:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8083a24:	4605      	mov	r5, r0
 8083a26:	b160      	cbz	r0, 8083a42 <mbedtls_oid_get_attr_short_name+0x22>
 8083a28:	4c09      	ldr	r4, [pc, #36]	; (8083a50 <mbedtls_oid_get_attr_short_name+0x30>)
 8083a2a:	6820      	ldr	r0, [r4, #0]
 8083a2c:	b148      	cbz	r0, 8083a42 <mbedtls_oid_get_attr_short_name+0x22>
 8083a2e:	6862      	ldr	r2, [r4, #4]
 8083a30:	686b      	ldr	r3, [r5, #4]
 8083a32:	429a      	cmp	r2, r3
 8083a34:	d103      	bne.n	8083a3e <mbedtls_oid_get_attr_short_name+0x1e>
 8083a36:	68a9      	ldr	r1, [r5, #8]
 8083a38:	f00c fdcc 	bl	80905d4 <memcmp>
 8083a3c:	b120      	cbz	r0, 8083a48 <mbedtls_oid_get_attr_short_name+0x28>
 8083a3e:	3414      	adds	r4, #20
 8083a40:	e7f3      	b.n	8083a2a <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8083a42:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8083a46:	bd70      	pop	{r4, r5, r6, pc}
 8083a48:	6923      	ldr	r3, [r4, #16]
 8083a4a:	6033      	str	r3, [r6, #0]
 8083a4c:	bd70      	pop	{r4, r5, r6, pc}
 8083a4e:	bf00      	nop
 8083a50:	080909cc 	.word	0x080909cc

08083a54 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8083a54:	b570      	push	{r4, r5, r6, lr}
 8083a56:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8083a58:	4605      	mov	r5, r0
 8083a5a:	b160      	cbz	r0, 8083a76 <mbedtls_oid_get_x509_ext_type+0x22>
 8083a5c:	4c09      	ldr	r4, [pc, #36]	; (8083a84 <mbedtls_oid_get_x509_ext_type+0x30>)
 8083a5e:	6820      	ldr	r0, [r4, #0]
 8083a60:	b148      	cbz	r0, 8083a76 <mbedtls_oid_get_x509_ext_type+0x22>
 8083a62:	6862      	ldr	r2, [r4, #4]
 8083a64:	686b      	ldr	r3, [r5, #4]
 8083a66:	429a      	cmp	r2, r3
 8083a68:	d103      	bne.n	8083a72 <mbedtls_oid_get_x509_ext_type+0x1e>
 8083a6a:	68a9      	ldr	r1, [r5, #8]
 8083a6c:	f00c fdb2 	bl	80905d4 <memcmp>
 8083a70:	b120      	cbz	r0, 8083a7c <mbedtls_oid_get_x509_ext_type+0x28>
 8083a72:	3414      	adds	r4, #20
 8083a74:	e7f3      	b.n	8083a5e <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8083a76:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8083a7a:	bd70      	pop	{r4, r5, r6, pc}
 8083a7c:	6923      	ldr	r3, [r4, #16]
 8083a7e:	6033      	str	r3, [r6, #0]
 8083a80:	bd70      	pop	{r4, r5, r6, pc}
 8083a82:	bf00      	nop
 8083a84:	080915f4 	.word	0x080915f4

08083a88 <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8083a88:	b570      	push	{r4, r5, r6, lr}
 8083a8a:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8083a8c:	4605      	mov	r5, r0
 8083a8e:	b160      	cbz	r0, 8083aaa <mbedtls_oid_get_extended_key_usage+0x22>
 8083a90:	4c09      	ldr	r4, [pc, #36]	; (8083ab8 <mbedtls_oid_get_extended_key_usage+0x30>)
 8083a92:	6820      	ldr	r0, [r4, #0]
 8083a94:	b148      	cbz	r0, 8083aaa <mbedtls_oid_get_extended_key_usage+0x22>
 8083a96:	6862      	ldr	r2, [r4, #4]
 8083a98:	686b      	ldr	r3, [r5, #4]
 8083a9a:	429a      	cmp	r2, r3
 8083a9c:	d103      	bne.n	8083aa6 <mbedtls_oid_get_extended_key_usage+0x1e>
 8083a9e:	68a9      	ldr	r1, [r5, #8]
 8083aa0:	f00c fd98 	bl	80905d4 <memcmp>
 8083aa4:	b120      	cbz	r0, 8083ab0 <mbedtls_oid_get_extended_key_usage+0x28>
 8083aa6:	3410      	adds	r4, #16
 8083aa8:	e7f3      	b.n	8083a92 <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8083aaa:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8083aae:	bd70      	pop	{r4, r5, r6, pc}
 8083ab0:	68e3      	ldr	r3, [r4, #12]
 8083ab2:	6033      	str	r3, [r6, #0]
 8083ab4:	bd70      	pop	{r4, r5, r6, pc}
 8083ab6:	bf00      	nop
 8083ab8:	08090b5c 	.word	0x08090b5c

08083abc <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8083abc:	b510      	push	{r4, lr}
 8083abe:	460c      	mov	r4, r1
 8083ac0:	f7ff ff98 	bl	80839f4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 8083ac4:	b118      	cbz	r0, 8083ace <mbedtls_oid_get_sig_alg_desc+0x12>
 8083ac6:	68c3      	ldr	r3, [r0, #12]
 8083ac8:	2000      	movs	r0, #0
 8083aca:	6023      	str	r3, [r4, #0]
 8083acc:	bd10      	pop	{r4, pc}
 8083ace:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8083ad2:	bd10      	pop	{r4, pc}

08083ad4 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 8083ad4:	b538      	push	{r3, r4, r5, lr}
 8083ad6:	460d      	mov	r5, r1
 8083ad8:	4614      	mov	r4, r2
 8083ada:	f7ff ff8b 	bl	80839f4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 8083ade:	b128      	cbz	r0, 8083aec <mbedtls_oid_get_sig_alg+0x18>
 8083ae0:	7c03      	ldrb	r3, [r0, #16]
 8083ae2:	702b      	strb	r3, [r5, #0]
 8083ae4:	7c43      	ldrb	r3, [r0, #17]
 8083ae6:	2000      	movs	r0, #0
 8083ae8:	7023      	strb	r3, [r4, #0]
 8083aea:	bd38      	pop	{r3, r4, r5, pc}
 8083aec:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8083af0:	bd38      	pop	{r3, r4, r5, pc}
	...

08083af4 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8083af4:	b570      	push	{r4, r5, r6, lr}
 8083af6:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8083af8:	4605      	mov	r5, r0
 8083afa:	b160      	cbz	r0, 8083b16 <mbedtls_oid_get_pk_alg+0x22>
 8083afc:	4c09      	ldr	r4, [pc, #36]	; (8083b24 <mbedtls_oid_get_pk_alg+0x30>)
 8083afe:	6820      	ldr	r0, [r4, #0]
 8083b00:	b148      	cbz	r0, 8083b16 <mbedtls_oid_get_pk_alg+0x22>
 8083b02:	6862      	ldr	r2, [r4, #4]
 8083b04:	686b      	ldr	r3, [r5, #4]
 8083b06:	429a      	cmp	r2, r3
 8083b08:	d103      	bne.n	8083b12 <mbedtls_oid_get_pk_alg+0x1e>
 8083b0a:	68a9      	ldr	r1, [r5, #8]
 8083b0c:	f00c fd62 	bl	80905d4 <memcmp>
 8083b10:	b120      	cbz	r0, 8083b1c <mbedtls_oid_get_pk_alg+0x28>
 8083b12:	3414      	adds	r4, #20
 8083b14:	e7f3      	b.n	8083afe <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8083b16:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8083b1a:	bd70      	pop	{r4, r5, r6, pc}
 8083b1c:	7c23      	ldrb	r3, [r4, #16]
 8083b1e:	7033      	strb	r3, [r6, #0]
 8083b20:	bd70      	pop	{r4, r5, r6, pc}
 8083b22:	bf00      	nop
 8083b24:	08090bcc 	.word	0x08090bcc

08083b28 <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 8083b28:	b570      	push	{r4, r5, r6, lr}
 8083b2a:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 8083b2c:	4605      	mov	r5, r0
 8083b2e:	b160      	cbz	r0, 8083b4a <mbedtls_oid_get_cipher_alg+0x22>
 8083b30:	4c09      	ldr	r4, [pc, #36]	; (8083b58 <mbedtls_oid_get_cipher_alg+0x30>)
 8083b32:	6820      	ldr	r0, [r4, #0]
 8083b34:	b148      	cbz	r0, 8083b4a <mbedtls_oid_get_cipher_alg+0x22>
 8083b36:	6862      	ldr	r2, [r4, #4]
 8083b38:	686b      	ldr	r3, [r5, #4]
 8083b3a:	429a      	cmp	r2, r3
 8083b3c:	d103      	bne.n	8083b46 <mbedtls_oid_get_cipher_alg+0x1e>
 8083b3e:	68a9      	ldr	r1, [r5, #8]
 8083b40:	f00c fd48 	bl	80905d4 <memcmp>
 8083b44:	b120      	cbz	r0, 8083b50 <mbedtls_oid_get_cipher_alg+0x28>
 8083b46:	3414      	adds	r4, #20
 8083b48:	e7f3      	b.n	8083b32 <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 8083b4a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8083b4e:	bd70      	pop	{r4, r5, r6, pc}
 8083b50:	7c23      	ldrb	r3, [r4, #16]
 8083b52:	7033      	strb	r3, [r6, #0]
 8083b54:	bd70      	pop	{r4, r5, r6, pc}
 8083b56:	bf00      	nop
 8083b58:	08090c1c 	.word	0x08090c1c

08083b5c <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8083b5c:	b530      	push	{r4, r5, lr}
 8083b5e:	4b08      	ldr	r3, [pc, #32]	; (8083b80 <mbedtls_oid_get_oid_by_md+0x24>)
 8083b60:	681c      	ldr	r4, [r3, #0]
 8083b62:	b14c      	cbz	r4, 8083b78 <mbedtls_oid_get_oid_by_md+0x1c>
 8083b64:	7c1d      	ldrb	r5, [r3, #16]
 8083b66:	4285      	cmp	r5, r0
 8083b68:	d104      	bne.n	8083b74 <mbedtls_oid_get_oid_by_md+0x18>
 8083b6a:	600c      	str	r4, [r1, #0]
 8083b6c:	685b      	ldr	r3, [r3, #4]
 8083b6e:	2000      	movs	r0, #0
 8083b70:	6013      	str	r3, [r2, #0]
 8083b72:	bd30      	pop	{r4, r5, pc}
 8083b74:	3314      	adds	r3, #20
 8083b76:	e7f3      	b.n	8083b60 <mbedtls_oid_get_oid_by_md+0x4>
 8083b78:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8083b7c:	bd30      	pop	{r4, r5, pc}
 8083b7e:	bf00      	nop
 8083b80:	08091464 	.word	0x08091464

08083b84 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 8083b84:	b570      	push	{r4, r5, r6, lr}
 8083b86:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 8083b88:	4605      	mov	r5, r0
 8083b8a:	b160      	cbz	r0, 8083ba6 <mbedtls_oid_get_md_hmac+0x22>
 8083b8c:	4c09      	ldr	r4, [pc, #36]	; (8083bb4 <mbedtls_oid_get_md_hmac+0x30>)
 8083b8e:	6820      	ldr	r0, [r4, #0]
 8083b90:	b148      	cbz	r0, 8083ba6 <mbedtls_oid_get_md_hmac+0x22>
 8083b92:	6862      	ldr	r2, [r4, #4]
 8083b94:	686b      	ldr	r3, [r5, #4]
 8083b96:	429a      	cmp	r2, r3
 8083b98:	d103      	bne.n	8083ba2 <mbedtls_oid_get_md_hmac+0x1e>
 8083b9a:	68a9      	ldr	r1, [r5, #8]
 8083b9c:	f00c fd1a 	bl	80905d4 <memcmp>
 8083ba0:	b120      	cbz	r0, 8083bac <mbedtls_oid_get_md_hmac+0x28>
 8083ba2:	3414      	adds	r4, #20
 8083ba4:	e7f3      	b.n	8083b8e <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 8083ba6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8083baa:	bd70      	pop	{r4, r5, r6, pc}
 8083bac:	7c23      	ldrb	r3, [r4, #16]
 8083bae:	7033      	strb	r3, [r6, #0]
 8083bb0:	bd70      	pop	{r4, r5, r6, pc}
 8083bb2:	bf00      	nop
 8083bb4:	0809157c 	.word	0x0809157c

08083bb8 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 8083bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083bba:	460f      	mov	r7, r1
 8083bbc:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 8083bbe:	4605      	mov	r5, r0
 8083bc0:	b160      	cbz	r0, 8083bdc <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 8083bc2:	4c0a      	ldr	r4, [pc, #40]	; (8083bec <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
 8083bc4:	6820      	ldr	r0, [r4, #0]
 8083bc6:	b148      	cbz	r0, 8083bdc <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 8083bc8:	6862      	ldr	r2, [r4, #4]
 8083bca:	686b      	ldr	r3, [r5, #4]
 8083bcc:	429a      	cmp	r2, r3
 8083bce:	d103      	bne.n	8083bd8 <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
 8083bd0:	68a9      	ldr	r1, [r5, #8]
 8083bd2:	f00c fcff 	bl	80905d4 <memcmp>
 8083bd6:	b120      	cbz	r0, 8083be2 <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
 8083bd8:	3414      	adds	r4, #20
 8083bda:	e7f3      	b.n	8083bc4 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 8083bdc:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8083be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8083be2:	7c23      	ldrb	r3, [r4, #16]
 8083be4:	703b      	strb	r3, [r7, #0]
 8083be6:	7c63      	ldrb	r3, [r4, #17]
 8083be8:	7033      	strb	r3, [r6, #0]
 8083bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8083bec:	08091428 	.word	0x08091428

08083bf0 <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 8083bf0:	225c      	movs	r2, #92	; 0x5c
 8083bf2:	2100      	movs	r1, #0
 8083bf4:	f00c bd23 	b.w	809063e <memset>

08083bf8 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 8083bf8:	b138      	cbz	r0, 8083c0a <mbedtls_sha1_free+0x12>
 8083bfa:	f100 025c 	add.w	r2, r0, #92	; 0x5c

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8083bfe:	2300      	movs	r3, #0
 8083c00:	4290      	cmp	r0, r2
 8083c02:	d002      	beq.n	8083c0a <mbedtls_sha1_free+0x12>
 8083c04:	7003      	strb	r3, [r0, #0]
 8083c06:	3001      	adds	r0, #1
 8083c08:	e7fa      	b.n	8083c00 <mbedtls_sha1_free+0x8>
 8083c0a:	4770      	bx	lr

08083c0c <mbedtls_sha1_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 8083c0c:	b508      	push	{r3, lr}
    *dst = *src;
 8083c0e:	225c      	movs	r2, #92	; 0x5c
 8083c10:	f00c fcef 	bl	80905f2 <memcpy>
 8083c14:	bd08      	pop	{r3, pc}
	...

08083c18 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 8083c18:	4603      	mov	r3, r0
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 8083c1a:	4a0a      	ldr	r2, [pc, #40]	; (8083c44 <mbedtls_sha1_starts_ret+0x2c>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8083c1c:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 8083c1e:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 8083c20:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8083c24:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 8083c26:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 8083c2a:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 8083c2e:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 8083c32:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 8083c34:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 8083c38:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 8083c3a:	4a03      	ldr	r2, [pc, #12]	; (8083c48 <mbedtls_sha1_starts_ret+0x30>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8083c3c:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
 8083c3e:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
 8083c40:	619a      	str	r2, [r3, #24]

    return( 0 );
}
 8083c42:	4770      	bx	lr
 8083c44:	67452301 	.word	0x67452301
 8083c48:	c3d2e1f0 	.word	0xc3d2e1f0

08083c4c <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8083c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8083c50:	784b      	ldrb	r3, [r1, #1]
 8083c52:	780a      	ldrb	r2, [r1, #0]
 8083c54:	041b      	lsls	r3, r3, #16
 8083c56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8083c5a:	78ca      	ldrb	r2, [r1, #3]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8083c5c:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8083c5e:	4313      	orrs	r3, r2
 8083c60:	788a      	ldrb	r2, [r1, #2]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8083c62:	f891 c008 	ldrb.w	ip, [r1, #8]
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8083c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083c6a:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
 8083c6c:	794b      	ldrb	r3, [r1, #5]
 8083c6e:	790a      	ldrb	r2, [r1, #4]
 8083c70:	041b      	lsls	r3, r3, #16
 8083c72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8083c76:	79ca      	ldrb	r2, [r1, #7]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
 8083c78:	f891 800c 	ldrb.w	r8, [r1, #12]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 8083c7c:	4313      	orrs	r3, r2
 8083c7e:	798a      	ldrb	r2, [r1, #6]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
 8083c80:	f891 e014 	ldrb.w	lr, [r1, #20]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 8083c84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083c88:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
 8083c8a:	7a4b      	ldrb	r3, [r1, #9]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
 8083c8c:	7c0a      	ldrb	r2, [r1, #16]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8083c8e:	041b      	lsls	r3, r3, #16
 8083c90:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8083c94:	f891 c00b 	ldrb.w	ip, [r1, #11]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 8083c98:	7e0f      	ldrb	r7, [r1, #24]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8083c9a:	ea43 030c 	orr.w	r3, r3, ip
 8083c9e:	f891 c00a 	ldrb.w	ip, [r1, #10]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8083ca2:	9001      	str	r0, [sp, #4]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8083ca4:	ea43 2c0c 	orr.w	ip, r3, ip, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
 8083ca8:	7b4b      	ldrb	r3, [r1, #13]
 8083caa:	041b      	lsls	r3, r3, #16
 8083cac:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8083cb0:	f891 800f 	ldrb.w	r8, [r1, #15]
 8083cb4:	ea43 0308 	orr.w	r3, r3, r8
 8083cb8:	f891 800e 	ldrb.w	r8, [r1, #14]
 8083cbc:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
 8083cc0:	7c4b      	ldrb	r3, [r1, #17]
 8083cc2:	041b      	lsls	r3, r3, #16
 8083cc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8083cc8:	7cca      	ldrb	r2, [r1, #19]
 8083cca:	4313      	orrs	r3, r2
 8083ccc:	7c8a      	ldrb	r2, [r1, #18]
 8083cce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083cd2:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
 8083cd4:	7d4b      	ldrb	r3, [r1, #21]
 8083cd6:	041b      	lsls	r3, r3, #16
 8083cd8:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8083cdc:	f891 e017 	ldrb.w	lr, [r1, #23]
 8083ce0:	ea43 030e 	orr.w	r3, r3, lr
 8083ce4:	f891 e016 	ldrb.w	lr, [r1, #22]
 8083ce8:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8083cec:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
 8083cee:	7e4b      	ldrb	r3, [r1, #25]
 8083cf0:	041b      	lsls	r3, r3, #16
 8083cf2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8083cf6:	7ecf      	ldrb	r7, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
 8083cf8:	7f0e      	ldrb	r6, [r1, #28]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 8083cfa:	433b      	orrs	r3, r7
 8083cfc:	7e8f      	ldrb	r7, [r1, #26]
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
 8083cfe:	f891 4020 	ldrb.w	r4, [r1, #32]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 8083d02:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8083d06:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
 8083d08:	7f4b      	ldrb	r3, [r1, #29]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
 8083d0a:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 8083d0e:	041b      	lsls	r3, r3, #16
 8083d10:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8083d14:	7fce      	ldrb	r6, [r1, #31]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
 8083d16:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 8083d1a:	4333      	orrs	r3, r6
 8083d1c:	7f8e      	ldrb	r6, [r1, #30]
 8083d1e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8083d22:	9311      	str	r3, [sp, #68]	; 0x44
    GET_UINT32_BE( W[ 8], data, 32 );
 8083d24:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8083d28:	041b      	lsls	r3, r3, #16
 8083d2a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8083d2e:	f891 4023 	ldrb.w	r4, [r1, #35]	; 0x23
 8083d32:	4323      	orrs	r3, r4
 8083d34:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
 8083d38:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8083d3c:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
 8083d3e:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 8083d42:	041b      	lsls	r3, r3, #16
 8083d44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8083d48:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
 8083d4c:	4313      	orrs	r3, r2
 8083d4e:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 8083d52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083d56:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
 8083d58:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8083d5c:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8083d60:	041b      	lsls	r3, r3, #16
 8083d62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8083d66:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
 8083d6a:	4313      	orrs	r3, r2
 8083d6c:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 8083d70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083d74:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
 8083d76:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8083d7a:	041b      	lsls	r3, r3, #16
 8083d7c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8083d80:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
 8083d84:	4303      	orrs	r3, r0
 8083d86:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
 8083d8a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8083d8e:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
 8083d90:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8083d94:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8083d98:	041b      	lsls	r3, r3, #16
 8083d9a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8083d9e:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
 8083da2:	4303      	orrs	r3, r0
 8083da4:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 8083da8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8083dac:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
 8083dae:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8083db2:	f891 9034 	ldrb.w	r9, [r1, #52]	; 0x34
 8083db6:	041b      	lsls	r3, r3, #16
 8083db8:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 8083dbc:	f891 9037 	ldrb.w	r9, [r1, #55]	; 0x37
    GET_UINT32_BE( W[14], data, 56 );
 8083dc0:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
    GET_UINT32_BE( W[13], data, 52 );
 8083dc4:	ea43 0309 	orr.w	r3, r3, r9
 8083dc8:	f891 9036 	ldrb.w	r9, [r1, #54]	; 0x36
 8083dcc:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 8083dd0:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
 8083dd2:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 8083dd6:	041b      	lsls	r3, r3, #16
 8083dd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8083ddc:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 8083de0:	4313      	orrs	r3, r2
 8083de2:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8083de6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083dea:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
 8083dec:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 8083df0:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8083df4:	041b      	lsls	r3, r3, #16
 8083df6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8083dfa:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8083dfe:	4313      	orrs	r3, r2
 8083e00:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8083e04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083e08:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 8083e0a:	9b01      	ldr	r3, [sp, #4]
 8083e0c:	689b      	ldr	r3, [r3, #8]
 8083e0e:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
 8083e10:	9b01      	ldr	r3, [sp, #4]
 8083e12:	68db      	ldr	r3, [r3, #12]
 8083e14:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 8083e16:	9b01      	ldr	r3, [sp, #4]
 8083e18:	691b      	ldr	r3, [r3, #16]
 8083e1a:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 8083e1c:	9b01      	ldr	r3, [sp, #4]
 8083e1e:	695b      	ldr	r3, [r3, #20]
 8083e20:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
 8083e22:	9b01      	ldr	r3, [sp, #4]
 8083e24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8083e26:	699b      	ldr	r3, [r3, #24]
 8083e28:	9315      	str	r3, [sp, #84]	; 0x54
 8083e2a:	9b05      	ldr	r3, [sp, #20]
 8083e2c:	ea83 0e02 	eor.w	lr, r3, r2
 8083e30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8083e32:	9912      	ldr	r1, [sp, #72]	; 0x48
 8083e34:	ea0e 0e03 	and.w	lr, lr, r3
 8083e38:	ea8e 0e02 	eor.w	lr, lr, r2
 8083e3c:	4bdd      	ldr	r3, [pc, #884]	; (80841b4 <mbedtls_internal_sha1_process+0x568>)
 8083e3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8083e40:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8083e42:	441a      	add	r2, r3
 8083e44:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8083e48:	4496      	add	lr, r2

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 8083e4a:	9a06      	ldr	r2, [sp, #24]
 8083e4c:	eb04 0b03 	add.w	fp, r4, r3
 8083e50:	4496      	add	lr, r2
 8083e52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8083e54:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8083e56:	ea4f 00b2 	mov.w	r0, r2, ror #2
 8083e5a:	9a05      	ldr	r2, [sp, #20]
 8083e5c:	18c5      	adds	r5, r0, r3
 8083e5e:	ea82 0700 	eor.w	r7, r2, r0
 8083e62:	9a05      	ldr	r2, [sp, #20]
 8083e64:	400f      	ands	r7, r1
 8083e66:	4057      	eors	r7, r2
 8083e68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
 8083e6a:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8083e6e:	441a      	add	r2, r3
 8083e70:	4417      	add	r7, r2
 8083e72:	9a07      	ldr	r2, [sp, #28]
 8083e74:	ea80 0901 	eor.w	r9, r0, r1
 8083e78:	4417      	add	r7, r2
 8083e7a:	9a05      	ldr	r2, [sp, #20]
 8083e7c:	ea09 090e 	and.w	r9, r9, lr
 8083e80:	441a      	add	r2, r3
 8083e82:	eb07 67fe 	add.w	r7, r7, lr, ror #27
 8083e86:	4462      	add	r2, ip
    P( D, E, A, B, C, W[2]  );
 8083e88:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8083e8c:	ea89 0900 	eor.w	r9, r9, r0
 8083e90:	4491      	add	r9, r2
 8083e92:	ea81 020e 	eor.w	r2, r1, lr
 8083e96:	403a      	ands	r2, r7
 8083e98:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 8083e9c:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[3]  );
 8083e9e:	ea4f 07b7 	mov.w	r7, r7, ror #2
 8083ea2:	4445      	add	r5, r8
 8083ea4:	18c8      	adds	r0, r1, r3
 8083ea6:	4415      	add	r5, r2
 8083ea8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8083eaa:	ea8e 0207 	eor.w	r2, lr, r7
 8083eae:	ea02 0209 	and.w	r2, r2, r9
 8083eb2:	eb05 65f9 	add.w	r5, r5, r9, ror #27
 8083eb6:	ea82 020e 	eor.w	r2, r2, lr
    P( B, C, D, E, A, W[4]  );
 8083eba:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8083ebe:	4408      	add	r0, r1
 8083ec0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8083ec2:	4410      	add	r0, r2
 8083ec4:	ea87 0209 	eor.w	r2, r7, r9
 8083ec8:	18ce      	adds	r6, r1, r3
 8083eca:	402a      	ands	r2, r5
 8083ecc:	407a      	eors	r2, r7
 8083ece:	4476      	add	r6, lr
 8083ed0:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8083ed4:	4416      	add	r6, r2
    P( A, B, C, D, E, W[5]  );
 8083ed6:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8083eda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8083edc:	ea89 0105 	eor.w	r1, r9, r5
 8083ee0:	4001      	ands	r1, r0
 8083ee2:	441a      	add	r2, r3
 8083ee4:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 8083ee8:	ea81 0109 	eor.w	r1, r1, r9
    P( E, A, B, C, D, W[6]  );
 8083eec:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8083ef0:	443a      	add	r2, r7
 8083ef2:	440a      	add	r2, r1
 8083ef4:	ea85 0100 	eor.w	r1, r5, r0
 8083ef8:	4031      	ands	r1, r6
 8083efa:	eb02 62f6 	add.w	r2, r2, r6, ror #27
 8083efe:	4069      	eors	r1, r5
    P( D, E, A, B, C, W[7]  );
 8083f00:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8083f04:	44cb      	add	fp, r9
 8083f06:	448b      	add	fp, r1
 8083f08:	ea80 0106 	eor.w	r1, r0, r6
 8083f0c:	4011      	ands	r1, r2
 8083f0e:	441c      	add	r4, r3
 8083f10:	4041      	eors	r1, r0
 8083f12:	442c      	add	r4, r5
 8083f14:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
 8083f18:	440c      	add	r4, r1
    P( C, D, E, A, B, W[8]  );
 8083f1a:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8083f1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8083f20:	ea86 0502 	eor.w	r5, r6, r2
 8083f24:	ea05 050b 	and.w	r5, r5, fp
 8083f28:	4419      	add	r1, r3
 8083f2a:	4075      	eors	r5, r6
 8083f2c:	4401      	add	r1, r0
 8083f2e:	eb04 64fb 	add.w	r4, r4, fp, ror #27
 8083f32:	4429      	add	r1, r5
    P( B, C, D, E, A, W[9]  );
 8083f34:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 8083f38:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8083f3a:	ea82 000b 	eor.w	r0, r2, fp
 8083f3e:	eb05 0a03 	add.w	sl, r5, r3
 8083f42:	4020      	ands	r0, r4
 8083f44:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8083f48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[10] );
 8083f4a:	ea4f 04b4 	mov.w	r4, r4, ror #2
 8083f4e:	4050      	eors	r0, r2
 8083f50:	44b2      	add	sl, r6
 8083f52:	4482      	add	sl, r0
 8083f54:	ea8b 0004 	eor.w	r0, fp, r4
 8083f58:	eb05 0903 	add.w	r9, r5, r3
 8083f5c:	4008      	ands	r0, r1
 8083f5e:	ea80 000b 	eor.w	r0, r0, fp
 8083f62:	4491      	add	r9, r2
 8083f64:	eb0a 6af1 	add.w	sl, sl, r1, ror #27
 8083f68:	4481      	add	r9, r0
    P( E, A, B, C, D, W[11] );
 8083f6a:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8083f6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8083f70:	ea84 0201 	eor.w	r2, r4, r1
 8083f74:	eb00 0e03 	add.w	lr, r0, r3
 8083f78:	ea02 020a 	and.w	r2, r2, sl
 8083f7c:	eb09 69fa 	add.w	r9, r9, sl, ror #27
 8083f80:	9802      	ldr	r0, [sp, #8]
    P( D, E, A, B, C, W[12] );
 8083f82:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8083f86:	4062      	eors	r2, r4
 8083f88:	44de      	add	lr, fp
 8083f8a:	4496      	add	lr, r2
 8083f8c:	ea81 020a 	eor.w	r2, r1, sl
 8083f90:	18c5      	adds	r5, r0, r3
 8083f92:	ea02 0209 	and.w	r2, r2, r9
 8083f96:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
 8083f9a:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[13] );
 8083f9c:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8083fa0:	9803      	ldr	r0, [sp, #12]
 8083fa2:	4425      	add	r5, r4
 8083fa4:	4415      	add	r5, r2
 8083fa6:	ea8a 0209 	eor.w	r2, sl, r9
 8083faa:	ea02 020e 	and.w	r2, r2, lr
 8083fae:	4418      	add	r0, r3
 8083fb0:	eb05 65fe 	add.w	r5, r5, lr, ror #27
 8083fb4:	ea82 020a 	eor.w	r2, r2, sl
    P( B, C, D, E, A, W[14] );
 8083fb8:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8083fbc:	4408      	add	r0, r1
 8083fbe:	9904      	ldr	r1, [sp, #16]
 8083fc0:	4410      	add	r0, r2
 8083fc2:	ea89 020e 	eor.w	r2, r9, lr
 8083fc6:	18cf      	adds	r7, r1, r3
 8083fc8:	402a      	ands	r2, r5
 8083fca:	ea82 0209 	eor.w	r2, r2, r9
 8083fce:	4457      	add	r7, sl
 8083fd0:	4417      	add	r7, r2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8083fd2:	9a06      	ldr	r2, [sp, #24]
 8083fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8083fd6:	ea82 020c 	eor.w	r2, r2, ip
 8083fda:	404a      	eors	r2, r1
 8083fdc:	9902      	ldr	r1, [sp, #8]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
 8083fde:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8083fe2:	404a      	eors	r2, r1
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 8083fe4:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8083fe8:	ea8e 0105 	eor.w	r1, lr, r5
    P( E, A, B, C, D, R(16) );
 8083fec:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8083ff0:	9206      	str	r2, [sp, #24]
 8083ff2:	4001      	ands	r1, r0
 8083ff4:	441a      	add	r2, r3
 8083ff6:	ea81 010e 	eor.w	r1, r1, lr
 8083ffa:	444a      	add	r2, r9
 8083ffc:	440a      	add	r2, r1
    P( D, E, A, B, C, R(17) );
 8083ffe:	9907      	ldr	r1, [sp, #28]
 8084000:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8084002:	ea81 0108 	eor.w	r1, r1, r8
 8084006:	4061      	eors	r1, r4
 8084008:	9c03      	ldr	r4, [sp, #12]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 808400a:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 808400e:	4061      	eors	r1, r4
 8084010:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8084014:	9107      	str	r1, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8084016:	ea4f 00b0 	mov.w	r0, r0, ror #2
 808401a:	9c07      	ldr	r4, [sp, #28]
 808401c:	ea85 0100 	eor.w	r1, r5, r0
 8084020:	18e6      	adds	r6, r4, r3
 8084022:	4039      	ands	r1, r7
 8084024:	4069      	eors	r1, r5
 8084026:	4476      	add	r6, lr
 8084028:	440e      	add	r6, r1
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 808402a:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 808402c:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 8084030:	ea8c 0c01 	eor.w	ip, ip, r1
 8084034:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 8084036:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(18) );
 808403a:	ea8c 0c01 	eor.w	ip, ip, r1
 808403e:	9904      	ldr	r1, [sp, #16]
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 8084040:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(18) );
 8084044:	ea8c 0c01 	eor.w	ip, ip, r1
 8084048:	ea4f 71fc 	mov.w	r1, ip, ror #31
 808404c:	9108      	str	r1, [sp, #32]
 808404e:	9c08      	ldr	r4, [sp, #32]
 8084050:	ea80 0107 	eor.w	r1, r0, r7
 8084054:	4011      	ands	r1, r2
 8084056:	441c      	add	r4, r3
 8084058:	4041      	eors	r1, r0
 808405a:	442c      	add	r4, r5
 808405c:	440c      	add	r4, r1
    P( B, C, D, E, A, R(19) );
 808405e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 8084060:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(19) );
 8084064:	ea88 0801 	eor.w	r8, r8, r1
 8084068:	990c      	ldr	r1, [sp, #48]	; 0x30
 808406a:	ea87 0502 	eor.w	r5, r7, r2
 808406e:	ea88 0801 	eor.w	r8, r8, r1
 8084072:	9906      	ldr	r1, [sp, #24]
 8084074:	4035      	ands	r5, r6
 8084076:	ea88 0801 	eor.w	r8, r8, r1
 808407a:	ea4f 78f8 	mov.w	r8, r8, ror #31
 808407e:	4443      	add	r3, r8
 8084080:	407d      	eors	r5, r7
 8084082:	4403      	add	r3, r0
 8084084:	18e9      	adds	r1, r5, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8084086:	9810      	ldr	r0, [sp, #64]	; 0x40
 8084088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808408a:	4d4b      	ldr	r5, [pc, #300]	; (80841b8 <mbedtls_internal_sha1_process+0x56c>)
 808408c:	ea83 0c00 	eor.w	ip, r3, r0
 8084090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 8084092:	eb04 64f6 	add.w	r4, r4, r6, ror #27
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8084096:	ea8c 0c03 	eor.w	ip, ip, r3
 808409a:	9b07      	ldr	r3, [sp, #28]
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 808409c:	ea4f 06b6 	mov.w	r6, r6, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80840a0:	ea8c 0c03 	eor.w	ip, ip, r3
 80840a4:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80840a8:	ea82 0306 	eor.w	r3, r2, r6
 80840ac:	eb0c 0b05 	add.w	fp, ip, r5
 80840b0:	4063      	eors	r3, r4
 80840b2:	44bb      	add	fp, r7
    P( E, A, B, C, D, R(21) );
 80840b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80840b6:	449b      	add	fp, r3
 80840b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 80840ba:	eb01 61f4 	add.w	r1, r1, r4, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80840be:	ea83 0e00 	eor.w	lr, r3, r0
 80840c2:	9b02      	ldr	r3, [sp, #8]
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80840c4:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(21) );
 80840c8:	ea8e 0e03 	eor.w	lr, lr, r3
 80840cc:	9b08      	ldr	r3, [sp, #32]
 80840ce:	ea86 0004 	eor.w	r0, r6, r4
 80840d2:	ea8e 0e03 	eor.w	lr, lr, r3
 80840d6:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80840da:	eb0e 0305 	add.w	r3, lr, r5
 80840de:	4048      	eors	r0, r1
 80840e0:	4413      	add	r3, r2
 80840e2:	4403      	add	r3, r0
    P( D, E, A, B, C, R(22) );
 80840e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80840e6:	9809      	ldr	r0, [sp, #36]	; 0x24
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80840e8:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80840ec:	ea82 0700 	eor.w	r7, r2, r0
 80840f0:	9a03      	ldr	r2, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80840f2:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(22) );
 80840f6:	4057      	eors	r7, r2
 80840f8:	ea87 0708 	eor.w	r7, r7, r8
 80840fc:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8084100:	ea84 0201 	eor.w	r2, r4, r1
 8084104:	eb07 0a05 	add.w	sl, r7, r5
 8084108:	ea82 020b 	eor.w	r2, r2, fp
 808410c:	44b2      	add	sl, r6
    P( C, D, E, A, B, R(23) );
 808410e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8084110:	4492      	add	sl, r2
 8084112:	9a11      	ldr	r2, [sp, #68]	; 0x44

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 8084114:	eb03 63fb 	add.w	r3, r3, fp, ror #27
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8084118:	ea82 0600 	eor.w	r6, r2, r0
 808411c:	9a04      	ldr	r2, [sp, #16]
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 808411e:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( C, D, E, A, B, R(23) );
 8084122:	4056      	eors	r6, r2
 8084124:	ea86 060c 	eor.w	r6, r6, ip
 8084128:	ea4f 76f6 	mov.w	r6, r6, ror #31
 808412c:	ea81 020b 	eor.w	r2, r1, fp
 8084130:	eb06 0905 	add.w	r9, r6, r5
 8084134:	405a      	eors	r2, r3
 8084136:	44a1      	add	r9, r4
    P( B, C, D, E, A, R(24) );
 8084138:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808413a:	4491      	add	r9, r2
 808413c:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 808413e:	eb0a 6af3 	add.w	sl, sl, r3, ror #27
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8084142:	ea82 0400 	eor.w	r4, r2, r0
 8084146:	9a06      	ldr	r2, [sp, #24]
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8084148:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(24) );
 808414c:	4054      	eors	r4, r2
 808414e:	ea84 040e 	eor.w	r4, r4, lr
 8084152:	ea4f 72f4 	mov.w	r2, r4, ror #31
 8084156:	9209      	str	r2, [sp, #36]	; 0x24
 8084158:	9809      	ldr	r0, [sp, #36]	; 0x24
 808415a:	ea8b 0203 	eor.w	r2, fp, r3
 808415e:	4428      	add	r0, r5
 8084160:	ea82 020a 	eor.w	r2, r2, sl
 8084164:	4408      	add	r0, r1
 8084166:	4410      	add	r0, r2
    P( A, B, C, D, E, R(25) );
 8084168:	990c      	ldr	r1, [sp, #48]	; 0x30
 808416a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 808416c:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 8084170:	404a      	eors	r2, r1
 8084172:	9907      	ldr	r1, [sp, #28]

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8084174:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(25) );
 8084178:	404a      	eors	r2, r1
 808417a:	407a      	eors	r2, r7
 808417c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8084180:	920a      	str	r2, [sp, #40]	; 0x28
 8084182:	990a      	ldr	r1, [sp, #40]	; 0x28
 8084184:	ea83 020a 	eor.w	r2, r3, sl
 8084188:	4429      	add	r1, r5
 808418a:	ea82 0209 	eor.w	r2, r2, r9
 808418e:	4459      	add	r1, fp
 8084190:	4411      	add	r1, r2
    P( E, A, B, C, D, R(26) );
 8084192:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8084194:	eb00 60f9 	add.w	r0, r0, r9, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 8084198:	4614      	mov	r4, r2
 808419a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 808419c:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( E, A, B, C, D, R(26) );
 80841a0:	4062      	eors	r2, r4
 80841a2:	9c08      	ldr	r4, [sp, #32]
 80841a4:	ea8a 0b09 	eor.w	fp, sl, r9
 80841a8:	4062      	eors	r2, r4
 80841aa:	4072      	eors	r2, r6
 80841ac:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80841b0:	e004      	b.n	80841bc <mbedtls_internal_sha1_process+0x570>
 80841b2:	bf00      	nop
 80841b4:	5a827999 	.word	0x5a827999
 80841b8:	6ed9eba1 	.word	0x6ed9eba1
 80841bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80841be:	442a      	add	r2, r5
    P( D, E, A, B, C, R(27) );
 80841c0:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 80841c2:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80841c6:	ea8b 0b00 	eor.w	fp, fp, r0
 80841ca:	441a      	add	r2, r3
    P( E, A, B, C, D, R(26) );
 80841cc:	ea4f 03b0 	mov.w	r3, r0, ror #2
    P( D, E, A, B, C, R(27) );
 80841d0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80841d2:	445a      	add	r2, fp
 80841d4:	4060      	eors	r0, r4
 80841d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80841d8:	ea80 0008 	eor.w	r0, r0, r8
 80841dc:	4060      	eors	r0, r4
 80841de:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80841e2:	900c      	str	r0, [sp, #48]	; 0x30
 80841e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80841e6:	ea89 0003 	eor.w	r0, r9, r3
 80841ea:	eb04 0b05 	add.w	fp, r4, r5
 80841ee:	4048      	eors	r0, r1
 80841f0:	44da      	add	sl, fp
    P( C, D, E, A, B, R(28) );
 80841f2:	9c03      	ldr	r4, [sp, #12]
 80841f4:	4482      	add	sl, r0
 80841f6:	980d      	ldr	r0, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 80841f8:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80841fc:	4060      	eors	r0, r4
 80841fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8084200:	ea80 000c 	eor.w	r0, r0, ip
 8084204:	4060      	eors	r0, r4
 8084206:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( B, C, D, E, A, R(29) );
 808420a:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 808420c:	900d      	str	r0, [sp, #52]	; 0x34
 808420e:	4428      	add	r0, r5
 8084210:	4448      	add	r0, r9
    P( B, C, D, E, A, R(29) );
 8084212:	46a1      	mov	r9, r4
 8084214:	9c04      	ldr	r4, [sp, #16]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 8084216:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 808421a:	ea89 0904 	eor.w	r9, r9, r4
 808421e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8084220:	ea89 090e 	eor.w	r9, r9, lr
 8084224:	ea89 0904 	eor.w	r9, r9, r4
 8084228:	ea4f 74f9 	mov.w	r4, r9, ror #31
 808422c:	eb04 0905 	add.w	r9, r4, r5
 8084230:	9402      	str	r4, [sp, #8]
 8084232:	ea83 0b01 	eor.w	fp, r3, r1
    P( A, B, C, D, E, R(30) );
 8084236:	9c06      	ldr	r4, [sp, #24]
 8084238:	4499      	add	r9, r3
 808423a:	9b03      	ldr	r3, [sp, #12]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 808423c:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8084240:	4063      	eors	r3, r4
 8084242:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8084244:	407b      	eors	r3, r7
 8084246:	4063      	eors	r3, r4
 8084248:	ea4f 73f3 	mov.w	r3, r3, ror #31
 808424c:	9303      	str	r3, [sp, #12]
 808424e:	ea8b 0b02 	eor.w	fp, fp, r2
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 8084252:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8084256:	9c03      	ldr	r4, [sp, #12]
 8084258:	4458      	add	r0, fp
 808425a:	ea81 0b02 	eor.w	fp, r1, r2
 808425e:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 8084262:	ea8b 0b0a 	eor.w	fp, fp, sl
    P( B, C, D, E, A, R(29) );
 8084266:	ea4f 0aba 	mov.w	sl, sl, ror #2
 808426a:	ea82 030a 	eor.w	r3, r2, sl
 808426e:	44d9      	add	r9, fp
 8084270:	eb04 0b05 	add.w	fp, r4, r5
 8084274:	4043      	eors	r3, r0
 8084276:	4459      	add	r1, fp
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8084278:	9c07      	ldr	r4, [sp, #28]
 808427a:	4419      	add	r1, r3
 808427c:	9b04      	ldr	r3, [sp, #16]
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 808427e:	eb09 69f0 	add.w	r9, r9, r0, ror #27
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8084282:	4063      	eors	r3, r4
 8084284:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8084286:	4073      	eors	r3, r6
 8084288:	4063      	eors	r3, r4
 808428a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 808428e:	9304      	str	r3, [sp, #16]
 8084290:	442b      	add	r3, r5
    P( D, E, A, B, C, R(32) );
 8084292:	9c08      	ldr	r4, [sp, #32]
 8084294:	4413      	add	r3, r2
 8084296:	9a06      	ldr	r2, [sp, #24]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8084298:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 808429c:	4062      	eors	r2, r4
 808429e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80842a0:	ea8a 0b00 	eor.w	fp, sl, r0
 80842a4:	4062      	eors	r2, r4
 80842a6:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80842a8:	eb01 61f9 	add.w	r1, r1, r9, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80842ac:	4062      	eors	r2, r4
 80842ae:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80842b2:	9206      	str	r2, [sp, #24]
 80842b4:	9c06      	ldr	r4, [sp, #24]
 80842b6:	ea8b 0b09 	eor.w	fp, fp, r9
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80842ba:	ea4f 09b9 	mov.w	r9, r9, ror #2
 80842be:	ea80 0209 	eor.w	r2, r0, r9
 80842c2:	445b      	add	r3, fp
 80842c4:	eb04 0b05 	add.w	fp, r4, r5
 80842c8:	404a      	eors	r2, r1
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80842ca:	9c07      	ldr	r4, [sp, #28]
 80842cc:	44da      	add	sl, fp
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80842ce:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80842d2:	4492      	add	sl, r2
    P( D, E, A, B, C, R(32) );
 80842d4:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
    P( C, D, E, A, B, R(33) );
 80842d8:	ea84 0a08 	eor.w	sl, r4, r8
 80842dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80842de:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(33) );
 80842e2:	ea8a 0a04 	eor.w	sl, sl, r4
 80842e6:	9c03      	ldr	r4, [sp, #12]
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 80842e8:	ea88 080e 	eor.w	r8, r8, lr
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80842ec:	ea8a 0a04 	eor.w	sl, sl, r4
 80842f0:	ea4f 74fa 	mov.w	r4, sl, ror #31
 80842f4:	eb04 0b05 	add.w	fp, r4, r5
 80842f8:	ea89 0a01 	eor.w	sl, r9, r1
 80842fc:	4458      	add	r0, fp
 80842fe:	ea8a 0a03 	eor.w	sl, sl, r3
 8084302:	4482      	add	sl, r0
    P( B, C, D, E, A, R(34) );
 8084304:	9808      	ldr	r0, [sp, #32]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8084306:	9407      	str	r4, [sp, #28]
    P( B, C, D, E, A, R(34) );
 8084308:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 808430a:	ea80 000c 	eor.w	r0, r0, ip
 808430e:	4060      	eors	r0, r4
 8084310:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8084312:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(34) );
 8084316:	4060      	eors	r0, r4
 8084318:	ea4f 70f0 	mov.w	r0, r0, ror #31
 808431c:	9008      	str	r0, [sp, #32]
 808431e:	9c08      	ldr	r4, [sp, #32]
 8084320:	ea81 0003 	eor.w	r0, r1, r3
 8084324:	eb04 0b05 	add.w	fp, r4, r5
    P( A, B, C, D, E, R(35) );
 8084328:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 808432a:	4050      	eors	r0, r2
 808432c:	ea88 0804 	eor.w	r8, r8, r4
 8084330:	9c06      	ldr	r4, [sp, #24]
 8084332:	44d9      	add	r9, fp
 8084334:	ea88 0804 	eor.w	r8, r8, r4
 8084338:	ea4f 7bf8 	mov.w	fp, r8, ror #31
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 808433c:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8084340:	4481      	add	r9, r0
    P( B, C, D, E, A, R(34) );
 8084342:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8084346:	eb09 60fa 	add.w	r0, r9, sl, ror #27
 808434a:	ea83 0802 	eor.w	r8, r3, r2
 808434e:	eb0b 0905 	add.w	r9, fp, r5
 8084352:	ea88 080a 	eor.w	r8, r8, sl
 8084356:	4449      	add	r1, r9
 8084358:	4441      	add	r1, r8
    P( A, B, C, D, E, R(35) );
 808435a:	eb01 68f0 	add.w	r8, r1, r0, ror #27
    P( E, A, B, C, D, R(36) );
 808435e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8084360:	ea8c 0c07 	eor.w	ip, ip, r7
 8084364:	ea8c 0c01 	eor.w	ip, ip, r1
 8084368:	9907      	ldr	r1, [sp, #28]
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 808436a:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(36) );
 808436e:	ea8c 0c01 	eor.w	ip, ip, r1
 8084372:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8084376:	910e      	str	r1, [sp, #56]	; 0x38
 8084378:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 808437a:	ea82 010a 	eor.w	r1, r2, sl
 808437e:	eb04 0c05 	add.w	ip, r4, r5
 8084382:	4041      	eors	r1, r0
 8084384:	4463      	add	r3, ip
 8084386:	440b      	add	r3, r1
 8084388:	eb03 61f8 	add.w	r1, r3, r8, ror #27
    P( D, E, A, B, C, R(37) );
 808438c:	9b02      	ldr	r3, [sp, #8]
 808438e:	ea8e 0e06 	eor.w	lr, lr, r6
 8084392:	ea8e 0e03 	eor.w	lr, lr, r3
 8084396:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
 8084398:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(37) );
 808439c:	ea8e 0e03 	eor.w	lr, lr, r3
 80843a0:	ea4f 73fe 	mov.w	r3, lr, ror #31
 80843a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80843a6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80843a8:	ea8a 0300 	eor.w	r3, sl, r0
 80843ac:	eb04 0e05 	add.w	lr, r4, r5
 80843b0:	ea83 0308 	eor.w	r3, r3, r8
 80843b4:	4472      	add	r2, lr
 80843b6:	441a      	add	r2, r3
 80843b8:	eb02 63f1 	add.w	r3, r2, r1, ror #27
    P( C, D, E, A, B, R(38) );
 80843bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
 80843be:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(38) );
 80843c2:	4057      	eors	r7, r2
 80843c4:	9a03      	ldr	r2, [sp, #12]
 80843c6:	4057      	eors	r7, r2
 80843c8:	ea87 070b 	eor.w	r7, r7, fp
 80843cc:	ea4f 72f7 	mov.w	r2, r7, ror #31
 80843d0:	9210      	str	r2, [sp, #64]	; 0x40
 80843d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80843d4:	ea80 0208 	eor.w	r2, r0, r8
 80843d8:	1967      	adds	r7, r4, r5
    P( B, C, D, E, A, R(39) );
 80843da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80843dc:	404a      	eors	r2, r1
 80843de:	4066      	eors	r6, r4
 80843e0:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80843e2:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(39) );
 80843e6:	4066      	eors	r6, r4
 80843e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80843ea:	44ba      	add	sl, r7
 80843ec:	4066      	eors	r6, r4
 80843ee:	ea4f 74f6 	mov.w	r4, r6, ror #31
 80843f2:	4425      	add	r5, r4
 80843f4:	9411      	str	r4, [sp, #68]	; 0x44
 80843f6:	4428      	add	r0, r5
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80843f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80843fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80843fc:	ea88 0601 	eor.w	r6, r8, r1
 8084400:	4065      	eors	r5, r4
 8084402:	462c      	mov	r4, r5
 8084404:	9d06      	ldr	r5, [sp, #24]
 8084406:	405e      	eors	r6, r3
 8084408:	406c      	eors	r4, r5
 808440a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 808440c:	4492      	add	sl, r2
 808440e:	4430      	add	r0, r6
 8084410:	406c      	eors	r4, r5
 8084412:	4ed6      	ldr	r6, [pc, #856]	; (808476c <mbedtls_internal_sha1_process+0xb20>)
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 8084414:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8084418:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 808441c:	ea4f 03b3 	mov.w	r3, r3, ror #2
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8084420:	9409      	str	r4, [sp, #36]	; 0x24
 8084422:	ea42 0503 	orr.w	r5, r2, r3
 8084426:	4434      	add	r4, r6
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 8084428:	eb00 60f2 	add.w	r0, r0, r2, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 808442c:	400d      	ands	r5, r1
 808442e:	44a0      	add	r8, r4
 8084430:	ea02 0403 	and.w	r4, r2, r3
 8084434:	432c      	orrs	r4, r5
 8084436:	eb08 68f0 	add.w	r8, r8, r0, ror #27
 808443a:	ea4f 0ab2 	mov.w	sl, r2, ror #2
 808443e:	44a0      	add	r8, r4
    P( E, A, B, C, D, R(41) );
 8084440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8084442:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8084444:	ea4f 0cb0 	mov.w	ip, r0, ror #2
 8084448:	4062      	eors	r2, r4
 808444a:	9c07      	ldr	r4, [sp, #28]
 808444c:	4062      	eors	r2, r4
 808444e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8084450:	4062      	eors	r2, r4
 8084452:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8084456:	920a      	str	r2, [sp, #40]	; 0x28
 8084458:	ea40 020a 	orr.w	r2, r0, sl
 808445c:	ea02 0403 	and.w	r4, r2, r3
 8084460:	ea00 020a 	and.w	r2, r0, sl
 8084464:	4322      	orrs	r2, r4
 8084466:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(42) );
 8084468:	980d      	ldr	r0, [sp, #52]	; 0x34
 808446a:	4434      	add	r4, r6
 808446c:	4421      	add	r1, r4
 808446e:	4411      	add	r1, r2
 8084470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
 8084472:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( D, E, A, B, C, R(42) );
 8084476:	4042      	eors	r2, r0
 8084478:	9808      	ldr	r0, [sp, #32]
 808447a:	4042      	eors	r2, r0
 808447c:	9811      	ldr	r0, [sp, #68]	; 0x44
 808447e:	4042      	eors	r2, r0
 8084480:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8084484:	920b      	str	r2, [sp, #44]	; 0x2c
 8084486:	ea48 000c 	orr.w	r0, r8, ip
 808448a:	4432      	add	r2, r6
 808448c:	ea00 000a 	and.w	r0, r0, sl
 8084490:	4413      	add	r3, r2
 8084492:	ea08 020c 	and.w	r2, r8, ip
 8084496:	4302      	orrs	r2, r0
 8084498:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 808449c:	4413      	add	r3, r2
    P( C, D, E, A, B, R(43) );
 808449e:	9802      	ldr	r0, [sp, #8]
 80844a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 80844a2:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(43) );
 80844a6:	4050      	eors	r0, r2
 80844a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80844aa:	ea80 000b 	eor.w	r0, r0, fp
 80844ae:	4050      	eors	r0, r2
 80844b0:	ea4f 72f0 	mov.w	r2, r0, ror #31
 80844b4:	ea41 0008 	orr.w	r0, r1, r8
 80844b8:	920c      	str	r2, [sp, #48]	; 0x30
 80844ba:	ea00 000c 	and.w	r0, r0, ip
 80844be:	ea01 0208 	and.w	r2, r1, r8
 80844c2:	4310      	orrs	r0, r2
 80844c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80844c6:	ea4f 01b1 	mov.w	r1, r1, ror #2
 80844ca:	4432      	add	r2, r6
 80844cc:	4452      	add	r2, sl
 80844ce:	4402      	add	r2, r0
 80844d0:	eb02 6af3 	add.w	sl, r2, r3, ror #27
    P( B, C, D, E, A, R(44) );
 80844d4:	9803      	ldr	r0, [sp, #12]
 80844d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80844d8:	ea43 0401 	orr.w	r4, r3, r1
 80844dc:	4050      	eors	r0, r2
 80844de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80844e0:	ea04 0408 	and.w	r4, r4, r8
 80844e4:	4050      	eors	r0, r2
 80844e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80844e8:	ea4f 07b3 	mov.w	r7, r3, ror #2
 80844ec:	4050      	eors	r0, r2
 80844ee:	ea4f 72f0 	mov.w	r2, r0, ror #31
 80844f2:	1990      	adds	r0, r2, r6
 80844f4:	920d      	str	r2, [sp, #52]	; 0x34
 80844f6:	4460      	add	r0, ip
 80844f8:	ea03 0201 	and.w	r2, r3, r1
 80844fc:	4322      	orrs	r2, r4
 80844fe:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 8084502:	4410      	add	r0, r2
    P( A, B, C, D, E, R(45) );
 8084504:	9b02      	ldr	r3, [sp, #8]
 8084506:	9a04      	ldr	r2, [sp, #16]
 8084508:	ea4f 09ba 	mov.w	r9, sl, ror #2
 808450c:	4053      	eors	r3, r2
 808450e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8084510:	4053      	eors	r3, r2
 8084512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8084514:	4053      	eors	r3, r2
 8084516:	ea4f 73f3 	mov.w	r3, r3, ror #31
 808451a:	9302      	str	r3, [sp, #8]
 808451c:	9a02      	ldr	r2, [sp, #8]
 808451e:	ea4a 0307 	orr.w	r3, sl, r7
 8084522:	ea03 0e01 	and.w	lr, r3, r1
 8084526:	ea0a 0307 	and.w	r3, sl, r7
 808452a:	ea4e 0303 	orr.w	r3, lr, r3
 808452e:	eb02 0e06 	add.w	lr, r2, r6
 8084532:	44f0      	add	r8, lr
 8084534:	4498      	add	r8, r3
    P( E, A, B, C, D, R(46) );
 8084536:	9a06      	ldr	r2, [sp, #24]
 8084538:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
 808453a:	eb08 6ef0 	add.w	lr, r8, r0, ror #27
    P( E, A, B, C, D, R(46) );
 808453e:	ea83 0802 	eor.w	r8, r3, r2
 8084542:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8084544:	ea88 0803 	eor.w	r8, r8, r3
 8084548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808454a:	ea88 0803 	eor.w	r8, r8, r3
 808454e:	ea4f 73f8 	mov.w	r3, r8, ror #31
 8084552:	199c      	adds	r4, r3, r6
 8084554:	4421      	add	r1, r4
 8084556:	ea40 0409 	orr.w	r4, r0, r9
 808455a:	9303      	str	r3, [sp, #12]
 808455c:	403c      	ands	r4, r7
 808455e:	ea00 0309 	and.w	r3, r0, r9
 8084562:	431c      	orrs	r4, r3
    P( D, E, A, B, C, R(47) );
 8084564:	9b04      	ldr	r3, [sp, #16]
 8084566:	9a07      	ldr	r2, [sp, #28]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 8084568:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(47) );
 808456c:	ea83 0c02 	eor.w	ip, r3, r2
 8084570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8084572:	eb01 61fe 	add.w	r1, r1, lr, ror #27
 8084576:	ea8c 0c03 	eor.w	ip, ip, r3
 808457a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 808457c:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
 808457e:	ea8c 0c03 	eor.w	ip, ip, r3
 8084582:	ea4f 73fc 	mov.w	r3, ip, ror #31
 8084586:	ea4e 0100 	orr.w	r1, lr, r0
 808458a:	9304      	str	r3, [sp, #16]
 808458c:	ea01 0109 	and.w	r1, r1, r9
 8084590:	ea0e 0300 	and.w	r3, lr, r0
 8084594:	4319      	orrs	r1, r3
 8084596:	9b04      	ldr	r3, [sp, #16]
    P( C, D, E, A, B, R(48) );
 8084598:	9a08      	ldr	r2, [sp, #32]
 808459a:	4433      	add	r3, r6
 808459c:	443b      	add	r3, r7
 808459e:	18cf      	adds	r7, r1, r3
 80845a0:	9b06      	ldr	r3, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 80845a2:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( C, D, E, A, B, R(48) );
 80845a6:	ea83 0802 	eor.w	r8, r3, r2
 80845aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 80845ac:	eb07 67f4 	add.w	r7, r7, r4, ror #27
    P( C, D, E, A, B, R(48) );
 80845b0:	ea88 0803 	eor.w	r8, r8, r3
 80845b4:	9b02      	ldr	r3, [sp, #8]
    P( B, C, D, E, A, R(49) );
 80845b6:	ea4f 0ab7 	mov.w	sl, r7, ror #2
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80845ba:	ea88 0803 	eor.w	r8, r8, r3
 80845be:	ea4f 73f8 	mov.w	r3, r8, ror #31
 80845c2:	199a      	adds	r2, r3, r6
 80845c4:	4491      	add	r9, r2
 80845c6:	ea44 0201 	orr.w	r2, r4, r1
 80845ca:	9306      	str	r3, [sp, #24]
 80845cc:	4002      	ands	r2, r0
 80845ce:	ea04 0301 	and.w	r3, r4, r1
 80845d2:	431a      	orrs	r2, r3
    P( B, C, D, E, A, R(49) );
 80845d4:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80845d6:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(49) );
 80845da:	ea83 0c0b 	eor.w	ip, r3, fp
 80845de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80845e0:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 80845e4:	ea8c 0c03 	eor.w	ip, ip, r3
 80845e8:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80845ea:	444a      	add	r2, r9
    P( B, C, D, E, A, R(49) );
 80845ec:	ea8c 0c03 	eor.w	ip, ip, r3
 80845f0:	ea4f 73fc 	mov.w	r3, ip, ror #31
 80845f4:	9307      	str	r3, [sp, #28]
 80845f6:	9d07      	ldr	r5, [sp, #28]
 80845f8:	ea47 0304 	orr.w	r3, r7, r4
 80845fc:	ea03 0c01 	and.w	ip, r3, r1
 8084600:	ea07 0304 	and.w	r3, r7, r4
 8084604:	ea4c 0303 	orr.w	r3, ip, r3
 8084608:	eb05 0c06 	add.w	ip, r5, r6
 808460c:	4460      	add	r0, ip
 808460e:	4418      	add	r0, r3
 8084610:	eb00 6cf2 	add.w	ip, r0, r2, ror #27
    P( A, B, C, D, E, R(50) );
 8084614:	9b08      	ldr	r3, [sp, #32]
 8084616:	980e      	ldr	r0, [sp, #56]	; 0x38
 8084618:	ea83 0500 	eor.w	r5, r3, r0
 808461c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808461e:	ea42 000a 	orr.w	r0, r2, sl
 8084622:	405d      	eors	r5, r3
 8084624:	9b04      	ldr	r3, [sp, #16]
 8084626:	4020      	ands	r0, r4
 8084628:	405d      	eors	r5, r3
 808462a:	ea4f 77f5 	mov.w	r7, r5, ror #31
 808462e:	19bb      	adds	r3, r7, r6
 8084630:	4419      	add	r1, r3
 8084632:	eb01 63fc 	add.w	r3, r1, ip, ror #27
 8084636:	ea02 010a 	and.w	r1, r2, sl
 808463a:	4301      	orrs	r1, r0
 808463c:	4419      	add	r1, r3
    P( E, A, B, C, D, R(51) );
 808463e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
 8084640:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(51) );
 8084644:	ea8b 0903 	eor.w	r9, fp, r3
 8084648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808464a:	ea4f 00bc 	mov.w	r0, ip, ror #2
 808464e:	ea89 0903 	eor.w	r9, r9, r3
 8084652:	9b06      	ldr	r3, [sp, #24]
 8084654:	ea89 0903 	eor.w	r9, r9, r3
 8084658:	ea4c 0302 	orr.w	r3, ip, r2
 808465c:	ea4f 7ef9 	mov.w	lr, r9, ror #31
 8084660:	ea03 050a 	and.w	r5, r3, sl
 8084664:	ea0c 0302 	and.w	r3, ip, r2
 8084668:	432b      	orrs	r3, r5
 808466a:	eb0e 0506 	add.w	r5, lr, r6
 808466e:	4425      	add	r5, r4
 8084670:	441d      	add	r5, r3
    P( D, E, A, B, C, R(52) );
 8084672:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8084674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
 8084676:	eb05 65f1 	add.w	r5, r5, r1, ror #27
    P( D, E, A, B, C, R(52) );
 808467a:	4063      	eors	r3, r4
 808467c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 808467e:	4063      	eors	r3, r4
 8084680:	9c07      	ldr	r4, [sp, #28]
 8084682:	4063      	eors	r3, r4
 8084684:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8084688:	9308      	str	r3, [sp, #32]
 808468a:	4433      	add	r3, r6
 808468c:	449a      	add	sl, r3
 808468e:	eb0a 63f5 	add.w	r3, sl, r5, ror #27
 8084692:	ea41 0a00 	orr.w	sl, r1, r0
 8084696:	ea01 0400 	and.w	r4, r1, r0
 808469a:	ea0a 0a02 	and.w	sl, sl, r2
 808469e:	ea4a 0a04 	orr.w	sl, sl, r4
 80846a2:	449a      	add	sl, r3
    P( C, D, E, A, B, R(53) );
 80846a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80846a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
 80846a8:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(53) );
 80846ac:	4063      	eors	r3, r4
 80846ae:	9c02      	ldr	r4, [sp, #8]
 80846b0:	4063      	eors	r3, r4
 80846b2:	407b      	eors	r3, r7
 80846b4:	ea45 0401 	orr.w	r4, r5, r1
 80846b8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80846bc:	930e      	str	r3, [sp, #56]	; 0x38
 80846be:	4004      	ands	r4, r0
 80846c0:	ea05 0301 	and.w	r3, r5, r1
 80846c4:	431c      	orrs	r4, r3
 80846c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80846c8:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80846cc:	4433      	add	r3, r6
 80846ce:	4413      	add	r3, r2
 80846d0:	4423      	add	r3, r4
    P( B, C, D, E, A, R(54) );
 80846d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80846d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
 80846d6:	eb03 63fa 	add.w	r3, r3, sl, ror #27
    P( B, C, D, E, A, R(54) );
 80846da:	ea82 0804 	eor.w	r8, r2, r4
 80846de:	9a03      	ldr	r2, [sp, #12]
 80846e0:	ea88 0802 	eor.w	r8, r8, r2
 80846e4:	ea88 080e 	eor.w	r8, r8, lr
 80846e8:	ea4f 72f8 	mov.w	r2, r8, ror #31
 80846ec:	eb02 0806 	add.w	r8, r2, r6
 80846f0:	4480      	add	r8, r0
 80846f2:	eb08 60f3 	add.w	r0, r8, r3, ror #27
 80846f6:	ea4a 0805 	orr.w	r8, sl, r5
 80846fa:	920f      	str	r2, [sp, #60]	; 0x3c
 80846fc:	ea08 0801 	and.w	r8, r8, r1
 8084700:	ea0a 0205 	and.w	r2, sl, r5
 8084704:	ea48 0802 	orr.w	r8, r8, r2
 8084708:	4480      	add	r8, r0
    P( A, B, C, D, E, R(55) );
 808470a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 808470c:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
 808470e:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(55) );
 8084712:	ea82 0c00 	eor.w	ip, r2, r0
 8084716:	9a04      	ldr	r2, [sp, #16]
 8084718:	ea8c 0c02 	eor.w	ip, ip, r2
 808471c:	9a08      	ldr	r2, [sp, #32]
 808471e:	ea8c 0c02 	eor.w	ip, ip, r2
 8084722:	ea4f 72fc 	mov.w	r2, ip, ror #31
 8084726:	9210      	str	r2, [sp, #64]	; 0x40
 8084728:	9810      	ldr	r0, [sp, #64]	; 0x40
 808472a:	ea43 020a 	orr.w	r2, r3, sl
 808472e:	ea02 0c05 	and.w	ip, r2, r5
 8084732:	ea03 020a 	and.w	r2, r3, sl
 8084736:	ea4c 0202 	orr.w	r2, ip, r2
 808473a:	eb00 0c06 	add.w	ip, r0, r6
 808473e:	448c      	add	ip, r1
    P( E, A, B, C, D, R(56) );
 8084740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8084742:	4494      	add	ip, r2
 8084744:	9a06      	ldr	r2, [sp, #24]
 8084746:	404c      	eors	r4, r1
 8084748:	4054      	eors	r4, r2
 808474a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 808474c:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(56) );
 8084750:	4054      	eors	r4, r2
 8084752:	ea4f 72f4 	mov.w	r2, r4, ror #31
 8084756:	9209      	str	r2, [sp, #36]	; 0x24
 8084758:	4432      	add	r2, r6
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 808475a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 808475e:	4415      	add	r5, r2
 8084760:	eb05 62fc 	add.w	r2, r5, ip, ror #27
    P( E, A, B, C, D, R(56) );
 8084764:	ea48 0503 	orr.w	r5, r8, r3
 8084768:	e002      	b.n	8084770 <mbedtls_internal_sha1_process+0xb24>
 808476a:	bf00      	nop
 808476c:	8f1bbcdc 	.word	0x8f1bbcdc
 8084770:	ea08 0103 	and.w	r1, r8, r3
 8084774:	ea05 050a 	and.w	r5, r5, sl
 8084778:	430d      	orrs	r5, r1
 808477a:	4415      	add	r5, r2
    P( D, E, A, B, C, R(57) );
 808477c:	990c      	ldr	r1, [sp, #48]	; 0x30
 808477e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
 8084780:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(57) );
 8084784:	ea82 0b01 	eor.w	fp, r2, r1
 8084788:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(58) );
 808478a:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 808478c:	ea8b 0b02 	eor.w	fp, fp, r2
 8084790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8084792:	ea8b 0b02 	eor.w	fp, fp, r2
 8084796:	ea4c 0208 	orr.w	r2, ip, r8
 808479a:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 808479e:	ea02 0903 	and.w	r9, r2, r3
 80847a2:	ea0c 0208 	and.w	r2, ip, r8
 80847a6:	ea49 0202 	orr.w	r2, r9, r2
 80847aa:	eb0b 0906 	add.w	r9, fp, r6
 80847ae:	44d1      	add	r9, sl
 80847b0:	4491      	add	r9, r2
    P( C, D, E, A, B, R(58) );
 80847b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80847b4:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(58) );
 80847b8:	ea82 0a01 	eor.w	sl, r2, r1
 80847bc:	ea8a 0a07 	eor.w	sl, sl, r7
 80847c0:	ea8a 0a00 	eor.w	sl, sl, r0
 80847c4:	ea4f 72fa 	mov.w	r2, sl, ror #31
 80847c8:	920a      	str	r2, [sp, #40]	; 0x28
 80847ca:	4432      	add	r2, r6
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80847cc:	eb09 69f5 	add.w	r9, r9, r5, ror #27
    P( C, D, E, A, B, R(58) );
 80847d0:	ea45 010c 	orr.w	r1, r5, ip
 80847d4:	441a      	add	r2, r3
 80847d6:	eb02 63f9 	add.w	r3, r2, r9, ror #27
 80847da:	ea01 0108 	and.w	r1, r1, r8
 80847de:	ea05 020c 	and.w	r2, r5, ip
 80847e2:	430a      	orrs	r2, r1
 80847e4:	441a      	add	r2, r3
    P( B, C, D, E, A, R(59) );
 80847e6:	9902      	ldr	r1, [sp, #8]
 80847e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
 80847ea:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( B, C, D, E, A, R(59) );
 80847ee:	ea83 0001 	eor.w	r0, r3, r1
 80847f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80847f4:	ea80 000e 	eor.w	r0, r0, lr
 80847f8:	4058      	eors	r0, r3
 80847fa:	ea4f 73f0 	mov.w	r3, r0, ror #31
 80847fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8084800:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8084802:	ea49 0005 	orr.w	r0, r9, r5
 8084806:	ea00 000c 	and.w	r0, r0, ip
 808480a:	ea09 0305 	and.w	r3, r9, r5
 808480e:	440e      	add	r6, r1
 8084810:	4446      	add	r6, r8
 8084812:	4303      	orrs	r3, r0
 8084814:	1998      	adds	r0, r3, r6
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8084816:	9903      	ldr	r1, [sp, #12]
 8084818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808481a:	4ed8      	ldr	r6, [pc, #864]	; (8084b7c <mbedtls_internal_sha1_process+0xf30>)
 808481c:	4059      	eors	r1, r3
 808481e:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 8084820:	ea4f 09b9 	mov.w	r9, r9, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8084824:	4059      	eors	r1, r3
 8084826:	ea81 010b 	eor.w	r1, r1, fp
 808482a:	ea4f 73f1 	mov.w	r3, r1, ror #31
 808482e:	930c      	str	r3, [sp, #48]	; 0x30
 8084830:	990c      	ldr	r1, [sp, #48]	; 0x30
 8084832:	ea85 0309 	eor.w	r3, r5, r9
 8084836:	4431      	add	r1, r6
 8084838:	4053      	eors	r3, r2
 808483a:	4461      	add	r1, ip
 808483c:	4419      	add	r1, r3
    P( E, A, B, C, D, R(61) );
 808483e:	9b02      	ldr	r3, [sp, #8]
 8084840:	9c04      	ldr	r4, [sp, #16]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 8084842:	eb00 60f2 	add.w	r0, r0, r2, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 8084846:	4063      	eors	r3, r4
 8084848:	9c0e      	ldr	r4, [sp, #56]	; 0x38
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 808484a:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(61) );
 808484e:	4063      	eors	r3, r4
 8084850:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8084852:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(61) );
 8084856:	4063      	eors	r3, r4
 8084858:	ea4f 73f3 	mov.w	r3, r3, ror #31
 808485c:	9302      	str	r3, [sp, #8]
 808485e:	ea89 0402 	eor.w	r4, r9, r2
 8084862:	4433      	add	r3, r6
 8084864:	4044      	eors	r4, r0
 8084866:	442b      	add	r3, r5
 8084868:	4423      	add	r3, r4
    P( D, E, A, B, C, R(62) );
 808486a:	9d06      	ldr	r5, [sp, #24]
 808486c:	9c03      	ldr	r4, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 808486e:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
 8084872:	ea84 0805 	eor.w	r8, r4, r5
 8084876:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8084878:	ea82 0500 	eor.w	r5, r2, r0
 808487c:	ea88 0804 	eor.w	r8, r8, r4
 8084880:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8084882:	404d      	eors	r5, r1
 8084884:	ea88 0804 	eor.w	r8, r8, r4
 8084888:	ea4f 74f8 	mov.w	r4, r8, ror #31
 808488c:	9403      	str	r4, [sp, #12]
 808488e:	4434      	add	r4, r6
 8084890:	444c      	add	r4, r9
 8084892:	442c      	add	r4, r5
    P( C, D, E, A, B, R(63) );
 8084894:	9d04      	ldr	r5, [sp, #16]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 8084896:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 808489a:	46ac      	mov	ip, r5
 808489c:	9d07      	ldr	r5, [sp, #28]
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 808489e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(63) );
 80848a2:	ea8c 0c05 	eor.w	ip, ip, r5
 80848a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 80848a8:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(63) );
 80848ac:	ea8c 0c05 	eor.w	ip, ip, r5
 80848b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80848b2:	ea8c 0c05 	eor.w	ip, ip, r5
 80848b6:	ea4f 75fc 	mov.w	r5, ip, ror #31
 80848ba:	9504      	str	r5, [sp, #16]
 80848bc:	ea80 0501 	eor.w	r5, r0, r1
 80848c0:	ea85 0c03 	eor.w	ip, r5, r3
 80848c4:	9d04      	ldr	r5, [sp, #16]
 80848c6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80848ca:	eb05 0a06 	add.w	sl, r5, r6
 80848ce:	4492      	add	sl, r2
    P( B, C, D, E, A, R(64) );
 80848d0:	9a06      	ldr	r2, [sp, #24]
 80848d2:	44e2      	add	sl, ip
 80848d4:	ea82 0807 	eor.w	r8, r2, r7
 80848d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80848da:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    P( B, C, D, E, A, R(64) );
 80848de:	ea88 0802 	eor.w	r8, r8, r2
 80848e2:	9a02      	ldr	r2, [sp, #8]
 80848e4:	ea88 0802 	eor.w	r8, r8, r2
 80848e8:	ea4f 72f8 	mov.w	r2, r8, ror #31
 80848ec:	9206      	str	r2, [sp, #24]
 80848ee:	9d06      	ldr	r5, [sp, #24]
 80848f0:	ea81 0203 	eor.w	r2, r1, r3
 80848f4:	eb05 0806 	add.w	r8, r5, r6
 80848f8:	4062      	eors	r2, r4
 80848fa:	4480      	add	r8, r0
 80848fc:	4490      	add	r8, r2
    P( A, B, C, D, E, R(65) );
 80848fe:	9a07      	ldr	r2, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 8084900:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(65) );
 8084904:	ea82 0c0e 	eor.w	ip, r2, lr
 8084908:	9a03      	ldr	r2, [sp, #12]
 808490a:	ea8c 0c0b 	eor.w	ip, ip, fp
 808490e:	ea8c 0c02 	eor.w	ip, ip, r2
 8084912:	ea4f 72fc 	mov.w	r2, ip, ror #31
 8084916:	9207      	str	r2, [sp, #28]
 8084918:	9807      	ldr	r0, [sp, #28]
 808491a:	ea83 0204 	eor.w	r2, r3, r4
 808491e:	eb00 0c06 	add.w	ip, r0, r6
 8084922:	ea82 020a 	eor.w	r2, r2, sl
 8084926:	448c      	add	ip, r1
 8084928:	4494      	add	ip, r2
    P( E, A, B, C, D, R(66) );
 808492a:	9a08      	ldr	r2, [sp, #32]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 808492c:	eb08 68fa 	add.w	r8, r8, sl, ror #27
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8084930:	ea87 0502 	eor.w	r5, r7, r2
 8084934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 8084936:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(66) );
 808493a:	4055      	eors	r5, r2
 808493c:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 808493e:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(66) );
 8084942:	4055      	eors	r5, r2
 8084944:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8084948:	19af      	adds	r7, r5, r6
 808494a:	441f      	add	r7, r3
    P( D, E, A, B, C, R(67) );
 808494c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808494e:	ea84 020a 	eor.w	r2, r4, sl
 8084952:	ea8e 0903 	eor.w	r9, lr, r3
 8084956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8084958:	ea82 0208 	eor.w	r2, r2, r8
 808495c:	ea89 0903 	eor.w	r9, r9, r3
 8084960:	9b06      	ldr	r3, [sp, #24]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8084962:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(67) );
 8084966:	ea89 0903 	eor.w	r9, r9, r3
 808496a:	ea4f 79f9 	mov.w	r9, r9, ror #31
 808496e:	ea8a 0308 	eor.w	r3, sl, r8
 8084972:	eb09 0e06 	add.w	lr, r9, r6
 8084976:	ea83 030c 	eor.w	r3, r3, ip
 808497a:	44a6      	add	lr, r4
 808497c:	4417      	add	r7, r2
 808497e:	449e      	add	lr, r3
    P( C, D, E, A, B, R(68) );
 8084980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8084982:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8084984:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8084988:	4053      	eors	r3, r2
 808498a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 808498c:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(68) );
 8084990:	4053      	eors	r3, r2
 8084992:	4043      	eors	r3, r0
 8084994:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8084998:	9308      	str	r3, [sp, #32]
 808499a:	9a08      	ldr	r2, [sp, #32]
 808499c:	ea88 030c 	eor.w	r3, r8, ip
 80849a0:	4432      	add	r2, r6
 80849a2:	407b      	eors	r3, r7
 80849a4:	4452      	add	r2, sl
    P( B, C, D, E, A, R(69) );
 80849a6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80849a8:	441a      	add	r2, r3
 80849aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80849ac:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80849b0:	404b      	eors	r3, r1
 80849b2:	9902      	ldr	r1, [sp, #8]
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80849b4:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( B, C, D, E, A, R(69) );
 80849b8:	404b      	eors	r3, r1
 80849ba:	406b      	eors	r3, r5
 80849bc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80849c0:	930d      	str	r3, [sp, #52]	; 0x34
 80849c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80849c4:	ea8c 0307 	eor.w	r3, ip, r7
 80849c8:	1988      	adds	r0, r1, r6
 80849ca:	ea83 030e 	eor.w	r3, r3, lr
 80849ce:	4440      	add	r0, r8
    P( A, B, C, D, E, R(70) );
 80849d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80849d2:	4418      	add	r0, r3
 80849d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80849d6:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80849da:	ea83 0801 	eor.w	r8, r3, r1
 80849de:	9b03      	ldr	r3, [sp, #12]
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80849e0:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, R(70) );
 80849e4:	ea88 0803 	eor.w	r8, r8, r3
 80849e8:	ea88 0809 	eor.w	r8, r8, r9
 80849ec:	ea4f 78f8 	mov.w	r8, r8, ror #31
 80849f0:	ea87 030e 	eor.w	r3, r7, lr
 80849f4:	eb08 0106 	add.w	r1, r8, r6
 80849f8:	4053      	eors	r3, r2
 80849fa:	4461      	add	r1, ip
 80849fc:	4419      	add	r1, r3
    P( E, A, B, C, D, R(71) );
 80849fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 8084a00:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8084a04:	ea83 0c0b 	eor.w	ip, r3, fp
 8084a08:	9b04      	ldr	r3, [sp, #16]
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8084a0a:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(71) );
 8084a0e:	ea8c 0c03 	eor.w	ip, ip, r3
 8084a12:	9b08      	ldr	r3, [sp, #32]
 8084a14:	ea8e 0402 	eor.w	r4, lr, r2
 8084a18:	ea8c 0c03 	eor.w	ip, ip, r3
 8084a1c:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8084a20:	eb0c 0306 	add.w	r3, ip, r6
 8084a24:	4044      	eors	r4, r0
 8084a26:	443b      	add	r3, r7
 8084a28:	4423      	add	r3, r4
    P( D, E, A, B, C, R(72) );
 8084a2a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8084a2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8084a2e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8084a32:	4067      	eors	r7, r4
 8084a34:	9c06      	ldr	r4, [sp, #24]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8084a36:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(72) );
 8084a3a:	4067      	eors	r7, r4
 8084a3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8084a3e:	ea82 0a00 	eor.w	sl, r2, r0
 8084a42:	4067      	eors	r7, r4
 8084a44:	ea4f 74f7 	mov.w	r4, r7, ror #31
    P( C, D, E, A, B, R(73) );
 8084a48:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8084a4a:	9409      	str	r4, [sp, #36]	; 0x24
 8084a4c:	4434      	add	r4, r6
 8084a4e:	4474      	add	r4, lr
    P( C, D, E, A, B, R(73) );
 8084a50:	ea8b 0e07 	eor.w	lr, fp, r7
 8084a54:	9f07      	ldr	r7, [sp, #28]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8084a56:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8084a5a:	ea8e 0e07 	eor.w	lr, lr, r7
 8084a5e:	ea8e 0e08 	eor.w	lr, lr, r8
 8084a62:	ea8a 0a01 	eor.w	sl, sl, r1
 8084a66:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8084a6a:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8084a6e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8084a70:	eb0e 0b06 	add.w	fp, lr, r6
 8084a74:	4454      	add	r4, sl
 8084a76:	ea80 0a01 	eor.w	sl, r0, r1
 8084a7a:	ea8a 0a03 	eor.w	sl, sl, r3
 8084a7e:	445a      	add	r2, fp
 8084a80:	4452      	add	r2, sl
 8084a82:	46ba      	mov	sl, r7
 8084a84:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8084a86:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8084a8a:	ea8a 0a07 	eor.w	sl, sl, r7
 8084a8e:	ea8a 0505 	eor.w	r5, sl, r5
 8084a92:	ea85 050c 	eor.w	r5, r5, ip
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8084a96:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(74) );
 8084a9a:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8084a9e:	eb05 0b06 	add.w	fp, r5, r6
 8084aa2:	ea81 0a03 	eor.w	sl, r1, r3
 8084aa6:	4458      	add	r0, fp
 8084aa8:	ea8a 0a04 	eor.w	sl, sl, r4
    P( A, B, C, D, E, R(75) );
 8084aac:	9f02      	ldr	r7, [sp, #8]
 8084aae:	4482      	add	sl, r0
 8084ab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8084ab2:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8084ab6:	4078      	eors	r0, r7
 8084ab8:	ea80 0909 	eor.w	r9, r0, r9
 8084abc:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8084abe:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(75) );
 8084ac2:	ea89 0700 	eor.w	r7, r9, r0
 8084ac6:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8084aca:	eb07 0906 	add.w	r9, r7, r6
 8084ace:	ea83 0004 	eor.w	r0, r3, r4
 8084ad2:	4449      	add	r1, r9
 8084ad4:	4050      	eors	r0, r2
 8084ad6:	4408      	add	r0, r1
    P( E, A, B, C, D, R(76) );
 8084ad8:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8084ada:	950a      	str	r5, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 8084adc:	460d      	mov	r5, r1
 8084ade:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8084ae0:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 8084ae4:	4069      	eors	r1, r5
 8084ae6:	9d08      	ldr	r5, [sp, #32]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8084ae8:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(76) );
 8084aec:	4069      	eors	r1, r5
 8084aee:	ea81 0e0e 	eor.w	lr, r1, lr
 8084af2:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8084af6:	eb0e 0906 	add.w	r9, lr, r6
 8084afa:	ea84 0102 	eor.w	r1, r4, r2
 8084afe:	444b      	add	r3, r9
 8084b00:	ea81 010a 	eor.w	r1, r1, sl
 8084b04:	9d04      	ldr	r5, [sp, #16]
 8084b06:	4419      	add	r1, r3
 8084b08:	9b02      	ldr	r3, [sp, #8]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8084b0a:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 8084b0e:	406b      	eors	r3, r5
 8084b10:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(76) );
 8084b12:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8084b16:	406b      	eors	r3, r5
 8084b18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8084b1a:	ea82 090a 	eor.w	r9, r2, sl
 8084b1e:	406b      	eors	r3, r5
 8084b20:	eb06 73f3 	add.w	r3, r6, r3, ror #31
 8084b24:	9d06      	ldr	r5, [sp, #24]
 8084b26:	441c      	add	r4, r3
 8084b28:	9b03      	ldr	r3, [sp, #12]
 8084b2a:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8084b2e:	406b      	eors	r3, r5
 8084b30:	ea83 0808 	eor.w	r8, r3, r8
 8084b34:	ea89 0900 	eor.w	r9, r9, r0
 8084b38:	ea88 0807 	eor.w	r8, r8, r7
    P( D, E, A, B, C, R(77) );
 8084b3c:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8084b40:	eb06 78f8 	add.w	r8, r6, r8, ror #31
 8084b44:	ea8a 0500 	eor.w	r5, sl, r0
 8084b48:	404d      	eors	r5, r1
 8084b4a:	4442      	add	r2, r8
 8084b4c:	442a      	add	r2, r5
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8084b4e:	9b04      	ldr	r3, [sp, #16]
 8084b50:	9d07      	ldr	r5, [sp, #28]
 8084b52:	444c      	add	r4, r9
 8084b54:	406b      	eors	r3, r5
 8084b56:	ea83 0c0c 	eor.w	ip, r3, ip
 8084b5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 8084b5c:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8084b60:	441e      	add	r6, r3
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 8084b62:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8084b66:	ea8c 0e0e 	eor.w	lr, ip, lr
 8084b6a:	ea80 0501 	eor.w	r5, r0, r1
 8084b6e:	eb06 7efe 	add.w	lr, r6, lr, ror #31
 8084b72:	4065      	eors	r5, r4
 8084b74:	44f2      	add	sl, lr
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 8084b76:	eb02 62f4 	add.w	r2, r2, r4, ror #27
 8084b7a:	e001      	b.n	8084b80 <mbedtls_internal_sha1_process+0xf34>
 8084b7c:	ca62c1d6 	.word	0xca62c1d6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8084b80:	eb0a 0305 	add.w	r3, sl, r5
 8084b84:	9d01      	ldr	r5, [sp, #4]
 8084b86:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8084b8a:	60ab      	str	r3, [r5, #8]
    ctx->state[1] += B;
 8084b8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8084b8e:	441a      	add	r2, r3
    ctx->state[2] += C;
 8084b90:	9b05      	ldr	r3, [sp, #20]

#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
 8084b92:	60ea      	str	r2, [r5, #12]
    ctx->state[2] += C;
 8084b94:	eb03 04b4 	add.w	r4, r3, r4, ror #2
    ctx->state[3] += D;
 8084b98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 8084b9a:	612c      	str	r4, [r5, #16]
    ctx->state[3] += D;
 8084b9c:	4419      	add	r1, r3
    ctx->state[4] += E;
 8084b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 8084ba0:	6169      	str	r1, [r5, #20]
    ctx->state[4] += E;
 8084ba2:	4418      	add	r0, r3
 8084ba4:	61a8      	str	r0, [r5, #24]

    return( 0 );
}
 8084ba6:	2000      	movs	r0, #0
 8084ba8:	b017      	add	sp, #92	; 0x5c
 8084baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084bae:	bf00      	nop

08084bb0 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8084bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084bb4:	4604      	mov	r4, r0
 8084bb6:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 8084bb8:	4615      	mov	r5, r2
 8084bba:	b382      	cbz	r2, 8084c1e <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8084bbc:	6803      	ldr	r3, [r0, #0]
 8084bbe:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8084bc2:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 8084bc4:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8084bc6:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8084bc8:	bf82      	ittt	hi
 8084bca:	6863      	ldrhi	r3, [r4, #4]
 8084bcc:	3301      	addhi	r3, #1
 8084bce:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 8084bd0:	b180      	cbz	r0, 8084bf4 <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8084bd2:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 8084bd6:	42ba      	cmp	r2, r7
 8084bd8:	d31b      	bcc.n	8084c12 <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8084bda:	f104 081c 	add.w	r8, r4, #28
 8084bde:	463a      	mov	r2, r7
 8084be0:	4440      	add	r0, r8
 8084be2:	f00b fd06 	bl	80905f2 <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8084be6:	4641      	mov	r1, r8
 8084be8:	4620      	mov	r0, r4
 8084bea:	f7ff f82f 	bl	8083c4c <mbedtls_internal_sha1_process>
 8084bee:	b9b8      	cbnz	r0, 8084c20 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
 8084bf0:	443e      	add	r6, r7
        ilen  -= fill;
 8084bf2:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8084bf4:	462f      	mov	r7, r5
 8084bf6:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 8084bf8:	2f3f      	cmp	r7, #63	; 0x3f
 8084bfa:	4431      	add	r1, r6
 8084bfc:	d905      	bls.n	8084c0a <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 8084bfe:	4620      	mov	r0, r4
 8084c00:	f7ff f824 	bl	8083c4c <mbedtls_internal_sha1_process>
 8084c04:	b960      	cbnz	r0, 8084c20 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 8084c06:	3f40      	subs	r7, #64	; 0x40
 8084c08:	e7f5      	b.n	8084bf6 <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
 8084c0a:	b147      	cbz	r7, 8084c1e <mbedtls_sha1_update_ret+0x6e>
 8084c0c:	463d      	mov	r5, r7
 8084c0e:	460e      	mov	r6, r1
 8084c10:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8084c12:	341c      	adds	r4, #28
 8084c14:	462a      	mov	r2, r5
 8084c16:	4631      	mov	r1, r6
 8084c18:	4420      	add	r0, r4
 8084c1a:	f00b fcea 	bl	80905f2 <memcpy>

    return( 0 );
 8084c1e:	2000      	movs	r0, #0
}
 8084c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08084c24 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 8084c24:	b570      	push	{r4, r5, r6, lr}
 8084c26:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8084c28:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 8084c2a:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8084c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8084c30:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 8084c32:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8084c34:	4423      	add	r3, r4
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 8084c36:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8084c38:	771a      	strb	r2, [r3, #28]
 8084c3a:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
 8084c3e:	d804      	bhi.n	8084c4a <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8084c40:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8084c44:	2100      	movs	r1, #0
 8084c46:	4430      	add	r0, r6
 8084c48:	e00e      	b.n	8084c68 <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8084c4a:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8084c4e:	2100      	movs	r1, #0
 8084c50:	4430      	add	r0, r6
 8084c52:	f00b fcf4 	bl	809063e <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8084c56:	4631      	mov	r1, r6
 8084c58:	4620      	mov	r0, r4
 8084c5a:	f7fe fff7 	bl	8083c4c <mbedtls_internal_sha1_process>
 8084c5e:	2800      	cmp	r0, #0
 8084c60:	d153      	bne.n	8084d0a <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8084c62:	4601      	mov	r1, r0
 8084c64:	4630      	mov	r0, r6
 8084c66:	2238      	movs	r2, #56	; 0x38
 8084c68:	f00b fce9 	bl	809063e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8084c6c:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 8084c6e:	6861      	ldr	r1, [r4, #4]
 8084c70:	0f5a      	lsrs	r2, r3, #29
 8084c72:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8084c76:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 8084c78:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8084c7a:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8084c7e:	0c11      	lsrs	r1, r2, #16
 8084c80:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 8084c84:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 8084c88:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8084c8a:	0e1a      	lsrs	r2, r3, #24
 8084c8c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8084c90:	0c1a      	lsrs	r2, r3, #16
 8084c92:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8084c96:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8084c98:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8084c9c:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 8084ca0:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8084ca4:	4631      	mov	r1, r6
 8084ca6:	4620      	mov	r0, r4
 8084ca8:	f7fe ffd0 	bl	8083c4c <mbedtls_internal_sha1_process>
 8084cac:	2800      	cmp	r0, #0
 8084cae:	d12c      	bne.n	8084d0a <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8084cb0:	7ae3      	ldrb	r3, [r4, #11]
 8084cb2:	702b      	strb	r3, [r5, #0]
 8084cb4:	8963      	ldrh	r3, [r4, #10]
 8084cb6:	706b      	strb	r3, [r5, #1]
 8084cb8:	68a3      	ldr	r3, [r4, #8]
 8084cba:	0a1b      	lsrs	r3, r3, #8
 8084cbc:	70ab      	strb	r3, [r5, #2]
 8084cbe:	68a3      	ldr	r3, [r4, #8]
 8084cc0:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8084cc2:	7be3      	ldrb	r3, [r4, #15]
 8084cc4:	712b      	strb	r3, [r5, #4]
 8084cc6:	89e3      	ldrh	r3, [r4, #14]
 8084cc8:	716b      	strb	r3, [r5, #5]
 8084cca:	68e3      	ldr	r3, [r4, #12]
 8084ccc:	0a1b      	lsrs	r3, r3, #8
 8084cce:	71ab      	strb	r3, [r5, #6]
 8084cd0:	68e3      	ldr	r3, [r4, #12]
 8084cd2:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8084cd4:	7ce3      	ldrb	r3, [r4, #19]
 8084cd6:	722b      	strb	r3, [r5, #8]
 8084cd8:	8a63      	ldrh	r3, [r4, #18]
 8084cda:	726b      	strb	r3, [r5, #9]
 8084cdc:	6923      	ldr	r3, [r4, #16]
 8084cde:	0a1b      	lsrs	r3, r3, #8
 8084ce0:	72ab      	strb	r3, [r5, #10]
 8084ce2:	6923      	ldr	r3, [r4, #16]
 8084ce4:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8084ce6:	7de3      	ldrb	r3, [r4, #23]
 8084ce8:	732b      	strb	r3, [r5, #12]
 8084cea:	8ae3      	ldrh	r3, [r4, #22]
 8084cec:	736b      	strb	r3, [r5, #13]
 8084cee:	6963      	ldr	r3, [r4, #20]
 8084cf0:	0a1b      	lsrs	r3, r3, #8
 8084cf2:	73ab      	strb	r3, [r5, #14]
 8084cf4:	6963      	ldr	r3, [r4, #20]
 8084cf6:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8084cf8:	7ee3      	ldrb	r3, [r4, #27]
 8084cfa:	742b      	strb	r3, [r5, #16]
 8084cfc:	8b63      	ldrh	r3, [r4, #26]
 8084cfe:	746b      	strb	r3, [r5, #17]
 8084d00:	69a3      	ldr	r3, [r4, #24]
 8084d02:	0a1b      	lsrs	r3, r3, #8
 8084d04:	74ab      	strb	r3, [r5, #18]
 8084d06:	69a3      	ldr	r3, [r4, #24]
 8084d08:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
 8084d0a:	bd70      	pop	{r4, r5, r6, pc}

08084d0c <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 8084d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084d0e:	b099      	sub	sp, #100	; 0x64
 8084d10:	4606      	mov	r6, r0
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 8084d12:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 8084d14:	460f      	mov	r7, r1
 8084d16:	4615      	mov	r5, r2
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 8084d18:	f7fe ff6a 	bl	8083bf0 <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 8084d1c:	a801      	add	r0, sp, #4
 8084d1e:	f7fe ff7b 	bl	8083c18 <mbedtls_sha1_starts_ret>
 8084d22:	4604      	mov	r4, r0
 8084d24:	b958      	cbnz	r0, 8084d3e <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 8084d26:	463a      	mov	r2, r7
 8084d28:	4631      	mov	r1, r6
 8084d2a:	a801      	add	r0, sp, #4
 8084d2c:	f7ff ff40 	bl	8084bb0 <mbedtls_sha1_update_ret>
 8084d30:	4604      	mov	r4, r0
 8084d32:	b920      	cbnz	r0, 8084d3e <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 8084d34:	4629      	mov	r1, r5
 8084d36:	a801      	add	r0, sp, #4
 8084d38:	f7ff ff74 	bl	8084c24 <mbedtls_sha1_finish_ret>
 8084d3c:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 8084d3e:	a801      	add	r0, sp, #4
 8084d40:	f7fe ff5a 	bl	8083bf8 <mbedtls_sha1_free>

    return( ret );
}
 8084d44:	4620      	mov	r0, r4
 8084d46:	b019      	add	sp, #100	; 0x64
 8084d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08084d4a <mbedtls_timing_get_timer.part.0>:
    CloseHandle( CreateThread( NULL, 0, TimerProc, NULL, 0, &ThreadId ) );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
 8084d4a:	b513      	push	{r0, r1, r4, lr}
 8084d4c:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
 8084d4e:	2100      	movs	r1, #0
 8084d50:	4668      	mov	r0, sp
 8084d52:	f00b fcb7 	bl	80906c4 <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
 8084d56:	9b00      	ldr	r3, [sp, #0]
 8084d58:	6822      	ldr	r2, [r4, #0]
 8084d5a:	6861      	ldr	r1, [r4, #4]
 8084d5c:	1a9a      	subs	r2, r3, r2
 8084d5e:	9b01      	ldr	r3, [sp, #4]
 8084d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8084d64:	1a5b      	subs	r3, r3, r1
 8084d66:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
 8084d6a:	fb00 3002 	mla	r0, r0, r2, r3
 8084d6e:	b002      	add	sp, #8
 8084d70:	bd10      	pop	{r4, pc}

08084d72 <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
 8084d72:	b538      	push	{r3, r4, r5, lr}
 8084d74:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
 8084d76:	f00a f9ad 	bl	808f0d4 <HAL_Timer_Get_Milli_Seconds>
 8084d7a:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 8084d7c:	f00a f9b2 	bl	808f0e4 <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 8084d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 8084d84:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 8084d86:	fbb5 f0f3 	udiv	r0, r5, r3
 8084d8a:	fb03 5010 	mls	r0, r3, r0, r5
 8084d8e:	4343      	muls	r3, r0
 8084d90:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
 8084d92:	2000      	movs	r0, #0
 8084d94:	bd38      	pop	{r3, r4, r5, pc}
	...

08084d98 <mbedtls_timing_hardclock>:

static int hardclock_init = 0;
static struct timeval tv_init;

unsigned long mbedtls_timing_hardclock( void )
{
 8084d98:	b513      	push	{r0, r1, r4, lr}
    struct timeval tv_cur;

    if( hardclock_init == 0 )
 8084d9a:	4c0c      	ldr	r4, [pc, #48]	; (8084dcc <mbedtls_timing_hardclock+0x34>)
 8084d9c:	6821      	ldr	r1, [r4, #0]
 8084d9e:	b921      	cbnz	r1, 8084daa <mbedtls_timing_hardclock+0x12>
    {
        gettimeofday( &tv_init, NULL );
 8084da0:	480b      	ldr	r0, [pc, #44]	; (8084dd0 <mbedtls_timing_hardclock+0x38>)
 8084da2:	f00b fc8f 	bl	80906c4 <gettimeofday>
        hardclock_init = 1;
 8084da6:	2301      	movs	r3, #1
 8084da8:	6023      	str	r3, [r4, #0]
    }

    gettimeofday( &tv_cur, NULL );
 8084daa:	2100      	movs	r1, #0
 8084dac:	4668      	mov	r0, sp
 8084dae:	f00b fc89 	bl	80906c4 <gettimeofday>
    return( ( tv_cur.tv_sec  - tv_init.tv_sec  ) * 1000000
 8084db2:	4907      	ldr	r1, [pc, #28]	; (8084dd0 <mbedtls_timing_hardclock+0x38>)
          + ( tv_cur.tv_usec - tv_init.tv_usec ) );
 8084db4:	9b00      	ldr	r3, [sp, #0]
 8084db6:	680a      	ldr	r2, [r1, #0]
 8084db8:	6848      	ldr	r0, [r1, #4]
 8084dba:	1a9a      	subs	r2, r3, r2
 8084dbc:	9b01      	ldr	r3, [sp, #4]
 8084dbe:	1a1b      	subs	r3, r3, r0
}
 8084dc0:	4804      	ldr	r0, [pc, #16]	; (8084dd4 <mbedtls_timing_hardclock+0x3c>)
 8084dc2:	fb00 3002 	mla	r0, r0, r2, r3
 8084dc6:	b002      	add	sp, #8
 8084dc8:	bd10      	pop	{r4, pc}
 8084dca:	bf00      	nop
 8084dcc:	20001444 	.word	0x20001444
 8084dd0:	2000143c 	.word	0x2000143c
 8084dd4:	000f4240 	.word	0x000f4240

08084dd8 <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
 8084dd8:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
 8084dda:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
 8084ddc:	b112      	cbz	r2, 8084de4 <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
 8084dde:	2100      	movs	r1, #0
 8084de0:	f00b bc70 	b.w	80906c4 <gettimeofday>
 8084de4:	4770      	bx	lr

08084de6 <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 8084de6:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 8084de8:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 8084dea:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 8084dec:	b153      	cbz	r3, 8084e04 <mbedtls_timing_get_delay+0x1e>
 8084dee:	f7ff ffac 	bl	8084d4a <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
 8084df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8084df4:	4283      	cmp	r3, r0
 8084df6:	d908      	bls.n	8084e0a <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
 8084df8:	6a23      	ldr	r3, [r4, #32]
 8084dfa:	4283      	cmp	r3, r0
 8084dfc:	bf8c      	ite	hi
 8084dfe:	2000      	movhi	r0, #0
 8084e00:	2001      	movls	r0, #1
 8084e02:	bd10      	pop	{r4, pc}
 8084e04:	f04f 30ff 	mov.w	r0, #4294967295
 8084e08:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
 8084e0a:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
 8084e0c:	bd10      	pop	{r4, pc}

08084e0e <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 8084e0e:	b510      	push	{r4, lr}
 8084e10:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
 8084e12:	f001 faed 	bl	80863f0 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8084e16:	4620      	mov	r0, r4
}
 8084e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
 8084e1c:	f00a baa2 	b.w	808f364 <free>

08084e20 <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 8084e20:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8084e22:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8084e26:	2001      	movs	r0, #1
 8084e28:	f00b fbbe 	bl	80905a8 <calloc>

    if( ctx != NULL )
 8084e2c:	4604      	mov	r4, r0
 8084e2e:	b108      	cbz	r0, 8084e34 <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8084e30:	f001 f84c 	bl	8085ecc <mbedtls_gcm_init>

    return( ctx );
}
 8084e34:	4620      	mov	r0, r4
 8084e36:	bd10      	pop	{r4, pc}

08084e38 <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
 8084e38:	4613      	mov	r3, r2
 8084e3a:	460a      	mov	r2, r1
 8084e3c:	2102      	movs	r1, #2
 8084e3e:	f001 b84a 	b.w	8085ed6 <mbedtls_gcm_setkey>

08084e42 <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 8084e42:	b510      	push	{r4, lr}
 8084e44:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8084e46:	f006 fca2 	bl	808b78e <mbedtls_aes_free>
    mbedtls_free( ctx );
 8084e4a:	4620      	mov	r0, r4
}
 8084e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 8084e50:	f00a ba88 	b.w	808f364 <free>

08084e54 <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 8084e54:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8084e56:	f44f 718c 	mov.w	r1, #280	; 0x118
 8084e5a:	2001      	movs	r0, #1
 8084e5c:	f00b fba4 	bl	80905a8 <calloc>

    if( aes == NULL )
 8084e60:	4604      	mov	r4, r0
 8084e62:	b108      	cbz	r0, 8084e68 <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 8084e64:	f006 fc8e 	bl	808b784 <mbedtls_aes_init>

    return( aes );
}
 8084e68:	4620      	mov	r0, r4
 8084e6a:	bd10      	pop	{r4, pc}

08084e6c <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8084e6c:	f006 bd96 	b.w	808b99c <mbedtls_aes_setkey_dec>

08084e70 <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8084e70:	f006 bc98 	b.w	808b7a4 <mbedtls_aes_setkey_enc>

08084e74 <_ZL18aes_crypt_cbc_wrapPv19mbedtls_operation_tjPhPKhS1_>:
}

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 8084e74:	b410      	push	{r4}
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
}
 8084e76:	bc10      	pop	{r4}
#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
 8084e78:	f007 b9a6 	b.w	808c1c8 <mbedtls_aes_crypt_cbc>

08084e7c <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8084e7c:	f007 b998 	b.w	808c1b0 <mbedtls_aes_crypt_ecb>

08084e80 <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 8084e80:	2801      	cmp	r0, #1
 8084e82:	d002      	beq.n	8084e8a <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
 8084e84:	1f83      	subs	r3, r0, #6
 8084e86:	4258      	negs	r0, r3
 8084e88:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 8084e8a:	4770      	bx	lr

08084e8c <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8084e8c:	2301      	movs	r3, #1
    items->name = "rsa.N";
 8084e8e:	4a06      	ldr	r2, [pc, #24]	; (8084ea8 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8084e90:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 8084e92:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 8084e94:	4b05      	ldr	r3, [pc, #20]	; (8084eac <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
 8084e96:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8084e98:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8084e9c:	3014      	adds	r0, #20

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8084e9e:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
 8084ea0:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8084ea2:	6148      	str	r0, [r1, #20]
 8084ea4:	4770      	bx	lr
 8084ea6:	bf00      	nop
 8084ea8:	0809185c 	.word	0x0809185c
 8084eac:	08091862 	.word	0x08091862

08084eb0 <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
 8084eb0:	b510      	push	{r4, lr}
 8084eb2:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8084eb4:	f7fe fd50 	bl	8083958 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 8084eb8:	4620      	mov	r0, r4
}
 8084eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
 8084ebe:	f00a ba51 	b.w	808f364 <free>

08084ec2 <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
 8084ec2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8084ec4:	21ac      	movs	r1, #172	; 0xac
 8084ec6:	2001      	movs	r0, #1
 8084ec8:	f00b fb6e 	bl	80905a8 <calloc>

    if( ctx != NULL )
 8084ecc:	4604      	mov	r4, r0
 8084ece:	b118      	cbz	r0, 8084ed8 <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 8084ed0:	2200      	movs	r2, #0
 8084ed2:	4611      	mov	r1, r2
 8084ed4:	f7fd fd52 	bl	808297c <mbedtls_rsa_init>

    return( ctx );
}
 8084ed8:	4620      	mov	r0, r4
 8084eda:	bd10      	pop	{r4, pc}

08084edc <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
 8084edc:	f7fd bdb4 	b.w	8082a48 <mbedtls_rsa_check_pub_priv>

08084ee0 <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
 8084ee0:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 8084ee2:	f7fd fd58 	bl	8082996 <mbedtls_rsa_get_len>
}
 8084ee6:	00c0      	lsls	r0, r0, #3
 8084ee8:	bd08      	pop	{r3, pc}
	...

08084eec <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8084eec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084ef0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8084ef4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8084ef8:	4604      	mov	r4, r0
 8084efa:	4688      	mov	r8, r1
 8084efc:	4617      	mov	r7, r2
 8084efe:	4699      	mov	r9, r3
 8084f00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8084f02:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 8084f04:	f7fd fd47 	bl	8082996 <mbedtls_rsa_get_len>

    if( *olen > osize )
 8084f08:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 8084f0a:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
 8084f0e:	d80d      	bhi.n	8084f2c <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 8084f10:	4632      	mov	r2, r6
 8084f12:	4629      	mov	r1, r5
 8084f14:	4620      	mov	r0, r4
 8084f16:	2300      	movs	r3, #0
 8084f18:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8084f1c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8084f20:	970a      	str	r7, [sp, #40]	; 0x28
}
 8084f22:	b001      	add	sp, #4
 8084f24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 8084f28:	f7fe b8aa 	b.w	8083080 <mbedtls_rsa_pkcs1_encrypt>
}
 8084f2c:	4801      	ldr	r0, [pc, #4]	; (8084f34 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 8084f2e:	b001      	add	sp, #4
 8084f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084f34:	ffffbc00 	.word	0xffffbc00

08084f38 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8084f38:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084f3c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8084f3e:	4693      	mov	fp, r2
 8084f40:	4604      	mov	r4, r0
 8084f42:	4688      	mov	r8, r1
 8084f44:	4699      	mov	r9, r3
 8084f46:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8084f4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8084f4c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 8084f4e:	f7fd fd22 	bl	8082996 <mbedtls_rsa_get_len>
 8084f52:	4558      	cmp	r0, fp
 8084f54:	d10f      	bne.n	8084f76 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 8084f56:	4632      	mov	r2, r6
 8084f58:	4629      	mov	r1, r5
 8084f5a:	4620      	mov	r0, r4
 8084f5c:	2301      	movs	r3, #1
 8084f5e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8084f62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8084f66:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8084f6a:	970a      	str	r7, [sp, #40]	; 0x28
}
 8084f6c:	b001      	add	sp, #4
 8084f6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 8084f72:	f7fe ba07 	b.w	8083384 <mbedtls_rsa_pkcs1_decrypt>
}
 8084f76:	4802      	ldr	r0, [pc, #8]	; (8084f80 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 8084f78:	b001      	add	sp, #4
 8084f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084f7e:	bf00      	nop
 8084f80:	ffffbf80 	.word	0xffffbf80

08084f84 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8084f84:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084f88:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8084f8c:	460f      	mov	r7, r1
 8084f8e:	4691      	mov	r9, r2
 8084f90:	4698      	mov	r8, r3
 8084f92:	4604      	mov	r4, r0
 8084f94:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8084f98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8084f9a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 8084f9c:	f7fd fcfb 	bl	8082996 <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 8084fa0:	4632      	mov	r2, r6
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 8084fa2:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 8084fa6:	4629      	mov	r1, r5
 8084fa8:	4620      	mov	r0, r4
 8084faa:	2301      	movs	r3, #1
 8084fac:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8084fb0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8084fb4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8084fb8:	970a      	str	r7, [sp, #40]	; 0x28
}
 8084fba:	b001      	add	sp, #4
 8084fbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 8084fc0:	f7fe bb30 	b.w	8083624 <mbedtls_rsa_pkcs1_sign>

08084fc4 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 8084fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8084fc8:	b085      	sub	sp, #20
 8084fca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8084fcc:	4606      	mov	r6, r0
 8084fce:	460f      	mov	r7, r1
 8084fd0:	4691      	mov	r9, r2
 8084fd2:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8084fd4:	f7fd fcdf 	bl	8082996 <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 8084fd8:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8084fda:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 8084fdc:	d810      	bhi.n	8085000 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 8084fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8084fe0:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8084fe4:	9303      	str	r3, [sp, #12]
 8084fe6:	2300      	movs	r3, #0
 8084fe8:	461a      	mov	r2, r3
 8084fea:	4619      	mov	r1, r3
 8084fec:	4630      	mov	r0, r6
 8084fee:	f7fe fc91 	bl	8083914 <mbedtls_rsa_pkcs1_verify>
 8084ff2:	b930      	cbnz	r0, 8085002 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
 8084ff4:	f5a0 5064 	sub.w	r0, r0, #14592	; 0x3900
 8084ff8:	42a5      	cmp	r5, r4
 8084ffa:	bf28      	it	cs
 8084ffc:	2000      	movcs	r0, #0
 8084ffe:	e000      	b.n	8085002 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8085000:	4801      	ldr	r0, [pc, #4]	; (8085008 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
 8085002:	b005      	add	sp, #20
 8085004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8085008:	ffffbc80 	.word	0xffffbc80

0808500c <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 808500c:	4b05      	ldr	r3, [pc, #20]	; (8085024 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
 808500e:	681a      	ldr	r2, [r3, #0]
 8085010:	b11a      	cbz	r2, 808501a <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
 8085012:	4282      	cmp	r2, r0
 8085014:	d003      	beq.n	808501e <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
 8085016:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 8085018:	e7f9      	b.n	808500e <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
 808501a:	4610      	mov	r0, r2
 808501c:	4770      	bx	lr
 808501e:	4618      	mov	r0, r3
}
 8085020:	4770      	bx	lr
 8085022:	bf00      	nop
 8085024:	0809195c 	.word	0x0809195c

08085028 <mbedtls_ssl_list_ciphersuites>:
                            sizeof( ciphersuite_definitions[0]  )
static int supported_ciphersuites[MAX_CIPHERSUITES];
static int supported_init = 0;

const int *mbedtls_ssl_list_ciphersuites( void )
{
 8085028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
 808502a:	4b0d      	ldr	r3, [pc, #52]	; (8085060 <mbedtls_ssl_list_ciphersuites+0x38>)
 808502c:	681a      	ldr	r2, [r3, #0]
 808502e:	461c      	mov	r4, r3
 8085030:	b9a2      	cbnz	r2, 808505c <mbedtls_ssl_list_ciphersuites+0x34>
 8085032:	490c      	ldr	r1, [pc, #48]	; (8085064 <mbedtls_ssl_list_ciphersuites+0x3c>)
 8085034:	4e0c      	ldr	r6, [pc, #48]	; (8085068 <mbedtls_ssl_list_ciphersuites+0x40>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 8085036:	f101 0718 	add.w	r7, r1, #24
 808503a:	f856 5f04 	ldr.w	r5, [r6, #4]!
 808503e:	b14d      	cbz	r5, 8085054 <mbedtls_ssl_list_ciphersuites+0x2c>
 8085040:	42b9      	cmp	r1, r7
 8085042:	d207      	bcs.n	8085054 <mbedtls_ssl_list_ciphersuites+0x2c>
#if defined(MBEDTLS_REMOVE_ARC4_CIPHERSUITES)
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
                cs_info->cipher != MBEDTLS_CIPHER_ARC4_128 )
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
 8085044:	4628      	mov	r0, r5
 8085046:	f7ff ffe1 	bl	808500c <mbedtls_ssl_ciphersuite_from_id>
 808504a:	2800      	cmp	r0, #0
 808504c:	d0f5      	beq.n	808503a <mbedtls_ssl_list_ciphersuites+0x12>
#endif
                *(q++) = *p;
 808504e:	600d      	str	r5, [r1, #0]
 8085050:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
 8085052:	e7f2      	b.n	808503a <mbedtls_ssl_list_ciphersuites+0x12>
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
#endif
                *(q++) = *p;
        }
        *q = 0;
 8085054:	2300      	movs	r3, #0
 8085056:	600b      	str	r3, [r1, #0]

        supported_init = 1;
 8085058:	2301      	movs	r3, #1
 808505a:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
 808505c:	4801      	ldr	r0, [pc, #4]	; (8085064 <mbedtls_ssl_list_ciphersuites+0x3c>)
 808505e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085060:	20001448 	.word	0x20001448
 8085064:	2000144c 	.word	0x2000144c
 8085068:	08091a38 	.word	0x08091a38

0808506c <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 808506c:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 808506e:	b530      	push	{r4, r5, lr}
    *res = 0;
 8085070:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8085072:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8085074:	b189      	cbz	r1, 808509a <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 8085076:	6803      	ldr	r3, [r0, #0]
 8085078:	781b      	ldrb	r3, [r3, #0]
 808507a:	3b30      	subs	r3, #48	; 0x30
 808507c:	2b09      	cmp	r3, #9
 808507e:	d80e      	bhi.n	808509e <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8085080:	6813      	ldr	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8085082:	3901      	subs	r1, #1
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8085084:	436b      	muls	r3, r5
 8085086:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
 8085088:	6803      	ldr	r3, [r0, #0]
 808508a:	1c5c      	adds	r4, r3, #1
 808508c:	6004      	str	r4, [r0, #0]
 808508e:	781b      	ldrb	r3, [r3, #0]
 8085090:	6814      	ldr	r4, [r2, #0]
 8085092:	3b30      	subs	r3, #48	; 0x30
 8085094:	4423      	add	r3, r4
 8085096:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8085098:	e7ec      	b.n	8085074 <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 808509a:	4608      	mov	r0, r1
 808509c:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 808509e:	4801      	ldr	r0, [pc, #4]	; (80850a4 <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
 80850a0:	bd30      	pop	{r4, r5, pc}
 80850a2:	bf00      	nop
 80850a4:	ffffdc00 	.word	0xffffdc00

080850a8 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80850a8:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
 80850aa:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80850ac:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
 80850ae:	1aca      	subs	r2, r1, r3
 80850b0:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80850b2:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
 80850b4:	dd17      	ble.n	80850e6 <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 80850b6:	781a      	ldrb	r2, [r3, #0]
 80850b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80850bc:	2a02      	cmp	r2, #2
 80850be:	d114      	bne.n	80850ea <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 80850c0:	1c5a      	adds	r2, r3, #1
 80850c2:	6002      	str	r2, [r0, #0]
 80850c4:	462a      	mov	r2, r5
 80850c6:	781b      	ldrb	r3, [r3, #0]
 80850c8:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 80850cc:	f7fd f82c 	bl	8082128 <mbedtls_asn1_get_len>
 80850d0:	b110      	cbz	r0, 80850d8 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 80850d2:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 80850d6:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
 80850d8:	6823      	ldr	r3, [r4, #0]
 80850da:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 80850dc:	6822      	ldr	r2, [r4, #0]
 80850de:	686b      	ldr	r3, [r5, #4]
 80850e0:	4413      	add	r3, r2
 80850e2:	6023      	str	r3, [r4, #0]

    return( 0 );
 80850e4:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80850e6:	4802      	ldr	r0, [pc, #8]	; (80850f0 <mbedtls_x509_get_serial+0x48>)
 80850e8:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80850ea:	4802      	ldr	r0, [pc, #8]	; (80850f4 <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
 80850ec:	bd38      	pop	{r3, r4, r5, pc}
 80850ee:	bf00      	nop
 80850f0:	ffffdd20 	.word	0xffffdd20
 80850f4:	ffffdd1e 	.word	0xffffdd1e

080850f8 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 80850f8:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 80850fa:	f7fd f940 	bl	808237e <mbedtls_asn1_get_alg>
 80850fe:	b108      	cbz	r0, 8085104 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 8085100:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
 8085104:	bd08      	pop	{r3, pc}
	...

08085108 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 8085108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808510c:	4604      	mov	r4, r0
 808510e:	460f      	mov	r7, r1
 8085110:	4691      	mov	r9, r2
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8085112:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80851f4 <mbedtls_x509_get_name+0xec>
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 8085116:	2331      	movs	r3, #49	; 0x31
 8085118:	466a      	mov	r2, sp
 808511a:	4639      	mov	r1, r7
 808511c:	4620      	mov	r0, r4
 808511e:	f7fd f855 	bl	80821cc <mbedtls_asn1_get_tag>
 8085122:	b110      	cbz	r0, 808512a <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8085124:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 8085128:	e05a      	b.n	80851e0 <mbedtls_x509_get_name+0xd8>

        end_set  = *p + set_len;
 808512a:	464d      	mov	r5, r9
 808512c:	6826      	ldr	r6, [r4, #0]
 808512e:	9b00      	ldr	r3, [sp, #0]
 8085130:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8085132:	2330      	movs	r3, #48	; 0x30
 8085134:	aa01      	add	r2, sp, #4
 8085136:	4631      	mov	r1, r6
 8085138:	4620      	mov	r0, r4
 808513a:	f7fd f847 	bl	80821cc <mbedtls_asn1_get_tag>
 808513e:	bb50      	cbnz	r0, 8085196 <mbedtls_x509_get_name+0x8e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    if( ( end - *p ) < 1 )
 8085140:	6823      	ldr	r3, [r4, #0]
 8085142:	1af2      	subs	r2, r6, r3
 8085144:	2a00      	cmp	r2, #0
 8085146:	dc01      	bgt.n	808514c <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8085148:	4827      	ldr	r0, [pc, #156]	; (80851e8 <mbedtls_x509_get_name+0xe0>)
 808514a:	e049      	b.n	80851e0 <mbedtls_x509_get_name+0xd8>

    oid = &cur->oid;
    oid->tag = **p;
 808514c:	462a      	mov	r2, r5
 808514e:	781b      	ldrb	r3, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8085150:	4631      	mov	r1, r6
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
    oid->tag = **p;
 8085152:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8085156:	4620      	mov	r0, r4
 8085158:	2306      	movs	r3, #6
 808515a:	f7fd f837 	bl	80821cc <mbedtls_asn1_get_tag>
 808515e:	b9d0      	cbnz	r0, 8085196 <mbedtls_x509_get_name+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 8085160:	6823      	ldr	r3, [r4, #0]
    *p += oid->len;
 8085162:	6869      	ldr	r1, [r5, #4]
    oid->tag = **p;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 8085164:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
 8085166:	6820      	ldr	r0, [r4, #0]
 8085168:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
 808516a:	1af2      	subs	r2, r6, r3
 808516c:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
 808516e:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
 8085170:	ddea      	ble.n	8085148 <mbedtls_x509_get_name+0x40>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8085172:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8085174:	2a1e      	cmp	r2, #30
 8085176:	d81a      	bhi.n	80851ae <mbedtls_x509_get_name+0xa6>
 8085178:	fa28 f202 	lsr.w	r2, r8, r2
 808517c:	07d2      	lsls	r2, r2, #31
 808517e:	d516      	bpl.n	80851ae <mbedtls_x509_get_name+0xa6>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 8085180:	3301      	adds	r3, #1
 8085182:	6023      	str	r3, [r4, #0]
 8085184:	5c43      	ldrb	r3, [r0, r1]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8085186:	f105 0210 	add.w	r2, r5, #16
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 808518a:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 808518c:	4631      	mov	r1, r6
 808518e:	4620      	mov	r0, r4
 8085190:	f7fc ffca 	bl	8082128 <mbedtls_asn1_get_len>
 8085194:	b118      	cbz	r0, 808519e <mbedtls_x509_get_name+0x96>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8085196:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 808519a:	b150      	cbz	r0, 80851b2 <mbedtls_x509_get_name+0xaa>
 808519c:	e020      	b.n	80851e0 <mbedtls_x509_get_name+0xd8>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
 808519e:	6823      	ldr	r3, [r4, #0]
 80851a0:	616b      	str	r3, [r5, #20]
    *p += val->len;
 80851a2:	6822      	ldr	r2, [r4, #0]
 80851a4:	692b      	ldr	r3, [r5, #16]
 80851a6:	4413      	add	r3, r2
 80851a8:	6023      	str	r3, [r4, #0]

    cur->next = NULL;
 80851aa:	61a8      	str	r0, [r5, #24]
 80851ac:	e001      	b.n	80851b2 <mbedtls_x509_get_name+0xaa>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80851ae:	480f      	ldr	r0, [pc, #60]	; (80851ec <mbedtls_x509_get_name+0xe4>)
 80851b0:	e016      	b.n	80851e0 <mbedtls_x509_get_name+0xd8>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
 80851b2:	6823      	ldr	r3, [r4, #0]
 80851b4:	429e      	cmp	r6, r3
 80851b6:	d008      	beq.n	80851ca <mbedtls_x509_get_name+0xc2>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 80851b8:	2001      	movs	r0, #1
 80851ba:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80851bc:	2120      	movs	r1, #32
 80851be:	f00b f9f3 	bl	80905a8 <calloc>
 80851c2:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
 80851c4:	b158      	cbz	r0, 80851de <mbedtls_x509_get_name+0xd6>
 80851c6:	4605      	mov	r5, r0
 80851c8:	e7b3      	b.n	8085132 <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 80851ca:	42b7      	cmp	r7, r6
 80851cc:	d008      	beq.n	80851e0 <mbedtls_x509_get_name+0xd8>
            return( 0 );

        cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80851ce:	2120      	movs	r1, #32
 80851d0:	2001      	movs	r0, #1
 80851d2:	f00b f9e9 	bl	80905a8 <calloc>
 80851d6:	4681      	mov	r9, r0
 80851d8:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
 80851da:	2800      	cmp	r0, #0
 80851dc:	d19b      	bne.n	8085116 <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80851de:	4804      	ldr	r0, [pc, #16]	; (80851f0 <mbedtls_x509_get_name+0xe8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
 80851e0:	b003      	add	sp, #12
 80851e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80851e6:	bf00      	nop
 80851e8:	ffffdc20 	.word	0xffffdc20
 80851ec:	ffffdc1e 	.word	0xffffdc1e
 80851f0:	ffffd780 	.word	0xffffd780
 80851f4:	50581008 	.word	0x50581008

080851f8 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80851f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80851fa:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80851fc:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80851fe:	1aca      	subs	r2, r1, r3
 8085200:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8085202:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 8085204:	f340 80a1 	ble.w	808534a <mbedtls_x509_get_time+0x152>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 8085208:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 808520a:	2a17      	cmp	r2, #23
 808520c:	d004      	beq.n	8085218 <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 808520e:	2a18      	cmp	r2, #24
 8085210:	f040 809d 	bne.w	808534e <mbedtls_x509_get_time+0x156>
        year_len = 4;
 8085214:	2704      	movs	r7, #4
 8085216:	e000      	b.n	808521a <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
 8085218:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 808521a:	3301      	adds	r3, #1
 808521c:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 808521e:	aa01      	add	r2, sp, #4
 8085220:	4628      	mov	r0, r5
 8085222:	f7fc ff81 	bl	8082128 <mbedtls_asn1_get_len>

    if( ret != 0 )
 8085226:	b110      	cbz	r0, 808522e <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8085228:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
 808522c:	e092      	b.n	8085354 <mbedtls_x509_get_time+0x15c>

    return x509_parse_time( p, len, year_len, tm );
 808522e:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 8085230:	f107 0308 	add.w	r3, r7, #8
 8085234:	429e      	cmp	r6, r3
 8085236:	f0c0 808c 	bcc.w	8085352 <mbedtls_x509_get_time+0x15a>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 808523a:	4622      	mov	r2, r4
 808523c:	4639      	mov	r1, r7
 808523e:	4628      	mov	r0, r5
 8085240:	f7ff ff14 	bl	808506c <_ZL14x509_parse_intPPhjPi>
 8085244:	2800      	cmp	r0, #0
 8085246:	f040 8085 	bne.w	8085354 <mbedtls_x509_get_time+0x15c>
    if ( 2 == yearlen )
 808524a:	2f02      	cmp	r7, #2
 808524c:	d108      	bne.n	8085260 <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
 808524e:	6823      	ldr	r3, [r4, #0]
 8085250:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 8085252:	bfdc      	itt	le
 8085254:	3364      	addle	r3, #100	; 0x64
 8085256:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
 8085258:	6823      	ldr	r3, [r4, #0]
 808525a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 808525e:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 8085260:	1d22      	adds	r2, r4, #4
 8085262:	2102      	movs	r1, #2
 8085264:	4628      	mov	r0, r5
 8085266:	f7ff ff01 	bl	808506c <_ZL14x509_parse_intPPhjPi>
 808526a:	2800      	cmp	r0, #0
 808526c:	d172      	bne.n	8085354 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 808526e:	f104 0208 	add.w	r2, r4, #8
 8085272:	2102      	movs	r1, #2
 8085274:	4628      	mov	r0, r5
 8085276:	f7ff fef9 	bl	808506c <_ZL14x509_parse_intPPhjPi>
 808527a:	2800      	cmp	r0, #0
 808527c:	d16a      	bne.n	8085354 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 808527e:	f104 020c 	add.w	r2, r4, #12
 8085282:	2102      	movs	r1, #2
 8085284:	4628      	mov	r0, r5
 8085286:	f7ff fef1 	bl	808506c <_ZL14x509_parse_intPPhjPi>
 808528a:	2800      	cmp	r0, #0
 808528c:	d162      	bne.n	8085354 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 808528e:	f104 0210 	add.w	r2, r4, #16
 8085292:	2102      	movs	r1, #2
 8085294:	4628      	mov	r0, r5
 8085296:	f7ff fee9 	bl	808506c <_ZL14x509_parse_intPPhjPi>
 808529a:	2800      	cmp	r0, #0
 808529c:	d15a      	bne.n	8085354 <mbedtls_x509_get_time+0x15c>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
 808529e:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 80852a0:	f1a6 0308 	sub.w	r3, r6, #8
 80852a4:	2b01      	cmp	r3, #1
 80852a6:	d954      	bls.n	8085352 <mbedtls_x509_get_time+0x15a>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 80852a8:	f104 0214 	add.w	r2, r4, #20
 80852ac:	2102      	movs	r1, #2
 80852ae:	4628      	mov	r0, r5
 80852b0:	f7ff fedc 	bl	808506c <_ZL14x509_parse_intPPhjPi>
 80852b4:	2800      	cmp	r0, #0
 80852b6:	d14d      	bne.n	8085354 <mbedtls_x509_get_time+0x15c>
        len -= 2;
 80852b8:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 80852bc:	2b01      	cmp	r3, #1
 80852be:	d107      	bne.n	80852d0 <mbedtls_x509_get_time+0xd8>
 80852c0:	682b      	ldr	r3, [r5, #0]
 80852c2:	781a      	ldrb	r2, [r3, #0]
 80852c4:	2a5a      	cmp	r2, #90	; 0x5a
 80852c6:	d144      	bne.n	8085352 <mbedtls_x509_get_time+0x15a>
    {
        (*p)++;
 80852c8:	3301      	adds	r3, #1
 80852ca:	602b      	str	r3, [r5, #0]
        len--;
 80852cc:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 80852d0:	2b00      	cmp	r3, #0
 80852d2:	d13e      	bne.n	8085352 <mbedtls_x509_get_time+0x15a>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 80852d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80852d8:	6823      	ldr	r3, [r4, #0]
 80852da:	4293      	cmp	r3, r2
 80852dc:	d839      	bhi.n	8085352 <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 23,   t->hour );
 80852de:	68e2      	ldr	r2, [r4, #12]
 80852e0:	2a17      	cmp	r2, #23
 80852e2:	d836      	bhi.n	8085352 <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->min  );
 80852e4:	6922      	ldr	r2, [r4, #16]
 80852e6:	2a3b      	cmp	r2, #59	; 0x3b
 80852e8:	d833      	bhi.n	8085352 <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->sec  );
 80852ea:	6962      	ldr	r2, [r4, #20]
 80852ec:	2a3b      	cmp	r2, #59	; 0x3b
 80852ee:	d830      	bhi.n	8085352 <mbedtls_x509_get_time+0x15a>
 80852f0:	6861      	ldr	r1, [r4, #4]
 80852f2:	290c      	cmp	r1, #12
 80852f4:	d82d      	bhi.n	8085352 <mbedtls_x509_get_time+0x15a>
 80852f6:	2201      	movs	r2, #1
 80852f8:	408a      	lsls	r2, r1
 80852fa:	f241 51aa 	movw	r1, #5546	; 0x15aa
 80852fe:	4011      	ands	r1, r2
 8085300:	b9b9      	cbnz	r1, 8085332 <mbedtls_x509_get_time+0x13a>
 8085302:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 8085306:	d116      	bne.n	8085336 <mbedtls_x509_get_time+0x13e>
 8085308:	0751      	lsls	r1, r2, #29
 808530a:	d522      	bpl.n	8085352 <mbedtls_x509_get_time+0x15a>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 808530c:	079a      	lsls	r2, r3, #30
 808530e:	d105      	bne.n	808531c <mbedtls_x509_get_time+0x124>
 8085310:	2164      	movs	r1, #100	; 0x64
 8085312:	fb93 f2f1 	sdiv	r2, r3, r1
 8085316:	fb01 3212 	mls	r2, r1, r2, r3
 808531a:	b972      	cbnz	r2, 808533a <mbedtls_x509_get_time+0x142>
 808531c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8085320:	fb93 f2f1 	sdiv	r2, r3, r1
 8085324:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
 8085328:	2b00      	cmp	r3, #0
 808532a:	bf0c      	ite	eq
 808532c:	231d      	moveq	r3, #29
 808532e:	231c      	movne	r3, #28
 8085330:	e004      	b.n	808533c <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 8085332:	231f      	movs	r3, #31
 8085334:	e002      	b.n	808533c <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
 8085336:	231e      	movs	r3, #30
 8085338:	e000      	b.n	808533c <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
 808533a:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
 808533c:	68a2      	ldr	r2, [r4, #8]
 808533e:	2a00      	cmp	r2, #0
 8085340:	dd07      	ble.n	8085352 <mbedtls_x509_get_time+0x15a>
 8085342:	429a      	cmp	r2, r3
 8085344:	dc05      	bgt.n	8085352 <mbedtls_x509_get_time+0x15a>
    if ( 0 != len )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    CHECK( x509_date_is_valid( tm ) );

    return ( 0 );
 8085346:	2000      	movs	r0, #0
 8085348:	e004      	b.n	8085354 <mbedtls_x509_get_time+0x15c>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 808534a:	4803      	ldr	r0, [pc, #12]	; (8085358 <mbedtls_x509_get_time+0x160>)
 808534c:	e002      	b.n	8085354 <mbedtls_x509_get_time+0x15c>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808534e:	4803      	ldr	r0, [pc, #12]	; (808535c <mbedtls_x509_get_time+0x164>)
 8085350:	e000      	b.n	8085354 <mbedtls_x509_get_time+0x15c>

        tm->year += 1900;
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 8085352:	4803      	ldr	r0, [pc, #12]	; (8085360 <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
 8085354:	b003      	add	sp, #12
 8085356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085358:	ffffdba0 	.word	0xffffdba0
 808535c:	ffffdb9e 	.word	0xffffdb9e
 8085360:	ffffdc00 	.word	0xffffdc00

08085364 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8085364:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8085366:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8085368:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 808536a:	1aca      	subs	r2, r1, r3
 808536c:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 808536e:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8085370:	dd10      	ble.n	8085394 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8085372:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 8085374:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8085376:	f7fc ffb2 	bl	80822de <mbedtls_asn1_get_bitstring_null>
 808537a:	b110      	cbz	r0, 8085382 <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 808537c:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
 8085380:	e009      	b.n	8085396 <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
 8085382:	9b01      	ldr	r3, [sp, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
 8085384:	602e      	str	r6, [r5, #0]
    sig->len = len;
 8085386:	606b      	str	r3, [r5, #4]
    sig->p = *p;
 8085388:	6822      	ldr	r2, [r4, #0]
 808538a:	60aa      	str	r2, [r5, #8]

    *p += len;
 808538c:	6822      	ldr	r2, [r4, #0]
 808538e:	4413      	add	r3, r2
 8085390:	6023      	str	r3, [r4, #0]

    return( 0 );
 8085392:	e000      	b.n	8085396 <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8085394:	4801      	ldr	r0, [pc, #4]	; (808539c <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
 8085396:	b002      	add	sp, #8
 8085398:	bd70      	pop	{r4, r5, r6, pc}
 808539a:	bf00      	nop
 808539c:	ffffdb20 	.word	0xffffdb20

080853a0 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 80853a0:	b510      	push	{r4, lr}
 80853a2:	460c      	mov	r4, r1
 80853a4:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 80853a6:	9a02      	ldr	r2, [sp, #8]
 80853a8:	6812      	ldr	r2, [r2, #0]
 80853aa:	b982      	cbnz	r2, 80853ce <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 80853ac:	461a      	mov	r2, r3
 80853ae:	f7fe fb91 	bl	8083ad4 <mbedtls_oid_get_sig_alg>
 80853b2:	b110      	cbz	r0, 80853ba <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 80853b4:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 80853b8:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 80853ba:	6823      	ldr	r3, [r4, #0]
 80853bc:	2b05      	cmp	r3, #5
 80853be:	d000      	beq.n	80853c2 <mbedtls_x509_get_sig_alg+0x22>
 80853c0:	b93b      	cbnz	r3, 80853d2 <mbedtls_x509_get_sig_alg+0x32>
 80853c2:	6863      	ldr	r3, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
 80853c4:	4804      	ldr	r0, [pc, #16]	; (80853d8 <mbedtls_x509_get_sig_alg+0x38>)
 80853c6:	2b00      	cmp	r3, #0
 80853c8:	bf08      	it	eq
 80853ca:	2000      	moveq	r0, #0
 80853cc:	bd10      	pop	{r4, pc}
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80853ce:	4803      	ldr	r0, [pc, #12]	; (80853dc <mbedtls_x509_get_sig_alg+0x3c>)
 80853d0:	bd10      	pop	{r4, pc}
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 80853d2:	4801      	ldr	r0, [pc, #4]	; (80853d8 <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
 80853d4:	bd10      	pop	{r4, pc}
 80853d6:	bf00      	nop
 80853d8:	ffffdd00 	.word	0xffffdd00
 80853dc:	ffffd800 	.word	0xffffd800

080853e0 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 80853e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80853e2:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 80853e4:	6802      	ldr	r2, [r0, #0]
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 80853e6:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( *p == end )
 80853e8:	428a      	cmp	r2, r1
 80853ea:	d01c      	beq.n	8085426 <mbedtls_x509_get_ext+0x46>
        return( 0 );

    ext->tag = **p;
 80853ec:	7815      	ldrb	r5, [r2, #0]
 80853ee:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 80853f0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    size_t len;

    if( *p == end )
        return( 0 );

    ext->tag = **p;
 80853f4:	f842 5b04 	str.w	r5, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 80853f8:	f7fc fee8 	bl	80821cc <mbedtls_asn1_get_tag>
 80853fc:	b9b0      	cbnz	r0, 808542c <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 80853fe:	6823      	ldr	r3, [r4, #0]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8085400:	aa01      	add	r2, sp, #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 8085402:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 8085404:	6825      	ldr	r5, [r4, #0]
 8085406:	6873      	ldr	r3, [r6, #4]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8085408:	4620      	mov	r0, r4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
    end = *p + ext->len;
 808540a:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808540c:	4629      	mov	r1, r5
 808540e:	2330      	movs	r3, #48	; 0x30
 8085410:	f7fc fedc 	bl	80821cc <mbedtls_asn1_get_tag>
 8085414:	b110      	cbz	r0, 808541c <mbedtls_x509_get_ext+0x3c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8085416:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 808541a:	e007      	b.n	808542c <mbedtls_x509_get_ext+0x4c>

    if( end != *p + len )
 808541c:	6822      	ldr	r2, [r4, #0]
 808541e:	9b01      	ldr	r3, [sp, #4]
 8085420:	4413      	add	r3, r2
 8085422:	429d      	cmp	r5, r3
 8085424:	d101      	bne.n	808542a <mbedtls_x509_get_ext+0x4a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 8085426:	2000      	movs	r0, #0
 8085428:	e000      	b.n	808542c <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808542a:	4801      	ldr	r0, [pc, #4]	; (8085430 <mbedtls_x509_get_ext+0x50>)

    return( 0 );
}
 808542c:	b002      	add	sp, #8
 808542e:	bd70      	pop	{r4, r5, r6, pc}
 8085430:	ffffda9a 	.word	0xffffda9a

08085434 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8085434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085438:	460f      	mov	r7, r1
 808543a:	4691      	mov	r9, r2

    memset( s, 0, sizeof( s ) );

    name = dn;
    p = buf;
    n = size;
 808543c:	463d      	mov	r5, r7
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
 808543e:	464e      	mov	r6, r9
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8085440:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 8085442:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8085446:	f10d 0808 	add.w	r8, sp, #8
 808544a:	f44f 7280 	mov.w	r2, #256	; 0x100
 808544e:	4651      	mov	r1, sl
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8085450:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8085452:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 8085454:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8085458:	f00b f8f1 	bl	809063e <memset>
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
 808545c:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
 808545e:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
 8085462:	2e00      	cmp	r6, #0
 8085464:	d057      	beq.n	8085516 <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
 8085466:	68b3      	ldr	r3, [r6, #8]
 8085468:	2b00      	cmp	r3, #0
 808546a:	d052      	beq.n	8085512 <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
 808546c:	454e      	cmp	r6, r9
 808546e:	d011      	beq.n	8085494 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 8085470:	4b2b      	ldr	r3, [pc, #172]	; (8085520 <mbedtls_x509_dn_gets+0xec>)
 8085472:	492c      	ldr	r1, [pc, #176]	; (8085524 <mbedtls_x509_dn_gets+0xf0>)
 8085474:	4620      	mov	r0, r4
 8085476:	2a00      	cmp	r2, #0
 8085478:	bf14      	ite	ne
 808547a:	460a      	movne	r2, r1
 808547c:	461a      	moveq	r2, r3
 808547e:	4629      	mov	r1, r5
 8085480:	f009 ff88 	bl	808f394 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8085484:	2800      	cmp	r0, #0
 8085486:	da01      	bge.n	808548c <mbedtls_x509_dn_gets+0x58>
 8085488:	4827      	ldr	r0, [pc, #156]	; (8085528 <mbedtls_x509_dn_gets+0xf4>)
 808548a:	e045      	b.n	8085518 <mbedtls_x509_dn_gets+0xe4>
 808548c:	4285      	cmp	r5, r0
 808548e:	d9fb      	bls.n	8085488 <mbedtls_x509_dn_gets+0x54>
 8085490:	1a2d      	subs	r5, r5, r0
 8085492:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 8085494:	a901      	add	r1, sp, #4
 8085496:	4630      	mov	r0, r6
 8085498:	f7fe fac2 	bl	8083a20 <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
 808549c:	b930      	cbnz	r0, 80854ac <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 808549e:	9b01      	ldr	r3, [sp, #4]
 80854a0:	4a22      	ldr	r2, [pc, #136]	; (808552c <mbedtls_x509_dn_gets+0xf8>)
 80854a2:	4629      	mov	r1, r5
 80854a4:	4620      	mov	r0, r4
 80854a6:	f009 ff75 	bl	808f394 <snprintf>
 80854aa:	e004      	b.n	80854b6 <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 80854ac:	4a20      	ldr	r2, [pc, #128]	; (8085530 <mbedtls_x509_dn_gets+0xfc>)
 80854ae:	4629      	mov	r1, r5
 80854b0:	4620      	mov	r0, r4
 80854b2:	f009 ff6f 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80854b6:	2800      	cmp	r0, #0
 80854b8:	dbe6      	blt.n	8085488 <mbedtls_x509_dn_gets+0x54>
 80854ba:	4285      	cmp	r5, r0
 80854bc:	d9e4      	bls.n	8085488 <mbedtls_x509_dn_gets+0x54>
 80854be:	1a2d      	subs	r5, r5, r0
 80854c0:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
 80854c2:	2300      	movs	r3, #0
 80854c4:	6932      	ldr	r2, [r6, #16]
 80854c6:	4293      	cmp	r3, r2
 80854c8:	d213      	bcs.n	80854f2 <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
 80854ca:	2bff      	cmp	r3, #255	; 0xff
 80854cc:	d011      	beq.n	80854f2 <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
 80854ce:	6972      	ldr	r2, [r6, #20]
 80854d0:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 80854d2:	2a1f      	cmp	r2, #31
 80854d4:	d906      	bls.n	80854e4 <mbedtls_x509_dn_gets+0xb0>
 80854d6:	2a7f      	cmp	r2, #127	; 0x7f
 80854d8:	d004      	beq.n	80854e4 <mbedtls_x509_dn_gets+0xb0>
 80854da:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 80854de:	b2c9      	uxtb	r1, r1
 80854e0:	291e      	cmp	r1, #30
 80854e2:	d802      	bhi.n	80854ea <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
 80854e4:	f808 a003 	strb.w	sl, [r8, r3]
 80854e8:	e001      	b.n	80854ee <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
 80854ea:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
 80854ee:	3301      	adds	r3, #1
 80854f0:	e7e8      	b.n	80854c4 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
 80854f2:	2200      	movs	r2, #0
 80854f4:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 80854f8:	4629      	mov	r1, r5
 80854fa:	4643      	mov	r3, r8
 80854fc:	4a0d      	ldr	r2, [pc, #52]	; (8085534 <mbedtls_x509_dn_gets+0x100>)
 80854fe:	4620      	mov	r0, r4
 8085500:	f009 ff48 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8085504:	2800      	cmp	r0, #0
 8085506:	dbbf      	blt.n	8085488 <mbedtls_x509_dn_gets+0x54>
 8085508:	4285      	cmp	r5, r0
 808550a:	d9bd      	bls.n	8085488 <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
 808550c:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
 808550e:	1a2d      	subs	r5, r5, r0
 8085510:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
 8085512:	69b6      	ldr	r6, [r6, #24]
 8085514:	e7a5      	b.n	8085462 <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
 8085516:	1b78      	subs	r0, r7, r5
}
 8085518:	b042      	add	sp, #264	; 0x108
 808551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808551e:	bf00      	nop
 8085520:	08091ccc 	.word	0x08091ccc
 8085524:	08091cc8 	.word	0x08091cc8
 8085528:	ffffd680 	.word	0xffffd680
 808552c:	08091ccf 	.word	0x08091ccf
 8085530:	08091cd3 	.word	0x08091cd3
 8085534:	08092106 	.word	0x08092106

08085538 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 8085538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808553c:	4680      	mov	r8, r0
 808553e:	460f      	mov	r7, r1
 8085540:	4691      	mov	r9, r2
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
 8085542:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
 8085544:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8085546:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80855c4 <mbedtls_x509_serial_gets+0x8c>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 808554a:	2e21      	cmp	r6, #33	; 0x21
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 808554c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80855c8 <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 8085550:	bf28      	it	cs
 8085552:	261c      	movcs	r6, #28

    for( i = 0; i < nr; i++ )
 8085554:	2500      	movs	r5, #0
 8085556:	42b5      	cmp	r5, r6
 8085558:	d01c      	beq.n	8085594 <mbedtls_x509_serial_gets+0x5c>
 808555a:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 808555e:	b91d      	cbnz	r5, 8085568 <mbedtls_x509_serial_gets+0x30>
 8085560:	2e01      	cmp	r6, #1
 8085562:	d001      	beq.n	8085568 <mbedtls_x509_serial_gets+0x30>
 8085564:	781a      	ldrb	r2, [r3, #0]
 8085566:	b19a      	cbz	r2, 8085590 <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8085568:	1e72      	subs	r2, r6, #1
 808556a:	4295      	cmp	r5, r2
 808556c:	bf34      	ite	cc
 808556e:	4652      	movcc	r2, sl
 8085570:	465a      	movcs	r2, fp
 8085572:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 8085574:	4621      	mov	r1, r4
 8085576:	9200      	str	r2, [sp, #0]
 8085578:	4640      	mov	r0, r8
 808557a:	4a0f      	ldr	r2, [pc, #60]	; (80855b8 <mbedtls_x509_serial_gets+0x80>)
 808557c:	f009 ff0a 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8085580:	2800      	cmp	r0, #0
 8085582:	da01      	bge.n	8085588 <mbedtls_x509_serial_gets+0x50>
 8085584:	480d      	ldr	r0, [pc, #52]	; (80855bc <mbedtls_x509_serial_gets+0x84>)
 8085586:	e014      	b.n	80855b2 <mbedtls_x509_serial_gets+0x7a>
 8085588:	4284      	cmp	r4, r0
 808558a:	d9fb      	bls.n	8085584 <mbedtls_x509_serial_gets+0x4c>
 808558c:	1a24      	subs	r4, r4, r0
 808558e:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
 8085590:	3501      	adds	r5, #1
 8085592:	e7e0      	b.n	8085556 <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
 8085594:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8085598:	429d      	cmp	r5, r3
 808559a:	d009      	beq.n	80855b0 <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 808559c:	4a08      	ldr	r2, [pc, #32]	; (80855c0 <mbedtls_x509_serial_gets+0x88>)
 808559e:	4621      	mov	r1, r4
 80855a0:	4640      	mov	r0, r8
 80855a2:	f009 fef7 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80855a6:	2800      	cmp	r0, #0
 80855a8:	dbec      	blt.n	8085584 <mbedtls_x509_serial_gets+0x4c>
 80855aa:	4284      	cmp	r4, r0
 80855ac:	d9ea      	bls.n	8085584 <mbedtls_x509_serial_gets+0x4c>
 80855ae:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 80855b0:	1b38      	subs	r0, r7, r4
}
 80855b2:	b003      	add	sp, #12
 80855b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80855b8:	08091cd9 	.word	0x08091cd9
 80855bc:	ffffd680 	.word	0xffffd680
 80855c0:	08091ce0 	.word	0x08091ce0
 80855c4:	08091cd7 	.word	0x08091cd7
 80855c8:	08090e20 	.word	0x08090e20

080855cc <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80855cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80855ce:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80855d0:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80855d2:	a902      	add	r1, sp, #8
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80855d4:	4605      	mov	r5, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80855d6:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 80855da:	4610      	mov	r0, r2
 80855dc:	f7fe fa6e 	bl	8083abc <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 80855e0:	b128      	cbz	r0, 80855ee <mbedtls_x509_sig_alg_gets+0x22>
        ret = mbedtls_snprintf( p, n, "???"  );
 80855e2:	4a0b      	ldr	r2, [pc, #44]	; (8085610 <mbedtls_x509_sig_alg_gets+0x44>)
 80855e4:	4621      	mov	r1, r4
 80855e6:	4628      	mov	r0, r5
 80855e8:	f009 fed4 	bl	808f394 <snprintf>
 80855ec:	e005      	b.n	80855fa <mbedtls_x509_sig_alg_gets+0x2e>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 80855ee:	9b01      	ldr	r3, [sp, #4]
 80855f0:	4a08      	ldr	r2, [pc, #32]	; (8085614 <mbedtls_x509_sig_alg_gets+0x48>)
 80855f2:	4621      	mov	r1, r4
 80855f4:	4628      	mov	r0, r5
 80855f6:	f009 fecd 	bl	808f394 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80855fa:	2800      	cmp	r0, #0
 80855fc:	db04      	blt.n	8085608 <mbedtls_x509_sig_alg_gets+0x3c>
 80855fe:	4b06      	ldr	r3, [pc, #24]	; (8085618 <mbedtls_x509_sig_alg_gets+0x4c>)
 8085600:	4284      	cmp	r4, r0
 8085602:	bf98      	it	ls
 8085604:	4618      	movls	r0, r3
 8085606:	e000      	b.n	808560a <mbedtls_x509_sig_alg_gets+0x3e>
 8085608:	4803      	ldr	r0, [pc, #12]	; (8085618 <mbedtls_x509_sig_alg_gets+0x4c>)
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
 808560a:	b003      	add	sp, #12
 808560c:	bd30      	pop	{r4, r5, pc}
 808560e:	bf00      	nop
 8085610:	08091ce5 	.word	0x08091ce5
 8085614:	08092106 	.word	0x08092106
 8085618:	ffffd680 	.word	0xffffd680

0808561c <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 808561c:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 808561e:	4613      	mov	r3, r2
 8085620:	4a06      	ldr	r2, [pc, #24]	; (808563c <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 8085622:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 8085624:	f009 feb6 	bl	808f394 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8085628:	2800      	cmp	r0, #0
 808562a:	db05      	blt.n	8085638 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
 808562c:	4b04      	ldr	r3, [pc, #16]	; (8085640 <mbedtls_x509_key_size_helper+0x24>)
 808562e:	4284      	cmp	r4, r0
 8085630:	bf94      	ite	ls
 8085632:	4618      	movls	r0, r3
 8085634:	2000      	movhi	r0, #0
 8085636:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8085638:	4801      	ldr	r0, [pc, #4]	; (8085640 <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
 808563a:	bd10      	pop	{r4, pc}
 808563c:	08091ce9 	.word	0x08091ce9
 8085640:	ffffd680 	.word	0xffffd680

08085644 <mbedtls_x509_time_is_past>:
 8085644:	2000      	movs	r0, #0
 8085646:	4770      	bx	lr

08085648 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 8085648:	2000      	movs	r0, #0
 808564a:	4770      	bx	lr

0808564c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 808564c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808564e:	460c      	mov	r4, r1
 8085650:	4615      	mov	r5, r2
 8085652:	b08f      	sub	sp, #60	; 0x3c
 8085654:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 8085656:	a80b      	add	r0, sp, #44	; 0x2c
 8085658:	f004 fc14 	bl	8089e84 <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 808565c:	2330      	movs	r3, #48	; 0x30
 808565e:	aa09      	add	r2, sp, #36	; 0x24
 8085660:	1961      	adds	r1, r4, r5
 8085662:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
 8085664:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8085666:	f7fc fdb1 	bl	80821cc <mbedtls_asn1_get_tag>
 808566a:	b940      	cbnz	r0, 808567e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 808566c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808566e:	9e0a      	ldr	r6, [sp, #40]	; 0x28

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8085670:	aa08      	add	r2, sp, #32
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8085672:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8085674:	4631      	mov	r1, r6
 8085676:	a80a      	add	r0, sp, #40	; 0x28
 8085678:	f7fc fdd5 	bl	8082226 <mbedtls_asn1_get_int>
 808567c:	b110      	cbz	r0, 8085684 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 808567e:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
 8085682:	e0d4      	b.n	808582e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
 8085684:	9d08      	ldr	r5, [sp, #32]
 8085686:	b9dd      	cbnz	r5, 80856c0 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8085688:	2302      	movs	r3, #2
 808568a:	aa09      	add	r2, sp, #36	; 0x24
 808568c:	4631      	mov	r1, r6
 808568e:	a80a      	add	r0, sp, #40	; 0x28
 8085690:	f7fc fd9c 	bl	80821cc <mbedtls_asn1_get_tag>
 8085694:	4604      	mov	r4, r0
 8085696:	2800      	cmp	r0, #0
 8085698:	f040 80c5 	bne.w	8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 808569c:	9006      	str	r0, [sp, #24]
 808569e:	9005      	str	r0, [sp, #20]
 80856a0:	9004      	str	r0, [sp, #16]
 80856a2:	9003      	str	r0, [sp, #12]
 80856a4:	9002      	str	r0, [sp, #8]
 80856a6:	9001      	str	r0, [sp, #4]
 80856a8:	9000      	str	r0, [sp, #0]
 80856aa:	4603      	mov	r3, r0
 80856ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80856ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80856b0:	4638      	mov	r0, r7
 80856b2:	f7fd f879 	bl	80827a8 <mbedtls_rsa_import_raw>
 80856b6:	4604      	mov	r4, r0
 80856b8:	2800      	cmp	r0, #0
 80856ba:	f040 80b4 	bne.w	8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80856be:	e001      	b.n	80856c4 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 80856c0:	4d5c      	ldr	r5, [pc, #368]	; (8085834 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
 80856c2:	e0b4      	b.n	808582e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80856c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80856c6:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80856c8:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80856ca:	4413      	add	r3, r2
 80856cc:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80856ce:	aa09      	add	r2, sp, #36	; 0x24
 80856d0:	2302      	movs	r3, #2
 80856d2:	a80a      	add	r0, sp, #40	; 0x28
 80856d4:	f7fc fd7a 	bl	80821cc <mbedtls_asn1_get_tag>
 80856d8:	4604      	mov	r4, r0
 80856da:	2800      	cmp	r0, #0
 80856dc:	f040 80a3 	bne.w	8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80856e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80856e2:	9404      	str	r4, [sp, #16]
 80856e4:	9306      	str	r3, [sp, #24]
 80856e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80856e8:	9403      	str	r4, [sp, #12]
 80856ea:	9305      	str	r3, [sp, #20]
 80856ec:	9402      	str	r4, [sp, #8]
 80856ee:	9401      	str	r4, [sp, #4]
 80856f0:	9400      	str	r4, [sp, #0]
 80856f2:	4623      	mov	r3, r4
 80856f4:	4622      	mov	r2, r4
 80856f6:	4621      	mov	r1, r4
 80856f8:	4638      	mov	r0, r7
 80856fa:	f7fd f855 	bl	80827a8 <mbedtls_rsa_import_raw>
 80856fe:	4604      	mov	r4, r0
 8085700:	2800      	cmp	r0, #0
 8085702:	f040 8090 	bne.w	8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 8085706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8085708:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 808570a:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 808570c:	4413      	add	r3, r2
 808570e:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8085710:	aa09      	add	r2, sp, #36	; 0x24
 8085712:	2302      	movs	r3, #2
 8085714:	a80a      	add	r0, sp, #40	; 0x28
 8085716:	f7fc fd59 	bl	80821cc <mbedtls_asn1_get_tag>
 808571a:	4604      	mov	r4, r0
 808571c:	2800      	cmp	r0, #0
 808571e:	f040 8082 	bne.w	8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8085722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085724:	9406      	str	r4, [sp, #24]
 8085726:	9304      	str	r3, [sp, #16]
 8085728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808572a:	9405      	str	r4, [sp, #20]
 808572c:	9303      	str	r3, [sp, #12]
 808572e:	9402      	str	r4, [sp, #8]
 8085730:	9401      	str	r4, [sp, #4]
 8085732:	9400      	str	r4, [sp, #0]
 8085734:	4623      	mov	r3, r4
 8085736:	4622      	mov	r2, r4
 8085738:	4621      	mov	r1, r4
 808573a:	4638      	mov	r0, r7
 808573c:	f7fd f834 	bl	80827a8 <mbedtls_rsa_import_raw>
 8085740:	4604      	mov	r4, r0
 8085742:	2800      	cmp	r0, #0
 8085744:	d16f      	bne.n	8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8085746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8085748:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 808574a:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 808574c:	4413      	add	r3, r2
 808574e:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8085750:	aa09      	add	r2, sp, #36	; 0x24
 8085752:	2302      	movs	r3, #2
 8085754:	a80a      	add	r0, sp, #40	; 0x28
 8085756:	f7fc fd39 	bl	80821cc <mbedtls_asn1_get_tag>
 808575a:	4604      	mov	r4, r0
 808575c:	2800      	cmp	r0, #0
 808575e:	d162      	bne.n	8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8085760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085762:	2200      	movs	r2, #0
 8085764:	9300      	str	r3, [sp, #0]
 8085766:	9206      	str	r2, [sp, #24]
 8085768:	9205      	str	r2, [sp, #20]
 808576a:	9204      	str	r2, [sp, #16]
 808576c:	9203      	str	r2, [sp, #12]
 808576e:	9202      	str	r2, [sp, #8]
 8085770:	9201      	str	r2, [sp, #4]
 8085772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085774:	4611      	mov	r1, r2
 8085776:	4638      	mov	r0, r7
 8085778:	f7fd f816 	bl	80827a8 <mbedtls_rsa_import_raw>
 808577c:	4604      	mov	r4, r0
 808577e:	2800      	cmp	r0, #0
 8085780:	d151      	bne.n	8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8085782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8085784:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8085786:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8085788:	4413      	add	r3, r2
 808578a:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 808578c:	aa09      	add	r2, sp, #36	; 0x24
 808578e:	2302      	movs	r3, #2
 8085790:	a80a      	add	r0, sp, #40	; 0x28
 8085792:	f7fc fd1b 	bl	80821cc <mbedtls_asn1_get_tag>
 8085796:	4604      	mov	r4, r0
 8085798:	2800      	cmp	r0, #0
 808579a:	d144      	bne.n	8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 808579c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808579e:	9406      	str	r4, [sp, #24]
 80857a0:	9302      	str	r3, [sp, #8]
 80857a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80857a4:	9405      	str	r4, [sp, #20]
 80857a6:	9404      	str	r4, [sp, #16]
 80857a8:	9403      	str	r4, [sp, #12]
 80857aa:	9301      	str	r3, [sp, #4]
 80857ac:	9400      	str	r4, [sp, #0]
 80857ae:	4623      	mov	r3, r4
 80857b0:	4622      	mov	r2, r4
 80857b2:	4621      	mov	r1, r4
 80857b4:	4638      	mov	r0, r7
 80857b6:	f7fc fff7 	bl	80827a8 <mbedtls_rsa_import_raw>
 80857ba:	4604      	mov	r4, r0
 80857bc:	2800      	cmp	r0, #0
 80857be:	d132      	bne.n	8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80857c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80857c2:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 80857c4:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80857c6:	4413      	add	r3, r2
 80857c8:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 80857ca:	f7fd f82b 	bl	8082824 <mbedtls_rsa_complete>
 80857ce:	4604      	mov	r4, r0
 80857d0:	b9c8      	cbnz	r0, 8085806 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80857d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80857d4:	4631      	mov	r1, r6
 80857d6:	a80a      	add	r0, sp, #40	; 0x28
 80857d8:	f7fc fd49 	bl	808226e <mbedtls_asn1_get_mpi>
 80857dc:	4604      	mov	r4, r0
 80857de:	bb10      	cbnz	r0, 8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80857e0:	aa0b      	add	r2, sp, #44	; 0x2c
 80857e2:	4631      	mov	r1, r6
 80857e4:	a80a      	add	r0, sp, #40	; 0x28
 80857e6:	f7fc fd42 	bl	808226e <mbedtls_asn1_get_mpi>
 80857ea:	4604      	mov	r4, r0
 80857ec:	b9d8      	cbnz	r0, 8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80857ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80857f0:	4631      	mov	r1, r6
 80857f2:	a80a      	add	r0, sp, #40	; 0x28
 80857f4:	f7fc fd3b 	bl	808226e <mbedtls_asn1_get_mpi>
 80857f8:	4604      	mov	r4, r0
 80857fa:	b9a0      	cbnz	r0, 8085826 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
 80857fc:	4b0e      	ldr	r3, [pc, #56]	; (8085838 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
 80857fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8085800:	4296      	cmp	r6, r2
 8085802:	bf18      	it	ne
 8085804:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
 8085806:	a80b      	add	r0, sp, #44	; 0x2c
 8085808:	f004 fb43 	bl	8089e92 <mbedtls_mpi_free>

    if( ret != 0 )
 808580c:	b17c      	cbz	r4, 808582e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
 808580e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8085812:	4023      	ands	r3, r4
 8085814:	b913      	cbnz	r3, 808581c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 8085816:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
 808581a:	e000      	b.n	808581e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 808581c:	4d07      	ldr	r5, [pc, #28]	; (808583c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
 808581e:	4638      	mov	r0, r7
 8085820:	f7fe f89a 	bl	8083958 <mbedtls_rsa_free>
 8085824:	e003      	b.n	808582e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
 8085826:	a80b      	add	r0, sp, #44	; 0x2c
 8085828:	f004 fb33 	bl	8089e92 <mbedtls_mpi_free>
 808582c:	e7ef      	b.n	808580e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 808582e:	4628      	mov	r0, r5
 8085830:	b00f      	add	sp, #60	; 0x3c
 8085832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085834:	ffffc280 	.word	0xffffc280
 8085838:	ffffc29a 	.word	0xffffc29a
 808583c:	ffffc300 	.word	0xffffc300

08085840 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 8085840:	b530      	push	{r4, r5, lr}
 8085842:	4615      	mov	r5, r2
 8085844:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8085846:	2200      	movs	r2, #0
 8085848:	601a      	str	r2, [r3, #0]
 808584a:	605a      	str	r2, [r3, #4]
 808584c:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 808584e:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 8085850:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8085852:	f7fc fd94 	bl	808237e <mbedtls_asn1_get_alg>
 8085856:	b110      	cbz	r0, 808585e <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 8085858:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
 808585c:	e014      	b.n	8085888 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 808585e:	4629      	mov	r1, r5
 8085860:	a801      	add	r0, sp, #4
 8085862:	f7fe f947 	bl	8083af4 <mbedtls_oid_get_pk_alg>
 8085866:	b960      	cbnz	r0, 8085882 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8085868:	782b      	ldrb	r3, [r5, #0]
 808586a:	2b01      	cmp	r3, #1
 808586c:	d10c      	bne.n	8085888 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 808586e:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8085870:	2b05      	cmp	r3, #5
 8085872:	d000      	beq.n	8085876 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8085874:	b93b      	cbnz	r3, 8085886 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
 8085876:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8085878:	4804      	ldr	r0, [pc, #16]	; (808588c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
 808587a:	2b00      	cmp	r3, #0
 808587c:	bf08      	it	eq
 808587e:	2000      	moveq	r0, #0
 8085880:	e002      	b.n	8085888 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8085882:	4803      	ldr	r0, [pc, #12]	; (8085890 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
 8085884:	e000      	b.n	8085888 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8085886:	4801      	ldr	r0, [pc, #4]	; (808588c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
 8085888:	b005      	add	sp, #20
 808588a:	bd30      	pop	{r4, r5, pc}
 808588c:	ffffc580 	.word	0xffffc580
 8085890:	ffffc380 	.word	0xffffc380

08085894 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8085894:	b530      	push	{r4, r5, lr}
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8085896:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8085898:	b089      	sub	sp, #36	; 0x24
 808589a:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 808589c:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 808589e:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80858a2:	4411      	add	r1, r2
 80858a4:	2330      	movs	r3, #48	; 0x30
 80858a6:	aa03      	add	r2, sp, #12
 80858a8:	a804      	add	r0, sp, #16
 80858aa:	f7fc fc8f 	bl	80821cc <mbedtls_asn1_get_tag>
 80858ae:	b9c8      	cbnz	r0, 80858e4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80858b0:	9b03      	ldr	r3, [sp, #12]
 80858b2:	9c04      	ldr	r4, [sp, #16]

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80858b4:	aa02      	add	r2, sp, #8
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80858b6:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80858b8:	4621      	mov	r1, r4
 80858ba:	a804      	add	r0, sp, #16
 80858bc:	f7fc fcb3 	bl	8082226 <mbedtls_asn1_get_int>
 80858c0:	b980      	cbnz	r0, 80858e4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
 80858c2:	9b02      	ldr	r3, [sp, #8]
 80858c4:	bb7b      	cbnz	r3, 8085926 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 80858c6:	ab05      	add	r3, sp, #20
 80858c8:	f10d 0207 	add.w	r2, sp, #7
 80858cc:	4621      	mov	r1, r4
 80858ce:	a804      	add	r0, sp, #16
 80858d0:	f7ff ffb6 	bl	8085840 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 80858d4:	b930      	cbnz	r0, 80858e4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80858d6:	2304      	movs	r3, #4
 80858d8:	aa03      	add	r2, sp, #12
 80858da:	4621      	mov	r1, r4
 80858dc:	a804      	add	r0, sp, #16
 80858de:	f7fc fc75 	bl	80821cc <mbedtls_asn1_get_tag>
 80858e2:	b110      	cbz	r0, 80858ea <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x56>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80858e4:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 80858e8:	e022      	b.n	8085930 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( len < 1 )
 80858ea:	9b03      	ldr	r3, [sp, #12]
 80858ec:	b1eb      	cbz	r3, 808592a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x96>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 80858ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80858f2:	f005 fd39 	bl	808b368 <mbedtls_pk_info_from_type>
 80858f6:	4601      	mov	r1, r0
 80858f8:	b908      	cbnz	r0, 80858fe <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80858fa:	480e      	ldr	r0, [pc, #56]	; (8085934 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa0>)
 80858fc:	e018      	b.n	8085930 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 80858fe:	4628      	mov	r0, r5
 8085900:	f005 fd3a 	bl	808b378 <mbedtls_pk_setup>
 8085904:	b9a0      	cbnz	r0, 8085930 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 8085906:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808590a:	2b01      	cmp	r3, #1
 808590c:	d1f5      	bne.n	80858fa <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x66>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 808590e:	9a03      	ldr	r2, [sp, #12]
 8085910:	9904      	ldr	r1, [sp, #16]
 8085912:	6868      	ldr	r0, [r5, #4]
 8085914:	f7ff fe9a 	bl	808564c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 8085918:	4604      	mov	r4, r0
 808591a:	b140      	cbz	r0, 808592e <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9a>
        {
            mbedtls_pk_free( pk );
 808591c:	4628      	mov	r0, r5
 808591e:	f005 fd12 	bl	808b346 <mbedtls_pk_free>
            return( ret );
 8085922:	4620      	mov	r0, r4
 8085924:	e004      	b.n	8085930 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 8085926:	4804      	ldr	r0, [pc, #16]	; (8085938 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa4>)
 8085928:	e002      	b.n	8085930 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 808592a:	4804      	ldr	r0, [pc, #16]	; (808593c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa8>)
 808592c:	e000      	b.n	8085930 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
 808592e:	2000      	movs	r0, #0
}
 8085930:	b009      	add	sp, #36	; 0x24
 8085932:	bd30      	pop	{r4, r5, pc}
 8085934:	ffffc380 	.word	0xffffc380
 8085938:	ffffc280 	.word	0xffffc280
 808593c:	ffffc2a0 	.word	0xffffc2a0

08085940 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 8085940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085942:	b091      	sub	sp, #68	; 0x44
 8085944:	9e16      	ldr	r6, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
 8085946:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 8085948:	4605      	mov	r5, r0
 808594a:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
 808594c:	4411      	add	r1, r2

    if( pwdlen == 0 )
 808594e:	2e00      	cmp	r6, #0
 8085950:	d066      	beq.n	8085a20 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8085952:	2330      	movs	r3, #48	; 0x30
 8085954:	aa08      	add	r2, sp, #32
 8085956:	a809      	add	r0, sp, #36	; 0x24
 8085958:	f7fc fc38 	bl	80821cc <mbedtls_asn1_get_tag>
 808595c:	b980      	cbnz	r0, 8085980 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 808595e:	9b08      	ldr	r3, [sp, #32]
 8085960:	9c09      	ldr	r4, [sp, #36]	; 0x24

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 8085962:	aa0a      	add	r2, sp, #40	; 0x28
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8085964:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 8085966:	4621      	mov	r1, r4
 8085968:	ab0d      	add	r3, sp, #52	; 0x34
 808596a:	a809      	add	r0, sp, #36	; 0x24
 808596c:	f7fc fd07 	bl	808237e <mbedtls_asn1_get_alg>
 8085970:	b930      	cbnz	r0, 8085980 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8085972:	2304      	movs	r3, #4
 8085974:	aa08      	add	r2, sp, #32
 8085976:	4621      	mov	r1, r4
 8085978:	a809      	add	r0, sp, #36	; 0x24
 808597a:	f7fc fc27 	bl	80821cc <mbedtls_asn1_get_tag>
 808597e:	b110      	cbz	r0, 8085986 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8085980:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8085984:	e055      	b.n	8085a32 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 8085986:	f10d 011f 	add.w	r1, sp, #31
 808598a:	f10d 021e 	add.w	r2, sp, #30
 808598e:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
 8085990:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 8085992:	f7fe f911 	bl	8083bb8 <mbedtls_oid_get_pkcs12_pbe_alg>
 8085996:	4601      	mov	r1, r0
 8085998:	b9a0      	cbnz	r0, 80859c4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
 808599a:	9808      	ldr	r0, [sp, #32]
 808599c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80859a0:	9003      	str	r0, [sp, #12]
 80859a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80859a4:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80859a8:	9002      	str	r0, [sp, #8]
 80859aa:	9404      	str	r4, [sp, #16]
 80859ac:	9601      	str	r6, [sp, #4]
 80859ae:	9700      	str	r7, [sp, #0]
 80859b0:	a80d      	add	r0, sp, #52	; 0x34
 80859b2:	f006 fd6f 	bl	808c494 <mbedtls_pkcs12_pbe>
 80859b6:	2800      	cmp	r0, #0
 80859b8:	d036      	beq.n	8085a28 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
 80859ba:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
 80859be:	d138      	bne.n	8085a32 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 80859c0:	481d      	ldr	r0, [pc, #116]	; (8085a38 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
 80859c2:	e036      	b.n	8085a32 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
 80859c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80859c6:	2a0a      	cmp	r2, #10
 80859c8:	d114      	bne.n	80859f4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
 80859ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80859cc:	481b      	ldr	r0, [pc, #108]	; (8085a3c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
 80859ce:	f00a fe01 	bl	80905d4 <memcmp>
 80859d2:	4601      	mov	r1, r0
 80859d4:	bb30      	cbnz	r0, 8085a24 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
 80859d6:	9b08      	ldr	r3, [sp, #32]
 80859d8:	9402      	str	r4, [sp, #8]
 80859da:	9301      	str	r3, [sp, #4]
 80859dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80859de:	463a      	mov	r2, r7
 80859e0:	9300      	str	r3, [sp, #0]
 80859e2:	a80d      	add	r0, sp, #52	; 0x34
 80859e4:	4633      	mov	r3, r6
 80859e6:	f006 fc77 	bl	808c2d8 <mbedtls_pkcs12_pbe_sha1_rc4_128>
 80859ea:	bb10      	cbnz	r0, 8085a32 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80859ec:	7823      	ldrb	r3, [r4, #0]
 80859ee:	2b30      	cmp	r3, #48	; 0x30
 80859f0:	d01a      	beq.n	8085a28 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
 80859f2:	e7e5      	b.n	80859c0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
 80859f4:	2a09      	cmp	r2, #9
 80859f6:	d115      	bne.n	8085a24 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
 80859f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80859fa:	4811      	ldr	r0, [pc, #68]	; (8085a40 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
 80859fc:	f00a fdea 	bl	80905d4 <memcmp>
 8085a00:	4601      	mov	r1, r0
 8085a02:	b978      	cbnz	r0, 8085a24 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
 8085a04:	9b08      	ldr	r3, [sp, #32]
 8085a06:	9402      	str	r4, [sp, #8]
 8085a08:	9301      	str	r3, [sp, #4]
 8085a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085a0c:	463a      	mov	r2, r7
 8085a0e:	9300      	str	r3, [sp, #0]
 8085a10:	a80d      	add	r0, sp, #52	; 0x34
 8085a12:	4633      	mov	r3, r6
 8085a14:	f7fb ff32 	bl	808187c <mbedtls_pkcs5_pbes2>
 8085a18:	b130      	cbz	r0, 8085a28 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
 8085a1a:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
 8085a1e:	e7ce      	b.n	80859be <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8085a20:	4808      	ldr	r0, [pc, #32]	; (8085a44 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
 8085a22:	e006      	b.n	8085a32 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 8085a24:	4808      	ldr	r0, [pc, #32]	; (8085a48 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
 8085a26:	e004      	b.n	8085a32 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
 8085a28:	9a08      	ldr	r2, [sp, #32]
 8085a2a:	4621      	mov	r1, r4
 8085a2c:	4628      	mov	r0, r5
 8085a2e:	f7ff ff31 	bl	8085894 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
 8085a32:	b011      	add	sp, #68	; 0x44
 8085a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085a36:	bf00      	nop
 8085a38:	ffffc480 	.word	0xffffc480
 8085a3c:	08091cf5 	.word	0x08091cf5
 8085a40:	08091d00 	.word	0x08091d00
 8085a44:	ffffc400 	.word	0xffffc400
 8085a48:	ffffc680 	.word	0xffffc680

08085a4c <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8085a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8085a4e:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8085a50:	b08f      	sub	sp, #60	; 0x3c
 8085a52:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8085a54:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8085a58:	aa09      	add	r2, sp, #36	; 0x24
 8085a5a:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8085a5c:	4605      	mov	r5, r0
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8085a5e:	f7fc fbb5 	bl	80821cc <mbedtls_asn1_get_tag>
 8085a62:	b110      	cbz	r0, 8085a6a <mbedtls_pk_parse_subpubkey+0x1e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8085a64:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8085a68:	e090      	b.n	8085b8c <mbedtls_pk_parse_subpubkey+0x140>
    }

    end = *p + len;
 8085a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085a6c:	682e      	ldr	r6, [r5, #0]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8085a6e:	f10d 0223 	add.w	r2, sp, #35	; 0x23
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = *p + len;
 8085a72:	441e      	add	r6, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8085a74:	4631      	mov	r1, r6
 8085a76:	ab0b      	add	r3, sp, #44	; 0x2c
 8085a78:	4628      	mov	r0, r5
 8085a7a:	f7ff fee1 	bl	8085840 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 8085a7e:	2800      	cmp	r0, #0
 8085a80:	f040 8084 	bne.w	8085b8c <mbedtls_pk_parse_subpubkey+0x140>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8085a84:	aa09      	add	r2, sp, #36	; 0x24
 8085a86:	4631      	mov	r1, r6
 8085a88:	4628      	mov	r0, r5
 8085a8a:	f7fc fc28 	bl	80822de <mbedtls_asn1_get_bitstring_null>
 8085a8e:	b110      	cbz	r0, 8085a96 <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8085a90:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 8085a94:	e07a      	b.n	8085b8c <mbedtls_pk_parse_subpubkey+0x140>

    if( *p + len != end )
 8085a96:	682a      	ldr	r2, [r5, #0]
 8085a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085a9a:	4413      	add	r3, r2
 8085a9c:	429e      	cmp	r6, r3
 8085a9e:	d169      	bne.n	8085b74 <mbedtls_pk_parse_subpubkey+0x128>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8085aa0:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8085aa4:	f005 fc60 	bl	808b368 <mbedtls_pk_info_from_type>
 8085aa8:	4601      	mov	r1, r0
 8085aaa:	2800      	cmp	r0, #0
 8085aac:	d064      	beq.n	8085b78 <mbedtls_pk_parse_subpubkey+0x12c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8085aae:	4638      	mov	r0, r7
 8085ab0:	f005 fc62 	bl	808b378 <mbedtls_pk_setup>
 8085ab4:	4604      	mov	r4, r0
 8085ab6:	2800      	cmp	r0, #0
 8085ab8:	d160      	bne.n	8085b7c <mbedtls_pk_parse_subpubkey+0x130>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 8085aba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8085abe:	2b01      	cmp	r3, #1
 8085ac0:	d162      	bne.n	8085b88 <mbedtls_pk_parse_subpubkey+0x13c>
                             mbedtls_rsa_context *rsa )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8085ac2:	2330      	movs	r3, #48	; 0x30
 8085ac4:	aa0a      	add	r2, sp, #40	; 0x28
 8085ac6:	4631      	mov	r1, r6
 8085ac8:	4628      	mov	r0, r5
 8085aca:	687c      	ldr	r4, [r7, #4]
 8085acc:	f7fc fb7e 	bl	80821cc <mbedtls_asn1_get_tag>
 8085ad0:	bb28      	cbnz	r0, 8085b1e <mbedtls_pk_parse_subpubkey+0xd2>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
 8085ad2:	682a      	ldr	r2, [r5, #0]
 8085ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085ad6:	4413      	add	r3, r2
 8085ad8:	429e      	cmp	r6, r3
 8085ada:	d146      	bne.n	8085b6a <mbedtls_pk_parse_subpubkey+0x11e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8085adc:	2302      	movs	r3, #2
 8085ade:	aa0a      	add	r2, sp, #40	; 0x28
 8085ae0:	4631      	mov	r1, r6
 8085ae2:	4628      	mov	r0, r5
 8085ae4:	f7fc fb72 	bl	80821cc <mbedtls_asn1_get_tag>
 8085ae8:	b9c8      	cbnz	r0, 8085b1e <mbedtls_pk_parse_subpubkey+0xd2>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 8085aea:	2300      	movs	r3, #0
 8085aec:	9306      	str	r3, [sp, #24]
 8085aee:	9305      	str	r3, [sp, #20]
 8085af0:	9304      	str	r3, [sp, #16]
 8085af2:	9303      	str	r3, [sp, #12]
 8085af4:	9302      	str	r3, [sp, #8]
 8085af6:	9301      	str	r3, [sp, #4]
 8085af8:	9300      	str	r3, [sp, #0]
 8085afa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8085afc:	6829      	ldr	r1, [r5, #0]
 8085afe:	4620      	mov	r0, r4
 8085b00:	f7fc fe52 	bl	80827a8 <mbedtls_rsa_import_raw>
 8085b04:	2800      	cmp	r0, #0
 8085b06:	d13d      	bne.n	8085b84 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8085b08:	682a      	ldr	r2, [r5, #0]
 8085b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8085b0c:	4631      	mov	r1, r6

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8085b0e:	4413      	add	r3, r2
 8085b10:	602b      	str	r3, [r5, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8085b12:	aa0a      	add	r2, sp, #40	; 0x28
 8085b14:	2302      	movs	r3, #2
 8085b16:	4628      	mov	r0, r5
 8085b18:	f7fc fb58 	bl	80821cc <mbedtls_asn1_get_tag>
 8085b1c:	b118      	cbz	r0, 8085b26 <mbedtls_pk_parse_subpubkey+0xda>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8085b1e:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 8085b22:	b1fc      	cbz	r4, 8085b64 <mbedtls_pk_parse_subpubkey+0x118>
 8085b24:	e022      	b.n	8085b6c <mbedtls_pk_parse_subpubkey+0x120>

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 8085b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085b28:	9004      	str	r0, [sp, #16]
 8085b2a:	9306      	str	r3, [sp, #24]
 8085b2c:	682b      	ldr	r3, [r5, #0]
 8085b2e:	9003      	str	r0, [sp, #12]
 8085b30:	9305      	str	r3, [sp, #20]
 8085b32:	9002      	str	r0, [sp, #8]
 8085b34:	9001      	str	r0, [sp, #4]
 8085b36:	9000      	str	r0, [sp, #0]
 8085b38:	4603      	mov	r3, r0
 8085b3a:	4602      	mov	r2, r0
 8085b3c:	4601      	mov	r1, r0
 8085b3e:	4620      	mov	r0, r4
 8085b40:	f7fc fe32 	bl	80827a8 <mbedtls_rsa_import_raw>
 8085b44:	b9f0      	cbnz	r0, 8085b84 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8085b46:	682a      	ldr	r2, [r5, #0]
 8085b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8085b4a:	4620      	mov	r0, r4

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8085b4c:	4413      	add	r3, r2
 8085b4e:	602b      	str	r3, [r5, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8085b50:	f7fc fe68 	bl	8082824 <mbedtls_rsa_complete>
 8085b54:	b9b0      	cbnz	r0, 8085b84 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 8085b56:	4620      	mov	r0, r4
 8085b58:	f7fc ff20 	bl	808299c <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8085b5c:	b990      	cbnz	r0, 8085b84 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
 8085b5e:	682b      	ldr	r3, [r5, #0]
 8085b60:	429e      	cmp	r6, r3
 8085b62:	d102      	bne.n	8085b6a <mbedtls_pk_parse_subpubkey+0x11e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 8085b64:	682b      	ldr	r3, [r5, #0]
 8085b66:	429e      	cmp	r6, r3
 8085b68:	d00a      	beq.n	8085b80 <mbedtls_pk_parse_subpubkey+0x134>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
 8085b6a:	4c09      	ldr	r4, [pc, #36]	; (8085b90 <mbedtls_pk_parse_subpubkey+0x144>)

    if( ret != 0 )
        mbedtls_pk_free( pk );
 8085b6c:	4638      	mov	r0, r7
 8085b6e:	f005 fbea 	bl	808b346 <mbedtls_pk_free>
 8085b72:	e003      	b.n	8085b7c <mbedtls_pk_parse_subpubkey+0x130>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8085b74:	4806      	ldr	r0, [pc, #24]	; (8085b90 <mbedtls_pk_parse_subpubkey+0x144>)
 8085b76:	e009      	b.n	8085b8c <mbedtls_pk_parse_subpubkey+0x140>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8085b78:	4806      	ldr	r0, [pc, #24]	; (8085b94 <mbedtls_pk_parse_subpubkey+0x148>)
 8085b7a:	e007      	b.n	8085b8c <mbedtls_pk_parse_subpubkey+0x140>
 8085b7c:	4620      	mov	r0, r4
 8085b7e:	e005      	b.n	8085b8c <mbedtls_pk_parse_subpubkey+0x140>
 8085b80:	2000      	movs	r0, #0
 8085b82:	e003      	b.n	8085b8c <mbedtls_pk_parse_subpubkey+0x140>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 8085b84:	4c04      	ldr	r4, [pc, #16]	; (8085b98 <mbedtls_pk_parse_subpubkey+0x14c>)
 8085b86:	e7f1      	b.n	8085b6c <mbedtls_pk_parse_subpubkey+0x120>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 8085b88:	4c02      	ldr	r4, [pc, #8]	; (8085b94 <mbedtls_pk_parse_subpubkey+0x148>)
 8085b8a:	e7ef      	b.n	8085b6c <mbedtls_pk_parse_subpubkey+0x120>

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 8085b8c:	b00f      	add	sp, #60	; 0x3c
 8085b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085b90:	ffffc49a 	.word	0xffffc49a
 8085b94:	ffffc380 	.word	0xffffc380
 8085b98:	ffffc500 	.word	0xffffc500

08085b9c <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8085b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8085ba0:	4616      	mov	r6, r2
 8085ba2:	b089      	sub	sp, #36	; 0x24
 8085ba4:	4605      	mov	r5, r0

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 8085ba6:	a805      	add	r0, sp, #20
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8085ba8:	460c      	mov	r4, r1
 8085baa:	461f      	mov	r7, r3
 8085bac:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 8085bb0:	f007 fede 	bl	808d970 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8085bb4:	2e00      	cmp	r6, #0
 8085bb6:	f000 80b8 	beq.w	8085d2a <mbedtls_pk_parse_key+0x18e>
 8085bba:	f106 39ff 	add.w	r9, r6, #4294967295
 8085bbe:	f814 3009 	ldrb.w	r3, [r4, r9]
 8085bc2:	b11b      	cbz	r3, 8085bcc <mbedtls_pk_parse_key+0x30>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8085bc4:	f814 3009 	ldrb.w	r3, [r4, r9]
 8085bc8:	bb6b      	cbnz	r3, 8085c26 <mbedtls_pk_parse_key+0x8a>
 8085bca:	e031      	b.n	8085c30 <mbedtls_pk_parse_key+0x94>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
 8085bcc:	ab04      	add	r3, sp, #16
 8085bce:	9302      	str	r3, [sp, #8]
 8085bd0:	e88d 0180 	stmia.w	sp, {r7, r8}
 8085bd4:	4623      	mov	r3, r4
 8085bd6:	4a57      	ldr	r2, [pc, #348]	; (8085d34 <mbedtls_pk_parse_key+0x198>)
 8085bd8:	4957      	ldr	r1, [pc, #348]	; (8085d38 <mbedtls_pk_parse_key+0x19c>)
 8085bda:	a805      	add	r0, sp, #20
 8085bdc:	f007 fece 	bl	808d97c <mbedtls_pem_read_buffer>

    if( ret == 0 )
 8085be0:	b978      	cbnz	r0, 8085c02 <mbedtls_pk_parse_key+0x66>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 8085be2:	2001      	movs	r0, #1
 8085be4:	f005 fbc0 	bl	808b368 <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 8085be8:	4601      	mov	r1, r0
 8085bea:	4628      	mov	r0, r5
 8085bec:	f005 fbc4 	bl	808b378 <mbedtls_pk_setup>
 8085bf0:	4604      	mov	r4, r0
 8085bf2:	2800      	cmp	r0, #0
 8085bf4:	d160      	bne.n	8085cb8 <mbedtls_pk_parse_key+0x11c>
 8085bf6:	9a06      	ldr	r2, [sp, #24]
 8085bf8:	9905      	ldr	r1, [sp, #20]
 8085bfa:	6868      	ldr	r0, [r5, #4]
 8085bfc:	f7ff fd26 	bl	808564c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 8085c00:	e058      	b.n	8085cb4 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 8085c02:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 8085c06:	d101      	bne.n	8085c0c <mbedtls_pk_parse_key+0x70>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 8085c08:	484c      	ldr	r0, [pc, #304]	; (8085d3c <mbedtls_pk_parse_key+0x1a0>)
 8085c0a:	e08f      	b.n	8085d2c <mbedtls_pk_parse_key+0x190>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 8085c0c:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 8085c10:	f000 8084 	beq.w	8085d1c <mbedtls_pk_parse_key+0x180>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8085c14:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8085c18:	f040 8088 	bne.w	8085d2c <mbedtls_pk_parse_key+0x190>
 8085c1c:	e7d2      	b.n	8085bc4 <mbedtls_pk_parse_key+0x28>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8085c1e:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8085c22:	f040 8083 	bne.w	8085d2c <mbedtls_pk_parse_key+0x190>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8085c26:	19a3      	adds	r3, r4, r6
 8085c28:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8085c2c:	b9ab      	cbnz	r3, 8085c5a <mbedtls_pk_parse_key+0xbe>
 8085c2e:	e02d      	b.n	8085c8c <mbedtls_pk_parse_key+0xf0>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
 8085c30:	aa04      	add	r2, sp, #16
 8085c32:	9202      	str	r2, [sp, #8]
 8085c34:	9301      	str	r3, [sp, #4]
 8085c36:	9300      	str	r3, [sp, #0]
 8085c38:	4a41      	ldr	r2, [pc, #260]	; (8085d40 <mbedtls_pk_parse_key+0x1a4>)
 8085c3a:	4623      	mov	r3, r4
 8085c3c:	4941      	ldr	r1, [pc, #260]	; (8085d44 <mbedtls_pk_parse_key+0x1a8>)
 8085c3e:	a805      	add	r0, sp, #20
 8085c40:	f007 fe9c 	bl	808d97c <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8085c44:	2800      	cmp	r0, #0
 8085c46:	d1ea      	bne.n	8085c1e <mbedtls_pk_parse_key+0x82>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 8085c48:	9a06      	ldr	r2, [sp, #24]
 8085c4a:	9905      	ldr	r1, [sp, #20]
 8085c4c:	4628      	mov	r0, r5
 8085c4e:	f7ff fe21 	bl	8085894 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 8085c52:	e02f      	b.n	8085cb4 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8085c54:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8085c58:	d168      	bne.n	8085d2c <mbedtls_pk_parse_key+0x190>
        unsigned char *key_copy;

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
 8085c5a:	4631      	mov	r1, r6
 8085c5c:	2001      	movs	r0, #1
 8085c5e:	f00a fca3 	bl	80905a8 <calloc>
 8085c62:	4681      	mov	r9, r0
 8085c64:	2800      	cmp	r0, #0
 8085c66:	d05b      	beq.n	8085d20 <mbedtls_pk_parse_key+0x184>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
 8085c68:	4632      	mov	r2, r6
 8085c6a:	4621      	mov	r1, r4
 8085c6c:	f00a fcc1 	bl	80905f2 <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );
 8085c70:	463b      	mov	r3, r7
 8085c72:	4632      	mov	r2, r6
 8085c74:	4649      	mov	r1, r9
 8085c76:	f8cd 8000 	str.w	r8, [sp]
 8085c7a:	4628      	mov	r0, r5
 8085c7c:	f7ff fe60 	bl	8085940 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 8085c80:	eb09 0106 	add.w	r1, r9, r6
 8085c84:	4607      	mov	r7, r0
 8085c86:	464b      	mov	r3, r9

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8085c88:	2200      	movs	r2, #0
 8085c8a:	e01d      	b.n	8085cc8 <mbedtls_pk_parse_key+0x12c>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
 8085c8c:	aa04      	add	r2, sp, #16
 8085c8e:	9202      	str	r2, [sp, #8]
 8085c90:	9301      	str	r3, [sp, #4]
 8085c92:	9300      	str	r3, [sp, #0]
 8085c94:	4a2c      	ldr	r2, [pc, #176]	; (8085d48 <mbedtls_pk_parse_key+0x1ac>)
 8085c96:	4623      	mov	r3, r4
 8085c98:	492c      	ldr	r1, [pc, #176]	; (8085d4c <mbedtls_pk_parse_key+0x1b0>)
 8085c9a:	a805      	add	r0, sp, #20
 8085c9c:	f007 fe6e 	bl	808d97c <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8085ca0:	2800      	cmp	r0, #0
 8085ca2:	d1d7      	bne.n	8085c54 <mbedtls_pk_parse_key+0xb8>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 8085ca4:	f8cd 8000 	str.w	r8, [sp]
 8085ca8:	463b      	mov	r3, r7
 8085caa:	9a06      	ldr	r2, [sp, #24]
 8085cac:	9905      	ldr	r1, [sp, #20]
 8085cae:	4628      	mov	r0, r5
 8085cb0:	f7ff fe46 	bl	8085940 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 8085cb4:	4604      	mov	r4, r0
 8085cb6:	b110      	cbz	r0, 8085cbe <mbedtls_pk_parse_key+0x122>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
 8085cb8:	4628      	mov	r0, r5
 8085cba:	f005 fb44 	bl	808b346 <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 8085cbe:	a805      	add	r0, sp, #20
 8085cc0:	f007 feea 	bl	808da98 <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 8085cc4:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
 8085cc6:	e031      	b.n	8085d2c <mbedtls_pk_parse_key+0x190>

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8085cc8:	428b      	cmp	r3, r1
 8085cca:	d002      	beq.n	8085cd2 <mbedtls_pk_parse_key+0x136>
 8085ccc:	701a      	strb	r2, [r3, #0]
 8085cce:	3301      	adds	r3, #1
 8085cd0:	e7fa      	b.n	8085cc8 <mbedtls_pk_parse_key+0x12c>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );

        mbedtls_zeroize( key_copy, keylen );
        mbedtls_free( key_copy );
 8085cd2:	4648      	mov	r0, r9
 8085cd4:	f009 fb46 	bl	808f364 <free>
    }

    if( ret == 0 )
 8085cd8:	b90f      	cbnz	r7, 8085cde <mbedtls_pk_parse_key+0x142>
        return( 0 );
 8085cda:	2000      	movs	r0, #0
 8085cdc:	e026      	b.n	8085d2c <mbedtls_pk_parse_key+0x190>

    mbedtls_pk_free( pk );
 8085cde:	4628      	mov	r0, r5
 8085ce0:	f005 fb31 	bl	808b346 <mbedtls_pk_free>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
 8085ce4:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
 8085ce8:	d08e      	beq.n	8085c08 <mbedtls_pk_parse_key+0x6c>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 8085cea:	4632      	mov	r2, r6
 8085cec:	4621      	mov	r1, r4
 8085cee:	4628      	mov	r0, r5
 8085cf0:	f7ff fdd0 	bl	8085894 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 8085cf4:	2800      	cmp	r0, #0
 8085cf6:	d0f0      	beq.n	8085cda <mbedtls_pk_parse_key+0x13e>
        return( 0 );

    mbedtls_pk_free( pk );
 8085cf8:	4628      	mov	r0, r5
 8085cfa:	f005 fb24 	bl	808b346 <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 8085cfe:	2001      	movs	r0, #1
 8085d00:	f005 fb32 	bl	808b368 <mbedtls_pk_info_from_type>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 8085d04:	4601      	mov	r1, r0
 8085d06:	4628      	mov	r0, r5
 8085d08:	f005 fb36 	bl	808b378 <mbedtls_pk_setup>
 8085d0c:	b950      	cbnz	r0, 8085d24 <mbedtls_pk_parse_key+0x188>
 8085d0e:	4632      	mov	r2, r6
 8085d10:	4621      	mov	r1, r4
 8085d12:	6868      	ldr	r0, [r5, #4]
 8085d14:	f7ff fc9a 	bl	808564c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 8085d18:	b920      	cbnz	r0, 8085d24 <mbedtls_pk_parse_key+0x188>
 8085d1a:	e7de      	b.n	8085cda <mbedtls_pk_parse_key+0x13e>
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8085d1c:	480c      	ldr	r0, [pc, #48]	; (8085d50 <mbedtls_pk_parse_key+0x1b4>)
 8085d1e:	e005      	b.n	8085d2c <mbedtls_pk_parse_key+0x190>

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 8085d20:	480c      	ldr	r0, [pc, #48]	; (8085d54 <mbedtls_pk_parse_key+0x1b8>)
 8085d22:	e003      	b.n	8085d2c <mbedtls_pk_parse_key+0x190>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
                                        key, keylen ) ) != 0 )
    {
        mbedtls_pk_free( pk );
 8085d24:	4628      	mov	r0, r5
 8085d26:	f005 fb0e 	bl	808b346 <mbedtls_pk_free>
        return( 0 );
    }

#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8085d2a:	480b      	ldr	r0, [pc, #44]	; (8085d58 <mbedtls_pk_parse_key+0x1bc>)
}
 8085d2c:	b009      	add	sp, #36	; 0x24
 8085d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8085d32:	bf00      	nop
 8085d34:	08091d0a 	.word	0x08091d0a
 8085d38:	08091d28 	.word	0x08091d28
 8085d3c:	ffffc480 	.word	0xffffc480
 8085d40:	08091d48 	.word	0x08091d48
 8085d44:	08091d62 	.word	0x08091d62
 8085d48:	08091d7e 	.word	0x08091d7e
 8085d4c:	08091da2 	.word	0x08091da2
 8085d50:	ffffc400 	.word	0xffffc400
 8085d54:	ffffc080 	.word	0xffffc080
 8085d58:	ffffc300 	.word	0xffffc300

08085d5c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8085d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085d60:	7bcb      	ldrb	r3, [r1, #15]
 8085d62:	b093      	sub	sp, #76	; 0x4c
 8085d64:	f003 030f 	and.w	r3, r3, #15
 8085d68:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
 8085d6c:	e9d3 6730 	ldrd	r6, r7, [r3, #192]	; 0xc0
    zl = ctx->HL[lo];
 8085d70:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 8085d74:	f8df c150 	ldr.w	ip, [pc, #336]	; 8085ec8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
 8085d78:	f101 0310 	add.w	r3, r1, #16
 8085d7c:	9310      	str	r3, [sp, #64]	; 0x40
    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 8085d7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8085d80:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 8085d84:	9310      	str	r3, [sp, #64]	; 0x40
 8085d86:	f00e 030f 	and.w	r3, lr, #15
 8085d8a:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
 8085d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
 8085d8e:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
 8085d92:	ebc1 0803 	rsb	r8, r1, r3
 8085d96:	f1b8 0f0f 	cmp.w	r8, #15
 8085d9a:	d03a      	beq.n	8085e12 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
 8085d9c:	0923      	lsrs	r3, r4, #4
 8085d9e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8085da2:	9300      	str	r3, [sp, #0]
 8085da4:	092b      	lsrs	r3, r5, #4
 8085da6:	9301      	str	r3, [sp, #4]
 8085da8:	0733      	lsls	r3, r6, #28
 8085daa:	9309      	str	r3, [sp, #36]	; 0x24
 8085dac:	2300      	movs	r3, #0
 8085dae:	9308      	str	r3, [sp, #32]
 8085db0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8085db2:	e9dd ab00 	ldrd	sl, fp, [sp]
 8085db6:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 8085dba:	0933      	lsrs	r3, r6, #4
 8085dbc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8085dc0:	9304      	str	r3, [sp, #16]
 8085dc2:	093b      	lsrs	r3, r7, #4
 8085dc4:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8085dc8:	9305      	str	r3, [sp, #20]
 8085dca:	ea48 080a 	orr.w	r8, r8, sl
 8085dce:	ea49 090b 	orr.w	r9, r9, fp
 8085dd2:	e9d5 6730 	ldrd	r6, r7, [r5, #192]	; 0xc0
 8085dd6:	46c2      	mov	sl, r8
 8085dd8:	46cb      	mov	fp, r9
 8085dda:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8085dde:	ea88 0806 	eor.w	r8, r8, r6
 8085de2:	4646      	mov	r6, r8
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 8085de4:	f004 040f 	and.w	r4, r4, #15
            zh ^= ctx->HH[lo];
 8085de8:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 8085dec:	ea89 0907 	eor.w	r9, r9, r7
 8085df0:	0423      	lsls	r3, r4, #16
 8085df2:	930d      	str	r3, [sp, #52]	; 0x34
 8085df4:	2300      	movs	r3, #0
 8085df6:	464f      	mov	r7, r9
 8085df8:	930c      	str	r3, [sp, #48]	; 0x30
 8085dfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8085dfe:	4073      	eors	r3, r6
 8085e00:	461e      	mov	r6, r3
 8085e02:	407c      	eors	r4, r7
 8085e04:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
 8085e06:	e9d5 4510 	ldrd	r4, r5, [r5, #64]	; 0x40
 8085e0a:	ea84 040a 	eor.w	r4, r4, sl
 8085e0e:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 8085e12:	0923      	lsrs	r3, r4, #4
 8085e14:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8085e18:	9302      	str	r3, [sp, #8]
 8085e1a:	092b      	lsrs	r3, r5, #4
 8085e1c:	9303      	str	r3, [sp, #12]
 8085e1e:	0733      	lsls	r3, r6, #28
 8085e20:	930b      	str	r3, [sp, #44]	; 0x2c
 8085e22:	2300      	movs	r3, #0
 8085e24:	930a      	str	r3, [sp, #40]	; 0x28
 8085e26:	0933      	lsrs	r3, r6, #4
 8085e28:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8085e2c:	9306      	str	r3, [sp, #24]
 8085e2e:	093b      	lsrs	r3, r7, #4
 8085e30:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8085e34:	9307      	str	r3, [sp, #28]
 8085e36:	e9de 6730 	ldrd	r6, r7, [lr, #192]	; 0xc0
 8085e3a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8085e3e:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8085e42:	ea48 080a 	orr.w	r8, r8, sl
 8085e46:	ea49 090b 	orr.w	r9, r9, fp
 8085e4a:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8085e4e:	ea8a 0a06 	eor.w	sl, sl, r6
 8085e52:	4656      	mov	r6, sl
 8085e54:	ea8b 0b07 	eor.w	fp, fp, r7
 8085e58:	465f      	mov	r7, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 8085e5a:	f004 040f 	and.w	r4, r4, #15
        zh ^= ctx->HH[hi];
 8085e5e:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 8085e62:	0423      	lsls	r3, r4, #16
 8085e64:	930f      	str	r3, [sp, #60]	; 0x3c
 8085e66:	2300      	movs	r3, #0
 8085e68:	930e      	str	r3, [sp, #56]	; 0x38
 8085e6a:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8085e6e:	4073      	eors	r3, r6
 8085e70:	461e      	mov	r6, r3
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8085e72:	9b10      	ldr	r3, [sp, #64]	; 0x40

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8085e74:	407c      	eors	r4, r7
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8085e76:	4299      	cmp	r1, r3

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8085e78:	4627      	mov	r7, r4
        zl ^= ctx->HL[hi];
 8085e7a:	e9de 4510 	ldrd	r4, r5, [lr, #64]	; 0x40
 8085e7e:	ea84 0408 	eor.w	r4, r4, r8
 8085e82:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8085e86:	f47f af7a 	bne.w	8085d7e <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8085e8a:	0e3b      	lsrs	r3, r7, #24
 8085e8c:	7013      	strb	r3, [r2, #0]
 8085e8e:	0c3b      	lsrs	r3, r7, #16
 8085e90:	7053      	strb	r3, [r2, #1]
 8085e92:	0a3b      	lsrs	r3, r7, #8
 8085e94:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 8085e96:	0e33      	lsrs	r3, r6, #24
 8085e98:	7113      	strb	r3, [r2, #4]
 8085e9a:	0c33      	lsrs	r3, r6, #16
 8085e9c:	7153      	strb	r3, [r2, #5]
 8085e9e:	0a33      	lsrs	r3, r6, #8
 8085ea0:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8085ea2:	0e2b      	lsrs	r3, r5, #24
 8085ea4:	7213      	strb	r3, [r2, #8]
 8085ea6:	0c2b      	lsrs	r3, r5, #16
 8085ea8:	7253      	strb	r3, [r2, #9]
 8085eaa:	0a2b      	lsrs	r3, r5, #8
 8085eac:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 8085eae:	0e23      	lsrs	r3, r4, #24
 8085eb0:	7313      	strb	r3, [r2, #12]
 8085eb2:	0c23      	lsrs	r3, r4, #16
 8085eb4:	7353      	strb	r3, [r2, #13]
 8085eb6:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8085eb8:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 8085eba:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8085ebc:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 8085ebe:	7393      	strb	r3, [r2, #14]
 8085ec0:	73d4      	strb	r4, [r2, #15]
}
 8085ec2:	b013      	add	sp, #76	; 0x4c
 8085ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085ec8:	08091e00 	.word	0x08091e00

08085ecc <mbedtls_gcm_init>:
/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8085ecc:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8085ed0:	2100      	movs	r1, #0
 8085ed2:	f00a bbb4 	b.w	809063e <memset>

08085ed6 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8085ed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085eda:	4604      	mov	r4, r0
 8085edc:	b08d      	sub	sp, #52	; 0x34
 8085ede:	4608      	mov	r0, r1
 8085ee0:	4691      	mov	r9, r2
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8085ee2:	4619      	mov	r1, r3
 8085ee4:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8085ee6:	4698      	mov	r8, r3
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8085ee8:	f7fb fea4 	bl	8081c34 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8085eec:	2800      	cmp	r0, #0
 8085eee:	f000 809b 	beq.w	8086028 <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 8085ef2:	6945      	ldr	r5, [r0, #20]
 8085ef4:	9002      	str	r0, [sp, #8]
 8085ef6:	2d10      	cmp	r5, #16
 8085ef8:	f040 8096 	bne.w	8086028 <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 8085efc:	4620      	mov	r0, r4
 8085efe:	f7fb feb1 	bl	8081c64 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8085f02:	9902      	ldr	r1, [sp, #8]
 8085f04:	4620      	mov	r0, r4
 8085f06:	f7fc f87d 	bl	8082004 <mbedtls_cipher_setup>
 8085f0a:	2800      	cmp	r0, #0
 8085f0c:	f040 808e 	bne.w	808602c <mbedtls_gcm_setkey+0x156>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8085f10:	2301      	movs	r3, #1
 8085f12:	4642      	mov	r2, r8
 8085f14:	4649      	mov	r1, r9
 8085f16:	4620      	mov	r0, r4
 8085f18:	f7fb feb6 	bl	8081c88 <mbedtls_cipher_setkey>
 8085f1c:	2800      	cmp	r0, #0
 8085f1e:	f040 8085 	bne.w	808602c <mbedtls_gcm_setkey+0x156>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
 8085f22:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 8085f24:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
 8085f26:	462a      	mov	r2, r5
 8085f28:	a808      	add	r0, sp, #32
 8085f2a:	f00a fb88 	bl	809063e <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8085f2e:	ab07      	add	r3, sp, #28
 8085f30:	9300      	str	r3, [sp, #0]
 8085f32:	ab08      	add	r3, sp, #32
 8085f34:	462a      	mov	r2, r5
 8085f36:	4619      	mov	r1, r3
 8085f38:	4620      	mov	r0, r4
 8085f3a:	f7fb fef3 	bl	8081d24 <mbedtls_cipher_update>
 8085f3e:	2800      	cmp	r0, #0
 8085f40:	d174      	bne.n	808602c <mbedtls_gcm_setkey+0x156>
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 8085f42:	4602      	mov	r2, r0
 8085f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085f46:	9908      	ldr	r1, [sp, #32]
 8085f48:	ba1d      	rev	r5, r3
 8085f4a:	432a      	orrs	r2, r5

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 8085f4c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 8085f4e:	ba0b      	rev	r3, r1
 8085f50:	990b      	ldr	r1, [sp, #44]	; 0x2c

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 8085f52:	fa95 f985 	rev.w	r9, r5
 8085f56:	fa91 fe81 	rev.w	lr, r1
 8085f5a:	4649      	mov	r1, r9
 8085f5c:	ea40 000e 	orr.w	r0, r0, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
    ctx->HH[8] = vh;
 8085f60:	f504 7580 	add.w	r5, r4, #256	; 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8085f64:	f04f 0800 	mov.w	r8, #0
 8085f68:	f04f 0900 	mov.w	r9, #0
    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 8085f6c:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
    ctx->HH[8] = vh;
 8085f70:	e9c5 2300 	strd	r2, r3, [r5]
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8085f74:	e9c4 8930 	strd	r8, r9, [r4, #192]	; 0xc0
    ctx->HL[0] = 0;
 8085f78:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
 8085f7c:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
 8085f80:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8085f82:	f04f 4c61 	mov.w	ip, #3774873600	; 0xe1000000
 8085f86:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8085f8a:	07d7      	lsls	r7, r2, #31
 8085f8c:	0849      	lsrs	r1, r1, #1
 8085f8e:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8085f92:	085b      	lsrs	r3, r3, #1
 8085f94:	ea4f 0232 	mov.w	r2, r2, rrx
 8085f98:	fb0c fb08 	mul.w	fp, ip, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8085f9c:	2600      	movs	r6, #0
 8085f9e:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 8085fa2:	4330      	orrs	r0, r6
 8085fa4:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8085fa6:	4072      	eors	r2, r6
 8085fa8:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 8085fac:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
 8085fb0:	e9c8 0110 	strd	r0, r1, [r8, #64]	; 0x40
        ctx->HH[i] = vh;
 8085fb4:	e9c8 2330 	strd	r2, r3, [r8, #192]	; 0xc0

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 8085fb8:	ea4f 0565 	mov.w	r5, r5, asr #1
 8085fbc:	d1e3      	bne.n	8085f86 <mbedtls_gcm_setkey+0xb0>
 8085fbe:	2003      	movs	r0, #3
 8085fc0:	2102      	movs	r1, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8085fc2:	f104 0840 	add.w	r8, r4, #64	; 0x40
 8085fc6:	f104 0cc0 	add.w	ip, r4, #192	; 0xc0
 8085fca:	00cb      	lsls	r3, r1, #3
 8085fcc:	eb08 0e03 	add.w	lr, r8, r3
 8085fd0:	4463      	add	r3, ip
        vh = *HiH;
 8085fd2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8085fd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
        vl = *HiL;
 8085fda:	e9de 4500 	ldrd	r4, r5, [lr]
 8085fde:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8085fe2:	4665      	mov	r5, ip
 8085fe4:	4644      	mov	r4, r8
        for( j = 1; j < i; j++ )
 8085fe6:	2201      	movs	r2, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
 8085fe8:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 8085fec:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
 8085ff0:	ea89 0906 	eor.w	r9, r9, r6
 8085ff4:	ea8a 0a07 	eor.w	sl, sl, r7
 8085ff8:	464e      	mov	r6, r9
 8085ffa:	4657      	mov	r7, sl
            HiL[j] = vl ^ ctx->HL[j];
 8085ffc:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
        {
            HiH[j] = vh ^ ctx->HH[j];
 8086000:	e9e3 6702 	strd	r6, r7, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
 8086004:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
 8086008:	ea89 0906 	eor.w	r9, r9, r6
 808600c:	ea8a 0a07 	eor.w	sl, sl, r7
 8086010:	464e      	mov	r6, r9
 8086012:	4657      	mov	r7, sl
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 8086014:	3201      	adds	r2, #1
 8086016:	428a      	cmp	r2, r1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
 8086018:	e9ee 6702 	strd	r6, r7, [lr, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 808601c:	d1e4      	bne.n	8085fe8 <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
 808601e:	3801      	subs	r0, #1
 8086020:	ea4f 0142 	mov.w	r1, r2, lsl #1
 8086024:	d1d1      	bne.n	8085fca <mbedtls_gcm_setkey+0xf4>
 8086026:	e001      	b.n	808602c <mbedtls_gcm_setkey+0x156>
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8086028:	f06f 0013 	mvn.w	r0, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
 808602c:	b00d      	add	sp, #52	; 0x34
 808602e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08086032 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8086032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8086036:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 808603a:	b08b      	sub	sp, #44	; 0x2c
 808603c:	4604      	mov	r4, r0
 808603e:	468b      	mov	fp, r1
 8086040:	4690      	mov	r8, r2
 8086042:	9e15      	ldr	r6, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8086044:	f8cd 9014 	str.w	r9, [sp, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 8086048:	461d      	mov	r5, r3
 808604a:	2b00      	cmp	r3, #0
 808604c:	f000 808d 	beq.w	808616a <mbedtls_gcm_starts+0x138>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8086050:	f500 77b0 	add.w	r7, r0, #352	; 0x160
 8086054:	2210      	movs	r2, #16
 8086056:	4649      	mov	r1, r9
 8086058:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 808605a:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 808605e:	f00a faee 	bl	809063e <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8086062:	4649      	mov	r1, r9
 8086064:	2210      	movs	r2, #16
 8086066:	4650      	mov	r0, sl
 8086068:	f00a fae9 	bl	809063e <memset>

    ctx->mode = mode;
 808606c:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    ctx->len = 0;
    ctx->add_len = 0;
 8086070:	46a3      	mov	fp, r4

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 8086072:	2000      	movs	r0, #0
 8086074:	2100      	movs	r1, #0
 8086076:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    ctx->add_len = 0;

    if( iv_len == 12 )
 808607a:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 808607c:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 8086080:	e9eb 0152 	strd	r0, r1, [fp, #328]!	; 0x148

    if( iv_len == 12 )
 8086084:	d10d      	bne.n	80860a2 <mbedtls_gcm_starts+0x70>
    {
        memcpy( ctx->y, iv, iv_len );
 8086086:	f8d8 3000 	ldr.w	r3, [r8]
 808608a:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 808608e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8086092:	607b      	str	r3, [r7, #4]
 8086094:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8086098:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
 808609a:	2301      	movs	r3, #1
 808609c:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
 80860a0:	e03a      	b.n	8086118 <mbedtls_gcm_starts+0xe6>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 80860a2:	2210      	movs	r2, #16
 80860a4:	4649      	mov	r1, r9
 80860a6:	a806      	add	r0, sp, #24
 80860a8:	f00a fac9 	bl	809063e <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 80860ac:	00eb      	lsls	r3, r5, #3
 80860ae:	0e1a      	lsrs	r2, r3, #24
 80860b0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80860b4:	0c1a      	lsrs	r2, r3, #16
 80860b6:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 80860ba:	0a1a      	lsrs	r2, r3, #8
 80860bc:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 80860c0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 80860c4:	462b      	mov	r3, r5
 80860c6:	f204 195f 	addw	r9, r4, #351	; 0x15f
 80860ca:	4649      	mov	r1, r9
 80860cc:	2d10      	cmp	r5, #16
 80860ce:	bf28      	it	cs
 80860d0:	2310      	movcs	r3, #16
 80860d2:	4642      	mov	r2, r8
 80860d4:	4498      	add	r8, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
 80860d6:	f812 eb01 	ldrb.w	lr, [r2], #1
 80860da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80860de:	4542      	cmp	r2, r8
                ctx->y[i] ^= p[i];
 80860e0:	ea8e 0000 	eor.w	r0, lr, r0
 80860e4:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80860e6:	d1f6      	bne.n	80860d6 <mbedtls_gcm_starts+0xa4>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
 80860e8:	463a      	mov	r2, r7
 80860ea:	4639      	mov	r1, r7
 80860ec:	4620      	mov	r0, r4
 80860ee:	9303      	str	r3, [sp, #12]
 80860f0:	f7ff fe34 	bl	8085d5c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
 80860f4:	9b03      	ldr	r3, [sp, #12]
 80860f6:	1aed      	subs	r5, r5, r3
 80860f8:	d1e4      	bne.n	80860c4 <mbedtls_gcm_starts+0x92>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
 80860fa:	ab06      	add	r3, sp, #24
 80860fc:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8086100:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 8086102:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 8086104:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 8086106:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 8086108:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 808610c:	d1f5      	bne.n	80860fa <mbedtls_gcm_starts+0xc8>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
 808610e:	463a      	mov	r2, r7
 8086110:	4639      	mov	r1, r7
 8086112:	4620      	mov	r0, r4
 8086114:	f7ff fe22 	bl	8085d5c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 8086118:	ab05      	add	r3, sp, #20
 808611a:	9300      	str	r3, [sp, #0]
 808611c:	2210      	movs	r2, #16
 808611e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 8086122:	4639      	mov	r1, r7
 8086124:	4620      	mov	r0, r4
 8086126:	f7fb fdfd 	bl	8081d24 <mbedtls_cipher_update>
 808612a:	bb10      	cbnz	r0, 8086172 <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
 808612c:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
 8086130:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
 8086134:	b1e6      	cbz	r6, 8086170 <mbedtls_gcm_starts+0x13e>
 8086136:	9b14      	ldr	r3, [sp, #80]	; 0x50
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 8086138:	4635      	mov	r5, r6
 808613a:	4619      	mov	r1, r3
 808613c:	2e10      	cmp	r6, #16
 808613e:	bf28      	it	cs
 8086140:	2510      	movcs	r5, #16
 8086142:	4429      	add	r1, r5
 8086144:	f204 126f 	addw	r2, r4, #367	; 0x16f
 8086148:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
 808614a:	f813 0b01 	ldrb.w	r0, [r3], #1
 808614e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8086152:	4041      	eors	r1, r0
 8086154:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
 8086156:	9914      	ldr	r1, [sp, #80]	; 0x50
 8086158:	4299      	cmp	r1, r3
 808615a:	d1f6      	bne.n	808614a <mbedtls_gcm_starts+0x118>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 808615c:	4652      	mov	r2, sl
 808615e:	4651      	mov	r1, sl
 8086160:	4620      	mov	r0, r4
 8086162:	f7ff fdfb 	bl	8085d5c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
 8086166:	1b76      	subs	r6, r6, r5
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 8086168:	e7e4      	b.n	8086134 <mbedtls_gcm_starts+0x102>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 808616a:	f06f 0013 	mvn.w	r0, #19
 808616e:	e000      	b.n	8086172 <mbedtls_gcm_starts+0x140>

        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
 8086170:	4630      	mov	r0, r6
}
 8086172:	b00b      	add	sp, #44	; 0x2c
 8086174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08086178 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8086178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808617c:	461f      	mov	r7, r3
 808617e:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8086180:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 8086182:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8086184:	4604      	mov	r4, r0
 8086186:	460e      	mov	r6, r1
 8086188:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 808618a:	9305      	str	r3, [sp, #20]

    if( output > input && (size_t) ( output - input ) < length )
 808618c:	d902      	bls.n	8086194 <mbedtls_gcm_update+0x1c>
 808618e:	1abb      	subs	r3, r7, r2
 8086190:	428b      	cmp	r3, r1
 8086192:	d35c      	bcc.n	808624e <mbedtls_gcm_update+0xd6>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8086194:	4625      	mov	r5, r4
 8086196:	e9f5 0150 	ldrd	r0, r1, [r5, #320]!	; 0x140
 808619a:	1982      	adds	r2, r0, r6
 808619c:	f141 0300 	adc.w	r3, r1, #0
 80861a0:	428b      	cmp	r3, r1
 80861a2:	bf08      	it	eq
 80861a4:	4282      	cmpeq	r2, r0
 80861a6:	d352      	bcc.n	808624e <mbedtls_gcm_update+0xd6>
 80861a8:	210f      	movs	r1, #15
 80861aa:	f06f 001f 	mvn.w	r0, #31
 80861ae:	4299      	cmp	r1, r3
 80861b0:	bf08      	it	eq
 80861b2:	4290      	cmpeq	r0, r2
 80861b4:	d34b      	bcc.n	808624e <mbedtls_gcm_update+0xd6>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 80861b6:	e9c5 2300 	strd	r2, r3, [r5]
 80861ba:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 80861be:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80861c0:	f504 73b0 	add.w	r3, r4, #352	; 0x160
 80861c4:	f10d 0a18 	add.w	sl, sp, #24
 80861c8:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 80861ca:	2e00      	cmp	r6, #0
 80861cc:	d042      	beq.n	8086254 <mbedtls_gcm_update+0xdc>
 80861ce:	f504 75b8 	add.w	r5, r4, #368	; 0x170
    {
        use_len = ( length < 16 ) ? length : 16;
 80861d2:	462a      	mov	r2, r5
 80861d4:	46ab      	mov	fp, r5
 80861d6:	2e10      	cmp	r6, #16
 80861d8:	46b1      	mov	r9, r6
 80861da:	bf28      	it	cs
 80861dc:	f04f 0910 	movcs.w	r9, #16

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
 80861e0:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80861e4:	3301      	adds	r3, #1
 80861e6:	b2db      	uxtb	r3, r3
 80861e8:	7013      	strb	r3, [r2, #0]
 80861ea:	b913      	cbnz	r3, 80861f2 <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
 80861ec:	9b02      	ldr	r3, [sp, #8]
 80861ee:	429a      	cmp	r2, r3
 80861f0:	d1f6      	bne.n	80861e0 <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80861f2:	ab05      	add	r3, sp, #20
 80861f4:	9300      	str	r3, [sp, #0]
 80861f6:	2210      	movs	r2, #16
 80861f8:	4653      	mov	r3, sl
 80861fa:	9903      	ldr	r1, [sp, #12]
 80861fc:	4620      	mov	r0, r4
 80861fe:	f7fb fd91 	bl	8081d24 <mbedtls_cipher_update>
 8086202:	bb40      	cbnz	r0, 8086256 <mbedtls_gcm_update+0xde>
 8086204:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 8086206:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 808620a:	b91b      	cbnz	r3, 8086214 <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
 808620c:	7829      	ldrb	r1, [r5, #0]
 808620e:	7813      	ldrb	r3, [r2, #0]
 8086210:	404b      	eors	r3, r1
 8086212:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
 8086214:	f812 1b01 	ldrb.w	r1, [r2], #1
 8086218:	f81a 3000 	ldrb.w	r3, [sl, r0]
 808621c:	3501      	adds	r5, #1
 808621e:	404b      	eors	r3, r1
 8086220:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8086222:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 8086226:	3001      	adds	r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8086228:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
 808622a:	bf02      	ittt	eq
 808622c:	f815 1c01 	ldrbeq.w	r1, [r5, #-1]
 8086230:	404b      	eoreq	r3, r1
 8086232:	f805 3c01 	strbeq.w	r3, [r5, #-1]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 8086236:	4581      	cmp	r9, r0
 8086238:	d1e5      	bne.n	8086206 <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 808623a:	465a      	mov	r2, fp
 808623c:	4659      	mov	r1, fp
 808623e:	4620      	mov	r0, r4
 8086240:	f7ff fd8c 	bl	8085d5c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
 8086244:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
 8086248:	44c8      	add	r8, r9
        out_p += use_len;
 808624a:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 808624c:	e7bd      	b.n	80861ca <mbedtls_gcm_update+0x52>
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 808624e:	f06f 0013 	mvn.w	r0, #19
 8086252:	e000      	b.n	8086256 <mbedtls_gcm_update+0xde>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 8086254:	4630      	mov	r0, r6
}
 8086256:	b00b      	add	sp, #44	; 0x2c
 8086258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808625c <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 808625c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8086260:	4688      	mov	r8, r1
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 8086262:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
 8086266:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 808626a:	00cd      	lsls	r5, r1, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 808626c:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
                unsigned char *tag,
                size_t tag_len )
{
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 8086270:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 8086274:	00dc      	lsls	r4, r3, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8086276:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 808627a:	00cf      	lsls	r7, r1, #3
 808627c:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 8086280:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 8086282:	1f13      	subs	r3, r2, #4
 8086284:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8086286:	4681      	mov	r9, r0
 8086288:	4692      	mov	sl, r2
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
 808628a:	d85b      	bhi.n	8086344 <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 808628c:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 8086290:	4640      	mov	r0, r8
 8086292:	f00a f9ae 	bl	80905f2 <memcpy>

    if( orig_len || orig_add_len )
 8086296:	ea54 0305 	orrs.w	r3, r4, r5
 808629a:	d104      	bne.n	80862a6 <mbedtls_gcm_finish+0x4a>
 808629c:	ea56 0307 	orrs.w	r3, r6, r7
 80862a0:	d101      	bne.n	80862a6 <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 80862a2:	2000      	movs	r0, #0
 80862a4:	e050      	b.n	8086348 <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
 80862a6:	2210      	movs	r2, #16
 80862a8:	2100      	movs	r1, #0
 80862aa:	4668      	mov	r0, sp
 80862ac:	f00a f9c7 	bl	809063e <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80862b0:	0e3b      	lsrs	r3, r7, #24
 80862b2:	f88d 3000 	strb.w	r3, [sp]
 80862b6:	0c3b      	lsrs	r3, r7, #16
 80862b8:	f88d 3001 	strb.w	r3, [sp, #1]
 80862bc:	0a3b      	lsrs	r3, r7, #8
 80862be:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80862c2:	0e33      	lsrs	r3, r6, #24
 80862c4:	f88d 3004 	strb.w	r3, [sp, #4]
 80862c8:	0c33      	lsrs	r3, r6, #16
 80862ca:	f88d 3005 	strb.w	r3, [sp, #5]
 80862ce:	0a33      	lsrs	r3, r6, #8
 80862d0:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80862d4:	0e2b      	lsrs	r3, r5, #24
 80862d6:	f88d 3008 	strb.w	r3, [sp, #8]
 80862da:	0c2b      	lsrs	r3, r5, #16
 80862dc:	f88d 3009 	strb.w	r3, [sp, #9]
 80862e0:	0a2b      	lsrs	r3, r5, #8
 80862e2:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 80862e6:	0e23      	lsrs	r3, r4, #24
 80862e8:	f88d 300c 	strb.w	r3, [sp, #12]
 80862ec:	0c23      	lsrs	r3, r4, #16
 80862ee:	f88d 300d 	strb.w	r3, [sp, #13]
 80862f2:	f88d 400f 	strb.w	r4, [sp, #15]
 80862f6:	0a23      	lsrs	r3, r4, #8
 80862f8:	f209 146f 	addw	r4, r9, #367	; 0x16f
 80862fc:	4622      	mov	r2, r4
 80862fe:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8086302:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8086306:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 808630a:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 808630e:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 8086310:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8086314:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8086318:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 808631a:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 808631c:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 808631e:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8086320:	d1f6      	bne.n	8086310 <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8086322:	f509 72b8 	add.w	r2, r9, #368	; 0x170
 8086326:	4611      	mov	r1, r2
 8086328:	4648      	mov	r0, r9
 808632a:	f7ff fd17 	bl	8085d5c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
 808632e:	4641      	mov	r1, r8
 8086330:	44c2      	add	sl, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
 8086332:	780a      	ldrb	r2, [r1, #0]
 8086334:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8086338:	4053      	eors	r3, r2
 808633a:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
 808633e:	4551      	cmp	r1, sl
 8086340:	d1f7      	bne.n	8086332 <mbedtls_gcm_finish+0xd6>
 8086342:	e7ae      	b.n	80862a2 <mbedtls_gcm_finish+0x46>
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8086344:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
 8086348:	b004      	add	sp, #16
 808634a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808634e <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 808634e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8086352:	4617      	mov	r7, r2
 8086354:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8086356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8086358:	4604      	mov	r4, r0
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 808635a:	9301      	str	r3, [sp, #4]
 808635c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 808635e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8086362:	9300      	str	r3, [sp, #0]
 8086364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8086366:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 808636a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 808636c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 808636e:	f7ff fe60 	bl	8086032 <mbedtls_gcm_starts>
 8086372:	b970      	cbnz	r0, 8086392 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8086374:	464b      	mov	r3, r9
 8086376:	4642      	mov	r2, r8
 8086378:	4639      	mov	r1, r7
 808637a:	4620      	mov	r0, r4
 808637c:	f7ff fefc 	bl	8086178 <mbedtls_gcm_update>
 8086380:	b938      	cbnz	r0, 8086392 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8086382:	4632      	mov	r2, r6
 8086384:	4629      	mov	r1, r5
 8086386:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 8086388:	b003      	add	sp, #12
 808638a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 808638e:	f7ff bf65 	b.w	808625c <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
 8086392:	b003      	add	sp, #12
 8086394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08086398 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8086398:	b5f0      	push	{r4, r5, r6, r7, lr}
 808639a:	460e      	mov	r6, r1
 808639c:	b08d      	sub	sp, #52	; 0x34
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 808639e:	9916      	ldr	r1, [sp, #88]	; 0x58
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80863a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80863a2:	9103      	str	r1, [sp, #12]
 80863a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80863a6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80863a8:	9102      	str	r1, [sp, #8]
 80863aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80863ac:	af08      	add	r7, sp, #32
 80863ae:	9101      	str	r1, [sp, #4]
 80863b0:	9300      	str	r3, [sp, #0]
 80863b2:	9706      	str	r7, [sp, #24]
 80863b4:	4613      	mov	r3, r2
 80863b6:	9505      	str	r5, [sp, #20]
 80863b8:	9404      	str	r4, [sp, #16]
 80863ba:	4632      	mov	r2, r6
 80863bc:	2100      	movs	r1, #0
 80863be:	f7ff ffc6 	bl	808634e <mbedtls_gcm_crypt_and_tag>
 80863c2:	b998      	cbnz	r0, 80863ec <mbedtls_gcm_auth_decrypt+0x54>
 80863c4:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80863c6:	42ab      	cmp	r3, r5
 80863c8:	d006      	beq.n	80863d8 <mbedtls_gcm_auth_decrypt+0x40>
        diff |= tag[i] ^ check_tag[i];
 80863ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80863cc:	5cd1      	ldrb	r1, [r2, r3]
 80863ce:	5cfa      	ldrb	r2, [r7, r3]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80863d0:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 80863d2:	404a      	eors	r2, r1
 80863d4:	4310      	orrs	r0, r2
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80863d6:	e7f6      	b.n	80863c6 <mbedtls_gcm_auth_decrypt+0x2e>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 80863d8:	b140      	cbz	r0, 80863ec <mbedtls_gcm_auth_decrypt+0x54>
 80863da:	4426      	add	r6, r4
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80863dc:	2300      	movs	r3, #0
 80863de:	42a6      	cmp	r6, r4
 80863e0:	d002      	beq.n	80863e8 <mbedtls_gcm_auth_decrypt+0x50>
 80863e2:	7023      	strb	r3, [r4, #0]
 80863e4:	3401      	adds	r4, #1
 80863e6:	e7fa      	b.n	80863de <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 80863e8:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 80863ec:	b00d      	add	sp, #52	; 0x34
 80863ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080863f0 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 80863f0:	b510      	push	{r4, lr}
 80863f2:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 80863f4:	f7fb fc36 	bl	8081c64 <mbedtls_cipher_free>
 80863f8:	f504 72c4 	add.w	r2, r4, #392	; 0x188
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80863fc:	2300      	movs	r3, #0
 80863fe:	4294      	cmp	r4, r2
 8086400:	d002      	beq.n	8086408 <mbedtls_gcm_free+0x18>
 8086402:	7023      	strb	r3, [r4, #0]
 8086404:	3401      	adds	r4, #1
 8086406:	e7fa      	b.n	80863fe <mbedtls_gcm_free+0xe>
 8086408:	bd10      	pop	{r4, pc}
	...

0808640c <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 808640c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8086410:	2700      	movs	r7, #0
 8086412:	463c      	mov	r4, r7
 8086414:	463d      	mov	r5, r7
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8086416:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 808641a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8086534 <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 808641e:	4575      	cmp	r5, lr
 8086420:	d22d      	bcs.n	808647e <mbedtls_base64_decode+0x72>
 8086422:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 8086426:	5d5e      	ldrb	r6, [r3, r5]
 8086428:	2e20      	cmp	r6, #32
 808642a:	d104      	bne.n	8086436 <mbedtls_base64_decode+0x2a>
        {
            ++i;
 808642c:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 808642e:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
 8086430:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 8086434:	d8f7      	bhi.n	8086426 <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 8086436:	45ae      	cmp	lr, r5
 8086438:	d021      	beq.n	808647e <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
 808643a:	ebc5 060e 	rsb	r6, r5, lr
 808643e:	2e01      	cmp	r6, #1
 8086440:	d906      	bls.n	8086450 <mbedtls_base64_decode+0x44>
 8086442:	5d5e      	ldrb	r6, [r3, r5]
 8086444:	2e0d      	cmp	r6, #13
 8086446:	d103      	bne.n	8086450 <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
 8086448:	195e      	adds	r6, r3, r5
 808644a:	7876      	ldrb	r6, [r6, #1]
 808644c:	2e0a      	cmp	r6, #10
 808644e:	d014      	beq.n	808647a <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
 8086450:	5d5e      	ldrb	r6, [r3, r5]
 8086452:	2e0a      	cmp	r6, #10
 8086454:	d011      	beq.n	808647a <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 8086456:	f1bc 0f00 	cmp.w	ip, #0
 808645a:	d166      	bne.n	808652a <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
 808645c:	2e3d      	cmp	r6, #61	; 0x3d
 808645e:	d102      	bne.n	8086466 <mbedtls_base64_decode+0x5a>
 8086460:	3701      	adds	r7, #1
 8086462:	2f02      	cmp	r7, #2
 8086464:	d861      	bhi.n	808652a <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8086466:	f016 0f80 	tst.w	r6, #128	; 0x80
 808646a:	d15e      	bne.n	808652a <mbedtls_base64_decode+0x11e>
 808646c:	f818 6006 	ldrb.w	r6, [r8, r6]
 8086470:	2e7f      	cmp	r6, #127	; 0x7f
 8086472:	d05a      	beq.n	808652a <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8086474:	2e3f      	cmp	r6, #63	; 0x3f
 8086476:	d956      	bls.n	8086526 <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 8086478:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 808647a:	3501      	adds	r5, #1
 808647c:	e7cf      	b.n	808641e <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
 808647e:	b91c      	cbnz	r4, 8086488 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
 8086480:	6014      	str	r4, [r2, #0]
        return( 0 );
 8086482:	4620      	mov	r0, r4
 8086484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
 8086488:	f004 0e07 	and.w	lr, r4, #7
 808648c:	2606      	movs	r6, #6
 808648e:	08e4      	lsrs	r4, r4, #3
 8086490:	fb06 fe0e 	mul.w	lr, r6, lr
 8086494:	4366      	muls	r6, r4
 8086496:	f10e 0e07 	add.w	lr, lr, #7
 808649a:	1bf6      	subs	r6, r6, r7
 808649c:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
 80864a0:	b160      	cbz	r0, 80864bc <mbedtls_base64_decode+0xb0>
 80864a2:	428c      	cmp	r4, r1
 80864a4:	d80a      	bhi.n	80864bc <mbedtls_base64_decode+0xb0>
 80864a6:	2600      	movs	r6, #0
 80864a8:	eb03 0e05 	add.w	lr, r3, r5
 80864ac:	4601      	mov	r1, r0
 80864ae:	2503      	movs	r5, #3
 80864b0:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80864b2:	f8df c080 	ldr.w	ip, [pc, #128]	; 8086534 <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80864b6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8086538 <mbedtls_base64_decode+0x12c>
 80864ba:	e00f      	b.n	80864dc <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
 80864bc:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 80864be:	f06f 0029 	mvn.w	r0, #41	; 0x29
 80864c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80864c6:	f813 9b01 	ldrb.w	r9, [r3], #1
 80864ca:	f1a9 070a 	sub.w	r7, r9, #10
 80864ce:	b2ff      	uxtb	r7, r7
 80864d0:	2f16      	cmp	r7, #22
 80864d2:	d806      	bhi.n	80864e2 <mbedtls_base64_decode+0xd6>
 80864d4:	fa28 f707 	lsr.w	r7, r8, r7
 80864d8:	07ff      	lsls	r7, r7, #31
 80864da:	d502      	bpl.n	80864e2 <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 80864dc:	4573      	cmp	r3, lr
 80864de:	d1f2      	bne.n	80864c6 <mbedtls_base64_decode+0xba>
 80864e0:	e01c      	b.n	808651c <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80864e2:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
 80864e6:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80864e8:	2f40      	cmp	r7, #64	; 0x40
 80864ea:	bf08      	it	eq
 80864ec:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 80864ee:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
 80864f2:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 80864f4:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
 80864f8:	d1f0      	bne.n	80864dc <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80864fa:	b16d      	cbz	r5, 8086518 <mbedtls_base64_decode+0x10c>
 80864fc:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80864fe:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8086500:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8086502:	d101      	bne.n	8086508 <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8086504:	3101      	adds	r1, #1
 8086506:	e007      	b.n	8086518 <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8086508:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 808650a:	ea4f 2416 	mov.w	r4, r6, lsr #8
 808650e:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8086510:	bf16      	itet	ne
 8086512:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8086514:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8086516:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
 8086518:	2400      	movs	r4, #0
 808651a:	e7df      	b.n	80864dc <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
 808651c:	1a08      	subs	r0, r1, r0
 808651e:	6010      	str	r0, [r2, #0]

    return( 0 );
 8086520:	2000      	movs	r0, #0
 8086522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8086526:	2f00      	cmp	r7, #0
 8086528:	d0a6      	beq.n	8086478 <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 808652a:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 808652e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086532:	bf00      	nop
 8086534:	08091e80 	.word	0x08091e80
 8086538:	00400009 	.word	0x00400009

0808653c <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 808653c:	3804      	subs	r0, #4
 808653e:	b2c0      	uxtb	r0, r0
 8086540:	2804      	cmp	r0, #4
 8086542:	bf9a      	itte	ls
 8086544:	4b02      	ldrls	r3, [pc, #8]	; (8086550 <mbedtls_md_info_from_type+0x14>)
 8086546:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 808654a:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 808654c:	4770      	bx	lr
 808654e:	bf00      	nop
 8086550:	08091f00 	.word	0x08091f00

08086554 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 8086554:	2300      	movs	r3, #0
 8086556:	6003      	str	r3, [r0, #0]
 8086558:	6043      	str	r3, [r0, #4]
 808655a:	6083      	str	r3, [r0, #8]
 808655c:	4770      	bx	lr

0808655e <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 808655e:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8086560:	4604      	mov	r4, r0
 8086562:	b1e0      	cbz	r0, 808659e <mbedtls_md_free+0x40>
 8086564:	6803      	ldr	r3, [r0, #0]
 8086566:	b1d3      	cbz	r3, 808659e <mbedtls_md_free+0x40>
        return;

    if( ctx->md_ctx != NULL )
 8086568:	6840      	ldr	r0, [r0, #4]
 808656a:	b108      	cbz	r0, 8086570 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 808656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808656e:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 8086570:	68a3      	ldr	r3, [r4, #8]
 8086572:	b163      	cbz	r3, 808658e <mbedtls_md_free+0x30>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 8086574:	6822      	ldr	r2, [r4, #0]
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8086576:	2100      	movs	r1, #0
 8086578:	68d2      	ldr	r2, [r2, #12]
 808657a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 808657e:	429a      	cmp	r2, r3
 8086580:	d002      	beq.n	8086588 <mbedtls_md_free+0x2a>
 8086582:	7019      	strb	r1, [r3, #0]
 8086584:	3301      	adds	r3, #1
 8086586:	e7fa      	b.n	808657e <mbedtls_md_free+0x20>
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
 8086588:	68a0      	ldr	r0, [r4, #8]
 808658a:	f008 feeb 	bl	808f364 <free>
 808658e:	f104 020c 	add.w	r2, r4, #12
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8086592:	2300      	movs	r3, #0
 8086594:	4294      	cmp	r4, r2
 8086596:	d002      	beq.n	808659e <mbedtls_md_free+0x40>
 8086598:	7023      	strb	r3, [r4, #0]
 808659a:	3401      	adds	r4, #1
 808659c:	e7fa      	b.n	8086594 <mbedtls_md_free+0x36>
 808659e:	bd10      	pop	{r4, pc}

080865a0 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 80865a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80865a2:	4605      	mov	r5, r0
 80865a4:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 80865a6:	460c      	mov	r4, r1
 80865a8:	b199      	cbz	r1, 80865d2 <mbedtls_md_setup+0x32>
 80865aa:	b190      	cbz	r0, 80865d2 <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 80865ac:	6a0b      	ldr	r3, [r1, #32]
 80865ae:	4798      	blx	r3
 80865b0:	4606      	mov	r6, r0
 80865b2:	6068      	str	r0, [r5, #4]
 80865b4:	b178      	cbz	r0, 80865d6 <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 80865b6:	b14f      	cbz	r7, 80865cc <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 80865b8:	68e1      	ldr	r1, [r4, #12]
 80865ba:	2002      	movs	r0, #2
 80865bc:	f009 fff4 	bl	80905a8 <calloc>
 80865c0:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 80865c2:	b918      	cbnz	r0, 80865cc <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 80865c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80865c6:	4630      	mov	r0, r6
 80865c8:	4798      	blx	r3
 80865ca:	e004      	b.n	80865d6 <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 80865cc:	602c      	str	r4, [r5, #0]

    return( 0 );
 80865ce:	2000      	movs	r0, #0
 80865d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80865d2:	4802      	ldr	r0, [pc, #8]	; (80865dc <mbedtls_md_setup+0x3c>)
 80865d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 80865d6:	4802      	ldr	r0, [pc, #8]	; (80865e0 <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 80865d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80865da:	bf00      	nop
 80865dc:	ffffaf00 	.word	0xffffaf00
 80865e0:	ffffae80 	.word	0xffffae80

080865e4 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80865e4:	b120      	cbz	r0, 80865f0 <mbedtls_md_starts+0xc>
 80865e6:	6803      	ldr	r3, [r0, #0]
 80865e8:	b113      	cbz	r3, 80865f0 <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 80865ea:	691b      	ldr	r3, [r3, #16]
 80865ec:	6840      	ldr	r0, [r0, #4]
 80865ee:	4718      	bx	r3
}
 80865f0:	4800      	ldr	r0, [pc, #0]	; (80865f4 <mbedtls_md_starts+0x10>)
 80865f2:	4770      	bx	lr
 80865f4:	ffffaf00 	.word	0xffffaf00

080865f8 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80865f8:	b120      	cbz	r0, 8086604 <mbedtls_md_update+0xc>
 80865fa:	6803      	ldr	r3, [r0, #0]
 80865fc:	b113      	cbz	r3, 8086604 <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80865fe:	695b      	ldr	r3, [r3, #20]
 8086600:	6840      	ldr	r0, [r0, #4]
 8086602:	4718      	bx	r3
}
 8086604:	4800      	ldr	r0, [pc, #0]	; (8086608 <mbedtls_md_update+0x10>)
 8086606:	4770      	bx	lr
 8086608:	ffffaf00 	.word	0xffffaf00

0808660c <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 808660c:	b120      	cbz	r0, 8086618 <mbedtls_md_finish+0xc>
 808660e:	6803      	ldr	r3, [r0, #0]
 8086610:	b113      	cbz	r3, 8086618 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8086612:	699b      	ldr	r3, [r3, #24]
 8086614:	6840      	ldr	r0, [r0, #4]
 8086616:	4718      	bx	r3
}
 8086618:	4800      	ldr	r0, [pc, #0]	; (808661c <mbedtls_md_finish+0x10>)
 808661a:	4770      	bx	lr
 808661c:	ffffaf00 	.word	0xffffaf00

08086620 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 8086620:	b430      	push	{r4, r5}
 8086622:	460d      	mov	r5, r1
 8086624:	4611      	mov	r1, r2
    if( md_info == NULL )
 8086626:	b128      	cbz	r0, 8086634 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 8086628:	69c4      	ldr	r4, [r0, #28]
 808662a:	461a      	mov	r2, r3
 808662c:	4628      	mov	r0, r5
 808662e:	4623      	mov	r3, r4
}
 8086630:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 8086632:	4718      	bx	r3
}
 8086634:	4801      	ldr	r0, [pc, #4]	; (808663c <mbedtls_md+0x1c>)
 8086636:	bc30      	pop	{r4, r5}
 8086638:	4770      	bx	lr
 808663a:	bf00      	nop
 808663c:	ffffaf00 	.word	0xffffaf00

08086640 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 8086640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086644:	460d      	mov	r5, r1
 8086646:	b090      	sub	sp, #64	; 0x40
 8086648:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 808664a:	4604      	mov	r4, r0
 808664c:	2800      	cmp	r0, #0
 808664e:	d050      	beq.n	80866f2 <mbedtls_md_hmac_starts+0xb2>
 8086650:	6803      	ldr	r3, [r0, #0]
 8086652:	2b00      	cmp	r3, #0
 8086654:	d04d      	beq.n	80866f2 <mbedtls_md_hmac_starts+0xb2>
 8086656:	6882      	ldr	r2, [r0, #8]
 8086658:	2a00      	cmp	r2, #0
 808665a:	d04a      	beq.n	80866f2 <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 808665c:	68da      	ldr	r2, [r3, #12]
 808665e:	42ba      	cmp	r2, r7
 8086660:	d215      	bcs.n	808668e <mbedtls_md_hmac_starts+0x4e>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8086662:	691b      	ldr	r3, [r3, #16]
 8086664:	6840      	ldr	r0, [r0, #4]
 8086666:	4798      	blx	r3
 8086668:	2800      	cmp	r0, #0
 808666a:	d139      	bne.n	80866e0 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 808666c:	6823      	ldr	r3, [r4, #0]
 808666e:	463a      	mov	r2, r7
 8086670:	695b      	ldr	r3, [r3, #20]
 8086672:	4629      	mov	r1, r5
 8086674:	6860      	ldr	r0, [r4, #4]
 8086676:	4798      	blx	r3
 8086678:	2800      	cmp	r0, #0
 808667a:	d131      	bne.n	80866e0 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 808667c:	6823      	ldr	r3, [r4, #0]
 808667e:	4669      	mov	r1, sp
 8086680:	699b      	ldr	r3, [r3, #24]
 8086682:	6860      	ldr	r0, [r4, #4]
 8086684:	4798      	blx	r3
 8086686:	bb58      	cbnz	r0, 80866e0 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 8086688:	466d      	mov	r5, sp
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
            goto cleanup;

        keylen = ctx->md_info->size;
 808668a:	6823      	ldr	r3, [r4, #0]
 808668c:	689f      	ldr	r7, [r3, #8]
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 808668e:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 8086690:	68a6      	ldr	r6, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8086692:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8086694:	2136      	movs	r1, #54	; 0x36
 8086696:	4630      	mov	r0, r6
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8086698:	eb06 0802 	add.w	r8, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
 808669c:	f009 ffcf 	bl	809063e <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 80866a0:	6823      	ldr	r3, [r4, #0]
 80866a2:	215c      	movs	r1, #92	; 0x5c
 80866a4:	68da      	ldr	r2, [r3, #12]
 80866a6:	4640      	mov	r0, r8
 80866a8:	f009 ffc9 	bl	809063e <memset>

    for( i = 0; i < keylen; i++ )
 80866ac:	2300      	movs	r3, #0
 80866ae:	429f      	cmp	r7, r3
 80866b0:	d00b      	beq.n	80866ca <mbedtls_md_hmac_starts+0x8a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 80866b2:	5cf1      	ldrb	r1, [r6, r3]
 80866b4:	5cea      	ldrb	r2, [r5, r3]
 80866b6:	404a      	eors	r2, r1
 80866b8:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 80866ba:	f818 1003 	ldrb.w	r1, [r8, r3]
 80866be:	5cea      	ldrb	r2, [r5, r3]
 80866c0:	404a      	eors	r2, r1
 80866c2:	f808 2003 	strb.w	r2, [r8, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 80866c6:	3301      	adds	r3, #1
 80866c8:	e7f1      	b.n	80866ae <mbedtls_md_hmac_starts+0x6e>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80866ca:	6823      	ldr	r3, [r4, #0]
 80866cc:	6860      	ldr	r0, [r4, #4]
 80866ce:	691b      	ldr	r3, [r3, #16]
 80866d0:	4798      	blx	r3
 80866d2:	b928      	cbnz	r0, 80866e0 <mbedtls_md_hmac_starts+0xa0>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 80866d4:	6823      	ldr	r3, [r4, #0]
 80866d6:	4631      	mov	r1, r6
 80866d8:	695d      	ldr	r5, [r3, #20]
 80866da:	68da      	ldr	r2, [r3, #12]
 80866dc:	6860      	ldr	r0, [r4, #4]
 80866de:	47a8      	blx	r5
 80866e0:	2300      	movs	r3, #0
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80866e2:	4619      	mov	r1, r3
 80866e4:	eb0d 0203 	add.w	r2, sp, r3
 80866e8:	3301      	adds	r3, #1
 80866ea:	2b41      	cmp	r3, #65	; 0x41
 80866ec:	d002      	beq.n	80866f4 <mbedtls_md_hmac_starts+0xb4>
 80866ee:	7011      	strb	r1, [r2, #0]
 80866f0:	e7f8      	b.n	80866e4 <mbedtls_md_hmac_starts+0xa4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80866f2:	4802      	ldr	r0, [pc, #8]	; (80866fc <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 80866f4:	b010      	add	sp, #64	; 0x40
 80866f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80866fa:	bf00      	nop
 80866fc:	ffffaf00 	.word	0xffffaf00

08086700 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8086700:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8086702:	b138      	cbz	r0, 8086714 <mbedtls_md_hmac_update+0x14>
 8086704:	6803      	ldr	r3, [r0, #0]
 8086706:	b12b      	cbz	r3, 8086714 <mbedtls_md_hmac_update+0x14>
 8086708:	6884      	ldr	r4, [r0, #8]
 808670a:	b11c      	cbz	r4, 8086714 <mbedtls_md_hmac_update+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 808670c:	695b      	ldr	r3, [r3, #20]
 808670e:	6840      	ldr	r0, [r0, #4]
}
 8086710:	bc10      	pop	{r4}
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8086712:	4718      	bx	r3
}
 8086714:	4801      	ldr	r0, [pc, #4]	; (808671c <mbedtls_md_hmac_update+0x1c>)
 8086716:	bc10      	pop	{r4}
 8086718:	4770      	bx	lr
 808671a:	bf00      	nop
 808671c:	ffffaf00 	.word	0xffffaf00

08086720 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 8086720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086724:	460d      	mov	r5, r1
 8086726:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8086728:	4604      	mov	r4, r0
 808672a:	b318      	cbz	r0, 8086774 <mbedtls_md_hmac_finish+0x54>
 808672c:	6803      	ldr	r3, [r0, #0]
 808672e:	b30b      	cbz	r3, 8086774 <mbedtls_md_hmac_finish+0x54>
 8086730:	6886      	ldr	r6, [r0, #8]
 8086732:	b1fe      	cbz	r6, 8086774 <mbedtls_md_hmac_finish+0x54>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8086734:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 8086736:	4669      	mov	r1, sp
 8086738:	699b      	ldr	r3, [r3, #24]
 808673a:	6840      	ldr	r0, [r0, #4]
 808673c:	4798      	blx	r3
 808673e:	b9d0      	cbnz	r0, 8086776 <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8086740:	6823      	ldr	r3, [r4, #0]
 8086742:	6860      	ldr	r0, [r4, #4]
 8086744:	691b      	ldr	r3, [r3, #16]
 8086746:	4798      	blx	r3
 8086748:	b9a8      	cbnz	r0, 8086776 <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 808674a:	6823      	ldr	r3, [r4, #0]
 808674c:	19f1      	adds	r1, r6, r7
 808674e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8086752:	68da      	ldr	r2, [r3, #12]
 8086754:	6860      	ldr	r0, [r4, #4]
 8086756:	47c0      	blx	r8
 8086758:	b968      	cbnz	r0, 8086776 <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 808675a:	6823      	ldr	r3, [r4, #0]
 808675c:	4669      	mov	r1, sp
 808675e:	695e      	ldr	r6, [r3, #20]
 8086760:	689a      	ldr	r2, [r3, #8]
 8086762:	6860      	ldr	r0, [r4, #4]
 8086764:	47b0      	blx	r6
 8086766:	b930      	cbnz	r0, 8086776 <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8086768:	6823      	ldr	r3, [r4, #0]
 808676a:	4629      	mov	r1, r5
 808676c:	699b      	ldr	r3, [r3, #24]
 808676e:	6860      	ldr	r0, [r4, #4]
 8086770:	4798      	blx	r3
 8086772:	e000      	b.n	8086776 <mbedtls_md_hmac_finish+0x56>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8086774:	4801      	ldr	r0, [pc, #4]	; (808677c <mbedtls_md_hmac_finish+0x5c>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 8086776:	b010      	add	sp, #64	; 0x40
 8086778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808677c:	ffffaf00 	.word	0xffffaf00

08086780 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 8086780:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8086782:	4604      	mov	r4, r0
 8086784:	b180      	cbz	r0, 80867a8 <mbedtls_md_hmac_reset+0x28>
 8086786:	6803      	ldr	r3, [r0, #0]
 8086788:	b173      	cbz	r3, 80867a8 <mbedtls_md_hmac_reset+0x28>
 808678a:	6885      	ldr	r5, [r0, #8]
 808678c:	b165      	cbz	r5, 80867a8 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 808678e:	691b      	ldr	r3, [r3, #16]
 8086790:	6840      	ldr	r0, [r0, #4]
 8086792:	4798      	blx	r3
 8086794:	b948      	cbnz	r0, 80867aa <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8086796:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
 8086798:	4629      	mov	r1, r5
 808679a:	695e      	ldr	r6, [r3, #20]
 808679c:	68da      	ldr	r2, [r3, #12]
 808679e:	6860      	ldr	r0, [r4, #4]
 80867a0:	4633      	mov	r3, r6
}
 80867a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
 80867a6:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80867a8:	4800      	ldr	r0, [pc, #0]	; (80867ac <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 80867aa:	bd70      	pop	{r4, r5, r6, pc}
 80867ac:	ffffaf00 	.word	0xffffaf00

080867b0 <mbedtls_md_process>:
    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80867b0:	b120      	cbz	r0, 80867bc <mbedtls_md_process+0xc>
 80867b2:	6803      	ldr	r3, [r0, #0]
 80867b4:	b113      	cbz	r3, 80867bc <mbedtls_md_process+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 80867b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80867b8:	6840      	ldr	r0, [r0, #4]
 80867ba:	4718      	bx	r3
}
 80867bc:	4800      	ldr	r0, [pc, #0]	; (80867c0 <mbedtls_md_process+0x10>)
 80867be:	4770      	bx	lr
 80867c0:	ffffaf00 	.word	0xffffaf00

080867c4 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 80867c4:	b100      	cbz	r0, 80867c8 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 80867c6:	7a00      	ldrb	r0, [r0, #8]
}
 80867c8:	4770      	bx	lr

080867ca <_ZL15mbedtls_zeroizePvj>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80867ca:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80867cc:	2300      	movs	r3, #0
 80867ce:	4288      	cmp	r0, r1
 80867d0:	d002      	beq.n	80867d8 <_ZL15mbedtls_zeroizePvj+0xe>
 80867d2:	7003      	strb	r3, [r0, #0]
 80867d4:	3001      	adds	r0, #1
 80867d6:	e7fa      	b.n	80867ce <_ZL15mbedtls_zeroizePvj+0x4>
 80867d8:	4770      	bx	lr

080867da <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 80867da:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80867dc:	2400      	movs	r4, #0
 80867de:	4294      	cmp	r4, r2
 80867e0:	d00c      	beq.n	80867fc <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
 80867e2:	5d03      	ldrb	r3, [r0, r4]
 80867e4:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
 80867e6:	405d      	eors	r5, r3
 80867e8:	d006      	beq.n	80867f8 <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
 80867ea:	2d20      	cmp	r5, #32
 80867ec:	d108      	bne.n	8086800 <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 80867ee:	f023 0320 	bic.w	r3, r3, #32
 80867f2:	3b41      	subs	r3, #65	; 0x41
 80867f4:	2b19      	cmp	r3, #25
 80867f6:	d803      	bhi.n	8086800 <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80867f8:	3401      	adds	r4, #1
 80867fa:	e7f0      	b.n	80867de <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
 80867fc:	2000      	movs	r0, #0
 80867fe:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
 8086800:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return( 0 );
}
 8086804:	bd30      	pop	{r4, r5, pc}

08086806 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 8086806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086808:	4605      	mov	r5, r0
 808680a:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 808680c:	b925      	cbnz	r5, 8086818 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
 808680e:	1c20      	adds	r0, r4, #0
 8086810:	bf18      	it	ne
 8086812:	2001      	movne	r0, #1
 8086814:	4240      	negs	r0, r0
 8086816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
 8086818:	2c00      	cmp	r4, #0
 808681a:	d031      	beq.n	8086880 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 808681c:	682a      	ldr	r2, [r5, #0]
 808681e:	6823      	ldr	r3, [r4, #0]
 8086820:	429a      	cmp	r2, r3
 8086822:	d12d      	bne.n	8086880 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
 8086824:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 8086826:	6863      	ldr	r3, [r4, #4]
 8086828:	429a      	cmp	r2, r3
 808682a:	d129      	bne.n	8086880 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 808682c:	68a1      	ldr	r1, [r4, #8]
 808682e:	68a8      	ldr	r0, [r5, #8]
 8086830:	f009 fed0 	bl	80905d4 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
 8086834:	bb20      	cbnz	r0, 8086880 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 8086836:	68ef      	ldr	r7, [r5, #12]
 8086838:	68e6      	ldr	r6, [r4, #12]
 808683a:	42b7      	cmp	r7, r6
 808683c:	d108      	bne.n	8086850 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
 808683e:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 8086840:	6923      	ldr	r3, [r4, #16]
 8086842:	429a      	cmp	r2, r3
 8086844:	d104      	bne.n	8086850 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
 8086846:	6961      	ldr	r1, [r4, #20]
 8086848:	6968      	ldr	r0, [r5, #20]
 808684a:	f009 fec3 	bl	80905d4 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
 808684e:	b180      	cbz	r0, 8086872 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
 8086850:	2f0c      	cmp	r7, #12
 8086852:	d001      	beq.n	8086858 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8086854:	2f13      	cmp	r7, #19
 8086856:	d113      	bne.n	8086880 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 8086858:	2e0c      	cmp	r6, #12
 808685a:	d001      	beq.n	8086860 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 808685c:	2e13      	cmp	r6, #19
 808685e:	d10f      	bne.n	8086880 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
 8086860:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8086862:	6923      	ldr	r3, [r4, #16]
 8086864:	429a      	cmp	r2, r3
 8086866:	d10b      	bne.n	8086880 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 8086868:	6961      	ldr	r1, [r4, #20]
 808686a:	6968      	ldr	r0, [r5, #20]
 808686c:	f7ff ffb5 	bl	80867da <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 8086870:	b930      	cbnz	r0, 8086880 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 8086872:	7f2a      	ldrb	r2, [r5, #28]
 8086874:	7f23      	ldrb	r3, [r4, #28]
 8086876:	429a      	cmp	r2, r3
 8086878:	d102      	bne.n	8086880 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
 808687a:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 808687c:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 808687e:	e7c5      	b.n	808680c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
 8086880:	f04f 30ff 	mov.w	r0, #4294967295
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
 8086884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086886 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
 8086886:	b570      	push	{r4, r5, r6, lr}
 8086888:	460e      	mov	r6, r1
 808688a:	4604      	mov	r4, r0
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 808688c:	f009 fef7 	bl	809067e <strlen>

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 8086890:	6875      	ldr	r5, [r6, #4]
 8086892:	2d02      	cmp	r5, #2
 8086894:	d91e      	bls.n	80868d4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8086896:	68b6      	ldr	r6, [r6, #8]
 8086898:	7833      	ldrb	r3, [r6, #0]
 808689a:	2b2a      	cmp	r3, #42	; 0x2a
 808689c:	d11a      	bne.n	80868d4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 808689e:	7873      	ldrb	r3, [r6, #1]
 80868a0:	2b2e      	cmp	r3, #46	; 0x2e
 80868a2:	d117      	bne.n	80868d4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 80868a4:	4623      	mov	r3, r4
 80868a6:	2200      	movs	r2, #0
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 80868a8:	4282      	cmp	r2, r0
 80868aa:	d015      	beq.n	80868d8 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
    {
        if( cn[i] == '.' )
 80868ac:	4619      	mov	r1, r3
 80868ae:	780c      	ldrb	r4, [r1, #0]
 80868b0:	3301      	adds	r3, #1
 80868b2:	2c2e      	cmp	r4, #46	; 0x2e
 80868b4:	d001      	beq.n	80868ba <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x34>
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 80868b6:	3201      	adds	r2, #1
 80868b8:	e7f6      	b.n	80868a8 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x22>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
 80868ba:	b16a      	cbz	r2, 80868d8 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80868bc:	1a82      	subs	r2, r0, r2
 80868be:	3d01      	subs	r5, #1
 80868c0:	42aa      	cmp	r2, r5
 80868c2:	d109      	bne.n	80868d8 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 80868c4:	1c70      	adds	r0, r6, #1
 80868c6:	f7ff ff88 	bl	80867da <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80868ca:	3000      	adds	r0, #0
 80868cc:	bf18      	it	ne
 80868ce:	2001      	movne	r0, #1
 80868d0:	4240      	negs	r0, r0
 80868d2:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
 80868d4:	2000      	movs	r0, #0
 80868d6:	bd70      	pop	{r4, r5, r6, pc}
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
 80868d8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80868dc:	bd70      	pop	{r4, r5, r6, pc}

080868de <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80868de:	b570      	push	{r4, r5, r6, lr}
 80868e0:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
 80868e2:	6802      	ldr	r2, [r0, #0]
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80868e4:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
 80868e6:	428a      	cmp	r2, r1
 80868e8:	d00b      	beq.n	8086902 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x24>
        return( 0 );

    uid->tag = **p;
 80868ea:	7816      	ldrb	r6, [r2, #0]
 80868ec:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80868ee:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
 80868f2:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80868f6:	f7fb fc69 	bl	80821cc <mbedtls_asn1_get_tag>
 80868fa:	b120      	cbz	r0, 8086906 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x28>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80868fc:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8086900:	d107      	bne.n	8086912 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x34>
            return( 0 );
 8086902:	2000      	movs	r0, #0
 8086904:	bd70      	pop	{r4, r5, r6, pc}

        return( ret );
    }

    uid->p = *p;
 8086906:	6823      	ldr	r3, [r4, #0]
 8086908:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 808690a:	6822      	ldr	r2, [r4, #0]
 808690c:	686b      	ldr	r3, [r5, #4]
 808690e:	4413      	add	r3, r2
 8086910:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8086912:	bd70      	pop	{r4, r5, r6, pc}

08086914 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>:
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8086914:	2901      	cmp	r1, #1

/*
 * Check key against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 8086916:	b510      	push	{r4, lr}
 8086918:	4604      	mov	r4, r0
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 808691a:	d001      	beq.n	8086920 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0xc>
 808691c:	2906      	cmp	r1, #6
 808691e:	d109      	bne.n	8086934 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0x20>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 8086920:	4610      	mov	r0, r2
 8086922:	f004 fdbf 	bl	808b4a4 <mbedtls_pk_get_bitlen>
 8086926:	6823      	ldr	r3, [r4, #0]
 8086928:	4298      	cmp	r0, r3
 808692a:	f04f 30ff 	mov.w	r0, #4294967295
 808692e:	bf28      	it	cs
 8086930:	2000      	movcs	r0, #0
 8086932:	bd10      	pop	{r4, pc}

        return( -1 );
    }
#endif

    return( -1 );
 8086934:	f04f 30ff 	mov.w	r0, #4294967295
}
 8086938:	bd10      	pop	{r4, pc}
	...

0808693c <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
 808693c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086940:	4682      	mov	sl, r0
 8086942:	b08d      	sub	sp, #52	; 0x34
 8086944:	460f      	mov	r7, r1
 8086946:	4691      	mov	r9, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
 8086948:	4698      	mov	r8, r3
 808694a:	b94b      	cbnz	r3, 8086960 <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 808694c:	4aa5      	ldr	r2, [pc, #660]	; (8086be4 <mbedtls_x509_crt_info+0x2a8>)
 808694e:	f008 fd21 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086952:	2800      	cmp	r0, #0
 8086954:	f2c0 82d6 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086958:	4287      	cmp	r7, r0
 808695a:	f200 82d4 	bhi.w	8086f06 <mbedtls_x509_crt_info+0x5ca>
 808695e:	e2d1      	b.n	8086f04 <mbedtls_x509_crt_info+0x5c8>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
                               prefix, crt->version );
 8086960:	699b      	ldr	r3, [r3, #24]
 8086962:	9300      	str	r3, [sp, #0]
 8086964:	4613      	mov	r3, r2
 8086966:	4aa0      	ldr	r2, [pc, #640]	; (8086be8 <mbedtls_x509_crt_info+0x2ac>)
 8086968:	f008 fd14 	bl	808f394 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 808696c:	2800      	cmp	r0, #0
 808696e:	f2c0 82c9 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086972:	4287      	cmp	r7, r0
 8086974:	f240 82c6 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086978:	1a3e      	subs	r6, r7, r0
 808697a:	4482      	add	sl, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
                               prefix );
 808697c:	464b      	mov	r3, r9
 808697e:	4a9b      	ldr	r2, [pc, #620]	; (8086bec <mbedtls_x509_crt_info+0x2b0>)
 8086980:	4631      	mov	r1, r6
 8086982:	4650      	mov	r0, sl
 8086984:	f008 fd06 	bl	808f394 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086988:	2800      	cmp	r0, #0
 808698a:	f2c0 82bb 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 808698e:	4286      	cmp	r6, r0
 8086990:	f240 82b8 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086994:	1a36      	subs	r6, r6, r0
 8086996:	4482      	add	sl, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 8086998:	f108 021c 	add.w	r2, r8, #28
 808699c:	4631      	mov	r1, r6
 808699e:	4650      	mov	r0, sl
 80869a0:	f7fe fdca 	bl	8085538 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80869a4:	2800      	cmp	r0, #0
 80869a6:	f2c0 82ad 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 80869aa:	4286      	cmp	r6, r0
 80869ac:	f240 82aa 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 80869b0:	1a36      	subs	r6, r6, r0
 80869b2:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 80869b4:	464b      	mov	r3, r9
 80869b6:	4a8e      	ldr	r2, [pc, #568]	; (8086bf0 <mbedtls_x509_crt_info+0x2b4>)
 80869b8:	4631      	mov	r1, r6
 80869ba:	4650      	mov	r0, sl
 80869bc:	f008 fcea 	bl	808f394 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80869c0:	2800      	cmp	r0, #0
 80869c2:	f2c0 829f 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 80869c6:	4286      	cmp	r6, r0
 80869c8:	f240 829c 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 80869cc:	1a36      	subs	r6, r6, r0
 80869ce:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 80869d0:	f108 024c 	add.w	r2, r8, #76	; 0x4c
 80869d4:	4631      	mov	r1, r6
 80869d6:	4650      	mov	r0, sl
 80869d8:	f7fe fd2c 	bl	8085434 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80869dc:	2800      	cmp	r0, #0
 80869de:	f2c0 8291 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 80869e2:	4286      	cmp	r6, r0
 80869e4:	f240 828e 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 80869e8:	1a36      	subs	r6, r6, r0
 80869ea:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 80869ec:	464b      	mov	r3, r9
 80869ee:	4a81      	ldr	r2, [pc, #516]	; (8086bf4 <mbedtls_x509_crt_info+0x2b8>)
 80869f0:	4631      	mov	r1, r6
 80869f2:	4650      	mov	r0, sl
 80869f4:	f008 fcce 	bl	808f394 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80869f8:	2800      	cmp	r0, #0
 80869fa:	f2c0 8283 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 80869fe:	4286      	cmp	r6, r0
 8086a00:	f240 8280 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086a04:	1a36      	subs	r6, r6, r0
 8086a06:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 8086a08:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 8086a0c:	4631      	mov	r1, r6
 8086a0e:	4650      	mov	r0, sl
 8086a10:	f7fe fd10 	bl	8085434 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086a14:	2800      	cmp	r0, #0
 8086a16:	f2c0 8275 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086a1a:	4286      	cmp	r6, r0
 8086a1c:	f240 8272 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8086a20:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086a24:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8086a26:	9305      	str	r3, [sp, #20]
 8086a28:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086a2c:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8086a2e:	9304      	str	r3, [sp, #16]
 8086a30:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 8086a34:	4a70      	ldr	r2, [pc, #448]	; (8086bf8 <mbedtls_x509_crt_info+0x2bc>)
 8086a36:	9303      	str	r3, [sp, #12]
 8086a38:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 8086a3c:	4631      	mov	r1, r6
 8086a3e:	9302      	str	r3, [sp, #8]
 8086a40:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8086a44:	4650      	mov	r0, sl
 8086a46:	9301      	str	r3, [sp, #4]
 8086a48:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 8086a4c:	9300      	str	r3, [sp, #0]
 8086a4e:	464b      	mov	r3, r9
 8086a50:	f008 fca0 	bl	808f394 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086a54:	2800      	cmp	r0, #0
 8086a56:	f2c0 8255 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086a5a:	4286      	cmp	r6, r0
 8086a5c:	f240 8252 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8086a60:	f8d8 30b8 	ldr.w	r3, [r8, #184]	; 0xb8
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086a64:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8086a66:	9305      	str	r3, [sp, #20]
 8086a68:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086a6c:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8086a6e:	9304      	str	r3, [sp, #16]
 8086a70:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 8086a74:	4a61      	ldr	r2, [pc, #388]	; (8086bfc <mbedtls_x509_crt_info+0x2c0>)
 8086a76:	9303      	str	r3, [sp, #12]
 8086a78:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
 8086a7c:	4631      	mov	r1, r6
 8086a7e:	9302      	str	r3, [sp, #8]
 8086a80:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8086a84:	4650      	mov	r0, sl
 8086a86:	9301      	str	r3, [sp, #4]
 8086a88:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 8086a8c:	9300      	str	r3, [sp, #0]
 8086a8e:	464b      	mov	r3, r9
 8086a90:	f008 fc80 	bl	808f394 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086a94:	2800      	cmp	r0, #0
 8086a96:	f2c0 8235 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086a9a:	4286      	cmp	r6, r0
 8086a9c:	f240 8232 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086aa0:	1a36      	subs	r6, r6, r0
 8086aa2:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 8086aa4:	464b      	mov	r3, r9
 8086aa6:	4a56      	ldr	r2, [pc, #344]	; (8086c00 <mbedtls_x509_crt_info+0x2c4>)
 8086aa8:	4631      	mov	r1, r6
 8086aaa:	4650      	mov	r0, sl
 8086aac:	f008 fc72 	bl	808f394 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086ab0:	2800      	cmp	r0, #0
 8086ab2:	f2c0 8227 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086ab6:	4286      	cmp	r6, r0
 8086ab8:	f240 8224 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 8086abc:	f8d8 212c 	ldr.w	r2, [r8, #300]	; 0x12c
 8086ac0:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 8086ac4:	9201      	str	r2, [sp, #4]
 8086ac6:	f898 2128 	ldrb.w	r2, [r8, #296]	; 0x128
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086aca:	1a36      	subs	r6, r6, r0
 8086acc:	4482      	add	sl, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 8086ace:	9200      	str	r2, [sp, #0]
 8086ad0:	4631      	mov	r1, r6
 8086ad2:	f108 0228 	add.w	r2, r8, #40	; 0x28
 8086ad6:	4650      	mov	r0, sl
 8086ad8:	f7fe fd78 	bl	80855cc <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086adc:	1e05      	subs	r5, r0, #0
 8086ade:	f2c0 8211 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086ae2:	42ae      	cmp	r6, r5
 8086ae4:	f240 820e 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 8086ae8:	f108 0bbc 	add.w	fp, r8, #188	; 0xbc
 8086aec:	4658      	mov	r0, fp
 8086aee:	f004 fd3d 	bl	808b56c <mbedtls_pk_get_name>
 8086af2:	ac07      	add	r4, sp, #28
 8086af4:	4602      	mov	r2, r0
 8086af6:	2112      	movs	r1, #18
 8086af8:	4620      	mov	r0, r4
 8086afa:	f7fe fd8f 	bl	808561c <mbedtls_x509_key_size_helper>
 8086afe:	2800      	cmp	r0, #0
 8086b00:	f040 8201 	bne.w	8086f06 <mbedtls_x509_crt_info+0x5ca>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 8086b04:	4658      	mov	r0, fp
 8086b06:	f004 fccd 	bl	808b4a4 <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086b0a:	1b76      	subs	r6, r6, r5
 8086b0c:	4455      	add	r5, sl
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 8086b0e:	9001      	str	r0, [sp, #4]
 8086b10:	9400      	str	r4, [sp, #0]
 8086b12:	464b      	mov	r3, r9
 8086b14:	4a3b      	ldr	r2, [pc, #236]	; (8086c04 <mbedtls_x509_crt_info+0x2c8>)
 8086b16:	4631      	mov	r1, r6
 8086b18:	4628      	mov	r0, r5
 8086b1a:	f008 fc3b 	bl	808f394 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086b1e:	2800      	cmp	r0, #0
 8086b20:	f2c0 81f0 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086b24:	4286      	cmp	r6, r0
 8086b26:	f240 81ed 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8086b2a:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086b2e:	1a34      	subs	r4, r6, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8086b30:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086b32:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8086b34:	d527      	bpl.n	8086b86 <mbedtls_x509_crt_info+0x24a>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 8086b36:	f8d8 10fc 	ldr.w	r1, [r8, #252]	; 0xfc
 8086b3a:	4a33      	ldr	r2, [pc, #204]	; (8086c08 <mbedtls_x509_crt_info+0x2cc>)
 8086b3c:	4b33      	ldr	r3, [pc, #204]	; (8086c0c <mbedtls_x509_crt_info+0x2d0>)
                        crt->ca_istrue ? "true" : "false" );
 8086b3e:	4628      	mov	r0, r5
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 8086b40:	2900      	cmp	r1, #0
 8086b42:	bf18      	it	ne
 8086b44:	4613      	movne	r3, r2
                        crt->ca_istrue ? "true" : "false" );
 8086b46:	4a32      	ldr	r2, [pc, #200]	; (8086c10 <mbedtls_x509_crt_info+0x2d4>)
 8086b48:	9300      	str	r3, [sp, #0]
 8086b4a:	4621      	mov	r1, r4
 8086b4c:	464b      	mov	r3, r9
 8086b4e:	f008 fc21 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086b52:	2800      	cmp	r0, #0
 8086b54:	f2c0 81d6 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086b58:	4284      	cmp	r4, r0
 8086b5a:	f240 81d3 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>

        if( crt->max_pathlen > 0 )
 8086b5e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086b62:	1a24      	subs	r4, r4, r0

        if( crt->max_pathlen > 0 )
 8086b64:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086b66:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
 8086b68:	dd0d      	ble.n	8086b86 <mbedtls_x509_crt_info+0x24a>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 8086b6a:	3b01      	subs	r3, #1
 8086b6c:	4a29      	ldr	r2, [pc, #164]	; (8086c14 <mbedtls_x509_crt_info+0x2d8>)
 8086b6e:	4621      	mov	r1, r4
 8086b70:	4628      	mov	r0, r5
 8086b72:	f008 fc0f 	bl	808f394 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8086b76:	2800      	cmp	r0, #0
 8086b78:	f2c0 81c4 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086b7c:	4284      	cmp	r4, r0
 8086b7e:	f240 81c1 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086b82:	1a24      	subs	r4, r4, r0
 8086b84:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8086b86:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8086b8a:	069e      	lsls	r6, r3, #26
 8086b8c:	d54e      	bpl.n	8086c2c <mbedtls_x509_crt_info+0x2f0>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 8086b8e:	464b      	mov	r3, r9
 8086b90:	4a21      	ldr	r2, [pc, #132]	; (8086c18 <mbedtls_x509_crt_info+0x2dc>)
 8086b92:	4621      	mov	r1, r4
 8086b94:	4628      	mov	r0, r5
 8086b96:	f008 fbfd 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086b9a:	2800      	cmp	r0, #0
 8086b9c:	f2c0 81b2 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086ba0:	42a0      	cmp	r0, r4
 8086ba2:	f080 81af 	bcs.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
 8086ba6:	4e1d      	ldr	r6, [pc, #116]	; (8086c1c <mbedtls_x509_crt_info+0x2e0>)
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086ba8:	1a24      	subs	r4, r4, r0
 8086baa:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
 8086bac:	f108 02e8 	add.w	r2, r8, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
 8086bb0:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
 8086bb2:	6851      	ldr	r1, [r2, #4]
 8086bb4:	2300      	movs	r3, #0
 8086bb6:	4401      	add	r1, r0
 8086bb8:	42a1      	cmp	r1, r4
 8086bba:	d301      	bcc.n	8086bc0 <mbedtls_x509_crt_info+0x284>
        {
            *p = '\0';
 8086bbc:	702b      	strb	r3, [r5, #0]
 8086bbe:	e1a1      	b.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
 8086bc0:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
 8086bc2:	4283      	cmp	r3, r0
 8086bc4:	d003      	beq.n	8086bce <mbedtls_x509_crt_info+0x292>
            *p++ = sep[i];
 8086bc6:	5cf1      	ldrb	r1, [r6, r3]
 8086bc8:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
 8086bca:	3301      	adds	r3, #1
 8086bcc:	e7f9      	b.n	8086bc2 <mbedtls_x509_crt_info+0x286>
 8086bce:	441d      	add	r5, r3
 8086bd0:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
 8086bd2:	6851      	ldr	r1, [r2, #4]
 8086bd4:	1a2b      	subs	r3, r5, r0
 8086bd6:	4299      	cmp	r1, r3
 8086bd8:	d922      	bls.n	8086c20 <mbedtls_x509_crt_info+0x2e4>
            *p++ = cur->buf.p[i];
 8086bda:	6891      	ldr	r1, [r2, #8]
 8086bdc:	5ccb      	ldrb	r3, [r1, r3]
 8086bde:	f805 3b01 	strb.w	r3, [r5], #1
 8086be2:	e7f6      	b.n	8086bd2 <mbedtls_x509_crt_info+0x296>
 8086be4:	08091fd7 	.word	0x08091fd7
 8086be8:	08091ff7 	.word	0x08091ff7
 8086bec:	08092011 	.word	0x08092011
 8086bf0:	08092028 	.word	0x08092028
 8086bf4:	08092040 	.word	0x08092040
 8086bf8:	08092058 	.word	0x08092058
 8086bfc:	0809208d 	.word	0x0809208d
 8086c00:	080920c2 	.word	0x080920c2
 8086c04:	080920da 	.word	0x080920da
 8086c08:	08091fcc 	.word	0x08091fcc
 8086c0c:	08091fd1 	.word	0x08091fd1
 8086c10:	080920ec 	.word	0x080920ec
 8086c14:	08092109 	.word	0x08092109
 8086c18:	0809211a 	.word	0x0809211a
 8086c1c:	08090e20 	.word	0x08090e20

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
 8086c20:	68d2      	ldr	r2, [r2, #12]
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
        sep_len = 2;
 8086c22:	2002      	movs	r0, #2
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
 8086c24:	4eb9      	ldr	r6, [pc, #740]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
 8086c26:	2a00      	cmp	r2, #0
 8086c28:	d1c3      	bne.n	8086bb2 <mbedtls_x509_crt_info+0x276>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
 8086c2a:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 8086c2c:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8086c30:	03d8      	lsls	r0, r3, #15
 8086c32:	f140 8090 	bpl.w	8086d56 <mbedtls_x509_crt_info+0x41a>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 8086c36:	464b      	mov	r3, r9
 8086c38:	4ab5      	ldr	r2, [pc, #724]	; (8086f10 <mbedtls_x509_crt_info+0x5d4>)
 8086c3a:	4621      	mov	r1, r4
 8086c3c:	4628      	mov	r0, r5
 8086c3e:	f008 fba9 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086c42:	2800      	cmp	r0, #0
 8086c44:	f2c0 815e 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086c48:	42a0      	cmp	r0, r4
 8086c4a:	f080 815b 	bcs.w	8086f04 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 8086c4e:	f898 6118 	ldrb.w	r6, [r8, #280]	; 0x118
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086c52:	1a24      	subs	r4, r4, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8086c54:	0631      	lsls	r1, r6, #24
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086c56:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8086c58:	4bae      	ldr	r3, [pc, #696]	; (8086f14 <mbedtls_x509_crt_info+0x5d8>)
 8086c5a:	d50d      	bpl.n	8086c78 <mbedtls_x509_crt_info+0x33c>
 8086c5c:	4aae      	ldr	r2, [pc, #696]	; (8086f18 <mbedtls_x509_crt_info+0x5dc>)
 8086c5e:	4621      	mov	r1, r4
 8086c60:	4628      	mov	r0, r5
 8086c62:	f008 fb97 	bl	808f394 <snprintf>
 8086c66:	2800      	cmp	r0, #0
 8086c68:	f2c0 814c 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086c6c:	4284      	cmp	r4, r0
 8086c6e:	f240 8149 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086c72:	4ba6      	ldr	r3, [pc, #664]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086c74:	1a24      	subs	r4, r4, r0
 8086c76:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 8086c78:	0672      	lsls	r2, r6, #25
 8086c7a:	d50d      	bpl.n	8086c98 <mbedtls_x509_crt_info+0x35c>
 8086c7c:	4aa7      	ldr	r2, [pc, #668]	; (8086f1c <mbedtls_x509_crt_info+0x5e0>)
 8086c7e:	4621      	mov	r1, r4
 8086c80:	4628      	mov	r0, r5
 8086c82:	f008 fb87 	bl	808f394 <snprintf>
 8086c86:	2800      	cmp	r0, #0
 8086c88:	f2c0 813c 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086c8c:	4284      	cmp	r4, r0
 8086c8e:	f240 8139 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086c92:	4b9e      	ldr	r3, [pc, #632]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086c94:	1a24      	subs	r4, r4, r0
 8086c96:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 8086c98:	06b0      	lsls	r0, r6, #26
 8086c9a:	d50d      	bpl.n	8086cb8 <mbedtls_x509_crt_info+0x37c>
 8086c9c:	4aa0      	ldr	r2, [pc, #640]	; (8086f20 <mbedtls_x509_crt_info+0x5e4>)
 8086c9e:	4621      	mov	r1, r4
 8086ca0:	4628      	mov	r0, r5
 8086ca2:	f008 fb77 	bl	808f394 <snprintf>
 8086ca6:	2800      	cmp	r0, #0
 8086ca8:	f2c0 812c 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086cac:	4284      	cmp	r4, r0
 8086cae:	f240 8129 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086cb2:	4b96      	ldr	r3, [pc, #600]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086cb4:	1a24      	subs	r4, r4, r0
 8086cb6:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 8086cb8:	06f1      	lsls	r1, r6, #27
 8086cba:	d50d      	bpl.n	8086cd8 <mbedtls_x509_crt_info+0x39c>
 8086cbc:	4a99      	ldr	r2, [pc, #612]	; (8086f24 <mbedtls_x509_crt_info+0x5e8>)
 8086cbe:	4621      	mov	r1, r4
 8086cc0:	4628      	mov	r0, r5
 8086cc2:	f008 fb67 	bl	808f394 <snprintf>
 8086cc6:	2800      	cmp	r0, #0
 8086cc8:	f2c0 811c 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086ccc:	4284      	cmp	r4, r0
 8086cce:	f240 8119 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086cd2:	4b8e      	ldr	r3, [pc, #568]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086cd4:	1a24      	subs	r4, r4, r0
 8086cd6:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 8086cd8:	0732      	lsls	r2, r6, #28
 8086cda:	d50d      	bpl.n	8086cf8 <mbedtls_x509_crt_info+0x3bc>
 8086cdc:	4a92      	ldr	r2, [pc, #584]	; (8086f28 <mbedtls_x509_crt_info+0x5ec>)
 8086cde:	4621      	mov	r1, r4
 8086ce0:	4628      	mov	r0, r5
 8086ce2:	f008 fb57 	bl	808f394 <snprintf>
 8086ce6:	2800      	cmp	r0, #0
 8086ce8:	f2c0 810c 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086cec:	4284      	cmp	r4, r0
 8086cee:	f240 8109 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086cf2:	4b86      	ldr	r3, [pc, #536]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086cf4:	1a24      	subs	r4, r4, r0
 8086cf6:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 8086cf8:	0770      	lsls	r0, r6, #29
 8086cfa:	d50d      	bpl.n	8086d18 <mbedtls_x509_crt_info+0x3dc>
 8086cfc:	4a8b      	ldr	r2, [pc, #556]	; (8086f2c <mbedtls_x509_crt_info+0x5f0>)
 8086cfe:	4621      	mov	r1, r4
 8086d00:	4628      	mov	r0, r5
 8086d02:	f008 fb47 	bl	808f394 <snprintf>
 8086d06:	2800      	cmp	r0, #0
 8086d08:	f2c0 80fc 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086d0c:	4284      	cmp	r4, r0
 8086d0e:	f240 80f9 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086d12:	4b7e      	ldr	r3, [pc, #504]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086d14:	1a24      	subs	r4, r4, r0
 8086d16:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 8086d18:	07b1      	lsls	r1, r6, #30
 8086d1a:	d50d      	bpl.n	8086d38 <mbedtls_x509_crt_info+0x3fc>
 8086d1c:	4a84      	ldr	r2, [pc, #528]	; (8086f30 <mbedtls_x509_crt_info+0x5f4>)
 8086d1e:	4621      	mov	r1, r4
 8086d20:	4628      	mov	r0, r5
 8086d22:	f008 fb37 	bl	808f394 <snprintf>
 8086d26:	2800      	cmp	r0, #0
 8086d28:	f2c0 80ec 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086d2c:	4284      	cmp	r4, r0
 8086d2e:	f240 80e9 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086d32:	4b76      	ldr	r3, [pc, #472]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086d34:	1a24      	subs	r4, r4, r0
 8086d36:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 8086d38:	07f2      	lsls	r2, r6, #31
 8086d3a:	d50c      	bpl.n	8086d56 <mbedtls_x509_crt_info+0x41a>
 8086d3c:	4a7d      	ldr	r2, [pc, #500]	; (8086f34 <mbedtls_x509_crt_info+0x5f8>)
 8086d3e:	4621      	mov	r1, r4
 8086d40:	4628      	mov	r0, r5
 8086d42:	f008 fb27 	bl	808f394 <snprintf>
 8086d46:	2800      	cmp	r0, #0
 8086d48:	f2c0 80dc 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086d4c:	4284      	cmp	r4, r0
 8086d4e:	f240 80d9 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086d52:	1a24      	subs	r4, r4, r0
 8086d54:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 8086d56:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8086d5a:	075e      	lsls	r6, r3, #29
 8086d5c:	f140 8096 	bpl.w	8086e8c <mbedtls_x509_crt_info+0x550>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 8086d60:	464b      	mov	r3, r9
 8086d62:	4a75      	ldr	r2, [pc, #468]	; (8086f38 <mbedtls_x509_crt_info+0x5fc>)
 8086d64:	4621      	mov	r1, r4
 8086d66:	4628      	mov	r0, r5
 8086d68:	f008 fb14 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086d6c:	2800      	cmp	r0, #0
 8086d6e:	f2c0 80c9 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086d72:	42a0      	cmp	r0, r4
 8086d74:	f080 80c6 	bcs.w	8086f04 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 8086d78:	f8d8 6104 	ldr.w	r6, [r8, #260]	; 0x104
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086d7c:	1a24      	subs	r4, r4, r0
 8086d7e:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8086d80:	0630      	lsls	r0, r6, #24
 8086d82:	4b64      	ldr	r3, [pc, #400]	; (8086f14 <mbedtls_x509_crt_info+0x5d8>)
 8086d84:	d50d      	bpl.n	8086da2 <mbedtls_x509_crt_info+0x466>
 8086d86:	4a6d      	ldr	r2, [pc, #436]	; (8086f3c <mbedtls_x509_crt_info+0x600>)
 8086d88:	4621      	mov	r1, r4
 8086d8a:	4628      	mov	r0, r5
 8086d8c:	f008 fb02 	bl	808f394 <snprintf>
 8086d90:	2800      	cmp	r0, #0
 8086d92:	f2c0 80b7 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086d96:	4284      	cmp	r4, r0
 8086d98:	f240 80b4 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086d9c:	4b5b      	ldr	r3, [pc, #364]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086d9e:	1a24      	subs	r4, r4, r0
 8086da0:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 8086da2:	0671      	lsls	r1, r6, #25
 8086da4:	d50d      	bpl.n	8086dc2 <mbedtls_x509_crt_info+0x486>
 8086da6:	4a66      	ldr	r2, [pc, #408]	; (8086f40 <mbedtls_x509_crt_info+0x604>)
 8086da8:	4621      	mov	r1, r4
 8086daa:	4628      	mov	r0, r5
 8086dac:	f008 faf2 	bl	808f394 <snprintf>
 8086db0:	2800      	cmp	r0, #0
 8086db2:	f2c0 80a7 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086db6:	4284      	cmp	r4, r0
 8086db8:	f240 80a4 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086dbc:	4b53      	ldr	r3, [pc, #332]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086dbe:	1a24      	subs	r4, r4, r0
 8086dc0:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 8086dc2:	06b2      	lsls	r2, r6, #26
 8086dc4:	d50d      	bpl.n	8086de2 <mbedtls_x509_crt_info+0x4a6>
 8086dc6:	4a5f      	ldr	r2, [pc, #380]	; (8086f44 <mbedtls_x509_crt_info+0x608>)
 8086dc8:	4621      	mov	r1, r4
 8086dca:	4628      	mov	r0, r5
 8086dcc:	f008 fae2 	bl	808f394 <snprintf>
 8086dd0:	2800      	cmp	r0, #0
 8086dd2:	f2c0 8097 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086dd6:	4284      	cmp	r4, r0
 8086dd8:	f240 8094 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086ddc:	4b4b      	ldr	r3, [pc, #300]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086dde:	1a24      	subs	r4, r4, r0
 8086de0:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 8086de2:	06f0      	lsls	r0, r6, #27
 8086de4:	d50d      	bpl.n	8086e02 <mbedtls_x509_crt_info+0x4c6>
 8086de6:	4a58      	ldr	r2, [pc, #352]	; (8086f48 <mbedtls_x509_crt_info+0x60c>)
 8086de8:	4621      	mov	r1, r4
 8086dea:	4628      	mov	r0, r5
 8086dec:	f008 fad2 	bl	808f394 <snprintf>
 8086df0:	2800      	cmp	r0, #0
 8086df2:	f2c0 8087 	blt.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086df6:	4284      	cmp	r4, r0
 8086df8:	f240 8084 	bls.w	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086dfc:	4b43      	ldr	r3, [pc, #268]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086dfe:	1a24      	subs	r4, r4, r0
 8086e00:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 8086e02:	0731      	lsls	r1, r6, #28
 8086e04:	d50b      	bpl.n	8086e1e <mbedtls_x509_crt_info+0x4e2>
 8086e06:	4a51      	ldr	r2, [pc, #324]	; (8086f4c <mbedtls_x509_crt_info+0x610>)
 8086e08:	4621      	mov	r1, r4
 8086e0a:	4628      	mov	r0, r5
 8086e0c:	f008 fac2 	bl	808f394 <snprintf>
 8086e10:	2800      	cmp	r0, #0
 8086e12:	db77      	blt.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086e14:	4284      	cmp	r4, r0
 8086e16:	d975      	bls.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086e18:	4b3c      	ldr	r3, [pc, #240]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086e1a:	1a24      	subs	r4, r4, r0
 8086e1c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 8086e1e:	0772      	lsls	r2, r6, #29
 8086e20:	d50b      	bpl.n	8086e3a <mbedtls_x509_crt_info+0x4fe>
 8086e22:	4a4b      	ldr	r2, [pc, #300]	; (8086f50 <mbedtls_x509_crt_info+0x614>)
 8086e24:	4621      	mov	r1, r4
 8086e26:	4628      	mov	r0, r5
 8086e28:	f008 fab4 	bl	808f394 <snprintf>
 8086e2c:	2800      	cmp	r0, #0
 8086e2e:	db69      	blt.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086e30:	4284      	cmp	r4, r0
 8086e32:	d967      	bls.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086e34:	4b35      	ldr	r3, [pc, #212]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086e36:	1a24      	subs	r4, r4, r0
 8086e38:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 8086e3a:	07b0      	lsls	r0, r6, #30
 8086e3c:	d50b      	bpl.n	8086e56 <mbedtls_x509_crt_info+0x51a>
 8086e3e:	4a45      	ldr	r2, [pc, #276]	; (8086f54 <mbedtls_x509_crt_info+0x618>)
 8086e40:	4621      	mov	r1, r4
 8086e42:	4628      	mov	r0, r5
 8086e44:	f008 faa6 	bl	808f394 <snprintf>
 8086e48:	2800      	cmp	r0, #0
 8086e4a:	db5b      	blt.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086e4c:	4284      	cmp	r4, r0
 8086e4e:	d959      	bls.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086e50:	4b2e      	ldr	r3, [pc, #184]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086e52:	1a24      	subs	r4, r4, r0
 8086e54:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 8086e56:	07f1      	lsls	r1, r6, #31
 8086e58:	d50b      	bpl.n	8086e72 <mbedtls_x509_crt_info+0x536>
 8086e5a:	4a3f      	ldr	r2, [pc, #252]	; (8086f58 <mbedtls_x509_crt_info+0x61c>)
 8086e5c:	4621      	mov	r1, r4
 8086e5e:	4628      	mov	r0, r5
 8086e60:	f008 fa98 	bl	808f394 <snprintf>
 8086e64:	2800      	cmp	r0, #0
 8086e66:	db4d      	blt.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086e68:	4284      	cmp	r4, r0
 8086e6a:	d94b      	bls.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086e6c:	4b27      	ldr	r3, [pc, #156]	; (8086f0c <mbedtls_x509_crt_info+0x5d0>)
 8086e6e:	1a24      	subs	r4, r4, r0
 8086e70:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 8086e72:	0432      	lsls	r2, r6, #16
 8086e74:	d50a      	bpl.n	8086e8c <mbedtls_x509_crt_info+0x550>
 8086e76:	4a39      	ldr	r2, [pc, #228]	; (8086f5c <mbedtls_x509_crt_info+0x620>)
 8086e78:	4621      	mov	r1, r4
 8086e7a:	4628      	mov	r0, r5
 8086e7c:	f008 fa8a 	bl	808f394 <snprintf>
 8086e80:	2800      	cmp	r0, #0
 8086e82:	db3f      	blt.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086e84:	4284      	cmp	r4, r0
 8086e86:	d93d      	bls.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086e88:	1a24      	subs	r4, r4, r0
 8086e8a:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 8086e8c:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8086e90:	051b      	lsls	r3, r3, #20
 8086e92:	d52b      	bpl.n	8086eec <mbedtls_x509_crt_info+0x5b0>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 8086e94:	464b      	mov	r3, r9
 8086e96:	4a32      	ldr	r2, [pc, #200]	; (8086f60 <mbedtls_x509_crt_info+0x624>)
 8086e98:	4621      	mov	r1, r4
 8086e9a:	4628      	mov	r0, r5
 8086e9c:	f008 fa7a 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086ea0:	2800      	cmp	r0, #0
 8086ea2:	db2f      	blt.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086ea4:	42a0      	cmp	r0, r4
 8086ea6:	d22d      	bcs.n	8086f04 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_ext_key_usage( &p, &n,
 8086ea8:	f508 7684 	add.w	r6, r8, #264	; 0x108
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
 8086eac:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8086f70 <mbedtls_x509_crt_info+0x634>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
 8086eb0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8086f14 <mbedtls_x509_crt_info+0x5d8>
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
 8086eb4:	1a24      	subs	r4, r4, r0
    char *p = *buf;
 8086eb6:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 8086eb8:	a906      	add	r1, sp, #24
 8086eba:	4630      	mov	r0, r6
 8086ebc:	f7fc fde4 	bl	8083a88 <mbedtls_oid_get_extended_key_usage>
 8086ec0:	b108      	cbz	r0, 8086ec6 <mbedtls_x509_crt_info+0x58a>
            desc = "???";
 8086ec2:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8086ec6:	9b06      	ldr	r3, [sp, #24]
 8086ec8:	4a26      	ldr	r2, [pc, #152]	; (8086f64 <mbedtls_x509_crt_info+0x628>)
 8086eca:	9300      	str	r3, [sp, #0]
 8086ecc:	4621      	mov	r1, r4
 8086ece:	4643      	mov	r3, r8
 8086ed0:	4628      	mov	r0, r5
 8086ed2:	f008 fa5f 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086ed6:	2800      	cmp	r0, #0
 8086ed8:	db14      	blt.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086eda:	42a0      	cmp	r0, r4
 8086edc:	d212      	bcs.n	8086f04 <mbedtls_x509_crt_info+0x5c8>

        sep = ", ";

        cur = cur->next;
 8086ede:	68f6      	ldr	r6, [r6, #12]
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086ee0:	1a24      	subs	r4, r4, r0
 8086ee2:	4405      	add	r5, r0

        sep = ", ";
 8086ee4:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8086f0c <mbedtls_x509_crt_info+0x5d0>
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
 8086ee8:	2e00      	cmp	r6, #0
 8086eea:	d1e5      	bne.n	8086eb8 <mbedtls_x509_crt_info+0x57c>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
 8086eec:	4a1e      	ldr	r2, [pc, #120]	; (8086f68 <mbedtls_x509_crt_info+0x62c>)
 8086eee:	4621      	mov	r1, r4
 8086ef0:	4628      	mov	r0, r5
 8086ef2:	f008 fa4f 	bl	808f394 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086ef6:	2800      	cmp	r0, #0
 8086ef8:	db04      	blt.n	8086f04 <mbedtls_x509_crt_info+0x5c8>
 8086efa:	4284      	cmp	r4, r0
 8086efc:	d902      	bls.n	8086f04 <mbedtls_x509_crt_info+0x5c8>

    return( (int) ( size - n ) );
 8086efe:	1a20      	subs	r0, r4, r0
 8086f00:	1a38      	subs	r0, r7, r0
 8086f02:	e000      	b.n	8086f06 <mbedtls_x509_crt_info+0x5ca>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 8086f04:	4819      	ldr	r0, [pc, #100]	; (8086f6c <mbedtls_x509_crt_info+0x630>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
 8086f06:	b00d      	add	sp, #52	; 0x34
 8086f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086f0c:	08091ccc 	.word	0x08091ccc
 8086f10:	08092132 	.word	0x08092132
 8086f14:	08090e20 	.word	0x08090e20
 8086f18:	0809214a 	.word	0x0809214a
 8086f1c:	08092157 	.word	0x08092157
 8086f20:	08092164 	.word	0x08092164
 8086f24:	0809216c 	.word	0x0809216c
 8086f28:	0809217d 	.word	0x0809217d
 8086f2c:	08092188 	.word	0x08092188
 8086f30:	08092191 	.word	0x08092191
 8086f34:	0809219c 	.word	0x0809219c
 8086f38:	080921b0 	.word	0x080921b0
 8086f3c:	080921c8 	.word	0x080921c8
 8086f40:	080921dc 	.word	0x080921dc
 8086f44:	080921ee 	.word	0x080921ee
 8086f48:	08092201 	.word	0x08092201
 8086f4c:	08092215 	.word	0x08092215
 8086f50:	08092225 	.word	0x08092225
 8086f54:	08092235 	.word	0x08092235
 8086f58:	08092240 	.word	0x08092240
 8086f5c:	08092250 	.word	0x08092250
 8086f60:	08092260 	.word	0x08092260
 8086f64:	08092278 	.word	0x08092278
 8086f68:	08090f80 	.word	0x08090f80
 8086f6c:	ffffd680 	.word	0xffffd680
 8086f70:	08091ce5 	.word	0x08091ce5

08086f74 <mbedtls_x509_crt_verify_info>:
    { 0, NULL }
};

int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
                          uint32_t flags )
{
 8086f74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8086f78:	4607      	mov	r7, r0
 8086f7a:	460d      	mov	r5, r1
 8086f7c:	4691      	mov	r9, r2
 8086f7e:	4698      	mov	r8, r3
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;
 8086f80:	460c      	mov	r4, r1
 8086f82:	4e18      	ldr	r6, [pc, #96]	; (8086fe4 <mbedtls_x509_crt_verify_info+0x70>)

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 8086f84:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8086f88:	b1cb      	cbz	r3, 8086fbe <mbedtls_x509_crt_verify_info+0x4a>
    {
        if( ( flags & cur->code ) == 0 )
 8086f8a:	f856 2c08 	ldr.w	r2, [r6, #-8]
 8086f8e:	ea18 0f02 	tst.w	r8, r2
 8086f92:	d012      	beq.n	8086fba <mbedtls_x509_crt_verify_info+0x46>
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8086f94:	9300      	str	r3, [sp, #0]
 8086f96:	4a14      	ldr	r2, [pc, #80]	; (8086fe8 <mbedtls_x509_crt_verify_info+0x74>)
 8086f98:	464b      	mov	r3, r9
 8086f9a:	4621      	mov	r1, r4
 8086f9c:	4638      	mov	r0, r7
 8086f9e:	f008 f9f9 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086fa2:	2800      	cmp	r0, #0
 8086fa4:	da01      	bge.n	8086faa <mbedtls_x509_crt_verify_info+0x36>
 8086fa6:	4811      	ldr	r0, [pc, #68]	; (8086fec <mbedtls_x509_crt_verify_info+0x78>)
 8086fa8:	e018      	b.n	8086fdc <mbedtls_x509_crt_verify_info+0x68>
 8086faa:	4284      	cmp	r4, r0
 8086fac:	d9fb      	bls.n	8086fa6 <mbedtls_x509_crt_verify_info+0x32>
        flags ^= cur->code;
 8086fae:	f856 3c08 	ldr.w	r3, [r6, #-8]
    {
        if( ( flags & cur->code ) == 0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086fb2:	1a24      	subs	r4, r4, r0
 8086fb4:	4407      	add	r7, r0
        flags ^= cur->code;
 8086fb6:	ea88 0803 	eor.w	r8, r8, r3
 8086fba:	3608      	adds	r6, #8
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 8086fbc:	e7e2      	b.n	8086f84 <mbedtls_x509_crt_verify_info+0x10>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
        flags ^= cur->code;
    }

    if( flags != 0 )
 8086fbe:	f1b8 0f00 	cmp.w	r8, #0
 8086fc2:	d00a      	beq.n	8086fda <mbedtls_x509_crt_verify_info+0x66>
    {
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
                                       "(this should not happen)\n", prefix );
 8086fc4:	464b      	mov	r3, r9
 8086fc6:	4a0a      	ldr	r2, [pc, #40]	; (8086ff0 <mbedtls_x509_crt_verify_info+0x7c>)
 8086fc8:	4621      	mov	r1, r4
 8086fca:	4638      	mov	r0, r7
 8086fcc:	f008 f9e2 	bl	808f394 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086fd0:	2800      	cmp	r0, #0
 8086fd2:	dbe8      	blt.n	8086fa6 <mbedtls_x509_crt_verify_info+0x32>
 8086fd4:	4284      	cmp	r4, r0
 8086fd6:	d9e6      	bls.n	8086fa6 <mbedtls_x509_crt_verify_info+0x32>
 8086fd8:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 8086fda:	1b28      	subs	r0, r5, r4
}
 8086fdc:	b003      	add	sp, #12
 8086fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086fe2:	bf00      	nop
 8086fe4:	08091f1c 	.word	0x08091f1c
 8086fe8:	0809227d 	.word	0x0809227d
 8086fec:	ffffd680 	.word	0xffffd680
 8086ff0:	08092283 	.word	0x08092283

08086ff4 <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 8086ff4:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 8086ff8:	f013 0304 	ands.w	r3, r3, #4
 8086ffc:	d01a      	beq.n	8087034 <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 8086ffe:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 8087002:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 8087006:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
 808700a:	f023 0301 	bic.w	r3, r3, #1
 808700e:	f020 0001 	bic.w	r0, r0, #1
 8087012:	400b      	ands	r3, r1
 8087014:	4298      	cmp	r0, r3
 8087016:	d10c      	bne.n	8087032 <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8087018:	f248 0301 	movw	r3, #32769	; 0x8001
 808701c:	f248 0001 	movw	r0, #32769	; 0x8001
 8087020:	430a      	orrs	r2, r1
 8087022:	4013      	ands	r3, r2
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8087024:	4a04      	ldr	r2, [pc, #16]	; (8087038 <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8087026:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8087028:	4298      	cmp	r0, r3
 808702a:	bf14      	ite	ne
 808702c:	4613      	movne	r3, r2
 808702e:	2300      	moveq	r3, #0
 8087030:	e000      	b.n	8087034 <mbedtls_x509_crt_check_key_usage+0x40>
 8087032:	4b01      	ldr	r3, [pc, #4]	; (8087038 <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
 8087034:	4618      	mov	r0, r3
 8087036:	4770      	bx	lr
 8087038:	ffffd800 	.word	0xffffd800

0808703c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 808703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087040:	4606      	mov	r6, r0
 8087042:	460d      	mov	r5, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8087044:	304c      	adds	r0, #76	; 0x4c
 8087046:	316c      	adds	r1, #108	; 0x6c
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 8087048:	4617      	mov	r7, r2
 808704a:	4698      	mov	r8, r3
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 808704c:	f7ff fbdb 	bl	8086806 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 8087050:	4604      	mov	r4, r0
 8087052:	b9d8      	cbnz	r0, 808708c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 8087054:	b177      	cbz	r7, 8087074 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x38>
 8087056:	69af      	ldr	r7, [r5, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 8087058:	f1b8 0f00 	cmp.w	r8, #0
 808705c:	d008      	beq.n	8087070 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
 808705e:	6872      	ldr	r2, [r6, #4]
    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 8087060:	686b      	ldr	r3, [r5, #4]
 8087062:	429a      	cmp	r2, r3
 8087064:	d104      	bne.n	8087070 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 8087066:	68a9      	ldr	r1, [r5, #8]
 8087068:	68b0      	ldr	r0, [r6, #8]
 808706a:	f009 fab3 	bl	80905d4 <memcmp>
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
        child->raw.len == parent->raw.len &&
 808706e:	b178      	cbz	r0, 8087090 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 8087070:	2f02      	cmp	r7, #2
 8087072:	dd0d      	ble.n	8087090 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
 8087074:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8087078:	b143      	cbz	r3, 808708c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 808707a:	2104      	movs	r1, #4
 808707c:	4628      	mov	r0, r5
 808707e:	f7ff ffb9 	bl	8086ff4 <mbedtls_x509_crt_check_key_usage>

    if( need_ca_bit && ! parent->ca_istrue )
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
 8087082:	3000      	adds	r0, #0
 8087084:	bf18      	it	ne
 8087086:	2001      	movne	r0, #1
 8087088:	4244      	negs	r4, r0
 808708a:	e001      	b.n	8087090 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
        return( -1 );
 808708c:	f04f 34ff 	mov.w	r4, #4294967295
        return( -1 );
    }
#endif

    return( 0 );
}
 8087090:	4620      	mov	r0, r4
 8087092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08087096 <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
 8087096:	b538      	push	{r3, r4, r5, lr}
 8087098:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 808709a:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
 808709e:	b1a4      	cbz	r4, 80870ca <mbedtls_x509_crt_is_revoked+0x34>
 80870a0:	6922      	ldr	r2, [r4, #16]
 80870a2:	b1a2      	cbz	r2, 80870ce <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
 80870a4:	6a2b      	ldr	r3, [r5, #32]
 80870a6:	429a      	cmp	r2, r3
 80870a8:	d001      	beq.n	80870ae <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
 80870aa:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
 80870ac:	e7f7      	b.n	808709e <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 80870ae:	6961      	ldr	r1, [r4, #20]
 80870b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80870b2:	f009 fa8f 	bl	80905d4 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
 80870b6:	2800      	cmp	r0, #0
 80870b8:	d1f7      	bne.n	80870aa <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 80870ba:	f104 0018 	add.w	r0, r4, #24
 80870be:	f7fe fac1 	bl	8085644 <mbedtls_x509_time_is_past>
 80870c2:	2800      	cmp	r0, #0
 80870c4:	d0f1      	beq.n	80870aa <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
 80870c6:	2001      	movs	r0, #1
 80870c8:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
 80870ca:	4620      	mov	r0, r4
 80870cc:	bd38      	pop	{r3, r4, r5, pc}
 80870ce:	4610      	mov	r0, r2
}
 80870d0:	bd38      	pop	{r3, r4, r5, pc}

080870d2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>:
 * Skip validation if no CRL for the given CA is present.
 */
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
                               mbedtls_x509_crl *crl_list,
                               const mbedtls_x509_crt_profile *profile )
{
 80870d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80870d6:	b099      	sub	sp, #100	; 0x64
 80870d8:	9005      	str	r0, [sp, #20]
 80870da:	4614      	mov	r4, r2
 80870dc:	461f      	mov	r7, r3
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
 80870de:	460e      	mov	r6, r1
 80870e0:	2900      	cmp	r1, #0
 80870e2:	d077      	beq.n	80871d4 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x102>
 80870e4:	2500      	movs	r5, #0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80870e6:	f04f 0a01 	mov.w	sl, #1
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
 80870ea:	2c00      	cmp	r4, #0
 80870ec:	d07a      	beq.n	80871e4 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
    {
        if( crl_list->version == 0 ||
 80870ee:	69a3      	ldr	r3, [r4, #24]
 80870f0:	2b00      	cmp	r3, #0
 80870f2:	d06c      	beq.n	80871ce <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 80870f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
 80870f6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80870f8:	429a      	cmp	r2, r3
 80870fa:	d168      	bne.n	80871ce <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 80870fc:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80870fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8087100:	f009 fa68 	bl	80905d4 <memcmp>
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8087104:	2800      	cmp	r0, #0
 8087106:	d162      	bne.n	80871ce <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 8087108:	2102      	movs	r1, #2
 808710a:	4630      	mov	r0, r6
 808710c:	f7ff ff72 	bl	8086ff4 <mbedtls_x509_crt_check_key_usage>
 8087110:	2800      	cmp	r0, #0
 8087112:	d143      	bne.n	808719c <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 8087114:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8087118:	683a      	ldr	r2, [r7, #0]
 808711a:	1e43      	subs	r3, r0, #1
 808711c:	fa0a f303 	lsl.w	r3, sl, r3
 8087120:	4213      	tst	r3, r2
 8087122:	d059      	beq.n	80871d8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x106>
 8087124:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8087128:	2201      	movs	r2, #1
 808712a:	3b01      	subs	r3, #1
 808712c:	fa02 f303 	lsl.w	r3, r2, r3
 8087130:	687a      	ldr	r2, [r7, #4]
 8087132:	4213      	tst	r3, r2
 8087134:	d053      	beq.n	80871de <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x10c>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8087136:	f7ff fa01 	bl	808653c <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 808713a:	f10d 0920 	add.w	r9, sp, #32
 808713e:	464b      	mov	r3, r9
 8087140:	6922      	ldr	r2, [r4, #16]
 8087142:	6961      	ldr	r1, [r4, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8087144:	4683      	mov	fp, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 8087146:	f7ff fa6b 	bl	8086620 <mbedtls_md>
 808714a:	bb38      	cbnz	r0, 808719c <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 808714c:	f106 08bc 	add.w	r8, r6, #188	; 0xbc
 8087150:	4642      	mov	r2, r8
 8087152:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 8087156:	f107 000c 	add.w	r0, r7, #12
 808715a:	f7ff fbdb 	bl	8086914 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 808715e:	b108      	cbz	r0, 8087164 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x92>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8087160:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8087164:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8087168:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 808716c:	9304      	str	r3, [sp, #16]
 808716e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8087172:	4658      	mov	r0, fp
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8087174:	9107      	str	r1, [sp, #28]
 8087176:	9306      	str	r3, [sp, #24]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8087178:	f7ff fb24 	bl	80867c4 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 808717c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8087180:	9b06      	ldr	r3, [sp, #24]
 8087182:	9203      	str	r2, [sp, #12]
 8087184:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 8087188:	9907      	ldr	r1, [sp, #28]
 808718a:	9202      	str	r2, [sp, #8]
 808718c:	9001      	str	r0, [sp, #4]
 808718e:	f8cd 9000 	str.w	r9, [sp]
 8087192:	4642      	mov	r2, r8
 8087194:	9804      	ldr	r0, [sp, #16]
 8087196:	f004 f98d 	bl	808b4b4 <mbedtls_pk_verify_ext>
 808719a:	b110      	cbz	r0, 80871a2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xd0>
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 808719c:	f045 0510 	orr.w	r5, r5, #16
            break;
 80871a0:	e020      	b.n	80871e4 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 80871a2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80871a6:	f7fe fa4d 	bl	8085644 <mbedtls_x509_time_is_past>
 80871aa:	b108      	cbz	r0, 80871b0 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xde>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 80871ac:	f045 0520 	orr.w	r5, r5, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 80871b0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80871b4:	f7fe fa48 	bl	8085648 <mbedtls_x509_time_is_future>
 80871b8:	b108      	cbz	r0, 80871be <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xec>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 80871ba:	f445 6580 	orr.w	r5, r5, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 80871be:	4621      	mov	r1, r4
 80871c0:	9805      	ldr	r0, [sp, #20]
 80871c2:	f7ff ff68 	bl	8087096 <mbedtls_x509_crt_is_revoked>
 80871c6:	b110      	cbz	r0, 80871ce <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 80871c8:	f045 0502 	orr.w	r5, r5, #2
            break;
 80871cc:	e00a      	b.n	80871e4 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        crl_list = crl_list->next;
 80871ce:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 80871d2:	e78a      	b.n	80870ea <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x18>
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );
 80871d4:	460d      	mov	r5, r1
 80871d6:	e005      	b.n	80871e4 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 80871d8:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 80871dc:	e7a2      	b.n	8087124 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x52>

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 80871de:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 80871e2:	e7a8      	b.n	8087136 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x64>

        crl_list = crl_list->next;
    }

    return( flags );
}
 80871e4:	4628      	mov	r0, r5
 80871e6:	b019      	add	sp, #100	; 0x64
 80871e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080871ec <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80871ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80871f0:	4604      	mov	r4, r0
 80871f2:	b09d      	sub	sp, #116	; 0x74
 80871f4:	4699      	mov	r9, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80871f6:	30a4      	adds	r0, #164	; 0xa4
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
    int ret;
    uint32_t ca_flags = 0;
 80871f8:	2300      	movs	r3, #0
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80871fa:	460d      	mov	r5, r1
 80871fc:	9206      	str	r2, [sp, #24]
 80871fe:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 8087202:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8087204:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
    int ret;
    uint32_t ca_flags = 0;
 8087208:	930b      	str	r3, [sp, #44]	; 0x2c
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 808720a:	f7fe fa1b 	bl	8085644 <mbedtls_x509_time_is_past>
 808720e:	b118      	cbz	r0, 8087218 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2c>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8087210:	6833      	ldr	r3, [r6, #0]
 8087212:	f043 0301 	orr.w	r3, r3, #1
 8087216:	6033      	str	r3, [r6, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8087218:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 808721c:	f7fe fa14 	bl	8085648 <mbedtls_x509_time_is_future>
 8087220:	b118      	cbz	r0, 808722a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x3e>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8087222:	6833      	ldr	r3, [r6, #0]
 8087224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8087228:	6033      	str	r3, [r6, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 808722a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 808722e:	1e5a      	subs	r2, r3, #1
 8087230:	2301      	movs	r3, #1
 8087232:	4093      	lsls	r3, r2
 8087234:	f8d9 2000 	ldr.w	r2, [r9]
 8087238:	4213      	tst	r3, r2
 808723a:	f000 80c0 	beq.w	80873be <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d2>
 808723e:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8087242:	1e5a      	subs	r2, r3, #1
 8087244:	2301      	movs	r3, #1
 8087246:	4093      	lsls	r3, r2
 8087248:	f8d9 2004 	ldr.w	r2, [r9, #4]
 808724c:	4213      	tst	r3, r2
 808724e:	f000 80bb 	beq.w	80873c8 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8087252:	6833      	ldr	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8087254:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8087258:	f043 0308 	orr.w	r3, r3, #8
 808725c:	6033      	str	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 808725e:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 8087262:	f7ff f96b 	bl	808653c <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8087266:	465b      	mov	r3, fp
 8087268:	6922      	ldr	r2, [r4, #16]
 808726a:	6961      	ldr	r1, [r4, #20]
    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 808726c:	9005      	str	r0, [sp, #20]
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 808726e:	f7ff f9d7 	bl	8086620 <mbedtls_md>
 8087272:	2800      	cmp	r0, #0
 8087274:	d16d      	bne.n	8087352 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
 8087276:	4607      	mov	r7, r0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8087278:	f8cd b01c 	str.w	fp, [sp, #28]
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 808727c:	b915      	cbnz	r5, 8087284 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x98>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 808727e:	2f00      	cmp	r7, #0
 8087280:	d14c      	bne.n	808731c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x130>
 8087282:	e066      	b.n	8087352 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 8087284:	fab8 f388 	clz	r3, r8
 8087288:	2201      	movs	r2, #1
 808728a:	095b      	lsrs	r3, r3, #5
 808728c:	4629      	mov	r1, r5
 808728e:	4620      	mov	r0, r4
 8087290:	f7ff fed4 	bl	808703c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8087294:	2800      	cmp	r0, #0
 8087296:	d13e      	bne.n	8087316 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8087298:	6c62      	ldr	r2, [r4, #68]	; 0x44
 808729a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
            continue;

        check_path_cnt = path_cnt + 1;
 808729c:	f108 0b01 	add.w	fp, r8, #1

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 80872a0:	429a      	cmp	r2, r3
 80872a2:	d106      	bne.n	80872b2 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xc6>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 80872a4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80872a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80872a8:	f009 f994 	bl	80905d4 <memcmp>
                    child->subject_raw.len ) == 0 )
        {
            check_path_cnt--;
 80872ac:	2800      	cmp	r0, #0
 80872ae:	bf08      	it	eq
 80872b0:	46c3      	moveq	fp, r8
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
 80872b2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80872b6:	2b00      	cmp	r3, #0
 80872b8:	dd04      	ble.n	80872c4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xd8>
 80872ba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80872bc:	ebc2 0b0b 	rsb	fp, r2, fp
 80872c0:	455b      	cmp	r3, fp
 80872c2:	db28      	blt.n	8087316 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80872c4:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 80872c8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80872cc:	9805      	ldr	r0, [sp, #20]
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80872ce:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 80872d2:	9109      	str	r1, [sp, #36]	; 0x24
 80872d4:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80872d6:	f7ff fa75 	bl	80867c4 <mbedtls_md_get_size>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80872da:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80872de:	9b07      	ldr	r3, [sp, #28]
 80872e0:	9203      	str	r2, [sp, #12]
 80872e2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80872e6:	9001      	str	r0, [sp, #4]
 80872e8:	9202      	str	r2, [sp, #8]
 80872ea:	9300      	str	r3, [sp, #0]
 80872ec:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
 80872f0:	9b08      	ldr	r3, [sp, #32]
 80872f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80872f4:	4658      	mov	r0, fp
 80872f6:	f004 f8dd 	bl	808b4b4 <mbedtls_pk_verify_ext>
 80872fa:	b960      	cbnz	r0, 8087316 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 80872fc:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8087300:	f7fe f9a0 	bl	8085644 <mbedtls_x509_time_is_past>
 8087304:	b920      	cbnz	r0, 8087310 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x124>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8087306:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 808730a:	f7fe f99d 	bl	8085648 <mbedtls_x509_time_is_future>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 808730e:	b130      	cbz	r0, 808731e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
        {
            if ( future_past_ca == NULL )
 8087310:	2f00      	cmp	r7, #0
 8087312:	bf08      	it	eq
 8087314:	462f      	moveq	r7, r5
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8087316:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 808731a:	e7af      	b.n	808727c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x90>
 808731c:	463d      	mov	r5, r7
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 808731e:	6833      	ldr	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8087320:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8087324:	f023 0308 	bic.w	r3, r3, #8
 8087328:	6033      	str	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 808732a:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 808732e:	f109 000c 	add.w	r0, r9, #12
 8087332:	f7ff faef 	bl	8086914 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8087336:	b118      	cbz	r0, 8087340 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x154>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8087338:	6833      	ldr	r3, [r6, #0]
 808733a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808733e:	6033      	str	r3, [r6, #0]
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 8087340:	6c62      	ldr	r2, [r4, #68]	; 0x44
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
 8087342:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8087344:	429a      	cmp	r2, r3
 8087346:	d10d      	bne.n	8087364 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8087348:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 808734a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 808734c:	f009 f942 	bl	80905d4 <memcmp>
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 8087350:	b940      	cbnz	r0, 8087364 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 8087352:	f1ba 0f00 	cmp.w	sl, #0
 8087356:	d12a      	bne.n	80873ae <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1c2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 8087358:	6832      	ldr	r2, [r6, #0]
 808735a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 808735c:	2000      	movs	r0, #0
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 808735e:	4313      	orrs	r3, r2
 8087360:	6033      	str	r3, [r6, #0]

    return( 0 );
 8087362:	e036      	b.n	80873d2 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
                  child->subject_raw.len ) != 0 ) )
    {
#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the chain's top crt */
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 8087364:	464b      	mov	r3, r9
 8087366:	9a06      	ldr	r2, [sp, #24]
 8087368:	4629      	mov	r1, r5
 808736a:	4620      	mov	r0, r4
 808736c:	f7ff feb1 	bl	80870d2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 8087370:	6833      	ldr	r3, [r6, #0]
 8087372:	4318      	orrs	r0, r3
 8087374:	6030      	str	r0, [r6, #0]
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 8087376:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 808737a:	f7fe f963 	bl	8085644 <mbedtls_x509_time_is_past>
 808737e:	b118      	cbz	r0, 8087388 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x19c>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8087380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8087382:	f043 0301 	orr.w	r3, r3, #1
 8087386:	930b      	str	r3, [sp, #44]	; 0x2c

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8087388:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 808738c:	f7fe f95c 	bl	8085648 <mbedtls_x509_time_is_future>
 8087390:	b118      	cbz	r0, 808739a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1ae>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8087392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8087394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8087398:	930b      	str	r3, [sp, #44]	; 0x2c

        if( NULL != f_vrfy )
 808739a:	f1ba 0f00 	cmp.w	sl, #0
 808739e:	d0db      	beq.n	8087358 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 80873a0:	ab0b      	add	r3, sp, #44	; 0x2c
 80873a2:	f108 0201 	add.w	r2, r8, #1
 80873a6:	4629      	mov	r1, r5
 80873a8:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80873aa:	47d0      	blx	sl
 80873ac:	b988      	cbnz	r0, 80873d2 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 80873ae:	4633      	mov	r3, r6
 80873b0:	4642      	mov	r2, r8
 80873b2:	4621      	mov	r1, r4
 80873b4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80873b6:	47d0      	blx	sl
 80873b8:	2800      	cmp	r0, #0
 80873ba:	d0cd      	beq.n	8087358 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
 80873bc:	e009      	b.n	80873d2 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 80873be:	6833      	ldr	r3, [r6, #0]
 80873c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80873c4:	6033      	str	r3, [r6, #0]
 80873c6:	e73a      	b.n	808723e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80873c8:	6833      	ldr	r3, [r6, #0]
 80873ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80873ce:	6033      	str	r3, [r6, #0]
 80873d0:	e73f      	b.n	8087252 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x66>
    }

    *flags |= ca_flags;

    return( 0 );
}
 80873d2:	b01d      	add	sp, #116	; 0x74
 80873d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080873d8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80873d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80873dc:	b09d      	sub	sp, #116	; 0x74
 80873de:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80873e0:	469a      	mov	sl, r3
    int ret;
    uint32_t parent_flags = 0;
 80873e2:	2300      	movs	r3, #0
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80873e4:	4605      	mov	r5, r0
 80873e6:	460f      	mov	r7, r1
 80873e8:	9206      	str	r2, [sp, #24]
 80873ea:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 80873ee:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    uint32_t parent_flags = 0;
 80873f0:	930b      	str	r3, [sp, #44]	; 0x2c
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 80873f2:	b146      	cbz	r6, 8087406 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2e>
 80873f4:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 80873f8:	304c      	adds	r0, #76	; 0x4c
 80873fa:	f7ff fa04 	bl	8086806 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 80873fe:	2800      	cmp	r0, #0
 8087400:	d07a      	beq.n	80874f8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x120>
        self_cnt++;

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 8087402:	2e07      	cmp	r6, #7
 8087404:	dc76      	bgt.n	80874f4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x11c>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8087406:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 808740a:	f7fe f91b 	bl	8085644 <mbedtls_x509_time_is_past>
 808740e:	b118      	cbz	r0, 8087418 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x40>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8087410:	6823      	ldr	r3, [r4, #0]
 8087412:	f043 0301 	orr.w	r3, r3, #1
 8087416:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8087418:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 808741c:	f7fe f914 	bl	8085648 <mbedtls_x509_time_is_future>
 8087420:	b118      	cbz	r0, 808742a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8087422:	6823      	ldr	r3, [r4, #0]
 8087424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8087428:	6023      	str	r3, [r4, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 808742a:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 808742e:	1e5a      	subs	r2, r3, #1
 8087430:	2301      	movs	r3, #1
 8087432:	4093      	lsls	r3, r2
 8087434:	f8d8 2000 	ldr.w	r2, [r8]
 8087438:	4213      	tst	r3, r2
 808743a:	d061      	beq.n	8087500 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x128>
 808743c:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 8087440:	1e5a      	subs	r2, r3, #1
 8087442:	2301      	movs	r3, #1
 8087444:	4093      	lsls	r3, r2
 8087446:	f8d8 2004 	ldr.w	r2, [r8, #4]
 808744a:	4213      	tst	r3, r2
 808744c:	d05d      	beq.n	808750a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 808744e:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
 8087452:	f7ff f873 	bl	808653c <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8087456:	ab0c      	add	r3, sp, #48	; 0x30
 8087458:	692a      	ldr	r2, [r5, #16]
 808745a:	6969      	ldr	r1, [r5, #20]
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 808745c:	4683      	mov	fp, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 808745e:	f7ff f8df 	bl	8086620 <mbedtls_md>
 8087462:	bb48      	cbnz	r0, 80874b8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe0>
        /* Note: this can't happen except after an internal error */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
    }
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 8087464:	f107 09bc 	add.w	r9, r7, #188	; 0xbc
 8087468:	464a      	mov	r2, r9
 808746a:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 808746e:	f108 000c 	add.w	r0, r8, #12
 8087472:	f7ff fa4f 	bl	8086914 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8087476:	b118      	cbz	r0, 8087480 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xa8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8087478:	6823      	ldr	r3, [r4, #0]
 808747a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808747e:	6023      	str	r3, [r4, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8087480:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 8087484:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 8087488:	9307      	str	r3, [sp, #28]
 808748a:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 808748e:	4658      	mov	r0, fp
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8087490:	9109      	str	r1, [sp, #36]	; 0x24
 8087492:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8087494:	f7ff f996 	bl	80867c4 <mbedtls_md_get_size>
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8087498:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 808749c:	9b08      	ldr	r3, [sp, #32]
 808749e:	9203      	str	r2, [sp, #12]
 80874a0:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 80874a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80874a6:	9202      	str	r2, [sp, #8]
 80874a8:	aa0c      	add	r2, sp, #48	; 0x30
 80874aa:	9001      	str	r0, [sp, #4]
 80874ac:	9200      	str	r2, [sp, #0]
 80874ae:	9807      	ldr	r0, [sp, #28]
 80874b0:	464a      	mov	r2, r9
 80874b2:	f003 ffff 	bl	808b4b4 <mbedtls_pk_verify_ext>
 80874b6:	b118      	cbz	r0, 80874c0 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe8>
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80874b8:	6823      	ldr	r3, [r4, #0]
 80874ba:	f043 0308 	orr.w	r3, r3, #8
 80874be:	6023      	str	r3, [r4, #0]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 80874c0:	4643      	mov	r3, r8
 80874c2:	4652      	mov	r2, sl
 80874c4:	4639      	mov	r1, r7
 80874c6:	4628      	mov	r0, r5
 80874c8:	f7ff fe03 	bl	80870d2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 80874cc:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 80874ce:	f8dd 9018 	ldr.w	r9, [sp, #24]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 80874d2:	4318      	orrs	r0, r3
 80874d4:	6020      	str	r0, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
         grandparent != NULL;
 80874d6:	f1b9 0f00 	cmp.w	r9, #0
 80874da:	d029      	beq.n	8087530 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x158>
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
 80874dc:	fab6 f386 	clz	r3, r6
 80874e0:	2200      	movs	r2, #0
 80874e2:	095b      	lsrs	r3, r3, #5
 80874e4:	4649      	mov	r1, r9
 80874e6:	4638      	mov	r0, r7
 80874e8:	f7ff fda8 	bl	808703c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80874ec:	b190      	cbz	r0, 8087514 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x13c>
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 80874ee:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 80874f2:	e7f0      	b.n	80874d6 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xfe>

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 80874f4:	4838      	ldr	r0, [pc, #224]	; (80875d8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x200>)
 80874f6:	e06b      	b.n	80875d0 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        self_cnt++;
 80874f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80874fa:	3301      	adds	r3, #1
 80874fc:	9328      	str	r3, [sp, #160]	; 0xa0
 80874fe:	e780      	b.n	8087402 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2a>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8087500:	6823      	ldr	r3, [r4, #0]
 8087502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8087506:	6023      	str	r3, [r4, #0]
 8087508:	e798      	b.n	808743c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x64>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 808750a:	6823      	ldr	r3, [r4, #0]
 808750c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8087510:	6023      	str	r3, [r4, #0]
 8087512:	e79c      	b.n	808744e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x76>
    }

    if( grandparent != NULL )
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
                                path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
 8087514:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8087516:	4652      	mov	r2, sl
 8087518:	9304      	str	r3, [sp, #16]
 808751a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 808751c:	4649      	mov	r1, r9
 808751e:	9303      	str	r3, [sp, #12]
 8087520:	ab0b      	add	r3, sp, #44	; 0x2c
 8087522:	9302      	str	r3, [sp, #8]
 8087524:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8087526:	9301      	str	r3, [sp, #4]
 8087528:	1c73      	adds	r3, r6, #1
 808752a:	9300      	str	r3, [sp, #0]
 808752c:	4643      	mov	r3, r8
 808752e:	e03b      	b.n	80875a8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d0>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8087530:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8087532:	f106 0b02 	add.w	fp, r6, #2
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 8087536:	f8d7 9130 	ldr.w	r9, [r7, #304]	; 0x130
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 808753a:	ebc3 0b0b 	rsb	fp, r3, fp
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
             grandparent != NULL;
 808753e:	f1b9 0f00 	cmp.w	r9, #0
 8087542:	d024      	beq.n	808758e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1b6>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8087544:	f8d9 3100 	ldr.w	r3, [r9, #256]	; 0x100
 8087548:	2b00      	cmp	r3, #0
 808754a:	dd01      	ble.n	8087550 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
 808754c:	455b      	cmp	r3, fp
 808754e:	db08      	blt.n	8087562 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x18a>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 8087550:	fab6 f386 	clz	r3, r6
 8087554:	2200      	movs	r2, #0
 8087556:	095b      	lsrs	r3, r3, #5
 8087558:	4649      	mov	r1, r9
 808755a:	4638      	mov	r0, r7
 808755c:	f7ff fd6e 	bl	808703c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8087560:	b110      	cbz	r0, 8087568 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x190>
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 8087562:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 8087566:	e7ea      	b.n	808753e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
                                         profile, path_cnt + 1, self_cnt, &parent_flags,
                                         f_vrfy, p_vrfy );
 8087568:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 808756a:	f8cd 8000 	str.w	r8, [sp]
 808756e:	9305      	str	r3, [sp, #20]
 8087570:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8087572:	9a06      	ldr	r2, [sp, #24]
 8087574:	9304      	str	r3, [sp, #16]
 8087576:	ab0b      	add	r3, sp, #44	; 0x2c
 8087578:	9303      	str	r3, [sp, #12]
 808757a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 808757c:	4649      	mov	r1, r9
 808757e:	9302      	str	r3, [sp, #8]
 8087580:	1c73      	adds	r3, r6, #1
 8087582:	9301      	str	r3, [sp, #4]
 8087584:	4638      	mov	r0, r7
 8087586:	4653      	mov	r3, sl
 8087588:	f7ff ff26 	bl	80873d8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 808758c:	e00f      	b.n	80875ae <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d6>
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
 808758e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8087590:	4652      	mov	r2, sl
 8087592:	9304      	str	r3, [sp, #16]
 8087594:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8087596:	9906      	ldr	r1, [sp, #24]
 8087598:	9303      	str	r3, [sp, #12]
 808759a:	ab0b      	add	r3, sp, #44	; 0x2c
 808759c:	9302      	str	r3, [sp, #8]
 808759e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80875a0:	9301      	str	r3, [sp, #4]
 80875a2:	1c73      	adds	r3, r6, #1
 80875a4:	9300      	str	r3, [sp, #0]
 80875a6:	4643      	mov	r3, r8
 80875a8:	4638      	mov	r0, r7
 80875aa:	f7ff fe1f 	bl	80871ec <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
            if( ret != 0 )
 80875ae:	b978      	cbnz	r0, 80875d0 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
                return( ret );
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
 80875b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80875b2:	b92b      	cbnz	r3, 80875c0 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e8>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 80875b4:	6822      	ldr	r2, [r4, #0]
 80875b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 80875b8:	2000      	movs	r0, #0
    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 80875ba:	4313      	orrs	r3, r2
 80875bc:	6023      	str	r3, [r4, #0]

    return( 0 );
 80875be:	e007      	b.n	80875d0 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 80875c0:	4629      	mov	r1, r5
 80875c2:	4623      	mov	r3, r4
 80875c4:	4632      	mov	r2, r6
 80875c6:	982b      	ldr	r0, [sp, #172]	; 0xac
 80875c8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80875ca:	47a8      	blx	r5
 80875cc:	2800      	cmp	r0, #0
 80875ce:	d0f1      	beq.n	80875b4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
            return( ret );

    *flags |= parent_flags;

    return( 0 );
}
 80875d0:	b01d      	add	sp, #116	; 0x74
 80875d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80875d6:	bf00      	nop
 80875d8:	ffffd000 	.word	0xffffd000

080875dc <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80875dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80875e0:	b089      	sub	sp, #36	; 0x24
 80875e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80875e4:	4693      	mov	fp, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 80875e6:	2200      	movs	r2, #0
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80875e8:	4605      	mov	r5, r0
 80875ea:	468a      	mov	sl, r1
 80875ec:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 80875f0:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
 80875f2:	461f      	mov	r7, r3
 80875f4:	2b00      	cmp	r3, #0
 80875f6:	d06e      	beq.n	80876d6 <mbedtls_x509_crt_verify_with_profile+0xfa>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 80875f8:	f1b8 0f00 	cmp.w	r8, #0
 80875fc:	d048      	beq.n	8087690 <mbedtls_x509_crt_verify_with_profile+0xb4>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 80875fe:	4640      	mov	r0, r8
 8087600:	f009 f83d 	bl	809067e <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8087604:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    }

    if( cn != NULL )
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 8087608:	4681      	mov	r9, r0

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 808760a:	069b      	lsls	r3, r3, #26
 808760c:	d50d      	bpl.n	808762a <mbedtls_x509_crt_verify_with_profile+0x4e>
        {
            cur = &crt->subject_alt_names;
 808760e:	f105 06e8 	add.w	r6, r5, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 8087612:	6873      	ldr	r3, [r6, #4]
 8087614:	4599      	cmp	r9, r3
 8087616:	d12c      	bne.n	8087672 <mbedtls_x509_crt_verify_with_profile+0x96>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 8087618:	464a      	mov	r2, r9
 808761a:	68b1      	ldr	r1, [r6, #8]
 808761c:	4640      	mov	r0, r8
 808761e:	9307      	str	r3, [sp, #28]
 8087620:	f7ff f8db 	bl	80867da <_ZL15x509_memcasecmpPKvS0_j>
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 8087624:	9b07      	ldr	r3, [sp, #28]
 8087626:	bb20      	cbnz	r0, 8087672 <mbedtls_x509_crt_verify_with_profile+0x96>
 8087628:	e032      	b.n	8087690 <mbedtls_x509_crt_verify_with_profile+0xb4>
        goto exit;
    }

    if( cn != NULL )
    {
        name = &crt->subject;
 808762a:	f105 066c 	add.w	r6, r5, #108	; 0x6c
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 808762e:	6872      	ldr	r2, [r6, #4]
 8087630:	2a03      	cmp	r2, #3
 8087632:	d118      	bne.n	8087666 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8087634:	68b1      	ldr	r1, [r6, #8]
 8087636:	4855      	ldr	r0, [pc, #340]	; (808778c <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 8087638:	f008 ffcc 	bl	80905d4 <memcmp>
 808763c:	b998      	cbnz	r0, 8087666 <mbedtls_x509_crt_verify_with_profile+0x8a>
                {
                    if( name->val.len == cn_len &&
 808763e:	6933      	ldr	r3, [r6, #16]
 8087640:	4599      	cmp	r9, r3
 8087642:	d107      	bne.n	8087654 <mbedtls_x509_crt_verify_with_profile+0x78>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 8087644:	464a      	mov	r2, r9
 8087646:	4641      	mov	r1, r8
 8087648:	6970      	ldr	r0, [r6, #20]
 808764a:	9307      	str	r3, [sp, #28]
 808764c:	f7ff f8c5 	bl	80867da <_ZL15x509_memcasecmpPKvS0_j>
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
                {
                    if( name->val.len == cn_len &&
 8087650:	9b07      	ldr	r3, [sp, #28]
 8087652:	b1e8      	cbz	r0, 8087690 <mbedtls_x509_crt_verify_with_profile+0xb4>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8087654:	2b02      	cmp	r3, #2
 8087656:	d906      	bls.n	8087666 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8087658:	2202      	movs	r2, #2
 808765a:	494d      	ldr	r1, [pc, #308]	; (8087790 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 808765c:	6970      	ldr	r0, [r6, #20]
 808765e:	f008 ffb9 	bl	80905d4 <memcmp>
                {
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
 8087662:	2800      	cmp	r0, #0
 8087664:	d053      	beq.n	808770e <mbedtls_x509_crt_verify_with_profile+0x132>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
                        break;
                }

                name = name->next;
 8087666:	69b6      	ldr	r6, [r6, #24]
            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
        else
        {
            while( name != NULL )
 8087668:	2e00      	cmp	r6, #0
 808766a:	d1e0      	bne.n	808762e <mbedtls_x509_crt_verify_with_profile+0x52>

                cur = cur->next;
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 808766c:	2304      	movs	r3, #4
 808766e:	6023      	str	r3, [r4, #0]
 8087670:	e00e      	b.n	8087690 <mbedtls_x509_crt_verify_with_profile+0xb4>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8087672:	2b02      	cmp	r3, #2
 8087674:	d947      	bls.n	8087706 <mbedtls_x509_crt_verify_with_profile+0x12a>
 8087676:	2202      	movs	r2, #2
 8087678:	4945      	ldr	r1, [pc, #276]	; (8087790 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 808767a:	68b0      	ldr	r0, [r6, #8]
 808767c:	f008 ffaa 	bl	80905d4 <memcmp>
            {
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
 8087680:	2800      	cmp	r0, #0
 8087682:	d140      	bne.n	8087706 <mbedtls_x509_crt_verify_with_profile+0x12a>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 8087684:	4631      	mov	r1, r6
 8087686:	4640      	mov	r0, r8
 8087688:	f7ff f8fd 	bl	8086886 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 808768c:	2800      	cmp	r0, #0
 808768e:	d13a      	bne.n	8087706 <mbedtls_x509_crt_verify_with_profile+0x12a>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 8087690:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
 8087694:	4630      	mov	r0, r6
 8087696:	f003 ff73 	bl	808b580 <mbedtls_pk_get_type>
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 808769a:	2301      	movs	r3, #1
 808769c:	1e42      	subs	r2, r0, #1
 808769e:	4093      	lsls	r3, r2
 80876a0:	687a      	ldr	r2, [r7, #4]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 80876a2:	4601      	mov	r1, r0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80876a4:	4213      	tst	r3, r2
 80876a6:	d03a      	beq.n	808771e <mbedtls_x509_crt_verify_with_profile+0x142>
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 80876a8:	4632      	mov	r2, r6
 80876aa:	f107 000c 	add.w	r0, r7, #12
 80876ae:	f7ff f931 	bl	8086914 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80876b2:	b118      	cbz	r0, 80876bc <mbedtls_x509_crt_verify_with_profile+0xe0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80876b4:	6823      	ldr	r3, [r4, #0]
 80876b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80876ba:	6023      	str	r3, [r4, #0]
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80876bc:	4656      	mov	r6, sl

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80876be:	2e00      	cmp	r6, #0
 80876c0:	d03d      	beq.n	808773e <mbedtls_x509_crt_verify_with_profile+0x162>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 80876c2:	2301      	movs	r3, #1
 80876c4:	2200      	movs	r2, #0
 80876c6:	4631      	mov	r1, r6
 80876c8:	4628      	mov	r0, r5
 80876ca:	f7ff fcb7 	bl	808703c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80876ce:	b358      	cbz	r0, 8087728 <mbedtls_x509_crt_verify_with_profile+0x14c>

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80876d0:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80876d4:	e7f3      	b.n	80876be <mbedtls_x509_crt_verify_with_profile+0xe2>

    *flags = 0;

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 80876d6:	482f      	ldr	r0, [pc, #188]	; (8087794 <mbedtls_x509_crt_verify_with_profile+0x1b8>)
 80876d8:	e011      	b.n	80876fe <mbedtls_x509_crt_verify_with_profile+0x122>

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
                                         pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 80876da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80876dc:	9002      	str	r0, [sp, #8]
 80876de:	9305      	str	r3, [sp, #20]
 80876e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80876e2:	9001      	str	r0, [sp, #4]
 80876e4:	9304      	str	r3, [sp, #16]
 80876e6:	9403      	str	r4, [sp, #12]
 80876e8:	9700      	str	r7, [sp, #0]
 80876ea:	465b      	mov	r3, fp
 80876ec:	4652      	mov	r2, sl
 80876ee:	4631      	mov	r1, r6
 80876f0:	4628      	mov	r0, r5
 80876f2:	f7ff fe71 	bl	80873d8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>

exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 80876f6:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 80876fa:	d12e      	bne.n	808775a <mbedtls_x509_crt_verify_with_profile+0x17e>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 80876fc:	4826      	ldr	r0, [pc, #152]	; (8087798 <mbedtls_x509_crt_verify_with_profile+0x1bc>)

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
 80876fe:	f04f 33ff 	mov.w	r3, #4294967295
 8087702:	6023      	str	r3, [r4, #0]
        return( ret );
 8087704:	e03f      	b.n	8087786 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
                {
                    break;
                }

                cur = cur->next;
 8087706:	68f6      	ldr	r6, [r6, #12]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
 8087708:	2e00      	cmp	r6, #0
 808770a:	d182      	bne.n	8087612 <mbedtls_x509_crt_verify_with_profile+0x36>
 808770c:	e7ae      	b.n	808766c <mbedtls_x509_crt_verify_with_profile+0x90>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
 808770e:	f106 010c 	add.w	r1, r6, #12
 8087712:	4640      	mov	r0, r8
 8087714:	f7ff f8b7 	bl	8086886 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8087718:	2800      	cmp	r0, #0
 808771a:	d1a4      	bne.n	8087666 <mbedtls_x509_crt_verify_with_profile+0x8a>
 808771c:	e7b8      	b.n	8087690 <mbedtls_x509_crt_verify_with_profile+0xb4>

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 808771e:	6823      	ldr	r3, [r4, #0]
 8087720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8087724:	6023      	str	r3, [r4, #0]
 8087726:	e7bf      	b.n	80876a8 <mbedtls_x509_crt_verify_with_profile+0xcc>
    }

    if( parent != NULL )
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 8087728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808772a:	9402      	str	r4, [sp, #8]
 808772c:	9304      	str	r3, [sp, #16]
 808772e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8087730:	9001      	str	r0, [sp, #4]
 8087732:	9303      	str	r3, [sp, #12]
 8087734:	9000      	str	r0, [sp, #0]
 8087736:	463b      	mov	r3, r7
 8087738:	465a      	mov	r2, fp
 808773a:	4631      	mov	r1, r6
 808773c:	e01f      	b.n	808777e <mbedtls_x509_crt_verify_with_profile+0x1a2>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 808773e:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
 8087742:	b196      	cbz	r6, 808776a <mbedtls_x509_crt_verify_with_profile+0x18e>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8087744:	2301      	movs	r3, #1
 8087746:	2200      	movs	r2, #0
 8087748:	4631      	mov	r1, r6
 808774a:	4628      	mov	r0, r5
 808774c:	f7ff fc76 	bl	808703c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8087750:	2800      	cmp	r0, #0
 8087752:	d0c2      	beq.n	80876da <mbedtls_x509_crt_verify_with_profile+0xfe>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8087754:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8087758:	e7f3      	b.n	8087742 <mbedtls_x509_crt_verify_with_profile+0x166>
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
 808775a:	2800      	cmp	r0, #0
 808775c:	d1cf      	bne.n	80876fe <mbedtls_x509_crt_verify_with_profile+0x122>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 808775e:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
 8087760:	480e      	ldr	r0, [pc, #56]	; (808779c <mbedtls_x509_crt_verify_with_profile+0x1c0>)
 8087762:	2b00      	cmp	r3, #0
 8087764:	bf08      	it	eq
 8087766:	2000      	moveq	r0, #0
 8087768:	e00d      	b.n	8087786 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
                                       pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 808776a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808776c:	465a      	mov	r2, fp
 808776e:	9304      	str	r3, [sp, #16]
 8087770:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8087772:	4651      	mov	r1, sl
 8087774:	9303      	str	r3, [sp, #12]
 8087776:	463b      	mov	r3, r7
 8087778:	9402      	str	r4, [sp, #8]
 808777a:	9601      	str	r6, [sp, #4]
 808777c:	9600      	str	r6, [sp, #0]
 808777e:	4628      	mov	r0, r5
 8087780:	f7ff fd34 	bl	80871ec <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 8087784:	e7b7      	b.n	80876f6 <mbedtls_x509_crt_verify_with_profile+0x11a>

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
 8087786:	b009      	add	sp, #36	; 0x24
 8087788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808778c:	08091174 	.word	0x08091174
 8087790:	080922ae 	.word	0x080922ae
 8087794:	ffffd800 	.word	0xffffd800
 8087798:	ffffd000 	.word	0xffffd000
 808779c:	ffffd900 	.word	0xffffd900

080877a0 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 80877a0:	f44f 729a 	mov.w	r2, #308	; 0x134
 80877a4:	2100      	movs	r1, #0
 80877a6:	f008 bf4a 	b.w	809063e <memset>

080877aa <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 80877aa:	b570      	push	{r4, r5, r6, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 80877ac:	4605      	mov	r5, r0
 80877ae:	2800      	cmp	r0, #0
 80877b0:	d053      	beq.n	808785a <mbedtls_x509_crt_free+0xb0>
 80877b2:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 80877b4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80877b8:	f003 fdc5 	bl	808b346 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 80877bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 80877be:	b14a      	cbz	r2, 80877d4 <mbedtls_x509_crt_free+0x2a>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80877c0:	4610      	mov	r0, r2
 80877c2:	2120      	movs	r1, #32

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80877c4:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80877c6:	f7ff f800 	bl	80867ca <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 80877ca:	4610      	mov	r0, r2
 80877cc:	f007 fdca 	bl	808f364 <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80877d0:	4632      	mov	r2, r6
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
 80877d2:	e7f4      	b.n	80877be <mbedtls_x509_crt_free+0x14>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 80877d4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 80877d8:	b14a      	cbz	r2, 80877ee <mbedtls_x509_crt_free+0x44>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80877da:	4610      	mov	r0, r2
 80877dc:	2120      	movs	r1, #32

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80877de:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80877e0:	f7fe fff3 	bl	80867ca <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 80877e4:	4610      	mov	r0, r2
 80877e6:	f007 fdbd 	bl	808f364 <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80877ea:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
 80877ec:	e7f4      	b.n	80877d8 <mbedtls_x509_crt_free+0x2e>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 80877ee:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 80877f2:	b14a      	cbz	r2, 8087808 <mbedtls_x509_crt_free+0x5e>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80877f4:	4610      	mov	r0, r2
 80877f6:	2110      	movs	r1, #16

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80877f8:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80877fa:	f7fe ffe6 	bl	80867ca <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 80877fe:	4610      	mov	r0, r2
 8087800:	f007 fdb0 	bl	808f364 <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 8087804:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
 8087806:	e7f4      	b.n	80877f2 <mbedtls_x509_crt_free+0x48>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 8087808:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 808780c:	b14a      	cbz	r2, 8087822 <mbedtls_x509_crt_free+0x78>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 808780e:	4610      	mov	r0, r2
 8087810:	2110      	movs	r1, #16

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 8087812:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8087814:	f7fe ffd9 	bl	80867ca <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 8087818:	4610      	mov	r0, r2
 808781a:	f007 fda3 	bl	808f364 <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 808781e:	4632      	mov	r2, r6
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
 8087820:	e7f4      	b.n	808780c <mbedtls_x509_crt_free+0x62>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 8087822:	68a0      	ldr	r0, [r4, #8]
 8087824:	b128      	cbz	r0, 8087832 <mbedtls_x509_crt_free+0x88>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 8087826:	6861      	ldr	r1, [r4, #4]
 8087828:	f7fe ffcf 	bl	80867ca <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( cert_cur->raw.p );
 808782c:	68a0      	ldr	r0, [r4, #8]
 808782e:	f007 fd99 	bl	808f364 <free>
        }

        cert_cur = cert_cur->next;
 8087832:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 8087836:	2c00      	cmp	r4, #0
 8087838:	d1bc      	bne.n	80877b4 <mbedtls_x509_crt_free+0xa>
 808783a:	462a      	mov	r2, r5
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 808783c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8087840:	4610      	mov	r0, r2

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 8087842:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8087846:	f7fe ffc0 	bl	80867ca <_ZL15mbedtls_zeroizePvj>
        if( cert_prv != crt )
 808784a:	42aa      	cmp	r2, r5
 808784c:	d002      	beq.n	8087854 <mbedtls_x509_crt_free+0xaa>
            mbedtls_free( cert_prv );
 808784e:	4610      	mov	r0, r2
 8087850:	f007 fd88 	bl	808f364 <free>
    }
    while( cert_cur != NULL );
 8087854:	4622      	mov	r2, r4
 8087856:	2c00      	cmp	r4, #0
 8087858:	d1f0      	bne.n	808783c <mbedtls_x509_crt_free+0x92>
 808785a:	bd70      	pop	{r4, r5, r6, pc}

0808785c <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 808785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087860:	4688      	mov	r8, r1
 8087862:	b09b      	sub	sp, #108	; 0x6c
 8087864:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 8087866:	4682      	mov	sl, r0
 8087868:	2800      	cmp	r0, #0
 808786a:	f000 812c 	beq.w	8087ac6 <mbedtls_x509_crt_parse_der+0x26a>
 808786e:	2900      	cmp	r1, #0
 8087870:	f000 8129 	beq.w	8087ac6 <mbedtls_x509_crt_parse_der+0x26a>
 8087874:	4604      	mov	r4, r0
 8087876:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
 808787a:	69a3      	ldr	r3, [r4, #24]
 808787c:	b1a3      	cbz	r3, 80878a8 <mbedtls_x509_crt_parse_der+0x4c>
 808787e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8087882:	46a1      	mov	r9, r4
 8087884:	b10b      	cbz	r3, 808788a <mbedtls_x509_crt_parse_der+0x2e>
 8087886:	461c      	mov	r4, r3
 8087888:	e7f7      	b.n	808787a <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 808788a:	f44f 719a 	mov.w	r1, #308	; 0x134
 808788e:	2001      	movs	r0, #1
 8087890:	f008 fe8a 	bl	80905a8 <calloc>
 8087894:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
 8087898:	2800      	cmp	r0, #0
 808789a:	f000 8116 	beq.w	8087aca <mbedtls_x509_crt_parse_der+0x26e>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
 808789e:	f7ff ff7f 	bl	80877a0 <mbedtls_x509_crt_init>
 80878a2:	46a1      	mov	r9, r4
        crt = crt->next;
 80878a4:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 80878a8:	2300      	movs	r3, #0
 80878aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80878ac:	930c      	str	r3, [sp, #48]	; 0x30
 80878ae:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 80878b0:	930e      	str	r3, [sp, #56]	; 0x38
 80878b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80878b4:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 80878b6:	9311      	str	r3, [sp, #68]	; 0x44
 80878b8:	9312      	str	r3, [sp, #72]	; 0x48
 80878ba:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 80878bc:	2c00      	cmp	r4, #0
 80878be:	f000 80e9 	beq.w	8087a94 <mbedtls_x509_crt_parse_der+0x238>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
 80878c2:	ae1a      	add	r6, sp, #104	; 0x68
 80878c4:	f846 5d54 	str.w	r5, [r6, #-84]!
    end = p + len;
 80878c8:	eb08 0b05 	add.w	fp, r8, r5
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80878cc:	2330      	movs	r3, #48	; 0x30
 80878ce:	4632      	mov	r2, r6
 80878d0:	4659      	mov	r1, fp
 80878d2:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 80878d4:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80878d8:	f7fa fc78 	bl	80821cc <mbedtls_asn1_get_tag>
 80878dc:	b120      	cbz	r0, 80878e8 <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80878de:	4620      	mov	r0, r4
 80878e0:	f7ff ff63 	bl	80877aa <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 80878e4:	4da3      	ldr	r5, [pc, #652]	; (8087b74 <mbedtls_x509_crt_parse_der+0x318>)
 80878e6:	e0e1      	b.n	8087aac <mbedtls_x509_crt_parse_der+0x250>
    }

    if( len > (size_t) ( end - p ) )
 80878e8:	9d06      	ldr	r5, [sp, #24]
 80878ea:	9f05      	ldr	r7, [sp, #20]
 80878ec:	ebc5 0b0b 	rsb	fp, r5, fp
 80878f0:	45bb      	cmp	fp, r7
 80878f2:	f0c0 80ca 	bcc.w	8087a8a <mbedtls_x509_crt_parse_der+0x22e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 80878f6:	443d      	add	r5, r7
 80878f8:	ebc8 0505 	rsb	r5, r8, r5
 80878fc:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
 80878fe:	4629      	mov	r1, r5
 8087900:	2001      	movs	r0, #1
 8087902:	f008 fe51 	bl	80905a8 <calloc>
 8087906:	4683      	mov	fp, r0
 8087908:	9006      	str	r0, [sp, #24]
 808790a:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 808790c:	2800      	cmp	r0, #0
 808790e:	f000 80c3 	beq.w	8087a98 <mbedtls_x509_crt_parse_der+0x23c>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8087912:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 8087914:	1bed      	subs	r5, r5, r7
 8087916:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8087918:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
 808791a:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 808791c:	f008 fe69 	bl	80905f2 <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 8087920:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8087922:	2330      	movs	r3, #48	; 0x30
 8087924:	4632      	mov	r2, r6
 8087926:	4639      	mov	r1, r7
 8087928:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 808792a:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 808792c:	f7fa fc4e 	bl	80821cc <mbedtls_asn1_get_tag>
 8087930:	4680      	mov	r8, r0
 8087932:	b128      	cbz	r0, 8087940 <mbedtls_x509_crt_parse_der+0xe4>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8087934:	4620      	mov	r0, r4
 8087936:	f7ff ff38 	bl	80877aa <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 808793a:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
 808793e:	e0b2      	b.n	8087aa6 <mbedtls_x509_crt_parse_der+0x24a>
    }

    end = p + len;
 8087940:	9b05      	ldr	r3, [sp, #20]
 8087942:	9e06      	ldr	r6, [sp, #24]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087944:	aa17      	add	r2, sp, #92	; 0x5c
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
 8087946:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 8087948:	6963      	ldr	r3, [r4, #20]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808794a:	4631      	mov	r1, r6
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
    crt->tbs.len = end - crt->tbs.p;
 808794c:	1af3      	subs	r3, r6, r3
 808794e:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087950:	a806      	add	r0, sp, #24
 8087952:	23a0      	movs	r3, #160	; 0xa0
 8087954:	f7fa fc3a 	bl	80821cc <mbedtls_asn1_get_tag>
 8087958:	4605      	mov	r5, r0
 808795a:	b128      	cbz	r0, 8087968 <mbedtls_x509_crt_parse_der+0x10c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 808795c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8087960:	d114      	bne.n	808798c <mbedtls_x509_crt_parse_der+0x130>
        {
            *ver = 0;
 8087962:	f8c4 8018 	str.w	r8, [r4, #24]
 8087966:	e014      	b.n	8087992 <mbedtls_x509_crt_parse_der+0x136>
        }

        return( ret );
    }

    end = *p + len;
 8087968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808796a:	9d06      	ldr	r5, [sp, #24]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 808796c:	f104 0218 	add.w	r2, r4, #24
        }

        return( ret );
    }

    end = *p + len;
 8087970:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8087972:	4629      	mov	r1, r5
 8087974:	a806      	add	r0, sp, #24
 8087976:	f7fa fc56 	bl	8082226 <mbedtls_asn1_get_int>
 808797a:	b110      	cbz	r0, 8087982 <mbedtls_x509_crt_parse_der+0x126>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 808797c:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
 8087980:	e004      	b.n	808798c <mbedtls_x509_crt_parse_der+0x130>

    if( *p != end )
 8087982:	9b06      	ldr	r3, [sp, #24]
 8087984:	429d      	cmp	r5, r3
 8087986:	d004      	beq.n	8087992 <mbedtls_x509_crt_parse_der+0x136>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8087988:	4d7b      	ldr	r5, [pc, #492]	; (8087b78 <mbedtls_x509_crt_parse_der+0x31c>)
 808798a:	e0d6      	b.n	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 808798c:	2d00      	cmp	r5, #0
 808798e:	f040 80d4 	bne.w	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 8087992:	f104 021c 	add.w	r2, r4, #28
 8087996:	4631      	mov	r1, r6
 8087998:	a806      	add	r0, sp, #24
 808799a:	f7fd fb85 	bl	80850a8 <mbedtls_x509_get_serial>
 808799e:	4605      	mov	r5, r0
 80879a0:	2800      	cmp	r0, #0
 80879a2:	f040 80ca 	bne.w	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 80879a6:	f104 0828 	add.w	r8, r4, #40	; 0x28
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80879aa:	ab0b      	add	r3, sp, #44	; 0x2c
 80879ac:	4642      	mov	r2, r8
 80879ae:	4631      	mov	r1, r6
 80879b0:	a806      	add	r0, sp, #24
 80879b2:	f7fd fba1 	bl	80850f8 <mbedtls_x509_get_alg>
 80879b6:	4605      	mov	r5, r0
 80879b8:	2800      	cmp	r0, #0
 80879ba:	f040 80be 	bne.w	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
 80879be:	e086      	b.n	8087ace <mbedtls_x509_crt_parse_der+0x272>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
 80879c0:	3301      	adds	r3, #1
 80879c2:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 80879c4:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 80879c8:	9300      	str	r3, [sp, #0]
 80879ca:	f504 7294 	add.w	r2, r4, #296	; 0x128
 80879ce:	f204 1329 	addw	r3, r4, #297	; 0x129
 80879d2:	a90b      	add	r1, sp, #44	; 0x2c
 80879d4:	4640      	mov	r0, r8
 80879d6:	f7fd fce3 	bl	80853a0 <mbedtls_x509_get_sig_alg>
 80879da:	4605      	mov	r5, r0
 80879dc:	2800      	cmp	r0, #0
 80879de:	f040 80ac 	bne.w	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80879e2:	9b06      	ldr	r3, [sp, #24]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80879e4:	aa05      	add	r2, sp, #20
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80879e6:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80879e8:	4631      	mov	r1, r6
 80879ea:	2330      	movs	r3, #48	; 0x30
 80879ec:	a806      	add	r0, sp, #24
 80879ee:	f7fa fbed 	bl	80821cc <mbedtls_asn1_get_tag>
 80879f2:	4605      	mov	r5, r0
 80879f4:	2800      	cmp	r0, #0
 80879f6:	d151      	bne.n	8087a9c <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 80879f8:	9b05      	ldr	r3, [sp, #20]
 80879fa:	9906      	ldr	r1, [sp, #24]
 80879fc:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8087a00:	4419      	add	r1, r3
 8087a02:	a806      	add	r0, sp, #24
 8087a04:	f7fd fb80 	bl	8085108 <mbedtls_x509_get_name>
 8087a08:	4605      	mov	r5, r0
 8087a0a:	2800      	cmp	r0, #0
 8087a0c:	f040 8095 	bne.w	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8087a10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8087a12:	9b06      	ldr	r3, [sp, #24]
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087a14:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8087a16:	1a9b      	subs	r3, r3, r2
 8087a18:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087a1a:	aa17      	add	r2, sp, #92	; 0x5c
 8087a1c:	2330      	movs	r3, #48	; 0x30
 8087a1e:	a806      	add	r0, sp, #24
 8087a20:	f7fa fbd4 	bl	80821cc <mbedtls_asn1_get_tag>
 8087a24:	2800      	cmp	r0, #0
 8087a26:	d05b      	beq.n	8087ae0 <mbedtls_x509_crt_parse_der+0x284>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8087a28:	f5a0 5510 	sub.w	r5, r0, #9216	; 0x2400
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 8087a2c:	2d00      	cmp	r5, #0
 8087a2e:	f040 8084 	bne.w	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 8087a32:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8087a36:	f85b 3d50 	ldr.w	r3, [fp, #-80]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8087a3a:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 8087a3c:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8087a3e:	4631      	mov	r1, r6
 8087a40:	2330      	movs	r3, #48	; 0x30
 8087a42:	4658      	mov	r0, fp
 8087a44:	f7fa fbc2 	bl	80821cc <mbedtls_asn1_get_tag>
 8087a48:	4605      	mov	r5, r0
 8087a4a:	bb38      	cbnz	r0, 8087a9c <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 8087a4c:	9b05      	ldr	r3, [sp, #20]
 8087a4e:	2b00      	cmp	r3, #0
 8087a50:	d15f      	bne.n	8087b12 <mbedtls_x509_crt_parse_der+0x2b6>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 8087a52:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8087a54:	9b06      	ldr	r3, [sp, #24]

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8087a56:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 8087a58:	1a9b      	subs	r3, r3, r2
 8087a5a:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8087a5c:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8087a60:	4658      	mov	r0, fp
 8087a62:	f7fd fff3 	bl	8085a4c <mbedtls_pk_parse_subpubkey>
 8087a66:	4605      	mov	r5, r0
 8087a68:	2800      	cmp	r0, #0
 8087a6a:	d166      	bne.n	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 8087a6c:	69a3      	ldr	r3, [r4, #24]
 8087a6e:	3b02      	subs	r3, #2
 8087a70:	2b01      	cmp	r3, #1
 8087a72:	d958      	bls.n	8087b26 <mbedtls_x509_crt_parse_der+0x2ca>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 8087a74:	69a3      	ldr	r3, [r4, #24]
 8087a76:	3b02      	subs	r3, #2
 8087a78:	2b01      	cmp	r3, #1
 8087a7a:	d962      	bls.n	8087b42 <mbedtls_x509_crt_parse_der+0x2e6>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 8087a7c:	69a3      	ldr	r3, [r4, #24]
 8087a7e:	2b03      	cmp	r3, #3
 8087a80:	d06a      	beq.n	8087b58 <mbedtls_x509_crt_parse_der+0x2fc>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
 8087a82:	9b06      	ldr	r3, [sp, #24]
 8087a84:	429e      	cmp	r6, r3
 8087a86:	f000 811e 	beq.w	8087cc6 <mbedtls_x509_crt_parse_der+0x46a>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
 8087a8a:	4620      	mov	r0, r4
 8087a8c:	f7ff fe8d 	bl	80877aa <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8087a90:	4d3a      	ldr	r5, [pc, #232]	; (8087b7c <mbedtls_x509_crt_parse_der+0x320>)
 8087a92:	e00b      	b.n	8087aac <mbedtls_x509_crt_parse_der+0x250>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8087a94:	4d3a      	ldr	r5, [pc, #232]	; (8087b80 <mbedtls_x509_crt_parse_der+0x324>)
 8087a96:	e009      	b.n	8087aac <mbedtls_x509_crt_parse_der+0x250>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8087a98:	4d3a      	ldr	r5, [pc, #232]	; (8087b84 <mbedtls_x509_crt_parse_der+0x328>)
 8087a9a:	e007      	b.n	8087aac <mbedtls_x509_crt_parse_der+0x250>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8087a9c:	4620      	mov	r0, r4
 8087a9e:	f7ff fe84 	bl	80877aa <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8087aa2:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 8087aa6:	2d00      	cmp	r5, #0
 8087aa8:	f000 8204 	beq.w	8087eb4 <mbedtls_x509_crt_parse_der+0x658>
    {
        if( prev )
 8087aac:	f1b9 0f00 	cmp.w	r9, #0
 8087ab0:	d002      	beq.n	8087ab8 <mbedtls_x509_crt_parse_der+0x25c>
            prev->next = NULL;
 8087ab2:	2300      	movs	r3, #0
 8087ab4:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
 8087ab8:	4554      	cmp	r4, sl
 8087aba:	f000 81fb 	beq.w	8087eb4 <mbedtls_x509_crt_parse_der+0x658>
            mbedtls_free( crt );
 8087abe:	4620      	mov	r0, r4
 8087ac0:	f007 fc50 	bl	808f364 <free>
 8087ac4:	e1f6      	b.n	8087eb4 <mbedtls_x509_crt_parse_der+0x658>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8087ac6:	4d2e      	ldr	r5, [pc, #184]	; (8087b80 <mbedtls_x509_crt_parse_der+0x324>)
 8087ac8:	e1f4      	b.n	8087eb4 <mbedtls_x509_crt_parse_der+0x658>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8087aca:	4d2e      	ldr	r5, [pc, #184]	; (8087b84 <mbedtls_x509_crt_parse_der+0x328>)
 8087acc:	e1f2      	b.n	8087eb4 <mbedtls_x509_crt_parse_der+0x658>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
 8087ace:	69a3      	ldr	r3, [r4, #24]
 8087ad0:	2b02      	cmp	r3, #2
 8087ad2:	f67f af75 	bls.w	80879c0 <mbedtls_x509_crt_parse_der+0x164>
    {
        mbedtls_x509_crt_free( crt );
 8087ad6:	4620      	mov	r0, r4
 8087ad8:	f7ff fe67 	bl	80877aa <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 8087adc:	4d2a      	ldr	r5, [pc, #168]	; (8087b88 <mbedtls_x509_crt_parse_der+0x32c>)
 8087ade:	e7e5      	b.n	8087aac <mbedtls_x509_crt_parse_der+0x250>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 8087ae0:	9a06      	ldr	r2, [sp, #24]
 8087ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8087ae4:	a806      	add	r0, sp, #24

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 8087ae6:	eb02 0b03 	add.w	fp, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8087aea:	4659      	mov	r1, fp
 8087aec:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8087af0:	f7fd fb82 	bl	80851f8 <mbedtls_x509_get_time>
 8087af4:	b958      	cbnz	r0, 8087b0e <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8087af6:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 8087afa:	4659      	mov	r1, fp
 8087afc:	a806      	add	r0, sp, #24
 8087afe:	f7fd fb7b 	bl	80851f8 <mbedtls_x509_get_time>
 8087b02:	b920      	cbnz	r0, 8087b0e <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( *p != end )
 8087b04:	9b06      	ldr	r3, [sp, #24]
 8087b06:	459b      	cmp	fp, r3
 8087b08:	d093      	beq.n	8087a32 <mbedtls_x509_crt_parse_der+0x1d6>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8087b0a:	4d20      	ldr	r5, [pc, #128]	; (8087b8c <mbedtls_x509_crt_parse_der+0x330>)
 8087b0c:	e015      	b.n	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
    end = *p + len;

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8087b0e:	4605      	mov	r5, r0
 8087b10:	e78c      	b.n	8087a2c <mbedtls_x509_crt_parse_der+0x1d0>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 8087b12:	9906      	ldr	r1, [sp, #24]
 8087b14:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8087b18:	4419      	add	r1, r3
 8087b1a:	4658      	mov	r0, fp
 8087b1c:	f7fd faf4 	bl	8085108 <mbedtls_x509_get_name>
 8087b20:	4605      	mov	r5, r0
 8087b22:	b950      	cbnz	r0, 8087b3a <mbedtls_x509_crt_parse_der+0x2de>
 8087b24:	e795      	b.n	8087a52 <mbedtls_x509_crt_parse_der+0x1f6>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 8087b26:	2301      	movs	r3, #1
 8087b28:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 8087b2c:	4631      	mov	r1, r6
 8087b2e:	4658      	mov	r0, fp
 8087b30:	f7fe fed5 	bl	80868de <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 8087b34:	4605      	mov	r5, r0
 8087b36:	2800      	cmp	r0, #0
 8087b38:	d09c      	beq.n	8087a74 <mbedtls_x509_crt_parse_der+0x218>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8087b3a:	4620      	mov	r0, r4
 8087b3c:	f7ff fe35 	bl	80877aa <mbedtls_x509_crt_free>
 8087b40:	e7b1      	b.n	8087aa6 <mbedtls_x509_crt_parse_der+0x24a>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 8087b42:	2302      	movs	r3, #2
 8087b44:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 8087b48:	4631      	mov	r1, r6
 8087b4a:	4658      	mov	r0, fp
 8087b4c:	f7fe fec7 	bl	80868de <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 8087b50:	4605      	mov	r5, r0
 8087b52:	2800      	cmp	r0, #0
 8087b54:	d092      	beq.n	8087a7c <mbedtls_x509_crt_parse_der+0x220>
 8087b56:	e7f0      	b.n	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 8087b58:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 8087b5c:	4631      	mov	r1, r6
 8087b5e:	4658      	mov	r0, fp
 8087b60:	f7fd fc3e 	bl	80853e0 <mbedtls_x509_get_ext>
 8087b64:	b908      	cbnz	r0, 8087b6a <mbedtls_x509_crt_parse_der+0x30e>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8087b66:	4680      	mov	r8, r0
 8087b68:	e05a      	b.n	8087c20 <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8087b6a:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8087b6e:	f040 80a5 	bne.w	8087cbc <mbedtls_x509_crt_parse_der+0x460>
 8087b72:	e786      	b.n	8087a82 <mbedtls_x509_crt_parse_der+0x226>
 8087b74:	ffffde80 	.word	0xffffde80
 8087b78:	ffffdd9a 	.word	0xffffdd9a
 8087b7c:	ffffde1a 	.word	0xffffde1a
 8087b80:	ffffd800 	.word	0xffffd800
 8087b84:	ffffd780 	.word	0xffffd780
 8087b88:	ffffda80 	.word	0xffffda80
 8087b8c:	ffffdb9a 	.word	0xffffdb9a
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087b90:	2330      	movs	r3, #48	; 0x30
 8087b92:	aa07      	add	r2, sp, #28
 8087b94:	4631      	mov	r1, r6
 8087b96:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8087b98:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8087b9c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 8087ba0:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 8087ba4:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 8087ba8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087bac:	f7fa fb0e 	bl	80821cc <mbedtls_asn1_get_tag>
 8087bb0:	2800      	cmp	r0, #0
 8087bb2:	f040 80bd 	bne.w	8087d30 <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 8087bb6:	9b06      	ldr	r3, [sp, #24]
 8087bb8:	9d07      	ldr	r5, [sp, #28]

        /* Get extension ID */
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8087bba:	aa15      	add	r2, sp, #84	; 0x54

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 8087bbc:	441d      	add	r5, r3

        /* Get extension ID */
        extn_oid.tag = **p;
 8087bbe:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8087bc0:	4631      	mov	r1, r6
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;

        /* Get extension ID */
        extn_oid.tag = **p;
 8087bc2:	9314      	str	r3, [sp, #80]	; 0x50

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8087bc4:	a806      	add	r0, sp, #24
 8087bc6:	2306      	movs	r3, #6
 8087bc8:	f7fa fb00 	bl	80821cc <mbedtls_asn1_get_tag>
 8087bcc:	2800      	cmp	r0, #0
 8087bce:	f040 80af 	bne.w	8087d30 <mbedtls_x509_crt_parse_der+0x4d4>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 8087bd2:	9a06      	ldr	r2, [sp, #24]
        *p += extn_oid.len;
 8087bd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 8087bd6:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
 8087bd8:	4413      	add	r3, r2
 8087bda:	9306      	str	r3, [sp, #24]

        if( ( end - *p ) < 1 )
 8087bdc:	1af3      	subs	r3, r6, r3
 8087bde:	2b00      	cmp	r3, #0
 8087be0:	dd51      	ble.n	8087c86 <mbedtls_x509_crt_parse_der+0x42a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8087be2:	aa08      	add	r2, sp, #32
 8087be4:	4629      	mov	r1, r5
 8087be6:	a806      	add	r0, sp, #24
 8087be8:	f7fa fb04 	bl	80821f4 <mbedtls_asn1_get_bool>
 8087bec:	b9e0      	cbnz	r0, 8087c28 <mbedtls_x509_crt_parse_der+0x3cc>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 8087bee:	2304      	movs	r3, #4
 8087bf0:	aa07      	add	r2, sp, #28
 8087bf2:	4629      	mov	r1, r5
 8087bf4:	a806      	add	r0, sp, #24
 8087bf6:	f7fa fae9 	bl	80821cc <mbedtls_asn1_get_tag>
 8087bfa:	2800      	cmp	r0, #0
 8087bfc:	f040 8098 	bne.w	8087d30 <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
 8087c00:	9b07      	ldr	r3, [sp, #28]
 8087c02:	9a06      	ldr	r2, [sp, #24]
 8087c04:	4413      	add	r3, r2
 8087c06:	429d      	cmp	r5, r3
 8087c08:	f040 814a 	bne.w	8087ea0 <mbedtls_x509_crt_parse_der+0x644>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 8087c0c:	a909      	add	r1, sp, #36	; 0x24
 8087c0e:	a814      	add	r0, sp, #80	; 0x50
 8087c10:	f7fb ff20 	bl	8083a54 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
 8087c14:	b160      	cbz	r0, 8087c30 <mbedtls_x509_crt_parse_der+0x3d4>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 8087c16:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 8087c18:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 8087c1a:	2b00      	cmp	r3, #0
 8087c1c:	f040 8142 	bne.w	8087ea4 <mbedtls_x509_crt_parse_der+0x648>
            return( 0 );

        return( ret );
    }

    while( *p < end )
 8087c20:	9b06      	ldr	r3, [sp, #24]
 8087c22:	429e      	cmp	r6, r3
 8087c24:	d8b4      	bhi.n	8087b90 <mbedtls_x509_crt_parse_der+0x334>
 8087c26:	e030      	b.n	8087c8a <mbedtls_x509_crt_parse_der+0x42e>
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8087c28:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8087c2c:	d0df      	beq.n	8087bee <mbedtls_x509_crt_parse_der+0x392>
 8087c2e:	e07f      	b.n	8087d30 <mbedtls_x509_crt_parse_der+0x4d4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 8087c30:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8087c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087c36:	ea12 0003 	ands.w	r0, r2, r3
 8087c3a:	f040 8135 	bne.w	8087ea8 <mbedtls_x509_crt_parse_der+0x64c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 8087c3e:	431a      	orrs	r2, r3

        switch( ext_type )
 8087c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 8087c44:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8

        switch( ext_type )
 8087c48:	d023      	beq.n	8087c92 <mbedtls_x509_crt_parse_der+0x436>
 8087c4a:	dc74      	bgt.n	8087d36 <mbedtls_x509_crt_parse_der+0x4da>
 8087c4c:	2b04      	cmp	r3, #4
 8087c4e:	f000 80a9 	beq.w	8087da4 <mbedtls_x509_crt_parse_der+0x548>
 8087c52:	2b20      	cmp	r3, #32
 8087c54:	f040 812a 	bne.w	8087eac <mbedtls_x509_crt_parse_der+0x650>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087c58:	2330      	movs	r3, #48	; 0x30
 8087c5a:	aa0a      	add	r2, sp, #40	; 0x28
 8087c5c:	4629      	mov	r1, r5
 8087c5e:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8087c60:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087c64:	f7fa fab2 	bl	80821cc <mbedtls_asn1_get_tag>
 8087c68:	bb20      	cbnz	r0, 8087cb4 <mbedtls_x509_crt_parse_der+0x458>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
 8087c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087c6c:	9a06      	ldr	r2, [sp, #24]
 8087c6e:	4413      	add	r3, r2
 8087c70:	429d      	cmp	r5, r3
 8087c72:	f040 8115 	bne.w	8087ea0 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
 8087c76:	9a06      	ldr	r2, [sp, #24]
 8087c78:	4295      	cmp	r5, r2
 8087c7a:	f240 80f3 	bls.w	8087e64 <mbedtls_x509_crt_parse_der+0x608>
    {
        if( ( end - *p ) < 1 )
 8087c7e:	1aab      	subs	r3, r5, r2
 8087c80:	2b00      	cmp	r3, #0
 8087c82:	f300 80be 	bgt.w	8087e02 <mbedtls_x509_crt_parse_der+0x5a6>
        extn_oid.p = *p;
        *p += extn_oid.len;

        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8087c86:	488d      	ldr	r0, [pc, #564]	; (8087ebc <mbedtls_x509_crt_parse_der+0x660>)
 8087c88:	e018      	b.n	8087cbc <mbedtls_x509_crt_parse_der+0x460>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
 8087c8a:	f43f aefa 	beq.w	8087a82 <mbedtls_x509_crt_parse_der+0x226>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8087c8e:	4d8c      	ldr	r5, [pc, #560]	; (8087ec0 <mbedtls_x509_crt_parse_der+0x664>)
 8087c90:	e753      	b.n	8087b3a <mbedtls_x509_crt_parse_der+0x2de>

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8087c92:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8087c96:	9303      	str	r3, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 8087c98:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 8087c9c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087ca0:	2330      	movs	r3, #48	; 0x30
 8087ca2:	aa17      	add	r2, sp, #92	; 0x5c
 8087ca4:	4629      	mov	r1, r5
 8087ca6:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8087ca8:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087cac:	f7fa fa8e 	bl	80821cc <mbedtls_asn1_get_tag>
 8087cb0:	2800      	cmp	r0, #0
 8087cb2:	d048      	beq.n	8087d46 <mbedtls_x509_crt_parse_der+0x4ea>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8087cb4:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8087cb8:	2800      	cmp	r0, #0
 8087cba:	d0b1      	beq.n	8087c20 <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8087cbc:	4605      	mov	r5, r0
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
 8087cbe:	2800      	cmp	r0, #0
 8087cc0:	f43f aedf 	beq.w	8087a82 <mbedtls_x509_crt_parse_der+0x226>
 8087cc4:	e739      	b.n	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 8087cc6:	ab0e      	add	r3, sp, #56	; 0x38
 8087cc8:	aa11      	add	r2, sp, #68	; 0x44
 8087cca:	4639      	mov	r1, r7
 8087ccc:	a806      	add	r0, sp, #24
 8087cce:	f7fd fa13 	bl	80850f8 <mbedtls_x509_get_alg>
 8087cd2:	4605      	mov	r5, r0
 8087cd4:	2800      	cmp	r0, #0
 8087cd6:	f47f af30 	bne.w	8087b3a <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 8087cda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8087cdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8087cde:	429a      	cmp	r2, r3
 8087ce0:	d10f      	bne.n	8087d02 <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8087ce2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8087ce4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8087ce6:	f008 fc75 	bl	80905d4 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 8087cea:	4605      	mov	r5, r0
 8087cec:	b948      	cbnz	r0, 8087d02 <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
 8087cee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8087cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8087cf2:	429a      	cmp	r2, r3
 8087cf4:	d105      	bne.n	8087d02 <mbedtls_x509_crt_parse_der+0x4a6>
        sig_params1.len != sig_params2.len ||
 8087cf6:	b14a      	cbz	r2, 8087d0c <mbedtls_x509_crt_parse_der+0x4b0>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 8087cf8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8087cfa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8087cfc:	f008 fc6a 	bl	80905d4 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
 8087d00:	b120      	cbz	r0, 8087d0c <mbedtls_x509_crt_parse_der+0x4b0>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
 8087d02:	4620      	mov	r0, r4
 8087d04:	f7ff fd51 	bl	80877aa <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 8087d08:	4d6e      	ldr	r5, [pc, #440]	; (8087ec4 <mbedtls_x509_crt_parse_der+0x668>)
 8087d0a:	e6cf      	b.n	8087aac <mbedtls_x509_crt_parse_der+0x250>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 8087d0c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8087d10:	4639      	mov	r1, r7
 8087d12:	a806      	add	r0, sp, #24
 8087d14:	f7fd fb26 	bl	8085364 <mbedtls_x509_get_sig>
 8087d18:	4606      	mov	r6, r0
 8087d1a:	b120      	cbz	r0, 8087d26 <mbedtls_x509_crt_parse_der+0x4ca>
    {
        mbedtls_x509_crt_free( crt );
 8087d1c:	4620      	mov	r0, r4
 8087d1e:	f7ff fd44 	bl	80877aa <mbedtls_x509_crt_free>
 8087d22:	4635      	mov	r5, r6
 8087d24:	e6bf      	b.n	8087aa6 <mbedtls_x509_crt_parse_der+0x24a>
        return( ret );
    }

    if( p != end )
 8087d26:	9b06      	ldr	r3, [sp, #24]
 8087d28:	429f      	cmp	r7, r3
 8087d2a:	f000 80c3 	beq.w	8087eb4 <mbedtls_x509_crt_parse_der+0x658>
 8087d2e:	e6ac      	b.n	8087a8a <mbedtls_x509_crt_parse_der+0x22e>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8087d30:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 8087d34:	e7c2      	b.n	8087cbc <mbedtls_x509_crt_parse_der+0x460>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
 8087d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8087d3a:	d053      	beq.n	8087de4 <mbedtls_x509_crt_parse_der+0x588>
 8087d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8087d40:	f000 8097 	beq.w	8087e72 <mbedtls_x509_crt_parse_der+0x616>
 8087d44:	e0b2      	b.n	8087eac <mbedtls_x509_crt_parse_der+0x650>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
 8087d46:	9b06      	ldr	r3, [sp, #24]
 8087d48:	429d      	cmp	r5, r3
 8087d4a:	f43f af69 	beq.w	8087c20 <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 8087d4e:	465a      	mov	r2, fp
 8087d50:	4629      	mov	r1, r5
 8087d52:	a806      	add	r0, sp, #24
 8087d54:	f7fa fa4e 	bl	80821f4 <mbedtls_asn1_get_bool>
 8087d58:	b178      	cbz	r0, 8087d7a <mbedtls_x509_crt_parse_der+0x51e>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8087d5a:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8087d5e:	d1a9      	bne.n	8087cb4 <mbedtls_x509_crt_parse_der+0x458>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 8087d60:	465a      	mov	r2, fp
 8087d62:	4629      	mov	r1, r5
 8087d64:	a806      	add	r0, sp, #24
 8087d66:	f7fa fa5e 	bl	8082226 <mbedtls_asn1_get_int>

        if( ret != 0 )
 8087d6a:	2800      	cmp	r0, #0
 8087d6c:	d1a2      	bne.n	8087cb4 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
 8087d6e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8087d72:	b113      	cbz	r3, 8087d7a <mbedtls_x509_crt_parse_der+0x51e>
            *ca_istrue = 1;
 8087d74:	2301      	movs	r3, #1
 8087d76:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
 8087d7a:	9b06      	ldr	r3, [sp, #24]
 8087d7c:	429d      	cmp	r5, r3
 8087d7e:	f43f af4f 	beq.w	8087c20 <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 8087d82:	9a03      	ldr	r2, [sp, #12]
 8087d84:	4629      	mov	r1, r5
 8087d86:	a806      	add	r0, sp, #24
 8087d88:	f7fa fa4d 	bl	8082226 <mbedtls_asn1_get_int>
 8087d8c:	2800      	cmp	r0, #0
 8087d8e:	d191      	bne.n	8087cb4 <mbedtls_x509_crt_parse_der+0x458>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
 8087d90:	9b06      	ldr	r3, [sp, #24]
 8087d92:	429d      	cmp	r5, r3
 8087d94:	f040 8084 	bne.w	8087ea0 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 8087d98:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8087d9c:	3301      	adds	r3, #1
 8087d9e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8087da2:	e73d      	b.n	8087c20 <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8087da4:	9017      	str	r0, [sp, #92]	; 0x5c
 8087da6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 8087daa:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8087dac:	aa17      	add	r2, sp, #92	; 0x5c
 8087dae:	4629      	mov	r1, r5
 8087db0:	a806      	add	r0, sp, #24
 8087db2:	f7fa fa6f 	bl	8082294 <mbedtls_asn1_get_bitstring>
 8087db6:	2800      	cmp	r0, #0
 8087db8:	d165      	bne.n	8087e86 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
 8087dba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8087dbc:	2a00      	cmp	r2, #0
 8087dbe:	d077      	beq.n	8087eb0 <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 8087dc0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8087dc4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8087dc6:	5c2b      	ldrb	r3, [r5, r0]
 8087dc8:	00c1      	lsls	r1, r0, #3
 8087dca:	408b      	lsls	r3, r1
 8087dcc:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8087dd0:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8087dd2:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8087dd4:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8087dd6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8087dda:	f43f af21 	beq.w	8087c20 <mbedtls_x509_crt_parse_der+0x3c4>
 8087dde:	2804      	cmp	r0, #4
 8087de0:	d1f1      	bne.n	8087dc6 <mbedtls_x509_crt_parse_der+0x56a>
 8087de2:	e71d      	b.n	8087c20 <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 8087de4:	2306      	movs	r3, #6
 8087de6:	f504 7284 	add.w	r2, r4, #264	; 0x108
 8087dea:	4629      	mov	r1, r5
 8087dec:	a806      	add	r0, sp, #24
 8087dee:	f7fa fa8a 	bl	8082306 <mbedtls_asn1_get_sequence_of>
 8087df2:	2800      	cmp	r0, #0
 8087df4:	d147      	bne.n	8087e86 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 8087df6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8087dfa:	2b00      	cmp	r3, #0
 8087dfc:	f47f af10 	bne.w	8087c20 <mbedtls_x509_crt_parse_der+0x3c4>
 8087e00:	e056      	b.n	8087eb0 <mbedtls_x509_crt_parse_der+0x654>
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 8087e02:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8087e06:	4629      	mov	r1, r5
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
 8087e08:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8087e0a:	a806      	add	r0, sp, #24
 8087e0c:	aa17      	add	r2, sp, #92	; 0x5c
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 8087e0e:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8087e10:	f7fa f98a 	bl	8082128 <mbedtls_asn1_get_len>
 8087e14:	9b03      	ldr	r3, [sp, #12]
 8087e16:	2800      	cmp	r0, #0
 8087e18:	f47f af4c 	bne.w	8087cb4 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 8087e1c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8087e20:	2a80      	cmp	r2, #128	; 0x80
 8087e22:	d13f      	bne.n	8087ea4 <mbedtls_x509_crt_parse_der+0x648>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8087e24:	2b82      	cmp	r3, #130	; 0x82
 8087e26:	d002      	beq.n	8087e2e <mbedtls_x509_crt_parse_der+0x5d2>
        {
            *p += tag_len;
 8087e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8087e2a:	9a06      	ldr	r2, [sp, #24]
 8087e2c:	e017      	b.n	8087e5e <mbedtls_x509_crt_parse_der+0x602>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 8087e2e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8087e32:	b15b      	cbz	r3, 8087e4c <mbedtls_x509_crt_parse_der+0x5f0>
        {
            if( cur->next != NULL )
 8087e34:	f8db 300c 	ldr.w	r3, [fp, #12]
 8087e38:	2b00      	cmp	r3, #0
 8087e3a:	d135      	bne.n	8087ea8 <mbedtls_x509_crt_parse_der+0x64c>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8087e3c:	2110      	movs	r1, #16
 8087e3e:	2001      	movs	r0, #1
 8087e40:	f008 fbb2 	bl	80905a8 <calloc>
 8087e44:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
 8087e48:	b188      	cbz	r0, 8087e6e <mbedtls_x509_crt_parse_der+0x612>
 8087e4a:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
 8087e4c:	2382      	movs	r3, #130	; 0x82
 8087e4e:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
 8087e52:	9a06      	ldr	r2, [sp, #24]
 8087e54:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
 8087e58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8087e5a:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
 8087e5e:	4413      	add	r3, r2
 8087e60:	9306      	str	r3, [sp, #24]
 8087e62:	e708      	b.n	8087c76 <mbedtls_x509_crt_parse_der+0x41a>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8087e64:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
 8087e68:	f43f aeda 	beq.w	8087c20 <mbedtls_x509_crt_parse_der+0x3c4>
 8087e6c:	e018      	b.n	8087ea0 <mbedtls_x509_crt_parse_der+0x644>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8087e6e:	4816      	ldr	r0, [pc, #88]	; (8087ec8 <mbedtls_x509_crt_parse_der+0x66c>)
 8087e70:	e724      	b.n	8087cbc <mbedtls_x509_crt_parse_der+0x460>
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8087e72:	9017      	str	r0, [sp, #92]	; 0x5c
 8087e74:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 8087e78:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8087e7a:	aa17      	add	r2, sp, #92	; 0x5c
 8087e7c:	4629      	mov	r1, r5
 8087e7e:	a806      	add	r0, sp, #24
 8087e80:	f7fa fa08 	bl	8082294 <mbedtls_asn1_get_bitstring>
 8087e84:	b120      	cbz	r0, 8087e90 <mbedtls_x509_crt_parse_der+0x634>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 8087e86:	f5b0 5014 	subs.w	r0, r0, #9472	; 0x2500
 8087e8a:	f43f aec9 	beq.w	8087c20 <mbedtls_x509_crt_parse_der+0x3c4>
 8087e8e:	e715      	b.n	8087cbc <mbedtls_x509_crt_parse_der+0x460>
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
 8087e90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8087e92:	2b01      	cmp	r3, #1
 8087e94:	d10c      	bne.n	8087eb0 <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 8087e96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8087e98:	781b      	ldrb	r3, [r3, #0]
 8087e9a:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8087e9e:	e6bf      	b.n	8087c20 <mbedtls_x509_crt_parse_der+0x3c4>

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8087ea0:	4807      	ldr	r0, [pc, #28]	; (8087ec0 <mbedtls_x509_crt_parse_der+0x664>)
 8087ea2:	e70b      	b.n	8087cbc <mbedtls_x509_crt_parse_der+0x460>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8087ea4:	4809      	ldr	r0, [pc, #36]	; (8087ecc <mbedtls_x509_crt_parse_der+0x670>)
 8087ea6:	e709      	b.n	8087cbc <mbedtls_x509_crt_parse_der+0x460>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 8087ea8:	4809      	ldr	r0, [pc, #36]	; (8087ed0 <mbedtls_x509_crt_parse_der+0x674>)
 8087eaa:	e707      	b.n	8087cbc <mbedtls_x509_crt_parse_der+0x460>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 8087eac:	4809      	ldr	r0, [pc, #36]	; (8087ed4 <mbedtls_x509_crt_parse_der+0x678>)
 8087eae:	e705      	b.n	8087cbc <mbedtls_x509_crt_parse_der+0x460>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8087eb0:	4809      	ldr	r0, [pc, #36]	; (8087ed8 <mbedtls_x509_crt_parse_der+0x67c>)
 8087eb2:	e703      	b.n	8087cbc <mbedtls_x509_crt_parse_der+0x460>

        return( ret );
    }

    return( 0 );
}
 8087eb4:	4628      	mov	r0, r5
 8087eb6:	b01b      	add	sp, #108	; 0x6c
 8087eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087ebc:	ffffdaa0 	.word	0xffffdaa0
 8087ec0:	ffffda9a 	.word	0xffffda9a
 8087ec4:	ffffd980 	.word	0xffffd980
 8087ec8:	ffffda96 	.word	0xffffda96
 8087ecc:	ffffda9e 	.word	0xffffda9e
 8087ed0:	ffffdb00 	.word	0xffffdb00
 8087ed4:	ffffdf80 	.word	0xffffdf80
 8087ed8:	ffffda9c 	.word	0xffffda9c

08087edc <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
 8087edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8087ee0:	460d      	mov	r5, r1
 8087ee2:	b088      	sub	sp, #32
 8087ee4:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
 8087ee6:	4681      	mov	r9, r0
 8087ee8:	2800      	cmp	r0, #0
 8087eea:	d054      	beq.n	8087f96 <mbedtls_x509_crt_parse+0xba>
 8087eec:	2900      	cmp	r1, #0
 8087eee:	d052      	beq.n	8087f96 <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8087ef0:	2a00      	cmp	r2, #0
 8087ef2:	d054      	beq.n	8087f9e <mbedtls_x509_crt_parse+0xc2>
 8087ef4:	188b      	adds	r3, r1, r2
 8087ef6:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8087efa:	2c00      	cmp	r4, #0
 8087efc:	d14f      	bne.n	8087f9e <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 8087efe:	492c      	ldr	r1, [pc, #176]	; (8087fb0 <mbedtls_x509_crt_parse+0xd4>)
 8087f00:	4628      	mov	r0, r5
 8087f02:	f008 fbc4 	bl	809068e <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8087f06:	2800      	cmp	r0, #0
 8087f08:	d049      	beq.n	8087f9e <mbedtls_x509_crt_parse+0xc2>
 8087f0a:	46a0      	mov	r8, r4
 8087f0c:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
 8087f0e:	2f01      	cmp	r7, #1
 8087f10:	d938      	bls.n	8087f84 <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
 8087f12:	a805      	add	r0, sp, #20
 8087f14:	f005 fd2c 	bl	808d970 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );
 8087f18:	ab04      	add	r3, sp, #16
 8087f1a:	9302      	str	r3, [sp, #8]
 8087f1c:	2300      	movs	r3, #0
 8087f1e:	9301      	str	r3, [sp, #4]
 8087f20:	9300      	str	r3, [sp, #0]
 8087f22:	4a24      	ldr	r2, [pc, #144]	; (8087fb4 <mbedtls_x509_crt_parse+0xd8>)
 8087f24:	462b      	mov	r3, r5
 8087f26:	4922      	ldr	r1, [pc, #136]	; (8087fb0 <mbedtls_x509_crt_parse+0xd4>)
 8087f28:	a805      	add	r0, sp, #20
 8087f2a:	f005 fd27 	bl	808d97c <mbedtls_pem_read_buffer>

            if( ret == 0 )
 8087f2e:	4606      	mov	r6, r0
 8087f30:	b968      	cbnz	r0, 8087f4e <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 8087f32:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8087f34:	9a06      	ldr	r2, [sp, #24]
 8087f36:	9905      	ldr	r1, [sp, #20]
 8087f38:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 8087f3a:	1aff      	subs	r7, r7, r3
                buf += use_len;
 8087f3c:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8087f3e:	f7ff fc8d 	bl	808785c <mbedtls_x509_crt_parse_der>
 8087f42:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
 8087f44:	a805      	add	r0, sp, #20
 8087f46:	f005 fda7 	bl	808da98 <mbedtls_pem_free>

            if( ret != 0 )
 8087f4a:	b96e      	cbnz	r6, 8087f68 <mbedtls_x509_crt_parse+0x8c>
 8087f4c:	e015      	b.n	8087f7a <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 8087f4e:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 8087f52:	d015      	beq.n	8087f80 <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8087f54:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8087f58:	d014      	beq.n	8087f84 <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
 8087f5a:	a805      	add	r0, sp, #20
 8087f5c:	f005 fd9c 	bl	808da98 <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
 8087f60:	9b04      	ldr	r3, [sp, #16]
 8087f62:	1aff      	subs	r7, r7, r3
                buf += use_len;
 8087f64:	441d      	add	r5, r3
 8087f66:	e002      	b.n	8087f6e <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 8087f68:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
 8087f6c:	d008      	beq.n	8087f80 <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
 8087f6e:	f1b8 0f00 	cmp.w	r8, #0
 8087f72:	bf08      	it	eq
 8087f74:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
 8087f76:	3401      	adds	r4, #1
                continue;
 8087f78:	e7c9      	b.n	8087f0e <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
 8087f7a:	f04f 0a01 	mov.w	sl, #1
 8087f7e:	e7c6      	b.n	8087f0e <mbedtls_x509_crt_parse+0x32>
 8087f80:	4630      	mov	r0, r6
 8087f82:	e011      	b.n	8087fa8 <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
 8087f84:	f1ba 0f00 	cmp.w	sl, #0
 8087f88:	d107      	bne.n	8087f9a <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
 8087f8a:	480b      	ldr	r0, [pc, #44]	; (8087fb8 <mbedtls_x509_crt_parse+0xdc>)
 8087f8c:	f1b8 0f00 	cmp.w	r8, #0
 8087f90:	bf18      	it	ne
 8087f92:	4640      	movne	r0, r8
 8087f94:	e008      	b.n	8087fa8 <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8087f96:	4809      	ldr	r0, [pc, #36]	; (8087fbc <mbedtls_x509_crt_parse+0xe0>)
 8087f98:	e006      	b.n	8087fa8 <mbedtls_x509_crt_parse+0xcc>
 8087f9a:	4620      	mov	r0, r4
 8087f9c:	e004      	b.n	8087fa8 <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 8087f9e:	463a      	mov	r2, r7
 8087fa0:	4629      	mov	r1, r5
 8087fa2:	4648      	mov	r0, r9
 8087fa4:	f7ff fc5a 	bl	808785c <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
 8087fa8:	b008      	add	sp, #32
 8087faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8087fae:	bf00      	nop
 8087fb0:	080922b1 	.word	0x080922b1
 8087fb4:	080922cd 	.word	0x080922cd
 8087fb8:	ffffd880 	.word	0xffffd880
 8087fbc:	ffffd800 	.word	0xffffd800

08087fc0 <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8087fc0:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087fc2:	2300      	movs	r3, #0
 8087fc4:	4288      	cmp	r0, r1
 8087fc6:	d002      	beq.n	8087fce <_ZL15mbedtls_zeroizePvj+0xe>
 8087fc8:	7003      	strb	r3, [r0, #0]
 8087fca:	3001      	adds	r0, #1
 8087fcc:	e7fa      	b.n	8087fc4 <_ZL15mbedtls_zeroizePvj+0x4>
 8087fce:	4770      	bx	lr

08087fd0 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
 8087fd0:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
 8087fd2:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
 8087fd4:	b113      	cbz	r3, 8087fdc <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 8087fd6:	0889      	lsrs	r1, r1, #2
 8087fd8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8087fda:	4718      	bx	r3
 8087fdc:	4770      	bx	lr
	...

08087fe0 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8087fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8087fe2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8087fe4:	b0a9      	sub	sp, #164	; 0xa4
 8087fe6:	4604      	mov	r4, r0
 8087fe8:	460f      	mov	r7, r1
 8087fea:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 8087fec:	b905      	cbnz	r5, 8087ff0 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 8087fee:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
 8087ff0:	a80d      	add	r0, sp, #52	; 0x34
 8087ff2:	f7f8 ff0d 	bl	8080e10 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8087ff6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8087ff8:	a80d      	add	r0, sp, #52	; 0x34
 8087ffa:	3118      	adds	r1, #24
 8087ffc:	f7f8 ff16 	bl	8080e2c <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8088000:	4b10      	ldr	r3, [pc, #64]	; (8088044 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
 8088002:	4911      	ldr	r1, [pc, #68]	; (8088048 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 8088004:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8088006:	2e00      	cmp	r6, #0
 8088008:	bf0c      	ite	eq
 808800a:	461e      	moveq	r6, r3
 808800c:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 808800e:	a905      	add	r1, sp, #20
 8088010:	f7f9 fb06 	bl	8081620 <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 8088014:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
 8088016:	220c      	movs	r2, #12
 8088018:	2420      	movs	r4, #32
 808801a:	9202      	str	r2, [sp, #8]
 808801c:	9701      	str	r7, [sp, #4]
 808801e:	9400      	str	r4, [sp, #0]
 8088020:	4632      	mov	r2, r6
 8088022:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 8088026:	2130      	movs	r1, #48	; 0x30
 8088028:	ab05      	add	r3, sp, #20
 808802a:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808802e:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
 8088030:	a80d      	add	r0, sp, #52	; 0x34
 8088032:	f7f8 fef1 	bl	8080e18 <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 8088036:	4621      	mov	r1, r4
 8088038:	a805      	add	r0, sp, #20
 808803a:	f7ff ffc1 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 808803e:	b029      	add	sp, #164	; 0xa4
 8088040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8088042:	bf00      	nop
 8088044:	080926e1 	.word	0x080926e1
 8088048:	080926f1 	.word	0x080926f1

0808804c <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 808804c:	b530      	push	{r4, r5, lr}
 808804e:	4605      	mov	r5, r0
 8088050:	460c      	mov	r4, r1
 8088052:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 8088054:	a801      	add	r0, sp, #4
 8088056:	f7f8 fedb 	bl	8080e10 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 808805a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 808805c:	a801      	add	r0, sp, #4
 808805e:	3118      	adds	r1, #24
 8088060:	f7f8 fee4 	bl	8080e2c <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 8088064:	4621      	mov	r1, r4
 8088066:	a801      	add	r0, sp, #4
 8088068:	f7f9 fada 	bl	8081620 <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
 808806c:	a801      	add	r0, sp, #4
 808806e:	f7f8 fed3 	bl	8080e18 <mbedtls_sha256_free>

    return;
}
 8088072:	b01d      	add	sp, #116	; 0x74
 8088074:	bd30      	pop	{r4, r5, pc}
	...

08088078 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 8088078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808807c:	4604      	mov	r4, r0
 808807e:	b0b7      	sub	sp, #220	; 0xdc
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 8088080:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 8088082:	468a      	mov	sl, r1
 8088084:	4693      	mov	fp, r2
 8088086:	4699      	mov	r9, r3
 8088088:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 808808a:	f7fe fa63 	bl	8086554 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 808808e:	4620      	mov	r0, r4
 8088090:	f7fe fa54 	bl	808653c <mbedtls_md_info_from_type>
 8088094:	4607      	mov	r7, r0
 8088096:	2800      	cmp	r0, #0
 8088098:	d073      	beq.n	8088182 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10a>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
 808809a:	f7fe fb93 	bl	80867c4 <mbedtls_md_get_size>
 808809e:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 80880a0:	4648      	mov	r0, r9
 80880a2:	f008 faec 	bl	809067e <strlen>
 80880a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80880a8:	1823      	adds	r3, r4, r0
 80880aa:	189a      	adds	r2, r3, r2
 80880ac:	2a80      	cmp	r2, #128	; 0x80
 80880ae:	4605      	mov	r5, r0
 80880b0:	9301      	str	r3, [sp, #4]
 80880b2:	d868      	bhi.n	8088186 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
 80880b4:	ab16      	add	r3, sp, #88	; 0x58
 80880b6:	eb03 0804 	add.w	r8, r3, r4
 80880ba:	4602      	mov	r2, r0
 80880bc:	4649      	mov	r1, r9
 80880be:	4640      	mov	r0, r8
 80880c0:	f008 fa97 	bl	80905f2 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 80880c4:	9b01      	ldr	r3, [sp, #4]
 80880c6:	a816      	add	r0, sp, #88	; 0x58
 80880c8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80880ca:	9940      	ldr	r1, [sp, #256]	; 0x100
 80880cc:	4418      	add	r0, r3
 80880ce:	f008 fa90 	bl	80905f2 <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 80880d2:	4639      	mov	r1, r7
 80880d4:	2201      	movs	r2, #1
 80880d6:	a803      	add	r0, sp, #12
 80880d8:	f7fe fa62 	bl	80865a0 <mbedtls_md_setup>
 80880dc:	4607      	mov	r7, r0
 80880de:	2800      	cmp	r0, #0
 80880e0:	d152      	bne.n	8088188 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 80880e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 80880e4:	465a      	mov	r2, fp
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 80880e6:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 80880e8:	4651      	mov	r1, sl
 80880ea:	a803      	add	r0, sp, #12
 80880ec:	f7fe faa8 	bl	8086640 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 80880f0:	462a      	mov	r2, r5
 80880f2:	4641      	mov	r1, r8
 80880f4:	a803      	add	r0, sp, #12
 80880f6:	f7fe fb03 	bl	8086700 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 80880fa:	a916      	add	r1, sp, #88	; 0x58
 80880fc:	a803      	add	r0, sp, #12
 80880fe:	f7fe fb0f 	bl	8086720 <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 8088102:	46b9      	mov	r9, r7
 8088104:	f10d 0818 	add.w	r8, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8088108:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 808810a:	45b1      	cmp	r9, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 808810c:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 808810e:	d22c      	bcs.n	808816a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 8088110:	f7fe fb36 	bl	8086780 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8088114:	462a      	mov	r2, r5
 8088116:	a916      	add	r1, sp, #88	; 0x58
 8088118:	a803      	add	r0, sp, #12
 808811a:	f7fe faf1 	bl	8086700 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 808811e:	4641      	mov	r1, r8
 8088120:	a803      	add	r0, sp, #12
 8088122:	f7fe fafd 	bl	8086720 <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 8088126:	a803      	add	r0, sp, #12
 8088128:	f7fe fb2a 	bl	8086780 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 808812c:	4622      	mov	r2, r4
 808812e:	a916      	add	r1, sp, #88	; 0x58
 8088130:	a803      	add	r0, sp, #12
 8088132:	f7fe fae5 	bl	8086700 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 8088136:	a916      	add	r1, sp, #88	; 0x58
 8088138:	a803      	add	r0, sp, #12
 808813a:	f7fe faf1 	bl	8086720 <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 808813e:	eb09 0104 	add.w	r1, r9, r4
 8088142:	428e      	cmp	r6, r1
 8088144:	bf36      	itet	cc
 8088146:	fbb6 f2f4 	udivcc	r2, r6, r4
 808814a:	4622      	movcs	r2, r4
 808814c:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 8088150:	9842      	ldr	r0, [sp, #264]	; 0x108
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 8088152:	2300      	movs	r3, #0
            dstbuf[i + j]  = h_i[j];
 8088154:	4481      	add	r9, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 8088156:	4293      	cmp	r3, r2
 8088158:	d101      	bne.n	808815e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe6>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 808815a:	4689      	mov	r9, r1
 808815c:	e7d5      	b.n	808810a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 808815e:	f818 0003 	ldrb.w	r0, [r8, r3]
 8088162:	f809 0003 	strb.w	r0, [r9, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 8088166:	3301      	adds	r3, #1
 8088168:	e7f5      	b.n	8088156 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xde>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 808816a:	f7fe f9f8 	bl	808655e <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
 808816e:	2180      	movs	r1, #128	; 0x80
 8088170:	a816      	add	r0, sp, #88	; 0x58
 8088172:	f7ff ff25 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 8088176:	4640      	mov	r0, r8
 8088178:	2140      	movs	r1, #64	; 0x40
 808817a:	f7ff ff21 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>

    return( 0 );
 808817e:	2000      	movs	r0, #0
 8088180:	e002      	b.n	8088188 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8088182:	4803      	ldr	r0, [pc, #12]	; (8088190 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x118>)
 8088184:	e000      	b.n	8088188 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8088186:	4803      	ldr	r0, [pc, #12]	; (8088194 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)

    mbedtls_zeroize( tmp, sizeof( tmp ) );
    mbedtls_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
 8088188:	b037      	add	sp, #220	; 0xdc
 808818a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808818e:	bf00      	nop
 8088190:	ffff9400 	.word	0xffff9400
 8088194:	ffff8f00 	.word	0xffff8f00

08088198 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 8088198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 808819a:	9c08      	ldr	r4, [sp, #32]
 808819c:	9403      	str	r4, [sp, #12]
 808819e:	9c07      	ldr	r4, [sp, #28]
 80881a0:	9402      	str	r4, [sp, #8]
 80881a2:	9c06      	ldr	r4, [sp, #24]
 80881a4:	e88d 0018 	stmia.w	sp, {r3, r4}
 80881a8:	4613      	mov	r3, r2
 80881aa:	460a      	mov	r2, r1
 80881ac:	4601      	mov	r1, r0
 80881ae:	2006      	movs	r0, #6
 80881b0:	f7ff ff62 	bl	8088078 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 80881b4:	b004      	add	sp, #16
 80881b6:	bd10      	pop	{r4, pc}

080881b8 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 80881b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 80881ba:	9c08      	ldr	r4, [sp, #32]
 80881bc:	9403      	str	r4, [sp, #12]
 80881be:	9c07      	ldr	r4, [sp, #28]
 80881c0:	9402      	str	r4, [sp, #8]
 80881c2:	9c06      	ldr	r4, [sp, #24]
 80881c4:	e88d 0018 	stmia.w	sp, {r3, r4}
 80881c8:	4613      	mov	r3, r2
 80881ca:	460a      	mov	r2, r1
 80881cc:	4601      	mov	r1, r0
 80881ce:	2007      	movs	r0, #7
 80881d0:	f7ff ff52 	bl	8088078 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 80881d4:	b004      	add	sp, #16
 80881d6:	bd10      	pop	{r4, pc}

080881d8 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80881d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80881da:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80881dc:	b0c7      	sub	sp, #284	; 0x11c
 80881de:	4604      	mov	r4, r0
 80881e0:	460f      	mov	r7, r1
 80881e2:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 80881e4:	b905      	cbnz	r5, 80881e8 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 80881e6:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
 80881e8:	a810      	add	r0, sp, #64	; 0x40
 80881ea:	f004 fa1f 	bl	808c62c <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 80881ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80881f0:	a810      	add	r0, sp, #64	; 0x40
 80881f2:	3188      	adds	r1, #136	; 0x88
 80881f4:	f004 fa28 	bl	808c648 <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80881f8:	4b10      	ldr	r3, [pc, #64]	; (808823c <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
 80881fa:	4911      	ldr	r1, [pc, #68]	; (8088240 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 80881fc:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80881fe:	2e00      	cmp	r6, #0
 8088200:	bf0c      	ite	eq
 8088202:	461e      	moveq	r6, r3
 8088204:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8088206:	a904      	add	r1, sp, #16
 8088208:	f005 f94a 	bl	808d4a0 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 808820c:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
 808820e:	220c      	movs	r2, #12
 8088210:	2430      	movs	r4, #48	; 0x30
 8088212:	9202      	str	r2, [sp, #8]
 8088214:	9701      	str	r7, [sp, #4]
 8088216:	9400      	str	r4, [sp, #0]
 8088218:	4632      	mov	r2, r6
 808821a:	4621      	mov	r1, r4
 808821c:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 8088220:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8088224:	ab04      	add	r3, sp, #16
 8088226:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
 8088228:	a810      	add	r0, sp, #64	; 0x40
 808822a:	f004 fa03 	bl	808c634 <mbedtls_sha512_free>

    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 808822e:	4621      	mov	r1, r4
 8088230:	a804      	add	r0, sp, #16
 8088232:	f7ff fec5 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 8088236:	b047      	add	sp, #284	; 0x11c
 8088238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808823a:	bf00      	nop
 808823c:	080926e1 	.word	0x080926e1
 8088240:	080926f1 	.word	0x080926f1

08088244 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
 8088244:	b530      	push	{r4, r5, lr}
 8088246:	4605      	mov	r5, r0
 8088248:	460c      	mov	r4, r1
 808824a:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
 808824c:	4668      	mov	r0, sp
 808824e:	f004 f9ed 	bl	808c62c <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 8088252:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8088254:	4668      	mov	r0, sp
 8088256:	3188      	adds	r1, #136	; 0x88
 8088258:	f004 f9f6 	bl	808c648 <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
 808825c:	4621      	mov	r1, r4
 808825e:	4668      	mov	r0, sp
 8088260:	f005 f91e 	bl	808d4a0 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
 8088264:	4668      	mov	r0, sp
 8088266:	f004 f9e5 	bl	808c634 <mbedtls_sha512_free>

    return;
}
 808826a:	b037      	add	sp, #220	; 0xdc
 808826c:	bd30      	pop	{r4, r5, pc}
	...

08088270 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 8088270:	b570      	push	{r4, r5, r6, lr}
 8088272:	4604      	mov	r4, r0
 8088274:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 8088276:	2001      	movs	r0, #1
 8088278:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 808827a:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 808827c:	f008 f994 	bl	80905a8 <calloc>
    if( new_cert == NULL )
 8088280:	b178      	cbz	r0, 80882a2 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 8088282:	6822      	ldr	r2, [r4, #0]
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;
 8088284:	2300      	movs	r3, #0

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
 8088286:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
 8088288:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
 808828a:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 808828c:	b912      	cbnz	r2, 8088294 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
 808828e:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
 8088290:	4610      	mov	r0, r2
 8088292:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
 8088294:	6893      	ldr	r3, [r2, #8]
 8088296:	b10b      	cbz	r3, 808829c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
 8088298:	461a      	mov	r2, r3
 808829a:	e7fb      	b.n	8088294 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
 808829c:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
 808829e:	4618      	mov	r0, r3
 80882a0:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80882a2:	4801      	ldr	r0, [pc, #4]	; (80882a8 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
 80882a4:	bd70      	pop	{r4, r5, r6, pc}
 80882a6:	bf00      	nop
 80882a8:	ffff8100 	.word	0xffff8100

080882ac <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 80882ac:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80882ae:	3018      	adds	r0, #24
 80882b0:	f7f9 b97c 	b.w	80815ac <mbedtls_sha256_update_ret>

080882b4 <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80882b4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80882b6:	3088      	adds	r0, #136	; 0x88
 80882b8:	f005 b8aa 	b.w	808d410 <mbedtls_sha512_update_ret>

080882bc <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
 80882bc:	b570      	push	{r4, r5, r6, lr}
 80882be:	4604      	mov	r4, r0
 80882c0:	460d      	mov	r5, r1
 80882c2:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 80882c4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80882c6:	3018      	adds	r0, #24
 80882c8:	f7f9 f970 	bl	80815ac <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80882cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80882ce:	4632      	mov	r2, r6
 80882d0:	4629      	mov	r1, r5
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 80882d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80882d6:	3088      	adds	r0, #136	; 0x88
 80882d8:	f005 b89a 	b.w	808d410 <mbedtls_sha512_update_ret>

080882dc <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80882dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80882e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 80882e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80882e4:	b0d7      	sub	sp, #348	; 0x15c
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80882e6:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 80882e8:	6823      	ldr	r3, [r4, #0]
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 80882ea:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80882ec:	4680      	mov	r8, r0
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 80882ee:	7a18      	ldrb	r0, [r3, #8]
 80882f0:	f7f9 fc92 	bl	8081c18 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 80882f4:	4606      	mov	r6, r0
 80882f6:	b908      	cbnz	r0, 80882fc <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80882f8:	48a5      	ldr	r0, [pc, #660]	; (8088590 <mbedtls_ssl_derive_keys+0x2b4>)
 80882fa:	e145      	b.n	8088588 <mbedtls_ssl_derive_keys+0x2ac>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 80882fc:	6823      	ldr	r3, [r4, #0]
 80882fe:	7a58      	ldrb	r0, [r3, #9]
 8088300:	f7fe f91c 	bl	808653c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8088304:	4682      	mov	sl, r0
 8088306:	2800      	cmp	r0, #0
 8088308:	d0f6      	beq.n	80882f8 <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 808830a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808830e:	2b03      	cmp	r3, #3
 8088310:	d001      	beq.n	8088316 <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8088312:	48a0      	ldr	r0, [pc, #640]	; (8088594 <mbedtls_ssl_derive_keys+0x2b8>)
 8088314:	e138      	b.n	8088588 <mbedtls_ssl_derive_keys+0x2ac>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 8088316:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8088318:	7a5b      	ldrb	r3, [r3, #9]
 808831a:	2b07      	cmp	r3, #7
 808831c:	d107      	bne.n	808832e <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
 808831e:	4b9e      	ldr	r3, [pc, #632]	; (8088598 <mbedtls_ssl_derive_keys+0x2bc>)
 8088320:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 8088324:	4b9d      	ldr	r3, [pc, #628]	; (808859c <mbedtls_ssl_derive_keys+0x2c0>)
 8088326:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 808832a:	4b9d      	ldr	r3, [pc, #628]	; (80885a0 <mbedtls_ssl_derive_keys+0x2c4>)
 808832c:	e006      	b.n	808833c <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
 808832e:	4b9d      	ldr	r3, [pc, #628]	; (80885a4 <mbedtls_ssl_derive_keys+0x2c8>)
 8088330:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 8088334:	4b9c      	ldr	r3, [pc, #624]	; (80885a8 <mbedtls_ssl_derive_keys+0x2cc>)
 8088336:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 808833a:	4b9c      	ldr	r3, [pc, #624]	; (80885ac <mbedtls_ssl_derive_keys+0x2d0>)
 808833c:	f8c5 3168 	str.w	r3, [r5, #360]	; 0x168
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 8088340:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 8088344:	f505 7bda 	add.w	fp, r5, #436	; 0x1b4
 8088348:	f505 79ba 	add.w	r9, r5, #372	; 0x174
 808834c:	b9ab      	cbnz	r3, 808837a <mbedtls_ssl_derive_keys+0x9e>
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 808834e:	2330      	movs	r3, #48	; 0x30
 8088350:	9302      	str	r3, [sp, #8]
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8088352:	9b05      	ldr	r3, [sp, #20]
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 8088354:	4a96      	ldr	r2, [pc, #600]	; (80885b0 <mbedtls_ssl_derive_keys+0x2d4>)
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8088356:	332c      	adds	r3, #44	; 0x2c
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 8088358:	9301      	str	r3, [sp, #4]
 808835a:	2340      	movs	r3, #64	; 0x40
 808835c:	9300      	str	r3, [sp, #0]
 808835e:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
 8088362:	464b      	mov	r3, r9
 8088364:	4658      	mov	r0, fp
 8088366:	f8d5 716c 	ldr.w	r7, [r5, #364]	; 0x16c
 808836a:	47b8      	blx	r7
        if( ret != 0 )
 808836c:	2800      	cmp	r0, #0
 808836e:	f040 810b 	bne.w	8088588 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 8088372:	2130      	movs	r1, #48	; 0x30
 8088374:	4658      	mov	r0, fp
 8088376:	f7ff fe23 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 808837a:	464b      	mov	r3, r9
 808837c:	af06      	add	r7, sp, #24
 808837e:	463a      	mov	r2, r7
 8088380:	6818      	ldr	r0, [r3, #0]
 8088382:	6859      	ldr	r1, [r3, #4]
 8088384:	3308      	adds	r3, #8
 8088386:	c203      	stmia	r2!, {r0, r1}
 8088388:	455b      	cmp	r3, fp
 808838a:	4617      	mov	r7, r2
 808838c:	d1f7      	bne.n	808837e <mbedtls_ssl_derive_keys+0xa2>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 808838e:	464f      	mov	r7, r9
 8088390:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 8088394:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 8088398:	4673      	mov	r3, lr
 808839a:	cb03      	ldmia	r3!, {r0, r1}
 808839c:	455b      	cmp	r3, fp
 808839e:	6038      	str	r0, [r7, #0]
 80883a0:	6079      	str	r1, [r7, #4]
 80883a2:	469e      	mov	lr, r3
 80883a4:	f107 0708 	add.w	r7, r7, #8
 80883a8:	d1f6      	bne.n	8088398 <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 80883aa:	f10d 0e18 	add.w	lr, sp, #24
 80883ae:	f505 77ca 	add.w	r7, r5, #404	; 0x194
 80883b2:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80883b6:	4673      	mov	r3, lr
 80883b8:	cb03      	ldmia	r3!, {r0, r1}
 80883ba:	4563      	cmp	r3, ip
 80883bc:	6038      	str	r0, [r7, #0]
 80883be:	6079      	str	r1, [r7, #4]
 80883c0:	469e      	mov	lr, r3
 80883c2:	f107 0708 	add.w	r7, r7, #8
 80883c6:	d1f6      	bne.n	80883b6 <mbedtls_ssl_derive_keys+0xda>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 80883c8:	2140      	movs	r1, #64	; 0x40
 80883ca:	a806      	add	r0, sp, #24
 80883cc:	f7ff fdf8 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80883d0:	9f05      	ldr	r7, [sp, #20]
                              handshake->randbytes, 64, keyblk, 256 );
 80883d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80883d6:	f8cd b004 	str.w	fp, [sp, #4]
 80883da:	f04f 0b40 	mov.w	fp, #64	; 0x40
 80883de:	9302      	str	r3, [sp, #8]
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80883e0:	372c      	adds	r7, #44	; 0x2c
                              handshake->randbytes, 64, keyblk, 256 );
 80883e2:	f8cd b000 	str.w	fp, [sp]
 80883e6:	f8d5 516c 	ldr.w	r5, [r5, #364]	; 0x16c
 80883ea:	464b      	mov	r3, r9
 80883ec:	4a71      	ldr	r2, [pc, #452]	; (80885b4 <mbedtls_ssl_derive_keys+0x2d8>)
 80883ee:	2130      	movs	r1, #48	; 0x30
 80883f0:	4638      	mov	r0, r7
 80883f2:	47a8      	blx	r5
    if( ret != 0 )
 80883f4:	2800      	cmp	r0, #0
 80883f6:	f040 80c7 	bne.w	8088588 <mbedtls_ssl_derive_keys+0x2ac>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 80883fa:	4659      	mov	r1, fp
 80883fc:	4648      	mov	r0, r9
 80883fe:	f7ff fddf 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 8088402:	6873      	ldr	r3, [r6, #4]
 8088404:	08db      	lsrs	r3, r3, #3
 8088406:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 8088408:	7873      	ldrb	r3, [r6, #1]
 808840a:	2b06      	cmp	r3, #6
 808840c:	d001      	beq.n	8088412 <mbedtls_ssl_derive_keys+0x136>
 808840e:	2b08      	cmp	r3, #8
 8088410:	d10f      	bne.n	8088432 <mbedtls_ssl_derive_keys+0x156>
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;

        transform->ivlen = 12;
 8088412:	220c      	movs	r2, #12
 8088414:	60e2      	str	r2, [r4, #12]
        transform->fixed_ivlen = 4;
 8088416:	2204      	movs	r2, #4
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 8088418:	2300      	movs	r3, #0
        mac_key_len = 0;

        transform->ivlen = 12;
        transform->fixed_ivlen = 4;
 808841a:	6122      	str	r2, [r4, #16]

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 808841c:	6822      	ldr	r2, [r4, #0]
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 808841e:	6163      	str	r3, [r4, #20]
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 8088420:	7f12      	ldrb	r2, [r2, #28]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;
 8088422:	469a      	mov	sl, r3
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 8088424:	f012 0f02 	tst.w	r2, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 8088428:	bf14      	ite	ne
 808842a:	2210      	movne	r2, #16
 808842c:	2218      	moveq	r2, #24
 808842e:	60a2      	str	r2, [r4, #8]
 8088430:	e01d      	b.n	808846e <mbedtls_ssl_derive_keys+0x192>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 8088432:	2201      	movs	r2, #1
 8088434:	4651      	mov	r1, sl
 8088436:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808843a:	f7fe f8b1 	bl	80865a0 <mbedtls_md_setup>
 808843e:	2800      	cmp	r0, #0
 8088440:	f040 80a2 	bne.w	8088588 <mbedtls_ssl_derive_keys+0x2ac>
 8088444:	2201      	movs	r2, #1
 8088446:	4651      	mov	r1, sl
 8088448:	f104 0044 	add.w	r0, r4, #68	; 0x44
 808844c:	f7fe f8a8 	bl	80865a0 <mbedtls_md_setup>
 8088450:	2800      	cmp	r0, #0
 8088452:	f040 8099 	bne.w	8088588 <mbedtls_ssl_derive_keys+0x2ac>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 8088456:	4650      	mov	r0, sl
 8088458:	f7fe f9b4 	bl	80867c4 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
 808845c:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 808845e:	68f1      	ldr	r1, [r6, #12]
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 8088460:	4682      	mov	sl, r0
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 8088462:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 8088464:	7873      	ldrb	r3, [r6, #1]
 8088466:	2b07      	cmp	r3, #7
 8088468:	d17f      	bne.n	808856a <mbedtls_ssl_derive_keys+0x28e>
            transform->minlen = transform->maclen;
 808846a:	f8c4 a008 	str.w	sl, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808846e:	f8d8 3000 	ldr.w	r3, [r8]
 8088472:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8088476:	07db      	lsls	r3, r3, #31
 8088478:	f53f af4b 	bmi.w	8088312 <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 808847c:	6863      	ldr	r3, [r4, #4]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
 808847e:	ea4f 094a 	mov.w	r9, sl, lsl #1
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 8088482:	f8d4 b010 	ldr.w	fp, [r4, #16]
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 8088486:	eb09 0503 	add.w	r5, r9, r3
 808848a:	aa16      	add	r2, sp, #88	; 0x58
 808848c:	4415      	add	r5, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
 808848e:	f1bb 0f00 	cmp.w	fp, #0
 8088492:	d101      	bne.n	8088498 <mbedtls_ssl_derive_keys+0x1bc>
 8088494:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 8088498:	18e9      	adds	r1, r5, r3
 808849a:	465a      	mov	r2, fp
 808849c:	f104 0018 	add.w	r0, r4, #24
 80884a0:	9305      	str	r3, [sp, #20]
 80884a2:	f008 f8a6 	bl	80905f2 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
 80884a6:	9b05      	ldr	r3, [sp, #20]
 80884a8:	465a      	mov	r2, fp
 80884aa:	eb0b 0103 	add.w	r1, fp, r3
 80884ae:	4429      	add	r1, r5
 80884b0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80884b4:	f008 f89d 	bl	80905f2 <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80884b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80884bc:	2b00      	cmp	r3, #0
 80884be:	f77f af28 	ble.w	8088312 <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
 80884c2:	f1ba 0f00 	cmp.w	sl, #0
 80884c6:	d00d      	beq.n	80884e4 <mbedtls_ssl_derive_keys+0x208>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 80884c8:	4652      	mov	r2, sl
 80884ca:	a916      	add	r1, sp, #88	; 0x58
 80884cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80884d0:	f7fe f8b6 	bl	8086640 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 80884d4:	ab16      	add	r3, sp, #88	; 0x58
 80884d6:	4652      	mov	r2, sl
 80884d8:	eb03 010a 	add.w	r1, r3, sl
 80884dc:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80884e0:	f7fe f8ae 	bl	8086640 <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
 80884e4:	f8d8 0000 	ldr.w	r0, [r8]
 80884e8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80884ec:	f1b8 0f00 	cmp.w	r8, #0
 80884f0:	d008      	beq.n	8088504 <mbedtls_ssl_derive_keys+0x228>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
 80884f2:	f8cd b004 	str.w	fp, [sp, #4]
 80884f6:	6863      	ldr	r3, [r4, #4]
 80884f8:	aa16      	add	r2, sp, #88	; 0x58
 80884fa:	9300      	str	r3, [sp, #0]
 80884fc:	4639      	mov	r1, r7
 80884fe:	4653      	mov	r3, sl
 8088500:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8088502:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 8088504:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8088508:	4631      	mov	r1, r6
 808850a:	4638      	mov	r0, r7
 808850c:	f7f9 fd7a 	bl	8082004 <mbedtls_cipher_setup>
 8088510:	2800      	cmp	r0, #0
 8088512:	d139      	bne.n	8088588 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 8088514:	3490      	adds	r4, #144	; 0x90
 8088516:	4631      	mov	r1, r6
 8088518:	4620      	mov	r0, r4
 808851a:	f7f9 fd73 	bl	8082004 <mbedtls_cipher_setup>
 808851e:	bb98      	cbnz	r0, 8088588 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 8088520:	a916      	add	r1, sp, #88	; 0x58
 8088522:	2301      	movs	r3, #1
 8088524:	6872      	ldr	r2, [r6, #4]
 8088526:	4449      	add	r1, r9
 8088528:	4638      	mov	r0, r7
 808852a:	f7f9 fbad 	bl	8081c88 <mbedtls_cipher_setkey>
 808852e:	bb58      	cbnz	r0, 8088588 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 8088530:	4603      	mov	r3, r0
 8088532:	6872      	ldr	r2, [r6, #4]
 8088534:	4629      	mov	r1, r5
 8088536:	4620      	mov	r0, r4
 8088538:	f7f9 fba6 	bl	8081c88 <mbedtls_cipher_setkey>
 808853c:	bb20      	cbnz	r0, 8088588 <mbedtls_ssl_derive_keys+0x2ac>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 808853e:	7873      	ldrb	r3, [r6, #1]
 8088540:	2b02      	cmp	r3, #2
 8088542:	d006      	beq.n	8088552 <mbedtls_ssl_derive_keys+0x276>
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 8088544:	a816      	add	r0, sp, #88	; 0x58
 8088546:	f44f 7180 	mov.w	r1, #256	; 0x100
 808854a:	f7ff fd39 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
 808854e:	2000      	movs	r0, #0
 8088550:	e01a      	b.n	8088588 <mbedtls_ssl_derive_keys+0x2ac>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
    {
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 8088552:	2104      	movs	r1, #4
 8088554:	4638      	mov	r0, r7
 8088556:	f7f9 fd17 	bl	8081f88 <mbedtls_cipher_set_padding_mode>
 808855a:	b9a8      	cbnz	r0, 8088588 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
            return( ret );
        }

        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 808855c:	2104      	movs	r1, #4
 808855e:	4620      	mov	r0, r4
 8088560:	f7f9 fd12 	bl	8081f88 <mbedtls_cipher_set_padding_mode>
 8088564:	2800      	cmp	r0, #0
 8088566:	d0ed      	beq.n	8088544 <mbedtls_ssl_derive_keys+0x268>
 8088568:	e00e      	b.n	8088588 <mbedtls_ssl_derive_keys+0x2ac>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
 808856a:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
 808856c:	fbba f2f3 	udiv	r2, sl, r3
 8088570:	fb03 3302 	mla	r3, r3, r2, r3
 8088574:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 8088576:	f8d8 200c 	ldr.w	r2, [r8, #12]
 808857a:	3a02      	subs	r2, #2
 808857c:	2a01      	cmp	r2, #1
 808857e:	f63f aec8 	bhi.w	8088312 <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
 8088582:	440b      	add	r3, r1
 8088584:	60a3      	str	r3, [r4, #8]
 8088586:	e772      	b.n	808846e <mbedtls_ssl_derive_keys+0x192>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
 8088588:	b057      	add	sp, #348	; 0x15c
 808858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808858e:	bf00      	nop
 8088590:	ffff8f00 	.word	0xffff8f00
 8088594:	ffff9400 	.word	0xffff9400
 8088598:	080881b9 	.word	0x080881b9
 808859c:	08088245 	.word	0x08088245
 80885a0:	080881d9 	.word	0x080881d9
 80885a4:	08088199 	.word	0x08088199
 80885a8:	0808804d 	.word	0x0808804d
 80885ac:	08087fe1 	.word	0x08087fe1
 80885b0:	08092701 	.word	0x08092701
 80885b4:	0809270f 	.word	0x0809270f

080885b8 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 80885b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 80885ba:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 80885bc:	4604      	mov	r4, r0
 80885be:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 80885c0:	b90b      	cbnz	r3, 80885c6 <mbedtls_ssl_fetch_input+0xe>
 80885c2:	6983      	ldr	r3, [r0, #24]
 80885c4:	b19b      	cbz	r3, 80885ee <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 80885c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80885c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80885ca:	1a9b      	subs	r3, r3, r2
 80885cc:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 80885d0:	330d      	adds	r3, #13
 80885d2:	42b3      	cmp	r3, r6
 80885d4:	d30b      	bcc.n	80885ee <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 80885d6:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80885d8:	42ae      	cmp	r6, r5
 80885da:	d90a      	bls.n	80885f2 <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 80885dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
 80885de:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 80885e0:	b14b      	cbz	r3, 80885f6 <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 80885e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80885e4:	4798      	blx	r3
 80885e6:	2802      	cmp	r0, #2
 80885e8:	d105      	bne.n	80885f6 <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 80885ea:	4812      	ldr	r0, [pc, #72]	; (8088634 <mbedtls_ssl_fetch_input+0x7c>)
 80885ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80885ee:	4812      	ldr	r0, [pc, #72]	; (8088638 <mbedtls_ssl_fetch_input+0x80>)
 80885f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
 80885f2:	2000      	movs	r0, #0
 80885f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
 80885f6:	69a7      	ldr	r7, [r4, #24]
 80885f8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80885fa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80885fc:	b137      	cbz	r7, 808860c <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
 80885fe:	6823      	ldr	r3, [r4, #0]
 8088600:	4401      	add	r1, r0
 8088602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8088604:	462a      	mov	r2, r5
 8088606:	69e0      	ldr	r0, [r4, #28]
 8088608:	47b8      	blx	r7
 808860a:	e004      	b.n	8088616 <mbedtls_ssl_fetch_input+0x5e>
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
                                       ssl->in_hdr + ssl->in_left, len );
 808860c:	4401      	add	r1, r0
 808860e:	6963      	ldr	r3, [r4, #20]
 8088610:	462a      	mov	r2, r5
 8088612:	69e0      	ldr	r0, [r4, #28]
 8088614:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
 8088616:	2800      	cmp	r0, #0
 8088618:	d006      	beq.n	8088628 <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
 808861a:	db09      	blt.n	8088630 <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 808861c:	4285      	cmp	r5, r0
 808861e:	d305      	bcc.n	808862c <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
 8088620:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8088622:	4418      	add	r0, r3
 8088624:	6760      	str	r0, [r4, #116]	; 0x74
 8088626:	e7d6      	b.n	80885d6 <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 8088628:	4804      	ldr	r0, [pc, #16]	; (808863c <mbedtls_ssl_fetch_input+0x84>)
 808862a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808862c:	4804      	ldr	r0, [pc, #16]	; (8088640 <mbedtls_ssl_fetch_input+0x88>)
 808862e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
 8088630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088632:	bf00      	nop
 8088634:	ffff9800 	.word	0xffff9800
 8088638:	ffff8f00 	.word	0xffff8f00
 808863c:	ffff8d80 	.word	0xffff8d80
 8088640:	ffff9400 	.word	0xffff9400

08088644 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 8088644:	b510      	push	{r4, lr}
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 8088646:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 8088648:	4604      	mov	r4, r0
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 808864a:	b34b      	cbz	r3, 80886a0 <mbedtls_ssl_flush_output+0x5c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 808864c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8088650:	b9a3      	cbnz	r3, 808867c <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
 8088652:	2000      	movs	r0, #0
 8088654:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
              ssl->out_msglen - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 8088656:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 808865a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 808865e:	3105      	adds	r1, #5
 8088660:	1a89      	subs	r1, r1, r2
 8088662:	4401      	add	r1, r0
 8088664:	6923      	ldr	r3, [r4, #16]
 8088666:	69e0      	ldr	r0, [r4, #28]
 8088668:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
 808866a:	2800      	cmp	r0, #0
 808866c:	dd1b      	ble.n	80886a6 <mbedtls_ssl_flush_output+0x62>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 808866e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8088672:	4283      	cmp	r3, r0
 8088674:	d316      	bcc.n	80886a4 <mbedtls_ssl_flush_output+0x60>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
 8088676:	1a18      	subs	r0, r3, r0
 8088678:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
 808867c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8088680:	2a00      	cmp	r2, #0
 8088682:	d1e8      	bne.n	8088656 <mbedtls_ssl_flush_output+0x12>
 8088684:	2207      	movs	r2, #7

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
        if( ++ssl->out_ctr[i - 1] != 0 )
 8088686:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 808868a:	5c8b      	ldrb	r3, [r1, r2]
 808868c:	3301      	adds	r3, #1
 808868e:	b2db      	uxtb	r3, r3
 8088690:	548b      	strb	r3, [r1, r2]
 8088692:	2b00      	cmp	r3, #0
 8088694:	d1dd      	bne.n	8088652 <mbedtls_ssl_flush_output+0xe>
        }

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8088696:	f112 32ff 	adds.w	r2, r2, #4294967295
 808869a:	d2f4      	bcs.n	8088686 <mbedtls_ssl_flush_output+0x42>

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 808869c:	4802      	ldr	r0, [pc, #8]	; (80886a8 <mbedtls_ssl_flush_output+0x64>)
 808869e:	bd10      	pop	{r4, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80886a0:	4802      	ldr	r0, [pc, #8]	; (80886ac <mbedtls_ssl_flush_output+0x68>)
 80886a2:	bd10      	pop	{r4, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80886a4:	4802      	ldr	r0, [pc, #8]	; (80886b0 <mbedtls_ssl_flush_output+0x6c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
 80886a6:	bd10      	pop	{r4, pc}
 80886a8:	ffff9480 	.word	0xffff9480
 80886ac:	ffff8f00 	.word	0xffff8f00
 80886b0:	ffff9400 	.word	0xffff9400

080886b4 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80886b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80886b6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80886ba:	b097      	sub	sp, #92	; 0x5c
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80886bc:	2b16      	cmp	r3, #22
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80886be:	4604      	mov	r4, r0
    int ret, done = 0, out_msg_type;
    size_t len = ssl->out_msglen;
 80886c0:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80886c4:	d11a      	bne.n	80886fc <mbedtls_ssl_write_record+0x48>
    {
        out_msg_type = ssl->out_msg[0];
 80886c6:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 80886ca:	780a      	ldrb	r2, [r1, #0]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 80886cc:	b11a      	cbz	r2, 80886d6 <mbedtls_ssl_write_record+0x22>
 80886ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80886d0:	2b00      	cmp	r3, #0
 80886d2:	f000 8139 	beq.w	8088948 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 80886d6:	1f2b      	subs	r3, r5, #4
 80886d8:	0c18      	lsrs	r0, r3, #16
 80886da:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 80886dc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80886e0:	0a18      	lsrs	r0, r3, #8
 80886e2:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 80886e4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80886e8:	70cb      	strb	r3, [r1, #3]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 80886ea:	b13a      	cbz	r2, 80886fc <mbedtls_ssl_write_record+0x48>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 80886ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80886ee:	462a      	mov	r2, r5
 80886f0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80886f4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80886f8:	4620      	mov	r0, r4
 80886fa:	4798      	blx	r3
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 80886fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8088700:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8088704:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8088706:	68e2      	ldr	r2, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 8088708:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808870c:	68a1      	ldr	r1, [r4, #8]
        ver[1] = (unsigned char) minor;
 808870e:	709a      	strb	r2, [r3, #2]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8088710:	7059      	strb	r1, [r3, #1]
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        ssl->out_len[0] = (unsigned char)( len >> 8 );
 8088712:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8088716:	0a2a      	lsrs	r2, r5, #8
 8088718:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 808871a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 808871e:	705d      	strb	r5, [r3, #1]

        if( ssl->transform_out != NULL )
 8088720:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8088722:	2800      	cmp	r0, #0
 8088724:	f000 8107 	beq.w	8088936 <mbedtls_ssl_write_record+0x282>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 8088728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808872a:	2b00      	cmp	r3, #0
 808872c:	f000 810c 	beq.w	8088948 <mbedtls_ssl_write_record+0x294>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8088730:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8088732:	b105      	cbz	r5, 8088736 <mbedtls_ssl_write_record+0x82>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 8088734:	786d      	ldrb	r5, [r5, #1]
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8088736:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 808873a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808873e:	f200 8105 	bhi.w	808894c <mbedtls_ssl_write_record+0x298>

    /*
     * Add MAC before if needed
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( mode == MBEDTLS_MODE_STREAM ||
 8088742:	2d07      	cmp	r5, #7
 8088744:	d001      	beq.n	808874a <mbedtls_ssl_write_record+0x96>
 8088746:	2d02      	cmp	r5, #2
 8088748:	d13b      	bne.n	80887c2 <mbedtls_ssl_write_record+0x10e>
        }
        else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 808874a:	68e3      	ldr	r3, [r4, #12]
 808874c:	2b00      	cmp	r3, #0
 808874e:	f340 80fb 	ble.w	8088948 <mbedtls_ssl_write_record+0x294>
        {
            unsigned char mac[MBEDTLS_SSL_MAC_ADD];

            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 8088752:	2208      	movs	r2, #8
 8088754:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8088758:	3038      	adds	r0, #56	; 0x38
 808875a:	f7fd ffd1 	bl	8086700 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 808875e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8088760:	2203      	movs	r2, #3
 8088762:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8088766:	3038      	adds	r0, #56	; 0x38
 8088768:	f7fd ffca 	bl	8086700 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 808876c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808876e:	2202      	movs	r2, #2
 8088770:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8088774:	3038      	adds	r0, #56	; 0x38
 8088776:	f7fd ffc3 	bl	8086700 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 808877a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
                             ssl->out_msg, ssl->out_msglen );
 808877c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8088780:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8088784:	3038      	adds	r0, #56	; 0x38
 8088786:	f7fd ffbb 	bl	8086700 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 808878a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808878c:	a90a      	add	r1, sp, #40	; 0x28
 808878e:	3038      	adds	r0, #56	; 0x38
 8088790:	f7fd ffc6 	bl	8086720 <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 8088794:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
        auth_done++;
 8088796:	2601      	movs	r6, #1
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
                             ssl->out_msg, ssl->out_msglen );
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 8088798:	3038      	adds	r0, #56	; 0x38
 808879a:	f7fd fff1 	bl	8086780 <mbedtls_md_hmac_reset>

            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 808879e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80887a2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80887a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80887a8:	4418      	add	r0, r3
 80887aa:	6952      	ldr	r2, [r2, #20]
 80887ac:	a90a      	add	r1, sp, #40	; 0x28
 80887ae:	f007 ff20 	bl	80905f2 <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
 80887b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80887b4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80887b8:	695b      	ldr	r3, [r3, #20]
 80887ba:	4413      	add	r3, r2
 80887bc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 80887c0:	e000      	b.n	80887c4 <mbedtls_ssl_write_record+0x110>
 * Encryption/decryption functions
 */
static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
{
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 80887c2:	2600      	movs	r6, #0
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 80887c4:	2d06      	cmp	r5, #6
 80887c6:	d001      	beq.n	80887cc <mbedtls_ssl_write_record+0x118>
 80887c8:	2d08      	cmp	r5, #8
 80887ca:	d15c      	bne.n	8088886 <mbedtls_ssl_write_record+0x1d2>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 80887cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 80887ce:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 80887d2:	681a      	ldr	r2, [r3, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 80887d4:	6879      	ldr	r1, [r7, #4]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80887d6:	7f12      	ldrb	r2, [r2, #28]

        memcpy( add_data, ssl->out_ctr, 8 );
 80887d8:	6838      	ldr	r0, [r7, #0]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80887da:	f012 0f02 	tst.w	r2, #2

        memcpy( add_data, ssl->out_ctr, 8 );
 80887de:	aa0a      	add	r2, sp, #40	; 0x28
 80887e0:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 80887e2:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80887e6:	68a1      	ldr	r1, [r4, #8]
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
 80887e8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80887ec:	68e2      	ldr	r2, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80887ee:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 80887f2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 80887f6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80887fa:	bf08      	it	eq
 80887fc:	2510      	moveq	r5, #16

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 80887fe:	ea4f 2112 	mov.w	r1, r2, lsr #8
 8088802:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
        add_data[12] = ssl->out_msglen & 0xFF;
 8088806:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 808880a:	6919      	ldr	r1, [r3, #16]
 808880c:	68da      	ldr	r2, [r3, #12]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808880e:	bf18      	it	ne
 8088810:	2508      	movne	r5, #8
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 8088812:	1a52      	subs	r2, r2, r1
 8088814:	2a08      	cmp	r2, #8
 8088816:	f040 8097 	bne.w	8088948 <mbedtls_ssl_write_record+0x294>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
                             ssl->out_ctr, 8 );
 808881a:	683a      	ldr	r2, [r7, #0]
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 808881c:	3318      	adds	r3, #24
                             ssl->out_ctr, 8 );
 808881e:	505a      	str	r2, [r3, r1]
 8088820:	687a      	ldr	r2, [r7, #4]
 8088822:	1858      	adds	r0, r3, r1
 8088824:	6042      	str	r2, [r0, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 8088826:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 808882a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 808882e:	680b      	ldr	r3, [r1, #0]
 8088830:	6013      	str	r3, [r2, #0]
 8088832:	684b      	ldr	r3, [r1, #4]
 8088834:	6053      	str	r3, [r2, #4]
        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
 8088836:	6ba0      	ldr	r0, [r4, #56]	; 0x38

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
 8088838:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 808883c:	68c3      	ldr	r3, [r0, #12]
 808883e:	6901      	ldr	r1, [r0, #16]
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
 8088840:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 8088844:	443b      	add	r3, r7
 8088846:	1a5b      	subs	r3, r3, r1
 8088848:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 808884c:	19d3      	adds	r3, r2, r7
 808884e:	9305      	str	r3, [sp, #20]
 8088850:	ab09      	add	r3, sp, #36	; 0x24
 8088852:	9304      	str	r3, [sp, #16]
 8088854:	230d      	movs	r3, #13
 8088856:	9300      	str	r3, [sp, #0]
 8088858:	9506      	str	r5, [sp, #24]
 808885a:	9203      	str	r2, [sp, #12]
 808885c:	9702      	str	r7, [sp, #8]
 808885e:	9201      	str	r2, [sp, #4]
 8088860:	68c2      	ldr	r2, [r0, #12]
 8088862:	f100 0118 	add.w	r1, r0, #24
 8088866:	ab0a      	add	r3, sp, #40	; 0x28
 8088868:	3050      	adds	r0, #80	; 0x50
 808886a:	f7f9 fc0b 	bl	8082084 <mbedtls_cipher_auth_encrypt>
 808886e:	2800      	cmp	r0, #0
 8088870:	d173      	bne.n	808895a <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
 8088872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8088874:	429f      	cmp	r7, r3
 8088876:	d167      	bne.n	8088948 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 8088878:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        auth_done++;
 808887c:	3601      	adds	r6, #1
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 808887e:	441d      	add	r5, r3
 8088880:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 8088884:	e04c      	b.n	8088920 <mbedtls_ssl_write_record+0x26c>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 8088886:	2d02      	cmp	r5, #2
 8088888:	d15e      	bne.n	8088948 <mbedtls_ssl_write_record+0x294>
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
 808888a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
    {
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;
 808888c:	2200      	movs	r2, #0
 808888e:	920a      	str	r2, [sp, #40]	; 0x28

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 8088890:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
                 ssl->transform_out->ivlen;
 8088894:	68d9      	ldr	r1, [r3, #12]
 8088896:	1c45      	adds	r5, r0, #1
 8088898:	fbb5 f3f1 	udiv	r3, r5, r1
 808889c:	fb01 5513 	mls	r5, r1, r3, r5
 80888a0:	1b4b      	subs	r3, r1, r5
        if( padlen == ssl->transform_out->ivlen )
 80888a2:	4299      	cmp	r1, r3
 80888a4:	d054      	beq.n	8088950 <mbedtls_ssl_write_record+0x29c>
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 80888a6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80888aa:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80888ae:	4411      	add	r1, r2
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 80888b0:	3201      	adds	r2, #1
 80888b2:	4293      	cmp	r3, r2
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 80888b4:	540b      	strb	r3, [r1, r0]
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 80888b6:	d2f6      	bcs.n	80888a6 <mbedtls_ssl_write_record+0x1f2>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 80888b8:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 80888bc:	3501      	adds	r5, #1
 80888be:	441d      	add	r5, r3
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80888c0:	68e3      	ldr	r3, [r4, #12]
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 80888c2:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80888c6:	2b01      	cmp	r3, #1
 80888c8:	dc02      	bgt.n	80888d0 <mbedtls_ssl_write_record+0x21c>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;

        enc_msglen = ssl->out_msglen;
        enc_msg = ssl->out_msg;
 80888ca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80888ce:	e018      	b.n	8088902 <mbedtls_ssl_write_record+0x24e>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            /*
             * Generate IV
             */
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 80888d0:	6823      	ldr	r3, [r4, #0]
 80888d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                  ssl->transform_out->ivlen );
 80888d4:	699d      	ldr	r5, [r3, #24]
 80888d6:	68ca      	ldr	r2, [r1, #12]
 80888d8:	69d8      	ldr	r0, [r3, #28]
 80888da:	3118      	adds	r1, #24
 80888dc:	47a8      	blx	r5
            if( ret != 0 )
 80888de:	2800      	cmp	r0, #0
 80888e0:	d13b      	bne.n	808895a <mbedtls_ssl_write_record+0x2a6>
                return( ret );

            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 80888e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    ssl->transform_out->ivlen );
 80888e4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80888e8:	68ca      	ldr	r2, [r1, #12]
 80888ea:	3118      	adds	r1, #24
 80888ec:	f007 fe81 	bl	80905f2 <memcpy>
            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 80888f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
 80888f2:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 80888f6:	68d2      	ldr	r2, [r2, #12]
                    ssl->transform_out->ivlen );

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
 80888f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 80888fc:	442a      	add	r2, r5
 80888fe:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
                            "including %d bytes of IV and %d bytes of padding",
                            ssl->out_msglen, ssl->transform_out->ivlen,
                            padlen + 1 ) );

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 8088902:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8088904:	aa0a      	add	r2, sp, #40	; 0x28
 8088906:	9202      	str	r2, [sp, #8]
 8088908:	9301      	str	r3, [sp, #4]
 808890a:	9500      	str	r5, [sp, #0]
 808890c:	68c2      	ldr	r2, [r0, #12]
 808890e:	f100 0118 	add.w	r1, r0, #24
 8088912:	3050      	adds	r0, #80	; 0x50
 8088914:	f7f9 fb94 	bl	8082040 <mbedtls_cipher_crypt>
 8088918:	b9f8      	cbnz	r0, 808895a <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( enc_msglen != olen )
 808891a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808891c:	429d      	cmp	r5, r3
 808891e:	d113      	bne.n	8088948 <mbedtls_ssl_write_record+0x294>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 8088920:	2e01      	cmp	r6, #1
 8088922:	d111      	bne.n	8088948 <mbedtls_ssl_write_record+0x294>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
 8088924:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 8088928:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 808892c:	0a19      	lsrs	r1, r3, #8
 808892e:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 8088930:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8088934:	7053      	strb	r3, [r2, #1]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 8088936:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808893a:	4620      	mov	r0, r4
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 808893c:	3305      	adds	r3, #5
 808893e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8088942:	f7ff fe7f 	bl	8088644 <mbedtls_ssl_flush_output>
 8088946:	e008      	b.n	808895a <mbedtls_ssl_write_record+0x2a6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8088948:	4805      	ldr	r0, [pc, #20]	; (8088960 <mbedtls_ssl_write_record+0x2ac>)
 808894a:	e006      	b.n	808895a <mbedtls_ssl_write_record+0x2a6>
    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808894c:	4805      	ldr	r0, [pc, #20]	; (8088964 <mbedtls_ssl_write_record+0x2b0>)
 808894e:	e004      	b.n	808895a <mbedtls_ssl_write_record+0x2a6>
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8088950:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8088954:	541a      	strb	r2, [r3, r0]
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;
 8088956:	4613      	mov	r3, r2
 8088958:	e7ae      	b.n	80888b8 <mbedtls_ssl_write_record+0x204>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
}
 808895a:	b017      	add	sp, #92	; 0x5c
 808895c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808895e:	bf00      	nop
 8088960:	ffff9400 	.word	0xffff9400
 8088964:	ffff8f00 	.word	0xffff8f00

08088968 <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 8088968:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 808896a:	6f04      	ldr	r4, [r0, #112]	; 0x70
 808896c:	2c03      	cmp	r4, #3
 808896e:	d90f      	bls.n	8088990 <mbedtls_ssl_prepare_handshake_record+0x28>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
 8088970:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 8088972:	788a      	ldrb	r2, [r1, #2]
 8088974:	784b      	ldrb	r3, [r1, #1]
 8088976:	0212      	lsls	r2, r2, #8
 8088978:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 808897c:	78ca      	ldrb	r2, [r1, #3]
 808897e:	4313      	orrs	r3, r2
 8088980:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8088982:	4a04      	ldr	r2, [pc, #16]	; (8088994 <mbedtls_ssl_prepare_handshake_record+0x2c>)
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
                    ( ssl->in_msg[2] << 8  ) |
                      ssl->in_msg[3] );
 8088984:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8088986:	429c      	cmp	r4, r3
 8088988:	bf34      	ite	cc
 808898a:	4610      	movcc	r0, r2
 808898c:	2000      	movcs	r0, #0
 808898e:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8088990:	4801      	ldr	r0, [pc, #4]	; (8088998 <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
 8088992:	bd10      	pop	{r4, pc}
 8088994:	ffff8f80 	.word	0xffff8f80
 8088998:	ffff8e00 	.word	0xffff8e00

0808899c <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 808899c:	6842      	ldr	r2, [r0, #4]

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 808899e:	b410      	push	{r4}

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80889a0:	2a10      	cmp	r2, #16
 80889a2:	d008      	beq.n	80889b6 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
 80889a4:	6b02      	ldr	r2, [r0, #48]	; 0x30
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80889a6:	b132      	cbz	r2, 80889b6 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 80889a8:	f8d2 4160 	ldr.w	r4, [r2, #352]	; 0x160
 80889ac:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80889ae:	4623      	mov	r3, r4
 80889b0:	6f82      	ldr	r2, [r0, #120]	; 0x78
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 80889b2:	bc10      	pop	{r4}
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 80889b4:	4718      	bx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 80889b6:	bc10      	pop	{r4}
 80889b8:	4770      	bx	lr
	...

080889bc <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 80889bc:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80889be:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 80889c0:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80889c2:	2b16      	cmp	r3, #22
 80889c4:	d004      	beq.n	80889d0 <mbedtls_ssl_handle_message_type+0x14>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 80889c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80889c8:	2b15      	cmp	r3, #21
 80889ca:	d006      	beq.n	80889da <mbedtls_ssl_handle_message_type+0x1e>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 80889cc:	2000      	movs	r0, #0
 80889ce:	bd10      	pop	{r4, pc}
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 80889d0:	f7ff ffca 	bl	8088968 <mbedtls_ssl_prepare_handshake_record>
 80889d4:	2800      	cmp	r0, #0
 80889d6:	d0f6      	beq.n	80889c6 <mbedtls_ssl_handle_message_type+0xa>
 80889d8:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
    {
        if( ssl->in_msglen != 2 )
 80889da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80889dc:	2b02      	cmp	r3, #2
 80889de:	d10c      	bne.n	80889fa <mbedtls_ssl_handle_message_type+0x3e>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 80889e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80889e2:	781a      	ldrb	r2, [r3, #0]
 80889e4:	2a02      	cmp	r2, #2
 80889e6:	d00a      	beq.n	80889fe <mbedtls_ssl_handle_message_type+0x42>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80889e8:	2a01      	cmp	r2, #1
 80889ea:	d10a      	bne.n	8088a02 <mbedtls_ssl_handle_message_type+0x46>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 80889ec:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80889ee:	b153      	cbz	r3, 8088a06 <mbedtls_ssl_handle_message_type+0x4a>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 80889f0:	2b64      	cmp	r3, #100	; 0x64
 80889f2:	4806      	ldr	r0, [pc, #24]	; (8088a0c <mbedtls_ssl_handle_message_type+0x50>)
 80889f4:	bf08      	it	eq
 80889f6:	2000      	moveq	r0, #0
 80889f8:	bd10      	pop	{r4, pc}
            /* Note: Standard allows for more than one 2 byte alert
               to be packed in a single message, but Mbed TLS doesn't
               currently support this. */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80889fa:	4805      	ldr	r0, [pc, #20]	; (8088a10 <mbedtls_ssl_handle_message_type+0x54>)
 80889fc:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 80889fe:	4805      	ldr	r0, [pc, #20]	; (8088a14 <mbedtls_ssl_handle_message_type+0x58>)
 8088a00:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 8088a02:	4802      	ldr	r0, [pc, #8]	; (8088a0c <mbedtls_ssl_handle_message_type+0x50>)
 8088a04:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 8088a06:	4804      	ldr	r0, [pc, #16]	; (8088a18 <mbedtls_ssl_handle_message_type+0x5c>)
        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
}
 8088a08:	bd10      	pop	{r4, pc}
 8088a0a:	bf00      	nop
 8088a0c:	ffff9980 	.word	0xffff9980
 8088a10:	ffff8e00 	.word	0xffff8e00
 8088a14:	ffff8880 	.word	0xffff8880
 8088a18:	ffff8780 	.word	0xffff8780

08088a1c <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 8088a1c:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 8088a1e:	b180      	cbz	r0, 8088a42 <mbedtls_ssl_send_alert_message+0x26>
 8088a20:	6804      	ldr	r4, [r0, #0]
 8088a22:	b174      	cbz	r4, 8088a42 <mbedtls_ssl_send_alert_message+0x26>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 8088a24:	2415      	movs	r4, #21
 8088a26:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
 8088a2a:	2402      	movs	r4, #2
 8088a2c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
 8088a30:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 8088a34:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
 8088a36:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8088a3a:	705a      	strb	r2, [r3, #1]
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 8088a3c:	bc10      	pop	{r4}
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8088a3e:	f7ff be39 	b.w	80886b4 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 8088a42:	4801      	ldr	r0, [pc, #4]	; (8088a48 <mbedtls_ssl_send_alert_message+0x2c>)
 8088a44:	bc10      	pop	{r4}
 8088a46:	4770      	bx	lr
 8088a48:	ffff8f00 	.word	0xffff8f00

08088a4c <mbedtls_ssl_read_record_layer>:

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 8088a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 8088a50:	6f81      	ldr	r1, [r0, #120]	; 0x78

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 8088a52:	b096      	sub	sp, #88	; 0x58
 8088a54:	4604      	mov	r4, r0
 8088a56:	6e83      	ldr	r3, [r0, #104]	; 0x68
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 8088a58:	b181      	cbz	r1, 8088a7c <mbedtls_ssl_read_record_layer+0x30>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 8088a5a:	2b00      	cmp	r3, #0
 8088a5c:	f040 821c 	bne.w	8088e98 <mbedtls_ssl_read_record_layer+0x44c>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 8088a60:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8088a62:	4291      	cmp	r1, r2
 8088a64:	d206      	bcs.n	8088a74 <mbedtls_ssl_read_record_layer+0x28>
        {
            ssl->in_msglen -= ssl->in_hslen;
 8088a66:	1a52      	subs	r2, r2, r1
 8088a68:	6702      	str	r2, [r0, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 8088a6a:	6e40      	ldr	r0, [r0, #100]	; 0x64
                     ssl->in_msglen );
 8088a6c:	4401      	add	r1, r0
 8088a6e:	f007 fdcb 	bl	8090608 <memmove>
 8088a72:	e000      	b.n	8088a76 <mbedtls_ssl_read_record_layer+0x2a>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 8088a74:	6703      	str	r3, [r0, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 8088a76:	2300      	movs	r3, #0
 8088a78:	67a3      	str	r3, [r4, #120]	; 0x78
 8088a7a:	e003      	b.n	8088a84 <mbedtls_ssl_read_record_layer+0x38>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 8088a7c:	2b00      	cmp	r3, #0
 8088a7e:	f040 820f 	bne.w	8088ea0 <mbedtls_ssl_read_record_layer+0x454>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 8088a82:	6703      	str	r3, [r0, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
 8088a84:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8088a86:	2b00      	cmp	r3, #0
 8088a88:	f040 820a 	bne.w	8088ea0 <mbedtls_ssl_read_record_layer+0x454>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 8088a8c:	2105      	movs	r1, #5
 8088a8e:	4620      	mov	r0, r4
 8088a90:	f7ff fd92 	bl	80885b8 <mbedtls_ssl_fetch_input>
 8088a94:	2800      	cmp	r0, #0
 8088a96:	f040 8204 	bne.w	8088ea2 <mbedtls_ssl_read_record_layer+0x456>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 8088a9a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8088a9c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 8088a9e:	7813      	ldrb	r3, [r2, #0]
 8088aa0:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8088aa2:	7805      	ldrb	r5, [r0, #0]
 8088aa4:	7841      	ldrb	r1, [r0, #1]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8088aa6:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8088aa8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8088aac:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8088aae:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 8088ab0:	7855      	ldrb	r5, [r2, #1]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 8088ab2:	6820      	ldr	r0, [r4, #0]
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 8088ab4:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8088ab6:	d905      	bls.n	8088ac4 <mbedtls_ssl_read_record_layer+0x78>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 8088ab8:	220a      	movs	r2, #10
 8088aba:	2102      	movs	r1, #2
 8088abc:	4620      	mov	r0, r4
 8088abe:	f7ff ffad 	bl	8088a1c <mbedtls_ssl_send_alert_message>
 8088ac2:	e1eb      	b.n	8088e9c <mbedtls_ssl_read_record_layer+0x450>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 8088ac4:	68a3      	ldr	r3, [r4, #8]
 8088ac6:	429d      	cmp	r5, r3
 8088ac8:	f040 81e8 	bne.w	8088e9c <mbedtls_ssl_read_record_layer+0x450>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 8088acc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8088ad0:	429a      	cmp	r2, r3
 8088ad2:	f300 81e3 	bgt.w	8088e9c <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 8088ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8088ad8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8088ada:	1a9b      	subs	r3, r3, r2
 8088adc:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 8088ae0:	330d      	adds	r3, #13
 8088ae2:	4299      	cmp	r1, r3
 8088ae4:	f200 81da 	bhi.w	8088e9c <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 8088ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8088aea:	b923      	cbnz	r3, 8088af6 <mbedtls_ssl_read_record_layer+0xaa>
    {
        if( ssl->in_msglen < 1 ||
 8088aec:	1e4b      	subs	r3, r1, #1
 8088aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8088af2:	d30c      	bcc.n	8088b0e <mbedtls_ssl_read_record_layer+0xc2>
 8088af4:	e1d2      	b.n	8088e9c <mbedtls_ssl_read_record_layer+0x450>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 8088af6:	689b      	ldr	r3, [r3, #8]
 8088af8:	4299      	cmp	r1, r3
 8088afa:	f0c0 81cf 	bcc.w	8088e9c <mbedtls_ssl_read_record_layer+0x450>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 8088afe:	68e2      	ldr	r2, [r4, #12]
 8088b00:	2a00      	cmp	r2, #0
 8088b02:	dd04      	ble.n	8088b0e <mbedtls_ssl_read_record_layer+0xc2>
 8088b04:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8088b08:	4299      	cmp	r1, r3
 8088b0a:	f200 81c7 	bhi.w	8088e9c <mbedtls_ssl_read_record_layer+0x450>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 8088b0e:	3105      	adds	r1, #5
 8088b10:	4620      	mov	r0, r4
 8088b12:	f7ff fd51 	bl	80885b8 <mbedtls_ssl_fetch_input>
 8088b16:	2800      	cmp	r0, #0
 8088b18:	f040 81c3 	bne.w	8088ea2 <mbedtls_ssl_read_record_layer+0x456>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 8088b1c:	6b66      	ldr	r6, [r4, #52]	; 0x34
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
 8088b1e:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 8088b20:	2e00      	cmp	r6, #0
 8088b22:	f000 81bd 	beq.w	8088ea0 <mbedtls_ssl_read_record_layer+0x454>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 8088b26:	6a23      	ldr	r3, [r4, #32]
 8088b28:	2b00      	cmp	r3, #0
 8088b2a:	f000 81b5 	beq.w	8088e98 <mbedtls_ssl_read_record_layer+0x44c>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8088b2e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8088b32:	b103      	cbz	r3, 8088b36 <mbedtls_ssl_read_record_layer+0xea>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 8088b34:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
 8088b36:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8088b38:	68b2      	ldr	r2, [r6, #8]
 8088b3a:	4295      	cmp	r5, r2
 8088b3c:	f0c0 819d 	bcc.w	8088e7a <mbedtls_ssl_read_record_layer+0x42e>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 8088b40:	2b06      	cmp	r3, #6
 8088b42:	d001      	beq.n	8088b48 <mbedtls_ssl_read_record_layer+0xfc>
 8088b44:	2b08      	cmp	r3, #8
 8088b46:	d175      	bne.n	8088c34 <mbedtls_ssl_read_record_layer+0x1e8>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 8088b48:	6833      	ldr	r3, [r6, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 8088b4a:	68f2      	ldr	r2, [r6, #12]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8088b4c:	7f1b      	ldrb	r3, [r3, #28]
 8088b4e:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 8088b52:	6933      	ldr	r3, [r6, #16]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8088b54:	bf14      	ite	ne
 8088b56:	2708      	movne	r7, #8
 8088b58:	2710      	moveq	r7, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 8088b5a:	1ad3      	subs	r3, r2, r3

        if( ssl->in_msglen < explicit_iv_len + taglen )
 8088b5c:	19da      	adds	r2, r3, r7
 8088b5e:	4295      	cmp	r5, r2
 8088b60:	f0c0 818b 	bcc.w	8088e7a <mbedtls_ssl_read_record_layer+0x42e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 8088b64:	1aed      	subs	r5, r5, r3
 8088b66:	1bed      	subs	r5, r5, r7

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
 8088b68:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
 8088b6a:	6725      	str	r5, [r4, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
 8088b6c:	6810      	ldr	r0, [r2, #0]
 8088b6e:	6851      	ldr	r1, [r2, #4]
 8088b70:	ab0a      	add	r3, sp, #40	; 0x28
 8088b72:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 8088b74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8088b76:	68a2      	ldr	r2, [r4, #8]
        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
 8088b78:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8088b7c:	68e3      	ldr	r3, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8088b7e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 8088b82:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 8088b86:	0a2b      	lsrs	r3, r5, #8
 8088b88:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        add_data[12] = ssl->in_msglen & 0xFF;
 8088b8c:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 8088b90:	6933      	ldr	r3, [r6, #16]
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 8088b92:	68f2      	ldr	r2, [r6, #12]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
 8088b94:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
        add_data[12] = ssl->in_msglen & 0xFF;

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 8088b98:	f106 0028 	add.w	r0, r6, #40	; 0x28
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 8088b9c:	1ad2      	subs	r2, r2, r3
 8088b9e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8088ba0:	4418      	add	r0, r3
 8088ba2:	f007 fd26 	bl	80905f2 <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 8088ba6:	eb08 0305 	add.w	r3, r8, r5
 8088baa:	9305      	str	r3, [sp, #20]
 8088bac:	ab09      	add	r3, sp, #36	; 0x24
 8088bae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8088bb0:	9304      	str	r3, [sp, #16]
 8088bb2:	230d      	movs	r3, #13
 8088bb4:	9300      	str	r3, [sp, #0]
 8088bb6:	9706      	str	r7, [sp, #24]
 8088bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8088bbc:	9502      	str	r5, [sp, #8]
 8088bbe:	f8cd 8004 	str.w	r8, [sp, #4]
 8088bc2:	68c2      	ldr	r2, [r0, #12]
 8088bc4:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8088bc8:	ab0a      	add	r3, sp, #40	; 0x28
 8088bca:	3090      	adds	r0, #144	; 0x90
 8088bcc:	f7f9 fa84 	bl	80820d8 <mbedtls_cipher_auth_decrypt>
 8088bd0:	b128      	cbz	r0, 8088bde <mbedtls_ssl_read_record_layer+0x192>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 8088bd2:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 8088bd6:	f000 8150 	beq.w	8088e7a <mbedtls_ssl_read_record_layer+0x42e>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 8088bda:	b328      	cbz	r0, 8088c28 <mbedtls_ssl_read_record_layer+0x1dc>
 8088bdc:	e161      	b.n	8088ea2 <mbedtls_ssl_read_record_layer+0x456>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
 8088bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8088be0:	429d      	cmp	r5, r3
 8088be2:	f040 8159 	bne.w	8088e98 <mbedtls_ssl_read_record_layer+0x44c>
 8088be6:	e007      	b.n	8088bf8 <mbedtls_ssl_read_record_layer+0x1ac>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 8088be8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 8088bec:	2b00      	cmp	r3, #0
 8088bee:	f040 8144 	bne.w	8088e7a <mbedtls_ssl_read_record_layer+0x42e>
        auth_done++;

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
 8088bf2:	2d00      	cmp	r5, #0
 8088bf4:	f000 8141 	beq.w	8088e7a <mbedtls_ssl_read_record_layer+0x42e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
 8088bf8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8088bfa:	2b00      	cmp	r3, #0
 8088bfc:	f040 8144 	bne.w	8088e88 <mbedtls_ssl_read_record_layer+0x43c>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 8088c00:	68e3      	ldr	r3, [r4, #12]
 8088c02:	2b03      	cmp	r3, #3
 8088c04:	f000 813b 	beq.w	8088e7e <mbedtls_ssl_read_record_layer+0x432>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 8088c08:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8088c0a:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 8088c0c:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 8088c0e:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 8088c10:	f300 8133 	bgt.w	8088e7a <mbedtls_ssl_read_record_layer+0x42e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8088c14:	2208      	movs	r2, #8
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
 8088c16:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8088c18:	3a01      	subs	r2, #1
 8088c1a:	5c8b      	ldrb	r3, [r1, r2]
 8088c1c:	3301      	adds	r3, #1
 8088c1e:	b2db      	uxtb	r3, r3
 8088c20:	548b      	strb	r3, [r1, r2]
 8088c22:	2b00      	cmp	r3, #0
 8088c24:	f000 8133 	beq.w	8088e8e <mbedtls_ssl_read_record_layer+0x442>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8088c28:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8088c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8088c2e:	f240 8137 	bls.w	8088ea0 <mbedtls_ssl_read_record_layer+0x454>
 8088c32:	e133      	b.n	8088e9c <mbedtls_ssl_read_record_layer+0x450>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 8088c34:	2b02      	cmp	r3, #2
 8088c36:	f040 812f 	bne.w	8088e98 <mbedtls_ssl_read_record_layer+0x44c>
        int ret;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        size_t dec_msglen;
        size_t minlen = 0;
        size_t olen = 0;
 8088c3a:	2300      	movs	r3, #0
 8088c3c:	930a      	str	r3, [sp, #40]	; 0x28

        /*
         * Check immediate ciphertext sanity
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8088c3e:	68e0      	ldr	r0, [r4, #12]
 8088c40:	68f2      	ldr	r2, [r6, #12]
            minlen += ssl->transform_in->ivlen;
 8088c42:	2802      	cmp	r0, #2
 8088c44:	bfa8      	it	ge
 8088c46:	4613      	movge	r3, r2
#endif

        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 8088c48:	18d1      	adds	r1, r2, r3
 8088c4a:	428d      	cmp	r5, r1
 8088c4c:	f0c0 8115 	bcc.w	8088e7a <mbedtls_ssl_read_record_layer+0x42e>
 8088c50:	6971      	ldr	r1, [r6, #20]
 8088c52:	3101      	adds	r1, #1
 8088c54:	440b      	add	r3, r1
 8088c56:	429d      	cmp	r5, r3
 8088c58:	f0c0 810f 	bcc.w	8088e7a <mbedtls_ssl_read_record_layer+0x42e>
#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */

        /*
         * Check length sanity
         */
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 8088c5c:	fbb5 f6f2 	udiv	r6, r5, r2
 8088c60:	fb02 5616 	mls	r6, r2, r6, r5
 8088c64:	2e00      	cmp	r6, #0
 8088c66:	f040 8108 	bne.w	8088e7a <mbedtls_ssl_read_record_layer+0x42e>

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8088c6a:	2801      	cmp	r0, #1
                                ssl->transform_in->maclen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }

        dec_msglen = ssl->in_msglen;
        dec_msg = ssl->in_msg;
 8088c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8088c6e:	dd0d      	ble.n	8088c8c <mbedtls_ssl_read_record_layer+0x240>
        {
            dec_msglen -= ssl->transform_in->ivlen;
 8088c70:	1aad      	subs	r5, r5, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8088c72:	4632      	mov	r2, r6
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;
 8088c74:	6725      	str	r5, [r4, #112]	; 0x70

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8088c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8088c78:	68c8      	ldr	r0, [r1, #12]
 8088c7a:	4290      	cmp	r0, r2
 8088c7c:	d906      	bls.n	8088c8c <mbedtls_ssl_read_record_layer+0x240>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 8088c7e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8088c80:	4411      	add	r1, r2
 8088c82:	5c80      	ldrb	r0, [r0, r2]
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8088c84:	3201      	adds	r2, #1
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 8088c86:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
 8088c8a:	e7f4      	b.n	8088c76 <mbedtls_ssl_read_record_layer+0x22a>
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 8088c8c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8088c8e:	af0a      	add	r7, sp, #40	; 0x28
 8088c90:	9702      	str	r7, [sp, #8]
 8088c92:	9301      	str	r3, [sp, #4]
 8088c94:	9500      	str	r5, [sp, #0]
 8088c96:	68c2      	ldr	r2, [r0, #12]
 8088c98:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8088c9c:	3090      	adds	r0, #144	; 0x90
 8088c9e:	f7f9 f9cf 	bl	8082040 <mbedtls_cipher_crypt>
 8088ca2:	2800      	cmp	r0, #0
 8088ca4:	f040 80fd 	bne.w	8088ea2 <mbedtls_ssl_read_record_layer+0x456>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( dec_msglen != olen )
 8088ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8088caa:	429d      	cmp	r5, r3
 8088cac:	f040 80f4 	bne.w	8088e98 <mbedtls_ssl_read_record_layer+0x44c>
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8088cb0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8088cb2:	6e65      	ldr	r5, [r4, #100]	; 0x64

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8088cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8088cb6:	18ea      	adds	r2, r5, r3
 8088cb8:	f812 ac01 	ldrb.w	sl, [r2, #-1]

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8088cbc:	f8d1 c014 	ldr.w	ip, [r1, #20]
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8088cc0:	f10a 0e01 	add.w	lr, sl, #1

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8088cc4:	eb0e 020c 	add.w	r2, lr, ip
 8088cc8:	4293      	cmp	r3, r2
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8088cca:	68e2      	ldr	r2, [r4, #12]
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
#endif
            padlen = 0;
 8088ccc:	bf34      	ite	cc
 8088cce:	4686      	movcc	lr, r0
{
    size_t i;
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
#if defined(SSL_SOME_MODES_USE_MAC)
    size_t padlen = 0, correct = 1;
 8088cd0:	2001      	movcs	r0, #1
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8088cd2:	2a00      	cmp	r2, #0
 8088cd4:	f340 80e0 	ble.w	8088e98 <mbedtls_ssl_read_record_layer+0x44c>
             *                     ssl->transform_in->maclen
             *
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
 8088cd8:	4573      	cmp	r3, lr
 8088cda:	bf34      	ite	cc
 8088cdc:	2000      	movcc	r0, #0
 8088cde:	f000 0001 	andcs.w	r0, r0, #1
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
            size_t padding_idx = ssl->in_msglen - padlen;
 8088ce2:	ebce 0203 	rsb	r2, lr, r3
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );
 8088ce6:	f50c 5c00 	add.w	ip, ip, #8192	; 0x2000
 8088cea:	4562      	cmp	r2, ip
 8088cec:	bf8c      	ite	hi
 8088cee:	2000      	movhi	r0, #0
 8088cf0:	f000 0001 	andls.w	r0, r0, #1
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 8088cf4:	f04f 0800 	mov.w	r8, #0
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8088cf8:	46c4      	mov	ip, r8
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8088cfa:	fb00 5202 	mla	r2, r0, r2, r5
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 8088cfe:	f04f 0901 	mov.w	r9, #1

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8088d02:	f10e 3aff 	add.w	sl, lr, #4294967295

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
 8088d06:	45e6      	cmp	lr, ip
 8088d08:	bf94      	ite	ls
 8088d0a:	f04f 0900 	movls.w	r9, #0
 8088d0e:	f009 0901 	andhi.w	r9, r9, #1
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8088d12:	f812 500c 	ldrb.w	r5, [r2, ip]
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8088d16:	f10c 0c01 	add.w	ip, ip, #1
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8088d1a:	4555      	cmp	r5, sl
 8088d1c:	bf14      	ite	ne
 8088d1e:	2500      	movne	r5, #0
 8088d20:	2501      	moveq	r5, #1
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8088d22:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8088d26:	fb09 8805 	mla	r8, r9, r5, r8
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8088d2a:	d1ec      	bne.n	8088d06 <mbedtls_ssl_read_record_layer+0x2ba>
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
            }

            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 8088d2c:	45c6      	cmp	lr, r8
 8088d2e:	bf14      	ite	ne
 8088d30:	2500      	movne	r5, #0
 8088d32:	f000 0501 	andeq.w	r5, r0, #1

#if defined(MBEDTLS_SSL_DEBUG_ALL)
            if( padlen > 0 && correct == 0 )
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
#endif
            padlen &= correct * 0x1FF;
 8088d36:	ea4f 2a45 	mov.w	sl, r5, lsl #9
 8088d3a:	ebc5 0a0a 	rsb	sl, r5, sl
 8088d3e:	ea0a 0a0e 	and.w	sl, sl, lr
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->in_msglen -= padlen;
 8088d42:	ebca 0303 	rsb	r3, sl, r3
 8088d46:	6723      	str	r3, [r4, #112]	; 0x70
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 8088d48:	694a      	ldr	r2, [r1, #20]
 8088d4a:	1a9b      	subs	r3, r3, r2

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 8088d4c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 8088d4e:	6723      	str	r3, [r4, #112]	; 0x70

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 8088d50:	0a1b      	lsrs	r3, r3, #8
 8088d52:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 8088d54:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8088d56:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8088d58:	705a      	strb	r2, [r3, #1]
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8088d5a:	68e3      	ldr	r3, [r4, #12]
 8088d5c:	2b00      	cmp	r3, #0
 8088d5e:	f340 809b 	ble.w	8088e98 <mbedtls_ssl_read_record_layer+0x44c>
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 8088d62:	6b60      	ldr	r0, [r4, #52]	; 0x34
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 8088d64:	6f23      	ldr	r3, [r4, #112]	; 0x70
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 8088d66:	6802      	ldr	r2, [r0, #0]
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 8088d68:	eb0a 0903 	add.w	r9, sl, r3
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 8088d6c:	7a52      	ldrb	r2, [r2, #9]
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 8088d6e:	f5b9 7f80 	cmp.w	r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 8088d72:	f1a2 0203 	sub.w	r2, r2, #3
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 8088d76:	bf88      	it	hi
 8088d78:	f5a9 7680 	subhi.w	r6, r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 8088d7c:	2a04      	cmp	r2, #4
 8088d7e:	f200 808b 	bhi.w	8088e98 <mbedtls_ssl_read_record_layer+0x44c>
 8088d82:	e8df f002 	tbb	[pc, r2]
 8088d86:	0303      	.short	0x0303
 8088d88:	0389      	.short	0x0389
 8088d8a:	0b          	.byte	0x0b
 8088d8b:	00          	.byte	0x00
                case MBEDTLS_MD_MD5:
                case MBEDTLS_MD_SHA1:
                case MBEDTLS_MD_SHA256:
                    /* 8 bytes of message size, 64-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
                                ( 13 + ssl->in_msglen          + 8 ) / 64;
 8088d8c:	f103 0215 	add.w	r2, r3, #21
 8088d90:	f109 0115 	add.w	r1, r9, #21
 8088d94:	0992      	lsrs	r2, r2, #6
 8088d96:	ebc2 1391 	rsb	r3, r2, r1, lsr #6
 8088d9a:	e006      	b.n	8088daa <mbedtls_ssl_read_record_layer+0x35e>
#endif
#if defined(MBEDTLS_SHA512_C)
                case MBEDTLS_MD_SHA384:
                    /* 16 bytes of message size, 128-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 16 ) / 128 -
                                ( 13 + ssl->in_msglen          + 16 ) / 128;
 8088d9c:	f103 021d 	add.w	r2, r3, #29
 8088da0:	f109 011d 	add.w	r1, r9, #29
 8088da4:	09d2      	lsrs	r2, r2, #7
 8088da6:	ebc2 13d1 	rsb	r3, r2, r1, lsr #7
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 8088daa:	ea4f 2805 	mov.w	r8, r5, lsl #8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 8088dae:	2208      	movs	r2, #8
 8088db0:	6d61      	ldr	r1, [r4, #84]	; 0x54
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 8088db2:	ebc5 0808 	rsb	r8, r5, r8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 8088db6:	3044      	adds	r0, #68	; 0x44
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 8088db8:	ea08 0803 	and.w	r8, r8, r3

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 8088dbc:	f7fd fca0 	bl	8086700 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 8088dc0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8088dc2:	2203      	movs	r2, #3
 8088dc4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8088dc6:	3044      	adds	r0, #68	; 0x44
 8088dc8:	f7fd fc9a 	bl	8086700 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 8088dcc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8088dce:	2202      	movs	r2, #2
 8088dd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8088dd2:	3044      	adds	r0, #68	; 0x44
 8088dd4:	f7fd fc94 	bl	8086700 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 8088dd8:	6b60      	ldr	r0, [r4, #52]	; 0x34
                             ssl->in_msglen );
 8088dda:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8088ddc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8088dde:	3044      	adds	r0, #68	; 0x44
 8088de0:	f7fd fc8e 	bl	8086700 <mbedtls_md_hmac_update>
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
 8088de4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8088de6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8088de8:	4413      	add	r3, r2
 8088dea:	449a      	add	sl, r3
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 8088dec:	2200      	movs	r2, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 8088dee:	4553      	cmp	r3, sl
 8088df0:	d003      	beq.n	8088dfa <mbedtls_ssl_read_record_layer+0x3ae>
        acc ^= *p;
 8088df2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8088df6:	404a      	eors	r2, r1
 8088df8:	e7f9      	b.n	8088dee <mbedtls_ssl_read_record_layer+0x3a2>
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 8088dfa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
 8088dfc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 8088e00:	4639      	mov	r1, r7
 8088e02:	3044      	adds	r0, #68	; 0x44

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
    (void) force;
 8088e04:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 8088e08:	f7fd fc8a 	bl	8086720 <mbedtls_md_hmac_finish>

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 8088e0c:	f04f 0a00 	mov.w	sl, #0
 8088e10:	f108 0801 	add.w	r8, r8, #1
 8088e14:	45d0      	cmp	r8, sl
 8088e16:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8088e18:	d906      	bls.n	8088e28 <mbedtls_ssl_read_record_layer+0x3dc>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 8088e1a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8088e1c:	3044      	adds	r0, #68	; 0x44
 8088e1e:	f7fd fcc7 	bl	80867b0 <mbedtls_md_process>
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 8088e22:	f10a 0a01 	add.w	sl, sl, #1
 8088e26:	e7f5      	b.n	8088e14 <mbedtls_ssl_read_record_layer+0x3c8>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );

            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 8088e28:	3044      	adds	r0, #68	; 0x44
 8088e2a:	f7fd fca9 	bl	8086780 <mbedtls_md_hmac_reset>
            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
                                 max_len - min_len + ssl->transform_in->maclen );
 8088e2e:	6b63      	ldr	r3, [r4, #52]	; 0x34

            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
 8088e30:	6e61      	ldr	r1, [r4, #100]	; 0x64
                                 max_len - min_len + ssl->transform_in->maclen );
 8088e32:	6958      	ldr	r0, [r3, #20]
 8088e34:	440e      	add	r6, r1
 8088e36:	4481      	add	r9, r0
 8088e38:	4489      	add	r9, r1
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 8088e3a:	2300      	movs	r3, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 8088e3c:	454e      	cmp	r6, r9
 8088e3e:	d003      	beq.n	8088e48 <mbedtls_ssl_read_record_layer+0x3fc>
        acc ^= *p;
 8088e40:	f816 2b01 	ldrb.w	r2, [r6], #1
 8088e44:	4053      	eors	r3, r2
 8088e46:	e7f9      	b.n	8088e3c <mbedtls_ssl_read_record_layer+0x3f0>

    force = acc;
 8088e48:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    (void) force;
 8088e4c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 8088e50:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 8088e54:	2300      	movs	r3, #0
 8088e56:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    for( i = 0; i < n; i++ )
 8088e5a:	4298      	cmp	r0, r3
 8088e5c:	f43f aec4 	beq.w	8088be8 <mbedtls_ssl_read_record_layer+0x19c>
 8088e60:	eb0c 0203 	add.w	r2, ip, r3
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 8088e64:	5c8a      	ldrb	r2, [r1, r2]
 8088e66:	5cfe      	ldrb	r6, [r7, r3]
        diff |= x ^ y;
 8088e68:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
 8088e6c:	4072      	eors	r2, r6
 8088e6e:	ea4e 0202 	orr.w	r2, lr, r2
 8088e72:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8088e76:	3301      	adds	r3, #1
 8088e78:	e7ef      	b.n	8088e5a <mbedtls_ssl_read_record_layer+0x40e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8088e7a:	480b      	ldr	r0, [pc, #44]	; (8088ea8 <mbedtls_ssl_read_record_layer+0x45c>)
 8088e7c:	e011      	b.n	8088ea2 <mbedtls_ssl_read_record_layer+0x456>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 8088e7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8088e80:	2b17      	cmp	r3, #23
 8088e82:	f43f aec1 	beq.w	8088c08 <mbedtls_ssl_read_record_layer+0x1bc>
 8088e86:	e009      	b.n	8088e9c <mbedtls_ssl_read_record_layer+0x450>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
 8088e88:	2300      	movs	r3, #0
 8088e8a:	67e3      	str	r3, [r4, #124]	; 0x7c
 8088e8c:	e6c2      	b.n	8088c14 <mbedtls_ssl_read_record_layer+0x1c8>
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8088e8e:	2a00      	cmp	r2, #0
 8088e90:	f47f aec1 	bne.w	8088c16 <mbedtls_ssl_read_record_layer+0x1ca>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 8088e94:	4805      	ldr	r0, [pc, #20]	; (8088eac <mbedtls_ssl_read_record_layer+0x460>)
 8088e96:	e004      	b.n	8088ea2 <mbedtls_ssl_read_record_layer+0x456>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8088e98:	4805      	ldr	r0, [pc, #20]	; (8088eb0 <mbedtls_ssl_read_record_layer+0x464>)
 8088e9a:	e002      	b.n	8088ea2 <mbedtls_ssl_read_record_layer+0x456>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8088e9c:	4805      	ldr	r0, [pc, #20]	; (8088eb4 <mbedtls_ssl_read_record_layer+0x468>)
 8088e9e:	e000      	b.n	8088ea2 <mbedtls_ssl_read_record_layer+0x456>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
 8088ea0:	2000      	movs	r0, #0
}
 8088ea2:	b016      	add	sp, #88	; 0x58
 8088ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088ea8:	ffff8e80 	.word	0xffff8e80
 8088eac:	ffff9480 	.word	0xffff9480
 8088eb0:	ffff9400 	.word	0xffff9400
 8088eb4:	ffff8e00 	.word	0xffff8e00

08088eb8 <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 8088eb8:	b538      	push	{r3, r4, r5, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 8088eba:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 8088ebe:	4605      	mov	r5, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 8088ec0:	b98c      	cbnz	r4, 8088ee6 <mbedtls_ssl_read_record+0x2e>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 8088ec2:	4628      	mov	r0, r5
 8088ec4:	f7ff fdc2 	bl	8088a4c <mbedtls_ssl_read_record_layer>
 8088ec8:	b988      	cbnz	r0, 8088eee <mbedtls_ssl_read_record+0x36>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
                return( ret );
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 8088eca:	4628      	mov	r0, r5
 8088ecc:	f7ff fd76 	bl	80889bc <mbedtls_ssl_handle_message_type>

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 8088ed0:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
 8088ed4:	d0f5      	beq.n	8088ec2 <mbedtls_ssl_read_record+0xa>

        if( 0 != ret )
 8088ed6:	b950      	cbnz	r0, 8088eee <mbedtls_ssl_read_record+0x36>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8088ed8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8088eda:	2b16      	cmp	r3, #22
 8088edc:	d108      	bne.n	8088ef0 <mbedtls_ssl_read_record+0x38>
        {
            mbedtls_ssl_update_handshake_status( ssl );
 8088ede:	4628      	mov	r0, r5
 8088ee0:	f7ff fd5c 	bl	808899c <mbedtls_ssl_update_handshake_status>
 8088ee4:	e004      	b.n	8088ef0 <mbedtls_ssl_read_record+0x38>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
        ssl->keep_current_message = 0;
 8088ee6:	2400      	movs	r4, #0
 8088ee8:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 8088eec:	e000      	b.n	8088ef0 <mbedtls_ssl_read_record+0x38>
 8088eee:	4604      	mov	r4, r0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
 8088ef0:	4620      	mov	r0, r4
 8088ef2:	bd38      	pop	{r3, r4, r5, pc}

08088ef4 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 8088ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 8088ef6:	6c03      	ldr	r3, [r0, #64]	; 0x40

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 8088ef8:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8088efa:	681b      	ldr	r3, [r3, #0]
 8088efc:	7a9a      	ldrb	r2, [r3, #10]
 8088efe:	2a0b      	cmp	r2, #11
 8088f00:	d809      	bhi.n	8088f16 <mbedtls_ssl_write_certificate+0x22>
 8088f02:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8088f06:	40d3      	lsrs	r3, r2
 8088f08:	07da      	lsls	r2, r3, #31
 8088f0a:	d504      	bpl.n	8088f16 <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 8088f0c:	6863      	ldr	r3, [r4, #4]
        return( 0 );
 8088f0e:	2000      	movs	r0, #0
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 8088f10:	3301      	adds	r3, #1
 8088f12:	6063      	str	r3, [r4, #4]
        return( 0 );
 8088f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8088f16:	6822      	ldr	r2, [r4, #0]
 8088f18:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
 8088f1c:	07db      	lsls	r3, r3, #31
 8088f1e:	d403      	bmi.n	8088f28 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
 8088f20:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8088f24:	2b00      	cmp	r3, #0
 8088f26:	d0f1      	beq.n	8088f0c <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8088f28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8088f2a:	b10b      	cbz	r3, 8088f30 <mbedtls_ssl_write_certificate+0x3c>
 8088f2c:	685b      	ldr	r3, [r3, #4]
 8088f2e:	b90b      	cbnz	r3, 8088f34 <mbedtls_ssl_write_certificate+0x40>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 8088f30:	6c93      	ldr	r3, [r2, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 8088f32:	b30b      	cbz	r3, 8088f78 <mbedtls_ssl_write_certificate+0x84>
 8088f34:	681e      	ldr	r6, [r3, #0]
 8088f36:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 8088f38:	b1fe      	cbz	r6, 8088f7a <mbedtls_ssl_write_certificate+0x86>
    {
        n = crt->raw.len;
 8088f3a:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 8088f3c:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
 8088f40:	321d      	adds	r2, #29
 8088f42:	4295      	cmp	r5, r2
 8088f44:	d836      	bhi.n	8088fb4 <mbedtls_ssl_write_certificate+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 8088f46:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8088f4a:	0c29      	lsrs	r1, r5, #16
 8088f4c:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 8088f4e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8088f52:	0a29      	lsrs	r1, r5, #8
 8088f54:	441a      	add	r2, r3
 8088f56:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 8088f58:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 8088f5c:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 8088f5e:	441a      	add	r2, r3
 8088f60:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 8088f62:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8088f66:	68b1      	ldr	r1, [r6, #8]
 8088f68:	462a      	mov	r2, r5
 8088f6a:	4438      	add	r0, r7
 8088f6c:	f007 fb41 	bl	80905f2 <memcpy>
        i += n; crt = crt->next;
 8088f70:	19eb      	adds	r3, r5, r7
 8088f72:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 8088f76:	e7df      	b.n	8088f38 <mbedtls_ssl_write_certificate+0x44>
 8088f78:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 8088f7a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8088f7e:	1fda      	subs	r2, r3, #7
 8088f80:	0c10      	lsrs	r0, r2, #16
 8088f82:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 8088f84:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8088f88:	0a10      	lsrs	r0, r2, #8
 8088f8a:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 8088f8c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8088f90:	4620      	mov	r0, r4
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 8088f92:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
 8088f94:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8088f98:	2316      	movs	r3, #22
 8088f9a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 8088f9e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8088fa2:	220b      	movs	r2, #11
 8088fa4:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 8088fa6:	6863      	ldr	r3, [r4, #4]
 8088fa8:	3301      	adds	r3, #1
 8088faa:	6063      	str	r3, [r4, #4]
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 8088fac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8088fb0:	f7ff bb80 	b.w	80886b4 <mbedtls_ssl_write_record>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 8088fb4:	4800      	ldr	r0, [pc, #0]	; (8088fb8 <mbedtls_ssl_write_certificate+0xc4>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 8088fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088fb8:	ffff8b00 	.word	0xffff8b00

08088fbc <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 8088fbc:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
 8088fbe:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 8088fc2:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
 8088fc6:	2201      	movs	r2, #1
 8088fc8:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 8088fcc:	700a      	strb	r2, [r1, #0]

    ssl->state++;
 8088fce:	6842      	ldr	r2, [r0, #4]
 8088fd0:	3201      	adds	r2, #1
 8088fd2:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8088fd4:	f7ff bb6e 	b.w	80886b4 <mbedtls_ssl_write_record>

08088fd8 <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 8088fd8:	b510      	push	{r4, lr}
 8088fda:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8088fdc:	f7ff ff6c 	bl	8088eb8 <mbedtls_ssl_read_record>
 8088fe0:	2800      	cmp	r0, #0
 8088fe2:	d12f      	bne.n	8089044 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 8088fe4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8088fe6:	2b14      	cmp	r3, #20
 8088fe8:	d006      	beq.n	8088ff8 <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 8088fea:	220a      	movs	r2, #10
 8088fec:	2102      	movs	r1, #2
 8088fee:	4620      	mov	r0, r4
 8088ff0:	f7ff fd14 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8088ff4:	4814      	ldr	r0, [pc, #80]	; (8089048 <mbedtls_ssl_parse_change_cipher_spec+0x70>)
 8088ff6:	bd10      	pop	{r4, pc}
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 8088ff8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8088ffa:	2b01      	cmp	r3, #1
 8088ffc:	d103      	bne.n	8089006 <mbedtls_ssl_parse_change_cipher_spec+0x2e>
 8088ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8089000:	781b      	ldrb	r3, [r3, #0]
 8089002:	2b01      	cmp	r3, #1
 8089004:	d006      	beq.n	8089014 <mbedtls_ssl_parse_change_cipher_spec+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 8089006:	2232      	movs	r2, #50	; 0x32
 8089008:	2102      	movs	r1, #2
 808900a:	4620      	mov	r0, r4
 808900c:	f7ff fd06 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 8089010:	480e      	ldr	r0, [pc, #56]	; (808904c <mbedtls_ssl_parse_change_cipher_spec+0x74>)
 8089012:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
 8089014:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8089016:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 8089018:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808901a:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 808901c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 808901e:	6018      	str	r0, [r3, #0]
 8089020:	6058      	str	r0, [r3, #4]

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089022:	68e3      	ldr	r3, [r4, #12]
 8089024:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8089026:	2b01      	cmp	r3, #1
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 8089028:	bfc9      	itett	gt
 808902a:	6c23      	ldrgt	r3, [r4, #64]	; 0x40
                      ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
 808902c:	6661      	strle	r1, [r4, #100]	; 0x64
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 808902e:	68da      	ldrgt	r2, [r3, #12]
 8089030:	691b      	ldrgt	r3, [r3, #16]

    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
 8089032:	f04f 0000 	mov.w	r0, #0
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 8089036:	bfc2      	ittt	gt
 8089038:	1ad3      	subgt	r3, r2, r3
 808903a:	185b      	addgt	r3, r3, r1
 808903c:	6663      	strgt	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 808903e:	6863      	ldr	r3, [r4, #4]
 8089040:	3301      	adds	r3, #1
 8089042:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
 8089044:	bd10      	pop	{r4, pc}
 8089046:	bf00      	nop
 8089048:	ffff8900 	.word	0xffff8900
 808904c:	ffff8200 	.word	0xffff8200

08089050 <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 8089050:	7a4b      	ldrb	r3, [r1, #9]
 8089052:	2b07      	cmp	r3, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 8089054:	bf08      	it	eq
 8089056:	4a03      	ldreq	r2, [pc, #12]	; (8089064 <mbedtls_ssl_optimize_checksum+0x14>)
 8089058:	6b03      	ldr	r3, [r0, #48]	; 0x30
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 808905a:	bf18      	it	ne
 808905c:	4a02      	ldrne	r2, [pc, #8]	; (8089068 <mbedtls_ssl_optimize_checksum+0x18>)
 808905e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8089062:	4770      	bx	lr
 8089064:	080882b5 	.word	0x080882b5
 8089068:	080882ad 	.word	0x080882ad

0808906c <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 808906c:	b510      	push	{r4, lr}
 808906e:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089070:	68c3      	ldr	r3, [r0, #12]
 8089072:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 8089076:	2b01      	cmp	r3, #1
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 8089078:	bfc9      	itett	gt
 808907a:	6c03      	ldrgt	r3, [r0, #64]	; 0x40
                       ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->out_msg = ssl->out_iv;
 808907c:	f8c0 1098 	strle.w	r1, [r0, #152]	; 0x98
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
                       ssl->transform_negotiate->fixed_ivlen;
 8089080:	68da      	ldrgt	r2, [r3, #12]
 8089082:	691b      	ldrgt	r3, [r3, #16]
 8089084:	bfc2      	ittt	gt
 8089086:	1ad3      	subgt	r3, r2, r3
 8089088:	185b      	addgt	r3, r3, r1
 808908a:	f8c0 3098 	strgt.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 808908e:	6803      	ldr	r3, [r0, #0]
 8089090:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 8089094:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8089098:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808909a:	f002 0201 	and.w	r2, r2, #1
 808909e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80890a2:	3104      	adds	r1, #4
 80890a4:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 80890a6:	68e3      	ldr	r3, [r4, #12]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 80890a8:	2214      	movs	r2, #20
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 80890aa:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 80890ac:	bf14      	ite	ne
 80890ae:	2310      	movne	r3, #16
 80890b0:	2328      	moveq	r3, #40	; 0x28
 80890b2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80890b6:	2316      	movs	r3, #22
 80890b8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 80890bc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80890c0:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 80890c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80890c4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80890c8:	b133      	cbz	r3, 80890d8 <mbedtls_ssl_write_finished+0x6c>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80890ca:	6823      	ldr	r3, [r4, #0]
 80890cc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80890d0:	07db      	lsls	r3, r3, #31
 80890d2:	d404      	bmi.n	80890de <mbedtls_ssl_write_finished+0x72>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 80890d4:	230f      	movs	r3, #15
 80890d6:	e001      	b.n	80890dc <mbedtls_ssl_write_finished+0x70>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 80890d8:	6863      	ldr	r3, [r4, #4]
 80890da:	3301      	adds	r3, #1
 80890dc:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
 80890de:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80890e2:	2200      	movs	r2, #0
 80890e4:	601a      	str	r2, [r3, #0]
 80890e6:	605a      	str	r2, [r3, #4]

    ssl->transform_out = ssl->transform_negotiate;
 80890e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80890ea:	4620      	mov	r0, r4
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );

    ssl->transform_out = ssl->transform_negotiate;
 80890ec:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 80890ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80890f0:	6263      	str	r3, [r4, #36]	; 0x24
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
 80890f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80890f6:	f7ff badd 	b.w	80886b4 <mbedtls_ssl_write_record>
	...

080890fc <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 80890fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 80890fe:	6803      	ldr	r3, [r0, #0]
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 8089100:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 8089102:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8089106:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8089108:	43d2      	mvns	r2, r2
 808910a:	ad01      	add	r5, sp, #4
 808910c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8089110:	f002 0201 	and.w	r2, r2, #1
 8089114:	4629      	mov	r1, r5
 8089116:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8089118:	4620      	mov	r0, r4
 808911a:	f7ff fecd 	bl	8088eb8 <mbedtls_ssl_read_record>
 808911e:	2800      	cmp	r0, #0
 8089120:	d13b      	bne.n	808919a <mbedtls_ssl_parse_finished+0x9e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8089122:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8089124:	2b16      	cmp	r3, #22
 8089126:	d006      	beq.n	8089136 <mbedtls_ssl_parse_finished+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 8089128:	220a      	movs	r2, #10
 808912a:	2102      	movs	r1, #2
 808912c:	4620      	mov	r0, r4
 808912e:	f7ff fc75 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8089132:	481b      	ldr	r0, [pc, #108]	; (80891a0 <mbedtls_ssl_parse_finished+0xa4>)
 8089134:	e031      	b.n	808919a <mbedtls_ssl_parse_finished+0x9e>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 8089136:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8089138:	780b      	ldrb	r3, [r1, #0]
 808913a:	2b14      	cmp	r3, #20
 808913c:	d115      	bne.n	808916a <mbedtls_ssl_parse_finished+0x6e>
 808913e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8089140:	2b10      	cmp	r3, #16
 8089142:	d112      	bne.n	808916a <mbedtls_ssl_parse_finished+0x6e>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 8089144:	f88d 0003 	strb.w	r0, [sp, #3]
 8089148:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 808914a:	5ccb      	ldrb	r3, [r1, r3]
 808914c:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
 808914e:	f89d 6003 	ldrb.w	r6, [sp, #3]
 8089152:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8089154:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 8089156:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8089158:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 808915a:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808915e:	d1f3      	bne.n	8089148 <mbedtls_ssl_parse_finished+0x4c>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 8089160:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 8089164:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8089168:	b133      	cbz	r3, 8089178 <mbedtls_ssl_parse_finished+0x7c>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808916a:	2232      	movs	r2, #50	; 0x32
 808916c:	2102      	movs	r1, #2
 808916e:	4620      	mov	r0, r4
 8089170:	f7ff fc54 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 8089174:	480b      	ldr	r0, [pc, #44]	; (80891a4 <mbedtls_ssl_parse_finished+0xa8>)
 8089176:	e010      	b.n	808919a <mbedtls_ssl_parse_finished+0x9e>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 8089178:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808917a:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
 808917e:	b138      	cbz	r0, 8089190 <mbedtls_ssl_parse_finished+0x94>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8089180:	6823      	ldr	r3, [r4, #0]
 8089182:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
 8089186:	f010 0001 	ands.w	r0, r0, #1
 808918a:	d105      	bne.n	8089198 <mbedtls_ssl_parse_finished+0x9c>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 808918c:	230a      	movs	r3, #10
 808918e:	e001      	b.n	8089194 <mbedtls_ssl_parse_finished+0x98>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 8089190:	6863      	ldr	r3, [r4, #4]
 8089192:	3301      	adds	r3, #1
 8089194:	6063      	str	r3, [r4, #4]
 8089196:	e000      	b.n	808919a <mbedtls_ssl_parse_finished+0x9e>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
 8089198:	4610      	mov	r0, r2
}
 808919a:	b004      	add	sp, #16
 808919c:	bd70      	pop	{r4, r5, r6, pc}
 808919e:	bf00      	nop
 80891a0:	ffff8900 	.word	0xffff8900
 80891a4:	ffff8180 	.word	0xffff8180

080891a8 <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 80891a8:	2274      	movs	r2, #116	; 0x74
 80891aa:	2100      	movs	r1, #0
 80891ac:	f007 ba47 	b.w	809063e <memset>

080891b0 <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 80891b0:	22b4      	movs	r2, #180	; 0xb4
 80891b2:	2100      	movs	r1, #0
 80891b4:	f007 ba43 	b.w	809063e <memset>

080891b8 <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
 80891b8:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80891bc:	f361 0383 	bfi	r3, r1, #2, #2
 80891c0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80891c4:	4770      	bx	lr

080891c6 <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
 80891c6:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
 80891c8:	6382      	str	r2, [r0, #56]	; 0x38
 80891ca:	4770      	bx	lr

080891cc <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
 80891cc:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 80891ce:	61c2      	str	r2, [r0, #28]
 80891d0:	4770      	bx	lr

080891d2 <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
 80891d2:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 80891d4:	6142      	str	r2, [r0, #20]
 80891d6:	4770      	bx	lr

080891d8 <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
 80891d8:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 80891da:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
 80891dc:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 80891de:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
 80891e0:	6183      	str	r3, [r0, #24]
 80891e2:	4770      	bx	lr

080891e4 <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
 80891e4:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
 80891e6:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
 80891e8:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
 80891ea:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 80891ec:	2100      	movs	r1, #0
}
 80891ee:	bc10      	pop	{r4}
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 80891f0:	f7fe beee 	b.w	8087fd0 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

080891f4 <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 80891f4:	3048      	adds	r0, #72	; 0x48
 80891f6:	f7ff b83b 	b.w	8088270 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

080891fa <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
 80891fa:	64c1      	str	r1, [r0, #76]	; 0x4c
    conf->ca_crl     = ca_crl;
 80891fc:	6502      	str	r2, [r0, #80]	; 0x50
 80891fe:	4770      	bx	lr

08089200 <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
 8089200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089202:	4606      	mov	r6, r0
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
 8089204:	460c      	mov	r4, r1
 8089206:	b131      	cbz	r1, 8089216 <mbedtls_ssl_set_hostname+0x16>
    {
        hostname_len = strlen( hostname );
 8089208:	4608      	mov	r0, r1
 808920a:	f007 fa38 	bl	809067e <strlen>

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 808920e:	28ff      	cmp	r0, #255	; 0xff

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );
 8089210:	4605      	mov	r5, r0

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 8089212:	d901      	bls.n	8089218 <mbedtls_ssl_set_hostname+0x18>
 8089214:	e022      	b.n	808925c <mbedtls_ssl_set_hostname+0x5c>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
 8089216:	460d      	mov	r5, r1
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
 8089218:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 808921c:	b157      	cbz	r7, 8089234 <mbedtls_ssl_set_hostname+0x34>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 808921e:	4638      	mov	r0, r7
 8089220:	f007 fa2d 	bl	809067e <strlen>
 8089224:	4601      	mov	r1, r0
 8089226:	4638      	mov	r0, r7
 8089228:	f7fe feca 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 808922c:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
 8089230:	f006 f898 	bl	808f364 <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
 8089234:	b91c      	cbnz	r4, 808923e <mbedtls_ssl_set_hostname+0x3e>
    {
        ssl->hostname = NULL;
 8089236:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
        memcpy( ssl->hostname, hostname, hostname_len );

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
 808923a:	4620      	mov	r0, r4
 808923c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        ssl->hostname = NULL;
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
 808923e:	1c69      	adds	r1, r5, #1
 8089240:	2001      	movs	r0, #1
 8089242:	f007 f9b1 	bl	80905a8 <calloc>
 8089246:	4607      	mov	r7, r0
 8089248:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
        if( ssl->hostname == NULL )
 808924c:	b140      	cbz	r0, 8089260 <mbedtls_ssl_set_hostname+0x60>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

        memcpy( ssl->hostname, hostname, hostname_len );
 808924e:	462a      	mov	r2, r5
 8089250:	4621      	mov	r1, r4
 8089252:	f007 f9ce 	bl	80905f2 <memcpy>

        ssl->hostname[hostname_len] = '\0';
 8089256:	2000      	movs	r0, #0
 8089258:	5578      	strb	r0, [r7, r5]
 808925a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808925c:	4801      	ldr	r0, [pc, #4]	; (8089264 <mbedtls_ssl_set_hostname+0x64>)
 808925e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
        if( ssl->hostname == NULL )
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8089260:	4801      	ldr	r0, [pc, #4]	; (8089268 <mbedtls_ssl_set_hostname+0x68>)

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
}
 8089262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8089264:	ffff8f00 	.word	0xffff8f00
 8089268:	ffff8100 	.word	0xffff8100

0808926c <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
 808926c:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    conf->min_minor_ver = minor;
 8089270:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
 8089274:	4770      	bx	lr

08089276 <mbedtls_ssl_get_verify_result>:
    return( ssl->in_offt == NULL ? 0 : ssl->in_msglen );
}

uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
{
    if( ssl->session != NULL )
 8089276:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8089278:	b90b      	cbnz	r3, 808927e <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session->verify_result );

    if( ssl->session_negotiate != NULL )
 808927a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 808927c:	b10b      	cbz	r3, 8089282 <mbedtls_ssl_get_verify_result+0xc>
        return( ssl->session_negotiate->verify_result );
 808927e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8089280:	4770      	bx	lr

    return( 0xFFFFFFFF );
 8089282:	f04f 30ff 	mov.w	r0, #4294967295
}
 8089286:	4770      	bx	lr

08089288 <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 8089288:	6803      	ldr	r3, [r0, #0]
 808928a:	4a09      	ldr	r2, [pc, #36]	; (80892b0 <mbedtls_ssl_get_max_frag_len+0x28>)
 808928c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 8089290:	6a41      	ldr	r1, [r0, #36]	; 0x24
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 8089292:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8089296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 808929a:	b131      	cbz	r1, 80892aa <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 808929c:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80892a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80892a4:	4293      	cmp	r3, r2
 80892a6:	bf28      	it	cs
 80892a8:	4613      	movcs	r3, r2
    {
        max_len = mfl_code_to_length[ssl->session_out->mfl_code];
    }

    return max_len;
}
 80892aa:	4618      	mov	r0, r3
 80892ac:	4770      	bx	lr
 80892ae:	bf00      	nop
 80892b0:	08092740 	.word	0x08092740

080892b4 <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
 80892b4:	b138      	cbz	r0, 80892c6 <mbedtls_ssl_handshake_step+0x12>
 80892b6:	6803      	ldr	r3, [r0, #0]
 80892b8:	b12b      	cbz	r3, 80892c6 <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80892ba:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80892be:	07db      	lsls	r3, r3, #31
 80892c0:	d403      	bmi.n	80892ca <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 80892c2:	f005 b8cb 	b.w	808e45c <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80892c6:	4802      	ldr	r0, [pc, #8]	; (80892d0 <mbedtls_ssl_handshake_step+0x1c>)
 80892c8:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 80892ca:	4802      	ldr	r0, [pc, #8]	; (80892d4 <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
 80892cc:	4770      	bx	lr
 80892ce:	bf00      	nop
 80892d0:	ffff8f00 	.word	0xffff8f00
 80892d4:	ffff8f80 	.word	0xffff8f80

080892d8 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 80892d8:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
 80892da:	4604      	mov	r4, r0
 80892dc:	b150      	cbz	r0, 80892f4 <mbedtls_ssl_handshake+0x1c>
 80892de:	6803      	ldr	r3, [r0, #0]
 80892e0:	b143      	cbz	r3, 80892f4 <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80892e2:	6863      	ldr	r3, [r4, #4]
 80892e4:	2b10      	cmp	r3, #16
 80892e6:	d007      	beq.n	80892f8 <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 80892e8:	4620      	mov	r0, r4
 80892ea:	f7ff ffe3 	bl	80892b4 <mbedtls_ssl_handshake_step>

        if( ret != 0 )
 80892ee:	2800      	cmp	r0, #0
 80892f0:	d0f7      	beq.n	80892e2 <mbedtls_ssl_handshake+0xa>
 80892f2:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80892f4:	4801      	ldr	r0, [pc, #4]	; (80892fc <mbedtls_ssl_handshake+0x24>)
 80892f6:	bd10      	pop	{r4, pc}
 80892f8:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
 80892fa:	bd10      	pop	{r4, pc}
 80892fc:	ffff8f00 	.word	0xffff8f00

08089300 <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
 8089300:	b570      	push	{r4, r5, r6, lr}
 8089302:	460e      	mov	r6, r1
 8089304:	4614      	mov	r4, r2
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
 8089306:	4605      	mov	r5, r0
 8089308:	2800      	cmp	r0, #0
 808930a:	d061      	beq.n	80893d0 <mbedtls_ssl_read+0xd0>
 808930c:	6803      	ldr	r3, [r0, #0]
 808930e:	2b00      	cmp	r3, #0
 8089310:	d05e      	beq.n	80893d0 <mbedtls_ssl_read+0xd0>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 8089312:	6843      	ldr	r3, [r0, #4]
 8089314:	2b10      	cmp	r3, #16
 8089316:	d103      	bne.n	8089320 <mbedtls_ssl_read+0x20>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
            return( ret );
        }
    }

    if( ssl->in_offt == NULL )
 8089318:	6eab      	ldr	r3, [r5, #104]	; 0x68
 808931a:	2b00      	cmp	r3, #0
 808931c:	d142      	bne.n	80893a4 <mbedtls_ssl_read+0xa4>
 808931e:	e007      	b.n	8089330 <mbedtls_ssl_read+0x30>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        ret = mbedtls_ssl_handshake( ssl );
 8089320:	f7ff ffda 	bl	80892d8 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 8089324:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
 8089328:	d0f6      	beq.n	8089318 <mbedtls_ssl_read+0x18>
 808932a:	2800      	cmp	r0, #0
 808932c:	d0f4      	beq.n	8089318 <mbedtls_ssl_read+0x18>
 808932e:	bd70      	pop	{r4, r5, r6, pc}
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 8089330:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8089332:	b11b      	cbz	r3, 808933c <mbedtls_ssl_read+0x3c>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 8089334:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8089336:	4798      	blx	r3
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 8089338:	3001      	adds	r0, #1
 808933a:	d04d      	beq.n	80893d8 <mbedtls_ssl_read+0xd8>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
        }

        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808933c:	4628      	mov	r0, r5
 808933e:	f7ff fdbb 	bl	8088eb8 <mbedtls_ssl_read_record>
 8089342:	b120      	cbz	r0, 808934e <mbedtls_ssl_read+0x4e>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 8089344:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 8089348:	d157      	bne.n	80893fa <mbedtls_ssl_read+0xfa>
                return( 0 );
 808934a:	2000      	movs	r0, #0
 808934c:	bd70      	pop	{r4, r5, r6, pc}

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
            return( ret );
        }

        if( ssl->in_msglen  == 0 &&
 808934e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8089350:	b953      	cbnz	r3, 8089368 <mbedtls_ssl_read+0x68>
 8089352:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8089354:	2b17      	cmp	r3, #23
 8089356:	d107      	bne.n	8089368 <mbedtls_ssl_read+0x68>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8089358:	4628      	mov	r0, r5
 808935a:	f7ff fdad 	bl	8088eb8 <mbedtls_ssl_read_record>
 808935e:	b118      	cbz	r0, 8089368 <mbedtls_ssl_read+0x68>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 8089360:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 8089364:	d0f1      	beq.n	808934a <mbedtls_ssl_read+0x4a>
 8089366:	bd70      	pop	{r4, r5, r6, pc}
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
                return( ret );
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089368:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808936a:	2b16      	cmp	r3, #22
 808936c:	d10b      	bne.n	8089386 <mbedtls_ssl_read+0x86>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 808936e:	682b      	ldr	r3, [r5, #0]
 8089370:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8089374:	07db      	lsls	r3, r3, #31
 8089376:	d435      	bmi.n	80893e4 <mbedtls_ssl_read+0xe4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 8089378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 808937a:	781b      	ldrb	r3, [r3, #0]
 808937c:	bb53      	cbnz	r3, 80893d4 <mbedtls_ssl_read+0xd4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 808937e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8089380:	2b04      	cmp	r3, #4
 8089382:	d127      	bne.n	80893d4 <mbedtls_ssl_read+0xd4>
 8089384:	e02e      	b.n	80893e4 <mbedtls_ssl_read+0xe4>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 8089386:	2b15      	cmp	r3, #21
 8089388:	d101      	bne.n	808938e <mbedtls_ssl_read+0x8e>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
                }
            }

            return( MBEDTLS_ERR_SSL_WANT_READ );
 808938a:	481c      	ldr	r0, [pc, #112]	; (80893fc <mbedtls_ssl_read+0xfc>)
 808938c:	bd70      	pop	{r4, r5, r6, pc}
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 808938e:	2b17      	cmp	r3, #23
 8089390:	d120      	bne.n	80893d4 <mbedtls_ssl_read+0xd4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        }

        ssl->in_offt = ssl->in_msg;
 8089392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8089394:	66ab      	str	r3, [r5, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 8089396:	686b      	ldr	r3, [r5, #4]
 8089398:	2b10      	cmp	r3, #16
 808939a:	d103      	bne.n	80893a4 <mbedtls_ssl_read+0xa4>
            ssl_set_timer( ssl, 0 );
 808939c:	2100      	movs	r1, #0
 808939e:	4628      	mov	r0, r5
 80893a0:	f7fe fe16 	bl	8087fd0 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
 80893a4:	6f28      	ldr	r0, [r5, #112]	; 0x70
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
 80893a6:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80893a8:	4284      	cmp	r4, r0
 80893aa:	bf28      	it	cs
 80893ac:	4604      	movcs	r4, r0
 80893ae:	4630      	mov	r0, r6
 80893b0:	4622      	mov	r2, r4
 80893b2:	f007 f91e 	bl	80905f2 <memcpy>
    ssl->in_msglen -= n;
 80893b6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80893b8:	1b1b      	subs	r3, r3, r4
 80893ba:	672b      	str	r3, [r5, #112]	; 0x70

    if( ssl->in_msglen == 0 )
 80893bc:	b91b      	cbnz	r3, 80893c6 <mbedtls_ssl_read+0xc6>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
 80893be:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
 80893c0:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 80893c4:	e002      	b.n	80893cc <mbedtls_ssl_read+0xcc>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
 80893c6:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80893c8:	4423      	add	r3, r4
 80893ca:	66ab      	str	r3, [r5, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
 80893cc:	4620      	mov	r0, r4
 80893ce:	bd70      	pop	{r4, r5, r6, pc}
{
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80893d0:	480b      	ldr	r0, [pc, #44]	; (8089400 <mbedtls_ssl_read+0x100>)
 80893d2:	bd70      	pop	{r4, r5, r6, pc}
                /* With DTLS, drop the packet (probably from last handshake) */
#if defined(MBEDTLS_SSL_PROTO_DTLS)
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                    return( MBEDTLS_ERR_SSL_WANT_READ );
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80893d4:	480b      	ldr	r0, [pc, #44]	; (8089404 <mbedtls_ssl_read+0x104>)
 80893d6:	bd70      	pop	{r4, r5, r6, pc}
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 80893d8:	682b      	ldr	r3, [r5, #0]
 80893da:	4628      	mov	r0, r5
 80893dc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80893de:	f7fe fdf7 	bl	8087fd0 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
 80893e2:	e7ab      	b.n	808933c <mbedtls_ssl_read+0x3c>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80893e4:	68eb      	ldr	r3, [r5, #12]
 80893e6:	2b00      	cmp	r3, #0
 80893e8:	dd06      	ble.n	80893f8 <mbedtls_ssl_read+0xf8>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 80893ea:	2264      	movs	r2, #100	; 0x64
 80893ec:	2101      	movs	r1, #1
 80893ee:	4628      	mov	r0, r5
 80893f0:	f7ff fb14 	bl	8088a1c <mbedtls_ssl_send_alert_message>
 80893f4:	b908      	cbnz	r0, 80893fa <mbedtls_ssl_read+0xfa>
 80893f6:	e7c8      	b.n	808938a <mbedtls_ssl_read+0x8a>
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80893f8:	4803      	ldr	r0, [pc, #12]	; (8089408 <mbedtls_ssl_read+0x108>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
}
 80893fa:	bd70      	pop	{r4, r5, r6, pc}
 80893fc:	ffff9700 	.word	0xffff9700
 8089400:	ffff8f00 	.word	0xffff8f00
 8089404:	ffff8900 	.word	0xffff8900
 8089408:	ffff9400 	.word	0xffff9400

0808940c <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
 808940c:	b570      	push	{r4, r5, r6, lr}
 808940e:	460e      	mov	r6, r1
 8089410:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
 8089412:	4604      	mov	r4, r0
 8089414:	b350      	cbz	r0, 808946c <mbedtls_ssl_write+0x60>
 8089416:	6803      	ldr	r3, [r0, #0]
 8089418:	b343      	cbz	r3, 808946c <mbedtls_ssl_write+0x60>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808941a:	6843      	ldr	r3, [r0, #4]
 808941c:	2b10      	cmp	r3, #16
 808941e:	d109      	bne.n	8089434 <mbedtls_ssl_write+0x28>
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret;
#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 8089420:	4620      	mov	r0, r4
 8089422:	f7ff ff31 	bl	8089288 <mbedtls_ssl_get_max_frag_len>
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
 8089426:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 808942a:	4285      	cmp	r5, r0
 808942c:	bf28      	it	cs
 808942e:	4605      	movcs	r5, r0
 8089430:	b92b      	cbnz	r3, 808943e <mbedtls_ssl_write+0x32>
 8089432:	e00a      	b.n	808944a <mbedtls_ssl_write+0x3e>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 8089434:	f7ff ff50 	bl	80892d8 <mbedtls_ssl_handshake>
 8089438:	2800      	cmp	r0, #0
 808943a:	d0f1      	beq.n	8089420 <mbedtls_ssl_write+0x14>
 808943c:	bd70      	pop	{r4, r5, r6, pc}
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808943e:	4620      	mov	r0, r4
 8089440:	f7ff f900 	bl	8088644 <mbedtls_ssl_flush_output>
 8089444:	b998      	cbnz	r0, 808946e <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
 8089446:	4628      	mov	r0, r5
 8089448:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 808944a:	2317      	movs	r3, #23
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
 808944c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 8089450:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 8089454:	462a      	mov	r2, r5
 8089456:	4631      	mov	r1, r6
 8089458:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808945c:	f007 f8c9 	bl	80905f2 <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8089460:	4620      	mov	r0, r4
 8089462:	f7ff f927 	bl	80886b4 <mbedtls_ssl_write_record>
 8089466:	2800      	cmp	r0, #0
 8089468:	d0ed      	beq.n	8089446 <mbedtls_ssl_write+0x3a>
 808946a:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808946c:	4800      	ldr	r0, [pc, #0]	; (8089470 <mbedtls_ssl_write+0x64>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
 808946e:	bd70      	pop	{r4, r5, r6, pc}
 8089470:	ffff8f00 	.word	0xffff8f00

08089474 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 8089474:	b510      	push	{r4, lr}
    if( transform == NULL )
 8089476:	4604      	mov	r4, r0
 8089478:	b1a0      	cbz	r0, 80894a4 <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 808947a:	3050      	adds	r0, #80	; 0x50
 808947c:	f7f8 fbf2 	bl	8081c64 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 8089480:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8089484:	f7f8 fbee 	bl	8081c64 <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 8089488:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808948c:	f7fd f867 	bl	808655e <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 8089490:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8089494:	f7fd f863 	bl	808655e <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 8089498:	4620      	mov	r0, r4
}
 808949a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 808949e:	21d0      	movs	r1, #208	; 0xd0
 80894a0:	f7fe bd8e 	b.w	8087fc0 <_ZL15mbedtls_zeroizePvj>
 80894a4:	bd10      	pop	{r4, pc}

080894a6 <mbedtls_ssl_handshake_free>:
    }
}
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
 80894a6:	b538      	push	{r3, r4, r5, lr}
    if( handshake == NULL )
 80894a8:	4604      	mov	r4, r0
 80894aa:	b1a0      	cbz	r0, 80894d6 <mbedtls_ssl_handshake_free+0x30>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 80894ac:	3018      	adds	r0, #24
 80894ae:	f7f7 fcb3 	bl	8080e18 <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 80894b2:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80894b6:	f003 f8bd 	bl	808c634 <mbedtls_sha512_free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
 80894ba:	68e0      	ldr	r0, [r4, #12]
 80894bc:	b930      	cbnz	r0, 80894cc <mbedtls_ssl_handshake_free+0x26>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 80894be:	4620      	mov	r0, r4
}
 80894c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 80894c4:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80894c8:	f7fe bd7a 	b.w	8087fc0 <_ZL15mbedtls_zeroizePvj>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
 80894cc:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
 80894ce:	f005 ff49 	bl	808f364 <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
 80894d2:	4628      	mov	r0, r5
 80894d4:	e7f2      	b.n	80894bc <mbedtls_ssl_handshake_free+0x16>
 80894d6:	bd38      	pop	{r3, r4, r5, pc}

080894d8 <mbedtls_ssl_session_free>:

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 80894d8:	b510      	push	{r4, lr}
    if( session == NULL )
 80894da:	4604      	mov	r4, r0
 80894dc:	b178      	cbz	r0, 80894fe <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 80894de:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80894e0:	b120      	cbz	r0, 80894ec <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 80894e2:	f7fe f962 	bl	80877aa <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 80894e6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80894e8:	f005 ff3c 	bl	808f364 <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
 80894ec:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80894ee:	f005 ff39 	bl	808f364 <free>
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 80894f2:	4620      	mov	r0, r4
}
 80894f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 80894f8:	2174      	movs	r1, #116	; 0x74
 80894fa:	f7fe bd61 	b.w	8087fc0 <_ZL15mbedtls_zeroizePvj>
 80894fe:	bd10      	pop	{r4, pc}

08089500 <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 8089500:	b538      	push	{r3, r4, r5, lr}
 8089502:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 8089504:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 8089506:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
 8089508:	f8d3 51e4 	ldr.w	r5, [r3, #484]	; 0x1e4
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 808950c:	b120      	cbz	r0, 8089518 <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 808950e:	f7ff ffe3 	bl	80894d8 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 8089512:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8089514:	f005 ff26 	bl	808f364 <free>
    }
    ssl->session = ssl->session_negotiate;
 8089518:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;
 808951a:	2300      	movs	r3, #0

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 808951c:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
 808951e:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 8089520:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 8089522:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8089524:	b123      	cbz	r3, 8089530 <mbedtls_ssl_handshake_wrapup+0x30>
 8089526:	6888      	ldr	r0, [r1, #8]
 8089528:	b110      	cbz	r0, 8089530 <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
 808952a:	b90d      	cbnz	r5, 8089530 <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 808952c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 808952e:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
 8089530:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8089532:	f7ff ffb8 	bl	80894a6 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 8089536:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8089538:	f005 ff14 	bl	808f364 <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 808953c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
 808953e:	2300      	movs	r3, #0
 8089540:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 8089542:	b120      	cbz	r0, 808954e <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 8089544:	f7ff ff96 	bl	8089474 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 8089548:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808954a:	f005 ff0b 	bl	808f364 <free>
    }
    ssl->transform = ssl->transform_negotiate;
 808954e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8089550:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 8089552:	2300      	movs	r3, #0
 8089554:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
 8089556:	6863      	ldr	r3, [r4, #4]
 8089558:	3301      	adds	r3, #1
 808955a:	6063      	str	r3, [r4, #4]
 808955c:	bd38      	pop	{r3, r4, r5, pc}
	...

08089560 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 8089560:	b538      	push	{r3, r4, r5, lr}
 8089562:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 8089564:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8089566:	b108      	cbz	r0, 808956c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 8089568:	f7ff ff84 	bl	8089474 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 808956c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808956e:	b108      	cbz	r0, 8089574 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 8089570:	f7ff ffb2 	bl	80894d8 <mbedtls_ssl_session_free>
    if( ssl->handshake )
 8089574:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8089576:	b108      	cbz	r0, 808957c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 8089578:	f7ff ff95 	bl	80894a6 <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
 808957c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808957e:	b923      	cbnz	r3, 808958a <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2a>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 8089580:	21d0      	movs	r1, #208	; 0xd0
 8089582:	2001      	movs	r0, #1
 8089584:	f007 f810 	bl	80905a8 <calloc>
 8089588:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
 808958a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808958c:	b923      	cbnz	r3, 8089598 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x38>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 808958e:	2174      	movs	r1, #116	; 0x74
 8089590:	2001      	movs	r0, #1
 8089592:	f007 f809 	bl	80905a8 <calloc>
 8089596:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
 8089598:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808959a:	b92b      	cbnz	r3, 80895a8 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x48>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 808959c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80895a0:	2001      	movs	r0, #1
 80895a2:	f007 f801 	bl	80905a8 <calloc>
 80895a6:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
 80895a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80895aa:	b118      	cbz	r0, 80895b4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
 80895ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80895ae:	b10b      	cbz	r3, 80895b4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
 80895b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
 80895b2:	b96b      	cbnz	r3, 80895d0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x70>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
 80895b4:	f005 fed6 	bl	808f364 <free>
        mbedtls_free( ssl->transform_negotiate );
 80895b8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80895ba:	f005 fed3 	bl	808f364 <free>
        mbedtls_free( ssl->session_negotiate );
 80895be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80895c0:	f005 fed0 	bl	808f364 <free>

        ssl->handshake = NULL;
 80895c4:	2300      	movs	r3, #0
 80895c6:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 80895c8:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 80895ca:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80895cc:	481e      	ldr	r0, [pc, #120]	; (8089648 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xe8>)
 80895ce:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
 80895d0:	4618      	mov	r0, r3
 80895d2:	f7ff fde9 	bl	80891a8 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 80895d6:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 80895d8:	22d0      	movs	r2, #208	; 0xd0
 80895da:	2100      	movs	r1, #0
 80895dc:	4628      	mov	r0, r5
 80895de:	f007 f82e 	bl	809063e <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 80895e2:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80895e6:	f7f8 fb39 	bl	8081c5c <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 80895ea:	f105 0090 	add.w	r0, r5, #144	; 0x90
 80895ee:	f7f8 fb35 	bl	8081c5c <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
 80895f2:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80895f6:	f7fc ffad 	bl	8086554 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 80895fa:	f105 0044 	add.w	r0, r5, #68	; 0x44
 80895fe:	f7fc ffa9 	bl	8086554 <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
 8089602:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 8089604:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 8089608:	f104 0518 	add.w	r5, r4, #24
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 808960c:	2100      	movs	r1, #0
 808960e:	4620      	mov	r0, r4
 8089610:	f007 f815 	bl	809063e <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 8089614:	4628      	mov	r0, r5
 8089616:	f7f7 fbfb 	bl	8080e10 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 808961a:	2100      	movs	r1, #0
 808961c:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 808961e:	f104 0588 	add.w	r5, r4, #136	; 0x88
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 8089622:	f7f7 fc09 	bl	8080e38 <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 8089626:	4628      	mov	r0, r5
 8089628:	f003 f800 	bl	808c62c <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
 808962c:	2101      	movs	r1, #1
 808962e:	4628      	mov	r0, r5
 8089630:	f003 f812 	bl	808c658 <mbedtls_sha512_starts_ret>
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 8089634:	4b05      	ldr	r3, [pc, #20]	; (808964c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xec>)

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 8089636:	2000      	movs	r0, #0
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 8089638:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 808963c:	2303      	movs	r3, #3

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 808963e:	7020      	strb	r0, [r4, #0]
    set->ecdsa = md_alg;
 8089640:	7060      	strb	r0, [r4, #1]
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 8089642:	60a3      	str	r3, [r4, #8]
        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
}
 8089644:	bd38      	pop	{r3, r4, r5, pc}
 8089646:	bf00      	nop
 8089648:	ffff8100 	.word	0xffff8100
 808964c:	080882bd 	.word	0x080882bd

08089650 <mbedtls_ssl_setup>:
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 8089650:	b538      	push	{r3, r4, r5, lr}
    int ret;
    const size_t len = MBEDTLS_SSL_BUFFER_LEN;

    ssl->conf = conf;
 8089652:	6001      	str	r1, [r0, #0]
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 8089654:	4604      	mov	r4, r0
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 8089656:	f242 114d 	movw	r1, #8525	; 0x214d
 808965a:	2001      	movs	r0, #1
 808965c:	f006 ffa4 	bl	80905a8 <calloc>
 8089660:	4605      	mov	r5, r0
 8089662:	6520      	str	r0, [r4, #80]	; 0x50
 8089664:	b328      	cbz	r0, 80896b2 <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 8089666:	f242 114d 	movw	r1, #8525	; 0x214d
 808966a:	2001      	movs	r0, #1
 808966c:	f006 ff9c 	bl	80905a8 <calloc>
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 8089670:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8089674:	b1e8      	cbz	r0, 80896b2 <mbedtls_ssl_setup+0x62>
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
 8089676:	f100 0308 	add.w	r3, r0, #8
 808967a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 808967e:	f100 030b 	add.w	r3, r0, #11
 8089682:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 8089686:	f105 0308 	add.w	r3, r5, #8
        ssl->in_msg = ssl->in_buf + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
 808968a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
 808968e:	6565      	str	r5, [r4, #84]	; 0x54
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 8089690:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 8089692:	65a3      	str	r3, [r4, #88]	; 0x58
        ssl->in_len = ssl->in_buf + 11;
 8089694:	f105 030b 	add.w	r3, r5, #11
        ssl->in_iv  = ssl->in_buf + 13;
 8089698:	350d      	adds	r5, #13
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 808969a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 808969e:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
        ssl->in_len = ssl->in_buf + 11;
 80896a2:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 80896a4:	6625      	str	r5, [r4, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 80896a6:	6665      	str	r5, [r4, #100]	; 0x64
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 80896a8:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 80896aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ssl->in_len = ssl->in_buf + 11;
        ssl->in_iv  = ssl->in_buf + 13;
        ssl->in_msg = ssl->in_buf + 13;
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 80896ae:	f7ff bf57 	b.w	8089560 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
        mbedtls_free( ssl->in_buf );
 80896b2:	4628      	mov	r0, r5
 80896b4:	f005 fe56 	bl	808f364 <free>
        ssl->in_buf = NULL;
 80896b8:	2300      	movs	r3, #0
 80896ba:	6523      	str	r3, [r4, #80]	; 0x50

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
        return( ret );

    return( 0 );
}
 80896bc:	4800      	ldr	r0, [pc, #0]	; (80896c0 <mbedtls_ssl_setup+0x70>)
 80896be:	bd38      	pop	{r3, r4, r5, pc}
 80896c0:	ffff8100 	.word	0xffff8100

080896c4 <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
 80896c4:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
 80896c6:	4604      	mov	r4, r0
 80896c8:	2800      	cmp	r0, #0
 80896ca:	d048      	beq.n	808975e <mbedtls_ssl_free+0x9a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
 80896cc:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 80896d0:	b138      	cbz	r0, 80896e2 <mbedtls_ssl_free+0x1e>
    {
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 80896d2:	f242 114d 	movw	r1, #8525	; 0x214d
 80896d6:	f7fe fc73 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->out_buf );
 80896da:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80896de:	f005 fe41 	bl	808f364 <free>
    }

    if( ssl->in_buf != NULL )
 80896e2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80896e4:	b130      	cbz	r0, 80896f4 <mbedtls_ssl_free+0x30>
    {
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 80896e6:	f242 114d 	movw	r1, #8525	; 0x214d
 80896ea:	f7fe fc69 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->in_buf );
 80896ee:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80896f0:	f005 fe38 	bl	808f364 <free>
        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
 80896f4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80896f6:	b120      	cbz	r0, 8089702 <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 80896f8:	f7ff febc 	bl	8089474 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 80896fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80896fe:	f005 fe31 	bl	808f364 <free>
    }

    if( ssl->handshake )
 8089702:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8089704:	b180      	cbz	r0, 8089728 <mbedtls_ssl_free+0x64>
    {
        mbedtls_ssl_handshake_free( ssl->handshake );
 8089706:	f7ff fece 	bl	80894a6 <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 808970a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808970c:	f7ff feb2 	bl	8089474 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 8089710:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8089712:	f7ff fee1 	bl	80894d8 <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
 8089716:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8089718:	f005 fe24 	bl	808f364 <free>
        mbedtls_free( ssl->transform_negotiate );
 808971c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808971e:	f005 fe21 	bl	808f364 <free>
        mbedtls_free( ssl->session_negotiate );
 8089722:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8089724:	f005 fe1e 	bl	808f364 <free>
    }

    if( ssl->session )
 8089728:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808972a:	b120      	cbz	r0, 8089736 <mbedtls_ssl_free+0x72>
    {
        mbedtls_ssl_session_free( ssl->session );
 808972c:	f7ff fed4 	bl	80894d8 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 8089730:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8089732:	f005 fe17 	bl	808f364 <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
 8089736:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 808973a:	b155      	cbz	r5, 8089752 <mbedtls_ssl_free+0x8e>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 808973c:	4628      	mov	r0, r5
 808973e:	f006 ff9e 	bl	809067e <strlen>
 8089742:	4601      	mov	r1, r0
 8089744:	4628      	mov	r0, r5
 8089746:	f7fe fc3b 	bl	8087fc0 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 808974a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 808974e:	f005 fe09 	bl	808f364 <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 8089752:	4620      	mov	r0, r4
}
 8089754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 8089758:	21b4      	movs	r1, #180	; 0xb4
 808975a:	f7fe bc31 	b.w	8087fc0 <_ZL15mbedtls_zeroizePvj>
 808975e:	bd38      	pop	{r3, r4, r5, pc}

08089760 <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 8089760:	2264      	movs	r2, #100	; 0x64
 8089762:	2100      	movs	r1, #0
 8089764:	f006 bf6b 	b.w	809063e <memset>

08089768 <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
 8089768:	b510      	push	{r4, lr}
 808976a:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
 808976c:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8089770:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
 8089774:	f362 0041 	bfi	r0, r2, #1, #1
 8089778:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 808977c:	b951      	cbnz	r1, 8089794 <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 808977e:	2102      	movs	r1, #2
 8089780:	b2c2      	uxtb	r2, r0
 8089782:	f361 0283 	bfi	r2, r1, #2, #2
 8089786:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
 808978a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 808978e:	430a      	orrs	r2, r1
 8089790:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 8089794:	2b02      	cmp	r3, #2
 8089796:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 808979a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 808979e:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 80897a2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 80897a6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 80897aa:	d108      	bne.n	80897be <mbedtls_ssl_config_defaults+0x56>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
 80897ac:	4b0a      	ldr	r3, [pc, #40]	; (80897d8 <mbedtls_ssl_config_defaults+0x70>)
 80897ae:	60e3      	str	r3, [r4, #12]
 80897b0:	60a3      	str	r3, [r4, #8]
 80897b2:	6063      	str	r3, [r4, #4]
 80897b4:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 80897b6:	4b09      	ldr	r3, [pc, #36]	; (80897dc <mbedtls_ssl_config_defaults+0x74>)
 80897b8:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 80897ba:	4b09      	ldr	r3, [pc, #36]	; (80897e0 <mbedtls_ssl_config_defaults+0x78>)
 80897bc:	e008      	b.n	80897d0 <mbedtls_ssl_config_defaults+0x68>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 80897be:	f7fb fc33 	bl	8085028 <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 80897c2:	4b08      	ldr	r3, [pc, #32]	; (80897e4 <mbedtls_ssl_config_defaults+0x7c>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 80897c4:	60e0      	str	r0, [r4, #12]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 80897c6:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 80897c8:	4b07      	ldr	r3, [pc, #28]	; (80897e8 <mbedtls_ssl_config_defaults+0x80>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 80897ca:	60a0      	str	r0, [r4, #8]
 80897cc:	6060      	str	r0, [r4, #4]
 80897ce:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 80897d0:	6563      	str	r3, [r4, #84]	; 0x54
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
 80897d2:	2000      	movs	r0, #0
 80897d4:	bd10      	pop	{r4, pc}
 80897d6:	bf00      	nop
 80897d8:	20000400 	.word	0x20000400
 80897dc:	080926cc 	.word	0x080926cc
 80897e0:	20000424 	.word	0x20000424
 80897e4:	08091fbc 	.word	0x08091fbc
 80897e8:	2000040c 	.word	0x2000040c

080897ec <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
 80897ec:	b538      	push	{r3, r4, r5, lr}
 80897ee:	4604      	mov	r4, r0
        conf->psk_identity_len = 0;
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
 80897f0:	6c80      	ldr	r0, [r0, #72]	; 0x48
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
 80897f2:	b120      	cbz	r0, 80897fe <mbedtls_ssl_config_free+0x12>
    {
        next = cur->next;
 80897f4:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 80897f6:	f005 fdb5 	bl	808f364 <free>
        cur = next;
 80897fa:	4628      	mov	r0, r5
 80897fc:	e7f9      	b.n	80897f2 <mbedtls_ssl_config_free+0x6>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 80897fe:	4620      	mov	r0, r4
}
 8089800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 8089804:	2164      	movs	r1, #100	; 0x64
 8089806:	f7fe bbdb 	b.w	8087fc0 <_ZL15mbedtls_zeroizePvj>

0808980a <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 808980a:	b508      	push	{r3, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 808980c:	2101      	movs	r1, #1
 808980e:	f001 fdc9 	bl	808b3a4 <mbedtls_pk_can_do>
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
 8089812:	3000      	adds	r0, #0
 8089814:	bf18      	it	ne
 8089816:	2001      	movne	r0, #1
 8089818:	bd08      	pop	{r3, pc}
	...

0808981c <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 808981c:	3804      	subs	r0, #4
 808981e:	2804      	cmp	r0, #4
 8089820:	bf9a      	itte	ls
 8089822:	4b02      	ldrls	r3, [pc, #8]	; (808982c <mbedtls_ssl_hash_from_md_alg+0x10>)
 8089824:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
 8089826:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
 8089828:	4770      	bx	lr
 808982a:	bf00      	nop
 808982c:	080926dc 	.word	0x080926dc

08089830 <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 8089830:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 8089832:	b510      	push	{r4, lr}
 8089834:	461c      	mov	r4, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 8089836:	d10f      	bne.n	8089858 <mbedtls_ssl_check_cert_usage+0x28>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
 8089838:	7a8b      	ldrb	r3, [r1, #10]
 808983a:	2b0a      	cmp	r3, #10
 808983c:	d80e      	bhi.n	808985c <mbedtls_ssl_check_cert_usage+0x2c>
 808983e:	409a      	lsls	r2, r3
 8089840:	f012 0f82 	tst.w	r2, #130	; 0x82
 8089844:	d10c      	bne.n	8089860 <mbedtls_ssl_check_cert_usage+0x30>
 8089846:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 808984a:	d10b      	bne.n	8089864 <mbedtls_ssl_check_cert_usage+0x34>
 808984c:	f012 0f1c 	tst.w	r2, #28
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 8089850:	bf14      	ite	ne
 8089852:	2180      	movne	r1, #128	; 0x80
 8089854:	2100      	moveq	r1, #0
 8089856:	e006      	b.n	8089866 <mbedtls_ssl_check_cert_usage+0x36>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 8089858:	2180      	movs	r1, #128	; 0x80
 808985a:	e004      	b.n	8089866 <mbedtls_ssl_check_cert_usage+0x36>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 808985c:	2100      	movs	r1, #0
 808985e:	e002      	b.n	8089866 <mbedtls_ssl_check_cert_usage+0x36>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
 8089860:	2120      	movs	r1, #32
 8089862:	e000      	b.n	8089866 <mbedtls_ssl_check_cert_usage+0x36>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 8089864:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 8089866:	f7fd fbc5 	bl	8086ff4 <mbedtls_x509_crt_check_key_usage>
 808986a:	b128      	cbz	r0, 8089878 <mbedtls_ssl_check_cert_usage+0x48>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 808986c:	6822      	ldr	r2, [r4, #0]
        ret = -1;
 808986e:	f04f 30ff 	mov.w	r0, #4294967295
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 8089872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8089876:	6022      	str	r2, [r4, #0]
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
 8089878:	bd10      	pop	{r4, pc}
	...

0808987c <mbedtls_ssl_parse_certificate>:

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808987c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 8089880:	6c03      	ldr	r3, [r0, #64]	; 0x40

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 8089882:	b085      	sub	sp, #20
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 8089884:	f8d3 8000 	ldr.w	r8, [r3]

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 8089888:	4605      	mov	r5, r0
    int authmode = ssl->conf->authmode;
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808988a:	f898 200a 	ldrb.w	r2, [r8, #10]
 808988e:	2a0b      	cmp	r2, #11
 8089890:	d80b      	bhi.n	80898aa <mbedtls_ssl_parse_certificate+0x2e>
 8089892:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8089896:	40d3      	lsrs	r3, r2
 8089898:	f003 0301 	and.w	r3, r3, #1
 808989c:	f083 0001 	eor.w	r0, r3, #1
 80898a0:	b11b      	cbz	r3, 80898aa <mbedtls_ssl_parse_certificate+0x2e>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        ssl->state++;
 80898a2:	686b      	ldr	r3, [r5, #4]
 80898a4:	3301      	adds	r3, #1
 80898a6:	606b      	str	r3, [r5, #4]
        return( 0 );
 80898a8:	e0e0      	b.n	8089a6c <mbedtls_ssl_parse_certificate+0x1f0>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 80898aa:	682b      	ldr	r3, [r5, #0]
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80898ac:	4628      	mov	r0, r5
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 80898ae:	f893 7060 	ldrb.w	r7, [r3, #96]	; 0x60
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80898b2:	f7ff fb01 	bl	8088eb8 <mbedtls_ssl_read_record>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 80898b6:	f3c7 0781 	ubfx	r7, r7, #2, #2
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80898ba:	4604      	mov	r4, r0
 80898bc:	bb80      	cbnz	r0, 8089920 <mbedtls_ssl_parse_certificate+0xa4>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    ssl->state++;
 80898be:	686b      	ldr	r3, [r5, #4]
 80898c0:	3301      	adds	r3, #1
 80898c2:	606b      	str	r3, [r5, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80898c4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80898c6:	2b16      	cmp	r3, #22
 80898c8:	d006      	beq.n	80898d8 <mbedtls_ssl_parse_certificate+0x5c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80898ca:	220a      	movs	r2, #10
 80898cc:	2102      	movs	r1, #2
 80898ce:	4628      	mov	r0, r5
 80898d0:	f7ff f8a4 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80898d4:	4867      	ldr	r0, [pc, #412]	; (8089a74 <mbedtls_ssl_parse_certificate+0x1f8>)
 80898d6:	e0c9      	b.n	8089a6c <mbedtls_ssl_parse_certificate+0x1f0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 80898d8:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80898da:	7813      	ldrb	r3, [r2, #0]
 80898dc:	2b0b      	cmp	r3, #11
 80898de:	d10b      	bne.n	80898f8 <mbedtls_ssl_parse_certificate+0x7c>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 80898e0:	6fa9      	ldr	r1, [r5, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 80898e2:	2909      	cmp	r1, #9
 80898e4:	d908      	bls.n	80898f8 <mbedtls_ssl_parse_certificate+0x7c>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
 80898e6:	7913      	ldrb	r3, [r2, #4]
 80898e8:	b933      	cbnz	r3, 80898f8 <mbedtls_ssl_parse_certificate+0x7c>
 80898ea:	7950      	ldrb	r0, [r2, #5]
 80898ec:	7993      	ldrb	r3, [r2, #6]
 80898ee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80898f2:	3307      	adds	r3, #7
 80898f4:	4299      	cmp	r1, r3
 80898f6:	d015      	beq.n	8089924 <mbedtls_ssl_parse_certificate+0xa8>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80898f8:	2232      	movs	r2, #50	; 0x32
 80898fa:	2102      	movs	r1, #2
 80898fc:	4628      	mov	r0, r5
 80898fe:	f7ff f88d 	bl	8088a1c <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8089902:	485d      	ldr	r0, [pc, #372]	; (8089a78 <mbedtls_ssl_parse_certificate+0x1fc>)
 8089904:	e0b2      	b.n	8089a6c <mbedtls_ssl_parse_certificate+0x1f0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 8089906:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 8089908:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8089a84 <mbedtls_ssl_parse_certificate+0x208>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 808990c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808990e:	f7fd ff47 	bl	80877a0 <mbedtls_x509_crt_init>

    i += 3;
 8089912:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
 8089914:	f8d5 e078 	ldr.w	lr, [r5, #120]	; 0x78
 8089918:	4576      	cmp	r6, lr
 808991a:	d31c      	bcc.n	8089956 <mbedtls_ssl_parse_certificate+0xda>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 808991c:	2f00      	cmp	r7, #0
 808991e:	d13f      	bne.n	80899a0 <mbedtls_ssl_parse_certificate+0x124>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 8089920:	4620      	mov	r0, r4
 8089922:	e0a3      	b.n	8089a6c <mbedtls_ssl_parse_certificate+0x1f0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 8089924:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8089926:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8089928:	b128      	cbz	r0, 8089936 <mbedtls_ssl_parse_certificate+0xba>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 808992a:	f7fd ff3e 	bl	80877aa <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 808992e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8089930:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8089932:	f005 fd17 	bl	808f364 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
 8089936:	f44f 719a 	mov.w	r1, #308	; 0x134
 808993a:	2001      	movs	r0, #1
 808993c:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 808993e:	f006 fe33 	bl	80905a8 <calloc>
 8089942:	65f0      	str	r0, [r6, #92]	; 0x5c
 8089944:	2800      	cmp	r0, #0
 8089946:	d1de      	bne.n	8089906 <mbedtls_ssl_parse_certificate+0x8a>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 8089948:	2250      	movs	r2, #80	; 0x50
 808994a:	2102      	movs	r1, #2
 808994c:	4628      	mov	r0, r5
 808994e:	f7ff f865 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8089952:	484a      	ldr	r0, [pc, #296]	; (8089a7c <mbedtls_ssl_parse_certificate+0x200>)
 8089954:	e08a      	b.n	8089a6c <mbedtls_ssl_parse_certificate+0x1f0>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
 8089956:	1cf1      	adds	r1, r6, #3
 8089958:	458e      	cmp	lr, r1
 808995a:	d3cd      	bcc.n	80898f8 <mbedtls_ssl_parse_certificate+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
 808995c:	6e68      	ldr	r0, [r5, #100]	; 0x64
 808995e:	5d83      	ldrb	r3, [r0, r6]
 8089960:	2b00      	cmp	r3, #0
 8089962:	d1c9      	bne.n	80898f8 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 8089964:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
 8089966:	7872      	ldrb	r2, [r6, #1]
 8089968:	78b3      	ldrb	r3, [r6, #2]
 808996a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
 808996e:	2a7f      	cmp	r2, #127	; 0x7f
 8089970:	d9c2      	bls.n	80898f8 <mbedtls_ssl_parse_certificate+0x7c>
 8089972:	188e      	adds	r6, r1, r2
 8089974:	45b6      	cmp	lr, r6
 8089976:	d3bf      	bcc.n	80898f8 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 8089978:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                                  ssl->in_msg + i, n );
 808997a:	4401      	add	r1, r0
 808997c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808997e:	f7fd ff6d 	bl	808785c <mbedtls_x509_crt_parse_der>
        switch( ret )
 8089982:	4548      	cmp	r0, r9
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
 8089984:	4604      	mov	r4, r0
        switch( ret )
 8089986:	d0c5      	beq.n	8089914 <mbedtls_ssl_parse_certificate+0x98>
 8089988:	dc04      	bgt.n	8089994 <mbedtls_ssl_parse_certificate+0x118>
 808998a:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 808998e:	d158      	bne.n	8089a42 <mbedtls_ssl_parse_certificate+0x1c6>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 8089990:	2250      	movs	r2, #80	; 0x50
 8089992:	e05d      	b.n	8089a50 <mbedtls_ssl_parse_certificate+0x1d4>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 8089994:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 8089998:	d055      	beq.n	8089a46 <mbedtls_ssl_parse_certificate+0x1ca>
 808999a:	2800      	cmp	r0, #0
 808999c:	d0ba      	beq.n	8089914 <mbedtls_ssl_parse_certificate+0x98>
 808999e:	e050      	b.n	8089a42 <mbedtls_ssl_parse_certificate+0x1c6>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
 80899a0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80899a2:	682b      	ldr	r3, [r5, #0]
 80899a4:	6916      	ldr	r6, [r2, #16]
 80899a6:	b10e      	cbz	r6, 80899ac <mbedtls_ssl_parse_certificate+0x130>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
 80899a8:	6952      	ldr	r2, [r2, #20]
 80899aa:	e001      	b.n	80899b0 <mbedtls_ssl_parse_certificate+0x134>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 80899ac:	6cde      	ldr	r6, [r3, #76]	; 0x4c
            ca_crl   = ssl->conf->ca_crl;
 80899ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80899b0:	6b99      	ldr	r1, [r3, #56]	; 0x38

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
                                ssl->session_negotiate->peer_cert,
 80899b2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80899b4:	9103      	str	r1, [sp, #12]
 80899b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80899b8:	9102      	str	r1, [sp, #8]
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
 80899ba:	f100 0160 	add.w	r1, r0, #96	; 0x60
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80899be:	9101      	str	r1, [sp, #4]
 80899c0:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 80899c4:	9100      	str	r1, [sp, #0]
 80899c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80899c8:	4631      	mov	r1, r6
 80899ca:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80899cc:	f7fd fe06 	bl	80875dc <mbedtls_x509_crt_verify_with_profile>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 80899d0:	682b      	ldr	r3, [r5, #0]
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80899d2:	4604      	mov	r4, r0
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 80899d4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80899d8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80899da:	f002 0201 	and.w	r2, r2, #1
 80899de:	f100 0360 	add.w	r3, r0, #96	; 0x60
 80899e2:	f082 0201 	eor.w	r2, r2, #1
 80899e6:	4641      	mov	r1, r8
 80899e8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80899ea:	f7ff ff21 	bl	8089830 <mbedtls_ssl_check_cert_usage>
 80899ee:	b100      	cbz	r0, 80899f2 <mbedtls_ssl_parse_certificate+0x176>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
 80899f0:	b174      	cbz	r4, 8089a10 <mbedtls_ssl_parse_certificate+0x194>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 80899f2:	2f01      	cmp	r7, #1
 80899f4:	d105      	bne.n	8089a02 <mbedtls_ssl_parse_certificate+0x186>
 80899f6:	f514 5f1c 	cmn.w	r4, #9984	; 0x2700
 80899fa:	d02e      	beq.n	8089a5a <mbedtls_ssl_parse_certificate+0x1de>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 80899fc:	f514 4ff4 	cmn.w	r4, #31232	; 0x7a00
 8089a00:	d02b      	beq.n	8089a5a <mbedtls_ssl_parse_certificate+0x1de>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 8089a02:	b90e      	cbnz	r6, 8089a08 <mbedtls_ssl_parse_certificate+0x18c>
 8089a04:	2f02      	cmp	r7, #2
 8089a06:	d001      	beq.n	8089a0c <mbedtls_ssl_parse_certificate+0x190>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
 8089a08:	b934      	cbnz	r4, 8089a18 <mbedtls_ssl_parse_certificate+0x19c>
 8089a0a:	e789      	b.n	8089920 <mbedtls_ssl_parse_certificate+0xa4>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 8089a0c:	4c1c      	ldr	r4, [pc, #112]	; (8089a80 <mbedtls_ssl_parse_certificate+0x204>)
 8089a0e:	e003      	b.n	8089a18 <mbedtls_ssl_parse_certificate+0x19c>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 8089a10:	2f01      	cmp	r7, #1
 8089a12:	d085      	beq.n	8089920 <mbedtls_ssl_parse_certificate+0xa4>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 8089a14:	b31e      	cbz	r6, 8089a5e <mbedtls_ssl_parse_certificate+0x1e2>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 8089a16:	4c18      	ldr	r4, [pc, #96]	; (8089a78 <mbedtls_ssl_parse_certificate+0x1fc>)
        if( ret != 0 )
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 8089a18:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8089a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8089a1c:	05df      	lsls	r7, r3, #23
 8089a1e:	d40e      	bmi.n	8089a3e <mbedtls_ssl_parse_certificate+0x1c2>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 8089a20:	075e      	lsls	r6, r3, #29
 8089a22:	d40e      	bmi.n	8089a42 <mbedtls_ssl_parse_certificate+0x1c6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 8089a24:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 8089a28:	d10d      	bne.n	8089a46 <mbedtls_ssl_parse_certificate+0x1ca>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 8089a2a:	07d8      	lsls	r0, r3, #31
 8089a2c:	d40d      	bmi.n	8089a4a <mbedtls_ssl_parse_certificate+0x1ce>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 8089a2e:	0799      	lsls	r1, r3, #30
 8089a30:	d40d      	bmi.n	8089a4e <mbedtls_ssl_parse_certificate+0x1d2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 8089a32:	f013 0f08 	tst.w	r3, #8
 8089a36:	bf14      	ite	ne
 8089a38:	2230      	movne	r2, #48	; 0x30
 8089a3a:	222e      	moveq	r2, #46	; 0x2e
 8089a3c:	e008      	b.n	8089a50 <mbedtls_ssl_parse_certificate+0x1d4>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 8089a3e:	2231      	movs	r2, #49	; 0x31
 8089a40:	e006      	b.n	8089a50 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 8089a42:	222a      	movs	r2, #42	; 0x2a
 8089a44:	e004      	b.n	8089a50 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 8089a46:	222b      	movs	r2, #43	; 0x2b
 8089a48:	e002      	b.n	8089a50 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 8089a4a:	222d      	movs	r2, #45	; 0x2d
 8089a4c:	e000      	b.n	8089a50 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 8089a4e:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
 8089a50:	2102      	movs	r1, #2
 8089a52:	4628      	mov	r0, r5
 8089a54:	f7fe ffe2 	bl	8088a1c <mbedtls_ssl_send_alert_message>
 8089a58:	e762      	b.n	8089920 <mbedtls_ssl_parse_certificate+0xa4>
 8089a5a:	2000      	movs	r0, #0
 8089a5c:	e006      	b.n	8089a6c <mbedtls_ssl_parse_certificate+0x1f0>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 8089a5e:	4b08      	ldr	r3, [pc, #32]	; (8089a80 <mbedtls_ssl_parse_certificate+0x204>)
 8089a60:	4805      	ldr	r0, [pc, #20]	; (8089a78 <mbedtls_ssl_parse_certificate+0x1fc>)
 8089a62:	2f02      	cmp	r7, #2
 8089a64:	bf14      	ite	ne
 8089a66:	4604      	movne	r4, r0
 8089a68:	461c      	moveq	r4, r3
 8089a6a:	e7d5      	b.n	8089a18 <mbedtls_ssl_parse_certificate+0x19c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
 8089a6c:	b005      	add	sp, #20
 8089a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8089a72:	bf00      	nop
 8089a74:	ffff8900 	.word	0xffff8900
 8089a78:	ffff8600 	.word	0xffff8600
 8089a7c:	ffff8100 	.word	0xffff8100
 8089a80:	ffff8980 	.word	0xffff8980
 8089a84:	ffffd9d2 	.word	0xffffd9d2

08089a88 <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089a88:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 8089a8a:	7059      	strb	r1, [r3, #1]
 8089a8c:	4770      	bx	lr

08089a8e <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 8089a8e:	781a      	ldrb	r2, [r3, #0]
 8089a90:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 8089a92:	785b      	ldrb	r3, [r3, #1]
 8089a94:	600b      	str	r3, [r1, #0]
 8089a96:	4770      	bx	lr

08089a98 <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 8089a98:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 8089a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089a9c:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 8089a9e:	461c      	mov	r4, r3
 8089aa0:	4284      	cmp	r4, r0
 8089aa2:	d016      	beq.n	8089ad2 <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
 8089aa4:	f8d6 e000 	ldr.w	lr, [r6]
 8089aa8:	ebc3 050e 	rsb	r5, r3, lr
 8089aac:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 8089aae:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 8089ab2:	3401      	adds	r4, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
 8089ab4:	42bd      	cmp	r5, r7
 8089ab6:	bf2c      	ite	cs
 8089ab8:	f04f 0c00 	movcs.w	ip, #0
 8089abc:	f04f 0c01 	movcc.w	ip, #1
 8089ac0:	1bed      	subs	r5, r5, r7
 8089ac2:	4573      	cmp	r3, lr
 8089ac4:	bf94      	ite	ls
 8089ac6:	4663      	movls	r3, ip
 8089ac8:	f10c 0301 	addhi.w	r3, ip, #1
 8089acc:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 8089ad0:	e7e6      	b.n	8089aa0 <_ZL11mpi_sub_hlpjPmS_+0x8>
 8089ad2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 8089ad6:	b143      	cbz	r3, 8089aea <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
 8089ad8:	6811      	ldr	r1, [r2, #0]
 8089ada:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 8089adc:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
 8089ade:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 8089ae2:	bf94      	ite	ls
 8089ae4:	2300      	movls	r3, #0
 8089ae6:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 8089ae8:	e7f5      	b.n	8089ad6 <_ZL11mpi_sub_hlpjPmS_+0x3e>
 8089aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08089aec <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 8089aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8089af0:	460d      	mov	r5, r1
 8089af2:	4614      	mov	r4, r2
 8089af4:	4686      	mov	lr, r0
    mbedtls_mpi_uint c = 0, t = 0;
 8089af6:	f04f 0c00 	mov.w	ip, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8089afa:	f1be 0f0f 	cmp.w	lr, #15
 8089afe:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8089b02:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8089b06:	f240 811e 	bls.w	8089d46 <_ZL11mpi_mul_hlpjPmS_m+0x25a>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 8089b0a:	f855 6c40 	ldr.w	r6, [r5, #-64]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8089b0e:	f1ae 0e10 	sub.w	lr, lr, #16
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 8089b12:	fba6 9a03 	umull	r9, sl, r6, r3
 8089b16:	f854 6c40 	ldr.w	r6, [r4, #-64]
 8089b1a:	eb1c 0c09 	adds.w	ip, ip, r9
 8089b1e:	bf2c      	ite	cs
 8089b20:	f04f 0801 	movcs.w	r8, #1
 8089b24:	f04f 0800 	movcc.w	r8, #0
 8089b28:	eb1c 0606 	adds.w	r6, ip, r6
 8089b2c:	f844 6c40 	str.w	r6, [r4, #-64]
 8089b30:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 8089b34:	eb48 080a 	adc.w	r8, r8, sl
 8089b38:	fba3 9a06 	umull	r9, sl, r3, r6
 8089b3c:	f854 6c3c 	ldr.w	r6, [r4, #-60]
 8089b40:	eb18 0809 	adds.w	r8, r8, r9
 8089b44:	bf2c      	ite	cs
 8089b46:	f04f 0c01 	movcs.w	ip, #1
 8089b4a:	f04f 0c00 	movcc.w	ip, #0
 8089b4e:	eb18 0606 	adds.w	r6, r8, r6
 8089b52:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
 8089b56:	f855 7c38 	ldr.w	r7, [r5, #-56]
 8089b5a:	f854 6c38 	ldr.w	r6, [r4, #-56]
 8089b5e:	fba3 8907 	umull	r8, r9, r3, r7
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 8089b62:	eb4c 0c0a 	adc.w	ip, ip, sl
        MULADDC_CORE   MULADDC_CORE
 8089b66:	eb1c 0c08 	adds.w	ip, ip, r8
 8089b6a:	bf2c      	ite	cs
 8089b6c:	2701      	movcs	r7, #1
 8089b6e:	2700      	movcc	r7, #0
 8089b70:	eb1c 0606 	adds.w	r6, ip, r6
 8089b74:	f844 6c38 	str.w	r6, [r4, #-56]
 8089b78:	f855 6c34 	ldr.w	r6, [r5, #-52]
 8089b7c:	eb47 0709 	adc.w	r7, r7, r9
 8089b80:	fba3 8906 	umull	r8, r9, r3, r6
 8089b84:	f854 6c34 	ldr.w	r6, [r4, #-52]
 8089b88:	eb17 0708 	adds.w	r7, r7, r8
 8089b8c:	bf2c      	ite	cs
 8089b8e:	f04f 0c01 	movcs.w	ip, #1
 8089b92:	f04f 0c00 	movcc.w	ip, #0
 8089b96:	19be      	adds	r6, r7, r6
 8089b98:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
 8089b9c:	f855 7c30 	ldr.w	r7, [r5, #-48]
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 8089ba0:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 8089ba4:	fba3 8907 	umull	r8, r9, r3, r7
 8089ba8:	f854 6c30 	ldr.w	r6, [r4, #-48]
 8089bac:	eb1c 0c08 	adds.w	ip, ip, r8
 8089bb0:	bf2c      	ite	cs
 8089bb2:	2701      	movcs	r7, #1
 8089bb4:	2700      	movcc	r7, #0
 8089bb6:	eb1c 0606 	adds.w	r6, ip, r6
 8089bba:	f844 6c30 	str.w	r6, [r4, #-48]
 8089bbe:	f855 6c2c 	ldr.w	r6, [r5, #-44]
 8089bc2:	eb47 0709 	adc.w	r7, r7, r9
 8089bc6:	fba3 8906 	umull	r8, r9, r3, r6
 8089bca:	f854 6c2c 	ldr.w	r6, [r4, #-44]
 8089bce:	eb17 0708 	adds.w	r7, r7, r8
 8089bd2:	bf2c      	ite	cs
 8089bd4:	f04f 0c01 	movcs.w	ip, #1
 8089bd8:	f04f 0c00 	movcc.w	ip, #0
 8089bdc:	19be      	adds	r6, r7, r6
 8089bde:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
 8089be2:	f855 7c28 	ldr.w	r7, [r5, #-40]
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 8089be6:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 8089bea:	fba3 8907 	umull	r8, r9, r3, r7
 8089bee:	f854 6c28 	ldr.w	r6, [r4, #-40]
 8089bf2:	eb1c 0c08 	adds.w	ip, ip, r8
 8089bf6:	bf2c      	ite	cs
 8089bf8:	2701      	movcs	r7, #1
 8089bfa:	2700      	movcc	r7, #0
 8089bfc:	eb1c 0606 	adds.w	r6, ip, r6
 8089c00:	f844 6c28 	str.w	r6, [r4, #-40]
 8089c04:	f855 6c24 	ldr.w	r6, [r5, #-36]
 8089c08:	eb47 0709 	adc.w	r7, r7, r9
 8089c0c:	fba3 8906 	umull	r8, r9, r3, r6
 8089c10:	f854 6c24 	ldr.w	r6, [r4, #-36]
 8089c14:	eb17 0708 	adds.w	r7, r7, r8
 8089c18:	bf2c      	ite	cs
 8089c1a:	f04f 0c01 	movcs.w	ip, #1
 8089c1e:	f04f 0c00 	movcc.w	ip, #0
 8089c22:	19be      	adds	r6, r7, r6
 8089c24:	f844 6c24 	str.w	r6, [r4, #-36]

        MULADDC_CORE   MULADDC_CORE
 8089c28:	f855 7c20 	ldr.w	r7, [r5, #-32]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 8089c2c:	eb4c 0c09 	adc.w	ip, ip, r9

        MULADDC_CORE   MULADDC_CORE
 8089c30:	fba3 8907 	umull	r8, r9, r3, r7
 8089c34:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8089c38:	eb1c 0c08 	adds.w	ip, ip, r8
 8089c3c:	bf2c      	ite	cs
 8089c3e:	2701      	movcs	r7, #1
 8089c40:	2700      	movcc	r7, #0
 8089c42:	eb1c 0606 	adds.w	r6, ip, r6
 8089c46:	f844 6c20 	str.w	r6, [r4, #-32]
 8089c4a:	f855 6c1c 	ldr.w	r6, [r5, #-28]
 8089c4e:	eb47 0709 	adc.w	r7, r7, r9
 8089c52:	fba3 8906 	umull	r8, r9, r3, r6
 8089c56:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 8089c5a:	eb17 0708 	adds.w	r7, r7, r8
 8089c5e:	bf2c      	ite	cs
 8089c60:	f04f 0c01 	movcs.w	ip, #1
 8089c64:	f04f 0c00 	movcc.w	ip, #0
 8089c68:	19be      	adds	r6, r7, r6
 8089c6a:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
 8089c6e:	f855 7c18 	ldr.w	r7, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 8089c72:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 8089c76:	fba3 8907 	umull	r8, r9, r3, r7
 8089c7a:	f854 6c18 	ldr.w	r6, [r4, #-24]
 8089c7e:	eb1c 0c08 	adds.w	ip, ip, r8
 8089c82:	bf2c      	ite	cs
 8089c84:	2701      	movcs	r7, #1
 8089c86:	2700      	movcc	r7, #0
 8089c88:	eb1c 0606 	adds.w	r6, ip, r6
 8089c8c:	f844 6c18 	str.w	r6, [r4, #-24]
 8089c90:	f855 6c14 	ldr.w	r6, [r5, #-20]
 8089c94:	eb47 0709 	adc.w	r7, r7, r9
 8089c98:	fba3 8906 	umull	r8, r9, r3, r6
 8089c9c:	f854 6c14 	ldr.w	r6, [r4, #-20]
 8089ca0:	eb17 0708 	adds.w	r7, r7, r8
 8089ca4:	bf2c      	ite	cs
 8089ca6:	f04f 0c01 	movcs.w	ip, #1
 8089caa:	f04f 0c00 	movcc.w	ip, #0
 8089cae:	19be      	adds	r6, r7, r6
 8089cb0:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
 8089cb4:	f855 7c10 	ldr.w	r7, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 8089cb8:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 8089cbc:	fba3 8907 	umull	r8, r9, r3, r7
 8089cc0:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8089cc4:	eb1c 0c08 	adds.w	ip, ip, r8
 8089cc8:	bf2c      	ite	cs
 8089cca:	2701      	movcs	r7, #1
 8089ccc:	2700      	movcc	r7, #0
 8089cce:	eb1c 0606 	adds.w	r6, ip, r6
 8089cd2:	f844 6c10 	str.w	r6, [r4, #-16]
 8089cd6:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 8089cda:	eb47 0709 	adc.w	r7, r7, r9
 8089cde:	fba3 8906 	umull	r8, r9, r3, r6
 8089ce2:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8089ce6:	eb17 0708 	adds.w	r7, r7, r8
 8089cea:	bf2c      	ite	cs
 8089cec:	f04f 0c01 	movcs.w	ip, #1
 8089cf0:	f04f 0c00 	movcc.w	ip, #0
 8089cf4:	19be      	adds	r6, r7, r6
 8089cf6:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
 8089cfa:	f855 7c08 	ldr.w	r7, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 8089cfe:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 8089d02:	fba3 8907 	umull	r8, r9, r3, r7
 8089d06:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8089d0a:	eb1c 0c08 	adds.w	ip, ip, r8
 8089d0e:	bf2c      	ite	cs
 8089d10:	2701      	movcs	r7, #1
 8089d12:	2700      	movcc	r7, #0
 8089d14:	eb1c 0606 	adds.w	r6, ip, r6
 8089d18:	f844 6c08 	str.w	r6, [r4, #-8]
 8089d1c:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8089d20:	eb47 0709 	adc.w	r7, r7, r9
 8089d24:	fba3 8906 	umull	r8, r9, r3, r6
 8089d28:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8089d2c:	eb17 0708 	adds.w	r7, r7, r8
 8089d30:	bf2c      	ite	cs
 8089d32:	f04f 0c01 	movcs.w	ip, #1
 8089d36:	f04f 0c00 	movcc.w	ip, #0
 8089d3a:	19be      	adds	r6, r7, r6
 8089d3c:	eb4c 0c09 	adc.w	ip, ip, r9
 8089d40:	f844 6c04 	str.w	r6, [r4, #-4]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8089d44:	e6d9      	b.n	8089afa <_ZL11mpi_mul_hlpjPmS_m+0xe>
 8089d46:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 8089d4a:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 8089d4e:	2807      	cmp	r0, #7
 8089d50:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 8089d54:	eb01 050e 	add.w	r5, r1, lr
 8089d58:	eb02 040e 	add.w	r4, r2, lr
 8089d5c:	d966      	bls.n	8089e2c <_ZL11mpi_mul_hlpjPmS_m+0x340>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 8089d5e:	f851 600e 	ldr.w	r6, [r1, lr]
 8089d62:	fba6 7803 	umull	r7, r8, r6, r3
 8089d66:	f852 600e 	ldr.w	r6, [r2, lr]
 8089d6a:	eb1c 0c07 	adds.w	ip, ip, r7
 8089d6e:	bf2c      	ite	cs
 8089d70:	2101      	movcs	r1, #1
 8089d72:	2100      	movcc	r1, #0
 8089d74:	eb1c 0606 	adds.w	r6, ip, r6
 8089d78:	f842 600e 	str.w	r6, [r2, lr]
 8089d7c:	686e      	ldr	r6, [r5, #4]
 8089d7e:	eb41 0108 	adc.w	r1, r1, r8
 8089d82:	fba3 7806 	umull	r7, r8, r3, r6
 8089d86:	6866      	ldr	r6, [r4, #4]
 8089d88:	19ca      	adds	r2, r1, r7
 8089d8a:	bf2c      	ite	cs
 8089d8c:	2101      	movcs	r1, #1
 8089d8e:	2100      	movcc	r1, #0
 8089d90:	1992      	adds	r2, r2, r6
 8089d92:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 8089d94:	68ae      	ldr	r6, [r5, #8]
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 8089d96:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 8089d9a:	fba3 7806 	umull	r7, r8, r3, r6
 8089d9e:	68a6      	ldr	r6, [r4, #8]
 8089da0:	19c9      	adds	r1, r1, r7
 8089da2:	bf2c      	ite	cs
 8089da4:	2201      	movcs	r2, #1
 8089da6:	2200      	movcc	r2, #0
 8089da8:	1989      	adds	r1, r1, r6
 8089daa:	60a1      	str	r1, [r4, #8]
 8089dac:	68ee      	ldr	r6, [r5, #12]
 8089dae:	eb42 0208 	adc.w	r2, r2, r8
 8089db2:	fba3 7806 	umull	r7, r8, r3, r6
 8089db6:	68e6      	ldr	r6, [r4, #12]
 8089db8:	19d2      	adds	r2, r2, r7
 8089dba:	bf2c      	ite	cs
 8089dbc:	2101      	movcs	r1, #1
 8089dbe:	2100      	movcc	r1, #0
 8089dc0:	1992      	adds	r2, r2, r6
 8089dc2:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 8089dc4:	692e      	ldr	r6, [r5, #16]

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 8089dc6:	eb41 0108 	adc.w	r1, r1, r8

        MULADDC_CORE   MULADDC_CORE
 8089dca:	fba3 7806 	umull	r7, r8, r3, r6
 8089dce:	6926      	ldr	r6, [r4, #16]
 8089dd0:	19c9      	adds	r1, r1, r7
 8089dd2:	bf2c      	ite	cs
 8089dd4:	2201      	movcs	r2, #1
 8089dd6:	2200      	movcc	r2, #0
 8089dd8:	1989      	adds	r1, r1, r6
 8089dda:	6121      	str	r1, [r4, #16]
 8089ddc:	696e      	ldr	r6, [r5, #20]
 8089dde:	eb42 0208 	adc.w	r2, r2, r8
 8089de2:	fba3 7806 	umull	r7, r8, r3, r6
 8089de6:	6966      	ldr	r6, [r4, #20]
 8089de8:	19d2      	adds	r2, r2, r7
 8089dea:	bf2c      	ite	cs
 8089dec:	2101      	movcs	r1, #1
 8089dee:	2100      	movcc	r1, #0
 8089df0:	1992      	adds	r2, r2, r6
 8089df2:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 8089df4:	69ae      	ldr	r6, [r5, #24]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 8089df6:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 8089dfa:	fba3 7806 	umull	r7, r8, r3, r6
 8089dfe:	69a6      	ldr	r6, [r4, #24]
 8089e00:	19c9      	adds	r1, r1, r7
 8089e02:	bf2c      	ite	cs
 8089e04:	2201      	movcs	r2, #1
 8089e06:	2200      	movcc	r2, #0
 8089e08:	1989      	adds	r1, r1, r6
 8089e0a:	61a1      	str	r1, [r4, #24]
 8089e0c:	69ee      	ldr	r6, [r5, #28]
 8089e0e:	69e1      	ldr	r1, [r4, #28]
 8089e10:	fba3 6706 	umull	r6, r7, r3, r6
 8089e14:	eb42 0208 	adc.w	r2, r2, r8
 8089e18:	1992      	adds	r2, r2, r6
 8089e1a:	bf2c      	ite	cs
 8089e1c:	f04f 0c01 	movcs.w	ip, #1
 8089e20:	f04f 0c00 	movcc.w	ip, #0
 8089e24:	1852      	adds	r2, r2, r1
 8089e26:	eb4c 0c07 	adc.w	ip, ip, r7
 8089e2a:	61e2      	str	r2, [r4, #28]
 8089e2c:	08c2      	lsrs	r2, r0, #3
 8089e2e:	0151      	lsls	r1, r2, #5
 8089e30:	440c      	add	r4, r1
 8089e32:	440d      	add	r5, r1
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    mbedtls_mpi_uint c = 0, t = 0;
 8089e34:	4621      	mov	r1, r4
 8089e36:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 8089e3a:	0080      	lsls	r0, r0, #2
 8089e3c:	eb05 0e00 	add.w	lr, r5, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 8089e40:	4575      	cmp	r5, lr
 8089e42:	d011      	beq.n	8089e68 <_ZL11mpi_mul_hlpjPmS_m+0x37c>
    {
        MULADDC_INIT
        MULADDC_CORE
 8089e44:	f855 6b04 	ldr.w	r6, [r5], #4
 8089e48:	fba6 7803 	umull	r7, r8, r6, r3
 8089e4c:	680e      	ldr	r6, [r1, #0]
 8089e4e:	eb1c 0207 	adds.w	r2, ip, r7
 8089e52:	bf2c      	ite	cs
 8089e54:	f04f 0c01 	movcs.w	ip, #1
 8089e58:	f04f 0c00 	movcc.w	ip, #0
 8089e5c:	1992      	adds	r2, r2, r6
 8089e5e:	eb4c 0c08 	adc.w	ip, ip, r8
 8089e62:	f841 2b04 	str.w	r2, [r1], #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 8089e66:	e7eb      	b.n	8089e40 <_ZL11mpi_mul_hlpjPmS_m+0x354>
 8089e68:	4404      	add	r4, r0
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 8089e6a:	6823      	ldr	r3, [r4, #0]
 8089e6c:	4463      	add	r3, ip
 8089e6e:	459c      	cmp	ip, r3
 8089e70:	f844 3b04 	str.w	r3, [r4], #4
 8089e74:	bf8c      	ite	hi
 8089e76:	f04f 0c01 	movhi.w	ip, #1
 8089e7a:	f04f 0c00 	movls.w	ip, #0
    }
    while( c != 0 );
 8089e7e:	d8f4      	bhi.n	8089e6a <_ZL11mpi_mul_hlpjPmS_m+0x37e>
}
 8089e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08089e84 <mbedtls_mpi_init>:
/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
 8089e84:	b120      	cbz	r0, 8089e90 <mbedtls_mpi_init+0xc>
        return;

    X->s = 1;
 8089e86:	2301      	movs	r3, #1
 8089e88:	6003      	str	r3, [r0, #0]
    X->n = 0;
 8089e8a:	2300      	movs	r3, #0
 8089e8c:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 8089e8e:	6083      	str	r3, [r0, #8]
 8089e90:	4770      	bx	lr

08089e92 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 8089e92:	b510      	push	{r4, lr}
    if( X == NULL )
 8089e94:	4604      	mov	r4, r0
 8089e96:	b188      	cbz	r0, 8089ebc <mbedtls_mpi_free+0x2a>
        return;

    if( X->p != NULL )
 8089e98:	6883      	ldr	r3, [r0, #8]
 8089e9a:	b153      	cbz	r3, 8089eb2 <mbedtls_mpi_free+0x20>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 8089e9c:	6842      	ldr	r2, [r0, #4]
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 8089e9e:	2100      	movs	r1, #0
 8089ea0:	f112 32ff 	adds.w	r2, r2, #4294967295
 8089ea4:	d302      	bcc.n	8089eac <mbedtls_mpi_free+0x1a>
 8089ea6:	6019      	str	r1, [r3, #0]
 8089ea8:	3304      	adds	r3, #4
 8089eaa:	e7f9      	b.n	8089ea0 <mbedtls_mpi_free+0xe>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
 8089eac:	68a0      	ldr	r0, [r4, #8]
 8089eae:	f005 fa59 	bl	808f364 <free>
    }

    X->s = 1;
 8089eb2:	2301      	movs	r3, #1
 8089eb4:	6023      	str	r3, [r4, #0]
    X->n = 0;
 8089eb6:	2300      	movs	r3, #0
 8089eb8:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 8089eba:	60a3      	str	r3, [r4, #8]
 8089ebc:	bd10      	pop	{r4, pc}

08089ebe <mbedtls_mpi_grow>:
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8089ebe:	f242 7310 	movw	r3, #10000	; 0x2710
 8089ec2:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 8089ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089ec8:	4604      	mov	r4, r0
 8089eca:	460f      	mov	r7, r1
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8089ecc:	d903      	bls.n	8089ed6 <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8089ece:	f06f 000f 	mvn.w	r0, #15
 8089ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
 8089ed6:	6846      	ldr	r6, [r0, #4]
 8089ed8:	42b1      	cmp	r1, r6
 8089eda:	d919      	bls.n	8089f10 <mbedtls_mpi_grow+0x52>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8089edc:	2104      	movs	r1, #4
 8089ede:	4638      	mov	r0, r7
 8089ee0:	f006 fb62 	bl	80905a8 <calloc>
 8089ee4:	4680      	mov	r8, r0
 8089ee6:	2800      	cmp	r0, #0
 8089ee8:	d0f1      	beq.n	8089ece <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
 8089eea:	68a5      	ldr	r5, [r4, #8]
 8089eec:	b16d      	cbz	r5, 8089f0a <mbedtls_mpi_grow+0x4c>
        {
            memcpy( p, X->p, X->n * ciL );
 8089eee:	00b2      	lsls	r2, r6, #2
 8089ef0:	4629      	mov	r1, r5
 8089ef2:	f006 fb7e 	bl	80905f2 <memcpy>
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 8089ef6:	2300      	movs	r3, #0
 8089ef8:	f116 36ff 	adds.w	r6, r6, #4294967295
 8089efc:	d302      	bcc.n	8089f04 <mbedtls_mpi_grow+0x46>
 8089efe:	602b      	str	r3, [r5, #0]
 8089f00:	3504      	adds	r5, #4
 8089f02:	e7f9      	b.n	8089ef8 <mbedtls_mpi_grow+0x3a>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
 8089f04:	68a0      	ldr	r0, [r4, #8]
 8089f06:	f005 fa2d 	bl	808f364 <free>
        }

        X->n = nblimbs;
 8089f0a:	6067      	str	r7, [r4, #4]
        X->p = p;
 8089f0c:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
 8089f10:	2000      	movs	r0, #0
}
 8089f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08089f16 <mbedtls_mpi_copy>:
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    int ret;
    size_t i;

    if( X == Y )
 8089f16:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8089f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089f1a:	4606      	mov	r6, r0
 8089f1c:	460f      	mov	r7, r1
    int ret;
    size_t i;

    if( X == Y )
 8089f1e:	d020      	beq.n	8089f62 <mbedtls_mpi_copy+0x4c>
        return( 0 );

    if( Y->p == NULL )
 8089f20:	688c      	ldr	r4, [r1, #8]
 8089f22:	b914      	cbnz	r4, 8089f2a <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
 8089f24:	f7ff ffb5 	bl	8089e92 <mbedtls_mpi_free>
 8089f28:	e01d      	b.n	8089f66 <mbedtls_mpi_copy+0x50>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
 8089f2a:	6849      	ldr	r1, [r1, #4]
 8089f2c:	3901      	subs	r1, #1
 8089f2e:	b119      	cbz	r1, 8089f38 <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
 8089f30:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8089f34:	2b00      	cmp	r3, #0
 8089f36:	d0f9      	beq.n	8089f2c <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;
 8089f38:	683b      	ldr	r3, [r7, #0]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
 8089f3a:	1c4d      	adds	r5, r1, #1

    X->s = Y->s;
 8089f3c:	6033      	str	r3, [r6, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8089f3e:	4629      	mov	r1, r5
 8089f40:	4630      	mov	r0, r6
 8089f42:	f7ff ffbc 	bl	8089ebe <mbedtls_mpi_grow>
 8089f46:	4604      	mov	r4, r0
 8089f48:	b968      	cbnz	r0, 8089f66 <mbedtls_mpi_copy+0x50>

    memset( X->p, 0, X->n * ciL );
 8089f4a:	6872      	ldr	r2, [r6, #4]
 8089f4c:	4601      	mov	r1, r0
 8089f4e:	0092      	lsls	r2, r2, #2
 8089f50:	68b0      	ldr	r0, [r6, #8]
 8089f52:	f006 fb74 	bl	809063e <memset>
    memcpy( X->p, Y->p, i * ciL );
 8089f56:	00aa      	lsls	r2, r5, #2
 8089f58:	68b9      	ldr	r1, [r7, #8]
 8089f5a:	68b0      	ldr	r0, [r6, #8]
 8089f5c:	f006 fb49 	bl	80905f2 <memcpy>
 8089f60:	e001      	b.n	8089f66 <mbedtls_mpi_copy+0x50>
{
    int ret;
    size_t i;

    if( X == Y )
        return( 0 );
 8089f62:	2000      	movs	r0, #0
 8089f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8089f66:	4620      	mov	r0, r4
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
 8089f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08089f6a <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 8089f6a:	b570      	push	{r4, r5, r6, lr}
 8089f6c:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8089f6e:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 8089f70:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8089f72:	f7ff ffa4 	bl	8089ebe <mbedtls_mpi_grow>
 8089f76:	4605      	mov	r5, r0
 8089f78:	b988      	cbnz	r0, 8089f9e <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 8089f7a:	6862      	ldr	r2, [r4, #4]
 8089f7c:	4601      	mov	r1, r0
 8089f7e:	0092      	lsls	r2, r2, #2
 8089f80:	68a0      	ldr	r0, [r4, #8]
 8089f82:	f006 fb5c 	bl	809063e <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 8089f86:	68a3      	ldr	r3, [r4, #8]
 8089f88:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 8089f8c:	2e00      	cmp	r6, #0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
 8089f8e:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 8089f92:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8089f94:	bfb4      	ite	lt
 8089f96:	f04f 33ff 	movlt.w	r3, #4294967295
 8089f9a:	2301      	movge	r3, #1
 8089f9c:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 8089f9e:	4628      	mov	r0, r5
 8089fa0:	bd70      	pop	{r4, r5, r6, pc}

08089fa2 <mbedtls_mpi_get_bit>:
/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
 8089fa2:	6843      	ldr	r3, [r0, #4]
 8089fa4:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 8089fa8:	bf3f      	itttt	cc
 8089faa:	6883      	ldrcc	r3, [r0, #8]
 8089fac:	094a      	lsrcc	r2, r1, #5
 8089fae:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
 8089fb2:	f001 001f 	andcc.w	r0, r1, #31
 8089fb6:	bf3a      	itte	cc
 8089fb8:	fa23 f000 	lsrcc.w	r0, r3, r0
 8089fbc:	f000 0001 	andcc.w	r0, r0, #1
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
        return( 0 );
 8089fc0:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
 8089fc2:	4770      	bx	lr

08089fc4 <mbedtls_mpi_lsb>:
/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
 8089fc4:	2300      	movs	r3, #0

    for( i = 0; i < X->n; i++ )
 8089fc6:	461a      	mov	r2, r3

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 8089fc8:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 8089fca:	6844      	ldr	r4, [r0, #4]
 8089fcc:	42a2      	cmp	r2, r4
 8089fce:	d00e      	beq.n	8089fee <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8089fd0:	6881      	ldr	r1, [r0, #8]
 8089fd2:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 8089fd6:	2100      	movs	r1, #0
 8089fd8:	fa25 f601 	lsr.w	r6, r5, r1
 8089fdc:	07f6      	lsls	r6, r6, #31
 8089fde:	d408      	bmi.n	8089ff2 <mbedtls_mpi_lsb+0x2e>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
 8089fe0:	3101      	adds	r1, #1
 8089fe2:	2920      	cmp	r1, #32
 8089fe4:	f103 0301 	add.w	r3, r3, #1
 8089fe8:	d1f6      	bne.n	8089fd8 <mbedtls_mpi_lsb+0x14>
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 8089fea:	3201      	adds	r2, #1
 8089fec:	e7ee      	b.n	8089fcc <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
 8089fee:	2000      	movs	r0, #0
 8089ff0:	bd70      	pop	{r4, r5, r6, pc}
 8089ff2:	4618      	mov	r0, r3
}
 8089ff4:	bd70      	pop	{r4, r5, r6, pc}

08089ff6 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 8089ff6:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
 8089ff8:	6843      	ldr	r3, [r0, #4]
 8089ffa:	b1d3      	cbz	r3, 808a032 <mbedtls_mpi_bitlen+0x3c>
 8089ffc:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808a000:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808a002:	1e59      	subs	r1, r3, #1
 808a004:	0092      	lsls	r2, r2, #2
 808a006:	6883      	ldr	r3, [r0, #8]
 808a008:	b121      	cbz	r1, 808a014 <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
 808a00a:	589c      	ldr	r4, [r3, r2]
 808a00c:	3a04      	subs	r2, #4
 808a00e:	b90c      	cbnz	r4, 808a014 <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808a010:	3901      	subs	r1, #1
 808a012:	e7f8      	b.n	808a006 <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
 808a014:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 808a018:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
 808a01c:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
 808a01e:	4210      	tst	r0, r2
 808a020:	d104      	bne.n	808a02c <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808a022:	3301      	adds	r3, #1
 808a024:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
 808a026:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808a02a:	d1f8      	bne.n	808a01e <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
 808a02c:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
 808a030:	3320      	adds	r3, #32
}
 808a032:	4618      	mov	r0, r3
 808a034:	bd10      	pop	{r4, pc}

0808a036 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 808a036:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 808a038:	f7ff ffdd 	bl	8089ff6 <mbedtls_mpi_bitlen>
 808a03c:	3007      	adds	r0, #7
}
 808a03e:	08c0      	lsrs	r0, r0, #3
 808a040:	bd08      	pop	{r3, pc}

0808a042 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808a042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a044:	460d      	mov	r5, r1
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808a046:	f012 0103 	ands.w	r1, r2, #3
 808a04a:	bf18      	it	ne
 808a04c:	2101      	movne	r1, #1

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808a04e:	6843      	ldr	r3, [r0, #4]
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808a050:	eb01 0492 	add.w	r4, r1, r2, lsr #2

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808a054:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808a056:	4606      	mov	r6, r0
 808a058:	4617      	mov	r7, r2
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808a05a:	d105      	bne.n	808a068 <mbedtls_mpi_read_binary+0x26>
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808a05c:	2100      	movs	r1, #0
 808a05e:	4630      	mov	r0, r6
 808a060:	f7ff ff83 	bl	8089f6a <mbedtls_mpi_lset>
 808a064:	b160      	cbz	r0, 808a080 <mbedtls_mpi_read_binary+0x3e>
 808a066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
 808a068:	f7ff ff13 	bl	8089e92 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 808a06c:	4630      	mov	r0, r6
 808a06e:	f7ff ff09 	bl	8089e84 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 808a072:	4621      	mov	r1, r4
 808a074:	4630      	mov	r0, r6
 808a076:	f7ff ff22 	bl	8089ebe <mbedtls_mpi_grow>
 808a07a:	2800      	cmp	r0, #0
 808a07c:	d0ee      	beq.n	808a05c <mbedtls_mpi_read_binary+0x1a>
 808a07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808a080:	4603      	mov	r3, r0
 808a082:	19e9      	adds	r1, r5, r7

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808a084:	42bb      	cmp	r3, r7
 808a086:	d010      	beq.n	808a0aa <mbedtls_mpi_read_binary+0x68>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808a088:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 808a08c:	68b2      	ldr	r2, [r6, #8]
 808a08e:	00dc      	lsls	r4, r3, #3
 808a090:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 808a094:	f004 0418 	and.w	r4, r4, #24
 808a098:	fa05 f404 	lsl.w	r4, r5, r4
 808a09c:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808a0a0:	3301      	adds	r3, #1
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808a0a2:	432c      	orrs	r4, r5
 808a0a4:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808a0a8:	e7ec      	b.n	808a084 <mbedtls_mpi_read_binary+0x42>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);

cleanup:

    return( ret );
}
 808a0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808a0ac <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
 808a0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a0ae:	4614      	mov	r4, r2
 808a0b0:	4605      	mov	r5, r0
 808a0b2:	460f      	mov	r7, r1
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808a0b4:	f7ff ffbf 	bl	808a036 <mbedtls_mpi_size>

    if( buflen < n )
 808a0b8:	42a0      	cmp	r0, r4
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808a0ba:	4606      	mov	r6, r0

    if( buflen < n )
 808a0bc:	d814      	bhi.n	808a0e8 <mbedtls_mpi_write_binary+0x3c>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );
 808a0be:	4622      	mov	r2, r4
 808a0c0:	2100      	movs	r1, #0
 808a0c2:	4638      	mov	r0, r7
 808a0c4:	f006 fabb 	bl	809063e <memset>
 808a0c8:	443c      	add	r4, r7

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808a0ca:	2300      	movs	r3, #0
 808a0cc:	42b3      	cmp	r3, r6
 808a0ce:	d00e      	beq.n	808a0ee <mbedtls_mpi_write_binary+0x42>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808a0d0:	68a8      	ldr	r0, [r5, #8]
 808a0d2:	00da      	lsls	r2, r3, #3
 808a0d4:	089f      	lsrs	r7, r3, #2
 808a0d6:	f002 0118 	and.w	r1, r2, #24
 808a0da:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808a0de:	3301      	adds	r3, #1
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808a0e0:	40ca      	lsrs	r2, r1
 808a0e2:	f804 2d01 	strb.w	r2, [r4, #-1]!
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808a0e6:	e7f1      	b.n	808a0cc <mbedtls_mpi_write_binary+0x20>
    size_t i, j, n;

    n = mbedtls_mpi_size( X );

    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 808a0e8:	f06f 0007 	mvn.w	r0, #7
 808a0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );

    return( 0 );
 808a0ee:	2000      	movs	r0, #0
}
 808a0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808a0f2 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 808a0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a0f4:	4604      	mov	r4, r0
 808a0f6:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
 808a0f8:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
 808a0fa:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
 808a0fe:	f7ff ff7a 	bl	8089ff6 <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
 808a102:	6863      	ldr	r3, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
 808a104:	4428      	add	r0, r5

    if( X->n * biL < i )
 808a106:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 808a10a:	d809      	bhi.n	808a120 <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808a10c:	b346      	cbz	r6, 808a160 <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
 808a10e:	6863      	ldr	r3, [r4, #4]
 808a110:	f06f 0103 	mvn.w	r1, #3
 808a114:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808a118:	3a01      	subs	r2, #1
 808a11a:	0092      	lsls	r2, r2, #2
 808a11c:	4371      	muls	r1, r6
 808a11e:	e00b      	b.n	808a138 <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 808a120:	f010 011f 	ands.w	r1, r0, #31
 808a124:	bf18      	it	ne
 808a126:	2101      	movne	r1, #1
 808a128:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 808a12c:	4620      	mov	r0, r4
 808a12e:	f7ff fec6 	bl	8089ebe <mbedtls_mpi_grow>
 808a132:	2800      	cmp	r0, #0
 808a134:	d0ea      	beq.n	808a10c <mbedtls_mpi_shift_l+0x1a>
 808a136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808a138:	42b3      	cmp	r3, r6
 808a13a:	d906      	bls.n	808a14a <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 808a13c:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808a13e:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 808a140:	1885      	adds	r5, r0, r2
 808a142:	586d      	ldr	r5, [r5, r1]
 808a144:	5085      	str	r5, [r0, r2]
 808a146:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808a148:	e7f6      	b.n	808a138 <mbedtls_mpi_shift_l+0x46>
 808a14a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 808a14e:	3b01      	subs	r3, #1
 808a150:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
 808a152:	2100      	movs	r1, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808a154:	1d1a      	adds	r2, r3, #4
 808a156:	d003      	beq.n	808a160 <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
 808a158:	68a2      	ldr	r2, [r4, #8]
 808a15a:	50d1      	str	r1, [r2, r3]
 808a15c:	3b04      	subs	r3, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808a15e:	e7f9      	b.n	808a154 <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808a160:	b90f      	cbnz	r7, 808a166 <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
 808a162:	2000      	movs	r0, #0
 808a164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808a166:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808a168:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
 808a16a:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808a16e:	6861      	ldr	r1, [r4, #4]
 808a170:	428e      	cmp	r6, r1
 808a172:	d2f6      	bcs.n	808a162 <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
 808a174:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808a176:	3601      	adds	r6, #1
        {
            r1 = X->p[i] >> (biL - t1);
 808a178:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
 808a17a:	fa01 f507 	lsl.w	r5, r1, r7
 808a17e:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
 808a180:	68a0      	ldr	r0, [r4, #8]
 808a182:	58c5      	ldr	r5, [r0, r3]
 808a184:	432a      	orrs	r2, r5
 808a186:	50c2      	str	r2, [r0, r3]
 808a188:	3304      	adds	r3, #4
            r0 = r1;
 808a18a:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808a18e:	e7ee      	b.n	808a16e <mbedtls_mpi_shift_l+0x7c>

0808a190 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 808a190:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808a192:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
 808a194:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808a196:	429a      	cmp	r2, r3
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);
 808a198:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808a19c:	d801      	bhi.n	808a1a2 <mbedtls_mpi_shift_r+0x12>
 808a19e:	d105      	bne.n	808a1ac <mbedtls_mpi_shift_r+0x1c>
 808a1a0:	b159      	cbz	r1, 808a1ba <mbedtls_mpi_shift_r+0x2a>
            r0 = r1;
        }
    }

    return( 0 );
}
 808a1a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
 808a1a6:	2100      	movs	r1, #0
 808a1a8:	f7ff bedf 	b.w	8089f6a <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808a1ac:	b1d2      	cbz	r2, 808a1e4 <mbedtls_mpi_shift_r+0x54>
 808a1ae:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
 808a1b0:	6844      	ldr	r4, [r0, #4]
 808a1b2:	1aa4      	subs	r4, r4, r2
 808a1b4:	42a3      	cmp	r3, r4
 808a1b6:	d305      	bcc.n	808a1c4 <mbedtls_mpi_shift_r+0x34>
 808a1b8:	e001      	b.n	808a1be <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808a1ba:	b35a      	cbz	r2, 808a214 <mbedtls_mpi_shift_r+0x84>
 808a1bc:	460b      	mov	r3, r1
 808a1be:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
 808a1c0:	2500      	movs	r5, #0
 808a1c2:	e007      	b.n	808a1d4 <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
 808a1c4:	6884      	ldr	r4, [r0, #8]
 808a1c6:	189d      	adds	r5, r3, r2
 808a1c8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 808a1cc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
 808a1d0:	3301      	adds	r3, #1
 808a1d2:	e7ed      	b.n	808a1b0 <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808a1d4:	6844      	ldr	r4, [r0, #4]
 808a1d6:	42a3      	cmp	r3, r4
 808a1d8:	d204      	bcs.n	808a1e4 <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
 808a1da:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808a1dc:	3301      	adds	r3, #1
            X->p[i] = 0;
 808a1de:	50a5      	str	r5, [r4, r2]
 808a1e0:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808a1e2:	e7f7      	b.n	808a1d4 <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 808a1e4:	b1b1      	cbz	r1, 808a214 <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
 808a1e6:	6844      	ldr	r4, [r0, #4]
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 808a1e8:	2200      	movs	r2, #0
 808a1ea:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808a1ee:	3b01      	subs	r3, #1
 808a1f0:	009b      	lsls	r3, r3, #2
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
 808a1f2:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808a1f6:	b16c      	cbz	r4, 808a214 <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
 808a1f8:	6886      	ldr	r6, [r0, #8]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808a1fa:	3c01      	subs	r4, #1
        {
            r1 = X->p[i - 1] << (biL - v1);
 808a1fc:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
 808a1fe:	fa25 f701 	lsr.w	r7, r5, r1
 808a202:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
 808a204:	6886      	ldr	r6, [r0, #8]
 808a206:	58f7      	ldr	r7, [r6, r3]
 808a208:	433a      	orrs	r2, r7
 808a20a:	50f2      	str	r2, [r6, r3]
 808a20c:	3b04      	subs	r3, #4
            r0 = r1;
 808a20e:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808a212:	e7f0      	b.n	808a1f6 <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
 808a214:	2000      	movs	r0, #0
 808a216:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808a218 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808a218:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808a21a:	6843      	ldr	r3, [r0, #4]
 808a21c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808a220:	3a01      	subs	r2, #1
 808a222:	0092      	lsls	r2, r2, #2
 808a224:	b12b      	cbz	r3, 808a232 <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
 808a226:	6884      	ldr	r4, [r0, #8]
 808a228:	58a4      	ldr	r4, [r4, r2]
 808a22a:	3a04      	subs	r2, #4
 808a22c:	b90c      	cbnz	r4, 808a232 <mbedtls_mpi_cmp_abs+0x1a>
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808a22e:	3b01      	subs	r3, #1
 808a230:	e7f8      	b.n	808a224 <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808a232:	684c      	ldr	r4, [r1, #4]
 808a234:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808a238:	3a01      	subs	r2, #1
 808a23a:	0092      	lsls	r2, r2, #2
 808a23c:	b1c4      	cbz	r4, 808a270 <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
 808a23e:	688d      	ldr	r5, [r1, #8]
 808a240:	58ae      	ldr	r6, [r5, r2]
 808a242:	3a04      	subs	r2, #4
 808a244:	b90e      	cbnz	r6, 808a24a <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808a246:	3c01      	subs	r4, #1
 808a248:	e7f8      	b.n	808a23c <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808a24a:	429c      	cmp	r4, r3
 808a24c:	d30b      	bcc.n	808a266 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 808a24e:	d913      	bls.n	808a278 <mbedtls_mpi_cmp_abs+0x60>
 808a250:	e00b      	b.n	808a26a <mbedtls_mpi_cmp_abs+0x52>
 808a252:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 808a256:	d308      	bcc.n	808a26a <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
 808a258:	3b01      	subs	r3, #1
 808a25a:	b193      	cbz	r3, 808a282 <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 808a25c:	6881      	ldr	r1, [r0, #8]
 808a25e:	588c      	ldr	r4, [r1, r2]
 808a260:	58a9      	ldr	r1, [r5, r2]
 808a262:	428c      	cmp	r4, r1
 808a264:	d9f5      	bls.n	808a252 <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808a266:	2001      	movs	r0, #1
 808a268:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 808a26a:	f04f 30ff 	mov.w	r0, #4294967295
 808a26e:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
 808a270:	1c18      	adds	r0, r3, #0
 808a272:	bf18      	it	ne
 808a274:	2001      	movne	r0, #1
 808a276:	bd70      	pop	{r4, r5, r6, pc}
 808a278:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808a27c:	3a01      	subs	r2, #1
 808a27e:	0092      	lsls	r2, r2, #2
 808a280:	e7eb      	b.n	808a25a <mbedtls_mpi_cmp_abs+0x42>
 808a282:	4618      	mov	r0, r3
 808a284:	bd70      	pop	{r4, r5, r6, pc}

0808a286 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808a286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a28a:	4616      	mov	r6, r2
 808a28c:	b085      	sub	sp, #20
 808a28e:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808a290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808a292:	4681      	mov	r9, r0
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808a294:	685a      	ldr	r2, [r3, #4]
 808a296:	6873      	ldr	r3, [r6, #4]
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808a298:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808a29a:	3301      	adds	r3, #1
 808a29c:	429a      	cmp	r2, r3
 808a29e:	d351      	bcc.n	808a344 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
 808a2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808a2a2:	6898      	ldr	r0, [r3, #8]
 808a2a4:	2800      	cmp	r0, #0
 808a2a6:	d04d      	beq.n	808a344 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 808a2a8:	0092      	lsls	r2, r2, #2
 808a2aa:	2100      	movs	r1, #0
 808a2ac:	f006 f9c7 	bl	809063e <memset>

    d = T->p;
 808a2b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 808a2b2:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808a2b6:	689b      	ldr	r3, [r3, #8]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808a2b8:	f10a 0701 	add.w	r7, sl, #1
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808a2bc:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
 808a2be:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808a2c2:	9d00      	ldr	r5, [sp, #0]
 808a2c4:	4553      	cmp	r3, sl
 808a2c6:	bf28      	it	cs
 808a2c8:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808a2ca:	00bf      	lsls	r7, r7, #2
 808a2cc:	9302      	str	r3, [sp, #8]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808a2ce:	2400      	movs	r4, #0
 808a2d0:	4554      	cmp	r4, sl
 808a2d2:	f8d9 0008 	ldr.w	r0, [r9, #8]
 808a2d6:	d01b      	beq.n	808a310 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808a2d8:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 808a2dc:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808a2e0:	682a      	ldr	r2, [r5, #0]
 808a2e2:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
 808a2e4:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808a2e6:	fb03 2308 	mla	r3, r3, r8, r2
 808a2ea:	9a03      	ldr	r2, [sp, #12]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808a2ec:	3401      	adds	r4, #1
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808a2ee:	4353      	muls	r3, r2

        mpi_mul_hlp( m, B->p, d, u0 );
 808a2f0:	462a      	mov	r2, r5
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808a2f2:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
 808a2f4:	4643      	mov	r3, r8
 808a2f6:	f7ff fbf9 	bl	8089aec <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
 808a2fa:	9b01      	ldr	r3, [sp, #4]
 808a2fc:	462a      	mov	r2, r5
 808a2fe:	68b1      	ldr	r1, [r6, #8]
 808a300:	4650      	mov	r0, sl
 808a302:	f7ff fbf3 	bl	8089aec <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
 808a306:	f845 8b04 	str.w	r8, [r5], #4
 808a30a:	2300      	movs	r3, #0
 808a30c:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808a30e:	e7df      	b.n	808a2d0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 808a310:	9b00      	ldr	r3, [sp, #0]
 808a312:	1f39      	subs	r1, r7, #4
 808a314:	440b      	add	r3, r1
 808a316:	463a      	mov	r2, r7
 808a318:	4619      	mov	r1, r3
 808a31a:	f006 f96a 	bl	80905f2 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 808a31e:	4631      	mov	r1, r6
 808a320:	4648      	mov	r0, r9
 808a322:	f7ff ff79 	bl	808a218 <mbedtls_mpi_cmp_abs>
 808a326:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808a328:	bfb8      	it	lt
 808a32a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 808a32c:	4620      	mov	r0, r4
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
 808a32e:	bfa7      	ittee	ge
 808a330:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 808a334:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808a336:	689a      	ldrlt	r2, [r3, #8]
 808a338:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 808a33c:	f7ff fbac 	bl	8089a98 <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
 808a340:	2000      	movs	r0, #0
 808a342:	e001      	b.n	808a348 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808a344:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
 808a348:	b005      	add	sp, #20
 808a34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808a34e <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808a34e:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808a350:	6843      	ldr	r3, [r0, #4]
 808a352:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808a356:	3a01      	subs	r2, #1
 808a358:	0092      	lsls	r2, r2, #2
 808a35a:	b12b      	cbz	r3, 808a368 <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
 808a35c:	6884      	ldr	r4, [r0, #8]
 808a35e:	58a4      	ldr	r4, [r4, r2]
 808a360:	3a04      	subs	r2, #4
 808a362:	b90c      	cbnz	r4, 808a368 <mbedtls_mpi_cmp_mpi+0x1a>
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808a364:	3b01      	subs	r3, #1
 808a366:	e7f8      	b.n	808a35a <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808a368:	684c      	ldr	r4, [r1, #4]
 808a36a:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808a36e:	3a01      	subs	r2, #1
 808a370:	0092      	lsls	r2, r2, #2
 808a372:	b364      	cbz	r4, 808a3ce <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
 808a374:	688d      	ldr	r5, [r1, #8]
 808a376:	58ae      	ldr	r6, [r5, r2]
 808a378:	3a04      	subs	r2, #4
 808a37a:	b90e      	cbnz	r6, 808a380 <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808a37c:	3c01      	subs	r4, #1
 808a37e:	e7f8      	b.n	808a372 <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
 808a380:	429c      	cmp	r4, r3
 808a382:	d201      	bcs.n	808a388 <mbedtls_mpi_cmp_mpi+0x3a>
 808a384:	6802      	ldr	r2, [r0, #0]
 808a386:	e025      	b.n	808a3d4 <mbedtls_mpi_cmp_mpi+0x86>
 808a388:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 808a38a:	d901      	bls.n	808a390 <mbedtls_mpi_cmp_mpi+0x42>
 808a38c:	424a      	negs	r2, r1
 808a38e:	e021      	b.n	808a3d4 <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808a390:	6802      	ldr	r2, [r0, #0]
 808a392:	2a00      	cmp	r2, #0
 808a394:	dd01      	ble.n	808a39a <mbedtls_mpi_cmp_mpi+0x4c>
 808a396:	2900      	cmp	r1, #0
 808a398:	db14      	blt.n	808a3c4 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808a39a:	2900      	cmp	r1, #0
 808a39c:	dd01      	ble.n	808a3a2 <mbedtls_mpi_cmp_mpi+0x54>
 808a39e:	2a00      	cmp	r2, #0
 808a3a0:	db12      	blt.n	808a3c8 <mbedtls_mpi_cmp_mpi+0x7a>
 808a3a2:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 808a3a6:	3901      	subs	r1, #1
 808a3a8:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
 808a3aa:	b193      	cbz	r3, 808a3d2 <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 808a3ac:	6884      	ldr	r4, [r0, #8]
 808a3ae:	5866      	ldr	r6, [r4, r1]
 808a3b0:	586c      	ldr	r4, [r5, r1]
 808a3b2:	42a6      	cmp	r6, r4
 808a3b4:	d80e      	bhi.n	808a3d4 <mbedtls_mpi_cmp_mpi+0x86>
 808a3b6:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 808a3ba:	d201      	bcs.n	808a3c0 <mbedtls_mpi_cmp_mpi+0x72>
 808a3bc:	4252      	negs	r2, r2
 808a3be:	e009      	b.n	808a3d4 <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
 808a3c0:	3b01      	subs	r3, #1
 808a3c2:	e7f2      	b.n	808a3aa <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808a3c4:	2201      	movs	r2, #1
 808a3c6:	e005      	b.n	808a3d4 <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808a3c8:	f04f 32ff 	mov.w	r2, #4294967295
 808a3cc:	e002      	b.n	808a3d4 <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
 808a3ce:	2b00      	cmp	r3, #0
 808a3d0:	d1d8      	bne.n	808a384 <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
 808a3d2:	461a      	mov	r2, r3
}
 808a3d4:	4610      	mov	r0, r2
 808a3d6:	bd70      	pop	{r4, r5, r6, pc}

0808a3d8 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808a3d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808a3da:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 808a3de:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 808a3e2:	2900      	cmp	r1, #0
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808a3e4:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 808a3e6:	bfb4      	ite	lt
 808a3e8:	f04f 33ff 	movlt.w	r3, #4294967295
 808a3ec:	2301      	movge	r3, #1
 808a3ee:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808a3f0:	a901      	add	r1, sp, #4
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
 808a3f2:	2301      	movs	r3, #1
 808a3f4:	9302      	str	r3, [sp, #8]
    Y.p = p;
 808a3f6:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808a3fa:	f7ff ffa8 	bl	808a34e <mbedtls_mpi_cmp_mpi>
}
 808a3fe:	b005      	add	sp, #20
 808a400:	f85d fb04 	ldr.w	pc, [sp], #4

0808a404 <mbedtls_mpi_add_abs>:
{
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808a404:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a40a:	4606      	mov	r6, r0
 808a40c:	4615      	mov	r5, r2
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808a40e:	d006      	beq.n	808a41e <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
 808a410:	4288      	cmp	r0, r1
 808a412:	d005      	beq.n	808a420 <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808a414:	f7ff fd7f 	bl	8089f16 <mbedtls_mpi_copy>
 808a418:	4607      	mov	r7, r0
 808a41a:	b108      	cbz	r0, 808a420 <mbedtls_mpi_add_abs+0x1c>
 808a41c:	e049      	b.n	808a4b2 <mbedtls_mpi_add_abs+0xae>
 808a41e:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 808a420:	2301      	movs	r3, #1
 808a422:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
 808a424:	686c      	ldr	r4, [r5, #4]
 808a426:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808a42a:	3b01      	subs	r3, #1
 808a42c:	009b      	lsls	r3, r3, #2
 808a42e:	b12c      	cbz	r4, 808a43c <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
 808a430:	68aa      	ldr	r2, [r5, #8]
 808a432:	58d2      	ldr	r2, [r2, r3]
 808a434:	3b04      	subs	r3, #4
 808a436:	b90a      	cbnz	r2, 808a43c <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
 808a438:	3c01      	subs	r4, #1
 808a43a:	e7f8      	b.n	808a42e <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808a43c:	4621      	mov	r1, r4
 808a43e:	4630      	mov	r0, r6
 808a440:	f7ff fd3d 	bl	8089ebe <mbedtls_mpi_grow>
 808a444:	4607      	mov	r7, r0
 808a446:	2800      	cmp	r0, #0
 808a448:	d133      	bne.n	808a4b2 <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
 808a44a:	68b3      	ldr	r3, [r6, #8]
 808a44c:	f8d5 c008 	ldr.w	ip, [r5, #8]
 808a450:	4618      	mov	r0, r3
 808a452:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808a454:	4639      	mov	r1, r7
 808a456:	42a1      	cmp	r1, r4
 808a458:	d00f      	beq.n	808a47a <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808a45a:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
 808a45c:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 808a460:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
 808a462:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808a464:	bf2c      	ite	cs
 808a466:	2201      	movcs	r2, #1
 808a468:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
 808a46a:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808a46e:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
 808a470:	45ae      	cmp	lr, r5
 808a472:	bf94      	ite	ls
 808a474:	4615      	movls	r5, r2
 808a476:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808a478:	e7ed      	b.n	808a456 <mbedtls_mpi_add_abs+0x52>
 808a47a:	ea4f 0884 	mov.w	r8, r4, lsl #2
 808a47e:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808a480:	b1bd      	cbz	r5, 808a4b2 <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
 808a482:	6872      	ldr	r2, [r6, #4]
 808a484:	4294      	cmp	r4, r2
 808a486:	f104 0401 	add.w	r4, r4, #1
 808a48a:	d306      	bcc.n	808a49a <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808a48c:	4621      	mov	r1, r4
 808a48e:	4630      	mov	r0, r6
 808a490:	f7ff fd15 	bl	8089ebe <mbedtls_mpi_grow>
 808a494:	b960      	cbnz	r0, 808a4b0 <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
 808a496:	68b3      	ldr	r3, [r6, #8]
 808a498:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
 808a49a:	681a      	ldr	r2, [r3, #0]
 808a49c:	f108 0804 	add.w	r8, r8, #4
 808a4a0:	442a      	add	r2, r5
 808a4a2:	4295      	cmp	r5, r2
 808a4a4:	f843 2b04 	str.w	r2, [r3], #4
 808a4a8:	bf94      	ite	ls
 808a4aa:	2500      	movls	r5, #0
 808a4ac:	2501      	movhi	r5, #1
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808a4ae:	e7e7      	b.n	808a480 <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808a4b0:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
 808a4b2:	4638      	mov	r0, r7
 808a4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808a4b8 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a4ba:	460f      	mov	r7, r1
 808a4bc:	b085      	sub	sp, #20
 808a4be:	4606      	mov	r6, r0
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808a4c0:	4611      	mov	r1, r2
 808a4c2:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a4c4:	4615      	mov	r5, r2
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808a4c6:	f7ff fea7 	bl	808a218 <mbedtls_mpi_cmp_abs>
 808a4ca:	2800      	cmp	r0, #0
 808a4cc:	db30      	blt.n	808a530 <mbedtls_mpi_sub_abs+0x78>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808a4ce:	2301      	movs	r3, #1
 808a4d0:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808a4d2:	42b5      	cmp	r5, r6
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808a4d4:	f04f 0300 	mov.w	r3, #0
 808a4d8:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808a4da:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808a4dc:	d106      	bne.n	808a4ec <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808a4de:	4629      	mov	r1, r5
 808a4e0:	a801      	add	r0, sp, #4
 808a4e2:	f7ff fd18 	bl	8089f16 <mbedtls_mpi_copy>
 808a4e6:	4604      	mov	r4, r0
 808a4e8:	b9e8      	cbnz	r0, 808a526 <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
 808a4ea:	ad01      	add	r5, sp, #4
    }

    if( X != A )
 808a4ec:	42b7      	cmp	r7, r6
 808a4ee:	d107      	bne.n	808a500 <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 808a4f0:	2301      	movs	r3, #1
 808a4f2:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808a4f4:	6868      	ldr	r0, [r5, #4]
 808a4f6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 808a4fa:	3b01      	subs	r3, #1
 808a4fc:	009b      	lsls	r3, r3, #2
 808a4fe:	e00b      	b.n	808a518 <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808a500:	4639      	mov	r1, r7
 808a502:	4630      	mov	r0, r6
 808a504:	f7ff fd07 	bl	8089f16 <mbedtls_mpi_copy>
 808a508:	4604      	mov	r4, r0
 808a50a:	b960      	cbnz	r0, 808a526 <mbedtls_mpi_sub_abs+0x6e>
 808a50c:	e7f0      	b.n	808a4f0 <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
 808a50e:	68aa      	ldr	r2, [r5, #8]
 808a510:	58d2      	ldr	r2, [r2, r3]
 808a512:	3b04      	subs	r3, #4
 808a514:	b912      	cbnz	r2, 808a51c <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808a516:	3801      	subs	r0, #1
 808a518:	2800      	cmp	r0, #0
 808a51a:	d1f8      	bne.n	808a50e <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
 808a51c:	68b2      	ldr	r2, [r6, #8]
 808a51e:	68a9      	ldr	r1, [r5, #8]
 808a520:	f7ff faba 	bl	8089a98 <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
 808a524:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
 808a526:	a801      	add	r0, sp, #4
 808a528:	f7ff fcb3 	bl	8089e92 <mbedtls_mpi_free>

    return( ret );
 808a52c:	4620      	mov	r0, r4
 808a52e:	e001      	b.n	808a534 <mbedtls_mpi_sub_abs+0x7c>
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808a530:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
 808a534:	b005      	add	sp, #20
 808a536:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808a538 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808a53a:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s < 0 )
 808a53c:	6813      	ldr	r3, [r2, #0]

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a53e:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808a540:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a542:	460f      	mov	r7, r1
 808a544:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808a546:	d513      	bpl.n	808a570 <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808a548:	4611      	mov	r1, r2
 808a54a:	4638      	mov	r0, r7
 808a54c:	f7ff fe64 	bl	808a218 <mbedtls_mpi_cmp_abs>
 808a550:	2800      	cmp	r0, #0
 808a552:	db05      	blt.n	808a560 <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808a554:	4632      	mov	r2, r6
 808a556:	4639      	mov	r1, r7
 808a558:	4628      	mov	r0, r5
 808a55a:	f7ff ffad 	bl	808a4b8 <mbedtls_mpi_sub_abs>
 808a55e:	e009      	b.n	808a574 <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808a560:	463a      	mov	r2, r7
 808a562:	4631      	mov	r1, r6
 808a564:	4628      	mov	r0, r5
 808a566:	f7ff ffa7 	bl	808a4b8 <mbedtls_mpi_sub_abs>
 808a56a:	b928      	cbnz	r0, 808a578 <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
 808a56c:	4264      	negs	r4, r4
 808a56e:	e002      	b.n	808a576 <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808a570:	f7ff ff48 	bl	808a404 <mbedtls_mpi_add_abs>
 808a574:	b900      	cbnz	r0, 808a578 <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
 808a576:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808a578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808a57a <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a57a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808a57c:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s > 0 )
 808a57e:	6813      	ldr	r3, [r2, #0]

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a580:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808a582:	4363      	muls	r3, r4
 808a584:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a586:	460f      	mov	r7, r1
 808a588:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808a58a:	dd13      	ble.n	808a5b4 <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808a58c:	4611      	mov	r1, r2
 808a58e:	4638      	mov	r0, r7
 808a590:	f7ff fe42 	bl	808a218 <mbedtls_mpi_cmp_abs>
 808a594:	2800      	cmp	r0, #0
 808a596:	db05      	blt.n	808a5a4 <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808a598:	4632      	mov	r2, r6
 808a59a:	4639      	mov	r1, r7
 808a59c:	4628      	mov	r0, r5
 808a59e:	f7ff ff8b 	bl	808a4b8 <mbedtls_mpi_sub_abs>
 808a5a2:	e009      	b.n	808a5b8 <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808a5a4:	463a      	mov	r2, r7
 808a5a6:	4631      	mov	r1, r6
 808a5a8:	4628      	mov	r0, r5
 808a5aa:	f7ff ff85 	bl	808a4b8 <mbedtls_mpi_sub_abs>
 808a5ae:	b928      	cbnz	r0, 808a5bc <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
 808a5b0:	4264      	negs	r4, r4
 808a5b2:	e002      	b.n	808a5ba <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808a5b4:	f7ff ff26 	bl	808a404 <mbedtls_mpi_add_abs>
 808a5b8:	b900      	cbnz	r0, 808a5bc <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
 808a5ba:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808a5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808a5be <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808a5be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808a5c0:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808a5c4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808a5c8:	2a00      	cmp	r2, #0
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808a5ca:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808a5cc:	bfb4      	ite	lt
 808a5ce:	f04f 33ff 	movlt.w	r3, #4294967295
 808a5d2:	2301      	movge	r3, #1
 808a5d4:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808a5d6:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808a5d8:	2301      	movs	r3, #1
 808a5da:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808a5dc:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808a5e0:	f7ff ffaa 	bl	808a538 <mbedtls_mpi_add_mpi>
}
 808a5e4:	b005      	add	sp, #20
 808a5e6:	f85d fb04 	ldr.w	pc, [sp], #4

0808a5ea <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808a5ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808a5ec:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808a5f0:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808a5f4:	2a00      	cmp	r2, #0
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808a5f6:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808a5f8:	bfb4      	ite	lt
 808a5fa:	f04f 33ff 	movlt.w	r3, #4294967295
 808a5fe:	2301      	movge	r3, #1
 808a600:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808a602:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808a604:	2301      	movs	r3, #1
 808a606:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808a608:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808a60c:	f7ff ffb5 	bl	808a57a <mbedtls_mpi_sub_mpi>
}
 808a610:	b005      	add	sp, #20
 808a612:	f85d fb04 	ldr.w	pc, [sp], #4

0808a616 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808a61a:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a61c:	b086      	sub	sp, #24
 808a61e:	4615      	mov	r5, r2
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808a620:	4288      	cmp	r0, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808a622:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a626:	4681      	mov	r9, r0
 808a628:	460e      	mov	r6, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808a62a:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 808a62e:	9302      	str	r3, [sp, #8]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808a630:	9203      	str	r2, [sp, #12]
    X->n = 0;
 808a632:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 808a634:	9305      	str	r3, [sp, #20]
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808a636:	d106      	bne.n	808a646 <mbedtls_mpi_mul_mpi+0x30>
 808a638:	4668      	mov	r0, sp
 808a63a:	f7ff fc6c 	bl	8089f16 <mbedtls_mpi_copy>
 808a63e:	4604      	mov	r4, r0
 808a640:	2800      	cmp	r0, #0
 808a642:	d14d      	bne.n	808a6e0 <mbedtls_mpi_mul_mpi+0xca>
 808a644:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 808a646:	45a9      	cmp	r9, r5
 808a648:	d107      	bne.n	808a65a <mbedtls_mpi_mul_mpi+0x44>
 808a64a:	4649      	mov	r1, r9
 808a64c:	a803      	add	r0, sp, #12
 808a64e:	f7ff fc62 	bl	8089f16 <mbedtls_mpi_copy>
 808a652:	4604      	mov	r4, r0
 808a654:	2800      	cmp	r0, #0
 808a656:	d143      	bne.n	808a6e0 <mbedtls_mpi_mul_mpi+0xca>
 808a658:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
 808a65a:	f8d6 a004 	ldr.w	sl, [r6, #4]
 808a65e:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 808a662:	3b01      	subs	r3, #1
 808a664:	009b      	lsls	r3, r3, #2
 808a666:	f1ba 0f00 	cmp.w	sl, #0
 808a66a:	d006      	beq.n	808a67a <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
 808a66c:	68b2      	ldr	r2, [r6, #8]
 808a66e:	58d2      	ldr	r2, [r2, r3]
 808a670:	3b04      	subs	r3, #4
 808a672:	b912      	cbnz	r2, 808a67a <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
 808a674:	f10a 3aff 	add.w	sl, sl, #4294967295
 808a678:	e7f5      	b.n	808a666 <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808a67a:	686f      	ldr	r7, [r5, #4]
 808a67c:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 808a680:	3b01      	subs	r3, #1
 808a682:	009b      	lsls	r3, r3, #2
 808a684:	b12f      	cbz	r7, 808a692 <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
 808a686:	68aa      	ldr	r2, [r5, #8]
 808a688:	58d2      	ldr	r2, [r2, r3]
 808a68a:	3b04      	subs	r3, #4
 808a68c:	b90a      	cbnz	r2, 808a692 <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808a68e:	3f01      	subs	r7, #1
 808a690:	e7f8      	b.n	808a684 <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 808a692:	eb0a 0107 	add.w	r1, sl, r7
 808a696:	4648      	mov	r0, r9
 808a698:	f7ff fc11 	bl	8089ebe <mbedtls_mpi_grow>
 808a69c:	4604      	mov	r4, r0
 808a69e:	b9f8      	cbnz	r0, 808a6e0 <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808a6a0:	4601      	mov	r1, r0
 808a6a2:	4648      	mov	r0, r9
 808a6a4:	f7ff fc61 	bl	8089f6a <mbedtls_mpi_lset>
 808a6a8:	4604      	mov	r4, r0
 808a6aa:	b9c8      	cbnz	r0, 808a6e0 <mbedtls_mpi_mul_mpi+0xca>
 808a6ac:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 808a6b0:	f108 38ff 	add.w	r8, r8, #4294967295
 808a6b4:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( i++; j > 0; j-- )
 808a6b8:	b16f      	cbz	r7, 808a6d6 <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 808a6ba:	68ab      	ldr	r3, [r5, #8]
 808a6bc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 808a6c0:	f853 3008 	ldr.w	r3, [r3, r8]
 808a6c4:	4442      	add	r2, r8
 808a6c6:	68b1      	ldr	r1, [r6, #8]
 808a6c8:	4650      	mov	r0, sl
 808a6ca:	f7ff fa0f 	bl	8089aec <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i++; j > 0; j-- )
 808a6ce:	3f01      	subs	r7, #1
 808a6d0:	f1a8 0804 	sub.w	r8, r8, #4
 808a6d4:	e7f0      	b.n	808a6b8 <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
 808a6d6:	6832      	ldr	r2, [r6, #0]
 808a6d8:	682b      	ldr	r3, [r5, #0]
 808a6da:	4353      	muls	r3, r2
 808a6dc:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 808a6e0:	a803      	add	r0, sp, #12
 808a6e2:	f7ff fbd6 	bl	8089e92 <mbedtls_mpi_free>
 808a6e6:	4668      	mov	r0, sp
 808a6e8:	f7ff fbd3 	bl	8089e92 <mbedtls_mpi_free>

    return( ret );
}
 808a6ec:	4620      	mov	r0, r4
 808a6ee:	b006      	add	sp, #24
 808a6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808a6f4 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 808a6f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808a6f6:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
 808a6f8:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808a6fa:	aa01      	add	r2, sp, #4
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808a6fc:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 808a6fe:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808a700:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808a704:	f7ff ff87 	bl	808a616 <mbedtls_mpi_mul_mpi>
}
 808a708:	b005      	add	sp, #20
 808a70a:	f85d fb04 	ldr.w	pc, [sp], #4

0808a70e <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a70e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a712:	b09b      	sub	sp, #108	; 0x6c
 808a714:	9001      	str	r0, [sp, #4]
 808a716:	460f      	mov	r7, r1
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808a718:	4618      	mov	r0, r3
 808a71a:	2100      	movs	r1, #0

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808a71c:	4690      	mov	r8, r2
 808a71e:	9304      	str	r3, [sp, #16]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808a720:	f7ff fe5a 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808a724:	2800      	cmp	r0, #0
 808a726:	f000 81ad 	beq.w	808aa84 <mbedtls_mpi_div_mpi+0x376>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808a72a:	2400      	movs	r4, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808a72c:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808a72e:	9904      	ldr	r1, [sp, #16]
 808a730:	4640      	mov	r0, r8
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808a732:	950b      	str	r5, [sp, #44]	; 0x2c
    X->n = 0;
 808a734:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 808a736:	940d      	str	r4, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808a738:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
 808a73a:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 808a73c:	9410      	str	r4, [sp, #64]	; 0x40
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808a73e:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
 808a740:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 808a742:	9413      	str	r4, [sp, #76]	; 0x4c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808a744:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
 808a746:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 808a748:	9416      	str	r4, [sp, #88]	; 0x58
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808a74a:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
 808a74c:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 808a74e:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808a750:	f7ff fd62 	bl	808a218 <mbedtls_mpi_cmp_abs>
 808a754:	42a0      	cmp	r0, r4
 808a756:	da16      	bge.n	808a786 <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808a758:	9b01      	ldr	r3, [sp, #4]
 808a75a:	b90b      	cbnz	r3, 808a760 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808a75c:	b94f      	cbnz	r7, 808a772 <mbedtls_mpi_div_mpi+0x64>
 808a75e:	e010      	b.n	808a782 <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808a760:	4621      	mov	r1, r4
 808a762:	9801      	ldr	r0, [sp, #4]
 808a764:	f7ff fc01 	bl	8089f6a <mbedtls_mpi_lset>
 808a768:	4604      	mov	r4, r0
 808a76a:	2800      	cmp	r0, #0
 808a76c:	f040 8179 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>
 808a770:	e7f4      	b.n	808a75c <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808a772:	4641      	mov	r1, r8
 808a774:	4638      	mov	r0, r7
 808a776:	f7ff fbce 	bl	8089f16 <mbedtls_mpi_copy>
 808a77a:	4604      	mov	r4, r0
 808a77c:	2800      	cmp	r0, #0
 808a77e:	f040 8170 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
 808a782:	2000      	movs	r0, #0
 808a784:	e180      	b.n	808aa88 <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 808a786:	4641      	mov	r1, r8
 808a788:	a80b      	add	r0, sp, #44	; 0x2c
 808a78a:	f7ff fbc4 	bl	8089f16 <mbedtls_mpi_copy>
 808a78e:	4604      	mov	r4, r0
 808a790:	2800      	cmp	r0, #0
 808a792:	f040 8166 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 808a796:	ae0e      	add	r6, sp, #56	; 0x38
 808a798:	9904      	ldr	r1, [sp, #16]
 808a79a:	4630      	mov	r0, r6
 808a79c:	f7ff fbbb 	bl	8089f16 <mbedtls_mpi_copy>
 808a7a0:	4604      	mov	r4, r0
 808a7a2:	2800      	cmp	r0, #0
 808a7a4:	f040 815d 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808a7a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808a7ac:	a811      	add	r0, sp, #68	; 0x44
 808a7ae:	3102      	adds	r1, #2
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
 808a7b0:	950e      	str	r5, [sp, #56]	; 0x38
 808a7b2:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808a7b4:	f7ff fb83 	bl	8089ebe <mbedtls_mpi_grow>
 808a7b8:	4604      	mov	r4, r0
 808a7ba:	2800      	cmp	r0, #0
 808a7bc:	f040 8151 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 808a7c0:	4601      	mov	r1, r0
 808a7c2:	a811      	add	r0, sp, #68	; 0x44
 808a7c4:	f7ff fbd1 	bl	8089f6a <mbedtls_mpi_lset>
 808a7c8:	4604      	mov	r4, r0
 808a7ca:	2800      	cmp	r0, #0
 808a7cc:	f040 8149 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 808a7d0:	2102      	movs	r1, #2
 808a7d2:	a814      	add	r0, sp, #80	; 0x50
 808a7d4:	f7ff fb73 	bl	8089ebe <mbedtls_mpi_grow>
 808a7d8:	4604      	mov	r4, r0
 808a7da:	2800      	cmp	r0, #0
 808a7dc:	f040 8141 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 808a7e0:	2103      	movs	r1, #3
 808a7e2:	a817      	add	r0, sp, #92	; 0x5c
 808a7e4:	f7ff fb6b 	bl	8089ebe <mbedtls_mpi_grow>
 808a7e8:	4604      	mov	r4, r0
 808a7ea:	2800      	cmp	r0, #0
 808a7ec:	f040 8139 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 808a7f0:	4630      	mov	r0, r6
 808a7f2:	f7ff fc00 	bl	8089ff6 <mbedtls_mpi_bitlen>
 808a7f6:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 808a7fa:	281f      	cmp	r0, #31
 808a7fc:	d013      	beq.n	808a826 <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
 808a7fe:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808a802:	4619      	mov	r1, r3
 808a804:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
 808a806:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808a808:	f7ff fc73 	bl	808a0f2 <mbedtls_mpi_shift_l>
 808a80c:	4604      	mov	r4, r0
 808a80e:	2800      	cmp	r0, #0
 808a810:	f040 8127 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 808a814:	9903      	ldr	r1, [sp, #12]
 808a816:	4630      	mov	r0, r6
 808a818:	f7ff fc6b 	bl	808a0f2 <mbedtls_mpi_shift_l>
 808a81c:	4604      	mov	r4, r0
 808a81e:	2800      	cmp	r0, #0
 808a820:	f040 811f 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>
 808a824:	e000      	b.n	808a828 <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
 808a826:	9403      	str	r4, [sp, #12]

    n = X.n - 1;
 808a828:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
 808a82a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
 808a82e:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 808a832:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808a836:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
 808a83a:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808a83c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 808a840:	4619      	mov	r1, r3
 808a842:	4630      	mov	r0, r6
 808a844:	9302      	str	r3, [sp, #8]
 808a846:	f7ff fc54 	bl	808a0f2 <mbedtls_mpi_shift_l>
 808a84a:	4604      	mov	r4, r0
 808a84c:	2800      	cmp	r0, #0
 808a84e:	f040 8108 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
 808a852:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 808a856:	4631      	mov	r1, r6
 808a858:	a80b      	add	r0, sp, #44	; 0x2c
 808a85a:	f7ff fd78 	bl	808a34e <mbedtls_mpi_cmp_mpi>
 808a85e:	2800      	cmp	r0, #0
 808a860:	db0e      	blt.n	808a880 <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
 808a862:	9913      	ldr	r1, [sp, #76]	; 0x4c
 808a864:	f851 200b 	ldr.w	r2, [r1, fp]
 808a868:	3201      	adds	r2, #1
 808a86a:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 808a86e:	a90b      	add	r1, sp, #44	; 0x2c
 808a870:	4632      	mov	r2, r6
 808a872:	4608      	mov	r0, r1
 808a874:	f7ff fe81 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808a878:	4604      	mov	r4, r0
 808a87a:	2800      	cmp	r0, #0
 808a87c:	d0eb      	beq.n	808a856 <mbedtls_mpi_div_mpi+0x148>
 808a87e:	e0f0      	b.n	808aa62 <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 808a880:	9902      	ldr	r1, [sp, #8]
 808a882:	4630      	mov	r0, r6
 808a884:	f7ff fc84 	bl	808a190 <mbedtls_mpi_shift_r>
 808a888:	4604      	mov	r4, r0
 808a88a:	2800      	cmp	r0, #0
 808a88c:	f040 80e9 	bne.w	808aa62 <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
 808a890:	9b00      	ldr	r3, [sp, #0]
 808a892:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
 808a896:	009b      	lsls	r3, r3, #2
 808a898:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808a89a:	3b04      	subs	r3, #4
 808a89c:	9308      	str	r3, [sp, #32]
 808a89e:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
 808a8a2:	3b01      	subs	r3, #1
 808a8a4:	3e01      	subs	r6, #1
 808a8a6:	ebca 0606 	rsb	r6, sl, r6
 808a8aa:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 808a8ae:	ebca 0a03 	rsb	sl, sl, r3
 808a8b2:	ea4f 134a 	mov.w	r3, sl, lsl #5
 808a8b6:	3d02      	subs	r5, #2
 808a8b8:	00b6      	lsls	r6, r6, #2
 808a8ba:	9302      	str	r3, [sp, #8]
 808a8bc:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808a8be:	9b00      	ldr	r3, [sp, #0]
 808a8c0:	4599      	cmp	r9, r3
 808a8c2:	f240 80a8 	bls.w	808aa16 <mbedtls_mpi_div_mpi+0x308>
    {
        if( X.p[i] >= Y.p[t] )
 808a8c6:	9805      	ldr	r0, [sp, #20]
 808a8c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 808a8ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 808a8cc:	1d2b      	adds	r3, r5, #4
 808a8ce:	5812      	ldr	r2, [r2, r0]
 808a8d0:	9309      	str	r3, [sp, #36]	; 0x24
 808a8d2:	58cb      	ldr	r3, [r1, r3]
 808a8d4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 808a8d6:	4293      	cmp	r3, r2
 808a8d8:	d303      	bcc.n	808a8e2 <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
 808a8da:	f04f 33ff 	mov.w	r3, #4294967295
 808a8de:	5183      	str	r3, [r0, r6]
 808a8e0:	e01b      	b.n	808a91a <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 808a8e2:	eb00 0a06 	add.w	sl, r0, r6
 808a8e6:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 808a8e8:	b19a      	cbz	r2, 808a912 <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 808a8ea:	9307      	str	r3, [sp, #28]
 808a8ec:	2300      	movs	r3, #0
 808a8ee:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
 808a8f0:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 808a8f4:	ea4b 0b00 	orr.w	fp, fp, r0
 808a8f8:	4658      	mov	r0, fp
 808a8fa:	4661      	mov	r1, ip
 808a8fc:	f005 fcc4 	bl	8090288 <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
 808a900:	2300      	movs	r3, #0
 808a902:	f04f 32ff 	mov.w	r2, #4294967295
 808a906:	428b      	cmp	r3, r1
 808a908:	bf08      	it	eq
 808a90a:	4282      	cmpeq	r2, r0
 808a90c:	d203      	bcs.n	808a916 <mbedtls_mpi_div_mpi+0x208>
 808a90e:	4610      	mov	r0, r2
 808a910:	e001      	b.n	808a916 <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
 808a912:	f04f 30ff 	mov.w	r0, #4294967295
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
 808a916:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
 808a91a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808a91c:	f1a5 0a04 	sub.w	sl, r5, #4
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
 808a920:	5993      	ldr	r3, [r2, r6]
 808a922:	3301      	adds	r3, #1
 808a924:	5193      	str	r3, [r2, r6]
        do
        {
            Z.p[i - t - 1]--;
 808a926:	9a13      	ldr	r2, [sp, #76]	; 0x4c

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808a928:	2100      	movs	r1, #0
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808a92a:	5993      	ldr	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808a92c:	a814      	add	r0, sp, #80	; 0x50
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808a92e:	3b01      	subs	r3, #1
 808a930:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808a932:	f7ff fb1a 	bl	8089f6a <mbedtls_mpi_lset>
 808a936:	2800      	cmp	r0, #0
 808a938:	f040 8090 	bne.w	808aa5c <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808a93c:	9b00      	ldr	r3, [sp, #0]
 808a93e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808a940:	b11b      	cbz	r3, 808a94a <mbedtls_mpi_div_mpi+0x23c>
 808a942:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808a944:	9908      	ldr	r1, [sp, #32]
 808a946:	585b      	ldr	r3, [r3, r1]
 808a948:	e000      	b.n	808a94c <mbedtls_mpi_div_mpi+0x23e>
 808a94a:	9b00      	ldr	r3, [sp, #0]
 808a94c:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 808a94e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808a950:	9a05      	ldr	r2, [sp, #20]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808a952:	a914      	add	r1, sp, #80	; 0x50
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808a954:	589a      	ldr	r2, [r3, r2]
 808a956:	9b16      	ldr	r3, [sp, #88]	; 0x58
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808a958:	4608      	mov	r0, r1
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808a95a:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808a95c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808a95e:	599a      	ldr	r2, [r3, r6]
 808a960:	f7ff fec8 	bl	808a6f4 <mbedtls_mpi_mul_int>
 808a964:	4601      	mov	r1, r0
 808a966:	2800      	cmp	r0, #0
 808a968:	d17a      	bne.n	808aa60 <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 808a96a:	a817      	add	r0, sp, #92	; 0x5c
 808a96c:	f7ff fafd 	bl	8089f6a <mbedtls_mpi_lset>
 808a970:	2800      	cmp	r0, #0
 808a972:	d173      	bne.n	808aa5c <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808a974:	f1b9 0f01 	cmp.w	r9, #1
 808a978:	bf18      	it	ne
 808a97a:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
 808a97c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808a97e:	bf18      	it	ne
 808a980:	f852 000a 	ldrne.w	r0, [r2, sl]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808a984:	a917      	add	r1, sp, #92	; 0x5c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808a986:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808a988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808a98a:	a814      	add	r0, sp, #80	; 0x50
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808a98c:	595a      	ldr	r2, [r3, r5]
 808a98e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808a990:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
 808a992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808a994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808a996:	589a      	ldr	r2, [r3, r2]
 808a998:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808a99a:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808a99c:	f7ff fcd7 	bl	808a34e <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
 808a9a0:	2800      	cmp	r0, #0
 808a9a2:	dcc0      	bgt.n	808a926 <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 808a9a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808a9a6:	a90e      	add	r1, sp, #56	; 0x38
 808a9a8:	599a      	ldr	r2, [r3, r6]
 808a9aa:	a814      	add	r0, sp, #80	; 0x50
 808a9ac:	f7ff fea2 	bl	808a6f4 <mbedtls_mpi_mul_int>
 808a9b0:	2800      	cmp	r0, #0
 808a9b2:	d153      	bne.n	808aa5c <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 808a9b4:	9902      	ldr	r1, [sp, #8]
 808a9b6:	a814      	add	r0, sp, #80	; 0x50
 808a9b8:	f7ff fb9b 	bl	808a0f2 <mbedtls_mpi_shift_l>
 808a9bc:	2800      	cmp	r0, #0
 808a9be:	d14d      	bne.n	808aa5c <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 808a9c0:	a90b      	add	r1, sp, #44	; 0x2c
 808a9c2:	4608      	mov	r0, r1
 808a9c4:	aa14      	add	r2, sp, #80	; 0x50
 808a9c6:	f7ff fdd8 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808a9ca:	4601      	mov	r1, r0
 808a9cc:	2800      	cmp	r0, #0
 808a9ce:	d147      	bne.n	808aa60 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 808a9d0:	a80b      	add	r0, sp, #44	; 0x2c
 808a9d2:	f7ff fd01 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808a9d6:	2800      	cmp	r0, #0
 808a9d8:	da15      	bge.n	808aa06 <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 808a9da:	a90e      	add	r1, sp, #56	; 0x38
 808a9dc:	a814      	add	r0, sp, #80	; 0x50
 808a9de:	f7ff fa9a 	bl	8089f16 <mbedtls_mpi_copy>
 808a9e2:	2800      	cmp	r0, #0
 808a9e4:	d13a      	bne.n	808aa5c <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 808a9e6:	9902      	ldr	r1, [sp, #8]
 808a9e8:	a814      	add	r0, sp, #80	; 0x50
 808a9ea:	f7ff fb82 	bl	808a0f2 <mbedtls_mpi_shift_l>
 808a9ee:	2800      	cmp	r0, #0
 808a9f0:	d134      	bne.n	808aa5c <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 808a9f2:	a90b      	add	r1, sp, #44	; 0x2c
 808a9f4:	aa14      	add	r2, sp, #80	; 0x50
 808a9f6:	4608      	mov	r0, r1
 808a9f8:	f7ff fd9e 	bl	808a538 <mbedtls_mpi_add_mpi>
 808a9fc:	bb70      	cbnz	r0, 808aa5c <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
 808a9fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808aa00:	5993      	ldr	r3, [r2, r6]
 808aa02:	3b01      	subs	r3, #1
 808aa04:	5193      	str	r3, [r2, r6]
 808aa06:	9b02      	ldr	r3, [sp, #8]
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808aa08:	f109 39ff 	add.w	r9, r9, #4294967295
 808aa0c:	3b20      	subs	r3, #32
 808aa0e:	3e04      	subs	r6, #4
 808aa10:	9302      	str	r3, [sp, #8]
 808aa12:	3d04      	subs	r5, #4
 808aa14:	e753      	b.n	808a8be <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
 808aa16:	9b01      	ldr	r3, [sp, #4]
 808aa18:	b15b      	cbz	r3, 808aa32 <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 808aa1a:	a911      	add	r1, sp, #68	; 0x44
 808aa1c:	4618      	mov	r0, r3
 808aa1e:	f7ff fa7a 	bl	8089f16 <mbedtls_mpi_copy>
 808aa22:	b9d8      	cbnz	r0, 808aa5c <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
 808aa24:	9b04      	ldr	r3, [sp, #16]
 808aa26:	f8d8 2000 	ldr.w	r2, [r8]
 808aa2a:	681b      	ldr	r3, [r3, #0]
 808aa2c:	4353      	muls	r3, r2
 808aa2e:	9a01      	ldr	r2, [sp, #4]
 808aa30:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
 808aa32:	b1b7      	cbz	r7, 808aa62 <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 808aa34:	9903      	ldr	r1, [sp, #12]
 808aa36:	a80b      	add	r0, sp, #44	; 0x2c
 808aa38:	f7ff fbaa 	bl	808a190 <mbedtls_mpi_shift_r>
 808aa3c:	b970      	cbnz	r0, 808aa5c <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
 808aa3e:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808aa42:	a90b      	add	r1, sp, #44	; 0x2c
 808aa44:	4638      	mov	r0, r7
    }

    if( R != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
        X.s = A->s;
 808aa46:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808aa48:	f7ff fa65 	bl	8089f16 <mbedtls_mpi_copy>
 808aa4c:	4601      	mov	r1, r0
 808aa4e:	b938      	cbnz	r0, 808aa60 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 808aa50:	4638      	mov	r0, r7
 808aa52:	f7ff fcc1 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808aa56:	b920      	cbnz	r0, 808aa62 <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
 808aa58:	2301      	movs	r3, #1
 808aa5a:	603b      	str	r3, [r7, #0]
 808aa5c:	4604      	mov	r4, r0
 808aa5e:	e000      	b.n	808aa62 <mbedtls_mpi_div_mpi+0x354>
 808aa60:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 808aa62:	a80b      	add	r0, sp, #44	; 0x2c
 808aa64:	f7ff fa15 	bl	8089e92 <mbedtls_mpi_free>
 808aa68:	a80e      	add	r0, sp, #56	; 0x38
 808aa6a:	f7ff fa12 	bl	8089e92 <mbedtls_mpi_free>
 808aa6e:	a811      	add	r0, sp, #68	; 0x44
 808aa70:	f7ff fa0f 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 808aa74:	a814      	add	r0, sp, #80	; 0x50
 808aa76:	f7ff fa0c 	bl	8089e92 <mbedtls_mpi_free>
 808aa7a:	a817      	add	r0, sp, #92	; 0x5c
 808aa7c:	f7ff fa09 	bl	8089e92 <mbedtls_mpi_free>

    return( ret );
 808aa80:	4620      	mov	r0, r4
 808aa82:	e001      	b.n	808aa88 <mbedtls_mpi_div_mpi+0x37a>
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 808aa84:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
 808aa88:	b01b      	add	sp, #108	; 0x6c
 808aa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808aa8e <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808aa8e:	b570      	push	{r4, r5, r6, lr}
 808aa90:	4604      	mov	r4, r0
 808aa92:	460e      	mov	r6, r1
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808aa94:	4610      	mov	r0, r2
 808aa96:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808aa98:	4615      	mov	r5, r2
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808aa9a:	f7ff fc9d 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808aa9e:	2800      	cmp	r0, #0
 808aaa0:	db22      	blt.n	808aae8 <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 808aaa2:	462b      	mov	r3, r5
 808aaa4:	4632      	mov	r2, r6
 808aaa6:	4621      	mov	r1, r4
 808aaa8:	2000      	movs	r0, #0
 808aaaa:	f7ff fe30 	bl	808a70e <mbedtls_mpi_div_mpi>
 808aaae:	b9f8      	cbnz	r0, 808aaf0 <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 808aab0:	2100      	movs	r1, #0
 808aab2:	4620      	mov	r0, r4
 808aab4:	f7ff fc90 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808aab8:	2800      	cmp	r0, #0
 808aaba:	da07      	bge.n	808aacc <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 808aabc:	462a      	mov	r2, r5
 808aabe:	4621      	mov	r1, r4
 808aac0:	4620      	mov	r0, r4
 808aac2:	f7ff fd39 	bl	808a538 <mbedtls_mpi_add_mpi>
 808aac6:	2800      	cmp	r0, #0
 808aac8:	d0f2      	beq.n	808aab0 <mbedtls_mpi_mod_mpi+0x22>
 808aaca:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 808aacc:	4629      	mov	r1, r5
 808aace:	4620      	mov	r0, r4
 808aad0:	f7ff fc3d 	bl	808a34e <mbedtls_mpi_cmp_mpi>
 808aad4:	2800      	cmp	r0, #0
 808aad6:	db0a      	blt.n	808aaee <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 808aad8:	462a      	mov	r2, r5
 808aada:	4621      	mov	r1, r4
 808aadc:	4620      	mov	r0, r4
 808aade:	f7ff fd4c 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808aae2:	2800      	cmp	r0, #0
 808aae4:	d0f2      	beq.n	808aacc <mbedtls_mpi_mod_mpi+0x3e>
 808aae6:	bd70      	pop	{r4, r5, r6, pc}
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808aae8:	f06f 0009 	mvn.w	r0, #9
 808aaec:	bd70      	pop	{r4, r5, r6, pc}
 808aaee:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
 808aaf0:	bd70      	pop	{r4, r5, r6, pc}

0808aaf2 <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808aaf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808aaf6:	4606      	mov	r6, r0
 808aaf8:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 808aafc:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808aafe:	4618      	mov	r0, r3
 808ab00:	2100      	movs	r1, #0

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808ab02:	9202      	str	r2, [sp, #8]
 808ab04:	461d      	mov	r5, r3
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808ab06:	f7ff fc67 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808ab0a:	2800      	cmp	r0, #0
 808ab0c:	dd05      	ble.n	808ab1a <mbedtls_mpi_exp_mod+0x28>
 808ab0e:	68ab      	ldr	r3, [r5, #8]
 808ab10:	f8d3 8000 	ldr.w	r8, [r3]
 808ab14:	f018 0f01 	tst.w	r8, #1
 808ab18:	d102      	bne.n	808ab20 <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808ab1a:	f06f 0003 	mvn.w	r0, #3
 808ab1e:	e203      	b.n	808af28 <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 808ab20:	2100      	movs	r1, #0
 808ab22:	9802      	ldr	r0, [sp, #8]
 808ab24:	f7ff fc58 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808ab28:	2800      	cmp	r0, #0
 808ab2a:	dbf6      	blt.n	808ab1a <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
 808ab2c:	f108 0402 	add.w	r4, r8, #2
 808ab30:	0064      	lsls	r4, r4, #1
 808ab32:	f004 0408 	and.w	r4, r4, #8
 808ab36:	4444      	add	r4, r8
 808ab38:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
 808ab3a:	fb04 f308 	mul.w	r3, r4, r8
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808ab3e:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 808ab40:	f1c3 0302 	rsb	r3, r3, #2
 808ab44:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808ab48:	d1f7      	bne.n	808ab3a <mbedtls_mpi_exp_mod+0x48>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808ab4a:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808ab4c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 808ab50:	a814      	add	r0, sp, #80	; 0x50
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808ab52:	9308      	str	r3, [sp, #32]
    X->n = 0;
 808ab54:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 808ab56:	910a      	str	r1, [sp, #40]	; 0x28
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808ab58:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 808ab5a:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 808ab5c:	910d      	str	r1, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808ab5e:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 808ab60:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 808ab62:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808ab64:	f005 fd6b 	bl	809063e <memset>

    i = mbedtls_mpi_bitlen( E );
 808ab68:	9802      	ldr	r0, [sp, #8]
 808ab6a:	f7ff fa44 	bl	8089ff6 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
 808ab6e:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 808ab72:	d20a      	bcs.n	808ab8a <mbedtls_mpi_exp_mod+0x98>
 808ab74:	28ef      	cmp	r0, #239	; 0xef
 808ab76:	d80b      	bhi.n	808ab90 <mbedtls_mpi_exp_mod+0x9e>
 808ab78:	284f      	cmp	r0, #79	; 0x4f
 808ab7a:	d80c      	bhi.n	808ab96 <mbedtls_mpi_exp_mod+0xa4>
 808ab7c:	2818      	cmp	r0, #24
 808ab7e:	bf34      	ite	cc
 808ab80:	f04f 0b01 	movcc.w	fp, #1
 808ab84:	f04f 0b03 	movcs.w	fp, #3
 808ab88:	e007      	b.n	808ab9a <mbedtls_mpi_exp_mod+0xa8>
 808ab8a:	f04f 0b06 	mov.w	fp, #6
 808ab8e:	e004      	b.n	808ab9a <mbedtls_mpi_exp_mod+0xa8>
 808ab90:	f04f 0b05 	mov.w	fp, #5
 808ab94:	e001      	b.n	808ab9a <mbedtls_mpi_exp_mod+0xa8>
 808ab96:	f04f 0b04 	mov.w	fp, #4

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808ab9a:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808ab9c:	4630      	mov	r0, r6
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808ab9e:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808aba2:	4641      	mov	r1, r8
 808aba4:	f7ff f98b 	bl	8089ebe <mbedtls_mpi_grow>
 808aba8:	4603      	mov	r3, r0
 808abaa:	2800      	cmp	r0, #0
 808abac:	f040 8194 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 808abb0:	4641      	mov	r1, r8
 808abb2:	a817      	add	r0, sp, #92	; 0x5c
 808abb4:	f7ff f983 	bl	8089ebe <mbedtls_mpi_grow>
 808abb8:	4603      	mov	r3, r0
 808abba:	2800      	cmp	r0, #0
 808abbc:	f040 818c 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 808abc0:	ea4f 0148 	mov.w	r1, r8, lsl #1
 808abc4:	a80b      	add	r0, sp, #44	; 0x2c
 808abc6:	f7ff f97a 	bl	8089ebe <mbedtls_mpi_grow>
 808abca:	4603      	mov	r3, r0
 808abcc:	2800      	cmp	r0, #0
 808abce:	f040 8183 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 808abd2:	683b      	ldr	r3, [r7, #0]
 808abd4:	9304      	str	r3, [sp, #16]
    if( neg )
 808abd6:	3301      	adds	r3, #1
 808abd8:	d10a      	bne.n	808abf0 <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 808abda:	4639      	mov	r1, r7
 808abdc:	a80e      	add	r0, sp, #56	; 0x38
 808abde:	f7ff f99a 	bl	8089f16 <mbedtls_mpi_copy>
 808abe2:	4603      	mov	r3, r0
 808abe4:	2800      	cmp	r0, #0
 808abe6:	f040 8177 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
 808abea:	2301      	movs	r3, #1
 808abec:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 808abee:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 808abf0:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808abf4:	b10b      	cbz	r3, 808abfa <mbedtls_mpi_exp_mod+0x108>
 808abf6:	689b      	ldr	r3, [r3, #8]
 808abf8:	bb2b      	cbnz	r3, 808ac46 <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 808abfa:	2101      	movs	r1, #1
 808abfc:	a808      	add	r0, sp, #32
 808abfe:	f7ff f9b4 	bl	8089f6a <mbedtls_mpi_lset>
 808ac02:	4603      	mov	r3, r0
 808ac04:	2800      	cmp	r0, #0
 808ac06:	f040 8167 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 808ac0a:	6869      	ldr	r1, [r5, #4]
 808ac0c:	a808      	add	r0, sp, #32
 808ac0e:	0189      	lsls	r1, r1, #6
 808ac10:	f7ff fa6f 	bl	808a0f2 <mbedtls_mpi_shift_l>
 808ac14:	4603      	mov	r3, r0
 808ac16:	2800      	cmp	r0, #0
 808ac18:	f040 815e 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 808ac1c:	a908      	add	r1, sp, #32
 808ac1e:	462a      	mov	r2, r5
 808ac20:	4608      	mov	r0, r1
 808ac22:	f7ff ff34 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 808ac26:	4603      	mov	r3, r0
 808ac28:	2800      	cmp	r0, #0
 808ac2a:	f040 8155 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
 808ac2e:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808ac32:	b183      	cbz	r3, 808ac56 <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 808ac34:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808ac38:	ab08      	add	r3, sp, #32
 808ac3a:	cb03      	ldmia	r3!, {r0, r1}
 808ac3c:	6010      	str	r0, [r2, #0]
 808ac3e:	6818      	ldr	r0, [r3, #0]
 808ac40:	6051      	str	r1, [r2, #4]
 808ac42:	6090      	str	r0, [r2, #8]
 808ac44:	e007      	b.n	808ac56 <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 808ac46:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808ac4a:	ab08      	add	r3, sp, #32
 808ac4c:	6810      	ldr	r0, [r2, #0]
 808ac4e:	6851      	ldr	r1, [r2, #4]
 808ac50:	c303      	stmia	r3!, {r0, r1}
 808ac52:	6890      	ldr	r0, [r2, #8]
 808ac54:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 808ac56:	4629      	mov	r1, r5
 808ac58:	4638      	mov	r0, r7
 808ac5a:	f7ff fb78 	bl	808a34e <mbedtls_mpi_cmp_mpi>
 808ac5e:	2800      	cmp	r0, #0
 808ac60:	db18      	blt.n	808ac94 <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 808ac62:	462a      	mov	r2, r5
 808ac64:	4639      	mov	r1, r7
 808ac66:	a817      	add	r0, sp, #92	; 0x5c
 808ac68:	f7ff ff11 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 808ac6c:	4603      	mov	r3, r0
 808ac6e:	2800      	cmp	r0, #0
 808ac70:	f040 8132 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
 808ac74:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 808ac76:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 808ac7a:	4623      	mov	r3, r4
 808ac7c:	f8cd 9000 	str.w	r9, [sp]
 808ac80:	462a      	mov	r2, r5
 808ac82:	a908      	add	r1, sp, #32
 808ac84:	a817      	add	r0, sp, #92	; 0x5c
 808ac86:	f7ff fafe 	bl	808a286 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808ac8a:	4603      	mov	r3, r0
 808ac8c:	2800      	cmp	r0, #0
 808ac8e:	f040 8123 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
 808ac92:	e004      	b.n	808ac9e <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 808ac94:	4639      	mov	r1, r7
 808ac96:	a817      	add	r0, sp, #92	; 0x5c
 808ac98:	f7ff f93d 	bl	8089f16 <mbedtls_mpi_copy>
 808ac9c:	e7e6      	b.n	808ac6c <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 808ac9e:	a908      	add	r1, sp, #32
 808aca0:	4630      	mov	r0, r6
 808aca2:	f7ff f938 	bl	8089f16 <mbedtls_mpi_copy>
 808aca6:	4603      	mov	r3, r0
 808aca8:	2800      	cmp	r0, #0
 808acaa:	f040 8115 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808acae:	ab07      	add	r3, sp, #28
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808acb0:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808acb2:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808acb4:	f8cd 9000 	str.w	r9, [sp]
 808acb8:	4623      	mov	r3, r4
 808acba:	462a      	mov	r2, r5
 808acbc:	a911      	add	r1, sp, #68	; 0x44
 808acbe:	4630      	mov	r0, r6
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808acc0:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808acc2:	9711      	str	r7, [sp, #68]	; 0x44
 808acc4:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
 808acc6:	f7ff fade 	bl	808a286 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808acca:	4603      	mov	r3, r0
 808accc:	2800      	cmp	r0, #0
 808acce:	f040 8103 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
 808acd2:	45bb      	cmp	fp, r7
 808acd4:	d05b      	beq.n	808ad8e <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 808acd6:	f10b 33ff 	add.w	r3, fp, #4294967295
 808acda:	9303      	str	r3, [sp, #12]
 808acdc:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 808acde:	f04f 080c 	mov.w	r8, #12
 808ace2:	ab14      	add	r3, sp, #80	; 0x50
 808ace4:	fb08 3807 	mla	r8, r8, r7, r3
 808ace8:	6869      	ldr	r1, [r5, #4]
 808acea:	4640      	mov	r0, r8
 808acec:	3101      	adds	r1, #1
 808acee:	f7ff f8e6 	bl	8089ebe <mbedtls_mpi_grow>
 808acf2:	4603      	mov	r3, r0
 808acf4:	2800      	cmp	r0, #0
 808acf6:	f040 80ef 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 808acfa:	a917      	add	r1, sp, #92	; 0x5c
 808acfc:	4640      	mov	r0, r8
 808acfe:	f7ff f90a 	bl	8089f16 <mbedtls_mpi_copy>
 808ad02:	4603      	mov	r3, r0
 808ad04:	2800      	cmp	r0, #0
 808ad06:	f040 80e7 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
 808ad0a:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 808ad0c:	4623      	mov	r3, r4
 808ad0e:	f8cd 9000 	str.w	r9, [sp]
 808ad12:	462a      	mov	r2, r5
 808ad14:	4641      	mov	r1, r8
 808ad16:	4640      	mov	r0, r8
 808ad18:	f7ff fab5 	bl	808a286 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808ad1c:	4603      	mov	r3, r0
 808ad1e:	2800      	cmp	r0, #0
 808ad20:	f040 80da 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
 808ad24:	9b03      	ldr	r3, [sp, #12]
 808ad26:	f10a 0a01 	add.w	sl, sl, #1
 808ad2a:	4553      	cmp	r3, sl
 808ad2c:	d8ee      	bhi.n	808ad0c <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808ad2e:	3701      	adds	r7, #1
 808ad30:	f04f 080c 	mov.w	r8, #12
 808ad34:	ab14      	add	r3, sp, #80	; 0x50
 808ad36:	fb08 3807 	mla	r8, r8, r7, r3
 808ad3a:	f04f 0901 	mov.w	r9, #1
 808ad3e:	fa09 f90b 	lsl.w	r9, r9, fp
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808ad42:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808ad46:	454f      	cmp	r7, r9
 808ad48:	d221      	bcs.n	808ad8e <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 808ad4a:	6869      	ldr	r1, [r5, #4]
 808ad4c:	4640      	mov	r0, r8
 808ad4e:	3101      	adds	r1, #1
 808ad50:	f7ff f8b5 	bl	8089ebe <mbedtls_mpi_grow>
 808ad54:	4603      	mov	r3, r0
 808ad56:	2800      	cmp	r0, #0
 808ad58:	f040 80be 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 808ad5c:	f1a8 010c 	sub.w	r1, r8, #12
 808ad60:	4640      	mov	r0, r8
 808ad62:	f7ff f8d8 	bl	8089f16 <mbedtls_mpi_copy>
 808ad66:	4603      	mov	r3, r0
 808ad68:	2800      	cmp	r0, #0
 808ad6a:	f040 80b5 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808ad6e:	4623      	mov	r3, r4
 808ad70:	4640      	mov	r0, r8
 808ad72:	f8cd a000 	str.w	sl, [sp]
 808ad76:	462a      	mov	r2, r5
 808ad78:	a917      	add	r1, sp, #92	; 0x5c
 808ad7a:	f7ff fa84 	bl	808a286 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808ad7e:	f108 080c 	add.w	r8, r8, #12
 808ad82:	4603      	mov	r3, r0
 808ad84:	2800      	cmp	r0, #0
 808ad86:	f040 80a7 	bne.w	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808ad8a:	3701      	adds	r7, #1
 808ad8c:	e7db      	b.n	808ad46 <mbedtls_mpi_exp_mod+0x254>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 808ad8e:	2700      	movs	r7, #0
        }
    }

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
 808ad90:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
 808ad92:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
 808ad94:	46b8      	mov	r8, r7

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 808ad96:	9b02      	ldr	r3, [sp, #8]
 808ad98:	685b      	ldr	r3, [r3, #4]
 808ad9a:	9303      	str	r3, [sp, #12]
    wbits   = 0;
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
 808ad9c:	f1ba 0f00 	cmp.w	sl, #0
 808ada0:	d10e      	bne.n	808adc0 <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
 808ada2:	9b03      	ldr	r3, [sp, #12]
 808ada4:	b93b      	cbnz	r3, 808adb6 <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808ada6:	2301      	movs	r3, #1
 808ada8:	fa03 f30b 	lsl.w	r3, r3, fp
 808adac:	9305      	str	r3, [sp, #20]
 808adae:	9f03      	ldr	r7, [sp, #12]
 808adb0:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 808adb4:	e05e      	b.n	808ae74 <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808adb6:	9b03      	ldr	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 808adb8:	f04f 0a20 	mov.w	sl, #32
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808adbc:	3b01      	subs	r3, #1
 808adbe:	9303      	str	r3, [sp, #12]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808adc0:	9b02      	ldr	r3, [sp, #8]
 808adc2:	9a03      	ldr	r2, [sp, #12]
 808adc4:	689b      	ldr	r3, [r3, #8]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
 808adc6:	f10a 3aff 	add.w	sl, sl, #4294967295

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808adca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808adce:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 808add2:	f013 0301 	ands.w	r3, r3, #1
 808add6:	d10f      	bne.n	808adf8 <mbedtls_mpi_exp_mod+0x306>
 808add8:	2f00      	cmp	r7, #0
 808adda:	d0df      	beq.n	808ad9c <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
 808addc:	2f01      	cmp	r7, #1
 808adde:	d10b      	bne.n	808adf8 <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808ade0:	ab0b      	add	r3, sp, #44	; 0x2c
 808ade2:	9300      	str	r3, [sp, #0]
 808ade4:	462a      	mov	r2, r5
 808ade6:	4623      	mov	r3, r4
 808ade8:	4631      	mov	r1, r6
 808adea:	4630      	mov	r0, r6
 808adec:	f7ff fa4b 	bl	808a286 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808adf0:	4603      	mov	r3, r0
 808adf2:	2800      	cmp	r0, #0
 808adf4:	d0d2      	beq.n	808ad9c <mbedtls_mpi_exp_mod+0x2aa>
 808adf6:	e06f      	b.n	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
 808adf8:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
 808adfc:	ebc9 020b 	rsb	r2, r9, fp
 808ae00:	4093      	lsls	r3, r2

        if( nbits == wsize )
 808ae02:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
 808ae04:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
 808ae08:	d001      	beq.n	808ae0e <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
 808ae0a:	2702      	movs	r7, #2
 808ae0c:	e7c6      	b.n	808ad9c <mbedtls_mpi_exp_mod+0x2aa>
 808ae0e:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808ae10:	ab0b      	add	r3, sp, #44	; 0x2c
 808ae12:	9300      	str	r3, [sp, #0]
 808ae14:	462a      	mov	r2, r5
 808ae16:	4623      	mov	r3, r4
 808ae18:	4631      	mov	r1, r6
 808ae1a:	4630      	mov	r0, r6
 808ae1c:	f7ff fa33 	bl	808a286 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808ae20:	4603      	mov	r3, r0
 808ae22:	2800      	cmp	r0, #0
 808ae24:	d158      	bne.n	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 808ae26:	3701      	adds	r7, #1
 808ae28:	45bb      	cmp	fp, r7
 808ae2a:	d1f1      	bne.n	808ae10 <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 808ae2c:	ab0b      	add	r3, sp, #44	; 0x2c
 808ae2e:	a814      	add	r0, sp, #80	; 0x50
 808ae30:	210c      	movs	r1, #12
 808ae32:	9300      	str	r3, [sp, #0]
 808ae34:	fb01 0108 	mla	r1, r1, r8, r0
 808ae38:	4623      	mov	r3, r4
 808ae3a:	462a      	mov	r2, r5
 808ae3c:	4630      	mov	r0, r6
 808ae3e:	f7ff fa22 	bl	808a286 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808ae42:	4603      	mov	r3, r0
 808ae44:	2800      	cmp	r0, #0
 808ae46:	d147      	bne.n	808aed8 <mbedtls_mpi_exp_mod+0x3e6>

            state--;
 808ae48:	2701      	movs	r7, #1
            nbits = 0;
 808ae4a:	4680      	mov	r8, r0
            wbits = 0;
 808ae4c:	4681      	mov	r9, r0
 808ae4e:	e7a5      	b.n	808ad9c <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808ae50:	4623      	mov	r3, r4
 808ae52:	f8cd a000 	str.w	sl, [sp]
 808ae56:	462a      	mov	r2, r5
 808ae58:	4631      	mov	r1, r6
 808ae5a:	4630      	mov	r0, r6
 808ae5c:	f7ff fa13 	bl	808a286 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808ae60:	4603      	mov	r3, r0
 808ae62:	2800      	cmp	r0, #0
 808ae64:	d138      	bne.n	808aed8 <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808ae66:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
 808ae68:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
 808ae6c:	ea18 0f03 	tst.w	r8, r3
 808ae70:	d103      	bne.n	808ae7a <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 808ae72:	3701      	adds	r7, #1
 808ae74:	454f      	cmp	r7, r9
 808ae76:	d1eb      	bne.n	808ae50 <mbedtls_mpi_exp_mod+0x35e>
 808ae78:	e00b      	b.n	808ae92 <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 808ae7a:	4623      	mov	r3, r4
 808ae7c:	f8cd a000 	str.w	sl, [sp]
 808ae80:	462a      	mov	r2, r5
 808ae82:	a917      	add	r1, sp, #92	; 0x5c
 808ae84:	4630      	mov	r0, r6
 808ae86:	f7ff f9fe 	bl	808a286 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808ae8a:	4603      	mov	r3, r0
 808ae8c:	2800      	cmp	r0, #0
 808ae8e:	d0f0      	beq.n	808ae72 <mbedtls_mpi_exp_mod+0x380>
 808ae90:	e022      	b.n	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808ae92:	2301      	movs	r3, #1
 808ae94:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808ae96:	9311      	str	r3, [sp, #68]	; 0x44
 808ae98:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 808ae9a:	ab07      	add	r3, sp, #28
 808ae9c:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808ae9e:	f8cd a000 	str.w	sl, [sp]
 808aea2:	4623      	mov	r3, r4
 808aea4:	462a      	mov	r2, r5
 808aea6:	a911      	add	r1, sp, #68	; 0x44
 808aea8:	4630      	mov	r0, r6
 808aeaa:	f7ff f9ec 	bl	808a286 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808aeae:	4603      	mov	r3, r0
 808aeb0:	b990      	cbnz	r0, 808aed8 <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 808aeb2:	9a04      	ldr	r2, [sp, #16]
 808aeb4:	3201      	adds	r2, #1
 808aeb6:	d10f      	bne.n	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
 808aeb8:	9a02      	ldr	r2, [sp, #8]
 808aeba:	6852      	ldr	r2, [r2, #4]
 808aebc:	b162      	cbz	r2, 808aed8 <mbedtls_mpi_exp_mod+0x3e6>
 808aebe:	9a02      	ldr	r2, [sp, #8]
 808aec0:	6892      	ldr	r2, [r2, #8]
 808aec2:	6812      	ldr	r2, [r2, #0]
 808aec4:	07d2      	lsls	r2, r2, #31
 808aec6:	d507      	bpl.n	808aed8 <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
 808aec8:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808aeca:	4632      	mov	r2, r6
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    {
        X->s = -1;
 808aecc:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808aece:	4629      	mov	r1, r5
 808aed0:	4630      	mov	r0, r6
 808aed2:	f7ff fb31 	bl	808a538 <mbedtls_mpi_add_mpi>
 808aed6:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808aed8:	2201      	movs	r2, #1
 808aeda:	f10b 34ff 	add.w	r4, fp, #4294967295
 808aede:	fa02 f404 	lsl.w	r4, r2, r4
 808aee2:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 808aee6:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808aee8:	42ac      	cmp	r4, r5
 808aeea:	9302      	str	r3, [sp, #8]
 808aeec:	d207      	bcs.n	808aefe <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
 808aeee:	ab14      	add	r3, sp, #80	; 0x50
 808aef0:	fb06 3004 	mla	r0, r6, r4, r3
 808aef4:	f7fe ffcd 	bl	8089e92 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808aef8:	3401      	adds	r4, #1
 808aefa:	9b02      	ldr	r3, [sp, #8]
 808aefc:	e7f4      	b.n	808aee8 <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 808aefe:	a817      	add	r0, sp, #92	; 0x5c
 808af00:	f7fe ffc7 	bl	8089e92 <mbedtls_mpi_free>
 808af04:	a80b      	add	r0, sp, #44	; 0x2c
 808af06:	f7fe ffc4 	bl	8089e92 <mbedtls_mpi_free>
 808af0a:	a80e      	add	r0, sp, #56	; 0x38
 808af0c:	f7fe ffc1 	bl	8089e92 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 808af10:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808af14:	9b02      	ldr	r3, [sp, #8]
 808af16:	b10a      	cbz	r2, 808af1c <mbedtls_mpi_exp_mod+0x42a>
 808af18:	6892      	ldr	r2, [r2, #8]
 808af1a:	b922      	cbnz	r2, 808af26 <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
 808af1c:	a808      	add	r0, sp, #32
 808af1e:	9302      	str	r3, [sp, #8]
 808af20:	f7fe ffb7 	bl	8089e92 <mbedtls_mpi_free>

    return( ret );
 808af24:	9b02      	ldr	r3, [sp, #8]
 808af26:	4618      	mov	r0, r3
}
 808af28:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 808af2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808af30 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808af30:	b5f0      	push	{r4, r5, r6, r7, lr}
 808af32:	b08b      	sub	sp, #44	; 0x2c
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808af34:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808af36:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808af38:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808af3a:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808af3c:	4615      	mov	r5, r2
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808af3e:	9601      	str	r6, [sp, #4]
    X->n = 0;
 808af40:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808af42:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808af44:	9604      	str	r6, [sp, #16]
    X->n = 0;
 808af46:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808af48:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808af4a:	9607      	str	r6, [sp, #28]
    X->n = 0;
 808af4c:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808af4e:	9309      	str	r3, [sp, #36]	; 0x24
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808af50:	f7fe ffe1 	bl	8089f16 <mbedtls_mpi_copy>
 808af54:	4604      	mov	r4, r0
 808af56:	2800      	cmp	r0, #0
 808af58:	d163      	bne.n	808b022 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808af5a:	4629      	mov	r1, r5
 808af5c:	a807      	add	r0, sp, #28
 808af5e:	f7fe ffda 	bl	8089f16 <mbedtls_mpi_copy>
 808af62:	4604      	mov	r4, r0
 808af64:	2800      	cmp	r0, #0
 808af66:	d15c      	bne.n	808b022 <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
 808af68:	a804      	add	r0, sp, #16
 808af6a:	f7ff f82b 	bl	8089fc4 <mbedtls_mpi_lsb>
 808af6e:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 808af70:	a807      	add	r0, sp, #28
 808af72:	f7ff f827 	bl	8089fc4 <mbedtls_mpi_lsb>
 808af76:	4285      	cmp	r5, r0
 808af78:	bf28      	it	cs
 808af7a:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 808af7c:	a804      	add	r0, sp, #16
 808af7e:	4629      	mov	r1, r5
 808af80:	f7ff f906 	bl	808a190 <mbedtls_mpi_shift_r>
 808af84:	4604      	mov	r4, r0
 808af86:	2800      	cmp	r0, #0
 808af88:	d14b      	bne.n	808b022 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 808af8a:	4629      	mov	r1, r5
 808af8c:	a807      	add	r0, sp, #28
 808af8e:	f7ff f8ff 	bl	808a190 <mbedtls_mpi_shift_r>
 808af92:	4604      	mov	r4, r0
 808af94:	2800      	cmp	r0, #0
 808af96:	d144      	bne.n	808b022 <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
 808af98:	9607      	str	r6, [sp, #28]
 808af9a:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 808af9c:	2100      	movs	r1, #0
 808af9e:	a804      	add	r0, sp, #16
 808afa0:	f7ff fa1a 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808afa4:	2800      	cmp	r0, #0
 808afa6:	d031      	beq.n	808b00c <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 808afa8:	a804      	add	r0, sp, #16
 808afaa:	f7ff f80b 	bl	8089fc4 <mbedtls_mpi_lsb>
 808afae:	4601      	mov	r1, r0
 808afb0:	a804      	add	r0, sp, #16
 808afb2:	f7ff f8ed 	bl	808a190 <mbedtls_mpi_shift_r>
 808afb6:	4604      	mov	r4, r0
 808afb8:	2800      	cmp	r0, #0
 808afba:	d132      	bne.n	808b022 <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 808afbc:	a807      	add	r0, sp, #28
 808afbe:	f7ff f801 	bl	8089fc4 <mbedtls_mpi_lsb>
 808afc2:	4601      	mov	r1, r0
 808afc4:	a807      	add	r0, sp, #28
 808afc6:	f7ff f8e3 	bl	808a190 <mbedtls_mpi_shift_r>
 808afca:	4604      	mov	r4, r0
 808afcc:	bb48      	cbnz	r0, 808b022 <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 808afce:	a907      	add	r1, sp, #28
 808afd0:	a804      	add	r0, sp, #16
 808afd2:	f7ff f9bc 	bl	808a34e <mbedtls_mpi_cmp_mpi>
 808afd6:	2800      	cmp	r0, #0
 808afd8:	db09      	blt.n	808afee <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 808afda:	a904      	add	r1, sp, #16
 808afdc:	aa07      	add	r2, sp, #28
 808afde:	4608      	mov	r0, r1
 808afe0:	f7ff fa6a 	bl	808a4b8 <mbedtls_mpi_sub_abs>
 808afe4:	4604      	mov	r4, r0
 808afe6:	b9e0      	cbnz	r0, 808b022 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 808afe8:	2101      	movs	r1, #1
 808afea:	a804      	add	r0, sp, #16
 808afec:	e008      	b.n	808b000 <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 808afee:	a907      	add	r1, sp, #28
 808aff0:	aa04      	add	r2, sp, #16
 808aff2:	4608      	mov	r0, r1
 808aff4:	f7ff fa60 	bl	808a4b8 <mbedtls_mpi_sub_abs>
 808aff8:	4604      	mov	r4, r0
 808affa:	b990      	cbnz	r0, 808b022 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 808affc:	2101      	movs	r1, #1
 808affe:	a807      	add	r0, sp, #28
 808b000:	f7ff f8c6 	bl	808a190 <mbedtls_mpi_shift_r>
 808b004:	4604      	mov	r4, r0
 808b006:	2800      	cmp	r0, #0
 808b008:	d0c8      	beq.n	808af9c <mbedtls_mpi_gcd+0x6c>
 808b00a:	e00a      	b.n	808b022 <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 808b00c:	4629      	mov	r1, r5
 808b00e:	a807      	add	r0, sp, #28
 808b010:	f7ff f86f 	bl	808a0f2 <mbedtls_mpi_shift_l>
 808b014:	4604      	mov	r4, r0
 808b016:	b920      	cbnz	r0, 808b022 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 808b018:	a907      	add	r1, sp, #28
 808b01a:	4638      	mov	r0, r7
 808b01c:	f7fe ff7b 	bl	8089f16 <mbedtls_mpi_copy>
 808b020:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 808b022:	a801      	add	r0, sp, #4
 808b024:	f7fe ff35 	bl	8089e92 <mbedtls_mpi_free>
 808b028:	a804      	add	r0, sp, #16
 808b02a:	f7fe ff32 	bl	8089e92 <mbedtls_mpi_free>
 808b02e:	a807      	add	r0, sp, #28
 808b030:	f7fe ff2f 	bl	8089e92 <mbedtls_mpi_free>

    return( ret );
}
 808b034:	4620      	mov	r0, r4
 808b036:	b00b      	add	sp, #44	; 0x2c
 808b038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b03a <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808b03a:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808b03c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808b040:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 808b044:	4605      	mov	r5, r0
 808b046:	460c      	mov	r4, r1
 808b048:	4616      	mov	r6, r2
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808b04a:	d814      	bhi.n	808b076 <mbedtls_mpi_fill_random+0x3c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 808b04c:	460a      	mov	r2, r1
 808b04e:	4618      	mov	r0, r3
 808b050:	4669      	mov	r1, sp
 808b052:	47b0      	blx	r6
 808b054:	b920      	cbnz	r0, 808b060 <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 808b056:	4622      	mov	r2, r4
 808b058:	4669      	mov	r1, sp
 808b05a:	4628      	mov	r0, r5
 808b05c:	f7fe fff1 	bl	808a042 <mbedtls_mpi_read_binary>
 808b060:	2300      	movs	r3, #0
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
}

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808b062:	f240 4401 	movw	r4, #1025	; 0x401
 808b066:	4619      	mov	r1, r3
 808b068:	eb0d 0203 	add.w	r2, sp, r3
 808b06c:	3301      	adds	r3, #1
 808b06e:	42a3      	cmp	r3, r4
 808b070:	d003      	beq.n	808b07a <mbedtls_mpi_fill_random+0x40>
 808b072:	7011      	strb	r1, [r2, #0]
 808b074:	e7f8      	b.n	808b068 <mbedtls_mpi_fill_random+0x2e>
{
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808b076:	f06f 0003 	mvn.w	r0, #3
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    return( ret );
}
 808b07a:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 808b07e:	bd70      	pop	{r4, r5, r6, pc}

0808b080 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808b080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b084:	4680      	mov	r8, r0
 808b086:	b09c      	sub	sp, #112	; 0x70
 808b088:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808b08a:	4610      	mov	r0, r2
 808b08c:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808b08e:	4616      	mov	r6, r2
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808b090:	f7ff f9a2 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808b094:	2800      	cmp	r0, #0
 808b096:	f340 814c 	ble.w	808b332 <mbedtls_mpi_inv_mod+0x2b2>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b09a:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b09c:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808b09e:	4632      	mov	r2, r6
 808b0a0:	4639      	mov	r1, r7
 808b0a2:	a801      	add	r0, sp, #4
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b0a4:	9504      	str	r5, [sp, #16]
    X->n = 0;
 808b0a6:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808b0a8:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b0aa:	9507      	str	r5, [sp, #28]
    X->n = 0;
 808b0ac:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808b0ae:	9309      	str	r3, [sp, #36]	; 0x24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b0b0:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 808b0b2:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 808b0b4:	930c      	str	r3, [sp, #48]	; 0x30
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b0b6:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 808b0b8:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 808b0ba:	930f      	str	r3, [sp, #60]	; 0x3c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b0bc:	9501      	str	r5, [sp, #4]
    X->n = 0;
 808b0be:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808b0c0:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b0c2:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 808b0c4:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 808b0c6:	9312      	str	r3, [sp, #72]	; 0x48
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b0c8:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 808b0ca:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 808b0cc:	9315      	str	r3, [sp, #84]	; 0x54
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b0ce:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 808b0d0:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 808b0d2:	9318      	str	r3, [sp, #96]	; 0x60
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b0d4:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 808b0d6:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 808b0d8:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808b0da:	f7ff ff29 	bl	808af30 <mbedtls_mpi_gcd>
 808b0de:	4604      	mov	r4, r0
 808b0e0:	2800      	cmp	r0, #0
 808b0e2:	f040 8109 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 808b0e6:	4629      	mov	r1, r5
 808b0e8:	a801      	add	r0, sp, #4
 808b0ea:	f7ff f975 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808b0ee:	2800      	cmp	r0, #0
 808b0f0:	f040 8100 	bne.w	808b2f4 <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 808b0f4:	4632      	mov	r2, r6
 808b0f6:	4639      	mov	r1, r7
 808b0f8:	a804      	add	r0, sp, #16
 808b0fa:	f7ff fcc8 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 808b0fe:	4604      	mov	r4, r0
 808b100:	2800      	cmp	r0, #0
 808b102:	f040 80f9 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 808b106:	a904      	add	r1, sp, #16
 808b108:	a807      	add	r0, sp, #28
 808b10a:	f7fe ff04 	bl	8089f16 <mbedtls_mpi_copy>
 808b10e:	4604      	mov	r4, r0
 808b110:	2800      	cmp	r0, #0
 808b112:	f040 80f1 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 808b116:	4631      	mov	r1, r6
 808b118:	a810      	add	r0, sp, #64	; 0x40
 808b11a:	f7fe fefc 	bl	8089f16 <mbedtls_mpi_copy>
 808b11e:	4604      	mov	r4, r0
 808b120:	2800      	cmp	r0, #0
 808b122:	f040 80e9 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 808b126:	4631      	mov	r1, r6
 808b128:	a813      	add	r0, sp, #76	; 0x4c
 808b12a:	f7fe fef4 	bl	8089f16 <mbedtls_mpi_copy>
 808b12e:	4604      	mov	r4, r0
 808b130:	2800      	cmp	r0, #0
 808b132:	f040 80e1 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 808b136:	4629      	mov	r1, r5
 808b138:	a80a      	add	r0, sp, #40	; 0x28
 808b13a:	f7fe ff16 	bl	8089f6a <mbedtls_mpi_lset>
 808b13e:	4604      	mov	r4, r0
 808b140:	2800      	cmp	r0, #0
 808b142:	f040 80d9 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 808b146:	4601      	mov	r1, r0
 808b148:	a80d      	add	r0, sp, #52	; 0x34
 808b14a:	f7fe ff0e 	bl	8089f6a <mbedtls_mpi_lset>
 808b14e:	4604      	mov	r4, r0
 808b150:	2800      	cmp	r0, #0
 808b152:	f040 80d1 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 808b156:	4601      	mov	r1, r0
 808b158:	a816      	add	r0, sp, #88	; 0x58
 808b15a:	f7fe ff06 	bl	8089f6a <mbedtls_mpi_lset>
 808b15e:	4604      	mov	r4, r0
 808b160:	2800      	cmp	r0, #0
 808b162:	f040 80c9 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 808b166:	4629      	mov	r1, r5
 808b168:	a819      	add	r0, sp, #100	; 0x64
 808b16a:	f7fe fefe 	bl	8089f6a <mbedtls_mpi_lset>
 808b16e:	4604      	mov	r4, r0
 808b170:	2800      	cmp	r0, #0
 808b172:	f040 80c1 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 808b176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b178:	681b      	ldr	r3, [r3, #0]
 808b17a:	07dd      	lsls	r5, r3, #31
 808b17c:	d44c      	bmi.n	808b218 <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 808b17e:	2101      	movs	r1, #1
 808b180:	a807      	add	r0, sp, #28
 808b182:	f7ff f805 	bl	808a190 <mbedtls_mpi_shift_r>
 808b186:	4604      	mov	r4, r0
 808b188:	2800      	cmp	r0, #0
 808b18a:	f040 80b5 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 808b18e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808b190:	681b      	ldr	r3, [r3, #0]
 808b192:	07dc      	lsls	r4, r3, #31
 808b194:	d410      	bmi.n	808b1b8 <mbedtls_mpi_inv_mod+0x138>
 808b196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808b198:	681b      	ldr	r3, [r3, #0]
 808b19a:	07d8      	lsls	r0, r3, #31
 808b19c:	d40c      	bmi.n	808b1b8 <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 808b19e:	2101      	movs	r1, #1
 808b1a0:	a80a      	add	r0, sp, #40	; 0x28
 808b1a2:	f7fe fff5 	bl	808a190 <mbedtls_mpi_shift_r>
 808b1a6:	4604      	mov	r4, r0
 808b1a8:	2800      	cmp	r0, #0
 808b1aa:	f040 80a5 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 808b1ae:	2101      	movs	r1, #1
 808b1b0:	a80d      	add	r0, sp, #52	; 0x34
 808b1b2:	f7fe ffed 	bl	808a190 <mbedtls_mpi_shift_r>
 808b1b6:	e7da      	b.n	808b16e <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 808b1b8:	a90a      	add	r1, sp, #40	; 0x28
 808b1ba:	aa10      	add	r2, sp, #64	; 0x40
 808b1bc:	4608      	mov	r0, r1
 808b1be:	f7ff f9bb 	bl	808a538 <mbedtls_mpi_add_mpi>
 808b1c2:	4604      	mov	r4, r0
 808b1c4:	2800      	cmp	r0, #0
 808b1c6:	f040 8097 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 808b1ca:	a90d      	add	r1, sp, #52	; 0x34
 808b1cc:	aa04      	add	r2, sp, #16
 808b1ce:	4608      	mov	r0, r1
 808b1d0:	f7ff f9d3 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808b1d4:	4604      	mov	r4, r0
 808b1d6:	2800      	cmp	r0, #0
 808b1d8:	d0e1      	beq.n	808b19e <mbedtls_mpi_inv_mod+0x11e>
 808b1da:	e08d      	b.n	808b2f8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 808b1dc:	2101      	movs	r1, #1
 808b1de:	a813      	add	r0, sp, #76	; 0x4c
 808b1e0:	f7fe ffd6 	bl	808a190 <mbedtls_mpi_shift_r>
 808b1e4:	4604      	mov	r4, r0
 808b1e6:	2800      	cmp	r0, #0
 808b1e8:	f040 8086 	bne.w	808b2f8 <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 808b1ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 808b1ee:	681b      	ldr	r3, [r3, #0]
 808b1f0:	07da      	lsls	r2, r3, #31
 808b1f2:	d416      	bmi.n	808b222 <mbedtls_mpi_inv_mod+0x1a2>
 808b1f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b1f6:	681b      	ldr	r3, [r3, #0]
 808b1f8:	07db      	lsls	r3, r3, #31
 808b1fa:	d412      	bmi.n	808b222 <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 808b1fc:	2101      	movs	r1, #1
 808b1fe:	a816      	add	r0, sp, #88	; 0x58
 808b200:	f7fe ffc6 	bl	808a190 <mbedtls_mpi_shift_r>
 808b204:	4604      	mov	r4, r0
 808b206:	2800      	cmp	r0, #0
 808b208:	d176      	bne.n	808b2f8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 808b20a:	2101      	movs	r1, #1
 808b20c:	a819      	add	r0, sp, #100	; 0x64
 808b20e:	f7fe ffbf 	bl	808a190 <mbedtls_mpi_shift_r>
 808b212:	4604      	mov	r4, r0
 808b214:	2800      	cmp	r0, #0
 808b216:	d16f      	bne.n	808b2f8 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
 808b218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808b21a:	681b      	ldr	r3, [r3, #0]
 808b21c:	07d9      	lsls	r1, r3, #31
 808b21e:	d411      	bmi.n	808b244 <mbedtls_mpi_inv_mod+0x1c4>
 808b220:	e7dc      	b.n	808b1dc <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 808b222:	a916      	add	r1, sp, #88	; 0x58
 808b224:	aa10      	add	r2, sp, #64	; 0x40
 808b226:	4608      	mov	r0, r1
 808b228:	f7ff f986 	bl	808a538 <mbedtls_mpi_add_mpi>
 808b22c:	4604      	mov	r4, r0
 808b22e:	2800      	cmp	r0, #0
 808b230:	d162      	bne.n	808b2f8 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 808b232:	a919      	add	r1, sp, #100	; 0x64
 808b234:	aa04      	add	r2, sp, #16
 808b236:	4608      	mov	r0, r1
 808b238:	f7ff f99f 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808b23c:	4604      	mov	r4, r0
 808b23e:	2800      	cmp	r0, #0
 808b240:	d0dc      	beq.n	808b1fc <mbedtls_mpi_inv_mod+0x17c>
 808b242:	e059      	b.n	808b2f8 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 808b244:	a913      	add	r1, sp, #76	; 0x4c
 808b246:	a807      	add	r0, sp, #28
 808b248:	f7ff f881 	bl	808a34e <mbedtls_mpi_cmp_mpi>
 808b24c:	2800      	cmp	r0, #0
 808b24e:	db1f      	blt.n	808b290 <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 808b250:	a907      	add	r1, sp, #28
 808b252:	aa13      	add	r2, sp, #76	; 0x4c
 808b254:	4608      	mov	r0, r1
 808b256:	f7ff f990 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808b25a:	4604      	mov	r4, r0
 808b25c:	2800      	cmp	r0, #0
 808b25e:	d14b      	bne.n	808b2f8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 808b260:	a90a      	add	r1, sp, #40	; 0x28
 808b262:	aa16      	add	r2, sp, #88	; 0x58
 808b264:	4608      	mov	r0, r1
 808b266:	f7ff f988 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808b26a:	4604      	mov	r4, r0
 808b26c:	2800      	cmp	r0, #0
 808b26e:	d143      	bne.n	808b2f8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 808b270:	aa19      	add	r2, sp, #100	; 0x64
 808b272:	a90d      	add	r1, sp, #52	; 0x34
 808b274:	4608      	mov	r0, r1
 808b276:	f7ff f980 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808b27a:	4604      	mov	r4, r0
 808b27c:	2800      	cmp	r0, #0
 808b27e:	d13b      	bne.n	808b2f8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 808b280:	2100      	movs	r1, #0
 808b282:	a807      	add	r0, sp, #28
 808b284:	f7ff f8a8 	bl	808a3d8 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
 808b288:	2800      	cmp	r0, #0
 808b28a:	f47f af74 	bne.w	808b176 <mbedtls_mpi_inv_mod+0xf6>
 808b28e:	e017      	b.n	808b2c0 <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 808b290:	a913      	add	r1, sp, #76	; 0x4c
 808b292:	aa07      	add	r2, sp, #28
 808b294:	4608      	mov	r0, r1
 808b296:	f7ff f970 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808b29a:	4604      	mov	r4, r0
 808b29c:	bb60      	cbnz	r0, 808b2f8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 808b29e:	a916      	add	r1, sp, #88	; 0x58
 808b2a0:	aa0a      	add	r2, sp, #40	; 0x28
 808b2a2:	4608      	mov	r0, r1
 808b2a4:	f7ff f969 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808b2a8:	4604      	mov	r4, r0
 808b2aa:	bb28      	cbnz	r0, 808b2f8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 808b2ac:	aa0d      	add	r2, sp, #52	; 0x34
 808b2ae:	a919      	add	r1, sp, #100	; 0x64
 808b2b0:	e7e0      	b.n	808b274 <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 808b2b2:	a916      	add	r1, sp, #88	; 0x58
 808b2b4:	4632      	mov	r2, r6
 808b2b6:	4608      	mov	r0, r1
 808b2b8:	f7ff f93e 	bl	808a538 <mbedtls_mpi_add_mpi>
 808b2bc:	4604      	mov	r4, r0
 808b2be:	b9d8      	cbnz	r0, 808b2f8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 808b2c0:	2100      	movs	r1, #0
 808b2c2:	a816      	add	r0, sp, #88	; 0x58
 808b2c4:	f7ff f888 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808b2c8:	2800      	cmp	r0, #0
 808b2ca:	dbf2      	blt.n	808b2b2 <mbedtls_mpi_inv_mod+0x232>
 808b2cc:	e006      	b.n	808b2dc <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 808b2ce:	a916      	add	r1, sp, #88	; 0x58
 808b2d0:	4632      	mov	r2, r6
 808b2d2:	4608      	mov	r0, r1
 808b2d4:	f7ff f951 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808b2d8:	4604      	mov	r4, r0
 808b2da:	b968      	cbnz	r0, 808b2f8 <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 808b2dc:	4631      	mov	r1, r6
 808b2de:	a816      	add	r0, sp, #88	; 0x58
 808b2e0:	f7ff f835 	bl	808a34e <mbedtls_mpi_cmp_mpi>
 808b2e4:	2800      	cmp	r0, #0
 808b2e6:	daf2      	bge.n	808b2ce <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 808b2e8:	a916      	add	r1, sp, #88	; 0x58
 808b2ea:	4640      	mov	r0, r8
 808b2ec:	f7fe fe13 	bl	8089f16 <mbedtls_mpi_copy>
 808b2f0:	4604      	mov	r4, r0
 808b2f2:	e001      	b.n	808b2f8 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 808b2f4:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 808b2f8:	a804      	add	r0, sp, #16
 808b2fa:	f7fe fdca 	bl	8089e92 <mbedtls_mpi_free>
 808b2fe:	a807      	add	r0, sp, #28
 808b300:	f7fe fdc7 	bl	8089e92 <mbedtls_mpi_free>
 808b304:	a80a      	add	r0, sp, #40	; 0x28
 808b306:	f7fe fdc4 	bl	8089e92 <mbedtls_mpi_free>
 808b30a:	a80d      	add	r0, sp, #52	; 0x34
 808b30c:	f7fe fdc1 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 808b310:	a801      	add	r0, sp, #4
 808b312:	f7fe fdbe 	bl	8089e92 <mbedtls_mpi_free>
 808b316:	a810      	add	r0, sp, #64	; 0x40
 808b318:	f7fe fdbb 	bl	8089e92 <mbedtls_mpi_free>
 808b31c:	a813      	add	r0, sp, #76	; 0x4c
 808b31e:	f7fe fdb8 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 808b322:	a816      	add	r0, sp, #88	; 0x58
 808b324:	f7fe fdb5 	bl	8089e92 <mbedtls_mpi_free>
 808b328:	a819      	add	r0, sp, #100	; 0x64
 808b32a:	f7fe fdb2 	bl	8089e92 <mbedtls_mpi_free>

    return( ret );
 808b32e:	4620      	mov	r0, r4
 808b330:	e001      	b.n	808b336 <mbedtls_mpi_inv_mod+0x2b6>
{
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808b332:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
 808b336:	b01c      	add	sp, #112	; 0x70
 808b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808b33c <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 808b33c:	b110      	cbz	r0, 808b344 <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
 808b33e:	2300      	movs	r3, #0
 808b340:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
 808b342:	6043      	str	r3, [r0, #4]
 808b344:	4770      	bx	lr

0808b346 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 808b346:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 808b348:	4604      	mov	r4, r0
 808b34a:	b160      	cbz	r0, 808b366 <mbedtls_pk_free+0x20>
 808b34c:	6803      	ldr	r3, [r0, #0]
 808b34e:	b153      	cbz	r3, 808b366 <mbedtls_pk_free+0x20>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 808b350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808b352:	6840      	ldr	r0, [r0, #4]
 808b354:	4798      	blx	r3
 808b356:	f104 0208 	add.w	r2, r4, #8
#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808b35a:	2300      	movs	r3, #0
 808b35c:	4294      	cmp	r4, r2
 808b35e:	d002      	beq.n	808b366 <mbedtls_pk_free+0x20>
 808b360:	7023      	strb	r3, [r4, #0]
 808b362:	3401      	adds	r4, #1
 808b364:	e7fa      	b.n	808b35c <mbedtls_pk_free+0x16>
 808b366:	bd10      	pop	{r4, pc}

0808b368 <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 808b368:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 808b36a:	4802      	ldr	r0, [pc, #8]	; (808b374 <mbedtls_pk_info_from_type+0xc>)
 808b36c:	bf18      	it	ne
 808b36e:	2000      	movne	r0, #0
 808b370:	4770      	bx	lr
 808b372:	bf00      	nop
 808b374:	08091868 	.word	0x08091868

0808b378 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 808b378:	b570      	push	{r4, r5, r6, lr}
 808b37a:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 808b37c:	4605      	mov	r5, r0
 808b37e:	b148      	cbz	r0, 808b394 <mbedtls_pk_setup+0x1c>
 808b380:	b141      	cbz	r1, 808b394 <mbedtls_pk_setup+0x1c>
 808b382:	6804      	ldr	r4, [r0, #0]
 808b384:	b934      	cbnz	r4, 808b394 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 808b386:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 808b388:	4798      	blx	r3
 808b38a:	6068      	str	r0, [r5, #4]
 808b38c:	b120      	cbz	r0, 808b398 <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 808b38e:	602e      	str	r6, [r5, #0]

    return( 0 );
 808b390:	4620      	mov	r0, r4
 808b392:	bd70      	pop	{r4, r5, r6, pc}
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808b394:	4801      	ldr	r0, [pc, #4]	; (808b39c <mbedtls_pk_setup+0x24>)
 808b396:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 808b398:	4801      	ldr	r0, [pc, #4]	; (808b3a0 <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
 808b39a:	bd70      	pop	{r4, r5, r6, pc}
 808b39c:	ffffc180 	.word	0xffffc180
 808b3a0:	ffffc080 	.word	0xffffc080

0808b3a4 <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 808b3a4:	b120      	cbz	r0, 808b3b0 <mbedtls_pk_can_do+0xc>
 808b3a6:	6803      	ldr	r3, [r0, #0]
 808b3a8:	b113      	cbz	r3, 808b3b0 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 808b3aa:	68db      	ldr	r3, [r3, #12]
 808b3ac:	4608      	mov	r0, r1
 808b3ae:	4718      	bx	r3
}
 808b3b0:	2000      	movs	r0, #0
 808b3b2:	4770      	bx	lr

0808b3b4 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 808b3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b3b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 808b3bc:	460e      	mov	r6, r1
 808b3be:	4617      	mov	r7, r2
 808b3c0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( ctx == NULL || ctx->pk_info == NULL ||
 808b3c4:	4604      	mov	r4, r0
 808b3c6:	b910      	cbnz	r0, 808b3ce <mbedtls_pk_verify+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808b3c8:	480f      	ldr	r0, [pc, #60]	; (808b408 <mbedtls_pk_verify+0x54>)
 808b3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808b3ce:	6802      	ldr	r2, [r0, #0]
 808b3d0:	2a00      	cmp	r2, #0
 808b3d2:	d0f9      	beq.n	808b3c8 <mbedtls_pk_verify+0x14>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808b3d4:	b93b      	cbnz	r3, 808b3e6 <mbedtls_pk_verify+0x32>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808b3d6:	4608      	mov	r0, r1
 808b3d8:	f7fb f8b0 	bl	808653c <mbedtls_md_info_from_type>
 808b3dc:	2800      	cmp	r0, #0
 808b3de:	d0f3      	beq.n	808b3c8 <mbedtls_pk_verify+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808b3e0:	f7fb f9f0 	bl	80867c4 <mbedtls_md_get_size>
 808b3e4:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
 808b3e6:	6822      	ldr	r2, [r4, #0]
 808b3e8:	6915      	ldr	r5, [r2, #16]
 808b3ea:	b155      	cbz	r5, 808b402 <mbedtls_pk_verify+0x4e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808b3ec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808b3f0:	f8cd 8020 	str.w	r8, [sp, #32]
 808b3f4:	463a      	mov	r2, r7
 808b3f6:	4631      	mov	r1, r6
 808b3f8:	6860      	ldr	r0, [r4, #4]
 808b3fa:	46ac      	mov	ip, r5
}
 808b3fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808b400:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808b402:	4802      	ldr	r0, [pc, #8]	; (808b40c <mbedtls_pk_verify+0x58>)
 808b404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b408:	ffffc180 	.word	0xffffc180
 808b40c:	ffffc100 	.word	0xffffc100

0808b410 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808b410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b414:	af08      	add	r7, sp, #32
 808b416:	460d      	mov	r5, r1
 808b418:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 808b41c:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 808b41e:	4604      	mov	r4, r0
 808b420:	b910      	cbnz	r0, 808b428 <mbedtls_pk_sign+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808b422:	4813      	ldr	r0, [pc, #76]	; (808b470 <mbedtls_pk_sign+0x60>)
 808b424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808b428:	6802      	ldr	r2, [r0, #0]
 808b42a:	2a00      	cmp	r2, #0
 808b42c:	d0f9      	beq.n	808b422 <mbedtls_pk_sign+0x12>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808b42e:	b93b      	cbnz	r3, 808b440 <mbedtls_pk_sign+0x30>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808b430:	4608      	mov	r0, r1
 808b432:	f7fb f883 	bl	808653c <mbedtls_md_info_from_type>
 808b436:	2800      	cmp	r0, #0
 808b438:	d0f3      	beq.n	808b422 <mbedtls_pk_sign+0x12>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808b43a:	f7fb f9c3 	bl	80867c4 <mbedtls_md_get_size>
 808b43e:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
 808b440:	6822      	ldr	r2, [r4, #0]
 808b442:	f8d2 e014 	ldr.w	lr, [r2, #20]
 808b446:	f1be 0f00 	cmp.w	lr, #0
 808b44a:	d00d      	beq.n	808b468 <mbedtls_pk_sign+0x58>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808b44c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 808b450:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 808b454:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 808b458:	9708      	str	r7, [sp, #32]
 808b45a:	4632      	mov	r2, r6
 808b45c:	4629      	mov	r1, r5
 808b45e:	6860      	ldr	r0, [r4, #4]
 808b460:	46f4      	mov	ip, lr
}
 808b462:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808b466:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808b468:	4802      	ldr	r0, [pc, #8]	; (808b474 <mbedtls_pk_sign+0x64>)
 808b46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b46e:	bf00      	nop
 808b470:	ffffc180 	.word	0xffffc180
 808b474:	ffffc100 	.word	0xffffc100

0808b478 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808b478:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b47a:	f8dd e020 	ldr.w	lr, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL )
 808b47e:	b140      	cbz	r0, 808b492 <mbedtls_pk_encrypt+0x1a>
 808b480:	6804      	ldr	r4, [r0, #0]
 808b482:	b134      	cbz	r4, 808b492 <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 808b484:	69e4      	ldr	r4, [r4, #28]
 808b486:	b134      	cbz	r4, 808b496 <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808b488:	46a4      	mov	ip, r4
}
 808b48a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808b48e:	6840      	ldr	r0, [r0, #4]
 808b490:	4760      	bx	ip
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808b492:	4802      	ldr	r0, [pc, #8]	; (808b49c <mbedtls_pk_encrypt+0x24>)
 808b494:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808b496:	4802      	ldr	r0, [pc, #8]	; (808b4a0 <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
 808b498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808b49a:	bf00      	nop
 808b49c:	ffffc180 	.word	0xffffc180
 808b4a0:	ffffc100 	.word	0xffffc100

0808b4a4 <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808b4a4:	b120      	cbz	r0, 808b4b0 <mbedtls_pk_get_bitlen+0xc>
 808b4a6:	6803      	ldr	r3, [r0, #0]
 808b4a8:	b113      	cbz	r3, 808b4b0 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 808b4aa:	689b      	ldr	r3, [r3, #8]
 808b4ac:	6840      	ldr	r0, [r0, #4]
 808b4ae:	4718      	bx	r3
}
 808b4b0:	2000      	movs	r0, #0
 808b4b2:	4770      	bx	lr

0808b4b4 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 808b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b4b8:	b087      	sub	sp, #28
 808b4ba:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 808b4be:	4683      	mov	fp, r0
 808b4c0:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
 808b4c4:	460d      	mov	r5, r1
 808b4c6:	461f      	mov	r7, r3
 808b4c8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if( ctx == NULL || ctx->pk_info == NULL )
 808b4ca:	4614      	mov	r4, r2
 808b4cc:	b90a      	cbnz	r2, 808b4d2 <mbedtls_pk_verify_ext+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808b4ce:	4823      	ldr	r0, [pc, #140]	; (808b55c <mbedtls_pk_verify_ext+0xa8>)
 808b4d0:	e040      	b.n	808b554 <mbedtls_pk_verify_ext+0xa0>
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808b4d2:	6813      	ldr	r3, [r2, #0]
 808b4d4:	2b00      	cmp	r3, #0
 808b4d6:	d0fa      	beq.n	808b4ce <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
 808b4d8:	4601      	mov	r1, r0
 808b4da:	4610      	mov	r0, r2
 808b4dc:	f7ff ff62 	bl	808b3a4 <mbedtls_pk_can_do>
 808b4e0:	2800      	cmp	r0, #0
 808b4e2:	d034      	beq.n	808b54e <mbedtls_pk_verify_ext+0x9a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
 808b4e4:	f1bb 0f06 	cmp.w	fp, #6
 808b4e8:	d123      	bne.n	808b532 <mbedtls_pk_verify_ext+0x7e>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
 808b4ea:	2d00      	cmp	r5, #0
 808b4ec:	d0ef      	beq.n	808b4ce <mbedtls_pk_verify_ext+0x1a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 808b4ee:	4620      	mov	r0, r4
 808b4f0:	f7ff ffd8 	bl	808b4a4 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
 808b4f4:	3007      	adds	r0, #7
 808b4f6:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808b4fa:	d32a      	bcc.n	808b552 <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
 808b4fc:	686b      	ldr	r3, [r5, #4]
 808b4fe:	e88d 0280 	stmia.w	sp, {r7, r9}
 808b502:	9304      	str	r3, [sp, #16]
 808b504:	782b      	ldrb	r3, [r5, #0]
 808b506:	f8cd a014 	str.w	sl, [sp, #20]
 808b50a:	9303      	str	r3, [sp, #12]
 808b50c:	f8cd 8008 	str.w	r8, [sp, #8]
 808b510:	2300      	movs	r3, #0
 808b512:	461a      	mov	r2, r3
 808b514:	4619      	mov	r1, r3
 808b516:	6860      	ldr	r0, [r4, #4]
 808b518:	f7f8 f8a6 	bl	8083668 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 808b51c:	b9d0      	cbnz	r0, 808b554 <mbedtls_pk_verify_ext+0xa0>
 808b51e:	4620      	mov	r0, r4
 808b520:	f7ff ffc0 	bl	808b4a4 <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
 808b524:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
 808b526:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808b52a:	480d      	ldr	r0, [pc, #52]	; (808b560 <mbedtls_pk_verify_ext+0xac>)
 808b52c:	bf98      	it	ls
 808b52e:	2000      	movls	r0, #0
 808b530:	e010      	b.n	808b554 <mbedtls_pk_verify_ext+0xa0>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 808b532:	2d00      	cmp	r5, #0
 808b534:	d1cb      	bne.n	808b4ce <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808b536:	464b      	mov	r3, r9
 808b538:	4642      	mov	r2, r8
 808b53a:	4639      	mov	r1, r7
 808b53c:	4620      	mov	r0, r4
 808b53e:	9611      	str	r6, [sp, #68]	; 0x44
 808b540:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
 808b544:	b007      	add	sp, #28
 808b546:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808b54a:	f7ff bf33 	b.w	808b3b4 <mbedtls_pk_verify>
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808b54e:	4805      	ldr	r0, [pc, #20]	; (808b564 <mbedtls_pk_verify_ext+0xb0>)
 808b550:	e000      	b.n	808b554 <mbedtls_pk_verify_ext+0xa0>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 808b552:	4805      	ldr	r0, [pc, #20]	; (808b568 <mbedtls_pk_verify_ext+0xb4>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 808b554:	b007      	add	sp, #28
 808b556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b55a:	bf00      	nop
 808b55c:	ffffc180 	.word	0xffffc180
 808b560:	ffffc700 	.word	0xffffc700
 808b564:	ffffc100 	.word	0xffffc100
 808b568:	ffffbc80 	.word	0xffffbc80

0808b56c <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808b56c:	b118      	cbz	r0, 808b576 <mbedtls_pk_get_name+0xa>
 808b56e:	6803      	ldr	r3, [r0, #0]
 808b570:	b10b      	cbz	r3, 808b576 <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 808b572:	6858      	ldr	r0, [r3, #4]
 808b574:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
 808b576:	4801      	ldr	r0, [pc, #4]	; (808b57c <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
 808b578:	4770      	bx	lr
 808b57a:	bf00      	nop
 808b57c:	08092754 	.word	0x08092754

0808b580 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808b580:	b110      	cbz	r0, 808b588 <mbedtls_pk_get_type+0x8>
 808b582:	6800      	ldr	r0, [r0, #0]
 808b584:	b100      	cbz	r0, 808b588 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 808b586:	7800      	ldrb	r0, [r0, #0]
}
 808b588:	4770      	bx	lr
	...

0808b58c <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 808b58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b590:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808b594:	2301      	movs	r3, #1
 808b596:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 808b598:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 808b59c:	a904      	add	r1, sp, #16
 808b59e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808b5a2:	f013 0180 	ands.w	r1, r3, #128	; 0x80
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 808b5a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808b5aa:	bf18      	it	ne
 808b5ac:	211b      	movne	r1, #27
 808b5ae:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808b5b2:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808b5b4:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808b5b6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808b5ba:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808b5bc:	d1ee      	bne.n	808b59c <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808b5be:	4c66      	ldr	r4, [pc, #408]	; (808b758 <_ZL14aes_gen_tablesv+0x1cc>)
 808b5c0:	2301      	movs	r3, #1
 808b5c2:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
 808b5c4:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808b5c8:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 808b5cc:	bf18      	it	ne
 808b5ce:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808b5d0:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808b5d2:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808b5d6:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808b5d8:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808b5da:	d1f3      	bne.n	808b5c4 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808b5dc:	4e5f      	ldr	r6, [pc, #380]	; (808b75c <_ZL14aes_gen_tablesv+0x1d0>)
 808b5de:	2363      	movs	r3, #99	; 0x63
    RSb[0x63] = 0x00;
 808b5e0:	4d5f      	ldr	r5, [pc, #380]	; (808b760 <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808b5e2:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 808b5e4:	2300      	movs	r3, #0
 808b5e6:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 808b5ea:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
 808b5ec:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 808b5f0:	aa04      	add	r2, sp, #16
 808b5f2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 808b5f6:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808b5fa:	ea4f 11ee 	mov.w	r1, lr, asr #7
 808b5fe:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
 808b602:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808b604:	11ca      	asrs	r2, r1, #7
 808b606:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 808b60a:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808b60c:	11d3      	asrs	r3, r2, #7
 808b60e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 808b612:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
 808b614:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808b618:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
 808b61a:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808b61e:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
 808b622:	404a      	eors	r2, r1
 808b624:	4053      	eors	r3, r2
 808b626:	b2fa      	uxtb	r2, r7
 808b628:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 808b62a:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 808b62c:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 808b62e:	3401      	adds	r4, #1
 808b630:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 808b634:	d1da      	bne.n	808b5ec <_ZL14aes_gen_tablesv+0x60>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808b636:	6b83      	ldr	r3, [r0, #56]	; 0x38
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808b638:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808b63a:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808b63c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808b63e:	f8df e11c 	ldr.w	lr, [pc, #284]	; 808b75c <_ZL14aes_gen_tablesv+0x1d0>
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808b642:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808b644:	6b43      	ldr	r3, [r0, #52]	; 0x34
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
 808b646:	f8df c12c 	ldr.w	ip, [pc, #300]	; 808b774 <_ZL14aes_gen_tablesv+0x1e8>

        FT1[i] = ROTL8( FT0[i] );
 808b64a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 808b778 <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
 808b64e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 808b77c <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
 808b652:	f8df a12c 	ldr.w	sl, [pc, #300]	; 808b780 <_ZL14aes_gen_tablesv+0x1f4>

        x = RSb[i];
 808b656:	f8df b108 	ldr.w	fp, [pc, #264]	; 808b760 <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808b65a:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808b65c:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808b65e:	f812 000e 	ldrb.w	r0, [r2, lr]
 808b662:	0094      	lsls	r4, r2, #2
        y = XTIME( x ) & 0xFF;
 808b664:	f010 0f80 	tst.w	r0, #128	; 0x80
 808b668:	bf14      	ite	ne
 808b66a:	211b      	movne	r1, #27
 808b66c:	2100      	moveq	r1, #0
 808b66e:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808b672:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 808b674:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808b676:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808b67a:	404b      	eors	r3, r1
 808b67c:	4041      	eors	r1, r0
 808b67e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
 808b682:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 808b686:	ea4f 6333 	mov.w	r3, r3, ror #24
 808b68a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 808b68e:	ea4f 6333 	mov.w	r3, r3, ror #24
 808b692:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 808b696:	ea4f 6333 	mov.w	r3, r3, ror #24
 808b69a:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]

        x = RSb[i];
 808b69e:	f81b 3002 	ldrb.w	r3, [fp, r2]

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808b6a2:	b1d3      	cbz	r3, 808b6da <_ZL14aes_gen_tablesv+0x14e>
 808b6a4:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808b6a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808b6ac:	9801      	ldr	r0, [sp, #4]
 808b6ae:	1845      	adds	r5, r0, r1
 808b6b0:	20ff      	movs	r0, #255	; 0xff
 808b6b2:	fb95 f6f0 	sdiv	r6, r5, r0
 808b6b6:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 808b6ba:	1bae      	subs	r6, r5, r6
 808b6bc:	ad04      	add	r5, sp, #16
 808b6be:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808b6c2:	9e02      	ldr	r6, [sp, #8]
 808b6c4:	4431      	add	r1, r6
 808b6c6:	fb91 f0f0 	sdiv	r0, r1, r0
 808b6ca:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808b6ce:	1a09      	subs	r1, r1, r0
 808b6d0:	a804      	add	r0, sp, #16
 808b6d2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808b6d6:	0209      	lsls	r1, r1, #8
 808b6d8:	e001      	b.n	808b6de <_ZL14aes_gen_tablesv+0x152>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808b6da:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808b6dc:	4619      	mov	r1, r3
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808b6de:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808b6e0:	b183      	cbz	r3, 808b704 <_ZL14aes_gen_tablesv+0x178>
 808b6e2:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808b6e6:	9803      	ldr	r0, [sp, #12]
 808b6e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808b6ec:	4401      	add	r1, r0
 808b6ee:	20ff      	movs	r0, #255	; 0xff
 808b6f0:	fb91 f0f0 	sdiv	r0, r1, r0
 808b6f4:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808b6f8:	1a08      	subs	r0, r1, r0
 808b6fa:	a904      	add	r1, sp, #16
 808b6fc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 808b700:	0409      	lsls	r1, r1, #16
 808b702:	e000      	b.n	808b706 <_ZL14aes_gen_tablesv+0x17a>
 808b704:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808b706:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808b708:	b173      	cbz	r3, 808b728 <_ZL14aes_gen_tablesv+0x19c>
 808b70a:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808b70e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 808b712:	21ff      	movs	r1, #255	; 0xff
 808b714:	443b      	add	r3, r7
 808b716:	fb93 f1f1 	sdiv	r1, r3, r1
 808b71a:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 808b71e:	1a59      	subs	r1, r3, r1
 808b720:	ab04      	add	r3, sp, #16
 808b722:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808b726:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808b728:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808b72a:	4b0e      	ldr	r3, [pc, #56]	; (808b764 <_ZL14aes_gen_tablesv+0x1d8>)
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808b72c:	3201      	adds	r2, #1
        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808b72e:	50e5      	str	r5, [r4, r3]

        RT1[i] = ROTL8( RT0[i] );
 808b730:	4b0d      	ldr	r3, [pc, #52]	; (808b768 <_ZL14aes_gen_tablesv+0x1dc>)
 808b732:	ea4f 6535 	mov.w	r5, r5, ror #24
 808b736:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 808b738:	4b0c      	ldr	r3, [pc, #48]	; (808b76c <_ZL14aes_gen_tablesv+0x1e0>)
 808b73a:	ea4f 6535 	mov.w	r5, r5, ror #24
 808b73e:	50e5      	str	r5, [r4, r3]
        RT3[i] = ROTL8( RT2[i] );
 808b740:	4b0b      	ldr	r3, [pc, #44]	; (808b770 <_ZL14aes_gen_tablesv+0x1e4>)
 808b742:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808b746:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 808b74a:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808b74c:	d187      	bne.n	808b65e <_ZL14aes_gen_tablesv+0xd2>

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
    }
}
 808b74e:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 808b752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b756:	bf00      	nop
 808b758:	2000366c 	.word	0x2000366c
 808b75c:	2000256c 	.word	0x2000256c
 808b760:	2000246c 	.word	0x2000246c
 808b764:	20002a6c 	.word	0x20002a6c
 808b768:	20002e6c 	.word	0x20002e6c
 808b76c:	2000326c 	.word	0x2000326c
 808b770:	2000266c 	.word	0x2000266c
 808b774:	2000146c 	.word	0x2000146c
 808b778:	2000186c 	.word	0x2000186c
 808b77c:	20001c6c 	.word	0x20001c6c
 808b780:	2000206c 	.word	0x2000206c

0808b784 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 808b784:	f44f 728c 	mov.w	r2, #280	; 0x118
 808b788:	2100      	movs	r1, #0
 808b78a:	f004 bf58 	b.w	809063e <memset>

0808b78e <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 808b78e:	b138      	cbz	r0, 808b7a0 <mbedtls_aes_free+0x12>
 808b790:	f500 728c 	add.w	r2, r0, #280	; 0x118

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 808b794:	2300      	movs	r3, #0
 808b796:	4290      	cmp	r0, r2
 808b798:	d002      	beq.n	808b7a0 <mbedtls_aes_free+0x12>
 808b79a:	7003      	strb	r3, [r0, #0]
 808b79c:	3001      	adds	r0, #1
 808b79e:	e7fa      	b.n	808b796 <mbedtls_aes_free+0x8>
 808b7a0:	4770      	bx	lr
	...

0808b7a4 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808b7a6:	4e7a      	ldr	r6, [pc, #488]	; (808b990 <mbedtls_aes_setkey_enc+0x1ec>)
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808b7a8:	4604      	mov	r4, r0
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808b7aa:	6833      	ldr	r3, [r6, #0]
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808b7ac:	460f      	mov	r7, r1
 808b7ae:	4615      	mov	r5, r2
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808b7b0:	b91b      	cbnz	r3, 808b7ba <mbedtls_aes_setkey_enc+0x16>
    {
        aes_gen_tables();
 808b7b2:	f7ff feeb 	bl	808b58c <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
 808b7b6:	2301      	movs	r3, #1
 808b7b8:	6033      	str	r3, [r6, #0]

    }
#endif

    switch( keybits )
 808b7ba:	2dc0      	cmp	r5, #192	; 0xc0
 808b7bc:	d007      	beq.n	808b7ce <mbedtls_aes_setkey_enc+0x2a>
 808b7be:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 808b7c2:	d006      	beq.n	808b7d2 <mbedtls_aes_setkey_enc+0x2e>
 808b7c4:	2d80      	cmp	r5, #128	; 0x80
 808b7c6:	f040 80dd 	bne.w	808b984 <mbedtls_aes_setkey_enc+0x1e0>
    {
        case 128: ctx->nr = 10; break;
 808b7ca:	230a      	movs	r3, #10
 808b7cc:	e002      	b.n	808b7d4 <mbedtls_aes_setkey_enc+0x30>
        case 192: ctx->nr = 12; break;
 808b7ce:	230c      	movs	r3, #12
 808b7d0:	e000      	b.n	808b7d4 <mbedtls_aes_setkey_enc+0x30>
        case 256: ctx->nr = 14; break;
 808b7d2:	230e      	movs	r3, #14
 808b7d4:	6023      	str	r3, [r4, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808b7d6:	f104 0308 	add.w	r3, r4, #8
 808b7da:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808b7dc:	096d      	lsrs	r5, r5, #5
 808b7de:	2000      	movs	r0, #0
 808b7e0:	42a8      	cmp	r0, r5
 808b7e2:	d010      	beq.n	808b806 <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 808b7e4:	eb07 0180 	add.w	r1, r7, r0, lsl #2
 808b7e8:	788a      	ldrb	r2, [r1, #2]
 808b7ea:	784e      	ldrb	r6, [r1, #1]
 808b7ec:	0412      	lsls	r2, r2, #16
 808b7ee:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 808b7f2:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
 808b7f6:	78c9      	ldrb	r1, [r1, #3]
 808b7f8:	4332      	orrs	r2, r6
 808b7fa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 808b7fe:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808b802:	3001      	adds	r0, #1
 808b804:	e7ec      	b.n	808b7e0 <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808b806:	6822      	ldr	r2, [r4, #0]
 808b808:	2a0c      	cmp	r2, #12
 808b80a:	d031      	beq.n	808b870 <mbedtls_aes_setkey_enc+0xcc>
 808b80c:	2a0e      	cmp	r2, #14
 808b80e:	d068      	beq.n	808b8e2 <mbedtls_aes_setkey_enc+0x13e>
 808b810:	2a0a      	cmp	r2, #10
 808b812:	f040 80ba 	bne.w	808b98a <mbedtls_aes_setkey_enc+0x1e6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 808b816:	4f5f      	ldr	r7, [pc, #380]	; (808b994 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808b818:	4e5f      	ldr	r6, [pc, #380]	; (808b998 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808b81a:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808b81c:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808b81e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 808b822:	681a      	ldr	r2, [r3, #0]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808b824:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808b826:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808b828:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808b82c:	5cb0      	ldrb	r0, [r6, r2]
 808b82e:	0e22      	lsrs	r2, r4, #24
 808b830:	5cb2      	ldrb	r2, [r6, r2]
 808b832:	4041      	eors	r1, r0
 808b834:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808b838:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808b83a:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808b83c:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808b83e:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 808b842:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808b846:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808b848:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808b84c:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808b850:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808b854:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 808b856:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 808b85a:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808b85e:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 808b860:	ea82 0201 	eor.w	r2, r2, r1
 808b864:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 808b866:	ea82 0204 	eor.w	r2, r2, r4
 808b86a:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808b86c:	d1d6      	bne.n	808b81c <mbedtls_aes_setkey_enc+0x78>
 808b86e:	e08c      	b.n	808b98a <mbedtls_aes_setkey_enc+0x1e6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 808b870:	4e48      	ldr	r6, [pc, #288]	; (808b994 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808b872:	4d49      	ldr	r5, [pc, #292]	; (808b998 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808b874:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808b876:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808b87a:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808b87c:	681a      	ldr	r2, [r3, #0]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808b87e:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808b880:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808b882:	f3c0 2107 	ubfx	r1, r0, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808b886:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808b888:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808b88a:	ea82 0201 	eor.w	r2, r2, r1
 808b88e:	ea4f 6110 	mov.w	r1, r0, lsr #24
 808b892:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808b894:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808b898:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808b89c:	b2c1      	uxtb	r1, r0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808b89e:	5c69      	ldrb	r1, [r5, r1]
 808b8a0:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 808b8a4:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808b8a8:	5c69      	ldrb	r1, [r5, r1]
 808b8aa:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808b8ae:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808b8b2:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 808b8b4:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 808b8b8:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808b8bc:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 808b8be:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 808b8c2:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 808b8c6:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 808b8c8:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 808b8cc:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 808b8d0:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 808b8d2:	ea82 0201 	eor.w	r2, r2, r1
 808b8d6:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 808b8d8:	ea82 0200 	eor.w	r2, r2, r0
 808b8dc:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808b8de:	d1ca      	bne.n	808b876 <mbedtls_aes_setkey_enc+0xd2>
 808b8e0:	e053      	b.n	808b98a <mbedtls_aes_setkey_enc+0x1e6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 808b8e2:	4e2c      	ldr	r6, [pc, #176]	; (808b994 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808b8e4:	482c      	ldr	r0, [pc, #176]	; (808b998 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808b8e6:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808b8e8:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808b8ec:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808b8ee:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808b8f0:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808b8f2:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808b8f4:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808b8f8:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808b8fa:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808b8fc:	4051      	eors	r1, r2
 808b8fe:	0e22      	lsrs	r2, r4, #24
 808b900:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808b902:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808b904:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808b908:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808b90a:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808b90c:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808b910:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 808b914:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808b918:	5c82      	ldrb	r2, [r0, r2]
 808b91a:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808b91e:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808b922:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 808b924:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 808b928:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808b92c:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 808b92e:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
 808b932:	ea87 0701 	eor.w	r7, r7, r1
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808b936:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 808b938:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 808b93a:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808b93c:	5c82      	ldrb	r2, [r0, r2]
 808b93e:	f853 1c10 	ldr.w	r1, [r3, #-16]
 808b942:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808b946:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808b94a:	5c82      	ldrb	r2, [r0, r2]
 808b94c:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 808b950:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808b954:	5c82      	ldrb	r2, [r0, r2]
 808b956:	f3c7 4707 	ubfx	r7, r7, #16, #8
 808b95a:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 808b95e:	5dc2      	ldrb	r2, [r0, r7]
 808b960:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808b964:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808b968:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
 808b96a:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
 808b96e:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808b972:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 808b974:	ea82 0201 	eor.w	r2, r2, r1
 808b978:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 808b97a:	ea82 0204 	eor.w	r2, r2, r4
 808b97e:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808b980:	d1b2      	bne.n	808b8e8 <mbedtls_aes_setkey_enc+0x144>
 808b982:	e002      	b.n	808b98a <mbedtls_aes_setkey_enc+0x1e6>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 808b984:	f06f 001f 	mvn.w	r0, #31
 808b988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 808b98a:	2000      	movs	r0, #0
}
 808b98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808b98e:	bf00      	nop
 808b990:	20001468 	.word	0x20001468
 808b994:	2000366c 	.word	0x2000366c
 808b998:	2000256c 	.word	0x2000256c

0808b99c <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b9a0:	4604      	mov	r4, r0
 808b9a2:	460d      	mov	r5, r1
 808b9a4:	4616      	mov	r6, r2
 808b9a6:	b0c9      	sub	sp, #292	; 0x124
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 808b9a8:	a802      	add	r0, sp, #8
 808b9aa:	f7ff feeb 	bl	808b784 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808b9ae:	f104 0308 	add.w	r3, r4, #8
 808b9b2:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 808b9b4:	4632      	mov	r2, r6
 808b9b6:	4629      	mov	r1, r5
 808b9b8:	a802      	add	r0, sp, #8
 808b9ba:	f7ff fef3 	bl	808b7a4 <mbedtls_aes_setkey_enc>
 808b9be:	4680      	mov	r8, r0
 808b9c0:	2800      	cmp	r0, #0
 808b9c2:	d14b      	bne.n	808ba5c <mbedtls_aes_setkey_dec+0xc0>
        goto exit;

    ctx->nr = cty.nr;
 808b9c4:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808b9c6:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 808b9c8:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808b9ca:	010a      	lsls	r2, r1, #4
 808b9cc:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
 808b9ce:	5882      	ldr	r2, [r0, r2]
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808b9d0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 808ba74 <mbedtls_aes_setkey_dec+0xd8>
    }
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
 808b9d4:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 808b9d6:	685a      	ldr	r2, [r3, #4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808b9d8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 808ba78 <mbedtls_aes_setkey_dec+0xdc>
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
 808b9dc:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 808b9de:	689a      	ldr	r2, [r3, #8]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808b9e0:	f8df a098 	ldr.w	sl, [pc, #152]	; 808ba7c <mbedtls_aes_setkey_dec+0xe0>

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 808b9e4:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 808b9e6:	68d8      	ldr	r0, [r3, #12]
 808b9e8:	f104 0218 	add.w	r2, r4, #24
 808b9ec:	6160      	str	r0, [r4, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808b9ee:	4c1f      	ldr	r4, [pc, #124]	; (808ba6c <mbedtls_aes_setkey_dec+0xd0>)
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808b9f0:	3901      	subs	r1, #1
 808b9f2:	3b10      	subs	r3, #16
 808b9f4:	2900      	cmp	r1, #0
 808b9f6:	dd29      	ble.n	808ba4c <mbedtls_aes_setkey_dec+0xb0>
 808b9f8:	1f1d      	subs	r5, r3, #4
 808b9fa:	f1a2 0e04 	sub.w	lr, r2, #4
 808b9fe:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808ba02:	f855 0f04 	ldr.w	r0, [r5, #4]!
 808ba06:	b2c6      	uxtb	r6, r0
 808ba08:	5da7      	ldrb	r7, [r4, r6]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808ba0a:	0e06      	lsrs	r6, r0, #24
 808ba0c:	5da6      	ldrb	r6, [r4, r6]
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808ba0e:	45ab      	cmp	fp, r5
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808ba10:	9601      	str	r6, [sp, #4]
 808ba12:	4e17      	ldr	r6, [pc, #92]	; (808ba70 <mbedtls_aes_setkey_dec+0xd4>)
 808ba14:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808ba18:	9e01      	ldr	r6, [sp, #4]
 808ba1a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 808ba1e:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808ba22:	f3c0 2607 	ubfx	r6, r0, #8, #8
 808ba26:	5da6      	ldrb	r6, [r4, r6]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808ba28:	f3c0 4007 	ubfx	r0, r0, #16, #8
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808ba2c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808ba30:	5c20      	ldrb	r0, [r4, r0]
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808ba32:	ea86 0607 	eor.w	r6, r6, r7
 808ba36:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
 808ba3a:	ea86 0607 	eor.w	r6, r6, r7
 808ba3e:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808ba42:	d1de      	bne.n	808ba02 <mbedtls_aes_setkey_dec+0x66>
 808ba44:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808ba46:	3901      	subs	r1, #1
 808ba48:	3b10      	subs	r3, #16
 808ba4a:	e7d3      	b.n	808b9f4 <mbedtls_aes_setkey_dec+0x58>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 808ba4c:	6819      	ldr	r1, [r3, #0]
 808ba4e:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 808ba50:	6859      	ldr	r1, [r3, #4]
 808ba52:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 808ba54:	6899      	ldr	r1, [r3, #8]
 808ba56:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 808ba58:	68db      	ldr	r3, [r3, #12]
 808ba5a:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 808ba5c:	a802      	add	r0, sp, #8
 808ba5e:	f7ff fe96 	bl	808b78e <mbedtls_aes_free>

    return( ret );
}
 808ba62:	4640      	mov	r0, r8
 808ba64:	b049      	add	sp, #292	; 0x124
 808ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ba6a:	bf00      	nop
 808ba6c:	2000256c 	.word	0x2000256c
 808ba70:	20002a6c 	.word	0x20002a6c
 808ba74:	2000266c 	.word	0x2000266c
 808ba78:	20002e6c 	.word	0x20002e6c
 808ba7c:	2000326c 	.word	0x2000326c

0808ba80 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808ba84:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808ba86:	680d      	ldr	r5, [r1, #0]
 808ba88:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ba8a:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808ba8c:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808ba90:	684d      	ldr	r5, [r1, #4]
 808ba92:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808ba94:	688e      	ldr	r6, [r1, #8]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808ba96:	406c      	eors	r4, r5
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808ba98:	689d      	ldr	r5, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ba9a:	1040      	asrs	r0, r0, #1
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808ba9c:	b085      	sub	sp, #20
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ba9e:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808baa0:	4075      	eors	r5, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808baa2:	68ce      	ldr	r6, [r1, #12]
 808baa4:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808baa6:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808baa8:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808baac:	4071      	eors	r1, r6
 808baae:	f8df e364 	ldr.w	lr, [pc, #868]	; 808be14 <mbedtls_internal_aes_encrypt+0x394>
 808bab2:	4ed4      	ldr	r6, [pc, #848]	; (808be04 <mbedtls_internal_aes_encrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808bab4:	f8df a354 	ldr.w	sl, [pc, #852]	; 808be0c <mbedtls_internal_aes_encrypt+0x38c>
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808bab8:	9002      	str	r0, [sp, #8]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808baba:	9801      	ldr	r0, [sp, #4]
 808babc:	461f      	mov	r7, r3
 808babe:	2800      	cmp	r0, #0
 808bac0:	ea4f 6011 	mov.w	r0, r1, lsr #24
 808bac4:	f103 0320 	add.w	r3, r3, #32
 808bac8:	f8df 8348 	ldr.w	r8, [pc, #840]	; 808be14 <mbedtls_internal_aes_encrypt+0x394>
 808bacc:	fa5f f98b 	uxtb.w	r9, fp
 808bad0:	f8df c330 	ldr.w	ip, [pc, #816]	; 808be04 <mbedtls_internal_aes_encrypt+0x384>
 808bad4:	9003      	str	r0, [sp, #12]
 808bad6:	f340 80be 	ble.w	808bc56 <mbedtls_internal_aes_encrypt+0x1d6>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808bada:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 808bade:	f85e 8029 	ldr.w	r8, [lr, r9, lsl #2]
 808bae2:	48c9      	ldr	r0, [pc, #804]	; (808be08 <mbedtls_internal_aes_encrypt+0x388>)
 808bae4:	ea88 0807 	eor.w	r8, r8, r7
 808bae8:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808baec:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 808baf0:	ea88 0807 	eor.w	r8, r8, r7
 808baf4:	f3c4 2707 	ubfx	r7, r4, #8, #8
 808baf8:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 808bafc:	ea88 0707 	eor.w	r7, r8, r7
 808bb00:	f85a 802c 	ldr.w	r8, [sl, ip, lsl #2]
 808bb04:	fa5f fc84 	uxtb.w	ip, r4
 808bb08:	ea87 0808 	eor.w	r8, r7, r8
 808bb0c:	ea4f 671b 	mov.w	r7, fp, lsr #24
 808bb10:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808bb14:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808bb18:	f3c5 2c07 	ubfx	ip, r5, #8, #8
 808bb1c:	ea89 0907 	eor.w	r9, r9, r7
 808bb20:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808bb24:	ea89 0707 	eor.w	r7, r9, r7
 808bb28:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808bb2c:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808bb30:	ea87 0709 	eor.w	r7, r7, r9
 808bb34:	f85a 902c 	ldr.w	r9, [sl, ip, lsl #2]
 808bb38:	fa5f fc85 	uxtb.w	ip, r5
 808bb3c:	ea87 0909 	eor.w	r9, r7, r9
 808bb40:	0e27      	lsrs	r7, r4, #24
 808bb42:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808bb46:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808bb4a:	0e2d      	lsrs	r5, r5, #24
 808bb4c:	ea8c 0c07 	eor.w	ip, ip, r7
 808bb50:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808bb54:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 808bb58:	ea8c 0707 	eor.w	r7, ip, r7
 808bb5c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 808bb60:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808bb64:	b2c9      	uxtb	r1, r1
 808bb66:	ea87 070c 	eor.w	r7, r7, ip
 808bb6a:	f3cb 4c07 	ubfx	ip, fp, #16, #8
 808bb6e:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 808bb72:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808bb76:	ea87 070c 	eor.w	r7, r7, ip
 808bb7a:	ea81 0c05 	eor.w	ip, r1, r5
 808bb7e:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808bb82:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808bb86:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808bb8a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808bb8e:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 808bb92:	ea8c 0101 	eor.w	r1, ip, r1
 808bb96:	4069      	eors	r1, r5
 808bb98:	ea81 0c04 	eor.w	ip, r1, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808bb9c:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808bba0:	fa5f f488 	uxtb.w	r4, r8
 808bba4:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808bba8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808bbac:	b2fd      	uxtb	r5, r7
 808bbae:	4061      	eors	r1, r4
 808bbb0:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808bbb4:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808bbb8:	404c      	eors	r4, r1
 808bbba:	f3c9 2107 	ubfx	r1, r9, #8, #8
 808bbbe:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808bbc2:	404c      	eors	r4, r1
 808bbc4:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808bbc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808bbcc:	ea84 0b01 	eor.w	fp, r4, r1
 808bbd0:	fa5f f489 	uxtb.w	r4, r9
 808bbd4:	ea4f 6118 	mov.w	r1, r8, lsr #24
 808bbd8:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808bbdc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808bbe0:	4061      	eors	r1, r4
 808bbe2:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 808bbe6:	404c      	eors	r4, r1
 808bbe8:	f3c7 2107 	ubfx	r1, r7, #8, #8
 808bbec:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808bbf0:	0e3f      	lsrs	r7, r7, #24
 808bbf2:	404c      	eors	r4, r1
 808bbf4:	f3cc 4107 	ubfx	r1, ip, #16, #8
 808bbf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808bbfc:	404c      	eors	r4, r1
 808bbfe:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808bc02:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808bc06:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808bc0a:	404d      	eors	r5, r1
 808bc0c:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808bc10:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808bc14:	4069      	eors	r1, r5
 808bc16:	f3cc 2507 	ubfx	r5, ip, #8, #8
 808bc1a:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808bc1e:	fa5f fc8c 	uxtb.w	ip, ip
 808bc22:	4069      	eors	r1, r5
 808bc24:	f3c8 4507 	ubfx	r5, r8, #16, #8
 808bc28:	f85a 5025 	ldr.w	r5, [sl, r5, lsl #2]
 808bc2c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 808bc30:	404d      	eors	r5, r1
 808bc32:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808bc36:	404f      	eors	r7, r1
 808bc38:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808bc3c:	4079      	eors	r1, r7
 808bc3e:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808bc42:	9801      	ldr	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808bc44:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808bc46:	3801      	subs	r0, #1
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808bc48:	f85a 7029 	ldr.w	r7, [sl, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808bc4c:	9001      	str	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808bc4e:	6818      	ldr	r0, [r3, #0]
 808bc50:	4079      	eors	r1, r7
 808bc52:	9002      	str	r0, [sp, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808bc54:	e731      	b.n	808baba <mbedtls_internal_aes_encrypt+0x3a>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808bc56:	0e0b      	lsrs	r3, r1, #24
 808bc58:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 808bc5c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808bc60:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 808be08 <mbedtls_internal_aes_encrypt+0x388>
 808bc64:	4043      	eors	r3, r0
 808bc66:	9802      	ldr	r0, [sp, #8]
 808bc68:	4e68      	ldr	r6, [pc, #416]	; (808be0c <mbedtls_internal_aes_encrypt+0x38c>)
 808bc6a:	ea83 0900 	eor.w	r9, r3, r0
 808bc6e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 808bc72:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 808bc76:	b2e0      	uxtb	r0, r4
 808bc78:	ea89 0903 	eor.w	r9, r9, r3
 808bc7c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 808bc80:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808bc84:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808bc88:	ea89 0903 	eor.w	r9, r9, r3
 808bc8c:	ea4f 631b 	mov.w	r3, fp, lsr #24
 808bc90:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808bc94:	fa5f fa85 	uxtb.w	sl, r5
 808bc98:	4058      	eors	r0, r3
 808bc9a:	687b      	ldr	r3, [r7, #4]
 808bc9c:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 808bca0:	4043      	eors	r3, r0
 808bca2:	f3c5 2007 	ubfx	r0, r5, #8, #8
 808bca6:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 808bcaa:	0e2d      	lsrs	r5, r5, #24
 808bcac:	4043      	eors	r3, r0
 808bcae:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808bcb2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808bcb6:	4043      	eors	r3, r0
 808bcb8:	0e20      	lsrs	r0, r4, #24
 808bcba:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808bcbe:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808bcc2:	ea8a 0a00 	eor.w	sl, sl, r0
 808bcc6:	68b8      	ldr	r0, [r7, #8]
 808bcc8:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808bccc:	ea8a 0000 	eor.w	r0, sl, r0
 808bcd0:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 808bcd4:	b2c9      	uxtb	r1, r1
 808bcd6:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808bcda:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 808bcde:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 808bce2:	ea88 0501 	eor.w	r5, r8, r1
 808bce6:	68f9      	ldr	r1, [r7, #12]
 808bce8:	ea80 000a 	eor.w	r0, r0, sl
 808bcec:	4069      	eors	r1, r5
 808bcee:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808bcf2:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808bcf6:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 808bcfa:	4069      	eors	r1, r5
 808bcfc:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 808bcfe:	4c44      	ldr	r4, [pc, #272]	; (808be10 <mbedtls_internal_aes_encrypt+0x390>)
 808bd00:	fa5f f589 	uxtb.w	r5, r9
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808bd04:	f814 e005 	ldrb.w	lr, [r4, r5]
 808bd08:	693d      	ldr	r5, [r7, #16]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808bd0a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808bd0e:	0e0e      	lsrs	r6, r1, #24
 808bd10:	ea8e 0505 	eor.w	r5, lr, r5
 808bd14:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808bd18:	f3c3 2607 	ubfx	r6, r3, #8, #8
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808bd1c:	ea80 000a 	eor.w	r0, r0, sl

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808bd20:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808bd24:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808bd28:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808bd2c:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808bd30:	f814 e006 	ldrb.w	lr, [r4, r6]
 808bd34:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 808bd38:	b2dd      	uxtb	r5, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808bd3a:	5d66      	ldrb	r6, [r4, r5]
 808bd3c:	697d      	ldr	r5, [r7, #20]
 808bd3e:	4075      	eors	r5, r6
 808bd40:	ea4f 6619 	mov.w	r6, r9, lsr #24
 808bd44:	5da6      	ldrb	r6, [r4, r6]
 808bd46:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808bd4a:	f3c0 2607 	ubfx	r6, r0, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808bd4e:	5da6      	ldrb	r6, [r4, r6]
 808bd50:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808bd54:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808bd58:	5da6      	ldrb	r6, [r4, r6]
 808bd5a:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 808bd5e:	b2c5      	uxtb	r5, r0
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808bd60:	f814 c005 	ldrb.w	ip, [r4, r5]
 808bd64:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808bd66:	0e00      	lsrs	r0, r0, #24

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808bd68:	ea8c 0505 	eor.w	r5, ip, r5
 808bd6c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 808bd70:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808bd74:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808bd76:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808bd7a:	f3c1 2c07 	ubfx	ip, r1, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808bd7e:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 808bd82:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808bd84:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808bd88:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808bd8c:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808bd90:	f3c9 2907 	ubfx	r9, r9, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808bd94:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808bd98:	f814 c001 	ldrb.w	ip, [r4, r1]
 808bd9c:	69f9      	ldr	r1, [r7, #28]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808bd9e:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808bda2:	ea8c 0101 	eor.w	r1, ip, r1
 808bda6:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
 808bdaa:	f814 0009 	ldrb.w	r0, [r4, r9]
 808bdae:	5ce3      	ldrb	r3, [r4, r3]
 808bdb0:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808bdb4:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808bdb8:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808bdbc:	7051      	strb	r1, [r2, #1]
 808bdbe:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808bdc2:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808bdc4:	0a31      	lsrs	r1, r6, #8
 808bdc6:	7151      	strb	r1, [r2, #5]
 808bdc8:	0c31      	lsrs	r1, r6, #16
 808bdca:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808bdcc:	0a29      	lsrs	r1, r5, #8
 808bdce:	7251      	strb	r1, [r2, #9]
 808bdd0:	0c29      	lsrs	r1, r5, #16
 808bdd2:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808bdd4:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808bdd6:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808bdda:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808bddc:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808bde0:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808bde2:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808bde4:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808bde6:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808bde8:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808bdea:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808bdec:	0c19      	lsrs	r1, r3, #16
 808bdee:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808bdf0:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808bdf4:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808bdf6:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808bdf8:	7391      	strb	r1, [r2, #14]
 808bdfa:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808bdfc:	b005      	add	sp, #20
 808bdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808be02:	bf00      	nop
 808be04:	2000206c 	.word	0x2000206c
 808be08:	2000186c 	.word	0x2000186c
 808be0c:	20001c6c 	.word	0x20001c6c
 808be10:	2000256c 	.word	0x2000256c
 808be14:	2000146c 	.word	0x2000146c

0808be18 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808be18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808be1c:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808be1e:	680d      	ldr	r5, [r1, #0]
 808be20:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808be22:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808be24:	ea85 0a04 	eor.w	sl, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808be28:	684d      	ldr	r5, [r1, #4]
 808be2a:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808be2c:	1040      	asrs	r0, r0, #1
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808be2e:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808be32:	688d      	ldr	r5, [r1, #8]
 808be34:	689c      	ldr	r4, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808be36:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808be38:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808be3a:	68cd      	ldr	r5, [r1, #12]
 808be3c:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808be3e:	9000      	str	r0, [sp, #0]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808be40:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808be44:	4069      	eors	r1, r5
 808be46:	f8df e364 	ldr.w	lr, [pc, #868]	; 808c1ac <mbedtls_internal_aes_decrypt+0x394>
 808be4a:	4ed4      	ldr	r6, [pc, #848]	; (808c19c <mbedtls_internal_aes_decrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808be4c:	4dd4      	ldr	r5, [pc, #848]	; (808c1a0 <mbedtls_internal_aes_decrypt+0x388>)
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808be4e:	9001      	str	r0, [sp, #4]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808be50:	9800      	ldr	r0, [sp, #0]
 808be52:	461f      	mov	r7, r3
 808be54:	2800      	cmp	r0, #0
 808be56:	f103 0320 	add.w	r3, r3, #32
 808be5a:	f8df 8350 	ldr.w	r8, [pc, #848]	; 808c1ac <mbedtls_internal_aes_decrypt+0x394>
 808be5e:	fa5f f08a 	uxtb.w	r0, sl
 808be62:	f8df c338 	ldr.w	ip, [pc, #824]	; 808c19c <mbedtls_internal_aes_decrypt+0x384>
 808be66:	ea4f 691b 	mov.w	r9, fp, lsr #24
 808be6a:	f340 80c1 	ble.w	808bff0 <mbedtls_internal_aes_decrypt+0x1d8>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808be6e:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 808be72:	f85e 8020 	ldr.w	r8, [lr, r0, lsl #2]
 808be76:	48cb      	ldr	r0, [pc, #812]	; (808c1a4 <mbedtls_internal_aes_decrypt+0x38c>)
 808be78:	ea88 0807 	eor.w	r8, r8, r7
 808be7c:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808be80:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 808be84:	ea88 0807 	eor.w	r8, r8, r7
 808be88:	f3c1 2707 	ubfx	r7, r1, #8, #8
 808be8c:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808be90:	ea88 0707 	eor.w	r7, r8, r7
 808be94:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 808be98:	fa5f fc8b 	uxtb.w	ip, fp
 808be9c:	ea87 0808 	eor.w	r8, r7, r8
 808bea0:	0e27      	lsrs	r7, r4, #24
 808bea2:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808bea6:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808beaa:	f3ca 2c07 	ubfx	ip, sl, #8, #8
 808beae:	ea89 0907 	eor.w	r9, r9, r7
 808beb2:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808beb6:	ea89 0707 	eor.w	r7, r9, r7
 808beba:	f855 902c 	ldr.w	r9, [r5, ip, lsl #2]
 808bebe:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808bec2:	ea87 0709 	eor.w	r7, r7, r9
 808bec6:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808beca:	fa5f fc84 	uxtb.w	ip, r4
 808bece:	ea87 0909 	eor.w	r9, r7, r9
 808bed2:	0e0f      	lsrs	r7, r1, #24
 808bed4:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808bed8:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808bedc:	b2c9      	uxtb	r1, r1
 808bede:	ea8c 0c07 	eor.w	ip, ip, r7
 808bee2:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808bee6:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808beea:	ea8c 0707 	eor.w	r7, ip, r7
 808beee:	f3cb 2c07 	ubfx	ip, fp, #8, #8
 808bef2:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 808bef6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808befa:	ea87 070c 	eor.w	r7, r7, ip
 808befe:	f3ca 4c07 	ubfx	ip, sl, #16, #8
 808bf02:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808bf06:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 808bf0a:	ea87 070c 	eor.w	r7, r7, ip
 808bf0e:	f856 c02a 	ldr.w	ip, [r6, sl, lsl #2]
 808bf12:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808bf16:	ea81 0c0c 	eor.w	ip, r1, ip
 808bf1a:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808bf1e:	ea8c 0101 	eor.w	r1, ip, r1
 808bf22:	4061      	eors	r1, r4
 808bf24:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808bf28:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808bf2c:	ea81 0c04 	eor.w	ip, r1, r4
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808bf30:	fa5f f488 	uxtb.w	r4, r8
 808bf34:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808bf38:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808bf3c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808bf40:	4061      	eors	r1, r4
 808bf42:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808bf46:	404c      	eors	r4, r1
 808bf48:	f3cc 2107 	ubfx	r1, ip, #8, #8
 808bf4c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 808bf50:	404c      	eors	r4, r1
 808bf52:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808bf56:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808bf5a:	ea84 0a01 	eor.w	sl, r4, r1
 808bf5e:	fa5f f489 	uxtb.w	r4, r9
 808bf62:	0e39      	lsrs	r1, r7, #24
 808bf64:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808bf68:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808bf6c:	404c      	eors	r4, r1
 808bf6e:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 808bf72:	4061      	eors	r1, r4
 808bf74:	f3c8 2407 	ubfx	r4, r8, #8, #8
 808bf78:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808bf7c:	4061      	eors	r1, r4
 808bf7e:	f3cc 4407 	ubfx	r4, ip, #16, #8
 808bf82:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808bf86:	ea81 0b04 	eor.w	fp, r1, r4
 808bf8a:	b2fc      	uxtb	r4, r7
 808bf8c:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808bf90:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808bf94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808bf98:	fa5f fc8c 	uxtb.w	ip, ip
 808bf9c:	404c      	eors	r4, r1
 808bf9e:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808bfa2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 808bfa6:	4061      	eors	r1, r4
 808bfa8:	f3c9 2407 	ubfx	r4, r9, #8, #8
 808bfac:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808bfb0:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808bfb4:	4061      	eors	r1, r4
 808bfb6:	f3c8 4407 	ubfx	r4, r8, #16, #8
 808bfba:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808bfbe:	ea4f 6818 	mov.w	r8, r8, lsr #24
 808bfc2:	404c      	eors	r4, r1
 808bfc4:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808bfc8:	f856 c028 	ldr.w	ip, [r6, r8, lsl #2]
 808bfcc:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808bfd0:	ea81 0c0c 	eor.w	ip, r1, ip
 808bfd4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808bfd8:	ea8c 0101 	eor.w	r1, ip, r1
 808bfdc:	4079      	eors	r1, r7
 808bfde:	f850 7029 	ldr.w	r7, [r0, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808bfe2:	9800      	ldr	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808bfe4:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808bfe6:	3801      	subs	r0, #1
 808bfe8:	9000      	str	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808bfea:	6818      	ldr	r0, [r3, #0]
 808bfec:	9001      	str	r0, [sp, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808bfee:	e72f      	b.n	808be50 <mbedtls_internal_aes_decrypt+0x38>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808bff0:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808bff4:	f85c 3029 	ldr.w	r3, [ip, r9, lsl #2]
 808bff8:	4e69      	ldr	r6, [pc, #420]	; (808c1a0 <mbedtls_internal_aes_decrypt+0x388>)
 808bffa:	4043      	eors	r3, r0
 808bffc:	9801      	ldr	r0, [sp, #4]
 808bffe:	4d69      	ldr	r5, [pc, #420]	; (808c1a4 <mbedtls_internal_aes_decrypt+0x38c>)
 808c000:	ea83 0900 	eor.w	r9, r3, r0
 808c004:	f3c1 2307 	ubfx	r3, r1, #8, #8
 808c008:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808c00c:	fa5f f08b 	uxtb.w	r0, fp
 808c010:	ea89 0903 	eor.w	r9, r9, r3
 808c014:	f3c4 4307 	ubfx	r3, r4, #16, #8
 808c018:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808c01c:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808c020:	ea89 0903 	eor.w	r9, r9, r3
 808c024:	0e23      	lsrs	r3, r4, #24
 808c026:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808c02a:	fa5f fe84 	uxtb.w	lr, r4
 808c02e:	4058      	eors	r0, r3
 808c030:	687b      	ldr	r3, [r7, #4]
 808c032:	f858 e02e 	ldr.w	lr, [r8, lr, lsl #2]
 808c036:	4043      	eors	r3, r0
 808c038:	f3ca 2007 	ubfx	r0, sl, #8, #8
 808c03c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808c040:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808c044:	4043      	eors	r3, r0
 808c046:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808c04a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 808c04e:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808c052:	4043      	eors	r3, r0
 808c054:	0e08      	lsrs	r0, r1, #24
 808c056:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808c05a:	b2c9      	uxtb	r1, r1
 808c05c:	ea8e 0e00 	eor.w	lr, lr, r0
 808c060:	68b8      	ldr	r0, [r7, #8]
 808c062:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808c066:	ea8e 0000 	eor.w	r0, lr, r0
 808c06a:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 808c06e:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808c072:	0e1e      	lsrs	r6, r3, #24
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808c074:	ea80 000e 	eor.w	r0, r0, lr
 808c078:	f3ca 4e07 	ubfx	lr, sl, #16, #8
 808c07c:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 808c080:	ea80 000e 	eor.w	r0, r0, lr
 808c084:	ea4f 6e1a 	mov.w	lr, sl, lsr #24
 808c088:	f85c 102e 	ldr.w	r1, [ip, lr, lsl #2]
 808c08c:	ea88 0e01 	eor.w	lr, r8, r1
 808c090:	68f9      	ldr	r1, [r7, #12]
 808c092:	ea8e 0101 	eor.w	r1, lr, r1
 808c096:	4061      	eors	r1, r4
 808c098:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808c09c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808c0a0:	fa5f f589 	uxtb.w	r5, r9
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808c0a4:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808c0a6:	4c40      	ldr	r4, [pc, #256]	; (808c1a8 <mbedtls_internal_aes_decrypt+0x390>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808c0a8:	f814 e005 	ldrb.w	lr, [r4, r5]
 808c0ac:	693d      	ldr	r5, [r7, #16]
 808c0ae:	ea8e 0505 	eor.w	r5, lr, r5
 808c0b2:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808c0b6:	f3c1 2607 	ubfx	r6, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808c0ba:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808c0be:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808c0c2:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808c0c6:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808c0ca:	f814 e006 	ldrb.w	lr, [r4, r6]
 808c0ce:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 808c0d2:	b2dd      	uxtb	r5, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808c0d4:	5d66      	ldrb	r6, [r4, r5]
 808c0d6:	697d      	ldr	r5, [r7, #20]
 808c0d8:	4075      	eors	r5, r6
 808c0da:	0e06      	lsrs	r6, r0, #24
 808c0dc:	5da6      	ldrb	r6, [r4, r6]
 808c0de:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808c0e2:	f3c9 2607 	ubfx	r6, r9, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808c0e6:	5da6      	ldrb	r6, [r4, r6]
 808c0e8:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808c0ec:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808c0f0:	5da6      	ldrb	r6, [r4, r6]
 808c0f2:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 808c0f6:	b2c5      	uxtb	r5, r0
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808c0f8:	f814 c005 	ldrb.w	ip, [r4, r5]
 808c0fc:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808c0fe:	f3c0 2007 	ubfx	r0, r0, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808c102:	ea8c 0505 	eor.w	r5, ip, r5
 808c106:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 808c10a:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 808c10e:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808c110:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808c114:	f3c3 2c07 	ubfx	ip, r3, #8, #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808c118:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808c11c:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808c11e:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808c122:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808c126:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808c12a:	ea4f 6919 	mov.w	r9, r9, lsr #24

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808c12e:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808c132:	f814 c001 	ldrb.w	ip, [r4, r1]
 808c136:	69f9      	ldr	r1, [r7, #28]
 808c138:	f814 7009 	ldrb.w	r7, [r4, r9]
 808c13c:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808c140:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808c144:	5ce3      	ldrb	r3, [r4, r3]
 808c146:	ea81 6107 	eor.w	r1, r1, r7, lsl #24
 808c14a:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808c14e:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808c152:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808c156:	7051      	strb	r1, [r2, #1]
 808c158:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808c15c:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808c15e:	0a31      	lsrs	r1, r6, #8
 808c160:	7151      	strb	r1, [r2, #5]
 808c162:	0c31      	lsrs	r1, r6, #16
 808c164:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808c166:	0a29      	lsrs	r1, r5, #8
 808c168:	7251      	strb	r1, [r2, #9]
 808c16a:	0c29      	lsrs	r1, r5, #16
 808c16c:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808c16e:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808c170:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808c174:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808c176:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808c17a:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808c17c:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808c17e:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808c180:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808c182:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808c184:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808c186:	0c19      	lsrs	r1, r3, #16
 808c188:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808c18a:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808c18e:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808c190:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808c192:	7391      	strb	r1, [r2, #14]
 808c194:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808c196:	b003      	add	sp, #12
 808c198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c19c:	2000266c 	.word	0x2000266c
 808c1a0:	20002e6c 	.word	0x20002e6c
 808c1a4:	2000326c 	.word	0x2000326c
 808c1a8:	2000246c 	.word	0x2000246c
 808c1ac:	20002a6c 	.word	0x20002a6c

0808c1b0 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808c1b0:	b410      	push	{r4}
 808c1b2:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808c1b4:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808c1b6:	461a      	mov	r2, r3
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808c1b8:	4621      	mov	r1, r4
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808c1ba:	d102      	bne.n	808c1c2 <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808c1bc:	bc10      	pop	{r4}
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808c1be:	f7ff bc5f 	b.w	808ba80 <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808c1c2:	bc10      	pop	{r4}
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 808c1c4:	f7ff be28 	b.w	808be18 <mbedtls_internal_aes_decrypt>

0808c1c8 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c1cc:	4698      	mov	r8, r3
 808c1ce:	b085      	sub	sp, #20
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808c1d0:	0713      	lsls	r3, r2, #28
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808c1d2:	4681      	mov	r9, r0
 808c1d4:	460f      	mov	r7, r1
 808c1d6:	4616      	mov	r6, r2
 808c1d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 808c1da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808c1dc:	d15a      	bne.n	808c294 <mbedtls_aes_crypt_cbc+0xcc>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 808c1de:	bba9      	cbnz	r1, 808c24c <mbedtls_aes_crypt_cbc+0x84>
 808c1e0:	462a      	mov	r2, r5
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808c1e2:	f10d 0b10 	add.w	fp, sp, #16
 808c1e6:	1ab3      	subs	r3, r6, r2
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808c1e8:	42dd      	cmn	r5, r3
 808c1ea:	d101      	bne.n	808c1f0 <mbedtls_aes_crypt_cbc+0x28>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 808c1ec:	2000      	movs	r0, #0
 808c1ee:	e053      	b.n	808c298 <mbedtls_aes_crypt_cbc+0xd0>

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
 808c1f0:	4613      	mov	r3, r2
 808c1f2:	46ee      	mov	lr, sp
 808c1f4:	466f      	mov	r7, sp
 808c1f6:	f102 0a10 	add.w	sl, r2, #16
 808c1fa:	46f4      	mov	ip, lr
 808c1fc:	6818      	ldr	r0, [r3, #0]
 808c1fe:	6859      	ldr	r1, [r3, #4]
 808c200:	3308      	adds	r3, #8
 808c202:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 808c206:	4553      	cmp	r3, sl
 808c208:	46e6      	mov	lr, ip
 808c20a:	d1f6      	bne.n	808c1fa <mbedtls_aes_crypt_cbc+0x32>
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 808c20c:	4623      	mov	r3, r4
 808c20e:	2100      	movs	r1, #0
 808c210:	4648      	mov	r0, r9
 808c212:	f7ff ffcd 	bl	808c1b0 <mbedtls_aes_crypt_ecb>
 808c216:	1e63      	subs	r3, r4, #1
 808c218:	f108 31ff 	add.w	r1, r8, #4294967295
 808c21c:	f104 000f 	add.w	r0, r4, #15

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808c220:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808c224:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808c228:	4283      	cmp	r3, r0
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808c22a:	ea8e 0202 	eor.w	r2, lr, r2
 808c22e:	701a      	strb	r2, [r3, #0]
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808c230:	d1f6      	bne.n	808c220 <mbedtls_aes_crypt_cbc+0x58>
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808c232:	4642      	mov	r2, r8
 808c234:	463b      	mov	r3, r7
 808c236:	cb03      	ldmia	r3!, {r0, r1}
 808c238:	455b      	cmp	r3, fp
 808c23a:	6010      	str	r0, [r2, #0]
 808c23c:	6051      	str	r1, [r2, #4]
 808c23e:	461f      	mov	r7, r3
 808c240:	f102 0208 	add.w	r2, r2, #8
 808c244:	d1f6      	bne.n	808c234 <mbedtls_aes_crypt_cbc+0x6c>

            input  += 16;
 808c246:	4652      	mov	r2, sl
            output += 16;
 808c248:	3410      	adds	r4, #16
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808c24a:	e7cc      	b.n	808c1e6 <mbedtls_aes_crypt_cbc+0x1e>
 808c24c:	1e6b      	subs	r3, r5, #1
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808c24e:	2e00      	cmp	r6, #0
 808c250:	d0cc      	beq.n	808c1ec <mbedtls_aes_crypt_cbc+0x24>
 808c252:	f108 30ff 	add.w	r0, r8, #4294967295
 808c256:	1e61      	subs	r1, r4, #1
 808c258:	f103 0510 	add.w	r5, r3, #16
        {
            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808c25c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808c260:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808c264:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808c266:	ea8e 0202 	eor.w	r2, lr, r2
 808c26a:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808c26e:	d1f5      	bne.n	808c25c <mbedtls_aes_crypt_cbc+0x94>
                output[i] = (unsigned char)( input[i] ^ iv[i] );

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 808c270:	4623      	mov	r3, r4
 808c272:	4622      	mov	r2, r4
 808c274:	4639      	mov	r1, r7
 808c276:	4648      	mov	r0, r9
 808c278:	f7ff ff9a 	bl	808c1b0 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 808c27c:	4643      	mov	r3, r8
 808c27e:	f104 0210 	add.w	r2, r4, #16
 808c282:	f854 1b04 	ldr.w	r1, [r4], #4
 808c286:	4294      	cmp	r4, r2
 808c288:	f843 1b04 	str.w	r1, [r3], #4
 808c28c:	d1f9      	bne.n	808c282 <mbedtls_aes_crypt_cbc+0xba>

            input  += 16;
            output += 16;
            length -= 16;
 808c28e:	3e10      	subs	r6, #16
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808c290:	462b      	mov	r3, r5
 808c292:	e7dc      	b.n	808c24e <mbedtls_aes_crypt_cbc+0x86>
{
    int i;
    unsigned char temp[16];

    if( length % 16 )
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 808c294:	f06f 0021 	mvn.w	r0, #33	; 0x21
            length -= 16;
        }
    }

    return( 0 );
}
 808c298:	b005      	add	sp, #20
 808c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c29e <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_DES_C)
#include "mbedtls/des.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808c29e:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808c2a0:	2300      	movs	r3, #0
 808c2a2:	4288      	cmp	r0, r1
 808c2a4:	d002      	beq.n	808c2ac <_ZL15mbedtls_zeroizePvj+0xe>
 808c2a6:	7003      	strb	r3, [r0, #0]
 808c2a8:	3001      	adds	r0, #1
 808c2aa:	e7fa      	b.n	808c2a2 <_ZL15mbedtls_zeroizePvj+0x4>
 808c2ac:	4770      	bx	lr

0808c2ae <_ZL18pkcs12_fill_bufferPhjPKhj>:
    return( ret );
}

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
 808c2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c2b2:	4606      	mov	r6, r0
 808c2b4:	460c      	mov	r4, r1
 808c2b6:	4617      	mov	r7, r2
 808c2b8:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808c2ba:	b15c      	cbz	r4, 808c2d4 <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
 808c2bc:	4544      	cmp	r4, r8
 808c2be:	4625      	mov	r5, r4
 808c2c0:	bf28      	it	cs
 808c2c2:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
 808c2c4:	4630      	mov	r0, r6
 808c2c6:	462a      	mov	r2, r5
 808c2c8:	4639      	mov	r1, r7
 808c2ca:	f004 f992 	bl	80905f2 <memcpy>
        p += use_len;
 808c2ce:	442e      	add	r6, r5
        data_len -= use_len;
 808c2d0:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808c2d2:	e7f2      	b.n	808c2ba <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
 808c2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808c2d8 <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
 808c2d8:	4800      	ldr	r0, [pc, #0]	; (808c2dc <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
 808c2da:	4770      	bx	lr
 808c2dc:	ffffe100 	.word	0xffffe100

0808c2e0 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808c2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808c2e4:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808c2e6:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 808c2ea:	9001      	str	r0, [sp, #4]
 808c2ec:	460f      	mov	r7, r1
 808c2ee:	4693      	mov	fp, r2
 808c2f0:	4699      	mov	r9, r3
 808c2f2:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808c2f4:	f200 80c3 	bhi.w	808c47e <mbedtls_pkcs12_derivation+0x19e>
 808c2f8:	2b40      	cmp	r3, #64	; 0x40
 808c2fa:	f200 80c0 	bhi.w	808c47e <mbedtls_pkcs12_derivation+0x19e>
 808c2fe:	2d40      	cmp	r5, #64	; 0x40
 808c300:	f200 80bd 	bhi.w	808c47e <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
 808c304:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
 808c308:	f7fa f918 	bl	808653c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 808c30c:	9000      	str	r0, [sp, #0]
 808c30e:	2800      	cmp	r0, #0
 808c310:	f000 80b7 	beq.w	808c482 <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
 808c314:	a803      	add	r0, sp, #12
 808c316:	f7fa f91d 	bl	8086554 <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808c31a:	2200      	movs	r2, #0
 808c31c:	9900      	ldr	r1, [sp, #0]
 808c31e:	a803      	add	r0, sp, #12
 808c320:	f7fa f93e 	bl	80865a0 <mbedtls_md_setup>
 808c324:	2800      	cmp	r0, #0
 808c326:	f040 80ad 	bne.w	808c484 <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808c32a:	9800      	ldr	r0, [sp, #0]
 808c32c:	f7fa fa4a 	bl	80867c4 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
 808c330:	2820      	cmp	r0, #32
 808c332:	bf8c      	ite	hi
 808c334:	2480      	movhi	r4, #128	; 0x80
 808c336:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808c338:	4622      	mov	r2, r4
 808c33a:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808c33e:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808c340:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808c344:	a816      	add	r0, sp, #88	; 0x58
 808c346:	f004 f97a 	bl	809063e <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808c34a:	462b      	mov	r3, r5
 808c34c:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 808c34e:	4621      	mov	r1, r4
 808c350:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808c352:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808c354:	f7ff ffab 	bl	808c2ae <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808c358:	464b      	mov	r3, r9
 808c35a:	465a      	mov	r2, fp
 808c35c:	4621      	mov	r1, r4
 808c35e:	4628      	mov	r0, r5
 808c360:	f7ff ffa5 	bl	808c2ae <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808c364:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
 808c368:	2f00      	cmp	r7, #0
 808c36a:	d072      	beq.n	808c452 <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 808c36c:	a803      	add	r0, sp, #12
 808c36e:	f7fa f939 	bl	80865e4 <mbedtls_md_starts>
 808c372:	4606      	mov	r6, r0
 808c374:	2800      	cmp	r0, #0
 808c376:	d16d      	bne.n	808c454 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
 808c378:	4622      	mov	r2, r4
 808c37a:	a916      	add	r1, sp, #88	; 0x58
 808c37c:	a803      	add	r0, sp, #12
 808c37e:	f7fa f93b 	bl	80865f8 <mbedtls_md_update>
 808c382:	4606      	mov	r6, r0
 808c384:	2800      	cmp	r0, #0
 808c386:	d165      	bne.n	808c454 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
 808c388:	4622      	mov	r2, r4
 808c38a:	4641      	mov	r1, r8
 808c38c:	a803      	add	r0, sp, #12
 808c38e:	f7fa f933 	bl	80865f8 <mbedtls_md_update>
 808c392:	4606      	mov	r6, r0
 808c394:	2800      	cmp	r0, #0
 808c396:	d15d      	bne.n	808c454 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
 808c398:	4622      	mov	r2, r4
 808c39a:	4629      	mov	r1, r5
 808c39c:	a803      	add	r0, sp, #12
 808c39e:	f7fa f92b 	bl	80865f8 <mbedtls_md_update>
 808c3a2:	4606      	mov	r6, r0
 808c3a4:	2800      	cmp	r0, #0
 808c3a6:	d155      	bne.n	808c454 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
 808c3a8:	a906      	add	r1, sp, #24
 808c3aa:	a803      	add	r0, sp, #12
 808c3ac:	f7fa f92e 	bl	808660c <mbedtls_md_finish>
 808c3b0:	4606      	mov	r6, r0
 808c3b2:	2800      	cmp	r0, #0
 808c3b4:	d14e      	bne.n	808c454 <mbedtls_pkcs12_derivation+0x174>
 808c3b6:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808c3ba:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 808c3bc:	459b      	cmp	fp, r3
 808c3be:	d20b      	bcs.n	808c3d8 <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 808c3c0:	ab06      	add	r3, sp, #24
 808c3c2:	4652      	mov	r2, sl
 808c3c4:	4619      	mov	r1, r3
 808c3c6:	9800      	ldr	r0, [sp, #0]
 808c3c8:	f7fa f92a 	bl	8086620 <mbedtls_md>
 808c3cc:	4606      	mov	r6, r0
 808c3ce:	2800      	cmp	r0, #0
 808c3d0:	d140      	bne.n	808c454 <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808c3d2:	f10b 0b01 	add.w	fp, fp, #1
 808c3d6:	e7f0      	b.n	808c3ba <mbedtls_pkcs12_derivation+0xda>
 808c3d8:	4557      	cmp	r7, sl
 808c3da:	46bb      	mov	fp, r7
 808c3dc:	bf28      	it	cs
 808c3de:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
 808c3e0:	a906      	add	r1, sp, #24
 808c3e2:	465a      	mov	r2, fp
 808c3e4:	9801      	ldr	r0, [sp, #4]
 808c3e6:	f004 f904 	bl	80905f2 <memcpy>
        datalen -= use_len;
        p += use_len;
 808c3ea:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
 808c3ec:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
 808c3f0:	445b      	add	r3, fp
 808c3f2:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
 808c3f4:	d02d      	beq.n	808c452 <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808c3f6:	4653      	mov	r3, sl
 808c3f8:	aa06      	add	r2, sp, #24
 808c3fa:	4621      	mov	r1, r4
 808c3fc:	4648      	mov	r0, r9
 808c3fe:	f7ff ff56 	bl	808c2ae <_ZL18pkcs12_fill_bufferPhjPKhj>
 808c402:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
 808c406:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 808c40a:	3201      	adds	r2, #1
 808c40c:	b2d2      	uxtb	r2, r2
 808c40e:	701a      	strb	r2, [r3, #0]
 808c410:	b91a      	cbnz	r2, 808c41a <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
 808c412:	454b      	cmp	r3, r9
 808c414:	d1f7      	bne.n	808c406 <mbedtls_pkcs12_derivation+0x126>
 808c416:	4623      	mov	r3, r4
 808c418:	e001      	b.n	808c41e <mbedtls_pkcs12_derivation+0x13e>
 808c41a:	4623      	mov	r3, r4
 808c41c:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
 808c41e:	3b01      	subs	r3, #1
 808c420:	f818 0003 	ldrb.w	r0, [r8, r3]
 808c424:	f813 1009 	ldrb.w	r1, [r3, r9]
 808c428:	4401      	add	r1, r0
 808c42a:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
 808c42c:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
 808c430:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
 808c434:	2b00      	cmp	r3, #0
 808c436:	d1f2      	bne.n	808c41e <mbedtls_pkcs12_derivation+0x13e>
 808c438:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
 808c43a:	3a01      	subs	r2, #1
 808c43c:	5d50      	ldrb	r0, [r2, r5]
 808c43e:	f812 1009 	ldrb.w	r1, [r2, r9]
 808c442:	4401      	add	r1, r0
 808c444:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
 808c446:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
 808c44a:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
 808c44c:	2a00      	cmp	r2, #0
 808c44e:	d1f4      	bne.n	808c43a <mbedtls_pkcs12_derivation+0x15a>
 808c450:	e78a      	b.n	808c368 <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
 808c452:	2600      	movs	r6, #0

exit:
    mbedtls_zeroize( salt_block, sizeof( salt_block ) );
 808c454:	2180      	movs	r1, #128	; 0x80
 808c456:	4640      	mov	r0, r8
 808c458:	f7ff ff21 	bl	808c29e <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( pwd_block, sizeof( pwd_block ) );
 808c45c:	2180      	movs	r1, #128	; 0x80
 808c45e:	4628      	mov	r0, r5
 808c460:	f7ff ff1d 	bl	808c29e <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_block, sizeof( hash_block ) );
 808c464:	2180      	movs	r1, #128	; 0x80
 808c466:	a876      	add	r0, sp, #472	; 0x1d8
 808c468:	f7ff ff19 	bl	808c29e <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );
 808c46c:	2140      	movs	r1, #64	; 0x40
 808c46e:	a806      	add	r0, sp, #24
 808c470:	f7ff ff15 	bl	808c29e <_ZL15mbedtls_zeroizePvj>

    mbedtls_md_free( &md_ctx );
 808c474:	a803      	add	r0, sp, #12
 808c476:	f7fa f872 	bl	808655e <mbedtls_md_free>

    return( ret );
 808c47a:	4630      	mov	r0, r6
 808c47c:	e002      	b.n	808c484 <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808c47e:	4803      	ldr	r0, [pc, #12]	; (808c48c <mbedtls_pkcs12_derivation+0x1ac>)
 808c480:	e000      	b.n	808c484 <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808c482:	4803      	ldr	r0, [pc, #12]	; (808c490 <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
 808c484:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 808c488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c48c:	ffffe080 	.word	0xffffe080
 808c490:	ffffe100 	.word	0xffffe100

0808c494 <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808c494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c498:	4604      	mov	r4, r0
 808c49a:	b0d9      	sub	sp, #356	; 0x164
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808c49c:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808c49e:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808c4a0:	468b      	mov	fp, r1
 808c4a2:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808c4a4:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808c4a6:	f7f5 fbb7 	bl	8081c18 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 808c4aa:	4605      	mov	r5, r0
 808c4ac:	2800      	cmp	r0, #0
 808c4ae:	f000 80ac 	beq.w	808c60a <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808c4b2:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808c4b4:	6847      	ldr	r7, [r0, #4]
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808c4b6:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808c4b8:	ea4f 07d7 	mov.w	r7, r7, lsr #3

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
 808c4bc:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
 808c4c0:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808c4c2:	d85e      	bhi.n	808c582 <mbedtls_pkcs12_pbe+0xee>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
 808c4c4:	4631      	mov	r1, r6
 808c4c6:	f44f 7281 	mov.w	r2, #258	; 0x102
 808c4ca:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
 808c4cc:	9608      	str	r6, [sp, #32]
 808c4ce:	9609      	str	r6, [sp, #36]	; 0x24
 808c4d0:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
 808c4d2:	f004 f8b4 	bl	809063e <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
 808c4d6:	6863      	ldr	r3, [r4, #4]
 808c4d8:	68a6      	ldr	r6, [r4, #8]

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
 808c4da:	f104 0a08 	add.w	sl, r4, #8
    const unsigned char *end = params->p + params->len;
 808c4de:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 808c4e0:	6823      	ldr	r3, [r4, #0]
 808c4e2:	2b30      	cmp	r3, #48	; 0x30
 808c4e4:	f040 8093 	bne.w	808c60e <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 808c4e8:	2304      	movs	r3, #4
 808c4ea:	aa09      	add	r2, sp, #36	; 0x24
 808c4ec:	4631      	mov	r1, r6
 808c4ee:	4650      	mov	r0, sl
 808c4f0:	f7f5 fe6c 	bl	80821cc <mbedtls_asn1_get_tag>
 808c4f4:	b950      	cbnz	r0, 808c50c <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808c4f6:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
 808c4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808c4fa:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
 808c4fc:	4413      	add	r3, r2
 808c4fe:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
 808c500:	aa07      	add	r2, sp, #28
 808c502:	4631      	mov	r1, r6
 808c504:	4650      	mov	r0, sl
 808c506:	f7f5 fe8e 	bl	8082226 <mbedtls_asn1_get_int>
 808c50a:	b118      	cbz	r0, 808c514 <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
 808c50c:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
 808c510:	b118      	cbz	r0, 808c51a <mbedtls_pkcs12_pbe+0x86>
 808c512:	e07f      	b.n	808c614 <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
 808c514:	68a3      	ldr	r3, [r4, #8]
 808c516:	429e      	cmp	r6, r3
 808c518:	d17b      	bne.n	808c612 <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808c51a:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808c51c:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 808c51e:	429a      	cmp	r2, r3
 808c520:	d007      	beq.n	808c532 <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
 808c522:	9962      	ldr	r1, [sp, #392]	; 0x188
 808c524:	aa17      	add	r2, sp, #92	; 0x5c
 808c526:	5cc9      	ldrb	r1, [r1, r3]
 808c528:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 808c52c:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808c52e:	3301      	adds	r3, #1
 808c530:	e7f4      	b.n	808c51c <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 808c532:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 808c534:	f8cd 9008 	str.w	r9, [sp, #8]
 808c538:	1c5c      	adds	r4, r3, #1
 808c53a:	9b07      	ldr	r3, [sp, #28]
 808c53c:	0064      	lsls	r4, r4, #1
 808c53e:	9304      	str	r3, [sp, #16]
 808c540:	2301      	movs	r3, #1
 808c542:	9303      	str	r3, [sp, #12]
 808c544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c546:	aa17      	add	r2, sp, #92	; 0x5c
 808c548:	9301      	str	r3, [sp, #4]
 808c54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808c54c:	4639      	mov	r1, r7
 808c54e:	9300      	str	r3, [sp, #0]
 808c550:	a80f      	add	r0, sp, #60	; 0x3c
 808c552:	4623      	mov	r3, r4
 808c554:	f7ff fec4 	bl	808c2e0 <mbedtls_pkcs12_derivation>
 808c558:	b9a8      	cbnz	r0, 808c586 <mbedtls_pkcs12_pbe+0xf2>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
 808c55a:	f1b8 0f00 	cmp.w	r8, #0
 808c55e:	d014      	beq.n	808c58a <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
 808c560:	9b07      	ldr	r3, [sp, #28]
 808c562:	f8cd 9008 	str.w	r9, [sp, #8]
 808c566:	9304      	str	r3, [sp, #16]
 808c568:	2302      	movs	r3, #2
 808c56a:	9303      	str	r3, [sp, #12]
 808c56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c56e:	aa17      	add	r2, sp, #92	; 0x5c
 808c570:	9301      	str	r3, [sp, #4]
 808c572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808c574:	4641      	mov	r1, r8
 808c576:	9300      	str	r3, [sp, #0]
 808c578:	a80b      	add	r0, sp, #44	; 0x2c
 808c57a:	4623      	mov	r3, r4
 808c57c:	f7ff feb0 	bl	808c2e0 <mbedtls_pkcs12_derivation>
 808c580:	e001      	b.n	808c586 <mbedtls_pkcs12_pbe+0xf2>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808c582:	4826      	ldr	r0, [pc, #152]	; (808c61c <mbedtls_pkcs12_pbe+0x188>)
 808c584:	e046      	b.n	808c614 <mbedtls_pkcs12_pbe+0x180>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
 808c586:	2800      	cmp	r0, #0
 808c588:	d144      	bne.n	808c614 <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
 808c58a:	a817      	add	r0, sp, #92	; 0x5c
 808c58c:	f7f5 fb66 	bl	8081c5c <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 808c590:	4629      	mov	r1, r5
 808c592:	a817      	add	r0, sp, #92	; 0x5c
 808c594:	f7f5 fd36 	bl	8082004 <mbedtls_cipher_setup>
 808c598:	4604      	mov	r4, r0
 808c59a:	bb48      	cbnz	r0, 808c5f0 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 808c59c:	fa4f f38b 	sxtb.w	r3, fp
 808c5a0:	00fa      	lsls	r2, r7, #3
 808c5a2:	a90f      	add	r1, sp, #60	; 0x3c
 808c5a4:	a817      	add	r0, sp, #92	; 0x5c
 808c5a6:	f7f5 fb6f 	bl	8081c88 <mbedtls_cipher_setkey>
 808c5aa:	4604      	mov	r4, r0
 808c5ac:	bb00      	cbnz	r0, 808c5f0 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
 808c5ae:	68ea      	ldr	r2, [r5, #12]
 808c5b0:	a90b      	add	r1, sp, #44	; 0x2c
 808c5b2:	a817      	add	r0, sp, #92	; 0x5c
 808c5b4:	f7f5 fb8a 	bl	8081ccc <mbedtls_cipher_set_iv>
 808c5b8:	4604      	mov	r4, r0
 808c5ba:	b9c8      	cbnz	r0, 808c5f0 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
 808c5bc:	a817      	add	r0, sp, #92	; 0x5c
 808c5be:	f7f5 fba5 	bl	8081d0c <mbedtls_cipher_reset>
 808c5c2:	4604      	mov	r4, r0
 808c5c4:	b9a0      	cbnz	r0, 808c5f0 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
 808c5c6:	ad06      	add	r5, sp, #24
 808c5c8:	9500      	str	r5, [sp, #0]
 808c5ca:	a964      	add	r1, sp, #400	; 0x190
 808c5cc:	c90e      	ldmia	r1, {r1, r2, r3}
 808c5ce:	a817      	add	r0, sp, #92	; 0x5c
 808c5d0:	f7f5 fba8 	bl	8081d24 <mbedtls_cipher_update>
 808c5d4:	4604      	mov	r4, r0
 808c5d6:	b958      	cbnz	r0, 808c5f0 <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
 808c5d8:	6829      	ldr	r1, [r5, #0]
 808c5da:	9b66      	ldr	r3, [sp, #408]	; 0x198
 808c5dc:	462a      	mov	r2, r5
 808c5de:	4419      	add	r1, r3
 808c5e0:	a817      	add	r0, sp, #92	; 0x5c
 808c5e2:	f7f5 fc69 	bl	8081eb8 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
 808c5e6:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
 808c5ea:	2800      	cmp	r0, #0
 808c5ec:	bf08      	it	eq
 808c5ee:	2400      	moveq	r4, #0

exit:
    mbedtls_zeroize( key, sizeof( key ) );
 808c5f0:	2120      	movs	r1, #32
 808c5f2:	a80f      	add	r0, sp, #60	; 0x3c
 808c5f4:	f7ff fe53 	bl	808c29e <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( iv,  sizeof( iv  ) );
 808c5f8:	2110      	movs	r1, #16
 808c5fa:	a80b      	add	r0, sp, #44	; 0x2c
 808c5fc:	f7ff fe4f 	bl	808c29e <_ZL15mbedtls_zeroizePvj>
    mbedtls_cipher_free( &cipher_ctx );
 808c600:	a817      	add	r0, sp, #92	; 0x5c
 808c602:	f7f5 fb2f 	bl	8081c64 <mbedtls_cipher_free>

    return( ret );
 808c606:	4620      	mov	r0, r4
 808c608:	e004      	b.n	808c614 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808c60a:	4805      	ldr	r0, [pc, #20]	; (808c620 <mbedtls_pkcs12_pbe+0x18c>)
 808c60c:	e002      	b.n	808c614 <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808c60e:	4805      	ldr	r0, [pc, #20]	; (808c624 <mbedtls_pkcs12_pbe+0x190>)
 808c610:	e000      	b.n	808c614 <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808c612:	4805      	ldr	r0, [pc, #20]	; (808c628 <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 808c614:	b059      	add	sp, #356	; 0x164
 808c616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c61a:	bf00      	nop
 808c61c:	ffffe080 	.word	0xffffe080
 808c620:	ffffe100 	.word	0xffffe100
 808c624:	ffffe11e 	.word	0xffffe11e
 808c628:	ffffe11a 	.word	0xffffe11a

0808c62c <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 808c62c:	22d8      	movs	r2, #216	; 0xd8
 808c62e:	2100      	movs	r1, #0
 808c630:	f004 b805 	b.w	809063e <memset>

0808c634 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 808c634:	b138      	cbz	r0, 808c646 <mbedtls_sha512_free+0x12>
 808c636:	f100 02d8 	add.w	r2, r0, #216	; 0xd8

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808c63a:	2300      	movs	r3, #0
 808c63c:	4290      	cmp	r0, r2
 808c63e:	d002      	beq.n	808c646 <mbedtls_sha512_free+0x12>
 808c640:	7003      	strb	r3, [r0, #0]
 808c642:	3001      	adds	r0, #1
 808c644:	e7fa      	b.n	808c63c <mbedtls_sha512_free+0x8>
 808c646:	4770      	bx	lr

0808c648 <mbedtls_sha512_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 808c648:	b508      	push	{r3, lr}
    *dst = *src;
 808c64a:	22d8      	movs	r2, #216	; 0xd8
 808c64c:	f003 ffd1 	bl	80905f2 <memcpy>
 808c650:	bd08      	pop	{r3, pc}
 808c652:	0000      	movs	r0, r0
 808c654:	0000      	movs	r0, r0
	...

0808c658 <mbedtls_sha512_starts_ret>:
/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 808c658:	2200      	movs	r2, #0
 808c65a:	2300      	movs	r3, #0
 808c65c:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 808c660:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 808c664:	bb31      	cbnz	r1, 808c6b4 <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 808c666:	a32a      	add	r3, pc, #168	; (adr r3, 808c710 <mbedtls_sha512_starts_ret+0xb8>)
 808c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c66c:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 808c670:	a329      	add	r3, pc, #164	; (adr r3, 808c718 <mbedtls_sha512_starts_ret+0xc0>)
 808c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c676:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 808c67a:	a329      	add	r3, pc, #164	; (adr r3, 808c720 <mbedtls_sha512_starts_ret+0xc8>)
 808c67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c680:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 808c684:	a328      	add	r3, pc, #160	; (adr r3, 808c728 <mbedtls_sha512_starts_ret+0xd0>)
 808c686:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c68a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 808c68e:	a328      	add	r3, pc, #160	; (adr r3, 808c730 <mbedtls_sha512_starts_ret+0xd8>)
 808c690:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c694:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 808c698:	a327      	add	r3, pc, #156	; (adr r3, 808c738 <mbedtls_sha512_starts_ret+0xe0>)
 808c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c69e:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 808c6a2:	a327      	add	r3, pc, #156	; (adr r3, 808c740 <mbedtls_sha512_starts_ret+0xe8>)
 808c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c6a8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 808c6ac:	a326      	add	r3, pc, #152	; (adr r3, 808c748 <mbedtls_sha512_starts_ret+0xf0>)
 808c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c6b2:	e025      	b.n	808c700 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 808c6b4:	a326      	add	r3, pc, #152	; (adr r3, 808c750 <mbedtls_sha512_starts_ret+0xf8>)
 808c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c6ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 808c6be:	a326      	add	r3, pc, #152	; (adr r3, 808c758 <mbedtls_sha512_starts_ret+0x100>)
 808c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c6c4:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 808c6c8:	a325      	add	r3, pc, #148	; (adr r3, 808c760 <mbedtls_sha512_starts_ret+0x108>)
 808c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c6ce:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 808c6d2:	a325      	add	r3, pc, #148	; (adr r3, 808c768 <mbedtls_sha512_starts_ret+0x110>)
 808c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c6d8:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 808c6dc:	a324      	add	r3, pc, #144	; (adr r3, 808c770 <mbedtls_sha512_starts_ret+0x118>)
 808c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c6e2:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 808c6e6:	a324      	add	r3, pc, #144	; (adr r3, 808c778 <mbedtls_sha512_starts_ret+0x120>)
 808c6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c6ec:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 808c6f0:	a323      	add	r3, pc, #140	; (adr r3, 808c780 <mbedtls_sha512_starts_ret+0x128>)
 808c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c6f6:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 808c6fa:	a323      	add	r3, pc, #140	; (adr r3, 808c788 <mbedtls_sha512_starts_ret+0x130>)
 808c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c700:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 808c704:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 808c708:	2000      	movs	r0, #0
 808c70a:	4770      	bx	lr
 808c70c:	f3af 8000 	nop.w
 808c710:	f3bcc908 	.word	0xf3bcc908
 808c714:	6a09e667 	.word	0x6a09e667
 808c718:	84caa73b 	.word	0x84caa73b
 808c71c:	bb67ae85 	.word	0xbb67ae85
 808c720:	fe94f82b 	.word	0xfe94f82b
 808c724:	3c6ef372 	.word	0x3c6ef372
 808c728:	5f1d36f1 	.word	0x5f1d36f1
 808c72c:	a54ff53a 	.word	0xa54ff53a
 808c730:	ade682d1 	.word	0xade682d1
 808c734:	510e527f 	.word	0x510e527f
 808c738:	2b3e6c1f 	.word	0x2b3e6c1f
 808c73c:	9b05688c 	.word	0x9b05688c
 808c740:	fb41bd6b 	.word	0xfb41bd6b
 808c744:	1f83d9ab 	.word	0x1f83d9ab
 808c748:	137e2179 	.word	0x137e2179
 808c74c:	5be0cd19 	.word	0x5be0cd19
 808c750:	c1059ed8 	.word	0xc1059ed8
 808c754:	cbbb9d5d 	.word	0xcbbb9d5d
 808c758:	367cd507 	.word	0x367cd507
 808c75c:	629a292a 	.word	0x629a292a
 808c760:	3070dd17 	.word	0x3070dd17
 808c764:	9159015a 	.word	0x9159015a
 808c768:	f70e5939 	.word	0xf70e5939
 808c76c:	152fecd8 	.word	0x152fecd8
 808c770:	ffc00b31 	.word	0xffc00b31
 808c774:	67332667 	.word	0x67332667
 808c778:	68581511 	.word	0x68581511
 808c77c:	8eb44a87 	.word	0x8eb44a87
 808c780:	64f98fa7 	.word	0x64f98fa7
 808c784:	db0c2e0d 	.word	0xdb0c2e0d
 808c788:	befa4fa4 	.word	0xbefa4fa4
 808c78c:	47b5481d 	.word	0x47b5481d

0808c790 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 808c790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c794:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 808c798:	4686      	mov	lr, r0
 808c79a:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808c79e:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808c7a0:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
 808c7a4:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
 808c7a8:	7866      	ldrb	r6, [r4, #1]
 808c7aa:	f04f 0a00 	mov.w	sl, #0
 808c7ae:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 808c7b2:	0436      	lsls	r6, r6, #16
 808c7b4:	2300      	movs	r3, #0
 808c7b6:	ea43 030b 	orr.w	r3, r3, fp
 808c7ba:	9609      	str	r6, [sp, #36]	; 0x24
 808c7bc:	f8cd a020 	str.w	sl, [sp, #32]
 808c7c0:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 808c7c4:	431e      	orrs	r6, r3
 808c7c6:	4633      	mov	r3, r6
 808c7c8:	79e2      	ldrb	r2, [r4, #7]
 808c7ca:	78a6      	ldrb	r6, [r4, #2]
 808c7cc:	ea42 020a 	orr.w	r2, r2, sl
 808c7d0:	4315      	orrs	r5, r2
 808c7d2:	462a      	mov	r2, r5
 808c7d4:	0236      	lsls	r6, r6, #8
 808c7d6:	960b      	str	r6, [sp, #44]	; 0x2c
 808c7d8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 808c7dc:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 808c7e0:	431e      	orrs	r6, r3
 808c7e2:	4633      	mov	r3, r6
 808c7e4:	4315      	orrs	r5, r2
 808c7e6:	78e6      	ldrb	r6, [r4, #3]
 808c7e8:	462a      	mov	r2, r5
 808c7ea:	960d      	str	r6, [sp, #52]	; 0x34
 808c7ec:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 808c7f0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 808c7f4:	431e      	orrs	r6, r3
 808c7f6:	4633      	mov	r3, r6
 808c7f8:	7926      	ldrb	r6, [r4, #4]
 808c7fa:	4315      	orrs	r5, r2
 808c7fc:	462a      	mov	r2, r5
 808c7fe:	0635      	lsls	r5, r6, #24
 808c800:	f8cd a014 	str.w	sl, [sp, #20]
 808c804:	9504      	str	r5, [sp, #16]
 808c806:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 808c80a:	431e      	orrs	r6, r3
 808c80c:	4633      	mov	r3, r6
 808c80e:	7966      	ldrb	r6, [r4, #5]
 808c810:	4315      	orrs	r5, r2
 808c812:	462a      	mov	r2, r5
 808c814:	0435      	lsls	r5, r6, #16
 808c816:	f8cd a01c 	str.w	sl, [sp, #28]
 808c81a:	9506      	str	r5, [sp, #24]
 808c81c:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 808c820:	431e      	orrs	r6, r3
 808c822:	4633      	mov	r3, r6
 808c824:	79a6      	ldrb	r6, [r4, #6]
 808c826:	4315      	orrs	r5, r2
 808c828:	ea4f 2806 	mov.w	r8, r6, lsl #8
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808c82c:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808c82e:	ea45 0208 	orr.w	r2, r5, r8
 808c832:	ea43 030a 	orr.w	r3, r3, sl
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808c836:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808c838:	e9ec 2302 	strd	r2, r3, [ip, #8]!
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808c83c:	d1b0      	bne.n	808c7a0 <mbedtls_internal_sha512_process+0x10>
 808c83e:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 808c840:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 808c842:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
 808c844:	0cd4      	lsrs	r4, r2, #19
 808c846:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 808c84a:	940e      	str	r4, [sp, #56]	; 0x38
 808c84c:	0cdc      	lsrs	r4, r3, #19
 808c84e:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 808c852:	940f      	str	r4, [sp, #60]	; 0x3c
 808c854:	00dc      	lsls	r4, r3, #3
 808c856:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
 808c85a:	9411      	str	r4, [sp, #68]	; 0x44
 808c85c:	00d4      	lsls	r4, r2, #3
 808c85e:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 808c862:	0992      	lsrs	r2, r2, #6
 808c864:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
 808c868:	9410      	str	r4, [sp, #64]	; 0x40
 808c86a:	099b      	lsrs	r3, r3, #6
 808c86c:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 808c870:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808c874:	9200      	str	r2, [sp, #0]
 808c876:	4066      	eors	r6, r4
 808c878:	9301      	str	r3, [sp, #4]
 808c87a:	406f      	eors	r7, r5
 808c87c:	e9dd 3400 	ldrd	r3, r4, [sp]
 808c880:	4073      	eors	r3, r6
 808c882:	461e      	mov	r6, r3
 808c884:	e9d1 2300 	ldrd	r2, r3, [r1]
 808c888:	407c      	eors	r4, r7
 808c88a:	4627      	mov	r7, r4
 808c88c:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
 808c890:	f8d1 8008 	ldr.w	r8, [r1, #8]
 808c894:	1912      	adds	r2, r2, r4
 808c896:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 808c89a:	416b      	adcs	r3, r5
 808c89c:	18b4      	adds	r4, r6, r2
 808c89e:	eb47 0503 	adc.w	r5, r7, r3
 808c8a2:	ea4f 0358 	mov.w	r3, r8, lsr #1
 808c8a6:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
 808c8aa:	9312      	str	r3, [sp, #72]	; 0x48
 808c8ac:	ea4f 035c 	mov.w	r3, ip, lsr #1
 808c8b0:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
 808c8b4:	9313      	str	r3, [sp, #76]	; 0x4c
 808c8b6:	ea4f 2318 	mov.w	r3, r8, lsr #8
 808c8ba:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 808c8be:	9314      	str	r3, [sp, #80]	; 0x50
 808c8c0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 808c8c4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 808c8c8:	9315      	str	r3, [sp, #84]	; 0x54
 808c8ca:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808c8ce:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 808c8d2:	4072      	eors	r2, r6
 808c8d4:	ea4f 16d8 	mov.w	r6, r8, lsr #7
 808c8d8:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
 808c8dc:	9602      	str	r6, [sp, #8]
 808c8de:	ea4f 16dc 	mov.w	r6, ip, lsr #7
 808c8e2:	9603      	str	r6, [sp, #12]
 808c8e4:	407b      	eors	r3, r7
 808c8e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808c8ea:	4056      	eors	r6, r2
 808c8ec:	1932      	adds	r2, r6, r4
 808c8ee:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808c8f2:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808c8f6:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808c8fa:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808c8fc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 808c900:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808c904:	d19c      	bne.n	808c840 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808c906:	e9de 3404 	ldrd	r3, r4, [lr, #16]
 808c90a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    B = ctx->state[1];
 808c90e:	e9de 3406 	ldrd	r3, r4, [lr, #24]
 808c912:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    C = ctx->state[2];
 808c916:	e9de 3408 	ldrd	r3, r4, [lr, #32]
 808c91a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    D = ctx->state[3];
 808c91e:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 808c922:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
    D = ctx->state[3];
 808c926:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    E = ctx->state[4];
 808c92a:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 808c92e:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    E = ctx->state[4];
 808c932:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    F = ctx->state[5];
 808c936:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
 808c93a:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    G = ctx->state[6];
 808c93e:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
 808c942:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    H = ctx->state[7];
 808c946:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
 808c94a:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 808c94e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 808c952:	4b0d      	ldr	r3, [pc, #52]	; (808c988 <mbedtls_internal_sha512_process+0x1f8>)
 808c954:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 808c958:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 808c95c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 808c960:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 808c964:	e9cd 0106 	strd	r0, r1, [sp, #24]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 808c968:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 808c96c:	e9cd 0104 	strd	r0, r1, [sp, #16]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
 808c970:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 808c974:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808c978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808c97c:	e9cd 0100 	strd	r0, r1, [sp]
 808c980:	aa80      	add	r2, sp, #512	; 0x200
 808c982:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 808c986:	e001      	b.n	808c98c <mbedtls_internal_sha512_process+0x1fc>
 808c988:	08092768 	.word	0x08092768
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808c98c:	9904      	ldr	r1, [sp, #16]
 808c98e:	9805      	ldr	r0, [sp, #20]
 808c990:	0b89      	lsrs	r1, r1, #14
 808c992:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808c996:	911e      	str	r1, [sp, #120]	; 0x78
 808c998:	0b81      	lsrs	r1, r0, #14
 808c99a:	9804      	ldr	r0, [sp, #16]
 808c99c:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 808c9a0:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808c9a4:	911f      	str	r1, [sp, #124]	; 0x7c
 808c9a6:	0c81      	lsrs	r1, r0, #18
 808c9a8:	9805      	ldr	r0, [sp, #20]
 808c9aa:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
 808c9ae:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808c9b2:	9120      	str	r1, [sp, #128]	; 0x80
 808c9b4:	0c81      	lsrs	r1, r0, #18
 808c9b6:	9804      	ldr	r0, [sp, #16]
 808c9b8:	3340      	adds	r3, #64	; 0x40
 808c9ba:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808c9be:	9121      	str	r1, [sp, #132]	; 0x84
 808c9c0:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 808c9c4:	404f      	eors	r7, r1
 808c9c6:	9905      	ldr	r1, [sp, #20]
 808c9c8:	4046      	eors	r6, r0
 808c9ca:	9804      	ldr	r0, [sp, #16]
 808c9cc:	05c9      	lsls	r1, r1, #23
 808c9ce:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808c9d2:	9123      	str	r1, [sp, #140]	; 0x8c
 808c9d4:	05c1      	lsls	r1, r0, #23
 808c9d6:	9805      	ldr	r0, [sp, #20]
 808c9d8:	3240      	adds	r2, #64	; 0x40
 808c9da:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808c9de:	9122      	str	r1, [sp, #136]	; 0x88
 808c9e0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 808c9e4:	4070      	eors	r0, r6
 808c9e6:	4079      	eors	r1, r7
 808c9e8:	4606      	mov	r6, r0
 808c9ea:	460f      	mov	r7, r1
 808c9ec:	e952 0112 	ldrd	r0, r1, [r2, #-72]	; 0x48
 808c9f0:	1900      	adds	r0, r0, r4
 808c9f2:	4169      	adcs	r1, r5
 808c9f4:	1836      	adds	r6, r6, r0
 808c9f6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808c9fa:	414f      	adcs	r7, r1
 808c9fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808ca00:	4060      	eors	r0, r4
 808ca02:	4069      	eors	r1, r5
 808ca04:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808ca08:	4004      	ands	r4, r0
 808ca0a:	4620      	mov	r0, r4
 808ca0c:	400d      	ands	r5, r1
 808ca0e:	4629      	mov	r1, r5
 808ca10:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808ca14:	4044      	eors	r4, r0
 808ca16:	1936      	adds	r6, r6, r4
 808ca18:	ea85 0501 	eor.w	r5, r5, r1
 808ca1c:	416f      	adcs	r7, r5
 808ca1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808ca22:	1980      	adds	r0, r0, r6
 808ca24:	4179      	adcs	r1, r7
 808ca26:	4606      	mov	r6, r0
 808ca28:	460f      	mov	r7, r1
 808ca2a:	eb18 0800 	adds.w	r8, r8, r0
 808ca2e:	eb49 0901 	adc.w	r9, r9, r1
 808ca32:	9900      	ldr	r1, [sp, #0]
 808ca34:	9801      	ldr	r0, [sp, #4]
 808ca36:	0f09      	lsrs	r1, r1, #28
 808ca38:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808ca3c:	9124      	str	r1, [sp, #144]	; 0x90
 808ca3e:	0f01      	lsrs	r1, r0, #28
 808ca40:	9800      	ldr	r0, [sp, #0]
 808ca42:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808ca46:	9125      	str	r1, [sp, #148]	; 0x94
 808ca48:	9901      	ldr	r1, [sp, #4]
 808ca4a:	0789      	lsls	r1, r1, #30
 808ca4c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808ca50:	9127      	str	r1, [sp, #156]	; 0x9c
 808ca52:	0781      	lsls	r1, r0, #30
 808ca54:	9801      	ldr	r0, [sp, #4]
 808ca56:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808ca5a:	9126      	str	r1, [sp, #152]	; 0x98
 808ca5c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 808ca60:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 808ca64:	404d      	eors	r5, r1
 808ca66:	9901      	ldr	r1, [sp, #4]
 808ca68:	4044      	eors	r4, r0
 808ca6a:	9800      	ldr	r0, [sp, #0]
 808ca6c:	0649      	lsls	r1, r1, #25
 808ca6e:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808ca72:	9129      	str	r1, [sp, #164]	; 0xa4
 808ca74:	0641      	lsls	r1, r0, #25
 808ca76:	9801      	ldr	r0, [sp, #4]
 808ca78:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808ca7c:	9128      	str	r1, [sp, #160]	; 0xa0
 808ca7e:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 808ca82:	4060      	eors	r0, r4
 808ca84:	4069      	eors	r1, r5
 808ca86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808ca8a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808ca8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 808ca92:	4320      	orrs	r0, r4
 808ca94:	4329      	orrs	r1, r5
 808ca96:	ea00 040a 	and.w	r4, r0, sl
 808ca9a:	ea01 050b 	and.w	r5, r1, fp
 808ca9e:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 808caa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808caa6:	e9dd 4500 	ldrd	r4, r5, [sp]
 808caaa:	4004      	ands	r4, r0
 808caac:	400d      	ands	r5, r1
 808caae:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808cab2:	4320      	orrs	r0, r4
 808cab4:	4329      	orrs	r1, r5
 808cab6:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808caba:	1824      	adds	r4, r4, r0
 808cabc:	414d      	adcs	r5, r1
 808cabe:	19a4      	adds	r4, r4, r6
 808cac0:	417d      	adcs	r5, r7
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808cac2:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808cac6:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808caca:	e953 4510 	ldrd	r4, r5, [r3, #-64]	; 0x40
 808cace:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808cad2:	1900      	adds	r0, r0, r4
 808cad4:	4169      	adcs	r1, r5
 808cad6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808cada:	1824      	adds	r4, r4, r0
 808cadc:	414d      	adcs	r5, r1
 808cade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808cae2:	4070      	eors	r0, r6
 808cae4:	ea00 0008 	and.w	r0, r0, r8
 808cae8:	4046      	eors	r6, r0
 808caea:	19a0      	adds	r0, r4, r6
 808caec:	ea4f 3498 	mov.w	r4, r8, lsr #14
 808caf0:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 808caf4:	942a      	str	r4, [sp, #168]	; 0xa8
 808caf6:	ea4f 3499 	mov.w	r4, r9, lsr #14
 808cafa:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 808cafe:	942b      	str	r4, [sp, #172]	; 0xac
 808cb00:	ea4f 4498 	mov.w	r4, r8, lsr #18
 808cb04:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 808cb08:	942c      	str	r4, [sp, #176]	; 0xb0
 808cb0a:	ea81 0107 	eor.w	r1, r1, r7
 808cb0e:	ea4f 4499 	mov.w	r4, r9, lsr #18
 808cb12:	ea01 0109 	and.w	r1, r1, r9
 808cb16:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 808cb1a:	942d      	str	r4, [sp, #180]	; 0xb4
 808cb1c:	ea87 0701 	eor.w	r7, r7, r1
 808cb20:	eb45 0107 	adc.w	r1, r5, r7
 808cb24:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 808cb28:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 808cb2c:	4074      	eors	r4, r6
 808cb2e:	ea4f 56c9 	mov.w	r6, r9, lsl #23
 808cb32:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
 808cb36:	962f      	str	r6, [sp, #188]	; 0xbc
 808cb38:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 808cb3c:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
 808cb40:	962e      	str	r6, [sp, #184]	; 0xb8
 808cb42:	407d      	eors	r5, r7
 808cb44:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 808cb48:	4066      	eors	r6, r4
 808cb4a:	1986      	adds	r6, r0, r6
 808cb4c:	ea87 0705 	eor.w	r7, r7, r5
 808cb50:	eb41 0707 	adc.w	r7, r1, r7
 808cb54:	eb1a 0006 	adds.w	r0, sl, r6
 808cb58:	eb4b 0107 	adc.w	r1, fp, r7
 808cb5c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808cb60:	990a      	ldr	r1, [sp, #40]	; 0x28
 808cb62:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808cb64:	0f09      	lsrs	r1, r1, #28
 808cb66:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808cb6a:	9130      	str	r1, [sp, #192]	; 0xc0
 808cb6c:	0f01      	lsrs	r1, r0, #28
 808cb6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 808cb70:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 808cb74:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808cb78:	9131      	str	r1, [sp, #196]	; 0xc4
 808cb7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808cb7c:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
 808cb80:	0789      	lsls	r1, r1, #30
 808cb82:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808cb86:	9133      	str	r1, [sp, #204]	; 0xcc
 808cb88:	0781      	lsls	r1, r0, #30
 808cb8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808cb8c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808cb90:	9132      	str	r1, [sp, #200]	; 0xc8
 808cb92:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 808cb96:	404d      	eors	r5, r1
 808cb98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808cb9a:	4044      	eors	r4, r0
 808cb9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 808cb9e:	0649      	lsls	r1, r1, #25
 808cba0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808cba4:	9135      	str	r1, [sp, #212]	; 0xd4
 808cba6:	0641      	lsls	r1, r0, #25
 808cba8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808cbaa:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808cbae:	9134      	str	r1, [sp, #208]	; 0xd0
 808cbb0:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 808cbb4:	4060      	eors	r0, r4
 808cbb6:	4604      	mov	r4, r0
 808cbb8:	4069      	eors	r1, r5
 808cbba:	460d      	mov	r5, r1
 808cbbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 808cbc0:	ea40 000a 	orr.w	r0, r0, sl
 808cbc4:	ea41 010b 	orr.w	r1, r1, fp
 808cbc8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 808cbcc:	ea0a 0a00 	and.w	sl, sl, r0
 808cbd0:	ea0b 0b01 	and.w	fp, fp, r1
 808cbd4:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 808cbd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808cbdc:	e9dd ab00 	ldrd	sl, fp, [sp]
 808cbe0:	ea0a 0a00 	and.w	sl, sl, r0
 808cbe4:	ea0b 0b01 	and.w	fp, fp, r1
 808cbe8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808cbec:	ea40 000a 	orr.w	r0, r0, sl
 808cbf0:	1900      	adds	r0, r0, r4
 808cbf2:	ea41 010b 	orr.w	r1, r1, fp
 808cbf6:	4169      	adcs	r1, r5
 808cbf8:	eb10 0a06 	adds.w	sl, r0, r6
 808cbfc:	eb41 0b07 	adc.w	fp, r1, r7
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 808cc00:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 808cc04:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 808cc08:	1900      	adds	r0, r0, r4
 808cc0a:	4169      	adcs	r1, r5
 808cc0c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808cc10:	1824      	adds	r4, r4, r0
 808cc12:	414d      	adcs	r5, r1
 808cc14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808cc18:	ea80 0008 	eor.w	r0, r0, r8
 808cc1c:	ea81 0109 	eor.w	r1, r1, r9
 808cc20:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808cc24:	4006      	ands	r6, r0
 808cc26:	4630      	mov	r0, r6
 808cc28:	400f      	ands	r7, r1
 808cc2a:	4639      	mov	r1, r7
 808cc2c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808cc30:	4046      	eors	r6, r0
 808cc32:	19a0      	adds	r0, r4, r6
 808cc34:	ea87 0701 	eor.w	r7, r7, r1
 808cc38:	9c08      	ldr	r4, [sp, #32]
 808cc3a:	eb45 0107 	adc.w	r1, r5, r7
 808cc3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808cc40:	0ba4      	lsrs	r4, r4, #14
 808cc42:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808cc46:	9436      	str	r4, [sp, #216]	; 0xd8
 808cc48:	0bac      	lsrs	r4, r5, #14
 808cc4a:	9d08      	ldr	r5, [sp, #32]
 808cc4c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808cc50:	9437      	str	r4, [sp, #220]	; 0xdc
 808cc52:	0cac      	lsrs	r4, r5, #18
 808cc54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808cc56:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808cc5a:	9438      	str	r4, [sp, #224]	; 0xe0
 808cc5c:	0cac      	lsrs	r4, r5, #18
 808cc5e:	9d08      	ldr	r5, [sp, #32]
 808cc60:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808cc64:	9439      	str	r4, [sp, #228]	; 0xe4
 808cc66:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 808cc6a:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 808cc6e:	4074      	eors	r4, r6
 808cc70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808cc72:	407d      	eors	r5, r7
 808cc74:	9f08      	ldr	r7, [sp, #32]
 808cc76:	05f6      	lsls	r6, r6, #23
 808cc78:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808cc7c:	963b      	str	r6, [sp, #236]	; 0xec
 808cc7e:	05fe      	lsls	r6, r7, #23
 808cc80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808cc82:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808cc86:	963a      	str	r6, [sp, #232]	; 0xe8
 808cc88:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 808cc8c:	4066      	eors	r6, r4
 808cc8e:	1986      	adds	r6, r0, r6
 808cc90:	ea87 0705 	eor.w	r7, r7, r5
 808cc94:	eb41 0707 	adc.w	r7, r1, r7
 808cc98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808cc9c:	1980      	adds	r0, r0, r6
 808cc9e:	4179      	adcs	r1, r7
 808cca0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808cca4:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808cca8:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808ccac:	913c      	str	r1, [sp, #240]	; 0xf0
 808ccae:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808ccb2:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808ccb6:	913d      	str	r1, [sp, #244]	; 0xf4
 808ccb8:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808ccbc:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808ccc0:	913f      	str	r1, [sp, #252]	; 0xfc
 808ccc2:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808ccc6:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808ccca:	913e      	str	r1, [sp, #248]	; 0xf8
 808cccc:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 808ccd0:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
 808ccd4:	404d      	eors	r5, r1
 808ccd6:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808ccda:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808ccde:	9141      	str	r1, [sp, #260]	; 0x104
 808cce0:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808cce4:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808cce8:	4044      	eors	r4, r0
 808ccea:	9140      	str	r1, [sp, #256]	; 0x100
 808ccec:	a940      	add	r1, sp, #256	; 0x100
 808ccee:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ccf2:	4060      	eors	r0, r4
 808ccf4:	4069      	eors	r1, r5
 808ccf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808ccfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808ccfe:	e9dd 4500 	ldrd	r4, r5, [sp]
 808cd02:	ea40 000a 	orr.w	r0, r0, sl
 808cd06:	ea41 010b 	orr.w	r1, r1, fp
 808cd0a:	4004      	ands	r4, r0
 808cd0c:	4620      	mov	r0, r4
 808cd0e:	400d      	ands	r5, r1
 808cd10:	4629      	mov	r1, r5
 808cd12:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808cd16:	ea04 040a 	and.w	r4, r4, sl
 808cd1a:	ea05 050b 	and.w	r5, r5, fp
 808cd1e:	4304      	orrs	r4, r0
 808cd20:	4620      	mov	r0, r4
 808cd22:	430d      	orrs	r5, r1
 808cd24:	4629      	mov	r1, r5
 808cd26:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808cd2a:	1824      	adds	r4, r4, r0
 808cd2c:	414d      	adcs	r5, r1
 808cd2e:	19a4      	adds	r4, r4, r6
 808cd30:	417d      	adcs	r5, r7
 808cd32:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 808cd36:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
 808cd3a:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 808cd3e:	1900      	adds	r0, r0, r4
 808cd40:	4169      	adcs	r1, r5
 808cd42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808cd46:	1824      	adds	r4, r4, r0
 808cd48:	414d      	adcs	r5, r1
 808cd4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808cd4e:	ea80 0008 	eor.w	r0, r0, r8
 808cd52:	ea81 0109 	eor.w	r1, r1, r9
 808cd56:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808cd5a:	4006      	ands	r6, r0
 808cd5c:	ea86 0608 	eor.w	r6, r6, r8
 808cd60:	400f      	ands	r7, r1
 808cd62:	19a0      	adds	r0, r4, r6
 808cd64:	ea87 0709 	eor.w	r7, r7, r9
 808cd68:	9c06      	ldr	r4, [sp, #24]
 808cd6a:	eb45 0107 	adc.w	r1, r5, r7
 808cd6e:	9d07      	ldr	r5, [sp, #28]
 808cd70:	0ba4      	lsrs	r4, r4, #14
 808cd72:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808cd76:	9442      	str	r4, [sp, #264]	; 0x108
 808cd78:	0bac      	lsrs	r4, r5, #14
 808cd7a:	9d06      	ldr	r5, [sp, #24]
 808cd7c:	ae44      	add	r6, sp, #272	; 0x110
 808cd7e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808cd82:	9443      	str	r4, [sp, #268]	; 0x10c
 808cd84:	0cac      	lsrs	r4, r5, #18
 808cd86:	9d07      	ldr	r5, [sp, #28]
 808cd88:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808cd8c:	9444      	str	r4, [sp, #272]	; 0x110
 808cd8e:	0cac      	lsrs	r4, r5, #18
 808cd90:	9d06      	ldr	r5, [sp, #24]
 808cd92:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808cd96:	9445      	str	r4, [sp, #276]	; 0x114
 808cd98:	ac42      	add	r4, sp, #264	; 0x108
 808cd9a:	cec0      	ldmia	r6, {r6, r7}
 808cd9c:	cc30      	ldmia	r4, {r4, r5}
 808cd9e:	4074      	eors	r4, r6
 808cda0:	9e07      	ldr	r6, [sp, #28]
 808cda2:	407d      	eors	r5, r7
 808cda4:	9f06      	ldr	r7, [sp, #24]
 808cda6:	05f6      	lsls	r6, r6, #23
 808cda8:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808cdac:	9647      	str	r6, [sp, #284]	; 0x11c
 808cdae:	05fe      	lsls	r6, r7, #23
 808cdb0:	9f07      	ldr	r7, [sp, #28]
 808cdb2:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808cdb6:	9646      	str	r6, [sp, #280]	; 0x118
 808cdb8:	ae46      	add	r6, sp, #280	; 0x118
 808cdba:	cec0      	ldmia	r6, {r6, r7}
 808cdbc:	4066      	eors	r6, r4
 808cdbe:	1986      	adds	r6, r0, r6
 808cdc0:	ea87 0705 	eor.w	r7, r7, r5
 808cdc4:	eb41 0707 	adc.w	r7, r1, r7
 808cdc8:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808cdcc:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808cdd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 808cdd4:	1836      	adds	r6, r6, r0
 808cdd6:	414f      	adcs	r7, r1
 808cdd8:	9902      	ldr	r1, [sp, #8]
 808cdda:	9803      	ldr	r0, [sp, #12]
 808cddc:	0f09      	lsrs	r1, r1, #28
 808cdde:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808cde2:	9148      	str	r1, [sp, #288]	; 0x120
 808cde4:	0f01      	lsrs	r1, r0, #28
 808cde6:	9802      	ldr	r0, [sp, #8]
 808cde8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 808cdec:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808cdf0:	9149      	str	r1, [sp, #292]	; 0x124
 808cdf2:	9903      	ldr	r1, [sp, #12]
 808cdf4:	0789      	lsls	r1, r1, #30
 808cdf6:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808cdfa:	914b      	str	r1, [sp, #300]	; 0x12c
 808cdfc:	0781      	lsls	r1, r0, #30
 808cdfe:	9803      	ldr	r0, [sp, #12]
 808ce00:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808ce04:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808ce08:	914a      	str	r1, [sp, #296]	; 0x128
 808ce0a:	a948      	add	r1, sp, #288	; 0x120
 808ce0c:	e9d1 4500 	ldrd	r4, r5, [r1]
 808ce10:	a94a      	add	r1, sp, #296	; 0x128
 808ce12:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ce16:	404d      	eors	r5, r1
 808ce18:	9903      	ldr	r1, [sp, #12]
 808ce1a:	4044      	eors	r4, r0
 808ce1c:	9802      	ldr	r0, [sp, #8]
 808ce1e:	0649      	lsls	r1, r1, #25
 808ce20:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808ce24:	914d      	str	r1, [sp, #308]	; 0x134
 808ce26:	0641      	lsls	r1, r0, #25
 808ce28:	9803      	ldr	r0, [sp, #12]
 808ce2a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808ce2e:	914c      	str	r1, [sp, #304]	; 0x130
 808ce30:	a94c      	add	r1, sp, #304	; 0x130
 808ce32:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ce36:	4060      	eors	r0, r4
 808ce38:	4069      	eors	r1, r5
 808ce3a:	4604      	mov	r4, r0
 808ce3c:	460d      	mov	r5, r1
 808ce3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808ce42:	ea40 000a 	orr.w	r0, r0, sl
 808ce46:	ea41 010b 	orr.w	r1, r1, fp
 808ce4a:	4006      	ands	r6, r0
 808ce4c:	4630      	mov	r0, r6
 808ce4e:	400f      	ands	r7, r1
 808ce50:	4639      	mov	r1, r7
 808ce52:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808ce56:	ea06 060a 	and.w	r6, r6, sl
 808ce5a:	ea07 070b 	and.w	r7, r7, fp
 808ce5e:	4306      	orrs	r6, r0
 808ce60:	1930      	adds	r0, r6, r4
 808ce62:	ea47 0701 	orr.w	r7, r7, r1
 808ce66:	eb47 0105 	adc.w	r1, r7, r5
 808ce6a:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808ce6e:	1824      	adds	r4, r4, r0
 808ce70:	414d      	adcs	r5, r1
 808ce72:	e9cd 4500 	strd	r4, r5, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 808ce76:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 808ce7a:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
 808ce7e:	1900      	adds	r0, r0, r4
 808ce80:	4169      	adcs	r1, r5
 808ce82:	eb10 0008 	adds.w	r0, r0, r8
 808ce86:	eb41 0109 	adc.w	r1, r1, r9
 808ce8a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808ce8e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 808ce92:	ea88 0804 	eor.w	r8, r8, r4
 808ce96:	ea89 0905 	eor.w	r9, r9, r5
 808ce9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808ce9e:	ea04 0408 	and.w	r4, r4, r8
 808cea2:	46a0      	mov	r8, r4
 808cea4:	ea05 0509 	and.w	r5, r5, r9
 808cea8:	46a9      	mov	r9, r5
 808ceaa:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808ceae:	ea84 0408 	eor.w	r4, r4, r8
 808ceb2:	eb10 0804 	adds.w	r8, r0, r4
 808ceb6:	ea85 0509 	eor.w	r5, r5, r9
 808ceba:	eb41 0905 	adc.w	r9, r1, r5
 808cebe:	9904      	ldr	r1, [sp, #16]
 808cec0:	9805      	ldr	r0, [sp, #20]
 808cec2:	0b89      	lsrs	r1, r1, #14
 808cec4:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808cec8:	914e      	str	r1, [sp, #312]	; 0x138
 808ceca:	0b81      	lsrs	r1, r0, #14
 808cecc:	9804      	ldr	r0, [sp, #16]
 808cece:	ac50      	add	r4, sp, #320	; 0x140
 808ced0:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808ced4:	914f      	str	r1, [sp, #316]	; 0x13c
 808ced6:	0c81      	lsrs	r1, r0, #18
 808ced8:	9805      	ldr	r0, [sp, #20]
 808ceda:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808cede:	9150      	str	r1, [sp, #320]	; 0x140
 808cee0:	0c81      	lsrs	r1, r0, #18
 808cee2:	9804      	ldr	r0, [sp, #16]
 808cee4:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808cee8:	9151      	str	r1, [sp, #324]	; 0x144
 808ceea:	a94e      	add	r1, sp, #312	; 0x138
 808ceec:	cc30      	ldmia	r4, {r4, r5}
 808ceee:	e9d1 0100 	ldrd	r0, r1, [r1]
 808cef2:	4060      	eors	r0, r4
 808cef4:	9c05      	ldr	r4, [sp, #20]
 808cef6:	4069      	eors	r1, r5
 808cef8:	9d04      	ldr	r5, [sp, #16]
 808cefa:	05e4      	lsls	r4, r4, #23
 808cefc:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808cf00:	9453      	str	r4, [sp, #332]	; 0x14c
 808cf02:	05ec      	lsls	r4, r5, #23
 808cf04:	9d05      	ldr	r5, [sp, #20]
 808cf06:	e9dd 6700 	ldrd	r6, r7, [sp]
 808cf0a:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808cf0e:	9452      	str	r4, [sp, #328]	; 0x148
 808cf10:	ac52      	add	r4, sp, #328	; 0x148
 808cf12:	cc30      	ldmia	r4, {r4, r5}
 808cf14:	4044      	eors	r4, r0
 808cf16:	eb18 0804 	adds.w	r8, r8, r4
 808cf1a:	ea85 0501 	eor.w	r5, r5, r1
 808cf1e:	eb49 0905 	adc.w	r9, r9, r5
 808cf22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808cf26:	eb10 0008 	adds.w	r0, r0, r8
 808cf2a:	eb41 0109 	adc.w	r1, r1, r9
 808cf2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808cf32:	9900      	ldr	r1, [sp, #0]
 808cf34:	9801      	ldr	r0, [sp, #4]
 808cf36:	0f09      	lsrs	r1, r1, #28
 808cf38:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808cf3c:	9154      	str	r1, [sp, #336]	; 0x150
 808cf3e:	0f01      	lsrs	r1, r0, #28
 808cf40:	9800      	ldr	r0, [sp, #0]
 808cf42:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808cf46:	9155      	str	r1, [sp, #340]	; 0x154
 808cf48:	9901      	ldr	r1, [sp, #4]
 808cf4a:	0789      	lsls	r1, r1, #30
 808cf4c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808cf50:	9157      	str	r1, [sp, #348]	; 0x15c
 808cf52:	0781      	lsls	r1, r0, #30
 808cf54:	9801      	ldr	r0, [sp, #4]
 808cf56:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808cf5a:	9156      	str	r1, [sp, #344]	; 0x158
 808cf5c:	a954      	add	r1, sp, #336	; 0x150
 808cf5e:	e9d1 4500 	ldrd	r4, r5, [r1]
 808cf62:	a956      	add	r1, sp, #344	; 0x158
 808cf64:	e9d1 0100 	ldrd	r0, r1, [r1]
 808cf68:	404d      	eors	r5, r1
 808cf6a:	9901      	ldr	r1, [sp, #4]
 808cf6c:	4044      	eors	r4, r0
 808cf6e:	9800      	ldr	r0, [sp, #0]
 808cf70:	0649      	lsls	r1, r1, #25
 808cf72:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808cf76:	9159      	str	r1, [sp, #356]	; 0x164
 808cf78:	0641      	lsls	r1, r0, #25
 808cf7a:	9801      	ldr	r0, [sp, #4]
 808cf7c:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808cf80:	9158      	str	r1, [sp, #352]	; 0x160
 808cf82:	a958      	add	r1, sp, #352	; 0x160
 808cf84:	e9d1 0100 	ldrd	r0, r1, [r1]
 808cf88:	4060      	eors	r0, r4
 808cf8a:	4604      	mov	r4, r0
 808cf8c:	4069      	eors	r1, r5
 808cf8e:	460d      	mov	r5, r1
 808cf90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808cf94:	4330      	orrs	r0, r6
 808cf96:	4339      	orrs	r1, r7
 808cf98:	ea00 060a 	and.w	r6, r0, sl
 808cf9c:	ea01 070b 	and.w	r7, r1, fp
 808cfa0:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808cfa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 808cfa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808cfac:	4006      	ands	r6, r0
 808cfae:	400f      	ands	r7, r1
 808cfb0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808cfb4:	4330      	orrs	r0, r6
 808cfb6:	1900      	adds	r0, r0, r4
 808cfb8:	ea41 0107 	orr.w	r1, r1, r7
 808cfbc:	4169      	adcs	r1, r5
 808cfbe:	eb18 0800 	adds.w	r8, r8, r0
 808cfc2:	eb49 0901 	adc.w	r9, r9, r1
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 808cfc6:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 808cfca:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 808cfce:	1900      	adds	r0, r0, r4
 808cfd0:	4169      	adcs	r1, r5
 808cfd2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808cfd6:	1824      	adds	r4, r4, r0
 808cfd8:	414d      	adcs	r5, r1
 808cfda:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808cfde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808cfe2:	4046      	eors	r6, r0
 808cfe4:	4630      	mov	r0, r6
 808cfe6:	404f      	eors	r7, r1
 808cfe8:	4639      	mov	r1, r7
 808cfea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808cfee:	4006      	ands	r6, r0
 808cff0:	4630      	mov	r0, r6
 808cff2:	400f      	ands	r7, r1
 808cff4:	4639      	mov	r1, r7
 808cff6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808cffa:	4046      	eors	r6, r0
 808cffc:	1930      	adds	r0, r6, r4
 808cffe:	ea87 0701 	eor.w	r7, r7, r1
 808d002:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 808d004:	eb47 0105 	adc.w	r1, r7, r5
 808d008:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808d00a:	0ba4      	lsrs	r4, r4, #14
 808d00c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808d010:	945a      	str	r4, [sp, #360]	; 0x168
 808d012:	0bac      	lsrs	r4, r5, #14
 808d014:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808d016:	ae5c      	add	r6, sp, #368	; 0x170
 808d018:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808d01c:	945b      	str	r4, [sp, #364]	; 0x16c
 808d01e:	0cac      	lsrs	r4, r5, #18
 808d020:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808d022:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808d026:	945c      	str	r4, [sp, #368]	; 0x170
 808d028:	0cac      	lsrs	r4, r5, #18
 808d02a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808d02c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808d030:	945d      	str	r4, [sp, #372]	; 0x174
 808d032:	ac5a      	add	r4, sp, #360	; 0x168
 808d034:	cec0      	ldmia	r6, {r6, r7}
 808d036:	cc30      	ldmia	r4, {r4, r5}
 808d038:	4074      	eors	r4, r6
 808d03a:	4626      	mov	r6, r4
 808d03c:	407d      	eors	r5, r7
 808d03e:	462f      	mov	r7, r5
 808d040:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 808d042:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808d044:	05e4      	lsls	r4, r4, #23
 808d046:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808d04a:	945f      	str	r4, [sp, #380]	; 0x17c
 808d04c:	05ec      	lsls	r4, r5, #23
 808d04e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808d050:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808d054:	945e      	str	r4, [sp, #376]	; 0x178
 808d056:	ac5e      	add	r4, sp, #376	; 0x178
 808d058:	cc30      	ldmia	r4, {r4, r5}
 808d05a:	4074      	eors	r4, r6
 808d05c:	1906      	adds	r6, r0, r4
 808d05e:	ea85 0507 	eor.w	r5, r5, r7
 808d062:	eb41 0705 	adc.w	r7, r1, r5
 808d066:	eb16 000a 	adds.w	r0, r6, sl
 808d06a:	eb47 010b 	adc.w	r1, r7, fp
 808d06e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808d072:	ea4f 7118 	mov.w	r1, r8, lsr #28
 808d076:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
 808d07a:	9160      	str	r1, [sp, #384]	; 0x180
 808d07c:	ea4f 7119 	mov.w	r1, r9, lsr #28
 808d080:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 808d084:	9161      	str	r1, [sp, #388]	; 0x184
 808d086:	ea4f 7189 	mov.w	r1, r9, lsl #30
 808d08a:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 808d08e:	9163      	str	r1, [sp, #396]	; 0x18c
 808d090:	ea4f 7188 	mov.w	r1, r8, lsl #30
 808d094:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 808d098:	9162      	str	r1, [sp, #392]	; 0x188
 808d09a:	a960      	add	r1, sp, #384	; 0x180
 808d09c:	e9d1 4500 	ldrd	r4, r5, [r1]
 808d0a0:	a962      	add	r1, sp, #392	; 0x188
 808d0a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 808d0a6:	404d      	eors	r5, r1
 808d0a8:	ea4f 6149 	mov.w	r1, r9, lsl #25
 808d0ac:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
 808d0b0:	9165      	str	r1, [sp, #404]	; 0x194
 808d0b2:	ea4f 6148 	mov.w	r1, r8, lsl #25
 808d0b6:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
 808d0ba:	4044      	eors	r4, r0
 808d0bc:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808d0c0:	9164      	str	r1, [sp, #400]	; 0x190
 808d0c2:	a964      	add	r1, sp, #400	; 0x190
 808d0c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 808d0c8:	4060      	eors	r0, r4
 808d0ca:	4604      	mov	r4, r0
 808d0cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808d0d0:	e9dd ab00 	ldrd	sl, fp, [sp]
 808d0d4:	4069      	eors	r1, r5
 808d0d6:	460d      	mov	r5, r1
 808d0d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 808d0dc:	ea40 0008 	orr.w	r0, r0, r8
 808d0e0:	ea41 0109 	orr.w	r1, r1, r9
 808d0e4:	4006      	ands	r6, r0
 808d0e6:	ea0a 0a08 	and.w	sl, sl, r8
 808d0ea:	ea46 000a 	orr.w	r0, r6, sl
 808d0ee:	400f      	ands	r7, r1
 808d0f0:	ea0b 0b09 	and.w	fp, fp, r9
 808d0f4:	1900      	adds	r0, r0, r4
 808d0f6:	ea47 010b 	orr.w	r1, r7, fp
 808d0fa:	4169      	adcs	r1, r5
 808d0fc:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
 808d100:	eb1a 0a00 	adds.w	sl, sl, r0
 808d104:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 808d108:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 808d10c:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 808d110:	1900      	adds	r0, r0, r4
 808d112:	4169      	adcs	r1, r5
 808d114:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808d118:	1824      	adds	r4, r4, r0
 808d11a:	414d      	adcs	r5, r1
 808d11c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808d120:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808d124:	4046      	eors	r6, r0
 808d126:	4630      	mov	r0, r6
 808d128:	404f      	eors	r7, r1
 808d12a:	4639      	mov	r1, r7
 808d12c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808d130:	4006      	ands	r6, r0
 808d132:	4630      	mov	r0, r6
 808d134:	400f      	ands	r7, r1
 808d136:	4639      	mov	r1, r7
 808d138:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808d13c:	4046      	eors	r6, r0
 808d13e:	1930      	adds	r0, r6, r4
 808d140:	ea87 0701 	eor.w	r7, r7, r1
 808d144:	9c08      	ldr	r4, [sp, #32]
 808d146:	eb47 0105 	adc.w	r1, r7, r5
 808d14a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808d14c:	0ba4      	lsrs	r4, r4, #14
 808d14e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808d152:	9466      	str	r4, [sp, #408]	; 0x198
 808d154:	0bac      	lsrs	r4, r5, #14
 808d156:	9d08      	ldr	r5, [sp, #32]
 808d158:	ae68      	add	r6, sp, #416	; 0x1a0
 808d15a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808d15e:	9467      	str	r4, [sp, #412]	; 0x19c
 808d160:	0cac      	lsrs	r4, r5, #18
 808d162:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808d164:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808d168:	9468      	str	r4, [sp, #416]	; 0x1a0
 808d16a:	0cac      	lsrs	r4, r5, #18
 808d16c:	9d08      	ldr	r5, [sp, #32]
 808d16e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808d172:	9469      	str	r4, [sp, #420]	; 0x1a4
 808d174:	ac66      	add	r4, sp, #408	; 0x198
 808d176:	cec0      	ldmia	r6, {r6, r7}
 808d178:	cc30      	ldmia	r4, {r4, r5}
 808d17a:	4074      	eors	r4, r6
 808d17c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808d17e:	407d      	eors	r5, r7
 808d180:	9f08      	ldr	r7, [sp, #32]
 808d182:	05f6      	lsls	r6, r6, #23
 808d184:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808d188:	966b      	str	r6, [sp, #428]	; 0x1ac
 808d18a:	05fe      	lsls	r6, r7, #23
 808d18c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808d18e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808d192:	966a      	str	r6, [sp, #424]	; 0x1a8
 808d194:	ae6a      	add	r6, sp, #424	; 0x1a8
 808d196:	cec0      	ldmia	r6, {r6, r7}
 808d198:	4066      	eors	r6, r4
 808d19a:	1986      	adds	r6, r0, r6
 808d19c:	ea87 0705 	eor.w	r7, r7, r5
 808d1a0:	eb41 0707 	adc.w	r7, r1, r7
 808d1a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808d1a8:	1980      	adds	r0, r0, r6
 808d1aa:	4179      	adcs	r1, r7
 808d1ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808d1b0:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808d1b4:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808d1b8:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808d1bc:	916c      	str	r1, [sp, #432]	; 0x1b0
 808d1be:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808d1c2:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808d1c6:	916d      	str	r1, [sp, #436]	; 0x1b4
 808d1c8:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808d1cc:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808d1d0:	916f      	str	r1, [sp, #444]	; 0x1bc
 808d1d2:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808d1d6:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808d1da:	916e      	str	r1, [sp, #440]	; 0x1b8
 808d1dc:	a96c      	add	r1, sp, #432	; 0x1b0
 808d1de:	e9d1 4500 	ldrd	r4, r5, [r1]
 808d1e2:	a96e      	add	r1, sp, #440	; 0x1b8
 808d1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 808d1e8:	404d      	eors	r5, r1
 808d1ea:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808d1ee:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808d1f2:	9171      	str	r1, [sp, #452]	; 0x1c4
 808d1f4:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808d1f8:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808d1fc:	4044      	eors	r4, r0
 808d1fe:	9170      	str	r1, [sp, #448]	; 0x1c0
 808d200:	a970      	add	r1, sp, #448	; 0x1c0
 808d202:	e9d1 0100 	ldrd	r0, r1, [r1]
 808d206:	4060      	eors	r0, r4
 808d208:	4604      	mov	r4, r0
 808d20a:	e9dd 6700 	ldrd	r6, r7, [sp]
 808d20e:	4069      	eors	r1, r5
 808d210:	ea48 000a 	orr.w	r0, r8, sl
 808d214:	460d      	mov	r5, r1
 808d216:	4006      	ands	r6, r0
 808d218:	ea49 010b 	orr.w	r1, r9, fp
 808d21c:	4630      	mov	r0, r6
 808d21e:	400f      	ands	r7, r1
 808d220:	4639      	mov	r1, r7
 808d222:	ea08 060a 	and.w	r6, r8, sl
 808d226:	4306      	orrs	r6, r0
 808d228:	ea09 070b 	and.w	r7, r9, fp
 808d22c:	1930      	adds	r0, r6, r4
 808d22e:	ea47 0701 	orr.w	r7, r7, r1
 808d232:	eb47 0105 	adc.w	r1, r7, r5
 808d236:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808d23a:	1824      	adds	r4, r4, r0
 808d23c:	414d      	adcs	r5, r1
 808d23e:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808d242:	e952 0104 	ldrd	r0, r1, [r2, #-16]
 808d246:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 808d24a:	1900      	adds	r0, r0, r4
 808d24c:	4169      	adcs	r1, r5
 808d24e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808d252:	1824      	adds	r4, r4, r0
 808d254:	414d      	adcs	r5, r1
 808d256:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808d25a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808d25e:	4070      	eors	r0, r6
 808d260:	4079      	eors	r1, r7
 808d262:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808d266:	4006      	ands	r6, r0
 808d268:	4630      	mov	r0, r6
 808d26a:	400f      	ands	r7, r1
 808d26c:	4639      	mov	r1, r7
 808d26e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808d272:	4046      	eors	r6, r0
 808d274:	19a0      	adds	r0, r4, r6
 808d276:	ea87 0701 	eor.w	r7, r7, r1
 808d27a:	9c06      	ldr	r4, [sp, #24]
 808d27c:	eb45 0107 	adc.w	r1, r5, r7
 808d280:	9d07      	ldr	r5, [sp, #28]
 808d282:	0ba4      	lsrs	r4, r4, #14
 808d284:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808d288:	9472      	str	r4, [sp, #456]	; 0x1c8
 808d28a:	0bac      	lsrs	r4, r5, #14
 808d28c:	9d06      	ldr	r5, [sp, #24]
 808d28e:	ae74      	add	r6, sp, #464	; 0x1d0
 808d290:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808d294:	9473      	str	r4, [sp, #460]	; 0x1cc
 808d296:	0cac      	lsrs	r4, r5, #18
 808d298:	9d07      	ldr	r5, [sp, #28]
 808d29a:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808d29e:	9474      	str	r4, [sp, #464]	; 0x1d0
 808d2a0:	0cac      	lsrs	r4, r5, #18
 808d2a2:	9d06      	ldr	r5, [sp, #24]
 808d2a4:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808d2a8:	9475      	str	r4, [sp, #468]	; 0x1d4
 808d2aa:	ac72      	add	r4, sp, #456	; 0x1c8
 808d2ac:	cec0      	ldmia	r6, {r6, r7}
 808d2ae:	cc30      	ldmia	r4, {r4, r5}
 808d2b0:	4074      	eors	r4, r6
 808d2b2:	9e07      	ldr	r6, [sp, #28]
 808d2b4:	407d      	eors	r5, r7
 808d2b6:	9f06      	ldr	r7, [sp, #24]
 808d2b8:	05f6      	lsls	r6, r6, #23
 808d2ba:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808d2be:	9677      	str	r6, [sp, #476]	; 0x1dc
 808d2c0:	05fe      	lsls	r6, r7, #23
 808d2c2:	9f07      	ldr	r7, [sp, #28]
 808d2c4:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808d2c8:	9676      	str	r6, [sp, #472]	; 0x1d8
 808d2ca:	ae76      	add	r6, sp, #472	; 0x1d8
 808d2cc:	cec0      	ldmia	r6, {r6, r7}
 808d2ce:	4066      	eors	r6, r4
 808d2d0:	1986      	adds	r6, r0, r6
 808d2d2:	ea87 0705 	eor.w	r7, r7, r5
 808d2d6:	eb41 0707 	adc.w	r7, r1, r7
 808d2da:	e9dd 0100 	ldrd	r0, r1, [sp]
 808d2de:	1980      	adds	r0, r0, r6
 808d2e0:	4179      	adcs	r1, r7
 808d2e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 808d2e6:	9902      	ldr	r1, [sp, #8]
 808d2e8:	9803      	ldr	r0, [sp, #12]
 808d2ea:	0f09      	lsrs	r1, r1, #28
 808d2ec:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808d2f0:	9178      	str	r1, [sp, #480]	; 0x1e0
 808d2f2:	0f01      	lsrs	r1, r0, #28
 808d2f4:	9802      	ldr	r0, [sp, #8]
 808d2f6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808d2fa:	9179      	str	r1, [sp, #484]	; 0x1e4
 808d2fc:	9903      	ldr	r1, [sp, #12]
 808d2fe:	0789      	lsls	r1, r1, #30
 808d300:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808d304:	917b      	str	r1, [sp, #492]	; 0x1ec
 808d306:	0781      	lsls	r1, r0, #30
 808d308:	9803      	ldr	r0, [sp, #12]
 808d30a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808d30e:	917a      	str	r1, [sp, #488]	; 0x1e8
 808d310:	a978      	add	r1, sp, #480	; 0x1e0
 808d312:	e9d1 4500 	ldrd	r4, r5, [r1]
 808d316:	a97a      	add	r1, sp, #488	; 0x1e8
 808d318:	e9d1 0100 	ldrd	r0, r1, [r1]
 808d31c:	404d      	eors	r5, r1
 808d31e:	9903      	ldr	r1, [sp, #12]
 808d320:	4044      	eors	r4, r0
 808d322:	9802      	ldr	r0, [sp, #8]
 808d324:	0649      	lsls	r1, r1, #25
 808d326:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808d32a:	917d      	str	r1, [sp, #500]	; 0x1f4
 808d32c:	0641      	lsls	r1, r0, #25
 808d32e:	9803      	ldr	r0, [sp, #12]
 808d330:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808d334:	917c      	str	r1, [sp, #496]	; 0x1f0
 808d336:	a97c      	add	r1, sp, #496	; 0x1f0
 808d338:	e9d1 0100 	ldrd	r0, r1, [r1]
 808d33c:	4060      	eors	r0, r4
 808d33e:	4069      	eors	r1, r5
 808d340:	e9cd 0100 	strd	r0, r1, [sp]
 808d344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808d348:	ea40 000a 	orr.w	r0, r0, sl
 808d34c:	ea41 010b 	orr.w	r1, r1, fp
 808d350:	ea00 0408 	and.w	r4, r0, r8
 808d354:	ea01 0509 	and.w	r5, r1, r9
 808d358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808d35c:	ea00 000a 	and.w	r0, r0, sl
 808d360:	ea01 010b 	and.w	r1, r1, fp
 808d364:	4304      	orrs	r4, r0
 808d366:	430d      	orrs	r5, r1
 808d368:	4620      	mov	r0, r4
 808d36a:	4629      	mov	r1, r5
 808d36c:	e9dd 4500 	ldrd	r4, r5, [sp]
 808d370:	1824      	adds	r4, r4, r0
 808d372:	414d      	adcs	r5, r1
 808d374:	19a4      	adds	r4, r4, r6
 808d376:	417d      	adcs	r5, r7
    }
    while( i < 80 );
 808d378:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808d37a:	e9cd 4500 	strd	r4, r5, [sp]
    }
    while( i < 80 );
 808d37e:	f47f ab05 	bne.w	808c98c <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
 808d382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808d386:	4623      	mov	r3, r4
 808d388:	18c0      	adds	r0, r0, r3
 808d38a:	4169      	adcs	r1, r5
    ctx->state[1] += B;
 808d38c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808d390:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 808d394:	18a4      	adds	r4, r4, r2
 808d396:	415d      	adcs	r5, r3
 808d398:	e9ce 4506 	strd	r4, r5, [lr, #24]
    ctx->state[2] += C;
 808d39c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 808d3a0:	eb13 030a 	adds.w	r3, r3, sl
 808d3a4:	eb44 040b 	adc.w	r4, r4, fp
 808d3a8:	469a      	mov	sl, r3
    ctx->state[3] += D;
    ctx->state[4] += E;
 808d3aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808d3ae:	46a3      	mov	fp, r4
    ctx->state[3] += D;
    ctx->state[4] += E;
 808d3b0:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
 808d3b4:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808d3b8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 808d3bc:	eb10 0008 	adds.w	r0, r0, r8
 808d3c0:	eb41 0109 	adc.w	r1, r1, r9
    ctx->state[4] += E;
 808d3c4:	18a4      	adds	r4, r4, r2
 808d3c6:	415d      	adcs	r5, r3
 808d3c8:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 808d3cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 808d3d0:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 808d3d4:	18a4      	adds	r4, r4, r2
 808d3d6:	415d      	adcs	r5, r3
 808d3d8:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 808d3dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808d3e0:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 808d3e4:	18a4      	adds	r4, r4, r2
 808d3e6:	415d      	adcs	r5, r3
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808d3e8:	e9ce 010a 	strd	r0, r1, [lr, #40]	; 0x28
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 808d3ec:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 808d3f0:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
 808d3f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 808d3f8:	18c0      	adds	r0, r0, r3
 808d3fa:	4161      	adcs	r1, r4
 808d3fc:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
 808d400:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808d402:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
 808d406:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
 808d40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d40e:	bf00      	nop

0808d410 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808d410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808d414:	4604      	mov	r4, r0
 808d416:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    unsigned int left;

    if( ilen == 0 )
 808d418:	4615      	mov	r5, r2
 808d41a:	2a00      	cmp	r2, #0
 808d41c:	d03d      	beq.n	808d49a <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808d41e:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808d422:	f04f 0900 	mov.w	r9, #0
    unsigned int left;

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808d426:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808d42a:	1952      	adds	r2, r2, r5
 808d42c:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
 808d430:	454b      	cmp	r3, r9
 808d432:	bf08      	it	eq
 808d434:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808d436:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
 808d43a:	d206      	bcs.n	808d44a <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
 808d43c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 808d440:	3201      	adds	r2, #1
 808d442:	f143 0300 	adc.w	r3, r3, #0
 808d446:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
 808d44a:	b188      	cbz	r0, 808d470 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
 808d44c:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 808d450:	42bd      	cmp	r5, r7
 808d452:	d31c      	bcc.n	808d48e <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 808d454:	f104 0850 	add.w	r8, r4, #80	; 0x50
 808d458:	4631      	mov	r1, r6
 808d45a:	463a      	mov	r2, r7
 808d45c:	4440      	add	r0, r8
 808d45e:	f003 f8c8 	bl	80905f2 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808d462:	4641      	mov	r1, r8
 808d464:	4620      	mov	r0, r4
 808d466:	f7ff f993 	bl	808c790 <mbedtls_internal_sha512_process>
 808d46a:	b9b8      	cbnz	r0, 808d49c <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
 808d46c:	443e      	add	r6, r7
        ilen  -= fill;
 808d46e:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808d470:	462f      	mov	r7, r5
 808d472:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
 808d474:	2f7f      	cmp	r7, #127	; 0x7f
 808d476:	4431      	add	r1, r6
 808d478:	d905      	bls.n	808d486 <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 808d47a:	4620      	mov	r0, r4
 808d47c:	f7ff f988 	bl	808c790 <mbedtls_internal_sha512_process>
 808d480:	b960      	cbnz	r0, 808d49c <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
 808d482:	3f80      	subs	r7, #128	; 0x80
 808d484:	e7f5      	b.n	808d472 <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
 808d486:	b147      	cbz	r7, 808d49a <mbedtls_sha512_update_ret+0x8a>
 808d488:	463d      	mov	r5, r7
 808d48a:	460e      	mov	r6, r1
 808d48c:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 808d48e:	3450      	adds	r4, #80	; 0x50
 808d490:	462a      	mov	r2, r5
 808d492:	4631      	mov	r1, r6
 808d494:	4420      	add	r0, r4
 808d496:	f003 f8ac 	bl	80905f2 <memcpy>

    return( 0 );
 808d49a:	2000      	movs	r0, #0
}
 808d49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808d4a0 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808d4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808d4a2:	4604      	mov	r4, r0
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808d4a4:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 808d4a6:	2280      	movs	r2, #128	; 0x80
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808d4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
 808d4ac:	1c58      	adds	r0, r3, #1

    if( used <= 112 )
 808d4ae:	2870      	cmp	r0, #112	; 0x70
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808d4b0:	4423      	add	r3, r4
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808d4b2:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808d4b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 808d4b8:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
 808d4bc:	d804      	bhi.n	808d4c8 <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 808d4be:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 808d4c2:	2100      	movs	r1, #0
 808d4c4:	4430      	add	r0, r6
 808d4c6:	e00f      	b.n	808d4e8 <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 808d4c8:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 808d4cc:	2100      	movs	r1, #0
 808d4ce:	4430      	add	r0, r6
 808d4d0:	f003 f8b5 	bl	809063e <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808d4d4:	4631      	mov	r1, r6
 808d4d6:	4620      	mov	r0, r4
 808d4d8:	f7ff f95a 	bl	808c790 <mbedtls_internal_sha512_process>
 808d4dc:	2800      	cmp	r0, #0
 808d4de:	f040 8111 	bne.w	808d704 <mbedtls_sha512_finish_ret+0x264>
            return( ret );

        memset( ctx->buffer, 0, 112 );
 808d4e2:	4601      	mov	r1, r0
 808d4e4:	4630      	mov	r0, r6
 808d4e6:	2270      	movs	r2, #112	; 0x70
 808d4e8:	f003 f8a9 	bl	809063e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 808d4ec:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
 808d4f0:	68e3      	ldr	r3, [r4, #12]
 808d4f2:	68a2      	ldr	r2, [r4, #8]
 808d4f4:	00d9      	lsls	r1, r3, #3
 808d4f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 808d4fa:	2300      	movs	r3, #0
 808d4fc:	4319      	orrs	r1, r3
 808d4fe:	00d0      	lsls	r0, r2, #3
 808d500:	ea4f 725e 	mov.w	r2, lr, lsr #29
 808d504:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808d506:	0e0a      	lsrs	r2, r1, #24
 808d508:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 808d50c:	0c0a      	lsrs	r2, r1, #16
 808d50e:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 808d512:	0a0a      	lsrs	r2, r1, #8
 808d514:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
 808d518:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808d51a:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808d51e:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
 808d522:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808d524:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808d528:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
 808d52c:	0a02      	lsrs	r2, r0, #8
 808d52e:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808d532:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808d534:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808d536:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 808d53a:	0c1a      	lsrs	r2, r3, #16
 808d53c:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
 808d540:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 808d544:	0a1a      	lsrs	r2, r3, #8
 808d546:	0e3b      	lsrs	r3, r7, #24
 808d548:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 808d54c:	0c3b      	lsrs	r3, r7, #16
 808d54e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 808d552:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808d554:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
 808d558:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808d55c:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 808d560:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
 808d564:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808d568:	4631      	mov	r1, r6
 808d56a:	4620      	mov	r0, r4
 808d56c:	f7ff f910 	bl	808c790 <mbedtls_internal_sha512_process>
 808d570:	4603      	mov	r3, r0
 808d572:	2800      	cmp	r0, #0
 808d574:	f040 80c5 	bne.w	808d702 <mbedtls_sha512_finish_ret+0x262>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 808d578:	7de2      	ldrb	r2, [r4, #23]
 808d57a:	702a      	strb	r2, [r5, #0]
 808d57c:	8ae2      	ldrh	r2, [r4, #22]
 808d57e:	706a      	strb	r2, [r5, #1]
 808d580:	6962      	ldr	r2, [r4, #20]
 808d582:	0a12      	lsrs	r2, r2, #8
 808d584:	70aa      	strb	r2, [r5, #2]
 808d586:	6962      	ldr	r2, [r4, #20]
 808d588:	70ea      	strb	r2, [r5, #3]
 808d58a:	7ce2      	ldrb	r2, [r4, #19]
 808d58c:	712a      	strb	r2, [r5, #4]
 808d58e:	8a62      	ldrh	r2, [r4, #18]
 808d590:	716a      	strb	r2, [r5, #5]
 808d592:	6922      	ldr	r2, [r4, #16]
 808d594:	0a12      	lsrs	r2, r2, #8
 808d596:	71aa      	strb	r2, [r5, #6]
 808d598:	6922      	ldr	r2, [r4, #16]
 808d59a:	71ea      	strb	r2, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 808d59c:	7fe2      	ldrb	r2, [r4, #31]
 808d59e:	722a      	strb	r2, [r5, #8]
 808d5a0:	8be2      	ldrh	r2, [r4, #30]
 808d5a2:	726a      	strb	r2, [r5, #9]
 808d5a4:	69e2      	ldr	r2, [r4, #28]
 808d5a6:	0a12      	lsrs	r2, r2, #8
 808d5a8:	72aa      	strb	r2, [r5, #10]
 808d5aa:	69e2      	ldr	r2, [r4, #28]
 808d5ac:	72ea      	strb	r2, [r5, #11]
 808d5ae:	7ee2      	ldrb	r2, [r4, #27]
 808d5b0:	732a      	strb	r2, [r5, #12]
 808d5b2:	8b62      	ldrh	r2, [r4, #26]
 808d5b4:	736a      	strb	r2, [r5, #13]
 808d5b6:	69a2      	ldr	r2, [r4, #24]
 808d5b8:	0a12      	lsrs	r2, r2, #8
 808d5ba:	73aa      	strb	r2, [r5, #14]
 808d5bc:	69a2      	ldr	r2, [r4, #24]
 808d5be:	73ea      	strb	r2, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 808d5c0:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 808d5c4:	742a      	strb	r2, [r5, #16]
 808d5c6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 808d5c8:	746a      	strb	r2, [r5, #17]
 808d5ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808d5cc:	0a12      	lsrs	r2, r2, #8
 808d5ce:	74aa      	strb	r2, [r5, #18]
 808d5d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808d5d2:	74ea      	strb	r2, [r5, #19]
 808d5d4:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 808d5d8:	752a      	strb	r2, [r5, #20]
 808d5da:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 808d5dc:	756a      	strb	r2, [r5, #21]
 808d5de:	6a22      	ldr	r2, [r4, #32]
 808d5e0:	0a12      	lsrs	r2, r2, #8
 808d5e2:	75aa      	strb	r2, [r5, #22]
 808d5e4:	6a22      	ldr	r2, [r4, #32]
 808d5e6:	75ea      	strb	r2, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 808d5e8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 808d5ec:	762a      	strb	r2, [r5, #24]
 808d5ee:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 808d5f0:	766a      	strb	r2, [r5, #25]
 808d5f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808d5f4:	0a12      	lsrs	r2, r2, #8
 808d5f6:	76aa      	strb	r2, [r5, #26]
 808d5f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808d5fa:	76ea      	strb	r2, [r5, #27]
 808d5fc:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 808d600:	772a      	strb	r2, [r5, #28]
 808d602:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 808d604:	776a      	strb	r2, [r5, #29]
 808d606:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808d608:	0a12      	lsrs	r2, r2, #8
 808d60a:	77aa      	strb	r2, [r5, #30]
 808d60c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808d60e:	77ea      	strb	r2, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 808d610:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 808d614:	f885 2020 	strb.w	r2, [r5, #32]
 808d618:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 808d61a:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
 808d61e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808d620:	0a12      	lsrs	r2, r2, #8
 808d622:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 808d626:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808d628:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
 808d62c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 808d630:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 808d634:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 808d636:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 808d63a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808d63c:	0a12      	lsrs	r2, r2, #8
 808d63e:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
 808d642:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808d644:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 808d648:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 808d64c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
 808d650:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 808d652:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 808d656:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808d658:	0a12      	lsrs	r2, r2, #8
 808d65a:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
 808d65e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808d660:	f885 202b 	strb.w	r2, [r5, #43]	; 0x2b
 808d664:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 808d668:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
 808d66c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 808d66e:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
 808d672:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808d674:	0a12      	lsrs	r2, r2, #8
 808d676:	f885 202e 	strb.w	r2, [r5, #46]	; 0x2e
 808d67a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808d67c:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 808d680:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 808d684:	2800      	cmp	r0, #0
 808d686:	d13c      	bne.n	808d702 <mbedtls_sha512_finish_ret+0x262>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 808d688:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 808d68c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 808d690:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 808d694:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 808d698:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808d69a:	0a1b      	lsrs	r3, r3, #8
 808d69c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 808d6a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808d6a2:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 808d6a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 808d6aa:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 808d6ae:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 808d6b2:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 808d6b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808d6b8:	0a1b      	lsrs	r3, r3, #8
 808d6ba:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 808d6be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808d6c0:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 808d6c4:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 808d6c8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 808d6cc:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 808d6d0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 808d6d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808d6d6:	0a1b      	lsrs	r3, r3, #8
 808d6d8:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 808d6dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808d6de:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 808d6e2:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 808d6e6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 808d6ea:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 808d6ee:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 808d6f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808d6f4:	0a1b      	lsrs	r3, r3, #8
 808d6f6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 808d6fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808d6fc:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 808d700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    return( 0 );
 808d702:	4618      	mov	r0, r3
}
 808d704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808d706 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808d706:	b5f0      	push	{r4, r5, r6, r7, lr}
 808d708:	461f      	mov	r7, r3
 808d70a:	b0b7      	sub	sp, #220	; 0xdc
 808d70c:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808d70e:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808d710:	460e      	mov	r6, r1
 808d712:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808d714:	f7fe ff8a 	bl	808c62c <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 808d718:	4639      	mov	r1, r7
 808d71a:	4668      	mov	r0, sp
 808d71c:	f7fe ff9c 	bl	808c658 <mbedtls_sha512_starts_ret>
 808d720:	4601      	mov	r1, r0
 808d722:	b958      	cbnz	r0, 808d73c <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 808d724:	4629      	mov	r1, r5
 808d726:	4632      	mov	r2, r6
 808d728:	4668      	mov	r0, sp
 808d72a:	f7ff fe71 	bl	808d410 <mbedtls_sha512_update_ret>
 808d72e:	4601      	mov	r1, r0
 808d730:	b920      	cbnz	r0, 808d73c <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 808d732:	4621      	mov	r1, r4
 808d734:	4668      	mov	r0, sp
 808d736:	f7ff feb3 	bl	808d4a0 <mbedtls_sha512_finish_ret>
 808d73a:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 808d73c:	4668      	mov	r0, sp
 808d73e:	f7fe ff79 	bl	808c634 <mbedtls_sha512_free>

    return( ret );
}
 808d742:	4608      	mov	r0, r1
 808d744:	b037      	add	sp, #220	; 0xdc
 808d746:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808d748 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 808d748:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;
    int ret = 0;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808d74a:	2b40      	cmp	r3, #64	; 0x40
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 808d74c:	b093      	sub	sp, #76	; 0x4c
 808d74e:	4607      	mov	r7, r0
 808d750:	460d      	mov	r5, r1
 808d752:	4616      	mov	r6, r2
 808d754:	461c      	mov	r4, r3
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;
    int ret = 0;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808d756:	d908      	bls.n	808d76a <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x22>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 808d758:	2300      	movs	r3, #0
 808d75a:	aa02      	add	r2, sp, #8
 808d75c:	4621      	mov	r1, r4
 808d75e:	4630      	mov	r0, r6
 808d760:	f7ff ffd1 	bl	808d706 <mbedtls_sha512_ret>
 808d764:	b9d0      	cbnz	r0, 808d79c <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x54>
            goto cleanup;
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
 808d766:	ae02      	add	r6, sp, #8
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 808d768:	2440      	movs	r4, #64	; 0x40
    }

    header[0] = source_id;
 808d76a:	f88d 5004 	strb.w	r5, [sp, #4]
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 808d76e:	463d      	mov	r5, r7
 808d770:	f855 1b08 	ldr.w	r1, [r5], #8
        p = tmp;
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
    }

    header[0] = source_id;
    header[1] = use_len & 0xFF;
 808d774:	f88d 4005 	strb.w	r4, [sp, #5]
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 808d778:	b919      	cbnz	r1, 808d782 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x3a>
 808d77a:	4628      	mov	r0, r5
 808d77c:	f7fe ff6c 	bl	808c658 <mbedtls_sha512_starts_ret>
 808d780:	b960      	cbnz	r0, 808d79c <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x54>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 808d782:	2301      	movs	r3, #1
 808d784:	603b      	str	r3, [r7, #0]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 808d786:	2202      	movs	r2, #2
 808d788:	a901      	add	r1, sp, #4
 808d78a:	4628      	mov	r0, r5
 808d78c:	f7ff fe40 	bl	808d410 <mbedtls_sha512_update_ret>
 808d790:	b920      	cbnz	r0, 808d79c <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x54>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 808d792:	4622      	mov	r2, r4
 808d794:	4631      	mov	r1, r6
 808d796:	4628      	mov	r0, r5
 808d798:	f7ff fe3a 	bl	808d410 <mbedtls_sha512_update_ret>
 808d79c:	2300      	movs	r3, #0
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808d79e:	4619      	mov	r1, r3
 808d7a0:	aa02      	add	r2, sp, #8
 808d7a2:	441a      	add	r2, r3
 808d7a4:	3301      	adds	r3, #1
 808d7a6:	2b41      	cmp	r3, #65	; 0x41
 808d7a8:	d001      	beq.n	808d7ae <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x66>
 808d7aa:	7011      	strb	r1, [r2, #0]
 808d7ac:	e7f8      	b.n	808d7a0 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x58>

cleanup:
    mbedtls_zeroize( tmp, sizeof( tmp ) );

    return( ret );
}
 808d7ae:	b013      	add	sp, #76	; 0x4c
 808d7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808d7b2 <_ZL23entropy_gather_internalP23mbedtls_entropy_context>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 808d7b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 808d7b6:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 808d7ba:	b0a3      	sub	sp, #140	; 0x8c
 808d7bc:	4680      	mov	r8, r0
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 808d7be:	2b00      	cmp	r3, #0
 808d7c0:	d037      	beq.n	808d832 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x80>
 808d7c2:	2500      	movs	r5, #0
 808d7c4:	4604      	mov	r4, r0
 808d7c6:	462e      	mov	r6, r5
    for( i = 0; i < ctx->source_count; i++ )
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 808d7c8:	46a9      	mov	r9, r5
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 808d7ca:	f8d8 30e0 	ldr.w	r3, [r8, #224]	; 0xe0
 808d7ce:	429e      	cmp	r6, r3
 808d7d0:	da21      	bge.n	808d816 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x64>
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 808d7d2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
            have_one_strong = 1;

        olen = 0;
 808d7d6:	f8cd 9004 	str.w	r9, [sp, #4]
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;
 808d7da:	2b01      	cmp	r3, #1

        olen = 0;
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 808d7dc:	f04f 0280 	mov.w	r2, #128	; 0x80
 808d7e0:	ab01      	add	r3, sp, #4
 808d7e2:	a902      	add	r1, sp, #8
 808d7e4:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 808d7e8:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;
 808d7ec:	bf08      	it	eq
 808d7ee:	2501      	moveq	r5, #1

        olen = 0;
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 808d7f0:	47b8      	blx	r7
 808d7f2:	b9a8      	cbnz	r0, 808d820 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x6e>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 808d7f4:	9b01      	ldr	r3, [sp, #4]
 808d7f6:	b15b      	cbz	r3, 808d810 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x5e>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 808d7f8:	aa02      	add	r2, sp, #8
 808d7fa:	b2f1      	uxtb	r1, r6
 808d7fc:	4640      	mov	r0, r8
 808d7fe:	f7ff ffa3 	bl	808d748 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj>
 808d802:	b9c0      	cbnz	r0, 808d836 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x84>
                                        buf, olen ) ) != 0 )
                return( ret );
            ctx->source[i].size += olen;
 808d804:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 808d808:	9b01      	ldr	r3, [sp, #4]
 808d80a:	4413      	add	r3, r2
 808d80c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 808d810:	3601      	adds	r6, #1
 808d812:	3414      	adds	r4, #20
 808d814:	e7d9      	b.n	808d7ca <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x18>
            ctx->source[i].size += olen;
        }
    }

    if( have_one_strong == 0 )
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 808d816:	2d00      	cmp	r5, #0
 808d818:	bf14      	ite	ne
 808d81a:	2000      	movne	r0, #0
 808d81c:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
 808d820:	2300      	movs	r3, #0
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808d822:	4619      	mov	r1, r3
 808d824:	aa02      	add	r2, sp, #8
 808d826:	441a      	add	r2, r3
 808d828:	3301      	adds	r3, #1
 808d82a:	2b81      	cmp	r3, #129	; 0x81
 808d82c:	d003      	beq.n	808d836 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x84>
 808d82e:	7011      	strb	r1, [r2, #0]
 808d830:	e7f8      	b.n	808d824 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x72>
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 808d832:	f06f 003f 	mvn.w	r0, #63	; 0x3f

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 808d836:	b023      	add	sp, #140	; 0x8c
 808d838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808d83c <mbedtls_entropy_init>:
}

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 808d83c:	b538      	push	{r3, r4, r5, lr}
 808d83e:	4604      	mov	r4, r0
    ctx->source_count = 0;
 808d840:	2500      	movs	r5, #0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 808d842:	f44f 72c8 	mov.w	r2, #400	; 0x190

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
    ctx->source_count = 0;
 808d846:	f8c0 50e0 	str.w	r5, [r0, #224]	; 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 808d84a:	4629      	mov	r1, r5
 808d84c:	30e4      	adds	r0, #228	; 0xe4
 808d84e:	f002 fef6 	bl	809063e <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 808d852:	4620      	mov	r0, r4
 808d854:	f840 5b08 	str.w	r5, [r0], #8
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 808d858:	f7fe fee8 	bl	808c62c <mbedtls_sha512_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    idx = ctx->source_count;
 808d85c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 808d860:	2a13      	cmp	r2, #19
 808d862:	dc0f      	bgt.n	808d884 <mbedtls_entropy_init+0x48>
    {
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
        goto exit;
    }

    ctx->source[idx].f_source  = f_source;
 808d864:	2314      	movs	r3, #20
 808d866:	fb03 4302 	mla	r3, r3, r2, r4
 808d86a:	4907      	ldr	r1, [pc, #28]	; (808d888 <mbedtls_entropy_init+0x4c>)
    ctx->source[idx].p_source  = p_source;
    ctx->source[idx].threshold = threshold;
    ctx->source[idx].strong    = strong;

    ctx->source_count++;
 808d86c:	3201      	adds	r2, #1
    {
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
        goto exit;
    }

    ctx->source[idx].f_source  = f_source;
 808d86e:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
    ctx->source[idx].p_source  = p_source;
    ctx->source[idx].threshold = threshold;
 808d872:	2104      	movs	r1, #4
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
        goto exit;
    }

    ctx->source[idx].f_source  = f_source;
    ctx->source[idx].p_source  = p_source;
 808d874:	f8c3 50e8 	str.w	r5, [r3, #232]	; 0xe8
    ctx->source[idx].threshold = threshold;
 808d878:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    ctx->source[idx].strong    = strong;
 808d87c:	f8c3 50f4 	str.w	r5, [r3, #244]	; 0xf4

    ctx->source_count++;
 808d880:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 808d884:	bd38      	pop	{r3, r4, r5, pc}
 808d886:	bf00      	nop
 808d888:	080839c7 	.word	0x080839c7

0808d88c <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 808d88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808d890:	2a40      	cmp	r2, #64	; 0x40

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 808d892:	b090      	sub	sp, #64	; 0x40
 808d894:	4605      	mov	r5, r0
 808d896:	4688      	mov	r8, r1
 808d898:	4617      	mov	r7, r2
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808d89a:	d862      	bhi.n	808d962 <mbedtls_entropy_func+0xd6>
 808d89c:	f44f 7681 	mov.w	r6, #258	; 0x102
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 808d8a0:	3e01      	subs	r6, #1
 808d8a2:	d053      	beq.n	808d94c <mbedtls_entropy_func+0xc0>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
            goto exit;
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 808d8a4:	4628      	mov	r0, r5
 808d8a6:	f7ff ff84 	bl	808d7b2 <_ZL23entropy_gather_internalP23mbedtls_entropy_context>
 808d8aa:	4604      	mov	r4, r0
 808d8ac:	2800      	cmp	r0, #0
 808d8ae:	d14f      	bne.n	808d950 <mbedtls_entropy_func+0xc4>
 808d8b0:	462a      	mov	r2, r5
            goto exit;

        done = 1;
        for( i = 0; i < ctx->source_count; i++ )
 808d8b2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 808d8b6:	2101      	movs	r1, #1
 808d8b8:	429c      	cmp	r4, r3
 808d8ba:	da0a      	bge.n	808d8d2 <mbedtls_entropy_func+0x46>
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
 808d8bc:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
            goto exit;

        done = 1;
        for( i = 0; i < ctx->source_count; i++ )
 808d8c0:	3401      	adds	r4, #1
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
 808d8c2:	4686      	mov	lr, r0
 808d8c4:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 808d8c8:	3214      	adds	r2, #20
 808d8ca:	4586      	cmp	lr, r0
 808d8cc:	bf38      	it	cc
 808d8ce:	2100      	movcc	r1, #0

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
            goto exit;

        done = 1;
        for( i = 0; i < ctx->source_count; i++ )
 808d8d0:	e7f2      	b.n	808d8b8 <mbedtls_entropy_func+0x2c>
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
    }
    while( ! done );
 808d8d2:	2900      	cmp	r1, #0
 808d8d4:	d0e4      	beq.n	808d8a0 <mbedtls_entropy_func+0x14>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 808d8d6:	2240      	movs	r2, #64	; 0x40
 808d8d8:	2100      	movs	r1, #0
 808d8da:	4668      	mov	r0, sp
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 808d8dc:	f105 0608 	add.w	r6, r5, #8
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
    }
    while( ! done );

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 808d8e0:	f002 fead 	bl	809063e <memset>
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 808d8e4:	4669      	mov	r1, sp
 808d8e6:	4630      	mov	r0, r6
 808d8e8:	f7ff fdda 	bl	808d4a0 <mbedtls_sha512_finish_ret>
 808d8ec:	4604      	mov	r4, r0
 808d8ee:	bb78      	cbnz	r0, 808d950 <mbedtls_entropy_func+0xc4>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 808d8f0:	4630      	mov	r0, r6
 808d8f2:	f7fe fe9f 	bl	808c634 <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 808d8f6:	4630      	mov	r0, r6
 808d8f8:	f7fe fe98 	bl	808c62c <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 808d8fc:	4621      	mov	r1, r4
 808d8fe:	4630      	mov	r0, r6
 808d900:	f7fe feaa 	bl	808c658 <mbedtls_sha512_starts_ret>
 808d904:	4604      	mov	r4, r0
 808d906:	bb18      	cbnz	r0, 808d950 <mbedtls_entropy_func+0xc4>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 808d908:	2240      	movs	r2, #64	; 0x40
 808d90a:	4669      	mov	r1, sp
 808d90c:	4630      	mov	r0, r6
 808d90e:	f7ff fd7f 	bl	808d410 <mbedtls_sha512_update_ret>
 808d912:	4604      	mov	r4, r0
 808d914:	b9e0      	cbnz	r0, 808d950 <mbedtls_entropy_func+0xc4>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 808d916:	4603      	mov	r3, r0
 808d918:	466a      	mov	r2, sp
 808d91a:	2140      	movs	r1, #64	; 0x40
 808d91c:	4668      	mov	r0, sp
 808d91e:	f7ff fef2 	bl	808d706 <mbedtls_sha512_ret>
 808d922:	4604      	mov	r4, r0
 808d924:	b9a0      	cbnz	r0, 808d950 <mbedtls_entropy_func+0xc4>
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
        ctx->source[i].size = 0;
 808d926:	4621      	mov	r1, r4
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808d928:	f8d5 60e0 	ldr.w	r6, [r5, #224]	; 0xe0
 808d92c:	4603      	mov	r3, r0
        ctx->source[i].size = 0;
 808d92e:	2014      	movs	r0, #20
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808d930:	42b3      	cmp	r3, r6
 808d932:	da05      	bge.n	808d940 <mbedtls_entropy_func+0xb4>
        ctx->source[i].size = 0;
 808d934:	fb00 5203 	mla	r2, r0, r3, r5
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808d938:	3301      	adds	r3, #1
        ctx->source[i].size = 0;
 808d93a:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808d93e:	e7f7      	b.n	808d930 <mbedtls_entropy_func+0xa4>
        ctx->source[i].size = 0;

    memcpy( output, buf, len );
 808d940:	463a      	mov	r2, r7
 808d942:	4669      	mov	r1, sp
 808d944:	4640      	mov	r0, r8
 808d946:	f002 fe54 	bl	80905f2 <memcpy>
 808d94a:	e001      	b.n	808d950 <mbedtls_entropy_func+0xc4>
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 808d94c:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 808d950:	2300      	movs	r3, #0
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808d952:	4619      	mov	r1, r3
 808d954:	eb0d 0203 	add.w	r2, sp, r3
 808d958:	3301      	adds	r3, #1
 808d95a:	2b41      	cmp	r3, #65	; 0x41
 808d95c:	d004      	beq.n	808d968 <mbedtls_entropy_func+0xdc>
 808d95e:	7011      	strb	r1, [r2, #0]
 808d960:	e7f8      	b.n	808d954 <mbedtls_entropy_func+0xc8>
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 808d962:	f06f 003b 	mvn.w	r0, #59	; 0x3b
 808d966:	e000      	b.n	808d96a <mbedtls_entropy_func+0xde>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 808d968:	4620      	mov	r0, r4
}
 808d96a:	b010      	add	sp, #64	; 0x40
 808d96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808d970 <mbedtls_pem_init>:
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
}

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 808d970:	2300      	movs	r3, #0
 808d972:	6003      	str	r3, [r0, #0]
 808d974:	6043      	str	r3, [r0, #4]
 808d976:	6083      	str	r3, [r0, #8]
 808d978:	4770      	bx	lr
	...

0808d97c <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 808d97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808d980:	4689      	mov	r9, r1
 808d982:	b085      	sub	sp, #20
 808d984:	4690      	mov	r8, r2
 808d986:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 808d988:	4606      	mov	r6, r0
 808d98a:	2800      	cmp	r0, #0
 808d98c:	d067      	beq.n	808da5e <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 808d98e:	4618      	mov	r0, r3
 808d990:	f002 fe7d 	bl	809068e <strstr>

    if( s1 == NULL )
 808d994:	4604      	mov	r4, r0
 808d996:	2800      	cmp	r0, #0
 808d998:	d063      	beq.n	808da62 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 808d99a:	4641      	mov	r1, r8
 808d99c:	4638      	mov	r0, r7
 808d99e:	f002 fe76 	bl	809068e <strstr>

    if( s2 == NULL || s2 <= s1 )
 808d9a2:	4605      	mov	r5, r0
 808d9a4:	2800      	cmp	r0, #0
 808d9a6:	d05c      	beq.n	808da62 <mbedtls_pem_read_buffer+0xe6>
 808d9a8:	4284      	cmp	r4, r0
 808d9aa:	d25a      	bcs.n	808da62 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808d9ac:	4648      	mov	r0, r9
 808d9ae:	f002 fe66 	bl	809067e <strlen>
    if( *s1 == ' '  ) s1++;
 808d9b2:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808d9b4:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 808d9b6:	2a20      	cmp	r2, #32
 808d9b8:	bf08      	it	eq
 808d9ba:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 808d9bc:	781a      	ldrb	r2, [r3, #0]
 808d9be:	2a0d      	cmp	r2, #13
 808d9c0:	bf08      	it	eq
 808d9c2:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 808d9c4:	781a      	ldrb	r2, [r3, #0]
 808d9c6:	2a0a      	cmp	r2, #10
 808d9c8:	d14b      	bne.n	808da62 <mbedtls_pem_read_buffer+0xe6>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808d9ca:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
 808d9cc:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808d9ce:	f002 fe56 	bl	809067e <strlen>
    if( *end == ' '  ) end++;
 808d9d2:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808d9d4:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 808d9d6:	2a20      	cmp	r2, #32
 808d9d8:	bf08      	it	eq
 808d9da:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 808d9dc:	781a      	ldrb	r2, [r3, #0]
 808d9de:	2a0d      	cmp	r2, #13
 808d9e0:	bf08      	it	eq
 808d9e2:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 808d9e4:	781a      	ldrb	r2, [r3, #0]
 808d9e6:	2a0a      	cmp	r2, #10
 808d9e8:	bf08      	it	eq
 808d9ea:	3301      	addeq	r3, #1
    *use_len = end - data;
 808d9ec:	1bdb      	subs	r3, r3, r7
 808d9ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808d9f0:	1b2f      	subs	r7, r5, r4
 808d9f2:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
 808d9f4:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808d9f6:	dd05      	ble.n	808da04 <mbedtls_pem_read_buffer+0x88>
 808d9f8:	2216      	movs	r2, #22
 808d9fa:	4920      	ldr	r1, [pc, #128]	; (808da7c <mbedtls_pem_read_buffer+0x100>)
 808d9fc:	4620      	mov	r0, r4
 808d9fe:	f002 fde9 	bl	80905d4 <memcmp>
 808da02:	b380      	cbz	r0, 808da66 <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 808da04:	42a5      	cmp	r5, r4
 808da06:	d930      	bls.n	808da6a <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 808da08:	2100      	movs	r1, #0
 808da0a:	9700      	str	r7, [sp, #0]
 808da0c:	4623      	mov	r3, r4
 808da0e:	aa03      	add	r2, sp, #12
 808da10:	4608      	mov	r0, r1
 808da12:	f7f8 fcfb 	bl	808640c <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 808da16:	302c      	adds	r0, #44	; 0x2c
 808da18:	d029      	beq.n	808da6e <mbedtls_pem_read_buffer+0xf2>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 808da1a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 808da1e:	2001      	movs	r0, #1
 808da20:	4641      	mov	r1, r8
 808da22:	f002 fdc1 	bl	80905a8 <calloc>
 808da26:	4605      	mov	r5, r0
 808da28:	b318      	cbz	r0, 808da72 <mbedtls_pem_read_buffer+0xf6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 808da2a:	4623      	mov	r3, r4
 808da2c:	9700      	str	r7, [sp, #0]
 808da2e:	aa03      	add	r2, sp, #12
 808da30:	4641      	mov	r1, r8
 808da32:	f7f8 fceb 	bl	808640c <mbedtls_base64_decode>
 808da36:	9b03      	ldr	r3, [sp, #12]
 808da38:	4604      	mov	r4, r0
 808da3a:	b168      	cbz	r0, 808da58 <mbedtls_pem_read_buffer+0xdc>
    {
        mbedtls_zeroize( buf, len );
 808da3c:	462a      	mov	r2, r5
 808da3e:	442b      	add	r3, r5
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808da40:	2100      	movs	r1, #0
 808da42:	429a      	cmp	r2, r3
 808da44:	d002      	beq.n	808da4c <mbedtls_pem_read_buffer+0xd0>
 808da46:	7011      	strb	r1, [r2, #0]
 808da48:	3201      	adds	r2, #1
 808da4a:	e7fa      	b.n	808da42 <mbedtls_pem_read_buffer+0xc6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
    {
        mbedtls_zeroize( buf, len );
        mbedtls_free( buf );
 808da4c:	4628      	mov	r0, r5
 808da4e:	f001 fc89 	bl	808f364 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808da52:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
 808da56:	e00d      	b.n	808da74 <mbedtls_pem_read_buffer+0xf8>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 808da58:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 808da5a:	6073      	str	r3, [r6, #4]

    return( 0 );
 808da5c:	e00a      	b.n	808da74 <mbedtls_pem_read_buffer+0xf8>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 808da5e:	4808      	ldr	r0, [pc, #32]	; (808da80 <mbedtls_pem_read_buffer+0x104>)
 808da60:	e008      	b.n	808da74 <mbedtls_pem_read_buffer+0xf8>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 808da62:	4808      	ldr	r0, [pc, #32]	; (808da84 <mbedtls_pem_read_buffer+0x108>)
 808da64:	e006      	b.n	808da74 <mbedtls_pem_read_buffer+0xf8>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 808da66:	4808      	ldr	r0, [pc, #32]	; (808da88 <mbedtls_pem_read_buffer+0x10c>)
 808da68:	e004      	b.n	808da74 <mbedtls_pem_read_buffer+0xf8>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 808da6a:	4808      	ldr	r0, [pc, #32]	; (808da8c <mbedtls_pem_read_buffer+0x110>)
 808da6c:	e002      	b.n	808da74 <mbedtls_pem_read_buffer+0xf8>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808da6e:	4808      	ldr	r0, [pc, #32]	; (808da90 <mbedtls_pem_read_buffer+0x114>)
 808da70:	e000      	b.n	808da74 <mbedtls_pem_read_buffer+0xf8>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 808da72:	4808      	ldr	r0, [pc, #32]	; (808da94 <mbedtls_pem_read_buffer+0x118>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 808da74:	b005      	add	sp, #20
 808da76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808da7a:	bf00      	nop
 808da7c:	080929e0 	.word	0x080929e0
 808da80:	ffffeb80 	.word	0xffffeb80
 808da84:	ffffef80 	.word	0xffffef80
 808da88:	ffffec00 	.word	0xffffec00
 808da8c:	ffffef00 	.word	0xffffef00
 808da90:	ffffeed4 	.word	0xffffeed4
 808da94:	ffffee80 	.word	0xffffee80

0808da98 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808da98:	b510      	push	{r4, lr}
    if( ctx->buf != NULL )
 808da9a:	6803      	ldr	r3, [r0, #0]

    return( 0 );
}

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808da9c:	4604      	mov	r4, r0
    if( ctx->buf != NULL )
 808da9e:	b13b      	cbz	r3, 808dab0 <mbedtls_pem_free+0x18>
 808daa0:	6842      	ldr	r2, [r0, #4]
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808daa2:	2100      	movs	r1, #0
 808daa4:	441a      	add	r2, r3
 808daa6:	429a      	cmp	r2, r3
 808daa8:	d002      	beq.n	808dab0 <mbedtls_pem_free+0x18>
 808daaa:	7019      	strb	r1, [r3, #0]
 808daac:	3301      	adds	r3, #1
 808daae:	e7fa      	b.n	808daa6 <mbedtls_pem_free+0xe>

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
    if( ctx->buf != NULL )
        mbedtls_zeroize( ctx->buf, ctx->buflen );
    mbedtls_free( ctx->buf );
 808dab0:	6820      	ldr	r0, [r4, #0]
 808dab2:	f001 fc57 	bl	808f364 <free>
    mbedtls_free( ctx->info );
 808dab6:	68a0      	ldr	r0, [r4, #8]
 808dab8:	f001 fc54 	bl	808f364 <free>
 808dabc:	f104 020c 	add.w	r2, r4, #12
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808dac0:	2300      	movs	r3, #0
 808dac2:	4294      	cmp	r4, r2
 808dac4:	d002      	beq.n	808dacc <mbedtls_pem_free+0x34>
 808dac6:	7023      	strb	r3, [r4, #0]
 808dac8:	3401      	adds	r4, #1
 808daca:	e7fa      	b.n	808dac2 <mbedtls_pem_free+0x2a>
 808dacc:	bd10      	pop	{r4, pc}
	...

0808dad0 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808dad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808dad4:	4606      	mov	r6, r0
 808dad6:	4688      	mov	r8, r1
 808dad8:	b096      	sub	sp, #88	; 0x58
 808dada:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808dadc:	4b79      	ldr	r3, [pc, #484]	; (808dcc4 <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808dade:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 808dae2:	4615      	mov	r5, r2
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808dae4:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 808dae8:	aa08      	add	r2, sp, #32
 808daea:	4614      	mov	r4, r2
 808daec:	6818      	ldr	r0, [r3, #0]
 808daee:	6859      	ldr	r1, [r3, #4]
 808daf0:	3308      	adds	r3, #8
 808daf2:	c403      	stmia	r4!, {r0, r1}
 808daf4:	4573      	cmp	r3, lr
 808daf6:	4622      	mov	r2, r4
 808daf8:	d1f7      	bne.n	808daea <mbedtls_rsa_deduce_primes+0x1a>
 808dafa:	6818      	ldr	r0, [r3, #0]
 808dafc:	889b      	ldrh	r3, [r3, #4]
 808dafe:	6020      	str	r0, [r4, #0]
 808db00:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 808db02:	2f00      	cmp	r7, #0
 808db04:	f000 80b8 	beq.w	808dc78 <mbedtls_rsa_deduce_primes+0x1a8>
 808db08:	f1b9 0f00 	cmp.w	r9, #0
 808db0c:	f000 80b4 	beq.w	808dc78 <mbedtls_rsa_deduce_primes+0x1a8>
 808db10:	68bb      	ldr	r3, [r7, #8]
 808db12:	2b00      	cmp	r3, #0
 808db14:	f040 80b0 	bne.w	808dc78 <mbedtls_rsa_deduce_primes+0x1a8>
 808db18:	f8d9 1008 	ldr.w	r1, [r9, #8]
 808db1c:	2900      	cmp	r1, #0
 808db1e:	f040 80ab 	bne.w	808dc78 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808db22:	4630      	mov	r0, r6
 808db24:	f7fc fc58 	bl	808a3d8 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808db28:	2800      	cmp	r0, #0
 808db2a:	f340 80a5 	ble.w	808dc78 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808db2e:	2101      	movs	r1, #1
 808db30:	4628      	mov	r0, r5
 808db32:	f7fc fc51 	bl	808a3d8 <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808db36:	2800      	cmp	r0, #0
 808db38:	f340 809e 	ble.w	808dc78 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808db3c:	4631      	mov	r1, r6
 808db3e:	4628      	mov	r0, r5
 808db40:	f7fc fc05 	bl	808a34e <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808db44:	2800      	cmp	r0, #0
 808db46:	f280 8097 	bge.w	808dc78 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808db4a:	2101      	movs	r1, #1
 808db4c:	4640      	mov	r0, r8
 808db4e:	f7fc fc43 	bl	808a3d8 <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808db52:	2800      	cmp	r0, #0
 808db54:	f340 8090 	ble.w	808dc78 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808db58:	4631      	mov	r1, r6
 808db5a:	4640      	mov	r0, r8
 808db5c:	f7fc fbf7 	bl	808a34e <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808db60:	2800      	cmp	r0, #0
 808db62:	f280 8089 	bge.w	808dc78 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 808db66:	a805      	add	r0, sp, #20
 808db68:	f7fc f98c 	bl	8089e84 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 808db6c:	a802      	add	r0, sp, #8
 808db6e:	f7fc f989 	bl	8089e84 <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 808db72:	4642      	mov	r2, r8
 808db74:	4629      	mov	r1, r5
 808db76:	a802      	add	r0, sp, #8
 808db78:	f7fc fd4d 	bl	808a616 <mbedtls_mpi_mul_mpi>
 808db7c:	4604      	mov	r4, r0
 808db7e:	2800      	cmp	r0, #0
 808db80:	d172      	bne.n	808dc68 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 808db82:	a902      	add	r1, sp, #8
 808db84:	2201      	movs	r2, #1
 808db86:	4608      	mov	r0, r1
 808db88:	f7fc fd2f 	bl	808a5ea <mbedtls_mpi_sub_int>
 808db8c:	4604      	mov	r4, r0
 808db8e:	2800      	cmp	r0, #0
 808db90:	d16a      	bne.n	808dc68 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 808db92:	a802      	add	r0, sp, #8
 808db94:	f7fc fa16 	bl	8089fc4 <mbedtls_mpi_lsb>
 808db98:	fa1f fa80 	uxth.w	sl, r0
 808db9c:	f1ba 0f00 	cmp.w	sl, #0
 808dba0:	d102      	bne.n	808dba8 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 808dba2:	f06f 0403 	mvn.w	r4, #3
 808dba6:	e05f      	b.n	808dc68 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 808dba8:	4651      	mov	r1, sl
 808dbaa:	a802      	add	r0, sp, #8
 808dbac:	f7fc faf0 	bl	808a190 <mbedtls_mpi_shift_r>
 808dbb0:	4604      	mov	r4, r0
 808dbb2:	2800      	cmp	r0, #0
 808dbb4:	d158      	bne.n	808dc68 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
 808dbb6:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
 808dbb8:	681d      	ldr	r5, [r3, #0]
 808dbba:	f005 0507 	and.w	r5, r5, #7
 808dbbe:	1e6b      	subs	r3, r5, #1
 808dbc0:	425d      	negs	r5, r3
 808dbc2:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 808dbc4:	ab16      	add	r3, sp, #88	; 0x58
 808dbc6:	442b      	add	r3, r5
 808dbc8:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 808dbcc:	a805      	add	r0, sp, #20
 808dbce:	f7fc f9cc 	bl	8089f6a <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808dbd2:	4632      	mov	r2, r6
 808dbd4:	a905      	add	r1, sp, #20
 808dbd6:	4638      	mov	r0, r7
 808dbd8:	f7fd f9aa 	bl	808af30 <mbedtls_mpi_gcd>
 808dbdc:	4604      	mov	r4, r0
 808dbde:	2800      	cmp	r0, #0
 808dbe0:	d142      	bne.n	808dc68 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 808dbe2:	2101      	movs	r1, #1
 808dbe4:	4638      	mov	r0, r7
 808dbe6:	f7fc fbf7 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808dbea:	b120      	cbz	r0, 808dbf6 <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
 808dbec:	3501      	adds	r5, #1
 808dbee:	b2ad      	uxth	r5, r5
 808dbf0:	2d36      	cmp	r5, #54	; 0x36
 808dbf2:	d1e7      	bne.n	808dbc4 <mbedtls_rsa_deduce_primes+0xf4>
 808dbf4:	e7d5      	b.n	808dba2 <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 808dbf6:	a905      	add	r1, sp, #20
 808dbf8:	f8cd 9000 	str.w	r9, [sp]
 808dbfc:	4633      	mov	r3, r6
 808dbfe:	aa02      	add	r2, sp, #8
 808dc00:	4608      	mov	r0, r1
 808dc02:	f7fc ff76 	bl	808aaf2 <mbedtls_mpi_exp_mod>
 808dc06:	4604      	mov	r4, r0
 808dc08:	bb70      	cbnz	r0, 808dc68 <mbedtls_rsa_deduce_primes+0x198>
 808dc0a:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 808dc0e:	2101      	movs	r1, #1
 808dc10:	a805      	add	r0, sp, #20
 808dc12:	f7fc fbe1 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808dc16:	b930      	cbnz	r0, 808dc26 <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 808dc18:	2101      	movs	r1, #1
 808dc1a:	a805      	add	r0, sp, #20
 808dc1c:	f7fc fbdc 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808dc20:	2800      	cmp	r0, #0
 808dc22:	d0e3      	beq.n	808dbec <mbedtls_rsa_deduce_primes+0x11c>
 808dc24:	e7bd      	b.n	808dba2 <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 808dc26:	a905      	add	r1, sp, #20
 808dc28:	2201      	movs	r2, #1
 808dc2a:	4608      	mov	r0, r1
 808dc2c:	f7fc fcc7 	bl	808a5be <mbedtls_mpi_add_int>
 808dc30:	4604      	mov	r4, r0
 808dc32:	b9c8      	cbnz	r0, 808dc68 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808dc34:	4632      	mov	r2, r6
 808dc36:	a905      	add	r1, sp, #20
 808dc38:	4638      	mov	r0, r7
 808dc3a:	f7fd f979 	bl	808af30 <mbedtls_mpi_gcd>
 808dc3e:	4604      	mov	r4, r0
 808dc40:	b990      	cbnz	r0, 808dc68 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808dc42:	2101      	movs	r1, #1
 808dc44:	4638      	mov	r0, r7
 808dc46:	f7fc fbc7 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808dc4a:	2801      	cmp	r0, #1
 808dc4c:	d117      	bne.n	808dc7e <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 808dc4e:	4631      	mov	r1, r6
 808dc50:	4638      	mov	r0, r7
 808dc52:	f7fc fb7c 	bl	808a34e <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808dc56:	3001      	adds	r0, #1
 808dc58:	d111      	bne.n	808dc7e <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 808dc5a:	4621      	mov	r1, r4
 808dc5c:	463b      	mov	r3, r7
 808dc5e:	4632      	mov	r2, r6
 808dc60:	4648      	mov	r0, r9
 808dc62:	f7fc fd54 	bl	808a70e <mbedtls_mpi_div_mpi>
 808dc66:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
 808dc68:	a805      	add	r0, sp, #20
 808dc6a:	f7fc f912 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 808dc6e:	a802      	add	r0, sp, #8
 808dc70:	f7fc f90f 	bl	8089e92 <mbedtls_mpi_free>
    return( ret );
 808dc74:	4620      	mov	r0, r4
 808dc76:	e021      	b.n	808dcbc <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808dc78:	f06f 0003 	mvn.w	r0, #3
 808dc7c:	e01e      	b.n	808dcbc <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808dc7e:	a905      	add	r1, sp, #20
 808dc80:	2201      	movs	r2, #1
 808dc82:	4608      	mov	r0, r1
 808dc84:	f7fc fcb1 	bl	808a5ea <mbedtls_mpi_sub_int>
 808dc88:	4604      	mov	r4, r0
 808dc8a:	2800      	cmp	r0, #0
 808dc8c:	d1ec      	bne.n	808dc68 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 808dc8e:	aa05      	add	r2, sp, #20
 808dc90:	4611      	mov	r1, r2
 808dc92:	4610      	mov	r0, r2
 808dc94:	f7fc fcbf 	bl	808a616 <mbedtls_mpi_mul_mpi>
 808dc98:	4604      	mov	r4, r0
 808dc9a:	2800      	cmp	r0, #0
 808dc9c:	d1e4      	bne.n	808dc68 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 808dc9e:	a905      	add	r1, sp, #20
 808dca0:	4632      	mov	r2, r6
 808dca2:	4608      	mov	r0, r1
 808dca4:	f7fc fef3 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 808dca8:	4604      	mov	r4, r0
 808dcaa:	2800      	cmp	r0, #0
 808dcac:	d1dc      	bne.n	808dc68 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 808dcae:	f108 0801 	add.w	r8, r8, #1
 808dcb2:	fa1f f888 	uxth.w	r8, r8
 808dcb6:	45c2      	cmp	sl, r8
 808dcb8:	d2a9      	bcs.n	808dc0e <mbedtls_rsa_deduce_primes+0x13e>
 808dcba:	e7ad      	b.n	808dc18 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 808dcbc:	b016      	add	sp, #88	; 0x58
 808dcbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808dcc2:	bf00      	nop
 808dcc4:	080929f7 	.word	0x080929f7

0808dcc8 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 808dcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808dccc:	4604      	mov	r4, r0
 808dcce:	b086      	sub	sp, #24
 808dcd0:	460e      	mov	r6, r1
 808dcd2:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 808dcd4:	461d      	mov	r5, r3
 808dcd6:	b18b      	cbz	r3, 808dcfc <mbedtls_rsa_deduce_private_exponent+0x34>
 808dcd8:	2100      	movs	r1, #0
 808dcda:	4618      	mov	r0, r3
 808dcdc:	f7fc fb7c 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808dce0:	4680      	mov	r8, r0
 808dce2:	b958      	cbnz	r0, 808dcfc <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808dce4:	2101      	movs	r1, #1
 808dce6:	4620      	mov	r0, r4
 808dce8:	f7fc fb76 	bl	808a3d8 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808dcec:	2800      	cmp	r0, #0
 808dcee:	dd05      	ble.n	808dcfc <mbedtls_rsa_deduce_private_exponent+0x34>
 808dcf0:	2101      	movs	r1, #1
 808dcf2:	4630      	mov	r0, r6
 808dcf4:	f7fc fb70 	bl	808a3d8 <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808dcf8:	2800      	cmp	r0, #0
 808dcfa:	dc02      	bgt.n	808dd02 <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808dcfc:	f06f 0003 	mvn.w	r0, #3
 808dd00:	e03c      	b.n	808dd7c <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 808dd02:	4641      	mov	r1, r8
 808dd04:	4638      	mov	r0, r7
 808dd06:	f7fc fb67 	bl	808a3d8 <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808dd0a:	2800      	cmp	r0, #0
 808dd0c:	d0f6      	beq.n	808dcfc <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
 808dd0e:	4668      	mov	r0, sp
 808dd10:	f7fc f8b8 	bl	8089e84 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808dd14:	a803      	add	r0, sp, #12
 808dd16:	f7fc f8b5 	bl	8089e84 <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808dd1a:	4621      	mov	r1, r4
 808dd1c:	2201      	movs	r2, #1
 808dd1e:	4668      	mov	r0, sp
 808dd20:	f7fc fc63 	bl	808a5ea <mbedtls_mpi_sub_int>
 808dd24:	4604      	mov	r4, r0
 808dd26:	bb10      	cbnz	r0, 808dd6e <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808dd28:	2201      	movs	r2, #1
 808dd2a:	4631      	mov	r1, r6
 808dd2c:	a803      	add	r0, sp, #12
 808dd2e:	f7fc fc5c 	bl	808a5ea <mbedtls_mpi_sub_int>
 808dd32:	4604      	mov	r4, r0
 808dd34:	b9d8      	cbnz	r0, 808dd6e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 808dd36:	aa03      	add	r2, sp, #12
 808dd38:	4669      	mov	r1, sp
 808dd3a:	4628      	mov	r0, r5
 808dd3c:	f7fd f8f8 	bl	808af30 <mbedtls_mpi_gcd>
 808dd40:	4604      	mov	r4, r0
 808dd42:	b9a0      	cbnz	r0, 808dd6e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 808dd44:	aa03      	add	r2, sp, #12
 808dd46:	4669      	mov	r1, sp
 808dd48:	4668      	mov	r0, sp
 808dd4a:	f7fc fc64 	bl	808a616 <mbedtls_mpi_mul_mpi>
 808dd4e:	4604      	mov	r4, r0
 808dd50:	b968      	cbnz	r0, 808dd6e <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 808dd52:	4601      	mov	r1, r0
 808dd54:	462b      	mov	r3, r5
 808dd56:	466a      	mov	r2, sp
 808dd58:	4668      	mov	r0, sp
 808dd5a:	f7fc fcd8 	bl	808a70e <mbedtls_mpi_div_mpi>
 808dd5e:	4604      	mov	r4, r0
 808dd60:	b928      	cbnz	r0, 808dd6e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 808dd62:	466a      	mov	r2, sp
 808dd64:	4639      	mov	r1, r7
 808dd66:	4628      	mov	r0, r5
 808dd68:	f7fd f98a 	bl	808b080 <mbedtls_mpi_inv_mod>
 808dd6c:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
 808dd6e:	4668      	mov	r0, sp
 808dd70:	f7fc f88f 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808dd74:	a803      	add	r0, sp, #12
 808dd76:	f7fc f88c 	bl	8089e92 <mbedtls_mpi_free>

    return( ret );
 808dd7a:	4620      	mov	r0, r4
}
 808dd7c:	b006      	add	sp, #24
 808dd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808dd84 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808dd84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808dd88:	4699      	mov	r9, r3
 808dd8a:	b087      	sub	sp, #28
 808dd8c:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808dd8e:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808dd90:	460d      	mov	r5, r1
 808dd92:	4690      	mov	r8, r2
 808dd94:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 808dd96:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808dd98:	f7fc f874 	bl	8089e84 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808dd9c:	a803      	add	r0, sp, #12
 808dd9e:	f7fc f871 	bl	8089e84 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 808dda2:	f1b9 0f00 	cmp.w	r9, #0
 808dda6:	d101      	bne.n	808ddac <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 808dda8:	b9f7      	cbnz	r7, 808dde8 <mbedtls_rsa_validate_crt+0x64>
 808ddaa:	e035      	b.n	808de18 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
 808ddac:	2c00      	cmp	r4, #0
 808ddae:	d058      	beq.n	808de62 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808ddb0:	2201      	movs	r2, #1
 808ddb2:	4621      	mov	r1, r4
 808ddb4:	4668      	mov	r0, sp
 808ddb6:	f7fc fc18 	bl	808a5ea <mbedtls_mpi_sub_int>
 808ddba:	2800      	cmp	r0, #0
 808ddbc:	d148      	bne.n	808de50 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 808ddbe:	4642      	mov	r2, r8
 808ddc0:	4649      	mov	r1, r9
 808ddc2:	a803      	add	r0, sp, #12
 808ddc4:	f7fc fbd9 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808ddc8:	2800      	cmp	r0, #0
 808ddca:	d141      	bne.n	808de50 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808ddcc:	a903      	add	r1, sp, #12
 808ddce:	466a      	mov	r2, sp
 808ddd0:	4608      	mov	r0, r1
 808ddd2:	f7fc fe5c 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 808ddd6:	2800      	cmp	r0, #0
 808ddd8:	d13a      	bne.n	808de50 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808ddda:	4601      	mov	r1, r0
 808dddc:	a803      	add	r0, sp, #12
 808ddde:	f7fc fafb 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808dde2:	2800      	cmp	r0, #0
 808dde4:	d13f      	bne.n	808de66 <mbedtls_rsa_validate_crt+0xe2>
 808dde6:	e7df      	b.n	808dda8 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
 808dde8:	b3dd      	cbz	r5, 808de62 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 808ddea:	2201      	movs	r2, #1
 808ddec:	4629      	mov	r1, r5
 808ddee:	4668      	mov	r0, sp
 808ddf0:	f7fc fbfb 	bl	808a5ea <mbedtls_mpi_sub_int>
 808ddf4:	bb60      	cbnz	r0, 808de50 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 808ddf6:	4642      	mov	r2, r8
 808ddf8:	4639      	mov	r1, r7
 808ddfa:	a803      	add	r0, sp, #12
 808ddfc:	f7fc fbbd 	bl	808a57a <mbedtls_mpi_sub_mpi>
 808de00:	bb30      	cbnz	r0, 808de50 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808de02:	a903      	add	r1, sp, #12
 808de04:	466a      	mov	r2, sp
 808de06:	4608      	mov	r0, r1
 808de08:	f7fc fe41 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 808de0c:	bb00      	cbnz	r0, 808de50 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808de0e:	4601      	mov	r1, r0
 808de10:	a803      	add	r0, sp, #12
 808de12:	f7fc fae1 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808de16:	bb30      	cbnz	r0, 808de66 <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 808de18:	b1c6      	cbz	r6, 808de4c <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
 808de1a:	b314      	cbz	r4, 808de62 <mbedtls_rsa_validate_crt+0xde>
 808de1c:	b30d      	cbz	r5, 808de62 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 808de1e:	462a      	mov	r2, r5
 808de20:	4631      	mov	r1, r6
 808de22:	4668      	mov	r0, sp
 808de24:	f7fc fbf7 	bl	808a616 <mbedtls_mpi_mul_mpi>
 808de28:	b990      	cbnz	r0, 808de50 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808de2a:	2201      	movs	r2, #1
 808de2c:	4669      	mov	r1, sp
 808de2e:	4668      	mov	r0, sp
 808de30:	f7fc fbdb 	bl	808a5ea <mbedtls_mpi_sub_int>
 808de34:	b960      	cbnz	r0, 808de50 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 808de36:	4622      	mov	r2, r4
 808de38:	4669      	mov	r1, sp
 808de3a:	4668      	mov	r0, sp
 808de3c:	f7fc fe27 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 808de40:	b930      	cbnz	r0, 808de50 <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808de42:	4601      	mov	r1, r0
 808de44:	4668      	mov	r0, sp
 808de46:	f7fc fac7 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808de4a:	b960      	cbnz	r0, 808de66 <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808de4c:	2400      	movs	r4, #0
 808de4e:	e00b      	b.n	808de68 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 808de50:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 808de54:	d007      	beq.n	808de66 <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 808de56:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 808de5a:	d002      	beq.n	808de62 <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808de5c:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 808de60:	e002      	b.n	808de68 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808de62:	4c06      	ldr	r4, [pc, #24]	; (808de7c <mbedtls_rsa_validate_crt+0xf8>)
 808de64:	e000      	b.n	808de68 <mbedtls_rsa_validate_crt+0xe4>
 808de66:	4c06      	ldr	r4, [pc, #24]	; (808de80 <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 808de68:	4668      	mov	r0, sp
 808de6a:	f7fc f812 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808de6e:	a803      	add	r0, sp, #12
 808de70:	f7fc f80f 	bl	8089e92 <mbedtls_mpi_free>

    return( ret );
}
 808de74:	4620      	mov	r0, r4
 808de76:	b007      	add	sp, #28
 808de78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808de7c:	ffffbf80 	.word	0xffffbf80
 808de80:	ffffbe00 	.word	0xffffbe00

0808de84 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808de84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808de88:	4688      	mov	r8, r1
 808de8a:	b087      	sub	sp, #28
 808de8c:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808de8e:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808de90:	4691      	mov	r9, r2
 808de92:	461e      	mov	r6, r3
 808de94:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808de96:	f7fb fff5 	bl	8089e84 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808de9a:	a803      	add	r0, sp, #12
 808de9c:	f7fb fff2 	bl	8089e84 <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 808dea0:	f1b8 0f00 	cmp.w	r8, #0
 808dea4:	d018      	beq.n	808ded8 <mbedtls_rsa_validate_params+0x54>
 808dea6:	f1b9 0f00 	cmp.w	r9, #0
 808deaa:	d015      	beq.n	808ded8 <mbedtls_rsa_validate_params+0x54>
 808deac:	b90d      	cbnz	r5, 808deb2 <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808deae:	b9de      	cbnz	r6, 808dee8 <mbedtls_rsa_validate_params+0x64>
 808deb0:	e018      	b.n	808dee4 <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 808deb2:	464a      	mov	r2, r9
 808deb4:	4641      	mov	r1, r8
 808deb6:	4668      	mov	r0, sp
 808deb8:	f7fc fbad 	bl	808a616 <mbedtls_mpi_mul_mpi>
 808debc:	4604      	mov	r4, r0
 808debe:	bb68      	cbnz	r0, 808df1c <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808dec0:	2101      	movs	r1, #1
 808dec2:	4628      	mov	r0, r5
 808dec4:	f7fc fa88 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808dec8:	2800      	cmp	r0, #0
 808deca:	dd26      	ble.n	808df1a <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 808decc:	4629      	mov	r1, r5
 808dece:	4668      	mov	r0, sp
 808ded0:	f7fc fa3d 	bl	808a34e <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808ded4:	bb08      	cbnz	r0, 808df1a <mbedtls_rsa_validate_params+0x96>
 808ded6:	e016      	b.n	808df06 <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808ded8:	b125      	cbz	r5, 808dee4 <mbedtls_rsa_validate_params+0x60>
 808deda:	b9b6      	cbnz	r6, 808df0a <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808dedc:	f1b8 0f00 	cmp.w	r8, #0
 808dee0:	f040 808a 	bne.w	808dff8 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808dee4:	2400      	movs	r4, #0
 808dee6:	e019      	b.n	808df1c <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808dee8:	2f00      	cmp	r7, #0
 808deea:	d0fb      	beq.n	808dee4 <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808deec:	2101      	movs	r1, #1
 808deee:	4640      	mov	r0, r8
 808def0:	f7fc fa72 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808def4:	2800      	cmp	r0, #0
 808def6:	dd10      	ble.n	808df1a <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 808def8:	2101      	movs	r1, #1
 808defa:	4648      	mov	r0, r9
 808defc:	f7fc fa6c 	bl	808a3d8 <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808df00:	2800      	cmp	r0, #0
 808df02:	dc19      	bgt.n	808df38 <mbedtls_rsa_validate_params+0xb4>
 808df04:	e009      	b.n	808df1a <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808df06:	2e00      	cmp	r6, #0
 808df08:	d0ec      	beq.n	808dee4 <mbedtls_rsa_validate_params+0x60>
 808df0a:	2f00      	cmp	r7, #0
 808df0c:	d0e6      	beq.n	808dedc <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808df0e:	2101      	movs	r1, #1
 808df10:	4630      	mov	r0, r6
 808df12:	f7fc fa61 	bl	808a3d8 <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808df16:	2800      	cmp	r0, #0
 808df18:	dc5b      	bgt.n	808dfd2 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808df1a:	4c3c      	ldr	r4, [pc, #240]	; (808e00c <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 808df1c:	4668      	mov	r0, sp
 808df1e:	f7fb ffb8 	bl	8089e92 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808df22:	a803      	add	r0, sp, #12
 808df24:	f7fb ffb5 	bl	8089e92 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 808df28:	2c00      	cmp	r4, #0
 808df2a:	d06a      	beq.n	808e002 <mbedtls_rsa_validate_params+0x17e>
 808df2c:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 808df30:	d067      	beq.n	808e002 <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808df32:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
 808df36:	e064      	b.n	808e002 <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808df38:	463a      	mov	r2, r7
 808df3a:	4631      	mov	r1, r6
 808df3c:	4668      	mov	r0, sp
 808df3e:	f7fc fb6a 	bl	808a616 <mbedtls_mpi_mul_mpi>
 808df42:	4604      	mov	r4, r0
 808df44:	2800      	cmp	r0, #0
 808df46:	d1e9      	bne.n	808df1c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808df48:	2201      	movs	r2, #1
 808df4a:	4669      	mov	r1, sp
 808df4c:	4668      	mov	r0, sp
 808df4e:	f7fc fb4c 	bl	808a5ea <mbedtls_mpi_sub_int>
 808df52:	4604      	mov	r4, r0
 808df54:	2800      	cmp	r0, #0
 808df56:	d1e1      	bne.n	808df1c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 808df58:	2201      	movs	r2, #1
 808df5a:	4641      	mov	r1, r8
 808df5c:	a803      	add	r0, sp, #12
 808df5e:	f7fc fb44 	bl	808a5ea <mbedtls_mpi_sub_int>
 808df62:	4604      	mov	r4, r0
 808df64:	2800      	cmp	r0, #0
 808df66:	d1d9      	bne.n	808df1c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808df68:	aa03      	add	r2, sp, #12
 808df6a:	4669      	mov	r1, sp
 808df6c:	4668      	mov	r0, sp
 808df6e:	f7fc fd8e 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 808df72:	4604      	mov	r4, r0
 808df74:	2800      	cmp	r0, #0
 808df76:	d1d1      	bne.n	808df1c <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808df78:	4601      	mov	r1, r0
 808df7a:	4668      	mov	r0, sp
 808df7c:	f7fc fa2c 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808df80:	2800      	cmp	r0, #0
 808df82:	d1ca      	bne.n	808df1a <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808df84:	463a      	mov	r2, r7
 808df86:	4631      	mov	r1, r6
 808df88:	4668      	mov	r0, sp
 808df8a:	f7fc fb44 	bl	808a616 <mbedtls_mpi_mul_mpi>
 808df8e:	4604      	mov	r4, r0
 808df90:	2800      	cmp	r0, #0
 808df92:	d1c3      	bne.n	808df1c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808df94:	2201      	movs	r2, #1
 808df96:	4669      	mov	r1, sp
 808df98:	4668      	mov	r0, sp
 808df9a:	f7fc fb26 	bl	808a5ea <mbedtls_mpi_sub_int>
 808df9e:	4604      	mov	r4, r0
 808dfa0:	2800      	cmp	r0, #0
 808dfa2:	d1bb      	bne.n	808df1c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808dfa4:	2201      	movs	r2, #1
 808dfa6:	4649      	mov	r1, r9
 808dfa8:	a803      	add	r0, sp, #12
 808dfaa:	f7fc fb1e 	bl	808a5ea <mbedtls_mpi_sub_int>
 808dfae:	4604      	mov	r4, r0
 808dfb0:	2800      	cmp	r0, #0
 808dfb2:	d1b3      	bne.n	808df1c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808dfb4:	aa03      	add	r2, sp, #12
 808dfb6:	4669      	mov	r1, sp
 808dfb8:	4668      	mov	r0, sp
 808dfba:	f7fc fd68 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 808dfbe:	4604      	mov	r4, r0
 808dfc0:	2800      	cmp	r0, #0
 808dfc2:	d1ab      	bne.n	808df1c <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808dfc4:	4601      	mov	r1, r0
 808dfc6:	4668      	mov	r0, sp
 808dfc8:	f7fc fa06 	bl	808a3d8 <mbedtls_mpi_cmp_int>
 808dfcc:	2800      	cmp	r0, #0
 808dfce:	d089      	beq.n	808dee4 <mbedtls_rsa_validate_params+0x60>
 808dfd0:	e7a3      	b.n	808df1a <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808dfd2:	2101      	movs	r1, #1
 808dfd4:	4638      	mov	r0, r7
 808dfd6:	f7fc f9ff 	bl	808a3d8 <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808dfda:	2800      	cmp	r0, #0
 808dfdc:	dd9d      	ble.n	808df1a <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808dfde:	4629      	mov	r1, r5
 808dfe0:	4630      	mov	r0, r6
 808dfe2:	f7fc f9b4 	bl	808a34e <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808dfe6:	2800      	cmp	r0, #0
 808dfe8:	da97      	bge.n	808df1a <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808dfea:	4629      	mov	r1, r5
 808dfec:	4638      	mov	r0, r7
 808dfee:	f7fc f9ae 	bl	808a34e <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808dff2:	2800      	cmp	r0, #0
 808dff4:	da91      	bge.n	808df1a <mbedtls_rsa_validate_params+0x96>
 808dff6:	e771      	b.n	808dedc <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808dff8:	f1b9 0f00 	cmp.w	r9, #0
 808dffc:	f47f af57 	bne.w	808deae <mbedtls_rsa_validate_params+0x2a>
 808e000:	e770      	b.n	808dee4 <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
 808e002:	4620      	mov	r0, r4
 808e004:	b007      	add	sp, #28
 808e006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808e00a:	bf00      	nop
 808e00c:	ffffbe00 	.word	0xffffbe00

0808e010 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808e010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 808e014:	469a      	mov	sl, r3
 808e016:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808e018:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808e01a:	460e      	mov	r6, r1
 808e01c:	4691      	mov	r9, r2
 808e01e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 808e022:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808e024:	f7fb ff2e 	bl	8089e84 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 808e028:	f1ba 0f00 	cmp.w	sl, #0
 808e02c:	d103      	bne.n	808e036 <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 808e02e:	f1b8 0f00 	cmp.w	r8, #0
 808e032:	d110      	bne.n	808e056 <mbedtls_rsa_deduce_crt+0x46>
 808e034:	e01d      	b.n	808e072 <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 808e036:	2201      	movs	r2, #1
 808e038:	4639      	mov	r1, r7
 808e03a:	a801      	add	r0, sp, #4
 808e03c:	f7fc fad5 	bl	808a5ea <mbedtls_mpi_sub_int>
 808e040:	4604      	mov	r4, r0
 808e042:	b9f8      	cbnz	r0, 808e084 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 808e044:	aa01      	add	r2, sp, #4
 808e046:	4649      	mov	r1, r9
 808e048:	4650      	mov	r0, sl
 808e04a:	f7fc fd20 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 808e04e:	4604      	mov	r4, r0
 808e050:	2800      	cmp	r0, #0
 808e052:	d0ec      	beq.n	808e02e <mbedtls_rsa_deduce_crt+0x1e>
 808e054:	e016      	b.n	808e084 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 808e056:	2201      	movs	r2, #1
 808e058:	4631      	mov	r1, r6
 808e05a:	a801      	add	r0, sp, #4
 808e05c:	f7fc fac5 	bl	808a5ea <mbedtls_mpi_sub_int>
 808e060:	4604      	mov	r4, r0
 808e062:	b978      	cbnz	r0, 808e084 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 808e064:	aa01      	add	r2, sp, #4
 808e066:	4649      	mov	r1, r9
 808e068:	4640      	mov	r0, r8
 808e06a:	f7fc fd10 	bl	808aa8e <mbedtls_mpi_mod_mpi>
 808e06e:	4604      	mov	r4, r0
 808e070:	b940      	cbnz	r0, 808e084 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 808e072:	b90d      	cbnz	r5, 808e078 <mbedtls_rsa_deduce_crt+0x68>
 808e074:	462c      	mov	r4, r5
 808e076:	e005      	b.n	808e084 <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 808e078:	463a      	mov	r2, r7
 808e07a:	4631      	mov	r1, r6
 808e07c:	4628      	mov	r0, r5
 808e07e:	f7fc ffff 	bl	808b080 <mbedtls_mpi_inv_mod>
 808e082:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
 808e084:	a801      	add	r0, sp, #4
 808e086:	f7fb ff04 	bl	8089e92 <mbedtls_mpi_free>

    return( ret );
}
 808e08a:	4620      	mov	r0, r4
 808e08c:	b004      	add	sp, #16
 808e08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808e092 <_ZL15mbedtls_zeroizePvj>:
#define mbedtls_printf printf
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808e092:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808e094:	2300      	movs	r3, #0
 808e096:	4288      	cmp	r0, r1
 808e098:	d002      	beq.n	808e0a0 <_ZL15mbedtls_zeroizePvj+0xe>
 808e09a:	7003      	strb	r3, [r0, #0]
 808e09c:	3001      	adds	r0, #1
 808e09e:	e7fa      	b.n	808e096 <_ZL15mbedtls_zeroizePvj+0x4>
 808e0a0:	4770      	bx	lr

0808e0a2 <_ZL15block_cipher_dfPhPKhj>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 808e0a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = 0;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 808e0a6:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 808e0aa:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 808e0ae:	4607      	mov	r7, r0
 808e0b0:	460e      	mov	r6, r1
 808e0b2:	4615      	mov	r5, r2
    int ret = 0;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 808e0b4:	f200 80a2 	bhi.w	808e1fc <_ZL15block_cipher_dfPhPKhj+0x15a>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 808e0b8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 808e0bc:	2100      	movs	r1, #0
 808e0be:	a85e      	add	r0, sp, #376	; 0x178
 808e0c0:	f002 fabd 	bl	809063e <memset>
    mbedtls_aes_init( &aes_ctx );
 808e0c4:	a818      	add	r0, sp, #96	; 0x60
 808e0c6:	f7fd fb5d 	bl	808b784 <mbedtls_aes_init>
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
 808e0ca:	0a2b      	lsrs	r3, r5, #8
 808e0cc:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 808e0d0:	2330      	movs	r3, #48	; 0x30
 808e0d2:	f88d 318f 	strb.w	r3, [sp, #399]	; 0x18f
    memcpy( p, data, data_len );
 808e0d6:	ab64      	add	r3, sp, #400	; 0x190
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
 808e0d8:	2400      	movs	r4, #0
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
 808e0da:	462a      	mov	r2, r5
 808e0dc:	4618      	mov	r0, r3
 808e0de:	4631      	mov	r1, r6
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
 808e0e0:	f88d 4188 	strb.w	r4, [sp, #392]	; 0x188
    *p++ = ( data_len >> 16 ) & 0xff;
 808e0e4:	f88d 4189 	strb.w	r4, [sp, #393]	; 0x189
    *p++ = ( data_len >> 8  ) & 0xff;
    *p++ = ( data_len       ) & 0xff;
 808e0e8:	f88d 518b 	strb.w	r5, [sp, #395]	; 0x18b
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
 808e0ec:	f002 fa81 	bl	80905f2 <memcpy>
    p[data_len] = 0x80;

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 808e0f0:	4623      	mov	r3, r4
    *p++ = ( data_len >> 8  ) & 0xff;
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
    p[data_len] = 0x80;
 808e0f2:	2280      	movs	r2, #128	; 0x80
 808e0f4:	5542      	strb	r2, [r0, r5]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
        key[i] = i;
 808e0f6:	f10d 0810 	add.w	r8, sp, #16
 808e0fa:	f803 3008 	strb.w	r3, [r3, r8]
    memcpy( p, data, data_len );
    p[data_len] = 0x80;

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 808e0fe:	3301      	adds	r3, #1
 808e100:	2b20      	cmp	r3, #32
 808e102:	d1fa      	bne.n	808e0fa <_ZL15block_cipher_dfPhPKhj+0x58>
        key[i] = i;

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808e104:	f44f 7280 	mov.w	r2, #256	; 0x100
 808e108:	4641      	mov	r1, r8
 808e10a:	a818      	add	r0, sp, #96	; 0x60
 808e10c:	f7fd fb4a 	bl	808b7a4 <mbedtls_aes_setkey_enc>
 808e110:	4604      	mov	r4, r0
 808e112:	2800      	cmp	r0, #0
 808e114:	d157      	bne.n	808e1c6 <_ZL15block_cipher_dfPhPKhj+0x124>
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
    p[data_len] = 0x80;

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 808e116:	4606      	mov	r6, r0
 808e118:	3519      	adds	r5, #25
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808e11a:	2210      	movs	r2, #16
 808e11c:	2100      	movs	r1, #0
 808e11e:	4668      	mov	r0, sp
 808e120:	f002 fa8d 	bl	809063e <memset>
        use_len = buf_len;
 808e124:	46a9      	mov	r9, r5
 808e126:	f20d 1a77 	addw	sl, sp, #375	; 0x177
 808e12a:	f10d 33ff 	add.w	r3, sp, #4294967295
 808e12e:	f10a 0110 	add.w	r1, sl, #16

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
 808e132:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 808e136:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 808e13a:	4042      	eors	r2, r0
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        use_len = buf_len;

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 808e13c:	458a      	cmp	sl, r1
                chain[i] ^= p[i];
 808e13e:	701a      	strb	r2, [r3, #0]
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        use_len = buf_len;

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 808e140:	d1f7      	bne.n	808e132 <_ZL15block_cipher_dfPhPKhj+0x90>
                chain[i] ^= p[i];
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 808e142:	f1b9 0f10 	cmp.w	r9, #16

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 808e146:	466b      	mov	r3, sp
 808e148:	466a      	mov	r2, sp
 808e14a:	f04f 0101 	mov.w	r1, #1
 808e14e:	a818      	add	r0, sp, #96	; 0x60
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 808e150:	bf94      	ite	ls
 808e152:	ebc9 0909 	rsbls	r9, r9, r9
 808e156:	f1a9 0910 	subhi.w	r9, r9, #16

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 808e15a:	f7fe f829 	bl	808c1b0 <mbedtls_aes_crypt_ecb>
 808e15e:	4604      	mov	r4, r0
 808e160:	bb88      	cbnz	r0, 808e1c6 <_ZL15block_cipher_dfPhPKhj+0x124>
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        use_len = buf_len;

        while( use_len > 0 )
 808e162:	f1b9 0f00 	cmp.w	r9, #0
 808e166:	d1e0      	bne.n	808e12a <_ZL15block_cipher_dfPhPKhj+0x88>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808e168:	466c      	mov	r4, sp
 808e16a:	ab0c      	add	r3, sp, #48	; 0x30
 808e16c:	18f2      	adds	r2, r6, r3
 808e16e:	4623      	mov	r3, r4
 808e170:	cb03      	ldmia	r3!, {r0, r1}
 808e172:	4543      	cmp	r3, r8
 808e174:	6010      	str	r0, [r2, #0]
 808e176:	6051      	str	r1, [r2, #4]
 808e178:	461c      	mov	r4, r3
 808e17a:	f102 0208 	add.w	r2, r2, #8
 808e17e:	d1f6      	bne.n	808e16e <_ZL15block_cipher_dfPhPKhj+0xcc>

        /*
         * Update IV
         */
        buf[3]++;
 808e180:	f89d 317b 	ldrb.w	r3, [sp, #379]	; 0x17b
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808e184:	3610      	adds	r6, #16
        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );

        /*
         * Update IV
         */
        buf[3]++;
 808e186:	3301      	adds	r3, #1
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808e188:	2e30      	cmp	r6, #48	; 0x30
        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );

        /*
         * Update IV
         */
        buf[3]++;
 808e18a:	f88d 317b 	strb.w	r3, [sp, #379]	; 0x17b
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808e18e:	d1c4      	bne.n	808e11a <_ZL15block_cipher_dfPhPKhj+0x78>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808e190:	f44f 7280 	mov.w	r2, #256	; 0x100
 808e194:	a90c      	add	r1, sp, #48	; 0x30
 808e196:	a818      	add	r0, sp, #96	; 0x60
 808e198:	f7fd fb04 	bl	808b7a4 <mbedtls_aes_setkey_enc>
 808e19c:	4604      	mov	r4, r0
 808e19e:	b990      	cbnz	r0, 808e1c6 <_ZL15block_cipher_dfPhPKhj+0x124>
 808e1a0:	463d      	mov	r5, r7
 808e1a2:	f107 0930 	add.w	r9, r7, #48	; 0x30
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )
 808e1a6:	ae14      	add	r6, sp, #80	; 0x50
 808e1a8:	4633      	mov	r3, r6
 808e1aa:	4632      	mov	r2, r6
 808e1ac:	2101      	movs	r1, #1
 808e1ae:	a818      	add	r0, sp, #96	; 0x60
 808e1b0:	f7fd fffe 	bl	808c1b0 <mbedtls_aes_crypt_ecb>
 808e1b4:	4604      	mov	r4, r0
 808e1b6:	b930      	cbnz	r0, 808e1c6 <_ZL15block_cipher_dfPhPKhj+0x124>
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808e1b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 808e1bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 808e1c0:	3510      	adds	r5, #16
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808e1c2:	45a9      	cmp	r9, r5
 808e1c4:	d1f0      	bne.n	808e1a8 <_ZL15block_cipher_dfPhPKhj+0x106>
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }
exit:
    mbedtls_aes_free( &aes_ctx );
 808e1c6:	a818      	add	r0, sp, #96	; 0x60
 808e1c8:	f7fd fae1 	bl	808b78e <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_zeroize( buf, sizeof( buf ) );
 808e1cc:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 808e1d0:	a85e      	add	r0, sp, #376	; 0x178
 808e1d2:	f7ff ff5e 	bl	808e092 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 808e1d6:	2130      	movs	r1, #48	; 0x30
 808e1d8:	eb0d 0001 	add.w	r0, sp, r1
 808e1dc:	f7ff ff59 	bl	808e092 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( key, sizeof( key ) );
 808e1e0:	2120      	movs	r1, #32
 808e1e2:	4640      	mov	r0, r8
 808e1e4:	f7ff ff55 	bl	808e092 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( chain, sizeof( chain ) );
 808e1e8:	2110      	movs	r1, #16
 808e1ea:	4668      	mov	r0, sp
 808e1ec:	f7ff ff51 	bl	808e092 <_ZL15mbedtls_zeroizePvj>
    if( 0 != ret )
 808e1f0:	b13c      	cbz	r4, 808e202 <_ZL15block_cipher_dfPhPKhj+0x160>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 808e1f2:	2130      	movs	r1, #48	; 0x30
 808e1f4:	4638      	mov	r0, r7
 808e1f6:	f7ff ff4c 	bl	808e092 <_ZL15mbedtls_zeroizePvj>
 808e1fa:	e002      	b.n	808e202 <_ZL15block_cipher_dfPhPKhj+0x160>

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 808e1fc:	f06f 0037 	mvn.w	r0, #55	; 0x37
 808e200:	e000      	b.n	808e204 <_ZL15block_cipher_dfPhPKhj+0x162>
 808e202:	4620      	mov	r0, r4
        */
        mbedtls_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
    }

    return( ret );
}
 808e204:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
 808e208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808e20c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>:

static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 808e20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808e20e:	b08d      	sub	sp, #52	; 0x34
 808e210:	4604      	mov	r4, r0
 808e212:	460d      	mov	r5, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;
    int ret = 0;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 808e214:	2230      	movs	r2, #48	; 0x30
 808e216:	2100      	movs	r1, #0
 808e218:	4668      	mov	r0, sp
 808e21a:	f002 fa10 	bl	809063e <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808e21e:	2700      	movs	r7, #0
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 808e220:	f104 0620 	add.w	r6, r4, #32
 808e224:	eb0d 0307 	add.w	r3, sp, r7
 808e228:	f104 0110 	add.w	r1, r4, #16
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
            if( ++ctx->counter[i - 1] != 0 )
 808e22c:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 808e230:	3201      	adds	r2, #1
 808e232:	b2d2      	uxtb	r2, r2
 808e234:	700a      	strb	r2, [r1, #0]
 808e236:	b90a      	cbnz	r2, 808e23c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x30>
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 808e238:	42a1      	cmp	r1, r4
 808e23a:	d1f7      	bne.n	808e22c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x20>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 808e23c:	4622      	mov	r2, r4
 808e23e:	2101      	movs	r1, #1
 808e240:	4630      	mov	r0, r6
 808e242:	f7fd ffb5 	bl	808c1b0 <mbedtls_aes_crypt_ecb>
 808e246:	bb08      	cbnz	r0, 808e28c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x80>
    int i, j;
    int ret = 0;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808e248:	3710      	adds	r7, #16
 808e24a:	2f30      	cmp	r7, #48	; 0x30
 808e24c:	d1ea      	bne.n	808e224 <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x18>
 808e24e:	1e6b      	subs	r3, r5, #1
 808e250:	f10d 32ff 	add.w	r2, sp, #4294967295
 808e254:	352f      	adds	r5, #47	; 0x2f

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 808e256:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 808e25a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 808e25e:	4041      	eors	r1, r0
        }

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 808e260:	42ab      	cmp	r3, r5
        tmp[i] ^= data[i];
 808e262:	7011      	strb	r1, [r2, #0]
        }

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 808e264:	d1f7      	bne.n	808e256 <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x4a>
        tmp[i] ^= data[i];

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808e266:	f44f 7280 	mov.w	r2, #256	; 0x100
 808e26a:	4669      	mov	r1, sp
 808e26c:	4630      	mov	r0, r6
 808e26e:	f7fd fa99 	bl	808b7a4 <mbedtls_aes_setkey_enc>
 808e272:	b958      	cbnz	r0, 808e28c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x80>
    {
        return( ret );
    }
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808e274:	aa08      	add	r2, sp, #32
 808e276:	ad0c      	add	r5, sp, #48	; 0x30
 808e278:	4613      	mov	r3, r2
 808e27a:	cb03      	ldmia	r3!, {r0, r1}
 808e27c:	42ab      	cmp	r3, r5
 808e27e:	6020      	str	r0, [r4, #0]
 808e280:	6061      	str	r1, [r4, #4]
 808e282:	461a      	mov	r2, r3
 808e284:	f104 0408 	add.w	r4, r4, #8
 808e288:	d1f6      	bne.n	808e278 <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x6c>

    return( 0 );
 808e28a:	2000      	movs	r0, #0
}
 808e28c:	b00d      	add	sp, #52	; 0x34
 808e28e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808e290 <mbedtls_ctr_drbg_init>:
/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 808e290:	f44f 72a0 	mov.w	r2, #320	; 0x140
 808e294:	2100      	movs	r1, #0
 808e296:	f002 b9d2 	b.w	809063e <memset>

0808e29a <mbedtls_ctr_drbg_reseed>:
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 808e29a:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 808e29c:	6985      	ldr	r5, [r0, #24]
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 808e29e:	b0e1      	sub	sp, #388	; 0x184
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 808e2a0:	f5b5 7fc0 	cmp.w	r5, #384	; 0x180
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 808e2a4:	4604      	mov	r4, r0
 808e2a6:	460f      	mov	r7, r1
 808e2a8:	4616      	mov	r6, r2
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 808e2aa:	d829      	bhi.n	808e300 <mbedtls_ctr_drbg_reseed+0x66>
 808e2ac:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
 808e2b0:	4293      	cmp	r3, r2
 808e2b2:	d325      	bcc.n	808e300 <mbedtls_ctr_drbg_reseed+0x66>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 808e2b4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 808e2b8:	2100      	movs	r1, #0
 808e2ba:	4668      	mov	r0, sp
 808e2bc:	f002 f9bf 	bl	809063e <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 808e2c0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 808e2c4:	462a      	mov	r2, r5
 808e2c6:	4669      	mov	r1, sp
 808e2c8:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 808e2cc:	4798      	blx	r3
 808e2ce:	b9d0      	cbnz	r0, 808e306 <mbedtls_ctr_drbg_reseed+0x6c>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }

    seedlen += ctx->entropy_len;
 808e2d0:	69a5      	ldr	r5, [r4, #24]

    /*
     * Add additional data
     */
    if( additional && len )
 808e2d2:	b13f      	cbz	r7, 808e2e4 <mbedtls_ctr_drbg_reseed+0x4a>
 808e2d4:	b136      	cbz	r6, 808e2e4 <mbedtls_ctr_drbg_reseed+0x4a>
    {
        memcpy( seed + seedlen, additional, len );
 808e2d6:	eb0d 0005 	add.w	r0, sp, r5
 808e2da:	4632      	mov	r2, r6
 808e2dc:	4639      	mov	r1, r7
 808e2de:	f002 f988 	bl	80905f2 <memcpy>
        seedlen += len;
 808e2e2:	4435      	add	r5, r6
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 808e2e4:	462a      	mov	r2, r5
 808e2e6:	4669      	mov	r1, sp
 808e2e8:	4668      	mov	r0, sp
 808e2ea:	f7ff feda 	bl	808e0a2 <_ZL15block_cipher_dfPhPKhj>
 808e2ee:	b960      	cbnz	r0, 808e30a <mbedtls_ctr_drbg_reseed+0x70>
    }

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 808e2f0:	4669      	mov	r1, sp
 808e2f2:	4620      	mov	r0, r4
 808e2f4:	f7ff ff8a 	bl	808e20c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>
 808e2f8:	b938      	cbnz	r0, 808e30a <mbedtls_ctr_drbg_reseed+0x70>
    {
        return( ret );
    }
    ctx->reseed_counter = 1;
 808e2fa:	2301      	movs	r3, #1
 808e2fc:	6123      	str	r3, [r4, #16]

    return( 0 );
 808e2fe:	e004      	b.n	808e30a <mbedtls_ctr_drbg_reseed+0x70>
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 808e300:	f06f 0037 	mvn.w	r0, #55	; 0x37
 808e304:	e001      	b.n	808e30a <mbedtls_ctr_drbg_reseed+0x70>
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 808e306:	f06f 0033 	mvn.w	r0, #51	; 0x33
        return( ret );
    }
    ctx->reseed_counter = 1;

    return( 0 );
}
 808e30a:	b061      	add	sp, #388	; 0x184
 808e30c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808e30e <mbedtls_ctr_drbg_seed_entropy_len>:
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 808e30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e312:	4604      	mov	r4, r0
 808e314:	b088      	sub	sp, #32
 808e316:	4688      	mov	r8, r1
 808e318:	4617      	mov	r7, r2
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 808e31a:	2100      	movs	r1, #0
 808e31c:	2220      	movs	r2, #32

    mbedtls_aes_init( &ctx->aes_ctx );
 808e31e:	f104 0520 	add.w	r5, r4, #32
                   size_t entropy_len )
{
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 808e322:	4668      	mov	r0, sp
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 808e324:	461e      	mov	r6, r3
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 808e326:	f002 f98a 	bl	809063e <memset>

    mbedtls_aes_init( &ctx->aes_ctx );
 808e32a:	4628      	mov	r0, r5
 808e32c:	f7fd fa2a 	bl	808b784 <mbedtls_aes_init>

    ctx->f_entropy = f_entropy;
    ctx->p_entropy = p_entropy;

    ctx->entropy_len = entropy_len;
 808e330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );

    mbedtls_aes_init( &ctx->aes_ctx );

    ctx->f_entropy = f_entropy;
 808e332:	f8c4 8138 	str.w	r8, [r4, #312]	; 0x138
    ctx->p_entropy = p_entropy;

    ctx->entropy_len = entropy_len;
 808e336:	61a3      	str	r3, [r4, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 808e338:	f242 7310 	movw	r3, #10000	; 0x2710
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );

    mbedtls_aes_init( &ctx->aes_ctx );

    ctx->f_entropy = f_entropy;
    ctx->p_entropy = p_entropy;
 808e33c:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c

    ctx->entropy_len = entropy_len;
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 808e340:	61e3      	str	r3, [r4, #28]

    /*
     * Initialize with an empty key
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808e342:	f44f 7280 	mov.w	r2, #256	; 0x100
 808e346:	4669      	mov	r1, sp
 808e348:	4628      	mov	r0, r5
 808e34a:	f7fd fa2b 	bl	808b7a4 <mbedtls_aes_setkey_enc>
 808e34e:	b920      	cbnz	r0, 808e35a <mbedtls_ctr_drbg_seed_entropy_len+0x4c>
    {
        return( ret );
    }

    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 808e350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 808e352:	4631      	mov	r1, r6
 808e354:	4620      	mov	r0, r4
 808e356:	f7ff ffa0 	bl	808e29a <mbedtls_ctr_drbg_reseed>
    {
        return( ret );
    }
    return( 0 );
}
 808e35a:	b008      	add	sp, #32
 808e35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808e360 <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len )
{
 808e360:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
 808e362:	2430      	movs	r4, #48	; 0x30
 808e364:	9401      	str	r4, [sp, #4]
 808e366:	9c04      	ldr	r4, [sp, #16]
 808e368:	9400      	str	r4, [sp, #0]
 808e36a:	f7ff ffd0 	bl	808e30e <mbedtls_ctr_drbg_seed_entropy_len>
}
 808e36e:	b002      	add	sp, #8
 808e370:	bd10      	pop	{r4, pc}

0808e372 <mbedtls_ctr_drbg_random_with_add>:
}

int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 808e372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 808e376:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
}

int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 808e37a:	b090      	sub	sp, #64	; 0x40
 808e37c:	4604      	mov	r4, r0
 808e37e:	460e      	mov	r6, r1
 808e380:	4615      	mov	r5, r2
 808e382:	4698      	mov	r8, r3
 808e384:	9f16      	ldr	r7, [sp, #88]	; 0x58
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 808e386:	d84e      	bhi.n	808e426 <mbedtls_ctr_drbg_random_with_add+0xb4>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 808e388:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 808e38c:	d84e      	bhi.n	808e42c <mbedtls_ctr_drbg_random_with_add+0xba>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 808e38e:	2230      	movs	r2, #48	; 0x30
 808e390:	2100      	movs	r1, #0
 808e392:	a804      	add	r0, sp, #16
 808e394:	f002 f953 	bl	809063e <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 808e398:	6922      	ldr	r2, [r4, #16]
 808e39a:	69e3      	ldr	r3, [r4, #28]
 808e39c:	429a      	cmp	r2, r3
 808e39e:	dc01      	bgt.n	808e3a4 <mbedtls_ctr_drbg_random_with_add+0x32>
 808e3a0:	6963      	ldr	r3, [r4, #20]
 808e3a2:	b14b      	cbz	r3, 808e3b8 <mbedtls_ctr_drbg_random_with_add+0x46>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 808e3a4:	463a      	mov	r2, r7
 808e3a6:	4641      	mov	r1, r8
 808e3a8:	4620      	mov	r0, r4
 808e3aa:	f7ff ff76 	bl	808e29a <mbedtls_ctr_drbg_reseed>
 808e3ae:	2800      	cmp	r0, #0
 808e3b0:	d13e      	bne.n	808e430 <mbedtls_ctr_drbg_random_with_add+0xbe>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 808e3b2:	f104 0720 	add.w	r7, r4, #32
 808e3b6:	e028      	b.n	808e40a <mbedtls_ctr_drbg_random_with_add+0x98>
            return( ret );
        }
        add_len = 0;
    }

    if( add_len > 0 )
 808e3b8:	2f00      	cmp	r7, #0
 808e3ba:	d0fa      	beq.n	808e3b2 <mbedtls_ctr_drbg_random_with_add+0x40>
    {
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 808e3bc:	463a      	mov	r2, r7
 808e3be:	4641      	mov	r1, r8
 808e3c0:	a804      	add	r0, sp, #16
 808e3c2:	f7ff fe6e 	bl	808e0a2 <_ZL15block_cipher_dfPhPKhj>
 808e3c6:	bb98      	cbnz	r0, 808e430 <mbedtls_ctr_drbg_random_with_add+0xbe>
        {
            return( ret );
        }
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 808e3c8:	a904      	add	r1, sp, #16
 808e3ca:	4620      	mov	r0, r4
 808e3cc:	f7ff ff1e 	bl	808e20c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>
 808e3d0:	e7ed      	b.n	808e3ae <mbedtls_ctr_drbg_random_with_add+0x3c>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
            if( ++ctx->counter[i - 1] != 0 )
 808e3d2:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 808e3d6:	3301      	adds	r3, #1
 808e3d8:	b2db      	uxtb	r3, r3
 808e3da:	7013      	strb	r3, [r2, #0]
 808e3dc:	b90b      	cbnz	r3, 808e3e2 <mbedtls_ctr_drbg_random_with_add+0x70>
    while( output_len > 0 )
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 808e3de:	42a2      	cmp	r2, r4
 808e3e0:	d1f7      	bne.n	808e3d2 <mbedtls_ctr_drbg_random_with_add+0x60>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 808e3e2:	466b      	mov	r3, sp
 808e3e4:	4622      	mov	r2, r4
 808e3e6:	2101      	movs	r1, #1
 808e3e8:	4638      	mov	r0, r7
 808e3ea:	f7fd fee1 	bl	808c1b0 <mbedtls_aes_crypt_ecb>
 808e3ee:	b9f8      	cbnz	r0, 808e430 <mbedtls_ctr_drbg_random_with_add+0xbe>
        {
            return( ret );
        }

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
                                                       output_len;
 808e3f0:	46a8      	mov	r8, r5
 808e3f2:	2d10      	cmp	r5, #16
 808e3f4:	bf28      	it	cs
 808e3f6:	f04f 0810 	movcs.w	r8, #16
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 808e3fa:	4630      	mov	r0, r6
 808e3fc:	4642      	mov	r2, r8
 808e3fe:	4669      	mov	r1, sp
 808e400:	f002 f8f7 	bl	80905f2 <memcpy>
        p += use_len;
 808e404:	4446      	add	r6, r8
        output_len -= use_len;
 808e406:	ebc8 0505 	rsb	r5, r8, r5
        {
            return( ret );
        }
    }

    while( output_len > 0 )
 808e40a:	b115      	cbz	r5, 808e412 <mbedtls_ctr_drbg_random_with_add+0xa0>
 808e40c:	f104 0210 	add.w	r2, r4, #16
 808e410:	e7df      	b.n	808e3d2 <mbedtls_ctr_drbg_random_with_add+0x60>
        memcpy( p, tmp, use_len );
        p += use_len;
        output_len -= use_len;
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 808e412:	a904      	add	r1, sp, #16
 808e414:	4620      	mov	r0, r4
 808e416:	f7ff fef9 	bl	808e20c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>
 808e41a:	b948      	cbnz	r0, 808e430 <mbedtls_ctr_drbg_random_with_add+0xbe>
    {
        return( ret );
    }

    ctx->reseed_counter++;
 808e41c:	6923      	ldr	r3, [r4, #16]

    return( 0 );
 808e41e:	4628      	mov	r0, r5
    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
    {
        return( ret );
    }

    ctx->reseed_counter++;
 808e420:	3301      	adds	r3, #1
 808e422:	6123      	str	r3, [r4, #16]

    return( 0 );
 808e424:	e004      	b.n	808e430 <mbedtls_ctr_drbg_random_with_add+0xbe>
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 808e426:	f06f 0035 	mvn.w	r0, #53	; 0x35
 808e42a:	e001      	b.n	808e430 <mbedtls_ctr_drbg_random_with_add+0xbe>

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 808e42c:	f06f 0037 	mvn.w	r0, #55	; 0x37
    }

    ctx->reseed_counter++;

    return( 0 );
}
 808e430:	b010      	add	sp, #64	; 0x40
 808e432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808e436 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 808e436:	b507      	push	{r0, r1, r2, lr}
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 808e438:	2300      	movs	r3, #0
 808e43a:	9300      	str	r3, [sp, #0]
 808e43c:	f7ff ff99 	bl	808e372 <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 808e440:	b003      	add	sp, #12
 808e442:	f85d fb04 	ldr.w	pc, [sp], #4

0808e446 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808e446:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808e448:	b10b      	cbz	r3, 808e44e <mbedtls_ssl_own_key+0x8>
 808e44a:	685b      	ldr	r3, [r3, #4]
 808e44c:	b913      	cbnz	r3, 808e454 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808e44e:	6803      	ldr	r3, [r0, #0]
 808e450:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->key );
 808e452:	b10b      	cbz	r3, 808e458 <mbedtls_ssl_own_key+0x12>
 808e454:	6858      	ldr	r0, [r3, #4]
 808e456:	4770      	bx	lr
 808e458:	4618      	mov	r0, r3
}
 808e45a:	4770      	bx	lr

0808e45c <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808e45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808e460:	6843      	ldr	r3, [r0, #4]

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808e462:	b095      	sub	sp, #84	; 0x54
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808e464:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808e466:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808e468:	f000 80c1 	beq.w	808e5ee <mbedtls_ssl_handshake_client_step+0x192>
 808e46c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808e46e:	2b00      	cmp	r3, #0
 808e470:	f000 80bd 	beq.w	808e5ee <mbedtls_ssl_handshake_client_step+0x192>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808e474:	f7fa f8e6 	bl	8088644 <mbedtls_ssl_flush_output>
 808e478:	2800      	cmp	r0, #0
 808e47a:	f040 8514 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808e47e:	6863      	ldr	r3, [r4, #4]
 808e480:	2b0c      	cmp	r3, #12
 808e482:	d105      	bne.n	808e490 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
 808e484:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808e486:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 808e48a:	b10b      	cbz	r3, 808e490 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 808e48c:	2311      	movs	r3, #17
 808e48e:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 808e490:	6860      	ldr	r0, [r4, #4]
 808e492:	2811      	cmp	r0, #17
 808e494:	f200 80ab 	bhi.w	808e5ee <mbedtls_ssl_handshake_client_step+0x192>
 808e498:	e8df f010 	tbh	[pc, r0, lsl #1]
 808e49c:	00140012 	.word	0x00140012
 808e4a0:	00dc004b 	.word	0x00dc004b
 808e4a4:	010500e1 	.word	0x010500e1
 808e4a8:	012b0117 	.word	0x012b0117
 808e4ac:	0190012f 	.word	0x0190012f
 808e4b0:	020201fe 	.word	0x020201fe
 808e4b4:	02290225 	.word	0x02290225
 808e4b8:	022f022d 	.word	0x022f022d
 808e4bc:	020c00a9 	.word	0x020c00a9
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 808e4c0:	2301      	movs	r3, #1
 808e4c2:	e0ed      	b.n	808e6a0 <mbedtls_ssl_handshake_client_step+0x244>
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
 808e4c4:	6821      	ldr	r1, [r4, #0]
 808e4c6:	698b      	ldr	r3, [r1, #24]
 808e4c8:	2b00      	cmp	r3, #0
 808e4ca:	f000 821a 	beq.w	808e902 <mbedtls_ssl_handshake_client_step+0x4a6>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 808e4ce:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
 808e4d2:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 808e4d4:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
 808e4d8:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 808e4da:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 808e4de:	2800      	cmp	r0, #0
 808e4e0:	f000 8085 	beq.w	808e5ee <mbedtls_ssl_handshake_client_step+0x192>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808e4e4:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 808e4e8:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808e4ec:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808e4f0:	1d33      	adds	r3, r6, #4
 808e4f2:	f891 105d 	ldrb.w	r1, [r1, #93]	; 0x5d
 808e4f6:	f7fb fac7 	bl	8089a88 <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808e4fa:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 808e4fc:	6b25      	ldr	r5, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808e4fe:	699f      	ldr	r7, [r3, #24]
 808e500:	2204      	movs	r2, #4
 808e502:	f505 71ba 	add.w	r1, r5, #372	; 0x174
 808e506:	69d8      	ldr	r0, [r3, #28]
 808e508:	47b8      	blx	r7
 808e50a:	2800      	cmp	r0, #0
 808e50c:	f040 84cb 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 808e510:	6823      	ldr	r3, [r4, #0]
 808e512:	221c      	movs	r2, #28
 808e514:	699f      	ldr	r7, [r3, #24]
 808e516:	f505 71bc 	add.w	r1, r5, #376	; 0x178
 808e51a:	69d8      	ldr	r0, [r3, #28]
 808e51c:	47b8      	blx	r7
 808e51e:	2800      	cmp	r0, #0
 808e520:	f040 84c1 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 808e524:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808e526:	1db1      	adds	r1, r6, #6
 808e528:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 808e52c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808e530:	e1eb      	b.n	808e90a <mbedtls_ssl_handshake_client_step+0x4ae>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808e532:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
 808e534:	6e65      	ldr	r5, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808e536:	f7fa fcbf 	bl	8088eb8 <mbedtls_ssl_read_record>
 808e53a:	2800      	cmp	r0, #0
 808e53c:	f040 84b3 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808e540:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808e542:	2b16      	cmp	r3, #22
 808e544:	d006      	beq.n	808e554 <mbedtls_ssl_handshake_client_step+0xf8>
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808e546:	220a      	movs	r2, #10
 808e548:	2102      	movs	r1, #2
 808e54a:	4620      	mov	r0, r4
 808e54c:	f7fa fa66 	bl	8088a1c <mbedtls_ssl_send_alert_message>
 808e550:	f000 bc5b 	b.w	808ee0a <mbedtls_ssl_handshake_client_step+0x9ae>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 808e554:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808e556:	2b29      	cmp	r3, #41	; 0x29
 808e558:	d938      	bls.n	808e5cc <mbedtls_ssl_handshake_client_step+0x170>
 808e55a:	782b      	ldrb	r3, [r5, #0]
 808e55c:	2b02      	cmp	r3, #2
 808e55e:	d135      	bne.n	808e5cc <mbedtls_ssl_handshake_client_step+0x170>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808e560:	4621      	mov	r1, r4
 808e562:	f851 3b0c 	ldr.w	r3, [r1], #12
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 808e566:	f105 0804 	add.w	r8, r5, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808e56a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808e56e:	f104 0008 	add.w	r0, r4, #8
 808e572:	4643      	mov	r3, r8
 808e574:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808e578:	f7fb fa89 	bl	8089a8e <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808e57c:	6823      	ldr	r3, [r4, #0]
 808e57e:	68a2      	ldr	r2, [r4, #8]
 808e580:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 808e584:	428a      	cmp	r2, r1
 808e586:	f2c0 830f 	blt.w	808eba8 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808e58a:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808e58c:	f893 005f 	ldrb.w	r0, [r3, #95]	; 0x5f
 808e590:	4281      	cmp	r1, r0
 808e592:	f2c0 8309 	blt.w	808eba8 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808e596:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 808e59a:	4282      	cmp	r2, r0
 808e59c:	f300 8304 	bgt.w	808eba8 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->major_ver > ssl->conf->max_major_ver ||
 808e5a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 808e5a4:	4299      	cmp	r1, r3
 808e5a6:	f300 82ff 	bgt.w	808eba8 <mbedtls_ssl_handshake_client_step+0x74c>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 808e5aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808e5ac:	1daa      	adds	r2, r5, #6
 808e5ae:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808e5b2:	f105 0126 	add.w	r1, r5, #38	; 0x26
 808e5b6:	f852 0b04 	ldr.w	r0, [r2], #4
 808e5ba:	428a      	cmp	r2, r1
 808e5bc:	f843 0b04 	str.w	r0, [r3], #4
 808e5c0:	d1f9      	bne.n	808e5b6 <mbedtls_ssl_handshake_client_step+0x15a>

    n = buf[34];
 808e5c2:	f895 6026 	ldrb.w	r6, [r5, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
 808e5c6:	2e20      	cmp	r6, #32
 808e5c8:	f240 82f5 	bls.w	808ebb6 <mbedtls_ssl_handshake_client_step+0x75a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808e5cc:	2232      	movs	r2, #50	; 0x32
 808e5ce:	e03a      	b.n	808e646 <mbedtls_ssl_handshake_client_step+0x1ea>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 808e5d0:	4648      	mov	r0, r9
 808e5d2:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 808e5d6:	f7f6 fd19 	bl	808500c <mbedtls_ssl_ciphersuite_from_id>
 808e5da:	f8ca 0000 	str.w	r0, [sl]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 808e5de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808e5e0:	6819      	ldr	r1, [r3, #0]
 808e5e2:	b939      	cbnz	r1, 808e5f4 <mbedtls_ssl_handshake_client_step+0x198>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808e5e4:	2250      	movs	r2, #80	; 0x50
 808e5e6:	2102      	movs	r1, #2
 808e5e8:	4620      	mov	r0, r4
 808e5ea:	f7fa fa17 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808e5ee:	48ae      	ldr	r0, [pc, #696]	; (808e8a8 <mbedtls_ssl_handshake_client_step+0x44c>)
 808e5f0:	f000 bc59 	b.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 808e5f4:	4620      	mov	r0, r4
 808e5f6:	f7fa fd2b 	bl	8089050 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808e5fa:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 808e5fe:	3527      	adds	r5, #39	; 0x27
 808e600:	f8da 31e4 	ldr.w	r3, [sl, #484]	; 0x1e4
 808e604:	2b00      	cmp	r3, #0
 808e606:	f040 8311 	bne.w	808ec2c <mbedtls_ssl_handshake_client_step+0x7d0>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808e60a:	6863      	ldr	r3, [r4, #4]
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808e60c:	4629      	mov	r1, r5
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808e60e:	3301      	adds	r3, #1
 808e610:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
 808e612:	2300      	movs	r3, #0
 808e614:	f8ca 31e4 	str.w	r3, [sl, #484]	; 0x1e4
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 808e618:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808e61a:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
 808e61e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808e620:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
 808e622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808e624:	4632      	mov	r2, r6
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
 808e626:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808e628:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808e62a:	300c      	adds	r0, #12
 808e62c:	f001 ffe1 	bl	80905f2 <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 808e630:	6823      	ldr	r3, [r4, #0]
 808e632:	68e2      	ldr	r2, [r4, #12]
 808e634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808e638:	3b04      	subs	r3, #4
 808e63a:	f853 0f04 	ldr.w	r0, [r3, #4]!
 808e63e:	2800      	cmp	r0, #0
 808e640:	f040 831b 	bne.w	808ec7a <mbedtls_ssl_handshake_client_step+0x81e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 808e644:	222f      	movs	r2, #47	; 0x2f
 808e646:	2102      	movs	r1, #2
 808e648:	4620      	mov	r0, r4
 808e64a:	f7fa f9e7 	bl	8088a1c <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 808e64e:	4897      	ldr	r0, [pc, #604]	; (808e8ac <mbedtls_ssl_handshake_client_step+0x450>)
 808e650:	f000 bc29 	b.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 808e654:	4620      	mov	r0, r4
 808e656:	f7fb f911 	bl	808987c <mbedtls_ssl_parse_certificate>
           break;
 808e65a:	f000 bc24 	b.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808e65e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808e660:	681d      	ldr	r5, [r3, #0]
    unsigned char *p = NULL, *end = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808e662:	7aab      	ldrb	r3, [r5, #10]
 808e664:	2b01      	cmp	r3, #1
 808e666:	d101      	bne.n	808e66c <mbedtls_ssl_handshake_client_step+0x210>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
 808e668:	2305      	movs	r3, #5
 808e66a:	e386      	b.n	808ed7a <mbedtls_ssl_handshake_client_step+0x91e>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808e66c:	4620      	mov	r0, r4
 808e66e:	f7fa fc23 	bl	8088eb8 <mbedtls_ssl_read_record>
 808e672:	2800      	cmp	r0, #0
 808e674:	f040 8417 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808e678:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808e67a:	2b16      	cmp	r3, #22
 808e67c:	f47f af63 	bne.w	808e546 <mbedtls_ssl_handshake_client_step+0xea>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 808e680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808e682:	781b      	ldrb	r3, [r3, #0]
 808e684:	2b0c      	cmp	r3, #12
 808e686:	f000 813e 	beq.w	808e906 <mbedtls_ssl_handshake_client_step+0x4aa>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808e68a:	7aab      	ldrb	r3, [r5, #10]
 808e68c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 808e690:	2b05      	cmp	r3, #5
 808e692:	f47f af58 	bne.w	808e546 <mbedtls_ssl_handshake_client_step+0xea>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 808e696:	2301      	movs	r3, #1
 808e698:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 808e69c:	6863      	ldr	r3, [r4, #4]
 808e69e:	3301      	adds	r3, #1
 808e6a0:	6063      	str	r3, [r4, #4]
 808e6a2:	f000 bc00 	b.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808e6a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808e6a8:	681b      	ldr	r3, [r3, #0]
 808e6aa:	7a9b      	ldrb	r3, [r3, #10]
 808e6ac:	3b01      	subs	r3, #1
 808e6ae:	b2db      	uxtb	r3, r3
 808e6b0:	2b09      	cmp	r3, #9
 808e6b2:	f200 8361 	bhi.w	808ed78 <mbedtls_ssl_handshake_client_step+0x91c>
 808e6b6:	f240 320f 	movw	r2, #783	; 0x30f
 808e6ba:	2501      	movs	r5, #1
 808e6bc:	fa05 f303 	lsl.w	r3, r5, r3
 808e6c0:	401a      	ands	r2, r3
 808e6c2:	2a00      	cmp	r2, #0
 808e6c4:	f000 8358 	beq.w	808ed78 <mbedtls_ssl_handshake_client_step+0x91c>
 808e6c8:	e35a      	b.n	808ed80 <mbedtls_ssl_handshake_client_step+0x924>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808e6ca:	4620      	mov	r0, r4
 808e6cc:	f7fa fbf4 	bl	8088eb8 <mbedtls_ssl_read_record>
 808e6d0:	2800      	cmp	r0, #0
 808e6d2:	f040 83e8 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808e6d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808e6d8:	2b16      	cmp	r3, #22
 808e6da:	f040 8396 	bne.w	808ee0a <mbedtls_ssl_handshake_client_step+0x9ae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808e6de:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808e6e0:	2b04      	cmp	r3, #4
 808e6e2:	f040 838b 	bne.w	808edfc <mbedtls_ssl_handshake_client_step+0x9a0>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 808e6e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808e6e8:	781b      	ldrb	r3, [r3, #0]
 808e6ea:	2b0e      	cmp	r3, #14
 808e6ec:	f040 8386 	bne.w	808edfc <mbedtls_ssl_handshake_client_step+0x9a0>
 808e6f0:	e7d4      	b.n	808e69c <mbedtls_ssl_handshake_client_step+0x240>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 808e6f2:	4620      	mov	r0, r4
 808e6f4:	f7fa fbfe 	bl	8088ef4 <mbedtls_ssl_write_certificate>
           break;
 808e6f8:	e3d5      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808e6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808e6fc:	681b      	ldr	r3, [r3, #0]
 808e6fe:	7a9f      	ldrb	r7, [r3, #10]
 808e700:	2f01      	cmp	r7, #1
 808e702:	f040 8100 	bne.w	808e906 <mbedtls_ssl_handshake_client_step+0x4aa>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 808e706:	6820      	ldr	r0, [r4, #0]
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808e708:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808e70c:	68e3      	ldr	r3, [r4, #12]
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808e70e:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808e712:	f508 76da 	add.w	r6, r8, #436	; 0x1b4
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808e716:	2b00      	cmp	r3, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808e718:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 808e71c:	4633      	mov	r3, r6
 808e71e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808e722:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808e726:	bf14      	ite	ne
 808e728:	2502      	movne	r5, #2
 808e72a:	2500      	moveq	r5, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808e72c:	f7fb f9ac 	bl	8089a88 <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 808e730:	6823      	ldr	r3, [r4, #0]
 808e732:	222e      	movs	r2, #46	; 0x2e
 808e734:	f8d3 9018 	ldr.w	r9, [r3, #24]
 808e738:	f508 71db 	add.w	r1, r8, #438	; 0x1b6
 808e73c:	69d8      	ldr	r0, [r3, #28]
 808e73e:	47c8      	blx	r9
 808e740:	2800      	cmp	r0, #0
 808e742:	f040 83b0 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
 808e746:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808e748:	2230      	movs	r2, #48	; 0x30
 808e74a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    if( ssl->session_negotiate->peer_cert == NULL )
 808e74e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808e750:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808e752:	2800      	cmp	r0, #0
 808e754:	f000 8359 	beq.w	808ee0a <mbedtls_ssl_handshake_client_step+0x9ae>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 808e758:	4639      	mov	r1, r7
 808e75a:	30bc      	adds	r0, #188	; 0xbc
 808e75c:	f7fc fe22 	bl	808b3a4 <mbedtls_pk_can_do>
 808e760:	2800      	cmp	r0, #0
 808e762:	f000 8354 	beq.w	808ee0e <mbedtls_ssl_handshake_client_step+0x9b2>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 808e766:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 808e768:	6b21      	ldr	r1, [r4, #48]	; 0x30
 808e76a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808e76c:	9104      	str	r1, [sp, #16]
 808e76e:	69d1      	ldr	r1, [r2, #28]
 808e770:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808e772:	9103      	str	r1, [sp, #12]
 808e774:	6992      	ldr	r2, [r2, #24]
 808e776:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 808e77a:	9202      	str	r2, [sp, #8]
 808e77c:	f5c5 52ff 	rsb	r2, r5, #8160	; 0x1fe0
 808e780:	321c      	adds	r2, #28
 808e782:	9201      	str	r2, [sp, #4]
 808e784:	aa08      	add	r2, sp, #32
 808e786:	9200      	str	r2, [sp, #0]
 808e788:	9a04      	ldr	r2, [sp, #16]
 808e78a:	1d2b      	adds	r3, r5, #4
 808e78c:	443b      	add	r3, r7
 808e78e:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 808e792:	4631      	mov	r1, r6
 808e794:	30bc      	adds	r0, #188	; 0xbc
 808e796:	f7fc fe6f 	bl	808b478 <mbedtls_pk_encrypt>
 808e79a:	2800      	cmp	r0, #0
 808e79c:	f040 8383 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 808e7a0:	2d00      	cmp	r5, #0
 808e7a2:	f000 8336 	beq.w	808ee12 <mbedtls_ssl_handshake_client_step+0x9b6>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 808e7a6:	9b08      	ldr	r3, [sp, #32]
 808e7a8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808e7ac:	0a19      	lsrs	r1, r3, #8
 808e7ae:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 808e7b0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808e7b4:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 808e7b6:	3302      	adds	r3, #2
 808e7b8:	9308      	str	r3, [sp, #32]
 808e7ba:	e32a      	b.n	808ee12 <mbedtls_ssl_handshake_client_step+0x9b6>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808e7bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808e7be:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808e7c0:	681d      	ldr	r5, [r3, #0]
    size_t n = 0, offset = 0;
 808e7c2:	2300      	movs	r3, #0
 808e7c4:	9307      	str	r3, [sp, #28]
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808e7c6:	f7f9 fd89 	bl	80882dc <mbedtls_ssl_derive_keys>
 808e7ca:	2800      	cmp	r0, #0
 808e7cc:	f040 836b 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808e7d0:	7aab      	ldrb	r3, [r5, #10]
 808e7d2:	1f5a      	subs	r2, r3, #5
 808e7d4:	2a03      	cmp	r2, #3
 808e7d6:	d901      	bls.n	808e7dc <mbedtls_ssl_handshake_client_step+0x380>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 808e7d8:	2b0b      	cmp	r3, #11
 808e7da:	d102      	bne.n	808e7e2 <mbedtls_ssl_handshake_client_step+0x386>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
 808e7dc:	6863      	ldr	r3, [r4, #4]
 808e7de:	3301      	adds	r3, #1
 808e7e0:	e2cb      	b.n	808ed7a <mbedtls_ssl_handshake_client_step+0x91e>
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 808e7e2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 808e7e6:	2b00      	cmp	r3, #0
 808e7e8:	d0f8      	beq.n	808e7dc <mbedtls_ssl_handshake_client_step+0x380>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808e7ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 808e7ec:	b10d      	cbz	r5, 808e7f2 <mbedtls_ssl_handshake_client_step+0x396>
 808e7ee:	686b      	ldr	r3, [r5, #4]
 808e7f0:	b91b      	cbnz	r3, 808e7fa <mbedtls_ssl_handshake_client_step+0x39e>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808e7f2:	6823      	ldr	r3, [r4, #0]
 808e7f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 808e7f6:	2b00      	cmp	r3, #0
 808e7f8:	d0f0      	beq.n	808e7dc <mbedtls_ssl_handshake_client_step+0x380>
 808e7fa:	681b      	ldr	r3, [r3, #0]
 808e7fc:	2b00      	cmp	r3, #0
 808e7fe:	d0ed      	beq.n	808e7dc <mbedtls_ssl_handshake_client_step+0x380>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 808e800:	4620      	mov	r0, r4
 808e802:	f7ff fe20 	bl	808e446 <mbedtls_ssl_own_key>
 808e806:	2800      	cmp	r0, #0
 808e808:	d044      	beq.n	808e894 <mbedtls_ssl_handshake_client_step+0x438>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
 808e80a:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
 808e80e:	a908      	add	r1, sp, #32
 808e810:	4620      	mov	r0, r4
 808e812:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 808e814:	68e3      	ldr	r3, [r4, #12]
 808e816:	2b03      	cmp	r3, #3
 808e818:	d175      	bne.n	808e906 <mbedtls_ssl_handshake_client_step+0x4aa>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 808e81a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 808e81c:	4620      	mov	r0, r4
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 808e81e:	681b      	ldr	r3, [r3, #0]
 808e820:	7a5d      	ldrb	r5, [r3, #9]
 808e822:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808e826:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 808e828:	bf0b      	itete	eq
 808e82a:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 808e82c:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 808e82e:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 808e830:	711a      	strbne	r2, [r3, #4]
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 808e832:	bf18      	it	ne
 808e834:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 808e836:	f7ff fe06 	bl	808e446 <mbedtls_ssl_own_key>
 808e83a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 808e83e:	f7fa ffe4 	bl	808980a <mbedtls_ssl_sig_from_pk>
 808e842:	7170      	strb	r0, [r6, #5]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 808e844:	4620      	mov	r0, r4
 808e846:	f7ff fdfe 	bl	808e446 <mbedtls_ssl_own_key>
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 808e84a:	6823      	ldr	r3, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 808e84c:	4629      	mov	r1, r5
 808e84e:	69da      	ldr	r2, [r3, #28]
 808e850:	9203      	str	r2, [sp, #12]
 808e852:	699b      	ldr	r3, [r3, #24]
 808e854:	aa08      	add	r2, sp, #32
 808e856:	9302      	str	r3, [sp, #8]
 808e858:	ab07      	add	r3, sp, #28
 808e85a:	9301      	str	r3, [sp, #4]
 808e85c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808e860:	3308      	adds	r3, #8
 808e862:	9300      	str	r3, [sp, #0]
 808e864:	2300      	movs	r3, #0
 808e866:	f7fc fdd3 	bl	808b410 <mbedtls_pk_sign>
 808e86a:	2800      	cmp	r0, #0
 808e86c:	f040 831b 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 808e870:	9b07      	ldr	r3, [sp, #28]
 808e872:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808e876:	0a19      	lsrs	r1, r3, #8
 808e878:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 808e87a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808e87e:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
 808e880:	3308      	adds	r3, #8
 808e882:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808e886:	2316      	movs	r3, #22
 808e888:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 808e88c:	220f      	movs	r2, #15
 808e88e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808e892:	e2c8      	b.n	808ee26 <mbedtls_ssl_handshake_client_step+0x9ca>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 808e894:	4806      	ldr	r0, [pc, #24]	; (808e8b0 <mbedtls_ssl_handshake_client_step+0x454>)
 808e896:	e306      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 808e898:	4620      	mov	r0, r4
 808e89a:	f7fa fb8f 	bl	8088fbc <mbedtls_ssl_write_change_cipher_spec>
           break;
 808e89e:	e302      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 808e8a0:	4620      	mov	r0, r4
 808e8a2:	f7fa fbe3 	bl	808906c <mbedtls_ssl_write_finished>
           break;
 808e8a6:	e2fe      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
 808e8a8:	ffff8f00 	.word	0xffff8f00
 808e8ac:	ffff8680 	.word	0xffff8680
 808e8b0:	ffff8a00 	.word	0xffff8a00
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808e8b4:	4620      	mov	r0, r4
 808e8b6:	f7fa faff 	bl	8088eb8 <mbedtls_ssl_read_record>
 808e8ba:	2800      	cmp	r0, #0
 808e8bc:	f040 82f3 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808e8c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808e8c2:	2b16      	cmp	r3, #22
 808e8c4:	f47f ae3f 	bne.w	808e546 <mbedtls_ssl_handshake_client_step+0xea>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 808e8c8:	6e67      	ldr	r7, [r4, #100]	; 0x64
 808e8ca:	783b      	ldrb	r3, [r7, #0]
 808e8cc:	2b04      	cmp	r3, #4
 808e8ce:	d103      	bne.n	808e8d8 <mbedtls_ssl_handshake_client_step+0x47c>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 808e8d0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 808e8d2:	2b09      	cmp	r3, #9
 808e8d4:	f200 82af 	bhi.w	808ee36 <mbedtls_ssl_handshake_client_step+0x9da>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808e8d8:	2232      	movs	r2, #50	; 0x32
 808e8da:	2102      	movs	r1, #2
 808e8dc:	4620      	mov	r0, r4
 808e8de:	f7fa f89d 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 808e8e2:	48c1      	ldr	r0, [pc, #772]	; (808ebe8 <mbedtls_ssl_handshake_client_step+0x78c>)
 808e8e4:	e2df      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 808e8e6:	4620      	mov	r0, r4
 808e8e8:	f7fa fb76 	bl	8088fd8 <mbedtls_ssl_parse_change_cipher_spec>
           break;
 808e8ec:	e2db      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 808e8ee:	4620      	mov	r0, r4
 808e8f0:	f7fa fc04 	bl	80890fc <mbedtls_ssl_parse_finished>
           break;
 808e8f4:	e2d7      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 808e8f6:	230f      	movs	r3, #15
 808e8f8:	e23f      	b.n	808ed7a <mbedtls_ssl_handshake_client_step+0x91e>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 808e8fa:	4620      	mov	r0, r4
 808e8fc:	f7fa fe00 	bl	8089500 <mbedtls_ssl_handshake_wrapup>
 808e900:	e23c      	b.n	808ed7c <mbedtls_ssl_handshake_client_step+0x920>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
 808e902:	48ba      	ldr	r0, [pc, #744]	; (808ebec <mbedtls_ssl_handshake_client_step+0x790>)
 808e904:	e2cf      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808e906:	48ba      	ldr	r0, [pc, #744]	; (808ebf0 <mbedtls_ssl_handshake_client_step+0x794>)
 808e908:	e2cd      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 808e90a:	f852 0b04 	ldr.w	r0, [r2], #4
 808e90e:	429a      	cmp	r2, r3
 808e910:	f841 0b04 	str.w	r0, [r1], #4
 808e914:	d1f9      	bne.n	808e90a <mbedtls_ssl_handshake_client_step+0x4ae>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 808e916:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808e918:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
 808e91a:	f1a3 0210 	sub.w	r2, r3, #16
 808e91e:	2a10      	cmp	r2, #16
 808e920:	d806      	bhi.n	808e930 <mbedtls_ssl_handshake_client_step+0x4d4>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 808e922:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
 808e924:	f8d2 21e4 	ldr.w	r2, [r2, #484]	; 0x1e4
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
 808e928:	2a00      	cmp	r2, #0
 808e92a:	bf08      	it	eq
 808e92c:	2300      	moveq	r3, #0
 808e92e:	e000      	b.n	808e932 <mbedtls_ssl_handshake_client_step+0x4d6>
 808e930:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
 808e932:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 808e934:	b16a      	cbz	r2, 808e952 <mbedtls_ssl_handshake_client_step+0x4f6>
 808e936:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 808e938:	b15a      	cbz	r2, 808e952 <mbedtls_ssl_handshake_client_step+0x4f6>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 808e93a:	6823      	ldr	r3, [r4, #0]
 808e93c:	2220      	movs	r2, #32
 808e93e:	699d      	ldr	r5, [r3, #24]
 808e940:	310c      	adds	r1, #12
 808e942:	69d8      	ldr	r0, [r3, #28]
 808e944:	47a8      	blx	r5

            if( ret != 0 )
 808e946:	2800      	cmp	r0, #0
 808e948:	f040 82ad 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
 808e94c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808e94e:	2320      	movs	r3, #32
 808e950:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 808e952:	f106 0527 	add.w	r5, r6, #39	; 0x27
 808e956:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26

    for( i = 0; i < n; i++ )
 808e95a:	2200      	movs	r2, #0
 808e95c:	4293      	cmp	r3, r2
 808e95e:	d005      	beq.n	808e96c <mbedtls_ssl_handshake_client_step+0x510>
        *p++ = ssl->session_negotiate->id[i];
 808e960:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808e962:	4411      	add	r1, r2
 808e964:	7b09      	ldrb	r1, [r1, #12]
 808e966:	54a9      	strb	r1, [r5, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
 808e968:	3201      	adds	r2, #1
 808e96a:	e7f7      	b.n	808e95c <mbedtls_ssl_handshake_client_step+0x500>
 808e96c:	441d      	add	r5, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 808e96e:	68e2      	ldr	r2, [r4, #12]
 808e970:	6823      	ldr	r3, [r4, #0]

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
 808e972:	f105 0902 	add.w	r9, r5, #2
 808e976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
 808e97a:	2700      	movs	r7, #0
 808e97c:	f1a3 0804 	sub.w	r8, r3, #4
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
 808e980:	f858 bf04 	ldr.w	fp, [r8, #4]!
 808e984:	f1bb 0f00 	cmp.w	fp, #0
 808e988:	d01c      	beq.n	808e9c4 <mbedtls_ssl_handshake_client_step+0x568>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 808e98a:	4658      	mov	r0, fp
 808e98c:	f7f6 fb3e 	bl	808500c <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
 808e990:	6822      	ldr	r2, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 808e992:	f892 105d 	ldrb.w	r1, [r2, #93]	; 0x5d
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 808e996:	2800      	cmp	r0, #0
 808e998:	d0f2      	beq.n	808e980 <mbedtls_ssl_handshake_client_step+0x524>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 808e99a:	6903      	ldr	r3, [r0, #16]
 808e99c:	4299      	cmp	r1, r3
 808e99e:	dbef      	blt.n	808e980 <mbedtls_ssl_handshake_client_step+0x524>
 808e9a0:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 808e9a4:	6983      	ldr	r3, [r0, #24]
 808e9a6:	429a      	cmp	r2, r3
 808e9a8:	dcea      	bgt.n	808e980 <mbedtls_ssl_handshake_client_step+0x524>

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 808e9aa:	f8d8 3000 	ldr.w	r3, [r8]
            continue;

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
 808e9ae:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 808e9b0:	121a      	asrs	r2, r3, #8
 808e9b2:	464b      	mov	r3, r9
 808e9b4:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 808e9b8:	f8d8 2000 	ldr.w	r2, [r8]
 808e9bc:	f889 2001 	strb.w	r2, [r9, #1]
 808e9c0:	4699      	mov	r9, r3
 808e9c2:	e7dd      	b.n	808e980 <mbedtls_ssl_handshake_client_step+0x524>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 808e9c4:	23ff      	movs	r3, #255	; 0xff
        n++;
 808e9c6:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 808e9c8:	f889 3001 	strb.w	r3, [r9, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 808e9cc:	09fb      	lsrs	r3, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 808e9ce:	f889 b000 	strb.w	fp, [r9]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 808e9d2:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 808e9d4:	702b      	strb	r3, [r5, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 808e9d6:	2301      	movs	r3, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 808e9d8:	706f      	strb	r7, [r5, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 808e9da:	f889 3002 	strb.w	r3, [r9, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 808e9de:	f889 b003 	strb.w	fp, [r9, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808e9e2:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 808e9e6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 808e9ea:	f109 0704 	add.w	r7, r9, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 808e9ee:	f109 0806 	add.w	r8, r9, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808e9f2:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 808e9f6:	b358      	cbz	r0, 808ea50 <mbedtls_ssl_handshake_client_step+0x5f4>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 808e9f8:	f001 fe41 	bl	809067e <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 808e9fc:	45a8      	cmp	r8, r5
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 808e9fe:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 808ea00:	d828      	bhi.n	808ea54 <mbedtls_ssl_handshake_client_step+0x5f8>
 808ea02:	f100 0a09 	add.w	sl, r0, #9
 808ea06:	ebc8 0505 	rsb	r5, r8, r5
 808ea0a:	4555      	cmp	r5, sl
 808ea0c:	d322      	bcc.n	808ea54 <mbedtls_ssl_handshake_client_step+0x5f8>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 808ea0e:	1d43      	adds	r3, r0, #5
 808ea10:	0a1b      	lsrs	r3, r3, #8
 808ea12:	f889 3008 	strb.w	r3, [r9, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 808ea16:	b2c3      	uxtb	r3, r0
 808ea18:	1d59      	adds	r1, r3, #5
 808ea1a:	f889 1009 	strb.w	r1, [r9, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 808ea1e:	1cc1      	adds	r1, r0, #3
 808ea20:	0a09      	lsrs	r1, r1, #8
 808ea22:	f889 100a 	strb.w	r1, [r9, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 808ea26:	1cd9      	adds	r1, r3, #3
 808ea28:	f889 100b 	strb.w	r1, [r9, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 808ea2c:	0a01      	lsrs	r1, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 808ea2e:	f889 b006 	strb.w	fp, [r9, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 808ea32:	f889 b007 	strb.w	fp, [r9, #7]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 808ea36:	f889 b00c 	strb.w	fp, [r9, #12]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 808ea3a:	f889 100d 	strb.w	r1, [r9, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 808ea3e:	f889 300e 	strb.w	r3, [r9, #14]

    memcpy( p, ssl->hostname, hostname_len );
 808ea42:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 808ea46:	f109 000f 	add.w	r0, r9, #15
 808ea4a:	f001 fdd2 	bl	80905f2 <memcpy>
 808ea4e:	e002      	b.n	808ea56 <mbedtls_ssl_handshake_client_step+0x5fa>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
 808ea50:	4682      	mov	sl, r0
 808ea52:	e000      	b.n	808ea56 <mbedtls_ssl_handshake_client_step+0x5fa>
 808ea54:	46da      	mov	sl, fp
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 808ea56:	6823      	ldr	r3, [r4, #0]
 808ea58:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 808ea5c:	2a03      	cmp	r2, #3
 808ea5e:	d13c      	bne.n	808eada <mbedtls_ssl_handshake_client_step+0x67e>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808ea60:	6d59      	ldr	r1, [r3, #84]	; 0x54
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t sig_alg_len = 0;
 808ea62:	2000      	movs	r0, #0
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808ea64:	f851 3010 	ldr.w	r3, [r1, r0, lsl #1]
 808ea68:	b10b      	cbz	r3, 808ea6e <mbedtls_ssl_handshake_client_step+0x612>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
 808ea6a:	3002      	adds	r0, #2
 808ea6c:	e7fa      	b.n	808ea64 <mbedtls_ssl_handshake_client_step+0x608>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808ea6e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 808ea72:	f10a 0b02 	add.w	fp, sl, #2
 808ea76:	44bb      	add	fp, r7
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808ea78:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 808ea7c:	4593      	cmp	fp, r2
 808ea7e:	d82d      	bhi.n	808eadc <mbedtls_ssl_handshake_client_step+0x680>
 808ea80:	ebcb 0202 	rsb	r2, fp, r2
 808ea84:	3006      	adds	r0, #6
 808ea86:	4282      	cmp	r2, r0
 808ea88:	d328      	bcc.n	808eadc <mbedtls_ssl_handshake_client_step+0x680>
 808ea8a:	461d      	mov	r5, r3
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808ea8c:	f851 0015 	ldr.w	r0, [r1, r5, lsl #1]
 808ea90:	9105      	str	r1, [sp, #20]
 808ea92:	1caa      	adds	r2, r5, #2
 808ea94:	b170      	cbz	r0, 808eab4 <mbedtls_ssl_handshake_client_step+0x658>
 808ea96:	9204      	str	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 808ea98:	f7fa fec0 	bl	808981c <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 808ea9c:	9a04      	ldr	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 808ea9e:	eb0b 0305 	add.w	r3, fp, r5
 808eaa2:	7198      	strb	r0, [r3, #6]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 808eaa4:	4615      	mov	r5, r2
 808eaa6:	eb0b 0302 	add.w	r3, fp, r2
 808eaaa:	f04f 0201 	mov.w	r2, #1
 808eaae:	9905      	ldr	r1, [sp, #20]
 808eab0:	715a      	strb	r2, [r3, #5]
 808eab2:	e7eb      	b.n	808ea8c <mbedtls_ssl_handshake_client_step+0x630>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 808eab4:	230d      	movs	r3, #13
 808eab6:	f88b 3001 	strb.w	r3, [fp, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 808eaba:	0a13      	lsrs	r3, r2, #8
 808eabc:	f88b 3002 	strb.w	r3, [fp, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 808eac0:	b2eb      	uxtb	r3, r5
 808eac2:	1c9a      	adds	r2, r3, #2
 808eac4:	f88b 2003 	strb.w	r2, [fp, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 808eac8:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 808eaca:	f88b 3005 	strb.w	r3, [fp, #5]
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 808eace:	f88b 0000 	strb.w	r0, [fp]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 808ead2:	f88b 2004 	strb.w	r2, [fp, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );

    *olen = 6 + sig_alg_len;
 808ead6:	1dab      	adds	r3, r5, #6
 808ead8:	e000      	b.n	808eadc <mbedtls_ssl_handshake_client_step+0x680>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
 808eada:	2300      	movs	r3, #0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 808eadc:	6822      	ldr	r2, [r4, #0]
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 808eade:	4453      	add	r3, sl
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 808eae0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 808eae4:	f412 72e0 	ands.w	r2, r2, #448	; 0x1c0
 808eae8:	d018      	beq.n	808eb1c <mbedtls_ssl_handshake_client_step+0x6c0>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808eaea:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 808eaee:	1c99      	adds	r1, r3, #2
 808eaf0:	4439      	add	r1, r7
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808eaf2:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
 808eaf6:	4281      	cmp	r1, r0
 808eaf8:	f04f 0200 	mov.w	r2, #0
 808eafc:	d80e      	bhi.n	808eb1c <mbedtls_ssl_handshake_client_step+0x6c0>
 808eafe:	1a40      	subs	r0, r0, r1
 808eb00:	2804      	cmp	r0, #4
 808eb02:	d90b      	bls.n	808eb1c <mbedtls_ssl_handshake_client_step+0x6c0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 808eb04:	2001      	movs	r0, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 808eb06:	700a      	strb	r2, [r1, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 808eb08:	7048      	strb	r0, [r1, #1]

    *p++ = 0x00;
 808eb0a:	708a      	strb	r2, [r1, #2]
    *p++ = 1;
 808eb0c:	70c8      	strb	r0, [r1, #3]

    *p++ = ssl->conf->mfl_code;
 808eb0e:	6822      	ldr	r2, [r4, #0]
 808eb10:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 808eb14:	f3c2 1282 	ubfx	r2, r2, #6, #3
 808eb18:	710a      	strb	r2, [r1, #4]

    *olen = 5;
 808eb1a:	2205      	movs	r2, #5
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 808eb1c:	189d      	adds	r5, r3, r2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 808eb1e:	6823      	ldr	r3, [r4, #0]
 808eb20:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 808eb24:	f001 0102 	and.w	r1, r1, #2
 808eb28:	f001 0aff 	and.w	sl, r1, #255	; 0xff
 808eb2c:	b329      	cbz	r1, 808eb7a <mbedtls_ssl_handshake_client_step+0x71e>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808eb2e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 808eb32:	1ca8      	adds	r0, r5, #2
 808eb34:	4438      	add	r0, r7
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808eb36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808eb3a:	4298      	cmp	r0, r3
 808eb3c:	d816      	bhi.n	808eb6c <mbedtls_ssl_handshake_client_step+0x710>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 808eb3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808eb40:	1a1b      	subs	r3, r3, r0
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 808eb42:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808eb44:	f102 0a04 	add.w	sl, r2, #4
 808eb48:	4553      	cmp	r3, sl
 808eb4a:	f04f 0300 	mov.w	r3, #0
 808eb4e:	d310      	bcc.n	808eb72 <mbedtls_ssl_handshake_client_step+0x716>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 808eb50:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 808eb52:	2323      	movs	r3, #35	; 0x23
 808eb54:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 808eb56:	0a13      	lsrs	r3, r2, #8
 808eb58:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 808eb5a:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 808eb5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808eb5e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 808eb60:	b149      	cbz	r1, 808eb76 <mbedtls_ssl_handshake_client_step+0x71a>
 808eb62:	b142      	cbz	r2, 808eb76 <mbedtls_ssl_handshake_client_step+0x71a>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
 808eb64:	3004      	adds	r0, #4
 808eb66:	f001 fd44 	bl	80905f2 <memcpy>
 808eb6a:	e006      	b.n	808eb7a <mbedtls_ssl_handshake_client_step+0x71e>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
 808eb6c:	f04f 0a00 	mov.w	sl, #0
 808eb70:	e003      	b.n	808eb7a <mbedtls_ssl_handshake_client_step+0x71e>
 808eb72:	469a      	mov	sl, r3
 808eb74:	e001      	b.n	808eb7a <mbedtls_ssl_handshake_client_step+0x71e>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
 808eb76:	f04f 0a04 	mov.w	sl, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
 808eb7a:	eb15 030a 	adds.w	r3, r5, sl
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 808eb7e:	bf1f      	itttt	ne
 808eb80:	0a1a      	lsrne	r2, r3, #8
 808eb82:	f889 2004 	strbne.w	r2, [r9, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 808eb86:	f889 3005 	strbne.w	r3, [r9, #5]
        p += ext_len;
 808eb8a:	eb08 0703 	addne.w	r7, r8, r3
    }

    ssl->out_msglen  = p - buf;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808eb8e:	2316      	movs	r3, #22
 808eb90:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 808eb94:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808eb98:	2201      	movs	r2, #1
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
 808eb9a:	1bbe      	subs	r6, r7, r6
 808eb9c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 808eba0:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 808eba2:	6863      	ldr	r3, [r4, #4]
 808eba4:	4413      	add	r3, r2
 808eba6:	e141      	b.n	808ee2c <mbedtls_ssl_handshake_client_step+0x9d0>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
 808eba8:	2246      	movs	r2, #70	; 0x46
 808ebaa:	2102      	movs	r1, #2
 808ebac:	4620      	mov	r0, r4
 808ebae:	f7f9 ff35 	bl	8088a1c <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 808ebb2:	4810      	ldr	r0, [pc, #64]	; (808ebf4 <mbedtls_ssl_handshake_client_step+0x798>)
 808ebb4:	e177      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 808ebb6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808ebb8:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 808ebbc:	4293      	cmp	r3, r2
 808ebbe:	d91b      	bls.n	808ebf8 <mbedtls_ssl_handshake_client_step+0x79c>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 808ebc0:	eb08 0206 	add.w	r2, r8, r6
                  | ( buf[39 + n]       ) );
 808ebc4:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
 808ebc8:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 808ebcc:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
 808ebd0:	1e7a      	subs	r2, r7, #1
 808ebd2:	2a02      	cmp	r2, #2
 808ebd4:	f67f acfa 	bls.w	808e5cc <mbedtls_ssl_handshake_client_step+0x170>
 808ebd8:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 808ebdc:	443a      	add	r2, r7
 808ebde:	4293      	cmp	r3, r2
 808ebe0:	f47f acf4 	bne.w	808e5cc <mbedtls_ssl_handshake_client_step+0x170>
 808ebe4:	e00e      	b.n	808ec04 <mbedtls_ssl_handshake_client_step+0x7a8>
 808ebe6:	bf00      	nop
 808ebe8:	ffff9200 	.word	0xffff9200
 808ebec:	ffff8c00 	.word	0xffff8c00
 808ebf0:	ffff9400 	.word	0xffff9400
 808ebf4:	ffff9180 	.word	0xffff9180
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 808ebf8:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 808ebfc:	4293      	cmp	r3, r2
 808ebfe:	f47f ace5 	bne.w	808e5cc <mbedtls_ssl_handshake_client_step+0x170>
    {
        ext_len = 0;
 808ec02:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 808ec04:	eb08 0306 	add.w	r3, r8, r6
 808ec08:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 808ec0c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 808ec10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 808ec14:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 808ec18:	2b00      	cmp	r3, #0
 808ec1a:	f43f acd9 	beq.w	808e5d0 <mbedtls_ssl_handshake_client_step+0x174>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 808ec1e:	222f      	movs	r2, #47	; 0x2f
 808ec20:	2102      	movs	r1, #2
 808ec22:	4620      	mov	r0, r4
 808ec24:	f7f9 fefa 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 808ec28:	48a0      	ldr	r0, [pc, #640]	; (808eeac <mbedtls_ssl_handshake_client_step+0xa50>)
 808ec2a:	e13c      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808ec2c:	2e00      	cmp	r6, #0
 808ec2e:	f43f acec 	beq.w	808e60a <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 808ec32:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808ec34:	6803      	ldr	r3, [r0, #0]
 808ec36:	4599      	cmp	r9, r3
 808ec38:	f47f ace7 	bne.w	808e60a <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 808ec3c:	6843      	ldr	r3, [r0, #4]
 808ec3e:	2b00      	cmp	r3, #0
 808ec40:	f47f ace3 	bne.w	808e60a <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->compression != comp ||
 808ec44:	6883      	ldr	r3, [r0, #8]
 808ec46:	429e      	cmp	r6, r3
 808ec48:	f47f acdf 	bne.w	808e60a <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 808ec4c:	4632      	mov	r2, r6
 808ec4e:	4629      	mov	r1, r5
 808ec50:	300c      	adds	r0, #12
 808ec52:	f001 fcbf 	bl	80905d4 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
 808ec56:	2800      	cmp	r0, #0
 808ec58:	f47f acd7 	bne.w	808e60a <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 808ec5c:	230c      	movs	r3, #12
 808ec5e:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808ec60:	4620      	mov	r0, r4
 808ec62:	f7f9 fb3b 	bl	80882dc <mbedtls_ssl_derive_keys>
 808ec66:	4605      	mov	r5, r0
 808ec68:	2800      	cmp	r0, #0
 808ec6a:	f43f ace1 	beq.w	808e630 <mbedtls_ssl_handshake_client_step+0x1d4>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808ec6e:	2250      	movs	r2, #80	; 0x50
 808ec70:	2102      	movs	r1, #2
 808ec72:	4620      	mov	r0, r4
 808ec74:	f7f9 fed2 	bl	8088a1c <mbedtls_ssl_send_alert_message>
 808ec78:	e07c      	b.n	808ed74 <mbedtls_ssl_handshake_client_step+0x918>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
 808ec7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808ec7c:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 808ec7e:	4290      	cmp	r0, r2
 808ec80:	f47f acdb 	bne.w	808e63a <mbedtls_ssl_handshake_client_step+0x1de>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 808ec84:	f7f6 f9c2 	bl	808500c <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
 808ec88:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 808ec8a:	2800      	cmp	r0, #0
 808ec8c:	f43f acda 	beq.w	808e644 <mbedtls_ssl_handshake_client_step+0x1e8>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 808ec90:	6902      	ldr	r2, [r0, #16]
 808ec92:	429a      	cmp	r2, r3
 808ec94:	f73f acd6 	bgt.w	808e644 <mbedtls_ssl_handshake_client_step+0x1e8>
 808ec98:	6982      	ldr	r2, [r0, #24]
 808ec9a:	4293      	cmp	r3, r2
 808ec9c:	f73f acd2 	bgt.w	808e644 <mbedtls_ssl_handshake_client_step+0x1e8>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 808eca0:	f64f 7001 	movw	r0, #65281	; 0xff01
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 808eca4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808eca6:	2200      	movs	r2, #0

    ext = buf + 40 + n;
 808eca8:	3628      	adds	r6, #40	; 0x28
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 808ecaa:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 808ecac:	4446      	add	r6, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 808ecae:	2501      	movs	r5, #1

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
 808ecb0:	2f00      	cmp	r7, #0
 808ecb2:	d03d      	beq.n	808ed30 <mbedtls_ssl_handshake_client_step+0x8d4>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 808ecb4:	7873      	ldrb	r3, [r6, #1]
 808ecb6:	7832      	ldrb	r2, [r6, #0]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 808ecb8:	78b1      	ldrb	r1, [r6, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 808ecba:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 808ecbe:	78f3      	ldrb	r3, [r6, #3]
 808ecc0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

        if( ext_size + 4 > ext_len )
 808ecc4:	1d19      	adds	r1, r3, #4
 808ecc6:	428f      	cmp	r7, r1
 808ecc8:	f4ff ac80 	bcc.w	808e5cc <mbedtls_ssl_handshake_client_step+0x170>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 808eccc:	2a23      	cmp	r2, #35	; 0x23
 808ecce:	d01e      	beq.n	808ed0e <mbedtls_ssl_handshake_client_step+0x8b2>
 808ecd0:	4282      	cmp	r2, r0
 808ecd2:	d002      	beq.n	808ecda <mbedtls_ssl_handshake_client_step+0x87e>
 808ecd4:	2a01      	cmp	r2, #1
 808ecd6:	d124      	bne.n	808ed22 <mbedtls_ssl_handshake_client_step+0x8c6>
 808ecd8:	e008      	b.n	808ecec <mbedtls_ssl_handshake_client_step+0x890>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 808ecda:	2b01      	cmp	r3, #1
 808ecdc:	d101      	bne.n	808ece2 <mbedtls_ssl_handshake_client_step+0x886>
 808ecde:	7932      	ldrb	r2, [r6, #4]
 808ece0:	b10a      	cbz	r2, 808ece6 <mbedtls_ssl_handshake_client_step+0x88a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 808ece2:	2228      	movs	r2, #40	; 0x28
 808ece4:	e4af      	b.n	808e646 <mbedtls_ssl_handshake_client_step+0x1ea>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 808ece6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 808ecea:	e01a      	b.n	808ed22 <mbedtls_ssl_handshake_client_step+0x8c6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 808ecec:	6822      	ldr	r2, [r4, #0]
 808ecee:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 808ecf2:	f402 7ee0 	and.w	lr, r2, #448	; 0x1c0
 808ecf6:	f1be 0f00 	cmp.w	lr, #0
 808ecfa:	d0f2      	beq.n	808ece2 <mbedtls_ssl_handshake_client_step+0x886>
 808ecfc:	2b01      	cmp	r3, #1
 808ecfe:	d1f0      	bne.n	808ece2 <mbedtls_ssl_handshake_client_step+0x886>
        len != 1 ||
 808ed00:	f896 e004 	ldrb.w	lr, [r6, #4]
 808ed04:	f3c2 1282 	ubfx	r2, r2, #6, #3
 808ed08:	4596      	cmp	lr, r2
 808ed0a:	d00a      	beq.n	808ed22 <mbedtls_ssl_handshake_client_step+0x8c6>
 808ed0c:	e7e9      	b.n	808ece2 <mbedtls_ssl_handshake_client_step+0x886>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 808ed0e:	6822      	ldr	r2, [r4, #0]
 808ed10:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 808ed14:	0792      	lsls	r2, r2, #30
 808ed16:	d5e4      	bpl.n	808ece2 <mbedtls_ssl_handshake_client_step+0x886>
 808ed18:	2b00      	cmp	r3, #0
 808ed1a:	d1e2      	bne.n	808ece2 <mbedtls_ssl_handshake_client_step+0x886>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 808ed1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808ed1e:	f8c2 51f4 	str.w	r5, [r2, #500]	; 0x1f4
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 808ed22:	1afb      	subs	r3, r7, r3
 808ed24:	1f1f      	subs	r7, r3, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
 808ed26:	3b05      	subs	r3, #5
 808ed28:	2b02      	cmp	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
 808ed2a:	440e      	add	r6, r1

        if( ext_len > 0 && ext_len < 4 )
 808ed2c:	d8c0      	bhi.n	808ecb0 <mbedtls_ssl_handshake_client_step+0x854>
 808ed2e:	e48e      	b.n	808e64e <mbedtls_ssl_handshake_client_step+0x1f2>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 808ed30:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 808ed34:	bb13      	cbnz	r3, 808ed7c <mbedtls_ssl_handshake_client_step+0x920>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 808ed36:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 808ed38:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808ed3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 808ed40:	2b20      	cmp	r3, #32
 808ed42:	d11b      	bne.n	808ed7c <mbedtls_ssl_handshake_client_step+0x920>
 808ed44:	e7cd      	b.n	808ece2 <mbedtls_ssl_handshake_client_step+0x886>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );
 808ed46:	465a      	mov	r2, fp
 808ed48:	f107 010a 	add.w	r1, r7, #10
 808ed4c:	9004      	str	r0, [sp, #16]
 808ed4e:	f001 fc50 	bl	80905f2 <memcpy>

    ssl->session_negotiate->ticket = ticket;
 808ed52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808ed54:	9b04      	ldr	r3, [sp, #16]
    ssl->session_negotiate->ticket_len = ticket_len;
    ssl->session_negotiate->ticket_lifetime = lifetime;
 808ed56:	0436      	lsls	r6, r6, #16
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
 808ed58:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
 808ed5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_lifetime = lifetime;
 808ed5c:	ea46 660a 	orr.w	r6, r6, sl, lsl #24
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
    ssl->session_negotiate->ticket_len = ticket_len;
 808ed60:	f8c3 b068 	str.w	fp, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
 808ed64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808ed66:	ea46 0808 	orr.w	r8, r6, r8
 808ed6a:	ea48 2609 	orr.w	r6, r8, r9, lsl #8
 808ed6e:	66de      	str	r6, [r3, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
 808ed70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808ed72:	609d      	str	r5, [r3, #8]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );

    return( 0 );
 808ed74:	4628      	mov	r0, r5
 808ed76:	e096      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
 808ed78:	2306      	movs	r3, #6
 808ed7a:	6063      	str	r3, [r4, #4]
        return( 0 );
 808ed7c:	2000      	movs	r0, #0
 808ed7e:	e092      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ed80:	4620      	mov	r0, r4
 808ed82:	f7fa f899 	bl	8088eb8 <mbedtls_ssl_read_record>
 808ed86:	2800      	cmp	r0, #0
 808ed88:	f040 808d 	bne.w	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808ed8c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808ed8e:	2b16      	cmp	r3, #22
 808ed90:	f47f abd9 	bne.w	808e546 <mbedtls_ssl_handshake_client_step+0xea>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 808ed94:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 808ed96:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 808ed98:	3301      	adds	r3, #1
 808ed9a:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 808ed9c:	7813      	ldrb	r3, [r2, #0]
 808ed9e:	2b0d      	cmp	r3, #13
 808eda0:	bf0c      	ite	eq
 808eda2:	2301      	moveq	r3, #1
 808eda4:	2300      	movne	r3, #0
 808eda6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 808edaa:	d002      	beq.n	808edb2 <mbedtls_ssl_handshake_client_step+0x956>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 808edac:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 808edb0:	e079      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 808edb2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 808edb4:	2904      	cmp	r1, #4
 808edb6:	d806      	bhi.n	808edc6 <mbedtls_ssl_handshake_client_step+0x96a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808edb8:	2232      	movs	r2, #50	; 0x32
 808edba:	2102      	movs	r1, #2
 808edbc:	4620      	mov	r0, r4
 808edbe:	f7f9 fe2d 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 808edc2:	483b      	ldr	r0, [pc, #236]	; (808eeb0 <mbedtls_ssl_handshake_client_step+0xa54>)
 808edc4:	e06f      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 808edc6:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 808edc8:	1ddd      	adds	r5, r3, #7
 808edca:	42a9      	cmp	r1, r5
 808edcc:	d9f4      	bls.n	808edb8 <mbedtls_ssl_handshake_client_step+0x95c>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 808edce:	68e0      	ldr	r0, [r4, #12]
 808edd0:	2803      	cmp	r0, #3
 808edd2:	d109      	bne.n	808ede8 <mbedtls_ssl_handshake_client_step+0x98c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 808edd4:	18d6      	adds	r6, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 808edd6:	7977      	ldrb	r7, [r6, #5]
 808edd8:	79b0      	ldrb	r0, [r6, #6]
 808edda:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 808edde:	4405      	add	r5, r0
 808ede0:	42a9      	cmp	r1, r5
 808ede2:	d9e9      	bls.n	808edb8 <mbedtls_ssl_handshake_client_step+0x95c>
 808ede4:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 808ede6:	4403      	add	r3, r0
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 808ede8:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 808edea:	7950      	ldrb	r0, [r2, #5]
 808edec:	7992      	ldrb	r2, [r2, #6]
 808edee:	3307      	adds	r3, #7
 808edf0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 808edf4:	4413      	add	r3, r2
 808edf6:	4299      	cmp	r1, r3
 808edf8:	d0c0      	beq.n	808ed7c <mbedtls_ssl_handshake_client_step+0x920>
 808edfa:	e7dd      	b.n	808edb8 <mbedtls_ssl_handshake_client_step+0x95c>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808edfc:	2232      	movs	r2, #50	; 0x32
 808edfe:	2102      	movs	r1, #2
 808ee00:	4620      	mov	r0, r4
 808ee02:	f7f9 fe0b 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 808ee06:	482b      	ldr	r0, [pc, #172]	; (808eeb4 <mbedtls_ssl_handshake_client_step+0xa58>)
 808ee08:	e04d      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808ee0a:	482b      	ldr	r0, [pc, #172]	; (808eeb8 <mbedtls_ssl_handshake_client_step+0xa5c>)
 808ee0c:	e04b      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 808ee0e:	482b      	ldr	r0, [pc, #172]	; (808eebc <mbedtls_ssl_handshake_client_step+0xa60>)
 808ee10:	e049      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 808ee12:	9b08      	ldr	r3, [sp, #32]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 808ee14:	2210      	movs	r2, #16
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 808ee16:	3304      	adds	r3, #4
 808ee18:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808ee1c:	2316      	movs	r3, #22
 808ee1e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 808ee22:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808ee26:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 808ee28:	6863      	ldr	r3, [r4, #4]
 808ee2a:	3301      	adds	r3, #1
 808ee2c:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808ee2e:	4620      	mov	r0, r4
 808ee30:	f7f9 fc40 	bl	80886b4 <mbedtls_ssl_write_record>
 808ee34:	e037      	b.n	808eea6 <mbedtls_ssl_handshake_client_step+0xa4a>
    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 808ee36:	7a7a      	ldrb	r2, [r7, #9]
 808ee38:	f897 b008 	ldrb.w	fp, [r7, #8]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 808ee3c:	f897 a004 	ldrb.w	sl, [r7, #4]
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 808ee40:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 808ee44:	f10b 020a 	add.w	r2, fp, #10
 808ee48:	4293      	cmp	r3, r2
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 808ee4a:	797e      	ldrb	r6, [r7, #5]
               ( msg[2] <<  8 ) | ( msg[3]       );
 808ee4c:	f897 9006 	ldrb.w	r9, [r7, #6]
 808ee50:	f897 8007 	ldrb.w	r8, [r7, #7]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 808ee54:	f47f ad40 	bne.w	808e8d8 <mbedtls_ssl_handshake_client_step+0x47c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
 808ee58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808ee5a:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 808ee5e:	230c      	movs	r3, #12
 808ee60:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
 808ee62:	f1bb 0f00 	cmp.w	fp, #0
 808ee66:	d089      	beq.n	808ed7c <mbedtls_ssl_handshake_client_step+0x920>
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
 808ee68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808ee6a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 808ee6c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 808ee6e:	441a      	add	r2, r3
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808ee70:	429a      	cmp	r2, r3
 808ee72:	d002      	beq.n	808ee7a <mbedtls_ssl_handshake_client_step+0xa1e>
 808ee74:	7018      	strb	r0, [r3, #0]
 808ee76:	3301      	adds	r3, #1
 808ee78:	e7fa      	b.n	808ee70 <mbedtls_ssl_handshake_client_step+0xa14>
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 808ee7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket = NULL;
 808ee7c:	2500      	movs	r5, #0
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 808ee7e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 808ee80:	f000 fa70 	bl	808f364 <free>
    ssl->session_negotiate->ticket = NULL;
 808ee84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_len = 0;

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 808ee86:	4659      	mov	r1, fp
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
 808ee88:	665d      	str	r5, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
 808ee8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 808ee8c:	2001      	movs	r0, #1

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
 808ee8e:	669d      	str	r5, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 808ee90:	f001 fb8a 	bl	80905a8 <calloc>
 808ee94:	2800      	cmp	r0, #0
 808ee96:	f47f af56 	bne.w	808ed46 <mbedtls_ssl_handshake_client_step+0x8ea>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808ee9a:	2250      	movs	r2, #80	; 0x50
 808ee9c:	2102      	movs	r1, #2
 808ee9e:	4620      	mov	r0, r4
 808eea0:	f7f9 fdbc 	bl	8088a1c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808eea4:	4806      	ldr	r0, [pc, #24]	; (808eec0 <mbedtls_ssl_handshake_client_step+0xa64>)
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 808eea6:	b015      	add	sp, #84	; 0x54
 808eea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808eeac:	ffff8f80 	.word	0xffff8f80
 808eeb0:	ffff8580 	.word	0xffff8580
 808eeb4:	ffff8480 	.word	0xffff8480
 808eeb8:	ffff8900 	.word	0xffff8900
 808eebc:	ffff9300 	.word	0xffff9300
 808eec0:	ffff8100 	.word	0xffff8100

0808eec4 <_ZN5Crypt11generateKeyEPh>:
#include "Crypt.h"

#include "application.h"

//generate key
int Crypt::generateKey(unsigned char* key){
 808eec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808eec6:	4604      	mov	r4, r0
    int ret=0;

    mbedtls_entropy_init( &entropy );
 808eec8:	f500 75a0 	add.w	r5, r0, #320	; 0x140
 808eecc:	4628      	mov	r0, r5
#include "Crypt.h"

#include "application.h"

//generate key
int Crypt::generateKey(unsigned char* key){
 808eece:	460f      	mov	r7, r1
    int ret=0;

    mbedtls_entropy_init( &entropy );
 808eed0:	f7fe fcb4 	bl	808d83c <mbedtls_entropy_init>

    mbedtls_ctr_drbg_init( &ctr_drbg );
 808eed4:	4620      	mov	r0, r4
 808eed6:	f7ff f9db 	bl	808e290 <mbedtls_ctr_drbg_init>

    mbedtls_ctr_drbg_seed( &ctr_drbg, mbedtls_entropy_func, &entropy,(unsigned char *) pers, strlen(pers) );
 808eeda:	f8d4 63b8 	ldr.w	r6, [r4, #952]	; 0x3b8
 808eede:	4630      	mov	r0, r6
 808eee0:	f001 fbcd 	bl	809067e <strlen>
 808eee4:	4633      	mov	r3, r6
 808eee6:	9000      	str	r0, [sp, #0]
 808eee8:	462a      	mov	r2, r5
 808eeea:	4906      	ldr	r1, [pc, #24]	; (808ef04 <_ZN5Crypt11generateKeyEPh+0x40>)
 808eeec:	4620      	mov	r0, r4
 808eeee:	f7ff fa37 	bl	808e360 <mbedtls_ctr_drbg_seed>
    mbedtls_ctr_drbg_random( &ctr_drbg, key, 32 );
 808eef2:	2220      	movs	r2, #32
 808eef4:	4639      	mov	r1, r7
 808eef6:	4620      	mov	r0, r4
 808eef8:	f7ff fa9d 	bl	808e436 <mbedtls_ctr_drbg_random>

    return ret;
}
 808eefc:	2000      	movs	r0, #0
 808eefe:	b003      	add	sp, #12
 808ef00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ef02:	bf00      	nop
 808ef04:	0808d88d 	.word	0x0808d88d

0808ef08 <_GLOBAL__sub_I__ZN5Crypt11generateKeyEPh>:
 808ef08:	f000 b8cc 	b.w	808f0a4 <HAL_Pin_Map>

0808ef0c <_GLOBAL__sub_I__ZN4CarTC2Ev>:
 808ef0c:	f000 b8ca 	b.w	808f0a4 <HAL_Pin_Map>

0808ef10 <_ZN3AWSC1EPctPFvS0_PhjE>:

AWS::AWS() {
    //add initializations for default case
}

AWS::AWS(char* domain, uint16_t port,void (*callbackRef)(char *, uint8_t *, unsigned int)){
 808ef10:	b5f0      	push	{r4, r5, r6, r7, lr}
 808ef12:	4616      	mov	r6, r2
 808ef14:	460d      	mov	r5, r1
 808ef16:	461f      	mov	r7, r3
 808ef18:	4604      	mov	r4, r0
 808ef1a:	f2ad 6d8c 	subw	sp, sp, #1676	; 0x68c
 808ef1e:	f7f1 fa6f 	bl	8080400 <_ZN4MQTTC1Ev>
    MQTT client(domain, port, callbackRef);
 808ef22:	463b      	mov	r3, r7
 808ef24:	4632      	mov	r2, r6
 808ef26:	4629      	mov	r1, r5
 808ef28:	4668      	mov	r0, sp
 808ef2a:	f7f1 faa1 	bl	8080470 <_ZN4MQTTC1EPctPFvS0_PhjE>
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 808ef2e:	9b01      	ldr	r3, [sp, #4]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808ef30:	9e06      	ldr	r6, [sp, #24]
 808ef32:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 808ef34:	9b02      	ldr	r3, [sp, #8]
 808ef36:	60a3      	str	r3, [r4, #8]
 808ef38:	9b03      	ldr	r3, [sp, #12]
 808ef3a:	60e3      	str	r3, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 808ef3c:	9b04      	ldr	r3, [sp, #16]
 808ef3e:	6123      	str	r3, [r4, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 808ef40:	9b05      	ldr	r3, [sp, #20]
 808ef42:	6163      	str	r3, [r4, #20]

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
 808ef44:	69a3      	ldr	r3, [r4, #24]
 808ef46:	429e      	cmp	r6, r3
 808ef48:	d016      	beq.n	808ef78 <_ZN3AWSC1EPctPFvS0_PhjE+0x68>
	  {
	    if (__tmp != 0)
 808ef4a:	b116      	cbz	r6, 808ef52 <_ZN3AWSC1EPctPFvS0_PhjE+0x42>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808ef4c:	6873      	ldr	r3, [r6, #4]
 808ef4e:	3301      	adds	r3, #1
 808ef50:	6073      	str	r3, [r6, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 808ef52:	69a5      	ldr	r5, [r4, #24]
 808ef54:	b17d      	cbz	r5, 808ef76 <_ZN3AWSC1EPctPFvS0_PhjE+0x66>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808ef56:	686b      	ldr	r3, [r5, #4]
 808ef58:	3b01      	subs	r3, #1
 808ef5a:	606b      	str	r3, [r5, #4]
 808ef5c:	b95b      	cbnz	r3, 808ef76 <_ZN3AWSC1EPctPFvS0_PhjE+0x66>
        {
          _M_dispose();
 808ef5e:	682b      	ldr	r3, [r5, #0]
 808ef60:	4628      	mov	r0, r5
 808ef62:	689b      	ldr	r3, [r3, #8]
 808ef64:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808ef66:	68ab      	ldr	r3, [r5, #8]
 808ef68:	3b01      	subs	r3, #1
 808ef6a:	60ab      	str	r3, [r5, #8]
 808ef6c:	b91b      	cbnz	r3, 808ef76 <_ZN3AWSC1EPctPFvS0_PhjE+0x66>
            _M_destroy();
 808ef6e:	682b      	ldr	r3, [r5, #0]
 808ef70:	4628      	mov	r0, r5
 808ef72:	68db      	ldr	r3, [r3, #12]
 808ef74:	4798      	blx	r3
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 808ef76:	61a6      	str	r6, [r4, #24]
#define MQTTPINGREQ     12 << 4 // PING Request
#define MQTTPINGRESP    13 << 4 // PING Response
#define MQTTDISCONNECT  14 << 4 // Client is Disconnecting
#define MQTTReserved    15 << 4 // Reserved

class MQTT {
 808ef78:	9b07      	ldr	r3, [sp, #28]
 808ef7a:	a90e      	add	r1, sp, #56	; 0x38
 808ef7c:	61e3      	str	r3, [r4, #28]
 808ef7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808ef82:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808ef86:	8423      	strh	r3, [r4, #32]
 808ef88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808ef8a:	f504 65cb 	add.w	r5, r4, #1624	; 0x658
 808ef8e:	6263      	str	r3, [r4, #36]	; 0x24
 808ef90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ef92:	f50d 66cb 	add.w	r6, sp, #1624	; 0x658
 808ef96:	62a3      	str	r3, [r4, #40]	; 0x28
 808ef98:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 808ef9c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 808efa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808efa2:	6323      	str	r3, [r4, #48]	; 0x30
 808efa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808efa6:	6363      	str	r3, [r4, #52]	; 0x34
 808efa8:	f000 fc9c 	bl	808f8e4 <_ZN6StringaSERKS_>
 808efac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808efae:	a916      	add	r1, sp, #88	; 0x58
 808efb0:	64a3      	str	r3, [r4, #72]	; 0x48
 808efb2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 808efb6:	f44f 721e 	mov.w	r2, #632	; 0x278
 808efba:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 808efbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808efc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 808efc4:	6523      	str	r3, [r4, #80]	; 0x50
 808efc6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 808efca:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 808efce:	f001 fb10 	bl	80905f2 <memcpy>
 808efd2:	a9b4      	add	r1, sp, #720	; 0x2d0
 808efd4:	22b4      	movs	r2, #180	; 0xb4
 808efd6:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 808efda:	f001 fb0a 	bl	80905f2 <memcpy>
 808efde:	a9e1      	add	r1, sp, #900	; 0x384
 808efe0:	2264      	movs	r2, #100	; 0x64
 808efe2:	f504 7061 	add.w	r0, r4, #900	; 0x384
 808efe6:	f001 fb04 	bl	80905f2 <memcpy>
 808efea:	a9fa      	add	r1, sp, #1000	; 0x3e8
 808efec:	f44f 729a 	mov.w	r2, #308	; 0x134
 808eff0:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 808eff4:	f001 fafd 	bl	80905f2 <memcpy>
 808eff8:	f20d 511c 	addw	r1, sp, #1308	; 0x51c
 808effc:	f44f 729a 	mov.w	r2, #308	; 0x134
 808f000:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 808f004:	f001 faf5 	bl	80905f2 <memcpy>
 808f008:	f504 63ca 	add.w	r3, r4, #1616	; 0x650
 808f00c:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 808f010:	e892 0003 	ldmia.w	r2, {r0, r1}
 808f014:	e883 0003 	stmia.w	r3, {r0, r1}
 808f018:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 808f01a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808f01c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 808f01e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808f020:	e896 0003 	ldmia.w	r6, {r0, r1}
 808f024:	f89d 3680 	ldrb.w	r3, [sp, #1664]	; 0x680
 808f028:	e885 0003 	stmia.w	r5, {r0, r1}
 808f02c:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
 808f030:	f89d 3681 	ldrb.w	r3, [sp, #1665]	; 0x681
 808f034:	4668      	mov	r0, sp
 808f036:	f884 3681 	strb.w	r3, [r4, #1665]	; 0x681
 808f03a:	f89d 3682 	ldrb.w	r3, [sp, #1666]	; 0x682
 808f03e:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
 808f042:	f7f1 fbfd 	bl	8080840 <_ZN4MQTTD1Ev>
    awsMqtt = client;
}
 808f046:	4620      	mov	r0, r4
 808f048:	f20d 6d8c 	addw	sp, sp, #1676	; 0x68c
 808f04c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808f04e <_ZN3AWS11isConnectedEv>:

bool AWS::isConnected(){
    return (awsMqtt.isConnected());
 808f04e:	f7f1 bb3e 	b.w	80806ce <_ZN4MQTT11isConnectedEv>

0808f052 <_ZN3AWS7publishEPKcS1_>:
}

bool AWS::publish(const char * topic, const char *message){
    return (awsMqtt.publish(topic, message));
 808f052:	f7f1 bbb6 	b.w	80807c2 <_ZN4MQTT7publishEPKcS1_>

0808f056 <_ZN3AWS9subscribeEPKc>:
}

bool AWS::subscribe(const char * topic){
    return (awsMqtt.subscribe(topic));
 808f056:	f7f1 bbf0 	b.w	808083a <_ZN4MQTT9subscribeEPKc>

0808f05a <_ZN3AWS4loopEv>:
}

bool AWS::loop(){
    awsMqtt.loop();
 808f05a:	f7f1 bc0c 	b.w	8080876 <_ZN4MQTT4loopEv>
	...

0808f060 <_ZN3AWS8setupConEPKc>:
bool AWS::setupCon(const char* clientID) {
    bool ret=0;

    awsMqtt.enableTls(amazonIoTRootCaPem, sizeof(amazonIoTRootCaPem),
                     clientKeyCrtPem, sizeof(clientKeyCrtPem),
                     clientKeyPem, sizeof(clientKeyPem));
 808f060:	f240 63a6 	movw	r3, #1702	; 0x6a6

bool AWS::connect(const char * clientID){
    return(setupCon(clientID));  
}

bool AWS::setupCon(const char* clientID) {
 808f064:	b530      	push	{r4, r5, lr}
 808f066:	4604      	mov	r4, r0
 808f068:	460d      	mov	r5, r1
 808f06a:	b085      	sub	sp, #20
    bool ret=0;

    awsMqtt.enableTls(amazonIoTRootCaPem, sizeof(amazonIoTRootCaPem),
                     clientKeyCrtPem, sizeof(clientKeyCrtPem),
                     clientKeyPem, sizeof(clientKeyPem));
 808f06c:	9302      	str	r3, [sp, #8]
 808f06e:	4b09      	ldr	r3, [pc, #36]	; (808f094 <_ZN3AWS8setupConEPKc+0x34>)
 808f070:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 808f074:	9301      	str	r3, [sp, #4]
 808f076:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 808f07a:	9300      	str	r3, [sp, #0]
 808f07c:	4906      	ldr	r1, [pc, #24]	; (808f098 <_ZN3AWS8setupConEPKc+0x38>)
 808f07e:	4b07      	ldr	r3, [pc, #28]	; (808f09c <_ZN3AWS8setupConEPKc+0x3c>)
 808f080:	f7f1 fcc8 	bl	8080a14 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>

    ret = awsMqtt.connect(clientID);               
 808f084:	4629      	mov	r1, r5
 808f086:	4620      	mov	r0, r4
    return(ret);  
}
 808f088:	b005      	add	sp, #20
 808f08a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

    awsMqtt.enableTls(amazonIoTRootCaPem, sizeof(amazonIoTRootCaPem),
                     clientKeyCrtPem, sizeof(clientKeyCrtPem),
                     clientKeyPem, sizeof(clientKeyPem));

    ret = awsMqtt.connect(clientID);               
 808f08e:	f7f1 bead 	b.w	8080dec <_ZN4MQTT7connectEPKc>
 808f092:	bf00      	nop
 808f094:	0809310d 	.word	0x0809310d
 808f098:	08092a2d 	.word	0x08092a2d
 808f09c:	080937b3 	.word	0x080937b3

0808f0a0 <_ZN3AWS7connectEPKc>:
bool AWS::loop(){
    awsMqtt.loop();
}

bool AWS::connect(const char * clientID){
    return(setupCon(clientID));  
 808f0a0:	f7ff bfde 	b.w	808f060 <_ZN3AWS8setupConEPKc>

0808f0a4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 808f0a4:	b508      	push	{r3, lr}
 808f0a6:	4b02      	ldr	r3, [pc, #8]	; (808f0b0 <HAL_Pin_Map+0xc>)
 808f0a8:	681b      	ldr	r3, [r3, #0]
 808f0aa:	681b      	ldr	r3, [r3, #0]
 808f0ac:	9301      	str	r3, [sp, #4]
 808f0ae:	bd08      	pop	{r3, pc}
 808f0b0:	080401b0 	.word	0x080401b0

0808f0b4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 808f0b4:	b508      	push	{r3, lr}
 808f0b6:	4b02      	ldr	r3, [pc, #8]	; (808f0c0 <HAL_SPI_Init+0xc>)
 808f0b8:	681b      	ldr	r3, [r3, #0]
 808f0ba:	69db      	ldr	r3, [r3, #28]
 808f0bc:	9301      	str	r3, [sp, #4]
 808f0be:	bd08      	pop	{r3, pc}
 808f0c0:	080401b4 	.word	0x080401b4

0808f0c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808f0c4:	b508      	push	{r3, lr}
 808f0c6:	4b02      	ldr	r3, [pc, #8]	; (808f0d0 <HAL_RNG_GetRandomNumber+0xc>)
 808f0c8:	681b      	ldr	r3, [r3, #0]
 808f0ca:	685b      	ldr	r3, [r3, #4]
 808f0cc:	9301      	str	r3, [sp, #4]
 808f0ce:	bd08      	pop	{r3, pc}
 808f0d0:	0804019c 	.word	0x0804019c

0808f0d4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808f0d4:	b508      	push	{r3, lr}
 808f0d6:	4b02      	ldr	r3, [pc, #8]	; (808f0e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808f0d8:	681b      	ldr	r3, [r3, #0]
 808f0da:	695b      	ldr	r3, [r3, #20]
 808f0dc:	9301      	str	r3, [sp, #4]
 808f0de:	bd08      	pop	{r3, pc}
 808f0e0:	0804019c 	.word	0x0804019c

0808f0e4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 808f0e4:	b508      	push	{r3, lr}
 808f0e6:	4b02      	ldr	r3, [pc, #8]	; (808f0f0 <HAL_RTC_Get_UnixTime+0xc>)
 808f0e8:	681b      	ldr	r3, [r3, #0]
 808f0ea:	69db      	ldr	r3, [r3, #28]
 808f0ec:	9301      	str	r3, [sp, #4]
 808f0ee:	bd08      	pop	{r3, pc}
 808f0f0:	0804019c 	.word	0x0804019c

0808f0f4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808f0f4:	b508      	push	{r3, lr}
 808f0f6:	4b02      	ldr	r3, [pc, #8]	; (808f100 <os_mutex_create+0xc>)
 808f0f8:	681b      	ldr	r3, [r3, #0]
 808f0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808f0fc:	9301      	str	r3, [sp, #4]
 808f0fe:	bd08      	pop	{r3, pc}
 808f100:	080401d0 	.word	0x080401d0

0808f104 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 808f104:	b508      	push	{r3, lr}
 808f106:	4b02      	ldr	r3, [pc, #8]	; (808f110 <os_mutex_lock+0xc>)
 808f108:	681b      	ldr	r3, [r3, #0]
 808f10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808f10c:	9301      	str	r3, [sp, #4]
 808f10e:	bd08      	pop	{r3, pc}
 808f110:	080401d0 	.word	0x080401d0

0808f114 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 808f114:	b508      	push	{r3, lr}
 808f116:	4b02      	ldr	r3, [pc, #8]	; (808f120 <HAL_USART_Init+0xc>)
 808f118:	681b      	ldr	r3, [r3, #0]
 808f11a:	699b      	ldr	r3, [r3, #24]
 808f11c:	9301      	str	r3, [sp, #4]
 808f11e:	bd08      	pop	{r3, pc}
 808f120:	080401c4 	.word	0x080401c4

0808f124 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 808f124:	b508      	push	{r3, lr}
 808f126:	4b02      	ldr	r3, [pc, #8]	; (808f130 <HAL_USART_Write_Data+0xc>)
 808f128:	681b      	ldr	r3, [r3, #0]
 808f12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808f12c:	9301      	str	r3, [sp, #4]
 808f12e:	bd08      	pop	{r3, pc}
 808f130:	080401c4 	.word	0x080401c4

0808f134 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 808f134:	b508      	push	{r3, lr}
 808f136:	4b02      	ldr	r3, [pc, #8]	; (808f140 <HAL_USART_Available_Data+0xc>)
 808f138:	681b      	ldr	r3, [r3, #0]
 808f13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808f13c:	9301      	str	r3, [sp, #4]
 808f13e:	bd08      	pop	{r3, pc}
 808f140:	080401c4 	.word	0x080401c4

0808f144 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 808f144:	b508      	push	{r3, lr}
 808f146:	4b02      	ldr	r3, [pc, #8]	; (808f150 <HAL_USART_Read_Data+0xc>)
 808f148:	681b      	ldr	r3, [r3, #0]
 808f14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808f14c:	9301      	str	r3, [sp, #4]
 808f14e:	bd08      	pop	{r3, pc}
 808f150:	080401c4 	.word	0x080401c4

0808f154 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 808f154:	b508      	push	{r3, lr}
 808f156:	4b02      	ldr	r3, [pc, #8]	; (808f160 <HAL_USART_Peek_Data+0xc>)
 808f158:	681b      	ldr	r3, [r3, #0]
 808f15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808f15c:	9301      	str	r3, [sp, #4]
 808f15e:	bd08      	pop	{r3, pc}
 808f160:	080401c4 	.word	0x080401c4

0808f164 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 808f164:	b508      	push	{r3, lr}
 808f166:	4b02      	ldr	r3, [pc, #8]	; (808f170 <HAL_USART_Flush_Data+0xc>)
 808f168:	681b      	ldr	r3, [r3, #0]
 808f16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808f16c:	9301      	str	r3, [sp, #4]
 808f16e:	bd08      	pop	{r3, pc}
 808f170:	080401c4 	.word	0x080401c4

0808f174 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 808f174:	b508      	push	{r3, lr}
 808f176:	4b02      	ldr	r3, [pc, #8]	; (808f180 <HAL_USART_Available_Data_For_Write+0xc>)
 808f178:	681b      	ldr	r3, [r3, #0]
 808f17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808f17c:	9301      	str	r3, [sp, #4]
 808f17e:	bd08      	pop	{r3, pc}
 808f180:	080401c4 	.word	0x080401c4

0808f184 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 808f184:	b508      	push	{r3, lr}
 808f186:	4b02      	ldr	r3, [pc, #8]	; (808f190 <socket_active_status+0xc>)
 808f188:	681b      	ldr	r3, [r3, #0]
 808f18a:	681b      	ldr	r3, [r3, #0]
 808f18c:	9301      	str	r3, [sp, #4]
 808f18e:	bd08      	pop	{r3, pc}
 808f190:	08060024 	.word	0x08060024

0808f194 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 808f194:	b508      	push	{r3, lr}
 808f196:	4b02      	ldr	r3, [pc, #8]	; (808f1a0 <socket_handle_valid+0xc>)
 808f198:	681b      	ldr	r3, [r3, #0]
 808f19a:	685b      	ldr	r3, [r3, #4]
 808f19c:	9301      	str	r3, [sp, #4]
 808f19e:	bd08      	pop	{r3, pc}
 808f1a0:	08060024 	.word	0x08060024

0808f1a4 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 808f1a4:	b508      	push	{r3, lr}
 808f1a6:	4b02      	ldr	r3, [pc, #8]	; (808f1b0 <socket_create+0xc>)
 808f1a8:	681b      	ldr	r3, [r3, #0]
 808f1aa:	689b      	ldr	r3, [r3, #8]
 808f1ac:	9301      	str	r3, [sp, #4]
 808f1ae:	bd08      	pop	{r3, pc}
 808f1b0:	08060024 	.word	0x08060024

0808f1b4 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 808f1b4:	b508      	push	{r3, lr}
 808f1b6:	4b02      	ldr	r3, [pc, #8]	; (808f1c0 <socket_connect+0xc>)
 808f1b8:	681b      	ldr	r3, [r3, #0]
 808f1ba:	68db      	ldr	r3, [r3, #12]
 808f1bc:	9301      	str	r3, [sp, #4]
 808f1be:	bd08      	pop	{r3, pc}
 808f1c0:	08060024 	.word	0x08060024

0808f1c4 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 808f1c4:	b508      	push	{r3, lr}
 808f1c6:	4b02      	ldr	r3, [pc, #8]	; (808f1d0 <socket_receive+0xc>)
 808f1c8:	681b      	ldr	r3, [r3, #0]
 808f1ca:	691b      	ldr	r3, [r3, #16]
 808f1cc:	9301      	str	r3, [sp, #4]
 808f1ce:	bd08      	pop	{r3, pc}
 808f1d0:	08060024 	.word	0x08060024

0808f1d4 <socket_send>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
 808f1d4:	b508      	push	{r3, lr}
 808f1d6:	4b02      	ldr	r3, [pc, #8]	; (808f1e0 <socket_send+0xc>)
 808f1d8:	681b      	ldr	r3, [r3, #0]
 808f1da:	699b      	ldr	r3, [r3, #24]
 808f1dc:	9301      	str	r3, [sp, #4]
 808f1de:	bd08      	pop	{r3, pc}
 808f1e0:	08060024 	.word	0x08060024

0808f1e4 <socket_close>:
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 808f1e4:	b508      	push	{r3, lr}
 808f1e6:	4b02      	ldr	r3, [pc, #8]	; (808f1f0 <socket_close+0xc>)
 808f1e8:	681b      	ldr	r3, [r3, #0]
 808f1ea:	6a1b      	ldr	r3, [r3, #32]
 808f1ec:	9301      	str	r3, [sp, #4]
 808f1ee:	bd08      	pop	{r3, pc}
 808f1f0:	08060024 	.word	0x08060024

0808f1f4 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 808f1f4:	b508      	push	{r3, lr}
 808f1f6:	4b02      	ldr	r3, [pc, #8]	; (808f200 <socket_handle_invalid+0xc>)
 808f1f8:	681b      	ldr	r3, [r3, #0]
 808f1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808f1fc:	9301      	str	r3, [sp, #4]
 808f1fe:	bd08      	pop	{r3, pc}
 808f200:	08060024 	.word	0x08060024

0808f204 <cellular_credentials_set>:
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
 808f204:	b508      	push	{r3, lr}
 808f206:	4b02      	ldr	r3, [pc, #8]	; (808f210 <cellular_credentials_set+0xc>)
 808f208:	681b      	ldr	r3, [r3, #0]
 808f20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808f20c:	9301      	str	r3, [sp, #4]
 808f20e:	bd08      	pop	{r3, pc}
 808f210:	08060020 	.word	0x08060020

0808f214 <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 808f214:	b508      	push	{r3, lr}
 808f216:	4b02      	ldr	r3, [pc, #8]	; (808f220 <HAL_NET_SetNetWatchDog+0xc>)
 808f218:	681b      	ldr	r3, [r3, #0]
 808f21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808f21c:	9301      	str	r3, [sp, #4]
 808f21e:	bd08      	pop	{r3, pc}
 808f220:	08060020 	.word	0x08060020

0808f224 <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808f224:	b508      	push	{r3, lr}
 808f226:	4b02      	ldr	r3, [pc, #8]	; (808f230 <inet_gethostbyname+0xc>)
 808f228:	681b      	ldr	r3, [r3, #0]
 808f22a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808f22c:	9301      	str	r3, [sp, #4]
 808f22e:	bd08      	pop	{r3, pc}
 808f230:	08060020 	.word	0x08060020

0808f234 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808f234:	b508      	push	{r3, lr}
 808f236:	4b02      	ldr	r3, [pc, #8]	; (808f240 <HAL_USB_USART_Init+0xc>)
 808f238:	681b      	ldr	r3, [r3, #0]
 808f23a:	681b      	ldr	r3, [r3, #0]
 808f23c:	9301      	str	r3, [sp, #4]
 808f23e:	bd08      	pop	{r3, pc}
 808f240:	0806001c 	.word	0x0806001c

0808f244 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 808f244:	b508      	push	{r3, lr}
 808f246:	4b02      	ldr	r3, [pc, #8]	; (808f250 <HAL_USB_USART_Begin+0xc>)
 808f248:	681b      	ldr	r3, [r3, #0]
 808f24a:	685b      	ldr	r3, [r3, #4]
 808f24c:	9301      	str	r3, [sp, #4]
 808f24e:	bd08      	pop	{r3, pc}
 808f250:	0806001c 	.word	0x0806001c

0808f254 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808f254:	b508      	push	{r3, lr}
 808f256:	4b02      	ldr	r3, [pc, #8]	; (808f260 <HAL_USB_USART_Available_Data+0xc>)
 808f258:	681b      	ldr	r3, [r3, #0]
 808f25a:	691b      	ldr	r3, [r3, #16]
 808f25c:	9301      	str	r3, [sp, #4]
 808f25e:	bd08      	pop	{r3, pc}
 808f260:	0806001c 	.word	0x0806001c

0808f264 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808f264:	b508      	push	{r3, lr}
 808f266:	4b02      	ldr	r3, [pc, #8]	; (808f270 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808f268:	681b      	ldr	r3, [r3, #0]
 808f26a:	695b      	ldr	r3, [r3, #20]
 808f26c:	9301      	str	r3, [sp, #4]
 808f26e:	bd08      	pop	{r3, pc}
 808f270:	0806001c 	.word	0x0806001c

0808f274 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808f274:	b508      	push	{r3, lr}
 808f276:	4b02      	ldr	r3, [pc, #8]	; (808f280 <HAL_USB_USART_Receive_Data+0xc>)
 808f278:	681b      	ldr	r3, [r3, #0]
 808f27a:	699b      	ldr	r3, [r3, #24]
 808f27c:	9301      	str	r3, [sp, #4]
 808f27e:	bd08      	pop	{r3, pc}
 808f280:	0806001c 	.word	0x0806001c

0808f284 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808f284:	b508      	push	{r3, lr}
 808f286:	4b02      	ldr	r3, [pc, #8]	; (808f290 <HAL_USB_USART_Send_Data+0xc>)
 808f288:	681b      	ldr	r3, [r3, #0]
 808f28a:	69db      	ldr	r3, [r3, #28]
 808f28c:	9301      	str	r3, [sp, #4]
 808f28e:	bd08      	pop	{r3, pc}
 808f290:	0806001c 	.word	0x0806001c

0808f294 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808f294:	b508      	push	{r3, lr}
 808f296:	4b02      	ldr	r3, [pc, #8]	; (808f2a0 <HAL_USB_USART_Flush_Data+0xc>)
 808f298:	681b      	ldr	r3, [r3, #0]
 808f29a:	6a1b      	ldr	r3, [r3, #32]
 808f29c:	9301      	str	r3, [sp, #4]
 808f29e:	bd08      	pop	{r3, pc}
 808f2a0:	0806001c 	.word	0x0806001c

0808f2a4 <LED_SetSignalingColor>:
#include "dynalib.h"

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 808f2a4:	b508      	push	{r3, lr}
 808f2a6:	4b02      	ldr	r3, [pc, #8]	; (808f2b0 <LED_SetSignalingColor+0xc>)
 808f2a8:	681b      	ldr	r3, [r3, #0]
 808f2aa:	685b      	ldr	r3, [r3, #4]
 808f2ac:	9301      	str	r3, [sp, #4]
 808f2ae:	bd08      	pop	{r3, pc}
 808f2b0:	080201a0 	.word	0x080201a0

0808f2b4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 808f2b4:	b508      	push	{r3, lr}
 808f2b6:	4b02      	ldr	r3, [pc, #8]	; (808f2c0 <LED_RGB_IsOverRidden+0xc>)
 808f2b8:	681b      	ldr	r3, [r3, #0]
 808f2ba:	699b      	ldr	r3, [r3, #24]
 808f2bc:	9301      	str	r3, [sp, #4]
 808f2be:	bd08      	pop	{r3, pc}
 808f2c0:	080201a0 	.word	0x080201a0

0808f2c4 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 808f2c4:	b508      	push	{r3, lr}
 808f2c6:	4b02      	ldr	r3, [pc, #8]	; (808f2d0 <LED_On+0xc>)
 808f2c8:	681b      	ldr	r3, [r3, #0]
 808f2ca:	69db      	ldr	r3, [r3, #28]
 808f2cc:	9301      	str	r3, [sp, #4]
 808f2ce:	bd08      	pop	{r3, pc}
 808f2d0:	080201a0 	.word	0x080201a0

0808f2d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808f2d4:	b508      	push	{r3, lr}
 808f2d6:	4b02      	ldr	r3, [pc, #8]	; (808f2e0 <set_system_mode+0xc>)
 808f2d8:	681b      	ldr	r3, [r3, #0]
 808f2da:	685b      	ldr	r3, [r3, #4]
 808f2dc:	9301      	str	r3, [sp, #4]
 808f2de:	bd08      	pop	{r3, pc}
 808f2e0:	080401a4 	.word	0x080401a4

0808f2e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808f2e4:	b508      	push	{r3, lr}
 808f2e6:	4b02      	ldr	r3, [pc, #8]	; (808f2f0 <system_delay_ms+0xc>)
 808f2e8:	681b      	ldr	r3, [r3, #0]
 808f2ea:	695b      	ldr	r3, [r3, #20]
 808f2ec:	9301      	str	r3, [sp, #4]
 808f2ee:	bd08      	pop	{r3, pc}
 808f2f0:	080401a4 	.word	0x080401a4

0808f2f4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808f2f4:	b508      	push	{r3, lr}
 808f2f6:	4b02      	ldr	r3, [pc, #8]	; (808f300 <system_thread_set_state+0xc>)
 808f2f8:	681b      	ldr	r3, [r3, #0]
 808f2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808f2fc:	9301      	str	r3, [sp, #4]
 808f2fe:	bd08      	pop	{r3, pc}
 808f300:	080401a4 	.word	0x080401a4

0808f304 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 808f304:	b508      	push	{r3, lr}
 808f306:	4b02      	ldr	r3, [pc, #8]	; (808f310 <system_set_usb_request_app_handler+0xc>)
 808f308:	681b      	ldr	r3, [r3, #0]
 808f30a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808f30c:	9301      	str	r3, [sp, #4]
 808f30e:	bd08      	pop	{r3, pc}
 808f310:	080401a4 	.word	0x080401a4

0808f314 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 808f314:	b508      	push	{r3, lr}
 808f316:	4b02      	ldr	r3, [pc, #8]	; (808f320 <system_set_usb_request_result+0xc>)
 808f318:	681b      	ldr	r3, [r3, #0]
 808f31a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808f31c:	9301      	str	r3, [sp, #4]
 808f31e:	bd08      	pop	{r3, pc}
 808f320:	080401a4 	.word	0x080401a4

0808f324 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808f324:	b508      	push	{r3, lr}
 808f326:	4b02      	ldr	r3, [pc, #8]	; (808f330 <network_connect+0xc>)
 808f328:	681b      	ldr	r3, [r3, #0]
 808f32a:	685b      	ldr	r3, [r3, #4]
 808f32c:	9301      	str	r3, [sp, #4]
 808f32e:	bd08      	pop	{r3, pc}
 808f330:	080401c8 	.word	0x080401c8

0808f334 <network_ready>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808f334:	b508      	push	{r3, lr}
 808f336:	4b02      	ldr	r3, [pc, #8]	; (808f340 <network_ready+0xc>)
 808f338:	681b      	ldr	r3, [r3, #0]
 808f33a:	691b      	ldr	r3, [r3, #16]
 808f33c:	9301      	str	r3, [sp, #4]
 808f33e:	bd08      	pop	{r3, pc}
 808f340:	080401c8 	.word	0x080401c8

0808f344 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808f344:	b508      	push	{r3, lr}
 808f346:	4b02      	ldr	r3, [pc, #8]	; (808f350 <network_on+0xc>)
 808f348:	681b      	ldr	r3, [r3, #0]
 808f34a:	695b      	ldr	r3, [r3, #20]
 808f34c:	9301      	str	r3, [sp, #4]
 808f34e:	bd08      	pop	{r3, pc}
 808f350:	080401c8 	.word	0x080401c8

0808f354 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808f354:	b508      	push	{r3, lr}
 808f356:	4b02      	ldr	r3, [pc, #8]	; (808f360 <malloc+0xc>)
 808f358:	681b      	ldr	r3, [r3, #0]
 808f35a:	681b      	ldr	r3, [r3, #0]
 808f35c:	9301      	str	r3, [sp, #4]
 808f35e:	bd08      	pop	{r3, pc}
 808f360:	080401a0 	.word	0x080401a0

0808f364 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808f364:	b508      	push	{r3, lr}
 808f366:	4b02      	ldr	r3, [pc, #8]	; (808f370 <free+0xc>)
 808f368:	681b      	ldr	r3, [r3, #0]
 808f36a:	685b      	ldr	r3, [r3, #4]
 808f36c:	9301      	str	r3, [sp, #4]
 808f36e:	bd08      	pop	{r3, pc}
 808f370:	080401a0 	.word	0x080401a0

0808f374 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808f374:	b508      	push	{r3, lr}
 808f376:	4b02      	ldr	r3, [pc, #8]	; (808f380 <realloc+0xc>)
 808f378:	681b      	ldr	r3, [r3, #0]
 808f37a:	689b      	ldr	r3, [r3, #8]
 808f37c:	9301      	str	r3, [sp, #4]
 808f37e:	bd08      	pop	{r3, pc}
 808f380:	080401a0 	.word	0x080401a0

0808f384 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 808f384:	b508      	push	{r3, lr}
 808f386:	4b02      	ldr	r3, [pc, #8]	; (808f390 <sprintf+0xc>)
 808f388:	681b      	ldr	r3, [r3, #0]
 808f38a:	68db      	ldr	r3, [r3, #12]
 808f38c:	9301      	str	r3, [sp, #4]
 808f38e:	bd08      	pop	{r3, pc}
 808f390:	080401a0 	.word	0x080401a0

0808f394 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808f394:	b508      	push	{r3, lr}
 808f396:	4b02      	ldr	r3, [pc, #8]	; (808f3a0 <snprintf+0xc>)
 808f398:	681b      	ldr	r3, [r3, #0]
 808f39a:	69db      	ldr	r3, [r3, #28]
 808f39c:	9301      	str	r3, [sp, #4]
 808f39e:	bd08      	pop	{r3, pc}
 808f3a0:	080401a0 	.word	0x080401a0

0808f3a4 <_malloc_r>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808f3a4:	b508      	push	{r3, lr}
 808f3a6:	4b02      	ldr	r3, [pc, #8]	; (808f3b0 <_malloc_r+0xc>)
 808f3a8:	681b      	ldr	r3, [r3, #0]
 808f3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808f3ac:	9301      	str	r3, [sp, #4]
 808f3ae:	bd08      	pop	{r3, pc}
 808f3b0:	080401a0 	.word	0x080401a0

0808f3b4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 808f3b4:	4770      	bx	lr

0808f3b6 <_ZN8SPIClassD0Ev>:
 808f3b6:	b510      	push	{r4, lr}
 808f3b8:	4604      	mov	r4, r0
 808f3ba:	f7f0 fe72 	bl	80800a2 <_ZdlPv>
 808f3be:	4620      	mov	r0, r4
 808f3c0:	bd10      	pop	{r4, pc}
	...

0808f3c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 808f3c4:	b570      	push	{r4, r5, r6, lr}
 808f3c6:	4604      	mov	r4, r0
 808f3c8:	460e      	mov	r6, r1
 808f3ca:	4b07      	ldr	r3, [pc, #28]	; (808f3e8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 808f3cc:	2500      	movs	r5, #0
 808f3ce:	6003      	str	r3, [r0, #0]
 808f3d0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 808f3d4:	f7ff fe8e 	bl	808f0f4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 808f3d8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808f3da:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 808f3dc:	f7ff fe6a 	bl	808f0b4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 808f3e0:	60a5      	str	r5, [r4, #8]
}
 808f3e2:	4620      	mov	r0, r4
 808f3e4:	bd70      	pop	{r4, r5, r6, pc}
 808f3e6:	bf00      	nop
 808f3e8:	08093c94 	.word	0x08093c94

0808f3ec <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808f3ec:	2000      	movs	r0, #0
 808f3ee:	f7ff bf71 	b.w	808f2d4 <set_system_mode>

0808f3f2 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 808f3f2:	b513      	push	{r0, r1, r4, lr}
 808f3f4:	ab02      	add	r3, sp, #8
        return write(&b, 1);
 808f3f6:	6802      	ldr	r2, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 808f3f8:	f803 1d01 	strb.w	r1, [r3, #-1]!
        return write(&b, 1);
 808f3fc:	68d4      	ldr	r4, [r2, #12]
 808f3fe:	4619      	mov	r1, r3
 808f400:	2201      	movs	r2, #1
 808f402:	47a0      	blx	r4
}
 808f404:	b002      	add	sp, #8
 808f406:	bd10      	pop	{r4, pc}

0808f408 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 808f408:	4770      	bx	lr
	...

0808f40c <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 808f40c:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 808f40e:	4903      	ldr	r1, [pc, #12]	; (808f41c <_ZN9TCPClient8remoteIPEv+0x10>)
 808f410:	6001      	str	r1, [r0, #0]
 808f412:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 808f416:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 808f418:	4770      	bx	lr
 808f41a:	bf00      	nop
 808f41c:	08093e04 	.word	0x08093e04

0808f420 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 808f420:	4770      	bx	lr

0808f422 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 808f422:	2000      	movs	r0, #0
 808f424:	4770      	bx	lr

0808f426 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 808f426:	b510      	push	{r4, lr}
 808f428:	4604      	mov	r4, r0
 808f42a:	f7f0 fe3a 	bl	80800a2 <_ZdlPv>
 808f42e:	4620      	mov	r0, r4
 808f430:	bd10      	pop	{r4, pc}

0808f432 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 808f432:	f7f0 be36 	b.w	80800a2 <_ZdlPv>
	...

0808f438 <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 808f438:	b5f0      	push	{r4, r5, r6, r7, lr}
 808f43a:	461d      	mov	r5, r3
    stop();
 808f43c:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 808f43e:	b087      	sub	sp, #28
    stop();
 808f440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 808f442:	4604      	mov	r4, r0
 808f444:	460e      	mov	r6, r1
 808f446:	4617      	mov	r7, r2
    stop();
 808f448:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 808f44a:	4b11      	ldr	r3, [pc, #68]	; (808f490 <_ZN9TCPClient7connectEPKctm+0x58>)
 808f44c:	6818      	ldr	r0, [r3, #0]
 808f44e:	6803      	ldr	r3, [r0, #0]
 808f450:	681b      	ldr	r3, [r3, #0]
 808f452:	4798      	blx	r3
 808f454:	b1c8      	cbz	r0, 808f48a <_ZN9TCPClient7connectEPKctm+0x52>
      {
        IPAddress ip_addr;
 808f456:	a802      	add	r0, sp, #8
 808f458:	f000 fc08 	bl	808fc6c <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 808f45c:	4630      	mov	r0, r6
 808f45e:	f001 f90e 	bl	809067e <strlen>
 808f462:	2300      	movs	r3, #0
 808f464:	9300      	str	r3, [sp, #0]
 808f466:	b281      	uxth	r1, r0
 808f468:	462b      	mov	r3, r5
 808f46a:	aa03      	add	r2, sp, #12
 808f46c:	4630      	mov	r0, r6
 808f46e:	f7ff fed9 	bl	808f224 <inet_gethostbyname>
 808f472:	b950      	cbnz	r0, 808f48a <_ZN9TCPClient7connectEPKctm+0x52>
        {
                return connect(ip_addr, port, nif);
 808f474:	6823      	ldr	r3, [r4, #0]
 808f476:	463a      	mov	r2, r7
 808f478:	6a1e      	ldr	r6, [r3, #32]
 808f47a:	4b06      	ldr	r3, [pc, #24]	; (808f494 <_ZN9TCPClient7connectEPKctm+0x5c>)
 808f47c:	a904      	add	r1, sp, #16
 808f47e:	9304      	str	r3, [sp, #16]
 808f480:	9b03      	ldr	r3, [sp, #12]
 808f482:	4620      	mov	r0, r4
 808f484:	9305      	str	r3, [sp, #20]
 808f486:	462b      	mov	r3, r5
 808f488:	47b0      	blx	r6
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 808f48a:	b007      	add	sp, #28
 808f48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808f48e:	bf00      	nop
 808f490:	08093e4c 	.word	0x08093e4c
 808f494:	08093e04 	.word	0x08093e04

0808f498 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 808f498:	b510      	push	{r4, lr}
 808f49a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 808f49c:	6803      	ldr	r3, [r0, #0]
 808f49e:	689b      	ldr	r3, [r3, #8]
 808f4a0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808f4a2:	68a3      	ldr	r3, [r4, #8]
 808f4a4:	3b01      	subs	r3, #1
 808f4a6:	60a3      	str	r3, [r4, #8]
 808f4a8:	b92b      	cbnz	r3, 808f4b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32+0x1e>
            _M_destroy();
 808f4aa:	6823      	ldr	r3, [r4, #0]
 808f4ac:	4620      	mov	r0, r4
        }
    }
 808f4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 808f4b2:	68db      	ldr	r3, [r3, #12]
 808f4b4:	4718      	bx	r3
 808f4b6:	bd10      	pop	{r4, pc}

0808f4b8 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 808f4b8:	b510      	push	{r4, lr}
 808f4ba:	6943      	ldr	r3, [r0, #20]
 808f4bc:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 808f4be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 808f4c2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 808f4c6:	429a      	cmp	r2, r3
 808f4c8:	d005      	beq.n	808f4d6 <_ZN9TCPClient4peekEv+0x1e>
 808f4ca:	6962      	ldr	r2, [r4, #20]
 808f4cc:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 808f4d0:	4413      	add	r3, r2
 808f4d2:	7918      	ldrb	r0, [r3, #4]
 808f4d4:	bd10      	pop	{r4, pc}
 808f4d6:	6803      	ldr	r3, [r0, #0]
 808f4d8:	691b      	ldr	r3, [r3, #16]
 808f4da:	4798      	blx	r3
 808f4dc:	2800      	cmp	r0, #0
 808f4de:	d1f4      	bne.n	808f4ca <_ZN9TCPClient4peekEv+0x12>
 808f4e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 808f4e4:	bd10      	pop	{r4, pc}

0808f4e6 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 808f4e6:	b510      	push	{r4, lr}
 808f4e8:	6943      	ldr	r3, [r0, #20]
 808f4ea:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 808f4ec:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 808f4f0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 808f4f4:	429a      	cmp	r2, r3
 808f4f6:	d008      	beq.n	808f50a <_ZN9TCPClient4readEv+0x24>
 808f4f8:	6962      	ldr	r2, [r4, #20]
 808f4fa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 808f4fe:	1c59      	adds	r1, r3, #1
 808f500:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 808f504:	4413      	add	r3, r2
 808f506:	7918      	ldrb	r0, [r3, #4]
 808f508:	bd10      	pop	{r4, pc}
 808f50a:	6803      	ldr	r3, [r0, #0]
 808f50c:	691b      	ldr	r3, [r3, #16]
 808f50e:	4798      	blx	r3
 808f510:	2800      	cmp	r0, #0
 808f512:	d1f1      	bne.n	808f4f8 <_ZN9TCPClient4readEv+0x12>
 808f514:	f04f 30ff 	mov.w	r0, #4294967295
}
 808f518:	bd10      	pop	{r4, pc}

0808f51a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 808f51a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 808f51c:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 808f51e:	6820      	ldr	r0, [r4, #0]
 808f520:	f7ff fe38 	bl	808f194 <socket_handle_valid>
 808f524:	b110      	cbz	r0, 808f52c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 808f526:	6820      	ldr	r0, [r4, #0]
 808f528:	f7ff fe5c 	bl	808f1e4 <socket_close>
 808f52c:	4620      	mov	r0, r4
 808f52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808f532:	f7f0 bdb6 	b.w	80800a2 <_ZdlPv>

0808f536 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 808f536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808f538:	6943      	ldr	r3, [r0, #20]
 808f53a:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 808f53c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 808f540:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 808f544:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 808f546:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 808f548:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 808f54a:	d106      	bne.n	808f55a <_ZN9TCPClient4readEPhj+0x24>
 808f54c:	6803      	ldr	r3, [r0, #0]
 808f54e:	691b      	ldr	r3, [r3, #16]
 808f550:	4798      	blx	r3
 808f552:	b910      	cbnz	r0, 808f55a <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 808f554:	f04f 34ff 	mov.w	r4, #4294967295
 808f558:	e014      	b.n	808f584 <_ZN9TCPClient4readEPhj+0x4e>
 808f55a:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 808f55c:	4630      	mov	r0, r6
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 808f55e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 808f562:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 808f566:	4419      	add	r1, r3
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 808f568:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 808f56a:	42bc      	cmp	r4, r7
 808f56c:	bf28      	it	cs
 808f56e:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 808f570:	3104      	adds	r1, #4
 808f572:	4622      	mov	r2, r4
 808f574:	f001 f83d 	bl	80905f2 <memcpy>
 808f578:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 808f57a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 808f57e:	4423      	add	r3, r4
 808f580:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 808f584:	4620      	mov	r0, r4
 808f586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808f588 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 808f588:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 808f58a:	2300      	movs	r3, #0
 808f58c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 808f590:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 808f592:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 808f596:	4770      	bx	lr

0808f598 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 808f598:	b538      	push	{r3, r4, r5, lr}
 808f59a:	6942      	ldr	r2, [r0, #20]
 808f59c:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 808f59e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 808f5a2:	b11b      	cbz	r3, 808f5ac <_ZN9TCPClient9availableEv+0x14>
 808f5a4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 808f5a8:	429a      	cmp	r2, r3
 808f5aa:	d00b      	beq.n	808f5c4 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 808f5ac:	4b18      	ldr	r3, [pc, #96]	; (808f610 <_ZN9TCPClient9availableEv+0x78>)
 808f5ae:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 808f5b0:	6803      	ldr	r3, [r0, #0]
 808f5b2:	681b      	ldr	r3, [r3, #0]
 808f5b4:	4798      	blx	r3
 808f5b6:	b318      	cbz	r0, 808f600 <_ZN9TCPClient9availableEv+0x68>
 808f5b8:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808f5ba:	6818      	ldr	r0, [r3, #0]
 808f5bc:	f7ff fdea 	bl	808f194 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 808f5c0:	b918      	cbnz	r0, 808f5ca <_ZN9TCPClient9availableEv+0x32>
 808f5c2:	e01d      	b.n	808f600 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 808f5c4:	f7ff ffe0 	bl	808f588 <_ZN9TCPClient12flush_bufferEv>
 808f5c8:	e7f0      	b.n	808f5ac <_ZN9TCPClient9availableEv+0x14>
 808f5ca:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 808f5cc:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 808f5d0:	297f      	cmp	r1, #127	; 0x7f
 808f5d2:	d815      	bhi.n	808f600 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 808f5d4:	1d05      	adds	r5, r0, #4
 808f5d6:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 808f5da:	2300      	movs	r3, #0
 808f5dc:	4429      	add	r1, r5
 808f5de:	6800      	ldr	r0, [r0, #0]
 808f5e0:	f7ff fdf0 	bl	808f1c4 <socket_receive>
            if (ret > 0)
 808f5e4:	2800      	cmp	r0, #0
 808f5e6:	dd0b      	ble.n	808f600 <_ZN9TCPClient9availableEv+0x68>
 808f5e8:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 808f5ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 808f5ee:	b90a      	cbnz	r2, 808f5f4 <_ZN9TCPClient9availableEv+0x5c>
 808f5f0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 808f5f4:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 808f5f6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 808f5fa:	4418      	add	r0, r3
 808f5fc:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 808f600:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 808f602:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 808f606:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 808f60a:	1a18      	subs	r0, r3, r0
}
 808f60c:	bd38      	pop	{r3, r4, r5, pc}
 808f60e:	bf00      	nop
 808f610:	08093e4c 	.word	0x08093e4c

0808f614 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 808f614:	b538      	push	{r3, r4, r5, lr}
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 808f616:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 808f618:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808f61a:	6818      	ldr	r0, [r3, #0]
 808f61c:	f7ff fdba 	bl	808f194 <socket_handle_valid>

void TCPClient::stop()
{
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 808f620:	b118      	cbz	r0, 808f62a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 808f622:	6963      	ldr	r3, [r4, #20]
 808f624:	6818      	ldr	r0, [r3, #0]
 808f626:	f7ff fddd 	bl	808f1e4 <socket_close>
 808f62a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 808f62c:	f7ff fde2 	bl	808f1f4 <socket_handle_invalid>
 808f630:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808f632:	6963      	ldr	r3, [r4, #20]
 808f634:	2200      	movs	r2, #0
 808f636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 808f63a:	4620      	mov	r0, r4
}
 808f63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 808f640:	f7ff bfa2 	b.w	808f588 <_ZN9TCPClient12flush_bufferEv>

0808f644 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 808f644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808f646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808f64a:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 808f64c:	4b17      	ldr	r3, [pc, #92]	; (808f6ac <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808f64e:	2600      	movs	r6, #0
 808f650:	6046      	str	r6, [r0, #4]
 808f652:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 808f654:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 808f656:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 808f658:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 808f65a:	2090      	movs	r0, #144	; 0x90
 808f65c:	460f      	mov	r7, r1
 808f65e:	f7f0 fd1c 	bl	808009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 808f662:	4605      	mov	r5, r0
 808f664:	b138      	cbz	r0, 808f676 <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 808f666:	6007      	str	r7, [r0, #0]
 808f668:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 808f66c:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 808f670:	3088      	adds	r0, #136	; 0x88
 808f672:	f000 fafb 	bl	808fc6c <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 808f676:	2014      	movs	r0, #20
 808f678:	f7f0 fd0f 	bl	808009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 808f67c:	4603      	mov	r3, r0
 808f67e:	b128      	cbz	r0, 808f68c <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808f680:	2201      	movs	r2, #1
 808f682:	6042      	str	r2, [r0, #4]
 808f684:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 808f686:	4a0a      	ldr	r2, [pc, #40]	; (808f6b0 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 808f688:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 808f68a:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808f68c:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 808f68e:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808f690:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 808f692:	b128      	cbz	r0, 808f6a0 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808f694:	6843      	ldr	r3, [r0, #4]
 808f696:	3b01      	subs	r3, #1
 808f698:	6043      	str	r3, [r0, #4]
 808f69a:	b90b      	cbnz	r3, 808f6a0 <_ZN9TCPClientC1Em+0x5c>
 808f69c:	f7ff fefc 	bl	808f498 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 808f6a0:	4620      	mov	r0, r4
 808f6a2:	f7ff ff71 	bl	808f588 <_ZN9TCPClient12flush_bufferEv>
}
 808f6a6:	4620      	mov	r0, r4
 808f6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808f6aa:	bf00      	nop
 808f6ac:	08093cc0 	.word	0x08093cc0
 808f6b0:	08093ca4 	.word	0x08093ca4

0808f6b4 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 808f6b4:	b510      	push	{r4, lr}
 808f6b6:	4604      	mov	r4, r0
 808f6b8:	f7ff fd9c 	bl	808f1f4 <socket_handle_invalid>
 808f6bc:	4601      	mov	r1, r0
 808f6be:	4620      	mov	r0, r4
 808f6c0:	f7ff ffc0 	bl	808f644 <_ZN9TCPClientC1Em>
{
}
 808f6c4:	4620      	mov	r0, r4
 808f6c6:	bd10      	pop	{r4, pc}

0808f6c8 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 808f6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808f6cc:	4698      	mov	r8, r3
    stop();
 808f6ce:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 808f6d0:	b086      	sub	sp, #24
    stop();
 808f6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 808f6d4:	4604      	mov	r4, r0
 808f6d6:	460d      	mov	r5, r1
 808f6d8:	4616      	mov	r6, r2
    stop();
 808f6da:	4798      	blx	r3
 808f6dc:	4b25      	ldr	r3, [pc, #148]	; (808f774 <_ZN9TCPClient7connectE9IPAddresstm+0xac>)
 808f6de:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 808f6e0:	6803      	ldr	r3, [r0, #0]
 808f6e2:	681b      	ldr	r3, [r3, #0]
 808f6e4:	4798      	blx	r3
 808f6e6:	2800      	cmp	r0, #0
 808f6e8:	d040      	beq.n	808f76c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 808f6ea:	4633      	mov	r3, r6
 808f6ec:	f8cd 8000 	str.w	r8, [sp]
 808f6f0:	2206      	movs	r2, #6
 808f6f2:	2101      	movs	r1, #1
 808f6f4:	2002      	movs	r0, #2
 808f6f6:	6967      	ldr	r7, [r4, #20]
 808f6f8:	f7ff fd54 	bl	808f1a4 <socket_create>
 808f6fc:	6038      	str	r0, [r7, #0]
          DEBUG("socket=%d",d_->sock);

          if (socket_handle_valid(d_->sock))
 808f6fe:	6963      	ldr	r3, [r4, #20]
 808f700:	6818      	ldr	r0, [r3, #0]
 808f702:	f7ff fd47 	bl	808f194 <socket_handle_valid>
 808f706:	b388      	cbz	r0, 808f76c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
          {
            flush_buffer();
 808f708:	4620      	mov	r0, r4
 808f70a:	f7ff ff3d 	bl	808f588 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 808f70e:	2302      	movs	r3, #2
 808f710:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 808f714:	0a33      	lsrs	r3, r6, #8
 808f716:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 808f71a:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 808f71c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 808f720:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 808f724:	79ab      	ldrb	r3, [r5, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 808f726:	f88d 600b 	strb.w	r6, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 808f72a:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 808f72e:	796b      	ldrb	r3, [r5, #5]
 808f730:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 808f734:	792b      	ldrb	r3, [r5, #4]
 808f736:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 808f73a:	f7ff fd6b 	bl	808f214 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 808f73e:	6963      	ldr	r3, [r4, #20]
 808f740:	2210      	movs	r2, #16
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 808f742:	4607      	mov	r7, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 808f744:	a902      	add	r1, sp, #8
 808f746:	6818      	ldr	r0, [r3, #0]
 808f748:	f7ff fd34 	bl	808f1b4 <socket_connect>
 808f74c:	4606      	mov	r6, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 808f74e:	4638      	mov	r0, r7
 808f750:	f7ff fd60 	bl	808f214 <HAL_NET_SetNetWatchDog>
 808f754:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 808f756:	686a      	ldr	r2, [r5, #4]
 808f758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 808f75c:	b12e      	cbz	r6, 808f76a <_ZN9TCPClient7connectE9IPAddresstm+0xa2>
            {
                stop();
 808f75e:	6823      	ldr	r3, [r4, #0]
 808f760:	4620      	mov	r0, r4
 808f762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808f764:	4798      	blx	r3
 808f766:	2000      	movs	r0, #0
 808f768:	e000      	b.n	808f76c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 808f76a:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 808f76c:	b006      	add	sp, #24
 808f76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808f772:	bf00      	nop
 808f774:	08093e4c 	.word	0x08093e4c

0808f778 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 808f778:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 808f77a:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 808f77c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808f77e:	6818      	ldr	r0, [r3, #0]
 808f780:	f7ff fd08 	bl	808f194 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 808f784:	b908      	cbnz	r0, 808f78a <_ZN9TCPClient6statusEv+0x12>
 808f786:	2000      	movs	r0, #0
 808f788:	bd10      	pop	{r4, pc}
 808f78a:	4b07      	ldr	r3, [pc, #28]	; (808f7a8 <_ZN9TCPClient6statusEv+0x30>)
 808f78c:	6818      	ldr	r0, [r3, #0]
 808f78e:	6803      	ldr	r3, [r0, #0]
 808f790:	681b      	ldr	r3, [r3, #0]
 808f792:	4798      	blx	r3
 808f794:	2800      	cmp	r0, #0
 808f796:	d0f6      	beq.n	808f786 <_ZN9TCPClient6statusEv+0xe>
 808f798:	6963      	ldr	r3, [r4, #20]
 808f79a:	6818      	ldr	r0, [r3, #0]
 808f79c:	f7ff fcf2 	bl	808f184 <socket_active_status>
 808f7a0:	fab0 f080 	clz	r0, r0
 808f7a4:	0940      	lsrs	r0, r0, #5
}
 808f7a6:	bd10      	pop	{r4, pc}
 808f7a8:	08093e4c 	.word	0x08093e4c

0808f7ac <_ZN9TCPClient5writeEPKhj>:
{
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 808f7ac:	b570      	push	{r4, r5, r6, lr}
 808f7ae:	4606      	mov	r6, r0
 808f7b0:	460c      	mov	r4, r1
 808f7b2:	4615      	mov	r5, r2
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 808f7b4:	f7ff ffe0 	bl	808f778 <_ZN9TCPClient6statusEv>
 808f7b8:	b138      	cbz	r0, 808f7ca <_ZN9TCPClient5writeEPKhj+0x1e>
 808f7ba:	6973      	ldr	r3, [r6, #20]
 808f7bc:	462a      	mov	r2, r5
 808f7be:	4621      	mov	r1, r4
}
 808f7c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 808f7c4:	6818      	ldr	r0, [r3, #0]
 808f7c6:	f7ff bd05 	b.w	808f1d4 <socket_send>
}
 808f7ca:	f04f 30ff 	mov.w	r0, #4294967295
 808f7ce:	bd70      	pop	{r4, r5, r6, pc}

0808f7d0 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 808f7d0:	b538      	push	{r3, r4, r5, lr}
 808f7d2:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 808f7d4:	f7ff ffd0 	bl	808f778 <_ZN9TCPClient6statusEv>
 808f7d8:	bb00      	cbnz	r0, 808f81c <_ZN9TCPClient9connectedEv+0x4c>
 808f7da:	6963      	ldr	r3, [r4, #20]
 808f7dc:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 808f7e0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 808f7e4:	4291      	cmp	r1, r2
 808f7e6:	d119      	bne.n	808f81c <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808f7e8:	6818      	ldr	r0, [r3, #0]
 808f7ea:	f7ff fcd3 	bl	808f194 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 808f7ee:	b128      	cbz	r0, 808f7fc <_ZN9TCPClient9connectedEv+0x2c>
 808f7f0:	6963      	ldr	r3, [r4, #20]
 808f7f2:	6818      	ldr	r0, [r3, #0]
 808f7f4:	f7ff fcc6 	bl	808f184 <socket_active_status>
 808f7f8:	2801      	cmp	r0, #1
 808f7fa:	d001      	beq.n	808f800 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 808f7fc:	2500      	movs	r5, #0
 808f7fe:	e00e      	b.n	808f81e <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 808f800:	6823      	ldr	r3, [r4, #0]
 808f802:	4620      	mov	r0, r4
 808f804:	691b      	ldr	r3, [r3, #16]
 808f806:	4798      	blx	r3
 808f808:	2800      	cmp	r0, #0
 808f80a:	bf14      	ite	ne
 808f80c:	2501      	movne	r5, #1
 808f80e:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 808f810:	d105      	bne.n	808f81e <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 808f812:	6823      	ldr	r3, [r4, #0]
 808f814:	4620      	mov	r0, r4
 808f816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808f818:	4798      	blx	r3
 808f81a:	e000      	b.n	808f81e <_ZN9TCPClient9connectedEv+0x4e>
 808f81c:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 808f81e:	4628      	mov	r0, r5
 808f820:	bd38      	pop	{r3, r4, r5, pc}

0808f822 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 808f822:	b508      	push	{r3, lr}
   return (status()!=0);
 808f824:	f7ff ffa8 	bl	808f778 <_ZN9TCPClient6statusEv>
}
 808f828:	3000      	adds	r0, #0
 808f82a:	bf18      	it	ne
 808f82c:	2001      	movne	r0, #1
 808f82e:	bd08      	pop	{r3, pc}

0808f830 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808f830:	b510      	push	{r4, lr}
 808f832:	4604      	mov	r4, r0
{
	free(buffer);
 808f834:	6800      	ldr	r0, [r0, #0]
 808f836:	f7ff fd95 	bl	808f364 <free>
}
 808f83a:	4620      	mov	r0, r4
 808f83c:	bd10      	pop	{r4, pc}

0808f83e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808f83e:	b510      	push	{r4, lr}
 808f840:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808f842:	6800      	ldr	r0, [r0, #0]
 808f844:	b108      	cbz	r0, 808f84a <_ZN6String10invalidateEv+0xc>
 808f846:	f7ff fd8d 	bl	808f364 <free>
	buffer = NULL;
 808f84a:	2300      	movs	r3, #0
 808f84c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 808f84e:	60a3      	str	r3, [r4, #8]
 808f850:	6063      	str	r3, [r4, #4]
 808f852:	bd10      	pop	{r4, pc}

0808f854 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808f854:	b538      	push	{r3, r4, r5, lr}
 808f856:	4604      	mov	r4, r0
 808f858:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808f85a:	6800      	ldr	r0, [r0, #0]
 808f85c:	3101      	adds	r1, #1
 808f85e:	f7ff fd89 	bl	808f374 <realloc>
	if (newbuffer) {
 808f862:	b110      	cbz	r0, 808f86a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808f864:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 808f868:	2001      	movs	r0, #1
	}
	return 0;
}
 808f86a:	bd38      	pop	{r3, r4, r5, pc}

0808f86c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808f86c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808f86e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808f870:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808f872:	b113      	cbz	r3, 808f87a <_ZN6String7reserveEj+0xe>
 808f874:	6843      	ldr	r3, [r0, #4]
 808f876:	428b      	cmp	r3, r1
 808f878:	d207      	bcs.n	808f88a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808f87a:	4620      	mov	r0, r4
 808f87c:	f7ff ffea 	bl	808f854 <_ZN6String12changeBufferEj>
 808f880:	b120      	cbz	r0, 808f88c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 808f882:	68a3      	ldr	r3, [r4, #8]
 808f884:	b90b      	cbnz	r3, 808f88a <_ZN6String7reserveEj+0x1e>
 808f886:	6822      	ldr	r2, [r4, #0]
 808f888:	7013      	strb	r3, [r2, #0]
 808f88a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 808f88c:	bd10      	pop	{r4, pc}

0808f88e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808f88e:	b570      	push	{r4, r5, r6, lr}
 808f890:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808f892:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808f894:	4604      	mov	r4, r0
 808f896:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808f898:	f7ff ffe8 	bl	808f86c <_ZN6String7reserveEj>
 808f89c:	b918      	cbnz	r0, 808f8a6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 808f89e:	4620      	mov	r0, r4
 808f8a0:	f7ff ffcd 	bl	808f83e <_ZN6String10invalidateEv>
		return *this;
 808f8a4:	e009      	b.n	808f8ba <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808f8a6:	462a      	mov	r2, r5
 808f8a8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808f8aa:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808f8ac:	6820      	ldr	r0, [r4, #0]
 808f8ae:	f000 fea0 	bl	80905f2 <memcpy>
	buffer[len] = 0;
 808f8b2:	6822      	ldr	r2, [r4, #0]
 808f8b4:	68a3      	ldr	r3, [r4, #8]
 808f8b6:	2100      	movs	r1, #0
 808f8b8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808f8ba:	4620      	mov	r0, r4
 808f8bc:	bd70      	pop	{r4, r5, r6, pc}

0808f8be <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808f8be:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808f8c0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808f8c2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808f8c4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808f8c6:	6043      	str	r3, [r0, #4]
	len = 0;
 808f8c8:	6083      	str	r3, [r0, #8]
	flags = 0;
 808f8ca:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808f8cc:	460d      	mov	r5, r1
 808f8ce:	b139      	cbz	r1, 808f8e0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 808f8d0:	4608      	mov	r0, r1
 808f8d2:	f000 fed4 	bl	809067e <strlen>
 808f8d6:	4629      	mov	r1, r5
 808f8d8:	4602      	mov	r2, r0
 808f8da:	4620      	mov	r0, r4
 808f8dc:	f7ff ffd7 	bl	808f88e <_ZN6String4copyEPKcj>
}
 808f8e0:	4620      	mov	r0, r4
 808f8e2:	bd38      	pop	{r3, r4, r5, pc}

0808f8e4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808f8e4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 808f8e6:	b510      	push	{r4, lr}
 808f8e8:	460b      	mov	r3, r1
 808f8ea:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808f8ec:	d007      	beq.n	808f8fe <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808f8ee:	6809      	ldr	r1, [r1, #0]
 808f8f0:	b119      	cbz	r1, 808f8fa <_ZN6StringaSERKS_+0x16>
 808f8f2:	689a      	ldr	r2, [r3, #8]
 808f8f4:	f7ff ffcb 	bl	808f88e <_ZN6String4copyEPKcj>
 808f8f8:	e001      	b.n	808f8fe <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808f8fa:	f7ff ffa0 	bl	808f83e <_ZN6String10invalidateEv>

	return *this;
}
 808f8fe:	4620      	mov	r0, r4
 808f900:	bd10      	pop	{r4, pc}

0808f902 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808f902:	b538      	push	{r3, r4, r5, lr}
 808f904:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808f906:	460c      	mov	r4, r1
 808f908:	b141      	cbz	r1, 808f91c <_ZN6StringaSEPKc+0x1a>
 808f90a:	4608      	mov	r0, r1
 808f90c:	f000 feb7 	bl	809067e <strlen>
 808f910:	4621      	mov	r1, r4
 808f912:	4602      	mov	r2, r0
 808f914:	4628      	mov	r0, r5
 808f916:	f7ff ffba 	bl	808f88e <_ZN6String4copyEPKcj>
 808f91a:	e001      	b.n	808f920 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 808f91c:	f7ff ff8f 	bl	808f83e <_ZN6String10invalidateEv>

	return *this;
}
 808f920:	4628      	mov	r0, r5
 808f922:	bd38      	pop	{r3, r4, r5, pc}

0808f924 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808f924:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808f926:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808f928:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808f92a:	b912      	cbnz	r2, 808f932 <_ZNK6String6equalsEPKc+0xe>
 808f92c:	b919      	cbnz	r1, 808f936 <_ZNK6String6equalsEPKc+0x12>
 808f92e:	2001      	movs	r0, #1
 808f930:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808f932:	b911      	cbnz	r1, 808f93a <_ZNK6String6equalsEPKc+0x16>
 808f934:	6803      	ldr	r3, [r0, #0]
 808f936:	7818      	ldrb	r0, [r3, #0]
 808f938:	e002      	b.n	808f940 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 808f93a:	6800      	ldr	r0, [r0, #0]
 808f93c:	f000 fe95 	bl	809066a <strcmp>
 808f940:	fab0 f080 	clz	r0, r0
 808f944:	0940      	lsrs	r0, r0, #5
}
 808f946:	bd08      	pop	{r3, pc}

0808f948 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808f948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808f94a:	4606      	mov	r6, r0
 808f94c:	460d      	mov	r5, r1
 808f94e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 808f950:	2400      	movs	r4, #0
  while (size--) {
 808f952:	42bd      	cmp	r5, r7
 808f954:	d00c      	beq.n	808f970 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808f956:	6833      	ldr	r3, [r6, #0]
 808f958:	f815 1b01 	ldrb.w	r1, [r5], #1
 808f95c:	689b      	ldr	r3, [r3, #8]
 808f95e:	4630      	mov	r0, r6
 808f960:	4798      	blx	r3
     if (chunk>=0)
 808f962:	2800      	cmp	r0, #0
 808f964:	db01      	blt.n	808f96a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808f966:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808f968:	e7f3      	b.n	808f952 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808f96a:	2c00      	cmp	r4, #0
 808f96c:	bf08      	it	eq
 808f96e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 808f970:	4620      	mov	r0, r4
 808f972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808f974 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808f974:	6803      	ldr	r3, [r0, #0]
 808f976:	689b      	ldr	r3, [r3, #8]
 808f978:	4718      	bx	r3

0808f97a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808f97a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808f97c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808f97e:	4605      	mov	r5, r0
  size_t n = print('\r');
 808f980:	f7ff fff8 	bl	808f974 <_ZN5Print5printEc>
  n += print('\n');
 808f984:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808f986:	4604      	mov	r4, r0
  n += print('\n');
 808f988:	4628      	mov	r0, r5
 808f98a:	f7ff fff3 	bl	808f974 <_ZN5Print5printEc>
  return n;
}
 808f98e:	4420      	add	r0, r4
 808f990:	bd38      	pop	{r3, r4, r5, pc}

0808f992 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808f992:	b538      	push	{r3, r4, r5, lr}
 808f994:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808f996:	f7f0 fc97 	bl	80802c8 <_ZN5Print5writeEPKc>
 808f99a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 808f99c:	4628      	mov	r0, r5
 808f99e:	f7ff ffec 	bl	808f97a <_ZN5Print7printlnEv>
  return n;
}
 808f9a2:	4420      	add	r0, r4
 808f9a4:	bd38      	pop	{r3, r4, r5, pc}

0808f9a6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808f9a6:	2a01      	cmp	r2, #1
 808f9a8:	bf98      	it	ls
 808f9aa:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 808f9ac:	b530      	push	{r4, r5, lr}
 808f9ae:	460b      	mov	r3, r1
 808f9b0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808f9b2:	2100      	movs	r1, #0
 808f9b4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808f9b8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 808f9bc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 808f9c0:	fb05 3312 	mls	r3, r5, r2, r3
 808f9c4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808f9c6:	2b09      	cmp	r3, #9
 808f9c8:	bf94      	ite	ls
 808f9ca:	3330      	addls	r3, #48	; 0x30
 808f9cc:	3337      	addhi	r3, #55	; 0x37
 808f9ce:	b2db      	uxtb	r3, r3
 808f9d0:	4621      	mov	r1, r4
 808f9d2:	f804 3901 	strb.w	r3, [r4], #-1
 808f9d6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808f9d8:	2d00      	cmp	r5, #0
 808f9da:	d1ef      	bne.n	808f9bc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 808f9dc:	f7f0 fc74 	bl	80802c8 <_ZN5Print5writeEPKc>
}
 808f9e0:	b00b      	add	sp, #44	; 0x2c
 808f9e2:	bd30      	pop	{r4, r5, pc}

0808f9e4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 808f9e4:	b410      	push	{r4}
  if (base == 0) return write(n);
 808f9e6:	b922      	cbnz	r2, 808f9f2 <_ZN5Print5printEmi+0xe>
 808f9e8:	6803      	ldr	r3, [r0, #0]
 808f9ea:	b2c9      	uxtb	r1, r1
 808f9ec:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 808f9ee:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 808f9f0:	4718      	bx	r3
  else return printNumber(n, base);
 808f9f2:	b2d2      	uxtb	r2, r2
}
 808f9f4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808f9f6:	f7ff bfd6 	b.w	808f9a6 <_ZN5Print11printNumberEmh>

0808f9fa <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808f9fa:	f7ff bff3 	b.w	808f9e4 <_ZN5Print5printEmi>

0808f9fe <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 808f9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808fa02:	4607      	mov	r7, r0
 808fa04:	460e      	mov	r6, r1
  if (base == 0) {
 808fa06:	4615      	mov	r5, r2
 808fa08:	b92a      	cbnz	r2, 808fa16 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808fa0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 808fa0e:	6803      	ldr	r3, [r0, #0]
 808fa10:	b2c9      	uxtb	r1, r1
 808fa12:	689b      	ldr	r3, [r3, #8]
 808fa14:	4718      	bx	r3
  } else if (base == 10) {
 808fa16:	2a0a      	cmp	r2, #10
 808fa18:	d102      	bne.n	808fa20 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 808fa1a:	2900      	cmp	r1, #0
 808fa1c:	da01      	bge.n	808fa22 <_ZN5Print5printEli+0x24>
 808fa1e:	e004      	b.n	808fa2a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808fa20:	b2d2      	uxtb	r2, r2
  }
}
 808fa22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808fa26:	f7ff bfbe 	b.w	808f9a6 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808fa2a:	212d      	movs	r1, #45	; 0x2d
 808fa2c:	f7ff ffa2 	bl	808f974 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 808fa30:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808fa32:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 808fa34:	4271      	negs	r1, r6
 808fa36:	4638      	mov	r0, r7
 808fa38:	f7ff ffb5 	bl	808f9a6 <_ZN5Print11printNumberEmh>
 808fa3c:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808fa3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808fa42 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 808fa42:	b538      	push	{r3, r4, r5, lr}
 808fa44:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808fa46:	f7ff ffda 	bl	808f9fe <_ZN5Print5printEli>
 808fa4a:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 808fa4c:	4628      	mov	r0, r5
 808fa4e:	f7ff ff94 	bl	808f97a <_ZN5Print7printlnEv>
  return n;
}
 808fa52:	4420      	add	r0, r4
 808fa54:	bd38      	pop	{r3, r4, r5, pc}
	...

0808fa58 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808fa58:	4a01      	ldr	r2, [pc, #4]	; (808fa60 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808fa5a:	4b02      	ldr	r3, [pc, #8]	; (808fa64 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808fa5c:	601a      	str	r2, [r3, #0]
 808fa5e:	4770      	bx	lr
 808fa60:	08093da7 	.word	0x08093da7
 808fa64:	20003694 	.word	0x20003694

0808fa68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808fa68:	4b02      	ldr	r3, [pc, #8]	; (808fa74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808fa6a:	681a      	ldr	r2, [r3, #0]
 808fa6c:	4b02      	ldr	r3, [pc, #8]	; (808fa78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808fa6e:	601a      	str	r2, [r3, #0]
 808fa70:	4770      	bx	lr
 808fa72:	bf00      	nop
 808fa74:	20000430 	.word	0x20000430
 808fa78:	20003698 	.word	0x20003698

0808fa7c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808fa7c:	2100      	movs	r1, #0
 808fa7e:	f7ff bc31 	b.w	808f2e4 <system_delay_ms>

0808fa82 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808fa82:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 808fa84:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808fa86:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808fa88:	b113      	cbz	r3, 808fa90 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808fa8a:	2203      	movs	r2, #3
 808fa8c:	4601      	mov	r1, r0
 808fa8e:	4798      	blx	r3
    }
 808fa90:	4620      	mov	r0, r4
 808fa92:	bd10      	pop	{r4, pc}

0808fa94 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808fa94:	b510      	push	{r4, lr}
 808fa96:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808fa98:	f7ff fff3 	bl	808fa82 <_ZNSt14_Function_baseD1Ev>
 808fa9c:	4620      	mov	r0, r4
 808fa9e:	bd10      	pop	{r4, pc}

0808faa0 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 808faa0:	b570      	push	{r4, r5, r6, lr}
 808faa2:	4605      	mov	r5, r0
 808faa4:	460e      	mov	r6, r1
 808faa6:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 808faa8:	f7ff fc04 	bl	808f2b4 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
 808faac:	b150      	cbz	r0, 808fac4 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 808faae:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 808fab2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 808fab6:	f7ff fbf5 	bl	808f2a4 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 808faba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
 808fabe:	20e7      	movs	r0, #231	; 0xe7
 808fac0:	f7ff bc00 	b.w	808f2c4 <LED_On>
 808fac4:	bd70      	pop	{r4, r5, r6, pc}
	...

0808fac8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808fac8:	4803      	ldr	r0, [pc, #12]	; (808fad8 <_GLOBAL__sub_I_RGB+0x10>)
 808faca:	2300      	movs	r3, #0
 808facc:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808face:	4a03      	ldr	r2, [pc, #12]	; (808fadc <_GLOBAL__sub_I_RGB+0x14>)
 808fad0:	4903      	ldr	r1, [pc, #12]	; (808fae0 <_GLOBAL__sub_I_RGB+0x18>)
 808fad2:	f000 ba8b 	b.w	808ffec <__aeabi_atexit>
 808fad6:	bf00      	nop
 808fad8:	2000369c 	.word	0x2000369c
 808fadc:	20000498 	.word	0x20000498
 808fae0:	0808fa95 	.word	0x0808fa95

0808fae4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 808fae4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808fae6:	4b18      	ldr	r3, [pc, #96]	; (808fb48 <serialEventRun+0x64>)
 808fae8:	b133      	cbz	r3, 808faf8 <serialEventRun+0x14>
 808faea:	f000 f94d 	bl	808fd88 <_Z16_fetch_usbserialv>
 808faee:	6803      	ldr	r3, [r0, #0]
 808faf0:	691b      	ldr	r3, [r3, #16]
 808faf2:	4798      	blx	r3
 808faf4:	2800      	cmp	r0, #0
 808faf6:	dc1e      	bgt.n	808fb36 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 808faf8:	4b14      	ldr	r3, [pc, #80]	; (808fb4c <serialEventRun+0x68>)
 808fafa:	b133      	cbz	r3, 808fb0a <serialEventRun+0x26>
 808fafc:	f000 fa0a 	bl	808ff14 <_Z22__fetch_global_Serial1v>
 808fb00:	6803      	ldr	r3, [r0, #0]
 808fb02:	691b      	ldr	r3, [r3, #16]
 808fb04:	4798      	blx	r3
 808fb06:	2800      	cmp	r0, #0
 808fb08:	dc18      	bgt.n	808fb3c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808fb0a:	4b11      	ldr	r3, [pc, #68]	; (808fb50 <serialEventRun+0x6c>)
 808fb0c:	b10b      	cbz	r3, 808fb12 <serialEventRun+0x2e>
 808fb0e:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808fb12:	4b10      	ldr	r3, [pc, #64]	; (808fb54 <serialEventRun+0x70>)
 808fb14:	b10b      	cbz	r3, 808fb1a <serialEventRun+0x36>
 808fb16:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808fb1a:	4b0f      	ldr	r3, [pc, #60]	; (808fb58 <serialEventRun+0x74>)
 808fb1c:	b10b      	cbz	r3, 808fb22 <serialEventRun+0x3e>
 808fb1e:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808fb22:	4b0e      	ldr	r3, [pc, #56]	; (808fb5c <serialEventRun+0x78>)
 808fb24:	b17b      	cbz	r3, 808fb46 <serialEventRun+0x62>
 808fb26:	f000 f96b 	bl	808fe00 <_Z17_fetch_usbserial1v>
 808fb2a:	6803      	ldr	r3, [r0, #0]
 808fb2c:	691b      	ldr	r3, [r3, #16]
 808fb2e:	4798      	blx	r3
 808fb30:	2800      	cmp	r0, #0
 808fb32:	dc06      	bgt.n	808fb42 <serialEventRun+0x5e>
 808fb34:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 808fb36:	f3af 8000 	nop.w
 808fb3a:	e7dd      	b.n	808faf8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808fb3c:	f3af 8000 	nop.w
 808fb40:	e7e3      	b.n	808fb0a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808fb42:	f3af 8000 	nop.w
 808fb46:	bd08      	pop	{r3, pc}
	...

0808fb60 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808fb60:	b508      	push	{r3, lr}
	serialEventRun();
 808fb62:	f7ff ffbf 	bl	808fae4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808fb66:	f7ff fab5 	bl	808f0d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808fb6a:	4b01      	ldr	r3, [pc, #4]	; (808fb70 <_post_loop+0x10>)
 808fb6c:	6018      	str	r0, [r3, #0]
 808fb6e:	bd08      	pop	{r3, pc}
 808fb70:	20003b94 	.word	0x20003b94

0808fb74 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808fb74:	4802      	ldr	r0, [pc, #8]	; (808fb80 <_Z33system_initialize_user_backup_ramv+0xc>)
 808fb76:	4a03      	ldr	r2, [pc, #12]	; (808fb84 <_Z33system_initialize_user_backup_ramv+0x10>)
 808fb78:	4903      	ldr	r1, [pc, #12]	; (808fb88 <_Z33system_initialize_user_backup_ramv+0x14>)
 808fb7a:	1a12      	subs	r2, r2, r0
 808fb7c:	f000 bd39 	b.w	80905f2 <memcpy>
 808fb80:	40024000 	.word	0x40024000
 808fb84:	40024004 	.word	0x40024004
 808fb88:	08093f68 	.word	0x08093f68

0808fb8c <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 808fb8c:	2000      	movs	r0, #0
 808fb8e:	4770      	bx	lr

0808fb90 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 808fb90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 808fb92:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 808fb94:	4604      	mov	r4, r0
    switch (req->type) {
 808fb96:	2b0a      	cmp	r3, #10
 808fb98:	d00e      	beq.n	808fbb8 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 808fb9a:	2b50      	cmp	r3, #80	; 0x50
 808fb9c:	d11c      	bne.n	808fbd8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 808fb9e:	4b10      	ldr	r3, [pc, #64]	; (808fbe0 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 808fba0:	681d      	ldr	r5, [r3, #0]
 808fba2:	b1cd      	cbz	r5, 808fbd8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 808fba4:	7d03      	ldrb	r3, [r0, #20]
 808fba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 808fbaa:	9300      	str	r3, [sp, #0]
 808fbac:	68c2      	ldr	r2, [r0, #12]
 808fbae:	f100 0310 	add.w	r3, r0, #16
 808fbb2:	6880      	ldr	r0, [r0, #8]
 808fbb4:	47a8      	blx	r5
 808fbb6:	e007      	b.n	808fbc8 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 808fbb8:	f100 0310 	add.w	r3, r0, #16
 808fbbc:	68c2      	ldr	r2, [r0, #12]
 808fbbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 808fbc2:	6880      	ldr	r0, [r0, #8]
 808fbc4:	f7ff ffe2 	bl	808fb8c <_Z26usb_request_custom_handlerPcjjPj>
 808fbc8:	b130      	cbz	r0, 808fbd8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 808fbca:	2200      	movs	r2, #0
 808fbcc:	4620      	mov	r0, r4
 808fbce:	4611      	mov	r1, r2
 808fbd0:	f7ff fba0 	bl	808f314 <system_set_usb_request_result>
        return true;
 808fbd4:	2001      	movs	r0, #1
 808fbd6:	e000      	b.n	808fbda <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 808fbd8:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 808fbda:	b003      	add	sp, #12
 808fbdc:	bd30      	pop	{r4, r5, pc}
 808fbde:	bf00      	nop
 808fbe0:	200036ac 	.word	0x200036ac

0808fbe4 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 808fbe4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808fbe6:	4c0c      	ldr	r4, [pc, #48]	; (808fc18 <module_user_init_hook+0x34>)
 808fbe8:	4d0c      	ldr	r5, [pc, #48]	; (808fc1c <module_user_init_hook+0x38>)
 808fbea:	6823      	ldr	r3, [r4, #0]
 808fbec:	42ab      	cmp	r3, r5
 808fbee:	4b0c      	ldr	r3, [pc, #48]	; (808fc20 <module_user_init_hook+0x3c>)
 808fbf0:	bf0c      	ite	eq
 808fbf2:	2201      	moveq	r2, #1
 808fbf4:	2200      	movne	r2, #0
 808fbf6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808fbf8:	d002      	beq.n	808fc00 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808fbfa:	f7ff ffbb 	bl	808fb74 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808fbfe:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 808fc00:	4b08      	ldr	r3, [pc, #32]	; (808fc24 <module_user_init_hook+0x40>)
 808fc02:	b11b      	cbz	r3, 808fc0c <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 808fc04:	f7ff fa5e 	bl	808f0c4 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 808fc08:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 808fc0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 808fc10:	2100      	movs	r1, #0
 808fc12:	4805      	ldr	r0, [pc, #20]	; (808fc28 <module_user_init_hook+0x44>)
 808fc14:	f7ff bb76 	b.w	808f304 <system_set_usb_request_app_handler>
 808fc18:	40024000 	.word	0x40024000
 808fc1c:	9a271c1e 	.word	0x9a271c1e
 808fc20:	200036b0 	.word	0x200036b0
 808fc24:	00000000 	.word	0x00000000
 808fc28:	0808fb91 	.word	0x0808fb91

0808fc2c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808fc2c:	4770      	bx	lr

0808fc2e <_ZN9IPAddressD0Ev>:
 808fc2e:	b510      	push	{r4, lr}
 808fc30:	4604      	mov	r4, r0
 808fc32:	f7f0 fa36 	bl	80800a2 <_ZdlPv>
 808fc36:	4620      	mov	r0, r4
 808fc38:	bd10      	pop	{r4, pc}

0808fc3a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808fc3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808fc3c:	460f      	mov	r7, r1
 808fc3e:	f100 0608 	add.w	r6, r0, #8
 808fc42:	1d05      	adds	r5, r0, #4
 808fc44:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808fc46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808fc4a:	220a      	movs	r2, #10
 808fc4c:	4638      	mov	r0, r7
 808fc4e:	f7ff fed4 	bl	808f9fa <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808fc52:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808fc54:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808fc56:	d007      	beq.n	808fc68 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808fc58:	2c00      	cmp	r4, #0
 808fc5a:	d0f4      	beq.n	808fc46 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808fc5c:	212e      	movs	r1, #46	; 0x2e
 808fc5e:	4638      	mov	r0, r7
 808fc60:	f7ff fe88 	bl	808f974 <_ZN5Print5printEc>
 808fc64:	4404      	add	r4, r0
 808fc66:	e7ee      	b.n	808fc46 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808fc68:	4620      	mov	r0, r4
 808fc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808fc6c <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 808fc6c:	4a02      	ldr	r2, [pc, #8]	; (808fc78 <_ZN9IPAddressC1Ev+0xc>)
 808fc6e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808fc70:	2200      	movs	r2, #0
 808fc72:	6042      	str	r2, [r0, #4]
{
    clear();
}
 808fc74:	4770      	bx	lr
 808fc76:	bf00      	nop
 808fc78:	08093e04 	.word	0x08093e04

0808fc7c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 808fc7c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808fc7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808fc82:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808fc86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808fc8a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808fc8e:	6041      	str	r1, [r0, #4]
 808fc90:	bd10      	pop	{r4, pc}
	...

0808fc94 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808fc94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808fc96:	4d04      	ldr	r5, [pc, #16]	; (808fca8 <_ZN9IPAddressC1Ehhhh+0x14>)
 808fc98:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808fc9a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808fc9e:	9500      	str	r5, [sp, #0]
 808fca0:	f7ff ffec 	bl	808fc7c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808fca4:	b003      	add	sp, #12
 808fca6:	bd30      	pop	{r4, r5, pc}
 808fca8:	08093e04 	.word	0x08093e04

0808fcac <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 808fcac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 808fcae:	780d      	ldrb	r5, [r1, #0]
 808fcb0:	788b      	ldrb	r3, [r1, #2]
 808fcb2:	784a      	ldrb	r2, [r1, #1]
 808fcb4:	78c9      	ldrb	r1, [r1, #3]
 808fcb6:	9100      	str	r1, [sp, #0]
 808fcb8:	4629      	mov	r1, r5
 808fcba:	f7ff ffdf 	bl	808fc7c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 808fcbe:	b003      	add	sp, #12
 808fcc0:	bd30      	pop	{r4, r5, pc}
	...

0808fcc4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 808fcc4:	b510      	push	{r4, lr}
 808fcc6:	4604      	mov	r4, r0
 808fcc8:	4b02      	ldr	r3, [pc, #8]	; (808fcd4 <_ZN9IPAddressC1EPKh+0x10>)
 808fcca:	6003      	str	r3, [r0, #0]
{
    *this = address;
 808fccc:	f7ff ffee 	bl	808fcac <_ZN9IPAddressaSEPKh>
}
 808fcd0:	4620      	mov	r0, r4
 808fcd2:	bd10      	pop	{r4, pc}
 808fcd4:	08093e04 	.word	0x08093e04

0808fcd8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808fcd8:	7441      	strb	r1, [r0, #17]
 808fcda:	4770      	bx	lr

0808fcdc <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 808fcdc:	4770      	bx	lr

0808fcde <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 808fcde:	2100      	movs	r1, #0
 808fce0:	7c00      	ldrb	r0, [r0, #16]
 808fce2:	f7ff bac7 	b.w	808f274 <HAL_USB_USART_Receive_Data>

0808fce6 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 808fce6:	2101      	movs	r1, #1
 808fce8:	7c00      	ldrb	r0, [r0, #16]
 808fcea:	f7ff bac3 	b.w	808f274 <HAL_USB_USART_Receive_Data>

0808fcee <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 808fcee:	7c00      	ldrb	r0, [r0, #16]
 808fcf0:	f7ff bab8 	b.w	808f264 <HAL_USB_USART_Available_Data_For_Write>

0808fcf4 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 808fcf4:	7c00      	ldrb	r0, [r0, #16]
 808fcf6:	f7ff baad 	b.w	808f254 <HAL_USB_USART_Available_Data>

0808fcfa <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 808fcfa:	b538      	push	{r3, r4, r5, lr}
 808fcfc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808fcfe:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 808fd00:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808fd02:	f7ff faaf 	bl	808f264 <HAL_USB_USART_Available_Data_For_Write>
 808fd06:	2800      	cmp	r0, #0
 808fd08:	dc01      	bgt.n	808fd0e <_ZN9USBSerial5writeEh+0x14>
 808fd0a:	7c60      	ldrb	r0, [r4, #17]
 808fd0c:	b120      	cbz	r0, 808fd18 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 808fd0e:	4629      	mov	r1, r5
 808fd10:	7c20      	ldrb	r0, [r4, #16]
 808fd12:	f7ff fab7 	bl	808f284 <HAL_USB_USART_Send_Data>
    return 1;
 808fd16:	2001      	movs	r0, #1
  }
  return 0;
}
 808fd18:	bd38      	pop	{r3, r4, r5, pc}

0808fd1a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808fd1a:	7c00      	ldrb	r0, [r0, #16]
 808fd1c:	f7ff baba 	b.w	808f294 <HAL_USB_USART_Flush_Data>

0808fd20 <_ZN9USBSerialD0Ev>:
 808fd20:	b510      	push	{r4, lr}
 808fd22:	4604      	mov	r4, r0
 808fd24:	f7f0 f9bd 	bl	80800a2 <_ZdlPv>
 808fd28:	4620      	mov	r0, r4
 808fd2a:	bd10      	pop	{r4, pc}

0808fd2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808fd2c:	b510      	push	{r4, lr}
 808fd2e:	4604      	mov	r4, r0
 808fd30:	2300      	movs	r3, #0
 808fd32:	6063      	str	r3, [r4, #4]
 808fd34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808fd38:	60a3      	str	r3, [r4, #8]
 808fd3a:	4b05      	ldr	r3, [pc, #20]	; (808fd50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 808fd3c:	4608      	mov	r0, r1
 808fd3e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 808fd40:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808fd42:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 808fd44:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808fd46:	4611      	mov	r1, r2
 808fd48:	f7ff fa74 	bl	808f234 <HAL_USB_USART_Init>
}
 808fd4c:	4620      	mov	r0, r4
 808fd4e:	bd10      	pop	{r4, pc}
 808fd50:	08093e18 	.word	0x08093e18

0808fd54 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808fd54:	2200      	movs	r2, #0
 808fd56:	7c00      	ldrb	r0, [r0, #16]
 808fd58:	f7ff ba74 	b.w	808f244 <HAL_USB_USART_Begin>

0808fd5c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808fd5c:	b510      	push	{r4, lr}
 808fd5e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808fd60:	2214      	movs	r2, #20
 808fd62:	2100      	movs	r1, #0
 808fd64:	f000 fc6b 	bl	809063e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808fd68:	4b05      	ldr	r3, [pc, #20]	; (808fd80 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808fd6a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808fd6c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808fd6e:	4b05      	ldr	r3, [pc, #20]	; (808fd84 <_Z19acquireSerialBufferv+0x28>)
 808fd70:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808fd72:	f240 1301 	movw	r3, #257	; 0x101
 808fd76:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808fd78:	2381      	movs	r3, #129	; 0x81
 808fd7a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808fd7c:	bd10      	pop	{r4, pc}
 808fd7e:	bf00      	nop
 808fd80:	20003739 	.word	0x20003739
 808fd84:	200036b8 	.word	0x200036b8

0808fd88 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808fd88:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808fd8a:	4d0e      	ldr	r5, [pc, #56]	; (808fdc4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808fd8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808fd8e:	a801      	add	r0, sp, #4
 808fd90:	f7ff ffe4 	bl	808fd5c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808fd94:	6829      	ldr	r1, [r5, #0]
 808fd96:	f011 0401 	ands.w	r4, r1, #1
 808fd9a:	d110      	bne.n	808fdbe <_Z16_fetch_usbserialv+0x36>
 808fd9c:	4628      	mov	r0, r5
 808fd9e:	f7f0 f984 	bl	80800aa <__cxa_guard_acquire>
 808fda2:	b160      	cbz	r0, 808fdbe <_Z16_fetch_usbserialv+0x36>
 808fda4:	aa01      	add	r2, sp, #4
 808fda6:	4621      	mov	r1, r4
 808fda8:	4807      	ldr	r0, [pc, #28]	; (808fdc8 <_Z16_fetch_usbserialv+0x40>)
 808fdaa:	f7ff ffbf 	bl	808fd2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808fdae:	4628      	mov	r0, r5
 808fdb0:	f7f0 f980 	bl	80800b4 <__cxa_guard_release>
 808fdb4:	4a05      	ldr	r2, [pc, #20]	; (808fdcc <_Z16_fetch_usbserialv+0x44>)
 808fdb6:	4906      	ldr	r1, [pc, #24]	; (808fdd0 <_Z16_fetch_usbserialv+0x48>)
 808fdb8:	4803      	ldr	r0, [pc, #12]	; (808fdc8 <_Z16_fetch_usbserialv+0x40>)
 808fdba:	f000 f917 	bl	808ffec <__aeabi_atexit>
	return _usbserial;
}
 808fdbe:	4802      	ldr	r0, [pc, #8]	; (808fdc8 <_Z16_fetch_usbserialv+0x40>)
 808fdc0:	b007      	add	sp, #28
 808fdc2:	bd30      	pop	{r4, r5, pc}
 808fdc4:	200036b4 	.word	0x200036b4
 808fdc8:	2000383c 	.word	0x2000383c
 808fdcc:	20000498 	.word	0x20000498
 808fdd0:	0808fcdd 	.word	0x0808fcdd

0808fdd4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808fdd4:	b510      	push	{r4, lr}
 808fdd6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808fdd8:	2214      	movs	r2, #20
 808fdda:	2100      	movs	r1, #0
 808fddc:	f000 fc2f 	bl	809063e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808fde0:	4b05      	ldr	r3, [pc, #20]	; (808fdf8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808fde2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808fde4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808fde6:	4b05      	ldr	r3, [pc, #20]	; (808fdfc <_Z23acquireUSBSerial1Bufferv+0x28>)
 808fde8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808fdea:	f240 1301 	movw	r3, #257	; 0x101
 808fdee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808fdf0:	2381      	movs	r3, #129	; 0x81
 808fdf2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808fdf4:	bd10      	pop	{r4, pc}
 808fdf6:	bf00      	nop
 808fdf8:	200038ec 	.word	0x200038ec
 808fdfc:	20003854 	.word	0x20003854

0808fe00 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808fe00:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808fe02:	4c0e      	ldr	r4, [pc, #56]	; (808fe3c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808fe04:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808fe06:	a801      	add	r0, sp, #4
 808fe08:	f7ff ffe4 	bl	808fdd4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808fe0c:	6823      	ldr	r3, [r4, #0]
 808fe0e:	07db      	lsls	r3, r3, #31
 808fe10:	d410      	bmi.n	808fe34 <_Z17_fetch_usbserial1v+0x34>
 808fe12:	4620      	mov	r0, r4
 808fe14:	f7f0 f949 	bl	80800aa <__cxa_guard_acquire>
 808fe18:	b160      	cbz	r0, 808fe34 <_Z17_fetch_usbserial1v+0x34>
 808fe1a:	aa01      	add	r2, sp, #4
 808fe1c:	2101      	movs	r1, #1
 808fe1e:	4808      	ldr	r0, [pc, #32]	; (808fe40 <_Z17_fetch_usbserial1v+0x40>)
 808fe20:	f7ff ff84 	bl	808fd2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808fe24:	4620      	mov	r0, r4
 808fe26:	f7f0 f945 	bl	80800b4 <__cxa_guard_release>
 808fe2a:	4a06      	ldr	r2, [pc, #24]	; (808fe44 <_Z17_fetch_usbserial1v+0x44>)
 808fe2c:	4906      	ldr	r1, [pc, #24]	; (808fe48 <_Z17_fetch_usbserial1v+0x48>)
 808fe2e:	4804      	ldr	r0, [pc, #16]	; (808fe40 <_Z17_fetch_usbserial1v+0x40>)
 808fe30:	f000 f8dc 	bl	808ffec <__aeabi_atexit>
  return _usbserial1;
}
 808fe34:	4802      	ldr	r0, [pc, #8]	; (808fe40 <_Z17_fetch_usbserial1v+0x40>)
 808fe36:	b006      	add	sp, #24
 808fe38:	bd10      	pop	{r4, pc}
 808fe3a:	bf00      	nop
 808fe3c:	20003850 	.word	0x20003850
 808fe40:	200038d8 	.word	0x200038d8
 808fe44:	20000498 	.word	0x20000498
 808fe48:	0808fcdd 	.word	0x0808fcdd

0808fe4c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808fe4c:	2200      	movs	r2, #0
 808fe4e:	4611      	mov	r1, r2
 808fe50:	4610      	mov	r0, r2
 808fe52:	f7ff ba6f 	b.w	808f334 <network_ready>
	...

0808fe58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 808fe58:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808fe5a:	4d0b      	ldr	r5, [pc, #44]	; (808fe88 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 808fe5c:	2428      	movs	r4, #40	; 0x28
 808fe5e:	4622      	mov	r2, r4
 808fe60:	2100      	movs	r1, #0
 808fe62:	4628      	mov	r0, r5
 808fe64:	f000 fbeb 	bl	809063e <memset>
        cid = -1;
 808fe68:	f04f 33ff 	mov.w	r3, #4294967295
 808fe6c:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
 808fe6e:	802c      	strh	r4, [r5, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 808fe70:	4d06      	ldr	r5, [pc, #24]	; (808fe8c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 808fe72:	4b07      	ldr	r3, [pc, #28]	; (808fe90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 808fe74:	4628      	mov	r0, r5
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 808fe76:	4622      	mov	r2, r4
 808fe78:	f840 3b04 	str.w	r3, [r0], #4
 808fe7c:	2100      	movs	r1, #0
 808fe7e:	f000 fbde 	bl	809063e <memset>
        size = sizeof(*this);
 808fe82:	80ac      	strh	r4, [r5, #4]
 808fe84:	bd38      	pop	{r3, r4, r5, pc}
 808fe86:	bf00      	nop
 808fe88:	20003a1c 	.word	0x20003a1c
 808fe8c:	200039f0 	.word	0x200039f0
 808fe90:	08093e48 	.word	0x08093e48

0808fe94 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 808fe94:	4770      	bx	lr

0808fe96 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808fe96:	7441      	strb	r1, [r0, #17]
 808fe98:	4770      	bx	lr

0808fe9a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 808fe9a:	7c00      	ldrb	r0, [r0, #16]
 808fe9c:	f7ff b96a 	b.w	808f174 <HAL_USART_Available_Data_For_Write>

0808fea0 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 808fea0:	7c00      	ldrb	r0, [r0, #16]
 808fea2:	f7ff b947 	b.w	808f134 <HAL_USART_Available_Data>

0808fea6 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 808fea6:	7c00      	ldrb	r0, [r0, #16]
 808fea8:	f7ff b954 	b.w	808f154 <HAL_USART_Peek_Data>

0808feac <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 808feac:	7c00      	ldrb	r0, [r0, #16]
 808feae:	f7ff b949 	b.w	808f144 <HAL_USART_Read_Data>

0808feb2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808feb2:	7c00      	ldrb	r0, [r0, #16]
 808feb4:	f7ff b956 	b.w	808f164 <HAL_USART_Flush_Data>

0808feb8 <_ZN11USARTSerialD0Ev>:
 808feb8:	b510      	push	{r4, lr}
 808feba:	4604      	mov	r4, r0
 808febc:	f7f0 f8f1 	bl	80800a2 <_ZdlPv>
 808fec0:	4620      	mov	r0, r4
 808fec2:	bd10      	pop	{r4, pc}

0808fec4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808fec4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808fec6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808fec8:	4604      	mov	r4, r0
 808feca:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808fecc:	b925      	cbnz	r5, 808fed8 <_ZN11USARTSerial5writeEh+0x14>
 808fece:	7c00      	ldrb	r0, [r0, #16]
 808fed0:	f7ff f950 	bl	808f174 <HAL_USART_Available_Data_For_Write>
 808fed4:	2800      	cmp	r0, #0
 808fed6:	dd05      	ble.n	808fee4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808fed8:	4631      	mov	r1, r6
 808feda:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808fedc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808fee0:	f7ff b920 	b.w	808f124 <HAL_USART_Write_Data>
  }
  return 0;
}
 808fee4:	4628      	mov	r0, r5
 808fee6:	bd70      	pop	{r4, r5, r6, pc}

0808fee8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808fee8:	b510      	push	{r4, lr}
 808feea:	4604      	mov	r4, r0
 808feec:	4608      	mov	r0, r1
 808feee:	4611      	mov	r1, r2
 808fef0:	2200      	movs	r2, #0
 808fef2:	6062      	str	r2, [r4, #4]
 808fef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808fef8:	60a2      	str	r2, [r4, #8]
 808fefa:	4a05      	ldr	r2, [pc, #20]	; (808ff10 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808fefc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808fefe:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 808ff00:	2201      	movs	r2, #1
 808ff02:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 808ff04:	461a      	mov	r2, r3
 808ff06:	f7ff f905 	bl	808f114 <HAL_USART_Init>
}
 808ff0a:	4620      	mov	r0, r4
 808ff0c:	bd10      	pop	{r4, pc}
 808ff0e:	bf00      	nop
 808ff10:	08093e58 	.word	0x08093e58

0808ff14 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808ff14:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808ff16:	4d0c      	ldr	r5, [pc, #48]	; (808ff48 <_Z22__fetch_global_Serial1v+0x34>)
 808ff18:	6829      	ldr	r1, [r5, #0]
 808ff1a:	f011 0401 	ands.w	r4, r1, #1
 808ff1e:	d111      	bne.n	808ff44 <_Z22__fetch_global_Serial1v+0x30>
 808ff20:	4628      	mov	r0, r5
 808ff22:	f7f0 f8c2 	bl	80800aa <__cxa_guard_acquire>
 808ff26:	b168      	cbz	r0, 808ff44 <_Z22__fetch_global_Serial1v+0x30>
 808ff28:	4a08      	ldr	r2, [pc, #32]	; (808ff4c <_Z22__fetch_global_Serial1v+0x38>)
 808ff2a:	4621      	mov	r1, r4
 808ff2c:	4b08      	ldr	r3, [pc, #32]	; (808ff50 <_Z22__fetch_global_Serial1v+0x3c>)
 808ff2e:	4809      	ldr	r0, [pc, #36]	; (808ff54 <_Z22__fetch_global_Serial1v+0x40>)
 808ff30:	f7ff ffda 	bl	808fee8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808ff34:	4628      	mov	r0, r5
 808ff36:	f7f0 f8bd 	bl	80800b4 <__cxa_guard_release>
 808ff3a:	4a07      	ldr	r2, [pc, #28]	; (808ff58 <_Z22__fetch_global_Serial1v+0x44>)
 808ff3c:	4907      	ldr	r1, [pc, #28]	; (808ff5c <_Z22__fetch_global_Serial1v+0x48>)
 808ff3e:	4805      	ldr	r0, [pc, #20]	; (808ff54 <_Z22__fetch_global_Serial1v+0x40>)
 808ff40:	f000 f854 	bl	808ffec <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808ff44:	4803      	ldr	r0, [pc, #12]	; (808ff54 <_Z22__fetch_global_Serial1v+0x40>)
 808ff46:	bd38      	pop	{r3, r4, r5, pc}
 808ff48:	20003adc 	.word	0x20003adc
 808ff4c:	20003ae0 	.word	0x20003ae0
 808ff50:	20003a58 	.word	0x20003a58
 808ff54:	20003a44 	.word	0x20003a44
 808ff58:	20000498 	.word	0x20000498
 808ff5c:	0808fe95 	.word	0x0808fe95

0808ff60 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808ff60:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808ff62:	4e11      	ldr	r6, [pc, #68]	; (808ffa8 <_GLOBAL__sub_I_SPI+0x48>)
 808ff64:	4d11      	ldr	r5, [pc, #68]	; (808ffac <_GLOBAL__sub_I_SPI+0x4c>)
 808ff66:	4c12      	ldr	r4, [pc, #72]	; (808ffb0 <_GLOBAL__sub_I_SPI+0x50>)
 808ff68:	2100      	movs	r1, #0
 808ff6a:	4630      	mov	r0, r6
 808ff6c:	f7ff fa2a 	bl	808f3c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808ff70:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808ff72:	4e10      	ldr	r6, [pc, #64]	; (808ffb4 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808ff74:	462a      	mov	r2, r5
 808ff76:	4621      	mov	r1, r4
 808ff78:	f000 f838 	bl	808ffec <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808ff7c:	2101      	movs	r1, #1
 808ff7e:	4630      	mov	r0, r6
 808ff80:	f7ff fa20 	bl	808f3c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808ff84:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808ff86:	4e0c      	ldr	r6, [pc, #48]	; (808ffb8 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808ff88:	462a      	mov	r2, r5
 808ff8a:	4621      	mov	r1, r4
 808ff8c:	f000 f82e 	bl	808ffec <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808ff90:	2102      	movs	r1, #2
 808ff92:	4630      	mov	r0, r6
 808ff94:	f7ff fa16 	bl	808f3c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808ff98:	462a      	mov	r2, r5
 808ff9a:	4621      	mov	r1, r4
 808ff9c:	4630      	mov	r0, r6
 808ff9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808ffa2:	f000 b823 	b.w	808ffec <__aeabi_atexit>
 808ffa6:	bf00      	nop
 808ffa8:	20003b64 	.word	0x20003b64
 808ffac:	20000498 	.word	0x20000498
 808ffb0:	0808f3b5 	.word	0x0808f3b5
 808ffb4:	20003b74 	.word	0x20003b74
 808ffb8:	20003b84 	.word	0x20003b84

0808ffbc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 808ffbc:	b513      	push	{r0, r1, r4, lr}
 808ffbe:	4c08      	ldr	r4, [pc, #32]	; (808ffe0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808ffc0:	2300      	movs	r3, #0
 808ffc2:	461a      	mov	r2, r3
 808ffc4:	4619      	mov	r1, r3
 808ffc6:	9300      	str	r3, [sp, #0]
 808ffc8:	4620      	mov	r0, r4
 808ffca:	f7ff fe63 	bl	808fc94 <_ZN9IPAddressC1Ehhhh>
 808ffce:	4620      	mov	r0, r4
 808ffd0:	4a04      	ldr	r2, [pc, #16]	; (808ffe4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808ffd2:	4905      	ldr	r1, [pc, #20]	; (808ffe8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808ffd4:	b002      	add	sp, #8
 808ffd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808ffda:	f000 b807 	b.w	808ffec <__aeabi_atexit>
 808ffde:	bf00      	nop
 808ffe0:	20003b98 	.word	0x20003b98
 808ffe4:	20000498 	.word	0x20000498
 808ffe8:	0808fc2d 	.word	0x0808fc2d

0808ffec <__aeabi_atexit>:
 808ffec:	460b      	mov	r3, r1
 808ffee:	4601      	mov	r1, r0
 808fff0:	4618      	mov	r0, r3
 808fff2:	f000 bae1 	b.w	80905b8 <__cxa_atexit>
	...

0808fff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808fff8:	4b18      	ldr	r3, [pc, #96]	; (809005c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808fffa:	681a      	ldr	r2, [r3, #0]
 808fffc:	07d1      	lsls	r1, r2, #31
 808fffe:	bf5c      	itt	pl
 8090000:	2201      	movpl	r2, #1
 8090002:	601a      	strpl	r2, [r3, #0]
 8090004:	4b16      	ldr	r3, [pc, #88]	; (8090060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8090006:	681a      	ldr	r2, [r3, #0]
 8090008:	07d2      	lsls	r2, r2, #31
 809000a:	bf5c      	itt	pl
 809000c:	2201      	movpl	r2, #1
 809000e:	601a      	strpl	r2, [r3, #0]
 8090010:	4b14      	ldr	r3, [pc, #80]	; (8090064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8090012:	681a      	ldr	r2, [r3, #0]
 8090014:	07d0      	lsls	r0, r2, #31
 8090016:	bf5c      	itt	pl
 8090018:	2201      	movpl	r2, #1
 809001a:	601a      	strpl	r2, [r3, #0]
 809001c:	4b12      	ldr	r3, [pc, #72]	; (8090068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 809001e:	681a      	ldr	r2, [r3, #0]
 8090020:	07d1      	lsls	r1, r2, #31
 8090022:	bf5c      	itt	pl
 8090024:	2201      	movpl	r2, #1
 8090026:	601a      	strpl	r2, [r3, #0]
 8090028:	4b10      	ldr	r3, [pc, #64]	; (809006c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 809002a:	681a      	ldr	r2, [r3, #0]
 809002c:	07d2      	lsls	r2, r2, #31
 809002e:	bf5c      	itt	pl
 8090030:	2201      	movpl	r2, #1
 8090032:	601a      	strpl	r2, [r3, #0]
 8090034:	4b0e      	ldr	r3, [pc, #56]	; (8090070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8090036:	681a      	ldr	r2, [r3, #0]
 8090038:	07d0      	lsls	r0, r2, #31
 809003a:	bf5c      	itt	pl
 809003c:	2201      	movpl	r2, #1
 809003e:	601a      	strpl	r2, [r3, #0]
 8090040:	4b0c      	ldr	r3, [pc, #48]	; (8090074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8090042:	681a      	ldr	r2, [r3, #0]
 8090044:	07d1      	lsls	r1, r2, #31
 8090046:	bf5c      	itt	pl
 8090048:	2201      	movpl	r2, #1
 809004a:	601a      	strpl	r2, [r3, #0]
 809004c:	4b0a      	ldr	r3, [pc, #40]	; (8090078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 809004e:	681a      	ldr	r2, [r3, #0]
 8090050:	07d2      	lsls	r2, r2, #31
 8090052:	bf5c      	itt	pl
 8090054:	2201      	movpl	r2, #1
 8090056:	601a      	strpl	r2, [r3, #0]
 8090058:	4770      	bx	lr
 809005a:	bf00      	nop
 809005c:	20003bbc 	.word	0x20003bbc
 8090060:	20003bb8 	.word	0x20003bb8
 8090064:	20003bb4 	.word	0x20003bb4
 8090068:	20003bb0 	.word	0x20003bb0
 809006c:	20003bac 	.word	0x20003bac
 8090070:	20003ba8 	.word	0x20003ba8
 8090074:	20003ba4 	.word	0x20003ba4
 8090078:	20003ba0 	.word	0x20003ba0

0809007c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 809007c:	4b24      	ldr	r3, [pc, #144]	; (8090110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 809007e:	681a      	ldr	r2, [r3, #0]
 8090080:	07d0      	lsls	r0, r2, #31
 8090082:	bf5c      	itt	pl
 8090084:	2201      	movpl	r2, #1
 8090086:	601a      	strpl	r2, [r3, #0]
 8090088:	4b22      	ldr	r3, [pc, #136]	; (8090114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 809008a:	681a      	ldr	r2, [r3, #0]
 809008c:	07d1      	lsls	r1, r2, #31
 809008e:	bf5c      	itt	pl
 8090090:	2201      	movpl	r2, #1
 8090092:	601a      	strpl	r2, [r3, #0]
 8090094:	4b20      	ldr	r3, [pc, #128]	; (8090118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8090096:	681a      	ldr	r2, [r3, #0]
 8090098:	07d2      	lsls	r2, r2, #31
 809009a:	bf5c      	itt	pl
 809009c:	2201      	movpl	r2, #1
 809009e:	601a      	strpl	r2, [r3, #0]
 80900a0:	4b1e      	ldr	r3, [pc, #120]	; (809011c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80900a2:	681a      	ldr	r2, [r3, #0]
 80900a4:	07d0      	lsls	r0, r2, #31
 80900a6:	bf5c      	itt	pl
 80900a8:	2201      	movpl	r2, #1
 80900aa:	601a      	strpl	r2, [r3, #0]
 80900ac:	4b1c      	ldr	r3, [pc, #112]	; (8090120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80900ae:	681a      	ldr	r2, [r3, #0]
 80900b0:	07d1      	lsls	r1, r2, #31
 80900b2:	bf5c      	itt	pl
 80900b4:	2201      	movpl	r2, #1
 80900b6:	601a      	strpl	r2, [r3, #0]
 80900b8:	4b1a      	ldr	r3, [pc, #104]	; (8090124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80900ba:	681a      	ldr	r2, [r3, #0]
 80900bc:	07d2      	lsls	r2, r2, #31
 80900be:	bf5c      	itt	pl
 80900c0:	2201      	movpl	r2, #1
 80900c2:	601a      	strpl	r2, [r3, #0]
 80900c4:	4b18      	ldr	r3, [pc, #96]	; (8090128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80900c6:	681a      	ldr	r2, [r3, #0]
 80900c8:	07d0      	lsls	r0, r2, #31
 80900ca:	bf5c      	itt	pl
 80900cc:	2201      	movpl	r2, #1
 80900ce:	601a      	strpl	r2, [r3, #0]
 80900d0:	4b16      	ldr	r3, [pc, #88]	; (809012c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80900d2:	681a      	ldr	r2, [r3, #0]
 80900d4:	07d1      	lsls	r1, r2, #31
 80900d6:	bf5c      	itt	pl
 80900d8:	2201      	movpl	r2, #1
 80900da:	601a      	strpl	r2, [r3, #0]
 80900dc:	4b14      	ldr	r3, [pc, #80]	; (8090130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80900de:	681a      	ldr	r2, [r3, #0]
 80900e0:	07d2      	lsls	r2, r2, #31
 80900e2:	bf5c      	itt	pl
 80900e4:	2201      	movpl	r2, #1
 80900e6:	601a      	strpl	r2, [r3, #0]
 80900e8:	4b12      	ldr	r3, [pc, #72]	; (8090134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80900ea:	681a      	ldr	r2, [r3, #0]
 80900ec:	07d0      	lsls	r0, r2, #31
 80900ee:	bf5c      	itt	pl
 80900f0:	2201      	movpl	r2, #1
 80900f2:	601a      	strpl	r2, [r3, #0]
 80900f4:	4b10      	ldr	r3, [pc, #64]	; (8090138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80900f6:	681a      	ldr	r2, [r3, #0]
 80900f8:	07d1      	lsls	r1, r2, #31
 80900fa:	bf5c      	itt	pl
 80900fc:	2201      	movpl	r2, #1
 80900fe:	601a      	strpl	r2, [r3, #0]
 8090100:	4b0e      	ldr	r3, [pc, #56]	; (809013c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8090102:	681a      	ldr	r2, [r3, #0]
 8090104:	07d2      	lsls	r2, r2, #31
 8090106:	bf5c      	itt	pl
 8090108:	2201      	movpl	r2, #1
 809010a:	601a      	strpl	r2, [r3, #0]
 809010c:	4770      	bx	lr
 809010e:	bf00      	nop
 8090110:	20003bec 	.word	0x20003bec
 8090114:	20003be8 	.word	0x20003be8
 8090118:	20003be4 	.word	0x20003be4
 809011c:	20003be0 	.word	0x20003be0
 8090120:	20003bdc 	.word	0x20003bdc
 8090124:	20003bd8 	.word	0x20003bd8
 8090128:	20003bd4 	.word	0x20003bd4
 809012c:	20003bd0 	.word	0x20003bd0
 8090130:	20003bcc 	.word	0x20003bcc
 8090134:	20003bc8 	.word	0x20003bc8
 8090138:	20003bc4 	.word	0x20003bc4
 809013c:	20003bc0 	.word	0x20003bc0

08090140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8090140:	4b24      	ldr	r3, [pc, #144]	; (80901d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8090142:	681a      	ldr	r2, [r3, #0]
 8090144:	07d0      	lsls	r0, r2, #31
 8090146:	bf5c      	itt	pl
 8090148:	2201      	movpl	r2, #1
 809014a:	601a      	strpl	r2, [r3, #0]
 809014c:	4b22      	ldr	r3, [pc, #136]	; (80901d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 809014e:	681a      	ldr	r2, [r3, #0]
 8090150:	07d1      	lsls	r1, r2, #31
 8090152:	bf5c      	itt	pl
 8090154:	2201      	movpl	r2, #1
 8090156:	601a      	strpl	r2, [r3, #0]
 8090158:	4b20      	ldr	r3, [pc, #128]	; (80901dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 809015a:	681a      	ldr	r2, [r3, #0]
 809015c:	07d2      	lsls	r2, r2, #31
 809015e:	bf5c      	itt	pl
 8090160:	2201      	movpl	r2, #1
 8090162:	601a      	strpl	r2, [r3, #0]
 8090164:	4b1e      	ldr	r3, [pc, #120]	; (80901e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8090166:	681a      	ldr	r2, [r3, #0]
 8090168:	07d0      	lsls	r0, r2, #31
 809016a:	bf5c      	itt	pl
 809016c:	2201      	movpl	r2, #1
 809016e:	601a      	strpl	r2, [r3, #0]
 8090170:	4b1c      	ldr	r3, [pc, #112]	; (80901e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8090172:	681a      	ldr	r2, [r3, #0]
 8090174:	07d1      	lsls	r1, r2, #31
 8090176:	bf5c      	itt	pl
 8090178:	2201      	movpl	r2, #1
 809017a:	601a      	strpl	r2, [r3, #0]
 809017c:	4b1a      	ldr	r3, [pc, #104]	; (80901e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 809017e:	681a      	ldr	r2, [r3, #0]
 8090180:	07d2      	lsls	r2, r2, #31
 8090182:	bf5c      	itt	pl
 8090184:	2201      	movpl	r2, #1
 8090186:	601a      	strpl	r2, [r3, #0]
 8090188:	4b18      	ldr	r3, [pc, #96]	; (80901ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 809018a:	681a      	ldr	r2, [r3, #0]
 809018c:	07d0      	lsls	r0, r2, #31
 809018e:	bf5c      	itt	pl
 8090190:	2201      	movpl	r2, #1
 8090192:	601a      	strpl	r2, [r3, #0]
 8090194:	4b16      	ldr	r3, [pc, #88]	; (80901f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8090196:	681a      	ldr	r2, [r3, #0]
 8090198:	07d1      	lsls	r1, r2, #31
 809019a:	bf5c      	itt	pl
 809019c:	2201      	movpl	r2, #1
 809019e:	601a      	strpl	r2, [r3, #0]
 80901a0:	4b14      	ldr	r3, [pc, #80]	; (80901f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80901a2:	681a      	ldr	r2, [r3, #0]
 80901a4:	07d2      	lsls	r2, r2, #31
 80901a6:	bf5c      	itt	pl
 80901a8:	2201      	movpl	r2, #1
 80901aa:	601a      	strpl	r2, [r3, #0]
 80901ac:	4b12      	ldr	r3, [pc, #72]	; (80901f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80901ae:	681a      	ldr	r2, [r3, #0]
 80901b0:	07d0      	lsls	r0, r2, #31
 80901b2:	bf5c      	itt	pl
 80901b4:	2201      	movpl	r2, #1
 80901b6:	601a      	strpl	r2, [r3, #0]
 80901b8:	4b10      	ldr	r3, [pc, #64]	; (80901fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80901ba:	681a      	ldr	r2, [r3, #0]
 80901bc:	07d1      	lsls	r1, r2, #31
 80901be:	bf5c      	itt	pl
 80901c0:	2201      	movpl	r2, #1
 80901c2:	601a      	strpl	r2, [r3, #0]
 80901c4:	4b0e      	ldr	r3, [pc, #56]	; (8090200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80901c6:	681a      	ldr	r2, [r3, #0]
 80901c8:	07d2      	lsls	r2, r2, #31
 80901ca:	bf5c      	itt	pl
 80901cc:	2201      	movpl	r2, #1
 80901ce:	601a      	strpl	r2, [r3, #0]
 80901d0:	4770      	bx	lr
 80901d2:	bf00      	nop
 80901d4:	20003c1c 	.word	0x20003c1c
 80901d8:	20003c18 	.word	0x20003c18
 80901dc:	20003c14 	.word	0x20003c14
 80901e0:	20003c10 	.word	0x20003c10
 80901e4:	20003c0c 	.word	0x20003c0c
 80901e8:	20003c08 	.word	0x20003c08
 80901ec:	20003c04 	.word	0x20003c04
 80901f0:	20003c00 	.word	0x20003c00
 80901f4:	20003bfc 	.word	0x20003bfc
 80901f8:	20003bf8 	.word	0x20003bf8
 80901fc:	20003bf4 	.word	0x20003bf4
 8090200:	20003bf0 	.word	0x20003bf0

08090204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8090204:	4b18      	ldr	r3, [pc, #96]	; (8090268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8090206:	681a      	ldr	r2, [r3, #0]
 8090208:	07d1      	lsls	r1, r2, #31
 809020a:	bf5c      	itt	pl
 809020c:	2201      	movpl	r2, #1
 809020e:	601a      	strpl	r2, [r3, #0]
 8090210:	4b16      	ldr	r3, [pc, #88]	; (809026c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8090212:	681a      	ldr	r2, [r3, #0]
 8090214:	07d2      	lsls	r2, r2, #31
 8090216:	bf5c      	itt	pl
 8090218:	2201      	movpl	r2, #1
 809021a:	601a      	strpl	r2, [r3, #0]
 809021c:	4b14      	ldr	r3, [pc, #80]	; (8090270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 809021e:	681a      	ldr	r2, [r3, #0]
 8090220:	07d0      	lsls	r0, r2, #31
 8090222:	bf5c      	itt	pl
 8090224:	2201      	movpl	r2, #1
 8090226:	601a      	strpl	r2, [r3, #0]
 8090228:	4b12      	ldr	r3, [pc, #72]	; (8090274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 809022a:	681a      	ldr	r2, [r3, #0]
 809022c:	07d1      	lsls	r1, r2, #31
 809022e:	bf5c      	itt	pl
 8090230:	2201      	movpl	r2, #1
 8090232:	601a      	strpl	r2, [r3, #0]
 8090234:	4b10      	ldr	r3, [pc, #64]	; (8090278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8090236:	681a      	ldr	r2, [r3, #0]
 8090238:	07d2      	lsls	r2, r2, #31
 809023a:	bf5c      	itt	pl
 809023c:	2201      	movpl	r2, #1
 809023e:	601a      	strpl	r2, [r3, #0]
 8090240:	4b0e      	ldr	r3, [pc, #56]	; (809027c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8090242:	681a      	ldr	r2, [r3, #0]
 8090244:	07d0      	lsls	r0, r2, #31
 8090246:	bf5c      	itt	pl
 8090248:	2201      	movpl	r2, #1
 809024a:	601a      	strpl	r2, [r3, #0]
 809024c:	4b0c      	ldr	r3, [pc, #48]	; (8090280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 809024e:	681a      	ldr	r2, [r3, #0]
 8090250:	07d1      	lsls	r1, r2, #31
 8090252:	bf5c      	itt	pl
 8090254:	2201      	movpl	r2, #1
 8090256:	601a      	strpl	r2, [r3, #0]
 8090258:	4b0a      	ldr	r3, [pc, #40]	; (8090284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 809025a:	681a      	ldr	r2, [r3, #0]
 809025c:	07d2      	lsls	r2, r2, #31
 809025e:	bf5c      	itt	pl
 8090260:	2201      	movpl	r2, #1
 8090262:	601a      	strpl	r2, [r3, #0]
 8090264:	4770      	bx	lr
 8090266:	bf00      	nop
 8090268:	20003c3c 	.word	0x20003c3c
 809026c:	20003c38 	.word	0x20003c38
 8090270:	20003c34 	.word	0x20003c34
 8090274:	20003c30 	.word	0x20003c30
 8090278:	20003c2c 	.word	0x20003c2c
 809027c:	20003c28 	.word	0x20003c28
 8090280:	20003c24 	.word	0x20003c24
 8090284:	20003c20 	.word	0x20003c20

08090288 <__aeabi_uldivmod>:
 8090288:	b953      	cbnz	r3, 80902a0 <__aeabi_uldivmod+0x18>
 809028a:	b94a      	cbnz	r2, 80902a0 <__aeabi_uldivmod+0x18>
 809028c:	2900      	cmp	r1, #0
 809028e:	bf08      	it	eq
 8090290:	2800      	cmpeq	r0, #0
 8090292:	bf1c      	itt	ne
 8090294:	f04f 31ff 	movne.w	r1, #4294967295
 8090298:	f04f 30ff 	movne.w	r0, #4294967295
 809029c:	f000 b982 	b.w	80905a4 <__aeabi_idiv0>
 80902a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80902a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80902a8:	f000 f806 	bl	80902b8 <__udivmoddi4>
 80902ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80902b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80902b4:	b004      	add	sp, #16
 80902b6:	4770      	bx	lr

080902b8 <__udivmoddi4>:
 80902b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80902bc:	468c      	mov	ip, r1
 80902be:	460c      	mov	r4, r1
 80902c0:	4605      	mov	r5, r0
 80902c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80902c4:	2b00      	cmp	r3, #0
 80902c6:	d14f      	bne.n	8090368 <__udivmoddi4+0xb0>
 80902c8:	428a      	cmp	r2, r1
 80902ca:	4617      	mov	r7, r2
 80902cc:	d96b      	bls.n	80903a6 <__udivmoddi4+0xee>
 80902ce:	fab2 fe82 	clz	lr, r2
 80902d2:	f1be 0f00 	cmp.w	lr, #0
 80902d6:	d00b      	beq.n	80902f0 <__udivmoddi4+0x38>
 80902d8:	f1ce 0520 	rsb	r5, lr, #32
 80902dc:	fa20 f505 	lsr.w	r5, r0, r5
 80902e0:	fa01 f30e 	lsl.w	r3, r1, lr
 80902e4:	ea45 0c03 	orr.w	ip, r5, r3
 80902e8:	fa02 f70e 	lsl.w	r7, r2, lr
 80902ec:	fa00 f50e 	lsl.w	r5, r0, lr
 80902f0:	0c39      	lsrs	r1, r7, #16
 80902f2:	fbbc f0f1 	udiv	r0, ip, r1
 80902f6:	b2ba      	uxth	r2, r7
 80902f8:	fb01 c310 	mls	r3, r1, r0, ip
 80902fc:	fb00 f802 	mul.w	r8, r0, r2
 8090300:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8090304:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8090308:	45a0      	cmp	r8, r4
 809030a:	d909      	bls.n	8090320 <__udivmoddi4+0x68>
 809030c:	19e4      	adds	r4, r4, r7
 809030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8090312:	f080 8128 	bcs.w	8090566 <__udivmoddi4+0x2ae>
 8090316:	45a0      	cmp	r8, r4
 8090318:	f240 8125 	bls.w	8090566 <__udivmoddi4+0x2ae>
 809031c:	3802      	subs	r0, #2
 809031e:	443c      	add	r4, r7
 8090320:	ebc8 0404 	rsb	r4, r8, r4
 8090324:	fbb4 f3f1 	udiv	r3, r4, r1
 8090328:	fb01 4c13 	mls	ip, r1, r3, r4
 809032c:	fb03 f202 	mul.w	r2, r3, r2
 8090330:	b2ac      	uxth	r4, r5
 8090332:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8090336:	428a      	cmp	r2, r1
 8090338:	d909      	bls.n	809034e <__udivmoddi4+0x96>
 809033a:	19c9      	adds	r1, r1, r7
 809033c:	f103 34ff 	add.w	r4, r3, #4294967295
 8090340:	f080 810f 	bcs.w	8090562 <__udivmoddi4+0x2aa>
 8090344:	428a      	cmp	r2, r1
 8090346:	f240 810c 	bls.w	8090562 <__udivmoddi4+0x2aa>
 809034a:	3b02      	subs	r3, #2
 809034c:	4439      	add	r1, r7
 809034e:	1a8a      	subs	r2, r1, r2
 8090350:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8090354:	2100      	movs	r1, #0
 8090356:	2e00      	cmp	r6, #0
 8090358:	d063      	beq.n	8090422 <__udivmoddi4+0x16a>
 809035a:	fa22 f20e 	lsr.w	r2, r2, lr
 809035e:	2300      	movs	r3, #0
 8090360:	e886 000c 	stmia.w	r6, {r2, r3}
 8090364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8090368:	428b      	cmp	r3, r1
 809036a:	d907      	bls.n	809037c <__udivmoddi4+0xc4>
 809036c:	2e00      	cmp	r6, #0
 809036e:	d056      	beq.n	809041e <__udivmoddi4+0x166>
 8090370:	2100      	movs	r1, #0
 8090372:	e886 0011 	stmia.w	r6, {r0, r4}
 8090376:	4608      	mov	r0, r1
 8090378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809037c:	fab3 f183 	clz	r1, r3
 8090380:	2900      	cmp	r1, #0
 8090382:	f040 8093 	bne.w	80904ac <__udivmoddi4+0x1f4>
 8090386:	42a3      	cmp	r3, r4
 8090388:	d302      	bcc.n	8090390 <__udivmoddi4+0xd8>
 809038a:	4282      	cmp	r2, r0
 809038c:	f200 80fe 	bhi.w	809058c <__udivmoddi4+0x2d4>
 8090390:	1a85      	subs	r5, r0, r2
 8090392:	eb64 0303 	sbc.w	r3, r4, r3
 8090396:	469c      	mov	ip, r3
 8090398:	2001      	movs	r0, #1
 809039a:	2e00      	cmp	r6, #0
 809039c:	d041      	beq.n	8090422 <__udivmoddi4+0x16a>
 809039e:	e886 1020 	stmia.w	r6, {r5, ip}
 80903a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80903a6:	b912      	cbnz	r2, 80903ae <__udivmoddi4+0xf6>
 80903a8:	2701      	movs	r7, #1
 80903aa:	fbb7 f7f2 	udiv	r7, r7, r2
 80903ae:	fab7 fe87 	clz	lr, r7
 80903b2:	f1be 0f00 	cmp.w	lr, #0
 80903b6:	d136      	bne.n	8090426 <__udivmoddi4+0x16e>
 80903b8:	1be4      	subs	r4, r4, r7
 80903ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80903be:	fa1f f987 	uxth.w	r9, r7
 80903c2:	2101      	movs	r1, #1
 80903c4:	fbb4 f3f8 	udiv	r3, r4, r8
 80903c8:	fb08 4413 	mls	r4, r8, r3, r4
 80903cc:	fb09 f203 	mul.w	r2, r9, r3
 80903d0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80903d4:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80903d8:	42a2      	cmp	r2, r4
 80903da:	d907      	bls.n	80903ec <__udivmoddi4+0x134>
 80903dc:	19e4      	adds	r4, r4, r7
 80903de:	f103 30ff 	add.w	r0, r3, #4294967295
 80903e2:	d202      	bcs.n	80903ea <__udivmoddi4+0x132>
 80903e4:	42a2      	cmp	r2, r4
 80903e6:	f200 80d3 	bhi.w	8090590 <__udivmoddi4+0x2d8>
 80903ea:	4603      	mov	r3, r0
 80903ec:	1aa4      	subs	r4, r4, r2
 80903ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80903f2:	fb08 4810 	mls	r8, r8, r0, r4
 80903f6:	fb09 f900 	mul.w	r9, r9, r0
 80903fa:	b2ac      	uxth	r4, r5
 80903fc:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8090400:	4591      	cmp	r9, r2
 8090402:	d907      	bls.n	8090414 <__udivmoddi4+0x15c>
 8090404:	19d2      	adds	r2, r2, r7
 8090406:	f100 34ff 	add.w	r4, r0, #4294967295
 809040a:	d202      	bcs.n	8090412 <__udivmoddi4+0x15a>
 809040c:	4591      	cmp	r9, r2
 809040e:	f200 80ba 	bhi.w	8090586 <__udivmoddi4+0x2ce>
 8090412:	4620      	mov	r0, r4
 8090414:	ebc9 0202 	rsb	r2, r9, r2
 8090418:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 809041c:	e79b      	b.n	8090356 <__udivmoddi4+0x9e>
 809041e:	4631      	mov	r1, r6
 8090420:	4630      	mov	r0, r6
 8090422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8090426:	fa07 f70e 	lsl.w	r7, r7, lr
 809042a:	f1ce 0c20 	rsb	ip, lr, #32
 809042e:	fa24 f30c 	lsr.w	r3, r4, ip
 8090432:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8090436:	fbb3 faf8 	udiv	sl, r3, r8
 809043a:	fa1f f987 	uxth.w	r9, r7
 809043e:	fb08 351a 	mls	r5, r8, sl, r3
 8090442:	fa20 fc0c 	lsr.w	ip, r0, ip
 8090446:	fa04 f40e 	lsl.w	r4, r4, lr
 809044a:	fb0a fb09 	mul.w	fp, sl, r9
 809044e:	ea4c 0c04 	orr.w	ip, ip, r4
 8090452:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8090456:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 809045a:	459b      	cmp	fp, r3
 809045c:	fa00 f50e 	lsl.w	r5, r0, lr
 8090460:	d90a      	bls.n	8090478 <__udivmoddi4+0x1c0>
 8090462:	19db      	adds	r3, r3, r7
 8090464:	f10a 32ff 	add.w	r2, sl, #4294967295
 8090468:	f080 808b 	bcs.w	8090582 <__udivmoddi4+0x2ca>
 809046c:	459b      	cmp	fp, r3
 809046e:	f240 8088 	bls.w	8090582 <__udivmoddi4+0x2ca>
 8090472:	f1aa 0a02 	sub.w	sl, sl, #2
 8090476:	443b      	add	r3, r7
 8090478:	ebcb 0303 	rsb	r3, fp, r3
 809047c:	fbb3 f0f8 	udiv	r0, r3, r8
 8090480:	fb08 3310 	mls	r3, r8, r0, r3
 8090484:	fb00 f409 	mul.w	r4, r0, r9
 8090488:	fa1f fc8c 	uxth.w	ip, ip
 809048c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8090490:	429c      	cmp	r4, r3
 8090492:	d907      	bls.n	80904a4 <__udivmoddi4+0x1ec>
 8090494:	19db      	adds	r3, r3, r7
 8090496:	f100 32ff 	add.w	r2, r0, #4294967295
 809049a:	d26e      	bcs.n	809057a <__udivmoddi4+0x2c2>
 809049c:	429c      	cmp	r4, r3
 809049e:	d96c      	bls.n	809057a <__udivmoddi4+0x2c2>
 80904a0:	3802      	subs	r0, #2
 80904a2:	443b      	add	r3, r7
 80904a4:	1b1c      	subs	r4, r3, r4
 80904a6:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80904aa:	e78b      	b.n	80903c4 <__udivmoddi4+0x10c>
 80904ac:	f1c1 0e20 	rsb	lr, r1, #32
 80904b0:	408b      	lsls	r3, r1
 80904b2:	fa22 fc0e 	lsr.w	ip, r2, lr
 80904b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80904ba:	fa24 f70e 	lsr.w	r7, r4, lr
 80904be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80904c2:	fbb7 faf9 	udiv	sl, r7, r9
 80904c6:	fa1f f38c 	uxth.w	r3, ip
 80904ca:	fb09 771a 	mls	r7, r9, sl, r7
 80904ce:	fa20 f80e 	lsr.w	r8, r0, lr
 80904d2:	408c      	lsls	r4, r1
 80904d4:	fb0a f503 	mul.w	r5, sl, r3
 80904d8:	ea48 0404 	orr.w	r4, r8, r4
 80904dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80904e0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80904e4:	42bd      	cmp	r5, r7
 80904e6:	fa02 f201 	lsl.w	r2, r2, r1
 80904ea:	fa00 fb01 	lsl.w	fp, r0, r1
 80904ee:	d909      	bls.n	8090504 <__udivmoddi4+0x24c>
 80904f0:	eb17 070c 	adds.w	r7, r7, ip
 80904f4:	f10a 30ff 	add.w	r0, sl, #4294967295
 80904f8:	d241      	bcs.n	809057e <__udivmoddi4+0x2c6>
 80904fa:	42bd      	cmp	r5, r7
 80904fc:	d93f      	bls.n	809057e <__udivmoddi4+0x2c6>
 80904fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8090502:	4467      	add	r7, ip
 8090504:	1b7f      	subs	r7, r7, r5
 8090506:	fbb7 f5f9 	udiv	r5, r7, r9
 809050a:	fb09 7715 	mls	r7, r9, r5, r7
 809050e:	fb05 f303 	mul.w	r3, r5, r3
 8090512:	b2a4      	uxth	r4, r4
 8090514:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8090518:	42bb      	cmp	r3, r7
 809051a:	d908      	bls.n	809052e <__udivmoddi4+0x276>
 809051c:	eb17 070c 	adds.w	r7, r7, ip
 8090520:	f105 30ff 	add.w	r0, r5, #4294967295
 8090524:	d227      	bcs.n	8090576 <__udivmoddi4+0x2be>
 8090526:	42bb      	cmp	r3, r7
 8090528:	d925      	bls.n	8090576 <__udivmoddi4+0x2be>
 809052a:	3d02      	subs	r5, #2
 809052c:	4467      	add	r7, ip
 809052e:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8090532:	fba0 8902 	umull	r8, r9, r0, r2
 8090536:	1aff      	subs	r7, r7, r3
 8090538:	454f      	cmp	r7, r9
 809053a:	4645      	mov	r5, r8
 809053c:	464c      	mov	r4, r9
 809053e:	d314      	bcc.n	809056a <__udivmoddi4+0x2b2>
 8090540:	d029      	beq.n	8090596 <__udivmoddi4+0x2de>
 8090542:	b366      	cbz	r6, 809059e <__udivmoddi4+0x2e6>
 8090544:	ebbb 0305 	subs.w	r3, fp, r5
 8090548:	eb67 0704 	sbc.w	r7, r7, r4
 809054c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8090550:	40cb      	lsrs	r3, r1
 8090552:	40cf      	lsrs	r7, r1
 8090554:	ea4e 0303 	orr.w	r3, lr, r3
 8090558:	e886 0088 	stmia.w	r6, {r3, r7}
 809055c:	2100      	movs	r1, #0
 809055e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8090562:	4623      	mov	r3, r4
 8090564:	e6f3      	b.n	809034e <__udivmoddi4+0x96>
 8090566:	4618      	mov	r0, r3
 8090568:	e6da      	b.n	8090320 <__udivmoddi4+0x68>
 809056a:	ebb8 0502 	subs.w	r5, r8, r2
 809056e:	eb69 040c 	sbc.w	r4, r9, ip
 8090572:	3801      	subs	r0, #1
 8090574:	e7e5      	b.n	8090542 <__udivmoddi4+0x28a>
 8090576:	4605      	mov	r5, r0
 8090578:	e7d9      	b.n	809052e <__udivmoddi4+0x276>
 809057a:	4610      	mov	r0, r2
 809057c:	e792      	b.n	80904a4 <__udivmoddi4+0x1ec>
 809057e:	4682      	mov	sl, r0
 8090580:	e7c0      	b.n	8090504 <__udivmoddi4+0x24c>
 8090582:	4692      	mov	sl, r2
 8090584:	e778      	b.n	8090478 <__udivmoddi4+0x1c0>
 8090586:	3802      	subs	r0, #2
 8090588:	443a      	add	r2, r7
 809058a:	e743      	b.n	8090414 <__udivmoddi4+0x15c>
 809058c:	4608      	mov	r0, r1
 809058e:	e704      	b.n	809039a <__udivmoddi4+0xe2>
 8090590:	3b02      	subs	r3, #2
 8090592:	443c      	add	r4, r7
 8090594:	e72a      	b.n	80903ec <__udivmoddi4+0x134>
 8090596:	45c3      	cmp	fp, r8
 8090598:	d3e7      	bcc.n	809056a <__udivmoddi4+0x2b2>
 809059a:	463c      	mov	r4, r7
 809059c:	e7d1      	b.n	8090542 <__udivmoddi4+0x28a>
 809059e:	4631      	mov	r1, r6
 80905a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080905a4 <__aeabi_idiv0>:
 80905a4:	4770      	bx	lr
 80905a6:	bf00      	nop

080905a8 <calloc>:
 80905a8:	4b02      	ldr	r3, [pc, #8]	; (80905b4 <calloc+0xc>)
 80905aa:	460a      	mov	r2, r1
 80905ac:	4601      	mov	r1, r0
 80905ae:	6818      	ldr	r0, [r3, #0]
 80905b0:	f000 b84d 	b.w	809064e <_calloc_r>
 80905b4:	20000494 	.word	0x20000494

080905b8 <__cxa_atexit>:
 80905b8:	b510      	push	{r4, lr}
 80905ba:	4c05      	ldr	r4, [pc, #20]	; (80905d0 <__cxa_atexit+0x18>)
 80905bc:	4613      	mov	r3, r2
 80905be:	b12c      	cbz	r4, 80905cc <__cxa_atexit+0x14>
 80905c0:	460a      	mov	r2, r1
 80905c2:	4601      	mov	r1, r0
 80905c4:	2002      	movs	r0, #2
 80905c6:	f3af 8000 	nop.w
 80905ca:	bd10      	pop	{r4, pc}
 80905cc:	4620      	mov	r0, r4
 80905ce:	bd10      	pop	{r4, pc}
 80905d0:	00000000 	.word	0x00000000

080905d4 <memcmp>:
 80905d4:	b510      	push	{r4, lr}
 80905d6:	3901      	subs	r1, #1
 80905d8:	4402      	add	r2, r0
 80905da:	4290      	cmp	r0, r2
 80905dc:	d007      	beq.n	80905ee <memcmp+0x1a>
 80905de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80905e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80905e6:	42a3      	cmp	r3, r4
 80905e8:	d0f7      	beq.n	80905da <memcmp+0x6>
 80905ea:	1b18      	subs	r0, r3, r4
 80905ec:	bd10      	pop	{r4, pc}
 80905ee:	2000      	movs	r0, #0
 80905f0:	bd10      	pop	{r4, pc}

080905f2 <memcpy>:
 80905f2:	b510      	push	{r4, lr}
 80905f4:	1e43      	subs	r3, r0, #1
 80905f6:	440a      	add	r2, r1
 80905f8:	4291      	cmp	r1, r2
 80905fa:	d004      	beq.n	8090606 <memcpy+0x14>
 80905fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8090600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8090604:	e7f8      	b.n	80905f8 <memcpy+0x6>
 8090606:	bd10      	pop	{r4, pc}

08090608 <memmove>:
 8090608:	4288      	cmp	r0, r1
 809060a:	b510      	push	{r4, lr}
 809060c:	eb01 0302 	add.w	r3, r1, r2
 8090610:	d801      	bhi.n	8090616 <memmove+0xe>
 8090612:	1e42      	subs	r2, r0, #1
 8090614:	e00b      	b.n	809062e <memmove+0x26>
 8090616:	4298      	cmp	r0, r3
 8090618:	d2fb      	bcs.n	8090612 <memmove+0xa>
 809061a:	1881      	adds	r1, r0, r2
 809061c:	1ad2      	subs	r2, r2, r3
 809061e:	42d3      	cmn	r3, r2
 8090620:	d004      	beq.n	809062c <memmove+0x24>
 8090622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8090626:	f801 4d01 	strb.w	r4, [r1, #-1]!
 809062a:	e7f8      	b.n	809061e <memmove+0x16>
 809062c:	bd10      	pop	{r4, pc}
 809062e:	4299      	cmp	r1, r3
 8090630:	d004      	beq.n	809063c <memmove+0x34>
 8090632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8090636:	f802 4f01 	strb.w	r4, [r2, #1]!
 809063a:	e7f8      	b.n	809062e <memmove+0x26>
 809063c:	bd10      	pop	{r4, pc}

0809063e <memset>:
 809063e:	4603      	mov	r3, r0
 8090640:	4402      	add	r2, r0
 8090642:	4293      	cmp	r3, r2
 8090644:	d002      	beq.n	809064c <memset+0xe>
 8090646:	f803 1b01 	strb.w	r1, [r3], #1
 809064a:	e7fa      	b.n	8090642 <memset+0x4>
 809064c:	4770      	bx	lr

0809064e <_calloc_r>:
 809064e:	b538      	push	{r3, r4, r5, lr}
 8090650:	fb02 f401 	mul.w	r4, r2, r1
 8090654:	4621      	mov	r1, r4
 8090656:	f7fe fea5 	bl	808f3a4 <_malloc_r>
 809065a:	4605      	mov	r5, r0
 809065c:	b118      	cbz	r0, 8090666 <_calloc_r+0x18>
 809065e:	4622      	mov	r2, r4
 8090660:	2100      	movs	r1, #0
 8090662:	f7ff ffec 	bl	809063e <memset>
 8090666:	4628      	mov	r0, r5
 8090668:	bd38      	pop	{r3, r4, r5, pc}

0809066a <strcmp>:
 809066a:	f810 2b01 	ldrb.w	r2, [r0], #1
 809066e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8090672:	2a01      	cmp	r2, #1
 8090674:	bf28      	it	cs
 8090676:	429a      	cmpcs	r2, r3
 8090678:	d0f7      	beq.n	809066a <strcmp>
 809067a:	1ad0      	subs	r0, r2, r3
 809067c:	4770      	bx	lr

0809067e <strlen>:
 809067e:	4603      	mov	r3, r0
 8090680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8090684:	2a00      	cmp	r2, #0
 8090686:	d1fb      	bne.n	8090680 <strlen+0x2>
 8090688:	1a18      	subs	r0, r3, r0
 809068a:	3801      	subs	r0, #1
 809068c:	4770      	bx	lr

0809068e <strstr>:
 809068e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8090690:	7803      	ldrb	r3, [r0, #0]
 8090692:	b963      	cbnz	r3, 80906ae <strstr+0x20>
 8090694:	780b      	ldrb	r3, [r1, #0]
 8090696:	2b00      	cmp	r3, #0
 8090698:	bf18      	it	ne
 809069a:	2000      	movne	r0, #0
 809069c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 809069e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80906a2:	b162      	cbz	r2, 80906be <strstr+0x30>
 80906a4:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80906a8:	4630      	mov	r0, r6
 80906aa:	4297      	cmp	r7, r2
 80906ac:	d0f7      	beq.n	809069e <strstr+0x10>
 80906ae:	4603      	mov	r3, r0
 80906b0:	1c46      	adds	r6, r0, #1
 80906b2:	7800      	ldrb	r0, [r0, #0]
 80906b4:	b110      	cbz	r0, 80906bc <strstr+0x2e>
 80906b6:	1e4d      	subs	r5, r1, #1
 80906b8:	1e5c      	subs	r4, r3, #1
 80906ba:	e7f0      	b.n	809069e <strstr+0x10>
 80906bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80906be:	4618      	mov	r0, r3
 80906c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080906c4 <gettimeofday>:
 80906c4:	4b02      	ldr	r3, [pc, #8]	; (80906d0 <gettimeofday+0xc>)
 80906c6:	460a      	mov	r2, r1
 80906c8:	4601      	mov	r1, r0
 80906ca:	6818      	ldr	r0, [r3, #0]
 80906cc:	f000 b802 	b.w	80906d4 <_gettimeofday_r>
 80906d0:	20000494 	.word	0x20000494

080906d4 <_gettimeofday_r>:
 80906d4:	b538      	push	{r3, r4, r5, lr}
 80906d6:	4c07      	ldr	r4, [pc, #28]	; (80906f4 <_gettimeofday_r+0x20>)
 80906d8:	2300      	movs	r3, #0
 80906da:	4605      	mov	r5, r0
 80906dc:	4608      	mov	r0, r1
 80906de:	4611      	mov	r1, r2
 80906e0:	6023      	str	r3, [r4, #0]
 80906e2:	f7f4 fb46 	bl	8084d72 <_gettimeofday>
 80906e6:	1c43      	adds	r3, r0, #1
 80906e8:	d102      	bne.n	80906f0 <_gettimeofday_r+0x1c>
 80906ea:	6823      	ldr	r3, [r4, #0]
 80906ec:	b103      	cbz	r3, 80906f0 <_gettimeofday_r+0x1c>
 80906ee:	602b      	str	r3, [r5, #0]
 80906f0:	bd38      	pop	{r3, r4, r5, pc}
 80906f2:	bf00      	nop
 80906f4:	20003c40 	.word	0x20003c40

080906f8 <dynalib_user>:
 80906f8:	0808001d 0808005d 08080089 0808008d     ....]...........
 8090708:	00000000 00444552 45455247 4c42004e     ....RED.GREEN.BL
 8090718:	73004555 6b726170 65696c63 6300746e     UE.sparkclient.c
 8090728:	6e65696c 6f632074 63656e6e 00646574     lient connected.
 8090738:	6c6c6568 6f77206f 00646c72 5474756f     hello world.outT
 8090748:	6369706f 73656d2f 65676173 546e6900     opic/message.inT
 8090758:	6369706f 73656d2f 65676173 72697700     opic/message.wir
 8090768:	73656c65 77742e73 6f696c69 6d6f632e     eless.twilio.com
 8090778:	6d336100 7a6d3062 67656c36 2e387362     .a3mb0mz6legbs8.
 8090788:	2e746f69 652d7375 2d747361 6d612e32     iot.us-east-2.am
 8090798:	6e6f7a61 2e737761 006d6f63 65627943     azonaws.com.Cybe
 80907a8:	74754172 0600006f 7349514d 00037064     rAuto...MQIsdp..
 80907b8:	54514d04 20200454 25002021 64252e64     .MQTT.  ! .%d.%d
 80907c8:	2e64252e 00006425                       .%d.%d..

080907d0 <_ZL1K>:
 80907d0:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
 80907e0:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
 80907f0:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
 8090800:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
 8090810:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
 8090820:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
 8090830:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
 8090840:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
 8090850:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
 8090860:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
 8090870:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
 8090880:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
 8090890:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
 80908a0:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
 80908b0:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
 80908c0:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
 80908d0:	8648862a 05010df7 0000000c              *.H.........

080908dc <mbedtls_sha1_info>:
 80908dc:	00000004 08090ea1 00000014 00000040     ............@...
 80908ec:	08082479 08082475 08082471 08084d0d     y$..u$..q$...M..
 80908fc:	0808245b 08082449 08082445 08082441     [$..I$..E$..A$..

0809090c <mbedtls_sha224_info>:
 809090c:	00000005 08090d12 0000001c 00000040     ............@...
 809091c:	080824c1 080824bd 080824b9 080824ad     .$...$...$...$..
 809092c:	08082497 08082485 08082481 0808247d     .$...$...$..}$..

0809093c <mbedtls_sha384_info>:
 809093c:	00000007 080918b9 00000030 00000080     ........0.......
 809094c:	08082511 0808250d 08082509 080824fd     .%...%...%...$..
 809095c:	080824e7 080824d5 080824d1 080824cd     .$...$...$...$..

0809096c <mbedtls_sha512_info>:
 809096c:	00000008 08090d75 00000040 00000080     ....u...@.......
 809097c:	08082517 0808250d 08082509 08082503     .%...%...%...%..
 809098c:	080824e7 080824d5 080824d1 080824cd     .$...$...$...$..

0809099c <mbedtls_sha256_info>:
 809099c:	00000006 08091919 00000020 00000040     ........ ...@...
 80909ac:	080824c7 080824bd 080824b9 080824b3     .$...$...$...$..
 80909bc:	08082497 08082485 08082481 0808247d     .$...$...$..}$..

080909cc <_ZL18oid_x520_attr_type>:
 80909cc:	08091174 00000003 08091178 08091189     t.......x.......
 80909dc:	0809237d 08091195 00000003 08091199     }#..............
 80909ec:	080911ab 0809179e 080911b3 00000003     ................
 80909fc:	080911b7 080911c6 080911cf 080911d1     ................
 8090a0c:	00000003 080911d5 080911e1 080911e7     ................
 8090a1c:	080911ea 00000003 080911ee 08091205     ................
 8090a2c:	08091212 08091214 00000003 08091218     ................
 8090a3c:	08091235 0809123e 08091241 00000009     5...>...A.......
 8090a4c:	0809124b 08091258 0809124b 08091267     K...X...K...g...
 8090a5c:	00000003 0809126b 0809127e 08091271     ....k...~...q...
 8090a6c:	0809128c 00000003 08091290 080912a4     ................
 8090a7c:	08091296 080912b3 00000003 080912b7     ................
 8090a8c:	080912c8 080912bd 080912d4 00000003     ................
 8090a9c:	080912d8 080912e6 080912ee 080912f1     ................
 8090aac:	00000003 080912f5 08091305 08091310     ................
 8090abc:	08091313 00000003 08091317 08091326     ............&...
 8090acc:	0809131d 0809132f 00000003 08091333     ..../.......3...
 8090adc:	0809134d 08091339 08091362 00000003     M...9...b.......
 8090aec:	08091366 08091372 0809136c 08091378     f...r...l...x...
 8090afc:	00000003 0809137c 0809138e 08091382     ....|...........
 8090b0c:	080913ab 00000003 080913af 080913bf     ................
 8090b1c:	080913b5 080913c9 0000000a 080913d4     ................
 8090b2c:	080913e7 080913f8 080913fb 00000003     ................
 8090b3c:	080913ff 08091416 08091405 00000000     ................
	...

08090b5c <_ZL17oid_ext_key_usage>:
 8090b5c:	08090f8d 00000008 08090f96 08090fa7     ................
 8090b6c:	08090fc5 00000008 08090fce 08090fdf     ................
 8090b7c:	08090ffd 00000008 08091006 08091018     ................
 8090b8c:	08091025 00000008 0809102e 08091044     %...........D...
 8090b9c:	08091056 00000008 0809105f 08091072     V......._...r...
 8090bac:	08091080 00000008 08091089 0809109b     ................
	...

08090bcc <_ZL10oid_pk_alg>:
 8090bcc:	08090e17 00000009 08090e21 08090e2f     ........!.../...
 8090bdc:	00000001 08090e33 00000007 08090e3b     ....3.......;...
 8090bec:	08090e4a 00000002 08090e59 00000005     J.......Y.......
 8090bfc:	08090e5f 08090e67 00000003 00000000     _...g...........
	...

08090c1c <_ZL14oid_cipher_alg>:
 8090c1c:	08090de7 00000005 08090ded 08090cc3     ................
 8090c2c:	00000021 08090df4 00000008 08090dfd     !...............
 8090c3c:	08090e0a 00000025 00000000 00000000     ....%...........
	...
 8090c58:	8648862a 0c010df7 70000301 69576562     *.H........pbeWi
 8090c68:	48536874 646e4141 654b2d33 69725479     thSHAAnd3-KeyTri
 8090c78:	44656c70 432d5345 50004342 77204542     pleDES-CBC.PBE w
 8090c88:	20687469 31414853 646e6120 4b2d3320     ith SHA1 and 3-K
 8090c98:	33207965 00534544 8648862a 0c010df7     ey 3DES.*.H.....
 8090ca8:	70000401 69576562 48536874 646e4141     ...pbeWithSHAAnd
 8090cb8:	654b2d32 69725479 44656c70 432d5345     2-KeyTripleDES-C
 8090cc8:	50004342 77204542 20687469 31414853     BC.PBE with SHA1
 8090cd8:	646e6120 4b2d3220 33207965 00534544      and 2-Key 3DES.
 8090ce8:	8648862a 07020df7 616d6800 41485363     *.H......hmacSHA
 8090cf8:	4d480031 532d4341 312d4148 48862a00     1.HMAC-SHA-1.*.H
 8090d08:	020df786 6d680008 48536361 34323241     ......hmacSHA224
 8090d18:	414d4800 48532d43 32322d41 862a0034     .HMAC-SHA-224.*.
 8090d28:	0df78648 68000902 5363616d 35324148     H......hmacSHA25
 8090d38:	4d480036 532d4341 322d4148 2a003635     6.HMAC-SHA-256.*
 8090d48:	f7864886 000a020d 63616d68 33414853     .H......hmacSHA3
 8090d58:	48003438 2d43414d 2d414853 00343833     84.HMAC-SHA-384.
 8090d68:	8648862a 0b020df7 616d6800 41485363     *.H......hmacSHA
 8090d78:	00323135 43414d48 4148532d 3231352d     512.HMAC-SHA-512
 8090d88:	030e2b00 69001a02 68732d64 60003161     .+.....id-sha1.`
 8090d98:	65014886 04020403 2d646900 32616873     .H.e.....id-sha2
 8090da8:	60003432 65014886 01020403 2d646900     24.`.H.e.....id-
 8090db8:	32616873 60003635 65014886 02020403     sha256.`.H.e....
 8090dc8:	2d646900 33616873 60003438 65014886     .id-sha384.`.H.e
 8090dd8:	03020403 2d646900 35616873 2b003231     .....id-sha512.+
 8090de8:	0702030e 73656400 00434243 8648862a     .....desCBC.*.H.
 8090df8:	07030df7 73656400 6564652d 62632d33     .....des-ede3-cb
 8090e08:	45440063 44452d53 432d3345 2a004342     c.DES-EDE3-CBC.*
 8090e18:	f7864886 0101010d 61737200 72636e45     .H.......rsaEncr
 8090e28:	69747079 52006e6f 2a004153 3dce4886     yption.RSA.*.H.=
 8090e38:	69000102 63652d64 6c627550 654b6369     ...id-ecPublicKe
 8090e48:	65470079 6972656e 43452063 79656b20     y.Generic EC key
 8090e58:	04812b00 69000c01 63652d64 45004844     .+.....id-ecDH.E
 8090e68:	656b2043 6f662079 43452072 2a004844     C key for ECDH.*
 8090e78:	f7864886 0501010d 61687300 6957312d     .H.......sha-1Wi
 8090e88:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
 8090e98:	20415352 68746977 41485320 862a0031     RSA with SHA1.*.
 8090ea8:	0df78648 000e0101 32616873 69573432     H.......sha224Wi
 8090eb8:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
 8090ec8:	20415352 68746977 41485320 3432322d     RSA with SHA-224
 8090ed8:	48862a00 010df786 73000b01 35326168     .*.H.......sha25
 8090ee8:	74695736 41535268 72636e45 69747079     6WithRSAEncrypti
 8090ef8:	52006e6f 77204153 20687469 2d414853     on.RSA with SHA-
 8090f08:	00363532 8648862a 01010df7 6873000c     256.*.H.......sh
 8090f18:	34383361 68746957 45415352 7972636e     a384WithRSAEncry
 8090f28:	6f697470 5352006e 69772041 53206874     ption.RSA with S
 8090f38:	332d4148 2a003438 f7864886 0d01010d     HA-384.*.H......
 8090f48:	61687300 57323135 52687469 6e454153     .sha512WithRSAEn
 8090f58:	70797263 6e6f6974 41535200 74697720     cryption.RSA wit
 8090f68:	48532068 31352d41 0e2b0032 001d0203     h SHA-512.+.....
 8090f78:	8648862a 01010df7 5352000a 41535341     *.H.......RSASSA
 8090f88:	5353502d 01062b00 03070505 64690001     -PSS.+........id
 8090f98:	2d706b2d 76726573 75417265 54006874     -kp-serverAuth.T
 8090fa8:	5720534c 53206265 65767265 75412072     LS Web Server Au
 8090fb8:	6e656874 61636974 6e6f6974 01062b00     thentication.+..
 8090fc8:	03070505 64690002 2d706b2d 65696c63     ......id-kp-clie
 8090fd8:	7541746e 54006874 5720534c 43206265     ntAuth.TLS Web C
 8090fe8:	6e65696c 75412074 6e656874 61636974     lient Authentica
 8090ff8:	6e6f6974 01062b00 03070505 64690003     tion.+........id
 8091008:	2d706b2d 65646f63 6e676953 00676e69     -kp-codeSigning.
 8091018:	65646f43 67695320 676e696e 01062b00     Code Signing.+..
 8091028:	03070505 64690004 2d706b2d 69616d65     ......id-kp-emai
 8091038:	6f72506c 74636574 006e6f69 616d2d45     lProtection.E-ma
 8091048:	50206c69 65746f72 6f697463 062b006e     il Protection.+.
 8091058:	07050501 69000803 706b2d64 6d69742d     .......id-kp-tim
 8091068:	61745365 6e69706d 69540067 5320656d     eStamping.Time S
 8091078:	706d6174 00676e69 0501062b 09030705     tamping.+.......
 8091088:	2d646900 4f2d706b 53505343 696e6769     .id-kp-OCSPSigni
 8091098:	4f00676e 20505343 6e676953 00676e69     ng.OCSP Signing.
 80910a8:	00131d55 632d6469 61622d65 43636973     U...id-ce-basicC
 80910b8:	74736e6f 6e696172 42007374 63697361     onstraints.Basic
 80910c8:	6e6f4320 61727473 73746e69 0f1d5500      Constraints.U..
 80910d8:	2d646900 6b2d6563 73557965 00656761     .id-ce-keyUsage.
 80910e8:	00251d55 632d6469 78652d65 79654b74     U.%.id-ce-extKey
 80910f8:	67617355 78450065 646e6574 4b206465     Usage.Extended K
 8091108:	55207965 65676173 111d5500 2d646900     ey Usage.U...id-
 8091118:	732d6563 656a6275 6c417463 6d614e74     ce-subjectAltNam
 8091128:	75530065 63656a62 6c412074 614e2074     e.Subject Alt Na
 8091138:	6000656d 86014886 010142f8 2d646900     me.`.H...B...id-
 8091148:	7374656e 65706163 7265632d 70797474     netscape-certtyp
 8091158:	654e0065 61637374 43206570 69747265     e.Netscape Certi
 8091168:	61636966 54206574 00657079 00030455     ficate Type.U...
 8091178:	612d6469 6f632d74 6e6f6d6d 656d614e     id-at-commonName
 8091188:	6d6f4300 206e6f6d 656d614e 06045500     .Common Name.U..
 8091198:	2d646900 632d7461 746e756f 614e7972     .id-at-countryNa
 80911a8:	4300656d 746e756f 55007972 69000704     me.Country.U...i
 80911b8:	74612d64 636f6c2d 74696c61 6f4c0079     d-at-locality.Lo
 80911c8:	696c6163 4c007974 08045500 2d646900     cality.L.U...id-
 80911d8:	732d7461 65746174 61745300 53006574     at-state.State.S
 80911e8:	04550054 6469000a 2d74612d 6167726f     T.U...id-at-orga
 80911f8:	617a696e 6e6f6974 656d614e 67724f00     nizationName.Org
 8091208:	7a696e61 6f697461 004f006e 000b0455     anization.O.U...
 8091218:	612d6469 726f2d74 696e6167 6974617a     id-at-organizati
 8091228:	6c616e6f 74696e55 656d614e 67724f00     onalUnitName.Org
 8091238:	696e5520 554f0074 48862a00 010df786      Unit.OU.*.H....
 8091248:	65000109 6c69616d 72646441 00737365     ...emailAddress.
 8091258:	616d2d45 61206c69 65726464 55007373     E-mail address.U
 8091268:	69000504 74612d64 7265732d 4e6c6169     ...id-at-serialN
 8091278:	65626d75 65530072 6c616972 6d756e20     umber.Serial num
 8091288:	00726562 00100455 612d6469 6f702d74     ber.U...id-at-po
 8091298:	6c617473 72646441 00737365 74736f50     stalAddress.Post
 80912a8:	61206c61 65726464 55007373 69001104     al address.U...i
 80912b8:	74612d64 736f702d 436c6174 0065646f     d-at-postalCode.
 80912c8:	74736f50 63206c61 0065646f 00040455     Postal code.U...
 80912d8:	612d6469 75732d74 6d614e72 75530065     id-at-surName.Su
 80912e8:	6d616e72 4e530065 2a045500 2d646900     rname.SN.U.*.id-
 80912f8:	672d7461 6e657669 656d614e 76694700     at-givenName.Giv
 8091308:	6e206e65 00656d61 55004e47 69002b04     en name.GN.U.+.i
 8091318:	74612d64 696e692d 6c616974 6e490073     d-at-initials.In
 8091328:	61697469 5500736c 69002c04 74612d64     itials.U.,.id-at
 8091338:	6e65672d 74617265 516e6f69 696c6175     -generationQuali
 8091348:	72656966 6e654700 74617265 206e6f69     fier.Generation 
 8091358:	6c617571 65696669 04550072 6469000c     qualifier.U...id
 8091368:	2d74612d 6c746974 69540065 00656c74     -at-title.Title.
 8091378:	002e0455 612d6469 6e642d74 6c617551     U...id-at-dnQual
 8091388:	65696669 69440072 6e697473 73697567     ifier.Distinguis
 8091398:	20646568 656d614e 61757120 6966696c     hed Name qualifi
 80913a8:	55007265 69004104 74612d64 6573702d     er.U.A.id-at-pse
 80913b8:	6e6f6475 50006d79 64756573 6d796e6f     udonym.Pseudonym
 80913c8:	26920900 2cf29389 00190164 642d6469     ...&...,d...id-d
 80913d8:	69616d6f 6d6f436e 656e6f70 4400746e     omainComponent.D
 80913e8:	69616d6f 6f63206e 6e6f706d 00746e65     omain component.
 80913f8:	55004344 69002d04 74612d64 696e752d     DC.U.-.id-at-uni
 8091408:	49657571 746e6564 65696669 6e550072     queIdentifier.Un
 8091418:	65757169 65644920 6669746e 00726569     ique Identifier.

08091428 <_ZL18oid_pkcs12_pbe_alg>:
 8091428:	08090c58 0000000a 08090c63 08090c83     X.......c.......
 8091438:	00002504 08090ca0 0000000a 08090cab     .%..............
 8091448:	08090ccb 00002304 00000000 00000000     .....#..........
	...

08091464 <_ZL10oid_md_alg>:
 8091464:	08090d89 00000005 08090d8f 08090cff     ................
 8091474:	00000004 08090d97 00000009 08090da1     ................
 8091484:	08090ed1 00000005 08090dab 00000009     ................
 8091494:	08090db5 08090f04 00000006 08090dbf     ................
 80914a4:	00000009 08090dc9 08090f37 00000007     ........7.......
 80914b4:	08090dd3 00000009 08090ddd 08090f6a     ............j...
 80914c4:	00000008 00000000 00000000 00000000     ................
	...

080914dc <_ZL11oid_sig_alg>:
 80914dc:	08090e77 00000009 08090e81 08090e98     w...............
 80914ec:	00000104 08090ea6 00000009 08090eb0     ................
 80914fc:	08090ec8 00000105 08090ed9 00000009     ................
 809150c:	08090ee3 08090efb 00000106 08090f0c     ................
 809151c:	00000009 08090f16 08090f2e 00000107     ................
 809152c:	08090f3f 00000009 08090f49 08090f61     ?.......I...a...
 809153c:	00000108 08090f72 00000005 08090e81     ....r...........
 809154c:	08090e98 00000104 08090f78 00000009     ........x.......
 809155c:	08090f82 08090f82 00000600 00000000     ................
	...

0809157c <_ZL11oid_md_hmac>:
 809157c:	08090ce8 00000008 08090cf1 08090cfa     ................
 809158c:	00000004 08090d05 00000008 08090d0e     ................
 809159c:	08090d19 00000005 08090d26 00000008     ........&.......
 80915ac:	08090d2f 08090d3a 00000006 08090d47     /...:.......G...
 80915bc:	00000008 08090d50 08090d5b 00000007     ....P...[.......
 80915cc:	08090d68 00000008 08090d71 08090d7c     h.......q...|...
 80915dc:	00000008 00000000 00000000 00000000     ................
	...

080915f4 <_ZL12oid_x509_ext>:
 80915f4:	080910a8 00000003 080910ac 080910c3     ................
 8091604:	00000100 080910d5 00000003 080910d9     ................
 8091614:	08091107 00000004 080910e8 00000003     ................
 8091624:	080910ec 080910fe 00000800 08091111     ................
 8091634:	00000003 08091115 0809112a 00000020     ........*... ...
 8091644:	0809113b 00000009 08091145 0809115a     ;.......E...Z...
 8091654:	00010000 00000000 00000000 00000000     ................
	...

0809166c <_ZL16aes_192_cbc_info>:
 809166c:	00000206 000000c0 08091794 00000010     ................
 809167c:	00000000 00000010 08091824              ........$...

08091688 <_ZL16aes_256_ecb_info>:
 8091688:	00000104 00000100 080917ac 00000010     ................
 8091698:	00000000 00000010 08091824              ........$...

080916a4 <_ZL16aes_128_ecb_info>:
 80916a4:	00000102 00000080 080917c4 00000010     ................
 80916b4:	00000000 00000010 08091824              ........$...

080916c0 <_ZL12gcm_aes_info>:
 80916c0:	00000002 00000000 00000000 08084e39     ............9N..
 80916d0:	08084e39 08084e21 08084e0f              9N..!N...N..

080916dc <mbedtls_cipher_definitions>:
 80916dc:	00000002 080916a4 00000003 080917ec     ................
 80916ec:	00000004 08091688 00000005 08091748     ............H...
 80916fc:	00000006 0809166c 00000007 080917d0     ....l...........
 809170c:	0000000e 08091808 0000000f 0809172c     ............,...
 809171c:	00000010 08091840 00000000 00000000     ....@...........

0809172c <_ZL16aes_192_gcm_info>:
 809172c:	0000060f 000000c0 08091770 0000000c     ........p.......
 809173c:	00000001 00000010 080916c0              ............

08091748 <_ZL16aes_128_cbc_info>:
 8091748:	00000205 00000080 080917a0 00000010     ................
 8091758:	00000000 00000010 08091824 2d534541     ........$...AES-
 8091768:	2d363532 004d4347 2d534541 2d323931     256-GCM.AES-192-
 8091778:	004d4347 2d534541 2d383231 004d4347     GCM.AES-128-GCM.
 8091788:	2d534541 2d363532 00434243 2d534541     AES-256-CBC.AES-
 8091798:	2d323931 00434243 2d534541 2d383231     192-CBC.AES-128-
 80917a8:	00434243 2d534541 2d363532 00424345     CBC.AES-256-ECB.
 80917b8:	2d534541 2d323931 00424345 2d534541     AES-192-ECB.AES-
 80917c8:	2d383231 00424345                       128-ECB.

080917d0 <_ZL16aes_256_cbc_info>:
 80917d0:	00000207 00000100 08091788 00000010     ................
 80917e0:	00000000 00000010 08091824              ........$...

080917ec <_ZL16aes_192_ecb_info>:
 80917ec:	00000103 000000c0 080917b8 00000010     ................
 80917fc:	00000000 00000010 08091824              ........$...

08091808 <_ZL16aes_128_gcm_info>:
 8091808:	0000060e 00000080 0809177c 0000000c     ........|.......
 8091818:	00000001 00000010 080916c0              ............

08091824 <_ZL8aes_info>:
 8091824:	00000002 08084e7d 08084e75 08084e71     ....}N..uN..qN..
 8091834:	08084e6d 08084e55 08084e43              mN..UN..CN..

08091840 <_ZL16aes_256_gcm_info>:
 8091840:	00000610 00000100 08091764 0000000c     ........d.......
 8091850:	00000001 00000010 080916c0 2e617372     ............rsa.
 8091860:	7372004e 00452e61                       N.rsa.E.

08091868 <mbedtls_rsa_info>:
 8091868:	00000001 08090e2f 08084ee1 08084e81     ..../....N...N..
 8091878:	08084fc5 08084f85 08084f39 08084eed     .O...O..9O...N..
 8091888:	08084edd 08084ec3 08084eb1 08084e8d     .N...N...N...N..
 8091898:	6e6b6e75 006e776f 2d534c54 2d415352     unknown.TLS-RSA-
 80918a8:	48544957 5345412d 3635322d 4d43472d     WITH-AES-256-GCM
 80918b8:	4148532d 00343833 2d534c54 2d415352     -SHA384.TLS-RSA-
 80918c8:	48544957 5345412d 3832312d 4d43472d     WITH-AES-128-GCM
 80918d8:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 80918e8:	48544957 5345412d 3832312d 4342432d     WITH-AES-128-CBC
 80918f8:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 8091908:	48544957 5345412d 3635322d 4342432d     WITH-AES-256-CBC
 8091918:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 8091928:	48544957 5345412d 3832312d 4342432d     WITH-AES-128-CBC
 8091938:	4148532d 534c5400 4153522d 5449572d     -SHA.TLS-RSA-WIT
 8091948:	45412d48 35322d53 42432d36 48532d43     H-AES-256-CBC-SH
 8091958:	00000041                                A...

0809195c <_ZL23ciphersuite_definitions>:
 809195c:	0000009d 080918a0 00010710 00000003     ................
 809196c:	00000003 00000003 00000003 00000000     ................
 809197c:	0000009c 080918c0 0001060e 00000003     ................
 809198c:	00000003 00000003 00000003 00000000     ................
 809199c:	0000003c 080918e0 00010605 00000003     <...............
 80919ac:	00000003 00000003 00000003 00000000     ................
 80919bc:	0000003d 08091900 00010607 00000003     =...............
 80919cc:	00000003 00000003 00000003 00000000     ................
 80919dc:	0000002f 08091920 00010405 00000003     /... ...........
 80919ec:	00000000 00000003 00000003 00000000     ................
 80919fc:	00000035 0809193d 00010407 00000003     5...=...........
 8091a0c:	00000000 00000003 00000003 00000000     ................
 8091a1c:	00000000 08090e20 00000000 00000000     .... ...........
	...

08091a3c <_ZL22ciphersuite_preference>:
 8091a3c:	0000c02c 0000c030 0000009f 0000c0ad     ,...0...........
 8091a4c:	0000c09f 0000c024 0000c028 0000006b     ....$...(...k...
 8091a5c:	0000c00a 0000c014 00000039 0000c0af     ........9.......
 8091a6c:	0000c0a3 0000c087 0000c08b 0000c07d     ............}...
 8091a7c:	0000c073 0000c077 000000c4 00000088     s...w...........
 8091a8c:	0000c02b 0000c02f 0000009e 0000c0ac     +.../...........
 8091a9c:	0000c09e 0000c023 0000c027 00000067     ....#...'...g...
 8091aac:	0000c009 0000c013 00000033 0000c0ae     ........3.......
 8091abc:	0000c0a2 0000c086 0000c08a 0000c07c     ............|...
 8091acc:	0000c072 0000c076 000000be 00000045     r...v.......E...
 8091adc:	0000c008 0000c012 00000016 000000ab     ................
 8091aec:	0000c0a7 0000c038 000000b3 0000c036     ....8.......6...
 8091afc:	00000091 0000c091 0000c09b 0000c097     ................
 8091b0c:	0000c0ab 000000aa 0000c0a6 0000c037     ............7...
 8091b1c:	000000b2 0000c035 00000090 0000c090     ....5...........
 8091b2c:	0000c096 0000c09a 0000c0aa 0000c034     ............4...
 8091b3c:	0000008f 0000c0ff 0000009d 0000c09d     ................
 8091b4c:	0000003d 00000035 0000c032 0000c02a     =...5...2...*...
 8091b5c:	0000c00f 0000c02e 0000c026 0000c005     ........&.......
 8091b6c:	0000c0a1 0000c07b 000000c0 00000084     ....{...........
 8091b7c:	0000c08d 0000c079 0000c089 0000c075     ....y.......u...
 8091b8c:	0000009c 0000c09c 0000003c 0000002f     ........<.../...
 8091b9c:	0000c031 0000c029 0000c00e 0000c02d     1...).......-...
 8091bac:	0000c025 0000c004 0000c0a0 0000c07a     %...........z...
 8091bbc:	000000ba 00000041 0000c08c 0000c078     ....A.......x...
 8091bcc:	0000c088 0000c074 0000000a 0000c00d     ....t...........
 8091bdc:	0000c003 000000ad 000000b7 00000095     ................
 8091bec:	0000c093 0000c099 000000ac 000000b6     ................
 8091bfc:	00000094 0000c092 0000c098 00000093     ................
 8091c0c:	000000a9 0000c0a5 000000af 0000008d     ................
 8091c1c:	0000c08f 0000c095 0000c0a9 000000a8     ................
 8091c2c:	0000c0a4 000000ae 0000008c 0000c08e     ................
 8091c3c:	0000c094 0000c0a8 0000008b 0000c007     ................
 8091c4c:	0000c011 0000c033 0000008e 00000005     ....3...........
 8091c5c:	00000004 0000c00c 0000c002 00000092     ................
 8091c6c:	0000008a 00000015 00000009 0000c006     ................
 8091c7c:	0000c010 0000c03b 0000c03a 0000c039     ....;...:...9...
 8091c8c:	000000b5 000000b4 0000002d 0000003b     ........-...;...
 8091c9c:	00000002 00000001 0000c00b 0000c001     ................
 8091cac:	000000b9 000000b8 0000002e 000000b1     ................
 8091cbc:	000000b0 0000002c 00000000 00202b20     ....,....... + .
 8091ccc:	2500202c 3f003d73 3a003d3f 32302500     , .%s=.??=.:.%02
 8091cdc:	00732558 2e2e2e2e 3f3f3f00 20732500     X%s......???.%s 
 8091cec:	2079656b 657a6973 48862a00 010df786     key size.*.H....
 8091cfc:	0001010c 8648862a 05010df7 2d2d000d     ....*.H.......--
 8091d0c:	452d2d2d 5220444e 50204153 41564952     ---END RSA PRIVA
 8091d1c:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 8091d2c:	4745422d 52204e49 50204153 41564952     -BEGIN RSA PRIVA
 8091d3c:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 8091d4c:	444e452d 49525020 45544156 59454b20     -END PRIVATE KEY
 8091d5c:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
 8091d6c:	49525020 45544156 59454b20 2d2d2d2d      PRIVATE KEY----
 8091d7c:	2d2d002d 452d2d2d 4520444e 5952434e     -.-----END ENCRY
 8091d8c:	44455450 49525020 45544156 59454b20     PTED PRIVATE KEY
 8091d9c:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
 8091dac:	434e4520 54505952 50204445 41564952      ENCRYPTED PRIVA
 8091dbc:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 8091dcc:	444e452d 42555020 2043494c 2d59454b     -END PUBLIC KEY-
 8091ddc:	2d2d2d2d 2d2d2d00 45422d2d 204e4947     ----.-----BEGIN 
 8091dec:	4c425550 4b204349 2d2d5945 002d2d2d     PUBLIC KEY-----.
 8091dfc:	00000000                                ....

08091e00 <_ZL5last4>:
	...
 8091e08:	00001c20 00000000 00003840 00000000      .......@8......
 8091e18:	00002460 00000000 00007080 00000000     `$.......p......
 8091e28:	00006ca0 00000000 000048c0 00000000     .l.......H......
 8091e38:	000054e0 00000000 0000e100 00000000     .T..............
 8091e48:	0000fd20 00000000 0000d940 00000000      .......@.......
 8091e58:	0000c560 00000000 00009180 00000000     `...............
 8091e68:	00008da0 00000000 0000a9c0 00000000     ................
 8091e78:	0000b5e0 00000000                       ........

08091e80 <_ZL14base64_dec_map>:
 8091e80:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
 8091e90:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
 8091ea0:	7f7f7f7f 7f7f7f7f 3e7f7f7f 3f7f7f7f     ...........>...?
 8091eb0:	37363534 3b3a3938 7f7f3d3c 7f7f407f     456789:;<=...@..
 8091ec0:	0201007f 06050403 0a090807 0e0d0c0b     ................
 8091ed0:	1211100f 16151413 7f191817 7f7f7f7f     ................
 8091ee0:	1c1b1a7f 201f1e1d 24232221 28272625     ....... !"#$%&'(
 8091ef0:	2c2b2a29 302f2e2d 7f333231 7f7f7f7f     )*+,-./0123.....

08091f00 <CSWTCH.21>:
 8091f00:	080908dc 0809090c 0809099c 0809093c     ............<...
 8091f10:	0809096c                                l...

08091f14 <_ZL23x509_crt_verify_strings>:
 8091f14:	00000001 080922e7 00000002 0809230c     .....".......#..
 8091f24:	00000004 0809233b 00000008 08092380     ....;#.......#..
 8091f34:	00000010 080923ba 00000020 080923ec     .....#.. ....#..
 8091f44:	00000040 080923ff 00000080 08092417     @....#.......$..
 8091f54:	00000100 0809243c 00000200 0809246a     ....<$......j$..
 8091f64:	00000400 08092498 00000800 080924b3     .....$.......$..
 8091f74:	00001000 080924df 00002000 08092513     .....$... ...%..
 8091f84:	00004000 08092541 00008000 08092576     .@..A%......v%..
 8091f94:	00010000 080925bf 00020000 08092611     .....%.......&..
 8091fa4:	00040000 0809263e 00080000 0809267f     ....>&.......&..
	...

08091fbc <mbedtls_x509_crt_profile_default>:
 8091fbc:	000000f0 0fffffff 0fffffff 00000800     ................
 8091fcc:	65757274 6c616600 0a006573 74726543     true.false..Cert
 8091fdc:	63696669 20657461 75207369 696e696e     ificate is unini
 8091fec:	6c616974 64657369 25000a21 72656373     tialised!..%scer
 8091ffc:	76202e74 69737265 20206e6f 3a202020     t. version     :
 809200c:	0a642520 73732500 61697265 756e206c      %d..%sserial nu
 809201c:	7265626d 20202020 00203a20 6973250a     mber     : ..%si
 809202c:	65757373 616e2072 2020656d 20202020     ssuer name      
 809203c:	00203a20 7373250a 656a6275 6e207463      : ..%ssubject n
 809204c:	20656d61 20202020 00203a20 6973250a     ame      : ..%si
 809205c:	65757373 6f202064 2020206e 20202020     ssued  on       
 809206c:	25203a20 2d643430 64323025 3230252d      : %04d-%02d-%02
 809207c:	30252064 253a6432 3a643230 64323025     d %02d:%02d:%02d
 809208c:	73250a00 69707865 20736572 20206e6f     ..%sexpires on  
 809209c:	20202020 203a2020 64343025 3230252d           : %04d-%02
 80920ac:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
 80920bc:	3230253a 250a0064 67697373 2064656e     :%02d..%ssigned 
 80920cc:	6e697375 20202067 3a202020 250a0020     using      : ..%
 80920dc:	312d2573 203a7338 62206425 00737469     s%-18s: %d bits.
 80920ec:	6273250a 63697361 6e6f6320 61727473     .%sbasic constra
 80920fc:	73746e69 43203a20 73253d41 6d202c00     ints : CA=%s., m
 809210c:	705f7861 6c687461 253d6e65 250a0064     ax_pathlen=%d..%
 809211c:	62757373 7463656a 746c6120 6d616e20     ssubject alt nam
 809212c:	3a202065 250a0020 72656373 74202e74     e  : ..%scert. t
 809213c:	20657079 20202020 3a202020 73250020     ype        : .%s
 809214c:	204c5353 65696c43 2500746e 4c535373     SSL Client.%sSSL
 809215c:	72655320 00726576 6d457325 006c6961      Server.%sEmail.
 809216c:	624f7325 7463656a 67695320 676e696e     %sObject Signing
 809217c:	52732500 72657365 00646576 53537325     .%sReserved.%sSS
 809218c:	4143204c 45732500 6c69616d 00414320     L CA.%sEmail CA.
 809219c:	624f7325 7463656a 67695320 676e696e     %sObject Signing
 80921ac:	00414320 6b73250a 75207965 65676173      CA..%skey usage
 80921bc:	20202020 20202020 00203a20 69447325              : .%sDi
 80921cc:	61746967 6953206c 74616e67 00657275     gital Signature.
 80921dc:	6f4e7325 6552206e 69647570 6f697461     %sNon Repudiatio
 80921ec:	7325006e 2079654b 69636e45 72656870     n.%sKey Encipher
 80921fc:	746e656d 44732500 20617461 69636e45     ment.%sData Enci
 809220c:	72656870 746e656d 4b732500 41207965     pherment.%sKey A
 809221c:	65657267 746e656d 4b732500 43207965     greement.%sKey C
 809222c:	20747265 6e676953 43732500 53204c52     ert Sign.%sCRL S
 809223c:	006e6769 6e457325 68706963 4f207265     ign.%sEncipher O
 809224c:	00796c6e 65447325 68706963 4f207265     nly.%sDecipher O
 809225c:	00796c6e 6573250a 6b207478 75207965     nly..%sext key u
 809226c:	65676173 20202020 00203a20 73257325     sage     : .%s%s
 809227c:	25732500 25000a73 6b6e5573 6e776f6e     .%s%s..%sUnknown
 809228c:	61657220 206e6f73 69687428 68732073      reason (this sh
 809229c:	646c756f 746f6e20 70616820 296e6570     ould not happen)
 80922ac:	2e2a000a 2d2d2d00 45422d2d 204e4947     ..*..-----BEGIN 
 80922bc:	54524543 43494649 2d455441 2d2d2d2d     CERTIFICATE-----
 80922cc:	2d2d2d00 4e452d2d 45432044 46495452     .-----END CERTIF
 80922dc:	54414349 2d2d2d45 54002d2d 63206568     ICATE-----.The c
 80922ec:	69747265 61636966 76206574 64696c61     ertificate valid
 80922fc:	20797469 20736168 69707865 00646572     ity has expired.
 809230c:	20656854 74726563 63696669 20657461     The certificate 
 809231c:	20736168 6e656562 76657220 64656b6f     has been revoked
 809232c:	73692820 206e6f20 52432061 5400294c      (is on a CRL).T
 809233c:	63206568 69747265 61636966 43206574     he certificate C
 809234c:	6f6d6d6f 614e206e 2820656d 20294e43     ommon Name (CN) 
 809235c:	73656f64 746f6e20 74616d20 77206863     does not match w
 809236c:	20687469 20656874 65707865 64657463     ith the expected
 809237c:	004e4320 20656854 74726563 63696669      CN.The certific
 809238c:	20657461 6e207369 6320746f 6572726f     ate is not corre
 809239c:	796c7463 67697320 2064656e 74207962     ctly signed by t
 80923ac:	74206568 74737572 43206465 68540041     he trusted CA.Th
 80923bc:	52432065 7369204c 746f6e20 726f6320     e CRL is not cor
 80923cc:	74636572 7320796c 656e6769 79622064     rectly signed by
 80923dc:	65687420 75727420 64657473 00414320      the trusted CA.
 80923ec:	20656854 204c5243 65207369 72697078     The CRL is expir
 80923fc:	43006465 69747265 61636966 77206574     ed.Certificate w
 809240c:	6d207361 69737369 4300676e 69747265     as missing.Certi
 809241c:	61636966 76206574 66697265 74616369     ficate verificat
 809242c:	206e6f69 20736177 70696b73 00646570     ion was skipped.
 809243c:	6568744f 65722072 6e6f7361 61632820     Other reason (ca
 809244c:	6562206e 65737520 79622064 72657620     n be used by ver
 809245c:	20796669 6c6c6163 6b636162 68540029     ify callback).Th
 809246c:	65632065 66697472 74616369 61762065     e certificate va
 809247c:	6964696c 73207974 74726174 6e692073     lidity starts in
 809248c:	65687420 74756620 00657275 20656854      the future.The 
 809249c:	204c5243 66207369 206d6f72 20656874     CRL is from the 
 80924ac:	75747566 55006572 65676173 656f6420     future.Usage doe
 80924bc:	6f6e2073 616d2074 20686374 20656874     s not match the 
 80924cc:	5579656b 65676173 74786520 69736e65     keyUsage extensi
 80924dc:	55006e6f 65676173 656f6420 6f6e2073     on.Usage does no
 80924ec:	616d2074 20686374 20656874 65747865     t match the exte
 80924fc:	6465646e 5579654b 65676173 74786520     ndedKeyUsage ext
 809250c:	69736e65 55006e6f 65676173 656f6420     ension.Usage doe
 809251c:	6f6e2073 616d2074 20686374 20656874     s not match the 
 809252c:	6543736e 79547472 65206570 6e657478     nsCertType exten
 809253c:	6e6f6973 65685400 72656320 69666974     sion.The certifi
 809254c:	65746163 20736920 6e676973 77206465     cate is signed w
 809255c:	20687469 75206e61 6363616e 61747065     ith an unaccepta
 809256c:	20656c62 68736168 6854002e 65632065     ble hash..The ce
 809257c:	66697472 74616369 73692065 67697320     rtificate is sig
 809258c:	2064656e 68746977 206e6120 63616e75     ned with an unac
 809259c:	74706563 656c6261 204b5020 20676c61     ceptable PK alg 
 80925ac:	20676528 20415352 45207376 41534443     (eg RSA vs ECDSA
 80925bc:	54002e29 63206568 69747265 61636966     )..The certifica
 80925cc:	69206574 69732073 64656e67 74697720     te is signed wit
 80925dc:	6e612068 616e7520 70656363 6c626174     h an unacceptabl
 80925ec:	656b2065 65282079 61622067 75632064     e key (eg bad cu
 80925fc:	2c657672 41535220 6f6f7420 6f687320     rve, RSA too sho
 809260c:	2e297472 65685400 4c524320 20736920     rt)..The CRL is 
 809261c:	6e676973 77206465 20687469 75206e61     signed with an u
 809262c:	6363616e 61747065 20656c62 68736168     nacceptable hash
 809263c:	6854002e 52432065 7369204c 67697320     ..The CRL is sig
 809264c:	2064656e 68746977 206e6120 63616e75     ned with an unac
 809265c:	74706563 656c6261 204b5020 20676c61     ceptable PK alg 
 809266c:	20676528 20415352 45207376 41534443     (eg RSA vs ECDSA
 809267c:	54002e29 43206568 69204c52 69732073     )..The CRL is si
 809268c:	64656e67 74697720 6e612068 616e7520     gned with an una
 809269c:	70656363 6c626174 656b2065 65282079     cceptable key (e
 80926ac:	61622067 75632064 2c657672 41535220     g bad curve, RSA
 80926bc:	6f6f7420 6f687320 2e297472 00000000      too short).....

080926cc <mbedtls_x509_crt_profile_suiteb>:
 80926cc:	00000060 0000000a 00000000 00000000     `...............

080926dc <CSWTCH.205>:
 80926dc:	05040302 696c6306 20746e65 696e6966     .....client fini
 80926ec:	64656873 72657300 20726576 696e6966     shed.server fini
 80926fc:	64656873 73616d00 20726574 72636573     shed.master secr
 809270c:	6b007465 65207965 6e617078 6e6f6973     et.key expansion
 809271c:	4c535300 302e3376 534c5400 302e3176     .SSLv3.0.TLSv1.0
 809272c:	534c5400 312e3176 534c5400 322e3176     .TLSv1.1.TLSv1.2
 809273c:	00000000                                ....

08092740 <_ZL18mfl_code_to_length>:
 8092740:	00002000 00000200 00000400 00000800     . ..............
 8092750:	00001000 61766e69 2064696c 00004b50     ....invalid PK..

08092760 <_ZL1K>:
 8092760:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
 8092770:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
 8092780:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
 8092790:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
 80927a0:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
 80927b0:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
 80927c0:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
 80927d0:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
 80927e0:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
 80927f0:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
 8092800:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
 8092810:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
 8092820:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
 8092830:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
 8092840:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
 8092850:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
 8092860:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
 8092870:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
 8092880:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
 8092890:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
 80928a0:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
 80928b0:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
 80928c0:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
 80928d0:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
 80928e0:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
 80928f0:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
 8092900:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
 8092910:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
 8092920:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
 8092930:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
 8092940:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
 8092950:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
 8092960:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
 8092970:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
 8092980:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
 8092990:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
 80929a0:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
 80929b0:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
 80929c0:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
 80929d0:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl
 80929e0:	636f7250 7079542d 34203a65 434e452c     Proc-Type: 4,ENC
 80929f0:	54505952 02004445 0b070503 1713110d     RYPTED..........
 8092a00:	29251f1d 3b352f2b 4947433d 6159534f     ..%)+/5;=CGIOSYa
 8092a10:	6d6b6765 89837f71 9d97958b b3ada7a3     egkmq...........
 8092a20:	c5c1bfb5 e3dfd3c7 f1efe9e5 2d2d2dfb              .............

08092a2d <_ZL18amazonIoTRootCaPem>:
 8092a2d:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
 8092a3d:	41434946 2d2d4554 202d2d2d 494d0a0d     FICATE----- ..MI
 8092a4d:	7a304549 37414343 77416775 67414249     IE0zCCA7ugAwIBAg
 8092a5d:	4e475149 696e5272 4c36395a 56494b74     IQGNrRniZ96LtKIV
 8092a6d:	477a4e6a 6a533773 67424e41 6b68716b     jNzGs7SjANBgkqhk
 8092a7d:	77394769 51414230 44414655 0a0d4243     iG9w0BAQUFADCB..
 8092a8d:	4c456a79 476b414d 45553141 434d6842     yjELMAkGA1UEBhMC
 8092a9d:	784d5656 56417a46 564e6742 546f4142     VVMxFzAVBgNVBAoT
 8092aad:	6c5a6c44 546c6d63 75645761 4a42434c     DlZlcmlTaWduLCBJ
 8092abd:	754d6d62 7738524d 44595148 4c515156     bmMuMR8wHQYDVQQL
 8092acd:	78450a0d 585a575a 3255704a 69626e6c     ..ExZWZXJpU2lnbi
 8092add:	6e635542 43647a56 585a4f42 33623352     BUcnVzdCBOZXR3b3
 8092aed:	544d724a 414f776f 51564459 7a454c51     JrMTowOAYDVQQLEz
 8092afd:	79596f45 6a4d676b 694e7741 585a5742     EoYykgMjAwNiBWZX
 8092b0d:	0a0d704a 6e6c3255 67776962 6a355753     Jp..U2lnbiwgSW5j
 8092b1d:	7441694c 765a4549 68426963 6f525864     LiAtIEZvciBhdXRo
 8092b2d:	704a3362 6b566d65 7a564849 7642535a     b3JpemVkIHVzZSBv
 8092b3d:	35786d62 7755554d 44597751 44515156     bmx5MUUwQwYDVQQD
 8092b4d:	57787a45 585a0a0d 3255704a 69626e6c     EzxW..ZXJpU2lnbi
 8092b5d:	47624442 79637a46 46497a41 6d593142     BDbGFzcyAzIFB1Ym
 8092b6d:	79597078 6d635142 5859746c 4549354a     xpYyBQcmltYXJ5IE
 8092b7d:	6e636c4e 6d5a7052 58596a6c 32627052     NlcnRpZmljYXRpb2
 8092b8d:	58516734 0a0d3056 79394761 35525861     4gQXV0..aG9yaXR5
 8092b9d:	67304349 77557a52 4e636848 7859444d     IC0gRzUwHhcNMDYx
 8092bad:	3441544d 7741444d 7741444d 4e636857     MTA4MDAwMDAwWhcN
 8092bbd:	77597a4d 32457a4e 314d6a4d 3555544f     MzYwNzE2MjM1OTU5
 8092bcd:	42436a57 4c456a79 414d0a0d 3141476b     WjCByjEL..MAkGA1
 8092bdd:	68424555 5656434d 7a46784d 67425641     UEBhMCVVMxFzAVBg
 8092bed:	4142564e 6c44546f 6d636c5a 5761546c     NVBAoTDlZlcmlTaW
 8092bfd:	434c7564 6d624a42 524d754d 51487738     duLCBJbmMuMR8wHQ
 8092c0d:	51564459 78454c51 0a0d575a 704a585a     YDVQQLExZW..ZXJp
 8092c1d:	6e6c3255 55426962 7a566e63 4f424364     U2lnbiBUcnVzdCBO
 8092c2d:	3352585a 724a3362 776f544d 4459414f     ZXR3b3JrMTowOAYD
 8092c3d:	4c515156 6f457a45 676b7959 77416a4d     VQQLEzEoYykgMjAw
 8092c4d:	5742694e 704a585a 6e6c3255 69620a0d     NiBWZXJpU2ln..bi
 8092c5d:	57536777 694c6a35 45497441 6963765a     wgSW5jLiAtIEZvci
 8092c6d:	58646842 33626f52 6d65704a 48496b56     BhdXRob3JpemVkIH
 8092c7d:	535a7a56 6d627642 554d3578 77517755     VzZSBvbmx5MUUwQw
 8092c8d:	51564459 7a454451 585a5778 0a0d704a     YDVQQDEzxWZXJp..
 8092c9d:	6e6c3255 44426962 7a464762 7a417963     U2lnbiBDbGFzcyAz
 8092cad:	31424649 70786d59 51427959 746c6d63     IFB1YmxpYyBQcmlt
 8092cbd:	354a5859 6c4e4549 70526e63 6a6c6d5a     YXJ5IENlcnRpZmlj
 8092ccd:	70525859 67343262 30565851 79394761     YXRpb24gQXV0aG9y
 8092cdd:	58610a0d 43493552 7a526730 67677755     ..aXR5IC0gRzUwgg
 8092ced:	414d6945 53434730 49534771 51443362     EiMA0GCSqGSIb3DQ
 8092cfd:	51414245 34414155 77444249 67677741     EBAQUAA4IBDwAwgg
 8092d0d:	6f414b45 51414249 414a7643 584b4967     EKAoIBAQCvJAgIKX
 8092d1d:	0a0d316f 4d416d6e 4c647571 6337304f     o1..nmAMqudLO07c
 8092d2d:	38774c66 37795252 2b442b4b 354c514b     fLw8RRy7K+D+KQL5
 8092d3d:	6a697756 5655495a 78582f4a 78676372     VwijZIUVJ/Xxrcgx
 8092d4d:	69305669 71714336 7a4b6b70 35692f6a     iV0i6CqqpkKzj/i5
 8092d5d:	78656256 30740a0d 6f2f7a75 31422b39     Vbex..t0uz/o9+B1
 8092d6d:	30377366 6d5a6250 63595649 61446739     fs70PbZmIVYc9gDa
 8092d7d:	76335954 3277676a 56504949 30365451     TY3vjgw2IIPVQT60
 8092d8d:	56574b6e 754a4653 786a7255 2f366675     nKWVSFJuUrjxuf6/
 8092d9d:	636b6857 0a0d7a49 44686453 53703259     WhkcIz..SdhDY2pS
 8092dad:	504b3953 52424836 4a476454 48765861     S9KP6HBRTdGJaXvH
 8092dbd:	7a615063 304a4233 64743332 54623153     cPaz3BJ023tdS1bT
 8092dcd:	5638726c 77473664 6c494b39 63387138     lr8Vd6Gw9KIl8q8c
 8092ddd:	59636d6b 47516635 4f420a0d 6575512b     kmcY5fQG..BO+Que
 8092ded:	4e354151 52743630 72412f6e 4f503072     QA5N06tRn/Arr0PO
 8092dfd:	2b696737 2b693373 3631307a 7639797a     7gi+s3i+z016zy9v
 8092e0d:	39723941 546b3131 52485a4d 33794178     A9r911kTMZHRxAy3
 8092e1d:	53476b51 52325447 0a0d2b54 53704372     QkGSGT2RT+..rCpS
 8092e2d:	562f3478 6b6e4542 484e576a 70784469     x4/VBEnkjWNHiDxp
 8092e3d:	2b763867 72303752 462f6b66 4f34616c     g8v+R70rfk/Fla4O
 8092e4d:	5254646e 6e423851 554d2b63 6c374843     ndTRQ8Bnc+MUCH7l
 8092e5d:	7a393550 4b4d4475 2f30317a 494e0a0d     P59zuDMKz10/..NI
 8092e6d:	75695765 43365435 67415655 4141424d     eWiu5T6CUVAgMBAA
 8092e7d:	62676a47 61677749 77447738 52564459     GjgbIwga8wDwYDVR
 8092e8d:	51415430 41422f48 77417755 7a2f4245     0TAQH/BAUwAwEB/z
 8092e9d:	67424f41 5148564e 66414238 0a0d4538     AOBgNVHQ8BAf8E..
 8092ead:	434d4142 77595141 49595162 4259774b     BAMCAQYwbQYIKwYB
 8092ebd:	48555142 45775141 66425459 6732566f     BQUHAQwEYTBfoV2g
 8092ecd:	5a427a57 7763464d 4a595256 68315761     WzBZMFcwVRYJaW1h
 8092edd:	7655325a 6d6c325a 7745434d 48417a48     Z2UvZ2lmMCEwHzAH
 8092eed:	67420a0d 67447255 6747434d 2b6a5551     ..BgUrDgMCGgQUj+
 8092efd:	6f475458 596a7361 38777235 7461412b     XTGoasjY5rw8+Aat
 8092f0d:	43474952 53473778 524a7734 48616a59     RIGCx7GS4wJRYjaH
 8092f1d:	44633052 324c766f 325a7678 6d647538     R0cDovL2xvZ28udm
 8092f2d:	0a0d7956 704e5861 7534325a 74393259     Vy..aXNpZ24uY29t
 8092f3d:	7a5a334c 6e394762 6e357962 77595761     L3ZzbG9nby5naWYw
 8092f4d:	44595148 4f305256 45594242 542f4846     HQYDVR0OBBYEFH/T
 8092f5d:	4366615a 37796533 4a414438 354d3038     ZafC3ey78DAJ80M5
 8092f6d:	764b672b 7a4d0a0d 414d7a45 53434730     +gKv..MzEzMA0GCS
 8092f7d:	49534771 51443362 51424245 34414155     qGSIb3DQEBBQUAA4
 8092f8d:	51414249 454a5443 3258776f 4232504c     IBAQCTJEowX2LP2B
 8092f9d:	7a4c5971 4a337133 5876746b 58703266     qYLz3q3JktvXf2pX
 8092fad:	4f4f696b 0a0d457a 34423670 69317145     kiOOzE..p6B4Eq1i
 8092fbd:	77566b44 6e584d5a 7459326c 2b6c416d     DkVwZMXnl2YtmAl+
 8092fcd:	572f3658 6c68437a 71476738 48704243     X6/WzChl8gGqCBpH
 8092fdd:	356e7633 614a4a66 676b4743 2b6b6444     3vn5fJJaCGkgDdk+
 8092fed:	38345762 59375744 67350a0d 42515261     bW48DW7Y..5gaRQB
 8092ffd:	4d2b3569 39337448 75714274 4d495743     i5+MHt39tBquCWIM
 809300d:	425a4e6e 63673455 7137556d 514b454b     nNZBU4gcmU7qKEKQ
 809301d:	34625473 4e446237 74416c30 78696b75     sTb47bDN0lAtukix
 809302d:	6b30456c 57423646 0a0d4b6c 67394557     lE0kF6BWlK..WE9g
 809303d:	43366e79 43736761 58556971 6258624f     yn6CagsCqiUXObXb
 809304d:	45652b66 5671535a 47327269 42366c33     f+eEZSqVir2G3l6B
 809305d:	744d6f46 657a4d45 4369612f 6f306d4b     FoMtEMze/aiCKm0o
 809306d:	4c307748 6e584f78 5a596947 66340a0d     Hw0LxOXnGiYZ..4f
 809307d:	78625251 666c3143 67516e7a 38327955     QRbxC1lfznQgUy28
 809308d:	56556436 70746f34 31304636 58707676     6dUV4otp6F01vvpX
 809309d:	48514631 77744f4b 67447235 7a4d3762     1FQHKOtw5rDgb7Mz
 80930ad:	62634956 344a6469 565a4576 0a0d4e38     VIcbidJ4vEZV8N..
 80930bd:	63616e68 32724852 327a566c 49495458     hnacRHr2lVz2XTII
 80930cd:	5552364d 2f676874 797a4661 46716b51     M6RUthg/aFzyQkqF
 80930dd:	4453464f 6f483958 734b504c 6f616445     OFSDX9HoLPKsEdao
 80930ed:	714e5737 2d2d0a0d 452d2d2d 4320444e     7WNq..-----END C
 80930fd:	49545245 41434946 2d2d4554 002d2d2d     ERTIFICATE-----.

0809310d <_ZL12clientKeyPem>:
 809310d:	2d2d2d2d 4745422d 52204e49 50204153     -----BEGIN RSA P
 809311d:	41564952 4b204554 2d2d5945 202d2d2d     RIVATE KEY----- 
 809312d:	494d0a0d 776f4549 41414249 5141434b     ..MIIEowIBAAKCAQ
 809313d:	477a4145 4e354673 592b7753 6f336e74     EAzGsF5NSw+Ytn3o
 809314d:	4f536739 41447552 2b4a3042 746f6d32     9gSORuDAB0J+2mot
 809315d:	44594377 6c352b37 4251634d 52713433     wCYD7+5lMcQB34qR
 809316d:	0a0d6133 56317837 38747948 42483062     3a..7x1VHyt8b0HB
 809317d:	6833786a 704b6f61 34635145 57724463     jx3haoKpEQc4cDrW
 809318d:	59437a34 35484a76 3934384f 4e746b63     4zCYvJH5O849cktN
 809319d:	31617172 4e585834 68756d55 48462b4b     rqa14XXNUmuhK+FH
 80931ad:	5a2b7659 356b0a0d 41547648 37574830     Yv+Z..k5HvTA0HW7
 80931bd:	47524b67 617a6e54 52546432 5a363866     gKRGTnza2dTRf86Z
 80931cd:	38724342 43373630 52717a5a 7969646f     BCr8067CZzqRodiy
 80931dd:	356f4772 64546133 44675146 734e684f     rGo53aTdFQgDOhNs
 80931ed:	2f6e5063 0a0d6a74 542f2f34 59313636     cPn/tj..4//T661Y
 80931fd:	41653978 51764435 30626371 2f4a4165     x9eA5DvQqcb0eAJ/
 809320d:	45396a62 436d4a2f 61484a48 78504779     bj9E/JmCHJHayGPx
 809321d:	4f6e5a4f 64615659 31684d55 2f78565a     OZnOYVadUMh1ZVx/
 809322d:	4c76716f 6e383173 31690a0d 6f705267     oqvLs18n..i1gRpo
 809323d:	6a344848 6c4b5a77 45685137 30476a31     HH4jwZKl7QhE1jG0
 809324d:	48544d58 58426253 43504e74 41466975     XMTHSbBXtNPCuiFA
 809325d:	43667444 4d50326c 48633731 6971386c     DtfCl2PM17cHl8qi
 809326d:	58734f65 4f534d50 0a0d4956 5961784d     eOsXPMSOVI..MxaY
 809327d:	66776558 77713077 434b3547 386c2f69     Xewfw0qwG5KCi/l8
 809328d:	63757539 5a513254 68493434 487a6a7a     9uucT2QZ44IhzjzH
 809329d:	44495148 42415141 42496f41 55694841     HQIDAQABAoIBAHiU
 80932ad:	45764c51 51676b67 786f5535 4c420a0d     QLvEgkgQ5Uox..BL
 80932bd:	666c3669 535a6164 7855516f 68394a55     i6lfdaZSoQUxUJ9h
 80932cd:	41315454 6b7a4551 71343773 6f515076     TT1AQEzks74qvPQo
 80932dd:	2f6d3939 6b38774a 41586d75 5a745269     99m/Jw8kumXAiRtZ
 80932ed:	7452672f 6b685734 78556449 0a0d6368     /gRt4WhkIdUxhc..
 80932fd:	54774257 434c7864 616a7843 70356f4e     WBwTdxLCCxjaNo5p
 809330d:	4578434a 6c4d7345 474c6358 39646864     JCxEEsMlXcLGdhd9
 809331d:	4d666863 57323349 65706479 41417961     chfMI32WydpeayAA
 809332d:	7a4d5937 7a412f66 746e4330 32684977     7YMzf/Az0CntwIh2
 809333d:	4f350a0d 616f6254 3544456f 44744231     ..5OTboaoED51BtD
 809334d:	4b4a6235 61623252 4b7a5266 4448457a     5bJKR2bafRzKzEHD
 809335d:	6b4d4462 447a3962 64374779 7a683976     bDMkb9zDyG7dv9hz
 809336d:	33705643 5332637a 2f4f615a 542f3077     CVp3zc2SZaO/w0/T
 809337d:	0a0d364b 78434d66 6f4f5144 4c587739     K6..fMCxDQOo9wXL
 809338d:	612f7238 304f716d 70434a6c 76447550     8r/amqO0lJCpPuDv
 809339d:	494b4973 6c394161 61316170 4a486d77     sIKIaA9lpa1awmHJ
 80933ad:	596a526b 6c6f3463 41567a31 394b5144     kRjYc4ol1zVADQK9
 80933bd:	31707a54 38340a0d 4e474d35 46523048     Tzp1..485MGNH0RF
 80933cd:	57357a6e 2b413769 562f7533 41362b78     nz5Wi7A+3u/Vx+6A
 80933dd:	43435171 444a4a34 50414c49 3649766b     qQCC4JJDILAPkvI6
 80933ed:	43675069 67696170 34546a73 43536d43     iPgCpaigsjT4CmSC
 80933fd:	5168316b 0a0d6a6d 56713561 436b5837     k1hQmj..a5qV7XkC
 809340d:	41455967 4c78462b 46704973 746e6152     gYEA+FxLsIpFRant
 809341d:	482f4d6e 58665933 5a516663 32364171     nM/H3YfXcfQZqA62
 809342d:	4b59756c 6357334a 56545438 64396e76     luYKJ3Wc8TTVvn9d
 809343d:	4d742f56 6c5a4f67 61750a0d 43556545     V/tMgOZl..uaEeUC
 809344d:	39374774 3743472b 6d717672 4c4a3744     tG79+GC7rvqmD7JL
 809345d:	504e426c 2f2f2f73 685a3539 68713159     lBNPs///95ZhY1qh
 809346d:	2b764b5a 416f487a 30727859 62564a41     ZKv+zHoAYxr0AJVb
 809347d:	34783337 50333736 0a0d726e 54367354     73x4673Pnr..Ts6T
 809348d:	61394b4b 53504633 324c7552 64395948     KK9a3FPSRuL2HY9d
 809349d:	35653575 4a6a554a 4c474259 626d4f37     u5e5JUjJYBGL7Omb
 80934ad:	756e2b43 4a757879 31324471 42435132     C+nuyxuJqD212QCB
 80934bd:	434d4134 41455967 30537230 68530a0d     4AMCgYEA0rS0..Sh
 80934cd:	325a5477 4b795156 6d386d61 44684e33     wTZ2VQyKam8m3NhD
 80934dd:	47315141 53733156 526d4f65 54543379     AQ1GV1sSeOmRy3TT
 80934ed:	316e3645 47313769 3165416f 3839436a     E6n1i71GoAe1jC98
 80934fd:	6e336a31 75497435 374e6145 0a0d557a     1j3n5tIuEaN7zU..
 809350d:	64696c63 6347364f 706d7159 55314b37     clidO6GcYqmp7K1U
 809351d:	72795157 4b4b5833 52356139 6c787169     WQyr3XKK9a5Riqxl
 809352d:	51472f6f 725a547a 342b4b76 5165366c     o/GQzTZrvK+4l6eQ
 809353d:	6b6b4763 334b4151 6c6d7979 316f6565     cGkkQAK3yymleeo1
 809354d:	55780a0d 69797a6b 70536e6f 414d5555     ..xUkzyionSpUUMA
 809355d:	74547971 4d397738 66364735 67374d6b     qyTt8w9M5G6fkM7g
 809356d:	6c764553 6c345949 59674338 32394145     SEvlIY4l8CgYEA92
 809357d:	5367436e 7a6e4e6b 53474d75 666e6f59     nCgSkNnzuMGSYonf
 809358d:	0a0d416a 71584b57 722b536c 73493646     jA..WKXqlS+rF6Is
 809359d:	32685778 57677849 514c6f51 462f3138     xWh2IxgWQoLQ81/F
 80935ad:	52643773 6e325636 51674150 6c39387a     s7dR6V2nPAgQz89l
 80935bd:	7a4f7630 66423534 494e4251 47585538     0vOz45BfQBNI8UXG
 80935cd:	676b5057 2b370a0d 754c3644 344a736d     WPkg..7+D6LumsJ4
 80935dd:	65787976 4377466a 64355462 654d7261     vyxejFwCbT5darMe
 80935ed:	634a774a 5261572f 77494469 30516c6d     JwJc/WaRiDIwmlQ0
 80935fd:	52634235 5a515371 78726270 61675443     5BcRqSQZpbrxCTga
 809360d:	43394441 0a0d6d38 2f6c4b72 7477704b     AD9C8m..rKl/Kpwt
 809361d:	57706170 634c514e 674f4530 43386748     papWNQLc0EOgHg8C
 809362d:	4e415967 666e332b 672b5256 704f2b67     gYAN+3nfVR+gg+Op
 809363d:	6c325166 46357346 3937466b 58495569     fQ2lFs5FkF79iUIX
 809364d:	68584849 4d765443 70760a0d 48565343     IHXhCTvM..vpCSVH
 809365d:	33636151 5276574a 35447277 5a437145     Qac3JWvRwrD5EqCZ
 809366d:	6361362b 546c772b 4436504a 6f342b74     +6ac+wlTJP6Dt+4o
 809367d:	6f4c626d 4a4f6445 58545a39 6750324c     mbLoEdOJ9ZTXL2Pg
 809368d:	776f6b79 784d3832 0a0d4861 7463356d     ykow28MxaH..m5ct
 809369d:	74677756 32664550 414d476f 4b6e7159     VwgtPEf2oGMAYqnK
 80936ad:	4351614b 4e2f6c73 4c494679 75466f4a     KaQCsl/NyFILJoFu
 80936bd:	4e2f2f54 5a6b6a66 38767775 496d6547     T//NfjkZuwv8GemI
 80936cd:	46755578 48615561 69745059 64470a0d     xUuFaUaHYPti..Gd
 80936dd:	77355761 4467424b 4661364c 43524633     aW5wKBgDL6aF3FRC
 80936ed:	4f59774f 5a6e4e73 354a6d58 76617149     OwYOsNnZXmJ5Iqav
 80936fd:	4c647a30 4e676362 4e764e51 4935794d     0zdLbcgNQNvNMy5I
 809370d:	754b5258 69464a37 532b3373 0a0d6931     XRKu7JFis3+S1i..
 809371d:	4664657a 6d63666e 2b704741 45534271     zedFnfcmAGp+qBSE
 809372d:	6a766457 68384743 304b784a 6d573863     WdvjCG8hJxK0c8Wm
 809373d:	3048702f 67666434 3656426e 46395361     /pH04dfgnBV6aS9F
 809374d:	4f4b6155 6647436c 6c6b3336 75796651     UaKOlCGf63klQfyu
 809375d:	2b4a0a0d 32455236 50654b53 6872634a     ..J+6RE2SKePJcrh
 809376d:	36714f46 4768666f 35704336 56777449     FOq6ofhG6Cp5ItwV
 809377d:	42446e48 3352334f 734a7537 73427852     HnDBO3R37uJsRxBs
 809378d:	6267796b 0a0d4a43 2d2d2d2d 444e452d     kygbCJ..-----END
 809379d:	41535220 49525020 45544156 59454b20      RSA PRIVATE KEY
 80937ad:	2d2d2d2d 2d2d002d                                -----.

080937b3 <_ZL15clientKeyCrtPem>:
 80937b3:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
 80937c3:	41434946 2d2d4554 202d2d2d 494d0a0d     FICATE----- ..MI
 80937d3:	54574449 6b414343 77416747 67414249     IDWTCCAkGgAwIBAg
 80937e3:	32515549 4168412f 522f497a 69475451     IUQ2/AhAzI/RQTGi
 80937f3:	466e7278 7569352f 7541336f 51447749     xrnF/5iuo3AuIwDQ
 8093803:	6f4b4a59 7668495a 51414e63 0a0d4c45     YJKoZIhvcNAQEL..
 8093813:	77415142 4c465454 476b454d 45553141     BQAwTTFLMEkGA1UE
 8093823:	43787743 68315751 75396d65 6c644649     CwxCQW1hem9uIFdl
 8093833:	54426959 324a585a 6c4e5761 50427963     YiBTZXJ2aWNlcyBP
 8093843:	74465550 76705859 6a356962 67303262     PUFtYXpvbi5jb20g
 8093853:	57530a0d 694c6a35 56504d42 58596c4e     ..SW5jLiBMPVNlYX
 8093863:	47623052 31556755 32563951 47617a46     R0bGUgU1Q9V2FzaG
 8093873:	335a756c 69627652 56504442 424d5456     luZ3RvbiBDPVVTMB
 8093883:	54445834 444d3445 444f796b 544e3245     4XDTE4MDkyODE2NT
 8093893:	0a0d7a51 586f6c4e 35515444 7a49544d     Qz..NloXDTQ5MTIz
 80938a3:	7a49544d 316b544e 776f564f 63456a48     MTIzNTk1OVowHjEc
 80938b3:	476f424d 45553141 54777741 54645651     MBoGA1UEAwwTQVdT
 80938c3:	766c4549 44424356 304a585a 705a5761     IElvVCBDZXJ0aWZp
 80938d3:	30463259 545a0a0d 53414343 51447749     Y2F0..ZTCCASIwDQ
 80938e3:	6f4b4a59 7668495a 51414e63 51424245     YJKoZIhvcNAQEBBQ
 80938f3:	67674441 44415045 51414343 6767436f     ADggEPADCCAQoCgg
 8093903:	4d414245 65427278 50735554 395a4c6d     EBAMxrBeTUsPmLZ9
 8093913:	45595036 0a0d6b6a 41776762 74664364     6PYEjk..bgwAdCft
 8093923:	634c7170 2b416d41 545a752f 64414548     pqLcAmA+/uZTHEAd
 8093933:	646b4b2b 64387532 72385256 42394766     +Kkd2u8dVR8rfG9B
 8093943:	64385977 43715734 48455271 3641484f     wY8d4WqCqREHOHA6
 8093953:	774d7531 52794c6d 542b0a0d 58504f76     1uMwmLyR..+TvOPX
 8093963:	61544c4a 65746d36 567a3146 536f724a     JLTa6mteF1zVJroS
 8093973:	32526876 5a6d2f4c 3037524f 31424e77     vhR2L/mZOR70wNB1
 8093983:	6b433475 38356b52 556e7432 4f2f5830     u4CkRk582tnU0X/O
 8093993:	7151516d 754f4e2f 0a0d6d77 616b3663     mQQq/NOuwm..c6ka
 80939a3:	71735948 644f7178 52336b32 7a414955     HYsqxqOd2k3RUIAz
 80939b3:	4862546f 372f3544 2f502b59 74752b30     oTbHD5/7Y+P/0+ut
 80939c3:	58664d57 37514f67 476e4b30 43674839     WMfXgOQ70KnG9HgC
 80939d3:	2f343266 5a795052 52796867 73320a0d     f24/RPyZghyR..2s
 80939e3:	54386a68 6d7a5a6d 566e5746 57644944     hj8TmZzmFWnVDIdW
 80939f3:	36666356 3779724b 344a664e 61455974     Vcf6Kry7NfJ4tYEa
 8093a03:	2b784261 53473849 49306570 78594e52     aBx+I8GSpe0IRNYx
 8093a13:	457a4674 776d3078 54543756 0a0d7277     tFzEx0mwV7TTwr..
 8093a23:	4151686f 70775837 4e7a6a64 35423365     ohQA7XwpdjzNe3B5
 8093a33:	6e6f4b66 7a46726a 6c6a457a 574d4453     fKonjrFzzEjlSDMW
 8093a43:	7333466d 4b4e3848 53754273 35766f67     mF3sH8NKsBuSgov5
 8093a53:	72625066 6b39456e 434f6547 38346349     fPbrnE9kGeOCIc48
 8093a63:	78780a0d 77414330 61414145 464d674e     ..xx0CAwEAAaNgMF
 8093a73:	77487734 52564459 42426a30 6f467767     4wHwYDVR0jBBgwFo
 8093a83:	69675541 56764f47 38464254 704e5550     AUgiGOvVTBF8PUNp
 8093a93:	4f386462 4d724653 37563059 5148776b     bd8OSFrMY0V7kwHQ
 8093aa3:	0a0d4459 4f305256 45594242 36484446     YD..VR0OBBYEFDH6
 8093ab3:	35465837 69527957 67416d6f 56567243     7XF5WyRiomAgCrVV
 8093ac3:	2b765335 502f5a46 4777414d 64553141     5Sv+FZ/PMAwGA1Ud
 8093ad3:	42457745 4351772f 7741414d 44596744     EwEB/wQCMAAwDgYD
 8093ae3:	50305256 51410a0d 41422f48 67414451     VR0P..AQH/BAQDAg
 8093af3:	414d4165 53434730 49534771 51443362     eAMA0GCSqGSIb3DQ
 8093b03:	77434245 34414155 51414249 4d796441     EBCwUAA4IBAQAdyM
 8093b13:	49795244 56307269 3761644f 77594931     DRyIir0VOda71IYw
 8093b23:	71675432 0a0d5362 6b447a38 5552384c     2TgqbS..8zDkL8RU
 8093b33:	616e4d72 30785549 36366973 71704b56     rMnaIUx0si66VKpq
 8093b43:	4b655166 4476554b 6d724170 654c6a38     fQeKKUvDpArm8jLe
 8093b53:	36436a4e 7753494f 54735553 455a7449     NjC6OISwSUsTItZE
 8093b63:	4a746f47 39426b36 30590a0d 70594341     GotJ6kB9..Y0ACYp
 8093b73:	36677370 36385834 4555525a 42396271     psg64X86ZRUEqb9B
 8093b83:	4161692f 7a486b67 3678496b 68306238     /iaAgkHzkIx68b0h
 8093b93:	6e445736 47394146 755a6757 4150766f     6WDnFA9GWgZuovPA
 8093ba3:	54544653 44384a6f 0a0d3539 69416531     SFTToJ8D95..1eAi
 8093bb3:	62755a55 70504933 666b6e36 386c7350     UZub3IPp6nkfPsl8
 8093bc3:	634b2b6c 396a6b56 2b784c79 4a4d6433     l+KcVkj9yLx+3dMJ
 8093bd3:	422b7170 72513633 41564a76 48423979     pq+B36QrvJVAy9BH
 8093be3:	4e734e61 38344d46 48636c45 2b4f0a0d     aNsNFM48ElcH..O+
 8093bf3:	5949394a 672f796b 4a457944 784b5241     J9IYky/gDyEJARKx
 8093c03:	63444234 6f417574 33506b6b 472f4c52     4BDctuAokkP3RL/G
 8093c13:	4e382f6a 4c4c584b 75362b67 64434d30     j/8NKXLLg+6u0MCd
 8093c23:	346b3147 65486958 3243656a 0a0d7634     G1k4XiHejeC24v..
 8093c33:	5a51476b 55374b4f 675a7461 2b504735     kGQZOK7UatZg5GP+
 8093c43:	64646d6f 65514534 376a3436 77465570     omdd4EQe64j7pUFw
 8093c53:	4b776e6d 57505a55 4b617877 39623264     mnwKUZPWwxaKd2b9
 8093c63:	6633474d 4b4e744c 54427341 2d2d0a0d     MG3fLtNKAsBT..--
 8093c73:	452d2d2d 4320444e 49545245 41434946     ---END CERTIFICA
 8093c83:	2d2d4554 002d2d2d 00000000                       TE-----..

08093c8c <_ZTV8SPIClass>:
	...
 8093c94:	0808f3b5 0808f3b7                       ........

08093c9c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 8093ca4:	0808f421 0808f427 0808f51b 0808f433     !...'.......3...
 8093cb4:	0808f423                                #...

08093cb8 <_ZTV9TCPClient>:
	...
 8093cc0:	080803b9 080803ed 0808f3f3 0808f7ad     ................
 8093cd0:	0808f599 0808f4e7 0808f4b9 0808f409     ................
 8093ce0:	0808f6c9 0808f439 0808f537 0808f615     ....9...7.......
 8093cf0:	0808f7d1 0808f823 0808f40d 6e6c0066     ....#.......f.ln
 8093d00:	006e6600 61746564 0d006c69 3025000a     .fn.detail....%0
 8093d10:	20753031 00205d00 203a2928 005b2000     10u .] .(): . [.
 8093d20:	65646f63 00203d20 64006925 69617465     code = .%i.detai
 8093d30:	3d20736c 61620020 53006475 61697265     ls = .baud.Seria
 8093d40:	5355006c 72655342 316c6169 72617000     l.USBSerial1.par
 8093d50:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 8093d60:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 8093d70:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 8093d80:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 8093d90:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 8093da0:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 8093db0:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 8093dc0:	6f727265 61700072 0063696e 006c6c61     error.panic.all.
 8093dd0:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
 8093de0:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
 8093df0:	63736100 656d6974 00000000              .asctime....

08093dfc <_ZTV9IPAddress>:
	...
 8093e04:	0808fc3b 0808fc2d 0808fc2f              ;...-.../...

08093e10 <_ZTV9USBSerial>:
	...
 8093e18:	0808fcdd 0808fd21 0808fcfb 0808f949     ....!.......I...
 8093e28:	0808fcf5 0808fcdf 0808fce7 0808fd1b     ................
 8093e38:	0808fcef 0808fcd9                       ........

08093e40 <_ZTVN5spark13CellularClassE>:
	...
 8093e48:	0808fe4d                                M...

08093e4c <_ZN5spark7NetworkE>:
 8093e4c:	200039f0                                .9. 

08093e50 <_ZTV11USARTSerial>:
	...
 8093e58:	0808fe95 0808feb9 0808fec5 0808f949     ............I...
 8093e68:	0808fea1 0808fead 0808fea7 0808feb3     ................
 8093e78:	0808fe97 0808fe9b                       ........

08093e80 <__sf_fake_stdin>:
	...

08093ea0 <__sf_fake_stdout>:
	...

08093ec0 <__sf_fake_stderr>:
	...

08093ee0 <link_const_variable_data_end>:
 8093ee0:	08080235 	.word	0x08080235
 8093ee4:	08080299 	.word	0x08080299
 8093ee8:	0808029d 	.word	0x0808029d
 8093eec:	080802a1 	.word	0x080802a1
 8093ef0:	080802a5 	.word	0x080802a5
 8093ef4:	080802a9 	.word	0x080802a9
 8093ef8:	080802ad 	.word	0x080802ad
 8093efc:	080802b1 	.word	0x080802b1
 8093f00:	080802b5 	.word	0x080802b5
 8093f04:	080802b9 	.word	0x080802b9
 8093f08:	080802bd 	.word	0x080802bd
 8093f0c:	080802c1 	.word	0x080802c1
 8093f10:	080802c5 	.word	0x080802c5
 8093f14:	080802e9 	.word	0x080802e9
 8093f18:	080802ed 	.word	0x080802ed
 8093f1c:	080802f1 	.word	0x080802f1
 8093f20:	080802f5 	.word	0x080802f5
 8093f24:	08080e0d 	.word	0x08080e0d
 8093f28:	0808ef09 	.word	0x0808ef09
 8093f2c:	0808ef0d 	.word	0x0808ef0d
 8093f30:	0808f3ed 	.word	0x0808f3ed
 8093f34:	0808fa59 	.word	0x0808fa59
 8093f38:	0808fa69 	.word	0x0808fa69
 8093f3c:	0808fac9 	.word	0x0808fac9
 8093f40:	0808fe59 	.word	0x0808fe59
 8093f44:	0808ff61 	.word	0x0808ff61
 8093f48:	0808ffbd 	.word	0x0808ffbd
 8093f4c:	0808fff9 	.word	0x0808fff9
 8093f50:	0809007d 	.word	0x0809007d
 8093f54:	08090141 	.word	0x08090141
 8093f58:	08090205 	.word	0x08090205

08093f5c <link_constructors_end>:
 8093f5c:	00000000 	.word	0x00000000
