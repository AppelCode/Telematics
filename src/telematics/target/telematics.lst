
C:/Dev/Telematics/src/telematics/target/telematics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a08  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  08096a20  08096a20  00026a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  08096a28  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000ac  20000400  08096a2c  00040400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00003a60  200004b0  200004b0  000504b0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08096ad8  08096ad8  00046ad8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08096b00  08096b00  00046b00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001ac247  00000000  00000000  00046b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00026213  00000000  00000000  001f2d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004b216  00000000  00000000  00218f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003cf8  00000000  00000000  00264174  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005bb0  00000000  00000000  00267e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00043072  00000000  00000000  0026da1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005c846  00000000  00000000  002b0a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ac2f5  00000000  00000000  0030d2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0001142c  00000000  00000000  003b95cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	a4 31 09 08                                         .1..

0808001c <module_user_pre_init>:
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
 8080020:	b508      	push	{r3, lr}
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f013 f836 	bl	809309e <memcpy>
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f013 f856 	bl	80930ea <memset>
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08096a2c 	.word	0x08096a2c
 808004c:	200004ac 	.word	0x200004ac
 8080050:	200004b0 	.word	0x200004b0
 8080054:	20003f10 	.word	0x20003f10
 8080058:	20003f10 	.word	0x20003f10

0808005c <module_user_init>:
 808005c:	b570      	push	{r4, r5, r6, lr}
 808005e:	f011 fafb 	bl	8091658 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	0809698c 	.word	0x0809698c
 8080084:	08096a1c 	.word	0x08096a1c

08080088 <module_user_setup>:
 8080088:	f000 b898 	b.w	80801bc <setup>

0808008c <module_user_loop>:
 808008c:	b508      	push	{r3, lr}
 808008e:	f000 f91d 	bl	80802cc <loop>
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080096:	f011 ba9d 	b.w	80915d4 <_post_loop>

0808009a <_Znwj>:
 808009a:	f010 bd13 	b.w	8090ac4 <malloc>

0808009e <_Znaj>:
 808009e:	f010 bd11 	b.w	8090ac4 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f010 bd17 	b.w	8090ad4 <free>

080800a6 <_ZdaPv>:
 80800a6:	f010 bd15 	b.w	8090ad4 <free>

080800aa <__cxa_guard_acquire>:
 80800aa:	7800      	ldrb	r0, [r0, #0]
 80800ac:	fab0 f080 	clz	r0, r0
 80800b0:	0940      	lsrs	r0, r0, #5
 80800b2:	4770      	bx	lr

080800b4 <__cxa_guard_release>:
 80800b4:	2301      	movs	r3, #1
 80800b6:	7003      	strb	r3, [r0, #0]
 80800b8:	4770      	bx	lr

080800ba <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 80800ba:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 80800bc:	4602      	mov	r2, r0
 80800be:	f003 0308 	and.w	r3, r3, #8
 80800c2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80800c6:	b12b      	cbz	r3, 80800d4 <_ZN4File9availableEv+0x1a>
 80800c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80800ca:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 80800cc:	1a18      	subs	r0, r3, r0
 80800ce:	bf48      	it	mi
 80800d0:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 80800d4:	4770      	bx	lr

080800d6 <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 80800d6:	4770      	bx	lr

080800d8 <_ZN2SDD1Ev>:

#define SPI_CONFIGURATION 0
const uint8_t chipSelect = SS;


class SD
 80800d8:	4770      	bx	lr
	...

080800dc <_Z8callbackPcPhj>:
unsigned char key[32];

// recieve message
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
 80800dc:	b5b0      	push	{r4, r5, r7, lr}
 80800de:	4615      	mov	r5, r2
    char p[length + 1];
 80800e0:	f102 0308 	add.w	r3, r2, #8
 80800e4:	f023 0307 	bic.w	r3, r3, #7
unsigned char key[32];

// recieve message
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
 80800e8:	b084      	sub	sp, #16
 80800ea:	af00      	add	r7, sp, #0
    char p[length + 1];
 80800ec:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
 80800f0:	4668      	mov	r0, sp
 80800f2:	f012 ffd4 	bl	809309e <memcpy>
    p[length] = NULL;
 80800f6:	2400      	movs	r4, #0
    String message(p);
 80800f8:	4669      	mov	r1, sp
 80800fa:	4638      	mov	r0, r7
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
 80800fc:	f80d 4005 	strb.w	r4, [sp, r5]
    String message(p);
 8080100:	f011 f81d 	bl	809113e <_ZN6StringC1EPK19__FlashStringHelper>

    if (message.equals("RED"))
 8080104:	4914      	ldr	r1, [pc, #80]	; (8080158 <_Z8callbackPcPhj+0x7c>)
 8080106:	4638      	mov	r0, r7
 8080108:	f011 f84c 	bl	80911a4 <_ZNK6String6equalsEPKc>
 808010c:	4605      	mov	r5, r0
 808010e:	b118      	cbz	r0, 8080118 <_Z8callbackPcPhj+0x3c>
        RGB.color(255, 0, 0);
 8080110:	4622      	mov	r2, r4
 8080112:	4621      	mov	r1, r4
 8080114:	20ff      	movs	r0, #255	; 0xff
 8080116:	e013      	b.n	8080140 <_Z8callbackPcPhj+0x64>
    else if (message.equals("GREEN"))
 8080118:	4910      	ldr	r1, [pc, #64]	; (808015c <_Z8callbackPcPhj+0x80>)
 808011a:	4638      	mov	r0, r7
 808011c:	f011 f842 	bl	80911a4 <_ZNK6String6equalsEPKc>
 8080120:	4604      	mov	r4, r0
 8080122:	b110      	cbz	r0, 808012a <_Z8callbackPcPhj+0x4e>
        RGB.color(0, 255, 0);
 8080124:	462a      	mov	r2, r5
 8080126:	21ff      	movs	r1, #255	; 0xff
 8080128:	e009      	b.n	808013e <_Z8callbackPcPhj+0x62>
    else if (message.equals("BLUE"))
 808012a:	490d      	ldr	r1, [pc, #52]	; (8080160 <_Z8callbackPcPhj+0x84>)
 808012c:	4638      	mov	r0, r7
 808012e:	f011 f839 	bl	80911a4 <_ZNK6String6equalsEPKc>
        RGB.color(0, 0, 255);
 8080132:	22ff      	movs	r2, #255	; 0xff

    if (message.equals("RED"))
        RGB.color(255, 0, 0);
    else if (message.equals("GREEN"))
        RGB.color(0, 255, 0);
    else if (message.equals("BLUE"))
 8080134:	b110      	cbz	r0, 808013c <_Z8callbackPcPhj+0x60>
        RGB.color(0, 0, 255);
 8080136:	4621      	mov	r1, r4
 8080138:	4620      	mov	r0, r4
 808013a:	e001      	b.n	8080140 <_Z8callbackPcPhj+0x64>
    else
        RGB.color(255, 255, 255);
 808013c:	4611      	mov	r1, r2
 808013e:	4610      	mov	r0, r2
 8080140:	f011 f9e8 	bl	8091514 <_ZN8RGBClass5colorEiii>
    delay(1000);
 8080144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080148:	f011 f9d2 	bl	80914f0 <delay>
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    String message(p);
 808014c:	4638      	mov	r0, r7
 808014e:	f010 ffaf 	bl	80910b0 <_ZN6StringD1Ev>
    else if (message.equals("BLUE"))
        RGB.color(0, 0, 255);
    else
        RGB.color(255, 255, 255);
    delay(1000);
}
 8080152:	3710      	adds	r7, #16
 8080154:	46bd      	mov	sp, r7
 8080156:	bdb0      	pop	{r4, r5, r7, pc}
 8080158:	080931b8 	.word	0x080931b8
 808015c:	080931bc 	.word	0x080931bc
 8080160:	080931c2 	.word	0x080931c2

08080164 <_ZN4FileD0Ev>:
 8080164:	b510      	push	{r4, lr}
 8080166:	4604      	mov	r4, r0
 8080168:	f7ff ff9b 	bl	80800a2 <_ZdlPv>
 808016c:	4620      	mov	r0, r4
 808016e:	bd10      	pop	{r4, pc}

08080170 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080170:	3010      	adds	r0, #16
 8080172:	f001 bc55 	b.w	8081a20 <_ZN7FatFile4syncEv>

08080176 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 8080176:	3010      	adds	r0, #16
 8080178:	f001 bb81 	b.w	808187e <_ZN7FatFile4peekEv>

0808017c <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 808017c:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 808017e:	2201      	movs	r2, #1
 8080180:	f10d 0107 	add.w	r1, sp, #7
 8080184:	3010      	adds	r0, #16
 8080186:	f001 fac6 	bl	8081716 <_ZN7FatFile4readEPvj>
 808018a:	2801      	cmp	r0, #1
 808018c:	bf0c      	ite	eq
 808018e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080192:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 8080196:	b003      	add	sp, #12
 8080198:	f85d fb04 	ldr.w	pc, [sp], #4

0808019c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 808019c:	3010      	adds	r0, #16
 808019e:	f001 bccb 	b.w	8081b38 <_ZN7FatFile5writeEPKvj>

080801a2 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 80801a2:	b507      	push	{r0, r1, r2, lr}
 80801a4:	ab02      	add	r3, sp, #8
 80801a6:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 80801aa:	2201      	movs	r2, #1
 80801ac:	4619      	mov	r1, r3
 80801ae:	3010      	adds	r0, #16
 80801b0:	f001 fcc2 	bl	8081b38 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 80801b4:	b003      	add	sp, #12
 80801b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080801bc <setup>:


#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
int counter = 0;
void setup() {
 80801bc:	b530      	push	{r4, r5, lr}

    //block untill startup is complete
    while(startup == false);
 80801be:	4b35      	ldr	r3, [pc, #212]	; (8080294 <setup+0xd8>)


#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
int counter = 0;
void setup() {
 80801c0:	b0c5      	sub	sp, #276	; 0x114

    //block untill startup is complete
    while(startup == false);
 80801c2:	781b      	ldrb	r3, [r3, #0]
 80801c4:	b903      	cbnz	r3, 80801c8 <setup+0xc>
 80801c6:	e7fe      	b.n	80801c6 <setup+0xa>
    
        Serial.begin(9600);
 80801c8:	f011 fb02 	bl	80917d0 <_Z16_fetch_usbserialv>
 80801cc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80801d0:	f011 fae4 	bl	809179c <_ZN9USBSerial5beginEl>
        delay(5000);
 80801d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80801d8:	f011 f98a 	bl	80914f0 <delay>
        Serial.println("top of code");
 80801dc:	f011 faf8 	bl	80917d0 <_Z16_fetch_usbserialv>
 80801e0:	492d      	ldr	r1, [pc, #180]	; (8080298 <setup+0xdc>)
 80801e2:	f011 f81a 	bl	809121a <_ZN5Print7printlnEPKc>
        //setup SD
        sd_storage.begin();
 80801e6:	482d      	ldr	r0, [pc, #180]	; (808029c <setup+0xe0>)
 80801e8:	f010 f922 	bl	8090430 <_ZN2SD5beginEv>

        //setup 9DOF
        dof.begin();
 80801ec:	482c      	ldr	r0, [pc, #176]	; (80802a0 <setup+0xe4>)
 80801ee:	f010 fa3b 	bl	8090668 <_ZN3DOF5beginEv>
        //setup CAN
        stn.begin();

        int buffer[64];
        int size=0;
        stn.receive(buffer,size);
 80801f2:	ad04      	add	r5, sp, #16

        //setup 9DOF
        dof.begin();

        //setup CAN
        stn.begin();
 80801f4:	482b      	ldr	r0, [pc, #172]	; (80802a4 <setup+0xe8>)
 80801f6:	f010 f8ad 	bl	8090354 <_ZN3CAN5beginEv>

        int buffer[64];
        int size=0;
 80801fa:	2400      	movs	r4, #0
        stn.receive(buffer,size);
 80801fc:	aa03      	add	r2, sp, #12
 80801fe:	4629      	mov	r1, r5
 8080200:	4828      	ldr	r0, [pc, #160]	; (80802a4 <setup+0xe8>)

        //setup CAN
        stn.begin();

        int buffer[64];
        int size=0;
 8080202:	9403      	str	r4, [sp, #12]
        stn.receive(buffer,size);
 8080204:	f010 f8c0 	bl	8090388 <_ZN3CAN7receiveEPiRi>
        for(int i = 0; i <size; i++) { 
 8080208:	9b03      	ldr	r3, [sp, #12]
 808020a:	429c      	cmp	r4, r3
 808020c:	da09      	bge.n	8080222 <setup+0x66>
            Serial.printf("%c",*(buffer+i));
 808020e:	f011 fadf 	bl	80917d0 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080212:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8080216:	4a24      	ldr	r2, [pc, #144]	; (80802a8 <setup+0xec>)
 8080218:	2100      	movs	r1, #0
 808021a:	f011 f91d 	bl	8091458 <_ZN5Print11printf_implEbPKcz>
        stn.begin();

        int buffer[64];
        int size=0;
        stn.receive(buffer,size);
        for(int i = 0; i <size; i++) { 
 808021e:	3401      	adds	r4, #1
 8080220:	e7f2      	b.n	8080208 <setup+0x4c>
            lastSync = millis();
        }
        */

        //dof info
        dof.getTemp();
 8080222:	4c1f      	ldr	r4, [pc, #124]	; (80802a0 <setup+0xe4>)
        int size=0;
        stn.receive(buffer,size);
        for(int i = 0; i <size; i++) { 
            Serial.printf("%c",*(buffer+i));
        }
        Serial.println();
 8080224:	f011 fad4 	bl	80917d0 <_Z16_fetch_usbserialv>
 8080228:	f010 ffeb 	bl	8091202 <_ZN5Print7printlnEv>
            lastSync = millis();
        }
        */

        //dof info
        dof.getTemp();
 808022c:	4620      	mov	r0, r4
 808022e:	f010 fa27 	bl	8090680 <_ZN3DOF7getTempEv>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return open(m_cwd, path, oflag);
 8080232:	491e      	ldr	r1, [pc, #120]	; (80802ac <setup+0xf0>)
 8080234:	2363      	movs	r3, #99	; 0x63
 8080236:	4a1e      	ldr	r2, [pc, #120]	; (80802b0 <setup+0xf4>)
 8080238:	6809      	ldr	r1, [r1, #0]
 808023a:	481e      	ldr	r0, [pc, #120]	; (80802b4 <setup+0xf8>)
        float temp = dof.TEMP;
 808023c:	6b24      	ldr	r4, [r4, #48]	; 0x30
 808023e:	f001 fc2c 	bl	8081a9a <_ZN7FatFile4openEPS_PKch>
#include "SD.h"
template<typename datatype>
bool SD::write(datatype data)
    {
        // open the file for write 
        if (!myFile.open("test.txt", O_RDWR | O_CREAT | O_AT_END)) {
 8080242:	b310      	cbz	r0, 808028a <setup+0xce>
            return false;
        }
        
        myFile.println(data);   // write data to Sd
 8080244:	4620      	mov	r0, r4
 8080246:	f011 ff7b 	bl	8092140 <__aeabi_f2d>
 808024a:	2302      	movs	r3, #2
 808024c:	4602      	mov	r2, r0
 808024e:	9300      	str	r3, [sp, #0]
 8080250:	4812      	ldr	r0, [pc, #72]	; (808029c <setup+0xe0>)
 8080252:	460b      	mov	r3, r1
 8080254:	f011 f8f2 	bl	809143c <_ZN5Print7printlnEdi>
        myFile.close();         // close file to save data
 8080258:	4816      	ldr	r0, [pc, #88]	; (80802b4 <setup+0xf8>)
 808025a:	f001 fc17 	bl	8081a8c <_ZN7FatFile5closeEv>
        //Serial.print("dof temp: ");
        //Serial.println(temp);

        //test sd storage
        if (sd_storage.write<float>(temp)){
            Serial.println("bottom of code");
 808025e:	f011 fab7 	bl	80917d0 <_Z16_fetch_usbserialv>
 8080262:	4915      	ldr	r1, [pc, #84]	; (80802b8 <setup+0xfc>)
 8080264:	f010 ffd9 	bl	809121a <_ZN5Print7printlnEPKc>
        }
        Serial.println(System.freeMemory());
    */

        //key genrateion and test
        secretStuff.generateKey(key);
 8080268:	4914      	ldr	r1, [pc, #80]	; (80802bc <setup+0x100>)
 808026a:	4815      	ldr	r0, [pc, #84]	; (80802c0 <setup+0x104>)
 808026c:	f010 f80a 	bl	8090284 <_ZN5Crypt11generateKeyEPh>
        Serial.print("key: ");
 8080270:	f011 faae 	bl	80917d0 <_Z16_fetch_usbserialv>
 8080274:	4913      	ldr	r1, [pc, #76]	; (80802c4 <setup+0x108>)
 8080276:	f010 ffbd 	bl	80911f4 <_ZN5Print5printEPKc>
        Serial.println((int)key);
 808027a:	f011 faa9 	bl	80917d0 <_Z16_fetch_usbserialv>
 808027e:	220a      	movs	r2, #10
 8080280:	490e      	ldr	r1, [pc, #56]	; (80802bc <setup+0x100>)
 8080282:	f011 f822 	bl	80912ca <_ZN5Print7printlnEii>
    


}   
 8080286:	b045      	add	sp, #276	; 0x114
 8080288:	bd30      	pop	{r4, r5, pc}

        //test sd storage
        if (sd_storage.write<float>(temp)){
            Serial.println("bottom of code");
        } else {
            Serial.println("did not write to sd!");
 808028a:	f011 faa1 	bl	80917d0 <_Z16_fetch_usbserialv>
 808028e:	490e      	ldr	r1, [pc, #56]	; (80802c8 <setup+0x10c>)
 8080290:	e7e8      	b.n	8080264 <setup+0xa8>
 8080292:	bf00      	nop
 8080294:	20000400 	.word	0x20000400
 8080298:	080931c7 	.word	0x080931c7
 808029c:	20000a58 	.word	0x20000a58
 80802a0:	200004b4 	.word	0x200004b4
 80802a4:	20000f28 	.word	0x20000f28
 80802a8:	080931d3 	.word	0x080931d3
 80802ac:	20000f38 	.word	0x20000f38
 80802b0:	080931d6 	.word	0x080931d6
 80802b4:	20000a68 	.word	0x20000a68
 80802b8:	080931df 	.word	0x080931df
 80802bc:	20000f08 	.word	0x20000f08
 80802c0:	20000570 	.word	0x20000570
 80802c4:	080931ee 	.word	0x080931ee
 80802c8:	080931f4 	.word	0x080931f4

080802cc <loop>:
}   

void loop() {

    //curently does nothing
    delay(200);
 80802cc:	20c8      	movs	r0, #200	; 0xc8
 80802ce:	f011 b90f 	b.w	80914f0 <delay>
	...

080802d4 <_GLOBAL__sub_I_recv_mutex>:
            awsiot.loop();
        }
        */
        os_thread_delay_until(&lastThreadTime, 10);
	} 
}
 80802d4:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80802d6:	f010 f9ed 	bl	80906b4 <HAL_Pin_Map>
#include "Particle.h"
#include "cellular_hal.h"
#include <CarT.h>

//setup threading
SYSTEM_THREAD(ENABLED);
 80802da:	2100      	movs	r1, #0
 80802dc:	2001      	movs	r0, #1
 80802de:	f010 fbd1 	bl	8090a84 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80802e2:	2003      	movs	r0, #3
 80802e4:	f010 fbbe 	bl	8090a64 <set_system_mode>
 * MQTT client(server, 1883, callback);
 * want to use domain name,
 * MQTT client("www.sample.com", 1883, callback);
 **/

AWS* awsiot = new AWS("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);  
 80802e8:	f640 2098 	movw	r0, #2712	; 0xa98
 80802ec:	f7ff fed5 	bl	808009a <_Znwj>
 80802f0:	4604      	mov	r4, r0
 80802f2:	b128      	cbz	r0, 8080300 <_GLOBAL__sub_I_recv_mutex+0x2c>
 80802f4:	4b0f      	ldr	r3, [pc, #60]	; (8080334 <_GLOBAL__sub_I_recv_mutex+0x60>)
 80802f6:	f242 22b3 	movw	r2, #8883	; 0x22b3
 80802fa:	490f      	ldr	r1, [pc, #60]	; (8080338 <_GLOBAL__sub_I_recv_mutex+0x64>)
 80802fc:	f010 f99e 	bl	809063c <_ZN3AWSC1EPctPFvS0_PhjE>
 8080300:	4b0e      	ldr	r3, [pc, #56]	; (808033c <_GLOBAL__sub_I_recv_mutex+0x68>)
#define CRYPT_H

#include <MQTT-TLS.h>


class Crypt {
 8080302:	4a0f      	ldr	r2, [pc, #60]	; (8080340 <_GLOBAL__sub_I_recv_mutex+0x6c>)
 8080304:	601c      	str	r4, [r3, #0]
 8080306:	4b0f      	ldr	r3, [pc, #60]	; (8080344 <_GLOBAL__sub_I_recv_mutex+0x70>)
Crypt secretStuff;                        

//come from CART currently testing
CAN stn;
 8080308:	480f      	ldr	r0, [pc, #60]	; (8080348 <_GLOBAL__sub_I_recv_mutex+0x74>)
 808030a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 808030e:	f010 f81f 	bl	8090350 <_ZN3CANC1Ev>
DOF dof;
 8080312:	480e      	ldr	r0, [pc, #56]	; (808034c <_GLOBAL__sub_I_recv_mutex+0x78>)
 8080314:	f010 f9a1 	bl	809065a <_ZN3DOFC1Ev>
SD sd_storage;
 8080318:	480d      	ldr	r0, [pc, #52]	; (8080350 <_GLOBAL__sub_I_recv_mutex+0x7c>)
 808031a:	f010 f865 	bl	80903e8 <_ZN2SDC1Ev>
 808031e:	4a0d      	ldr	r2, [pc, #52]	; (8080354 <_GLOBAL__sub_I_recv_mutex+0x80>)
 8080320:	490d      	ldr	r1, [pc, #52]	; (8080358 <_GLOBAL__sub_I_recv_mutex+0x84>)
 8080322:	480b      	ldr	r0, [pc, #44]	; (8080350 <_GLOBAL__sub_I_recv_mutex+0x7c>)
 8080324:	f011 fc5a 	bl	8091bdc <__aeabi_atexit>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080328:	f010 fa44 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
    delay(1000);
}


#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
 808032c:	4b0b      	ldr	r3, [pc, #44]	; (808035c <_GLOBAL__sub_I_recv_mutex+0x88>)
 808032e:	6018      	str	r0, [r3, #0]
 8080330:	bd10      	pop	{r4, pc}
 8080332:	bf00      	nop
 8080334:	080800dd 	.word	0x080800dd
 8080338:	0809321d 	.word	0x0809321d
 808033c:	20000f2c 	.word	0x20000f2c
 8080340:	08093248 	.word	0x08093248
 8080344:	20000570 	.word	0x20000570
 8080348:	20000f28 	.word	0x20000f28
 808034c:	200004b4 	.word	0x200004b4
 8080350:	20000a58 	.word	0x20000a58
 8080354:	200004b0 	.word	0x200004b0
 8080358:	080800d9 	.word	0x080800d9
 808035c:	2000056c 	.word	0x2000056c

08080360 <_GLOBAL__sub_I__ZN4NmeaC2E6Stringh9NmeaCache>:
 8080360:	f010 b9a8 	b.w	80906b4 <HAL_Pin_Map>

08080364 <_GLOBAL__sub_I__ZN9NmeaCacheC2Ev>:
 8080364:	f010 b9a6 	b.w	80906b4 <HAL_Pin_Map>

08080368 <_GLOBAL__sub_I__ZN5PgtopC2E9NmeaCache>:
 8080368:	f010 b9a4 	b.w	80906b4 <HAL_Pin_Map>

0808036c <_GLOBAL__sub_I__ZN3GpsC2EP11USARTSerial>:
 808036c:	f010 b9a2 	b.w	80906b4 <HAL_Pin_Map>

08080370 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 8080370:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 8080372:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 8080374:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 8080376:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 8080378:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 808037a:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 808037c:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 808037e:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 8080380:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 8080382:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 8080384:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 8080386:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 8080388:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 808038a:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 808038c:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 8080390:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 8080392:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 8080394:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 8080396:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 8080398:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 808039a:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 808039c:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 808039e:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80803a0:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80803a2:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80803a4:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80803a6:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80803a8:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80803ac:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80803ae:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80803b0:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80803b2:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80803b4:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80803b6:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80803b8:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80803ba:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80803bc:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80803be:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80803c0:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80803c2:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80803c6:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80803c8:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80803cc:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80803d0:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80803d2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80803d6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80803da:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80803de:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80803e0:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80803e2:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80803e4:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80803e6:	6565      	str	r5, [r4, #84]	; 0x54
 80803e8:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80803ec:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80803f0:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80803f4:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80803f8:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80803fc:	d1f0      	bne.n	80803e0 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80803fe:	f04f 0300 	mov.w	r3, #0
 8080402:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 8080406:	bd30      	pop	{r4, r5, pc}

08080408 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 8080408:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 808040a:	231e      	movs	r3, #30
 808040c:	226b      	movs	r2, #107	; 0x6b
 808040e:	2101      	movs	r1, #1
 8080410:	f7ff ffae 	bl	8080370 <_ZN7LSM9DS14initE14interface_modehh>
}
 8080414:	bd10      	pop	{r4, pc}

08080416 <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 8080416:	b510      	push	{r4, lr}
 8080418:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 808041a:	88c0      	ldrh	r0, [r0, #6]
 808041c:	f012 fae2 	bl	80929e4 <__aeabi_ui2f>
 8080420:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8080424:	f012 fb36 	bl	8092a94 <__aeabi_fmul>
 8080428:	6760      	str	r0, [r4, #116]	; 0x74
 808042a:	bd10      	pop	{r4, pc}

0808042c <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 808042c:	b510      	push	{r4, lr}
 808042e:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 8080430:	7dc0      	ldrb	r0, [r0, #23]
 8080432:	f012 fad7 	bl	80929e4 <__aeabi_ui2f>
 8080436:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 808043a:	f012 fb2b 	bl	8092a94 <__aeabi_fmul>
 808043e:	67a0      	str	r0, [r4, #120]	; 0x78
 8080440:	bd10      	pop	{r4, pc}
	...

08080444 <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 8080444:	f890 3020 	ldrb.w	r3, [r0, #32]
 8080448:	3b04      	subs	r3, #4
 808044a:	2b0c      	cmp	r3, #12
 808044c:	d814      	bhi.n	8080478 <_ZN7LSM9DS18calcmResEv+0x34>
 808044e:	e8df f003 	tbb	[pc, r3]
 8080452:	1307      	.short	0x1307
 8080454:	130a1313 	.word	0x130a1313
 8080458:	130d1313 	.word	0x130d1313
 808045c:	1313      	.short	0x1313
 808045e:	10          	.byte	0x10
 808045f:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 8080460:	4b06      	ldr	r3, [pc, #24]	; (808047c <_ZN7LSM9DS18calcmResEv+0x38>)
 8080462:	681b      	ldr	r3, [r3, #0]
 8080464:	e007      	b.n	8080476 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 8080466:	4b05      	ldr	r3, [pc, #20]	; (808047c <_ZN7LSM9DS18calcmResEv+0x38>)
 8080468:	685b      	ldr	r3, [r3, #4]
 808046a:	e004      	b.n	8080476 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 808046c:	4b03      	ldr	r3, [pc, #12]	; (808047c <_ZN7LSM9DS18calcmResEv+0x38>)
 808046e:	689b      	ldr	r3, [r3, #8]
 8080470:	e001      	b.n	8080476 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 8080472:	4b02      	ldr	r3, [pc, #8]	; (808047c <_ZN7LSM9DS18calcmResEv+0x38>)
 8080474:	68db      	ldr	r3, [r3, #12]
 8080476:	67c3      	str	r3, [r0, #124]	; 0x7c
 8080478:	4770      	bx	lr
 808047a:	bf00      	nop
 808047c:	20000404 	.word	0x20000404

08080480 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 8080480:	88c3      	ldrh	r3, [r0, #6]
 8080482:	2bf5      	cmp	r3, #245	; 0xf5
 8080484:	d007      	beq.n	8080496 <_ZN7LSM9DS115constrainScalesEv+0x16>
 8080486:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 808048a:	d004      	beq.n	8080496 <_ZN7LSM9DS115constrainScalesEv+0x16>
 808048c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 8080490:	bf1c      	itt	ne
 8080492:	23f5      	movne	r3, #245	; 0xf5
 8080494:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 8080496:	7dc2      	ldrb	r2, [r0, #23]
 8080498:	2a10      	cmp	r2, #16
 808049a:	d803      	bhi.n	80804a4 <_ZN7LSM9DS115constrainScalesEv+0x24>
 808049c:	4b08      	ldr	r3, [pc, #32]	; (80804c0 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 808049e:	40d3      	lsrs	r3, r2
 80804a0:	07da      	lsls	r2, r3, #31
 80804a2:	d401      	bmi.n	80804a8 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80804a4:	2302      	movs	r3, #2
 80804a6:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80804a8:	f890 2020 	ldrb.w	r2, [r0, #32]
 80804ac:	2a10      	cmp	r2, #16
 80804ae:	d803      	bhi.n	80804b8 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80804b0:	4b04      	ldr	r3, [pc, #16]	; (80804c4 <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80804b2:	40d3      	lsrs	r3, r2
 80804b4:	07db      	lsls	r3, r3, #31
 80804b6:	d402      	bmi.n	80804be <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80804b8:	2304      	movs	r3, #4
 80804ba:	f880 3020 	strb.w	r3, [r0, #32]
 80804be:	4770      	bx	lr
 80804c0:	00010114 	.word	0x00010114
 80804c4:	00011110 	.word	0x00011110

080804c8 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80804c8:	b510      	push	{r4, lr}
 80804ca:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80804cc:	2101      	movs	r1, #1
 80804ce:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80804d2:	f011 faf3 	bl	8091abc <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80804d6:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80804da:	2101      	movs	r1, #1
 80804dc:	f011 faff 	bl	8091ade <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80804e0:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80804e4:	2101      	movs	r1, #1
 80804e6:	f011 fae9 	bl	8091abc <pinMode>
	digitalWrite(_mAddress, HIGH);
 80804ea:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80804ee:	4c0a      	ldr	r4, [pc, #40]	; (8080518 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80804f0:	2101      	movs	r1, #1
 80804f2:	f011 faf4 	bl	8091ade <digitalWrite>
	
	SPI.begin();
 80804f6:	4620      	mov	r0, r4
 80804f8:	f010 fb30 	bl	8090b5c <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80804fc:	4620      	mov	r0, r4
 80804fe:	2108      	movs	r1, #8
 8080500:	f010 fb84 	bl	8090c0c <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 8080504:	4620      	mov	r0, r4
 8080506:	2101      	movs	r1, #1
 8080508:	f010 fb33 	bl	8090b72 <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 808050c:	4620      	mov	r0, r4
}
 808050e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 8080512:	2100      	movs	r1, #0
 8080514:	f010 bb30 	b.w	8090b78 <_ZN8SPIClass11setDataModeEh>
 8080518:	20003e18 	.word	0x20003e18

0808051c <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 808051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 808051e:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 8080520:	4617      	mov	r7, r2
 8080522:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 8080524:	4d09      	ldr	r5, [pc, #36]	; (808054c <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 8080526:	4620      	mov	r0, r4
 8080528:	2100      	movs	r1, #0
 808052a:	f011 fad8 	bl	8091ade <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 808052e:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 8080532:	4628      	mov	r0, r5
 8080534:	f010 fb7e 	bl	8090c34 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 8080538:	4631      	mov	r1, r6
 808053a:	4628      	mov	r0, r5
 808053c:	f010 fb7a 	bl	8090c34 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 8080540:	4620      	mov	r0, r4
}
 8080542:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 8080546:	2101      	movs	r1, #1
 8080548:	f011 bac9 	b.w	8091ade <digitalWrite>
 808054c:	20003e18 	.word	0x20003e18

08080550 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 8080550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080552:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 8080554:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 8080558:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 808055c:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 808055e:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 8080562:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 8080566:	d103      	bne.n	8080570 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 8080568:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 808056a:	bf88      	it	hi
 808056c:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 8080570:	b28c      	uxth	r4, r1
 8080572:	4620      	mov	r0, r4
 8080574:	2100      	movs	r1, #0
 8080576:	f011 fab2 	bl	8091ade <digitalWrite>
	SPI.transfer(rAddress);
 808057a:	4629      	mov	r1, r5
 808057c:	4809      	ldr	r0, [pc, #36]	; (80805a4 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 808057e:	f010 fb59 	bl	8090c34 <_ZN8SPIClass8transferEh>
 8080582:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 8080584:	1bab      	subs	r3, r5, r6
 8080586:	429f      	cmp	r7, r3
 8080588:	dd06      	ble.n	8080598 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 808058a:	2100      	movs	r1, #0
 808058c:	4805      	ldr	r0, [pc, #20]	; (80805a4 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 808058e:	f010 fb51 	bl	8090c34 <_ZN8SPIClass8transferEh>
 8080592:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 8080596:	e7f5      	b.n	8080584 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 8080598:	4620      	mov	r0, r4
 808059a:	2101      	movs	r1, #1
 808059c:	f011 fa9f 	bl	8091ade <digitalWrite>
	
	return 1;
}
 80805a0:	2001      	movs	r0, #1
 80805a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80805a4:	20003e18 	.word	0x20003e18

080805a8 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80805a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80805aa:	2301      	movs	r3, #1
 80805ac:	9300      	str	r3, [sp, #0]
 80805ae:	f10d 030f 	add.w	r3, sp, #15
 80805b2:	f7ff ffcd 	bl	8080550 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80805b6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80805ba:	b005      	add	sp, #20
 80805bc:	f85d fb04 	ldr.w	pc, [sp], #4

080805c0 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80805c0:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80805c2:	f011 faeb 	bl	8091b9c <_Z19__fetch_global_Wirev>
}
 80805c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80805ca:	f011 ba31 	b.w	8091a30 <_ZN7TwoWire5beginEv>

080805ce <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80805ce:	b570      	push	{r4, r5, r6, lr}
 80805d0:	460e      	mov	r6, r1
 80805d2:	4615      	mov	r5, r2
 80805d4:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80805d6:	f011 fae1 	bl	8091b9c <_Z19__fetch_global_Wirev>
 80805da:	4631      	mov	r1, r6
 80805dc:	f011 fa3a 	bl	8091a54 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80805e0:	f011 fadc 	bl	8091b9c <_Z19__fetch_global_Wirev>
 80805e4:	6803      	ldr	r3, [r0, #0]
 80805e6:	4629      	mov	r1, r5
 80805e8:	689b      	ldr	r3, [r3, #8]
 80805ea:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80805ec:	f011 fad6 	bl	8091b9c <_Z19__fetch_global_Wirev>
 80805f0:	6803      	ldr	r3, [r0, #0]
 80805f2:	4621      	mov	r1, r4
 80805f4:	689a      	ldr	r2, [r3, #8]
 80805f6:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80805f8:	f011 fad0 	bl	8091b9c <_Z19__fetch_global_Wirev>
}
 80805fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 8080600:	f011 ba30 	b.w	8091a64 <_ZN7TwoWire15endTransmissionEv>

08080604 <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 8080604:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080606:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 8080608:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 808060a:	2a01      	cmp	r2, #1
 808060c:	d105      	bne.n	808061a <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 808060e:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 8080610:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 8080612:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8080616:	f7ff bfda 	b.w	80805ce <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 808061a:	b92a      	cbnz	r2, 8080628 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 808061c:	460a      	mov	r2, r1
}
 808061e:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 8080620:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8080624:	f7ff bf7a 	b.w	808051c <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 8080628:	bc10      	pop	{r4}
 808062a:	4770      	bx	lr

0808062c <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 808062c:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 808062e:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 8080630:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 8080632:	b113      	cbz	r3, 808063a <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 8080634:	7a03      	ldrb	r3, [r0, #8]
 8080636:	015b      	lsls	r3, r3, #5
 8080638:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 808063a:	88e2      	ldrh	r2, [r4, #6]
 808063c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8080640:	d005      	beq.n	808064e <_ZN7LSM9DS18initGyroEv+0x22>
 8080642:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8080646:	d104      	bne.n	8080652 <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 8080648:	f043 0318 	orr.w	r3, r3, #24
			break;
 808064c:	e001      	b.n	8080652 <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 808064e:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 8080652:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 8080654:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 8080656:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 808065a:	431a      	orrs	r2, r3
 808065c:	4620      	mov	r0, r4
 808065e:	f7ff ffd1 	bl	8080604 <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 8080662:	2200      	movs	r2, #0
 8080664:	2111      	movs	r1, #17
 8080666:	4620      	mov	r0, r4
 8080668:	f7ff ffcc 	bl	8080604 <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 808066c:	7aa3      	ldrb	r3, [r4, #10]
 808066e:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 8080670:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 8080672:	bf14      	ite	ne
 8080674:	2280      	movne	r2, #128	; 0x80
 8080676:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 8080678:	b12b      	cbz	r3, 8080686 <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 808067a:	7b23      	ldrb	r3, [r4, #12]
 808067c:	f003 030f 	and.w	r3, r3, #15
 8080680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8080684:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 8080686:	2112      	movs	r1, #18
 8080688:	4620      	mov	r0, r4
 808068a:	f7ff ffbb 	bl	8080604 <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 808068e:	7ce3      	ldrb	r3, [r4, #19]
 8080690:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 8080692:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 8080694:	bf0c      	ite	eq
 8080696:	2200      	moveq	r2, #0
 8080698:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 808069a:	b113      	cbz	r3, 80806a2 <_ZN7LSM9DS18initGyroEv+0x76>
 808069c:	f042 0210 	orr.w	r2, r2, #16
 80806a0:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80806a2:	7c63      	ldrb	r3, [r4, #17]
 80806a4:	b10b      	cbz	r3, 80806aa <_ZN7LSM9DS18initGyroEv+0x7e>
 80806a6:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80806aa:	7d23      	ldrb	r3, [r4, #20]
 80806ac:	b10b      	cbz	r3, 80806b2 <_ZN7LSM9DS18initGyroEv+0x86>
 80806ae:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80806b2:	211e      	movs	r1, #30
 80806b4:	4620      	mov	r0, r4
 80806b6:	f7ff ffa5 	bl	8080604 <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80806ba:	7b63      	ldrb	r3, [r4, #13]
 80806bc:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80806be:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80806c0:	bf0c      	ite	eq
 80806c2:	2200      	moveq	r2, #0
 80806c4:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80806c6:	b113      	cbz	r3, 80806ce <_ZN7LSM9DS18initGyroEv+0xa2>
 80806c8:	f042 0210 	orr.w	r2, r2, #16
 80806cc:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80806ce:	7be3      	ldrb	r3, [r4, #15]
 80806d0:	b10b      	cbz	r3, 80806d6 <_ZN7LSM9DS18initGyroEv+0xaa>
 80806d2:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80806d6:	4620      	mov	r0, r4
}
 80806d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80806dc:	2113      	movs	r1, #19
 80806de:	f7ff bf91 	b.w	8080604 <_ZN7LSM9DS111xgWriteByteEhh>

080806e2 <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80806e2:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80806e4:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80806e6:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80806e8:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80806ea:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80806ec:	bf0c      	ite	eq
 80806ee:	2200      	moveq	r2, #0
 80806f0:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80806f2:	b113      	cbz	r3, 80806fa <_ZN7LSM9DS19initAccelEv+0x18>
 80806f4:	f042 0210 	orr.w	r2, r2, #16
 80806f8:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80806fa:	7e63      	ldrb	r3, [r4, #25]
 80806fc:	b10b      	cbz	r3, 8080702 <_ZN7LSM9DS19initAccelEv+0x20>
 80806fe:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 8080702:	211f      	movs	r1, #31
 8080704:	4620      	mov	r0, r4
 8080706:	f7ff ff7d 	bl	8080604 <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 808070a:	7da2      	ldrb	r2, [r4, #22]
 808070c:	b112      	cbz	r2, 8080714 <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 808070e:	7e22      	ldrb	r2, [r4, #24]
 8080710:	0152      	lsls	r2, r2, #5
 8080712:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 8080714:	7de3      	ldrb	r3, [r4, #23]
 8080716:	2b08      	cmp	r3, #8
 8080718:	d006      	beq.n	8080728 <_ZN7LSM9DS19initAccelEv+0x46>
 808071a:	2b10      	cmp	r3, #16
 808071c:	d007      	beq.n	808072e <_ZN7LSM9DS19initAccelEv+0x4c>
 808071e:	2b04      	cmp	r3, #4
 8080720:	d107      	bne.n	8080732 <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 8080722:	f042 0210 	orr.w	r2, r2, #16
			break;
 8080726:	e004      	b.n	8080732 <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 8080728:	f042 0218 	orr.w	r2, r2, #24
			break;
 808072c:	e001      	b.n	8080732 <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 808072e:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 8080732:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 8080736:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 8080738:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 808073a:	bfa2      	ittt	ge
 808073c:	f003 0303 	andge.w	r3, r3, #3
 8080740:	431a      	orrge	r2, r3
 8080742:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 8080746:	4620      	mov	r0, r4
 8080748:	f7ff ff5c 	bl	8080604 <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 808074c:	7f62      	ldrb	r2, [r4, #29]
 808074e:	b12a      	cbz	r2, 808075c <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 8080750:	7fa2      	ldrb	r2, [r4, #30]
 8080752:	0152      	lsls	r2, r2, #5
 8080754:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8080758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 808075c:	4620      	mov	r0, r4
}
 808075e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 8080762:	2121      	movs	r1, #33	; 0x21
 8080764:	f7ff bf4e 	b.w	8080604 <_ZN7LSM9DS111xgWriteByteEhh>

08080768 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 8080768:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 808076a:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 808076c:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 808076e:	2a01      	cmp	r2, #1
 8080770:	d105      	bne.n	808077e <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 8080772:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 8080774:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 8080776:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 808077a:	f7ff bf28 	b.w	80805ce <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 808077e:	b92a      	cbnz	r2, 808078c <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 8080780:	460a      	mov	r2, r1
}
 8080782:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 8080784:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8080788:	f7ff bec8 	b.w	808051c <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 808078c:	bc10      	pop	{r4}
 808078e:	4770      	bx	lr

08080790 <_ZN7LSM9DS17initMagEv>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 8080790:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 8080792:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 8080796:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 8080798:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 808079a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 808079e:	bf08      	it	eq
 80807a0:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80807a2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80807a6:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80807aa:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80807ae:	bf18      	it	ne
 80807b0:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80807b2:	009b      	lsls	r3, r3, #2
 80807b4:	f003 031c 	and.w	r3, r3, #28
 80807b8:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80807ba:	431a      	orrs	r2, r3
 80807bc:	2120      	movs	r1, #32
 80807be:	f7ff ffd3 	bl	8080768 <_ZN7LSM9DS110mWriteByteEhh>
 80807c2:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80807c6:	4620      	mov	r0, r4
 80807c8:	3b08      	subs	r3, #8
 80807ca:	b2db      	uxtb	r3, r3
 80807cc:	2b08      	cmp	r3, #8
 80807ce:	bf96      	itet	ls
 80807d0:	4a12      	ldrls	r2, [pc, #72]	; (808081c <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80807d2:	2200      	movhi	r2, #0
 80807d4:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80807d6:	2121      	movs	r1, #33	; 0x21
 80807d8:	f7ff ffc6 	bl	8080768 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80807dc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80807e0:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80807e2:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80807e4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80807e8:	bf0c      	ite	eq
 80807ea:	2200      	moveq	r2, #0
 80807ec:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80807ee:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80807f2:	431a      	orrs	r2, r3
 80807f4:	2122      	movs	r1, #34	; 0x22
 80807f6:	f7ff ffb7 	bl	8080768 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80807fa:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80807fe:	4620      	mov	r0, r4
 8080800:	0092      	lsls	r2, r2, #2
 8080802:	f002 020c 	and.w	r2, r2, #12
 8080806:	2123      	movs	r1, #35	; 0x23
 8080808:	f7ff ffae 	bl	8080768 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 808080c:	4620      	mov	r0, r4
}
 808080e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 8080812:	2200      	movs	r2, #0
 8080814:	2124      	movs	r1, #36	; 0x24
 8080816:	f7ff bfa7 	b.w	8080768 <_ZN7LSM9DS110mWriteByteEhh>
 808081a:	bf00      	nop
 808081c:	08093252 	.word	0x08093252

08080820 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 8080820:	b538      	push	{r3, r4, r5, lr}
 8080822:	460c      	mov	r4, r1
 8080824:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 8080826:	f011 f9b9 	bl	8091b9c <_Z19__fetch_global_Wirev>
 808082a:	4621      	mov	r1, r4
 808082c:	f011 f912 	bl	8091a54 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 8080830:	f011 f9b4 	bl	8091b9c <_Z19__fetch_global_Wirev>
 8080834:	6803      	ldr	r3, [r0, #0]
 8080836:	4629      	mov	r1, r5
 8080838:	689b      	ldr	r3, [r3, #8]
 808083a:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 808083c:	f011 f9ae 	bl	8091b9c <_Z19__fetch_global_Wirev>
 8080840:	2100      	movs	r1, #0
 8080842:	f011 f90b 	bl	8091a5c <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 8080846:	f011 f9a9 	bl	8091b9c <_Z19__fetch_global_Wirev>
 808084a:	2201      	movs	r2, #1
 808084c:	4621      	mov	r1, r4
 808084e:	f011 f8fe 	bl	8091a4e <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 8080852:	f011 f9a3 	bl	8091b9c <_Z19__fetch_global_Wirev>
 8080856:	6803      	ldr	r3, [r0, #0]
 8080858:	695b      	ldr	r3, [r3, #20]
 808085a:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 808085c:	b2c0      	uxtb	r0, r0
 808085e:	bd38      	pop	{r3, r4, r5, pc}

08080860 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 8080860:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080862:	7801      	ldrb	r1, [r0, #0]
 8080864:	2901      	cmp	r1, #1
 8080866:	d103      	bne.n	8080870 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 8080868:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 808086c:	f7ff bfd8 	b.w	8080820 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8080870:	b919      	cbnz	r1, 808087a <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 8080872:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8080876:	f7ff be97 	b.w	80805a8 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 808087a:	2000      	movs	r0, #0
 808087c:	4770      	bx	lr

0808087e <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 808087e:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080880:	7801      	ldrb	r1, [r0, #0]
 8080882:	2901      	cmp	r1, #1
 8080884:	d103      	bne.n	808088e <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 8080886:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 808088a:	f7ff bfc9 	b.w	8080820 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 808088e:	b919      	cbnz	r1, 8080898 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 8080890:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8080894:	f7ff be88 	b.w	80805a8 <_ZN7LSM9DS111SPIreadByteEhh>
}
 8080898:	4770      	bx	lr

0808089a <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 808089a:	b538      	push	{r3, r4, r5, lr}
 808089c:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 808089e:	7843      	ldrb	r3, [r0, #1]
 80808a0:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80808a4:	7883      	ldrb	r3, [r0, #2]
 80808a6:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80808aa:	f7ff fde9 	bl	8080480 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80808ae:	f7ff fdb2 	bl	8080416 <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80808b2:	4620      	mov	r0, r4
 80808b4:	f7ff fdc6 	bl	8080444 <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80808b8:	4620      	mov	r0, r4
 80808ba:	f7ff fdb7 	bl	808042c <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80808be:	7823      	ldrb	r3, [r4, #0]
 80808c0:	2b01      	cmp	r3, #1
 80808c2:	d103      	bne.n	80808cc <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80808c4:	4620      	mov	r0, r4
 80808c6:	f7ff fe7b 	bl	80805c0 <_ZN7LSM9DS17initI2CEv>
 80808ca:	e003      	b.n	80808d4 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80808cc:	b913      	cbnz	r3, 80808d4 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80808ce:	4620      	mov	r0, r4
 80808d0:	f7ff fdfa 	bl	80804c8 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80808d4:	210f      	movs	r1, #15
 80808d6:	4620      	mov	r0, r4
 80808d8:	f7ff ffd1 	bl	808087e <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80808dc:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80808de:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80808e0:	4620      	mov	r0, r4
 80808e2:	f7ff ffbd 	bl	8080860 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80808e6:	f646 033d 	movw	r3, #26685	; 0x683d
 80808ea:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80808ee:	b205      	sxth	r5, r0
 80808f0:	429d      	cmp	r5, r3
 80808f2:	d10a      	bne.n	808090a <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80808f4:	4620      	mov	r0, r4
 80808f6:	f7ff fe99 	bl	808062c <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80808fa:	4620      	mov	r0, r4
 80808fc:	f7ff fef1 	bl	80806e2 <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 8080900:	4620      	mov	r0, r4
 8080902:	f7ff ff45 	bl	8080790 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 8080906:	4628      	mov	r0, r5
 8080908:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 808090a:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 808090c:	bd38      	pop	{r3, r4, r5, pc}

0808090e <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 808090e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080912:	4690      	mov	r8, r2
 8080914:	460c      	mov	r4, r1
 8080916:	461d      	mov	r5, r3
 8080918:	f89d 6018 	ldrb.w	r6, [sp, #24]
 808091c:	f00f ff4a 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
 8080920:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 8080922:	f011 f93b 	bl	8091b9c <_Z19__fetch_global_Wirev>
 8080926:	4621      	mov	r1, r4
 8080928:	f011 f894 	bl	8091a54 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 808092c:	f011 f936 	bl	8091b9c <_Z19__fetch_global_Wirev>
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8080930:	6803      	ldr	r3, [r0, #0]
 8080932:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 8080936:	689b      	ldr	r3, [r3, #8]
 8080938:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 808093a:	f011 f92f 	bl	8091b9c <_Z19__fetch_global_Wirev>
 808093e:	2100      	movs	r1, #0
 8080940:	f011 f88c 	bl	8091a5c <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 8080944:	f011 f92a 	bl	8091b9c <_Z19__fetch_global_Wirev>
 8080948:	4621      	mov	r1, r4
 808094a:	4632      	mov	r2, r6
 808094c:	f011 f87f 	bl	8091a4e <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 8080950:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 8080952:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 8080956:	42b4      	cmp	r4, r6
 8080958:	da1a      	bge.n	8080990 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 808095a:	f011 f91f 	bl	8091b9c <_Z19__fetch_global_Wirev>
 808095e:	6803      	ldr	r3, [r0, #0]
 8080960:	691b      	ldr	r3, [r3, #16]
 8080962:	4798      	blx	r3
 8080964:	b140      	cbz	r0, 8080978 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 8080966:	f011 f919 	bl	8091b9c <_Z19__fetch_global_Wirev>
 808096a:	6803      	ldr	r3, [r0, #0]
 808096c:	f104 0801 	add.w	r8, r4, #1
 8080970:	695b      	ldr	r3, [r3, #20]
 8080972:	4798      	blx	r3
 8080974:	5528      	strb	r0, [r5, r4]
 8080976:	4644      	mov	r4, r8
 8080978:	f00f ff1c 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 808097c:	42b8      	cmp	r0, r7
 808097e:	d9ea      	bls.n	8080956 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 8080980:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 8080982:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 8080984:	1b62      	subs	r2, r4, r5
 8080986:	4296      	cmp	r6, r2
 8080988:	dd05      	ble.n	8080996 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 808098a:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 808098e:	e7f9      	b.n	8080984 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 8080990:	2001      	movs	r0, #1
 8080992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 8080996:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 8080998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808099c <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 808099c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808099e:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80809a0:	7801      	ldrb	r1, [r0, #0]
 80809a2:	2901      	cmp	r1, #1
 80809a4:	d107      	bne.n	80809b6 <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80809a6:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80809aa:	9300      	str	r3, [sp, #0]
 80809ac:	4613      	mov	r3, r2
 80809ae:	462a      	mov	r2, r5
 80809b0:	f7ff ffad 	bl	808090e <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80809b4:	e007      	b.n	80809c6 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80809b6:	b931      	cbnz	r1, 80809c6 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80809b8:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80809bc:	9300      	str	r3, [sp, #0]
 80809be:	4613      	mov	r3, r2
 80809c0:	462a      	mov	r2, r5
 80809c2:	f7ff fdc5 	bl	8080550 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80809c6:	b003      	add	sp, #12
 80809c8:	bd30      	pop	{r4, r5, pc}

080809ca <_ZN7LSM9DS18readTempEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readTemp()
{
 80809ca:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[2]; // We'll read two bytes from the temperature sensor into temp	
	uint8_t status = xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
 80809cc:	2302      	movs	r3, #2
 80809ce:	aa01      	add	r2, sp, #4
 80809d0:	2115      	movs	r1, #21
	else
		return 0;
}

uint8_t LSM9DS1::readTemp()
{
 80809d2:	4604      	mov	r4, r0
	uint8_t temp[2]; // We'll read two bytes from the temperature sensor into temp	
	uint8_t status = xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
 80809d4:	f7ff ffe2 	bl	808099c <_ZN7LSM9DS111xgReadBytesEhPhh>
	if (status)
 80809d8:	b130      	cbz	r0, 80809e8 <_ZN7LSM9DS18readTempEv+0x1e>
		temperature = ((int16_t)temp[1] << 8) | temp[0];
 80809da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80809de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80809e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80809e6:	8763      	strh	r3, [r4, #58]	; 0x3a
	
	return status;
}
 80809e8:	b002      	add	sp, #8
 80809ea:	bd10      	pop	{r4, pc}

080809ec <_GLOBAL__sub_I_magSensitivity>:
 80809ec:	f00f be62 	b.w	80906b4 <HAL_Pin_Map>

080809f0 <_GLOBAL__sub_I__ZN7istream3getEv>:
 80809f0:	f00f be60 	b.w	80906b4 <HAL_Pin_Map>

080809f4 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80809f4:	b510      	push	{r4, lr}
 80809f6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 80809f8:	3028      	adds	r0, #40	; 0x28
 80809fa:	f001 f97f 	bl	8081cfc <_ZN8FatCache4syncEv>
 80809fe:	b128      	cbz	r0, 8080a0c <_ZN9FatVolume9cacheSyncEv+0x18>
 8080a00:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 8080a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 8080a08:	f001 b978 	b.w	8081cfc <_ZN8FatCache4syncEv>
  }
 8080a0c:	bd10      	pop	{r4, pc}

08080a0e <_ZN7FatFile11lfnChecksumEPh>:
 * <http://www.gnu.org/licenses/>.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 8080a0e:	1e41      	subs	r1, r0, #1
 8080a10:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 8080a14:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8080a16:	0843      	lsrs	r3, r0, #1
 8080a18:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8080a1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8080a20:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8080a22:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8080a24:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8080a28:	d1f5      	bne.n	8080a16 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8080a2a:	4770      	bx	lr

08080a2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8080a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8080a30:	7803      	ldrb	r3, [r0, #0]
 8080a32:	1c44      	adds	r4, r0, #1
 8080a34:	2b20      	cmp	r3, #32
 8080a36:	d101      	bne.n	8080a3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8080a38:	4620      	mov	r0, r4
 8080a3a:	e7f9      	b.n	8080a30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8080a3c:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080a3e:	4f70      	ldr	r7, [pc, #448]	; (8080c00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 8080a40:	6088      	str	r0, [r1, #8]
 8080a42:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 8080a44:	462e      	mov	r6, r5
 8080a46:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8080a4a:	b30b      	cbz	r3, 8080a90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8080a4c:	2b2f      	cmp	r3, #47	; 0x2f
 8080a4e:	d101      	bne.n	8080a54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8080a50:	1903      	adds	r3, r0, r4
 8080a52:	e017      	b.n	8080a84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080a54:	2b5c      	cmp	r3, #92	; 0x5c
 8080a56:	d102      	bne.n	8080a5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8080a58:	2000      	movs	r0, #0
 8080a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080a5e:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 8080a62:	b2e4      	uxtb	r4, r4
 8080a64:	2c1d      	cmp	r4, #29
 8080a66:	d803      	bhi.n	8080a70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8080a68:	fa27 f404 	lsr.w	r4, r7, r4
 8080a6c:	07e4      	lsls	r4, r4, #31
 8080a6e:	d4f3      	bmi.n	8080a58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8080a70:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 8080a74:	2c3c      	cmp	r4, #60	; 0x3c
 8080a76:	d0ef      	beq.n	8080a58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 8080a78:	3b20      	subs	r3, #32
 8080a7a:	2b5e      	cmp	r3, #94	; 0x5e
 8080a7c:	d9e1      	bls.n	8080a42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 8080a7e:	e7eb      	b.n	8080a58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 8080a80:	2d2f      	cmp	r5, #47	; 0x2f
 8080a82:	d105      	bne.n	8080a90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8080a84:	461e      	mov	r6, r3
 8080a86:	f813 5b01 	ldrb.w	r5, [r3], #1
 8080a8a:	2d20      	cmp	r5, #32
 8080a8c:	d1f8      	bne.n	8080a80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 8080a8e:	e7f9      	b.n	8080a84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 8080a90:	6016      	str	r6, [r2, #0]
 8080a92:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 8080a94:	4298      	cmp	r0, r3
 8080a96:	ebc0 0803 	rsb	r8, r0, r3
 8080a9a:	d009      	beq.n	8080ab0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 8080a9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8080aa0:	2a2e      	cmp	r2, #46	; 0x2e
 8080aa2:	d0f7      	beq.n	8080a94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 8080aa4:	2a20      	cmp	r2, #32
 8080aa6:	d0f5      	beq.n	8080a94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 8080aa8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8080aac:	dcd4      	bgt.n	8080a58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 8080aae:	e001      	b.n	8080ab4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 8080ab0:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 8080ab4:	f8c1 8004 	str.w	r8, [r1, #4]
 8080ab8:	f101 030c 	add.w	r3, r1, #12
 8080abc:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 8080ac0:	2420      	movs	r4, #32
 8080ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 8080ac6:	4293      	cmp	r3, r2
 8080ac8:	d1fb      	bne.n	8080ac2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8080aca:	4603      	mov	r3, r0
 8080acc:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8080ace:	f813 4b01 	ldrb.w	r4, [r3], #1
 8080ad2:	2c2e      	cmp	r4, #46	; 0x2e
 8080ad4:	d0fa      	beq.n	8080acc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 8080ad6:	2c20      	cmp	r4, #32
 8080ad8:	d0f8      	beq.n	8080acc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8080ada:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8080ade:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8080ae2:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8080ae4:	1c73      	adds	r3, r6, #1
 8080ae6:	d107      	bne.n	8080af8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8080ae8:	2700      	movs	r7, #0
 8080aea:	f04f 0e07 	mov.w	lr, #7
 8080aee:	463d      	mov	r5, r7
 8080af0:	46ba      	mov	sl, r7
 8080af2:	f04f 0908 	mov.w	r9, #8
 8080af6:	e009      	b.n	8080b0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8080af8:	5d83      	ldrb	r3, [r0, r6]
 8080afa:	2b2e      	cmp	r3, #46	; 0x2e
 8080afc:	d0f4      	beq.n	8080ae8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 8080afe:	3e01      	subs	r6, #1
 8080b00:	e7f0      	b.n	8080ae4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 8080b02:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 8080b04:	2b20      	cmp	r3, #32
 8080b06:	d104      	bne.n	8080b12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8080b08:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8080b0a:	3201      	adds	r2, #1
 8080b0c:	4542      	cmp	r2, r8
 8080b0e:	dbf8      	blt.n	8080b02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 8080b10:	e04b      	b.n	8080baa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 8080b12:	2b2e      	cmp	r3, #46	; 0x2e
 8080b14:	d102      	bne.n	8080b1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8080b16:	42b2      	cmp	r2, r6
 8080b18:	d1f6      	bne.n	8080b08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8080b1a:	e003      	b.n	8080b24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8080b1c:	2b22      	cmp	r3, #34	; 0x22
 8080b1e:	d017      	beq.n	8080b50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 8080b20:	2b7c      	cmp	r3, #124	; 0x7c
 8080b22:	d015      	beq.n	8080b50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8080b24:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8080b28:	f1bc 0f05 	cmp.w	ip, #5
 8080b2c:	d801      	bhi.n	8080b32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 8080b2e:	2b2d      	cmp	r3, #45	; 0x2d
 8080b30:	d10e      	bne.n	8080b50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 8080b32:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8080b36:	f1bc 0f05 	cmp.w	ip, #5
 8080b3a:	d909      	bls.n	8080b50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8080b3c:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8080b40:	f1bc 0f02 	cmp.w	ip, #2
 8080b44:	d904      	bls.n	8080b50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 8080b46:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8080b4a:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8080b4e:	d902      	bls.n	8080b56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 8080b50:	42b2      	cmp	r2, r6
 8080b52:	d10e      	bne.n	8080b72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 8080b54:	e049      	b.n	8080bea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8080b56:	42b2      	cmp	r2, r6
 8080b58:	d047      	beq.n	8080bea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 8080b5a:	4575      	cmp	r5, lr
 8080b5c:	d821      	bhi.n	8080ba2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 8080b5e:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8080b62:	f1bc 0f19 	cmp.w	ip, #25
 8080b66:	d808      	bhi.n	8080b7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 8080b68:	3b20      	subs	r3, #32
 8080b6a:	b2db      	uxtb	r3, r3
        lc |= bit;
 8080b6c:	ea49 0707 	orr.w	r7, r9, r7
 8080b70:	e00a      	b.n	8080b88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8080b72:	4575      	cmp	r5, lr
 8080b74:	d815      	bhi.n	8080ba2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 8080b76:	2400      	movs	r4, #0
      c = '_';
 8080b78:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 8080b7a:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8080b7e:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8080b82:	bf98      	it	ls
 8080b84:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 8080b88:	f105 0c01 	add.w	ip, r5, #1
 8080b8c:	fa5f fc8c 	uxtb.w	ip, ip
 8080b90:	440d      	add	r5, r1
      if (i < 7) {
 8080b92:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 8080b96:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 8080b98:	d801      	bhi.n	8080b9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 8080b9a:	f881 c00c 	strb.w	ip, [r1, #12]
 8080b9e:	4665      	mov	r5, ip
 8080ba0:	e7b3      	b.n	8080b0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8080ba2:	f1be 0f0a 	cmp.w	lr, #10
 8080ba6:	d117      	bne.n	8080bd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8080ba8:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 8080baa:	7b4b      	ldrb	r3, [r1, #13]
 8080bac:	2b20      	cmp	r3, #32
 8080bae:	f43f af53 	beq.w	8080a58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 8080bb2:	b13c      	cbz	r4, 8080bc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8080bb4:	ea1a 0f07 	tst.w	sl, r7
 8080bb8:	bf18      	it	ne
 8080bba:	2702      	movne	r7, #2
 8080bbc:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 8080bbe:	2001      	movs	r0, #1
 8080bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8080bc4:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8080bc6:	2001      	movs	r0, #1
 8080bc8:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8080bca:	4419      	add	r1, r3
 8080bcc:	237e      	movs	r3, #126	; 0x7e
 8080bce:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8080bd0:	2331      	movs	r3, #49	; 0x31
 8080bd2:	738b      	strb	r3, [r1, #14]
 8080bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8080bd8:	42b2      	cmp	r2, r6
 8080bda:	dce5      	bgt.n	8080ba8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8080bdc:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8080bde:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8080be2:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8080be4:	f04f 0910 	mov.w	r9, #16
 8080be8:	e78e      	b.n	8080b08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8080bea:	f1be 0f0a 	cmp.w	lr, #10
 8080bee:	d0db      	beq.n	8080ba8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8080bf0:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8080bf2:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8080bf6:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8080bf8:	f04f 0910 	mov.w	r9, #16
 8080bfc:	e785      	b.n	8080b0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8080bfe:	bf00      	nop
 8080c00:	31000101 	.word	0x31000101

08080c04 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8080c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080c08:	4606      	mov	r6, r0
 8080c0a:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8080c0c:	f891 900c 	ldrb.w	r9, [r1, #12]
 8080c10:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8080c12:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8080c14:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8080c18:	6869      	ldr	r1, [r5, #4]
 8080c1a:	68aa      	ldr	r2, [r5, #8]
 8080c1c:	1863      	adds	r3, r4, r1
 8080c1e:	b29b      	uxth	r3, r3
 8080c20:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 8080c22:	4291      	cmp	r1, r2
 8080c24:	d006      	beq.n	8080c34 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8080c26:	f812 0b01 	ldrb.w	r0, [r2], #1
 8080c2a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8080c2e:	4043      	eors	r3, r0
 8080c30:	b29b      	uxth	r3, r3
 8080c32:	e7f6      	b.n	8080c22 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8080c34:	f1b9 0f03 	cmp.w	r9, #3
 8080c38:	bf28      	it	cs
 8080c3a:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080c3e:	f109 0204 	add.w	r2, r9, #4
 8080c42:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8080c44:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080c48:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080c4a:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080c4c:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080c4e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080c50:	bf94      	ite	ls
 8080c52:	3130      	addls	r1, #48	; 0x30
 8080c54:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080c56:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080c58:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8080c5a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080c5e:	d3f1      	bcc.n	8080c44 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8080c60:	eb05 0309 	add.w	r3, r5, r9
 8080c64:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 8080c66:	2100      	movs	r1, #0
 8080c68:	4630      	mov	r0, r6
 8080c6a:	f000 fe38 	bl	80818de <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 8080c6e:	2101      	movs	r1, #1
 8080c70:	4630      	mov	r0, r6
 8080c72:	f000 fe17 	bl	80818a4 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8080c76:	4601      	mov	r1, r0
 8080c78:	b928      	cbnz	r0, 8080c86 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8080c7a:	7870      	ldrb	r0, [r6, #1]
 8080c7c:	fab0 f080 	clz	r0, r0
 8080c80:	0940      	lsrs	r0, r0, #5
 8080c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8080c86:	7803      	ldrb	r3, [r0, #0]
 8080c88:	b14b      	cbz	r3, 8080c9e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8080c8a:	7ac3      	ldrb	r3, [r0, #11]
 8080c8c:	071b      	lsls	r3, r3, #28
 8080c8e:	d4ee      	bmi.n	8080c6e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8080c90:	220b      	movs	r2, #11
 8080c92:	4640      	mov	r0, r8
 8080c94:	f012 f9f4 	bl	8093080 <memcmp>
 8080c98:	2800      	cmp	r0, #0
 8080c9a:	d1e8      	bne.n	8080c6e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8080c9c:	e002      	b.n	8080ca4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 8080c9e:	2001      	movs	r0, #1
 8080ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8080ca4:	3401      	adds	r4, #1
 8080ca6:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8080ca8:	2c64      	cmp	r4, #100	; 0x64
 8080caa:	d1b5      	bne.n	8080c18 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8080cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08080cb0 <_ZN7FatFile4openEPS_P7fname_th>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8080cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080cb4:	b089      	sub	sp, #36	; 0x24
 8080cb6:	9303      	str	r3, [sp, #12]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080cb8:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8080cba:	9005      	str	r0, [sp, #20]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080cbc:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8080cc0:	460e      	mov	r6, r1
 8080cc2:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080cc4:	d101      	bne.n	8080cca <_ZN7FatFile4openEPS_P7fname_th+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8080cc6:	2000      	movs	r0, #0
 8080cc8:	e199      	b.n	8080ffe <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080cca:	9b05      	ldr	r3, [sp, #20]
 8080ccc:	781b      	ldrb	r3, [r3, #0]
 8080cce:	2b00      	cmp	r3, #0
 8080cd0:	d1f9      	bne.n	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8080cd2:	7813      	ldrb	r3, [r2, #0]
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8080cd4:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8080cd8:	079b      	lsls	r3, r3, #30
 8080cda:	f000 8186 	beq.w	8080fea <_ZN7FatFile4openEPS_P7fname_th+0x33a>
 8080cde:	f10b 030c 	add.w	r3, fp, #12
 8080ce2:	270d      	movs	r7, #13
 8080ce4:	fbb3 f7f7 	udiv	r7, r3, r7
 8080ce8:	3701      	adds	r7, #1
 8080cea:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8080cec:	f04f 0800 	mov.w	r8, #0
 8080cf0:	2100      	movs	r1, #0
 8080cf2:	4630      	mov	r0, r6
 8080cf4:	f000 fdf3 	bl	80818de <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8080cf8:	4645      	mov	r5, r8
  uint8_t ord = 0;
 8080cfa:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8080cfc:	4644      	mov	r4, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8080cfe:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 8080d02:	f8cd 8008 	str.w	r8, [sp, #8]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
 8080d06:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8080d0a:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8080d0c:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 8080d0e:	2101      	movs	r1, #1
 8080d10:	4630      	mov	r0, r6
 8080d12:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8080d14:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8080d18:	f000 fdc4 	bl	80818a4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8080d1c:	9b07      	ldr	r3, [sp, #28]
 8080d1e:	b920      	cbnz	r0, 8080d2a <_ZN7FatFile4openEPS_P7fname_th+0x7a>
      if (dirFile->getError()) {
 8080d20:	7873      	ldrb	r3, [r6, #1]
 8080d22:	2b00      	cmp	r3, #0
 8080d24:	f000 808e 	beq.w	8080e44 <_ZN7FatFile4openEPS_P7fname_th+0x194>
 8080d28:	e7cd      	b.n	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8080d2a:	7802      	ldrb	r2, [r0, #0]
 8080d2c:	2ae5      	cmp	r2, #229	; 0xe5
 8080d2e:	d000      	beq.n	8080d32 <_ZN7FatFile4openEPS_P7fname_th+0x82>
 8080d30:	b942      	cbnz	r2, 8080d44 <_ZN7FatFile4openEPS_P7fname_th+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8080d32:	2d00      	cmp	r5, #0
 8080d34:	bf08      	it	eq
 8080d36:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8080d38:	42bd      	cmp	r5, r7
        freeFound++;
 8080d3a:	bf3c      	itt	cc
 8080d3c:	3501      	addcc	r5, #1
 8080d3e:	b2ed      	uxtbcc	r5, r5
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8080d40:	b922      	cbnz	r2, 8080d4c <_ZN7FatFile4openEPS_P7fname_th+0x9c>
 8080d42:	e07f      	b.n	8080e44 <_ZN7FatFile4openEPS_P7fname_th+0x194>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8080d44:	42bd      	cmp	r5, r7
 8080d46:	bf38      	it	cc
 8080d48:	2500      	movcc	r5, #0
 8080d4a:	e003      	b.n	8080d54 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8080d4c:	2ae5      	cmp	r2, #229	; 0xe5
 8080d4e:	d101      	bne.n	8080d54 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 8080d50:	2400      	movs	r4, #0
 8080d52:	e7db      	b.n	8080d0c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8080d54:	2a2e      	cmp	r2, #46	; 0x2e
 8080d56:	d0fb      	beq.n	8080d50 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080d58:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8080d5a:	290f      	cmp	r1, #15
 8080d5c:	d150      	bne.n	8080e00 <_ZN7FatFile4openEPS_P7fname_th+0x150>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 8080d5e:	b93c      	cbnz	r4, 8080d70 <_ZN7FatFile4openEPS_P7fname_th+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8080d60:	0651      	lsls	r1, r2, #25
 8080d62:	d5d3      	bpl.n	8080d0c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 8080d64:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8080d66:	f002 041f 	and.w	r4, r2, #31
        chksum = ldir->chksum;
 8080d6a:	9302      	str	r3, [sp, #8]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8080d6c:	4623      	mov	r3, r4
 8080d6e:	e007      	b.n	8080d80 <_ZN7FatFile4openEPS_P7fname_th+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8080d70:	3b01      	subs	r3, #1
 8080d72:	b2db      	uxtb	r3, r3
 8080d74:	429a      	cmp	r2, r3
 8080d76:	d1eb      	bne.n	8080d50 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080d78:	7b42      	ldrb	r2, [r0, #13]
 8080d7a:	9902      	ldr	r1, [sp, #8]
 8080d7c:	4291      	cmp	r1, r2
 8080d7e:	d1e7      	bne.n	8080d50 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8080d80:	1e5a      	subs	r2, r3, #1
 8080d82:	f04f 0c0d 	mov.w	ip, #13
 8080d86:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8080d8a:	45e3      	cmp	fp, ip
 8080d8c:	d9e0      	bls.n	8080d50 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080d8e:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8080d92:	f1be 0f04 	cmp.w	lr, #4
 8080d96:	fa5f f28e 	uxtb.w	r2, lr
 8080d9a:	d804      	bhi.n	8080da6 <_ZN7FatFile4openEPS_P7fname_th+0xf6>
    return ldir->name1[i];
 8080d9c:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8080da0:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8080da4:	e00c      	b.n	8080dc0 <_ZN7FatFile4openEPS_P7fname_th+0x110>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8080da6:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080da8:	bf95      	itete	ls
 8080daa:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080dae:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080db2:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080db6:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080dba:	bf94      	ite	ls
 8080dbc:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080dbe:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 8080dc0:	45e3      	cmp	fp, ip
 8080dc2:	d103      	bne.n	8080dcc <_ZN7FatFile4openEPS_P7fname_th+0x11c>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8080dc4:	2a00      	cmp	r2, #0
 8080dc6:	bf18      	it	ne
 8080dc8:	2400      	movne	r4, #0
 8080dca:	e79f      	b.n	8080d0c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080dcc:	2aff      	cmp	r2, #255	; 0xff
 8080dce:	d8bf      	bhi.n	8080d50 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080dd0:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080dd2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8080dd6:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080dd8:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080ddc:	bf98      	it	ls
 8080dde:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080de0:	f811 100c 	ldrb.w	r1, [r1, ip]
 8080de4:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080de8:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8080dec:	bf98      	it	ls
 8080dee:	b2d2      	uxtbls	r2, r2
 8080df0:	f1bc 0f19 	cmp.w	ip, #25
 8080df4:	bf9c      	itt	ls
 8080df6:	3120      	addls	r1, #32
 8080df8:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080dfa:	4291      	cmp	r1, r2
 8080dfc:	d1a8      	bne.n	8080d50 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080dfe:	e0f6      	b.n	8080fee <_ZN7FatFile4openEPS_P7fname_th+0x33e>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8080e00:	070a      	lsls	r2, r1, #28
 8080e02:	d4a5      	bmi.n	8080d50 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
      if (lfnOrd) {
 8080e04:	b14c      	cbz	r4, 8080e1a <_ZN7FatFile4openEPS_P7fname_th+0x16a>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8080e06:	2b01      	cmp	r3, #1
 8080e08:	f47f af5d 	bne.w	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8080e0c:	f7ff fdff 	bl	8080a0e <_ZN7FatFile11lfnChecksumEPh>
 8080e10:	9b02      	ldr	r3, [sp, #8]
 8080e12:	4283      	cmp	r3, r0
 8080e14:	f47f af57 	bne.w	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8080e18:	e00f      	b.n	8080e3a <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8080e1a:	220b      	movs	r2, #11
 8080e1c:	9906      	ldr	r1, [sp, #24]
 8080e1e:	9307      	str	r3, [sp, #28]
 8080e20:	f012 f92e 	bl	8093080 <memcmp>
 8080e24:	9b07      	ldr	r3, [sp, #28]
 8080e26:	2800      	cmp	r0, #0
 8080e28:	f47f af70 	bne.w	8080d0c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8080e2c:	f899 2000 	ldrb.w	r2, [r9]
 8080e30:	07d1      	lsls	r1, r2, #31
 8080e32:	d502      	bpl.n	8080e3a <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        fnameFound = true;
 8080e34:	2201      	movs	r2, #1
 8080e36:	9204      	str	r2, [sp, #16]
 8080e38:	e768      	b.n	8080d0c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8080e3a:	9b03      	ldr	r3, [sp, #12]
 8080e3c:	061a      	lsls	r2, r3, #24
 8080e3e:	f140 80cc 	bpl.w	8080fda <_ZN7FatFile4openEPS_P7fname_th+0x32a>
 8080e42:	e740      	b.n	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8080e44:	9b03      	ldr	r3, [sp, #12]
 8080e46:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8080e4a:	2b42      	cmp	r3, #66	; 0x42
 8080e4c:	f47f af3b 	bne.w	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 8080e50:	2d00      	cmp	r5, #0
 8080e52:	bf08      	it	eq
 8080e54:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8080e56:	42bd      	cmp	r5, r7
 8080e58:	d302      	bcc.n	8080e60 <_ZN7FatFile4openEPS_P7fname_th+0x1b0>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8080e5a:	9b04      	ldr	r3, [sp, #16]
 8080e5c:	b9cb      	cbnz	r3, 8080e92 <_ZN7FatFile4openEPS_P7fname_th+0x1e2>
 8080e5e:	e01f      	b.n	8080ea0 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8080e60:	2100      	movs	r1, #0
 8080e62:	4630      	mov	r0, r6
 8080e64:	f000 fd1e 	bl	80818a4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8080e68:	b910      	cbnz	r0, 8080e70 <_ZN7FatFile4openEPS_P7fname_th+0x1c0>
      if (dirFile->getError()) {
 8080e6a:	7873      	ldrb	r3, [r6, #1]
 8080e6c:	b15b      	cbz	r3, 8080e86 <_ZN7FatFile4openEPS_P7fname_th+0x1d6>
 8080e6e:	e72a      	b.n	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8080e70:	3501      	adds	r5, #1
 8080e72:	b2ed      	uxtb	r5, r5
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8080e74:	e7ef      	b.n	8080e56 <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 8080e76:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8080e78:	791b      	ldrb	r3, [r3, #4]
 8080e7a:	2b01      	cmp	r3, #1
 8080e7c:	d8ed      	bhi.n	8080e5a <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
      break;
    }
    freeFound += 16;
 8080e7e:	3510      	adds	r5, #16
 8080e80:	b2ed      	uxtb	r5, r5
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 8080e82:	42af      	cmp	r7, r5
 8080e84:	d9e9      	bls.n	8080e5a <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 8080e86:	4630      	mov	r0, r6
 8080e88:	f000 fbde 	bl	8081648 <_ZN7FatFile13addDirClusterEv>
 8080e8c:	2800      	cmp	r0, #0
 8080e8e:	d1f2      	bne.n	8080e76 <_ZN7FatFile4openEPS_P7fname_th+0x1c6>
 8080e90:	e719      	b.n	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 8080e92:	4649      	mov	r1, r9
 8080e94:	4630      	mov	r0, r6
 8080e96:	f7ff feb5 	bl	8080c04 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8080e9a:	2800      	cmp	r0, #0
 8080e9c:	f43f af13 	beq.w	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8080ea0:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8080ea4:	4630      	mov	r0, r6
 8080ea6:	f000 fd1a 	bl	80818de <_ZN7FatFile7seekSetEm>
 8080eaa:	2800      	cmp	r0, #0
 8080eac:	f43f af0b 	beq.w	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8080eb0:	1e7c      	subs	r4, r7, #1
 8080eb2:	b2e4      	uxtb	r4, r4
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8080eb4:	4625      	mov	r5, r4
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8080eb6:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8080eba:	f04f 080f 	mov.w	r8, #15
 8080ebe:	e040      	b.n	8080f42 <_ZN7FatFile4openEPS_P7fname_th+0x292>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8080ec0:	2100      	movs	r1, #0
 8080ec2:	4630      	mov	r0, r6
 8080ec4:	f000 fcee 	bl	80818a4 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8080ec8:	4607      	mov	r7, r0
 8080eca:	2800      	cmp	r0, #0
 8080ecc:	f43f aefb 	beq.w	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8080ed0:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8080ed2:	42a5      	cmp	r5, r4
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8080ed4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8080ed8:	f043 0301 	orr.w	r3, r3, #1
 8080edc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8080ee0:	bf14      	ite	ne
 8080ee2:	462a      	movne	r2, r5
 8080ee4:	f045 0240 	orreq.w	r2, r5, #64	; 0x40
 8080ee8:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8080eea:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8080eee:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8080ef2:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8080ef6:	9202      	str	r2, [sp, #8]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8080ef8:	f7ff fd89 	bl	8080a0e <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8080efc:	9a02      	ldr	r2, [sp, #8]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8080efe:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8080f00:	f887 a01a 	strb.w	sl, [r7, #26]
 8080f04:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8080f08:	f002 021f 	and.w	r2, r2, #31
 8080f0c:	230d      	movs	r3, #13
 8080f0e:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8080f10:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8080f14:	435a      	muls	r2, r3
 8080f16:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8080f18:	4593      	cmp	fp, r2
 8080f1a:	d915      	bls.n	8080f48 <_ZN7FatFile4openEPS_P7fname_th+0x298>
 8080f1c:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 8080f20:	2b04      	cmp	r3, #4
 8080f22:	fa5f fc83 	uxtb.w	ip, r3
 8080f26:	f103 0001 	add.w	r0, r3, #1
 8080f2a:	d813      	bhi.n	8080f54 <_ZN7FatFile4openEPS_P7fname_th+0x2a4>
    ldir->name1[i] = c;
 8080f2c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8080f30:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 8080f34:	280d      	cmp	r0, #13
 8080f36:	f102 0201 	add.w	r2, r2, #1
 8080f3a:	4603      	mov	r3, r0
 8080f3c:	d1ec      	bne.n	8080f18 <_ZN7FatFile4openEPS_P7fname_th+0x268>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8080f3e:	3d01      	subs	r5, #1
 8080f40:	b2ed      	uxtb	r5, r5
 8080f42:	2d00      	cmp	r5, #0
 8080f44:	d1bc      	bne.n	8080ec0 <_ZN7FatFile4openEPS_P7fname_th+0x210>
 8080f46:	e00e      	b.n	8080f66 <_ZN7FatFile4openEPS_P7fname_th+0x2b6>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8080f48:	bf14      	ite	ne
 8080f4a:	f04f 31ff 	movne.w	r1, #4294967295
 8080f4e:	2100      	moveq	r1, #0
 8080f50:	b289      	uxth	r1, r1
 8080f52:	e7e5      	b.n	8080f20 <_ZN7FatFile4openEPS_P7fname_th+0x270>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8080f54:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8080f58:	bf94      	ite	ls
 8080f5a:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8080f5e:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 8080f62:	8099      	strh	r1, [r3, #4]
 8080f64:	e7e6      	b.n	8080f34 <_ZN7FatFile4openEPS_P7fname_th+0x284>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8080f66:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 8080f68:	4629      	mov	r1, r5
 8080f6a:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8080f6c:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 8080f70:	f000 fc98 	bl	80818a4 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8080f74:	4607      	mov	r7, r0
 8080f76:	2800      	cmp	r0, #0
 8080f78:	f43f aea5 	beq.w	8080cc6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8080f7c:	2220      	movs	r2, #32
 8080f7e:	4629      	mov	r1, r5
 8080f80:	f012 f8b3 	bl	80930ea <memset>
  memcpy(dir->name, fname->sfn, 11);
 8080f84:	464b      	mov	r3, r9
 8080f86:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8080f8a:	603a      	str	r2, [r7, #0]
 8080f8c:	685a      	ldr	r2, [r3, #4]
 8080f8e:	607a      	str	r2, [r7, #4]
 8080f90:	891a      	ldrh	r2, [r3, #8]
 8080f92:	813a      	strh	r2, [r7, #8]
 8080f94:	7a9b      	ldrb	r3, [r3, #10]
 8080f96:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8080f98:	f899 3000 	ldrb.w	r3, [r9]
 8080f9c:	f003 0318 	and.w	r3, r3, #24
 8080fa0:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 8080fa2:	4b18      	ldr	r3, [pc, #96]	; (8081004 <_ZN7FatFile4openEPS_P7fname_th+0x354>)
 8080fa4:	681b      	ldr	r3, [r3, #0]
 8080fa6:	b12b      	cbz	r3, 8080fb4 <_ZN7FatFile4openEPS_P7fname_th+0x304>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8080fa8:	f107 010e 	add.w	r1, r7, #14
 8080fac:	f107 0010 	add.w	r0, r7, #16
 8080fb0:	4798      	blx	r3
 8080fb2:	e006      	b.n	8080fc2 <_ZN7FatFile4openEPS_P7fname_th+0x312>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 8080fb4:	2321      	movs	r3, #33	; 0x21
 8080fb6:	743b      	strb	r3, [r7, #16]
 8080fb8:	2328      	movs	r3, #40	; 0x28
 8080fba:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8080fbc:	2308      	movs	r3, #8
 8080fbe:	73bd      	strb	r5, [r7, #14]
 8080fc0:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 8080fc2:	8a3b      	ldrh	r3, [r7, #16]
 8080fc4:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8080fc6:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8080fc8:	89fb      	ldrh	r3, [r7, #14]
 8080fca:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8080fcc:	68b2      	ldr	r2, [r6, #8]
 8080fce:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8080fd2:	f043 0301 	orr.w	r3, r3, #1
 8080fd6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8080fda:	9400      	str	r4, [sp, #0]
 8080fdc:	9b03      	ldr	r3, [sp, #12]
 8080fde:	4652      	mov	r2, sl
 8080fe0:	4631      	mov	r1, r6
 8080fe2:	9805      	ldr	r0, [sp, #20]
 8080fe4:	f000 fcc4 	bl	8081970 <_ZN7FatFile15openCachedEntryEPS_thh>
 8080fe8:	e009      	b.n	8080ffe <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8080fea:	2701      	movs	r7, #1
 8080fec:	e67e      	b.n	8080cec <_ZN7FatFile4openEPS_P7fname_th+0x3c>
 8080fee:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 8080ff2:	f1be 0f0d 	cmp.w	lr, #13
 8080ff6:	f43f ae89 	beq.w	8080d0c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080ffa:	46d4      	mov	ip, sl
 8080ffc:	e6c9      	b.n	8080d92 <_ZN7FatFile4openEPS_P7fname_th+0xe2>
  }
  return true;

fail:
  return false;
}
 8080ffe:	b009      	add	sp, #36	; 0x24
 8081000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081004:	20000f3c 	.word	0x20000f3c

08081008 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8081008:	f00f bb54 	b.w	80906b4 <HAL_Pin_Map>

0808100c <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 808100c:	f00f bb52 	b.w	80906b4 <HAL_Pin_Map>

08081010 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8081010:	f00f bb50 	b.w	80906b4 <HAL_Pin_Map>

08081014 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8081014:	f00f bb4e 	b.w	80906b4 <HAL_Pin_Map>

08081018 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8081018:	6803      	ldr	r3, [r0, #0]
 808101a:	695b      	ldr	r3, [r3, #20]
 808101c:	4718      	bx	r3

0808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 808101e:	6803      	ldr	r3, [r0, #0]
 8081020:	68db      	ldr	r3, [r3, #12]
 8081022:	4718      	bx	r3

08081024 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8081024:	b510      	push	{r4, lr}
  if (!m_selected) {
 8081026:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8081028:	4604      	mov	r4, r0
  if (!m_selected) {
 808102a:	b16b      	cbz	r3, 8081048 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 808102c:	2101      	movs	r1, #1
 808102e:	7940      	ldrb	r0, [r0, #5]
 8081030:	f010 fd55 	bl	8091ade <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8081034:	21ff      	movs	r1, #255	; 0xff
 8081036:	6820      	ldr	r0, [r4, #0]
 8081038:	f7ff ffee 	bl	8081018 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 808103c:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 808103e:	6803      	ldr	r3, [r0, #0]
 8081040:	689b      	ldr	r3, [r3, #8]
 8081042:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 8081044:	2300      	movs	r3, #0
 8081046:	7123      	strb	r3, [r4, #4]
 8081048:	bd10      	pop	{r4, pc}

0808104a <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 808104a:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 808104c:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 808104e:	4604      	mov	r4, r0
  if (m_selected) {
 8081050:	b955      	cbnz	r5, 8081068 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 8081052:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8081054:	79e1      	ldrb	r1, [r4, #7]
 8081056:	6803      	ldr	r3, [r0, #0]
 8081058:	685b      	ldr	r3, [r3, #4]
 808105a:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 808105c:	4629      	mov	r1, r5
 808105e:	7960      	ldrb	r0, [r4, #5]
 8081060:	f010 fd3d 	bl	8091ade <digitalWrite>
  m_selected = true;
 8081064:	2301      	movs	r3, #1
 8081066:	7123      	strb	r3, [r4, #4]
 8081068:	bd38      	pop	{r3, r4, r5, pc}

0808106a <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 808106a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808106c:	4604      	mov	r4, r0
 808106e:	460d      	mov	r5, r1
 8081070:	4616      	mov	r6, r2
 8081072:	f00f fb9f 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
 8081076:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8081078:	6820      	ldr	r0, [r4, #0]
 808107a:	f7ff ffd0 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808107e:	28ff      	cmp	r0, #255	; 0xff
 8081080:	7220      	strb	r0, [r4, #8]
 8081082:	d107      	bne.n	8081094 <_ZN9SdSpiCard8readDataEPhj+0x2a>
 8081084:	f00f fb96 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8081088:	1bc0      	subs	r0, r0, r7
 808108a:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 808108e:	d9f3      	bls.n	8081078 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8081090:	2311      	movs	r3, #17
 8081092:	e00c      	b.n	80810ae <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 8081094:	28fe      	cmp	r0, #254	; 0xfe
 8081096:	d001      	beq.n	808109c <_ZN9SdSpiCard8readDataEPhj+0x32>
 8081098:	230f      	movs	r3, #15
 808109a:	e008      	b.n	80810ae <_ZN9SdSpiCard8readDataEPhj+0x44>
 808109c:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 808109e:	4632      	mov	r2, r6
 80810a0:	6803      	ldr	r3, [r0, #0]
 80810a2:	4629      	mov	r1, r5
 80810a4:	691b      	ldr	r3, [r3, #16]
 80810a6:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 80810a8:	7220      	strb	r0, [r4, #8]
 80810aa:	b130      	cbz	r0, 80810ba <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80810ac:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 80810ae:	4620      	mov	r0, r4
 80810b0:	71a3      	strb	r3, [r4, #6]
 80810b2:	f7ff ffb7 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80810b6:	2000      	movs	r0, #0
}
 80810b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 80810ba:	6820      	ldr	r0, [r4, #0]
 80810bc:	f7ff ffaf 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 80810c0:	6820      	ldr	r0, [r4, #0]
 80810c2:	f7ff ffac 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80810c6:	2001      	movs	r0, #1
 80810c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080810ca <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 80810ca:	b570      	push	{r4, r5, r6, lr}
 80810cc:	4606      	mov	r6, r0
 80810ce:	460c      	mov	r4, r1
 80810d0:	f00f fb70 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
 80810d4:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 80810d6:	6830      	ldr	r0, [r6, #0]
 80810d8:	f7ff ffa1 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80810dc:	28ff      	cmp	r0, #255	; 0xff
 80810de:	d006      	beq.n	80810ee <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 80810e0:	f00f fb68 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 80810e4:	1b40      	subs	r0, r0, r5
 80810e6:	42a0      	cmp	r0, r4
 80810e8:	d3f5      	bcc.n	80810d6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 80810ea:	2000      	movs	r0, #0
 80810ec:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 80810ee:	2001      	movs	r0, #1

fail:
  return false;
}
 80810f0:	bd70      	pop	{r4, r5, r6, pc}

080810f2 <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80810f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 80810f4:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80810f6:	4604      	mov	r4, r0
 80810f8:	460d      	mov	r5, r1
 80810fa:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 80810fc:	b90b      	cbnz	r3, 8081102 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 80810fe:	f7ff ffa4 	bl	808104a <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 8081102:	f44f 7116 	mov.w	r1, #600	; 0x258
 8081106:	4620      	mov	r0, r4
 8081108:	f7ff ffdf 	bl	80810ca <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 808110c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8081110:	6820      	ldr	r0, [r4, #0]
 8081112:	f7ff ff81 	bl	8081018 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8081116:	f10d 0607 	add.w	r6, sp, #7
 808111a:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 808111e:	f816 1901 	ldrb.w	r1, [r6], #-1
 8081122:	6820      	ldr	r0, [r4, #0]
 8081124:	f7ff ff78 	bl	8081018 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8081128:	42be      	cmp	r6, r7
 808112a:	d1f8      	bne.n	808111e <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 808112c:	2d00      	cmp	r5, #0
 808112e:	bf0c      	ite	eq
 8081130:	2195      	moveq	r1, #149	; 0x95
 8081132:	2187      	movne	r1, #135	; 0x87
 8081134:	6820      	ldr	r0, [r4, #0]
 8081136:	f7ff ff6f 	bl	8081018 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 808113a:	2d0c      	cmp	r5, #12
 808113c:	d102      	bne.n	8081144 <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 808113e:	6820      	ldr	r0, [r4, #0]
 8081140:	f7ff ff6d 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8081144:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8081146:	6820      	ldr	r0, [r4, #0]
 8081148:	f7ff ff69 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808114c:	0603      	lsls	r3, r0, #24
 808114e:	7220      	strb	r0, [r4, #8]
 8081150:	d503      	bpl.n	808115a <_ZN9SdSpiCard11cardCommandEhm+0x68>
 8081152:	3501      	adds	r5, #1
 8081154:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8081158:	d1f5      	bne.n	8081146 <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 808115a:	b003      	add	sp, #12
 808115c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808115e <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 808115e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081160:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8081162:	2300      	movs	r3, #0
  m_spi = spi;
  m_chipSelectPin = chipSelectPin;
 8081164:	7142      	strb	r2, [r0, #5]
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
  m_errorCode = m_type = 0;
 8081166:	7243      	strb	r3, [r0, #9]
 8081168:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 808116a:	6001      	str	r1, [r0, #0]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 808116c:	4604      	mov	r4, r0
 808116e:	f00f fb21 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
 8081172:	4606      	mov	r6, r0
 8081174:	6820      	ldr	r0, [r4, #0]
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 8081176:	7961      	ldrb	r1, [r4, #5]
 8081178:	6803      	ldr	r3, [r0, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 808117a:	250a      	movs	r5, #10
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 808117c:	681b      	ldr	r3, [r3, #0]
 808117e:	4798      	blx	r3

  // initialize SPI bus and chip select pin.
  spiBegin(m_chipSelectPin);

  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8081180:	2180      	movs	r1, #128	; 0x80
 8081182:	6820      	ldr	r0, [r4, #0]
 8081184:	71e1      	strb	r1, [r4, #7]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8081186:	6803      	ldr	r3, [r0, #0]
 8081188:	685b      	ldr	r3, [r3, #4]
 808118a:	4798      	blx	r3
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
 808118c:	21ff      	movs	r1, #255	; 0xff
 808118e:	6820      	ldr	r0, [r4, #0]
 8081190:	3d01      	subs	r5, #1
 8081192:	f7ff ff41 	bl	8081018 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
 8081196:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 808119a:	d1f7      	bne.n	808118c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
 808119c:	6820      	ldr	r0, [r4, #0]
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 808119e:	6803      	ldr	r3, [r0, #0]
 80811a0:	689b      	ldr	r3, [r3, #8]
 80811a2:	4798      	blx	r3
    spiSend(0XFF);
  }
  spiEndTransaction();
  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 80811a4:	2200      	movs	r2, #0
 80811a6:	4611      	mov	r1, r2
 80811a8:	4620      	mov	r0, r4
 80811aa:	f7ff ffa2 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
 80811ae:	2801      	cmp	r0, #1
 80811b0:	d007      	beq.n	80811c2 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
 80811b2:	f00f faff 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 80811b6:	1b80      	subs	r0, r0, r6
 80811b8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80811bc:	d9f2      	bls.n	80811a4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80811be:	2301      	movs	r3, #1
 80811c0:	e048      	b.n	8081254 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80811c2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80811c6:	2108      	movs	r1, #8
 80811c8:	4620      	mov	r0, r4
 80811ca:	f7ff ff92 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
 80811ce:	2805      	cmp	r0, #5
 80811d0:	d101      	bne.n	80811d6 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x78>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 80811d2:	2301      	movs	r3, #1
 80811d4:	e00b      	b.n	80811ee <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x90>
 80811d6:	2504      	movs	r5, #4
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
 80811d8:	6820      	ldr	r0, [r4, #0]
 80811da:	f7ff ff20 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80811de:	3d01      	subs	r5, #1
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 80811e0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 80811e4:	7220      	strb	r0, [r4, #8]
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 80811e6:	d1f7      	bne.n	80811d8 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x7a>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 80811e8:	28aa      	cmp	r0, #170	; 0xaa
 80811ea:	d108      	bne.n	80811fe <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xa0>
 80811ec:	2302      	movs	r3, #2
 80811ee:	7263      	strb	r3, [r4, #9]
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80811f0:	7a63      	ldrb	r3, [r4, #9]
 80811f2:	2b02      	cmp	r3, #2
 80811f4:	bf0c      	ite	eq
 80811f6:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 80811fa:	2500      	movne	r5, #0
 80811fc:	e007      	b.n	808120e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
 80811fe:	f00f fad9 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
    }
    if (m_status == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8081202:	1b80      	subs	r0, r0, r6
 8081204:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8081208:	d9db      	bls.n	80811c2 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808120a:	2302      	movs	r3, #2
 808120c:	e022      	b.n	8081254 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 808120e:	2200      	movs	r2, #0
 8081210:	2137      	movs	r1, #55	; 0x37
 8081212:	4620      	mov	r0, r4
 8081214:	f7ff ff6d 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8081218:	462a      	mov	r2, r5
 808121a:	2129      	movs	r1, #41	; 0x29
 808121c:	4620      	mov	r0, r4
 808121e:	f7ff ff68 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8081222:	4602      	mov	r2, r0
 8081224:	b138      	cbz	r0, 8081236 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xd8>
 8081226:	f00f fac5 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
    // check for timeout
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 808122a:	1b80      	subs	r0, r0, r6
 808122c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8081230:	d9ed      	bls.n	808120e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8081232:	230a      	movs	r3, #10
 8081234:	e00e      	b.n	8081254 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8081236:	7a63      	ldrb	r3, [r4, #9]
 8081238:	2b02      	cmp	r3, #2
 808123a:	d005      	beq.n	8081248 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xea>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  chipSelectHigh();
 808123c:	4620      	mov	r0, r4
 808123e:	f7ff fef1 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  m_sckDivisor = sckDivisor;
 8081242:	71e7      	strb	r7, [r4, #7]
  return true;
 8081244:	2001      	movs	r0, #1
 8081246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8081248:	213a      	movs	r1, #58	; 0x3a
 808124a:	4620      	mov	r0, r4
 808124c:	f7ff ff51 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
 8081250:	b130      	cbz	r0, 8081260 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x102>
 8081252:	2308      	movs	r3, #8
  chipSelectHigh();
  m_sckDivisor = sckDivisor;
  return true;

fail:
  chipSelectHigh();
 8081254:	4620      	mov	r0, r4
 8081256:	71a3      	strb	r3, [r4, #6]
 8081258:	f7ff fee4 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808125c:	2000      	movs	r0, #0
}
 808125e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 8081260:	6820      	ldr	r0, [r4, #0]
 8081262:	f7ff fedc 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8081266:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 808126a:	28c0      	cmp	r0, #192	; 0xc0
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 808126c:	bf04      	itt	eq
 808126e:	2303      	moveq	r3, #3
 8081270:	7263      	strbeq	r3, [r4, #9]
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
 8081272:	6820      	ldr	r0, [r4, #0]
 8081274:	f7ff fed3 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8081278:	6820      	ldr	r0, [r4, #0]
 808127a:	f7ff fed0 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808127e:	6820      	ldr	r0, [r4, #0]
 8081280:	f7ff fecd 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8081284:	e7da      	b.n	808123c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xde>

08081286 <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8081286:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081288:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 808128a:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808128c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808128e:	bf18      	it	ne
 8081290:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8081292:	460a      	mov	r2, r1
 8081294:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8081296:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8081298:	f7ff ff2b 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
 808129c:	b110      	cbz	r0, 80812a4 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808129e:	2304      	movs	r3, #4
 80812a0:	71a3      	strb	r3, [r4, #6]
 80812a2:	e00b      	b.n	80812bc <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 80812a4:	4629      	mov	r1, r5
 80812a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80812aa:	4620      	mov	r0, r4
 80812ac:	f7ff fedd 	bl	808106a <_ZN9SdSpiCard8readDataEPhj>
 80812b0:	4605      	mov	r5, r0
 80812b2:	b118      	cbz	r0, 80812bc <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 80812b4:	4620      	mov	r0, r4
 80812b6:	f7ff feb5 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80812ba:	e003      	b.n	80812c4 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 80812bc:	4620      	mov	r0, r4
 80812be:	f7ff feb1 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80812c2:	2500      	movs	r5, #0
}
 80812c4:	4628      	mov	r0, r5
 80812c6:	bd38      	pop	{r3, r4, r5, pc}

080812c8 <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80812c8:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80812ca:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80812cc:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80812ce:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80812d0:	bf18      	it	ne
 80812d2:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 80812d4:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80812d6:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 80812d8:	f7ff ff0b 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
 80812dc:	b130      	cbz	r0, 80812ec <_ZN9SdSpiCard9readStartEm+0x24>
 80812de:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 80812e0:	4620      	mov	r0, r4
 80812e2:	71a3      	strb	r3, [r4, #6]
 80812e4:	f7ff fe9e 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80812e8:	2000      	movs	r0, #0
 80812ea:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 80812ec:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 80812ee:	bd10      	pop	{r4, pc}

080812f0 <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80812f0:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 80812f2:	2200      	movs	r2, #0
 80812f4:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80812f6:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 80812f8:	f7ff fefb 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
 80812fc:	b130      	cbz	r0, 808130c <_ZN9SdSpiCard8readStopEv+0x1c>
 80812fe:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 8081300:	4620      	mov	r0, r4
 8081302:	71a3      	strb	r3, [r4, #6]
 8081304:	f7ff fe8e 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081308:	2000      	movs	r0, #0
 808130a:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 808130c:	4620      	mov	r0, r4
 808130e:	f7ff fe89 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8081312:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8081314:	bd10      	pop	{r4, pc}

08081316 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8081316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081318:	4605      	mov	r5, r0
 808131a:	4616      	mov	r6, r2
 808131c:	461f      	mov	r7, r3
  if (!readStart(block)) {
 808131e:	f7ff ffd3 	bl	80812c8 <_ZN9SdSpiCard9readStartEm>
 8081322:	b198      	cbz	r0, 808134c <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8081324:	2400      	movs	r4, #0
 8081326:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8081328:	429f      	cmp	r7, r3
 808132a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 808132e:	d908      	bls.n	8081342 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8081330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081334:	4628      	mov	r0, r5
 8081336:	f7ff fe98 	bl	808106a <_ZN9SdSpiCard8readDataEPhj>
 808133a:	3401      	adds	r4, #1
 808133c:	2800      	cmp	r0, #0
 808133e:	d1f2      	bne.n	8081326 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8081340:	e004      	b.n	808134c <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8081342:	4628      	mov	r0, r5
}
 8081344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8081348:	f7ff bfd2 	b.w	80812f0 <_ZN9SdSpiCard8readStopEv>
}
 808134c:	2000      	movs	r0, #0
 808134e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081350 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8081350:	b538      	push	{r3, r4, r5, lr}
 8081352:	4604      	mov	r4, r0
 8081354:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8081356:	6800      	ldr	r0, [r0, #0]
 8081358:	f7ff fe5e 	bl	8081018 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 808135c:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 808135e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081362:	6803      	ldr	r3, [r0, #0]
 8081364:	4629      	mov	r1, r5
 8081366:	699b      	ldr	r3, [r3, #24]
 8081368:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 808136a:	21ff      	movs	r1, #255	; 0xff
 808136c:	6820      	ldr	r0, [r4, #0]
 808136e:	f7ff fe53 	bl	8081018 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 8081372:	21ff      	movs	r1, #255	; 0xff
 8081374:	6820      	ldr	r0, [r4, #0]
 8081376:	f7ff fe4f 	bl	8081018 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 808137a:	6820      	ldr	r0, [r4, #0]
 808137c:	f7ff fe4f 	bl	808101e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8081380:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8081382:	f000 001f 	and.w	r0, r0, #31
 8081386:	2805      	cmp	r0, #5
 8081388:	d006      	beq.n	8081398 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808138a:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 808138c:	4620      	mov	r0, r4
 808138e:	71a3      	strb	r3, [r4, #6]
 8081390:	f7ff fe48 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081394:	2000      	movs	r0, #0
 8081396:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8081398:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 808139a:	bd38      	pop	{r3, r4, r5, pc}

0808139c <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808139c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808139e:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80813a0:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80813a2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80813a4:	bf18      	it	ne
 80813a6:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 80813a8:	460a      	mov	r2, r1
 80813aa:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80813ac:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 80813ae:	f7ff fea0 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
 80813b2:	b110      	cbz	r0, 80813ba <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 80813b4:	2306      	movs	r3, #6
 80813b6:	71a3      	strb	r3, [r4, #6]
 80813b8:	e00a      	b.n	80813d0 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 80813ba:	462a      	mov	r2, r5
 80813bc:	21fe      	movs	r1, #254	; 0xfe
 80813be:	4620      	mov	r0, r4
 80813c0:	f7ff ffc6 	bl	8081350 <_ZN9SdSpiCard9writeDataEhPKh>
 80813c4:	4605      	mov	r5, r0
 80813c6:	b118      	cbz	r0, 80813d0 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 80813c8:	4620      	mov	r0, r4
 80813ca:	f7ff fe2b 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80813ce:	e003      	b.n	80813d8 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 80813d0:	4620      	mov	r0, r4
 80813d2:	f7ff fe27 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80813d6:	2500      	movs	r5, #0
}
 80813d8:	4628      	mov	r0, r5
 80813da:	bd38      	pop	{r3, r4, r5, pc}

080813dc <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 80813dc:	b570      	push	{r4, r5, r6, lr}
 80813de:	4604      	mov	r4, r0
 80813e0:	460d      	mov	r5, r1
  bool selected = m_selected;
 80813e2:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 80813e4:	f7ff fe31 	bl	808104a <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80813e8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80813ec:	4620      	mov	r0, r4
 80813ee:	f7ff fe6c 	bl	80810ca <_ZN9SdSpiCard11waitNotBusyEt>
 80813f2:	b910      	cbnz	r0, 80813fa <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 80813f4:	2317      	movs	r3, #23
 80813f6:	71a3      	strb	r3, [r4, #6]
 80813f8:	e00b      	b.n	8081412 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 80813fa:	462a      	mov	r2, r5
 80813fc:	21fc      	movs	r1, #252	; 0xfc
 80813fe:	4620      	mov	r0, r4
 8081400:	f7ff ffa6 	bl	8081350 <_ZN9SdSpiCard9writeDataEhPKh>
 8081404:	4605      	mov	r5, r0
 8081406:	b120      	cbz	r0, 8081412 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 8081408:	b93e      	cbnz	r6, 808141a <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 808140a:	4620      	mov	r0, r4
 808140c:	f7ff fe0a 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
 8081410:	e003      	b.n	808141a <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 8081412:	4620      	mov	r0, r4
 8081414:	f7ff fe06 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081418:	2500      	movs	r5, #0
}
 808141a:	4628      	mov	r0, r5
 808141c:	bd70      	pop	{r4, r5, r6, pc}

0808141e <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 808141e:	b570      	push	{r4, r5, r6, lr}
 8081420:	4604      	mov	r4, r0
 8081422:	4616      	mov	r6, r2
 8081424:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8081426:	2200      	movs	r2, #0
 8081428:	2137      	movs	r1, #55	; 0x37
 808142a:	f7ff fe62 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 808142e:	4632      	mov	r2, r6
 8081430:	2117      	movs	r1, #23
 8081432:	4620      	mov	r0, r4
 8081434:	f7ff fe5d 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8081438:	b108      	cbz	r0, 808143e <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808143a:	2309      	movs	r3, #9
 808143c:	e00a      	b.n	8081454 <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808143e:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8081440:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081442:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8081444:	bf18      	it	ne
 8081446:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8081448:	462a      	mov	r2, r5
 808144a:	4620      	mov	r0, r4
 808144c:	f7ff fe51 	bl	80810f2 <_ZN9SdSpiCard11cardCommandEhm>
 8081450:	b130      	cbz	r0, 8081460 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8081452:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8081454:	4620      	mov	r0, r4
 8081456:	71a3      	strb	r3, [r4, #6]
 8081458:	f7ff fde4 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808145c:	2000      	movs	r0, #0
 808145e:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8081460:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8081462:	bd70      	pop	{r4, r5, r6, pc}

08081464 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8081464:	b538      	push	{r3, r4, r5, lr}
 8081466:	4604      	mov	r4, r0
  chipSelectLow();
 8081468:	f7ff fdef 	bl	808104a <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 808146c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8081470:	4620      	mov	r0, r4
 8081472:	f7ff fe2a 	bl	80810ca <_ZN9SdSpiCard11waitNotBusyEt>
 8081476:	b170      	cbz	r0, 8081496 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8081478:	21fd      	movs	r1, #253	; 0xfd
 808147a:	6820      	ldr	r0, [r4, #0]
 808147c:	f7ff fdcc 	bl	8081018 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8081480:	f44f 7116 	mov.w	r1, #600	; 0x258
 8081484:	4620      	mov	r0, r4
 8081486:	f7ff fe20 	bl	80810ca <_ZN9SdSpiCard11waitNotBusyEt>
 808148a:	4605      	mov	r5, r0
 808148c:	b118      	cbz	r0, 8081496 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 808148e:	4620      	mov	r0, r4
 8081490:	f7ff fdc8 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8081494:	e005      	b.n	80814a2 <_ZN9SdSpiCard9writeStopEv+0x3e>
 8081496:	2312      	movs	r3, #18
 8081498:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 808149a:	4620      	mov	r0, r4
 808149c:	f7ff fdc2 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80814a0:	2500      	movs	r5, #0
}
 80814a2:	4628      	mov	r0, r5
 80814a4:	bd38      	pop	{r3, r4, r5, pc}

080814a6 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80814a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80814a8:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 80814aa:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80814ac:	4605      	mov	r5, r0
 80814ae:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 80814b0:	f7ff ffb5 	bl	808141e <_ZN9SdSpiCard10writeStartEmm>
 80814b4:	b170      	cbz	r0, 80814d4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 80814b6:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80814b8:	42b4      	cmp	r4, r6
 80814ba:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80814be:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80814c0:	d004      	beq.n	80814cc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 80814c2:	f7ff ff8b 	bl	80813dc <_ZN9SdSpiCard9writeDataEPKh>
 80814c6:	b128      	cbz	r0, 80814d4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80814c8:	3401      	adds	r4, #1
 80814ca:	e7f5      	b.n	80814b8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 80814cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80814d0:	f7ff bfc8 	b.w	8081464 <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 80814d4:	4628      	mov	r0, r5
 80814d6:	f7ff fda5 	bl	8081024 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 80814da:	2000      	movs	r0, #0
 80814dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080814de <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 80814de:	f00f b8e9 	b.w	80906b4 <HAL_Pin_Map>
	...

080814e4 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80814e4:	4b01      	ldr	r3, [pc, #4]	; (80814ec <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80814e6:	2201      	movs	r2, #1
 80814e8:	701a      	strb	r2, [r3, #0]
 80814ea:	4770      	bx	lr
 80814ec:	20000f30 	.word	0x20000f30

080814f0 <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 80814f0:	4770      	bx	lr
	...

080814f4 <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 80814f4:	7902      	ldrb	r2, [r0, #4]
 80814f6:	4b02      	ldr	r3, [pc, #8]	; (8081500 <_ZN5SdSpi5beginEh+0xc>)
 80814f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80814fc:	f00f bb33 	b.w	8090b66 <_ZN8SPIClass5beginEt>
 8081500:	0809325c 	.word	0x0809325c

08081504 <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 8081504:	b570      	push	{r4, r5, r6, lr}
 8081506:	4606      	mov	r6, r0
 8081508:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 808150a:	7903      	ldrb	r3, [r0, #4]
 808150c:	4d1a      	ldr	r5, [pc, #104]	; (8081578 <_ZN5SdSpi16beginTransactionEh+0x74>)
 808150e:	2101      	movs	r1, #1
 8081510:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8081514:	f00f fb2d 	bl	8090b72 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8081518:	7933      	ldrb	r3, [r6, #4]
 808151a:	2100      	movs	r1, #0
 808151c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8081520:	f00f fb2a 	bl	8090b78 <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 8081524:	2c02      	cmp	r4, #2
 8081526:	d90c      	bls.n	8081542 <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 8081528:	2c04      	cmp	r4, #4
 808152a:	d90c      	bls.n	8081546 <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 808152c:	2c08      	cmp	r4, #8
 808152e:	d90c      	bls.n	808154a <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 8081530:	2c10      	cmp	r4, #16
 8081532:	d90c      	bls.n	808154e <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 8081534:	2c20      	cmp	r4, #32
 8081536:	d90c      	bls.n	8081552 <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 8081538:	2c41      	cmp	r4, #65	; 0x41
 808153a:	bf34      	ite	cc
 808153c:	2128      	movcc	r1, #40	; 0x28
 808153e:	2130      	movcs	r1, #48	; 0x30
 8081540:	e008      	b.n	8081554 <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 8081542:	2100      	movs	r1, #0
 8081544:	e006      	b.n	8081554 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 8081546:	2108      	movs	r1, #8
 8081548:	e004      	b.n	8081554 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 808154a:	2110      	movs	r1, #16
 808154c:	e002      	b.n	8081554 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 808154e:	2118      	movs	r1, #24
 8081550:	e000      	b.n	8081554 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 8081552:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 8081554:	7933      	ldrb	r3, [r6, #4]
 8081556:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 808155a:	f00f fb57 	bl	8090c0c <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 808155e:	2318      	movs	r3, #24
 8081560:	fb03 f104 	mul.w	r1, r3, r4
 8081564:	7932      	ldrb	r2, [r6, #4]
 8081566:	233c      	movs	r3, #60	; 0x3c
 8081568:	fb02 1101 	mla	r1, r2, r1, r1
 808156c:	fb91 f1f3 	sdiv	r1, r1, r3
 8081570:	4b02      	ldr	r3, [pc, #8]	; (808157c <_ZN5SdSpi16beginTransactionEh+0x78>)
 8081572:	6019      	str	r1, [r3, #0]
 8081574:	bd70      	pop	{r4, r5, r6, pc}
 8081576:	bf00      	nop
 8081578:	0809325c 	.word	0x0809325c
 808157c:	20000f34 	.word	0x20000f34

08081580 <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8081580:	7902      	ldrb	r2, [r0, #4]
 8081582:	4b03      	ldr	r3, [pc, #12]	; (8081590 <_ZN5SdSpi7receiveEv+0x10>)
 8081584:	21ff      	movs	r1, #255	; 0xff
 8081586:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 808158a:	f00f bb53 	b.w	8090c34 <_ZN8SPIClass8transferEh>
 808158e:	bf00      	nop
 8081590:	0809325c 	.word	0x0809325c

08081594 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8081594:	7902      	ldrb	r2, [r0, #4]
 8081596:	4b02      	ldr	r3, [pc, #8]	; (80815a0 <_ZN5SdSpi4sendEh+0xc>)
 8081598:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 808159c:	f00f bb4a 	b.w	8090c34 <_ZN8SPIClass8transferEh>
 80815a0:	0809325c 	.word	0x0809325c

080815a4 <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 80815a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80815a6:	4b0c      	ldr	r3, [pc, #48]	; (80815d8 <_ZN5SdSpi7receiveEPhj+0x34>)
 80815a8:	7906      	ldrb	r6, [r0, #4]
 80815aa:	480c      	ldr	r0, [pc, #48]	; (80815dc <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 80815ac:	2500      	movs	r5, #0
 80815ae:	4c0c      	ldr	r4, [pc, #48]	; (80815e0 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80815b0:	9300      	str	r3, [sp, #0]
 80815b2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80815b6:	4613      	mov	r3, r2
 80815b8:	460a      	mov	r2, r1
 80815ba:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 80815bc:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80815be:	f00f fb3f 	bl	8090c40 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 80815c2:	7823      	ldrb	r3, [r4, #0]
 80815c4:	2b00      	cmp	r3, #0
 80815c6:	d0fc      	beq.n	80815c2 <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 80815c8:	4b06      	ldr	r3, [pc, #24]	; (80815e4 <_ZN5SdSpi7receiveEPhj+0x40>)
 80815ca:	6818      	ldr	r0, [r3, #0]
 80815cc:	b108      	cbz	r0, 80815d2 <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80815ce:	f00f f8e9 	bl	80907a4 <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 80815d2:	2000      	movs	r0, #0
 80815d4:	b002      	add	sp, #8
 80815d6:	bd70      	pop	{r4, r5, r6, pc}
 80815d8:	080814e5 	.word	0x080814e5
 80815dc:	0809325c 	.word	0x0809325c
 80815e0:	20000f30 	.word	0x20000f30
 80815e4:	20000f34 	.word	0x20000f34

080815e8 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 80815e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80815ea:	4b0d      	ldr	r3, [pc, #52]	; (8081620 <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80815ec:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 80815ee:	480d      	ldr	r0, [pc, #52]	; (8081624 <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80815f0:	2500      	movs	r5, #0
 80815f2:	4c0d      	ldr	r4, [pc, #52]	; (8081628 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80815f4:	9300      	str	r3, [sp, #0]
 80815f6:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80815fa:	4613      	mov	r3, r2
 80815fc:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80815fe:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8081600:	f00f fb1e 	bl	8090c40 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8081604:	7823      	ldrb	r3, [r4, #0]
 8081606:	2b00      	cmp	r3, #0
 8081608:	d0fc      	beq.n	8081604 <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 808160a:	4b08      	ldr	r3, [pc, #32]	; (808162c <_ZN5SdSpi4sendEPKhj+0x44>)
 808160c:	6818      	ldr	r0, [r3, #0]
 808160e:	b120      	cbz	r0, 808161a <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 8081610:	b002      	add	sp, #8
 8081612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8081616:	f00f b8c5 	b.w	80907a4 <HAL_Delay_Microseconds>
 808161a:	b002      	add	sp, #8
 808161c:	bd70      	pop	{r4, r5, r6, pc}
 808161e:	bf00      	nop
 8081620:	080814e5 	.word	0x080814e5
 8081624:	0809325c 	.word	0x0809325c
 8081628:	20000f30 	.word	0x20000f30
 808162c:	20000f34 	.word	0x20000f34

08081630 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8081630:	f00f b840 	b.w	80906b4 <HAL_Pin_Map>

08081634 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8081634:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081636:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 808163a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 808163e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081640:	6901      	ldr	r1, [r0, #16]
 8081642:	6880      	ldr	r0, [r0, #8]
 8081644:	f000 bc04 	b.w	8081e50 <_ZN9FatVolume15allocateClusterEmPm>

08081648 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8081648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 808164c:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 808164e:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8081650:	f003 0320 	and.w	r3, r3, #32
 8081654:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8081658:	b10b      	cbz	r3, 808165e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 808165a:	2600      	movs	r6, #0
 808165c:	e02e      	b.n	80816bc <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 808165e:	6942      	ldr	r2, [r0, #20]
 8081660:	4b18      	ldr	r3, [pc, #96]	; (80816c4 <_ZN7FatFile13addDirClusterEv+0x7c>)
 8081662:	429a      	cmp	r2, r3
 8081664:	d8f9      	bhi.n	808165a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 8081666:	f7ff ffe5 	bl	8081634 <_ZN7FatFile10addClusterEv>
 808166a:	4606      	mov	r6, r0
 808166c:	2800      	cmp	r0, #0
 808166e:	d0f4      	beq.n	808165a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
 8081670:	6921      	ldr	r1, [r4, #16]
 8081672:	68a0      	ldr	r0, [r4, #8]
 8081674:	f000 fb8d 	bl	8081d92 <_ZNK9FatVolume17clusterStartBlockEm>
 8081678:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808167a:	68a0      	ldr	r0, [r4, #8]
 808167c:	2205      	movs	r2, #5
 808167e:	4639      	mov	r1, r7
 8081680:	3028      	adds	r0, #40	; 0x28
 8081682:	f000 fb62 	bl	8081d4a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8081686:	4680      	mov	r8, r0
 8081688:	2800      	cmp	r0, #0
 808168a:	d0e6      	beq.n	808165a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 808168c:	4629      	mov	r1, r5
 808168e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081692:	f011 fd2a 	bl	80930ea <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8081696:	2501      	movs	r5, #1
 8081698:	68a0      	ldr	r0, [r4, #8]
 808169a:	7902      	ldrb	r2, [r0, #4]
 808169c:	42aa      	cmp	r2, r5
 808169e:	d909      	bls.n	80816b4 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80816a0:	6803      	ldr	r3, [r0, #0]
 80816a2:	4642      	mov	r2, r8
 80816a4:	685b      	ldr	r3, [r3, #4]
 80816a6:	19e9      	adds	r1, r5, r7
 80816a8:	4798      	blx	r3
 80816aa:	2800      	cmp	r0, #0
 80816ac:	d0d5      	beq.n	808165a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80816ae:	3501      	adds	r5, #1
 80816b0:	b2ed      	uxtb	r5, r5
 80816b2:	e7f1      	b.n	8081698 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80816b4:	6963      	ldr	r3, [r4, #20]
 80816b6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80816ba:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 80816bc:	4630      	mov	r0, r6
 80816be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80816c2:	bf00      	nop
 80816c4:	001ffdff 	.word	0x001ffdff

080816c8 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 80816c8:	b510      	push	{r4, lr}
 80816ca:	4604      	mov	r4, r0
 80816cc:	6880      	ldr	r0, [r0, #8]
 80816ce:	460a      	mov	r2, r1
 80816d0:	3028      	adds	r0, #40	; 0x28
 80816d2:	69a1      	ldr	r1, [r4, #24]
 80816d4:	f000 fb39 	bl	8081d4a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 80816d8:	b120      	cbz	r0, 80816e4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 80816da:	88a3      	ldrh	r3, [r4, #4]
 80816dc:	f003 030f 	and.w	r3, r3, #15
 80816e0:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 80816e4:	bd10      	pop	{r4, pc}

080816e6 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80816e6:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 80816e8:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80816ea:	4605      	mov	r5, r0
 80816ec:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 80816ee:	b984      	cbnz	r4, 8081712 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 80816f0:	2224      	movs	r2, #36	; 0x24
 80816f2:	4621      	mov	r1, r4
 80816f4:	f011 fcf9 	bl	80930ea <memset>

  m_vol = vol;
 80816f8:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 80816fa:	79f3      	ldrb	r3, [r6, #7]
 80816fc:	2b10      	cmp	r3, #16
 80816fe:	d003      	beq.n	8081708 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8081700:	2b20      	cmp	r3, #32
 8081702:	d106      	bne.n	8081712 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8081704:	2340      	movs	r3, #64	; 0x40
 8081706:	e000      	b.n	808170a <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8081708:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 808170a:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 808170c:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 808170e:	70a8      	strb	r0, [r5, #2]
 8081710:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8081712:	2000      	movs	r0, #0
 8081714:	bd70      	pop	{r4, r5, r6, pc}

08081716 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8081716:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808171a:	7803      	ldrb	r3, [r0, #0]
 808171c:	4604      	mov	r4, r0
 808171e:	4689      	mov	r9, r1
 8081720:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8081722:	b14b      	cbz	r3, 8081738 <_ZN7FatFile4readEPvj+0x22>
 8081724:	7882      	ldrb	r2, [r0, #2]
 8081726:	07d1      	lsls	r1, r2, #31
 8081728:	d506      	bpl.n	8081738 <_ZN7FatFile4readEPvj+0x22>
 808172a:	e00c      	b.n	8081746 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808172c:	465a      	mov	r2, fp
 808172e:	6921      	ldr	r1, [r4, #16]
 8081730:	f000 fb35 	bl	8081d9e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8081734:	2800      	cmp	r0, #0
 8081736:	da3d      	bge.n	80817b4 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8081738:	7863      	ldrb	r3, [r4, #1]
  return -1;
 808173a:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 808173e:	f043 0302 	orr.w	r3, r3, #2
 8081742:	7063      	strb	r3, [r4, #1]
  return -1;
 8081744:	e098      	b.n	8081878 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8081746:	071a      	lsls	r2, r3, #28
 8081748:	d503      	bpl.n	8081752 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 808174a:	69e3      	ldr	r3, [r4, #28]
 808174c:	6962      	ldr	r2, [r4, #20]
 808174e:	1a9b      	subs	r3, r3, r2
 8081750:	e007      	b.n	8081762 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8081752:	069a      	lsls	r2, r3, #26
 8081754:	d508      	bpl.n	8081768 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8081756:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8081758:	891a      	ldrh	r2, [r3, #8]
 808175a:	6963      	ldr	r3, [r4, #20]
 808175c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8081760:	b29b      	uxth	r3, r3
 8081762:	429d      	cmp	r5, r3
 8081764:	bf28      	it	cs
 8081766:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8081768:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 808176a:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808176e:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8081772:	2e00      	cmp	r6, #0
 8081774:	d035      	beq.n	80817e2 <_ZN7FatFile4readEPvj+0xcc>
 8081776:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8081778:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 808177a:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 808177e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8081782:	68a0      	ldr	r0, [r4, #8]
 8081784:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8081788:	d002      	beq.n	8081790 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 808178a:	6a03      	ldr	r3, [r0, #32]
 808178c:	4419      	add	r1, r3
 808178e:	e01d      	b.n	80817cc <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8081790:	f890 8005 	ldrb.w	r8, [r0, #5]
 8081794:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8081798:	f1ba 0f00 	cmp.w	sl, #0
 808179c:	d110      	bne.n	80817c0 <_ZN7FatFile4readEPvj+0xaa>
 808179e:	f1b8 0f00 	cmp.w	r8, #0
 80817a2:	d10d      	bne.n	80817c0 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 80817a4:	2b00      	cmp	r3, #0
 80817a6:	d1c1      	bne.n	808172c <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80817a8:	0653      	lsls	r3, r2, #25
 80817aa:	bf4c      	ite	mi
 80817ac:	6a03      	ldrmi	r3, [r0, #32]
 80817ae:	6a23      	ldrpl	r3, [r4, #32]
 80817b0:	6123      	str	r3, [r4, #16]
 80817b2:	e005      	b.n	80817c0 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 80817b4:	d104      	bne.n	80817c0 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 80817b6:	7823      	ldrb	r3, [r4, #0]
 80817b8:	f013 0f70 	tst.w	r3, #112	; 0x70
 80817bc:	d111      	bne.n	80817e2 <_ZN7FatFile4readEPvj+0xcc>
 80817be:	e7bb      	b.n	8081738 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80817c0:	6921      	ldr	r1, [r4, #16]
 80817c2:	68a0      	ldr	r0, [r4, #8]
 80817c4:	f000 fae5 	bl	8081d92 <_ZNK9FatVolume17clusterStartBlockEm>
 80817c8:	eb08 0100 	add.w	r1, r8, r0
 80817cc:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 80817ce:	f1ba 0f00 	cmp.w	sl, #0
 80817d2:	d135      	bne.n	8081840 <_ZN7FatFile4readEPvj+0x12a>
 80817d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80817d8:	d332      	bcc.n	8081840 <_ZN7FatFile4readEPvj+0x12a>
 80817da:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80817dc:	4291      	cmp	r1, r2
 80817de:	d102      	bne.n	80817e6 <_ZN7FatFile4readEPvj+0xd0>
 80817e0:	e02e      	b.n	8081840 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 80817e2:	1ba8      	subs	r0, r5, r6
 80817e4:	e048      	b.n	8081878 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 80817e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80817ea:	d31b      	bcc.n	8081824 <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 80817ec:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 80817ee:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 80817f2:	06bf      	lsls	r7, r7, #26
 80817f4:	d406      	bmi.n	8081804 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 80817f6:	7907      	ldrb	r7, [r0, #4]
 80817f8:	ebc8 0707 	rsb	r7, r8, r7
 80817fc:	b2ff      	uxtb	r7, r7
 80817fe:	42bb      	cmp	r3, r7
 8081800:	bf28      	it	cs
 8081802:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8081804:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8081806:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808180a:	d207      	bcs.n	808181c <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 808180c:	68a0      	ldr	r0, [r4, #8]
 808180e:	6802      	ldr	r2, [r0, #0]
 8081810:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8081814:	464a      	mov	r2, r9
 8081816:	47d0      	blx	sl
 8081818:	b960      	cbnz	r0, 8081834 <_ZN7FatFile4readEPvj+0x11e>
 808181a:	e78d      	b.n	8081738 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808181c:	441a      	add	r2, r3
 808181e:	4291      	cmp	r1, r2
 8081820:	d321      	bcc.n	8081866 <_ZN7FatFile4readEPvj+0x150>
 8081822:	e7f3      	b.n	808180c <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8081824:	6803      	ldr	r3, [r0, #0]
 8081826:	464a      	mov	r2, r9
 8081828:	681b      	ldr	r3, [r3, #0]
 808182a:	4798      	blx	r3
 808182c:	2800      	cmp	r0, #0
 808182e:	d083      	beq.n	8081738 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8081830:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8081834:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8081836:	44b9      	add	r9, r7
    m_curPosition += n;
 8081838:	443b      	add	r3, r7
 808183a:	6163      	str	r3, [r4, #20]
    toRead -= n;
 808183c:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 808183e:	e798      	b.n	8081772 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081840:	2200      	movs	r2, #0
 8081842:	3028      	adds	r0, #40	; 0x28
 8081844:	f000 fa81 	bl	8081d4a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8081848:	2800      	cmp	r0, #0
 808184a:	f43f af75 	beq.w	8081738 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 808184e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8081852:	42b7      	cmp	r7, r6
 8081854:	bf28      	it	cs
 8081856:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8081858:	eb00 010a 	add.w	r1, r0, sl
 808185c:	463a      	mov	r2, r7
 808185e:	4648      	mov	r0, r9
 8081860:	f011 fc1d 	bl	809309e <memcpy>
 8081864:	e7e6      	b.n	8081834 <_ZN7FatFile4readEPvj+0x11e>
 8081866:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 808186a:	f7ff f8c3 	bl	80809f4 <_ZN9FatVolume9cacheSyncEv>
 808186e:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8081872:	2800      	cmp	r0, #0
 8081874:	d1ca      	bne.n	808180c <_ZN7FatFile4readEPvj+0xf6>
 8081876:	e75f      	b.n	8081738 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8081878:	b003      	add	sp, #12
 808187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808187e <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 808187e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8081880:	2201      	movs	r2, #1
 8081882:	f10d 0107 	add.w	r1, sp, #7
 8081886:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 8081888:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 808188a:	6905      	ldr	r5, [r0, #16]
 808188c:	f7ff ff43 	bl	8081716 <_ZN7FatFile4readEPvj>
 8081890:	2801      	cmp	r0, #1
 8081892:	bf09      	itett	eq
 8081894:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8081898:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 808189c:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 808189e:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 80818a0:	b002      	add	sp, #8
 80818a2:	bd70      	pop	{r4, r5, r6, pc}

080818a4 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80818a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80818a6:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80818a8:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80818aa:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 80818ae:	b105      	cbz	r5, 80818b2 <_ZN7FatFile12readDirCacheEb+0xe>
 80818b0:	b969      	cbnz	r1, 80818ce <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 80818b2:	2201      	movs	r2, #1
 80818b4:	f10d 0107 	add.w	r1, sp, #7
 80818b8:	4620      	mov	r0, r4
 80818ba:	f7ff ff2c 	bl	8081716 <_ZN7FatFile4readEPvj>
 80818be:	b240      	sxtb	r0, r0
    if  (n != 1) {
 80818c0:	2801      	cmp	r0, #1
 80818c2:	d001      	beq.n	80818c8 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 80818c4:	2000      	movs	r0, #0
 80818c6:	e008      	b.n	80818da <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 80818c8:	6963      	ldr	r3, [r4, #20]
 80818ca:	331f      	adds	r3, #31
 80818cc:	e000      	b.n	80818d0 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 80818ce:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80818d0:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 80818d2:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80818d4:	3034      	adds	r0, #52	; 0x34
 80818d6:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 80818da:	b003      	add	sp, #12
 80818dc:	bd30      	pop	{r4, r5, pc}

080818de <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80818de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80818e2:	460e      	mov	r6, r1
 80818e4:	7801      	ldrb	r1, [r0, #0]
 80818e6:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80818e8:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80818ea:	2900      	cmp	r1, #0
 80818ec:	d039      	beq.n	8081962 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80818ee:	6945      	ldr	r5, [r0, #20]
 80818f0:	42b5      	cmp	r5, r6
 80818f2:	d03a      	beq.n	808196a <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 80818f4:	b90e      	cbnz	r6, 80818fa <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 80818f6:	6106      	str	r6, [r0, #16]
    goto done;
 80818f8:	e031      	b.n	808195e <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 80818fa:	070b      	lsls	r3, r1, #28
 80818fc:	d503      	bpl.n	8081906 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 80818fe:	69c3      	ldr	r3, [r0, #28]
 8081900:	429e      	cmp	r6, r3
 8081902:	d82e      	bhi.n	8081962 <_ZN7FatFile7seekSetEm+0x84>
 8081904:	e007      	b.n	8081916 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8081906:	0688      	lsls	r0, r1, #26
 8081908:	d505      	bpl.n	8081916 <_ZN7FatFile7seekSetEm+0x38>
 808190a:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 808190c:	891b      	ldrh	r3, [r3, #8]
 808190e:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8081912:	d826      	bhi.n	8081962 <_ZN7FatFile7seekSetEm+0x84>
 8081914:	e023      	b.n	808195e <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081916:	f8d4 e008 	ldr.w	lr, [r4, #8]
 808191a:	1e6a      	subs	r2, r5, #1
 808191c:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8081920:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8081924:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081926:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8081928:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 808192a:	429a      	cmp	r2, r3
 808192c:	d800      	bhi.n	8081930 <_ZN7FatFile7seekSetEm+0x52>
 808192e:	b94d      	cbnz	r5, 8081944 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8081930:	064a      	lsls	r2, r1, #25
 8081932:	bf4c      	ite	mi
 8081934:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8081938:	6a22      	ldrpl	r2, [r4, #32]
 808193a:	6122      	str	r2, [r4, #16]
 808193c:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808193e:	f104 0810 	add.w	r8, r4, #16
 8081942:	e00a      	b.n	808195a <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8081944:	1a9b      	subs	r3, r3, r2
 8081946:	e7f9      	b.n	808193c <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8081948:	4642      	mov	r2, r8
 808194a:	6921      	ldr	r1, [r4, #16]
 808194c:	68a0      	ldr	r0, [r4, #8]
 808194e:	f000 fa26 	bl	8081d9e <_ZN9FatVolume6fatGetEmPm>
 8081952:	2800      	cmp	r0, #0
 8081954:	f105 35ff 	add.w	r5, r5, #4294967295
 8081958:	dd03      	ble.n	8081962 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 808195a:	2d00      	cmp	r5, #0
 808195c:	d1f4      	bne.n	8081948 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 808195e:	6166      	str	r6, [r4, #20]
 8081960:	e003      	b.n	808196a <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 8081962:	6127      	str	r7, [r4, #16]
  return false;
 8081964:	2000      	movs	r0, #0
 8081966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 808196a:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 808196c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081970 <_ZN7FatFile15openCachedEntryEPS_thh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 8081970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081972:	460f      	mov	r7, r1
 8081974:	4604      	mov	r4, r0
 8081976:	4616      	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8081978:	2100      	movs	r1, #0
 808197a:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 808197c:	461d      	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 808197e:	f011 fbb4 	bl	80930ea <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8081982:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8081984:	80a6      	strh	r6, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8081986:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8081988:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 808198a:	f006 020f 	and.w	r2, r6, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 808198e:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8081990:	0152      	lsls	r2, r2, #5
 8081992:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8081996:	4413      	add	r3, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8081998:	7ad9      	ldrb	r1, [r3, #11]
 808199a:	070f      	lsls	r7, r1, #28
 808199c:	d502      	bpl.n	80819a4 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 808199e:	2000      	movs	r0, #0
 80819a0:	7020      	strb	r0, [r4, #0]
  return false;
 80819a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80819a4:	1881      	adds	r1, r0, r2
 80819a6:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 80819aa:	f001 0117 	and.w	r1, r1, #23
 80819ae:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80819b0:	7adb      	ldrb	r3, [r3, #11]
 80819b2:	f013 0f18 	tst.w	r3, #24
    m_attr |= FILE_ATTR_FILE;
 80819b6:	bf08      	it	eq
 80819b8:	f041 0108 	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
 80819bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
 80819c0:	bf08      	it	eq
 80819c2:	7021      	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80819c4:	f015 0f32 	tst.w	r5, #50	; 0x32
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
 80819c8:	70e3      	strb	r3, [r4, #3]
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80819ca:	d003      	beq.n	80819d4 <_ZN7FatFile15openCachedEntryEPS_thh+0x64>
    if (isSubDir() || isReadOnly()) {
 80819cc:	7823      	ldrb	r3, [r4, #0]
 80819ce:	f013 0f11 	tst.w	r3, #17
 80819d2:	d1e4      	bne.n	808199e <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
 80819d4:	f005 030f 	and.w	r3, r5, #15
 80819d8:	70a3      	strb	r3, [r4, #2]
 80819da:	6b03      	ldr	r3, [r0, #48]	; 0x30

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80819dc:	4402      	add	r2, r0
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;

  m_dirBlock = m_vol->cacheBlockNumber();
 80819de:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80819e0:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 80819e4:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e

  if (oflag & O_TRUNC) {
 80819e8:	06ee      	lsls	r6, r5, #27

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80819ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16

  if (oflag & O_TRUNC) {
 80819ee:	d504      	bpl.n	80819fa <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80819f0:	b171      	cbz	r1, 8081a10 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 80819f2:	f000 fa68 	bl	8081ec6 <_ZN9FatVolume9freeChainEm>
 80819f6:	b958      	cbnz	r0, 8081a10 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 80819f8:	e7d1      	b.n	808199e <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 80819fa:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 80819fc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80819fe:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8081a00:	06ab      	lsls	r3, r5, #26
 8081a02:	d50a      	bpl.n	8081a1a <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 8081a04:	69e1      	ldr	r1, [r4, #28]
 8081a06:	4620      	mov	r0, r4
 8081a08:	f7ff ff69 	bl	80818de <_ZN7FatFile7seekSetEm>
 8081a0c:	b928      	cbnz	r0, 8081a1a <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 8081a0e:	e7c6      	b.n	808199e <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 8081a10:	78a3      	ldrb	r3, [r4, #2]
 8081a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8081a16:	70a3      	strb	r3, [r4, #2]
 8081a18:	e7f2      	b.n	8081a00 <_ZN7FatFile15openCachedEntryEPS_thh+0x90>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 8081a1a:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 8081a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08081a20 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8081a20:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8081a22:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8081a24:	4604      	mov	r4, r0
  if (!isOpen()) {
 8081a26:	b90b      	cbnz	r3, 8081a2c <_ZN7FatFile4syncEv+0xc>
    return true;
 8081a28:	2001      	movs	r0, #1
 8081a2a:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 8081a2c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8081a30:	2b00      	cmp	r3, #0
 8081a32:	da23      	bge.n	8081a7c <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8081a34:	2101      	movs	r1, #1
 8081a36:	f7ff fe47 	bl	80816c8 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081a3a:	4605      	mov	r5, r0
 8081a3c:	b928      	cbnz	r0, 8081a4a <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081a3e:	7863      	ldrb	r3, [r4, #1]
  return false;
 8081a40:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081a42:	f043 0301 	orr.w	r3, r3, #1
 8081a46:	7063      	strb	r3, [r4, #1]
 8081a48:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081a4a:	7803      	ldrb	r3, [r0, #0]
 8081a4c:	2be5      	cmp	r3, #229	; 0xe5
 8081a4e:	d0f6      	beq.n	8081a3e <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 8081a50:	7823      	ldrb	r3, [r4, #0]
 8081a52:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8081a54:	bf44      	itt	mi
 8081a56:	69e3      	ldrmi	r3, [r4, #28]
 8081a58:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8081a5a:	8c23      	ldrh	r3, [r4, #32]
 8081a5c:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8081a5e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8081a60:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 8081a62:	4b09      	ldr	r3, [pc, #36]	; (8081a88 <_ZN7FatFile4syncEv+0x68>)
 8081a64:	681b      	ldr	r3, [r3, #0]
 8081a66:	b12b      	cbz	r3, 8081a74 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8081a68:	f100 0116 	add.w	r1, r0, #22
 8081a6c:	3018      	adds	r0, #24
 8081a6e:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8081a70:	8b2b      	ldrh	r3, [r5, #24]
 8081a72:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8081a74:	78a3      	ldrb	r3, [r4, #2]
 8081a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8081a7a:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8081a7c:	68a0      	ldr	r0, [r4, #8]
 8081a7e:	f7fe ffb9 	bl	80809f4 <_ZN9FatVolume9cacheSyncEv>
 8081a82:	2800      	cmp	r0, #0
 8081a84:	d0db      	beq.n	8081a3e <_ZN7FatFile4syncEv+0x1e>
 8081a86:	e7cf      	b.n	8081a28 <_ZN7FatFile4syncEv+0x8>
 8081a88:	20000f3c 	.word	0x20000f3c

08081a8c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8081a8c:	b510      	push	{r4, lr}
 8081a8e:	4604      	mov	r4, r0
  bool rtn = sync();
 8081a90:	f7ff ffc6 	bl	8081a20 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8081a94:	2300      	movs	r3, #0
 8081a96:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8081a98:	bd10      	pop	{r4, pc}

08081a9a <_ZN7FatFile4openEPS_PKch>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8081a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081a9c:	461f      	mov	r7, r3
 8081a9e:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8081aa0:	2300      	movs	r3, #0
 8081aa2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8081aa6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081aaa:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8081aac:	4606      	mov	r6, r0
 8081aae:	460c      	mov	r4, r1
 8081ab0:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081ab2:	b10b      	cbz	r3, 8081ab8 <_ZN7FatFile4openEPS_PKch+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8081ab4:	2000      	movs	r0, #0
 8081ab6:	e03d      	b.n	8081b34 <_ZN7FatFile4openEPS_PKch+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081ab8:	780b      	ldrb	r3, [r1, #0]
 8081aba:	f013 0f70 	tst.w	r3, #112	; 0x70
 8081abe:	d0f9      	beq.n	8081ab4 <_ZN7FatFile4openEPS_PKch+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8081ac0:	7813      	ldrb	r3, [r2, #0]
 8081ac2:	2b2f      	cmp	r3, #47	; 0x2f
 8081ac4:	d112      	bne.n	8081aec <_ZN7FatFile4openEPS_PKch+0x52>
    while (isDirSeparator(*path)) {
 8081ac6:	9b01      	ldr	r3, [sp, #4]
 8081ac8:	781a      	ldrb	r2, [r3, #0]
 8081aca:	2a2f      	cmp	r2, #47	; 0x2f
 8081acc:	d102      	bne.n	8081ad4 <_ZN7FatFile4openEPS_PKch+0x3a>
      path++;
 8081ace:	3301      	adds	r3, #1
 8081ad0:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 8081ad2:	e7f8      	b.n	8081ac6 <_ZN7FatFile4openEPS_PKch+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8081ad4:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8081ad6:	b91a      	cbnz	r2, 8081ae0 <_ZN7FatFile4openEPS_PKch+0x46>
      return openRoot(dirFile->m_vol);
 8081ad8:	4630      	mov	r0, r6
 8081ada:	f7ff fe04 	bl	80816e6 <_ZN7FatFile8openRootEP9FatVolume>
 8081ade:	e029      	b.n	8081b34 <_ZN7FatFile4openEPS_PKch+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8081ae0:	a809      	add	r0, sp, #36	; 0x24
 8081ae2:	f7ff fe00 	bl	80816e6 <_ZN7FatFile8openRootEP9FatVolume>
 8081ae6:	2800      	cmp	r0, #0
 8081ae8:	d0e4      	beq.n	8081ab4 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 8081aea:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 8081aec:	aa01      	add	r2, sp, #4
 8081aee:	a903      	add	r1, sp, #12
 8081af0:	9801      	ldr	r0, [sp, #4]
 8081af2:	f7fe ff9b 	bl	8080a2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8081af6:	2800      	cmp	r0, #0
 8081af8:	d0dc      	beq.n	8081ab4 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 8081afa:	9b01      	ldr	r3, [sp, #4]
 8081afc:	781b      	ldrb	r3, [r3, #0]
 8081afe:	b19b      	cbz	r3, 8081b28 <_ZN7FatFile4openEPS_PKch+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
 8081b00:	2301      	movs	r3, #1
 8081b02:	aa03      	add	r2, sp, #12
 8081b04:	4621      	mov	r1, r4
 8081b06:	4630      	mov	r0, r6
 8081b08:	f7ff f8d2 	bl	8080cb0 <_ZN7FatFile4openEPS_P7fname_th>
 8081b0c:	2800      	cmp	r0, #0
 8081b0e:	d0d1      	beq.n	8081ab4 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8081b10:	4635      	mov	r5, r6
 8081b12:	ac09      	add	r4, sp, #36	; 0x24
 8081b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081b1c:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 8081b1e:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8081b20:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 8081b22:	f7ff ffb3 	bl	8081a8c <_ZN7FatFile5closeEv>
 8081b26:	e7e0      	b.n	8081aea <_ZN7FatFile4openEPS_PKch+0x50>
  }
  return open(dirFile, &fname, oflag);
 8081b28:	463b      	mov	r3, r7
 8081b2a:	aa03      	add	r2, sp, #12
 8081b2c:	4621      	mov	r1, r4
 8081b2e:	4630      	mov	r0, r6
 8081b30:	f7ff f8be 	bl	8080cb0 <_ZN7FatFile4openEPS_P7fname_th>

fail:
  return false;
}
 8081b34:	b013      	add	sp, #76	; 0x4c
 8081b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081b38 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8081b3c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081b3e:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8081b40:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081b42:	4689      	mov	r9, r1
 8081b44:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8081b46:	d508      	bpl.n	8081b5a <_ZN7FatFile5writeEPKvj+0x22>
 8081b48:	7883      	ldrb	r3, [r0, #2]
 8081b4a:	0799      	lsls	r1, r3, #30
 8081b4c:	d505      	bpl.n	8081b5a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 8081b4e:	075b      	lsls	r3, r3, #29
 8081b50:	d50b      	bpl.n	8081b6a <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 8081b52:	69e1      	ldr	r1, [r4, #28]
 8081b54:	f7ff fec3 	bl	80818de <_ZN7FatFile7seekSetEm>
 8081b58:	b938      	cbnz	r0, 8081b6a <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8081b5a:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8081b5c:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8081b60:	f043 0301 	orr.w	r3, r3, #1
 8081b64:	7063      	strb	r3, [r4, #1]
  return -1;
 8081b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8081b6a:	6963      	ldr	r3, [r4, #20]
 8081b6c:	43db      	mvns	r3, r3
 8081b6e:	4598      	cmp	r8, r3
 8081b70:	d8f3      	bhi.n	8081b5a <_ZN7FatFile5writeEPKvj+0x22>
 8081b72:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081b74:	f04f 0a00 	mov.w	sl, #0
 8081b78:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8081b7a:	2f00      	cmp	r7, #0
 8081b7c:	f000 8082 	beq.w	8081c84 <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8081b80:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8081b82:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8081b86:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8081b88:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 8081b8c:	d11c      	bne.n	8081bc8 <_ZN7FatFile5writeEPKvj+0x90>
 8081b8e:	b9de      	cbnz	r6, 8081bc8 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 8081b90:	6921      	ldr	r1, [r4, #16]
 8081b92:	b171      	cbz	r1, 8081bb2 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081b94:	f104 0210 	add.w	r2, r4, #16
 8081b98:	f000 f901 	bl	8081d9e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8081b9c:	2800      	cmp	r0, #0
 8081b9e:	dbdc      	blt.n	8081b5a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8081ba0:	f040 808e 	bne.w	8081cc0 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 8081ba4:	4620      	mov	r0, r4
 8081ba6:	f7ff fd45 	bl	8081634 <_ZN7FatFile10addClusterEv>
 8081baa:	2800      	cmp	r0, #0
 8081bac:	f040 8088 	bne.w	8081cc0 <_ZN7FatFile5writeEPKvj+0x188>
 8081bb0:	e7d3      	b.n	8081b5a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 8081bb2:	6a23      	ldr	r3, [r4, #32]
 8081bb4:	b93b      	cbnz	r3, 8081bc6 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 8081bb6:	4620      	mov	r0, r4
 8081bb8:	f7ff fd3c 	bl	8081634 <_ZN7FatFile10addClusterEv>
 8081bbc:	2800      	cmp	r0, #0
 8081bbe:	d0cc      	beq.n	8081b5a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 8081bc0:	6923      	ldr	r3, [r4, #16]
 8081bc2:	6223      	str	r3, [r4, #32]
 8081bc4:	e000      	b.n	8081bc8 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 8081bc6:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8081bc8:	6921      	ldr	r1, [r4, #16]
 8081bca:	68a0      	ldr	r0, [r4, #8]
 8081bcc:	f000 f8e1 	bl	8081d92 <_ZNK9FatVolume17clusterStartBlockEm>
 8081bd0:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8081bd2:	b916      	cbnz	r6, 8081bda <_ZN7FatFile5writeEPKvj+0xa2>
 8081bd4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8081bd8:	d221      	bcs.n	8081c1e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8081bda:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 8081bde:	42bd      	cmp	r5, r7
 8081be0:	bf28      	it	cs
 8081be2:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8081be4:	b936      	cbnz	r6, 8081bf4 <_ZN7FatFile5writeEPKvj+0xbc>
 8081be6:	6963      	ldr	r3, [r4, #20]
 8081be8:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8081bea:	4293      	cmp	r3, r2
 8081bec:	bf34      	ite	cc
 8081bee:	2201      	movcc	r2, #1
 8081bf0:	2205      	movcs	r2, #5
 8081bf2:	e000      	b.n	8081bf6 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8081bf4:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081bf6:	68a0      	ldr	r0, [r4, #8]
 8081bf8:	3028      	adds	r0, #40	; 0x28
 8081bfa:	f000 f8a6 	bl	8081d4a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8081bfe:	2800      	cmp	r0, #0
 8081c00:	d0ab      	beq.n	8081b5a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8081c02:	4430      	add	r0, r6
 8081c04:	462a      	mov	r2, r5
 8081c06:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8081c08:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8081c0a:	f011 fa48 	bl	809309e <memcpy>
      if (512 == (n + blockOffset)) {
 8081c0e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081c12:	d131      	bne.n	8081c78 <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8081c14:	68a0      	ldr	r0, [r4, #8]
 8081c16:	3028      	adds	r0, #40	; 0x28
 8081c18:	f000 f870 	bl	8081cfc <_ZN8FatCache4syncEv>
 8081c1c:	e018      	b.n	8081c50 <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 8081c1e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8081c22:	68a2      	ldr	r2, [r4, #8]
 8081c24:	d316      	bcc.n	8081c54 <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8081c26:	7913      	ldrb	r3, [r2, #4]
 8081c28:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8081c2a:	1b5d      	subs	r5, r3, r5
 8081c2c:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 8081c2e:	f3c7 2347 	ubfx	r3, r7, #9, #8
 8081c32:	42ab      	cmp	r3, r5
 8081c34:	bf28      	it	cs
 8081c36:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8081c38:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 8081c3a:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8081c3e:	d302      	bcc.n	8081c46 <_ZN7FatFile5writeEPKvj+0x10e>
 8081c40:	4418      	add	r0, r3
 8081c42:	4281      	cmp	r1, r0
 8081c44:	d336      	bcc.n	8081cb4 <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8081c46:	68a0      	ldr	r0, [r4, #8]
 8081c48:	6802      	ldr	r2, [r0, #0]
 8081c4a:	68d6      	ldr	r6, [r2, #12]
 8081c4c:	464a      	mov	r2, r9
 8081c4e:	47b0      	blx	r6
 8081c50:	b990      	cbnz	r0, 8081c78 <_ZN7FatFile5writeEPKvj+0x140>
 8081c52:	e782      	b.n	8081b5a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8081c54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8081c56:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8081c58:	bf02      	ittt	eq
 8081c5a:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081c5e:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8081c62:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8081c64:	68a0      	ldr	r0, [r4, #8]
 8081c66:	464a      	mov	r2, r9
 8081c68:	6803      	ldr	r3, [r0, #0]
 8081c6a:	685b      	ldr	r3, [r3, #4]
 8081c6c:	4798      	blx	r3
 8081c6e:	2800      	cmp	r0, #0
 8081c70:	f43f af73 	beq.w	8081b5a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8081c74:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8081c78:	6963      	ldr	r3, [r4, #20]
    src += n;
 8081c7a:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8081c7c:	442b      	add	r3, r5
 8081c7e:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8081c80:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8081c82:	e779      	b.n	8081b78 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8081c84:	69e2      	ldr	r2, [r4, #28]
 8081c86:	4293      	cmp	r3, r2
 8081c88:	78a2      	ldrb	r2, [r4, #2]
 8081c8a:	d901      	bls.n	8081c90 <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8081c8c:	61e3      	str	r3, [r4, #28]
 8081c8e:	e002      	b.n	8081c96 <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8081c90:	4b0e      	ldr	r3, [pc, #56]	; (8081ccc <_ZN7FatFile5writeEPKvj+0x194>)
 8081c92:	681b      	ldr	r3, [r3, #0]
 8081c94:	b113      	cbz	r3, 8081c9c <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 8081c96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8081c9a:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 8081c9c:	78a3      	ldrb	r3, [r4, #2]
 8081c9e:	071a      	lsls	r2, r3, #28
 8081ca0:	d402      	bmi.n	8081ca8 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 8081ca2:	4640      	mov	r0, r8
 8081ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 8081ca8:	4620      	mov	r0, r4
 8081caa:	f7ff feb9 	bl	8081a20 <_ZN7FatFile4syncEv>
 8081cae:	2800      	cmp	r0, #0
 8081cb0:	d1f7      	bne.n	8081ca2 <_ZN7FatFile5writeEPKvj+0x16a>
 8081cb2:	e752      	b.n	8081b5a <_ZN7FatFile5writeEPKvj+0x22>
 8081cb4:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081cb8:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8081cbc:	6310      	str	r0, [r2, #48]	; 0x30
 8081cbe:	e7c2      	b.n	8081c46 <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8081cc0:	6921      	ldr	r1, [r4, #16]
 8081cc2:	68a0      	ldr	r0, [r4, #8]
 8081cc4:	f000 f865 	bl	8081d92 <_ZNK9FatVolume17clusterStartBlockEm>
 8081cc8:	4601      	mov	r1, r0
 8081cca:	e783      	b.n	8081bd4 <_ZN7FatFile5writeEPKvj+0x9c>
 8081ccc:	20000f3c 	.word	0x20000f3c

08081cd0 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8081cd0:	f00e bcf0 	b.w	80906b4 <HAL_Pin_Map>

08081cd4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8081cd4:	b570      	push	{r4, r5, r6, lr}
 8081cd6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081cd8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081cda:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081cdc:	b149      	cbz	r1, 8081cf2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8081cde:	f011 fa24 	bl	809312a <strlen>
 8081ce2:	682b      	ldr	r3, [r5, #0]
 8081ce4:	4602      	mov	r2, r0
 8081ce6:	4621      	mov	r1, r4
 8081ce8:	4628      	mov	r0, r5
    }
 8081cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8081cee:	68db      	ldr	r3, [r3, #12]
 8081cf0:	4718      	bx	r3
    }
 8081cf2:	bd70      	pop	{r4, r5, r6, pc}

08081cf4 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8081cf4:	f00e bcde 	b.w	80906b4 <HAL_Pin_Map>

08081cf8 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8081cf8:	f00e bcdc 	b.w	80906b4 <HAL_Pin_Map>

08081cfc <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8081cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8081cfe:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8081d00:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8081d02:	07da      	lsls	r2, r3, #31
 8081d04:	d51e      	bpl.n	8081d44 <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8081d06:	6840      	ldr	r0, [r0, #4]
 8081d08:	f104 060c 	add.w	r6, r4, #12
 8081d0c:	6803      	ldr	r3, [r0, #0]
 8081d0e:	4632      	mov	r2, r6
 8081d10:	685b      	ldr	r3, [r3, #4]
 8081d12:	68a1      	ldr	r1, [r4, #8]
 8081d14:	4798      	blx	r3
 8081d16:	4605      	mov	r5, r0
 8081d18:	b908      	cbnz	r0, 8081d1e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8081d1a:	2500      	movs	r5, #0
 8081d1c:	e013      	b.n	8081d46 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8081d1e:	7823      	ldrb	r3, [r4, #0]
 8081d20:	079b      	lsls	r3, r3, #30
 8081d22:	d404      	bmi.n	8081d2e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8081d24:	7823      	ldrb	r3, [r4, #0]
 8081d26:	f023 0301 	bic.w	r3, r3, #1
 8081d2a:	7023      	strb	r3, [r4, #0]
 8081d2c:	e00b      	b.n	8081d46 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8081d2e:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8081d30:	68a7      	ldr	r7, [r4, #8]
 8081d32:	6901      	ldr	r1, [r0, #16]
 8081d34:	6803      	ldr	r3, [r0, #0]
 8081d36:	4632      	mov	r2, r6
 8081d38:	685b      	ldr	r3, [r3, #4]
 8081d3a:	4439      	add	r1, r7
 8081d3c:	4798      	blx	r3
 8081d3e:	2800      	cmp	r0, #0
 8081d40:	d1f0      	bne.n	8081d24 <_ZN8FatCache4syncEv+0x28>
 8081d42:	e7ea      	b.n	8081d1a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8081d44:	2501      	movs	r5, #1

fail:
  return false;
}
 8081d46:	4628      	mov	r0, r5
 8081d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081d4a <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081d4a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8081d4c:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081d4e:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8081d50:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081d52:	460e      	mov	r6, r1
 8081d54:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8081d56:	d014      	beq.n	8081d82 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8081d58:	f7ff ffd0 	bl	8081cfc <_ZN8FatCache4syncEv>
 8081d5c:	b908      	cbnz	r0, 8081d62 <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 8081d5e:	2000      	movs	r0, #0
 8081d60:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 8081d62:	076b      	lsls	r3, r5, #29
 8081d64:	d503      	bpl.n	8081d6e <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 8081d66:	2300      	movs	r3, #0
 8081d68:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 8081d6a:	60a6      	str	r6, [r4, #8]
 8081d6c:	e009      	b.n	8081d82 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8081d6e:	6860      	ldr	r0, [r4, #4]
 8081d70:	f104 020c 	add.w	r2, r4, #12
 8081d74:	6803      	ldr	r3, [r0, #0]
 8081d76:	4631      	mov	r1, r6
 8081d78:	681b      	ldr	r3, [r3, #0]
 8081d7a:	4798      	blx	r3
 8081d7c:	2800      	cmp	r0, #0
 8081d7e:	d1f2      	bne.n	8081d66 <_ZN8FatCache4readEmh+0x1c>
 8081d80:	e7ed      	b.n	8081d5e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8081d82:	4620      	mov	r0, r4
 8081d84:	7823      	ldrb	r3, [r4, #0]
 8081d86:	f005 0503 	and.w	r5, r5, #3
 8081d8a:	431d      	orrs	r5, r3
 8081d8c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 8081d90:	bd70      	pop	{r4, r5, r6, pc}

08081d92 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8081d92:	7983      	ldrb	r3, [r0, #6]
 8081d94:	3902      	subs	r1, #2
 8081d96:	6940      	ldr	r0, [r0, #20]
 8081d98:	4099      	lsls	r1, r3
}
 8081d9a:	4408      	add	r0, r1
 8081d9c:	4770      	bx	lr

08081d9e <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081d9e:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081da0:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081da2:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081da4:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081da6:	460c      	mov	r4, r1
 8081da8:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081daa:	d112      	bne.n	8081dd2 <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8081dac:	6981      	ldr	r1, [r0, #24]
 8081dae:	2202      	movs	r2, #2
 8081db0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081db4:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081db8:	f7ff ffc7 	bl	8081d4a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081dbc:	b910      	cbnz	r0, 8081dc4 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8081dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8081dc2:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8081dc4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8081dc8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8081dcc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8081dd0:	e00f      	b.n	8081df2 <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 8081dd2:	2b10      	cmp	r3, #16
 8081dd4:	d1f3      	bne.n	8081dbe <_ZN9FatVolume6fatGetEmPm+0x20>
 8081dd6:	6983      	ldr	r3, [r0, #24]
 8081dd8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8081ddc:	2202      	movs	r2, #2
 8081dde:	4419      	add	r1, r3
 8081de0:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081de4:	f7ff ffb1 	bl	8081d4a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081de8:	2800      	cmp	r0, #0
 8081dea:	d0e8      	beq.n	8081dbe <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8081dec:	b2e4      	uxtb	r4, r4
 8081dee:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 8081df2:	69ea      	ldr	r2, [r5, #28]
 8081df4:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8081df6:	bf9a      	itte	ls
 8081df8:	6033      	strls	r3, [r6, #0]
  return 1;
 8081dfa:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8081dfc:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8081dfe:	bd70      	pop	{r4, r5, r6, pc}

08081e00 <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081e00:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081e02:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081e04:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081e06:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081e08:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081e0a:	d10f      	bne.n	8081e2c <_ZN9FatVolume6fatPutEmm+0x2c>
 8081e0c:	6981      	ldr	r1, [r0, #24]
 8081e0e:	2203      	movs	r2, #3
 8081e10:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081e14:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081e18:	f7ff ff97 	bl	8081d4a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081e1c:	b908      	cbnz	r0, 8081e22 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8081e1e:	2000      	movs	r0, #0
 8081e20:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8081e22:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8081e26:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8081e2a:	e00f      	b.n	8081e4c <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 8081e2c:	2b10      	cmp	r3, #16
 8081e2e:	d1f6      	bne.n	8081e1e <_ZN9FatVolume6fatPutEmm+0x1e>
 8081e30:	6983      	ldr	r3, [r0, #24]
 8081e32:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8081e36:	2203      	movs	r2, #3
 8081e38:	4419      	add	r1, r3
 8081e3a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081e3e:	f7ff ff84 	bl	8081d4a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081e42:	2800      	cmp	r0, #0
 8081e44:	d0eb      	beq.n	8081e1e <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8081e46:	b2e4      	uxtb	r4, r4
 8081e48:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8081e4c:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8081e4e:	bd38      	pop	{r3, r4, r5, pc}

08081e50 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8081e50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8081e54:	4605      	mov	r5, r0
 8081e56:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8081e58:	460f      	mov	r7, r1
 8081e5a:	b909      	cbnz	r1, 8081e60 <_ZN9FatVolume15allocateClusterEmPm+0x10>
 8081e5c:	68c6      	ldr	r6, [r0, #12]
 8081e5e:	e000      	b.n	8081e62 <_ZN9FatVolume15allocateClusterEmPm+0x12>
 8081e60:	460e      	mov	r6, r1
 8081e62:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 8081e64:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 8081e66:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 8081e68:	429c      	cmp	r4, r3
 8081e6a:	bf88      	it	hi
 8081e6c:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8081e6e:	aa01      	add	r2, sp, #4
 8081e70:	4621      	mov	r1, r4
 8081e72:	4628      	mov	r0, r5
 8081e74:	f7ff ff93 	bl	8081d9e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8081e78:	2800      	cmp	r0, #0
 8081e7a:	db0d      	blt.n	8081e98 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8081e7c:	d001      	beq.n	8081e82 <_ZN9FatVolume15allocateClusterEmPm+0x32>
 8081e7e:	9b01      	ldr	r3, [sp, #4]
 8081e80:	b113      	cbz	r3, 8081e88 <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 8081e82:	42b4      	cmp	r4, r6
 8081e84:	d1ee      	bne.n	8081e64 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8081e86:	e007      	b.n	8081e98 <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8081e88:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8081e8c:	4621      	mov	r1, r4
 8081e8e:	4628      	mov	r0, r5
 8081e90:	f7ff ffb6 	bl	8081e00 <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 8081e94:	4606      	mov	r6, r0
 8081e96:	b908      	cbnz	r0, 8081e9c <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8081e98:	2600      	movs	r6, #0
 8081e9a:	e010      	b.n	8081ebe <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8081e9c:	b137      	cbz	r7, 8081eac <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 8081e9e:	4622      	mov	r2, r4
 8081ea0:	4639      	mov	r1, r7
 8081ea2:	4628      	mov	r0, r5
 8081ea4:	f7ff ffac 	bl	8081e00 <_ZN9FatVolume6fatPutEmm>
 8081ea8:	b908      	cbnz	r0, 8081eae <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 8081eaa:	e7f5      	b.n	8081e98 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 8081eac:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8081eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8081eb0:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8081eb2:	bfa4      	itt	ge
 8081eb4:	f103 33ff 	addge.w	r3, r3, #4294967295
 8081eb8:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 8081eba:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 8081ebe:	4630      	mov	r0, r6
 8081ec0:	b002      	add	sp, #8
 8081ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081ec6 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8081ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8081ec8:	4604      	mov	r4, r0
 8081eca:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8081ecc:	aa01      	add	r2, sp, #4
 8081ece:	4629      	mov	r1, r5
 8081ed0:	4620      	mov	r0, r4
 8081ed2:	f7ff ff64 	bl	8081d9e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8081ed6:	1e06      	subs	r6, r0, #0
 8081ed8:	da01      	bge.n	8081ede <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8081eda:	2000      	movs	r0, #0
 8081edc:	e012      	b.n	8081f04 <_ZN9FatVolume9freeChainEm+0x3e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8081ede:	2200      	movs	r2, #0
 8081ee0:	4629      	mov	r1, r5
 8081ee2:	4620      	mov	r0, r4
 8081ee4:	f7ff ff8c 	bl	8081e00 <_ZN9FatVolume6fatPutEmm>
 8081ee8:	2800      	cmp	r0, #0
 8081eea:	d0f6      	beq.n	8081eda <_ZN9FatVolume9freeChainEm+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8081eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8081eee:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8081ef0:	bfa4      	itt	ge
 8081ef2:	3301      	addge	r3, #1
 8081ef4:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8081ef6:	68e3      	ldr	r3, [r4, #12]
 8081ef8:	429d      	cmp	r5, r3
      m_allocSearchStart = cluster;
 8081efa:	bf38      	it	cc
 8081efc:	60e5      	strcc	r5, [r4, #12]
    }
    cluster = next;
 8081efe:	9d01      	ldr	r5, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 8081f00:	2e00      	cmp	r6, #0
 8081f02:	d1e3      	bne.n	8081ecc <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8081f04:	b002      	add	sp, #8
 8081f06:	bd70      	pop	{r4, r5, r6, pc}

08081f08 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8081f08:	b570      	push	{r4, r5, r6, lr}
 8081f0a:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8081f0c:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8081f0e:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8081f10:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8081f12:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8081f16:	71c2      	strb	r2, [r0, #7]
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8081f18:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8081f1a:	62e0      	str	r0, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081f1c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8081f20:	6303      	str	r3, [r0, #48]	; 0x30
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8081f22:	f8c4 0238 	str.w	r0, [r4, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081f26:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8081f2a:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 8081f2e:	b1a1      	cbz	r1, 8081f5a <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 8081f30:	2904      	cmp	r1, #4
 8081f32:	d860      	bhi.n	8081ff6 <_ZN9FatVolume4initEh+0xee>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081f34:	4611      	mov	r1, r2
 8081f36:	3028      	adds	r0, #40	; 0x28
 8081f38:	f7ff ff07 	bl	8081d4a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081f3c:	2800      	cmp	r0, #0
 8081f3e:	d05a      	beq.n	8081ff6 <_ZN9FatVolume4initEh+0xee>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8081f40:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8081f44:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8081f48:	065b      	lsls	r3, r3, #25
 8081f4a:	d154      	bne.n	8081ff6 <_ZN9FatVolume4initEh+0xee>
 8081f4c:	351b      	adds	r5, #27
 8081f4e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8081f52:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8081f56:	2d00      	cmp	r5, #0
 8081f58:	d04d      	beq.n	8081ff6 <_ZN9FatVolume4initEh+0xee>
 8081f5a:	2200      	movs	r2, #0
 8081f5c:	4629      	mov	r1, r5
 8081f5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8081f62:	f7ff fef2 	bl	8081d4a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 8081f66:	2800      	cmp	r0, #0
 8081f68:	d045      	beq.n	8081ff6 <_ZN9FatVolume4initEh+0xee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8081f6a:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8081f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8081f72:	d140      	bne.n	8081ff6 <_ZN9FatVolume4initEh+0xee>
 8081f74:	7c03      	ldrb	r3, [r0, #16]
 8081f76:	2b02      	cmp	r3, #2
 8081f78:	d13d      	bne.n	8081ff6 <_ZN9FatVolume4initEh+0xee>
      fbs->fatCount != 2 ||
 8081f7a:	89c3      	ldrh	r3, [r0, #14]
 8081f7c:	2b00      	cmp	r3, #0
 8081f7e:	d03a      	beq.n	8081ff6 <_ZN9FatVolume4initEh+0xee>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8081f80:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8081f82:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8081f84:	1e4b      	subs	r3, r1, #1
 8081f86:	7163      	strb	r3, [r4, #5]

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8081f88:	2300      	movs	r3, #0
 8081f8a:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8081f8c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8081f8e:	2301      	movs	r3, #1
 8081f90:	428b      	cmp	r3, r1
 8081f92:	d007      	beq.n	8081fa4 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 8081f94:	3e01      	subs	r6, #1
 8081f96:	d02e      	beq.n	8081ff6 <_ZN9FatVolume4initEh+0xee>
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8081f98:	79a2      	ldrb	r2, [r4, #6]
 8081f9a:	005b      	lsls	r3, r3, #1
 8081f9c:	3201      	adds	r2, #1
 8081f9e:	b2db      	uxtb	r3, r3
 8081fa0:	71a2      	strb	r2, [r4, #6]
 8081fa2:	e7f5      	b.n	8081f90 <_ZN9FatVolume4initEh+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8081fa4:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 8081fa6:	b902      	cbnz	r2, 8081faa <_ZN9FatVolume4initEh+0xa2>
 8081fa8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8081faa:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8081fac:	89c6      	ldrh	r6, [r0, #14]
 8081fae:	442e      	add	r6, r5
 8081fb0:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8081fb2:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8081fb6:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8081fba:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8081fbc:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8081fbe:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8081fc2:	0152      	lsls	r2, r2, #5
 8081fc4:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8081fc8:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8081fcc:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8081fce:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8081fd2:	b903      	cbnz	r3, 8081fd6 <_ZN9FatVolume4initEh+0xce>
 8081fd4:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8081fd6:	1aad      	subs	r5, r5, r2
 8081fd8:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8081fda:	79a5      	ldrb	r5, [r4, #6]
 8081fdc:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 8081fe0:	1c6b      	adds	r3, r5, #1
 8081fe2:	61e3      	str	r3, [r4, #28]
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
 8081fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8081fe8:	6263      	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);

  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8081fea:	f640 73f4 	movw	r3, #4084	; 0xff4
 8081fee:	429d      	cmp	r5, r3
 8081ff0:	d803      	bhi.n	8081ffa <_ZN9FatVolume4initEh+0xf2>
    m_fatType = 12;
 8081ff2:	230c      	movs	r3, #12
 8081ff4:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8081ff6:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8081ff8:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8081ffa:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8081ffe:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8082000:	bf89      	itett	hi
 8082002:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8082004:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8082006:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8082008:	2320      	movhi	r3, #32
 808200a:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 808200c:	2001      	movs	r0, #1

fail:
  return false;
}
 808200e:	bd70      	pop	{r4, r5, r6, pc}

08082010 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8082010:	f00e bb50 	b.w	80906b4 <HAL_Pin_Map>

08082014 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 8082014:	f00e bb4e 	b.w	80906b4 <HAL_Pin_Map>

08082018 <_GLOBAL__sub_I__ZN4TgpsC2Ev>:
 8082018:	f00e bb4c 	b.w	80906b4 <HAL_Pin_Map>

0808201c <_ZN4MQTT9debug_TlsEPviPKciS2_>:
  return 0;
}

void MQTT::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
 808201c:	4770      	bx	lr
	...

08082020 <_ZN4MQTT8send_TlsEPvPKhj>:

bool MQTT::available() {
    return tcpClient.available();
}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
 8082020:	b570      	push	{r4, r5, r6, lr}
 8082022:	4605      	mov	r5, r0
 8082024:	460c      	mov	r4, r1
 8082026:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
 8082028:	f00f f812 	bl	8091050 <_ZN9TCPClient9connectedEv>
 808202c:	b158      	cbz	r0, 8082046 <_ZN4MQTT8send_TlsEPvPKhj+0x26>
    return -1;
  }

  int ret = sock->tcpClient.write(buf, len);
 808202e:	4621      	mov	r1, r4
 8082030:	4632      	mov	r2, r6
 8082032:	4628      	mov	r0, r5
 8082034:	f00e fffa 	bl	809102c <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
 8082038:	4604      	mov	r4, r0
 808203a:	b138      	cbz	r0, 808204c <_ZN4MQTT8send_TlsEPvPKhj+0x2c>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->tcpClient.flush();
 808203c:	4628      	mov	r0, r5
 808203e:	f00e fe23 	bl	8090c88 <_ZN9TCPClient5flushEv>
  return ret;
 8082042:	4620      	mov	r0, r4
 8082044:	bd70      	pop	{r4, r5, r6, pc}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
    return -1;
 8082046:	f04f 30ff 	mov.w	r0, #4294967295
 808204a:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->tcpClient.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
 808204c:	4800      	ldr	r0, [pc, #0]	; (8082050 <_ZN4MQTT8send_TlsEPvPKhj+0x30>)
  }
  sock->tcpClient.flush();
  return ret;
}
 808204e:	bd70      	pop	{r4, r5, r6, pc}
 8082050:	ffff9780 	.word	0xffff9780

08082054 <_ZN4MQTT8recv_TlsEPvPhj>:

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
 8082054:	b570      	push	{r4, r5, r6, lr}
 8082056:	4604      	mov	r4, r0
 8082058:	460d      	mov	r5, r1
 808205a:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
 808205c:	f00e fff8 	bl	8091050 <_ZN9TCPClient9connectedEv>
 8082060:	b158      	cbz	r0, 808207a <_ZN4MQTT8recv_TlsEPvPhj+0x26>
    return -1;
  }

  if (sock->tcpClient.available() == 0) {
 8082062:	4620      	mov	r0, r4
 8082064:	f00e fed8 	bl	8090e18 <_ZN9TCPClient9availableEv>
 8082068:	b128      	cbz	r0, 8082076 <_ZN4MQTT8recv_TlsEPvPhj+0x22>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->tcpClient.read(buf, len);
 808206a:	4632      	mov	r2, r6
 808206c:	4629      	mov	r1, r5
 808206e:	4620      	mov	r0, r4
 8082070:	f00e fea1 	bl	8090db6 <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
 8082074:	b918      	cbnz	r0, 808207e <_ZN4MQTT8recv_TlsEPvPhj+0x2a>
    return MBEDTLS_ERR_SSL_WANT_READ;
 8082076:	4802      	ldr	r0, [pc, #8]	; (8082080 <_ZN4MQTT8recv_TlsEPvPhj+0x2c>)
 8082078:	bd70      	pop	{r4, r5, r6, pc}
}

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
    return -1;
 808207a:	f04f 30ff 	mov.w	r0, #4294967295
  int ret = sock->tcpClient.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
 808207e:	bd70      	pop	{r4, r5, r6, pc}
 8082080:	ffff9700 	.word	0xffff9700

08082084 <_ZN4MQTT7rng_TlsEPvPhj>:

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
 8082084:	b570      	push	{r4, r5, r6, lr}
 8082086:	460e      	mov	r6, r1
 8082088:	4615      	mov	r5, r2
 808208a:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
 808208c:	1b2b      	subs	r3, r5, r4
 808208e:	4433      	add	r3, r6
 8082090:	2b03      	cmp	r3, #3
 8082092:	d904      	bls.n	808209e <_ZN4MQTT7rng_TlsEPvPhj+0x1a>
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
 8082094:	f00e fb7e 	bl	8090794 <HAL_RNG_GetRandomNumber>
 8082098:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
 808209c:	e7f6      	b.n	808208c <_ZN4MQTT7rng_TlsEPvPhj+0x8>
 808209e:	08ac      	lsrs	r4, r5, #2
 80820a0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80820a4:	4435      	add	r5, r6
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 80820a6:	42ac      	cmp	r4, r5
 80820a8:	d004      	beq.n	80820b4 <_ZN4MQTT7rng_TlsEPvPhj+0x30>
      *data++ = HAL_RNG_GetRandomNumber();
 80820aa:	f00e fb73 	bl	8090794 <HAL_RNG_GetRandomNumber>
 80820ae:	f804 0b01 	strb.w	r0, [r4], #1
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 80820b2:	e7f8      	b.n	80820a6 <_ZN4MQTT7rng_TlsEPvPhj+0x22>
      *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
 80820b4:	2000      	movs	r0, #0
 80820b6:	bd70      	pop	{r4, r5, r6, pc}

080820b8 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:
    return false;
  }
  return true;
}

int MQTT::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
 80820b8:	b500      	push	{lr}
 80820ba:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
 80820be:	460b      	mov	r3, r1
 80820c0:	4a05      	ldr	r2, [pc, #20]	; (80820d8 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
 80820c2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80820c6:	4668      	mov	r0, sp
 80820c8:	f005 ff1e 	bl	8087f08 <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
 80820cc:	2000      	movs	r0, #0
 80820ce:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 80820d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80820d6:	bf00      	nop
 80820d8:	080938f0 	.word	0x080938f0

080820dc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
	TCPClient();
	TCPClient(sock_handle_t sock);
        virtual ~TCPClient() {};
 80820dc:	b538      	push	{r3, r4, r5, lr}
 80820de:	4b0b      	ldr	r3, [pc, #44]	; (808210c <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80820e0:	6984      	ldr	r4, [r0, #24]
 80820e2:	4605      	mov	r5, r0
 80820e4:	6003      	str	r3, [r0, #0]
 80820e6:	b17c      	cbz	r4, 8082108 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80820e8:	6863      	ldr	r3, [r4, #4]
 80820ea:	3b01      	subs	r3, #1
 80820ec:	6063      	str	r3, [r4, #4]
 80820ee:	b95b      	cbnz	r3, 8082108 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80820f0:	6823      	ldr	r3, [r4, #0]
 80820f2:	4620      	mov	r0, r4
 80820f4:	689b      	ldr	r3, [r3, #8]
 80820f6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80820f8:	68a3      	ldr	r3, [r4, #8]
 80820fa:	3b01      	subs	r3, #1
 80820fc:	60a3      	str	r3, [r4, #8]
 80820fe:	b91b      	cbnz	r3, 8082108 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 8082100:	6823      	ldr	r3, [r4, #0]
 8082102:	4620      	mov	r0, r4
 8082104:	68db      	ldr	r3, [r3, #12]
 8082106:	4798      	blx	r3
 8082108:	4628      	mov	r0, r5
 808210a:	bd38      	pop	{r3, r4, r5, pc}
 808210c:	0809673c 	.word	0x0809673c

08082110 <_ZN9TCPClientD0Ev>:
 8082110:	b510      	push	{r4, lr}
 8082112:	4604      	mov	r4, r0
 8082114:	f7ff ffe2 	bl	80820dc <_ZN9TCPClientD1Ev>
 8082118:	4620      	mov	r0, r4
 808211a:	f7fd ffc2 	bl	80800a2 <_ZdlPv>
 808211e:	4620      	mov	r0, r4
 8082120:	bd10      	pop	{r4, pc}
	...

08082124 <_ZN4MQTTC1Ev>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT() {
 8082124:	b538      	push	{r3, r4, r5, lr}
 8082126:	4604      	mov	r4, r0
 8082128:	2500      	movs	r5, #0
 808212a:	f00e ff03 	bl	8090f34 <_ZN9TCPClientC1Ev>
 808212e:	61e5      	str	r5, [r4, #28]
 8082130:	4905      	ldr	r1, [pc, #20]	; (8082148 <_ZN4MQTTC1Ev+0x24>)
 8082132:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8082136:	f00f f802 	bl	809113e <_ZN6StringC1EPK19__FlashStringHelper>
 808213a:	2301      	movs	r3, #1
 808213c:	64a5      	str	r5, [r4, #72]	; 0x48
 808213e:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->ip = NULL;
}
 8082142:	4620      	mov	r0, r4
 8082144:	bd38      	pop	{r3, r4, r5, pc}
 8082146:	bf00      	nop
 8082148:	080938f0 	.word	0x080938f0

0808214c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:
        disconnect();
        free(buffer);
    }
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 808214c:	b538      	push	{r3, r4, r5, lr}
 808214e:	4604      	mov	r4, r0
 8082150:	461d      	mov	r5, r3
    this->callback = callback;
 8082152:	9b05      	ldr	r3, [sp, #20]
 8082154:	6303      	str	r3, [r0, #48]	; 0x30
    this->tls = false;
 8082156:	2000      	movs	r0, #0
 8082158:	f884 0681 	strb.w	r0, [r4, #1665]	; 0x681
    this->tlsConnected = false;
 808215c:	f884 0680 	strb.w	r0, [r4, #1664]	; 0x680
    this->qoscallback = NULL;
 8082160:	6360      	str	r0, [r4, #52]	; 0x34
    if (ip != NULL)
 8082162:	b102      	cbz	r2, 8082166 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1a>
        this->ip = ip;
 8082164:	64a2      	str	r2, [r4, #72]	; 0x48
    if (domain != NULL)
 8082166:	b119      	cbz	r1, 8082170 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x24>
        this->domain = domain;
 8082168:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808216c:	f00f f809 	bl	8091182 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 8082170:	9b04      	ldr	r3, [sp, #16]

    this->maxpacketsize = maxpacketsize;
    if (buffer != NULL)
 8082172:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 8082174:	6523      	str	r3, [r4, #80]	; 0x50

    this->maxpacketsize = maxpacketsize;
 8082176:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 8082178:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    this->maxpacketsize = maxpacketsize;
 808217c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 8082180:	b108      	cbz	r0, 8082186 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x3a>
      delete[] buffer;
 8082182:	f7fd ff90 	bl	80800a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 8082186:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 808218a:	f7fd ff88 	bl	808009e <_Znaj>
 808218e:	61e0      	str	r0, [r4, #28]
 8082190:	bd38      	pop	{r3, r4, r5, pc}
	...

08082194 <_ZN4MQTTC1EPctPFvS0_PhjE>:

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 8082194:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8082198:	4604      	mov	r4, r0
 808219a:	4617      	mov	r7, r2
 808219c:	4698      	mov	r8, r3
 808219e:	460e      	mov	r6, r1
 80821a0:	2500      	movs	r5, #0
 80821a2:	f00e fec7 	bl	8090f34 <_ZN9TCPClientC1Ev>
 80821a6:	61e5      	str	r5, [r4, #28]
 80821a8:	490c      	ldr	r1, [pc, #48]	; (80821dc <_ZN4MQTTC1EPctPFvS0_PhjE+0x48>)
 80821aa:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80821ae:	f00e ffc6 	bl	809113e <_ZN6StringC1EPK19__FlashStringHelper>
 80821b2:	2301      	movs	r3, #1
 80821b4:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80821b8:	23ff      	movs	r3, #255	; 0xff
 80821ba:	9302      	str	r3, [sp, #8]
 80821bc:	230f      	movs	r3, #15
 80821be:	9300      	str	r3, [sp, #0]
 80821c0:	4620      	mov	r0, r4

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80821c2:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80821c4:	f8cd 8004 	str.w	r8, [sp, #4]
 80821c8:	463b      	mov	r3, r7
 80821ca:	462a      	mov	r2, r5
 80821cc:	4631      	mov	r1, r6
 80821ce:	f7ff ffbd 	bl	808214c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80821d2:	4620      	mov	r0, r4
 80821d4:	b004      	add	sp, #16
 80821d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80821da:	bf00      	nop
 80821dc:	080938f0 	.word	0x080938f0

080821e0 <_ZN4MQTT8netWriteEPhi>:
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


uint16_t MQTT::netWrite(unsigned char *buff, int length) {
 80821e0:	b510      	push	{r4, lr}
    debug_tls("netWrite!!\n");
    if (tls == false) {
 80821e2:	f890 4681 	ldrb.w	r4, [r0, #1665]	; 0x681
 80821e6:	b914      	cbnz	r4, 80821ee <_ZN4MQTT8netWriteEPhi+0xe>
        return tcpClient.write(buff, length);
 80821e8:	f00e ff20 	bl	809102c <_ZN9TCPClient5writeEPKhj>
 80821ec:	e003      	b.n	80821f6 <_ZN4MQTT8netWriteEPhi+0x16>
    } else {
        return mbedtls_ssl_write(&ssl, buff, length);
 80821ee:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 80821f2:	f008 faed 	bl	808a7d0 <mbedtls_ssl_write>
 80821f6:	b280      	uxth	r0, r0
    }
}
 80821f8:	bd10      	pop	{r4, pc}

080821fa <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80821fa:	b538      	push	{r3, r4, r5, lr}
 80821fc:	4604      	mov	r4, r0
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
 80821fe:	69c3      	ldr	r3, [r0, #28]
 8082200:	22e0      	movs	r2, #224	; 0xe0
 8082202:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 8082204:	69c3      	ldr	r3, [r0, #28]
 8082206:	2500      	movs	r5, #0
 8082208:	705d      	strb	r5, [r3, #1]
    netWrite(buffer,2);
 808220a:	2202      	movs	r2, #2
 808220c:	69c1      	ldr	r1, [r0, #28]
 808220e:	f7ff ffe7 	bl	80821e0 <_ZN4MQTT8netWriteEPhi>

    if (tls) {
 8082212:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8082216:	b1bb      	cbz	r3, 8082248 <_ZN4MQTT10disconnectEv+0x4e>
        debug_tls("tls close\n");
        tlsConnected = false;
        tls = false;
        mbedtls_x509_crt_free(&cacert);
 8082218:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
    buffer[1] = 0;
    netWrite(buffer,2);

    if (tls) {
        debug_tls("tls close\n");
        tlsConnected = false;
 808221c:	f884 5680 	strb.w	r5, [r4, #1664]	; 0x680
        tls = false;
 8082220:	f884 5681 	strb.w	r5, [r4, #1665]	; 0x681
        mbedtls_x509_crt_free(&cacert);
 8082224:	f006 fd67 	bl	8088cf6 <mbedtls_x509_crt_free>
        mbedtls_x509_crt_free(&clicert);
 8082228:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 808222c:	f006 fd63 	bl	8088cf6 <mbedtls_x509_crt_free>
        mbedtls_pk_free(&pkey);
 8082230:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8082234:	f00a fa69 	bl	808c70a <mbedtls_pk_free>
        mbedtls_ssl_config_free (&conf);
 8082238:	f504 7061 	add.w	r0, r4, #900	; 0x384
 808223c:	f008 fcb8 	bl	808abb0 <mbedtls_ssl_config_free>
        mbedtls_ssl_free (&ssl);
 8082240:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8082244:	f008 fc20 	bl	808aa88 <mbedtls_ssl_free>
    }
    tcpClient.stop();
 8082248:	4620      	mov	r0, r4
 808224a:	f00e fe23 	bl	8090e94 <_ZN9TCPClient4stopEv>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808224e:	f00e fab1 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 8082252:	6260      	str	r0, [r4, #36]	; 0x24
 8082254:	62a0      	str	r0, [r4, #40]	; 0x28
 8082256:	bd38      	pop	{r3, r4, r5, pc}

08082258 <_ZN4MQTT11isConnectedEv>:
        return mbedtls_ssl_write(&ssl, buff, length);
    }
}


bool MQTT::isConnected() {
 8082258:	b510      	push	{r4, lr}
 808225a:	4604      	mov	r4, r0
    bool rc = (int)tcpClient.connected();
 808225c:	f00e fef8 	bl	8091050 <_ZN9TCPClient9connectedEv>
    if (tls)
 8082260:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8082264:	b91b      	cbnz	r3, 808226e <_ZN4MQTT11isConnectedEv+0x16>
    }
}


bool MQTT::isConnected() {
    bool rc = (int)tcpClient.connected();
 8082266:	3000      	adds	r0, #0
 8082268:	bf18      	it	ne
 808226a:	2001      	movne	r0, #1
 808226c:	bd10      	pop	{r4, pc}
    if (tls)
        return tlsConnected;
 808226e:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
    return rc;
}
 8082272:	bd10      	pop	{r4, pc}

08082274 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 8082274:	b510      	push	{r4, lr}
 8082276:	4604      	mov	r4, r0
    if (isConnected()) {
 8082278:	f7ff ffee 	bl	8082258 <_ZN4MQTT11isConnectedEv>
 808227c:	b128      	cbz	r0, 808228a <_ZN4MQTTD1Ev+0x16>
        disconnect();
 808227e:	4620      	mov	r0, r4
 8082280:	f7ff ffbb 	bl	80821fa <_ZN4MQTT10disconnectEv>
        free(buffer);
 8082284:	69e0      	ldr	r0, [r4, #28]
 8082286:	f00e fc25 	bl	8090ad4 <free>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 808228a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808228e:	f00e ff0f 	bl	80910b0 <_ZN6StringD1Ev>
 8082292:	4620      	mov	r0, r4
 8082294:	f7ff ff22 	bl	80820dc <_ZN9TCPClientD1Ev>
    if (isConnected()) {
        disconnect();
        free(buffer);
    }
}
 8082298:	4620      	mov	r0, r4
 808229a:	bd10      	pop	{r4, pc}

0808229c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>:
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 808229c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80822a0:	4605      	mov	r5, r0
 80822a2:	4693      	mov	fp, r2
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 80822a4:	f500 7461 	add.w	r4, r0, #900	; 0x384
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 80822a8:	4699      	mov	r9, r3
    int ret;
    tls = true;
 80822aa:	2301      	movs	r3, #1
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 80822ac:	b085      	sub	sp, #20
    int ret;
    tls = true;
 80822ae:	f880 3681 	strb.w	r3, [r0, #1665]	; 0x681

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
 80822b2:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 80822b6:	4620      	mov	r0, r4
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 80822b8:	9103      	str	r1, [sp, #12]
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 80822ba:	f505 7a7a 	add.w	sl, r5, #1000	; 0x3e8
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 80822be:	f008 fc31 	bl	808ab24 <mbedtls_ssl_config_init>
    mbedtls_ssl_init(&ssl);
 80822c2:	4630      	mov	r0, r6
 80822c4:	f008 fa1a 	bl	808a6fc <mbedtls_ssl_init>
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 80822c8:	f205 571c 	addw	r7, r5, #1308	; 0x51c
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 80822cc:	4650      	mov	r0, sl
 80822ce:	f006 fd0d 	bl	8088cec <mbedtls_x509_crt_init>
    mbedtls_x509_crt_init(&clicert);
    mbedtls_pk_init(&pkey);
 80822d2:	f505 68ca 	add.w	r8, r5, #1616	; 0x650
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 80822d6:	4638      	mov	r0, r7
 80822d8:	f006 fd08 	bl	8088cec <mbedtls_x509_crt_init>
    mbedtls_pk_init(&pkey);
 80822dc:	4640      	mov	r0, r8
 80822de:	f00a fa0f 	bl	808c700 <mbedtls_pk_init>

    mbedtls_ssl_conf_dbg(&conf, &MQTT::debug_Tls, nullptr);
 80822e2:	2200      	movs	r2, #0
 80822e4:	4935      	ldr	r1, [pc, #212]	; (80823bc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x120>)
 80822e6:	4620      	mov	r0, r4
 80822e8:	f008 fa19 	bl	808a71e <mbedtls_ssl_conf_dbg>
    #if defined(MBEDTLS_DEBUG_C)
      mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
    #endif

    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
 80822ec:	465a      	mov	r2, fp
 80822ee:	9903      	ldr	r1, [sp, #12]
 80822f0:	4650      	mov	r0, sl
 80822f2:	f007 f899 	bl	8089428 <mbedtls_x509_crt_parse>
 80822f6:	2800      	cmp	r0, #0
 80822f8:	db5d      	blt.n	80823b6 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 80822fa:	f1b9 0f00 	cmp.w	r9, #0
 80822fe:	d102      	bne.n	8082306 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x6a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 8082300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8082302:	b95b      	cbnz	r3, 808231c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x80>
 8082304:	e00c      	b.n	8082320 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 8082306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8082308:	2b00      	cmp	r3, #0
 808230a:	d0f9      	beq.n	8082300 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
      if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
 808230c:	461a      	mov	r2, r3
 808230e:	4649      	mov	r1, r9
 8082310:	4638      	mov	r0, r7
 8082312:	f007 f889 	bl	8089428 <mbedtls_x509_crt_parse>
 8082316:	2800      	cmp	r0, #0
 8082318:	daf2      	bge.n	8082300 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
 808231a:	e04c      	b.n	80823b6 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 808231c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808231e:	b94b      	cbnz	r3, 8082334 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x98>
        debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
        return ret;
      }
    }

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
 8082320:	2300      	movs	r3, #0
 8082322:	461a      	mov	r2, r3
 8082324:	4619      	mov	r1, r3
 8082326:	4620      	mov	r0, r4
 8082328:	f008 fc00 	bl	808ab2c <mbedtls_ssl_config_defaults>
 808232c:	4683      	mov	fp, r0
 808232e:	2800      	cmp	r0, #0
 8082330:	d141      	bne.n	80823b6 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
 8082332:	e009      	b.n	8082348 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xac>
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
      if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
 8082334:	2300      	movs	r3, #0
 8082336:	9300      	str	r3, [sp, #0]
 8082338:	9a10      	ldr	r2, [sp, #64]	; 0x40
 808233a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 808233c:	4640      	mov	r0, r8
 808233e:	f004 ff13 	bl	8087168 <mbedtls_pk_parse_key>
 8082342:	2800      	cmp	r0, #0
 8082344:	d0ec      	beq.n	8082320 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
 8082346:	e036      	b.n	80823b6 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                   MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
      return ret;
    }
    mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
 8082348:	2203      	movs	r2, #3
 808234a:	4611      	mov	r1, r2
 808234c:	4620      	mov	r0, r4
 808234e:	f008 f9fd 	bl	808a74c <mbedtls_ssl_conf_min_version>
    mbedtls_ssl_conf_verify(&conf, &MQTT::veryfyCert_Tls, NULL);
 8082352:	465a      	mov	r2, fp
 8082354:	491a      	ldr	r1, [pc, #104]	; (80823c0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x124>)
 8082356:	4620      	mov	r0, r4
 8082358:	f008 f9db 	bl	808a712 <mbedtls_ssl_conf_verify>

    // if server certificates is not valid, connection will success. check certificates on verify() function.
    mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 808235c:	2101      	movs	r1, #1
 808235e:	4620      	mov	r0, r4
 8082360:	f008 f9d0 	bl	808a704 <mbedtls_ssl_conf_authmode>
    mbedtls_ssl_conf_rng(&conf, &MQTT::rng_Tls, nullptr);
 8082364:	465a      	mov	r2, fp
 8082366:	4917      	ldr	r1, [pc, #92]	; (80823c4 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x128>)
 8082368:	4620      	mov	r0, r4
 808236a:	f008 f9d5 	bl	808a718 <mbedtls_ssl_conf_rng>
    mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
 808236e:	465a      	mov	r2, fp
 8082370:	4651      	mov	r1, sl
 8082372:	4620      	mov	r0, r4
 8082374:	f008 f9e7 	bl	808a746 <mbedtls_ssl_conf_ca_chain>

    if (clientCertPem != NULL && clientKeyPem != NULL) {
 8082378:	f1b9 0f00 	cmp.w	r9, #0
 808237c:	d006      	beq.n	808238c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
 808237e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8082380:	b123      	cbz	r3, 808238c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
      mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
 8082382:	4642      	mov	r2, r8
 8082384:	4639      	mov	r1, r7
 8082386:	4620      	mov	r0, r4
 8082388:	f008 f9da 	bl	808a740 <mbedtls_ssl_conf_own_cert>
    }

    if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
 808238c:	4621      	mov	r1, r4
 808238e:	4630      	mov	r0, r6
 8082390:	f008 fb40 	bl	808aa14 <mbedtls_ssl_setup>
 8082394:	4604      	mov	r4, r0
 8082396:	b968      	cbnz	r0, 80823b4 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x118>
      return ret;
    }

    mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
 8082398:	4b0b      	ldr	r3, [pc, #44]	; (80823c8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x12c>)
 808239a:	4a0c      	ldr	r2, [pc, #48]	; (80823cc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x130>)
 808239c:	f505 61cb 	add.w	r1, r5, #1624	; 0x658
 80823a0:	4630      	mov	r0, r6
 80823a2:	f008 f9c5 	bl	808a730 <mbedtls_ssl_set_timer_cb>
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
 80823a6:	9400      	str	r4, [sp, #0]
 80823a8:	4b09      	ldr	r3, [pc, #36]	; (80823d0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x134>)
 80823aa:	4a0a      	ldr	r2, [pc, #40]	; (80823d4 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x138>)
 80823ac:	4629      	mov	r1, r5
 80823ae:	4630      	mov	r0, r6
 80823b0:	f008 f9b8 	bl	808a724 <mbedtls_ssl_set_bio>
 80823b4:	4620      	mov	r0, r4
    return 0;
}
 80823b6:	b005      	add	sp, #20
 80823b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80823bc:	0808201d 	.word	0x0808201d
 80823c0:	080820b9 	.word	0x080820b9
 80823c4:	08082085 	.word	0x08082085
 80823c8:	080863b3 	.word	0x080863b3
 80823cc:	080863a5 	.word	0x080863a5
 80823d0:	08082055 	.word	0x08082055
 80823d4:	08082021 	.word	0x08082021

080823d8 <_GLOBAL__sub_I__ZN4MQTTC2Ev>:
 80823d8:	f00e b96c 	b.w	80906b4 <HAL_Pin_Map>

080823dc <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 80823dc:	226c      	movs	r2, #108	; 0x6c
 80823de:	2100      	movs	r1, #0
 80823e0:	f010 be83 	b.w	80930ea <memset>

080823e4 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 80823e4:	b138      	cbz	r0, 80823f6 <mbedtls_sha256_free+0x12>
 80823e6:	f100 026c 	add.w	r2, r0, #108	; 0x6c

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80823ea:	2300      	movs	r3, #0
 80823ec:	4290      	cmp	r0, r2
 80823ee:	d002      	beq.n	80823f6 <mbedtls_sha256_free+0x12>
 80823f0:	7003      	strb	r3, [r0, #0]
 80823f2:	3001      	adds	r0, #1
 80823f4:	e7fa      	b.n	80823ec <mbedtls_sha256_free+0x8>
 80823f6:	4770      	bx	lr

080823f8 <mbedtls_sha256_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 80823f8:	b508      	push	{r3, lr}
    *dst = *src;
 80823fa:	226c      	movs	r2, #108	; 0x6c
 80823fc:	f010 fe4f 	bl	809309e <memcpy>
 8082400:	bd08      	pop	{r3, pc}
	...

08082404 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 8082404:	2300      	movs	r3, #0
 8082406:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 8082408:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 808240a:	b9a1      	cbnz	r1, 8082436 <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 808240c:	4b18      	ldr	r3, [pc, #96]	; (8082470 <mbedtls_sha256_starts_ret+0x6c>)
 808240e:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 8082410:	4b18      	ldr	r3, [pc, #96]	; (8082474 <mbedtls_sha256_starts_ret+0x70>)
 8082412:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 8082414:	4b18      	ldr	r3, [pc, #96]	; (8082478 <mbedtls_sha256_starts_ret+0x74>)
 8082416:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 8082418:	4b18      	ldr	r3, [pc, #96]	; (808247c <mbedtls_sha256_starts_ret+0x78>)
 808241a:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 808241c:	4b18      	ldr	r3, [pc, #96]	; (8082480 <mbedtls_sha256_starts_ret+0x7c>)
 808241e:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 8082420:	4b18      	ldr	r3, [pc, #96]	; (8082484 <mbedtls_sha256_starts_ret+0x80>)
 8082422:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 8082424:	4b18      	ldr	r3, [pc, #96]	; (8082488 <mbedtls_sha256_starts_ret+0x84>)
 8082426:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8082428:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 808242c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8082430:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8082434:	e018      	b.n	8082468 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8082436:	4b15      	ldr	r3, [pc, #84]	; (808248c <mbedtls_sha256_starts_ret+0x88>)
 8082438:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 808243a:	4b15      	ldr	r3, [pc, #84]	; (8082490 <mbedtls_sha256_starts_ret+0x8c>)
 808243c:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 808243e:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 8082442:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8082446:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 808244a:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 808244c:	4b11      	ldr	r3, [pc, #68]	; (8082494 <mbedtls_sha256_starts_ret+0x90>)
 808244e:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 8082450:	4b11      	ldr	r3, [pc, #68]	; (8082498 <mbedtls_sha256_starts_ret+0x94>)
 8082452:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 8082454:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 8082458:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 808245c:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8082460:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 8082462:	4b0e      	ldr	r3, [pc, #56]	; (808249c <mbedtls_sha256_starts_ret+0x98>)
 8082464:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8082466:	4b0e      	ldr	r3, [pc, #56]	; (80824a0 <mbedtls_sha256_starts_ret+0x9c>)
 8082468:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 808246a:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 808246c:	2000      	movs	r0, #0
 808246e:	4770      	bx	lr
 8082470:	6a09e667 	.word	0x6a09e667
 8082474:	bb67ae85 	.word	0xbb67ae85
 8082478:	3c6ef372 	.word	0x3c6ef372
 808247c:	a54ff53a 	.word	0xa54ff53a
 8082480:	510e527f 	.word	0x510e527f
 8082484:	9b05688c 	.word	0x9b05688c
 8082488:	1f83d9ab 	.word	0x1f83d9ab
 808248c:	c1059ed8 	.word	0xc1059ed8
 8082490:	367cd507 	.word	0x367cd507
 8082494:	f70e5939 	.word	0xf70e5939
 8082498:	ffc00b31 	.word	0xffc00b31
 808249c:	64f98fa7 	.word	0x64f98fa7
 80824a0:	befa4fa4 	.word	0xbefa4fa4

080824a4 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80824a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80824a8:	1d03      	adds	r3, r0, #4
 80824aa:	b0cf      	sub	sp, #316	; 0x13c
 80824ac:	9305      	str	r3, [sp, #20]
 80824ae:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 80824b0:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 80824b2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80824b6:	ac06      	add	r4, sp, #24
 80824b8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
{
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 80824bc:	3301      	adds	r3, #1
 80824be:	2b08      	cmp	r3, #8
 80824c0:	d1f7      	bne.n	80824b2 <mbedtls_internal_sha256_process+0xe>
 80824c2:	4608      	mov	r0, r1
 80824c4:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 80824c6:	ac0e      	add	r4, sp, #56	; 0x38
 80824c8:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
 80824cc:	78c3      	ldrb	r3, [r0, #3]
 80824ce:	3004      	adds	r0, #4
 80824d0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80824d4:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80824d8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80824dc:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80824e0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80824e4:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 80824e8:	3201      	adds	r2, #1
 80824ea:	2a10      	cmp	r2, #16
 80824ec:	d1ec      	bne.n	80824c8 <mbedtls_internal_sha256_process+0x24>
 80824ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80824f0:	4c9f      	ldr	r4, [pc, #636]	; (8082770 <mbedtls_internal_sha256_process+0x2cc>)
 80824f2:	9300      	str	r3, [sp, #0]
 80824f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80824f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80824f8:	9f08      	ldr	r7, [sp, #32]
 80824fa:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80824fe:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8082502:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8082506:	f8dd 9018 	ldr.w	r9, [sp, #24]
 808250a:	ad0f      	add	r5, sp, #60	; 0x3c
 808250c:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8082510:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8082514:	ea4f 22f8 	mov.w	r2, r8, ror #11
 8082518:	f855 1c04 	ldr.w	r1, [r5, #-4]
 808251c:	ea86 0c0b 	eor.w	ip, r6, fp
 8082520:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
 8082524:	4401      	add	r1, r0
 8082526:	ea82 6278 	eor.w	r2, r2, r8, ror #25
 808252a:	ea0c 0c08 	and.w	ip, ip, r8
 808252e:	ea8c 0c06 	eor.w	ip, ip, r6
 8082532:	440a      	add	r2, r1
 8082534:	9900      	ldr	r1, [sp, #0]
 8082536:	4462      	add	r2, ip
 8082538:	ea4f 3079 	mov.w	r0, r9, ror #13
 808253c:	ea4e 0c09 	orr.w	ip, lr, r9
 8082540:	440a      	add	r2, r1
 8082542:	ea0c 0c07 	and.w	ip, ip, r7
 8082546:	ea0e 0109 	and.w	r1, lr, r9
 808254a:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
 808254e:	ea4c 0101 	orr.w	r1, ip, r1
 8082552:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
 8082556:	4408      	add	r0, r1
 8082558:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 808255a:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 808255c:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 808255e:	6820      	ldr	r0, [r4, #0]
 8082560:	ea8b 0c08 	eor.w	ip, fp, r8
 8082564:	4401      	add	r1, r0
 8082566:	ea0c 0c03 	and.w	ip, ip, r3
 808256a:	ea4f 20f3 	mov.w	r0, r3, ror #11
 808256e:	ea8c 0c0b 	eor.w	ip, ip, fp
 8082572:	440e      	add	r6, r1
 8082574:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
 8082578:	eb06 010c 	add.w	r1, r6, ip
 808257c:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 8082580:	180e      	adds	r6, r1, r0
 8082582:	eb06 0c07 	add.w	ip, r6, r7
 8082586:	ea42 0009 	orr.w	r0, r2, r9
 808258a:	ea4f 3772 	mov.w	r7, r2, ror #13
 808258e:	ea02 0109 	and.w	r1, r2, r9
 8082592:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 8082596:	ea00 000e 	and.w	r0, r0, lr
 808259a:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 808259e:	4308      	orrs	r0, r1
 80825a0:	4438      	add	r0, r7
 80825a2:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80825a4:	6869      	ldr	r1, [r5, #4]
 80825a6:	6866      	ldr	r6, [r4, #4]
 80825a8:	ea83 0708 	eor.w	r7, r3, r8
 80825ac:	440e      	add	r6, r1
 80825ae:	ea07 070c 	and.w	r7, r7, ip
 80825b2:	ea4f 21fc 	mov.w	r1, ip, ror #11
 80825b6:	ea87 0708 	eor.w	r7, r7, r8
 80825ba:	44b3      	add	fp, r6
 80825bc:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
 80825c0:	eb0b 0607 	add.w	r6, fp, r7
 80825c4:	ea81 617c 	eor.w	r1, r1, ip, ror #25
 80825c8:	eb06 0b01 	add.w	fp, r6, r1
 80825cc:	ea4f 3770 	mov.w	r7, r0, ror #13
 80825d0:	ea42 0100 	orr.w	r1, r2, r0
 80825d4:	ea02 0600 	and.w	r6, r2, r0
 80825d8:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
 80825dc:	ea01 0109 	and.w	r1, r1, r9
 80825e0:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
 80825e4:	4331      	orrs	r1, r6
 80825e6:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80825e8:	68ae      	ldr	r6, [r5, #8]
 80825ea:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80825ec:	4459      	add	r1, fp
 80825ee:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80825f0:	443e      	add	r6, r7
 80825f2:	ea83 0b0c 	eor.w	fp, r3, ip
 80825f6:	44b0      	add	r8, r6
 80825f8:	ea0b 0b0e 	and.w	fp, fp, lr
 80825fc:	ea4f 26fe 	mov.w	r6, lr, ror #11
 8082600:	ea8b 0b03 	eor.w	fp, fp, r3
 8082604:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 8082608:	44d8      	add	r8, fp
 808260a:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 808260e:	4446      	add	r6, r8
 8082610:	ea4f 3b71 	mov.w	fp, r1, ror #13
 8082614:	ea40 0801 	orr.w	r8, r0, r1
 8082618:	ea00 0701 	and.w	r7, r0, r1
 808261c:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
 8082620:	ea08 0802 	and.w	r8, r8, r2
 8082624:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 8082628:	ea48 0807 	orr.w	r8, r8, r7
 808262c:	44d8      	add	r8, fp
 808262e:	44b0      	add	r8, r6
 8082630:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8082632:	68e7      	ldr	r7, [r4, #12]
 8082634:	68ee      	ldr	r6, [r5, #12]
 8082636:	ea8c 0b0e 	eor.w	fp, ip, lr
 808263a:	4437      	add	r7, r6
 808263c:	ea0b 0b09 	and.w	fp, fp, r9
 8082640:	ea8b 0b0c 	eor.w	fp, fp, ip
 8082644:	443b      	add	r3, r7
 8082646:	eb03 070b 	add.w	r7, r3, fp
 808264a:	ea4f 23f9 	mov.w	r3, r9, ror #11
 808264e:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
 8082652:	ea83 6379 	eor.w	r3, r3, r9, ror #25
 8082656:	18fe      	adds	r6, r7, r3
 8082658:	1993      	adds	r3, r2, r6
 808265a:	9300      	str	r3, [sp, #0]
 808265c:	ea4f 3778 	mov.w	r7, r8, ror #13
 8082660:	ea41 0308 	orr.w	r3, r1, r8
 8082664:	ea01 0208 	and.w	r2, r1, r8
 8082668:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
 808266c:	4003      	ands	r3, r0
 808266e:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
 8082672:	4313      	orrs	r3, r2
 8082674:	443b      	add	r3, r7
 8082676:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8082678:	692a      	ldr	r2, [r5, #16]
 808267a:	6926      	ldr	r6, [r4, #16]
 808267c:	ea4f 3b73 	mov.w	fp, r3, ror #13
 8082680:	4432      	add	r2, r6
 8082682:	4494      	add	ip, r2
 8082684:	9a00      	ldr	r2, [sp, #0]
 8082686:	ea8e 0609 	eor.w	r6, lr, r9
 808268a:	4016      	ands	r6, r2
 808268c:	ea4f 27f2 	mov.w	r7, r2, ror #11
 8082690:	ea86 060e 	eor.w	r6, r6, lr
 8082694:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 8082698:	44b4      	add	ip, r6
 808269a:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 808269e:	eb0c 0207 	add.w	r2, ip, r7
 80826a2:	ea48 0703 	orr.w	r7, r8, r3
 80826a6:	1886      	adds	r6, r0, r2
 80826a8:	400f      	ands	r7, r1
 80826aa:	ea08 0003 	and.w	r0, r8, r3
 80826ae:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
 80826b2:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 80826b6:	4307      	orrs	r7, r0
 80826b8:	445f      	add	r7, fp
 80826ba:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80826bc:	6960      	ldr	r0, [r4, #20]
 80826be:	696a      	ldr	r2, [r5, #20]
 80826c0:	3420      	adds	r4, #32
 80826c2:	4410      	add	r0, r2
 80826c4:	9a00      	ldr	r2, [sp, #0]
 80826c6:	4486      	add	lr, r0
 80826c8:	ea89 0c02 	eor.w	ip, r9, r2
 80826cc:	ea0c 0c06 	and.w	ip, ip, r6
 80826d0:	ea8c 0c09 	eor.w	ip, ip, r9
 80826d4:	eb0e 000c 	add.w	r0, lr, ip
 80826d8:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 80826dc:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80826e0:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80826e4:	eb00 020e 	add.w	r2, r0, lr
 80826e8:	ea4f 3077 	mov.w	r0, r7, ror #13
 80826ec:	ea43 0e07 	orr.w	lr, r3, r7
 80826f0:	eb01 0b02 	add.w	fp, r1, r2
 80826f4:	ea0e 0e08 	and.w	lr, lr, r8
 80826f8:	ea03 0107 	and.w	r1, r3, r7
 80826fc:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 8082700:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 8082704:	ea4e 0e01 	orr.w	lr, lr, r1
 8082708:	4486      	add	lr, r0
 808270a:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 808270c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8082710:	69aa      	ldr	r2, [r5, #24]
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 8082712:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8082714:	4411      	add	r1, r2
 8082716:	9a00      	ldr	r2, [sp, #0]
 8082718:	4489      	add	r9, r1
 808271a:	ea82 0006 	eor.w	r0, r2, r6
 808271e:	ea00 000b 	and.w	r0, r0, fp
 8082722:	ea80 0002 	eor.w	r0, r0, r2
 8082726:	eb09 0100 	add.w	r1, r9, r0
 808272a:	ea4f 29fb 	mov.w	r9, fp, ror #11
 808272e:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
 8082732:	ea89 697b 	eor.w	r9, r9, fp, ror #25
 8082736:	eb01 0209 	add.w	r2, r1, r9
 808273a:	ea4f 307e 	mov.w	r0, lr, ror #13
 808273e:	ea47 090e 	orr.w	r9, r7, lr
 8082742:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8082746:	ea09 0903 	and.w	r9, r9, r3
 808274a:	ea07 010e 	and.w	r1, r7, lr
 808274e:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 8082752:	ea49 0901 	orr.w	r9, r9, r1
 8082756:	4481      	add	r9, r0
 8082758:	4490      	add	r8, r2
 808275a:	4491      	add	r9, r2
 808275c:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 8082760:	f47f aed6 	bne.w	8082510 <mbedtls_internal_sha256_process+0x6c>
 8082764:	2200      	movs	r2, #0
 8082766:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8082774 <mbedtls_internal_sha256_process+0x2d0>
 808276a:	ac0e      	add	r4, sp, #56	; 0x38
 808276c:	9204      	str	r2, [sp, #16]
 808276e:	e003      	b.n	8082778 <mbedtls_internal_sha256_process+0x2d4>
 8082770:	080932a4 	.word	0x080932a4
 8082774:	080932a0 	.word	0x080932a0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8082778:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808277a:	6860      	ldr	r0, [r4, #4]
 808277c:	ea4f 45f2 	mov.w	r5, r2, ror #19
 8082780:	ea85 4572 	eor.w	r5, r5, r2, ror #17
 8082784:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
 8082788:	9a04      	ldr	r2, [sp, #16]
 808278a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 808278e:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8082792:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8082794:	ea4f 4cb0 	mov.w	ip, r0, ror #18
 8082798:	440a      	add	r2, r1
 808279a:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
 808279e:	ea4f 21f8 	mov.w	r1, r8, ror #11
 80827a2:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 80827a6:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
 80827aa:	4415      	add	r5, r2
 80827ac:	eb05 020c 	add.w	r2, r5, ip
 80827b0:	ea81 6578 	eor.w	r5, r1, r8, ror #25
 80827b4:	ea86 010b 	eor.w	r1, r6, fp
 80827b8:	ea01 0108 	and.w	r1, r1, r8
 80827bc:	9203      	str	r2, [sp, #12]
 80827be:	ea81 0206 	eor.w	r2, r1, r6
 80827c2:	18a9      	adds	r1, r5, r2
 80827c4:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 80827c8:	ea4e 0509 	orr.w	r5, lr, r9
 80827cc:	440a      	add	r2, r1
 80827ce:	9903      	ldr	r1, [sp, #12]
 80827d0:	403d      	ands	r5, r7
 80827d2:	6421      	str	r1, [r4, #64]	; 0x40
 80827d4:	440a      	add	r2, r1
 80827d6:	9900      	ldr	r1, [sp, #0]
 80827d8:	f10a 0a20 	add.w	sl, sl, #32
 80827dc:	440a      	add	r2, r1
 80827de:	18d3      	adds	r3, r2, r3
 80827e0:	ea4f 3179 	mov.w	r1, r9, ror #13
 80827e4:	9300      	str	r3, [sp, #0]
 80827e6:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 80827ea:	ea0e 0309 	and.w	r3, lr, r9
 80827ee:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 80827f2:	432b      	orrs	r3, r5
 80827f4:	440b      	add	r3, r1
 80827f6:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80827f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80827fa:	68a5      	ldr	r5, [r4, #8]
 80827fc:	ea4f 41f3 	mov.w	r1, r3, ror #19
 8082800:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 8082804:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 8082808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 808280a:	3420      	adds	r4, #32
 808280c:	4403      	add	r3, r0
 808280e:	4419      	add	r1, r3
 8082810:	ea4f 43b5 	mov.w	r3, r5, ror #18
 8082814:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 8082818:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
 808281c:	eb01 030c 	add.w	r3, r1, ip
 8082820:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8082824:	9900      	ldr	r1, [sp, #0]
 8082826:	ea8b 0c08 	eor.w	ip, fp, r8
 808282a:	4430      	add	r0, r6
 808282c:	ea0c 0c01 	and.w	ip, ip, r1
 8082830:	ea8c 0c0b 	eor.w	ip, ip, fp
 8082834:	18c1      	adds	r1, r0, r3
 8082836:	448c      	add	ip, r1
 8082838:	9900      	ldr	r1, [sp, #0]
 808283a:	6263      	str	r3, [r4, #36]	; 0x24
 808283c:	ea4f 20f1 	mov.w	r0, r1, ror #11
 8082840:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 8082844:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 8082848:	eb00 010c 	add.w	r1, r0, ip
 808284c:	19c8      	adds	r0, r1, r7
 808284e:	9001      	str	r0, [sp, #4]
 8082850:	ea4f 3c72 	mov.w	ip, r2, ror #13
 8082854:	ea42 0009 	orr.w	r0, r2, r9
 8082858:	ea02 0709 	and.w	r7, r2, r9
 808285c:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 8082860:	ea00 000e 	and.w	r0, r0, lr
 8082864:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 8082868:	4338      	orrs	r0, r7
 808286a:	4460      	add	r0, ip
 808286c:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 808286e:	9903      	ldr	r1, [sp, #12]
 8082870:	f854 7c14 	ldr.w	r7, [r4, #-20]
 8082874:	ea4f 46f1 	mov.w	r6, r1, ror #19
 8082878:	ea86 4671 	eor.w	r6, r6, r1, ror #17
 808287c:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
 8082880:	68e1      	ldr	r1, [r4, #12]
 8082882:	ea4f 4cb7 	mov.w	ip, r7, ror #18
 8082886:	4429      	add	r1, r5
 8082888:	440e      	add	r6, r1
 808288a:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
 808288e:	9900      	ldr	r1, [sp, #0]
 8082890:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
 8082894:	4466      	add	r6, ip
 8082896:	ea81 0c08 	eor.w	ip, r1, r8
 808289a:	9901      	ldr	r1, [sp, #4]
 808289c:	62a6      	str	r6, [r4, #40]	; 0x28
 808289e:	ea0c 0c01 	and.w	ip, ip, r1
 80828a2:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80828a6:	ea8c 0c08 	eor.w	ip, ip, r8
 80828aa:	4459      	add	r1, fp
 80828ac:	198d      	adds	r5, r1, r6
 80828ae:	9901      	ldr	r1, [sp, #4]
 80828b0:	44ac      	add	ip, r5
 80828b2:	9d01      	ldr	r5, [sp, #4]
 80828b4:	ea4f 21f1 	mov.w	r1, r1, ror #11
 80828b8:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
 80828bc:	ea81 6175 	eor.w	r1, r1, r5, ror #25
 80828c0:	eb01 050c 	add.w	r5, r1, ip
 80828c4:	ea42 0100 	orr.w	r1, r2, r0
 80828c8:	ea4f 3c70 	mov.w	ip, r0, ror #13
 80828cc:	eb05 0b0e 	add.w	fp, r5, lr
 80828d0:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
 80828d4:	ea02 0e00 	and.w	lr, r2, r0
 80828d8:	ea01 0109 	and.w	r1, r1, r9
 80828dc:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
 80828e0:	ea41 010e 	orr.w	r1, r1, lr
 80828e4:	4461      	add	r1, ip
 80828e6:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80828e8:	ea4f 45f3 	mov.w	r5, r3, ror #19
 80828ec:	ea85 4573 	eor.w	r5, r5, r3, ror #17
 80828f0:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
 80828f4:	6925      	ldr	r5, [r4, #16]
 80828f6:	f854 cc10 	ldr.w	ip, [r4, #-16]
 80828fa:	442f      	add	r7, r5
 80828fc:	443b      	add	r3, r7
 80828fe:	ea4f 47bc 	mov.w	r7, ip, ror #18
 8082902:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
 8082906:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
 808290a:	eb03 070e 	add.w	r7, r3, lr
 808290e:	e89d 0028 	ldmia.w	sp, {r3, r5}
 8082912:	405d      	eors	r5, r3
 8082914:	ea05 050b 	and.w	r5, r5, fp
 8082918:	405d      	eors	r5, r3
 808291a:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 808291e:	ea4f 3e71 	mov.w	lr, r1, ror #13
 8082922:	4498      	add	r8, r3
 8082924:	44b8      	add	r8, r7
 8082926:	4445      	add	r5, r8
 8082928:	ea4f 28fb 	mov.w	r8, fp, ror #11
 808292c:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
 8082930:	ea88 687b 	eor.w	r8, r8, fp, ror #25
 8082934:	eb08 0305 	add.w	r3, r8, r5
 8082938:	eb03 0509 	add.w	r5, r3, r9
 808293c:	ea40 0801 	orr.w	r8, r0, r1
 8082940:	9502      	str	r5, [sp, #8]
 8082942:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 8082946:	ea00 0501 	and.w	r5, r0, r1
 808294a:	ea08 0802 	and.w	r8, r8, r2
 808294e:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 8082952:	ea48 0805 	orr.w	r8, r8, r5
 8082956:	44f0      	add	r8, lr
 8082958:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 808295a:	ea4f 4ef6 	mov.w	lr, r6, ror #19
 808295e:	6963      	ldr	r3, [r4, #20]
 8082960:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
 8082964:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 8082968:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
 808296c:	eb0c 0e03 	add.w	lr, ip, r3
 8082970:	9b01      	ldr	r3, [sp, #4]
 8082972:	4476      	add	r6, lr
 8082974:	ea83 0c0b 	eor.w	ip, r3, fp
 8082978:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 808297c:	9b02      	ldr	r3, [sp, #8]
 808297e:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 8082982:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
 8082986:	ea0c 0c03 	and.w	ip, ip, r3
 808298a:	9b01      	ldr	r3, [sp, #4]
 808298c:	eb06 0e09 	add.w	lr, r6, r9
 8082990:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 8082994:	ea8c 0c03 	eor.w	ip, ip, r3
 8082998:	9b00      	ldr	r3, [sp, #0]
 808299a:	4476      	add	r6, lr
 808299c:	441e      	add	r6, r3
 808299e:	9b02      	ldr	r3, [sp, #8]
 80829a0:	44b4      	add	ip, r6
 80829a2:	9e02      	ldr	r6, [sp, #8]
 80829a4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80829a8:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
 80829ac:	ea83 6376 	eor.w	r3, r3, r6, ror #25
 80829b0:	eb03 060c 	add.w	r6, r3, ip
 80829b4:	1993      	adds	r3, r2, r6
 80829b6:	9300      	str	r3, [sp, #0]
 80829b8:	ea41 0308 	orr.w	r3, r1, r8
 80829bc:	ea01 0208 	and.w	r2, r1, r8
 80829c0:	4003      	ands	r3, r0
 80829c2:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80829c4:	ea4f 42f7 	mov.w	r2, r7, ror #19
 80829c8:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80829cc:	62e7      	str	r7, [r4, #44]	; 0x2c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80829ce:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80829d2:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
 80829d6:	69a2      	ldr	r2, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80829d8:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80829dc:	f854 9c08 	ldr.w	r9, [r4, #-8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80829e0:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80829e4:	4415      	add	r5, r2
 80829e6:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80829e8:	4463      	add	r3, ip
 80829ea:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80829ec:	442f      	add	r7, r5
 80829ee:	ea8b 0602 	eor.w	r6, fp, r2
 80829f2:	ea4f 45b9 	mov.w	r5, r9, ror #18
 80829f6:	9a00      	ldr	r2, [sp, #0]
 80829f8:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
 80829fc:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
 8082a00:	4016      	ands	r6, r2
 8082a02:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 8082a06:	443d      	add	r5, r7
 8082a08:	9f01      	ldr	r7, [sp, #4]
 8082a0a:	442a      	add	r2, r5
 8082a0c:	443a      	add	r2, r7
 8082a0e:	ea86 060b 	eor.w	r6, r6, fp
 8082a12:	4416      	add	r6, r2
 8082a14:	9a00      	ldr	r2, [sp, #0]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082a16:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082a1a:	ea4f 27f2 	mov.w	r7, r2, ror #11
 8082a1e:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 8082a22:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 8082a26:	19ba      	adds	r2, r7, r6
 8082a28:	1886      	adds	r6, r0, r2
 8082a2a:	ea4f 3073 	mov.w	r0, r3, ror #13
 8082a2e:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
 8082a32:	ea48 0703 	orr.w	r7, r8, r3
 8082a36:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
 8082a3a:	400f      	ands	r7, r1
 8082a3c:	ea08 0003 	and.w	r0, r8, r3
 8082a40:	4307      	orrs	r7, r0
 8082a42:	4467      	add	r7, ip
 8082a44:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8082a46:	ea4f 42fe 	mov.w	r2, lr, ror #19
 8082a4a:	ea82 427e 	eor.w	r2, r2, lr, ror #17
 8082a4e:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
 8082a52:	69e2      	ldr	r2, [r4, #28]
 8082a54:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8082a58:	4491      	add	r9, r2
 8082a5a:	eb0e 0209 	add.w	r2, lr, r9
 8082a5e:	ea4f 49b0 	mov.w	r9, r0, ror #18
 8082a62:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
 8082a66:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
 8082a6a:	4491      	add	r9, r2
 8082a6c:	9a02      	ldr	r2, [sp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082a6e:	6365      	str	r5, [r4, #52]	; 0x34
 8082a70:	4696      	mov	lr, r2
 8082a72:	9a00      	ldr	r2, [sp, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8082a74:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 8082a78:	ea8e 0c02 	eor.w	ip, lr, r2
 8082a7c:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
 8082a80:	ea0c 0c06 	and.w	ip, ip, r6
 8082a84:	ea8c 0c0e 	eor.w	ip, ip, lr
 8082a88:	444a      	add	r2, r9
 8082a8a:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 8082a8e:	445a      	add	r2, fp
 8082a90:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 8082a94:	4462      	add	r2, ip
 8082a96:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 8082a9a:	4472      	add	r2, lr
 8082a9c:	ea4f 3c77 	mov.w	ip, r7, ror #13
 8082aa0:	ea43 0e07 	orr.w	lr, r3, r7
 8082aa4:	eb01 0b02 	add.w	fp, r1, r2
 8082aa8:	ea0e 0e08 	and.w	lr, lr, r8
 8082aac:	ea03 0107 	and.w	r1, r3, r7
 8082ab0:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8082ab4:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
 8082ab8:	ea4e 0e01 	orr.w	lr, lr, r1
 8082abc:	44e6      	add	lr, ip
 8082abe:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8082ac0:	ea4f 42f5 	mov.w	r2, r5, ror #19
 8082ac4:	6821      	ldr	r1, [r4, #0]
 8082ac6:	ea82 4275 	eor.w	r2, r2, r5, ror #17
 8082aca:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
 8082ace:	9a03      	ldr	r2, [sp, #12]
 8082ad0:	ea4f 4cb1 	mov.w	ip, r1, ror #18
 8082ad4:	4410      	add	r0, r2
 8082ad6:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
 8082ada:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
 8082ade:	4405      	add	r5, r0
 8082ae0:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
 8082ae4:	440d      	add	r5, r1
 8082ae6:	9902      	ldr	r1, [sp, #8]
 8082ae8:	442a      	add	r2, r5
 8082aea:	eb02 0901 	add.w	r9, r2, r1
 8082aee:	9a00      	ldr	r2, [sp, #0]
 8082af0:	ea4f 307e 	mov.w	r0, lr, ror #13
 8082af4:	ea82 0106 	eor.w	r1, r2, r6
 8082af8:	ea01 010b 	and.w	r1, r1, fp
 8082afc:	4051      	eors	r1, r2
 8082afe:	ea4f 22fb 	mov.w	r2, fp, ror #11
 8082b02:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 8082b06:	4489      	add	r9, r1
 8082b08:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 8082b0c:	444a      	add	r2, r9
 8082b0e:	ea47 090e 	orr.w	r9, r7, lr
 8082b12:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8082b16:	ea09 0903 	and.w	r9, r9, r3
 8082b1a:	ea07 010e 	and.w	r1, r7, lr
 8082b1e:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 8082b22:	ea49 0901 	orr.w	r9, r9, r1
 8082b26:	4481      	add	r9, r0
 8082b28:	4490      	add	r8, r2
 8082b2a:	4491      	add	r9, r2
 8082b2c:	9a04      	ldr	r2, [sp, #16]
 8082b2e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8082b30:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 8082b32:	2a30      	cmp	r2, #48	; 0x30
 8082b34:	9204      	str	r2, [sp, #16]
 8082b36:	f47f ae1f 	bne.w	8082778 <mbedtls_internal_sha256_process+0x2d4>
 8082b3a:	9a00      	ldr	r2, [sp, #0]
 8082b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8082b3e:	920d      	str	r2, [sp, #52]	; 0x34
 8082b40:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8082b44:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8082b48:	960c      	str	r6, [sp, #48]	; 0x30
 8082b4a:	f8cd 9018 	str.w	r9, [sp, #24]
 8082b4e:	f8cd e01c 	str.w	lr, [sp, #28]
 8082b52:	9708      	str	r7, [sp, #32]
 8082b54:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 8082b56:	9a05      	ldr	r2, [sp, #20]
 8082b58:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8082b5c:	9205      	str	r2, [sp, #20]
 8082b5e:	aa06      	add	r2, sp, #24
 8082b60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8082b64:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 8082b66:	440a      	add	r2, r1
 8082b68:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8082b6a:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 8082b6c:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8082b6e:	d1f2      	bne.n	8082b56 <mbedtls_internal_sha256_process+0x6b2>
        ctx->state[i] += A[i];

    return( 0 );
}
 8082b70:	2000      	movs	r0, #0
 8082b72:	b04f      	add	sp, #316	; 0x13c
 8082b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082b78 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8082b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082b7c:	4604      	mov	r4, r0
 8082b7e:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 8082b80:	4615      	mov	r5, r2
 8082b82:	b382      	cbz	r2, 8082be6 <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8082b84:	6803      	ldr	r3, [r0, #0]
 8082b86:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8082b8a:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 8082b8c:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8082b8e:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8082b90:	bf82      	ittt	hi
 8082b92:	6863      	ldrhi	r3, [r4, #4]
 8082b94:	3301      	addhi	r3, #1
 8082b96:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 8082b98:	b180      	cbz	r0, 8082bbc <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8082b9a:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 8082b9e:	42ba      	cmp	r2, r7
 8082ba0:	d31b      	bcc.n	8082bda <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8082ba2:	f104 0828 	add.w	r8, r4, #40	; 0x28
 8082ba6:	463a      	mov	r2, r7
 8082ba8:	4440      	add	r0, r8
 8082baa:	f010 fa78 	bl	809309e <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8082bae:	4641      	mov	r1, r8
 8082bb0:	4620      	mov	r0, r4
 8082bb2:	f7ff fc77 	bl	80824a4 <mbedtls_internal_sha256_process>
 8082bb6:	b9b8      	cbnz	r0, 8082be8 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
 8082bb8:	443e      	add	r6, r7
        ilen  -= fill;
 8082bba:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8082bbc:	462f      	mov	r7, r5
 8082bbe:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 8082bc0:	2f3f      	cmp	r7, #63	; 0x3f
 8082bc2:	4431      	add	r1, r6
 8082bc4:	d905      	bls.n	8082bd2 <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8082bc6:	4620      	mov	r0, r4
 8082bc8:	f7ff fc6c 	bl	80824a4 <mbedtls_internal_sha256_process>
 8082bcc:	b960      	cbnz	r0, 8082be8 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 8082bce:	3f40      	subs	r7, #64	; 0x40
 8082bd0:	e7f5      	b.n	8082bbe <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
 8082bd2:	b147      	cbz	r7, 8082be6 <mbedtls_sha256_update_ret+0x6e>
 8082bd4:	463d      	mov	r5, r7
 8082bd6:	460e      	mov	r6, r1
 8082bd8:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8082bda:	3428      	adds	r4, #40	; 0x28
 8082bdc:	462a      	mov	r2, r5
 8082bde:	4631      	mov	r1, r6
 8082be0:	4420      	add	r0, r4
 8082be2:	f010 fa5c 	bl	809309e <memcpy>

    return( 0 );
 8082be6:	2000      	movs	r0, #0
}
 8082be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082bec <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8082bec:	b570      	push	{r4, r5, r6, lr}
 8082bee:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8082bf0:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 8082bf2:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8082bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8082bf8:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 8082bfa:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8082bfc:	4423      	add	r3, r4
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8082bfe:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8082c00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8082c04:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
 8082c08:	d804      	bhi.n	8082c14 <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8082c0a:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8082c0e:	2100      	movs	r1, #0
 8082c10:	4430      	add	r0, r6
 8082c12:	e00e      	b.n	8082c32 <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8082c14:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8082c18:	2100      	movs	r1, #0
 8082c1a:	4430      	add	r0, r6
 8082c1c:	f010 fa65 	bl	80930ea <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8082c20:	4631      	mov	r1, r6
 8082c22:	4620      	mov	r0, r4
 8082c24:	f7ff fc3e 	bl	80824a4 <mbedtls_internal_sha256_process>
 8082c28:	2800      	cmp	r0, #0
 8082c2a:	d175      	bne.n	8082d18 <mbedtls_sha256_finish_ret+0x12c>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8082c2c:	4601      	mov	r1, r0
 8082c2e:	4630      	mov	r0, r6
 8082c30:	2238      	movs	r2, #56	; 0x38
 8082c32:	f010 fa5a 	bl	80930ea <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8082c36:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 8082c38:	6861      	ldr	r1, [r4, #4]
 8082c3a:	0f5a      	lsrs	r2, r3, #29
 8082c3c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8082c40:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 8082c42:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8082c44:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 8082c48:	0c11      	lsrs	r1, r2, #16
 8082c4a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 8082c4e:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 8082c52:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8082c54:	0e1a      	lsrs	r2, r3, #24
 8082c56:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8082c5a:	0c1a      	lsrs	r2, r3, #16
 8082c5c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8082c60:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8082c62:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8082c66:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8082c6a:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8082c6e:	4631      	mov	r1, r6
 8082c70:	4620      	mov	r0, r4
 8082c72:	f7ff fc17 	bl	80824a4 <mbedtls_internal_sha256_process>
 8082c76:	4603      	mov	r3, r0
 8082c78:	2800      	cmp	r0, #0
 8082c7a:	d14c      	bne.n	8082d16 <mbedtls_sha256_finish_ret+0x12a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8082c7c:	7ae2      	ldrb	r2, [r4, #11]
 8082c7e:	702a      	strb	r2, [r5, #0]
 8082c80:	8962      	ldrh	r2, [r4, #10]
 8082c82:	706a      	strb	r2, [r5, #1]
 8082c84:	68a2      	ldr	r2, [r4, #8]
 8082c86:	0a12      	lsrs	r2, r2, #8
 8082c88:	70aa      	strb	r2, [r5, #2]
 8082c8a:	68a2      	ldr	r2, [r4, #8]
 8082c8c:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8082c8e:	7be2      	ldrb	r2, [r4, #15]
 8082c90:	712a      	strb	r2, [r5, #4]
 8082c92:	89e2      	ldrh	r2, [r4, #14]
 8082c94:	716a      	strb	r2, [r5, #5]
 8082c96:	68e2      	ldr	r2, [r4, #12]
 8082c98:	0a12      	lsrs	r2, r2, #8
 8082c9a:	71aa      	strb	r2, [r5, #6]
 8082c9c:	68e2      	ldr	r2, [r4, #12]
 8082c9e:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8082ca0:	7ce2      	ldrb	r2, [r4, #19]
 8082ca2:	722a      	strb	r2, [r5, #8]
 8082ca4:	8a62      	ldrh	r2, [r4, #18]
 8082ca6:	726a      	strb	r2, [r5, #9]
 8082ca8:	6922      	ldr	r2, [r4, #16]
 8082caa:	0a12      	lsrs	r2, r2, #8
 8082cac:	72aa      	strb	r2, [r5, #10]
 8082cae:	6922      	ldr	r2, [r4, #16]
 8082cb0:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8082cb2:	7de2      	ldrb	r2, [r4, #23]
 8082cb4:	732a      	strb	r2, [r5, #12]
 8082cb6:	8ae2      	ldrh	r2, [r4, #22]
 8082cb8:	736a      	strb	r2, [r5, #13]
 8082cba:	6962      	ldr	r2, [r4, #20]
 8082cbc:	0a12      	lsrs	r2, r2, #8
 8082cbe:	73aa      	strb	r2, [r5, #14]
 8082cc0:	6962      	ldr	r2, [r4, #20]
 8082cc2:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8082cc4:	7ee2      	ldrb	r2, [r4, #27]
 8082cc6:	742a      	strb	r2, [r5, #16]
 8082cc8:	8b62      	ldrh	r2, [r4, #26]
 8082cca:	746a      	strb	r2, [r5, #17]
 8082ccc:	69a2      	ldr	r2, [r4, #24]
 8082cce:	0a12      	lsrs	r2, r2, #8
 8082cd0:	74aa      	strb	r2, [r5, #18]
 8082cd2:	69a2      	ldr	r2, [r4, #24]
 8082cd4:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8082cd6:	7fe2      	ldrb	r2, [r4, #31]
 8082cd8:	752a      	strb	r2, [r5, #20]
 8082cda:	8be2      	ldrh	r2, [r4, #30]
 8082cdc:	756a      	strb	r2, [r5, #21]
 8082cde:	69e2      	ldr	r2, [r4, #28]
 8082ce0:	0a12      	lsrs	r2, r2, #8
 8082ce2:	75aa      	strb	r2, [r5, #22]
 8082ce4:	69e2      	ldr	r2, [r4, #28]
 8082ce6:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8082ce8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8082cec:	762a      	strb	r2, [r5, #24]
 8082cee:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8082cf0:	766a      	strb	r2, [r5, #25]
 8082cf2:	6a22      	ldr	r2, [r4, #32]
 8082cf4:	0a12      	lsrs	r2, r2, #8
 8082cf6:	76aa      	strb	r2, [r5, #26]
 8082cf8:	6a22      	ldr	r2, [r4, #32]
 8082cfa:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
 8082cfc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8082cfe:	b950      	cbnz	r0, 8082d16 <mbedtls_sha256_finish_ret+0x12a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8082d00:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8082d04:	772b      	strb	r3, [r5, #28]
 8082d06:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8082d08:	776b      	strb	r3, [r5, #29]
 8082d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8082d0c:	0a1b      	lsrs	r3, r3, #8
 8082d0e:	77ab      	strb	r3, [r5, #30]
 8082d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8082d12:	77eb      	strb	r3, [r5, #31]
 8082d14:	bd70      	pop	{r4, r5, r6, pc}

    return( 0 );
 8082d16:	4618      	mov	r0, r3
}
 8082d18:	bd70      	pop	{r4, r5, r6, pc}

08082d1a <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8082d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082d1c:	461f      	mov	r7, r3
 8082d1e:	b09d      	sub	sp, #116	; 0x74
 8082d20:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 8082d22:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8082d24:	460e      	mov	r6, r1
 8082d26:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 8082d28:	f7ff fb58 	bl	80823dc <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8082d2c:	4639      	mov	r1, r7
 8082d2e:	a801      	add	r0, sp, #4
 8082d30:	f7ff fb68 	bl	8082404 <mbedtls_sha256_starts_ret>
 8082d34:	4601      	mov	r1, r0
 8082d36:	b958      	cbnz	r0, 8082d50 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 8082d38:	4629      	mov	r1, r5
 8082d3a:	4632      	mov	r2, r6
 8082d3c:	a801      	add	r0, sp, #4
 8082d3e:	f7ff ff1b 	bl	8082b78 <mbedtls_sha256_update_ret>
 8082d42:	4601      	mov	r1, r0
 8082d44:	b920      	cbnz	r0, 8082d50 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 8082d46:	4621      	mov	r1, r4
 8082d48:	a801      	add	r0, sp, #4
 8082d4a:	f7ff ff4f 	bl	8082bec <mbedtls_sha256_finish_ret>
 8082d4e:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 8082d50:	a801      	add	r0, sp, #4
 8082d52:	f7ff fb47 	bl	80823e4 <mbedtls_sha256_free>

    return( ret );
}
 8082d56:	4608      	mov	r0, r1
 8082d58:	b01d      	add	sp, #116	; 0x74
 8082d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082d5c <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 8082d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082d60:	4604      	mov	r4, r0
 8082d62:	b0a5      	sub	sp, #148	; 0x94
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 8082d64:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 8082d66:	9301      	str	r3, [sp, #4]
 8082d68:	460f      	mov	r7, r1
 8082d6a:	4693      	mov	fp, r2
 8082d6c:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 8082d6e:	f005 f80f 	bl	8087d90 <mbedtls_md_get_size>
 8082d72:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
 8082d74:	2300      	movs	r3, #0
 8082d76:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
 8082d78:	2301      	movs	r3, #1
 8082d7a:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 8082d7e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
 8082d82:	2e00      	cmp	r6, #0
 8082d84:	d05c      	beq.n	8082e40 <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 8082d86:	465a      	mov	r2, fp
 8082d88:	4639      	mov	r1, r7
 8082d8a:	4620      	mov	r0, r4
 8082d8c:	f004 ff3e 	bl	8087c0c <mbedtls_md_hmac_starts>
 8082d90:	2800      	cmp	r0, #0
 8082d92:	d156      	bne.n	8082e42 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
 8082d94:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8082d96:	9901      	ldr	r1, [sp, #4]
 8082d98:	4620      	mov	r0, r4
 8082d9a:	f004 ff97 	bl	8087ccc <mbedtls_md_hmac_update>
 8082d9e:	2800      	cmp	r0, #0
 8082da0:	d14f      	bne.n	8082e42 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
 8082da2:	2204      	movs	r2, #4
 8082da4:	a903      	add	r1, sp, #12
 8082da6:	4620      	mov	r0, r4
 8082da8:	f004 ff90 	bl	8087ccc <mbedtls_md_hmac_update>
 8082dac:	2800      	cmp	r0, #0
 8082dae:	d148      	bne.n	8082e42 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 8082db0:	4641      	mov	r1, r8
 8082db2:	4620      	mov	r0, r4
 8082db4:	f004 ff9a 	bl	8087cec <mbedtls_md_hmac_finish>
 8082db8:	2800      	cmp	r0, #0
 8082dba:	d142      	bne.n	8082e42 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
 8082dbc:	ad04      	add	r5, sp, #16
 8082dbe:	464a      	mov	r2, r9
 8082dc0:	4641      	mov	r1, r8
 8082dc2:	4628      	mov	r0, r5
 8082dc4:	f010 f96b 	bl	809309e <memcpy>

        for( i = 1; i < iteration_count; i++ )
 8082dc8:	f04f 0a01 	mov.w	sl, #1
 8082dcc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8082dce:	459a      	cmp	sl, r3
 8082dd0:	d21d      	bcs.n	8082e0e <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 8082dd2:	465a      	mov	r2, fp
 8082dd4:	4639      	mov	r1, r7
 8082dd6:	4620      	mov	r0, r4
 8082dd8:	f004 ff18 	bl	8087c0c <mbedtls_md_hmac_starts>
 8082ddc:	bb88      	cbnz	r0, 8082e42 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
 8082dde:	464a      	mov	r2, r9
 8082de0:	4629      	mov	r1, r5
 8082de2:	4620      	mov	r0, r4
 8082de4:	f004 ff72 	bl	8087ccc <mbedtls_md_hmac_update>
 8082de8:	bb58      	cbnz	r0, 8082e42 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
 8082dea:	4629      	mov	r1, r5
 8082dec:	4620      	mov	r0, r4
 8082dee:	f004 ff7d 	bl	8087cec <mbedtls_md_hmac_finish>
 8082df2:	bb30      	cbnz	r0, 8082e42 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 8082df4:	4548      	cmp	r0, r9
 8082df6:	da07      	bge.n	8082e08 <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
 8082df8:	f810 2008 	ldrb.w	r2, [r0, r8]
 8082dfc:	5d43      	ldrb	r3, [r0, r5]
 8082dfe:	4053      	eors	r3, r2
 8082e00:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 8082e04:	3001      	adds	r0, #1
 8082e06:	e7f5      	b.n	8082df4 <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
 8082e08:	f10a 0a01 	add.w	sl, sl, #1
 8082e0c:	e7de      	b.n	8082dcc <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
 8082e0e:	454e      	cmp	r6, r9
 8082e10:	4635      	mov	r5, r6
 8082e12:	bf28      	it	cs
 8082e14:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
 8082e16:	4641      	mov	r1, r8
 8082e18:	462a      	mov	r2, r5
 8082e1a:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8082e1c:	f010 f93f 	bl	809309e <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
 8082e20:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
 8082e22:	1b76      	subs	r6, r6, r5
        out_p += use_len;
 8082e24:	442b      	add	r3, r5
 8082e26:	9331      	str	r3, [sp, #196]	; 0xc4
 8082e28:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
 8082e2a:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8082e2e:	3301      	adds	r3, #1
 8082e30:	b2db      	uxtb	r3, r3
 8082e32:	7013      	strb	r3, [r2, #0]
 8082e34:	2b00      	cmp	r3, #0
 8082e36:	d1a4      	bne.n	8082d82 <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
 8082e38:	ab03      	add	r3, sp, #12
 8082e3a:	4293      	cmp	r3, r2
 8082e3c:	d1f5      	bne.n	8082e2a <mbedtls_pkcs5_pbkdf2_hmac+0xce>
 8082e3e:	e7a0      	b.n	8082d82 <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
 8082e40:	4630      	mov	r0, r6
}
 8082e42:	b025      	add	sp, #148	; 0x94
 8082e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082e48 <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 8082e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8082e4c:	461f      	mov	r7, r3
 8082e4e:	b0bd      	sub	sp, #244	; 0xf4
    int ret, iterations = 0, keylen = 0;
 8082e50:	2300      	movs	r3, #0
 8082e52:	9306      	str	r3, [sp, #24]
 8082e54:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
 8082e56:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
 8082e58:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 8082e5a:	6883      	ldr	r3, [r0, #8]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 8082e5c:	f04f 0904 	mov.w	r9, #4
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 8082e60:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
 8082e62:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8082e64:	6803      	ldr	r3, [r0, #0]

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 8082e66:	460d      	mov	r5, r1
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8082e68:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 8082e6a:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 8082e6c:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8082e70:	f040 80c9 	bne.w	8083006 <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
 8082e74:	ab10      	add	r3, sp, #64	; 0x40
 8082e76:	aa0a      	add	r2, sp, #40	; 0x28
 8082e78:	4621      	mov	r1, r4
 8082e7a:	a808      	add	r0, sp, #32
 8082e7c:	f000 fd65 	bl	808394a <mbedtls_asn1_get_alg>
 8082e80:	2800      	cmp	r0, #0
 8082e82:	d158      	bne.n	8082f36 <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 8082e84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8082e86:	2a09      	cmp	r2, #9
 8082e88:	d14c      	bne.n	8082f24 <mbedtls_pkcs5_pbes2+0xdc>
 8082e8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082e8c:	4861      	ldr	r0, [pc, #388]	; (8083014 <mbedtls_pkcs5_pbes2+0x1cc>)
 8082e8e:	f010 f8f7 	bl	8093080 <memcmp>
 8082e92:	2800      	cmp	r0, #0
 8082e94:	d146      	bne.n	8082f24 <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 8082e96:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
 8082e98:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 8082e9a:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
 8082e9c:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8082ea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8082ea2:	2b30      	cmp	r3, #48	; 0x30
 8082ea4:	f040 80af 	bne.w	8083006 <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8082ea8:	464b      	mov	r3, r9
 8082eaa:	aa17      	add	r2, sp, #92	; 0x5c
 8082eac:	4641      	mov	r1, r8
 8082eae:	a824      	add	r0, sp, #144	; 0x90
 8082eb0:	f000 fc72 	bl	8083798 <mbedtls_asn1_get_tag>
 8082eb4:	b9f8      	cbnz	r0, 8082ef6 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 8082eb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
 8082eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 8082eba:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
 8082ebc:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 8082ebe:	4641      	mov	r1, r8
 8082ec0:	aa06      	add	r2, sp, #24
 8082ec2:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
 8082ec4:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 8082ec6:	f000 fc94 	bl	80837f2 <mbedtls_asn1_get_int>
 8082eca:	b9a0      	cbnz	r0, 8082ef6 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
 8082ecc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8082ece:	4598      	cmp	r8, r3
 8082ed0:	d022      	beq.n	8082f18 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
 8082ed2:	aa07      	add	r2, sp, #28
 8082ed4:	4641      	mov	r1, r8
 8082ed6:	a824      	add	r0, sp, #144	; 0x90
 8082ed8:	f000 fc8b 	bl	80837f2 <mbedtls_asn1_get_int>
 8082edc:	b110      	cbz	r0, 8082ee4 <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8082ede:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8082ee2:	d108      	bne.n	8082ef6 <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
 8082ee4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8082ee6:	4598      	cmp	r8, r3
 8082ee8:	d016      	beq.n	8082f18 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
 8082eea:	aa2c      	add	r2, sp, #176	; 0xb0
 8082eec:	4641      	mov	r1, r8
 8082eee:	a824      	add	r0, sp, #144	; 0x90
 8082ef0:	f000 fd73 	bl	80839da <mbedtls_asn1_get_alg_null>
 8082ef4:	b128      	cbz	r0, 8082f02 <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 8082ef6:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
 8082efa:	2800      	cmp	r0, #0
 8082efc:	f040 8086 	bne.w	808300c <mbedtls_pkcs5_pbes2+0x1c4>
 8082f00:	e00a      	b.n	8082f18 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
 8082f02:	f10d 0116 	add.w	r1, sp, #22
 8082f06:	a82c      	add	r0, sp, #176	; 0xb0
 8082f08:	f002 f922 	bl	8085150 <mbedtls_oid_get_md_hmac>
 8082f0c:	b950      	cbnz	r0, 8082f24 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
 8082f0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8082f10:	4598      	cmp	r8, r3
 8082f12:	d001      	beq.n	8082f18 <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8082f14:	4840      	ldr	r0, [pc, #256]	; (8083018 <mbedtls_pkcs5_pbes2+0x1d0>)
 8082f16:	e079      	b.n	808300c <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
 8082f18:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8082f1c:	f004 fdf4 	bl	8087b08 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8082f20:	4681      	mov	r9, r0
 8082f22:	b908      	cbnz	r0, 8082f28 <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
 8082f24:	483d      	ldr	r0, [pc, #244]	; (808301c <mbedtls_pkcs5_pbes2+0x1d4>)
 8082f26:	e071      	b.n	808300c <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
 8082f28:	ab13      	add	r3, sp, #76	; 0x4c
 8082f2a:	aa0d      	add	r2, sp, #52	; 0x34
 8082f2c:	4621      	mov	r1, r4
 8082f2e:	a808      	add	r0, sp, #32
 8082f30:	f000 fd0b 	bl	808394a <mbedtls_asn1_get_alg>
 8082f34:	b110      	cbz	r0, 8082f3c <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 8082f36:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
 8082f3a:	e067      	b.n	808300c <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
 8082f3c:	f10d 0117 	add.w	r1, sp, #23
 8082f40:	a80d      	add	r0, sp, #52	; 0x34
 8082f42:	f002 f8d7 	bl	80850f4 <mbedtls_oid_get_cipher_alg>
 8082f46:	2800      	cmp	r0, #0
 8082f48:	d1ec      	bne.n	8082f24 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
 8082f4a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8082f4e:	f000 f949 	bl	80831e4 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 8082f52:	4680      	mov	r8, r0
 8082f54:	2800      	cmp	r0, #0
 8082f56:	d0e5      	beq.n	8082f24 <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
 8082f58:	6843      	ldr	r3, [r0, #4]
 8082f5a:	08db      	lsrs	r3, r3, #3
 8082f5c:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
 8082f5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8082f60:	2b04      	cmp	r3, #4
 8082f62:	d152      	bne.n	808300a <mbedtls_pkcs5_pbes2+0x1c2>
 8082f64:	68c3      	ldr	r3, [r0, #12]
 8082f66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8082f68:	429a      	cmp	r2, r3
 8082f6a:	d14e      	bne.n	808300a <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
 8082f6c:	a819      	add	r0, sp, #100	; 0x64
 8082f6e:	f004 fdd7 	bl	8087b20 <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
 8082f72:	a82c      	add	r0, sp, #176	; 0xb0
 8082f74:	f000 f958 	bl	8083228 <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
 8082f78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8082f7a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8082f7c:	a824      	add	r0, sp, #144	; 0x90
 8082f7e:	f010 f88e 	bl	809309e <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 8082f82:	2201      	movs	r2, #1
 8082f84:	4649      	mov	r1, r9
 8082f86:	a819      	add	r0, sp, #100	; 0x64
 8082f88:	f004 fdf0 	bl	8087b6c <mbedtls_md_setup>
 8082f8c:	4604      	mov	r4, r0
 8082f8e:	2800      	cmp	r0, #0
 8082f90:	d131      	bne.n	8082ff6 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
 8082f92:	9b07      	ldr	r3, [sp, #28]
 8082f94:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 8082f98:	9302      	str	r3, [sp, #8]
 8082f9a:	9b06      	ldr	r3, [sp, #24]
 8082f9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8082fa0:	9301      	str	r3, [sp, #4]
 8082fa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8082fa4:	463a      	mov	r2, r7
 8082fa6:	9300      	str	r3, [sp, #0]
 8082fa8:	4631      	mov	r1, r6
 8082faa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8082fac:	a819      	add	r0, sp, #100	; 0x64
 8082fae:	f7ff fed5 	bl	8082d5c <mbedtls_pkcs5_pbkdf2_hmac>
 8082fb2:	4604      	mov	r4, r0
 8082fb4:	b9f8      	cbnz	r0, 8082ff6 <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 8082fb6:	4641      	mov	r1, r8
 8082fb8:	a82c      	add	r0, sp, #176	; 0xb0
 8082fba:	f000 fb09 	bl	80835d0 <mbedtls_cipher_setup>
 8082fbe:	4604      	mov	r4, r0
 8082fc0:	b9c8      	cbnz	r0, 8082ff6 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 8082fc2:	9a07      	ldr	r2, [sp, #28]
 8082fc4:	b26b      	sxtb	r3, r5
 8082fc6:	00d2      	lsls	r2, r2, #3
 8082fc8:	4649      	mov	r1, r9
 8082fca:	a82c      	add	r0, sp, #176	; 0xb0
 8082fcc:	f000 f942 	bl	8083254 <mbedtls_cipher_setkey>
 8082fd0:	4604      	mov	r4, r0
 8082fd2:	b980      	cbnz	r0, 8082ff6 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
 8082fd4:	ab09      	add	r3, sp, #36	; 0x24
 8082fd6:	9302      	str	r3, [sp, #8]
 8082fd8:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8082fda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8082fdc:	9301      	str	r3, [sp, #4]
 8082fde:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8082fe0:	a924      	add	r1, sp, #144	; 0x90
 8082fe2:	9300      	str	r3, [sp, #0]
 8082fe4:	a82c      	add	r0, sp, #176	; 0xb0
 8082fe6:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8082fe8:	f000 fb10 	bl	808360c <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
 8082fec:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
 8082ff0:	2800      	cmp	r0, #0
 8082ff2:	bf08      	it	eq
 8082ff4:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
 8082ff6:	a819      	add	r0, sp, #100	; 0x64
 8082ff8:	f004 fd97 	bl	8087b2a <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
 8082ffc:	a82c      	add	r0, sp, #176	; 0xb0
 8082ffe:	f000 f917 	bl	8083230 <mbedtls_cipher_free>

    return( ret );
 8083002:	4620      	mov	r0, r4
 8083004:	e002      	b.n	808300c <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8083006:	4806      	ldr	r0, [pc, #24]	; (8083020 <mbedtls_pkcs5_pbes2+0x1d8>)
 8083008:	e000      	b.n	808300c <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
 808300a:	4806      	ldr	r0, [pc, #24]	; (8083024 <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 808300c:	b03d      	add	sp, #244	; 0xf4
 808300e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8083012:	bf00      	nop
 8083014:	080933a0 	.word	0x080933a0
 8083018:	ffffd09a 	.word	0xffffd09a
 808301c:	ffffd180 	.word	0xffffd180
 8083020:	ffffd09e 	.word	0xffffd09e
 8083024:	ffffd100 	.word	0xffffd100

08083028 <mbedtls_cipher_get_block_size>:
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8083028:	b110      	cbz	r0, 8083030 <mbedtls_cipher_get_block_size+0x8>
 808302a:	6800      	ldr	r0, [r0, #0]
 808302c:	b100      	cbz	r0, 8083030 <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 808302e:	6940      	ldr	r0, [r0, #20]
}
 8083030:	4770      	bx	lr

08083032 <_ZL16add_pkcs_paddingPhjj>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 8083032:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
 8083034:	1a89      	subs	r1, r1, r2
 8083036:	2400      	movs	r4, #0
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 8083038:	b2e3      	uxtb	r3, r4
 808303a:	4299      	cmp	r1, r3
 808303c:	f104 0401 	add.w	r4, r4, #1
 8083040:	d902      	bls.n	8083048 <_ZL16add_pkcs_paddingPhjj+0x16>
        output[data_len + i] = (unsigned char) padding_len;
 8083042:	4403      	add	r3, r0
 8083044:	5499      	strb	r1, [r3, r2]
        size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 8083046:	e7f7      	b.n	8083038 <_ZL16add_pkcs_paddingPhjj+0x6>
 8083048:	bd10      	pop	{r4, pc}
	...

0808304c <_ZL16get_pkcs_paddingPhjPj>:
        output[data_len + i] = (unsigned char) padding_len;
}

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 808304c:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 808304e:	b300      	cbz	r0, 8083092 <_ZL16get_pkcs_paddingPhjPj+0x46>
 8083050:	b1fa      	cbz	r2, 8083092 <_ZL16get_pkcs_paddingPhjPj+0x46>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 8083052:	1843      	adds	r3, r0, r1
 8083054:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8083058:	fab4 f384 	clz	r3, r4
 808305c:	095b      	lsrs	r3, r3, #5
 808305e:	42a1      	cmp	r1, r4
 8083060:	bf38      	it	cc
 8083062:	f043 0301 	orrcc.w	r3, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8083066:	1b0f      	subs	r7, r1, r4
 8083068:	6017      	str	r7, [r2, #0]
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 808306a:	2200      	movs	r2, #0
 808306c:	428a      	cmp	r2, r1
 808306e:	d00b      	beq.n	8083088 <_ZL16get_pkcs_paddingPhjPj+0x3c>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 8083070:	5c85      	ldrb	r5, [r0, r2]
 8083072:	42ba      	cmp	r2, r7
 8083074:	ea84 0605 	eor.w	r6, r4, r5
 8083078:	bf34      	ite	cc
 808307a:	2500      	movcc	r5, #0
 808307c:	2501      	movcs	r5, #1
 808307e:	4375      	muls	r5, r6
 8083080:	432b      	orrs	r3, r5
 8083082:	b2db      	uxtb	r3, r3
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 8083084:	3201      	adds	r2, #1
 8083086:	e7f1      	b.n	808306c <_ZL16get_pkcs_paddingPhjPj+0x20>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8083088:	2b00      	cmp	r3, #0
 808308a:	4803      	ldr	r0, [pc, #12]	; (8083098 <_ZL16get_pkcs_paddingPhjPj+0x4c>)
 808308c:	bf08      	it	eq
 808308e:	2000      	moveq	r0, #0
 8083090:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083092:	4802      	ldr	r0, [pc, #8]	; (808309c <_ZL16get_pkcs_paddingPhjPj+0x50>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 8083094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083096:	bf00      	nop
 8083098:	ffff9e00 	.word	0xffff9e00
 808309c:	ffff9f00 	.word	0xffff9f00

080830a0 <_ZL25add_one_and_zeros_paddingPhjj>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 80830a0:	2380      	movs	r3, #128	; 0x80
/*
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 80830a2:	b530      	push	{r4, r5, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 80830a4:	5483      	strb	r3, [r0, r2]
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 80830a6:	1a89      	subs	r1, r1, r2
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80830a8:	2301      	movs	r3, #1
        output[data_len + i] = 0x00;
 80830aa:	2500      	movs	r5, #0
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80830ac:	4299      	cmp	r1, r3
 80830ae:	d904      	bls.n	80830ba <_ZL25add_one_and_zeros_paddingPhjj+0x1a>
        output[data_len + i] = 0x00;
 80830b0:	18c4      	adds	r4, r0, r3
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80830b2:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 80830b4:	54a5      	strb	r5, [r4, r2]
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80830b6:	b2db      	uxtb	r3, r3
 80830b8:	e7f8      	b.n	80830ac <_ZL25add_one_and_zeros_paddingPhjj+0xc>
 80830ba:	bd30      	pop	{r4, r5, pc}

080830bc <_ZL25add_zeros_and_len_paddingPhjj>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 80830bc:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80830be:	2301      	movs	r3, #1
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 80830c0:	1a8d      	subs	r5, r1, r2
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
        output[data_len + i - 1] = 0x00;
 80830c2:	2600      	movs	r6, #0
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80830c4:	429d      	cmp	r5, r3
 80830c6:	d906      	bls.n	80830d6 <_ZL25add_zeros_and_len_paddingPhjj+0x1a>
        output[data_len + i - 1] = 0x00;
 80830c8:	18c4      	adds	r4, r0, r3
 80830ca:	4414      	add	r4, r2
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80830cc:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 80830ce:	f804 6c01 	strb.w	r6, [r4, #-1]
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80830d2:	b2db      	uxtb	r3, r3
 80830d4:	e7f6      	b.n	80830c4 <_ZL25add_zeros_and_len_paddingPhjj+0x8>
        output[data_len + i - 1] = 0x00;
    output[output_len - 1] = (unsigned char) padding_len;
 80830d6:	4401      	add	r1, r0
 80830d8:	f801 5c01 	strb.w	r5, [r1, #-1]
 80830dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080830e0 <_ZL25get_zeros_and_len_paddingPhjPj>:
}

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 80830e0:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 80830e2:	b1f0      	cbz	r0, 8083122 <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
 80830e4:	b1ea      	cbz	r2, 8083122 <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 80830e6:	1e4e      	subs	r6, r1, #1
 80830e8:	5d84      	ldrb	r4, [r0, r6]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 80830ea:	fab4 f384 	clz	r3, r4

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 80830ee:	1b0d      	subs	r5, r1, r4

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 80830f0:	095b      	lsrs	r3, r3, #5
 80830f2:	42a1      	cmp	r1, r4
 80830f4:	bf2c      	ite	cs
 80830f6:	4619      	movcs	r1, r3
 80830f8:	f043 0101 	orrcc.w	r1, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 80830fc:	6015      	str	r5, [r2, #0]
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 80830fe:	2300      	movs	r3, #0
 8083100:	42b3      	cmp	r3, r6
 8083102:	d209      	bcs.n	8083118 <_ZL25get_zeros_and_len_paddingPhjPj+0x38>
        bad |= input[i] * ( i >= pad_idx );
 8083104:	42ab      	cmp	r3, r5
 8083106:	5cc4      	ldrb	r4, [r0, r3]
 8083108:	bf34      	ite	cc
 808310a:	2200      	movcc	r2, #0
 808310c:	2201      	movcs	r2, #1
 808310e:	4362      	muls	r2, r4
 8083110:	4311      	orrs	r1, r2
 8083112:	b2c9      	uxtb	r1, r1
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 8083114:	3301      	adds	r3, #1
 8083116:	e7f3      	b.n	8083100 <_ZL25get_zeros_and_len_paddingPhjPj+0x20>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8083118:	2900      	cmp	r1, #0
 808311a:	4803      	ldr	r0, [pc, #12]	; (8083128 <_ZL25get_zeros_and_len_paddingPhjPj+0x48>)
 808311c:	bf08      	it	eq
 808311e:	2000      	moveq	r0, #0
 8083120:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083122:	4802      	ldr	r0, [pc, #8]	; (808312c <_ZL25get_zeros_and_len_paddingPhjPj+0x4c>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 8083124:	bd70      	pop	{r4, r5, r6, pc}
 8083126:	bf00      	nop
 8083128:	ffff9e00 	.word	0xffff9e00
 808312c:	ffff9f00 	.word	0xffff9f00

08083130 <_ZL17add_zeros_paddingPhjj>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 8083130:	b510      	push	{r4, lr}
 8083132:	4402      	add	r2, r0
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 8083134:	2300      	movs	r3, #0
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 8083136:	1a14      	subs	r4, r2, r0
 8083138:	42a1      	cmp	r1, r4
 808313a:	d902      	bls.n	8083142 <_ZL17add_zeros_paddingPhjj+0x12>
        output[i] = 0x00;
 808313c:	f802 3b01 	strb.w	r3, [r2], #1
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 8083140:	e7f9      	b.n	8083136 <_ZL17add_zeros_paddingPhjj+0x6>
 8083142:	bd10      	pop	{r4, pc}

08083144 <_ZL14get_no_paddingPhjPj>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 8083144:	b118      	cbz	r0, 808314e <_ZL14get_no_paddingPhjPj+0xa>
 8083146:	b112      	cbz	r2, 808314e <_ZL14get_no_paddingPhjPj+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 8083148:	6011      	str	r1, [r2, #0]

    return( 0 );
 808314a:	2000      	movs	r0, #0
 808314c:	4770      	bx	lr
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 808314e:	4801      	ldr	r0, [pc, #4]	; (8083154 <_ZL14get_no_paddingPhjPj+0x10>)

    *data_len = input_len;

    return( 0 );
}
 8083150:	4770      	bx	lr
 8083152:	bf00      	nop
 8083154:	ffff9f00 	.word	0xffff9f00

08083158 <_ZL25get_one_and_zeros_paddingPhjPj>:
        output[data_len + i] = 0x00;
}

static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 8083158:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
 808315a:	b1f0      	cbz	r0, 808319a <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
 808315c:	b1ea      	cbz	r2, 808319a <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
    *data_len = 0;
 808315e:	2300      	movs	r3, #0
 8083160:	6013      	str	r3, [r2, #0]
 8083162:	4408      	add	r0, r1
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
 8083164:	2480      	movs	r4, #128	; 0x80
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 8083166:	b199      	cbz	r1, 8083190 <_ZL25get_one_and_zeros_paddingPhjPj+0x38>
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 8083168:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 808316c:	3901      	subs	r1, #1
 808316e:	2d00      	cmp	r5, #0
 8083170:	bf0c      	ite	eq
 8083172:	461d      	moveq	r5, r3
 8083174:	f043 0501 	orrne.w	r5, r3, #1
 8083178:	406b      	eors	r3, r5
        *data_len |= ( i - 1 ) * ( done != prev_done );
 808317a:	fb01 f603 	mul.w	r6, r1, r3
 808317e:	6817      	ldr	r7, [r2, #0]
 8083180:	433e      	orrs	r6, r7
 8083182:	6016      	str	r6, [r2, #0]
        bad ^= input[i - 1] * ( done != prev_done );
 8083184:	7806      	ldrb	r6, [r0, #0]
 8083186:	4373      	muls	r3, r6
 8083188:	405c      	eors	r4, r3
 808318a:	b2e4      	uxtb	r4, r4
    bad = 0x80;
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 808318c:	462b      	mov	r3, r5
 808318e:	e7ea      	b.n	8083166 <_ZL25get_one_and_zeros_paddingPhjPj+0xe>
        *data_len |= ( i - 1 ) * ( done != prev_done );
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8083190:	2c00      	cmp	r4, #0
 8083192:	4803      	ldr	r0, [pc, #12]	; (80831a0 <_ZL25get_one_and_zeros_paddingPhjPj+0x48>)
 8083194:	bf08      	it	eq
 8083196:	2000      	moveq	r0, #0
 8083198:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 808319a:	4802      	ldr	r0, [pc, #8]	; (80831a4 <_ZL25get_one_and_zeros_paddingPhjPj+0x4c>)
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );

}
 808319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808319e:	bf00      	nop
 80831a0:	ffff9e00 	.word	0xffff9e00
 80831a4:	ffff9f00 	.word	0xffff9f00

080831a8 <_ZL17get_zeros_paddingPhjPj>:
        output[i] = 0x00;
}

static int get_zeros_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 80831a8:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
 80831aa:	b1a8      	cbz	r0, 80831d8 <_ZL17get_zeros_paddingPhjPj+0x30>
 80831ac:	b1a2      	cbz	r2, 80831d8 <_ZL17get_zeros_paddingPhjPj+0x30>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = 0;
 80831ae:	2300      	movs	r3, #0
 80831b0:	6013      	str	r3, [r2, #0]
 80831b2:	4401      	add	r1, r0
    for( i = input_len; i > 0; i-- )
 80831b4:	4281      	cmp	r1, r0
 80831b6:	eba1 0400 	sub.w	r4, r1, r0
 80831ba:	d00f      	beq.n	80831dc <_ZL17get_zeros_paddingPhjPj+0x34>
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 80831bc:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 80831c0:	2d00      	cmp	r5, #0
 80831c2:	bf0c      	ite	eq
 80831c4:	461d      	moveq	r5, r3
 80831c6:	f043 0501 	orrne.w	r5, r3, #1
        *data_len |= i * ( done != prev_done );
 80831ca:	406b      	eors	r3, r5
 80831cc:	4363      	muls	r3, r4
 80831ce:	6814      	ldr	r4, [r2, #0]
 80831d0:	4323      	orrs	r3, r4
 80831d2:	6013      	str	r3, [r2, #0]

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 80831d4:	462b      	mov	r3, r5
 80831d6:	e7ed      	b.n	80831b4 <_ZL17get_zeros_paddingPhjPj+0xc>
{
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80831d8:	4801      	ldr	r0, [pc, #4]	; (80831e0 <_ZL17get_zeros_paddingPhjPj+0x38>)
 80831da:	bd30      	pop	{r4, r5, pc}

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 80831dc:	2000      	movs	r0, #0
        done |= ( input[i-1] != 0 );
        *data_len |= i * ( done != prev_done );
    }

    return( 0 );
}
 80831de:	bd30      	pop	{r4, r5, pc}
 80831e0:	ffff9f00 	.word	0xffff9f00

080831e4 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 80831e4:	4b05      	ldr	r3, [pc, #20]	; (80831fc <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80831e6:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80831ea:	b122      	cbz	r2, 80831f6 <mbedtls_cipher_info_from_type+0x12>
 80831ec:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 80831ee:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80831f2:	4281      	cmp	r1, r0
 80831f4:	d1f7      	bne.n	80831e6 <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
 80831f6:	4610      	mov	r0, r2
 80831f8:	4770      	bx	lr
 80831fa:	bf00      	nop
 80831fc:	080941b4 	.word	0x080941b4

08083200 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 8083200:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8083202:	4c08      	ldr	r4, [pc, #32]	; (8083224 <mbedtls_cipher_info_from_values+0x24>)
 8083204:	6863      	ldr	r3, [r4, #4]
 8083206:	b15b      	cbz	r3, 8083220 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 8083208:	699d      	ldr	r5, [r3, #24]
 808320a:	782d      	ldrb	r5, [r5, #0]
 808320c:	4285      	cmp	r5, r0
 808320e:	d105      	bne.n	808321c <mbedtls_cipher_info_from_values+0x1c>
 8083210:	685d      	ldr	r5, [r3, #4]
 8083212:	428d      	cmp	r5, r1
 8083214:	d102      	bne.n	808321c <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 8083216:	785d      	ldrb	r5, [r3, #1]
 8083218:	4295      	cmp	r5, r2
 808321a:	d001      	beq.n	8083220 <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 808321c:	3408      	adds	r4, #8
 808321e:	e7f1      	b.n	8083204 <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 8083220:	4618      	mov	r0, r3
 8083222:	bd30      	pop	{r4, r5, pc}
 8083224:	080941ac 	.word	0x080941ac

08083228 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8083228:	2240      	movs	r2, #64	; 0x40
 808322a:	2100      	movs	r1, #0
 808322c:	f00f bf5d 	b.w	80930ea <memset>

08083230 <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 8083230:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8083232:	4604      	mov	r4, r0
 8083234:	b168      	cbz	r0, 8083252 <mbedtls_cipher_free+0x22>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 8083236:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8083238:	b118      	cbz	r0, 8083242 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 808323a:	6823      	ldr	r3, [r4, #0]
 808323c:	699b      	ldr	r3, [r3, #24]
 808323e:	699b      	ldr	r3, [r3, #24]
 8083240:	4798      	blx	r3
 8083242:	f104 0240 	add.w	r2, r4, #64	; 0x40
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8083246:	2300      	movs	r3, #0
 8083248:	4294      	cmp	r4, r2
 808324a:	d002      	beq.n	8083252 <mbedtls_cipher_free+0x22>
 808324c:	7023      	strb	r3, [r4, #0]
 808324e:	3401      	adds	r4, #1
 8083250:	e7fa      	b.n	8083248 <mbedtls_cipher_free+0x18>
 8083252:	bd10      	pop	{r4, pc}

08083254 <mbedtls_cipher_setkey>:
    return( 0 );
}

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
 8083254:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 8083256:	b1c8      	cbz	r0, 808328c <mbedtls_cipher_setkey+0x38>
 8083258:	6804      	ldr	r4, [r0, #0]
 808325a:	b1bc      	cbz	r4, 808328c <mbedtls_cipher_setkey+0x38>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 808325c:	6925      	ldr	r5, [r4, #16]
 808325e:	07ad      	lsls	r5, r5, #30
 8083260:	d402      	bmi.n	8083268 <mbedtls_cipher_setkey+0x14>
 8083262:	6865      	ldr	r5, [r4, #4]
 8083264:	4295      	cmp	r5, r2
 8083266:	d111      	bne.n	808328c <mbedtls_cipher_setkey+0x38>
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8083268:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 808326a:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 808326c:	7203      	strb	r3, [r0, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 808326e:	d004      	beq.n	808327a <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8083270:	7865      	ldrb	r5, [r4, #1]
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8083272:	2d03      	cmp	r5, #3
 8083274:	d001      	beq.n	808327a <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8083276:	2d05      	cmp	r5, #5
 8083278:	d102      	bne.n	8083280 <mbedtls_cipher_setkey+0x2c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 808327a:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 808327c:	68db      	ldr	r3, [r3, #12]
 808327e:	e002      	b.n	8083286 <mbedtls_cipher_setkey+0x32>
    }

    if( MBEDTLS_DECRYPT == operation )
 8083280:	b923      	cbnz	r3, 808328c <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8083282:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 8083284:	691b      	ldr	r3, [r3, #16]
 8083286:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8083288:	bc30      	pop	{r4, r5}
                ctx->key_bitlen );
    }

    if( MBEDTLS_DECRYPT == operation )
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                ctx->key_bitlen );
 808328a:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 808328c:	4801      	ldr	r0, [pc, #4]	; (8083294 <mbedtls_cipher_setkey+0x40>)
 808328e:	bc30      	pop	{r4, r5}
 8083290:	4770      	bx	lr
 8083292:	bf00      	nop
 8083294:	ffff9f00 	.word	0xffff9f00

08083298 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
 8083298:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 808329a:	4604      	mov	r4, r0
 808329c:	b1b0      	cbz	r0, 80832cc <mbedtls_cipher_set_iv+0x34>
 808329e:	6803      	ldr	r3, [r0, #0]
 80832a0:	b1a3      	cbz	r3, 80832cc <mbedtls_cipher_set_iv+0x34>
 80832a2:	b199      	cbz	r1, 80832cc <mbedtls_cipher_set_iv+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 80832a4:	2a10      	cmp	r2, #16
 80832a6:	d80f      	bhi.n	80832c8 <mbedtls_cipher_set_iv+0x30>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 80832a8:	6918      	ldr	r0, [r3, #16]
 80832aa:	07c0      	lsls	r0, r0, #31
 80832ac:	d403      	bmi.n	80832b6 <mbedtls_cipher_set_iv+0x1e>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 80832ae:	68dd      	ldr	r5, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 80832b0:	42aa      	cmp	r2, r5
 80832b2:	d201      	bcs.n	80832b8 <mbedtls_cipher_set_iv+0x20>
 80832b4:	e00a      	b.n	80832cc <mbedtls_cipher_set_iv+0x34>
 80832b6:	4615      	mov	r5, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    memcpy( ctx->iv, iv, actual_iv_size );
 80832b8:	462a      	mov	r2, r5
 80832ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80832be:	f00f feee 	bl	809309e <memcpy>
    ctx->iv_size = actual_iv_size;
 80832c2:	63a5      	str	r5, [r4, #56]	; 0x38

    return( 0 );
 80832c4:	2000      	movs	r0, #0
 80832c6:	bd38      	pop	{r3, r4, r5, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80832c8:	4801      	ldr	r0, [pc, #4]	; (80832d0 <mbedtls_cipher_set_iv+0x38>)
 80832ca:	bd38      	pop	{r3, r4, r5, pc}
                   const unsigned char *iv, size_t iv_len )
{
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80832cc:	4801      	ldr	r0, [pc, #4]	; (80832d4 <mbedtls_cipher_set_iv+0x3c>)

    memcpy( ctx->iv, iv, actual_iv_size );
    ctx->iv_size = actual_iv_size;

    return( 0 );
}
 80832ce:	bd38      	pop	{r3, r4, r5, pc}
 80832d0:	ffff9f80 	.word	0xffff9f80
 80832d4:	ffff9f00 	.word	0xffff9f00

080832d8 <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 80832d8:	b128      	cbz	r0, 80832e6 <mbedtls_cipher_reset+0xe>
 80832da:	6803      	ldr	r3, [r0, #0]
 80832dc:	b11b      	cbz	r3, 80832e6 <mbedtls_cipher_reset+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
 80832de:	2300      	movs	r3, #0
 80832e0:	6243      	str	r3, [r0, #36]	; 0x24

    return( 0 );
 80832e2:	4618      	mov	r0, r3
 80832e4:	4770      	bx	lr
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80832e6:	4801      	ldr	r0, [pc, #4]	; (80832ec <mbedtls_cipher_reset+0x14>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
 80832e8:	4770      	bx	lr
 80832ea:	bf00      	nop
 80832ec:	ffff9f00 	.word	0xffff9f00

080832f0 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 80832f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80832f4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80832f8:	460f      	mov	r7, r1
 80832fa:	4615      	mov	r5, r2
 80832fc:	4699      	mov	r9, r3
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 80832fe:	4604      	mov	r4, r0
 8083300:	b908      	cbnz	r0, 8083306 <mbedtls_cipher_update+0x16>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083302:	485c      	ldr	r0, [pc, #368]	; (8083474 <mbedtls_cipher_update+0x184>)
 8083304:	e0b2      	b.n	808346c <mbedtls_cipher_update+0x17c>
                   size_t ilen, unsigned char *output, size_t *olen )
{
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8083306:	6803      	ldr	r3, [r0, #0]
 8083308:	2b00      	cmp	r3, #0
 808330a:	d0fa      	beq.n	8083302 <mbedtls_cipher_update+0x12>
 808330c:	f1b8 0f00 	cmp.w	r8, #0
 8083310:	d0f7      	beq.n	8083302 <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
 8083312:	2300      	movs	r3, #0
 8083314:	f8c8 3000 	str.w	r3, [r8]
    block_size = mbedtls_cipher_get_block_size( ctx );
 8083318:	f7ff fe86 	bl	8083028 <mbedtls_cipher_get_block_size>

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 808331c:	6823      	ldr	r3, [r4, #0]
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );
 808331e:	4606      	mov	r6, r0

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8083320:	785b      	ldrb	r3, [r3, #1]
 8083322:	2b01      	cmp	r3, #1
 8083324:	d110      	bne.n	8083348 <mbedtls_cipher_update+0x58>
    {
        if( ilen != block_size )
 8083326:	4290      	cmp	r0, r2
 8083328:	d17d      	bne.n	8083426 <mbedtls_cipher_update+0x136>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 808332a:	f8c8 0000 	str.w	r0, [r8]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 808332e:	6823      	ldr	r3, [r4, #0]
 8083330:	460a      	mov	r2, r1
 8083332:	699b      	ldr	r3, [r3, #24]
 8083334:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8083338:	685d      	ldr	r5, [r3, #4]
 808333a:	464b      	mov	r3, r9
 808333c:	46ac      	mov	ip, r5
 808333e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083340:	b003      	add	sp, #12
 8083342:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8083346:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8083348:	2b06      	cmp	r3, #6
 808334a:	d10a      	bne.n	8083362 <mbedtls_cipher_update+0x72>
    {
        *olen = ilen;
 808334c:	f8c8 2000 	str.w	r2, [r8]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 8083350:	464b      	mov	r3, r9
 8083352:	460a      	mov	r2, r1
 8083354:	4629      	mov	r1, r5
 8083356:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083358:	b003      	add	sp, #12
 808335a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 808335e:	f004 b9f1 	b.w	8087744 <mbedtls_gcm_update>
    }
#endif

    if ( 0 == block_size )
 8083362:	2800      	cmp	r0, #0
 8083364:	d061      	beq.n	808342a <mbedtls_cipher_update+0x13a>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
    }

    if( input == output &&
 8083366:	4549      	cmp	r1, r9
 8083368:	d108      	bne.n	808337c <mbedtls_cipher_update+0x8c>
 808336a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808336c:	2a00      	cmp	r2, #0
 808336e:	d1c8      	bne.n	8083302 <mbedtls_cipher_update+0x12>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8083370:	fbb5 f2f0 	udiv	r2, r5, r0
 8083374:	fb00 5212 	mls	r2, r0, r2, r5
 8083378:	2a00      	cmp	r2, #0
 808337a:	d1c2      	bne.n	8083302 <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 808337c:	2b02      	cmp	r3, #2
 808337e:	d156      	bne.n	808342e <mbedtls_cipher_update+0x13e>
        size_t copy_len = 0;

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8083380:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8083384:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8083386:	b92b      	cbnz	r3, 8083394 <mbedtls_cipher_update+0xa4>
 8083388:	68e3      	ldr	r3, [r4, #12]
 808338a:	b12b      	cbz	r3, 8083398 <mbedtls_cipher_update+0xa8>
 808338c:	1a33      	subs	r3, r6, r0
 808338e:	429d      	cmp	r5, r3
 8083390:	d80f      	bhi.n	80833b2 <mbedtls_cipher_update+0xc2>
 8083392:	e004      	b.n	808339e <mbedtls_cipher_update+0xae>
                ilen <= block_size - ctx->unprocessed_len ) ||
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
                ilen < block_size - ctx->unprocessed_len ) ||
 8083394:	2b01      	cmp	r3, #1
 8083396:	d10c      	bne.n	80833b2 <mbedtls_cipher_update+0xc2>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8083398:	1a33      	subs	r3, r6, r0
 808339a:	429d      	cmp	r5, r3
 808339c:	d209      	bcs.n	80833b2 <mbedtls_cipher_update+0xc2>
                ilen < block_size - ctx->unprocessed_len ) )
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    ilen );
 808339e:	4420      	add	r0, r4
 80833a0:	462a      	mov	r2, r5
 80833a2:	4639      	mov	r1, r7
 80833a4:	3014      	adds	r0, #20
 80833a6:	f00f fe7a 	bl	809309e <memcpy>

            ctx->unprocessed_len += ilen;
 80833aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80833ac:	441d      	add	r5, r3
 80833ae:	6265      	str	r5, [r4, #36]	; 0x24
 80833b0:	e037      	b.n	8083422 <mbedtls_cipher_update+0x132>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 80833b2:	b310      	cbz	r0, 80833fa <mbedtls_cipher_update+0x10a>
        {
            copy_len = block_size - ctx->unprocessed_len;
 80833b4:	ebc0 0a06 	rsb	sl, r0, r6

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    copy_len );
 80833b8:	4420      	add	r0, r4
 80833ba:	4652      	mov	r2, sl
 80833bc:	4639      	mov	r1, r7
 80833be:	3014      	adds	r0, #20
 80833c0:	f00f fe6d 	bl	809309e <memcpy>

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80833c4:	4623      	mov	r3, r4
 80833c6:	f853 2b14 	ldr.w	r2, [r3], #20
 80833ca:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80833ce:	6992      	ldr	r2, [r2, #24]
 80833d0:	e88d 0208 	stmia.w	sp, {r3, r9}
 80833d4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80833d8:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80833dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80833de:	4632      	mov	r2, r6
 80833e0:	47d8      	blx	fp
 80833e2:	2800      	cmp	r0, #0
 80833e4:	d142      	bne.n	808346c <mbedtls_cipher_update+0x17c>
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 80833e6:	f8d8 3000 	ldr.w	r3, [r8]
            output += block_size;
 80833ea:	44b1      	add	r9, r6
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 80833ec:	4433      	add	r3, r6
 80833ee:	f8c8 3000 	str.w	r3, [r8]
            output += block_size;
            ctx->unprocessed_len = 0;

            input += copy_len;
 80833f2:	4457      	add	r7, sl
                return( ret );
            }

            *olen += block_size;
            output += block_size;
            ctx->unprocessed_len = 0;
 80833f4:	6260      	str	r0, [r4, #36]	; 0x24

            input += copy_len;
            ilen -= copy_len;
 80833f6:	ebca 0505 	rsb	r5, sl, r5
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 80833fa:	b195      	cbz	r5, 8083422 <mbedtls_cipher_update+0x132>

            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 80833fc:	fbb5 faf6 	udiv	sl, r5, r6
 8083400:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 &&
 8083404:	f1ba 0f00 	cmp.w	sl, #0
 8083408:	d013      	beq.n	8083432 <mbedtls_cipher_update+0x142>
                NULL != ctx->add_padding)
            {
                copy_len = block_size;
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 808340a:	ebca 0505 	rsb	r5, sl, r5
                    copy_len );
 808340e:	4652      	mov	r2, sl
 8083410:	1979      	adds	r1, r7, r5
 8083412:	f104 0014 	add.w	r0, r4, #20
 8083416:	f00f fe42 	bl	809309e <memcpy>

            ctx->unprocessed_len += copy_len;
 808341a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808341c:	4453      	add	r3, sl
 808341e:	6263      	str	r3, [r4, #36]	; 0x24
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 8083420:	b995      	cbnz	r5, 8083448 <mbedtls_cipher_update+0x158>
            }

            *olen += ilen;
        }

        return( 0 );
 8083422:	2000      	movs	r0, #0
 8083424:	e022      	b.n	808346c <mbedtls_cipher_update+0x17c>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8083426:	4814      	ldr	r0, [pc, #80]	; (8083478 <mbedtls_cipher_update+0x188>)
 8083428:	e020      	b.n	808346c <mbedtls_cipher_update+0x17c>
    }
#endif

    if ( 0 == block_size )
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 808342a:	4814      	ldr	r0, [pc, #80]	; (808347c <mbedtls_cipher_update+0x18c>)
 808342c:	e01e      	b.n	808346c <mbedtls_cipher_update+0x17c>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 808342e:	4814      	ldr	r0, [pc, #80]	; (8083480 <mbedtls_cipher_update+0x190>)
 8083430:	e01c      	b.n	808346c <mbedtls_cipher_update+0x17c>
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
            if( copy_len == 0 &&
 8083432:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8083436:	2b00      	cmp	r3, #0
 8083438:	d1e7      	bne.n	808340a <mbedtls_cipher_update+0x11a>
                ctx->operation == MBEDTLS_DECRYPT &&
 808343a:	68e3      	ldr	r3, [r4, #12]
 808343c:	2b00      	cmp	r3, #0
 808343e:	bf0c      	ite	eq
 8083440:	f04f 0a00 	moveq.w	sl, #0
 8083444:	46b2      	movne	sl, r6
 8083446:	e7e0      	b.n	808340a <mbedtls_cipher_update+0x11a>
        /*
         * Process remaining full blocks
         */
        if( ilen )
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8083448:	6823      	ldr	r3, [r4, #0]
 808344a:	f994 1008 	ldrsb.w	r1, [r4, #8]
 808344e:	699b      	ldr	r3, [r3, #24]
 8083450:	e88d 0280 	stmia.w	sp, {r7, r9}
 8083454:	462a      	mov	r2, r5
 8083456:	689e      	ldr	r6, [r3, #8]
 8083458:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808345a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 808345e:	47b0      	blx	r6
 8083460:	b920      	cbnz	r0, 808346c <mbedtls_cipher_update+0x17c>
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
            {
                return( ret );
            }

            *olen += ilen;
 8083462:	f8d8 3000 	ldr.w	r3, [r8]
 8083466:	441d      	add	r5, r3
 8083468:	f8c8 5000 	str.w	r5, [r8]
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 808346c:	b003      	add	sp, #12
 808346e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083472:	bf00      	nop
 8083474:	ffff9f00 	.word	0xffff9f00
 8083478:	ffff9d80 	.word	0xffff9d80
 808347c:	ffff9c80 	.word	0xffff9c80
 8083480:	ffff9f80 	.word	0xffff9f80

08083484 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 8083484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8083486:	460e      	mov	r6, r1
 8083488:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 808348a:	4604      	mov	r4, r0
 808348c:	2800      	cmp	r0, #0
 808348e:	d052      	beq.n	8083536 <mbedtls_cipher_finish+0xb2>
 8083490:	6803      	ldr	r3, [r0, #0]
 8083492:	2b00      	cmp	r3, #0
 8083494:	d04f      	beq.n	8083536 <mbedtls_cipher_finish+0xb2>
 8083496:	2a00      	cmp	r2, #0
 8083498:	d04d      	beq.n	8083536 <mbedtls_cipher_finish+0xb2>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 808349a:	2300      	movs	r3, #0
 808349c:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 808349e:	6807      	ldr	r7, [r0, #0]
 80834a0:	787a      	ldrb	r2, [r7, #1]
 80834a2:	2a03      	cmp	r2, #3
 80834a4:	d04d      	beq.n	8083542 <mbedtls_cipher_finish+0xbe>
 80834a6:	1f51      	subs	r1, r2, #5
 80834a8:	2902      	cmp	r1, #2
 80834aa:	d94a      	bls.n	8083542 <mbedtls_cipher_finish+0xbe>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 80834ac:	2a01      	cmp	r2, #1
 80834ae:	d101      	bne.n	80834b4 <mbedtls_cipher_finish+0x30>
    {
        if( ctx->unprocessed_len != 0 )
 80834b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80834b2:	e016      	b.n	80834e2 <mbedtls_cipher_finish+0x5e>

        return( 0 );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 80834b4:	2a02      	cmp	r2, #2
 80834b6:	d140      	bne.n	808353a <mbedtls_cipher_finish+0xb6>
    {
        int ret = 0;

        if( MBEDTLS_ENCRYPT == ctx->operation )
 80834b8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80834bc:	2b01      	cmp	r3, #1
 80834be:	d109      	bne.n	80834d4 <mbedtls_cipher_finish+0x50>
        {
            /* check for 'no padding' mode */
            if( NULL == ctx->add_padding )
 80834c0:	68c3      	ldr	r3, [r0, #12]
 80834c2:	2b00      	cmp	r3, #0
 80834c4:	d0f4      	beq.n	80834b0 <mbedtls_cipher_finish+0x2c>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 80834c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

                return( 0 );
            }

            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 80834c8:	3014      	adds	r0, #20
 80834ca:	b901      	cbnz	r1, 80834ce <mbedtls_cipher_finish+0x4a>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 80834cc:	68f9      	ldr	r1, [r7, #12]
                    ctx->unprocessed_len );
 80834ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80834d0:	4798      	blx	r3
 80834d2:	e00b      	b.n	80834ec <mbedtls_cipher_finish+0x68>
        }
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 80834d4:	f7ff fda8 	bl	8083028 <mbedtls_cipher_get_block_size>
 80834d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80834da:	4298      	cmp	r0, r3
 80834dc:	d006      	beq.n	80834ec <mbedtls_cipher_finish+0x68>
        {
            /*
             * For decrypt operations, expect a full block,
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 80834de:	68e2      	ldr	r2, [r4, #12]
 80834e0:	bb6a      	cbnz	r2, 808353e <mbedtls_cipher_finish+0xba>
    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
    {
        if( ctx->unprocessed_len != 0 )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        return( 0 );
 80834e2:	2b00      	cmp	r3, #0
 80834e4:	4818      	ldr	r0, [pc, #96]	; (8083548 <mbedtls_cipher_finish+0xc4>)
 80834e6:	bf08      	it	eq
 80834e8:	2000      	moveq	r0, #0
 80834ea:	e02b      	b.n	8083544 <mbedtls_cipher_finish+0xc0>

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80834ec:	4620      	mov	r0, r4
 80834ee:	f7ff fd9b 	bl	8083028 <mbedtls_cipher_get_block_size>
 80834f2:	4623      	mov	r3, r4
 80834f4:	f853 2b14 	ldr.w	r2, [r3], #20
 80834f8:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80834fc:	6992      	ldr	r2, [r2, #24]
 80834fe:	e88d 0048 	stmia.w	sp, {r3, r6}
 8083502:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8083506:	6897      	ldr	r7, [r2, #8]
 8083508:	4602      	mov	r2, r0
 808350a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808350c:	47b8      	blx	r7
 808350e:	4603      	mov	r3, r0
 8083510:	b9b8      	cbnz	r0, 8083542 <mbedtls_cipher_finish+0xbe>
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 8083512:	f994 2008 	ldrsb.w	r2, [r4, #8]
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8083516:	4620      	mov	r0, r4
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 8083518:	b94a      	cbnz	r2, 808352e <mbedtls_cipher_finish+0xaa>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 808351a:	f7ff fd85 	bl	8083028 <mbedtls_cipher_get_block_size>
                                     olen );
 808351e:	462a      	mov	r2, r5
 8083520:	4601      	mov	r1, r0
 8083522:	4630      	mov	r0, r6
 8083524:	6923      	ldr	r3, [r4, #16]
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083526:	b003      	add	sp, #12
 8083528:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
                                     olen );
 808352c:	4718      	bx	r3

        /* Set output size for encryption */
        *olen = mbedtls_cipher_get_block_size( ctx );
 808352e:	f7ff fd7b 	bl	8083028 <mbedtls_cipher_get_block_size>
 8083532:	6028      	str	r0, [r5, #0]
 8083534:	e005      	b.n	8083542 <mbedtls_cipher_finish+0xbe>

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083536:	4805      	ldr	r0, [pc, #20]	; (808354c <mbedtls_cipher_finish+0xc8>)
 8083538:	e004      	b.n	8083544 <mbedtls_cipher_finish+0xc0>
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 808353a:	4805      	ldr	r0, [pc, #20]	; (8083550 <mbedtls_cipher_finish+0xcc>)
 808353c:	e002      	b.n	8083544 <mbedtls_cipher_finish+0xc0>
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 808353e:	4802      	ldr	r0, [pc, #8]	; (8083548 <mbedtls_cipher_finish+0xc4>)
 8083540:	e000      	b.n	8083544 <mbedtls_cipher_finish+0xc0>
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8083542:	4618      	mov	r0, r3
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083544:	b003      	add	sp, #12
 8083546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083548:	ffff9d80 	.word	0xffff9d80
 808354c:	ffff9f00 	.word	0xffff9f00
 8083550:	ffff9f80 	.word	0xffff9f80

08083554 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8083554:	b308      	cbz	r0, 808359a <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8083556:	6803      	ldr	r3, [r0, #0]
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8083558:	785b      	ldrb	r3, [r3, #1]
 808355a:	2b02      	cmp	r3, #2
 808355c:	d11d      	bne.n	808359a <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 808355e:	2904      	cmp	r1, #4
 8083560:	d81d      	bhi.n	808359e <mbedtls_cipher_set_padding_mode+0x4a>
 8083562:	e8df f001 	tbb	[pc, r1]
 8083566:	0703      	.short	0x0703
 8083568:	110d      	.short	0x110d
 808356a:	15          	.byte	0x15
 808356b:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 808356c:	4b0d      	ldr	r3, [pc, #52]	; (80835a4 <mbedtls_cipher_set_padding_mode+0x50>)
 808356e:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 8083570:	4b0d      	ldr	r3, [pc, #52]	; (80835a8 <mbedtls_cipher_set_padding_mode+0x54>)
 8083572:	e002      	b.n	808357a <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
 8083574:	4b0d      	ldr	r3, [pc, #52]	; (80835ac <mbedtls_cipher_set_padding_mode+0x58>)
 8083576:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 8083578:	4b0d      	ldr	r3, [pc, #52]	; (80835b0 <mbedtls_cipher_set_padding_mode+0x5c>)
 808357a:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 808357c:	2000      	movs	r0, #0
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
        break;
 808357e:	4770      	bx	lr
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)
    case MBEDTLS_PADDING_ZEROS_AND_LEN:
        ctx->add_padding = add_zeros_and_len_padding;
 8083580:	4b0c      	ldr	r3, [pc, #48]	; (80835b4 <mbedtls_cipher_set_padding_mode+0x60>)
 8083582:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 8083584:	4b0c      	ldr	r3, [pc, #48]	; (80835b8 <mbedtls_cipher_set_padding_mode+0x64>)
 8083586:	e7f8      	b.n	808357a <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)
    case MBEDTLS_PADDING_ZEROS:
        ctx->add_padding = add_zeros_padding;
 8083588:	4b0c      	ldr	r3, [pc, #48]	; (80835bc <mbedtls_cipher_set_padding_mode+0x68>)
 808358a:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 808358c:	4b0c      	ldr	r3, [pc, #48]	; (80835c0 <mbedtls_cipher_set_padding_mode+0x6c>)
 808358e:	e7f4      	b.n	808357a <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
 8083590:	4a0c      	ldr	r2, [pc, #48]	; (80835c4 <mbedtls_cipher_set_padding_mode+0x70>)
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 8083592:	2300      	movs	r3, #0
 8083594:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 8083596:	6102      	str	r2, [r0, #16]
 8083598:	e7f0      	b.n	808357c <mbedtls_cipher_set_padding_mode+0x28>
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 808359a:	480b      	ldr	r0, [pc, #44]	; (80835c8 <mbedtls_cipher_set_padding_mode+0x74>)
 808359c:	4770      	bx	lr
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
        break;

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 808359e:	480b      	ldr	r0, [pc, #44]	; (80835cc <mbedtls_cipher_set_padding_mode+0x78>)
    }

    return( 0 );
}
 80835a0:	4770      	bx	lr
 80835a2:	bf00      	nop
 80835a4:	08083033 	.word	0x08083033
 80835a8:	0808304d 	.word	0x0808304d
 80835ac:	080830a1 	.word	0x080830a1
 80835b0:	08083159 	.word	0x08083159
 80835b4:	080830bd 	.word	0x080830bd
 80835b8:	080830e1 	.word	0x080830e1
 80835bc:	08083131 	.word	0x08083131
 80835c0:	080831a9 	.word	0x080831a9
 80835c4:	08083145 	.word	0x08083145
 80835c8:	ffff9f00 	.word	0xffff9f00
 80835cc:	ffff9f80 	.word	0xffff9f80

080835d0 <mbedtls_cipher_setup>:

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 80835d0:	b538      	push	{r3, r4, r5, lr}
 80835d2:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 80835d4:	460d      	mov	r5, r1
 80835d6:	b181      	cbz	r1, 80835fa <mbedtls_cipher_setup+0x2a>
 80835d8:	b178      	cbz	r0, 80835fa <mbedtls_cipher_setup+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80835da:	2240      	movs	r2, #64	; 0x40
 80835dc:	2100      	movs	r1, #0
 80835de:	f00f fd84 	bl	80930ea <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 80835e2:	69ab      	ldr	r3, [r5, #24]
 80835e4:	695b      	ldr	r3, [r3, #20]
 80835e6:	4798      	blx	r3
 80835e8:	63e0      	str	r0, [r4, #60]	; 0x3c
 80835ea:	b140      	cbz	r0, 80835fe <mbedtls_cipher_setup+0x2e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 80835ec:	6025      	str	r5, [r4, #0]
#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
    /*
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 80835ee:	2100      	movs	r1, #0
 80835f0:	4620      	mov	r0, r4
 80835f2:	f7ff ffaf 	bl	8083554 <mbedtls_cipher_set_padding_mode>
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 80835f6:	2000      	movs	r0, #0
 80835f8:	bd38      	pop	{r3, r4, r5, pc}
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    if( NULL == cipher_info || NULL == ctx )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80835fa:	4802      	ldr	r0, [pc, #8]	; (8083604 <mbedtls_cipher_setup+0x34>)
 80835fc:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 80835fe:	4802      	ldr	r0, [pc, #8]	; (8083608 <mbedtls_cipher_setup+0x38>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 8083600:	bd38      	pop	{r3, r4, r5, pc}
 8083602:	bf00      	nop
 8083604:	ffff9f00 	.word	0xffff9f00
 8083608:	ffff9e80 	.word	0xffff9e80

0808360c <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 808360c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808360e:	b085      	sub	sp, #20
 8083610:	4605      	mov	r5, r0
 8083612:	461f      	mov	r7, r3
 8083614:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8083616:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 8083618:	f7ff fe3e 	bl	8083298 <mbedtls_cipher_set_iv>
 808361c:	b9b0      	cbnz	r0, 808364c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 808361e:	4628      	mov	r0, r5
 8083620:	f7ff fe5a 	bl	80832d8 <mbedtls_cipher_reset>
 8083624:	b990      	cbnz	r0, 808364c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 8083626:	9400      	str	r4, [sp, #0]
 8083628:	4633      	mov	r3, r6
 808362a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 808362c:	4639      	mov	r1, r7
 808362e:	4628      	mov	r0, r5
 8083630:	f7ff fe5e 	bl	80832f0 <mbedtls_cipher_update>
 8083634:	b950      	cbnz	r0, 808364c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 8083636:	6821      	ldr	r1, [r4, #0]
 8083638:	aa03      	add	r2, sp, #12
 808363a:	4431      	add	r1, r6
 808363c:	4628      	mov	r0, r5
 808363e:	f7ff ff21 	bl	8083484 <mbedtls_cipher_finish>
 8083642:	b918      	cbnz	r0, 808364c <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 8083644:	6822      	ldr	r2, [r4, #0]
 8083646:	9b03      	ldr	r3, [sp, #12]
 8083648:	4413      	add	r3, r2
 808364a:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 808364c:	b005      	add	sp, #20
 808364e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08083650 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083654:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083656:	4614      	mov	r4, r2
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083658:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 808365a:	9d07      	ldr	r5, [sp, #28]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 808365c:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 808365e:	9e08      	ldr	r6, [sp, #32]
 8083660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8083662:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8083666:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 808366a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 808366e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083672:	d112      	bne.n	808369a <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
 8083674:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 8083678:	9308      	str	r3, [sp, #32]
 808367a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 808367e:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8083682:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8083686:	960a      	str	r6, [sp, #40]	; 0x28
 8083688:	9509      	str	r5, [sp, #36]	; 0x24
 808368a:	9407      	str	r4, [sp, #28]
 808368c:	460b      	mov	r3, r1
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 808368e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 8083692:	2101      	movs	r1, #1
 8083694:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8083696:	f004 b940 	b.w	808791a <mbedtls_gcm_crypt_and_tag>
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 808369a:	4801      	ldr	r0, [pc, #4]	; (80836a0 <mbedtls_cipher_auth_encrypt+0x50>)
 808369c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80836a0:	ffff9f80 	.word	0xffff9f80

080836a4 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80836a4:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80836a6:	6805      	ldr	r5, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80836a8:	b087      	sub	sp, #28
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80836aa:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80836ac:	460c      	mov	r4, r1
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80836ae:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80836b0:	990c      	ldr	r1, [sp, #48]	; 0x30
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80836b2:	d117      	bne.n	80836e4 <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
 80836b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80836b6:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );
 80836b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80836ba:	9505      	str	r5, [sp, #20]
 80836bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80836be:	9504      	str	r5, [sp, #16]
 80836c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80836c2:	9503      	str	r5, [sp, #12]
 80836c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80836c6:	9502      	str	r5, [sp, #8]
 80836c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80836ca:	e88d 0028 	stmia.w	sp, {r3, r5}
 80836ce:	4613      	mov	r3, r2
 80836d0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80836d2:	4622      	mov	r2, r4
 80836d4:	f004 f946 	bl	8087964 <mbedtls_gcm_auth_decrypt>

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 80836d8:	4b04      	ldr	r3, [pc, #16]	; (80836ec <mbedtls_cipher_auth_decrypt+0x48>)
 80836da:	f110 0f12 	cmn.w	r0, #18
 80836de:	bf08      	it	eq
 80836e0:	4618      	moveq	r0, r3
 80836e2:	e000      	b.n	80836e6 <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80836e4:	4802      	ldr	r0, [pc, #8]	; (80836f0 <mbedtls_cipher_auth_decrypt+0x4c>)
}
 80836e6:	b007      	add	sp, #28
 80836e8:	bd30      	pop	{r4, r5, pc}
 80836ea:	bf00      	nop
 80836ec:	ffff9d00 	.word	0xffff9d00
 80836f0:	ffff9f80 	.word	0xffff9f80

080836f4 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 80836f4:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 80836f6:	6803      	ldr	r3, [r0, #0]
 80836f8:	1acd      	subs	r5, r1, r3
 80836fa:	2d00      	cmp	r5, #0
 80836fc:	dc02      	bgt.n	8083704 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80836fe:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8083702:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 8083704:	781c      	ldrb	r4, [r3, #0]
 8083706:	f014 0f80 	tst.w	r4, #128	; 0x80
 808370a:	d104      	bne.n	8083716 <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
 808370c:	1c5c      	adds	r4, r3, #1
 808370e:	6004      	str	r4, [r0, #0]
 8083710:	781b      	ldrb	r3, [r3, #0]
 8083712:	6013      	str	r3, [r2, #0]
 8083714:	e036      	b.n	8083784 <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
 8083716:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 808371a:	3c01      	subs	r4, #1
 808371c:	2c03      	cmp	r4, #3
 808371e:	d838      	bhi.n	8083792 <mbedtls_asn1_get_len+0x9e>
 8083720:	e8df f004 	tbb	[pc, r4]
 8083724:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
 8083728:	2d01      	cmp	r5, #1
 808372a:	d0e8      	beq.n	80836fe <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
 808372c:	785b      	ldrb	r3, [r3, #1]
 808372e:	6013      	str	r3, [r2, #0]
            (*p) += 2;
 8083730:	6803      	ldr	r3, [r0, #0]
 8083732:	3302      	adds	r3, #2
 8083734:	e025      	b.n	8083782 <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
 8083736:	2d02      	cmp	r5, #2
 8083738:	dde1      	ble.n	80836fe <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 808373a:	785c      	ldrb	r4, [r3, #1]
 808373c:	789b      	ldrb	r3, [r3, #2]
 808373e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8083742:	6013      	str	r3, [r2, #0]
            (*p) += 3;
 8083744:	6803      	ldr	r3, [r0, #0]
 8083746:	3303      	adds	r3, #3
 8083748:	e01b      	b.n	8083782 <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
 808374a:	2d03      	cmp	r5, #3
 808374c:	ddd7      	ble.n	80836fe <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 808374e:	789c      	ldrb	r4, [r3, #2]
 8083750:	785d      	ldrb	r5, [r3, #1]
 8083752:	0224      	lsls	r4, r4, #8
 8083754:	78db      	ldrb	r3, [r3, #3]
 8083756:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 808375a:	431c      	orrs	r4, r3
 808375c:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 808375e:	6803      	ldr	r3, [r0, #0]
 8083760:	3304      	adds	r3, #4
 8083762:	e00e      	b.n	8083782 <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
 8083764:	2d04      	cmp	r5, #4
 8083766:	ddca      	ble.n	80836fe <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8083768:	789c      	ldrb	r4, [r3, #2]
 808376a:	785d      	ldrb	r5, [r3, #1]
 808376c:	0424      	lsls	r4, r4, #16
 808376e:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
 8083772:	791c      	ldrb	r4, [r3, #4]
 8083774:	78db      	ldrb	r3, [r3, #3]
 8083776:	432c      	orrs	r4, r5
 8083778:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808377c:	6013      	str	r3, [r2, #0]
            (*p) += 5;
 808377e:	6803      	ldr	r3, [r0, #0]
 8083780:	3305      	adds	r3, #5
 8083782:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 8083784:	6803      	ldr	r3, [r0, #0]
 8083786:	1ac9      	subs	r1, r1, r3
 8083788:	6813      	ldr	r3, [r2, #0]
 808378a:	428b      	cmp	r3, r1
 808378c:	d8b7      	bhi.n	80836fe <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 808378e:	2000      	movs	r0, #0
 8083790:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8083792:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 8083796:	bd30      	pop	{r4, r5, pc}

08083798 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 8083798:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 808379a:	6804      	ldr	r4, [r0, #0]
 808379c:	1b0e      	subs	r6, r1, r4
 808379e:	2e00      	cmp	r6, #0
 80837a0:	dd07      	ble.n	80837b2 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 80837a2:	7826      	ldrb	r6, [r4, #0]
 80837a4:	429e      	cmp	r6, r3
 80837a6:	d107      	bne.n	80837b8 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80837a8:	3401      	adds	r4, #1
 80837aa:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80837ac:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
 80837ae:	f7ff bfa1 	b.w	80836f4 <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80837b2:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80837b6:	e001      	b.n	80837bc <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80837b8:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80837bc:	bc70      	pop	{r4, r5, r6}
 80837be:	4770      	bx	lr

080837c0 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80837c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80837c2:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80837c4:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80837c6:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80837c8:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80837ca:	f7ff ffe5 	bl	8083798 <mbedtls_asn1_get_tag>
 80837ce:	b970      	cbnz	r0, 80837ee <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
 80837d0:	9b01      	ldr	r3, [sp, #4]
 80837d2:	2b01      	cmp	r3, #1
 80837d4:	d109      	bne.n	80837ea <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 80837d6:	6823      	ldr	r3, [r4, #0]
 80837d8:	781b      	ldrb	r3, [r3, #0]
 80837da:	3300      	adds	r3, #0
 80837dc:	bf18      	it	ne
 80837de:	2301      	movne	r3, #1
 80837e0:	602b      	str	r3, [r5, #0]
    (*p)++;
 80837e2:	6823      	ldr	r3, [r4, #0]
 80837e4:	3301      	adds	r3, #1
 80837e6:	6023      	str	r3, [r4, #0]

    return( 0 );
 80837e8:	e001      	b.n	80837ee <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80837ea:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
 80837ee:	b003      	add	sp, #12
 80837f0:	bd30      	pop	{r4, r5, pc}

080837f2 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80837f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80837f4:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80837f6:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80837f8:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80837fa:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80837fc:	f7ff ffcc 	bl	8083798 <mbedtls_asn1_get_tag>
 8083800:	b9c8      	cbnz	r0, 8083836 <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8083802:	9b01      	ldr	r3, [sp, #4]
 8083804:	3b01      	subs	r3, #1
 8083806:	2b03      	cmp	r3, #3
 8083808:	d813      	bhi.n	8083832 <mbedtls_asn1_get_int+0x40>
 808380a:	6823      	ldr	r3, [r4, #0]
 808380c:	f993 3000 	ldrsb.w	r3, [r3]
 8083810:	2b00      	cmp	r3, #0
 8083812:	db0e      	blt.n	8083832 <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 8083814:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 8083816:	9801      	ldr	r0, [sp, #4]
 8083818:	1e43      	subs	r3, r0, #1
 808381a:	9301      	str	r3, [sp, #4]
 808381c:	b158      	cbz	r0, 8083836 <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
 808381e:	6823      	ldr	r3, [r4, #0]
 8083820:	682a      	ldr	r2, [r5, #0]
 8083822:	781b      	ldrb	r3, [r3, #0]
 8083824:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083828:	602b      	str	r3, [r5, #0]
        (*p)++;
 808382a:	6823      	ldr	r3, [r4, #0]
 808382c:	3301      	adds	r3, #1
 808382e:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
 8083830:	e7f1      	b.n	8083816 <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8083832:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 8083836:	b003      	add	sp, #12
 8083838:	bd30      	pop	{r4, r5, pc}

0808383a <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 808383a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 808383c:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 808383e:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083840:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8083842:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083844:	f7ff ffa8 	bl	8083798 <mbedtls_asn1_get_tag>
 8083848:	b940      	cbnz	r0, 808385c <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 808384a:	9a01      	ldr	r2, [sp, #4]
 808384c:	6821      	ldr	r1, [r4, #0]
 808384e:	4628      	mov	r0, r5
 8083850:	f007 fdd9 	bl	808b406 <mbedtls_mpi_read_binary>

    *p += len;
 8083854:	6822      	ldr	r2, [r4, #0]
 8083856:	9b01      	ldr	r3, [sp, #4]
 8083858:	4413      	add	r3, r2
 808385a:	6023      	str	r3, [r4, #0]

    return( ret );
}
 808385c:	b003      	add	sp, #12
 808385e:	bd30      	pop	{r4, r5, pc}

08083860 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8083860:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8083862:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8083864:	4604      	mov	r4, r0
 8083866:	460e      	mov	r6, r1
 8083868:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 808386a:	f7ff ff95 	bl	8083798 <mbedtls_asn1_get_tag>
 808386e:	b9d8      	cbnz	r0, 80838a8 <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 8083870:	6813      	ldr	r3, [r2, #0]
 8083872:	b1a3      	cbz	r3, 808389e <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 8083874:	3b01      	subs	r3, #1
 8083876:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8083878:	6823      	ldr	r3, [r4, #0]
 808387a:	781b      	ldrb	r3, [r3, #0]
    if( bs->unused_bits > 7 )
 808387c:	2b07      	cmp	r3, #7
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 808387e:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
 8083880:	d810      	bhi.n	80838a4 <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 8083882:	6823      	ldr	r3, [r4, #0]
 8083884:	3301      	adds	r3, #1
 8083886:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 8083888:	6093      	str	r3, [r2, #8]
    *p += bs->len;
 808388a:	6822      	ldr	r2, [r4, #0]
 808388c:	682b      	ldr	r3, [r5, #0]
 808388e:	4413      	add	r3, r2

    if( *p != end )
 8083890:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 8083892:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 8083894:	bf14      	ite	ne
 8083896:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 808389a:	2000      	moveq	r0, #0
 808389c:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 808389e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80838a2:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80838a4:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80838a8:	bd70      	pop	{r4, r5, r6, pc}

080838aa <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80838aa:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80838ac:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80838ae:	4604      	mov	r4, r0
 80838b0:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80838b2:	f7ff ff71 	bl	8083798 <mbedtls_asn1_get_tag>
 80838b6:	b958      	cbnz	r0, 80838d0 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 80838b8:	6813      	ldr	r3, [r2, #0]
 80838ba:	1e5a      	subs	r2, r3, #1
 80838bc:	2b01      	cmp	r3, #1
 80838be:	602a      	str	r2, [r5, #0]
 80838c0:	d904      	bls.n	80838cc <mbedtls_asn1_get_bitstring_null+0x22>
 80838c2:	6823      	ldr	r3, [r4, #0]
 80838c4:	1c5a      	adds	r2, r3, #1
 80838c6:	6022      	str	r2, [r4, #0]
 80838c8:	7818      	ldrb	r0, [r3, #0]
 80838ca:	b108      	cbz	r0, 80838d0 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 80838cc:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 80838d0:	bd38      	pop	{r3, r4, r5, pc}

080838d2 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 80838d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80838d6:	4615      	mov	r5, r2
 80838d8:	461f      	mov	r7, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80838da:	aa01      	add	r2, sp, #4
 80838dc:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 80838de:	4604      	mov	r4, r0
 80838e0:	460e      	mov	r6, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80838e2:	f7ff ff59 	bl	8083798 <mbedtls_asn1_get_tag>
 80838e6:	bb68      	cbnz	r0, 8083944 <mbedtls_asn1_get_sequence_of+0x72>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 80838e8:	6822      	ldr	r2, [r4, #0]
 80838ea:	9b01      	ldr	r3, [sp, #4]
 80838ec:	4413      	add	r3, r2
 80838ee:	429e      	cmp	r6, r3
 80838f0:	d01d      	beq.n	808392e <mbedtls_asn1_get_sequence_of+0x5c>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80838f2:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80838f6:	e025      	b.n	8083944 <mbedtls_asn1_get_sequence_of+0x72>

    while( *p < end )
 80838f8:	6823      	ldr	r3, [r4, #0]
 80838fa:	429e      	cmp	r6, r3
 80838fc:	d91a      	bls.n	8083934 <mbedtls_asn1_get_sequence_of+0x62>
    {
        buf = &(cur->buf);
        buf->tag = **p;
 80838fe:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8083900:	4642      	mov	r2, r8
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;
 8083902:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8083904:	4631      	mov	r1, r6
 8083906:	463b      	mov	r3, r7
 8083908:	4620      	mov	r0, r4
 808390a:	f7ff ff45 	bl	8083798 <mbedtls_asn1_get_tag>
 808390e:	b9c8      	cbnz	r0, 8083944 <mbedtls_asn1_get_sequence_of+0x72>
            return( ret );

        buf->p = *p;
 8083910:	6823      	ldr	r3, [r4, #0]
 8083912:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
 8083914:	6822      	ldr	r2, [r4, #0]
 8083916:	686b      	ldr	r3, [r5, #4]
 8083918:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
 808391a:	429e      	cmp	r6, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
 808391c:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 808391e:	d9eb      	bls.n	80838f8 <mbedtls_asn1_get_sequence_of+0x26>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 8083920:	2110      	movs	r1, #16
 8083922:	2001      	movs	r0, #1
 8083924:	f00f fb96 	bl	8093054 <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
 8083928:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
 808392a:	b148      	cbz	r0, 8083940 <mbedtls_asn1_get_sequence_of+0x6e>
 808392c:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 808392e:	f105 0804 	add.w	r8, r5, #4
 8083932:	e7e1      	b.n	80838f8 <mbedtls_asn1_get_sequence_of+0x26>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8083934:	2000      	movs	r0, #0
 8083936:	60e8      	str	r0, [r5, #12]

    if( *p != end )
 8083938:	6823      	ldr	r3, [r4, #0]
 808393a:	429e      	cmp	r6, r3
 808393c:	d002      	beq.n	8083944 <mbedtls_asn1_get_sequence_of+0x72>
 808393e:	e7d8      	b.n	80838f2 <mbedtls_asn1_get_sequence_of+0x20>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8083940:	f06f 0069 	mvn.w	r0, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8083944:	b002      	add	sp, #8
 8083946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808394a <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 808394a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808394c:	4617      	mov	r7, r2
 808394e:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083950:	aa01      	add	r2, sp, #4
 8083952:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8083954:	4604      	mov	r4, r0
 8083956:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083958:	f7ff ff1e 	bl	8083798 <mbedtls_asn1_get_tag>
 808395c:	2800      	cmp	r0, #0
 808395e:	d13a      	bne.n	80839d6 <mbedtls_asn1_get_alg+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 8083960:	6823      	ldr	r3, [r4, #0]
 8083962:	1af6      	subs	r6, r6, r3
 8083964:	2e00      	cmp	r6, #0
 8083966:	dd31      	ble.n	80839cc <mbedtls_asn1_get_alg+0x82>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 8083968:	463a      	mov	r2, r7
 808396a:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 808396c:	4620      	mov	r0, r4
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 808396e:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 8083972:	6826      	ldr	r6, [r4, #0]
 8083974:	9b01      	ldr	r3, [sp, #4]
 8083976:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8083978:	4631      	mov	r1, r6
 808397a:	2306      	movs	r3, #6
 808397c:	f7ff ff0c 	bl	8083798 <mbedtls_asn1_get_tag>
 8083980:	bb48      	cbnz	r0, 80839d6 <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    alg->p = *p;
 8083982:	6823      	ldr	r3, [r4, #0]
 8083984:	60bb      	str	r3, [r7, #8]
    *p += alg->len;
 8083986:	6822      	ldr	r2, [r4, #0]
 8083988:	687b      	ldr	r3, [r7, #4]
 808398a:	18d1      	adds	r1, r2, r3

    if( *p == end )
 808398c:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
 808398e:	6021      	str	r1, [r4, #0]

    if( *p == end )
 8083990:	d106      	bne.n	80839a0 <mbedtls_asn1_get_alg+0x56>
 8083992:	f105 030c 	add.w	r3, r5, #12
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8083996:	429d      	cmp	r5, r3
 8083998:	d016      	beq.n	80839c8 <mbedtls_asn1_get_alg+0x7e>
 808399a:	7028      	strb	r0, [r5, #0]
 808399c:	3501      	adds	r5, #1
 808399e:	e7fa      	b.n	8083996 <mbedtls_asn1_get_alg+0x4c>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
 80839a0:	5cd3      	ldrb	r3, [r2, r3]
 80839a2:	462a      	mov	r2, r5
 80839a4:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
 80839a8:	6823      	ldr	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80839aa:	4631      	mov	r1, r6
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
    (*p)++;
 80839ac:	3301      	adds	r3, #1
 80839ae:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80839b0:	4620      	mov	r0, r4
 80839b2:	f7ff fe9f 	bl	80836f4 <mbedtls_asn1_get_len>
 80839b6:	b970      	cbnz	r0, 80839d6 <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    params->p = *p;
 80839b8:	6823      	ldr	r3, [r4, #0]
 80839ba:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 80839bc:	6822      	ldr	r2, [r4, #0]
 80839be:	686b      	ldr	r3, [r5, #4]
 80839c0:	4413      	add	r3, r2

    if( *p != end )
 80839c2:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
 80839c4:	6023      	str	r3, [r4, #0]

    if( *p != end )
 80839c6:	d104      	bne.n	80839d2 <mbedtls_asn1_get_alg+0x88>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80839c8:	2000      	movs	r0, #0
 80839ca:	e004      	b.n	80839d6 <mbedtls_asn1_get_alg+0x8c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80839cc:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80839d0:	e001      	b.n	80839d6 <mbedtls_asn1_get_alg+0x8c>

    params->p = *p;
    *p += params->len;

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80839d2:	f06f 0065 	mvn.w	r0, #101	; 0x65

    return( 0 );
}
 80839d6:	b003      	add	sp, #12
 80839d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080839da <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 80839da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 80839dc:	2300      	movs	r3, #0
 80839de:	9301      	str	r3, [sp, #4]
 80839e0:	9302      	str	r3, [sp, #8]
 80839e2:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 80839e4:	ab01      	add	r3, sp, #4
 80839e6:	f7ff ffb0 	bl	808394a <mbedtls_asn1_get_alg>
 80839ea:	b960      	cbnz	r0, 8083a06 <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 80839ec:	9b01      	ldr	r3, [sp, #4]
 80839ee:	2b05      	cmp	r3, #5
 80839f0:	d000      	beq.n	80839f4 <mbedtls_asn1_get_alg_null+0x1a>
 80839f2:	b933      	cbnz	r3, 8083a02 <mbedtls_asn1_get_alg_null+0x28>
 80839f4:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );

    return( 0 );
 80839f6:	2b00      	cmp	r3, #0
 80839f8:	bf14      	ite	ne
 80839fa:	f06f 0067 	mvnne.w	r0, #103	; 0x67
 80839fe:	2000      	moveq	r0, #0
 8083a00:	e001      	b.n	8083a06 <mbedtls_asn1_get_alg_null+0x2c>

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8083a02:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 8083a06:	b005      	add	sp, #20
 8083a08:	f85d fb04 	ldr.w	pc, [sp], #4

08083a0c <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
 8083a0c:	f001 bc04 	b.w	8085218 <mbedtls_internal_sha1_process>

08083a10 <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
 8083a10:	f001 bbe2 	b.w	80851d8 <mbedtls_sha1_clone>

08083a14 <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
 8083a14:	b510      	push	{r4, lr}
 8083a16:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 8083a18:	f001 fbd4 	bl	80851c4 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 8083a1c:	4620      	mov	r0, r4
}
 8083a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
 8083a22:	f00d b857 	b.w	8090ad4 <free>

08083a26 <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
 8083a26:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 8083a28:	215c      	movs	r1, #92	; 0x5c
 8083a2a:	2001      	movs	r0, #1
 8083a2c:	f00f fb12 	bl	8093054 <calloc>

    if( ctx != NULL )
 8083a30:	4604      	mov	r4, r0
 8083a32:	b108      	cbz	r0, 8083a38 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 8083a34:	f001 fbc2 	bl	80851bc <mbedtls_sha1_init>

    return( ctx );
}
 8083a38:	4620      	mov	r0, r4
 8083a3a:	bd10      	pop	{r4, pc}

08083a3c <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 8083a3c:	f002 bbd8 	b.w	80861f0 <mbedtls_sha1_finish_ret>

08083a40 <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
 8083a40:	f002 bb9c 	b.w	808617c <mbedtls_sha1_update_ret>

08083a44 <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 8083a44:	f001 bbce 	b.w	80851e4 <mbedtls_sha1_starts_ret>

08083a48 <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
 8083a48:	f7fe bd2c 	b.w	80824a4 <mbedtls_internal_sha256_process>

08083a4c <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
 8083a4c:	f7fe bcd4 	b.w	80823f8 <mbedtls_sha256_clone>

08083a50 <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 8083a50:	b510      	push	{r4, lr}
 8083a52:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 8083a54:	f7fe fcc6 	bl	80823e4 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 8083a58:	4620      	mov	r0, r4
}
 8083a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 8083a5e:	f00d b839 	b.w	8090ad4 <free>

08083a62 <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 8083a62:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8083a64:	216c      	movs	r1, #108	; 0x6c
 8083a66:	2001      	movs	r0, #1
 8083a68:	f00f faf4 	bl	8093054 <calloc>

    if( ctx != NULL )
 8083a6c:	4604      	mov	r4, r0
 8083a6e:	b108      	cbz	r0, 8083a74 <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 8083a70:	f7fe fcb4 	bl	80823dc <mbedtls_sha256_init>

    return( ctx );
}
 8083a74:	4620      	mov	r0, r4
 8083a76:	bd10      	pop	{r4, pc}

08083a78 <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 8083a78:	2301      	movs	r3, #1
 8083a7a:	f7ff b94e 	b.w	8082d1a <mbedtls_sha256_ret>

08083a7e <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 8083a7e:	2300      	movs	r3, #0
 8083a80:	f7ff b94b 	b.w	8082d1a <mbedtls_sha256_ret>

08083a84 <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
 8083a84:	f7ff b8b2 	b.w	8082bec <mbedtls_sha256_finish_ret>

08083a88 <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
 8083a88:	f7ff b876 	b.w	8082b78 <mbedtls_sha256_update_ret>

08083a8c <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 8083a8c:	2101      	movs	r1, #1
 8083a8e:	f7fe bcb9 	b.w	8082404 <mbedtls_sha256_starts_ret>

08083a92 <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 8083a92:	2100      	movs	r1, #0
 8083a94:	f7fe bcb6 	b.w	8082404 <mbedtls_sha256_starts_ret>

08083a98 <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
 8083a98:	f00a b85a 	b.w	808db50 <mbedtls_internal_sha512_process>

08083a9c <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
 8083a9c:	f009 bfb6 	b.w	808da0c <mbedtls_sha512_clone>

08083aa0 <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
 8083aa0:	b510      	push	{r4, lr}
 8083aa2:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 8083aa4:	f009 ffa8 	bl	808d9f8 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 8083aa8:	4620      	mov	r0, r4
}
 8083aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
 8083aae:	f00d b811 	b.w	8090ad4 <free>

08083ab2 <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
 8083ab2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 8083ab4:	21d8      	movs	r1, #216	; 0xd8
 8083ab6:	2001      	movs	r0, #1
 8083ab8:	f00f facc 	bl	8093054 <calloc>

    if( ctx != NULL )
 8083abc:	4604      	mov	r4, r0
 8083abe:	b108      	cbz	r0, 8083ac4 <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 8083ac0:	f009 ff96 	bl	808d9f0 <mbedtls_sha512_init>

    return( ctx );
}
 8083ac4:	4620      	mov	r0, r4
 8083ac6:	bd10      	pop	{r4, pc}

08083ac8 <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 8083ac8:	2301      	movs	r3, #1
 8083aca:	f00a bffc 	b.w	808eac6 <mbedtls_sha512_ret>

08083ace <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 8083ace:	2300      	movs	r3, #0
 8083ad0:	f00a bff9 	b.w	808eac6 <mbedtls_sha512_ret>

08083ad4 <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
 8083ad4:	f00a bec4 	b.w	808e860 <mbedtls_sha512_finish_ret>

08083ad8 <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
 8083ad8:	f00a be7a 	b.w	808e7d0 <mbedtls_sha512_update_ret>

08083adc <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 8083adc:	2101      	movs	r1, #1
 8083ade:	f009 bf9b 	b.w	808da18 <mbedtls_sha512_starts_ret>

08083ae2 <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 8083ae2:	2100      	movs	r1, #0
 8083ae4:	f009 bf98 	b.w	808da18 <mbedtls_sha512_starts_ret>

08083ae8 <_ZL15mbedtls_zeroizePvj>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8083ae8:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8083aea:	2300      	movs	r3, #0
 8083aec:	4288      	cmp	r0, r1
 8083aee:	d002      	beq.n	8083af6 <_ZL15mbedtls_zeroizePvj+0xe>
 8083af0:	7003      	strb	r3, [r0, #0]
 8083af2:	3001      	adds	r0, #1
 8083af4:	e7fa      	b.n	8083aec <_ZL15mbedtls_zeroizePvj+0x4>
 8083af6:	4770      	bx	lr

08083af8 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8083af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083afc:	b095      	sub	sp, #84	; 0x54
 8083afe:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8083b00:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8083b02:	4607      	mov	r7, r0
 8083b04:	460c      	mov	r4, r1
 8083b06:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8083b08:	2100      	movs	r1, #0
 8083b0a:	2240      	movs	r2, #64	; 0x40
 8083b0c:	4630      	mov	r0, r6
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8083b0e:	9301      	str	r3, [sp, #4]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 8083b10:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8083b14:	f00f fae9 	bl	80930ea <memset>
    memset( counter, 0, 4 );
 8083b18:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8083b1a:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 8083b1c:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8083b20:	f004 f936 	bl	8087d90 <mbedtls_md_get_size>
 8083b24:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 8083b26:	b37c      	cbz	r4, 8083b88 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
 8083b28:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 8083b2a:	4628      	mov	r0, r5
 8083b2c:	46a3      	mov	fp, r4
 8083b2e:	bf28      	it	cs
 8083b30:	46d3      	movcs	fp, sl
 8083b32:	f004 f83d 	bl	8087bb0 <mbedtls_md_starts>
 8083b36:	4602      	mov	r2, r0
 8083b38:	bb38      	cbnz	r0, 8083b8a <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 8083b3a:	9a01      	ldr	r2, [sp, #4]
 8083b3c:	4649      	mov	r1, r9
 8083b3e:	4628      	mov	r0, r5
 8083b40:	f004 f840 	bl	8087bc4 <mbedtls_md_update>
 8083b44:	4602      	mov	r2, r0
 8083b46:	bb00      	cbnz	r0, 8083b8a <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 8083b48:	2204      	movs	r2, #4
 8083b4a:	4641      	mov	r1, r8
 8083b4c:	4628      	mov	r0, r5
 8083b4e:	f004 f839 	bl	8087bc4 <mbedtls_md_update>
 8083b52:	4602      	mov	r2, r0
 8083b54:	b9c8      	cbnz	r0, 8083b8a <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 8083b56:	4631      	mov	r1, r6
 8083b58:	4628      	mov	r0, r5
 8083b5a:	f004 f83d 	bl	8087bd8 <mbedtls_md_finish>
 8083b5e:	4602      	mov	r2, r0
 8083b60:	b998      	cbnz	r0, 8083b8a <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
 8083b62:	463b      	mov	r3, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
 8083b64:	455a      	cmp	r2, fp
 8083b66:	d007      	beq.n	8083b78 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
 8083b68:	f813 0b01 	ldrb.w	r0, [r3], #1
 8083b6c:	5cb1      	ldrb	r1, [r6, r2]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 8083b6e:	3201      	adds	r2, #1
            *p++ ^= mask[i];
 8083b70:	4041      	eors	r1, r0
 8083b72:	f803 1c01 	strb.w	r1, [r3, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 8083b76:	e7f5      	b.n	8083b64 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
 8083b78:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8083b7c:	4417      	add	r7, r2
 8083b7e:	3301      	adds	r3, #1
 8083b80:	f88d 300f 	strb.w	r3, [sp, #15]

        dlen -= use_len;
 8083b84:	1aa4      	subs	r4, r4, r2
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 8083b86:	e7ce      	b.n	8083b26 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
 8083b88:	4622      	mov	r2, r4

        dlen -= use_len;
    }

exit:
    mbedtls_zeroize( mask, sizeof( mask ) );
 8083b8a:	4630      	mov	r0, r6
 8083b8c:	2140      	movs	r1, #64	; 0x40
 8083b8e:	f7ff ffab 	bl	8083ae8 <_ZL15mbedtls_zeroizePvj>

    return( ret );
}
 8083b92:	4610      	mov	r0, r2
 8083b94:	b015      	add	sp, #84	; 0x54
 8083b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08083b9c <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8083b9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8083ba0:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 8083ba2:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8083ba4:	460e      	mov	r6, r1
 8083ba6:	4691      	mov	r9, r2
 8083ba8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 8083bac:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 8083bae:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 8083bb0:	4604      	mov	r4, r0
 8083bb2:	b328      	cbz	r0, 8083c00 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 8083bb4:	f003 ffa8 	bl	8087b08 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8083bb8:	4606      	mov	r6, r0
 8083bba:	2800      	cmp	r0, #0
 8083bbc:	d063      	beq.n	8083c86 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 8083bbe:	4620      	mov	r0, r4
 8083bc0:	466a      	mov	r2, sp
 8083bc2:	a901      	add	r1, sp, #4
 8083bc4:	f001 fab0 	bl	8085128 <mbedtls_oid_get_oid_by_md>
 8083bc8:	4604      	mov	r4, r0
 8083bca:	2800      	cmp	r0, #0
 8083bcc:	d15b      	bne.n	8083c86 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8083bce:	4630      	mov	r0, r6
 8083bd0:	f004 f8de 	bl	8087d90 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8083bd4:	9f00      	ldr	r7, [sp, #0]
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8083bd6:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8083bd8:	4407      	add	r7, r0
 8083bda:	f107 0308 	add.w	r3, r7, #8
 8083bde:	2b7f      	cmp	r3, #127	; 0x7f
 8083be0:	d851      	bhi.n	8083c86 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 8083be2:	f110 020a 	adds.w	r2, r0, #10
 8083be6:	d24e      	bcs.n	8083c86 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 8083be8:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
 8083bec:	429a      	cmp	r2, r3
 8083bee:	d84a      	bhi.n	8083c86 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 8083bf0:	429d      	cmp	r5, r3
 8083bf2:	d348      	bcc.n	8083c86 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
 8083bf4:	f1a5 030a 	sub.w	r3, r5, #10
 8083bf8:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8083bfa:	2f0a      	cmp	r7, #10
 8083bfc:	d806      	bhi.n	8083c0c <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
 8083bfe:	e042      	b.n	8083c86 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
 8083c00:	428d      	cmp	r5, r1
 8083c02:	d340      	bcc.n	8083c86 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
 8083c04:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8083c06:	2d0a      	cmp	r5, #10
 8083c08:	d93d      	bls.n	8083c86 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 8083c0a:	e03e      	b.n	8083c8a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8083c0c:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 8083c0e:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8083c10:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8083c14:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 8083c16:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
 8083c18:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
 8083c1c:	21ff      	movs	r1, #255	; 0xff
 8083c1e:	4650      	mov	r0, sl
 8083c20:	f00f fa63 	bl	80930ea <memset>
    p += nb_pad;
 8083c24:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8083c28:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
 8083c2a:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8083c2e:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8083c30:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8083c32:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8083c34:	f107 0208 	add.w	r2, r7, #8
 8083c38:	4432      	add	r2, r6
 8083c3a:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 8083c3c:	b2fa      	uxtb	r2, r7
 8083c3e:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
 8083c40:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 8083c44:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 8083c46:	2106      	movs	r1, #6
 8083c48:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 8083c4a:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 8083c4c:	9901      	ldr	r1, [sp, #4]
 8083c4e:	463a      	mov	r2, r7
 8083c50:	4650      	mov	r0, sl
 8083c52:	f00f fa24 	bl	809309e <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
 8083c56:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
 8083c58:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
 8083c5c:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8083c60:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
 8083c62:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8083c64:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
 8083c66:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
 8083c68:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
 8083c6a:	4632      	mov	r2, r6
 8083c6c:	4649      	mov	r1, r9
 8083c6e:	4638      	mov	r0, r7
 8083c70:	f00f fa15 	bl	809309e <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 8083c74:	443e      	add	r6, r7
 8083c76:	eb08 0305 	add.w	r3, r8, r5
 8083c7a:	429e      	cmp	r6, r3
 8083c7c:	d019      	beq.n	8083cb2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_zeroize( dst, dst_len );
 8083c7e:	4629      	mov	r1, r5
 8083c80:	4640      	mov	r0, r8
 8083c82:	f7ff ff31 	bl	8083ae8 <_ZL15mbedtls_zeroizePvj>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083c86:	4c0d      	ldr	r4, [pc, #52]	; (8083cbc <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
 8083c88:	e013      	b.n	8083cb2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8083c8a:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 8083c8c:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8083c8e:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8083c92:	2201      	movs	r2, #1
 8083c94:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
 8083c98:	21ff      	movs	r1, #255	; 0xff
 8083c9a:	463a      	mov	r2, r7
 8083c9c:	4618      	mov	r0, r3
 8083c9e:	f00f fa24 	bl	80930ea <memset>
 8083ca2:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
 8083ca4:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
 8083ca6:	1ea8      	subs	r0, r5, #2
 8083ca8:	4632      	mov	r2, r6
 8083caa:	4649      	mov	r1, r9
 8083cac:	4418      	add	r0, r3
 8083cae:	f00f f9f6 	bl	809309e <memcpy>
        mbedtls_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 8083cb2:	4620      	mov	r0, r4
 8083cb4:	b002      	add	sp, #8
 8083cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083cba:	bf00      	nop
 8083cbc:	ffffbf80 	.word	0xffffbf80

08083cc0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8083cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8083cc2:	f100 0508 	add.w	r5, r0, #8
 8083cc6:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8083cc8:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8083cca:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8083ccc:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8083cce:	f007 fb94 	bl	808b3fa <mbedtls_mpi_size>
 8083cd2:	4287      	cmp	r7, r0
 8083cd4:	d117      	bne.n	8083d06 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
 8083cd6:	6863      	ldr	r3, [r4, #4]
 8083cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8083cdc:	d813      	bhi.n	8083d06 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8083cde:	2100      	movs	r1, #0
 8083ce0:	4628      	mov	r0, r5
 8083ce2:	f007 fd5b 	bl	808b79c <mbedtls_mpi_cmp_int>
 8083ce6:	2800      	cmp	r0, #0
 8083ce8:	dd0d      	ble.n	8083d06 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 8083cea:	2100      	movs	r1, #0
 8083cec:	4628      	mov	r0, r5
 8083cee:	f007 fb3a 	bl	808b366 <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8083cf2:	b140      	cbz	r0, 8083d06 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 8083cf4:	b1ee      	cbz	r6, 8083d32 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8083cf6:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8083cfa:	2100      	movs	r1, #0
 8083cfc:	4628      	mov	r0, r5
 8083cfe:	f007 fd4d 	bl	808b79c <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 8083d02:	2800      	cmp	r0, #0
 8083d04:	dc01      	bgt.n	8083d0a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083d06:	481a      	ldr	r0, [pc, #104]	; (8083d70 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
 8083d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8083d0a:	2100      	movs	r1, #0
 8083d0c:	4628      	mov	r0, r5
 8083d0e:	f007 fb2a 	bl	808b366 <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8083d12:	2800      	cmp	r0, #0
 8083d14:	d0f7      	beq.n	8083d06 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8083d16:	f104 0538 	add.w	r5, r4, #56	; 0x38
 8083d1a:	2100      	movs	r1, #0
 8083d1c:	4628      	mov	r0, r5
 8083d1e:	f007 fd3d 	bl	808b79c <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8083d22:	2800      	cmp	r0, #0
 8083d24:	ddef      	ble.n	8083d06 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 8083d26:	2100      	movs	r1, #0
 8083d28:	4628      	mov	r0, r5
 8083d2a:	f007 fb1c 	bl	808b366 <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8083d2e:	2800      	cmp	r0, #0
 8083d30:	d0e9      	beq.n	8083d06 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 8083d32:	2100      	movs	r1, #0
 8083d34:	f104 0014 	add.w	r0, r4, #20
 8083d38:	f007 fd30 	bl	808b79c <mbedtls_mpi_cmp_int>
 8083d3c:	2800      	cmp	r0, #0
 8083d3e:	dde2      	ble.n	8083d06 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 8083d40:	b1a6      	cbz	r6, 8083d6c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8083d42:	2100      	movs	r1, #0
 8083d44:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8083d48:	f007 fd28 	bl	808b79c <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 8083d4c:	2800      	cmp	r0, #0
 8083d4e:	ddda      	ble.n	8083d06 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 8083d50:	2100      	movs	r1, #0
 8083d52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8083d56:	f007 fd21 	bl	808b79c <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8083d5a:	2800      	cmp	r0, #0
 8083d5c:	ddd3      	ble.n	8083d06 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 8083d5e:	2100      	movs	r1, #0
 8083d60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8083d64:	f007 fd1a 	bl	808b79c <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 8083d68:	2800      	cmp	r0, #0
 8083d6a:	ddcc      	ble.n	8083d06 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
 8083d6c:	2000      	movs	r0, #0
 8083d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8083d70:	ffffbf80 	.word	0xffffbf80

08083d74 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 8083d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8083d78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8083d7a:	4604      	mov	r4, r0
 8083d7c:	4698      	mov	r8, r3
 8083d7e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8083d80:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;

    if( N != NULL )
 8083d82:	b149      	cbz	r1, 8083d98 <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 8083d84:	f100 0908 	add.w	r9, r0, #8
 8083d88:	4648      	mov	r0, r9
 8083d8a:	f007 fb3c 	bl	808b406 <mbedtls_mpi_read_binary>
 8083d8e:	bb50      	cbnz	r0, 8083de6 <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8083d90:	4648      	mov	r0, r9
 8083d92:	f007 fb32 	bl	808b3fa <mbedtls_mpi_size>
 8083d96:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
 8083d98:	f1b8 0f00 	cmp.w	r8, #0
 8083d9c:	d101      	bne.n	8083da2 <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
 8083d9e:	b947      	cbnz	r7, 8083db2 <mbedtls_rsa_import_raw+0x3e>
 8083da0:	e00e      	b.n	8083dc0 <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 8083da2:	9a08      	ldr	r2, [sp, #32]
 8083da4:	4641      	mov	r1, r8
 8083da6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8083daa:	f007 fb2c 	bl	808b406 <mbedtls_mpi_read_binary>
 8083dae:	b9d0      	cbnz	r0, 8083de6 <mbedtls_rsa_import_raw+0x72>
 8083db0:	e7f5      	b.n	8083d9e <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 8083db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8083db4:	4639      	mov	r1, r7
 8083db6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8083dba:	f007 fb24 	bl	808b406 <mbedtls_mpi_read_binary>
 8083dbe:	b990      	cbnz	r0, 8083de6 <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
 8083dc0:	b136      	cbz	r6, 8083dd0 <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 8083dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8083dc4:	4631      	mov	r1, r6
 8083dc6:	f104 0020 	add.w	r0, r4, #32
 8083dca:	f007 fb1c 	bl	808b406 <mbedtls_mpi_read_binary>
 8083dce:	b950      	cbnz	r0, 8083de6 <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
 8083dd0:	b135      	cbz	r5, 8083de0 <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 8083dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8083dd4:	4629      	mov	r1, r5
 8083dd6:	f104 0014 	add.w	r0, r4, #20
 8083dda:	f007 fb14 	bl	808b406 <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
 8083dde:	b910      	cbnz	r0, 8083de6 <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
 8083de0:	2000      	movs	r0, #0
 8083de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8083de6:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
 8083dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08083df0 <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 8083df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8083df4:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 8083df8:	b087      	sub	sp, #28
 8083dfa:	4607      	mov	r7, r0
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8083dfc:	2100      	movs	r1, #0
 8083dfe:	4658      	mov	r0, fp
 8083e00:	f007 fccc 	bl	808b79c <mbedtls_mpi_cmp_int>
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8083e04:	f107 092c 	add.w	r9, r7, #44	; 0x2c
 8083e08:	2100      	movs	r1, #0

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8083e0a:	4680      	mov	r8, r0
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8083e0c:	4648      	mov	r0, r9
 8083e0e:	f007 fcc5 	bl	808b79c <mbedtls_mpi_cmp_int>
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8083e12:	f107 0a38 	add.w	sl, r7, #56	; 0x38
int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8083e16:	9005      	str	r0, [sp, #20]
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8083e18:	2100      	movs	r1, #0
 8083e1a:	4650      	mov	r0, sl
 8083e1c:	f007 fcbe 	bl	808b79c <mbedtls_mpi_cmp_int>
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8083e20:	f107 0320 	add.w	r3, r7, #32
 8083e24:	2100      	movs	r1, #0
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8083e26:	4605      	mov	r5, r0
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8083e28:	4618      	mov	r0, r3
 8083e2a:	9302      	str	r3, [sp, #8]
 8083e2c:	f007 fcb6 	bl	808b79c <mbedtls_mpi_cmp_int>
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8083e30:	f107 0314 	add.w	r3, r7, #20
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8083e34:	9004      	str	r0, [sp, #16]
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8083e36:	2100      	movs	r1, #0
 8083e38:	4618      	mov	r0, r3
 8083e3a:	9303      	str	r3, [sp, #12]
 8083e3c:	f007 fcae 	bl	808b79c <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8083e40:	9b05      	ldr	r3, [sp, #20]
 8083e42:	9a04      	ldr	r2, [sp, #16]
 8083e44:	b14b      	cbz	r3, 8083e5a <mbedtls_rsa_complete+0x6a>
 8083e46:	b125      	cbz	r5, 8083e52 <mbedtls_rsa_complete+0x62>
 8083e48:	b12a      	cbz	r2, 8083e56 <mbedtls_rsa_complete+0x66>
 8083e4a:	1c06      	adds	r6, r0, #0
 8083e4c:	bf18      	it	ne
 8083e4e:	2601      	movne	r6, #1
 8083e50:	e013      	b.n	8083e7a <mbedtls_rsa_complete+0x8a>
 8083e52:	462e      	mov	r6, r5
 8083e54:	e011      	b.n	8083e7a <mbedtls_rsa_complete+0x8a>
 8083e56:	4616      	mov	r6, r2
 8083e58:	e00f      	b.n	8083e7a <mbedtls_rsa_complete+0x8a>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8083e5a:	f1b8 0f00 	cmp.w	r8, #0
 8083e5e:	d103      	bne.n	8083e68 <mbedtls_rsa_complete+0x78>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8083e60:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8083e62:	4646      	mov	r6, r8
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 8083e64:	2200      	movs	r2, #0
 8083e66:	e024      	b.n	8083eb2 <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8083e68:	b9cd      	cbnz	r5, 8083e9e <mbedtls_rsa_complete+0xae>
 8083e6a:	b11a      	cbz	r2, 8083e74 <mbedtls_rsa_complete+0x84>
 8083e6c:	b9f0      	cbnz	r0, 8083eac <mbedtls_rsa_complete+0xbc>
 8083e6e:	4606      	mov	r6, r0
 8083e70:	4604      	mov	r4, r0
 8083e72:	e00e      	b.n	8083e92 <mbedtls_rsa_complete+0xa2>
 8083e74:	462e      	mov	r6, r5
 8083e76:	462c      	mov	r4, r5
 8083e78:	e00d      	b.n	8083e96 <mbedtls_rsa_complete+0xa6>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8083e7a:	b1ad      	cbz	r5, 8083ea8 <mbedtls_rsa_complete+0xb8>
 8083e7c:	b992      	cbnz	r2, 8083ea4 <mbedtls_rsa_complete+0xb4>
 8083e7e:	1c04      	adds	r4, r0, #0
 8083e80:	bf18      	it	ne
 8083e82:	2401      	movne	r4, #1
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 8083e84:	f1b8 0f00 	cmp.w	r8, #0
 8083e88:	d0ec      	beq.n	8083e64 <mbedtls_rsa_complete+0x74>
 8083e8a:	2b00      	cmp	r3, #0
 8083e8c:	d1ea      	bne.n	8083e64 <mbedtls_rsa_complete+0x74>
 8083e8e:	2d00      	cmp	r5, #0
 8083e90:	d1e8      	bne.n	8083e64 <mbedtls_rsa_complete+0x74>
 8083e92:	2a00      	cmp	r2, #0
 8083e94:	d1e6      	bne.n	8083e64 <mbedtls_rsa_complete+0x74>
 8083e96:	2800      	cmp	r0, #0
 8083e98:	d0e4      	beq.n	8083e64 <mbedtls_rsa_complete+0x74>
 8083e9a:	2201      	movs	r2, #1
 8083e9c:	e009      	b.n	8083eb2 <mbedtls_rsa_complete+0xc2>
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8083e9e:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8083ea0:	461e      	mov	r6, r3
 8083ea2:	e7df      	b.n	8083e64 <mbedtls_rsa_complete+0x74>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8083ea4:	2400      	movs	r4, #0
 8083ea6:	e7ed      	b.n	8083e84 <mbedtls_rsa_complete+0x94>
 8083ea8:	462c      	mov	r4, r5
 8083eaa:	e7db      	b.n	8083e64 <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8083eac:	2601      	movs	r6, #1
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8083eae:	462c      	mov	r4, r5
 8083eb0:	e002      	b.n	8083eb8 <mbedtls_rsa_complete+0xc8>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
 8083eb2:	2e00      	cmp	r6, #0
 8083eb4:	d03d      	beq.n	8083f32 <mbedtls_rsa_complete+0x142>
 8083eb6:	2600      	movs	r6, #0
 8083eb8:	9404      	str	r4, [sp, #16]
 8083eba:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 8083ebc:	f1b8 0f00 	cmp.w	r8, #0
 8083ec0:	d10b      	bne.n	8083eda <mbedtls_rsa_complete+0xea>
 8083ec2:	b153      	cbz	r3, 8083eda <mbedtls_rsa_complete+0xea>
 8083ec4:	b14d      	cbz	r5, 8083eda <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 8083ec6:	4652      	mov	r2, sl
 8083ec8:	4649      	mov	r1, r9
 8083eca:	4658      	mov	r0, fp
 8083ecc:	f007 fd85 	bl	808b9da <mbedtls_mpi_mul_mpi>
 8083ed0:	bb28      	cbnz	r0, 8083f1e <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 8083ed2:	4658      	mov	r0, fp
 8083ed4:	f007 fa91 	bl	808b3fa <mbedtls_mpi_size>
 8083ed8:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 8083eda:	b146      	cbz	r6, 8083eee <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
 8083edc:	f8cd a000 	str.w	sl, [sp]
 8083ee0:	464b      	mov	r3, r9
 8083ee2:	9a02      	ldr	r2, [sp, #8]
 8083ee4:	9903      	ldr	r1, [sp, #12]
 8083ee6:	4658      	mov	r0, fp
 8083ee8:	f00a ffd2 	bl	808ee90 <mbedtls_rsa_deduce_primes>
 8083eec:	e007      	b.n	8083efe <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
 8083eee:	9b04      	ldr	r3, [sp, #16]
 8083ef0:	b133      	cbz	r3, 8083f00 <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 8083ef2:	9b02      	ldr	r3, [sp, #8]
 8083ef4:	9a03      	ldr	r2, [sp, #12]
 8083ef6:	4651      	mov	r1, sl
 8083ef8:	4648      	mov	r0, r9
 8083efa:	f00b f8c5 	bl	808f088 <mbedtls_rsa_deduce_private_exponent>
 8083efe:	b970      	cbnz	r0, 8083f1e <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 8083f00:	b184      	cbz	r4, 8083f24 <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8083f02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 8083f06:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8083f08:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 8083f0c:	9300      	str	r3, [sp, #0]
 8083f0e:	9a02      	ldr	r2, [sp, #8]
 8083f10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8083f14:	4651      	mov	r1, sl
 8083f16:	4648      	mov	r0, r9
 8083f18:	f00b fa5a 	bl	808f3d0 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 8083f1c:	b110      	cbz	r0, 8083f24 <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8083f1e:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 8083f22:	e00c      	b.n	8083f3e <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 8083f24:	4621      	mov	r1, r4
 8083f26:	4638      	mov	r0, r7
}
 8083f28:	b007      	add	sp, #28
 8083f2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 8083f2e:	f7ff bec7 	b.w	8083cc0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
 8083f32:	b90c      	cbnz	r4, 8083f38 <mbedtls_rsa_complete+0x148>
 8083f34:	b112      	cbz	r2, 8083f3c <mbedtls_rsa_complete+0x14c>
 8083f36:	4626      	mov	r6, r4
 8083f38:	9404      	str	r4, [sp, #16]
 8083f3a:	e7bf      	b.n	8083ebc <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083f3c:	4801      	ldr	r0, [pc, #4]	; (8083f44 <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
 8083f3e:	b007      	add	sp, #28
 8083f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083f44:	ffffbf80 	.word	0xffffbf80

08083f48 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 8083f48:	b570      	push	{r4, r5, r6, lr}
 8083f4a:	4604      	mov	r4, r0
 8083f4c:	460e      	mov	r6, r1
 8083f4e:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 8083f50:	2100      	movs	r1, #0
 8083f52:	22ac      	movs	r2, #172	; 0xac
 8083f54:	f00f f8c9 	bl	80930ea <memset>
/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
    ctx->padding = padding;
 8083f58:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 8083f5c:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8083f60:	bd70      	pop	{r4, r5, r6, pc}

08083f62 <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
 8083f62:	6840      	ldr	r0, [r0, #4]
 8083f64:	4770      	bx	lr
	...

08083f68 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 8083f68:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 8083f6a:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 8083f6c:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 8083f6e:	f7ff fea7 	bl	8083cc0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8083f72:	4605      	mov	r5, r0
 8083f74:	b9b8      	cbnz	r0, 8083fa6 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 8083f76:	f104 0608 	add.w	r6, r4, #8
 8083f7a:	4630      	mov	r0, r6
 8083f7c:	f007 fa1d 	bl	808b3ba <mbedtls_mpi_bitlen>
 8083f80:	287f      	cmp	r0, #127	; 0x7f
 8083f82:	d910      	bls.n	8083fa6 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8083f84:	3414      	adds	r4, #20
 8083f86:	4629      	mov	r1, r5
 8083f88:	4620      	mov	r0, r4
 8083f8a:	f007 f9ec 	bl	808b366 <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8083f8e:	b150      	cbz	r0, 8083fa6 <mbedtls_rsa_check_pubkey+0x3e>
 8083f90:	4620      	mov	r0, r4
 8083f92:	f007 fa12 	bl	808b3ba <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8083f96:	2801      	cmp	r0, #1
 8083f98:	d905      	bls.n	8083fa6 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 8083f9a:	4631      	mov	r1, r6
 8083f9c:	4620      	mov	r0, r4
 8083f9e:	f007 fbb8 	bl	808b712 <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8083fa2:	2800      	cmp	r0, #0
 8083fa4:	db00      	blt.n	8083fa8 <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8083fa6:	4d01      	ldr	r5, [pc, #4]	; (8083fac <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
 8083fa8:	4628      	mov	r0, r5
 8083faa:	bd70      	pop	{r4, r5, r6, pc}
 8083fac:	ffffbe00 	.word	0xffffbe00

08083fb0 <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 8083fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083fb2:	b085      	sub	sp, #20
 8083fb4:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8083fb6:	f7ff ffd7 	bl	8083f68 <mbedtls_rsa_check_pubkey>
 8083fba:	bb28      	cbnz	r0, 8084008 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 8083fbc:	2101      	movs	r1, #1
 8083fbe:	4620      	mov	r0, r4
 8083fc0:	f7ff fe7e 	bl	8083cc0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8083fc4:	bb00      	cbnz	r0, 8084008 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 8083fc6:	f104 0314 	add.w	r3, r4, #20
 8083fca:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8083fce:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8083fd2:	f104 0720 	add.w	r7, r4, #32
 8083fd6:	9002      	str	r0, [sp, #8]
 8083fd8:	9001      	str	r0, [sp, #4]
 8083fda:	9300      	str	r3, [sp, #0]
 8083fdc:	4632      	mov	r2, r6
 8083fde:	463b      	mov	r3, r7
 8083fe0:	4629      	mov	r1, r5
 8083fe2:	f104 0008 	add.w	r0, r4, #8
 8083fe6:	f00b f92d 	bl	808f244 <mbedtls_rsa_validate_params>
 8083fea:	b968      	cbnz	r0, 8084008 <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 8083fec:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8083ff0:	9301      	str	r3, [sp, #4]
 8083ff2:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8083ff6:	9300      	str	r3, [sp, #0]
 8083ff8:	463a      	mov	r2, r7
 8083ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8083ffe:	4631      	mov	r1, r6
 8084000:	4628      	mov	r0, r5
 8084002:	f00b f89f 	bl	808f144 <mbedtls_rsa_validate_crt>
 8084006:	b100      	cbz	r0, 808400a <mbedtls_rsa_check_privkey+0x5a>
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8084008:	4801      	ldr	r0, [pc, #4]	; (8084010 <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
 808400a:	b005      	add	sp, #20
 808400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808400e:	bf00      	nop
 8084010:	ffffbe00 	.word	0xffffbe00

08084014 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 8084014:	b538      	push	{r3, r4, r5, lr}
 8084016:	4605      	mov	r5, r0
 8084018:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 808401a:	f7ff ffa5 	bl	8083f68 <mbedtls_rsa_check_pubkey>
 808401e:	b950      	cbnz	r0, 8084036 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 8084020:	4620      	mov	r0, r4
 8084022:	f7ff ffc5 	bl	8083fb0 <mbedtls_rsa_check_privkey>
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8084026:	b930      	cbnz	r0, 8084036 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8084028:	f104 0108 	add.w	r1, r4, #8
 808402c:	f105 0008 	add.w	r0, r5, #8
 8084030:	f007 fb6f 	bl	808b712 <mbedtls_mpi_cmp_mpi>
 8084034:	b108      	cbz	r0, 808403a <mbedtls_rsa_check_pub_priv+0x26>
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8084036:	4805      	ldr	r0, [pc, #20]	; (808404c <mbedtls_rsa_check_pub_priv+0x38>)
 8084038:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 808403a:	f104 0114 	add.w	r1, r4, #20
 808403e:	f105 0014 	add.w	r0, r5, #20
 8084042:	f007 fb66 	bl	808b712 <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8084046:	2800      	cmp	r0, #0
 8084048:	d1f5      	bne.n	8084036 <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
 808404a:	bd38      	pop	{r3, r4, r5, pc}
 808404c:	ffffbe00 	.word	0xffffbe00

08084050 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 8084050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084054:	460c      	mov	r4, r1
 8084056:	b086      	sub	sp, #24
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8084058:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 808405a:	4605      	mov	r5, r0
 808405c:	4617      	mov	r7, r2
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 808405e:	f7ff fe2f 	bl	8083cc0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8084062:	4606      	mov	r6, r0
 8084064:	bb78      	cbnz	r0, 80840c6 <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
 8084066:	a803      	add	r0, sp, #12
 8084068:	f007 f8ee 	bl	808b248 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 808406c:	4621      	mov	r1, r4
 808406e:	686a      	ldr	r2, [r5, #4]
 8084070:	a803      	add	r0, sp, #12
 8084072:	f007 f9c8 	bl	808b406 <mbedtls_mpi_read_binary>
 8084076:	4604      	mov	r4, r0
 8084078:	b9f0      	cbnz	r0, 80840b8 <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 808407a:	f105 0408 	add.w	r4, r5, #8
 808407e:	4621      	mov	r1, r4
 8084080:	a803      	add	r0, sp, #12
 8084082:	f007 fb46 	bl	808b712 <mbedtls_mpi_cmp_mpi>
 8084086:	2800      	cmp	r0, #0
 8084088:	da14      	bge.n	80840b4 <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 808408a:	f105 0368 	add.w	r3, r5, #104	; 0x68
 808408e:	a903      	add	r1, sp, #12
 8084090:	9300      	str	r3, [sp, #0]
 8084092:	f105 0214 	add.w	r2, r5, #20
 8084096:	4623      	mov	r3, r4
 8084098:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
 808409a:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 808409e:	f007 ff0a 	bl	808beb6 <mbedtls_mpi_exp_mod>
 80840a2:	4604      	mov	r4, r0
 80840a4:	b940      	cbnz	r0, 80840b8 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80840a6:	4642      	mov	r2, r8
 80840a8:	4639      	mov	r1, r7
 80840aa:	a803      	add	r0, sp, #12
 80840ac:	f007 f9e0 	bl	808b470 <mbedtls_mpi_write_binary>
 80840b0:	4604      	mov	r4, r0
 80840b2:	e001      	b.n	80840b8 <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80840b4:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 80840b8:	a803      	add	r0, sp, #12
 80840ba:	f007 f8cc 	bl	808b256 <mbedtls_mpi_free>

    if( ret != 0 )
 80840be:	b11c      	cbz	r4, 80840c8 <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 80840c0:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
 80840c4:	e000      	b.n	80840c8 <mbedtls_rsa_public+0x78>
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80840c6:	4e02      	ldr	r6, [pc, #8]	; (80840d0 <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
 80840c8:	4630      	mov	r0, r6
 80840ca:	b006      	add	sp, #24
 80840cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80840d0:	ffffbf80 	.word	0xffffbf80

080840d4 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 80840d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80840d8:	460e      	mov	r6, r1
 80840da:	b0a5      	sub	sp, #148	; 0x94

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 80840dc:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 80840de:	4604      	mov	r4, r0
 80840e0:	4692      	mov	sl, r2
 80840e2:	461d      	mov	r5, r3

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 80840e4:	f7ff fdec 	bl	8083cc0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80840e8:	9003      	str	r0, [sp, #12]
 80840ea:	2800      	cmp	r0, #0
 80840ec:	f040 819b 	bne.w	8084426 <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 80840f0:	a806      	add	r0, sp, #24
 80840f2:	f007 f8a9 	bl	808b248 <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 80840f6:	a809      	add	r0, sp, #36	; 0x24
 80840f8:	f007 f8a6 	bl	808b248 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 80840fc:	a80c      	add	r0, sp, #48	; 0x30
 80840fe:	f007 f8a3 	bl	808b248 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 8084102:	a80f      	add	r0, sp, #60	; 0x3c
 8084104:	f007 f8a0 	bl	808b248 <mbedtls_mpi_init>

    if( f_rng != NULL )
 8084108:	b12e      	cbz	r6, 8084116 <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 808410a:	a818      	add	r0, sp, #96	; 0x60
 808410c:	f007 f89c 	bl	808b248 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 8084110:	a81b      	add	r0, sp, #108	; 0x6c
 8084112:	f007 f899 	bl	808b248 <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 8084116:	a812      	add	r0, sp, #72	; 0x48
 8084118:	f007 f896 	bl	808b248 <mbedtls_mpi_init>
 808411c:	a815      	add	r0, sp, #84	; 0x54
 808411e:	f007 f893 	bl	808b248 <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 8084122:	a81e      	add	r0, sp, #120	; 0x78
 8084124:	f007 f890 	bl	808b248 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 8084128:	a821      	add	r0, sp, #132	; 0x84
 808412a:	f007 f88d 	bl	808b248 <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 808412e:	6862      	ldr	r2, [r4, #4]
 8084130:	4629      	mov	r1, r5
 8084132:	a806      	add	r0, sp, #24
 8084134:	f007 f967 	bl	808b406 <mbedtls_mpi_read_binary>
 8084138:	4607      	mov	r7, r0
 808413a:	2800      	cmp	r0, #0
 808413c:	f040 8150 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8084140:	f104 0508 	add.w	r5, r4, #8
 8084144:	4629      	mov	r1, r5
 8084146:	a806      	add	r0, sp, #24
 8084148:	f007 fae3 	bl	808b712 <mbedtls_mpi_cmp_mpi>
 808414c:	2800      	cmp	r0, #0
 808414e:	f280 8143 	bge.w	80843d8 <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 8084152:	a906      	add	r1, sp, #24
 8084154:	a81e      	add	r0, sp, #120	; 0x78
 8084156:	f007 f8c0 	bl	808b2da <mbedtls_mpi_copy>
 808415a:	4607      	mov	r7, r0
 808415c:	2800      	cmp	r0, #0
 808415e:	f040 813f 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
 8084162:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 8084166:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 808416a:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
 808416c:	2e00      	cmp	r6, #0
 808416e:	f000 80c5 	beq.w	80842fc <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 8084172:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8084176:	b323      	cbz	r3, 80841c2 <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8084178:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 808417c:	4642      	mov	r2, r8
 808417e:	4641      	mov	r1, r8
 8084180:	4640      	mov	r0, r8
 8084182:	f007 fc2a 	bl	808b9da <mbedtls_mpi_mul_mpi>
 8084186:	4607      	mov	r7, r0
 8084188:	2800      	cmp	r0, #0
 808418a:	f040 8129 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 808418e:	462a      	mov	r2, r5
 8084190:	4641      	mov	r1, r8
 8084192:	4640      	mov	r0, r8
 8084194:	f007 fe5d 	bl	808be52 <mbedtls_mpi_mod_mpi>
 8084198:	4607      	mov	r7, r0
 808419a:	2800      	cmp	r0, #0
 808419c:	f040 8120 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 80841a0:	f104 0898 	add.w	r8, r4, #152	; 0x98
 80841a4:	4642      	mov	r2, r8
 80841a6:	4641      	mov	r1, r8
 80841a8:	4640      	mov	r0, r8
 80841aa:	f007 fc16 	bl	808b9da <mbedtls_mpi_mul_mpi>
 80841ae:	4607      	mov	r7, r0
 80841b0:	2800      	cmp	r0, #0
 80841b2:	f040 8115 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 80841b6:	462a      	mov	r2, r5
 80841b8:	4641      	mov	r1, r8
 80841ba:	4640      	mov	r0, r8
 80841bc:	f007 fe49 	bl	808be52 <mbedtls_mpi_mod_mpi>
 80841c0:	e037      	b.n	8084232 <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 80841c2:	230c      	movs	r3, #12
 80841c4:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80841c6:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80841ca:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 80841ce:	9b05      	ldr	r3, [sp, #20]
 80841d0:	3b01      	subs	r3, #1
 80841d2:	9305      	str	r3, [sp, #20]
 80841d4:	f000 812a 	beq.w	808442c <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80841d8:	6861      	ldr	r1, [r4, #4]
 80841da:	4653      	mov	r3, sl
 80841dc:	4632      	mov	r2, r6
 80841de:	3901      	subs	r1, #1
 80841e0:	4658      	mov	r0, fp
 80841e2:	f008 f90c 	bl	808c3fe <mbedtls_mpi_fill_random>
 80841e6:	4607      	mov	r7, r0
 80841e8:	2800      	cmp	r0, #0
 80841ea:	f040 80f9 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80841ee:	462a      	mov	r2, r5
 80841f0:	4659      	mov	r1, fp
 80841f2:	4640      	mov	r0, r8
 80841f4:	f008 f87e 	bl	808c2f4 <mbedtls_mpi_gcd>
 80841f8:	4607      	mov	r7, r0
 80841fa:	2800      	cmp	r0, #0
 80841fc:	f040 80f0 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 8084200:	2101      	movs	r1, #1
 8084202:	4640      	mov	r0, r8
 8084204:	f007 faca 	bl	808b79c <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
 8084208:	2800      	cmp	r0, #0
 808420a:	d1e0      	bne.n	80841ce <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 808420c:	462a      	mov	r2, r5
 808420e:	4659      	mov	r1, fp
 8084210:	4640      	mov	r0, r8
 8084212:	f008 f917 	bl	808c444 <mbedtls_mpi_inv_mod>
 8084216:	4607      	mov	r7, r0
 8084218:	2800      	cmp	r0, #0
 808421a:	f040 80e1 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 808421e:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8084222:	9300      	str	r3, [sp, #0]
 8084224:	f104 0214 	add.w	r2, r4, #20
 8084228:	462b      	mov	r3, r5
 808422a:	4641      	mov	r1, r8
 808422c:	4640      	mov	r0, r8
 808422e:	f007 fe42 	bl	808beb6 <mbedtls_mpi_exp_mod>
 8084232:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 8084234:	2800      	cmp	r0, #0
 8084236:	f040 80d3 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 808423a:	a906      	add	r1, sp, #24
 808423c:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8084240:	4608      	mov	r0, r1
 8084242:	f007 fbca 	bl	808b9da <mbedtls_mpi_mul_mpi>
 8084246:	4607      	mov	r7, r0
 8084248:	2800      	cmp	r0, #0
 808424a:	f040 80c9 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 808424e:	a906      	add	r1, sp, #24
 8084250:	462a      	mov	r2, r5
 8084252:	4608      	mov	r0, r1
 8084254:	f007 fdfd 	bl	808be52 <mbedtls_mpi_mod_mpi>
 8084258:	4607      	mov	r7, r0
 808425a:	2800      	cmp	r0, #0
 808425c:	f040 80c0 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 8084260:	2201      	movs	r2, #1
 8084262:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8084266:	a809      	add	r0, sp, #36	; 0x24
 8084268:	f007 fba1 	bl	808b9ae <mbedtls_mpi_sub_int>
 808426c:	4607      	mov	r7, r0
 808426e:	2800      	cmp	r0, #0
 8084270:	f040 80b6 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 8084274:	2201      	movs	r2, #1
 8084276:	f104 0138 	add.w	r1, r4, #56	; 0x38
 808427a:	a80c      	add	r0, sp, #48	; 0x30
 808427c:	f007 fb97 	bl	808b9ae <mbedtls_mpi_sub_int>
 8084280:	4607      	mov	r7, r0
 8084282:	2800      	cmp	r0, #0
 8084284:	f040 80ac 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8084288:	4653      	mov	r3, sl
 808428a:	4632      	mov	r2, r6
 808428c:	211c      	movs	r1, #28
 808428e:	a80f      	add	r0, sp, #60	; 0x3c
 8084290:	f008 f8b5 	bl	808c3fe <mbedtls_mpi_fill_random>
 8084294:	4607      	mov	r7, r0
 8084296:	2800      	cmp	r0, #0
 8084298:	f040 80a2 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 808429c:	aa0f      	add	r2, sp, #60	; 0x3c
 808429e:	a909      	add	r1, sp, #36	; 0x24
 80842a0:	a818      	add	r0, sp, #96	; 0x60
 80842a2:	f007 fb9a 	bl	808b9da <mbedtls_mpi_mul_mpi>
 80842a6:	4607      	mov	r7, r0
 80842a8:	2800      	cmp	r0, #0
 80842aa:	f040 8099 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 80842ae:	a918      	add	r1, sp, #96	; 0x60
 80842b0:	464a      	mov	r2, r9
 80842b2:	4608      	mov	r0, r1
 80842b4:	f007 fb22 	bl	808b8fc <mbedtls_mpi_add_mpi>
 80842b8:	4607      	mov	r7, r0
 80842ba:	2800      	cmp	r0, #0
 80842bc:	f040 8090 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80842c0:	4653      	mov	r3, sl
 80842c2:	4632      	mov	r2, r6
 80842c4:	211c      	movs	r1, #28
 80842c6:	a80f      	add	r0, sp, #60	; 0x3c
 80842c8:	f008 f899 	bl	808c3fe <mbedtls_mpi_fill_random>
 80842cc:	4607      	mov	r7, r0
 80842ce:	2800      	cmp	r0, #0
 80842d0:	f040 8086 	bne.w	80843e0 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 80842d4:	aa0f      	add	r2, sp, #60	; 0x3c
 80842d6:	a90c      	add	r1, sp, #48	; 0x30
 80842d8:	a81b      	add	r0, sp, #108	; 0x6c
 80842da:	f007 fb7e 	bl	808b9da <mbedtls_mpi_mul_mpi>
 80842de:	4607      	mov	r7, r0
 80842e0:	2800      	cmp	r0, #0
 80842e2:	d17d      	bne.n	80843e0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 80842e4:	a91b      	add	r1, sp, #108	; 0x6c
 80842e6:	9a04      	ldr	r2, [sp, #16]
 80842e8:	4608      	mov	r0, r1
 80842ea:	f007 fb07 	bl	808b8fc <mbedtls_mpi_add_mpi>
 80842ee:	4607      	mov	r7, r0
 80842f0:	2800      	cmp	r0, #0
 80842f2:	d175      	bne.n	80843e0 <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 80842f4:	ab1b      	add	r3, sp, #108	; 0x6c
 80842f6:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
 80842f8:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 80842fc:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8084300:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8084304:	9300      	str	r3, [sp, #0]
 8084306:	464a      	mov	r2, r9
 8084308:	4643      	mov	r3, r8
 808430a:	a906      	add	r1, sp, #24
 808430c:	a812      	add	r0, sp, #72	; 0x48
 808430e:	f007 fdd2 	bl	808beb6 <mbedtls_mpi_exp_mod>
 8084312:	4607      	mov	r7, r0
 8084314:	2800      	cmp	r0, #0
 8084316:	d163      	bne.n	80843e0 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8084318:	f104 0380 	add.w	r3, r4, #128	; 0x80
 808431c:	f104 0938 	add.w	r9, r4, #56	; 0x38
 8084320:	9300      	str	r3, [sp, #0]
 8084322:	9a04      	ldr	r2, [sp, #16]
 8084324:	464b      	mov	r3, r9
 8084326:	a906      	add	r1, sp, #24
 8084328:	a815      	add	r0, sp, #84	; 0x54
 808432a:	f007 fdc4 	bl	808beb6 <mbedtls_mpi_exp_mod>
 808432e:	4607      	mov	r7, r0
 8084330:	2800      	cmp	r0, #0
 8084332:	d155      	bne.n	80843e0 <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 8084334:	aa15      	add	r2, sp, #84	; 0x54
 8084336:	a912      	add	r1, sp, #72	; 0x48
 8084338:	a806      	add	r0, sp, #24
 808433a:	f007 fb00 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808433e:	4607      	mov	r7, r0
 8084340:	2800      	cmp	r0, #0
 8084342:	d14d      	bne.n	80843e0 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 8084344:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8084348:	a906      	add	r1, sp, #24
 808434a:	a812      	add	r0, sp, #72	; 0x48
 808434c:	f007 fb45 	bl	808b9da <mbedtls_mpi_mul_mpi>
 8084350:	4607      	mov	r7, r0
 8084352:	2800      	cmp	r0, #0
 8084354:	d144      	bne.n	80843e0 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 8084356:	4642      	mov	r2, r8
 8084358:	a912      	add	r1, sp, #72	; 0x48
 808435a:	a806      	add	r0, sp, #24
 808435c:	f007 fd79 	bl	808be52 <mbedtls_mpi_mod_mpi>
 8084360:	4607      	mov	r7, r0
 8084362:	2800      	cmp	r0, #0
 8084364:	d13c      	bne.n	80843e0 <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 8084366:	464a      	mov	r2, r9
 8084368:	a906      	add	r1, sp, #24
 808436a:	a812      	add	r0, sp, #72	; 0x48
 808436c:	f007 fb35 	bl	808b9da <mbedtls_mpi_mul_mpi>
 8084370:	4607      	mov	r7, r0
 8084372:	2800      	cmp	r0, #0
 8084374:	d134      	bne.n	80843e0 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 8084376:	aa12      	add	r2, sp, #72	; 0x48
 8084378:	a915      	add	r1, sp, #84	; 0x54
 808437a:	a806      	add	r0, sp, #24
 808437c:	f007 fabe 	bl	808b8fc <mbedtls_mpi_add_mpi>
 8084380:	4607      	mov	r7, r0
 8084382:	bb68      	cbnz	r0, 80843e0 <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 8084384:	b966      	cbnz	r6, 80843a0 <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 8084386:	f104 0368 	add.w	r3, r4, #104	; 0x68
 808438a:	9300      	str	r3, [sp, #0]
 808438c:	f104 0214 	add.w	r2, r4, #20
 8084390:	462b      	mov	r3, r5
 8084392:	a906      	add	r1, sp, #24
 8084394:	a821      	add	r0, sp, #132	; 0x84
 8084396:	f007 fd8e 	bl	808beb6 <mbedtls_mpi_exp_mod>
 808439a:	4607      	mov	r7, r0
 808439c:	bb00      	cbnz	r0, 80843e0 <mbedtls_rsa_private+0x30c>
 808439e:	e00f      	b.n	80843c0 <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 80843a0:	a906      	add	r1, sp, #24
 80843a2:	f104 0298 	add.w	r2, r4, #152	; 0x98
 80843a6:	4608      	mov	r0, r1
 80843a8:	f007 fb17 	bl	808b9da <mbedtls_mpi_mul_mpi>
 80843ac:	4607      	mov	r7, r0
 80843ae:	b9b8      	cbnz	r0, 80843e0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80843b0:	a906      	add	r1, sp, #24
 80843b2:	462a      	mov	r2, r5
 80843b4:	4608      	mov	r0, r1
 80843b6:	f007 fd4c 	bl	808be52 <mbedtls_mpi_mod_mpi>
 80843ba:	4607      	mov	r7, r0
 80843bc:	b980      	cbnz	r0, 80843e0 <mbedtls_rsa_private+0x30c>
 80843be:	e7e2      	b.n	8084386 <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 80843c0:	a91e      	add	r1, sp, #120	; 0x78
 80843c2:	a821      	add	r0, sp, #132	; 0x84
 80843c4:	f007 f9a5 	bl	808b712 <mbedtls_mpi_cmp_mpi>
 80843c8:	b948      	cbnz	r0, 80843de <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80843ca:	6862      	ldr	r2, [r4, #4]
 80843cc:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80843ce:	a806      	add	r0, sp, #24
 80843d0:	f007 f84e 	bl	808b470 <mbedtls_mpi_write_binary>
 80843d4:	4607      	mov	r7, r0
 80843d6:	e003      	b.n	80843e0 <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80843d8:	f06f 0703 	mvn.w	r7, #3
 80843dc:	e000      	b.n	80843e0 <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80843de:	4f16      	ldr	r7, [pc, #88]	; (8084438 <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 80843e0:	a809      	add	r0, sp, #36	; 0x24
 80843e2:	f006 ff38 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80843e6:	a80c      	add	r0, sp, #48	; 0x30
 80843e8:	f006 ff35 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 80843ec:	a80f      	add	r0, sp, #60	; 0x3c
 80843ee:	f006 ff32 	bl	808b256 <mbedtls_mpi_free>

    if( f_rng != NULL )
 80843f2:	b12e      	cbz	r6, 8084400 <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 80843f4:	a818      	add	r0, sp, #96	; 0x60
 80843f6:	f006 ff2e 	bl	808b256 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 80843fa:	a81b      	add	r0, sp, #108	; 0x6c
 80843fc:	f006 ff2b 	bl	808b256 <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 8084400:	a806      	add	r0, sp, #24
 8084402:	f006 ff28 	bl	808b256 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 8084406:	a812      	add	r0, sp, #72	; 0x48
 8084408:	f006 ff25 	bl	808b256 <mbedtls_mpi_free>
 808440c:	a815      	add	r0, sp, #84	; 0x54
 808440e:	f006 ff22 	bl	808b256 <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 8084412:	a821      	add	r0, sp, #132	; 0x84
 8084414:	f006 ff1f 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 8084418:	a81e      	add	r0, sp, #120	; 0x78
 808441a:	f006 ff1c 	bl	808b256 <mbedtls_mpi_free>

    if( ret != 0 )
 808441e:	b13f      	cbz	r7, 8084430 <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 8084420:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
 8084424:	e000      	b.n	8084428 <mbedtls_rsa_private+0x354>
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084426:	4b05      	ldr	r3, [pc, #20]	; (808443c <mbedtls_rsa_private+0x368>)
 8084428:	9303      	str	r3, [sp, #12]
 808442a:	e001      	b.n	8084430 <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 808442c:	4f04      	ldr	r7, [pc, #16]	; (8084440 <mbedtls_rsa_private+0x36c>)
 808442e:	e7d7      	b.n	80843e0 <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
 8084430:	9803      	ldr	r0, [sp, #12]
 8084432:	b025      	add	sp, #148	; 0x94
 8084434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084438:	ffffbc80 	.word	0xffffbc80
 808443c:	ffffbf80 	.word	0xffffbf80
 8084440:	ffffbb80 	.word	0xffffbb80

08084444 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8084444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084448:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 808444a:	b08b      	sub	sp, #44	; 0x2c
 808444c:	4680      	mov	r8, r0
 808444e:	468b      	mov	fp, r1
 8084450:	9203      	str	r2, [sp, #12]
 8084452:	9304      	str	r3, [sp, #16]
 8084454:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8084456:	9e18      	ldr	r6, [sp, #96]	; 0x60
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084458:	d105      	bne.n	8084466 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
 808445a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 808445e:	2b01      	cmp	r3, #1
 8084460:	d001      	beq.n	8084466 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084462:	4840      	ldr	r0, [pc, #256]	; (8084564 <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
 8084464:	e07a      	b.n	808455c <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    if( f_rng == NULL )
 8084466:	f1bb 0f00 	cmp.w	fp, #0
 808446a:	d0fa      	beq.n	8084462 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 808446c:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 8084470:	f003 fb4a 	bl	8087b08 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8084474:	9002      	str	r0, [sp, #8]
 8084476:	2800      	cmp	r0, #0
 8084478:	d0f3      	beq.n	8084462 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 808447a:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
 808447e:	f003 fc87 	bl	8087d90 <mbedtls_md_get_size>

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8084482:	0043      	lsls	r3, r0, #1
 8084484:	9305      	str	r3, [sp, #20]
 8084486:	0042      	lsls	r2, r0, #1
 8084488:	1cbb      	adds	r3, r7, #2
 808448a:	4413      	add	r3, r2
 808448c:	429f      	cmp	r7, r3
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
    hlen = mbedtls_md_get_size( md_info );
 808448e:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8084490:	d8e7      	bhi.n	8084462 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 8084492:	429c      	cmp	r4, r3
 8084494:	d3e5      	bcc.n	8084462 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
 8084496:	4622      	mov	r2, r4
 8084498:	2100      	movs	r1, #0
 808449a:	4630      	mov	r0, r6
 808449c:	f00e fe25 	bl	80930ea <memset>

    *p++ = 0;
 80844a0:	f106 0901 	add.w	r9, r6, #1
 80844a4:	2300      	movs	r3, #0
 80844a6:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 80844a8:	462a      	mov	r2, r5
 80844aa:	4649      	mov	r1, r9
 80844ac:	9803      	ldr	r0, [sp, #12]
 80844ae:	47d8      	blx	fp
 80844b0:	b110      	cbz	r0, 80844b8 <mbedtls_rsa_rsaes_oaep_encrypt+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80844b2:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80844b6:	e051      	b.n	808455c <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    p += hlen;
 80844b8:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 80844bc:	4653      	mov	r3, sl
 80844be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80844c0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80844c2:	9802      	ldr	r0, [sp, #8]
 80844c4:	f003 fb92 	bl	8087bec <mbedtls_md>
 80844c8:	2800      	cmp	r0, #0
 80844ca:	d147      	bne.n	808455c <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 80844cc:	9005      	str	r0, [sp, #20]
 80844ce:	1ea0      	subs	r0, r4, #2
 80844d0:	1bc0      	subs	r0, r0, r7
 80844d2:	006b      	lsls	r3, r5, #1
 80844d4:	4428      	add	r0, r5
 80844d6:	1ac0      	subs	r0, r0, r3
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
 80844d8:	2201      	movs	r2, #1
 80844da:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
 80844de:	4410      	add	r0, r2
 80844e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80844e2:	463a      	mov	r2, r7
 80844e4:	4450      	add	r0, sl

    mbedtls_md_init( &md_ctx );
 80844e6:	af07      	add	r7, sp, #28
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
 80844e8:	f00e fdd9 	bl	809309e <memcpy>

    mbedtls_md_init( &md_ctx );
 80844ec:	4638      	mov	r0, r7
 80844ee:	f003 fb17 	bl	8087b20 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80844f2:	9b05      	ldr	r3, [sp, #20]
 80844f4:	9902      	ldr	r1, [sp, #8]
 80844f6:	461a      	mov	r2, r3
 80844f8:	4638      	mov	r0, r7
 80844fa:	f003 fb37 	bl	8087b6c <mbedtls_md_setup>
 80844fe:	4602      	mov	r2, r0
 8084500:	b9a8      	cbnz	r0, 808452e <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 8084502:	f105 0a01 	add.w	sl, r5, #1
 8084506:	3c01      	subs	r4, #1
 8084508:	44b2      	add	sl, r6
 808450a:	1b64      	subs	r4, r4, r5
 808450c:	464a      	mov	r2, r9
 808450e:	9700      	str	r7, [sp, #0]
 8084510:	462b      	mov	r3, r5
 8084512:	4621      	mov	r1, r4
 8084514:	4650      	mov	r0, sl
 8084516:	f7ff faef 	bl	8083af8 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 808451a:	4602      	mov	r2, r0
 808451c:	b938      	cbnz	r0, 808452e <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 808451e:	4652      	mov	r2, sl
 8084520:	9700      	str	r7, [sp, #0]
 8084522:	4623      	mov	r3, r4
 8084524:	4629      	mov	r1, r5
 8084526:	4648      	mov	r0, r9
 8084528:	f7ff fae6 	bl	8083af8 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 808452c:	4602      	mov	r2, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
 808452e:	a807      	add	r0, sp, #28
 8084530:	9202      	str	r2, [sp, #8]
 8084532:	f003 fafa 	bl	8087b2a <mbedtls_md_free>

    if( ret != 0 )
 8084536:	9a02      	ldr	r2, [sp, #8]
 8084538:	b97a      	cbnz	r2, 808455a <mbedtls_rsa_rsaes_oaep_encrypt+0x116>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 808453a:	9b04      	ldr	r3, [sp, #16]
 808453c:	b92b      	cbnz	r3, 808454a <mbedtls_rsa_rsaes_oaep_encrypt+0x106>
 808453e:	4632      	mov	r2, r6
 8084540:	4631      	mov	r1, r6
 8084542:	4640      	mov	r0, r8
 8084544:	f7ff fd84 	bl	8084050 <mbedtls_rsa_public>
 8084548:	e008      	b.n	808455c <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 808454a:	9600      	str	r6, [sp, #0]
 808454c:	4633      	mov	r3, r6
 808454e:	9a03      	ldr	r2, [sp, #12]
 8084550:	4659      	mov	r1, fp
 8084552:	4640      	mov	r0, r8
 8084554:	f7ff fdbe 	bl	80840d4 <mbedtls_rsa_private>
 8084558:	e000      	b.n	808455c <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 808455a:	4610      	mov	r0, r2
}
 808455c:	b00b      	add	sp, #44	; 0x2c
 808455e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084562:	bf00      	nop
 8084564:	ffffbf80 	.word	0xffffbf80

08084568 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8084568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808456c:	469a      	mov	sl, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 808456e:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8084572:	4607      	mov	r7, r0
 8084574:	4689      	mov	r9, r1
 8084576:	4693      	mov	fp, r2
 8084578:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 808457c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808457e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084580:	d103      	bne.n	808458a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
 8084582:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8084586:	2a00      	cmp	r2, #0
 8084588:	d155      	bne.n	8084636 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 808458a:	f1b9 0f00 	cmp.w	r9, #0
 808458e:	d052      	beq.n	8084636 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 8084590:	2b00      	cmp	r3, #0
 8084592:	d050      	beq.n	8084636 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 8084594:	2e00      	cmp	r6, #0
 8084596:	d04e      	beq.n	8084636 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8084598:	f118 020b 	adds.w	r2, r8, #11

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 808459c:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 808459e:	d24a      	bcs.n	8084636 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80845a0:	4294      	cmp	r4, r2
 80845a2:	d348      	bcc.n	8084636 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 80845a4:	4635      	mov	r5, r6

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80845a6:	3c03      	subs	r4, #3

    *p++ = 0;
 80845a8:	2200      	movs	r2, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80845aa:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
 80845ae:	f805 2b02 	strb.w	r2, [r5], #2
    if( mode == MBEDTLS_RSA_PUBLIC )
 80845b2:	f1ba 0f00 	cmp.w	sl, #0
 80845b6:	d118      	bne.n	80845ea <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 80845b8:	2202      	movs	r2, #2
 80845ba:	7072      	strb	r2, [r6, #1]
 80845bc:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
 80845be:	42a5      	cmp	r5, r4
 80845c0:	d01c      	beq.n	80845fc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
 80845c2:	2264      	movs	r2, #100	; 0x64
 80845c4:	9200      	str	r2, [sp, #0]
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
 80845c6:	2201      	movs	r2, #1
 80845c8:	4629      	mov	r1, r5
 80845ca:	4658      	mov	r0, fp
 80845cc:	9301      	str	r3, [sp, #4]
 80845ce:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
 80845d0:	782a      	ldrb	r2, [r5, #0]
 80845d2:	9b01      	ldr	r3, [sp, #4]
 80845d4:	bb8a      	cbnz	r2, 808463a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 80845d6:	9a00      	ldr	r2, [sp, #0]
 80845d8:	3a01      	subs	r2, #1
 80845da:	9200      	str	r2, [sp, #0]
 80845dc:	d102      	bne.n	80845e4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7c>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80845de:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80845e2:	e02e      	b.n	8084642 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
 80845e4:	2800      	cmp	r0, #0
 80845e6:	d0ee      	beq.n	80845c6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5e>
 80845e8:	e7f9      	b.n	80845de <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 80845ea:	2201      	movs	r2, #1
 80845ec:	7072      	strb	r2, [r6, #1]
 80845ee:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
 80845f0:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 80845f2:	42ac      	cmp	r4, r5
 80845f4:	d002      	beq.n	80845fc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
            *p++ = 0xFF;
 80845f6:	f805 2b01 	strb.w	r2, [r5], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 80845fa:	e7fa      	b.n	80845f2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
    }

    *p++ = 0;
 80845fc:	4620      	mov	r0, r4
 80845fe:	2200      	movs	r2, #0
 8084600:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 8084604:	4619      	mov	r1, r3
 8084606:	4642      	mov	r2, r8
 8084608:	f00e fd49 	bl	809309e <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 808460c:	f1ba 0f00 	cmp.w	sl, #0
 8084610:	d107      	bne.n	8084622 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xba>
 8084612:	4632      	mov	r2, r6
 8084614:	4631      	mov	r1, r6
 8084616:	4638      	mov	r0, r7
}
 8084618:	b003      	add	sp, #12
 808461a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 808461e:	f7ff bd17 	b.w	8084050 <mbedtls_rsa_public>
 8084622:	4633      	mov	r3, r6
 8084624:	465a      	mov	r2, fp
 8084626:	4649      	mov	r1, r9
 8084628:	4638      	mov	r0, r7
 808462a:	960c      	str	r6, [sp, #48]	; 0x30
}
 808462c:	b003      	add	sp, #12
 808462e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084632:	f7ff bd4f 	b.w	80840d4 <mbedtls_rsa_private>
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084636:	4804      	ldr	r0, [pc, #16]	; (8084648 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
 8084638:	e003      	b.n	8084642 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 808463a:	2800      	cmp	r0, #0
 808463c:	d1cf      	bne.n	80845de <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
 808463e:	3501      	adds	r5, #1
    *p++ = 0;
    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
 8084640:	e7bd      	b.n	80845be <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 8084642:	b003      	add	sp, #12
 8084644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084648:	ffffbf80 	.word	0xffffbf80

0808464c <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 808464c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808464e:	b087      	sub	sp, #28
    switch( ctx->padding )
 8084650:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8084654:	ac0c      	add	r4, sp, #48	; 0x30
 8084656:	cc70      	ldmia	r4, {r4, r5, r6}
    switch( ctx->padding )
 8084658:	b157      	cbz	r7, 8084670 <mbedtls_rsa_pkcs1_encrypt+0x24>
 808465a:	2f01      	cmp	r7, #1
 808465c:	d110      	bne.n	8084680 <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
 808465e:	9402      	str	r4, [sp, #8]
 8084660:	2400      	movs	r4, #0
 8084662:	9604      	str	r6, [sp, #16]
 8084664:	9503      	str	r5, [sp, #12]
 8084666:	9401      	str	r4, [sp, #4]
 8084668:	9400      	str	r4, [sp, #0]
 808466a:	f7ff feeb 	bl	8084444 <mbedtls_rsa_rsaes_oaep_encrypt>
 808466e:	e008      	b.n	8084682 <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 8084670:	960e      	str	r6, [sp, #56]	; 0x38
 8084672:	950d      	str	r5, [sp, #52]	; 0x34
 8084674:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084676:	b007      	add	sp, #28
 8084678:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 808467c:	f7ff bf74 	b.w	8084568 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8084680:	4801      	ldr	r0, [pc, #4]	; (8084688 <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
 8084682:	b007      	add	sp, #28
 8084684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084686:	bf00      	nop
 8084688:	ffffbf00 	.word	0xffffbf00

0808468c <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 808468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084690:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 8084692:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 8084696:	4606      	mov	r6, r0
 8084698:	468a      	mov	sl, r1
 808469a:	9203      	str	r2, [sp, #12]
 808469c:	469b      	mov	fp, r3
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 808469e:	d105      	bne.n	80846ac <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
 80846a0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80846a4:	2b01      	cmp	r3, #1
 80846a6:	d001      	beq.n	80846ac <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80846a8:	485c      	ldr	r0, [pc, #368]	; (808481c <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 80846aa:	e0b2      	b.n	8084812 <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
 80846ac:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 80846ae:	f1a7 0310 	sub.w	r3, r7, #16
 80846b2:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80846b6:	d8f7      	bhi.n	80846a8 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80846b8:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
 80846bc:	f003 fa24 	bl	8087b08 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80846c0:	9002      	str	r0, [sp, #8]
 80846c2:	2800      	cmp	r0, #0
 80846c4:	d0f0      	beq.n	80846a8 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80846c6:	f003 fb63 	bl	8087d90 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80846ca:	f100 0801 	add.w	r8, r0, #1
 80846ce:	ea4f 0548 	mov.w	r5, r8, lsl #1
 80846d2:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80846d4:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80846d6:	d3e7      	bcc.n	80846a8 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 80846d8:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80846dc:	f1bb 0f00 	cmp.w	fp, #0
 80846e0:	d106      	bne.n	80846f0 <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
 80846e2:	464a      	mov	r2, r9
 80846e4:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 80846e8:	4630      	mov	r0, r6
 80846ea:	f7ff fcb1 	bl	8084050 <mbedtls_rsa_public>
 80846ee:	e008      	b.n	8084702 <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
 80846f0:	f8cd 9000 	str.w	r9, [sp]
 80846f4:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 80846f8:	9a03      	ldr	r2, [sp, #12]
 80846fa:	4651      	mov	r1, sl
 80846fc:	4630      	mov	r0, r6
 80846fe:	f7ff fce9 	bl	80840d4 <mbedtls_rsa_private>
 8084702:	4682      	mov	sl, r0

    if( ret != 0 )
 8084704:	2800      	cmp	r0, #0
 8084706:	d13c      	bne.n	8084782 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
 8084708:	ae05      	add	r6, sp, #20
 808470a:	4630      	mov	r0, r6
 808470c:	f003 fa08 	bl	8087b20 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8084710:	4652      	mov	r2, sl
 8084712:	9902      	ldr	r1, [sp, #8]
 8084714:	4630      	mov	r0, r6
 8084716:	f003 fa29 	bl	8087b6c <mbedtls_md_setup>
 808471a:	4682      	mov	sl, r0
 808471c:	b108      	cbz	r0, 8084722 <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
 808471e:	4630      	mov	r0, r6
 8084720:	e03b      	b.n	808479a <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 8084722:	f107 3bff 	add.w	fp, r7, #4294967295
 8084726:	44c8      	add	r8, r9
 8084728:	ebc4 0b0b 	rsb	fp, r4, fp
                          &md_ctx ) ) != 0 ||
 808472c:	9600      	str	r6, [sp, #0]
 808472e:	465b      	mov	r3, fp
 8084730:	4642      	mov	r2, r8
 8084732:	4621      	mov	r1, r4
 8084734:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 8084738:	f7ff f9de 	bl	8083af8 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 808473c:	4682      	mov	sl, r0
 808473e:	bb58      	cbnz	r0, 8084798 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 8084740:	9600      	str	r6, [sp, #0]
 8084742:	4623      	mov	r3, r4
 8084744:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 8084748:	4659      	mov	r1, fp
 808474a:	4640      	mov	r0, r8
 808474c:	f7ff f9d4 	bl	8083af8 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084750:	4682      	mov	sl, r0
 8084752:	bb08      	cbnz	r0, 8084798 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 8084754:	e024      	b.n	80847a0 <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
 8084756:	5c88      	ldrb	r0, [r1, r2]
 8084758:	f080 0001 	eor.w	r0, r0, #1
 808475c:	ea50 030e 	orrs.w	r3, r0, lr
 8084760:	d151      	bne.n	8084806 <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
 8084762:	3201      	adds	r2, #1
 8084764:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 8084766:	aa18      	add	r2, sp, #96	; 0x60
 8084768:	1a8a      	subs	r2, r1, r2
 808476a:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
 808476e:	1aba      	subs	r2, r7, r2
 8084770:	4282      	cmp	r2, r0
 8084772:	d84b      	bhi.n	808480c <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084774:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
 8084778:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
 808477a:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
 808477e:	f00e fc8e 	bl	809309e <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 8084782:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8084786:	a818      	add	r0, sp, #96	; 0x60
 8084788:	f7ff f9ae 	bl	8083ae8 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 808478c:	a808      	add	r0, sp, #32
 808478e:	2140      	movs	r1, #64	; 0x40
 8084790:	f7ff f9aa 	bl	8083ae8 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 8084794:	4650      	mov	r0, sl
 8084796:	e03c      	b.n	8084812 <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
 8084798:	a805      	add	r0, sp, #20
 808479a:	f003 f9c6 	bl	8087b2a <mbedtls_md_free>
        goto cleanup;
 808479e:	e7f0      	b.n	8084782 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
 80847a0:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80847a2:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
 80847a4:	f003 f9c1 	bl	8087b2a <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80847a8:	4633      	mov	r3, r6
 80847aa:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80847ae:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 80847b2:	9802      	ldr	r0, [sp, #8]
 80847b4:	f003 fa1a 	bl	8087bec <mbedtls_md>
 80847b8:	4682      	mov	sl, r0
 80847ba:	2800      	cmp	r0, #0
 80847bc:	d1e1      	bne.n	8084782 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80847be:	4650      	mov	r0, sl
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
 80847c0:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
 80847c4:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
 80847c8:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80847ca:	42a0      	cmp	r0, r4
 80847cc:	d208      	bcs.n	80847e0 <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
 80847ce:	5c32      	ldrb	r2, [r6, r0]
 80847d0:	f811 c000 	ldrb.w	ip, [r1, r0]
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80847d4:	3001      	adds	r0, #1
        bad |= lhash[i] ^ *p++;
 80847d6:	ea82 0c0c 	eor.w	ip, r2, ip
 80847da:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80847de:	e7f4      	b.n	80847ca <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
 80847e0:	4421      	add	r1, r4

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 80847e2:	2400      	movs	r4, #0
 80847e4:	460e      	mov	r6, r1
 80847e6:	4622      	mov	r2, r4
 80847e8:	1b7d      	subs	r5, r7, r5
 80847ea:	440d      	add	r5, r1
 80847ec:	42b5      	cmp	r5, r6
 80847ee:	d0b2      	beq.n	8084756 <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
 80847f0:	f816 0b01 	ldrb.w	r0, [r6], #1
 80847f4:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80847f6:	4260      	negs	r0, r4
 80847f8:	4320      	orrs	r0, r4
 80847fa:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80847fe:	f080 0001 	eor.w	r0, r0, #1
 8084802:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8084804:	e7f2      	b.n	80847ec <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8084806:	f8df a018 	ldr.w	sl, [pc, #24]	; 8084820 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
 808480a:	e7ba      	b.n	8084782 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 808480c:	f8df a014 	ldr.w	sl, [pc, #20]	; 8084824 <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
 8084810:	e7b7      	b.n	8084782 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 8084812:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 8084816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808481a:	bf00      	nop
 808481c:	ffffbf80 	.word	0xffffbf80
 8084820:	ffffbf00 	.word	0xffffbf00
 8084824:	ffffbc00 	.word	0xffffbc00

08084828 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8084828:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 808482a:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 808482c:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8084830:	461d      	mov	r5, r3
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084832:	d103      	bne.n	808483c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14>
 8084834:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8084838:	2b00      	cmp	r3, #0
 808483a:	d17f      	bne.n	808493c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 808483c:	6847      	ldr	r7, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 808483e:	f1a7 0310 	sub.w	r3, r7, #16
 8084842:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8084846:	d879      	bhi.n	808493c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
 8084848:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 808484a:	b945      	cbnz	r5, 808485e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x36>
 808484c:	4632      	mov	r2, r6
 808484e:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
 8084852:	f7ff fbfd 	bl	8084050 <mbedtls_rsa_public>

    if( ret != 0 )
 8084856:	4604      	mov	r4, r0
 8084858:	2800      	cmp	r0, #0
 808485a:	d168      	bne.n	808492e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
 808485c:	e02f      	b.n	80848be <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x96>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 808485e:	9600      	str	r6, [sp, #0]
 8084860:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
 8084864:	f7ff fc36 	bl	80840d4 <mbedtls_rsa_private>

    if( ret != 0 )
 8084868:	4604      	mov	r4, r0
 808486a:	2800      	cmp	r0, #0
 808486c:	d15f      	bne.n	808492e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 808486e:	2d01      	cmp	r5, #1
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 8084870:	7832      	ldrb	r2, [r6, #0]

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 8084872:	d125      	bne.n	80848c0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x98>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084874:	4601      	mov	r1, r0
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 8084876:	4686      	mov	lr, r0
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8084878:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 808487a:	1efd      	subs	r5, r7, #3
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 808487c:	f083 0302 	eor.w	r3, r3, #2
 8084880:	4313      	orrs	r3, r2

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084882:	42a9      	cmp	r1, r5
 8084884:	d212      	bcs.n	80848ac <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8084886:	1872      	adds	r2, r6, r1
 8084888:	7890      	ldrb	r0, [r2, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 808488a:	3101      	adds	r1, #1
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 808488c:	4242      	negs	r2, r0
 808488e:	4310      	orrs	r0, r2
 8084890:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8084894:	f080 0001 	eor.w	r0, r0, #1
 8084898:	4304      	orrs	r4, r0
 808489a:	b2e4      	uxtb	r4, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 808489c:	4262      	negs	r2, r4
 808489e:	4322      	orrs	r2, r4
 80848a0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80848a4:	f082 0201 	eor.w	r2, r2, #1
 80848a8:	4496      	add	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80848aa:	e7ea      	b.n	8084882 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5a>
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 80848ac:	f10d 020a 	add.w	r2, sp, #10
 80848b0:	f10e 0101 	add.w	r1, lr, #1
 80848b4:	4411      	add	r1, r2
 80848b6:	f812 200e 	ldrb.w	r2, [r2, lr]
 80848ba:	4313      	orrs	r3, r2
 80848bc:	e01e      	b.n	80848fc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd4>
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 80848be:	7832      	ldrb	r2, [r6, #0]
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80848c0:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80848c2:	1efc      	subs	r4, r7, #3
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80848c4:	f083 0301 	eor.w	r3, r3, #1
 80848c8:	4313      	orrs	r3, r2
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
 80848ca:	2200      	movs	r2, #0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80848cc:	4611      	mov	r1, r2
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 80848ce:	4696      	mov	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80848d0:	42a1      	cmp	r1, r4
 80848d2:	d20b      	bcs.n	80848ec <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc4>
        {
            pad_done |= ( p[i] != 0xFF );
 80848d4:	1870      	adds	r0, r6, r1
 80848d6:	7880      	ldrb	r0, [r0, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80848d8:	3101      	adds	r1, #1
        {
            pad_done |= ( p[i] != 0xFF );
 80848da:	28ff      	cmp	r0, #255	; 0xff
 80848dc:	bf18      	it	ne
 80848de:	f042 0201 	orrne.w	r2, r2, #1
            pad_count += ( pad_done == 0 );
 80848e2:	f082 0001 	eor.w	r0, r2, #1
 80848e6:	b2c0      	uxtb	r0, r0
 80848e8:	4486      	add	lr, r0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80848ea:	e7f1      	b.n	80848d0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 80848ec:	f10d 020a 	add.w	r2, sp, #10
 80848f0:	f812 500e 	ldrb.w	r5, [r2, lr]
 80848f4:	f10e 0101 	add.w	r1, lr, #1
 80848f8:	4411      	add	r1, r2
 80848fa:	432b      	orrs	r3, r5
    }

    bad |= ( pad_count < 8 );

    if( bad )
 80848fc:	f1be 0f07 	cmp.w	lr, #7
 8084900:	bf8c      	ite	hi
 8084902:	461c      	movhi	r4, r3
 8084904:	f043 0401 	orrls.w	r4, r3, #1
 8084908:	b264      	sxtb	r4, r4
 808490a:	b96c      	cbnz	r4, 8084928 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x100>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 808490c:	1b8a      	subs	r2, r1, r6
 808490e:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 8084912:	1aba      	subs	r2, r7, r2
 8084914:	429a      	cmp	r2, r3
 8084916:	d809      	bhi.n	808492c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x104>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084918:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 808491c:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084920:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 8084922:	f00e fbbc 	bl	809309e <memcpy>
 8084926:	e002      	b.n	808492e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>

    bad |= ( pad_count < 8 );

    if( bad )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8084928:	4c06      	ldr	r4, [pc, #24]	; (8084944 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11c>)
 808492a:	e000      	b.n	808492e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 808492c:	4c06      	ldr	r4, [pc, #24]	; (8084948 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x120>)
    *olen = ilen - (p - buf);
    memcpy( output, p, *olen );
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 808492e:	4630      	mov	r0, r6
 8084930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8084934:	f7ff f8d8 	bl	8083ae8 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 8084938:	4620      	mov	r0, r4
 808493a:	e000      	b.n	808493e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x116>
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808493c:	4803      	ldr	r0, [pc, #12]	; (808494c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x124>)

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 808493e:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 8084942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084944:	ffffbf00 	.word	0xffffbf00
 8084948:	ffffbc00 	.word	0xffffbc00
 808494c:	ffffbf80 	.word	0xffffbf80

08084950 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8084950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084952:	b087      	sub	sp, #28
    switch( ctx->padding )
 8084954:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8084958:	ac0c      	add	r4, sp, #48	; 0x30
 808495a:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
    switch( ctx->padding )
 808495c:	f1be 0f00 	cmp.w	lr, #0
 8084960:	d00c      	beq.n	808497c <mbedtls_rsa_pkcs1_decrypt+0x2c>
 8084962:	f1be 0f01 	cmp.w	lr, #1
 8084966:	d112      	bne.n	808498e <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
 8084968:	9402      	str	r4, [sp, #8]
 808496a:	2400      	movs	r4, #0
 808496c:	9705      	str	r7, [sp, #20]
 808496e:	9604      	str	r6, [sp, #16]
 8084970:	9503      	str	r5, [sp, #12]
 8084972:	9401      	str	r4, [sp, #4]
 8084974:	9400      	str	r4, [sp, #0]
 8084976:	f7ff fe89 	bl	808468c <mbedtls_rsa_rsaes_oaep_decrypt>
 808497a:	e009      	b.n	8084990 <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 808497c:	970f      	str	r7, [sp, #60]	; 0x3c
 808497e:	960e      	str	r6, [sp, #56]	; 0x38
 8084980:	950d      	str	r5, [sp, #52]	; 0x34
 8084982:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084984:	b007      	add	sp, #28
 8084986:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 808498a:	f7ff bf4d 	b.w	8084828 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 808498e:	4801      	ldr	r0, [pc, #4]	; (8084994 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 8084990:	b007      	add	sp, #28
 8084992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084994:	ffffbf00 	.word	0xffffbf00

08084998 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 8084998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 808499c:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 808499e:	b09d      	sub	sp, #116	; 0x74
 80849a0:	4680      	mov	r8, r0
 80849a2:	468a      	mov	sl, r1
 80849a4:	9204      	str	r2, [sp, #16]
 80849a6:	9305      	str	r3, [sp, #20]
 80849a8:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 80849ac:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80849ae:	d105      	bne.n	80849bc <mbedtls_rsa_rsassa_pss_sign+0x24>
 80849b0:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 80849b4:	2b01      	cmp	r3, #1
 80849b6:	d001      	beq.n	80849bc <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80849b8:	4858      	ldr	r0, [pc, #352]	; (8084b1c <mbedtls_rsa_rsassa_pss_sign+0x184>)
 80849ba:	e0ab      	b.n	8084b14 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    if( f_rng == NULL )
 80849bc:	f1ba 0f00 	cmp.w	sl, #0
 80849c0:	d0fa      	beq.n	80849b8 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80849c2:	f8d8 6004 	ldr.w	r6, [r8, #4]

    if( md_alg != MBEDTLS_MD_NONE )
 80849c6:	b130      	cbz	r0, 80849d6 <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80849c8:	f003 f89e 	bl	8087b08 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80849cc:	2800      	cmp	r0, #0
 80849ce:	d0f3      	beq.n	80849b8 <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80849d0:	f003 f9de 	bl	8087d90 <mbedtls_md_get_size>
 80849d4:	9027      	str	r0, [sp, #156]	; 0x9c
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80849d6:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 80849da:	f003 f895 	bl	8087b08 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80849de:	4683      	mov	fp, r0
 80849e0:	2800      	cmp	r0, #0
 80849e2:	d0e9      	beq.n	80849b8 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80849e4:	f003 f9d4 	bl	8087d90 <mbedtls_md_get_size>
    slen = hlen;

    if( olen < hlen + slen + 2 )
 80849e8:	0045      	lsls	r5, r0, #1
 80849ea:	1cab      	adds	r3, r5, #2
 80849ec:	429e      	cmp	r6, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80849ee:	4607      	mov	r7, r0
    slen = hlen;

    if( olen < hlen + slen + 2 )
 80849f0:	d3e2      	bcc.n	80849b8 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( sig, 0, olen );
 80849f2:	4632      	mov	r2, r6
 80849f4:	2100      	movs	r1, #0
 80849f6:	4620      	mov	r0, r4
 80849f8:	f00e fb77 	bl	80930ea <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 80849fc:	463a      	mov	r2, r7
 80849fe:	a90c      	add	r1, sp, #48	; 0x30
 8084a00:	9804      	ldr	r0, [sp, #16]
 8084a02:	47d0      	blx	sl
 8084a04:	b110      	cbz	r0, 8084a0c <mbedtls_rsa_rsassa_pss_sign+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8084a06:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 8084a0a:	e083      	b.n	8084b14 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084a0c:	f108 0308 	add.w	r3, r8, #8
 8084a10:	9007      	str	r0, [sp, #28]
 8084a12:	4618      	mov	r0, r3
 8084a14:	9303      	str	r3, [sp, #12]
 8084a16:	f006 fcd0 	bl	808b3ba <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 8084a1a:	1b75      	subs	r5, r6, r5
    *p++ = 0x01;
 8084a1c:	f105 39ff 	add.w	r9, r5, #4294967295
 8084a20:	2201      	movs	r2, #1
 8084a22:	4425      	add	r5, r4
 8084a24:	44a1      	add	r9, r4
 8084a26:	f805 2c02 	strb.w	r2, [r5, #-2]
    memcpy( p, salt, slen );
 8084a2a:	a90c      	add	r1, sp, #48	; 0x30
 8084a2c:	463a      	mov	r2, r7
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084a2e:	9006      	str	r0, [sp, #24]
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;

    mbedtls_md_init( &md_ctx );
 8084a30:	ad09      	add	r5, sp, #36	; 0x24

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
 8084a32:	4648      	mov	r0, r9
 8084a34:	f00e fb33 	bl	809309e <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
 8084a38:	4628      	mov	r0, r5
 8084a3a:	f003 f871 	bl	8087b20 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8084a3e:	9b07      	ldr	r3, [sp, #28]
 8084a40:	4659      	mov	r1, fp
 8084a42:	461a      	mov	r2, r3
 8084a44:	4628      	mov	r0, r5
 8084a46:	f003 f891 	bl	8087b6c <mbedtls_md_setup>
 8084a4a:	4602      	mov	r2, r0
 8084a4c:	2800      	cmp	r0, #0
 8084a4e:	d14a      	bne.n	8084ae6 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 8084a50:	4628      	mov	r0, r5
 8084a52:	f003 f8ad 	bl	8087bb0 <mbedtls_md_starts>
 8084a56:	4602      	mov	r2, r0
 8084a58:	2800      	cmp	r0, #0
 8084a5a:	d144      	bne.n	8084ae6 <mbedtls_rsa_rsassa_pss_sign+0x14e>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
 8084a5c:	eb09 0b07 	add.w	fp, r9, r7
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 8084a60:	2208      	movs	r2, #8
 8084a62:	4659      	mov	r1, fp
 8084a64:	4628      	mov	r0, r5
 8084a66:	f003 f8ad 	bl	8087bc4 <mbedtls_md_update>
 8084a6a:	4602      	mov	r2, r0
 8084a6c:	2800      	cmp	r0, #0
 8084a6e:	d13a      	bne.n	8084ae6 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 8084a70:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8084a72:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8084a74:	4628      	mov	r0, r5
 8084a76:	f003 f8a5 	bl	8087bc4 <mbedtls_md_update>
 8084a7a:	4602      	mov	r2, r0
 8084a7c:	bb98      	cbnz	r0, 8084ae6 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 8084a7e:	463a      	mov	r2, r7
 8084a80:	a90c      	add	r1, sp, #48	; 0x30
 8084a82:	4628      	mov	r0, r5
 8084a84:	f003 f89e 	bl	8087bc4 <mbedtls_md_update>
 8084a88:	4602      	mov	r2, r0
 8084a8a:	bb60      	cbnz	r0, 8084ae6 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 8084a8c:	4659      	mov	r1, fp
 8084a8e:	4628      	mov	r0, r5
 8084a90:	f003 f8a2 	bl	8087bd8 <mbedtls_md_finish>
 8084a94:	4602      	mov	r2, r0
 8084a96:	bb30      	cbnz	r0, 8084ae6 <mbedtls_rsa_rsassa_pss_sign+0x14e>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 8084a98:	9b06      	ldr	r3, [sp, #24]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 8084a9a:	1e71      	subs	r1, r6, #1
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 8084a9c:	3b01      	subs	r3, #1
 8084a9e:	f013 0f07 	tst.w	r3, #7
 8084aa2:	bf0c      	ite	eq
 8084aa4:	2001      	moveq	r0, #1
 8084aa6:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 8084aa8:	1bc9      	subs	r1, r1, r7
 8084aaa:	465a      	mov	r2, fp
 8084aac:	1a09      	subs	r1, r1, r0
 8084aae:	9500      	str	r5, [sp, #0]
 8084ab0:	463b      	mov	r3, r7
 8084ab2:	4420      	add	r0, r4
 8084ab4:	f7ff f820 	bl	8083af8 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084ab8:	4602      	mov	r2, r0
 8084aba:	b9a0      	cbnz	r0, 8084ae6 <mbedtls_rsa_rsassa_pss_sign+0x14e>
 8084abc:	9006      	str	r0, [sp, #24]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084abe:	9803      	ldr	r0, [sp, #12]
 8084ac0:	f006 fc7b 	bl	808b3ba <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8084ac4:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 8084ac8:	7823      	ldrb	r3, [r4, #0]
 8084aca:	3001      	adds	r0, #1
 8084acc:	26ff      	movs	r6, #255	; 0xff
 8084ace:	fa46 f000 	asr.w	r0, r6, r0
 8084ad2:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
 8084ad4:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8084ad6:	7020      	strb	r0, [r4, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_zeroize( salt, sizeof( salt ) );
 8084ad8:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
 8084ada:	f809 3017 	strb.w	r3, [r9, r7, lsl #1]

    mbedtls_zeroize( salt, sizeof( salt ) );
 8084ade:	a80c      	add	r0, sp, #48	; 0x30
 8084ae0:	f7ff f802 	bl	8083ae8 <_ZL15mbedtls_zeroizePvj>
 8084ae4:	9a06      	ldr	r2, [sp, #24]

exit:
    mbedtls_md_free( &md_ctx );
 8084ae6:	4628      	mov	r0, r5
 8084ae8:	9203      	str	r2, [sp, #12]
 8084aea:	f003 f81e 	bl	8087b2a <mbedtls_md_free>

    if( ret != 0 )
 8084aee:	9a03      	ldr	r2, [sp, #12]
 8084af0:	b97a      	cbnz	r2, 8084b12 <mbedtls_rsa_rsassa_pss_sign+0x17a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 8084af2:	9b05      	ldr	r3, [sp, #20]
 8084af4:	b92b      	cbnz	r3, 8084b02 <mbedtls_rsa_rsassa_pss_sign+0x16a>
 8084af6:	4622      	mov	r2, r4
 8084af8:	4621      	mov	r1, r4
 8084afa:	4640      	mov	r0, r8
 8084afc:	f7ff faa8 	bl	8084050 <mbedtls_rsa_public>
 8084b00:	e008      	b.n	8084b14 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 8084b02:	9400      	str	r4, [sp, #0]
 8084b04:	4623      	mov	r3, r4
 8084b06:	9a04      	ldr	r2, [sp, #16]
 8084b08:	4651      	mov	r1, sl
 8084b0a:	4640      	mov	r0, r8
 8084b0c:	f7ff fae2 	bl	80840d4 <mbedtls_rsa_private>
 8084b10:	e000      	b.n	8084b14 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 8084b12:	4610      	mov	r0, r2
}
 8084b14:	b01d      	add	sp, #116	; 0x74
 8084b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084b1a:	bf00      	nop
 8084b1c:	ffffbf80 	.word	0xffffbf80

08084b20 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8084b20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084b24:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8084b26:	4689      	mov	r9, r1
 8084b28:	a90b      	add	r1, sp, #44	; 0x2c
 8084b2a:	4605      	mov	r5, r0
 8084b2c:	4692      	mov	sl, r2
 8084b2e:	c986      	ldmia	r1, {r1, r2, r7}
 8084b30:	461c      	mov	r4, r3
 8084b32:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084b36:	d103      	bne.n	8084b40 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 8084b38:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8084b3c:	2b00      	cmp	r3, #0
 8084b3e:	d14b      	bne.n	8084bd8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 8084b40:	9700      	str	r7, [sp, #0]
 8084b42:	686b      	ldr	r3, [r5, #4]
 8084b44:	f7ff f82a 	bl	8083b9c <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 8084b48:	2800      	cmp	r0, #0
 8084b4a:	d149      	bne.n	8084be0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 8084b4c:	b93c      	cbnz	r4, 8084b5e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8084b4e:	463a      	mov	r2, r7
 8084b50:	4639      	mov	r1, r7
 8084b52:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8084b54:	b002      	add	sp, #8
 8084b56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8084b5a:	f7ff ba79 	b.w	8084050 <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 8084b5e:	686c      	ldr	r4, [r5, #4]
 8084b60:	2001      	movs	r0, #1
 8084b62:	4621      	mov	r1, r4
 8084b64:	f00e fa76 	bl	8093054 <calloc>
    if( sig_try == NULL )
 8084b68:	4606      	mov	r6, r0
 8084b6a:	b3b8      	cbz	r0, 8084bdc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 8084b6c:	4621      	mov	r1, r4
 8084b6e:	2001      	movs	r0, #1
 8084b70:	f00e fa70 	bl	8093054 <calloc>
    if( verif == NULL )
 8084b74:	4680      	mov	r8, r0
 8084b76:	b918      	cbnz	r0, 8084b80 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
 8084b78:	4630      	mov	r0, r6
 8084b7a:	f00b ffab 	bl	8090ad4 <free>
 8084b7e:	e02d      	b.n	8084bdc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 8084b80:	9600      	str	r6, [sp, #0]
 8084b82:	463b      	mov	r3, r7
 8084b84:	4652      	mov	r2, sl
 8084b86:	4649      	mov	r1, r9
 8084b88:	4628      	mov	r0, r5
 8084b8a:	f7ff faa3 	bl	80840d4 <mbedtls_rsa_private>
 8084b8e:	4604      	mov	r4, r0
 8084b90:	b9d0      	cbnz	r0, 8084bc8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 8084b92:	4642      	mov	r2, r8
 8084b94:	4631      	mov	r1, r6
 8084b96:	4628      	mov	r0, r5
 8084b98:	f7ff fa5a 	bl	8084050 <mbedtls_rsa_public>
 8084b9c:	4604      	mov	r4, r0
 8084b9e:	b998      	cbnz	r0, 8084bc8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
 8084ba0:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
 8084ba2:	4602      	mov	r2, r0
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8084ba4:	686d      	ldr	r5, [r5, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8084ba6:	42aa      	cmp	r2, r5
 8084ba8:	d007      	beq.n	8084bba <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
 8084baa:	f818 0002 	ldrb.w	r0, [r8, r2]
 8084bae:	5cb9      	ldrb	r1, [r7, r2]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8084bb0:	3201      	adds	r2, #1
        diff |= A[i] ^ B[i];
 8084bb2:	4041      	eors	r1, r0
 8084bb4:	430b      	orrs	r3, r1
 8084bb6:	b2db      	uxtb	r3, r3
 8084bb8:	e7f5      	b.n	8084ba6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8084bba:	b923      	cbnz	r3, 8084bc6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
 8084bbc:	4631      	mov	r1, r6
 8084bbe:	4638      	mov	r0, r7
 8084bc0:	f00e fa6d 	bl	809309e <memcpy>
 8084bc4:	e000      	b.n	8084bc8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8084bc6:	4c08      	ldr	r4, [pc, #32]	; (8084be8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
 8084bc8:	4630      	mov	r0, r6
 8084bca:	f00b ff83 	bl	8090ad4 <free>
    mbedtls_free( verif );
 8084bce:	4640      	mov	r0, r8
 8084bd0:	f00b ff80 	bl	8090ad4 <free>

    return( ret );
 8084bd4:	4620      	mov	r0, r4
 8084bd6:	e003      	b.n	8084be0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
{
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084bd8:	4804      	ldr	r0, [pc, #16]	; (8084bec <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
 8084bda:	e001      	b.n	8084be0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8084bdc:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8084be0:	b002      	add	sp, #8
 8084be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084be6:	bf00      	nop
 8084be8:	ffffbd00 	.word	0xffffbd00
 8084bec:	ffffbf80 	.word	0xffffbf80

08084bf0 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8084bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8084bf2:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8084bf6:	ad06      	add	r5, sp, #24
 8084bf8:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8084bfc:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 8084bfe:	f1be 0f00 	cmp.w	lr, #0
 8084c02:	d00a      	beq.n	8084c1a <mbedtls_rsa_pkcs1_sign+0x2a>
 8084c04:	f1be 0f01 	cmp.w	lr, #1
 8084c08:	d10f      	bne.n	8084c2a <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 8084c0a:	9708      	str	r7, [sp, #32]
 8084c0c:	9607      	str	r6, [sp, #28]
 8084c0e:	9506      	str	r5, [sp, #24]
 8084c10:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084c12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 8084c16:	f7ff bebf 	b.w	8084998 <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 8084c1a:	9708      	str	r7, [sp, #32]
 8084c1c:	9607      	str	r6, [sp, #28]
 8084c1e:	9506      	str	r5, [sp, #24]
 8084c20:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084c22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 8084c26:	f7ff bf7b 	b.w	8084b20 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084c2a:	4801      	ldr	r0, [pc, #4]	; (8084c30 <mbedtls_rsa_pkcs1_sign+0x40>)
 8084c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084c2e:	bf00      	nop
 8084c30:	ffffbf00 	.word	0xffffbf00

08084c34 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8084c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084c38:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8084c3a:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 8084c3e:	4605      	mov	r5, r0
 8084c40:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084c44:	d105      	bne.n	8084c52 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 8084c46:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8084c4a:	2801      	cmp	r0, #1
 8084c4c:	d001      	beq.n	8084c52 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084c4e:	4861      	ldr	r0, [pc, #388]	; (8084dd4 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
 8084c50:	e0bb      	b.n	8084dca <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
 8084c52:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
 8084c54:	f1a7 0010 	sub.w	r0, r7, #16
 8084c58:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 8084c5c:	d8f7      	bhi.n	8084c4e <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
 8084c5e:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 8084c60:	b933      	cbnz	r3, 8084c70 <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
 8084c62:	4632      	mov	r2, r6
 8084c64:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
 8084c68:	4628      	mov	r0, r5
 8084c6a:	f7ff f9f1 	bl	8084050 <mbedtls_rsa_public>
 8084c6e:	e005      	b.n	8084c7c <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
 8084c70:	9600      	str	r6, [sp, #0]
 8084c72:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 8084c76:	4628      	mov	r0, r5
 8084c78:	f7ff fa2c 	bl	80840d4 <mbedtls_rsa_private>

    if( ret != 0 )
 8084c7c:	2800      	cmp	r0, #0
 8084c7e:	f040 80a4 	bne.w	8084dca <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
 8084c82:	1e7c      	subs	r4, r7, #1
 8084c84:	5d33      	ldrb	r3, [r6, r4]
 8084c86:	2bbc      	cmp	r3, #188	; 0xbc
 8084c88:	f040 809e 	bne.w	8084dc8 <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
 8084c8c:	f1b8 0f00 	cmp.w	r8, #0
 8084c90:	d008      	beq.n	8084ca4 <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 8084c92:	4640      	mov	r0, r8
 8084c94:	f002 ff38 	bl	8087b08 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8084c98:	2800      	cmp	r0, #0
 8084c9a:	d0d8      	beq.n	8084c4e <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8084c9c:	f003 f878 	bl	8087d90 <mbedtls_md_get_size>
 8084ca0:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 8084ca4:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
 8084ca8:	f002 ff2e 	bl	8087b08 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8084cac:	4681      	mov	r9, r0
 8084cae:	2800      	cmp	r0, #0
 8084cb0:	d0cd      	beq.n	8084c4e <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8084cb2:	f003 f86d 	bl	8087d90 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
 8084cb6:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8084cb8:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084cba:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
 8084cbe:	9303      	str	r3, [sp, #12]
 8084cc0:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084cc2:	f006 fb7a 	bl	808b3ba <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8084cc6:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084cc8:	f100 38ff 	add.w	r8, r0, #4294967295

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8084ccc:	7832      	ldrb	r2, [r6, #0]
 8084cce:	f1c3 0308 	rsb	r3, r3, #8
 8084cd2:	4443      	add	r3, r8
 8084cd4:	fa52 f303 	asrs.w	r3, r2, r3
 8084cd8:	d1b9      	bne.n	8084c4e <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
 8084cda:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
 8084cde:	bf08      	it	eq
 8084ce0:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
 8084ce2:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
 8084ce6:	bf0c      	ite	eq
 8084ce8:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
 8084cec:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
 8084cee:	429f      	cmp	r7, r3
 8084cf0:	d3ad      	bcc.n	8084c4e <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
 8084cf2:	ac05      	add	r4, sp, #20
 8084cf4:	4620      	mov	r0, r4
 8084cf6:	f002 ff13 	bl	8087b20 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8084cfa:	2200      	movs	r2, #0
 8084cfc:	4649      	mov	r1, r9
 8084cfe:	4620      	mov	r0, r4
 8084d00:	f002 ff34 	bl	8087b6c <mbedtls_md_setup>
 8084d04:	4683      	mov	fp, r0
 8084d06:	2800      	cmp	r0, #0
 8084d08:	d159      	bne.n	8084dbe <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
 8084d0a:	ea6f 010a 	mvn.w	r1, sl
 8084d0e:	4439      	add	r1, r7
 8084d10:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 8084d14:	9400      	str	r4, [sp, #0]
 8084d16:	4653      	mov	r3, sl
 8084d18:	464a      	mov	r2, r9
 8084d1a:	4628      	mov	r0, r5
 8084d1c:	f7fe feec 	bl	8083af8 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
 8084d20:	4683      	mov	fp, r0
 8084d22:	2800      	cmp	r0, #0
 8084d24:	d14b      	bne.n	8084dbe <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 8084d26:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
 8084d2a:	7833      	ldrb	r3, [r6, #0]
 8084d2c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8084d30:	fa48 f707 	asr.w	r7, r8, r7
 8084d34:	401f      	ands	r7, r3
 8084d36:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
 8084d38:	f109 32ff 	add.w	r2, r9, #4294967295
 8084d3c:	4295      	cmp	r5, r2
 8084d3e:	4629      	mov	r1, r5
 8084d40:	d203      	bcs.n	8084d4a <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
 8084d42:	780b      	ldrb	r3, [r1, #0]
 8084d44:	3501      	adds	r5, #1
 8084d46:	2b00      	cmp	r3, #0
 8084d48:	d0f8      	beq.n	8084d3c <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
 8084d4a:	780b      	ldrb	r3, [r1, #0]
 8084d4c:	2b01      	cmp	r3, #1
 8084d4e:	d134      	bne.n	8084dba <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8084d50:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
 8084d54:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8084d56:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
 8084d58:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8084d5c:	d001      	beq.n	8084d62 <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
 8084d5e:	429e      	cmp	r6, r3
 8084d60:	d12b      	bne.n	8084dba <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
 8084d62:	4620      	mov	r0, r4
 8084d64:	f002 ff24 	bl	8087bb0 <mbedtls_md_starts>
    if ( ret != 0 )
 8084d68:	4683      	mov	fp, r0
 8084d6a:	bb40      	cbnz	r0, 8084dbe <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 8084d6c:	2208      	movs	r2, #8
 8084d6e:	a903      	add	r1, sp, #12
 8084d70:	4620      	mov	r0, r4
 8084d72:	f002 ff27 	bl	8087bc4 <mbedtls_md_update>
    if ( ret != 0 )
 8084d76:	4683      	mov	fp, r0
 8084d78:	bb08      	cbnz	r0, 8084dbe <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 8084d7a:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 8084d7e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
 8084d82:	4620      	mov	r0, r4
 8084d84:	f002 ff1e 	bl	8087bc4 <mbedtls_md_update>
    if ( ret != 0 )
 8084d88:	4683      	mov	fp, r0
 8084d8a:	b9c0      	cbnz	r0, 8084dbe <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 8084d8c:	4632      	mov	r2, r6
 8084d8e:	4629      	mov	r1, r5
 8084d90:	4620      	mov	r0, r4
 8084d92:	f002 ff17 	bl	8087bc4 <mbedtls_md_update>
    if ( ret != 0 )
 8084d96:	4683      	mov	fp, r0
 8084d98:	b988      	cbnz	r0, 8084dbe <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
 8084d9a:	a908      	add	r1, sp, #32
 8084d9c:	4620      	mov	r0, r4
 8084d9e:	f002 ff1b 	bl	8087bd8 <mbedtls_md_finish>
    if ( ret != 0 )
 8084da2:	4683      	mov	fp, r0
 8084da4:	b958      	cbnz	r0, 8084dbe <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
 8084da6:	4652      	mov	r2, sl
 8084da8:	a908      	add	r1, sp, #32
 8084daa:	4648      	mov	r0, r9
 8084dac:	f00e f968 	bl	8093080 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8084db0:	4a09      	ldr	r2, [pc, #36]	; (8084dd8 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
 8084db2:	2800      	cmp	r0, #0
 8084db4:	bf18      	it	ne
 8084db6:	4693      	movne	fp, r2
 8084db8:	e001      	b.n	8084dbe <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8084dba:	f8df b020 	ldr.w	fp, [pc, #32]	; 8084ddc <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
 8084dbe:	4620      	mov	r0, r4
 8084dc0:	f002 feb3 	bl	8087b2a <mbedtls_md_free>

    return( ret );
 8084dc4:	4658      	mov	r0, fp
 8084dc6:	e000      	b.n	8084dca <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8084dc8:	4804      	ldr	r0, [pc, #16]	; (8084ddc <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
 8084dca:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 8084dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084dd2:	bf00      	nop
 8084dd4:	ffffbf80 	.word	0xffffbf80
 8084dd8:	ffffbc80 	.word	0xffffbc80
 8084ddc:	ffffbf00 	.word	0xffffbf00

08084de0 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 8084de0:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 8084de2:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 8084de6:	b086      	sub	sp, #24
 8084de8:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 8084dec:	b10c      	cbz	r4, 8084df2 <mbedtls_rsa_rsassa_pss_verify+0x12>
 8084dee:	b2e4      	uxtb	r4, r4
 8084df0:	e000      	b.n	8084df4 <mbedtls_rsa_rsassa_pss_verify+0x14>
 8084df2:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
 8084df4:	9403      	str	r4, [sp, #12]
 8084df6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8084df8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8084dfa:	9402      	str	r4, [sp, #8]
 8084dfc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8084dfe:	9605      	str	r6, [sp, #20]
 8084e00:	f04f 36ff 	mov.w	r6, #4294967295
 8084e04:	9604      	str	r6, [sp, #16]
 8084e06:	9401      	str	r4, [sp, #4]
 8084e08:	9500      	str	r5, [sp, #0]
 8084e0a:	f7ff ff13 	bl	8084c34 <mbedtls_rsa_rsassa_pss_verify_ext>

}
 8084e0e:	b006      	add	sp, #24
 8084e10:	bd70      	pop	{r4, r5, r6, pc}
	...

08084e14 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8084e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084e18:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8084e1a:	4680      	mov	r8, r0
 8084e1c:	468a      	mov	sl, r1
 8084e1e:	4693      	mov	fp, r2
 8084e20:	4699      	mov	r9, r3
    int ret = 0;
    const size_t sig_len = ctx->len;
 8084e22:	6845      	ldr	r5, [r0, #4]
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084e24:	d102      	bne.n	8084e2c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
 8084e26:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8084e2a:	b9eb      	cbnz	r3, 8084e68 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
 8084e2c:	4629      	mov	r1, r5
 8084e2e:	2001      	movs	r0, #1
 8084e30:	f00e f910 	bl	8093054 <calloc>
 8084e34:	4606      	mov	r6, r0
 8084e36:	b1c8      	cbz	r0, 8084e6c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
 8084e38:	4629      	mov	r1, r5
 8084e3a:	2001      	movs	r0, #1
 8084e3c:	f00e f90a 	bl	8093054 <calloc>
 8084e40:	4607      	mov	r7, r0
 8084e42:	b9c0      	cbnz	r0, 8084e76 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8084e44:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_zeroize( encoded, sig_len );
 8084e48:	4630      	mov	r0, r6
 8084e4a:	4629      	mov	r1, r5
 8084e4c:	f7fe fe4c 	bl	8083ae8 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded );
 8084e50:	4630      	mov	r0, r6
 8084e52:	f00b fe3f 	bl	8090ad4 <free>
    }

    if( encoded_expected != NULL )
 8084e56:	b167      	cbz	r7, 8084e72 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
 8084e58:	4638      	mov	r0, r7
 8084e5a:	4629      	mov	r1, r5
 8084e5c:	f7fe fe44 	bl	8083ae8 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded_expected );
 8084e60:	4638      	mov	r0, r7
 8084e62:	f00b fe37 	bl	8090ad4 <free>
 8084e66:	e004      	b.n	8084e72 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084e68:	481b      	ldr	r0, [pc, #108]	; (8084ed8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 8084e6a:	e031      	b.n	8084ed0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8084e6c:	f06f 000f 	mvn.w	r0, #15
 8084e70:	e02e      	b.n	8084ed0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
 8084e72:	4620      	mov	r0, r4
 8084e74:	e02c      	b.n	8084ed0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 8084e76:	9000      	str	r0, [sp, #0]
 8084e78:	462b      	mov	r3, r5
 8084e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8084e7c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8084e7e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8084e82:	f7fe fe8b 	bl	8083b9c <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 8084e86:	4604      	mov	r4, r0
 8084e88:	2800      	cmp	r0, #0
 8084e8a:	d1dd      	bne.n	8084e48 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8084e8c:	f1b9 0f00 	cmp.w	r9, #0
 8084e90:	d105      	bne.n	8084e9e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
 8084e92:	4632      	mov	r2, r6
 8084e94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8084e96:	4640      	mov	r0, r8
 8084e98:	f7ff f8da 	bl	8084050 <mbedtls_rsa_public>
 8084e9c:	e006      	b.n	8084eac <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
 8084e9e:	9600      	str	r6, [sp, #0]
 8084ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8084ea2:	465a      	mov	r2, fp
 8084ea4:	4651      	mov	r1, sl
 8084ea6:	4640      	mov	r0, r8
 8084ea8:	f7ff f914 	bl	80840d4 <mbedtls_rsa_private>
 8084eac:	4604      	mov	r4, r0
    if( ret != 0 )
 8084eae:	2800      	cmp	r0, #0
 8084eb0:	d1ca      	bne.n	8084e48 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 8084eb2:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8084eb4:	429d      	cmp	r5, r3
 8084eb6:	d006      	beq.n	8084ec6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
 8084eb8:	5cf0      	ldrb	r0, [r6, r3]
 8084eba:	5cfa      	ldrb	r2, [r7, r3]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8084ebc:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 8084ebe:	4050      	eors	r0, r2
 8084ec0:	4304      	orrs	r4, r0
 8084ec2:	b2e4      	uxtb	r4, r4
 8084ec4:	e7f6      	b.n	8084eb4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8084ec6:	2c00      	cmp	r4, #0
 8084ec8:	4c04      	ldr	r4, [pc, #16]	; (8084edc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
 8084eca:	bf08      	it	eq
 8084ecc:	2400      	moveq	r4, #0
 8084ece:	e7bb      	b.n	8084e48 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
 8084ed0:	b003      	add	sp, #12
 8084ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084ed6:	bf00      	nop
 8084ed8:	ffffbf80 	.word	0xffffbf80
 8084edc:	ffffbc80 	.word	0xffffbc80

08084ee0 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8084ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8084ee2:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8084ee6:	ad06      	add	r5, sp, #24
 8084ee8:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8084eec:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 8084eee:	f1be 0f00 	cmp.w	lr, #0
 8084ef2:	d00a      	beq.n	8084f0a <mbedtls_rsa_pkcs1_verify+0x2a>
 8084ef4:	f1be 0f01 	cmp.w	lr, #1
 8084ef8:	d10f      	bne.n	8084f1a <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 8084efa:	9708      	str	r7, [sp, #32]
 8084efc:	9607      	str	r6, [sp, #28]
 8084efe:	9506      	str	r5, [sp, #24]
 8084f00:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084f02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 8084f06:	f7ff bf6b 	b.w	8084de0 <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 8084f0a:	9708      	str	r7, [sp, #32]
 8084f0c:	9607      	str	r6, [sp, #28]
 8084f0e:	9506      	str	r5, [sp, #24]
 8084f10:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084f12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 8084f16:	f7ff bf7d 	b.w	8084e14 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084f1a:	4801      	ldr	r0, [pc, #4]	; (8084f20 <mbedtls_rsa_pkcs1_verify+0x40>)
 8084f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084f1e:	bf00      	nop
 8084f20:	ffffbf00 	.word	0xffffbf00

08084f24 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8084f24:	b510      	push	{r4, lr}
 8084f26:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 8084f28:	308c      	adds	r0, #140	; 0x8c
 8084f2a:	f006 f994 	bl	808b256 <mbedtls_mpi_free>
 8084f2e:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8084f32:	f006 f990 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 8084f36:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8084f3a:	f006 f98c 	bl	808b256 <mbedtls_mpi_free>
 8084f3e:	f104 0020 	add.w	r0, r4, #32
 8084f42:	f006 f988 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 8084f46:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8084f4a:	f006 f984 	bl	808b256 <mbedtls_mpi_free>
 8084f4e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8084f52:	f006 f980 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 8084f56:	f104 0014 	add.w	r0, r4, #20
 8084f5a:	f006 f97c 	bl	808b256 <mbedtls_mpi_free>
 8084f5e:	f104 0008 	add.w	r0, r4, #8
 8084f62:	f006 f978 	bl	808b256 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 8084f66:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8084f6a:	f006 f974 	bl	808b256 <mbedtls_mpi_free>
 8084f6e:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8084f72:	f006 f970 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 8084f76:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8084f7a:	f006 f96c 	bl	808b256 <mbedtls_mpi_free>
 8084f7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8084f82:	f006 f968 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 8084f86:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8084f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
 8084f8e:	f006 b962 	b.w	808b256 <mbedtls_mpi_free>

08084f92 <mbedtls_hardclock_poll>:
#endif

#if defined(MBEDTLS_TIMING_C)
int mbedtls_hardclock_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
 8084f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8084f94:	461c      	mov	r4, r3
 8084f96:	460d      	mov	r5, r1
 8084f98:	4616      	mov	r6, r2
    unsigned long timer = mbedtls_timing_hardclock();
 8084f9a:	f001 f9e3 	bl	8086364 <mbedtls_timing_hardclock>
    ((void) data);
    *olen = 0;

    if( len < sizeof(unsigned long) )
 8084f9e:	2e03      	cmp	r6, #3

#if defined(MBEDTLS_TIMING_C)
int mbedtls_hardclock_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
    unsigned long timer = mbedtls_timing_hardclock();
 8084fa0:	9001      	str	r0, [sp, #4]
    *olen = 0;

    if( len < sizeof(unsigned long) )
        return( 0 );

    memcpy( output, &timer, sizeof(unsigned long) );
 8084fa2:	bf88      	it	hi
 8084fa4:	9801      	ldrhi	r0, [sp, #4]
int mbedtls_hardclock_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
    unsigned long timer = mbedtls_timing_hardclock();
    ((void) data);
    *olen = 0;
 8084fa6:	f04f 0300 	mov.w	r3, #0
 8084faa:	6023      	str	r3, [r4, #0]

    if( len < sizeof(unsigned long) )
        return( 0 );

    memcpy( output, &timer, sizeof(unsigned long) );
 8084fac:	bf84      	itt	hi
 8084fae:	6028      	strhi	r0, [r5, #0]
    *olen = sizeof(unsigned long);
 8084fb0:	2304      	movhi	r3, #4

    return( 0 );
}
 8084fb2:	f04f 0000 	mov.w	r0, #0

    if( len < sizeof(unsigned long) )
        return( 0 );

    memcpy( output, &timer, sizeof(unsigned long) );
    *olen = sizeof(unsigned long);
 8084fb6:	bf88      	it	hi
 8084fb8:	6023      	strhi	r3, [r4, #0]

    return( 0 );
}
 8084fba:	b002      	add	sp, #8
 8084fbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08084fc0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8084fc0:	b538      	push	{r3, r4, r5, lr}
 8084fc2:	4605      	mov	r5, r0
 8084fc4:	b160      	cbz	r0, 8084fe0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
 8084fc6:	4c08      	ldr	r4, [pc, #32]	; (8084fe8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
 8084fc8:	6820      	ldr	r0, [r4, #0]
 8084fca:	b158      	cbz	r0, 8084fe4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
 8084fcc:	6862      	ldr	r2, [r4, #4]
 8084fce:	686b      	ldr	r3, [r5, #4]
 8084fd0:	429a      	cmp	r2, r3
 8084fd2:	d103      	bne.n	8084fdc <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
 8084fd4:	68a9      	ldr	r1, [r5, #8]
 8084fd6:	f00e f853 	bl	8093080 <memcmp>
 8084fda:	b110      	cbz	r0, 8084fe2 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
 8084fdc:	3414      	adds	r4, #20
 8084fde:	e7f3      	b.n	8084fc8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
 8084fe0:	bd38      	pop	{r3, r4, r5, pc}
 8084fe2:	4620      	mov	r0, r4
 8084fe4:	bd38      	pop	{r3, r4, r5, pc}
 8084fe6:	bf00      	nop
 8084fe8:	08093fac 	.word	0x08093fac

08084fec <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8084fec:	b570      	push	{r4, r5, r6, lr}
 8084fee:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8084ff0:	4605      	mov	r5, r0
 8084ff2:	b160      	cbz	r0, 808500e <mbedtls_oid_get_attr_short_name+0x22>
 8084ff4:	4c09      	ldr	r4, [pc, #36]	; (808501c <mbedtls_oid_get_attr_short_name+0x30>)
 8084ff6:	6820      	ldr	r0, [r4, #0]
 8084ff8:	b148      	cbz	r0, 808500e <mbedtls_oid_get_attr_short_name+0x22>
 8084ffa:	6862      	ldr	r2, [r4, #4]
 8084ffc:	686b      	ldr	r3, [r5, #4]
 8084ffe:	429a      	cmp	r2, r3
 8085000:	d103      	bne.n	808500a <mbedtls_oid_get_attr_short_name+0x1e>
 8085002:	68a9      	ldr	r1, [r5, #8]
 8085004:	f00e f83c 	bl	8093080 <memcmp>
 8085008:	b120      	cbz	r0, 8085014 <mbedtls_oid_get_attr_short_name+0x28>
 808500a:	3414      	adds	r4, #20
 808500c:	e7f3      	b.n	8084ff6 <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 808500e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8085012:	bd70      	pop	{r4, r5, r6, pc}
 8085014:	6923      	ldr	r3, [r4, #16]
 8085016:	6033      	str	r3, [r6, #0]
 8085018:	bd70      	pop	{r4, r5, r6, pc}
 808501a:	bf00      	nop
 808501c:	0809349c 	.word	0x0809349c

08085020 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8085020:	b570      	push	{r4, r5, r6, lr}
 8085022:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8085024:	4605      	mov	r5, r0
 8085026:	b160      	cbz	r0, 8085042 <mbedtls_oid_get_x509_ext_type+0x22>
 8085028:	4c09      	ldr	r4, [pc, #36]	; (8085050 <mbedtls_oid_get_x509_ext_type+0x30>)
 808502a:	6820      	ldr	r0, [r4, #0]
 808502c:	b148      	cbz	r0, 8085042 <mbedtls_oid_get_x509_ext_type+0x22>
 808502e:	6862      	ldr	r2, [r4, #4]
 8085030:	686b      	ldr	r3, [r5, #4]
 8085032:	429a      	cmp	r2, r3
 8085034:	d103      	bne.n	808503e <mbedtls_oid_get_x509_ext_type+0x1e>
 8085036:	68a9      	ldr	r1, [r5, #8]
 8085038:	f00e f822 	bl	8093080 <memcmp>
 808503c:	b120      	cbz	r0, 8085048 <mbedtls_oid_get_x509_ext_type+0x28>
 808503e:	3414      	adds	r4, #20
 8085040:	e7f3      	b.n	808502a <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8085042:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8085046:	bd70      	pop	{r4, r5, r6, pc}
 8085048:	6923      	ldr	r3, [r4, #16]
 808504a:	6033      	str	r3, [r6, #0]
 808504c:	bd70      	pop	{r4, r5, r6, pc}
 808504e:	bf00      	nop
 8085050:	080940c4 	.word	0x080940c4

08085054 <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8085054:	b570      	push	{r4, r5, r6, lr}
 8085056:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8085058:	4605      	mov	r5, r0
 808505a:	b160      	cbz	r0, 8085076 <mbedtls_oid_get_extended_key_usage+0x22>
 808505c:	4c09      	ldr	r4, [pc, #36]	; (8085084 <mbedtls_oid_get_extended_key_usage+0x30>)
 808505e:	6820      	ldr	r0, [r4, #0]
 8085060:	b148      	cbz	r0, 8085076 <mbedtls_oid_get_extended_key_usage+0x22>
 8085062:	6862      	ldr	r2, [r4, #4]
 8085064:	686b      	ldr	r3, [r5, #4]
 8085066:	429a      	cmp	r2, r3
 8085068:	d103      	bne.n	8085072 <mbedtls_oid_get_extended_key_usage+0x1e>
 808506a:	68a9      	ldr	r1, [r5, #8]
 808506c:	f00e f808 	bl	8093080 <memcmp>
 8085070:	b120      	cbz	r0, 808507c <mbedtls_oid_get_extended_key_usage+0x28>
 8085072:	3410      	adds	r4, #16
 8085074:	e7f3      	b.n	808505e <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8085076:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 808507a:	bd70      	pop	{r4, r5, r6, pc}
 808507c:	68e3      	ldr	r3, [r4, #12]
 808507e:	6033      	str	r3, [r6, #0]
 8085080:	bd70      	pop	{r4, r5, r6, pc}
 8085082:	bf00      	nop
 8085084:	0809362c 	.word	0x0809362c

08085088 <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8085088:	b510      	push	{r4, lr}
 808508a:	460c      	mov	r4, r1
 808508c:	f7ff ff98 	bl	8084fc0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 8085090:	b118      	cbz	r0, 808509a <mbedtls_oid_get_sig_alg_desc+0x12>
 8085092:	68c3      	ldr	r3, [r0, #12]
 8085094:	2000      	movs	r0, #0
 8085096:	6023      	str	r3, [r4, #0]
 8085098:	bd10      	pop	{r4, pc}
 808509a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 808509e:	bd10      	pop	{r4, pc}

080850a0 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 80850a0:	b538      	push	{r3, r4, r5, lr}
 80850a2:	460d      	mov	r5, r1
 80850a4:	4614      	mov	r4, r2
 80850a6:	f7ff ff8b 	bl	8084fc0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 80850aa:	b128      	cbz	r0, 80850b8 <mbedtls_oid_get_sig_alg+0x18>
 80850ac:	7c03      	ldrb	r3, [r0, #16]
 80850ae:	702b      	strb	r3, [r5, #0]
 80850b0:	7c43      	ldrb	r3, [r0, #17]
 80850b2:	2000      	movs	r0, #0
 80850b4:	7023      	strb	r3, [r4, #0]
 80850b6:	bd38      	pop	{r3, r4, r5, pc}
 80850b8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80850bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080850c0 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80850c0:	b570      	push	{r4, r5, r6, lr}
 80850c2:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80850c4:	4605      	mov	r5, r0
 80850c6:	b160      	cbz	r0, 80850e2 <mbedtls_oid_get_pk_alg+0x22>
 80850c8:	4c09      	ldr	r4, [pc, #36]	; (80850f0 <mbedtls_oid_get_pk_alg+0x30>)
 80850ca:	6820      	ldr	r0, [r4, #0]
 80850cc:	b148      	cbz	r0, 80850e2 <mbedtls_oid_get_pk_alg+0x22>
 80850ce:	6862      	ldr	r2, [r4, #4]
 80850d0:	686b      	ldr	r3, [r5, #4]
 80850d2:	429a      	cmp	r2, r3
 80850d4:	d103      	bne.n	80850de <mbedtls_oid_get_pk_alg+0x1e>
 80850d6:	68a9      	ldr	r1, [r5, #8]
 80850d8:	f00d ffd2 	bl	8093080 <memcmp>
 80850dc:	b120      	cbz	r0, 80850e8 <mbedtls_oid_get_pk_alg+0x28>
 80850de:	3414      	adds	r4, #20
 80850e0:	e7f3      	b.n	80850ca <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80850e2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80850e6:	bd70      	pop	{r4, r5, r6, pc}
 80850e8:	7c23      	ldrb	r3, [r4, #16]
 80850ea:	7033      	strb	r3, [r6, #0]
 80850ec:	bd70      	pop	{r4, r5, r6, pc}
 80850ee:	bf00      	nop
 80850f0:	0809369c 	.word	0x0809369c

080850f4 <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 80850f4:	b570      	push	{r4, r5, r6, lr}
 80850f6:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 80850f8:	4605      	mov	r5, r0
 80850fa:	b160      	cbz	r0, 8085116 <mbedtls_oid_get_cipher_alg+0x22>
 80850fc:	4c09      	ldr	r4, [pc, #36]	; (8085124 <mbedtls_oid_get_cipher_alg+0x30>)
 80850fe:	6820      	ldr	r0, [r4, #0]
 8085100:	b148      	cbz	r0, 8085116 <mbedtls_oid_get_cipher_alg+0x22>
 8085102:	6862      	ldr	r2, [r4, #4]
 8085104:	686b      	ldr	r3, [r5, #4]
 8085106:	429a      	cmp	r2, r3
 8085108:	d103      	bne.n	8085112 <mbedtls_oid_get_cipher_alg+0x1e>
 808510a:	68a9      	ldr	r1, [r5, #8]
 808510c:	f00d ffb8 	bl	8093080 <memcmp>
 8085110:	b120      	cbz	r0, 808511c <mbedtls_oid_get_cipher_alg+0x28>
 8085112:	3414      	adds	r4, #20
 8085114:	e7f3      	b.n	80850fe <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 8085116:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 808511a:	bd70      	pop	{r4, r5, r6, pc}
 808511c:	7c23      	ldrb	r3, [r4, #16]
 808511e:	7033      	strb	r3, [r6, #0]
 8085120:	bd70      	pop	{r4, r5, r6, pc}
 8085122:	bf00      	nop
 8085124:	080936ec 	.word	0x080936ec

08085128 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8085128:	b530      	push	{r4, r5, lr}
 808512a:	4b08      	ldr	r3, [pc, #32]	; (808514c <mbedtls_oid_get_oid_by_md+0x24>)
 808512c:	681c      	ldr	r4, [r3, #0]
 808512e:	b14c      	cbz	r4, 8085144 <mbedtls_oid_get_oid_by_md+0x1c>
 8085130:	7c1d      	ldrb	r5, [r3, #16]
 8085132:	4285      	cmp	r5, r0
 8085134:	d104      	bne.n	8085140 <mbedtls_oid_get_oid_by_md+0x18>
 8085136:	600c      	str	r4, [r1, #0]
 8085138:	685b      	ldr	r3, [r3, #4]
 808513a:	2000      	movs	r0, #0
 808513c:	6013      	str	r3, [r2, #0]
 808513e:	bd30      	pop	{r4, r5, pc}
 8085140:	3314      	adds	r3, #20
 8085142:	e7f3      	b.n	808512c <mbedtls_oid_get_oid_by_md+0x4>
 8085144:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8085148:	bd30      	pop	{r4, r5, pc}
 808514a:	bf00      	nop
 808514c:	08093f34 	.word	0x08093f34

08085150 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 8085150:	b570      	push	{r4, r5, r6, lr}
 8085152:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 8085154:	4605      	mov	r5, r0
 8085156:	b160      	cbz	r0, 8085172 <mbedtls_oid_get_md_hmac+0x22>
 8085158:	4c09      	ldr	r4, [pc, #36]	; (8085180 <mbedtls_oid_get_md_hmac+0x30>)
 808515a:	6820      	ldr	r0, [r4, #0]
 808515c:	b148      	cbz	r0, 8085172 <mbedtls_oid_get_md_hmac+0x22>
 808515e:	6862      	ldr	r2, [r4, #4]
 8085160:	686b      	ldr	r3, [r5, #4]
 8085162:	429a      	cmp	r2, r3
 8085164:	d103      	bne.n	808516e <mbedtls_oid_get_md_hmac+0x1e>
 8085166:	68a9      	ldr	r1, [r5, #8]
 8085168:	f00d ff8a 	bl	8093080 <memcmp>
 808516c:	b120      	cbz	r0, 8085178 <mbedtls_oid_get_md_hmac+0x28>
 808516e:	3414      	adds	r4, #20
 8085170:	e7f3      	b.n	808515a <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 8085172:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8085176:	bd70      	pop	{r4, r5, r6, pc}
 8085178:	7c23      	ldrb	r3, [r4, #16]
 808517a:	7033      	strb	r3, [r6, #0]
 808517c:	bd70      	pop	{r4, r5, r6, pc}
 808517e:	bf00      	nop
 8085180:	0809404c 	.word	0x0809404c

08085184 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 8085184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085186:	460f      	mov	r7, r1
 8085188:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 808518a:	4605      	mov	r5, r0
 808518c:	b160      	cbz	r0, 80851a8 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 808518e:	4c0a      	ldr	r4, [pc, #40]	; (80851b8 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
 8085190:	6820      	ldr	r0, [r4, #0]
 8085192:	b148      	cbz	r0, 80851a8 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 8085194:	6862      	ldr	r2, [r4, #4]
 8085196:	686b      	ldr	r3, [r5, #4]
 8085198:	429a      	cmp	r2, r3
 808519a:	d103      	bne.n	80851a4 <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
 808519c:	68a9      	ldr	r1, [r5, #8]
 808519e:	f00d ff6f 	bl	8093080 <memcmp>
 80851a2:	b120      	cbz	r0, 80851ae <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
 80851a4:	3414      	adds	r4, #20
 80851a6:	e7f3      	b.n	8085190 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 80851a8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80851ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80851ae:	7c23      	ldrb	r3, [r4, #16]
 80851b0:	703b      	strb	r3, [r7, #0]
 80851b2:	7c63      	ldrb	r3, [r4, #17]
 80851b4:	7033      	strb	r3, [r6, #0]
 80851b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80851b8:	08093ef8 	.word	0x08093ef8

080851bc <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 80851bc:	225c      	movs	r2, #92	; 0x5c
 80851be:	2100      	movs	r1, #0
 80851c0:	f00d bf93 	b.w	80930ea <memset>

080851c4 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 80851c4:	b138      	cbz	r0, 80851d6 <mbedtls_sha1_free+0x12>
 80851c6:	f100 025c 	add.w	r2, r0, #92	; 0x5c

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80851ca:	2300      	movs	r3, #0
 80851cc:	4290      	cmp	r0, r2
 80851ce:	d002      	beq.n	80851d6 <mbedtls_sha1_free+0x12>
 80851d0:	7003      	strb	r3, [r0, #0]
 80851d2:	3001      	adds	r0, #1
 80851d4:	e7fa      	b.n	80851cc <mbedtls_sha1_free+0x8>
 80851d6:	4770      	bx	lr

080851d8 <mbedtls_sha1_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 80851d8:	b508      	push	{r3, lr}
    *dst = *src;
 80851da:	225c      	movs	r2, #92	; 0x5c
 80851dc:	f00d ff5f 	bl	809309e <memcpy>
 80851e0:	bd08      	pop	{r3, pc}
	...

080851e4 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 80851e4:	4603      	mov	r3, r0
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 80851e6:	4a0a      	ldr	r2, [pc, #40]	; (8085210 <mbedtls_sha1_starts_ret+0x2c>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 80851e8:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 80851ea:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 80851ec:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80851f0:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 80851f2:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 80851f6:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 80851fa:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 80851fe:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 8085200:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 8085204:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 8085206:	4a03      	ldr	r2, [pc, #12]	; (8085214 <mbedtls_sha1_starts_ret+0x30>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8085208:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
 808520a:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
 808520c:	619a      	str	r2, [r3, #24]

    return( 0 );
}
 808520e:	4770      	bx	lr
 8085210:	67452301 	.word	0x67452301
 8085214:	c3d2e1f0 	.word	0xc3d2e1f0

08085218 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8085218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 808521c:	784b      	ldrb	r3, [r1, #1]
 808521e:	780a      	ldrb	r2, [r1, #0]
 8085220:	041b      	lsls	r3, r3, #16
 8085222:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8085226:	78ca      	ldrb	r2, [r1, #3]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8085228:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 808522a:	4313      	orrs	r3, r2
 808522c:	788a      	ldrb	r2, [r1, #2]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 808522e:	f891 c008 	ldrb.w	ip, [r1, #8]
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8085232:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8085236:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
 8085238:	794b      	ldrb	r3, [r1, #5]
 808523a:	790a      	ldrb	r2, [r1, #4]
 808523c:	041b      	lsls	r3, r3, #16
 808523e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8085242:	79ca      	ldrb	r2, [r1, #7]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
 8085244:	f891 800c 	ldrb.w	r8, [r1, #12]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 8085248:	4313      	orrs	r3, r2
 808524a:	798a      	ldrb	r2, [r1, #6]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
 808524c:	f891 e014 	ldrb.w	lr, [r1, #20]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 8085250:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8085254:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
 8085256:	7a4b      	ldrb	r3, [r1, #9]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
 8085258:	7c0a      	ldrb	r2, [r1, #16]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 808525a:	041b      	lsls	r3, r3, #16
 808525c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8085260:	f891 c00b 	ldrb.w	ip, [r1, #11]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 8085264:	7e0f      	ldrb	r7, [r1, #24]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8085266:	ea43 030c 	orr.w	r3, r3, ip
 808526a:	f891 c00a 	ldrb.w	ip, [r1, #10]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 808526e:	9001      	str	r0, [sp, #4]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8085270:	ea43 2c0c 	orr.w	ip, r3, ip, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
 8085274:	7b4b      	ldrb	r3, [r1, #13]
 8085276:	041b      	lsls	r3, r3, #16
 8085278:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 808527c:	f891 800f 	ldrb.w	r8, [r1, #15]
 8085280:	ea43 0308 	orr.w	r3, r3, r8
 8085284:	f891 800e 	ldrb.w	r8, [r1, #14]
 8085288:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
 808528c:	7c4b      	ldrb	r3, [r1, #17]
 808528e:	041b      	lsls	r3, r3, #16
 8085290:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8085294:	7cca      	ldrb	r2, [r1, #19]
 8085296:	4313      	orrs	r3, r2
 8085298:	7c8a      	ldrb	r2, [r1, #18]
 808529a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808529e:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
 80852a0:	7d4b      	ldrb	r3, [r1, #21]
 80852a2:	041b      	lsls	r3, r3, #16
 80852a4:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 80852a8:	f891 e017 	ldrb.w	lr, [r1, #23]
 80852ac:	ea43 030e 	orr.w	r3, r3, lr
 80852b0:	f891 e016 	ldrb.w	lr, [r1, #22]
 80852b4:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80852b8:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
 80852ba:	7e4b      	ldrb	r3, [r1, #25]
 80852bc:	041b      	lsls	r3, r3, #16
 80852be:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80852c2:	7ecf      	ldrb	r7, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
 80852c4:	7f0e      	ldrb	r6, [r1, #28]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80852c6:	433b      	orrs	r3, r7
 80852c8:	7e8f      	ldrb	r7, [r1, #26]
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
 80852ca:	f891 4020 	ldrb.w	r4, [r1, #32]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80852ce:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80852d2:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
 80852d4:	7f4b      	ldrb	r3, [r1, #29]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
 80852d6:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 80852da:	041b      	lsls	r3, r3, #16
 80852dc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80852e0:	7fce      	ldrb	r6, [r1, #31]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
 80852e2:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 80852e6:	4333      	orrs	r3, r6
 80852e8:	7f8e      	ldrb	r6, [r1, #30]
 80852ea:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80852ee:	9311      	str	r3, [sp, #68]	; 0x44
    GET_UINT32_BE( W[ 8], data, 32 );
 80852f0:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 80852f4:	041b      	lsls	r3, r3, #16
 80852f6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80852fa:	f891 4023 	ldrb.w	r4, [r1, #35]	; 0x23
 80852fe:	4323      	orrs	r3, r4
 8085300:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
 8085304:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8085308:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
 808530a:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 808530e:	041b      	lsls	r3, r3, #16
 8085310:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8085314:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
 8085318:	4313      	orrs	r3, r2
 808531a:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 808531e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8085322:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
 8085324:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8085328:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 808532c:	041b      	lsls	r3, r3, #16
 808532e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8085332:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
 8085336:	4313      	orrs	r3, r2
 8085338:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 808533c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8085340:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
 8085342:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8085346:	041b      	lsls	r3, r3, #16
 8085348:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 808534c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
 8085350:	4303      	orrs	r3, r0
 8085352:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
 8085356:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808535a:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
 808535c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8085360:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8085364:	041b      	lsls	r3, r3, #16
 8085366:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 808536a:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
 808536e:	4303      	orrs	r3, r0
 8085370:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 8085374:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8085378:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
 808537a:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 808537e:	f891 9034 	ldrb.w	r9, [r1, #52]	; 0x34
 8085382:	041b      	lsls	r3, r3, #16
 8085384:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 8085388:	f891 9037 	ldrb.w	r9, [r1, #55]	; 0x37
    GET_UINT32_BE( W[14], data, 56 );
 808538c:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
    GET_UINT32_BE( W[13], data, 52 );
 8085390:	ea43 0309 	orr.w	r3, r3, r9
 8085394:	f891 9036 	ldrb.w	r9, [r1, #54]	; 0x36
 8085398:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 808539c:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
 808539e:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 80853a2:	041b      	lsls	r3, r3, #16
 80853a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80853a8:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 80853ac:	4313      	orrs	r3, r2
 80853ae:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80853b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80853b6:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
 80853b8:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 80853bc:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 80853c0:	041b      	lsls	r3, r3, #16
 80853c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80853c6:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 80853ca:	4313      	orrs	r3, r2
 80853cc:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 80853d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80853d4:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 80853d6:	9b01      	ldr	r3, [sp, #4]
 80853d8:	689b      	ldr	r3, [r3, #8]
 80853da:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
 80853dc:	9b01      	ldr	r3, [sp, #4]
 80853de:	68db      	ldr	r3, [r3, #12]
 80853e0:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 80853e2:	9b01      	ldr	r3, [sp, #4]
 80853e4:	691b      	ldr	r3, [r3, #16]
 80853e6:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 80853e8:	9b01      	ldr	r3, [sp, #4]
 80853ea:	695b      	ldr	r3, [r3, #20]
 80853ec:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
 80853ee:	9b01      	ldr	r3, [sp, #4]
 80853f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80853f2:	699b      	ldr	r3, [r3, #24]
 80853f4:	9315      	str	r3, [sp, #84]	; 0x54
 80853f6:	9b05      	ldr	r3, [sp, #20]
 80853f8:	ea83 0e02 	eor.w	lr, r3, r2
 80853fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80853fe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8085400:	ea0e 0e03 	and.w	lr, lr, r3
 8085404:	ea8e 0e02 	eor.w	lr, lr, r2
 8085408:	4bdd      	ldr	r3, [pc, #884]	; (8085780 <mbedtls_internal_sha1_process+0x568>)
 808540a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 808540c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 808540e:	441a      	add	r2, r3
 8085410:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8085414:	4496      	add	lr, r2

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 8085416:	9a06      	ldr	r2, [sp, #24]
 8085418:	eb04 0b03 	add.w	fp, r4, r3
 808541c:	4496      	add	lr, r2
 808541e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8085420:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8085422:	ea4f 00b2 	mov.w	r0, r2, ror #2
 8085426:	9a05      	ldr	r2, [sp, #20]
 8085428:	18c5      	adds	r5, r0, r3
 808542a:	ea82 0700 	eor.w	r7, r2, r0
 808542e:	9a05      	ldr	r2, [sp, #20]
 8085430:	400f      	ands	r7, r1
 8085432:	4057      	eors	r7, r2
 8085434:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
 8085436:	ea4f 01b1 	mov.w	r1, r1, ror #2
 808543a:	441a      	add	r2, r3
 808543c:	4417      	add	r7, r2
 808543e:	9a07      	ldr	r2, [sp, #28]
 8085440:	ea80 0901 	eor.w	r9, r0, r1
 8085444:	4417      	add	r7, r2
 8085446:	9a05      	ldr	r2, [sp, #20]
 8085448:	ea09 090e 	and.w	r9, r9, lr
 808544c:	441a      	add	r2, r3
 808544e:	eb07 67fe 	add.w	r7, r7, lr, ror #27
 8085452:	4462      	add	r2, ip
    P( D, E, A, B, C, W[2]  );
 8085454:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8085458:	ea89 0900 	eor.w	r9, r9, r0
 808545c:	4491      	add	r9, r2
 808545e:	ea81 020e 	eor.w	r2, r1, lr
 8085462:	403a      	ands	r2, r7
 8085464:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 8085468:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[3]  );
 808546a:	ea4f 07b7 	mov.w	r7, r7, ror #2
 808546e:	4445      	add	r5, r8
 8085470:	18c8      	adds	r0, r1, r3
 8085472:	4415      	add	r5, r2
 8085474:	990e      	ldr	r1, [sp, #56]	; 0x38
 8085476:	ea8e 0207 	eor.w	r2, lr, r7
 808547a:	ea02 0209 	and.w	r2, r2, r9
 808547e:	eb05 65f9 	add.w	r5, r5, r9, ror #27
 8085482:	ea82 020e 	eor.w	r2, r2, lr
    P( B, C, D, E, A, W[4]  );
 8085486:	ea4f 09b9 	mov.w	r9, r9, ror #2
 808548a:	4408      	add	r0, r1
 808548c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 808548e:	4410      	add	r0, r2
 8085490:	ea87 0209 	eor.w	r2, r7, r9
 8085494:	18ce      	adds	r6, r1, r3
 8085496:	402a      	ands	r2, r5
 8085498:	407a      	eors	r2, r7
 808549a:	4476      	add	r6, lr
 808549c:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 80854a0:	4416      	add	r6, r2
    P( A, B, C, D, E, W[5]  );
 80854a2:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80854a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80854a8:	ea89 0105 	eor.w	r1, r9, r5
 80854ac:	4001      	ands	r1, r0
 80854ae:	441a      	add	r2, r3
 80854b0:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 80854b4:	ea81 0109 	eor.w	r1, r1, r9
    P( E, A, B, C, D, W[6]  );
 80854b8:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80854bc:	443a      	add	r2, r7
 80854be:	440a      	add	r2, r1
 80854c0:	ea85 0100 	eor.w	r1, r5, r0
 80854c4:	4031      	ands	r1, r6
 80854c6:	eb02 62f6 	add.w	r2, r2, r6, ror #27
 80854ca:	4069      	eors	r1, r5
    P( D, E, A, B, C, W[7]  );
 80854cc:	ea4f 06b6 	mov.w	r6, r6, ror #2
 80854d0:	44cb      	add	fp, r9
 80854d2:	448b      	add	fp, r1
 80854d4:	ea80 0106 	eor.w	r1, r0, r6
 80854d8:	4011      	ands	r1, r2
 80854da:	441c      	add	r4, r3
 80854dc:	4041      	eors	r1, r0
 80854de:	442c      	add	r4, r5
 80854e0:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
 80854e4:	440c      	add	r4, r1
    P( C, D, E, A, B, W[8]  );
 80854e6:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80854ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80854ec:	ea86 0502 	eor.w	r5, r6, r2
 80854f0:	ea05 050b 	and.w	r5, r5, fp
 80854f4:	4419      	add	r1, r3
 80854f6:	4075      	eors	r5, r6
 80854f8:	4401      	add	r1, r0
 80854fa:	eb04 64fb 	add.w	r4, r4, fp, ror #27
 80854fe:	4429      	add	r1, r5
    P( B, C, D, E, A, W[9]  );
 8085500:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 8085504:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8085506:	ea82 000b 	eor.w	r0, r2, fp
 808550a:	eb05 0a03 	add.w	sl, r5, r3
 808550e:	4020      	ands	r0, r4
 8085510:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8085514:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[10] );
 8085516:	ea4f 04b4 	mov.w	r4, r4, ror #2
 808551a:	4050      	eors	r0, r2
 808551c:	44b2      	add	sl, r6
 808551e:	4482      	add	sl, r0
 8085520:	ea8b 0004 	eor.w	r0, fp, r4
 8085524:	eb05 0903 	add.w	r9, r5, r3
 8085528:	4008      	ands	r0, r1
 808552a:	ea80 000b 	eor.w	r0, r0, fp
 808552e:	4491      	add	r9, r2
 8085530:	eb0a 6af1 	add.w	sl, sl, r1, ror #27
 8085534:	4481      	add	r9, r0
    P( E, A, B, C, D, W[11] );
 8085536:	ea4f 01b1 	mov.w	r1, r1, ror #2
 808553a:	980d      	ldr	r0, [sp, #52]	; 0x34
 808553c:	ea84 0201 	eor.w	r2, r4, r1
 8085540:	eb00 0e03 	add.w	lr, r0, r3
 8085544:	ea02 020a 	and.w	r2, r2, sl
 8085548:	eb09 69fa 	add.w	r9, r9, sl, ror #27
 808554c:	9802      	ldr	r0, [sp, #8]
    P( D, E, A, B, C, W[12] );
 808554e:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8085552:	4062      	eors	r2, r4
 8085554:	44de      	add	lr, fp
 8085556:	4496      	add	lr, r2
 8085558:	ea81 020a 	eor.w	r2, r1, sl
 808555c:	18c5      	adds	r5, r0, r3
 808555e:	ea02 0209 	and.w	r2, r2, r9
 8085562:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
 8085566:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[13] );
 8085568:	ea4f 09b9 	mov.w	r9, r9, ror #2
 808556c:	9803      	ldr	r0, [sp, #12]
 808556e:	4425      	add	r5, r4
 8085570:	4415      	add	r5, r2
 8085572:	ea8a 0209 	eor.w	r2, sl, r9
 8085576:	ea02 020e 	and.w	r2, r2, lr
 808557a:	4418      	add	r0, r3
 808557c:	eb05 65fe 	add.w	r5, r5, lr, ror #27
 8085580:	ea82 020a 	eor.w	r2, r2, sl
    P( B, C, D, E, A, W[14] );
 8085584:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8085588:	4408      	add	r0, r1
 808558a:	9904      	ldr	r1, [sp, #16]
 808558c:	4410      	add	r0, r2
 808558e:	ea89 020e 	eor.w	r2, r9, lr
 8085592:	18cf      	adds	r7, r1, r3
 8085594:	402a      	ands	r2, r5
 8085596:	ea82 0209 	eor.w	r2, r2, r9
 808559a:	4457      	add	r7, sl
 808559c:	4417      	add	r7, r2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 808559e:	9a06      	ldr	r2, [sp, #24]
 80855a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80855a2:	ea82 020c 	eor.w	r2, r2, ip
 80855a6:	404a      	eors	r2, r1
 80855a8:	9902      	ldr	r1, [sp, #8]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
 80855aa:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80855ae:	404a      	eors	r2, r1
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80855b0:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80855b4:	ea8e 0105 	eor.w	r1, lr, r5
    P( E, A, B, C, D, R(16) );
 80855b8:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80855bc:	9206      	str	r2, [sp, #24]
 80855be:	4001      	ands	r1, r0
 80855c0:	441a      	add	r2, r3
 80855c2:	ea81 010e 	eor.w	r1, r1, lr
 80855c6:	444a      	add	r2, r9
 80855c8:	440a      	add	r2, r1
    P( D, E, A, B, C, R(17) );
 80855ca:	9907      	ldr	r1, [sp, #28]
 80855cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80855ce:	ea81 0108 	eor.w	r1, r1, r8
 80855d2:	4061      	eors	r1, r4
 80855d4:	9c03      	ldr	r4, [sp, #12]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80855d6:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80855da:	4061      	eors	r1, r4
 80855dc:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80855e0:	9107      	str	r1, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80855e2:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80855e6:	9c07      	ldr	r4, [sp, #28]
 80855e8:	ea85 0100 	eor.w	r1, r5, r0
 80855ec:	18e6      	adds	r6, r4, r3
 80855ee:	4039      	ands	r1, r7
 80855f0:	4069      	eors	r1, r5
 80855f2:	4476      	add	r6, lr
 80855f4:	440e      	add	r6, r1
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80855f6:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80855f8:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80855fc:	ea8c 0c01 	eor.w	ip, ip, r1
 8085600:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 8085602:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(18) );
 8085606:	ea8c 0c01 	eor.w	ip, ip, r1
 808560a:	9904      	ldr	r1, [sp, #16]
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 808560c:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(18) );
 8085610:	ea8c 0c01 	eor.w	ip, ip, r1
 8085614:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8085618:	9108      	str	r1, [sp, #32]
 808561a:	9c08      	ldr	r4, [sp, #32]
 808561c:	ea80 0107 	eor.w	r1, r0, r7
 8085620:	4011      	ands	r1, r2
 8085622:	441c      	add	r4, r3
 8085624:	4041      	eors	r1, r0
 8085626:	442c      	add	r4, r5
 8085628:	440c      	add	r4, r1
    P( B, C, D, E, A, R(19) );
 808562a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 808562c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(19) );
 8085630:	ea88 0801 	eor.w	r8, r8, r1
 8085634:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085636:	ea87 0502 	eor.w	r5, r7, r2
 808563a:	ea88 0801 	eor.w	r8, r8, r1
 808563e:	9906      	ldr	r1, [sp, #24]
 8085640:	4035      	ands	r5, r6
 8085642:	ea88 0801 	eor.w	r8, r8, r1
 8085646:	ea4f 78f8 	mov.w	r8, r8, ror #31
 808564a:	4443      	add	r3, r8
 808564c:	407d      	eors	r5, r7
 808564e:	4403      	add	r3, r0
 8085650:	18e9      	adds	r1, r5, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085652:	9810      	ldr	r0, [sp, #64]	; 0x40
 8085654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8085656:	4d4b      	ldr	r5, [pc, #300]	; (8085784 <mbedtls_internal_sha1_process+0x56c>)
 8085658:	ea83 0c00 	eor.w	ip, r3, r0
 808565c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 808565e:	eb04 64f6 	add.w	r4, r4, r6, ror #27
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085662:	ea8c 0c03 	eor.w	ip, ip, r3
 8085666:	9b07      	ldr	r3, [sp, #28]
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 8085668:	ea4f 06b6 	mov.w	r6, r6, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 808566c:	ea8c 0c03 	eor.w	ip, ip, r3
 8085670:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8085674:	ea82 0306 	eor.w	r3, r2, r6
 8085678:	eb0c 0b05 	add.w	fp, ip, r5
 808567c:	4063      	eors	r3, r4
 808567e:	44bb      	add	fp, r7
    P( E, A, B, C, D, R(21) );
 8085680:	9811      	ldr	r0, [sp, #68]	; 0x44
 8085682:	449b      	add	fp, r3
 8085684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 8085686:	eb01 61f4 	add.w	r1, r1, r4, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 808568a:	ea83 0e00 	eor.w	lr, r3, r0
 808568e:	9b02      	ldr	r3, [sp, #8]
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085690:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(21) );
 8085694:	ea8e 0e03 	eor.w	lr, lr, r3
 8085698:	9b08      	ldr	r3, [sp, #32]
 808569a:	ea86 0004 	eor.w	r0, r6, r4
 808569e:	ea8e 0e03 	eor.w	lr, lr, r3
 80856a2:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80856a6:	eb0e 0305 	add.w	r3, lr, r5
 80856aa:	4048      	eors	r0, r1
 80856ac:	4413      	add	r3, r2
 80856ae:	4403      	add	r3, r0
    P( D, E, A, B, C, R(22) );
 80856b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80856b2:	9809      	ldr	r0, [sp, #36]	; 0x24
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80856b4:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80856b8:	ea82 0700 	eor.w	r7, r2, r0
 80856bc:	9a03      	ldr	r2, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80856be:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(22) );
 80856c2:	4057      	eors	r7, r2
 80856c4:	ea87 0708 	eor.w	r7, r7, r8
 80856c8:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80856cc:	ea84 0201 	eor.w	r2, r4, r1
 80856d0:	eb07 0a05 	add.w	sl, r7, r5
 80856d4:	ea82 020b 	eor.w	r2, r2, fp
 80856d8:	44b2      	add	sl, r6
    P( C, D, E, A, B, R(23) );
 80856da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80856dc:	4492      	add	sl, r2
 80856de:	9a11      	ldr	r2, [sp, #68]	; 0x44

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80856e0:	eb03 63fb 	add.w	r3, r3, fp, ror #27
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80856e4:	ea82 0600 	eor.w	r6, r2, r0
 80856e8:	9a04      	ldr	r2, [sp, #16]
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80856ea:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( C, D, E, A, B, R(23) );
 80856ee:	4056      	eors	r6, r2
 80856f0:	ea86 060c 	eor.w	r6, r6, ip
 80856f4:	ea4f 76f6 	mov.w	r6, r6, ror #31
 80856f8:	ea81 020b 	eor.w	r2, r1, fp
 80856fc:	eb06 0905 	add.w	r9, r6, r5
 8085700:	405a      	eors	r2, r3
 8085702:	44a1      	add	r9, r4
    P( B, C, D, E, A, R(24) );
 8085704:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8085706:	4491      	add	r9, r2
 8085708:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 808570a:	eb0a 6af3 	add.w	sl, sl, r3, ror #27
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 808570e:	ea82 0400 	eor.w	r4, r2, r0
 8085712:	9a06      	ldr	r2, [sp, #24]
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8085714:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(24) );
 8085718:	4054      	eors	r4, r2
 808571a:	ea84 040e 	eor.w	r4, r4, lr
 808571e:	ea4f 72f4 	mov.w	r2, r4, ror #31
 8085722:	9209      	str	r2, [sp, #36]	; 0x24
 8085724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8085726:	ea8b 0203 	eor.w	r2, fp, r3
 808572a:	4428      	add	r0, r5
 808572c:	ea82 020a 	eor.w	r2, r2, sl
 8085730:	4408      	add	r0, r1
 8085732:	4410      	add	r0, r2
    P( A, B, C, D, E, R(25) );
 8085734:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8085738:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 808573c:	404a      	eors	r2, r1
 808573e:	9907      	ldr	r1, [sp, #28]

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085740:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(25) );
 8085744:	404a      	eors	r2, r1
 8085746:	407a      	eors	r2, r7
 8085748:	ea4f 72f2 	mov.w	r2, r2, ror #31
 808574c:	920a      	str	r2, [sp, #40]	; 0x28
 808574e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8085750:	ea83 020a 	eor.w	r2, r3, sl
 8085754:	4429      	add	r1, r5
 8085756:	ea82 0209 	eor.w	r2, r2, r9
 808575a:	4459      	add	r1, fp
 808575c:	4411      	add	r1, r2
    P( E, A, B, C, D, R(26) );
 808575e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085760:	eb00 60f9 	add.w	r0, r0, r9, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 8085764:	4614      	mov	r4, r2
 8085766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 8085768:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( E, A, B, C, D, R(26) );
 808576c:	4062      	eors	r2, r4
 808576e:	9c08      	ldr	r4, [sp, #32]
 8085770:	ea8a 0b09 	eor.w	fp, sl, r9
 8085774:	4062      	eors	r2, r4
 8085776:	4072      	eors	r2, r6
 8085778:	ea4f 72f2 	mov.w	r2, r2, ror #31
 808577c:	e004      	b.n	8085788 <mbedtls_internal_sha1_process+0x570>
 808577e:	bf00      	nop
 8085780:	5a827999 	.word	0x5a827999
 8085784:	6ed9eba1 	.word	0x6ed9eba1
 8085788:	920b      	str	r2, [sp, #44]	; 0x2c
 808578a:	442a      	add	r2, r5
    P( D, E, A, B, C, R(27) );
 808578c:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 808578e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8085792:	ea8b 0b00 	eor.w	fp, fp, r0
 8085796:	441a      	add	r2, r3
    P( E, A, B, C, D, R(26) );
 8085798:	ea4f 03b0 	mov.w	r3, r0, ror #2
    P( D, E, A, B, C, R(27) );
 808579c:	980c      	ldr	r0, [sp, #48]	; 0x30
 808579e:	445a      	add	r2, fp
 80857a0:	4060      	eors	r0, r4
 80857a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80857a4:	ea80 0008 	eor.w	r0, r0, r8
 80857a8:	4060      	eors	r0, r4
 80857aa:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80857ae:	900c      	str	r0, [sp, #48]	; 0x30
 80857b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80857b2:	ea89 0003 	eor.w	r0, r9, r3
 80857b6:	eb04 0b05 	add.w	fp, r4, r5
 80857ba:	4048      	eors	r0, r1
 80857bc:	44da      	add	sl, fp
    P( C, D, E, A, B, R(28) );
 80857be:	9c03      	ldr	r4, [sp, #12]
 80857c0:	4482      	add	sl, r0
 80857c2:	980d      	ldr	r0, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 80857c4:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80857c8:	4060      	eors	r0, r4
 80857ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80857cc:	ea80 000c 	eor.w	r0, r0, ip
 80857d0:	4060      	eors	r0, r4
 80857d2:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( B, C, D, E, A, R(29) );
 80857d6:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80857d8:	900d      	str	r0, [sp, #52]	; 0x34
 80857da:	4428      	add	r0, r5
 80857dc:	4448      	add	r0, r9
    P( B, C, D, E, A, R(29) );
 80857de:	46a1      	mov	r9, r4
 80857e0:	9c04      	ldr	r4, [sp, #16]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 80857e2:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 80857e6:	ea89 0904 	eor.w	r9, r9, r4
 80857ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80857ec:	ea89 090e 	eor.w	r9, r9, lr
 80857f0:	ea89 0904 	eor.w	r9, r9, r4
 80857f4:	ea4f 74f9 	mov.w	r4, r9, ror #31
 80857f8:	eb04 0905 	add.w	r9, r4, r5
 80857fc:	9402      	str	r4, [sp, #8]
 80857fe:	ea83 0b01 	eor.w	fp, r3, r1
    P( A, B, C, D, E, R(30) );
 8085802:	9c06      	ldr	r4, [sp, #24]
 8085804:	4499      	add	r9, r3
 8085806:	9b03      	ldr	r3, [sp, #12]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 8085808:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 808580c:	4063      	eors	r3, r4
 808580e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085810:	407b      	eors	r3, r7
 8085812:	4063      	eors	r3, r4
 8085814:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085818:	9303      	str	r3, [sp, #12]
 808581a:	ea8b 0b02 	eor.w	fp, fp, r2
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 808581e:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8085822:	9c03      	ldr	r4, [sp, #12]
 8085824:	4458      	add	r0, fp
 8085826:	ea81 0b02 	eor.w	fp, r1, r2
 808582a:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 808582e:	ea8b 0b0a 	eor.w	fp, fp, sl
    P( B, C, D, E, A, R(29) );
 8085832:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8085836:	ea82 030a 	eor.w	r3, r2, sl
 808583a:	44d9      	add	r9, fp
 808583c:	eb04 0b05 	add.w	fp, r4, r5
 8085840:	4043      	eors	r3, r0
 8085842:	4459      	add	r1, fp
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085844:	9c07      	ldr	r4, [sp, #28]
 8085846:	4419      	add	r1, r3
 8085848:	9b04      	ldr	r3, [sp, #16]
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 808584a:	eb09 69f0 	add.w	r9, r9, r0, ror #27
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 808584e:	4063      	eors	r3, r4
 8085850:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8085852:	4073      	eors	r3, r6
 8085854:	4063      	eors	r3, r4
 8085856:	ea4f 73f3 	mov.w	r3, r3, ror #31
 808585a:	9304      	str	r3, [sp, #16]
 808585c:	442b      	add	r3, r5
    P( D, E, A, B, C, R(32) );
 808585e:	9c08      	ldr	r4, [sp, #32]
 8085860:	4413      	add	r3, r2
 8085862:	9a06      	ldr	r2, [sp, #24]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085864:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085868:	4062      	eors	r2, r4
 808586a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 808586c:	ea8a 0b00 	eor.w	fp, sl, r0
 8085870:	4062      	eors	r2, r4
 8085872:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085874:	eb01 61f9 	add.w	r1, r1, r9, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085878:	4062      	eors	r2, r4
 808587a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 808587e:	9206      	str	r2, [sp, #24]
 8085880:	9c06      	ldr	r4, [sp, #24]
 8085882:	ea8b 0b09 	eor.w	fp, fp, r9
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085886:	ea4f 09b9 	mov.w	r9, r9, ror #2
 808588a:	ea80 0209 	eor.w	r2, r0, r9
 808588e:	445b      	add	r3, fp
 8085890:	eb04 0b05 	add.w	fp, r4, r5
 8085894:	404a      	eors	r2, r1
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085896:	9c07      	ldr	r4, [sp, #28]
 8085898:	44da      	add	sl, fp
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 808589a:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 808589e:	4492      	add	sl, r2
    P( D, E, A, B, C, R(32) );
 80858a0:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
    P( C, D, E, A, B, R(33) );
 80858a4:	ea84 0a08 	eor.w	sl, r4, r8
 80858a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80858aa:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(33) );
 80858ae:	ea8a 0a04 	eor.w	sl, sl, r4
 80858b2:	9c03      	ldr	r4, [sp, #12]
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 80858b4:	ea88 080e 	eor.w	r8, r8, lr
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80858b8:	ea8a 0a04 	eor.w	sl, sl, r4
 80858bc:	ea4f 74fa 	mov.w	r4, sl, ror #31
 80858c0:	eb04 0b05 	add.w	fp, r4, r5
 80858c4:	ea89 0a01 	eor.w	sl, r9, r1
 80858c8:	4458      	add	r0, fp
 80858ca:	ea8a 0a03 	eor.w	sl, sl, r3
 80858ce:	4482      	add	sl, r0
    P( B, C, D, E, A, R(34) );
 80858d0:	9808      	ldr	r0, [sp, #32]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80858d2:	9407      	str	r4, [sp, #28]
    P( B, C, D, E, A, R(34) );
 80858d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80858d6:	ea80 000c 	eor.w	r0, r0, ip
 80858da:	4060      	eors	r0, r4
 80858dc:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80858de:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(34) );
 80858e2:	4060      	eors	r0, r4
 80858e4:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80858e8:	9008      	str	r0, [sp, #32]
 80858ea:	9c08      	ldr	r4, [sp, #32]
 80858ec:	ea81 0003 	eor.w	r0, r1, r3
 80858f0:	eb04 0b05 	add.w	fp, r4, r5
    P( A, B, C, D, E, R(35) );
 80858f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80858f6:	4050      	eors	r0, r2
 80858f8:	ea88 0804 	eor.w	r8, r8, r4
 80858fc:	9c06      	ldr	r4, [sp, #24]
 80858fe:	44d9      	add	r9, fp
 8085900:	ea88 0804 	eor.w	r8, r8, r4
 8085904:	ea4f 7bf8 	mov.w	fp, r8, ror #31
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085908:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 808590c:	4481      	add	r9, r0
    P( B, C, D, E, A, R(34) );
 808590e:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8085912:	eb09 60fa 	add.w	r0, r9, sl, ror #27
 8085916:	ea83 0802 	eor.w	r8, r3, r2
 808591a:	eb0b 0905 	add.w	r9, fp, r5
 808591e:	ea88 080a 	eor.w	r8, r8, sl
 8085922:	4449      	add	r1, r9
 8085924:	4441      	add	r1, r8
    P( A, B, C, D, E, R(35) );
 8085926:	eb01 68f0 	add.w	r8, r1, r0, ror #27
    P( E, A, B, C, D, R(36) );
 808592a:	990d      	ldr	r1, [sp, #52]	; 0x34
 808592c:	ea8c 0c07 	eor.w	ip, ip, r7
 8085930:	ea8c 0c01 	eor.w	ip, ip, r1
 8085934:	9907      	ldr	r1, [sp, #28]
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 8085936:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(36) );
 808593a:	ea8c 0c01 	eor.w	ip, ip, r1
 808593e:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8085942:	910e      	str	r1, [sp, #56]	; 0x38
 8085944:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8085946:	ea82 010a 	eor.w	r1, r2, sl
 808594a:	eb04 0c05 	add.w	ip, r4, r5
 808594e:	4041      	eors	r1, r0
 8085950:	4463      	add	r3, ip
 8085952:	440b      	add	r3, r1
 8085954:	eb03 61f8 	add.w	r1, r3, r8, ror #27
    P( D, E, A, B, C, R(37) );
 8085958:	9b02      	ldr	r3, [sp, #8]
 808595a:	ea8e 0e06 	eor.w	lr, lr, r6
 808595e:	ea8e 0e03 	eor.w	lr, lr, r3
 8085962:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
 8085964:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(37) );
 8085968:	ea8e 0e03 	eor.w	lr, lr, r3
 808596c:	ea4f 73fe 	mov.w	r3, lr, ror #31
 8085970:	930f      	str	r3, [sp, #60]	; 0x3c
 8085972:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8085974:	ea8a 0300 	eor.w	r3, sl, r0
 8085978:	eb04 0e05 	add.w	lr, r4, r5
 808597c:	ea83 0308 	eor.w	r3, r3, r8
 8085980:	4472      	add	r2, lr
 8085982:	441a      	add	r2, r3
 8085984:	eb02 63f1 	add.w	r3, r2, r1, ror #27
    P( C, D, E, A, B, R(38) );
 8085988:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
 808598a:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(38) );
 808598e:	4057      	eors	r7, r2
 8085990:	9a03      	ldr	r2, [sp, #12]
 8085992:	4057      	eors	r7, r2
 8085994:	ea87 070b 	eor.w	r7, r7, fp
 8085998:	ea4f 72f7 	mov.w	r2, r7, ror #31
 808599c:	9210      	str	r2, [sp, #64]	; 0x40
 808599e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80859a0:	ea80 0208 	eor.w	r2, r0, r8
 80859a4:	1967      	adds	r7, r4, r5
    P( B, C, D, E, A, R(39) );
 80859a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80859a8:	404a      	eors	r2, r1
 80859aa:	4066      	eors	r6, r4
 80859ac:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80859ae:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(39) );
 80859b2:	4066      	eors	r6, r4
 80859b4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80859b6:	44ba      	add	sl, r7
 80859b8:	4066      	eors	r6, r4
 80859ba:	ea4f 74f6 	mov.w	r4, r6, ror #31
 80859be:	4425      	add	r5, r4
 80859c0:	9411      	str	r4, [sp, #68]	; 0x44
 80859c2:	4428      	add	r0, r5
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80859c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80859c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80859c8:	ea88 0601 	eor.w	r6, r8, r1
 80859cc:	4065      	eors	r5, r4
 80859ce:	462c      	mov	r4, r5
 80859d0:	9d06      	ldr	r5, [sp, #24]
 80859d2:	405e      	eors	r6, r3
 80859d4:	406c      	eors	r4, r5
 80859d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80859d8:	4492      	add	sl, r2
 80859da:	4430      	add	r0, r6
 80859dc:	406c      	eors	r4, r5
 80859de:	4ed6      	ldr	r6, [pc, #856]	; (8085d38 <mbedtls_internal_sha1_process+0xb20>)
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80859e0:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80859e4:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 80859e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80859ec:	9409      	str	r4, [sp, #36]	; 0x24
 80859ee:	ea42 0503 	orr.w	r5, r2, r3
 80859f2:	4434      	add	r4, r6
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 80859f4:	eb00 60f2 	add.w	r0, r0, r2, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80859f8:	400d      	ands	r5, r1
 80859fa:	44a0      	add	r8, r4
 80859fc:	ea02 0403 	and.w	r4, r2, r3
 8085a00:	432c      	orrs	r4, r5
 8085a02:	eb08 68f0 	add.w	r8, r8, r0, ror #27
 8085a06:	ea4f 0ab2 	mov.w	sl, r2, ror #2
 8085a0a:	44a0      	add	r8, r4
    P( E, A, B, C, D, R(41) );
 8085a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8085a0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085a10:	ea4f 0cb0 	mov.w	ip, r0, ror #2
 8085a14:	4062      	eors	r2, r4
 8085a16:	9c07      	ldr	r4, [sp, #28]
 8085a18:	4062      	eors	r2, r4
 8085a1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8085a1c:	4062      	eors	r2, r4
 8085a1e:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085a22:	920a      	str	r2, [sp, #40]	; 0x28
 8085a24:	ea40 020a 	orr.w	r2, r0, sl
 8085a28:	ea02 0403 	and.w	r4, r2, r3
 8085a2c:	ea00 020a 	and.w	r2, r0, sl
 8085a30:	4322      	orrs	r2, r4
 8085a32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(42) );
 8085a34:	980d      	ldr	r0, [sp, #52]	; 0x34
 8085a36:	4434      	add	r4, r6
 8085a38:	4421      	add	r1, r4
 8085a3a:	4411      	add	r1, r2
 8085a3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
 8085a3e:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( D, E, A, B, C, R(42) );
 8085a42:	4042      	eors	r2, r0
 8085a44:	9808      	ldr	r0, [sp, #32]
 8085a46:	4042      	eors	r2, r0
 8085a48:	9811      	ldr	r0, [sp, #68]	; 0x44
 8085a4a:	4042      	eors	r2, r0
 8085a4c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085a50:	920b      	str	r2, [sp, #44]	; 0x2c
 8085a52:	ea48 000c 	orr.w	r0, r8, ip
 8085a56:	4432      	add	r2, r6
 8085a58:	ea00 000a 	and.w	r0, r0, sl
 8085a5c:	4413      	add	r3, r2
 8085a5e:	ea08 020c 	and.w	r2, r8, ip
 8085a62:	4302      	orrs	r2, r0
 8085a64:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8085a68:	4413      	add	r3, r2
    P( C, D, E, A, B, R(43) );
 8085a6a:	9802      	ldr	r0, [sp, #8]
 8085a6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 8085a6e:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(43) );
 8085a72:	4050      	eors	r0, r2
 8085a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8085a76:	ea80 000b 	eor.w	r0, r0, fp
 8085a7a:	4050      	eors	r0, r2
 8085a7c:	ea4f 72f0 	mov.w	r2, r0, ror #31
 8085a80:	ea41 0008 	orr.w	r0, r1, r8
 8085a84:	920c      	str	r2, [sp, #48]	; 0x30
 8085a86:	ea00 000c 	and.w	r0, r0, ip
 8085a8a:	ea01 0208 	and.w	r2, r1, r8
 8085a8e:	4310      	orrs	r0, r2
 8085a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8085a92:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8085a96:	4432      	add	r2, r6
 8085a98:	4452      	add	r2, sl
 8085a9a:	4402      	add	r2, r0
 8085a9c:	eb02 6af3 	add.w	sl, r2, r3, ror #27
    P( B, C, D, E, A, R(44) );
 8085aa0:	9803      	ldr	r0, [sp, #12]
 8085aa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8085aa4:	ea43 0401 	orr.w	r4, r3, r1
 8085aa8:	4050      	eors	r0, r2
 8085aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8085aac:	ea04 0408 	and.w	r4, r4, r8
 8085ab0:	4050      	eors	r0, r2
 8085ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8085ab4:	ea4f 07b3 	mov.w	r7, r3, ror #2
 8085ab8:	4050      	eors	r0, r2
 8085aba:	ea4f 72f0 	mov.w	r2, r0, ror #31
 8085abe:	1990      	adds	r0, r2, r6
 8085ac0:	920d      	str	r2, [sp, #52]	; 0x34
 8085ac2:	4460      	add	r0, ip
 8085ac4:	ea03 0201 	and.w	r2, r3, r1
 8085ac8:	4322      	orrs	r2, r4
 8085aca:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 8085ace:	4410      	add	r0, r2
    P( A, B, C, D, E, R(45) );
 8085ad0:	9b02      	ldr	r3, [sp, #8]
 8085ad2:	9a04      	ldr	r2, [sp, #16]
 8085ad4:	ea4f 09ba 	mov.w	r9, sl, ror #2
 8085ad8:	4053      	eors	r3, r2
 8085ada:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8085adc:	4053      	eors	r3, r2
 8085ade:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8085ae0:	4053      	eors	r3, r2
 8085ae2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085ae6:	9302      	str	r3, [sp, #8]
 8085ae8:	9a02      	ldr	r2, [sp, #8]
 8085aea:	ea4a 0307 	orr.w	r3, sl, r7
 8085aee:	ea03 0e01 	and.w	lr, r3, r1
 8085af2:	ea0a 0307 	and.w	r3, sl, r7
 8085af6:	ea4e 0303 	orr.w	r3, lr, r3
 8085afa:	eb02 0e06 	add.w	lr, r2, r6
 8085afe:	44f0      	add	r8, lr
 8085b00:	4498      	add	r8, r3
    P( E, A, B, C, D, R(46) );
 8085b02:	9a06      	ldr	r2, [sp, #24]
 8085b04:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
 8085b06:	eb08 6ef0 	add.w	lr, r8, r0, ror #27
    P( E, A, B, C, D, R(46) );
 8085b0a:	ea83 0802 	eor.w	r8, r3, r2
 8085b0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8085b10:	ea88 0803 	eor.w	r8, r8, r3
 8085b14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8085b16:	ea88 0803 	eor.w	r8, r8, r3
 8085b1a:	ea4f 73f8 	mov.w	r3, r8, ror #31
 8085b1e:	199c      	adds	r4, r3, r6
 8085b20:	4421      	add	r1, r4
 8085b22:	ea40 0409 	orr.w	r4, r0, r9
 8085b26:	9303      	str	r3, [sp, #12]
 8085b28:	403c      	ands	r4, r7
 8085b2a:	ea00 0309 	and.w	r3, r0, r9
 8085b2e:	431c      	orrs	r4, r3
    P( D, E, A, B, C, R(47) );
 8085b30:	9b04      	ldr	r3, [sp, #16]
 8085b32:	9a07      	ldr	r2, [sp, #28]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 8085b34:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(47) );
 8085b38:	ea83 0c02 	eor.w	ip, r3, r2
 8085b3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8085b3e:	eb01 61fe 	add.w	r1, r1, lr, ror #27
 8085b42:	ea8c 0c03 	eor.w	ip, ip, r3
 8085b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 8085b48:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
 8085b4a:	ea8c 0c03 	eor.w	ip, ip, r3
 8085b4e:	ea4f 73fc 	mov.w	r3, ip, ror #31
 8085b52:	ea4e 0100 	orr.w	r1, lr, r0
 8085b56:	9304      	str	r3, [sp, #16]
 8085b58:	ea01 0109 	and.w	r1, r1, r9
 8085b5c:	ea0e 0300 	and.w	r3, lr, r0
 8085b60:	4319      	orrs	r1, r3
 8085b62:	9b04      	ldr	r3, [sp, #16]
    P( C, D, E, A, B, R(48) );
 8085b64:	9a08      	ldr	r2, [sp, #32]
 8085b66:	4433      	add	r3, r6
 8085b68:	443b      	add	r3, r7
 8085b6a:	18cf      	adds	r7, r1, r3
 8085b6c:	9b06      	ldr	r3, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 8085b6e:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( C, D, E, A, B, R(48) );
 8085b72:	ea83 0802 	eor.w	r8, r3, r2
 8085b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 8085b78:	eb07 67f4 	add.w	r7, r7, r4, ror #27
    P( C, D, E, A, B, R(48) );
 8085b7c:	ea88 0803 	eor.w	r8, r8, r3
 8085b80:	9b02      	ldr	r3, [sp, #8]
    P( B, C, D, E, A, R(49) );
 8085b82:	ea4f 0ab7 	mov.w	sl, r7, ror #2
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8085b86:	ea88 0803 	eor.w	r8, r8, r3
 8085b8a:	ea4f 73f8 	mov.w	r3, r8, ror #31
 8085b8e:	199a      	adds	r2, r3, r6
 8085b90:	4491      	add	r9, r2
 8085b92:	ea44 0201 	orr.w	r2, r4, r1
 8085b96:	9306      	str	r3, [sp, #24]
 8085b98:	4002      	ands	r2, r0
 8085b9a:	ea04 0301 	and.w	r3, r4, r1
 8085b9e:	431a      	orrs	r2, r3
    P( B, C, D, E, A, R(49) );
 8085ba0:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8085ba2:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(49) );
 8085ba6:	ea83 0c0b 	eor.w	ip, r3, fp
 8085baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085bac:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 8085bb0:	ea8c 0c03 	eor.w	ip, ip, r3
 8085bb4:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8085bb6:	444a      	add	r2, r9
    P( B, C, D, E, A, R(49) );
 8085bb8:	ea8c 0c03 	eor.w	ip, ip, r3
 8085bbc:	ea4f 73fc 	mov.w	r3, ip, ror #31
 8085bc0:	9307      	str	r3, [sp, #28]
 8085bc2:	9d07      	ldr	r5, [sp, #28]
 8085bc4:	ea47 0304 	orr.w	r3, r7, r4
 8085bc8:	ea03 0c01 	and.w	ip, r3, r1
 8085bcc:	ea07 0304 	and.w	r3, r7, r4
 8085bd0:	ea4c 0303 	orr.w	r3, ip, r3
 8085bd4:	eb05 0c06 	add.w	ip, r5, r6
 8085bd8:	4460      	add	r0, ip
 8085bda:	4418      	add	r0, r3
 8085bdc:	eb00 6cf2 	add.w	ip, r0, r2, ror #27
    P( A, B, C, D, E, R(50) );
 8085be0:	9b08      	ldr	r3, [sp, #32]
 8085be2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8085be4:	ea83 0500 	eor.w	r5, r3, r0
 8085be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8085bea:	ea42 000a 	orr.w	r0, r2, sl
 8085bee:	405d      	eors	r5, r3
 8085bf0:	9b04      	ldr	r3, [sp, #16]
 8085bf2:	4020      	ands	r0, r4
 8085bf4:	405d      	eors	r5, r3
 8085bf6:	ea4f 77f5 	mov.w	r7, r5, ror #31
 8085bfa:	19bb      	adds	r3, r7, r6
 8085bfc:	4419      	add	r1, r3
 8085bfe:	eb01 63fc 	add.w	r3, r1, ip, ror #27
 8085c02:	ea02 010a 	and.w	r1, r2, sl
 8085c06:	4301      	orrs	r1, r0
 8085c08:	4419      	add	r1, r3
    P( E, A, B, C, D, R(51) );
 8085c0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
 8085c0c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(51) );
 8085c10:	ea8b 0903 	eor.w	r9, fp, r3
 8085c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8085c16:	ea4f 00bc 	mov.w	r0, ip, ror #2
 8085c1a:	ea89 0903 	eor.w	r9, r9, r3
 8085c1e:	9b06      	ldr	r3, [sp, #24]
 8085c20:	ea89 0903 	eor.w	r9, r9, r3
 8085c24:	ea4c 0302 	orr.w	r3, ip, r2
 8085c28:	ea4f 7ef9 	mov.w	lr, r9, ror #31
 8085c2c:	ea03 050a 	and.w	r5, r3, sl
 8085c30:	ea0c 0302 	and.w	r3, ip, r2
 8085c34:	432b      	orrs	r3, r5
 8085c36:	eb0e 0506 	add.w	r5, lr, r6
 8085c3a:	4425      	add	r5, r4
 8085c3c:	441d      	add	r5, r3
    P( D, E, A, B, C, R(52) );
 8085c3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8085c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
 8085c42:	eb05 65f1 	add.w	r5, r5, r1, ror #27
    P( D, E, A, B, C, R(52) );
 8085c46:	4063      	eors	r3, r4
 8085c48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8085c4a:	4063      	eors	r3, r4
 8085c4c:	9c07      	ldr	r4, [sp, #28]
 8085c4e:	4063      	eors	r3, r4
 8085c50:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085c54:	9308      	str	r3, [sp, #32]
 8085c56:	4433      	add	r3, r6
 8085c58:	449a      	add	sl, r3
 8085c5a:	eb0a 63f5 	add.w	r3, sl, r5, ror #27
 8085c5e:	ea41 0a00 	orr.w	sl, r1, r0
 8085c62:	ea01 0400 	and.w	r4, r1, r0
 8085c66:	ea0a 0a02 	and.w	sl, sl, r2
 8085c6a:	ea4a 0a04 	orr.w	sl, sl, r4
 8085c6e:	449a      	add	sl, r3
    P( C, D, E, A, B, R(53) );
 8085c70:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8085c72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
 8085c74:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(53) );
 8085c78:	4063      	eors	r3, r4
 8085c7a:	9c02      	ldr	r4, [sp, #8]
 8085c7c:	4063      	eors	r3, r4
 8085c7e:	407b      	eors	r3, r7
 8085c80:	ea45 0401 	orr.w	r4, r5, r1
 8085c84:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085c88:	930e      	str	r3, [sp, #56]	; 0x38
 8085c8a:	4004      	ands	r4, r0
 8085c8c:	ea05 0301 	and.w	r3, r5, r1
 8085c90:	431c      	orrs	r4, r3
 8085c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8085c94:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8085c98:	4433      	add	r3, r6
 8085c9a:	4413      	add	r3, r2
 8085c9c:	4423      	add	r3, r4
    P( B, C, D, E, A, R(54) );
 8085c9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8085ca0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
 8085ca2:	eb03 63fa 	add.w	r3, r3, sl, ror #27
    P( B, C, D, E, A, R(54) );
 8085ca6:	ea82 0804 	eor.w	r8, r2, r4
 8085caa:	9a03      	ldr	r2, [sp, #12]
 8085cac:	ea88 0802 	eor.w	r8, r8, r2
 8085cb0:	ea88 080e 	eor.w	r8, r8, lr
 8085cb4:	ea4f 72f8 	mov.w	r2, r8, ror #31
 8085cb8:	eb02 0806 	add.w	r8, r2, r6
 8085cbc:	4480      	add	r8, r0
 8085cbe:	eb08 60f3 	add.w	r0, r8, r3, ror #27
 8085cc2:	ea4a 0805 	orr.w	r8, sl, r5
 8085cc6:	920f      	str	r2, [sp, #60]	; 0x3c
 8085cc8:	ea08 0801 	and.w	r8, r8, r1
 8085ccc:	ea0a 0205 	and.w	r2, sl, r5
 8085cd0:	ea48 0802 	orr.w	r8, r8, r2
 8085cd4:	4480      	add	r8, r0
    P( A, B, C, D, E, R(55) );
 8085cd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8085cd8:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
 8085cda:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(55) );
 8085cde:	ea82 0c00 	eor.w	ip, r2, r0
 8085ce2:	9a04      	ldr	r2, [sp, #16]
 8085ce4:	ea8c 0c02 	eor.w	ip, ip, r2
 8085ce8:	9a08      	ldr	r2, [sp, #32]
 8085cea:	ea8c 0c02 	eor.w	ip, ip, r2
 8085cee:	ea4f 72fc 	mov.w	r2, ip, ror #31
 8085cf2:	9210      	str	r2, [sp, #64]	; 0x40
 8085cf4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8085cf6:	ea43 020a 	orr.w	r2, r3, sl
 8085cfa:	ea02 0c05 	and.w	ip, r2, r5
 8085cfe:	ea03 020a 	and.w	r2, r3, sl
 8085d02:	ea4c 0202 	orr.w	r2, ip, r2
 8085d06:	eb00 0c06 	add.w	ip, r0, r6
 8085d0a:	448c      	add	ip, r1
    P( E, A, B, C, D, R(56) );
 8085d0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8085d0e:	4494      	add	ip, r2
 8085d10:	9a06      	ldr	r2, [sp, #24]
 8085d12:	404c      	eors	r4, r1
 8085d14:	4054      	eors	r4, r2
 8085d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 8085d18:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(56) );
 8085d1c:	4054      	eors	r4, r2
 8085d1e:	ea4f 72f4 	mov.w	r2, r4, ror #31
 8085d22:	9209      	str	r2, [sp, #36]	; 0x24
 8085d24:	4432      	add	r2, r6
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 8085d26:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8085d2a:	4415      	add	r5, r2
 8085d2c:	eb05 62fc 	add.w	r2, r5, ip, ror #27
    P( E, A, B, C, D, R(56) );
 8085d30:	ea48 0503 	orr.w	r5, r8, r3
 8085d34:	e002      	b.n	8085d3c <mbedtls_internal_sha1_process+0xb24>
 8085d36:	bf00      	nop
 8085d38:	8f1bbcdc 	.word	0x8f1bbcdc
 8085d3c:	ea08 0103 	and.w	r1, r8, r3
 8085d40:	ea05 050a 	and.w	r5, r5, sl
 8085d44:	430d      	orrs	r5, r1
 8085d46:	4415      	add	r5, r2
    P( D, E, A, B, C, R(57) );
 8085d48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
 8085d4c:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(57) );
 8085d50:	ea82 0b01 	eor.w	fp, r2, r1
 8085d54:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(58) );
 8085d56:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 8085d58:	ea8b 0b02 	eor.w	fp, fp, r2
 8085d5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8085d5e:	ea8b 0b02 	eor.w	fp, fp, r2
 8085d62:	ea4c 0208 	orr.w	r2, ip, r8
 8085d66:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8085d6a:	ea02 0903 	and.w	r9, r2, r3
 8085d6e:	ea0c 0208 	and.w	r2, ip, r8
 8085d72:	ea49 0202 	orr.w	r2, r9, r2
 8085d76:	eb0b 0906 	add.w	r9, fp, r6
 8085d7a:	44d1      	add	r9, sl
 8085d7c:	4491      	add	r9, r2
    P( C, D, E, A, B, R(58) );
 8085d7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 8085d80:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(58) );
 8085d84:	ea82 0a01 	eor.w	sl, r2, r1
 8085d88:	ea8a 0a07 	eor.w	sl, sl, r7
 8085d8c:	ea8a 0a00 	eor.w	sl, sl, r0
 8085d90:	ea4f 72fa 	mov.w	r2, sl, ror #31
 8085d94:	920a      	str	r2, [sp, #40]	; 0x28
 8085d96:	4432      	add	r2, r6
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 8085d98:	eb09 69f5 	add.w	r9, r9, r5, ror #27
    P( C, D, E, A, B, R(58) );
 8085d9c:	ea45 010c 	orr.w	r1, r5, ip
 8085da0:	441a      	add	r2, r3
 8085da2:	eb02 63f9 	add.w	r3, r2, r9, ror #27
 8085da6:	ea01 0108 	and.w	r1, r1, r8
 8085daa:	ea05 020c 	and.w	r2, r5, ip
 8085dae:	430a      	orrs	r2, r1
 8085db0:	441a      	add	r2, r3
    P( B, C, D, E, A, R(59) );
 8085db2:	9902      	ldr	r1, [sp, #8]
 8085db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
 8085db6:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( B, C, D, E, A, R(59) );
 8085dba:	ea83 0001 	eor.w	r0, r3, r1
 8085dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085dc0:	ea80 000e 	eor.w	r0, r0, lr
 8085dc4:	4058      	eors	r0, r3
 8085dc6:	ea4f 73f0 	mov.w	r3, r0, ror #31
 8085dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8085dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8085dce:	ea49 0005 	orr.w	r0, r9, r5
 8085dd2:	ea00 000c 	and.w	r0, r0, ip
 8085dd6:	ea09 0305 	and.w	r3, r9, r5
 8085dda:	440e      	add	r6, r1
 8085ddc:	4446      	add	r6, r8
 8085dde:	4303      	orrs	r3, r0
 8085de0:	1998      	adds	r0, r3, r6
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8085de2:	9903      	ldr	r1, [sp, #12]
 8085de4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8085de6:	4ed8      	ldr	r6, [pc, #864]	; (8086148 <mbedtls_internal_sha1_process+0xf30>)
 8085de8:	4059      	eors	r1, r3
 8085dea:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 8085dec:	ea4f 09b9 	mov.w	r9, r9, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8085df0:	4059      	eors	r1, r3
 8085df2:	ea81 010b 	eor.w	r1, r1, fp
 8085df6:	ea4f 73f1 	mov.w	r3, r1, ror #31
 8085dfa:	930c      	str	r3, [sp, #48]	; 0x30
 8085dfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085dfe:	ea85 0309 	eor.w	r3, r5, r9
 8085e02:	4431      	add	r1, r6
 8085e04:	4053      	eors	r3, r2
 8085e06:	4461      	add	r1, ip
 8085e08:	4419      	add	r1, r3
    P( E, A, B, C, D, R(61) );
 8085e0a:	9b02      	ldr	r3, [sp, #8]
 8085e0c:	9c04      	ldr	r4, [sp, #16]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 8085e0e:	eb00 60f2 	add.w	r0, r0, r2, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 8085e12:	4063      	eors	r3, r4
 8085e14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8085e16:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(61) );
 8085e1a:	4063      	eors	r3, r4
 8085e1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8085e1e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(61) );
 8085e22:	4063      	eors	r3, r4
 8085e24:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085e28:	9302      	str	r3, [sp, #8]
 8085e2a:	ea89 0402 	eor.w	r4, r9, r2
 8085e2e:	4433      	add	r3, r6
 8085e30:	4044      	eors	r4, r0
 8085e32:	442b      	add	r3, r5
 8085e34:	4423      	add	r3, r4
    P( D, E, A, B, C, R(62) );
 8085e36:	9d06      	ldr	r5, [sp, #24]
 8085e38:	9c03      	ldr	r4, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 8085e3a:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
 8085e3e:	ea84 0805 	eor.w	r8, r4, r5
 8085e42:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8085e44:	ea82 0500 	eor.w	r5, r2, r0
 8085e48:	ea88 0804 	eor.w	r8, r8, r4
 8085e4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8085e4e:	404d      	eors	r5, r1
 8085e50:	ea88 0804 	eor.w	r8, r8, r4
 8085e54:	ea4f 74f8 	mov.w	r4, r8, ror #31
 8085e58:	9403      	str	r4, [sp, #12]
 8085e5a:	4434      	add	r4, r6
 8085e5c:	444c      	add	r4, r9
 8085e5e:	442c      	add	r4, r5
    P( C, D, E, A, B, R(63) );
 8085e60:	9d04      	ldr	r5, [sp, #16]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 8085e62:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 8085e66:	46ac      	mov	ip, r5
 8085e68:	9d07      	ldr	r5, [sp, #28]
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 8085e6a:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(63) );
 8085e6e:	ea8c 0c05 	eor.w	ip, ip, r5
 8085e72:	9d10      	ldr	r5, [sp, #64]	; 0x40
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 8085e74:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(63) );
 8085e78:	ea8c 0c05 	eor.w	ip, ip, r5
 8085e7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8085e7e:	ea8c 0c05 	eor.w	ip, ip, r5
 8085e82:	ea4f 75fc 	mov.w	r5, ip, ror #31
 8085e86:	9504      	str	r5, [sp, #16]
 8085e88:	ea80 0501 	eor.w	r5, r0, r1
 8085e8c:	ea85 0c03 	eor.w	ip, r5, r3
 8085e90:	9d04      	ldr	r5, [sp, #16]
 8085e92:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8085e96:	eb05 0a06 	add.w	sl, r5, r6
 8085e9a:	4492      	add	sl, r2
    P( B, C, D, E, A, R(64) );
 8085e9c:	9a06      	ldr	r2, [sp, #24]
 8085e9e:	44e2      	add	sl, ip
 8085ea0:	ea82 0807 	eor.w	r8, r2, r7
 8085ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 8085ea6:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    P( B, C, D, E, A, R(64) );
 8085eaa:	ea88 0802 	eor.w	r8, r8, r2
 8085eae:	9a02      	ldr	r2, [sp, #8]
 8085eb0:	ea88 0802 	eor.w	r8, r8, r2
 8085eb4:	ea4f 72f8 	mov.w	r2, r8, ror #31
 8085eb8:	9206      	str	r2, [sp, #24]
 8085eba:	9d06      	ldr	r5, [sp, #24]
 8085ebc:	ea81 0203 	eor.w	r2, r1, r3
 8085ec0:	eb05 0806 	add.w	r8, r5, r6
 8085ec4:	4062      	eors	r2, r4
 8085ec6:	4480      	add	r8, r0
 8085ec8:	4490      	add	r8, r2
    P( A, B, C, D, E, R(65) );
 8085eca:	9a07      	ldr	r2, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 8085ecc:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(65) );
 8085ed0:	ea82 0c0e 	eor.w	ip, r2, lr
 8085ed4:	9a03      	ldr	r2, [sp, #12]
 8085ed6:	ea8c 0c0b 	eor.w	ip, ip, fp
 8085eda:	ea8c 0c02 	eor.w	ip, ip, r2
 8085ede:	ea4f 72fc 	mov.w	r2, ip, ror #31
 8085ee2:	9207      	str	r2, [sp, #28]
 8085ee4:	9807      	ldr	r0, [sp, #28]
 8085ee6:	ea83 0204 	eor.w	r2, r3, r4
 8085eea:	eb00 0c06 	add.w	ip, r0, r6
 8085eee:	ea82 020a 	eor.w	r2, r2, sl
 8085ef2:	448c      	add	ip, r1
 8085ef4:	4494      	add	ip, r2
    P( E, A, B, C, D, R(66) );
 8085ef6:	9a08      	ldr	r2, [sp, #32]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 8085ef8:	eb08 68fa 	add.w	r8, r8, sl, ror #27
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8085efc:	ea87 0502 	eor.w	r5, r7, r2
 8085f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 8085f02:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(66) );
 8085f06:	4055      	eors	r5, r2
 8085f08:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 8085f0a:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(66) );
 8085f0e:	4055      	eors	r5, r2
 8085f10:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8085f14:	19af      	adds	r7, r5, r6
 8085f16:	441f      	add	r7, r3
    P( D, E, A, B, C, R(67) );
 8085f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8085f1a:	ea84 020a 	eor.w	r2, r4, sl
 8085f1e:	ea8e 0903 	eor.w	r9, lr, r3
 8085f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8085f24:	ea82 0208 	eor.w	r2, r2, r8
 8085f28:	ea89 0903 	eor.w	r9, r9, r3
 8085f2c:	9b06      	ldr	r3, [sp, #24]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8085f2e:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(67) );
 8085f32:	ea89 0903 	eor.w	r9, r9, r3
 8085f36:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8085f3a:	ea8a 0308 	eor.w	r3, sl, r8
 8085f3e:	eb09 0e06 	add.w	lr, r9, r6
 8085f42:	ea83 030c 	eor.w	r3, r3, ip
 8085f46:	44a6      	add	lr, r4
 8085f48:	4417      	add	r7, r2
 8085f4a:	449e      	add	lr, r3
    P( C, D, E, A, B, R(68) );
 8085f4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8085f4e:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8085f50:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8085f54:	4053      	eors	r3, r2
 8085f56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 8085f58:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(68) );
 8085f5c:	4053      	eors	r3, r2
 8085f5e:	4043      	eors	r3, r0
 8085f60:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085f64:	9308      	str	r3, [sp, #32]
 8085f66:	9a08      	ldr	r2, [sp, #32]
 8085f68:	ea88 030c 	eor.w	r3, r8, ip
 8085f6c:	4432      	add	r2, r6
 8085f6e:	407b      	eors	r3, r7
 8085f70:	4452      	add	r2, sl
    P( B, C, D, E, A, R(69) );
 8085f72:	9910      	ldr	r1, [sp, #64]	; 0x40
 8085f74:	441a      	add	r2, r3
 8085f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 8085f78:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 8085f7c:	404b      	eors	r3, r1
 8085f7e:	9902      	ldr	r1, [sp, #8]
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8085f80:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( B, C, D, E, A, R(69) );
 8085f84:	404b      	eors	r3, r1
 8085f86:	406b      	eors	r3, r5
 8085f88:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085f8c:	930d      	str	r3, [sp, #52]	; 0x34
 8085f8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8085f90:	ea8c 0307 	eor.w	r3, ip, r7
 8085f94:	1988      	adds	r0, r1, r6
 8085f96:	ea83 030e 	eor.w	r3, r3, lr
 8085f9a:	4440      	add	r0, r8
    P( A, B, C, D, E, R(70) );
 8085f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8085f9e:	4418      	add	r0, r3
 8085fa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8085fa2:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8085fa6:	ea83 0801 	eor.w	r8, r3, r1
 8085faa:	9b03      	ldr	r3, [sp, #12]
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 8085fac:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, R(70) );
 8085fb0:	ea88 0803 	eor.w	r8, r8, r3
 8085fb4:	ea88 0809 	eor.w	r8, r8, r9
 8085fb8:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8085fbc:	ea87 030e 	eor.w	r3, r7, lr
 8085fc0:	eb08 0106 	add.w	r1, r8, r6
 8085fc4:	4053      	eors	r3, r2
 8085fc6:	4461      	add	r1, ip
 8085fc8:	4419      	add	r1, r3
    P( E, A, B, C, D, R(71) );
 8085fca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 8085fcc:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8085fd0:	ea83 0c0b 	eor.w	ip, r3, fp
 8085fd4:	9b04      	ldr	r3, [sp, #16]
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8085fd6:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(71) );
 8085fda:	ea8c 0c03 	eor.w	ip, ip, r3
 8085fde:	9b08      	ldr	r3, [sp, #32]
 8085fe0:	ea8e 0402 	eor.w	r4, lr, r2
 8085fe4:	ea8c 0c03 	eor.w	ip, ip, r3
 8085fe8:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8085fec:	eb0c 0306 	add.w	r3, ip, r6
 8085ff0:	4044      	eors	r4, r0
 8085ff2:	443b      	add	r3, r7
 8085ff4:	4423      	add	r3, r4
    P( D, E, A, B, C, R(72) );
 8085ff6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8085ff8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8085ffa:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8085ffe:	4067      	eors	r7, r4
 8086000:	9c06      	ldr	r4, [sp, #24]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8086002:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(72) );
 8086006:	4067      	eors	r7, r4
 8086008:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 808600a:	ea82 0a00 	eor.w	sl, r2, r0
 808600e:	4067      	eors	r7, r4
 8086010:	ea4f 74f7 	mov.w	r4, r7, ror #31
    P( C, D, E, A, B, R(73) );
 8086014:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8086016:	9409      	str	r4, [sp, #36]	; 0x24
 8086018:	4434      	add	r4, r6
 808601a:	4474      	add	r4, lr
    P( C, D, E, A, B, R(73) );
 808601c:	ea8b 0e07 	eor.w	lr, fp, r7
 8086020:	9f07      	ldr	r7, [sp, #28]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8086022:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8086026:	ea8e 0e07 	eor.w	lr, lr, r7
 808602a:	ea8e 0e08 	eor.w	lr, lr, r8
 808602e:	ea8a 0a01 	eor.w	sl, sl, r1
 8086032:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8086036:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 808603a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 808603c:	eb0e 0b06 	add.w	fp, lr, r6
 8086040:	4454      	add	r4, sl
 8086042:	ea80 0a01 	eor.w	sl, r0, r1
 8086046:	ea8a 0a03 	eor.w	sl, sl, r3
 808604a:	445a      	add	r2, fp
 808604c:	4452      	add	r2, sl
 808604e:	46ba      	mov	sl, r7
 8086050:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8086052:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8086056:	ea8a 0a07 	eor.w	sl, sl, r7
 808605a:	ea8a 0505 	eor.w	r5, sl, r5
 808605e:	ea85 050c 	eor.w	r5, r5, ip
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8086062:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(74) );
 8086066:	ea4f 75f5 	mov.w	r5, r5, ror #31
 808606a:	eb05 0b06 	add.w	fp, r5, r6
 808606e:	ea81 0a03 	eor.w	sl, r1, r3
 8086072:	4458      	add	r0, fp
 8086074:	ea8a 0a04 	eor.w	sl, sl, r4
    P( A, B, C, D, E, R(75) );
 8086078:	9f02      	ldr	r7, [sp, #8]
 808607a:	4482      	add	sl, r0
 808607c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 808607e:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8086082:	4078      	eors	r0, r7
 8086084:	ea80 0909 	eor.w	r9, r0, r9
 8086088:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 808608a:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(75) );
 808608e:	ea89 0700 	eor.w	r7, r9, r0
 8086092:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8086096:	eb07 0906 	add.w	r9, r7, r6
 808609a:	ea83 0004 	eor.w	r0, r3, r4
 808609e:	4449      	add	r1, r9
 80860a0:	4050      	eors	r0, r2
 80860a2:	4408      	add	r0, r1
    P( E, A, B, C, D, R(76) );
 80860a4:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80860a6:	950a      	str	r5, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80860a8:	460d      	mov	r5, r1
 80860aa:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80860ac:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80860b0:	4069      	eors	r1, r5
 80860b2:	9d08      	ldr	r5, [sp, #32]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80860b4:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(76) );
 80860b8:	4069      	eors	r1, r5
 80860ba:	ea81 0e0e 	eor.w	lr, r1, lr
 80860be:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80860c2:	eb0e 0906 	add.w	r9, lr, r6
 80860c6:	ea84 0102 	eor.w	r1, r4, r2
 80860ca:	444b      	add	r3, r9
 80860cc:	ea81 010a 	eor.w	r1, r1, sl
 80860d0:	9d04      	ldr	r5, [sp, #16]
 80860d2:	4419      	add	r1, r3
 80860d4:	9b02      	ldr	r3, [sp, #8]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80860d6:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 80860da:	406b      	eors	r3, r5
 80860dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(76) );
 80860de:	ea4f 0aba 	mov.w	sl, sl, ror #2
 80860e2:	406b      	eors	r3, r5
 80860e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80860e6:	ea82 090a 	eor.w	r9, r2, sl
 80860ea:	406b      	eors	r3, r5
 80860ec:	eb06 73f3 	add.w	r3, r6, r3, ror #31
 80860f0:	9d06      	ldr	r5, [sp, #24]
 80860f2:	441c      	add	r4, r3
 80860f4:	9b03      	ldr	r3, [sp, #12]
 80860f6:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80860fa:	406b      	eors	r3, r5
 80860fc:	ea83 0808 	eor.w	r8, r3, r8
 8086100:	ea89 0900 	eor.w	r9, r9, r0
 8086104:	ea88 0807 	eor.w	r8, r8, r7
    P( D, E, A, B, C, R(77) );
 8086108:	ea4f 00b0 	mov.w	r0, r0, ror #2
 808610c:	eb06 78f8 	add.w	r8, r6, r8, ror #31
 8086110:	ea8a 0500 	eor.w	r5, sl, r0
 8086114:	404d      	eors	r5, r1
 8086116:	4442      	add	r2, r8
 8086118:	442a      	add	r2, r5
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 808611a:	9b04      	ldr	r3, [sp, #16]
 808611c:	9d07      	ldr	r5, [sp, #28]
 808611e:	444c      	add	r4, r9
 8086120:	406b      	eors	r3, r5
 8086122:	ea83 0c0c 	eor.w	ip, r3, ip
 8086126:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 8086128:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 808612c:	441e      	add	r6, r3
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 808612e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8086132:	ea8c 0e0e 	eor.w	lr, ip, lr
 8086136:	ea80 0501 	eor.w	r5, r0, r1
 808613a:	eb06 7efe 	add.w	lr, r6, lr, ror #31
 808613e:	4065      	eors	r5, r4
 8086140:	44f2      	add	sl, lr
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 8086142:	eb02 62f4 	add.w	r2, r2, r4, ror #27
 8086146:	e001      	b.n	808614c <mbedtls_internal_sha1_process+0xf34>
 8086148:	ca62c1d6 	.word	0xca62c1d6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 808614c:	eb0a 0305 	add.w	r3, sl, r5
 8086150:	9d01      	ldr	r5, [sp, #4]
 8086152:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8086156:	60ab      	str	r3, [r5, #8]
    ctx->state[1] += B;
 8086158:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808615a:	441a      	add	r2, r3
    ctx->state[2] += C;
 808615c:	9b05      	ldr	r3, [sp, #20]

#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
 808615e:	60ea      	str	r2, [r5, #12]
    ctx->state[2] += C;
 8086160:	eb03 04b4 	add.w	r4, r3, r4, ror #2
    ctx->state[3] += D;
 8086164:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 8086166:	612c      	str	r4, [r5, #16]
    ctx->state[3] += D;
 8086168:	4419      	add	r1, r3
    ctx->state[4] += E;
 808616a:	9b15      	ldr	r3, [sp, #84]	; 0x54
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808616c:	6169      	str	r1, [r5, #20]
    ctx->state[4] += E;
 808616e:	4418      	add	r0, r3
 8086170:	61a8      	str	r0, [r5, #24]

    return( 0 );
}
 8086172:	2000      	movs	r0, #0
 8086174:	b017      	add	sp, #92	; 0x5c
 8086176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808617a:	bf00      	nop

0808617c <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 808617c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086180:	4604      	mov	r4, r0
 8086182:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 8086184:	4615      	mov	r5, r2
 8086186:	b382      	cbz	r2, 80861ea <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8086188:	6803      	ldr	r3, [r0, #0]
 808618a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 808618e:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 8086190:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8086192:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8086194:	bf82      	ittt	hi
 8086196:	6863      	ldrhi	r3, [r4, #4]
 8086198:	3301      	addhi	r3, #1
 808619a:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 808619c:	b180      	cbz	r0, 80861c0 <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 808619e:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80861a2:	42ba      	cmp	r2, r7
 80861a4:	d31b      	bcc.n	80861de <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80861a6:	f104 081c 	add.w	r8, r4, #28
 80861aa:	463a      	mov	r2, r7
 80861ac:	4440      	add	r0, r8
 80861ae:	f00c ff76 	bl	809309e <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80861b2:	4641      	mov	r1, r8
 80861b4:	4620      	mov	r0, r4
 80861b6:	f7ff f82f 	bl	8085218 <mbedtls_internal_sha1_process>
 80861ba:	b9b8      	cbnz	r0, 80861ec <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
 80861bc:	443e      	add	r6, r7
        ilen  -= fill;
 80861be:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 80861c0:	462f      	mov	r7, r5
 80861c2:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 80861c4:	2f3f      	cmp	r7, #63	; 0x3f
 80861c6:	4431      	add	r1, r6
 80861c8:	d905      	bls.n	80861d6 <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 80861ca:	4620      	mov	r0, r4
 80861cc:	f7ff f824 	bl	8085218 <mbedtls_internal_sha1_process>
 80861d0:	b960      	cbnz	r0, 80861ec <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 80861d2:	3f40      	subs	r7, #64	; 0x40
 80861d4:	e7f5      	b.n	80861c2 <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
 80861d6:	b147      	cbz	r7, 80861ea <mbedtls_sha1_update_ret+0x6e>
 80861d8:	463d      	mov	r5, r7
 80861da:	460e      	mov	r6, r1
 80861dc:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80861de:	341c      	adds	r4, #28
 80861e0:	462a      	mov	r2, r5
 80861e2:	4631      	mov	r1, r6
 80861e4:	4420      	add	r0, r4
 80861e6:	f00c ff5a 	bl	809309e <memcpy>

    return( 0 );
 80861ea:	2000      	movs	r0, #0
}
 80861ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080861f0 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 80861f0:	b570      	push	{r4, r5, r6, lr}
 80861f2:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80861f4:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 80861f6:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80861f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 80861fc:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 80861fe:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8086200:	4423      	add	r3, r4
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 8086202:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8086204:	771a      	strb	r2, [r3, #28]
 8086206:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
 808620a:	d804      	bhi.n	8086216 <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 808620c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8086210:	2100      	movs	r1, #0
 8086212:	4430      	add	r0, r6
 8086214:	e00e      	b.n	8086234 <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8086216:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 808621a:	2100      	movs	r1, #0
 808621c:	4430      	add	r0, r6
 808621e:	f00c ff64 	bl	80930ea <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8086222:	4631      	mov	r1, r6
 8086224:	4620      	mov	r0, r4
 8086226:	f7fe fff7 	bl	8085218 <mbedtls_internal_sha1_process>
 808622a:	2800      	cmp	r0, #0
 808622c:	d153      	bne.n	80862d6 <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 808622e:	4601      	mov	r1, r0
 8086230:	4630      	mov	r0, r6
 8086232:	2238      	movs	r2, #56	; 0x38
 8086234:	f00c ff59 	bl	80930ea <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8086238:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 808623a:	6861      	ldr	r1, [r4, #4]
 808623c:	0f5a      	lsrs	r2, r3, #29
 808623e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8086242:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 8086244:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8086246:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 808624a:	0c11      	lsrs	r1, r2, #16
 808624c:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 8086250:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 8086254:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8086256:	0e1a      	lsrs	r2, r3, #24
 8086258:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 808625c:	0c1a      	lsrs	r2, r3, #16
 808625e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8086262:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8086264:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8086268:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 808626c:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8086270:	4631      	mov	r1, r6
 8086272:	4620      	mov	r0, r4
 8086274:	f7fe ffd0 	bl	8085218 <mbedtls_internal_sha1_process>
 8086278:	2800      	cmp	r0, #0
 808627a:	d12c      	bne.n	80862d6 <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 808627c:	7ae3      	ldrb	r3, [r4, #11]
 808627e:	702b      	strb	r3, [r5, #0]
 8086280:	8963      	ldrh	r3, [r4, #10]
 8086282:	706b      	strb	r3, [r5, #1]
 8086284:	68a3      	ldr	r3, [r4, #8]
 8086286:	0a1b      	lsrs	r3, r3, #8
 8086288:	70ab      	strb	r3, [r5, #2]
 808628a:	68a3      	ldr	r3, [r4, #8]
 808628c:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 808628e:	7be3      	ldrb	r3, [r4, #15]
 8086290:	712b      	strb	r3, [r5, #4]
 8086292:	89e3      	ldrh	r3, [r4, #14]
 8086294:	716b      	strb	r3, [r5, #5]
 8086296:	68e3      	ldr	r3, [r4, #12]
 8086298:	0a1b      	lsrs	r3, r3, #8
 808629a:	71ab      	strb	r3, [r5, #6]
 808629c:	68e3      	ldr	r3, [r4, #12]
 808629e:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80862a0:	7ce3      	ldrb	r3, [r4, #19]
 80862a2:	722b      	strb	r3, [r5, #8]
 80862a4:	8a63      	ldrh	r3, [r4, #18]
 80862a6:	726b      	strb	r3, [r5, #9]
 80862a8:	6923      	ldr	r3, [r4, #16]
 80862aa:	0a1b      	lsrs	r3, r3, #8
 80862ac:	72ab      	strb	r3, [r5, #10]
 80862ae:	6923      	ldr	r3, [r4, #16]
 80862b0:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80862b2:	7de3      	ldrb	r3, [r4, #23]
 80862b4:	732b      	strb	r3, [r5, #12]
 80862b6:	8ae3      	ldrh	r3, [r4, #22]
 80862b8:	736b      	strb	r3, [r5, #13]
 80862ba:	6963      	ldr	r3, [r4, #20]
 80862bc:	0a1b      	lsrs	r3, r3, #8
 80862be:	73ab      	strb	r3, [r5, #14]
 80862c0:	6963      	ldr	r3, [r4, #20]
 80862c2:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80862c4:	7ee3      	ldrb	r3, [r4, #27]
 80862c6:	742b      	strb	r3, [r5, #16]
 80862c8:	8b63      	ldrh	r3, [r4, #26]
 80862ca:	746b      	strb	r3, [r5, #17]
 80862cc:	69a3      	ldr	r3, [r4, #24]
 80862ce:	0a1b      	lsrs	r3, r3, #8
 80862d0:	74ab      	strb	r3, [r5, #18]
 80862d2:	69a3      	ldr	r3, [r4, #24]
 80862d4:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
 80862d6:	bd70      	pop	{r4, r5, r6, pc}

080862d8 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 80862d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80862da:	b099      	sub	sp, #100	; 0x64
 80862dc:	4606      	mov	r6, r0
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 80862de:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 80862e0:	460f      	mov	r7, r1
 80862e2:	4615      	mov	r5, r2
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 80862e4:	f7fe ff6a 	bl	80851bc <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 80862e8:	a801      	add	r0, sp, #4
 80862ea:	f7fe ff7b 	bl	80851e4 <mbedtls_sha1_starts_ret>
 80862ee:	4604      	mov	r4, r0
 80862f0:	b958      	cbnz	r0, 808630a <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 80862f2:	463a      	mov	r2, r7
 80862f4:	4631      	mov	r1, r6
 80862f6:	a801      	add	r0, sp, #4
 80862f8:	f7ff ff40 	bl	808617c <mbedtls_sha1_update_ret>
 80862fc:	4604      	mov	r4, r0
 80862fe:	b920      	cbnz	r0, 808630a <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 8086300:	4629      	mov	r1, r5
 8086302:	a801      	add	r0, sp, #4
 8086304:	f7ff ff74 	bl	80861f0 <mbedtls_sha1_finish_ret>
 8086308:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 808630a:	a801      	add	r0, sp, #4
 808630c:	f7fe ff5a 	bl	80851c4 <mbedtls_sha1_free>

    return( ret );
}
 8086310:	4620      	mov	r0, r4
 8086312:	b019      	add	sp, #100	; 0x64
 8086314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086316 <mbedtls_timing_get_timer.part.0>:
    CloseHandle( CreateThread( NULL, 0, TimerProc, NULL, 0, &ThreadId ) );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
 8086316:	b513      	push	{r0, r1, r4, lr}
 8086318:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
 808631a:	2100      	movs	r1, #0
 808631c:	4668      	mov	r0, sp
 808631e:	f00c ff27 	bl	8093170 <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
 8086322:	9b00      	ldr	r3, [sp, #0]
 8086324:	6822      	ldr	r2, [r4, #0]
 8086326:	6861      	ldr	r1, [r4, #4]
 8086328:	1a9a      	subs	r2, r3, r2
 808632a:	9b01      	ldr	r3, [sp, #4]
 808632c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8086330:	1a5b      	subs	r3, r3, r1
 8086332:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
 8086336:	fb00 3002 	mla	r0, r0, r2, r3
 808633a:	b002      	add	sp, #8
 808633c:	bd10      	pop	{r4, pc}

0808633e <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
 808633e:	b538      	push	{r3, r4, r5, lr}
 8086340:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
 8086342:	f00a fa37 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
 8086346:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 8086348:	f00a fa3c 	bl	80907c4 <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 808634c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 8086350:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 8086352:	fbb5 f0f3 	udiv	r0, r5, r3
 8086356:	fb03 5010 	mls	r0, r3, r0, r5
 808635a:	4343      	muls	r3, r0
 808635c:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
 808635e:	2000      	movs	r0, #0
 8086360:	bd38      	pop	{r3, r4, r5, pc}
	...

08086364 <mbedtls_timing_hardclock>:

static int hardclock_init = 0;
static struct timeval tv_init;

unsigned long mbedtls_timing_hardclock( void )
{
 8086364:	b513      	push	{r0, r1, r4, lr}
    struct timeval tv_cur;

    if( hardclock_init == 0 )
 8086366:	4c0c      	ldr	r4, [pc, #48]	; (8086398 <mbedtls_timing_hardclock+0x34>)
 8086368:	6821      	ldr	r1, [r4, #0]
 808636a:	b921      	cbnz	r1, 8086376 <mbedtls_timing_hardclock+0x12>
    {
        gettimeofday( &tv_init, NULL );
 808636c:	480b      	ldr	r0, [pc, #44]	; (808639c <mbedtls_timing_hardclock+0x38>)
 808636e:	f00c feff 	bl	8093170 <gettimeofday>
        hardclock_init = 1;
 8086372:	2301      	movs	r3, #1
 8086374:	6023      	str	r3, [r4, #0]
    }

    gettimeofday( &tv_cur, NULL );
 8086376:	2100      	movs	r1, #0
 8086378:	4668      	mov	r0, sp
 808637a:	f00c fef9 	bl	8093170 <gettimeofday>
    return( ( tv_cur.tv_sec  - tv_init.tv_sec  ) * 1000000
 808637e:	4907      	ldr	r1, [pc, #28]	; (808639c <mbedtls_timing_hardclock+0x38>)
          + ( tv_cur.tv_usec - tv_init.tv_usec ) );
 8086380:	9b00      	ldr	r3, [sp, #0]
 8086382:	680a      	ldr	r2, [r1, #0]
 8086384:	6848      	ldr	r0, [r1, #4]
 8086386:	1a9a      	subs	r2, r3, r2
 8086388:	9b01      	ldr	r3, [sp, #4]
 808638a:	1a1b      	subs	r3, r3, r0
}
 808638c:	4804      	ldr	r0, [pc, #16]	; (80863a0 <mbedtls_timing_hardclock+0x3c>)
 808638e:	fb00 3002 	mla	r0, r0, r2, r3
 8086392:	b002      	add	sp, #8
 8086394:	bd10      	pop	{r4, pc}
 8086396:	bf00      	nop
 8086398:	20000f48 	.word	0x20000f48
 808639c:	20000f40 	.word	0x20000f40
 80863a0:	000f4240 	.word	0x000f4240

080863a4 <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
 80863a4:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
 80863a6:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
 80863a8:	b112      	cbz	r2, 80863b0 <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
 80863aa:	2100      	movs	r1, #0
 80863ac:	f00c bee0 	b.w	8093170 <gettimeofday>
 80863b0:	4770      	bx	lr

080863b2 <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 80863b2:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 80863b4:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 80863b6:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 80863b8:	b153      	cbz	r3, 80863d0 <mbedtls_timing_get_delay+0x1e>
 80863ba:	f7ff ffac 	bl	8086316 <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
 80863be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80863c0:	4283      	cmp	r3, r0
 80863c2:	d908      	bls.n	80863d6 <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
 80863c4:	6a23      	ldr	r3, [r4, #32]
 80863c6:	4283      	cmp	r3, r0
 80863c8:	bf8c      	ite	hi
 80863ca:	2000      	movhi	r0, #0
 80863cc:	2001      	movls	r0, #1
 80863ce:	bd10      	pop	{r4, pc}
 80863d0:	f04f 30ff 	mov.w	r0, #4294967295
 80863d4:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
 80863d6:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
 80863d8:	bd10      	pop	{r4, pc}

080863da <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 80863da:	b510      	push	{r4, lr}
 80863dc:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
 80863de:	f001 faed 	bl	80879bc <mbedtls_gcm_free>
    mbedtls_free( ctx );
 80863e2:	4620      	mov	r0, r4
}
 80863e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
 80863e8:	f00a bb74 	b.w	8090ad4 <free>

080863ec <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 80863ec:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 80863ee:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80863f2:	2001      	movs	r0, #1
 80863f4:	f00c fe2e 	bl	8093054 <calloc>

    if( ctx != NULL )
 80863f8:	4604      	mov	r4, r0
 80863fa:	b108      	cbz	r0, 8086400 <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 80863fc:	f001 f84c 	bl	8087498 <mbedtls_gcm_init>

    return( ctx );
}
 8086400:	4620      	mov	r0, r4
 8086402:	bd10      	pop	{r4, pc}

08086404 <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
 8086404:	4613      	mov	r3, r2
 8086406:	460a      	mov	r2, r1
 8086408:	2102      	movs	r1, #2
 808640a:	f001 b84a 	b.w	80874a2 <mbedtls_gcm_setkey>

0808640e <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 808640e:	b510      	push	{r4, lr}
 8086410:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8086412:	f006 fb9e 	bl	808cb52 <mbedtls_aes_free>
    mbedtls_free( ctx );
 8086416:	4620      	mov	r0, r4
}
 8086418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 808641c:	f00a bb5a 	b.w	8090ad4 <free>

08086420 <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 8086420:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8086422:	f44f 718c 	mov.w	r1, #280	; 0x118
 8086426:	2001      	movs	r0, #1
 8086428:	f00c fe14 	bl	8093054 <calloc>

    if( aes == NULL )
 808642c:	4604      	mov	r4, r0
 808642e:	b108      	cbz	r0, 8086434 <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 8086430:	f006 fb8a 	bl	808cb48 <mbedtls_aes_init>

    return( aes );
}
 8086434:	4620      	mov	r0, r4
 8086436:	bd10      	pop	{r4, pc}

08086438 <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8086438:	f006 bc92 	b.w	808cd60 <mbedtls_aes_setkey_dec>

0808643c <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 808643c:	f006 bb94 	b.w	808cb68 <mbedtls_aes_setkey_enc>

08086440 <_ZL18aes_crypt_cbc_wrapPv19mbedtls_operation_tjPhPKhS1_>:
}

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 8086440:	b410      	push	{r4}
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
}
 8086442:	bc10      	pop	{r4}
#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
 8086444:	f007 b8a2 	b.w	808d58c <mbedtls_aes_crypt_cbc>

08086448 <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8086448:	f007 b894 	b.w	808d574 <mbedtls_aes_crypt_ecb>

0808644c <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 808644c:	2801      	cmp	r0, #1
 808644e:	d002      	beq.n	8086456 <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
 8086450:	1f83      	subs	r3, r0, #6
 8086452:	4258      	negs	r0, r3
 8086454:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 8086456:	4770      	bx	lr

08086458 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8086458:	2301      	movs	r3, #1
    items->name = "rsa.N";
 808645a:	4a06      	ldr	r2, [pc, #24]	; (8086474 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 808645c:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 808645e:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 8086460:	4b05      	ldr	r3, [pc, #20]	; (8086478 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
 8086462:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8086464:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8086468:	3014      	adds	r0, #20

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 808646a:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
 808646c:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 808646e:	6148      	str	r0, [r1, #20]
 8086470:	4770      	bx	lr
 8086472:	bf00      	nop
 8086474:	0809432c 	.word	0x0809432c
 8086478:	08094332 	.word	0x08094332

0808647c <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
 808647c:	b510      	push	{r4, lr}
 808647e:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8086480:	f7fe fd50 	bl	8084f24 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 8086484:	4620      	mov	r0, r4
}
 8086486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
 808648a:	f00a bb23 	b.w	8090ad4 <free>

0808648e <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
 808648e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8086490:	21ac      	movs	r1, #172	; 0xac
 8086492:	2001      	movs	r0, #1
 8086494:	f00c fdde 	bl	8093054 <calloc>

    if( ctx != NULL )
 8086498:	4604      	mov	r4, r0
 808649a:	b118      	cbz	r0, 80864a4 <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 808649c:	2200      	movs	r2, #0
 808649e:	4611      	mov	r1, r2
 80864a0:	f7fd fd52 	bl	8083f48 <mbedtls_rsa_init>

    return( ctx );
}
 80864a4:	4620      	mov	r0, r4
 80864a6:	bd10      	pop	{r4, pc}

080864a8 <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
 80864a8:	f7fd bdb4 	b.w	8084014 <mbedtls_rsa_check_pub_priv>

080864ac <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
 80864ac:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 80864ae:	f7fd fd58 	bl	8083f62 <mbedtls_rsa_get_len>
}
 80864b2:	00c0      	lsls	r0, r0, #3
 80864b4:	bd08      	pop	{r3, pc}
	...

080864b8 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80864b8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80864bc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80864c0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80864c4:	4604      	mov	r4, r0
 80864c6:	4688      	mov	r8, r1
 80864c8:	4617      	mov	r7, r2
 80864ca:	4699      	mov	r9, r3
 80864cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80864ce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 80864d0:	f7fd fd47 	bl	8083f62 <mbedtls_rsa_get_len>

    if( *olen > osize )
 80864d4:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 80864d6:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
 80864da:	d80d      	bhi.n	80864f8 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 80864dc:	4632      	mov	r2, r6
 80864de:	4629      	mov	r1, r5
 80864e0:	4620      	mov	r0, r4
 80864e2:	2300      	movs	r3, #0
 80864e4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80864e8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80864ec:	970a      	str	r7, [sp, #40]	; 0x28
}
 80864ee:	b001      	add	sp, #4
 80864f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 80864f4:	f7fe b8aa 	b.w	808464c <mbedtls_rsa_pkcs1_encrypt>
}
 80864f8:	4801      	ldr	r0, [pc, #4]	; (8086500 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 80864fa:	b001      	add	sp, #4
 80864fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086500:	ffffbc00 	.word	0xffffbc00

08086504 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8086504:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086508:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 808650a:	4693      	mov	fp, r2
 808650c:	4604      	mov	r4, r0
 808650e:	4688      	mov	r8, r1
 8086510:	4699      	mov	r9, r3
 8086512:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8086516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8086518:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 808651a:	f7fd fd22 	bl	8083f62 <mbedtls_rsa_get_len>
 808651e:	4558      	cmp	r0, fp
 8086520:	d10f      	bne.n	8086542 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 8086522:	4632      	mov	r2, r6
 8086524:	4629      	mov	r1, r5
 8086526:	4620      	mov	r0, r4
 8086528:	2301      	movs	r3, #1
 808652a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 808652e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8086532:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8086536:	970a      	str	r7, [sp, #40]	; 0x28
}
 8086538:	b001      	add	sp, #4
 808653a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 808653e:	f7fe ba07 	b.w	8084950 <mbedtls_rsa_pkcs1_decrypt>
}
 8086542:	4802      	ldr	r0, [pc, #8]	; (808654c <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 8086544:	b001      	add	sp, #4
 8086546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808654a:	bf00      	nop
 808654c:	ffffbf80 	.word	0xffffbf80

08086550 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8086550:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086554:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8086558:	460f      	mov	r7, r1
 808655a:	4691      	mov	r9, r2
 808655c:	4698      	mov	r8, r3
 808655e:	4604      	mov	r4, r0
 8086560:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8086564:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8086566:	9e0d      	ldr	r6, [sp, #52]	; 0x34
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 8086568:	f7fd fcfb 	bl	8083f62 <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 808656c:	4632      	mov	r2, r6
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 808656e:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 8086572:	4629      	mov	r1, r5
 8086574:	4620      	mov	r0, r4
 8086576:	2301      	movs	r3, #1
 8086578:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 808657c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8086580:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8086584:	970a      	str	r7, [sp, #40]	; 0x28
}
 8086586:	b001      	add	sp, #4
 8086588:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 808658c:	f7fe bb30 	b.w	8084bf0 <mbedtls_rsa_pkcs1_sign>

08086590 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 8086590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086594:	b085      	sub	sp, #20
 8086596:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8086598:	4606      	mov	r6, r0
 808659a:	460f      	mov	r7, r1
 808659c:	4691      	mov	r9, r2
 808659e:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80865a0:	f7fd fcdf 	bl	8083f62 <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 80865a4:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80865a6:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 80865a8:	d810      	bhi.n	80865cc <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 80865aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80865ac:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 80865b0:	9303      	str	r3, [sp, #12]
 80865b2:	2300      	movs	r3, #0
 80865b4:	461a      	mov	r2, r3
 80865b6:	4619      	mov	r1, r3
 80865b8:	4630      	mov	r0, r6
 80865ba:	f7fe fc91 	bl	8084ee0 <mbedtls_rsa_pkcs1_verify>
 80865be:	b930      	cbnz	r0, 80865ce <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
 80865c0:	f5a0 5064 	sub.w	r0, r0, #14592	; 0x3900
 80865c4:	42a5      	cmp	r5, r4
 80865c6:	bf28      	it	cs
 80865c8:	2000      	movcs	r0, #0
 80865ca:	e000      	b.n	80865ce <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80865cc:	4801      	ldr	r0, [pc, #4]	; (80865d4 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
 80865ce:	b005      	add	sp, #20
 80865d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80865d4:	ffffbc80 	.word	0xffffbc80

080865d8 <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 80865d8:	4b05      	ldr	r3, [pc, #20]	; (80865f0 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
 80865da:	681a      	ldr	r2, [r3, #0]
 80865dc:	b11a      	cbz	r2, 80865e6 <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
 80865de:	4282      	cmp	r2, r0
 80865e0:	d003      	beq.n	80865ea <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
 80865e2:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 80865e4:	e7f9      	b.n	80865da <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
 80865e6:	4610      	mov	r0, r2
 80865e8:	4770      	bx	lr
 80865ea:	4618      	mov	r0, r3
}
 80865ec:	4770      	bx	lr
 80865ee:	bf00      	nop
 80865f0:	0809442c 	.word	0x0809442c

080865f4 <mbedtls_ssl_list_ciphersuites>:
                            sizeof( ciphersuite_definitions[0]  )
static int supported_ciphersuites[MAX_CIPHERSUITES];
static int supported_init = 0;

const int *mbedtls_ssl_list_ciphersuites( void )
{
 80865f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
 80865f6:	4b0d      	ldr	r3, [pc, #52]	; (808662c <mbedtls_ssl_list_ciphersuites+0x38>)
 80865f8:	681a      	ldr	r2, [r3, #0]
 80865fa:	461c      	mov	r4, r3
 80865fc:	b9a2      	cbnz	r2, 8086628 <mbedtls_ssl_list_ciphersuites+0x34>
 80865fe:	490c      	ldr	r1, [pc, #48]	; (8086630 <mbedtls_ssl_list_ciphersuites+0x3c>)
 8086600:	4e0c      	ldr	r6, [pc, #48]	; (8086634 <mbedtls_ssl_list_ciphersuites+0x40>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 8086602:	f101 0718 	add.w	r7, r1, #24
 8086606:	f856 5f04 	ldr.w	r5, [r6, #4]!
 808660a:	b14d      	cbz	r5, 8086620 <mbedtls_ssl_list_ciphersuites+0x2c>
 808660c:	42b9      	cmp	r1, r7
 808660e:	d207      	bcs.n	8086620 <mbedtls_ssl_list_ciphersuites+0x2c>
#if defined(MBEDTLS_REMOVE_ARC4_CIPHERSUITES)
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
                cs_info->cipher != MBEDTLS_CIPHER_ARC4_128 )
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
 8086610:	4628      	mov	r0, r5
 8086612:	f7ff ffe1 	bl	80865d8 <mbedtls_ssl_ciphersuite_from_id>
 8086616:	2800      	cmp	r0, #0
 8086618:	d0f5      	beq.n	8086606 <mbedtls_ssl_list_ciphersuites+0x12>
#endif
                *(q++) = *p;
 808661a:	600d      	str	r5, [r1, #0]
 808661c:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
 808661e:	e7f2      	b.n	8086606 <mbedtls_ssl_list_ciphersuites+0x12>
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
#endif
                *(q++) = *p;
        }
        *q = 0;
 8086620:	2300      	movs	r3, #0
 8086622:	600b      	str	r3, [r1, #0]

        supported_init = 1;
 8086624:	2301      	movs	r3, #1
 8086626:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
 8086628:	4801      	ldr	r0, [pc, #4]	; (8086630 <mbedtls_ssl_list_ciphersuites+0x3c>)
 808662a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808662c:	20000f4c 	.word	0x20000f4c
 8086630:	20000f50 	.word	0x20000f50
 8086634:	08094508 	.word	0x08094508

08086638 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 8086638:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 808663a:	b530      	push	{r4, r5, lr}
    *res = 0;
 808663c:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 808663e:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8086640:	b189      	cbz	r1, 8086666 <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 8086642:	6803      	ldr	r3, [r0, #0]
 8086644:	781b      	ldrb	r3, [r3, #0]
 8086646:	3b30      	subs	r3, #48	; 0x30
 8086648:	2b09      	cmp	r3, #9
 808664a:	d80e      	bhi.n	808666a <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 808664c:	6813      	ldr	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 808664e:	3901      	subs	r1, #1
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8086650:	436b      	muls	r3, r5
 8086652:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
 8086654:	6803      	ldr	r3, [r0, #0]
 8086656:	1c5c      	adds	r4, r3, #1
 8086658:	6004      	str	r4, [r0, #0]
 808665a:	781b      	ldrb	r3, [r3, #0]
 808665c:	6814      	ldr	r4, [r2, #0]
 808665e:	3b30      	subs	r3, #48	; 0x30
 8086660:	4423      	add	r3, r4
 8086662:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8086664:	e7ec      	b.n	8086640 <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 8086666:	4608      	mov	r0, r1
 8086668:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 808666a:	4801      	ldr	r0, [pc, #4]	; (8086670 <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
 808666c:	bd30      	pop	{r4, r5, pc}
 808666e:	bf00      	nop
 8086670:	ffffdc00 	.word	0xffffdc00

08086674 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8086674:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
 8086676:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8086678:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
 808667a:	1aca      	subs	r2, r1, r3
 808667c:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 808667e:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
 8086680:	dd17      	ble.n	80866b2 <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 8086682:	781a      	ldrb	r2, [r3, #0]
 8086684:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8086688:	2a02      	cmp	r2, #2
 808668a:	d114      	bne.n	80866b6 <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 808668c:	1c5a      	adds	r2, r3, #1
 808668e:	6002      	str	r2, [r0, #0]
 8086690:	462a      	mov	r2, r5
 8086692:	781b      	ldrb	r3, [r3, #0]
 8086694:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 8086698:	f7fd f82c 	bl	80836f4 <mbedtls_asn1_get_len>
 808669c:	b110      	cbz	r0, 80866a4 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 808669e:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 80866a2:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
 80866a4:	6823      	ldr	r3, [r4, #0]
 80866a6:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 80866a8:	6822      	ldr	r2, [r4, #0]
 80866aa:	686b      	ldr	r3, [r5, #4]
 80866ac:	4413      	add	r3, r2
 80866ae:	6023      	str	r3, [r4, #0]

    return( 0 );
 80866b0:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80866b2:	4802      	ldr	r0, [pc, #8]	; (80866bc <mbedtls_x509_get_serial+0x48>)
 80866b4:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80866b6:	4802      	ldr	r0, [pc, #8]	; (80866c0 <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
 80866b8:	bd38      	pop	{r3, r4, r5, pc}
 80866ba:	bf00      	nop
 80866bc:	ffffdd20 	.word	0xffffdd20
 80866c0:	ffffdd1e 	.word	0xffffdd1e

080866c4 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 80866c4:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 80866c6:	f7fd f940 	bl	808394a <mbedtls_asn1_get_alg>
 80866ca:	b108      	cbz	r0, 80866d0 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 80866cc:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
 80866d0:	bd08      	pop	{r3, pc}
	...

080866d4 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 80866d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80866d8:	4604      	mov	r4, r0
 80866da:	460f      	mov	r7, r1
 80866dc:	4691      	mov	r9, r2
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80866de:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80867c0 <mbedtls_x509_get_name+0xec>
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 80866e2:	2331      	movs	r3, #49	; 0x31
 80866e4:	466a      	mov	r2, sp
 80866e6:	4639      	mov	r1, r7
 80866e8:	4620      	mov	r0, r4
 80866ea:	f7fd f855 	bl	8083798 <mbedtls_asn1_get_tag>
 80866ee:	b110      	cbz	r0, 80866f6 <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80866f0:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 80866f4:	e05a      	b.n	80867ac <mbedtls_x509_get_name+0xd8>

        end_set  = *p + set_len;
 80866f6:	464d      	mov	r5, r9
 80866f8:	6826      	ldr	r6, [r4, #0]
 80866fa:	9b00      	ldr	r3, [sp, #0]
 80866fc:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80866fe:	2330      	movs	r3, #48	; 0x30
 8086700:	aa01      	add	r2, sp, #4
 8086702:	4631      	mov	r1, r6
 8086704:	4620      	mov	r0, r4
 8086706:	f7fd f847 	bl	8083798 <mbedtls_asn1_get_tag>
 808670a:	bb50      	cbnz	r0, 8086762 <mbedtls_x509_get_name+0x8e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    if( ( end - *p ) < 1 )
 808670c:	6823      	ldr	r3, [r4, #0]
 808670e:	1af2      	subs	r2, r6, r3
 8086710:	2a00      	cmp	r2, #0
 8086712:	dc01      	bgt.n	8086718 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086714:	4827      	ldr	r0, [pc, #156]	; (80867b4 <mbedtls_x509_get_name+0xe0>)
 8086716:	e049      	b.n	80867ac <mbedtls_x509_get_name+0xd8>

    oid = &cur->oid;
    oid->tag = **p;
 8086718:	462a      	mov	r2, r5
 808671a:	781b      	ldrb	r3, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 808671c:	4631      	mov	r1, r6
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
    oid->tag = **p;
 808671e:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8086722:	4620      	mov	r0, r4
 8086724:	2306      	movs	r3, #6
 8086726:	f7fd f837 	bl	8083798 <mbedtls_asn1_get_tag>
 808672a:	b9d0      	cbnz	r0, 8086762 <mbedtls_x509_get_name+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 808672c:	6823      	ldr	r3, [r4, #0]
    *p += oid->len;
 808672e:	6869      	ldr	r1, [r5, #4]
    oid->tag = **p;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 8086730:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
 8086732:	6820      	ldr	r0, [r4, #0]
 8086734:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
 8086736:	1af2      	subs	r2, r6, r3
 8086738:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
 808673a:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
 808673c:	ddea      	ble.n	8086714 <mbedtls_x509_get_name+0x40>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 808673e:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8086740:	2a1e      	cmp	r2, #30
 8086742:	d81a      	bhi.n	808677a <mbedtls_x509_get_name+0xa6>
 8086744:	fa28 f202 	lsr.w	r2, r8, r2
 8086748:	07d2      	lsls	r2, r2, #31
 808674a:	d516      	bpl.n	808677a <mbedtls_x509_get_name+0xa6>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 808674c:	3301      	adds	r3, #1
 808674e:	6023      	str	r3, [r4, #0]
 8086750:	5c43      	ldrb	r3, [r0, r1]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8086752:	f105 0210 	add.w	r2, r5, #16
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 8086756:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8086758:	4631      	mov	r1, r6
 808675a:	4620      	mov	r0, r4
 808675c:	f7fc ffca 	bl	80836f4 <mbedtls_asn1_get_len>
 8086760:	b118      	cbz	r0, 808676a <mbedtls_x509_get_name+0x96>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8086762:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8086766:	b150      	cbz	r0, 808677e <mbedtls_x509_get_name+0xaa>
 8086768:	e020      	b.n	80867ac <mbedtls_x509_get_name+0xd8>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
 808676a:	6823      	ldr	r3, [r4, #0]
 808676c:	616b      	str	r3, [r5, #20]
    *p += val->len;
 808676e:	6822      	ldr	r2, [r4, #0]
 8086770:	692b      	ldr	r3, [r5, #16]
 8086772:	4413      	add	r3, r2
 8086774:	6023      	str	r3, [r4, #0]

    cur->next = NULL;
 8086776:	61a8      	str	r0, [r5, #24]
 8086778:	e001      	b.n	808677e <mbedtls_x509_get_name+0xaa>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808677a:	480f      	ldr	r0, [pc, #60]	; (80867b8 <mbedtls_x509_get_name+0xe4>)
 808677c:	e016      	b.n	80867ac <mbedtls_x509_get_name+0xd8>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
 808677e:	6823      	ldr	r3, [r4, #0]
 8086780:	429e      	cmp	r6, r3
 8086782:	d008      	beq.n	8086796 <mbedtls_x509_get_name+0xc2>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 8086784:	2001      	movs	r0, #1
 8086786:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8086788:	2120      	movs	r1, #32
 808678a:	f00c fc63 	bl	8093054 <calloc>
 808678e:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
 8086790:	b158      	cbz	r0, 80867aa <mbedtls_x509_get_name+0xd6>
 8086792:	4605      	mov	r5, r0
 8086794:	e7b3      	b.n	80866fe <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 8086796:	42b7      	cmp	r7, r6
 8086798:	d008      	beq.n	80867ac <mbedtls_x509_get_name+0xd8>
            return( 0 );

        cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 808679a:	2120      	movs	r1, #32
 808679c:	2001      	movs	r0, #1
 808679e:	f00c fc59 	bl	8093054 <calloc>
 80867a2:	4681      	mov	r9, r0
 80867a4:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
 80867a6:	2800      	cmp	r0, #0
 80867a8:	d19b      	bne.n	80866e2 <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80867aa:	4804      	ldr	r0, [pc, #16]	; (80867bc <mbedtls_x509_get_name+0xe8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
 80867ac:	b003      	add	sp, #12
 80867ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80867b2:	bf00      	nop
 80867b4:	ffffdc20 	.word	0xffffdc20
 80867b8:	ffffdc1e 	.word	0xffffdc1e
 80867bc:	ffffd780 	.word	0xffffd780
 80867c0:	50581008 	.word	0x50581008

080867c4 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80867c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80867c6:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80867c8:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80867ca:	1aca      	subs	r2, r1, r3
 80867cc:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80867ce:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80867d0:	f340 80a1 	ble.w	8086916 <mbedtls_x509_get_time+0x152>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 80867d4:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 80867d6:	2a17      	cmp	r2, #23
 80867d8:	d004      	beq.n	80867e4 <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 80867da:	2a18      	cmp	r2, #24
 80867dc:	f040 809d 	bne.w	808691a <mbedtls_x509_get_time+0x156>
        year_len = 4;
 80867e0:	2704      	movs	r7, #4
 80867e2:	e000      	b.n	80867e6 <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
 80867e4:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80867e6:	3301      	adds	r3, #1
 80867e8:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 80867ea:	aa01      	add	r2, sp, #4
 80867ec:	4628      	mov	r0, r5
 80867ee:	f7fc ff81 	bl	80836f4 <mbedtls_asn1_get_len>

    if( ret != 0 )
 80867f2:	b110      	cbz	r0, 80867fa <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 80867f4:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
 80867f8:	e092      	b.n	8086920 <mbedtls_x509_get_time+0x15c>

    return x509_parse_time( p, len, year_len, tm );
 80867fa:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 80867fc:	f107 0308 	add.w	r3, r7, #8
 8086800:	429e      	cmp	r6, r3
 8086802:	f0c0 808c 	bcc.w	808691e <mbedtls_x509_get_time+0x15a>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 8086806:	4622      	mov	r2, r4
 8086808:	4639      	mov	r1, r7
 808680a:	4628      	mov	r0, r5
 808680c:	f7ff ff14 	bl	8086638 <_ZL14x509_parse_intPPhjPi>
 8086810:	2800      	cmp	r0, #0
 8086812:	f040 8085 	bne.w	8086920 <mbedtls_x509_get_time+0x15c>
    if ( 2 == yearlen )
 8086816:	2f02      	cmp	r7, #2
 8086818:	d108      	bne.n	808682c <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
 808681a:	6823      	ldr	r3, [r4, #0]
 808681c:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 808681e:	bfdc      	itt	le
 8086820:	3364      	addle	r3, #100	; 0x64
 8086822:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
 8086824:	6823      	ldr	r3, [r4, #0]
 8086826:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 808682a:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 808682c:	1d22      	adds	r2, r4, #4
 808682e:	2102      	movs	r1, #2
 8086830:	4628      	mov	r0, r5
 8086832:	f7ff ff01 	bl	8086638 <_ZL14x509_parse_intPPhjPi>
 8086836:	2800      	cmp	r0, #0
 8086838:	d172      	bne.n	8086920 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 808683a:	f104 0208 	add.w	r2, r4, #8
 808683e:	2102      	movs	r1, #2
 8086840:	4628      	mov	r0, r5
 8086842:	f7ff fef9 	bl	8086638 <_ZL14x509_parse_intPPhjPi>
 8086846:	2800      	cmp	r0, #0
 8086848:	d16a      	bne.n	8086920 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 808684a:	f104 020c 	add.w	r2, r4, #12
 808684e:	2102      	movs	r1, #2
 8086850:	4628      	mov	r0, r5
 8086852:	f7ff fef1 	bl	8086638 <_ZL14x509_parse_intPPhjPi>
 8086856:	2800      	cmp	r0, #0
 8086858:	d162      	bne.n	8086920 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 808685a:	f104 0210 	add.w	r2, r4, #16
 808685e:	2102      	movs	r1, #2
 8086860:	4628      	mov	r0, r5
 8086862:	f7ff fee9 	bl	8086638 <_ZL14x509_parse_intPPhjPi>
 8086866:	2800      	cmp	r0, #0
 8086868:	d15a      	bne.n	8086920 <mbedtls_x509_get_time+0x15c>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
 808686a:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 808686c:	f1a6 0308 	sub.w	r3, r6, #8
 8086870:	2b01      	cmp	r3, #1
 8086872:	d954      	bls.n	808691e <mbedtls_x509_get_time+0x15a>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 8086874:	f104 0214 	add.w	r2, r4, #20
 8086878:	2102      	movs	r1, #2
 808687a:	4628      	mov	r0, r5
 808687c:	f7ff fedc 	bl	8086638 <_ZL14x509_parse_intPPhjPi>
 8086880:	2800      	cmp	r0, #0
 8086882:	d14d      	bne.n	8086920 <mbedtls_x509_get_time+0x15c>
        len -= 2;
 8086884:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 8086888:	2b01      	cmp	r3, #1
 808688a:	d107      	bne.n	808689c <mbedtls_x509_get_time+0xd8>
 808688c:	682b      	ldr	r3, [r5, #0]
 808688e:	781a      	ldrb	r2, [r3, #0]
 8086890:	2a5a      	cmp	r2, #90	; 0x5a
 8086892:	d144      	bne.n	808691e <mbedtls_x509_get_time+0x15a>
    {
        (*p)++;
 8086894:	3301      	adds	r3, #1
 8086896:	602b      	str	r3, [r5, #0]
        len--;
 8086898:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 808689c:	2b00      	cmp	r3, #0
 808689e:	d13e      	bne.n	808691e <mbedtls_x509_get_time+0x15a>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 80868a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80868a4:	6823      	ldr	r3, [r4, #0]
 80868a6:	4293      	cmp	r3, r2
 80868a8:	d839      	bhi.n	808691e <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 23,   t->hour );
 80868aa:	68e2      	ldr	r2, [r4, #12]
 80868ac:	2a17      	cmp	r2, #23
 80868ae:	d836      	bhi.n	808691e <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->min  );
 80868b0:	6922      	ldr	r2, [r4, #16]
 80868b2:	2a3b      	cmp	r2, #59	; 0x3b
 80868b4:	d833      	bhi.n	808691e <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->sec  );
 80868b6:	6962      	ldr	r2, [r4, #20]
 80868b8:	2a3b      	cmp	r2, #59	; 0x3b
 80868ba:	d830      	bhi.n	808691e <mbedtls_x509_get_time+0x15a>
 80868bc:	6861      	ldr	r1, [r4, #4]
 80868be:	290c      	cmp	r1, #12
 80868c0:	d82d      	bhi.n	808691e <mbedtls_x509_get_time+0x15a>
 80868c2:	2201      	movs	r2, #1
 80868c4:	408a      	lsls	r2, r1
 80868c6:	f241 51aa 	movw	r1, #5546	; 0x15aa
 80868ca:	4011      	ands	r1, r2
 80868cc:	b9b9      	cbnz	r1, 80868fe <mbedtls_x509_get_time+0x13a>
 80868ce:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 80868d2:	d116      	bne.n	8086902 <mbedtls_x509_get_time+0x13e>
 80868d4:	0751      	lsls	r1, r2, #29
 80868d6:	d522      	bpl.n	808691e <mbedtls_x509_get_time+0x15a>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 80868d8:	079a      	lsls	r2, r3, #30
 80868da:	d105      	bne.n	80868e8 <mbedtls_x509_get_time+0x124>
 80868dc:	2164      	movs	r1, #100	; 0x64
 80868de:	fb93 f2f1 	sdiv	r2, r3, r1
 80868e2:	fb01 3212 	mls	r2, r1, r2, r3
 80868e6:	b972      	cbnz	r2, 8086906 <mbedtls_x509_get_time+0x142>
 80868e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80868ec:	fb93 f2f1 	sdiv	r2, r3, r1
 80868f0:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
 80868f4:	2b00      	cmp	r3, #0
 80868f6:	bf0c      	ite	eq
 80868f8:	231d      	moveq	r3, #29
 80868fa:	231c      	movne	r3, #28
 80868fc:	e004      	b.n	8086908 <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 80868fe:	231f      	movs	r3, #31
 8086900:	e002      	b.n	8086908 <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
 8086902:	231e      	movs	r3, #30
 8086904:	e000      	b.n	8086908 <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
 8086906:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
 8086908:	68a2      	ldr	r2, [r4, #8]
 808690a:	2a00      	cmp	r2, #0
 808690c:	dd07      	ble.n	808691e <mbedtls_x509_get_time+0x15a>
 808690e:	429a      	cmp	r2, r3
 8086910:	dc05      	bgt.n	808691e <mbedtls_x509_get_time+0x15a>
    if ( 0 != len )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    CHECK( x509_date_is_valid( tm ) );

    return ( 0 );
 8086912:	2000      	movs	r0, #0
 8086914:	e004      	b.n	8086920 <mbedtls_x509_get_time+0x15c>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086916:	4803      	ldr	r0, [pc, #12]	; (8086924 <mbedtls_x509_get_time+0x160>)
 8086918:	e002      	b.n	8086920 <mbedtls_x509_get_time+0x15c>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808691a:	4803      	ldr	r0, [pc, #12]	; (8086928 <mbedtls_x509_get_time+0x164>)
 808691c:	e000      	b.n	8086920 <mbedtls_x509_get_time+0x15c>

        tm->year += 1900;
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 808691e:	4803      	ldr	r0, [pc, #12]	; (808692c <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
 8086920:	b003      	add	sp, #12
 8086922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086924:	ffffdba0 	.word	0xffffdba0
 8086928:	ffffdb9e 	.word	0xffffdb9e
 808692c:	ffffdc00 	.word	0xffffdc00

08086930 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8086930:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8086932:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8086934:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8086936:	1aca      	subs	r2, r1, r3
 8086938:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 808693a:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 808693c:	dd10      	ble.n	8086960 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 808693e:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 8086940:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8086942:	f7fc ffb2 	bl	80838aa <mbedtls_asn1_get_bitstring_null>
 8086946:	b110      	cbz	r0, 808694e <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 8086948:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
 808694c:	e009      	b.n	8086962 <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
 808694e:	9b01      	ldr	r3, [sp, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
 8086950:	602e      	str	r6, [r5, #0]
    sig->len = len;
 8086952:	606b      	str	r3, [r5, #4]
    sig->p = *p;
 8086954:	6822      	ldr	r2, [r4, #0]
 8086956:	60aa      	str	r2, [r5, #8]

    *p += len;
 8086958:	6822      	ldr	r2, [r4, #0]
 808695a:	4413      	add	r3, r2
 808695c:	6023      	str	r3, [r4, #0]

    return( 0 );
 808695e:	e000      	b.n	8086962 <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086960:	4801      	ldr	r0, [pc, #4]	; (8086968 <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
 8086962:	b002      	add	sp, #8
 8086964:	bd70      	pop	{r4, r5, r6, pc}
 8086966:	bf00      	nop
 8086968:	ffffdb20 	.word	0xffffdb20

0808696c <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 808696c:	b510      	push	{r4, lr}
 808696e:	460c      	mov	r4, r1
 8086970:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 8086972:	9a02      	ldr	r2, [sp, #8]
 8086974:	6812      	ldr	r2, [r2, #0]
 8086976:	b982      	cbnz	r2, 808699a <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 8086978:	461a      	mov	r2, r3
 808697a:	f7fe fb91 	bl	80850a0 <mbedtls_oid_get_sig_alg>
 808697e:	b110      	cbz	r0, 8086986 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 8086980:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 8086984:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 8086986:	6823      	ldr	r3, [r4, #0]
 8086988:	2b05      	cmp	r3, #5
 808698a:	d000      	beq.n	808698e <mbedtls_x509_get_sig_alg+0x22>
 808698c:	b93b      	cbnz	r3, 808699e <mbedtls_x509_get_sig_alg+0x32>
 808698e:	6863      	ldr	r3, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
 8086990:	4804      	ldr	r0, [pc, #16]	; (80869a4 <mbedtls_x509_get_sig_alg+0x38>)
 8086992:	2b00      	cmp	r3, #0
 8086994:	bf08      	it	eq
 8086996:	2000      	moveq	r0, #0
 8086998:	bd10      	pop	{r4, pc}
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 808699a:	4803      	ldr	r0, [pc, #12]	; (80869a8 <mbedtls_x509_get_sig_alg+0x3c>)
 808699c:	bd10      	pop	{r4, pc}
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 808699e:	4801      	ldr	r0, [pc, #4]	; (80869a4 <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
 80869a0:	bd10      	pop	{r4, pc}
 80869a2:	bf00      	nop
 80869a4:	ffffdd00 	.word	0xffffdd00
 80869a8:	ffffd800 	.word	0xffffd800

080869ac <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 80869ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80869ae:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 80869b0:	6802      	ldr	r2, [r0, #0]
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 80869b2:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( *p == end )
 80869b4:	428a      	cmp	r2, r1
 80869b6:	d01c      	beq.n	80869f2 <mbedtls_x509_get_ext+0x46>
        return( 0 );

    ext->tag = **p;
 80869b8:	7815      	ldrb	r5, [r2, #0]
 80869ba:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 80869bc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    size_t len;

    if( *p == end )
        return( 0 );

    ext->tag = **p;
 80869c0:	f842 5b04 	str.w	r5, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 80869c4:	f7fc fee8 	bl	8083798 <mbedtls_asn1_get_tag>
 80869c8:	b9b0      	cbnz	r0, 80869f8 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 80869ca:	6823      	ldr	r3, [r4, #0]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80869cc:	aa01      	add	r2, sp, #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 80869ce:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 80869d0:	6825      	ldr	r5, [r4, #0]
 80869d2:	6873      	ldr	r3, [r6, #4]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80869d4:	4620      	mov	r0, r4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
    end = *p + ext->len;
 80869d6:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80869d8:	4629      	mov	r1, r5
 80869da:	2330      	movs	r3, #48	; 0x30
 80869dc:	f7fc fedc 	bl	8083798 <mbedtls_asn1_get_tag>
 80869e0:	b110      	cbz	r0, 80869e8 <mbedtls_x509_get_ext+0x3c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80869e2:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 80869e6:	e007      	b.n	80869f8 <mbedtls_x509_get_ext+0x4c>

    if( end != *p + len )
 80869e8:	6822      	ldr	r2, [r4, #0]
 80869ea:	9b01      	ldr	r3, [sp, #4]
 80869ec:	4413      	add	r3, r2
 80869ee:	429d      	cmp	r5, r3
 80869f0:	d101      	bne.n	80869f6 <mbedtls_x509_get_ext+0x4a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80869f2:	2000      	movs	r0, #0
 80869f4:	e000      	b.n	80869f8 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80869f6:	4801      	ldr	r0, [pc, #4]	; (80869fc <mbedtls_x509_get_ext+0x50>)

    return( 0 );
}
 80869f8:	b002      	add	sp, #8
 80869fa:	bd70      	pop	{r4, r5, r6, pc}
 80869fc:	ffffda9a 	.word	0xffffda9a

08086a00 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8086a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086a04:	460f      	mov	r7, r1
 8086a06:	4691      	mov	r9, r2

    memset( s, 0, sizeof( s ) );

    name = dn;
    p = buf;
    n = size;
 8086a08:	463d      	mov	r5, r7
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
 8086a0a:	464e      	mov	r6, r9
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8086a0c:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 8086a0e:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8086a12:	f10d 0808 	add.w	r8, sp, #8
 8086a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8086a1a:	4651      	mov	r1, sl
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8086a1c:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8086a1e:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 8086a20:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8086a24:	f00c fb61 	bl	80930ea <memset>
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
 8086a28:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
 8086a2a:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
 8086a2e:	2e00      	cmp	r6, #0
 8086a30:	d057      	beq.n	8086ae2 <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
 8086a32:	68b3      	ldr	r3, [r6, #8]
 8086a34:	2b00      	cmp	r3, #0
 8086a36:	d052      	beq.n	8086ade <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
 8086a38:	454e      	cmp	r6, r9
 8086a3a:	d011      	beq.n	8086a60 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 8086a3c:	4b2b      	ldr	r3, [pc, #172]	; (8086aec <mbedtls_x509_dn_gets+0xec>)
 8086a3e:	492c      	ldr	r1, [pc, #176]	; (8086af0 <mbedtls_x509_dn_gets+0xf0>)
 8086a40:	4620      	mov	r0, r4
 8086a42:	2a00      	cmp	r2, #0
 8086a44:	bf14      	ite	ne
 8086a46:	460a      	movne	r2, r1
 8086a48:	461a      	moveq	r2, r3
 8086a4a:	4629      	mov	r1, r5
 8086a4c:	f00a f852 	bl	8090af4 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8086a50:	2800      	cmp	r0, #0
 8086a52:	da01      	bge.n	8086a58 <mbedtls_x509_dn_gets+0x58>
 8086a54:	4827      	ldr	r0, [pc, #156]	; (8086af4 <mbedtls_x509_dn_gets+0xf4>)
 8086a56:	e045      	b.n	8086ae4 <mbedtls_x509_dn_gets+0xe4>
 8086a58:	4285      	cmp	r5, r0
 8086a5a:	d9fb      	bls.n	8086a54 <mbedtls_x509_dn_gets+0x54>
 8086a5c:	1a2d      	subs	r5, r5, r0
 8086a5e:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 8086a60:	a901      	add	r1, sp, #4
 8086a62:	4630      	mov	r0, r6
 8086a64:	f7fe fac2 	bl	8084fec <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
 8086a68:	b930      	cbnz	r0, 8086a78 <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 8086a6a:	9b01      	ldr	r3, [sp, #4]
 8086a6c:	4a22      	ldr	r2, [pc, #136]	; (8086af8 <mbedtls_x509_dn_gets+0xf8>)
 8086a6e:	4629      	mov	r1, r5
 8086a70:	4620      	mov	r0, r4
 8086a72:	f00a f83f 	bl	8090af4 <snprintf>
 8086a76:	e004      	b.n	8086a82 <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 8086a78:	4a20      	ldr	r2, [pc, #128]	; (8086afc <mbedtls_x509_dn_gets+0xfc>)
 8086a7a:	4629      	mov	r1, r5
 8086a7c:	4620      	mov	r0, r4
 8086a7e:	f00a f839 	bl	8090af4 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086a82:	2800      	cmp	r0, #0
 8086a84:	dbe6      	blt.n	8086a54 <mbedtls_x509_dn_gets+0x54>
 8086a86:	4285      	cmp	r5, r0
 8086a88:	d9e4      	bls.n	8086a54 <mbedtls_x509_dn_gets+0x54>
 8086a8a:	1a2d      	subs	r5, r5, r0
 8086a8c:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
 8086a8e:	2300      	movs	r3, #0
 8086a90:	6932      	ldr	r2, [r6, #16]
 8086a92:	4293      	cmp	r3, r2
 8086a94:	d213      	bcs.n	8086abe <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
 8086a96:	2bff      	cmp	r3, #255	; 0xff
 8086a98:	d011      	beq.n	8086abe <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
 8086a9a:	6972      	ldr	r2, [r6, #20]
 8086a9c:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 8086a9e:	2a1f      	cmp	r2, #31
 8086aa0:	d906      	bls.n	8086ab0 <mbedtls_x509_dn_gets+0xb0>
 8086aa2:	2a7f      	cmp	r2, #127	; 0x7f
 8086aa4:	d004      	beq.n	8086ab0 <mbedtls_x509_dn_gets+0xb0>
 8086aa6:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 8086aaa:	b2c9      	uxtb	r1, r1
 8086aac:	291e      	cmp	r1, #30
 8086aae:	d802      	bhi.n	8086ab6 <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
 8086ab0:	f808 a003 	strb.w	sl, [r8, r3]
 8086ab4:	e001      	b.n	8086aba <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
 8086ab6:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
 8086aba:	3301      	adds	r3, #1
 8086abc:	e7e8      	b.n	8086a90 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
 8086abe:	2200      	movs	r2, #0
 8086ac0:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 8086ac4:	4629      	mov	r1, r5
 8086ac6:	4643      	mov	r3, r8
 8086ac8:	4a0d      	ldr	r2, [pc, #52]	; (8086b00 <mbedtls_x509_dn_gets+0x100>)
 8086aca:	4620      	mov	r0, r4
 8086acc:	f00a f812 	bl	8090af4 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086ad0:	2800      	cmp	r0, #0
 8086ad2:	dbbf      	blt.n	8086a54 <mbedtls_x509_dn_gets+0x54>
 8086ad4:	4285      	cmp	r5, r0
 8086ad6:	d9bd      	bls.n	8086a54 <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
 8086ad8:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086ada:	1a2d      	subs	r5, r5, r0
 8086adc:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
 8086ade:	69b6      	ldr	r6, [r6, #24]
 8086ae0:	e7a5      	b.n	8086a2e <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
 8086ae2:	1b78      	subs	r0, r7, r5
}
 8086ae4:	b042      	add	sp, #264	; 0x108
 8086ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086aea:	bf00      	nop
 8086aec:	0809479c 	.word	0x0809479c
 8086af0:	08094798 	.word	0x08094798
 8086af4:	ffffd680 	.word	0xffffd680
 8086af8:	0809479f 	.word	0x0809479f
 8086afc:	080947a3 	.word	0x080947a3
 8086b00:	08094b2e 	.word	0x08094b2e

08086b04 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 8086b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086b08:	4680      	mov	r8, r0
 8086b0a:	460f      	mov	r7, r1
 8086b0c:	4691      	mov	r9, r2
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
 8086b0e:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
 8086b10:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8086b12:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8086b90 <mbedtls_x509_serial_gets+0x8c>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 8086b16:	2e21      	cmp	r6, #33	; 0x21
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8086b18:	f8df b078 	ldr.w	fp, [pc, #120]	; 8086b94 <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 8086b1c:	bf28      	it	cs
 8086b1e:	261c      	movcs	r6, #28

    for( i = 0; i < nr; i++ )
 8086b20:	2500      	movs	r5, #0
 8086b22:	42b5      	cmp	r5, r6
 8086b24:	d01c      	beq.n	8086b60 <mbedtls_x509_serial_gets+0x5c>
 8086b26:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 8086b2a:	b91d      	cbnz	r5, 8086b34 <mbedtls_x509_serial_gets+0x30>
 8086b2c:	2e01      	cmp	r6, #1
 8086b2e:	d001      	beq.n	8086b34 <mbedtls_x509_serial_gets+0x30>
 8086b30:	781a      	ldrb	r2, [r3, #0]
 8086b32:	b19a      	cbz	r2, 8086b5c <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8086b34:	1e72      	subs	r2, r6, #1
 8086b36:	4295      	cmp	r5, r2
 8086b38:	bf34      	ite	cc
 8086b3a:	4652      	movcc	r2, sl
 8086b3c:	465a      	movcs	r2, fp
 8086b3e:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 8086b40:	4621      	mov	r1, r4
 8086b42:	9200      	str	r2, [sp, #0]
 8086b44:	4640      	mov	r0, r8
 8086b46:	4a0f      	ldr	r2, [pc, #60]	; (8086b84 <mbedtls_x509_serial_gets+0x80>)
 8086b48:	f009 ffd4 	bl	8090af4 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086b4c:	2800      	cmp	r0, #0
 8086b4e:	da01      	bge.n	8086b54 <mbedtls_x509_serial_gets+0x50>
 8086b50:	480d      	ldr	r0, [pc, #52]	; (8086b88 <mbedtls_x509_serial_gets+0x84>)
 8086b52:	e014      	b.n	8086b7e <mbedtls_x509_serial_gets+0x7a>
 8086b54:	4284      	cmp	r4, r0
 8086b56:	d9fb      	bls.n	8086b50 <mbedtls_x509_serial_gets+0x4c>
 8086b58:	1a24      	subs	r4, r4, r0
 8086b5a:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
 8086b5c:	3501      	adds	r5, #1
 8086b5e:	e7e0      	b.n	8086b22 <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
 8086b60:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8086b64:	429d      	cmp	r5, r3
 8086b66:	d009      	beq.n	8086b7c <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 8086b68:	4a08      	ldr	r2, [pc, #32]	; (8086b8c <mbedtls_x509_serial_gets+0x88>)
 8086b6a:	4621      	mov	r1, r4
 8086b6c:	4640      	mov	r0, r8
 8086b6e:	f009 ffc1 	bl	8090af4 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086b72:	2800      	cmp	r0, #0
 8086b74:	dbec      	blt.n	8086b50 <mbedtls_x509_serial_gets+0x4c>
 8086b76:	4284      	cmp	r4, r0
 8086b78:	d9ea      	bls.n	8086b50 <mbedtls_x509_serial_gets+0x4c>
 8086b7a:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 8086b7c:	1b38      	subs	r0, r7, r4
}
 8086b7e:	b003      	add	sp, #12
 8086b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086b84:	080947a9 	.word	0x080947a9
 8086b88:	ffffd680 	.word	0xffffd680
 8086b8c:	080947b0 	.word	0x080947b0
 8086b90:	080947a7 	.word	0x080947a7
 8086b94:	080938f0 	.word	0x080938f0

08086b98 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 8086b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 8086b9a:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 8086b9c:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 8086b9e:	a902      	add	r1, sp, #8
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 8086ba0:	4605      	mov	r5, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 8086ba2:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 8086ba6:	4610      	mov	r0, r2
 8086ba8:	f7fe fa6e 	bl	8085088 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 8086bac:	b128      	cbz	r0, 8086bba <mbedtls_x509_sig_alg_gets+0x22>
        ret = mbedtls_snprintf( p, n, "???"  );
 8086bae:	4a0b      	ldr	r2, [pc, #44]	; (8086bdc <mbedtls_x509_sig_alg_gets+0x44>)
 8086bb0:	4621      	mov	r1, r4
 8086bb2:	4628      	mov	r0, r5
 8086bb4:	f009 ff9e 	bl	8090af4 <snprintf>
 8086bb8:	e005      	b.n	8086bc6 <mbedtls_x509_sig_alg_gets+0x2e>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 8086bba:	9b01      	ldr	r3, [sp, #4]
 8086bbc:	4a08      	ldr	r2, [pc, #32]	; (8086be0 <mbedtls_x509_sig_alg_gets+0x48>)
 8086bbe:	4621      	mov	r1, r4
 8086bc0:	4628      	mov	r0, r5
 8086bc2:	f009 ff97 	bl	8090af4 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086bc6:	2800      	cmp	r0, #0
 8086bc8:	db04      	blt.n	8086bd4 <mbedtls_x509_sig_alg_gets+0x3c>
 8086bca:	4b06      	ldr	r3, [pc, #24]	; (8086be4 <mbedtls_x509_sig_alg_gets+0x4c>)
 8086bcc:	4284      	cmp	r4, r0
 8086bce:	bf98      	it	ls
 8086bd0:	4618      	movls	r0, r3
 8086bd2:	e000      	b.n	8086bd6 <mbedtls_x509_sig_alg_gets+0x3e>
 8086bd4:	4803      	ldr	r0, [pc, #12]	; (8086be4 <mbedtls_x509_sig_alg_gets+0x4c>)
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
 8086bd6:	b003      	add	sp, #12
 8086bd8:	bd30      	pop	{r4, r5, pc}
 8086bda:	bf00      	nop
 8086bdc:	080947b5 	.word	0x080947b5
 8086be0:	08094b2e 	.word	0x08094b2e
 8086be4:	ffffd680 	.word	0xffffd680

08086be8 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 8086be8:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 8086bea:	4613      	mov	r3, r2
 8086bec:	4a06      	ldr	r2, [pc, #24]	; (8086c08 <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 8086bee:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 8086bf0:	f009 ff80 	bl	8090af4 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086bf4:	2800      	cmp	r0, #0
 8086bf6:	db05      	blt.n	8086c04 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
 8086bf8:	4b04      	ldr	r3, [pc, #16]	; (8086c0c <mbedtls_x509_key_size_helper+0x24>)
 8086bfa:	4284      	cmp	r4, r0
 8086bfc:	bf94      	ite	ls
 8086bfe:	4618      	movls	r0, r3
 8086c00:	2000      	movhi	r0, #0
 8086c02:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086c04:	4801      	ldr	r0, [pc, #4]	; (8086c0c <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
 8086c06:	bd10      	pop	{r4, pc}
 8086c08:	080947b9 	.word	0x080947b9
 8086c0c:	ffffd680 	.word	0xffffd680

08086c10 <mbedtls_x509_time_is_past>:
 8086c10:	2000      	movs	r0, #0
 8086c12:	4770      	bx	lr

08086c14 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 8086c14:	2000      	movs	r0, #0
 8086c16:	4770      	bx	lr

08086c18 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 8086c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086c1a:	460c      	mov	r4, r1
 8086c1c:	4615      	mov	r5, r2
 8086c1e:	b08f      	sub	sp, #60	; 0x3c
 8086c20:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 8086c22:	a80b      	add	r0, sp, #44	; 0x2c
 8086c24:	f004 fb10 	bl	808b248 <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8086c28:	2330      	movs	r3, #48	; 0x30
 8086c2a:	aa09      	add	r2, sp, #36	; 0x24
 8086c2c:	1961      	adds	r1, r4, r5
 8086c2e:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
 8086c30:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8086c32:	f7fc fdb1 	bl	8083798 <mbedtls_asn1_get_tag>
 8086c36:	b940      	cbnz	r0, 8086c4a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086c3a:	9e0a      	ldr	r6, [sp, #40]	; 0x28

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8086c3c:	aa08      	add	r2, sp, #32
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086c3e:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8086c40:	4631      	mov	r1, r6
 8086c42:	a80a      	add	r0, sp, #40	; 0x28
 8086c44:	f7fc fdd5 	bl	80837f2 <mbedtls_asn1_get_int>
 8086c48:	b110      	cbz	r0, 8086c50 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8086c4a:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
 8086c4e:	e0d4      	b.n	8086dfa <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
 8086c50:	9d08      	ldr	r5, [sp, #32]
 8086c52:	b9dd      	cbnz	r5, 8086c8c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086c54:	2302      	movs	r3, #2
 8086c56:	aa09      	add	r2, sp, #36	; 0x24
 8086c58:	4631      	mov	r1, r6
 8086c5a:	a80a      	add	r0, sp, #40	; 0x28
 8086c5c:	f7fc fd9c 	bl	8083798 <mbedtls_asn1_get_tag>
 8086c60:	4604      	mov	r4, r0
 8086c62:	2800      	cmp	r0, #0
 8086c64:	f040 80c5 	bne.w	8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086c68:	9006      	str	r0, [sp, #24]
 8086c6a:	9005      	str	r0, [sp, #20]
 8086c6c:	9004      	str	r0, [sp, #16]
 8086c6e:	9003      	str	r0, [sp, #12]
 8086c70:	9002      	str	r0, [sp, #8]
 8086c72:	9001      	str	r0, [sp, #4]
 8086c74:	9000      	str	r0, [sp, #0]
 8086c76:	4603      	mov	r3, r0
 8086c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8086c7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8086c7c:	4638      	mov	r0, r7
 8086c7e:	f7fd f879 	bl	8083d74 <mbedtls_rsa_import_raw>
 8086c82:	4604      	mov	r4, r0
 8086c84:	2800      	cmp	r0, #0
 8086c86:	f040 80b4 	bne.w	8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086c8a:	e001      	b.n	8086c90 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 8086c8c:	4d5c      	ldr	r5, [pc, #368]	; (8086e00 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
 8086c8e:	e0b4      	b.n	8086dfa <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086c92:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086c94:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086c96:	4413      	add	r3, r2
 8086c98:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086c9a:	aa09      	add	r2, sp, #36	; 0x24
 8086c9c:	2302      	movs	r3, #2
 8086c9e:	a80a      	add	r0, sp, #40	; 0x28
 8086ca0:	f7fc fd7a 	bl	8083798 <mbedtls_asn1_get_tag>
 8086ca4:	4604      	mov	r4, r0
 8086ca6:	2800      	cmp	r0, #0
 8086ca8:	f040 80a3 	bne.w	8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086cae:	9404      	str	r4, [sp, #16]
 8086cb0:	9306      	str	r3, [sp, #24]
 8086cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086cb4:	9403      	str	r4, [sp, #12]
 8086cb6:	9305      	str	r3, [sp, #20]
 8086cb8:	9402      	str	r4, [sp, #8]
 8086cba:	9401      	str	r4, [sp, #4]
 8086cbc:	9400      	str	r4, [sp, #0]
 8086cbe:	4623      	mov	r3, r4
 8086cc0:	4622      	mov	r2, r4
 8086cc2:	4621      	mov	r1, r4
 8086cc4:	4638      	mov	r0, r7
 8086cc6:	f7fd f855 	bl	8083d74 <mbedtls_rsa_import_raw>
 8086cca:	4604      	mov	r4, r0
 8086ccc:	2800      	cmp	r0, #0
 8086cce:	f040 8090 	bne.w	8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 8086cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086cd6:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 8086cd8:	4413      	add	r3, r2
 8086cda:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086cdc:	aa09      	add	r2, sp, #36	; 0x24
 8086cde:	2302      	movs	r3, #2
 8086ce0:	a80a      	add	r0, sp, #40	; 0x28
 8086ce2:	f7fc fd59 	bl	8083798 <mbedtls_asn1_get_tag>
 8086ce6:	4604      	mov	r4, r0
 8086ce8:	2800      	cmp	r0, #0
 8086cea:	f040 8082 	bne.w	8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086cf0:	9406      	str	r4, [sp, #24]
 8086cf2:	9304      	str	r3, [sp, #16]
 8086cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086cf6:	9405      	str	r4, [sp, #20]
 8086cf8:	9303      	str	r3, [sp, #12]
 8086cfa:	9402      	str	r4, [sp, #8]
 8086cfc:	9401      	str	r4, [sp, #4]
 8086cfe:	9400      	str	r4, [sp, #0]
 8086d00:	4623      	mov	r3, r4
 8086d02:	4622      	mov	r2, r4
 8086d04:	4621      	mov	r1, r4
 8086d06:	4638      	mov	r0, r7
 8086d08:	f7fd f834 	bl	8083d74 <mbedtls_rsa_import_raw>
 8086d0c:	4604      	mov	r4, r0
 8086d0e:	2800      	cmp	r0, #0
 8086d10:	d16f      	bne.n	8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086d14:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086d16:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086d18:	4413      	add	r3, r2
 8086d1a:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086d1c:	aa09      	add	r2, sp, #36	; 0x24
 8086d1e:	2302      	movs	r3, #2
 8086d20:	a80a      	add	r0, sp, #40	; 0x28
 8086d22:	f7fc fd39 	bl	8083798 <mbedtls_asn1_get_tag>
 8086d26:	4604      	mov	r4, r0
 8086d28:	2800      	cmp	r0, #0
 8086d2a:	d162      	bne.n	8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086d2e:	2200      	movs	r2, #0
 8086d30:	9300      	str	r3, [sp, #0]
 8086d32:	9206      	str	r2, [sp, #24]
 8086d34:	9205      	str	r2, [sp, #20]
 8086d36:	9204      	str	r2, [sp, #16]
 8086d38:	9203      	str	r2, [sp, #12]
 8086d3a:	9202      	str	r2, [sp, #8]
 8086d3c:	9201      	str	r2, [sp, #4]
 8086d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086d40:	4611      	mov	r1, r2
 8086d42:	4638      	mov	r0, r7
 8086d44:	f7fd f816 	bl	8083d74 <mbedtls_rsa_import_raw>
 8086d48:	4604      	mov	r4, r0
 8086d4a:	2800      	cmp	r0, #0
 8086d4c:	d151      	bne.n	8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086d50:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086d52:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086d54:	4413      	add	r3, r2
 8086d56:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086d58:	aa09      	add	r2, sp, #36	; 0x24
 8086d5a:	2302      	movs	r3, #2
 8086d5c:	a80a      	add	r0, sp, #40	; 0x28
 8086d5e:	f7fc fd1b 	bl	8083798 <mbedtls_asn1_get_tag>
 8086d62:	4604      	mov	r4, r0
 8086d64:	2800      	cmp	r0, #0
 8086d66:	d144      	bne.n	8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086d6a:	9406      	str	r4, [sp, #24]
 8086d6c:	9302      	str	r3, [sp, #8]
 8086d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086d70:	9405      	str	r4, [sp, #20]
 8086d72:	9404      	str	r4, [sp, #16]
 8086d74:	9403      	str	r4, [sp, #12]
 8086d76:	9301      	str	r3, [sp, #4]
 8086d78:	9400      	str	r4, [sp, #0]
 8086d7a:	4623      	mov	r3, r4
 8086d7c:	4622      	mov	r2, r4
 8086d7e:	4621      	mov	r1, r4
 8086d80:	4638      	mov	r0, r7
 8086d82:	f7fc fff7 	bl	8083d74 <mbedtls_rsa_import_raw>
 8086d86:	4604      	mov	r4, r0
 8086d88:	2800      	cmp	r0, #0
 8086d8a:	d132      	bne.n	8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 8086d90:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086d92:	4413      	add	r3, r2
 8086d94:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 8086d96:	f7fd f82b 	bl	8083df0 <mbedtls_rsa_complete>
 8086d9a:	4604      	mov	r4, r0
 8086d9c:	b9c8      	cbnz	r0, 8086dd2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 8086d9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8086da0:	4631      	mov	r1, r6
 8086da2:	a80a      	add	r0, sp, #40	; 0x28
 8086da4:	f7fc fd49 	bl	808383a <mbedtls_asn1_get_mpi>
 8086da8:	4604      	mov	r4, r0
 8086daa:	bb10      	cbnz	r0, 8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 8086dac:	aa0b      	add	r2, sp, #44	; 0x2c
 8086dae:	4631      	mov	r1, r6
 8086db0:	a80a      	add	r0, sp, #40	; 0x28
 8086db2:	f7fc fd42 	bl	808383a <mbedtls_asn1_get_mpi>
 8086db6:	4604      	mov	r4, r0
 8086db8:	b9d8      	cbnz	r0, 8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 8086dba:	aa0b      	add	r2, sp, #44	; 0x2c
 8086dbc:	4631      	mov	r1, r6
 8086dbe:	a80a      	add	r0, sp, #40	; 0x28
 8086dc0:	f7fc fd3b 	bl	808383a <mbedtls_asn1_get_mpi>
 8086dc4:	4604      	mov	r4, r0
 8086dc6:	b9a0      	cbnz	r0, 8086df2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
 8086dc8:	4b0e      	ldr	r3, [pc, #56]	; (8086e04 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
 8086dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086dcc:	4296      	cmp	r6, r2
 8086dce:	bf18      	it	ne
 8086dd0:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
 8086dd2:	a80b      	add	r0, sp, #44	; 0x2c
 8086dd4:	f004 fa3f 	bl	808b256 <mbedtls_mpi_free>

    if( ret != 0 )
 8086dd8:	b17c      	cbz	r4, 8086dfa <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
 8086dda:	f64f 7380 	movw	r3, #65408	; 0xff80
 8086dde:	4023      	ands	r3, r4
 8086de0:	b913      	cbnz	r3, 8086de8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 8086de2:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
 8086de6:	e000      	b.n	8086dea <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 8086de8:	4d07      	ldr	r5, [pc, #28]	; (8086e08 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
 8086dea:	4638      	mov	r0, r7
 8086dec:	f7fe f89a 	bl	8084f24 <mbedtls_rsa_free>
 8086df0:	e003      	b.n	8086dfa <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
 8086df2:	a80b      	add	r0, sp, #44	; 0x2c
 8086df4:	f004 fa2f 	bl	808b256 <mbedtls_mpi_free>
 8086df8:	e7ef      	b.n	8086dda <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 8086dfa:	4628      	mov	r0, r5
 8086dfc:	b00f      	add	sp, #60	; 0x3c
 8086dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086e00:	ffffc280 	.word	0xffffc280
 8086e04:	ffffc29a 	.word	0xffffc29a
 8086e08:	ffffc300 	.word	0xffffc300

08086e0c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 8086e0c:	b530      	push	{r4, r5, lr}
 8086e0e:	4615      	mov	r5, r2
 8086e10:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8086e12:	2200      	movs	r2, #0
 8086e14:	601a      	str	r2, [r3, #0]
 8086e16:	605a      	str	r2, [r3, #4]
 8086e18:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8086e1a:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 8086e1c:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8086e1e:	f7fc fd94 	bl	808394a <mbedtls_asn1_get_alg>
 8086e22:	b110      	cbz	r0, 8086e2a <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 8086e24:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
 8086e28:	e014      	b.n	8086e54 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8086e2a:	4629      	mov	r1, r5
 8086e2c:	a801      	add	r0, sp, #4
 8086e2e:	f7fe f947 	bl	80850c0 <mbedtls_oid_get_pk_alg>
 8086e32:	b960      	cbnz	r0, 8086e4e <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8086e34:	782b      	ldrb	r3, [r5, #0]
 8086e36:	2b01      	cmp	r3, #1
 8086e38:	d10c      	bne.n	8086e54 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8086e3a:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8086e3c:	2b05      	cmp	r3, #5
 8086e3e:	d000      	beq.n	8086e42 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8086e40:	b93b      	cbnz	r3, 8086e52 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
 8086e42:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8086e44:	4804      	ldr	r0, [pc, #16]	; (8086e58 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
 8086e46:	2b00      	cmp	r3, #0
 8086e48:	bf08      	it	eq
 8086e4a:	2000      	moveq	r0, #0
 8086e4c:	e002      	b.n	8086e54 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8086e4e:	4803      	ldr	r0, [pc, #12]	; (8086e5c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
 8086e50:	e000      	b.n	8086e54 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8086e52:	4801      	ldr	r0, [pc, #4]	; (8086e58 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
 8086e54:	b005      	add	sp, #20
 8086e56:	bd30      	pop	{r4, r5, pc}
 8086e58:	ffffc580 	.word	0xffffc580
 8086e5c:	ffffc380 	.word	0xffffc380

08086e60 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8086e60:	b530      	push	{r4, r5, lr}
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8086e62:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8086e64:	b089      	sub	sp, #36	; 0x24
 8086e66:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 8086e68:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8086e6a:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8086e6e:	4411      	add	r1, r2
 8086e70:	2330      	movs	r3, #48	; 0x30
 8086e72:	aa03      	add	r2, sp, #12
 8086e74:	a804      	add	r0, sp, #16
 8086e76:	f7fc fc8f 	bl	8083798 <mbedtls_asn1_get_tag>
 8086e7a:	b9c8      	cbnz	r0, 8086eb0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086e7c:	9b03      	ldr	r3, [sp, #12]
 8086e7e:	9c04      	ldr	r4, [sp, #16]

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8086e80:	aa02      	add	r2, sp, #8
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086e82:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8086e84:	4621      	mov	r1, r4
 8086e86:	a804      	add	r0, sp, #16
 8086e88:	f7fc fcb3 	bl	80837f2 <mbedtls_asn1_get_int>
 8086e8c:	b980      	cbnz	r0, 8086eb0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
 8086e8e:	9b02      	ldr	r3, [sp, #8]
 8086e90:	bb7b      	cbnz	r3, 8086ef2 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 8086e92:	ab05      	add	r3, sp, #20
 8086e94:	f10d 0207 	add.w	r2, sp, #7
 8086e98:	4621      	mov	r1, r4
 8086e9a:	a804      	add	r0, sp, #16
 8086e9c:	f7ff ffb6 	bl	8086e0c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 8086ea0:	b930      	cbnz	r0, 8086eb0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8086ea2:	2304      	movs	r3, #4
 8086ea4:	aa03      	add	r2, sp, #12
 8086ea6:	4621      	mov	r1, r4
 8086ea8:	a804      	add	r0, sp, #16
 8086eaa:	f7fc fc75 	bl	8083798 <mbedtls_asn1_get_tag>
 8086eae:	b110      	cbz	r0, 8086eb6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x56>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8086eb0:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8086eb4:	e022      	b.n	8086efc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( len < 1 )
 8086eb6:	9b03      	ldr	r3, [sp, #12]
 8086eb8:	b1eb      	cbz	r3, 8086ef6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x96>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8086eba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8086ebe:	f005 fc35 	bl	808c72c <mbedtls_pk_info_from_type>
 8086ec2:	4601      	mov	r1, r0
 8086ec4:	b908      	cbnz	r0, 8086eca <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8086ec6:	480e      	ldr	r0, [pc, #56]	; (8086f00 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa0>)
 8086ec8:	e018      	b.n	8086efc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8086eca:	4628      	mov	r0, r5
 8086ecc:	f005 fc36 	bl	808c73c <mbedtls_pk_setup>
 8086ed0:	b9a0      	cbnz	r0, 8086efc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 8086ed2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8086ed6:	2b01      	cmp	r3, #1
 8086ed8:	d1f5      	bne.n	8086ec6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x66>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 8086eda:	9a03      	ldr	r2, [sp, #12]
 8086edc:	9904      	ldr	r1, [sp, #16]
 8086ede:	6868      	ldr	r0, [r5, #4]
 8086ee0:	f7ff fe9a 	bl	8086c18 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 8086ee4:	4604      	mov	r4, r0
 8086ee6:	b140      	cbz	r0, 8086efa <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9a>
        {
            mbedtls_pk_free( pk );
 8086ee8:	4628      	mov	r0, r5
 8086eea:	f005 fc0e 	bl	808c70a <mbedtls_pk_free>
            return( ret );
 8086eee:	4620      	mov	r0, r4
 8086ef0:	e004      	b.n	8086efc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 8086ef2:	4804      	ldr	r0, [pc, #16]	; (8086f04 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa4>)
 8086ef4:	e002      	b.n	8086efc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086ef6:	4804      	ldr	r0, [pc, #16]	; (8086f08 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa8>)
 8086ef8:	e000      	b.n	8086efc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
 8086efa:	2000      	movs	r0, #0
}
 8086efc:	b009      	add	sp, #36	; 0x24
 8086efe:	bd30      	pop	{r4, r5, pc}
 8086f00:	ffffc380 	.word	0xffffc380
 8086f04:	ffffc280 	.word	0xffffc280
 8086f08:	ffffc2a0 	.word	0xffffc2a0

08086f0c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 8086f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086f0e:	b091      	sub	sp, #68	; 0x44
 8086f10:	9e16      	ldr	r6, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
 8086f12:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 8086f14:	4605      	mov	r5, r0
 8086f16:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
 8086f18:	4411      	add	r1, r2

    if( pwdlen == 0 )
 8086f1a:	2e00      	cmp	r6, #0
 8086f1c:	d066      	beq.n	8086fec <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8086f1e:	2330      	movs	r3, #48	; 0x30
 8086f20:	aa08      	add	r2, sp, #32
 8086f22:	a809      	add	r0, sp, #36	; 0x24
 8086f24:	f7fc fc38 	bl	8083798 <mbedtls_asn1_get_tag>
 8086f28:	b980      	cbnz	r0, 8086f4c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086f2a:	9b08      	ldr	r3, [sp, #32]
 8086f2c:	9c09      	ldr	r4, [sp, #36]	; 0x24

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 8086f2e:	aa0a      	add	r2, sp, #40	; 0x28
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086f30:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 8086f32:	4621      	mov	r1, r4
 8086f34:	ab0d      	add	r3, sp, #52	; 0x34
 8086f36:	a809      	add	r0, sp, #36	; 0x24
 8086f38:	f7fc fd07 	bl	808394a <mbedtls_asn1_get_alg>
 8086f3c:	b930      	cbnz	r0, 8086f4c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8086f3e:	2304      	movs	r3, #4
 8086f40:	aa08      	add	r2, sp, #32
 8086f42:	4621      	mov	r1, r4
 8086f44:	a809      	add	r0, sp, #36	; 0x24
 8086f46:	f7fc fc27 	bl	8083798 <mbedtls_asn1_get_tag>
 8086f4a:	b110      	cbz	r0, 8086f52 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8086f4c:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8086f50:	e055      	b.n	8086ffe <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 8086f52:	f10d 011f 	add.w	r1, sp, #31
 8086f56:	f10d 021e 	add.w	r2, sp, #30
 8086f5a:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
 8086f5c:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 8086f5e:	f7fe f911 	bl	8085184 <mbedtls_oid_get_pkcs12_pbe_alg>
 8086f62:	4601      	mov	r1, r0
 8086f64:	b9a0      	cbnz	r0, 8086f90 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
 8086f66:	9808      	ldr	r0, [sp, #32]
 8086f68:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8086f6c:	9003      	str	r0, [sp, #12]
 8086f6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8086f70:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8086f74:	9002      	str	r0, [sp, #8]
 8086f76:	9404      	str	r4, [sp, #16]
 8086f78:	9601      	str	r6, [sp, #4]
 8086f7a:	9700      	str	r7, [sp, #0]
 8086f7c:	a80d      	add	r0, sp, #52	; 0x34
 8086f7e:	f006 fc6b 	bl	808d858 <mbedtls_pkcs12_pbe>
 8086f82:	2800      	cmp	r0, #0
 8086f84:	d036      	beq.n	8086ff4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
 8086f86:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
 8086f8a:	d138      	bne.n	8086ffe <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 8086f8c:	481d      	ldr	r0, [pc, #116]	; (8087004 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
 8086f8e:	e036      	b.n	8086ffe <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
 8086f90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8086f92:	2a0a      	cmp	r2, #10
 8086f94:	d114      	bne.n	8086fc0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
 8086f96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8086f98:	481b      	ldr	r0, [pc, #108]	; (8087008 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
 8086f9a:	f00c f871 	bl	8093080 <memcmp>
 8086f9e:	4601      	mov	r1, r0
 8086fa0:	bb30      	cbnz	r0, 8086ff0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
 8086fa2:	9b08      	ldr	r3, [sp, #32]
 8086fa4:	9402      	str	r4, [sp, #8]
 8086fa6:	9301      	str	r3, [sp, #4]
 8086fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086faa:	463a      	mov	r2, r7
 8086fac:	9300      	str	r3, [sp, #0]
 8086fae:	a80d      	add	r0, sp, #52	; 0x34
 8086fb0:	4633      	mov	r3, r6
 8086fb2:	f006 fb73 	bl	808d69c <mbedtls_pkcs12_pbe_sha1_rc4_128>
 8086fb6:	bb10      	cbnz	r0, 8086ffe <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8086fb8:	7823      	ldrb	r3, [r4, #0]
 8086fba:	2b30      	cmp	r3, #48	; 0x30
 8086fbc:	d01a      	beq.n	8086ff4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
 8086fbe:	e7e5      	b.n	8086f8c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
 8086fc0:	2a09      	cmp	r2, #9
 8086fc2:	d115      	bne.n	8086ff0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
 8086fc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8086fc6:	4811      	ldr	r0, [pc, #68]	; (808700c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
 8086fc8:	f00c f85a 	bl	8093080 <memcmp>
 8086fcc:	4601      	mov	r1, r0
 8086fce:	b978      	cbnz	r0, 8086ff0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
 8086fd0:	9b08      	ldr	r3, [sp, #32]
 8086fd2:	9402      	str	r4, [sp, #8]
 8086fd4:	9301      	str	r3, [sp, #4]
 8086fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086fd8:	463a      	mov	r2, r7
 8086fda:	9300      	str	r3, [sp, #0]
 8086fdc:	a80d      	add	r0, sp, #52	; 0x34
 8086fde:	4633      	mov	r3, r6
 8086fe0:	f7fb ff32 	bl	8082e48 <mbedtls_pkcs5_pbes2>
 8086fe4:	b130      	cbz	r0, 8086ff4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
 8086fe6:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
 8086fea:	e7ce      	b.n	8086f8a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8086fec:	4808      	ldr	r0, [pc, #32]	; (8087010 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
 8086fee:	e006      	b.n	8086ffe <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 8086ff0:	4808      	ldr	r0, [pc, #32]	; (8087014 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
 8086ff2:	e004      	b.n	8086ffe <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
 8086ff4:	9a08      	ldr	r2, [sp, #32]
 8086ff6:	4621      	mov	r1, r4
 8086ff8:	4628      	mov	r0, r5
 8086ffa:	f7ff ff31 	bl	8086e60 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
 8086ffe:	b011      	add	sp, #68	; 0x44
 8087000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087002:	bf00      	nop
 8087004:	ffffc480 	.word	0xffffc480
 8087008:	080947c5 	.word	0x080947c5
 808700c:	080947d0 	.word	0x080947d0
 8087010:	ffffc400 	.word	0xffffc400
 8087014:	ffffc680 	.word	0xffffc680

08087018 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8087018:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 808701a:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 808701c:	b08f      	sub	sp, #60	; 0x3c
 808701e:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8087020:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087024:	aa09      	add	r2, sp, #36	; 0x24
 8087026:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8087028:	4605      	mov	r5, r0
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808702a:	f7fc fbb5 	bl	8083798 <mbedtls_asn1_get_tag>
 808702e:	b110      	cbz	r0, 8087036 <mbedtls_pk_parse_subpubkey+0x1e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8087030:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8087034:	e090      	b.n	8087158 <mbedtls_pk_parse_subpubkey+0x140>
    }

    end = *p + len;
 8087036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087038:	682e      	ldr	r6, [r5, #0]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 808703a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = *p + len;
 808703e:	441e      	add	r6, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8087040:	4631      	mov	r1, r6
 8087042:	ab0b      	add	r3, sp, #44	; 0x2c
 8087044:	4628      	mov	r0, r5
 8087046:	f7ff fee1 	bl	8086e0c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 808704a:	2800      	cmp	r0, #0
 808704c:	f040 8084 	bne.w	8087158 <mbedtls_pk_parse_subpubkey+0x140>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8087050:	aa09      	add	r2, sp, #36	; 0x24
 8087052:	4631      	mov	r1, r6
 8087054:	4628      	mov	r0, r5
 8087056:	f7fc fc28 	bl	80838aa <mbedtls_asn1_get_bitstring_null>
 808705a:	b110      	cbz	r0, 8087062 <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 808705c:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 8087060:	e07a      	b.n	8087158 <mbedtls_pk_parse_subpubkey+0x140>

    if( *p + len != end )
 8087062:	682a      	ldr	r2, [r5, #0]
 8087064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087066:	4413      	add	r3, r2
 8087068:	429e      	cmp	r6, r3
 808706a:	d169      	bne.n	8087140 <mbedtls_pk_parse_subpubkey+0x128>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 808706c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8087070:	f005 fb5c 	bl	808c72c <mbedtls_pk_info_from_type>
 8087074:	4601      	mov	r1, r0
 8087076:	2800      	cmp	r0, #0
 8087078:	d064      	beq.n	8087144 <mbedtls_pk_parse_subpubkey+0x12c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 808707a:	4638      	mov	r0, r7
 808707c:	f005 fb5e 	bl	808c73c <mbedtls_pk_setup>
 8087080:	4604      	mov	r4, r0
 8087082:	2800      	cmp	r0, #0
 8087084:	d160      	bne.n	8087148 <mbedtls_pk_parse_subpubkey+0x130>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 8087086:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 808708a:	2b01      	cmp	r3, #1
 808708c:	d162      	bne.n	8087154 <mbedtls_pk_parse_subpubkey+0x13c>
                             mbedtls_rsa_context *rsa )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808708e:	2330      	movs	r3, #48	; 0x30
 8087090:	aa0a      	add	r2, sp, #40	; 0x28
 8087092:	4631      	mov	r1, r6
 8087094:	4628      	mov	r0, r5
 8087096:	687c      	ldr	r4, [r7, #4]
 8087098:	f7fc fb7e 	bl	8083798 <mbedtls_asn1_get_tag>
 808709c:	bb28      	cbnz	r0, 80870ea <mbedtls_pk_parse_subpubkey+0xd2>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
 808709e:	682a      	ldr	r2, [r5, #0]
 80870a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80870a2:	4413      	add	r3, r2
 80870a4:	429e      	cmp	r6, r3
 80870a6:	d146      	bne.n	8087136 <mbedtls_pk_parse_subpubkey+0x11e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80870a8:	2302      	movs	r3, #2
 80870aa:	aa0a      	add	r2, sp, #40	; 0x28
 80870ac:	4631      	mov	r1, r6
 80870ae:	4628      	mov	r0, r5
 80870b0:	f7fc fb72 	bl	8083798 <mbedtls_asn1_get_tag>
 80870b4:	b9c8      	cbnz	r0, 80870ea <mbedtls_pk_parse_subpubkey+0xd2>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 80870b6:	2300      	movs	r3, #0
 80870b8:	9306      	str	r3, [sp, #24]
 80870ba:	9305      	str	r3, [sp, #20]
 80870bc:	9304      	str	r3, [sp, #16]
 80870be:	9303      	str	r3, [sp, #12]
 80870c0:	9302      	str	r3, [sp, #8]
 80870c2:	9301      	str	r3, [sp, #4]
 80870c4:	9300      	str	r3, [sp, #0]
 80870c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80870c8:	6829      	ldr	r1, [r5, #0]
 80870ca:	4620      	mov	r0, r4
 80870cc:	f7fc fe52 	bl	8083d74 <mbedtls_rsa_import_raw>
 80870d0:	2800      	cmp	r0, #0
 80870d2:	d13d      	bne.n	8087150 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80870d4:	682a      	ldr	r2, [r5, #0]
 80870d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80870d8:	4631      	mov	r1, r6

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80870da:	4413      	add	r3, r2
 80870dc:	602b      	str	r3, [r5, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80870de:	aa0a      	add	r2, sp, #40	; 0x28
 80870e0:	2302      	movs	r3, #2
 80870e2:	4628      	mov	r0, r5
 80870e4:	f7fc fb58 	bl	8083798 <mbedtls_asn1_get_tag>
 80870e8:	b118      	cbz	r0, 80870f2 <mbedtls_pk_parse_subpubkey+0xda>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 80870ea:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 80870ee:	b1fc      	cbz	r4, 8087130 <mbedtls_pk_parse_subpubkey+0x118>
 80870f0:	e022      	b.n	8087138 <mbedtls_pk_parse_subpubkey+0x120>

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 80870f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80870f4:	9004      	str	r0, [sp, #16]
 80870f6:	9306      	str	r3, [sp, #24]
 80870f8:	682b      	ldr	r3, [r5, #0]
 80870fa:	9003      	str	r0, [sp, #12]
 80870fc:	9305      	str	r3, [sp, #20]
 80870fe:	9002      	str	r0, [sp, #8]
 8087100:	9001      	str	r0, [sp, #4]
 8087102:	9000      	str	r0, [sp, #0]
 8087104:	4603      	mov	r3, r0
 8087106:	4602      	mov	r2, r0
 8087108:	4601      	mov	r1, r0
 808710a:	4620      	mov	r0, r4
 808710c:	f7fc fe32 	bl	8083d74 <mbedtls_rsa_import_raw>
 8087110:	b9f0      	cbnz	r0, 8087150 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8087112:	682a      	ldr	r2, [r5, #0]
 8087114:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8087116:	4620      	mov	r0, r4

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8087118:	4413      	add	r3, r2
 808711a:	602b      	str	r3, [r5, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 808711c:	f7fc fe68 	bl	8083df0 <mbedtls_rsa_complete>
 8087120:	b9b0      	cbnz	r0, 8087150 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 8087122:	4620      	mov	r0, r4
 8087124:	f7fc ff20 	bl	8083f68 <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8087128:	b990      	cbnz	r0, 8087150 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
 808712a:	682b      	ldr	r3, [r5, #0]
 808712c:	429e      	cmp	r6, r3
 808712e:	d102      	bne.n	8087136 <mbedtls_pk_parse_subpubkey+0x11e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 8087130:	682b      	ldr	r3, [r5, #0]
 8087132:	429e      	cmp	r6, r3
 8087134:	d00a      	beq.n	808714c <mbedtls_pk_parse_subpubkey+0x134>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
 8087136:	4c09      	ldr	r4, [pc, #36]	; (808715c <mbedtls_pk_parse_subpubkey+0x144>)

    if( ret != 0 )
        mbedtls_pk_free( pk );
 8087138:	4638      	mov	r0, r7
 808713a:	f005 fae6 	bl	808c70a <mbedtls_pk_free>
 808713e:	e003      	b.n	8087148 <mbedtls_pk_parse_subpubkey+0x130>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8087140:	4806      	ldr	r0, [pc, #24]	; (808715c <mbedtls_pk_parse_subpubkey+0x144>)
 8087142:	e009      	b.n	8087158 <mbedtls_pk_parse_subpubkey+0x140>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8087144:	4806      	ldr	r0, [pc, #24]	; (8087160 <mbedtls_pk_parse_subpubkey+0x148>)
 8087146:	e007      	b.n	8087158 <mbedtls_pk_parse_subpubkey+0x140>
 8087148:	4620      	mov	r0, r4
 808714a:	e005      	b.n	8087158 <mbedtls_pk_parse_subpubkey+0x140>
 808714c:	2000      	movs	r0, #0
 808714e:	e003      	b.n	8087158 <mbedtls_pk_parse_subpubkey+0x140>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 8087150:	4c04      	ldr	r4, [pc, #16]	; (8087164 <mbedtls_pk_parse_subpubkey+0x14c>)
 8087152:	e7f1      	b.n	8087138 <mbedtls_pk_parse_subpubkey+0x120>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 8087154:	4c02      	ldr	r4, [pc, #8]	; (8087160 <mbedtls_pk_parse_subpubkey+0x148>)
 8087156:	e7ef      	b.n	8087138 <mbedtls_pk_parse_subpubkey+0x120>

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 8087158:	b00f      	add	sp, #60	; 0x3c
 808715a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808715c:	ffffc49a 	.word	0xffffc49a
 8087160:	ffffc380 	.word	0xffffc380
 8087164:	ffffc500 	.word	0xffffc500

08087168 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8087168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808716c:	4616      	mov	r6, r2
 808716e:	b089      	sub	sp, #36	; 0x24
 8087170:	4605      	mov	r5, r0

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 8087172:	a805      	add	r0, sp, #20
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8087174:	460c      	mov	r4, r1
 8087176:	461f      	mov	r7, r3
 8087178:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 808717c:	f007 fdd8 	bl	808ed30 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8087180:	2e00      	cmp	r6, #0
 8087182:	f000 80b8 	beq.w	80872f6 <mbedtls_pk_parse_key+0x18e>
 8087186:	f106 39ff 	add.w	r9, r6, #4294967295
 808718a:	f814 3009 	ldrb.w	r3, [r4, r9]
 808718e:	b11b      	cbz	r3, 8087198 <mbedtls_pk_parse_key+0x30>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8087190:	f814 3009 	ldrb.w	r3, [r4, r9]
 8087194:	bb6b      	cbnz	r3, 80871f2 <mbedtls_pk_parse_key+0x8a>
 8087196:	e031      	b.n	80871fc <mbedtls_pk_parse_key+0x94>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
 8087198:	ab04      	add	r3, sp, #16
 808719a:	9302      	str	r3, [sp, #8]
 808719c:	e88d 0180 	stmia.w	sp, {r7, r8}
 80871a0:	4623      	mov	r3, r4
 80871a2:	4a57      	ldr	r2, [pc, #348]	; (8087300 <mbedtls_pk_parse_key+0x198>)
 80871a4:	4957      	ldr	r1, [pc, #348]	; (8087304 <mbedtls_pk_parse_key+0x19c>)
 80871a6:	a805      	add	r0, sp, #20
 80871a8:	f007 fdc8 	bl	808ed3c <mbedtls_pem_read_buffer>

    if( ret == 0 )
 80871ac:	b978      	cbnz	r0, 80871ce <mbedtls_pk_parse_key+0x66>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 80871ae:	2001      	movs	r0, #1
 80871b0:	f005 fabc 	bl	808c72c <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 80871b4:	4601      	mov	r1, r0
 80871b6:	4628      	mov	r0, r5
 80871b8:	f005 fac0 	bl	808c73c <mbedtls_pk_setup>
 80871bc:	4604      	mov	r4, r0
 80871be:	2800      	cmp	r0, #0
 80871c0:	d160      	bne.n	8087284 <mbedtls_pk_parse_key+0x11c>
 80871c2:	9a06      	ldr	r2, [sp, #24]
 80871c4:	9905      	ldr	r1, [sp, #20]
 80871c6:	6868      	ldr	r0, [r5, #4]
 80871c8:	f7ff fd26 	bl	8086c18 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80871cc:	e058      	b.n	8087280 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 80871ce:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 80871d2:	d101      	bne.n	80871d8 <mbedtls_pk_parse_key+0x70>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 80871d4:	484c      	ldr	r0, [pc, #304]	; (8087308 <mbedtls_pk_parse_key+0x1a0>)
 80871d6:	e08f      	b.n	80872f8 <mbedtls_pk_parse_key+0x190>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 80871d8:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 80871dc:	f000 8084 	beq.w	80872e8 <mbedtls_pk_parse_key+0x180>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80871e0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80871e4:	f040 8088 	bne.w	80872f8 <mbedtls_pk_parse_key+0x190>
 80871e8:	e7d2      	b.n	8087190 <mbedtls_pk_parse_key+0x28>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80871ea:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80871ee:	f040 8083 	bne.w	80872f8 <mbedtls_pk_parse_key+0x190>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80871f2:	19a3      	adds	r3, r4, r6
 80871f4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80871f8:	b9ab      	cbnz	r3, 8087226 <mbedtls_pk_parse_key+0xbe>
 80871fa:	e02d      	b.n	8087258 <mbedtls_pk_parse_key+0xf0>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
 80871fc:	aa04      	add	r2, sp, #16
 80871fe:	9202      	str	r2, [sp, #8]
 8087200:	9301      	str	r3, [sp, #4]
 8087202:	9300      	str	r3, [sp, #0]
 8087204:	4a41      	ldr	r2, [pc, #260]	; (808730c <mbedtls_pk_parse_key+0x1a4>)
 8087206:	4623      	mov	r3, r4
 8087208:	4941      	ldr	r1, [pc, #260]	; (8087310 <mbedtls_pk_parse_key+0x1a8>)
 808720a:	a805      	add	r0, sp, #20
 808720c:	f007 fd96 	bl	808ed3c <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8087210:	2800      	cmp	r0, #0
 8087212:	d1ea      	bne.n	80871ea <mbedtls_pk_parse_key+0x82>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 8087214:	9a06      	ldr	r2, [sp, #24]
 8087216:	9905      	ldr	r1, [sp, #20]
 8087218:	4628      	mov	r0, r5
 808721a:	f7ff fe21 	bl	8086e60 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 808721e:	e02f      	b.n	8087280 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8087220:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8087224:	d168      	bne.n	80872f8 <mbedtls_pk_parse_key+0x190>
        unsigned char *key_copy;

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
 8087226:	4631      	mov	r1, r6
 8087228:	2001      	movs	r0, #1
 808722a:	f00b ff13 	bl	8093054 <calloc>
 808722e:	4681      	mov	r9, r0
 8087230:	2800      	cmp	r0, #0
 8087232:	d05b      	beq.n	80872ec <mbedtls_pk_parse_key+0x184>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
 8087234:	4632      	mov	r2, r6
 8087236:	4621      	mov	r1, r4
 8087238:	f00b ff31 	bl	809309e <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );
 808723c:	463b      	mov	r3, r7
 808723e:	4632      	mov	r2, r6
 8087240:	4649      	mov	r1, r9
 8087242:	f8cd 8000 	str.w	r8, [sp]
 8087246:	4628      	mov	r0, r5
 8087248:	f7ff fe60 	bl	8086f0c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 808724c:	eb09 0106 	add.w	r1, r9, r6
 8087250:	4607      	mov	r7, r0
 8087252:	464b      	mov	r3, r9

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087254:	2200      	movs	r2, #0
 8087256:	e01d      	b.n	8087294 <mbedtls_pk_parse_key+0x12c>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
 8087258:	aa04      	add	r2, sp, #16
 808725a:	9202      	str	r2, [sp, #8]
 808725c:	9301      	str	r3, [sp, #4]
 808725e:	9300      	str	r3, [sp, #0]
 8087260:	4a2c      	ldr	r2, [pc, #176]	; (8087314 <mbedtls_pk_parse_key+0x1ac>)
 8087262:	4623      	mov	r3, r4
 8087264:	492c      	ldr	r1, [pc, #176]	; (8087318 <mbedtls_pk_parse_key+0x1b0>)
 8087266:	a805      	add	r0, sp, #20
 8087268:	f007 fd68 	bl	808ed3c <mbedtls_pem_read_buffer>
    if( ret == 0 )
 808726c:	2800      	cmp	r0, #0
 808726e:	d1d7      	bne.n	8087220 <mbedtls_pk_parse_key+0xb8>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 8087270:	f8cd 8000 	str.w	r8, [sp]
 8087274:	463b      	mov	r3, r7
 8087276:	9a06      	ldr	r2, [sp, #24]
 8087278:	9905      	ldr	r1, [sp, #20]
 808727a:	4628      	mov	r0, r5
 808727c:	f7ff fe46 	bl	8086f0c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 8087280:	4604      	mov	r4, r0
 8087282:	b110      	cbz	r0, 808728a <mbedtls_pk_parse_key+0x122>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
 8087284:	4628      	mov	r0, r5
 8087286:	f005 fa40 	bl	808c70a <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 808728a:	a805      	add	r0, sp, #20
 808728c:	f007 fde4 	bl	808ee58 <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 8087290:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
 8087292:	e031      	b.n	80872f8 <mbedtls_pk_parse_key+0x190>

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087294:	428b      	cmp	r3, r1
 8087296:	d002      	beq.n	808729e <mbedtls_pk_parse_key+0x136>
 8087298:	701a      	strb	r2, [r3, #0]
 808729a:	3301      	adds	r3, #1
 808729c:	e7fa      	b.n	8087294 <mbedtls_pk_parse_key+0x12c>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );

        mbedtls_zeroize( key_copy, keylen );
        mbedtls_free( key_copy );
 808729e:	4648      	mov	r0, r9
 80872a0:	f009 fc18 	bl	8090ad4 <free>
    }

    if( ret == 0 )
 80872a4:	b90f      	cbnz	r7, 80872aa <mbedtls_pk_parse_key+0x142>
        return( 0 );
 80872a6:	2000      	movs	r0, #0
 80872a8:	e026      	b.n	80872f8 <mbedtls_pk_parse_key+0x190>

    mbedtls_pk_free( pk );
 80872aa:	4628      	mov	r0, r5
 80872ac:	f005 fa2d 	bl	808c70a <mbedtls_pk_free>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
 80872b0:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
 80872b4:	d08e      	beq.n	80871d4 <mbedtls_pk_parse_key+0x6c>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 80872b6:	4632      	mov	r2, r6
 80872b8:	4621      	mov	r1, r4
 80872ba:	4628      	mov	r0, r5
 80872bc:	f7ff fdd0 	bl	8086e60 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 80872c0:	2800      	cmp	r0, #0
 80872c2:	d0f0      	beq.n	80872a6 <mbedtls_pk_parse_key+0x13e>
        return( 0 );

    mbedtls_pk_free( pk );
 80872c4:	4628      	mov	r0, r5
 80872c6:	f005 fa20 	bl	808c70a <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 80872ca:	2001      	movs	r0, #1
 80872cc:	f005 fa2e 	bl	808c72c <mbedtls_pk_info_from_type>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 80872d0:	4601      	mov	r1, r0
 80872d2:	4628      	mov	r0, r5
 80872d4:	f005 fa32 	bl	808c73c <mbedtls_pk_setup>
 80872d8:	b950      	cbnz	r0, 80872f0 <mbedtls_pk_parse_key+0x188>
 80872da:	4632      	mov	r2, r6
 80872dc:	4621      	mov	r1, r4
 80872de:	6868      	ldr	r0, [r5, #4]
 80872e0:	f7ff fc9a 	bl	8086c18 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80872e4:	b920      	cbnz	r0, 80872f0 <mbedtls_pk_parse_key+0x188>
 80872e6:	e7de      	b.n	80872a6 <mbedtls_pk_parse_key+0x13e>
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 80872e8:	480c      	ldr	r0, [pc, #48]	; (808731c <mbedtls_pk_parse_key+0x1b4>)
 80872ea:	e005      	b.n	80872f8 <mbedtls_pk_parse_key+0x190>

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 80872ec:	480c      	ldr	r0, [pc, #48]	; (8087320 <mbedtls_pk_parse_key+0x1b8>)
 80872ee:	e003      	b.n	80872f8 <mbedtls_pk_parse_key+0x190>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
                                        key, keylen ) ) != 0 )
    {
        mbedtls_pk_free( pk );
 80872f0:	4628      	mov	r0, r5
 80872f2:	f005 fa0a 	bl	808c70a <mbedtls_pk_free>
        return( 0 );
    }

#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80872f6:	480b      	ldr	r0, [pc, #44]	; (8087324 <mbedtls_pk_parse_key+0x1bc>)
}
 80872f8:	b009      	add	sp, #36	; 0x24
 80872fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80872fe:	bf00      	nop
 8087300:	080947da 	.word	0x080947da
 8087304:	080947f8 	.word	0x080947f8
 8087308:	ffffc480 	.word	0xffffc480
 808730c:	08094818 	.word	0x08094818
 8087310:	08094832 	.word	0x08094832
 8087314:	0809484e 	.word	0x0809484e
 8087318:	08094872 	.word	0x08094872
 808731c:	ffffc400 	.word	0xffffc400
 8087320:	ffffc080 	.word	0xffffc080
 8087324:	ffffc300 	.word	0xffffc300

08087328 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8087328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808732c:	7bcb      	ldrb	r3, [r1, #15]
 808732e:	b093      	sub	sp, #76	; 0x4c
 8087330:	f003 030f 	and.w	r3, r3, #15
 8087334:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
 8087338:	e9d3 6730 	ldrd	r6, r7, [r3, #192]	; 0xc0
    zl = ctx->HL[lo];
 808733c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 8087340:	f8df c150 	ldr.w	ip, [pc, #336]	; 8087494 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
 8087344:	f101 0310 	add.w	r3, r1, #16
 8087348:	9310      	str	r3, [sp, #64]	; 0x40
    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 808734a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808734c:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 8087350:	9310      	str	r3, [sp, #64]	; 0x40
 8087352:	f00e 030f 	and.w	r3, lr, #15
 8087356:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
 8087358:	9b10      	ldr	r3, [sp, #64]	; 0x40
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
 808735a:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
 808735e:	ebc1 0803 	rsb	r8, r1, r3
 8087362:	f1b8 0f0f 	cmp.w	r8, #15
 8087366:	d03a      	beq.n	80873de <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
 8087368:	0923      	lsrs	r3, r4, #4
 808736a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 808736e:	9300      	str	r3, [sp, #0]
 8087370:	092b      	lsrs	r3, r5, #4
 8087372:	9301      	str	r3, [sp, #4]
 8087374:	0733      	lsls	r3, r6, #28
 8087376:	9309      	str	r3, [sp, #36]	; 0x24
 8087378:	2300      	movs	r3, #0
 808737a:	9308      	str	r3, [sp, #32]
 808737c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808737e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8087382:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 8087386:	0933      	lsrs	r3, r6, #4
 8087388:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 808738c:	9304      	str	r3, [sp, #16]
 808738e:	093b      	lsrs	r3, r7, #4
 8087390:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8087394:	9305      	str	r3, [sp, #20]
 8087396:	ea48 080a 	orr.w	r8, r8, sl
 808739a:	ea49 090b 	orr.w	r9, r9, fp
 808739e:	e9d5 6730 	ldrd	r6, r7, [r5, #192]	; 0xc0
 80873a2:	46c2      	mov	sl, r8
 80873a4:	46cb      	mov	fp, r9
 80873a6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80873aa:	ea88 0806 	eor.w	r8, r8, r6
 80873ae:	4646      	mov	r6, r8
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 80873b0:	f004 040f 	and.w	r4, r4, #15
            zh ^= ctx->HH[lo];
 80873b4:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 80873b8:	ea89 0907 	eor.w	r9, r9, r7
 80873bc:	0423      	lsls	r3, r4, #16
 80873be:	930d      	str	r3, [sp, #52]	; 0x34
 80873c0:	2300      	movs	r3, #0
 80873c2:	464f      	mov	r7, r9
 80873c4:	930c      	str	r3, [sp, #48]	; 0x30
 80873c6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80873ca:	4073      	eors	r3, r6
 80873cc:	461e      	mov	r6, r3
 80873ce:	407c      	eors	r4, r7
 80873d0:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
 80873d2:	e9d5 4510 	ldrd	r4, r5, [r5, #64]	; 0x40
 80873d6:	ea84 040a 	eor.w	r4, r4, sl
 80873da:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 80873de:	0923      	lsrs	r3, r4, #4
 80873e0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80873e4:	9302      	str	r3, [sp, #8]
 80873e6:	092b      	lsrs	r3, r5, #4
 80873e8:	9303      	str	r3, [sp, #12]
 80873ea:	0733      	lsls	r3, r6, #28
 80873ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80873ee:	2300      	movs	r3, #0
 80873f0:	930a      	str	r3, [sp, #40]	; 0x28
 80873f2:	0933      	lsrs	r3, r6, #4
 80873f4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80873f8:	9306      	str	r3, [sp, #24]
 80873fa:	093b      	lsrs	r3, r7, #4
 80873fc:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8087400:	9307      	str	r3, [sp, #28]
 8087402:	e9de 6730 	ldrd	r6, r7, [lr, #192]	; 0xc0
 8087406:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 808740a:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 808740e:	ea48 080a 	orr.w	r8, r8, sl
 8087412:	ea49 090b 	orr.w	r9, r9, fp
 8087416:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 808741a:	ea8a 0a06 	eor.w	sl, sl, r6
 808741e:	4656      	mov	r6, sl
 8087420:	ea8b 0b07 	eor.w	fp, fp, r7
 8087424:	465f      	mov	r7, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 8087426:	f004 040f 	and.w	r4, r4, #15
        zh ^= ctx->HH[hi];
 808742a:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 808742e:	0423      	lsls	r3, r4, #16
 8087430:	930f      	str	r3, [sp, #60]	; 0x3c
 8087432:	2300      	movs	r3, #0
 8087434:	930e      	str	r3, [sp, #56]	; 0x38
 8087436:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 808743a:	4073      	eors	r3, r6
 808743c:	461e      	mov	r6, r3
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 808743e:	9b10      	ldr	r3, [sp, #64]	; 0x40

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8087440:	407c      	eors	r4, r7
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8087442:	4299      	cmp	r1, r3

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8087444:	4627      	mov	r7, r4
        zl ^= ctx->HL[hi];
 8087446:	e9de 4510 	ldrd	r4, r5, [lr, #64]	; 0x40
 808744a:	ea84 0408 	eor.w	r4, r4, r8
 808744e:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8087452:	f47f af7a 	bne.w	808734a <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8087456:	0e3b      	lsrs	r3, r7, #24
 8087458:	7013      	strb	r3, [r2, #0]
 808745a:	0c3b      	lsrs	r3, r7, #16
 808745c:	7053      	strb	r3, [r2, #1]
 808745e:	0a3b      	lsrs	r3, r7, #8
 8087460:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 8087462:	0e33      	lsrs	r3, r6, #24
 8087464:	7113      	strb	r3, [r2, #4]
 8087466:	0c33      	lsrs	r3, r6, #16
 8087468:	7153      	strb	r3, [r2, #5]
 808746a:	0a33      	lsrs	r3, r6, #8
 808746c:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 808746e:	0e2b      	lsrs	r3, r5, #24
 8087470:	7213      	strb	r3, [r2, #8]
 8087472:	0c2b      	lsrs	r3, r5, #16
 8087474:	7253      	strb	r3, [r2, #9]
 8087476:	0a2b      	lsrs	r3, r5, #8
 8087478:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 808747a:	0e23      	lsrs	r3, r4, #24
 808747c:	7313      	strb	r3, [r2, #12]
 808747e:	0c23      	lsrs	r3, r4, #16
 8087480:	7353      	strb	r3, [r2, #13]
 8087482:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8087484:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 8087486:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8087488:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 808748a:	7393      	strb	r3, [r2, #14]
 808748c:	73d4      	strb	r4, [r2, #15]
}
 808748e:	b013      	add	sp, #76	; 0x4c
 8087490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087494:	080948d0 	.word	0x080948d0

08087498 <mbedtls_gcm_init>:
/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8087498:	f44f 72c4 	mov.w	r2, #392	; 0x188
 808749c:	2100      	movs	r1, #0
 808749e:	f00b be24 	b.w	80930ea <memset>

080874a2 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 80874a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80874a6:	4604      	mov	r4, r0
 80874a8:	b08d      	sub	sp, #52	; 0x34
 80874aa:	4608      	mov	r0, r1
 80874ac:	4691      	mov	r9, r2
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80874ae:	4619      	mov	r1, r3
 80874b0:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 80874b2:	4698      	mov	r8, r3
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80874b4:	f7fb fea4 	bl	8083200 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 80874b8:	2800      	cmp	r0, #0
 80874ba:	f000 809b 	beq.w	80875f4 <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 80874be:	6945      	ldr	r5, [r0, #20]
 80874c0:	9002      	str	r0, [sp, #8]
 80874c2:	2d10      	cmp	r5, #16
 80874c4:	f040 8096 	bne.w	80875f4 <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 80874c8:	4620      	mov	r0, r4
 80874ca:	f7fb feb1 	bl	8083230 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 80874ce:	9902      	ldr	r1, [sp, #8]
 80874d0:	4620      	mov	r0, r4
 80874d2:	f7fc f87d 	bl	80835d0 <mbedtls_cipher_setup>
 80874d6:	2800      	cmp	r0, #0
 80874d8:	f040 808e 	bne.w	80875f8 <mbedtls_gcm_setkey+0x156>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 80874dc:	2301      	movs	r3, #1
 80874de:	4642      	mov	r2, r8
 80874e0:	4649      	mov	r1, r9
 80874e2:	4620      	mov	r0, r4
 80874e4:	f7fb feb6 	bl	8083254 <mbedtls_cipher_setkey>
 80874e8:	2800      	cmp	r0, #0
 80874ea:	f040 8085 	bne.w	80875f8 <mbedtls_gcm_setkey+0x156>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
 80874ee:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 80874f0:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
 80874f2:	462a      	mov	r2, r5
 80874f4:	a808      	add	r0, sp, #32
 80874f6:	f00b fdf8 	bl	80930ea <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 80874fa:	ab07      	add	r3, sp, #28
 80874fc:	9300      	str	r3, [sp, #0]
 80874fe:	ab08      	add	r3, sp, #32
 8087500:	462a      	mov	r2, r5
 8087502:	4619      	mov	r1, r3
 8087504:	4620      	mov	r0, r4
 8087506:	f7fb fef3 	bl	80832f0 <mbedtls_cipher_update>
 808750a:	2800      	cmp	r0, #0
 808750c:	d174      	bne.n	80875f8 <mbedtls_gcm_setkey+0x156>
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 808750e:	4602      	mov	r2, r0
 8087510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087512:	9908      	ldr	r1, [sp, #32]
 8087514:	ba1d      	rev	r5, r3
 8087516:	432a      	orrs	r2, r5

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 8087518:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 808751a:	ba0b      	rev	r3, r1
 808751c:	990b      	ldr	r1, [sp, #44]	; 0x2c

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 808751e:	fa95 f985 	rev.w	r9, r5
 8087522:	fa91 fe81 	rev.w	lr, r1
 8087526:	4649      	mov	r1, r9
 8087528:	ea40 000e 	orr.w	r0, r0, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
    ctx->HH[8] = vh;
 808752c:	f504 7580 	add.w	r5, r4, #256	; 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8087530:	f04f 0800 	mov.w	r8, #0
 8087534:	f04f 0900 	mov.w	r9, #0
    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 8087538:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
    ctx->HH[8] = vh;
 808753c:	e9c5 2300 	strd	r2, r3, [r5]
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8087540:	e9c4 8930 	strd	r8, r9, [r4, #192]	; 0xc0
    ctx->HL[0] = 0;
 8087544:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
 8087548:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
 808754c:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 808754e:	f04f 4c61 	mov.w	ip, #3774873600	; 0xe1000000
 8087552:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8087556:	07d7      	lsls	r7, r2, #31
 8087558:	0849      	lsrs	r1, r1, #1
 808755a:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 808755e:	085b      	lsrs	r3, r3, #1
 8087560:	ea4f 0232 	mov.w	r2, r2, rrx
 8087564:	fb0c fb08 	mul.w	fp, ip, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8087568:	2600      	movs	r6, #0
 808756a:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 808756e:	4330      	orrs	r0, r6
 8087570:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8087572:	4072      	eors	r2, r6
 8087574:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 8087578:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
 808757c:	e9c8 0110 	strd	r0, r1, [r8, #64]	; 0x40
        ctx->HH[i] = vh;
 8087580:	e9c8 2330 	strd	r2, r3, [r8, #192]	; 0xc0

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 8087584:	ea4f 0565 	mov.w	r5, r5, asr #1
 8087588:	d1e3      	bne.n	8087552 <mbedtls_gcm_setkey+0xb0>
 808758a:	2003      	movs	r0, #3
 808758c:	2102      	movs	r1, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 808758e:	f104 0840 	add.w	r8, r4, #64	; 0x40
 8087592:	f104 0cc0 	add.w	ip, r4, #192	; 0xc0
 8087596:	00cb      	lsls	r3, r1, #3
 8087598:	eb08 0e03 	add.w	lr, r8, r3
 808759c:	4463      	add	r3, ip
        vh = *HiH;
 808759e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80875a2:	e9cd 4502 	strd	r4, r5, [sp, #8]
        vl = *HiL;
 80875a6:	e9de 4500 	ldrd	r4, r5, [lr]
 80875aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80875ae:	4665      	mov	r5, ip
 80875b0:	4644      	mov	r4, r8
        for( j = 1; j < i; j++ )
 80875b2:	2201      	movs	r2, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
 80875b4:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 80875b8:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
 80875bc:	ea89 0906 	eor.w	r9, r9, r6
 80875c0:	ea8a 0a07 	eor.w	sl, sl, r7
 80875c4:	464e      	mov	r6, r9
 80875c6:	4657      	mov	r7, sl
            HiL[j] = vl ^ ctx->HL[j];
 80875c8:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
        {
            HiH[j] = vh ^ ctx->HH[j];
 80875cc:	e9e3 6702 	strd	r6, r7, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
 80875d0:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
 80875d4:	ea89 0906 	eor.w	r9, r9, r6
 80875d8:	ea8a 0a07 	eor.w	sl, sl, r7
 80875dc:	464e      	mov	r6, r9
 80875de:	4657      	mov	r7, sl
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 80875e0:	3201      	adds	r2, #1
 80875e2:	428a      	cmp	r2, r1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
 80875e4:	e9ee 6702 	strd	r6, r7, [lr, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 80875e8:	d1e4      	bne.n	80875b4 <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
 80875ea:	3801      	subs	r0, #1
 80875ec:	ea4f 0142 	mov.w	r1, r2, lsl #1
 80875f0:	d1d1      	bne.n	8087596 <mbedtls_gcm_setkey+0xf4>
 80875f2:	e001      	b.n	80875f8 <mbedtls_gcm_setkey+0x156>
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80875f4:	f06f 0013 	mvn.w	r0, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
 80875f8:	b00d      	add	sp, #52	; 0x34
 80875fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080875fe <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80875fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8087602:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8087606:	b08b      	sub	sp, #44	; 0x2c
 8087608:	4604      	mov	r4, r0
 808760a:	468b      	mov	fp, r1
 808760c:	4690      	mov	r8, r2
 808760e:	9e15      	ldr	r6, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8087610:	f8cd 9014 	str.w	r9, [sp, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 8087614:	461d      	mov	r5, r3
 8087616:	2b00      	cmp	r3, #0
 8087618:	f000 808d 	beq.w	8087736 <mbedtls_gcm_starts+0x138>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 808761c:	f500 77b0 	add.w	r7, r0, #352	; 0x160
 8087620:	2210      	movs	r2, #16
 8087622:	4649      	mov	r1, r9
 8087624:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8087626:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 808762a:	f00b fd5e 	bl	80930ea <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 808762e:	4649      	mov	r1, r9
 8087630:	2210      	movs	r2, #16
 8087632:	4650      	mov	r0, sl
 8087634:	f00b fd59 	bl	80930ea <memset>

    ctx->mode = mode;
 8087638:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    ctx->len = 0;
    ctx->add_len = 0;
 808763c:	46a3      	mov	fp, r4

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 808763e:	2000      	movs	r0, #0
 8087640:	2100      	movs	r1, #0
 8087642:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    ctx->add_len = 0;

    if( iv_len == 12 )
 8087646:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 8087648:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 808764c:	e9eb 0152 	strd	r0, r1, [fp, #328]!	; 0x148

    if( iv_len == 12 )
 8087650:	d10d      	bne.n	808766e <mbedtls_gcm_starts+0x70>
    {
        memcpy( ctx->y, iv, iv_len );
 8087652:	f8d8 3000 	ldr.w	r3, [r8]
 8087656:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 808765a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808765e:	607b      	str	r3, [r7, #4]
 8087660:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8087664:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
 8087666:	2301      	movs	r3, #1
 8087668:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
 808766c:	e03a      	b.n	80876e4 <mbedtls_gcm_starts+0xe6>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 808766e:	2210      	movs	r2, #16
 8087670:	4649      	mov	r1, r9
 8087672:	a806      	add	r0, sp, #24
 8087674:	f00b fd39 	bl	80930ea <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8087678:	00eb      	lsls	r3, r5, #3
 808767a:	0e1a      	lsrs	r2, r3, #24
 808767c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8087680:	0c1a      	lsrs	r2, r3, #16
 8087682:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8087686:	0a1a      	lsrs	r2, r3, #8
 8087688:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 808768c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8087690:	462b      	mov	r3, r5
 8087692:	f204 195f 	addw	r9, r4, #351	; 0x15f
 8087696:	4649      	mov	r1, r9
 8087698:	2d10      	cmp	r5, #16
 808769a:	bf28      	it	cs
 808769c:	2310      	movcs	r3, #16
 808769e:	4642      	mov	r2, r8
 80876a0:	4498      	add	r8, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
 80876a2:	f812 eb01 	ldrb.w	lr, [r2], #1
 80876a6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80876aa:	4542      	cmp	r2, r8
                ctx->y[i] ^= p[i];
 80876ac:	ea8e 0000 	eor.w	r0, lr, r0
 80876b0:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80876b2:	d1f6      	bne.n	80876a2 <mbedtls_gcm_starts+0xa4>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
 80876b4:	463a      	mov	r2, r7
 80876b6:	4639      	mov	r1, r7
 80876b8:	4620      	mov	r0, r4
 80876ba:	9303      	str	r3, [sp, #12]
 80876bc:	f7ff fe34 	bl	8087328 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
 80876c0:	9b03      	ldr	r3, [sp, #12]
 80876c2:	1aed      	subs	r5, r5, r3
 80876c4:	d1e4      	bne.n	8087690 <mbedtls_gcm_starts+0x92>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
 80876c6:	ab06      	add	r3, sp, #24
 80876c8:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80876cc:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80876ce:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 80876d0:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80876d2:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 80876d4:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80876d8:	d1f5      	bne.n	80876c6 <mbedtls_gcm_starts+0xc8>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
 80876da:	463a      	mov	r2, r7
 80876dc:	4639      	mov	r1, r7
 80876de:	4620      	mov	r0, r4
 80876e0:	f7ff fe22 	bl	8087328 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 80876e4:	ab05      	add	r3, sp, #20
 80876e6:	9300      	str	r3, [sp, #0]
 80876e8:	2210      	movs	r2, #16
 80876ea:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 80876ee:	4639      	mov	r1, r7
 80876f0:	4620      	mov	r0, r4
 80876f2:	f7fb fdfd 	bl	80832f0 <mbedtls_cipher_update>
 80876f6:	bb10      	cbnz	r0, 808773e <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
 80876f8:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
 80876fc:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
 8087700:	b1e6      	cbz	r6, 808773c <mbedtls_gcm_starts+0x13e>
 8087702:	9b14      	ldr	r3, [sp, #80]	; 0x50
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 8087704:	4635      	mov	r5, r6
 8087706:	4619      	mov	r1, r3
 8087708:	2e10      	cmp	r6, #16
 808770a:	bf28      	it	cs
 808770c:	2510      	movcs	r5, #16
 808770e:	4429      	add	r1, r5
 8087710:	f204 126f 	addw	r2, r4, #367	; 0x16f
 8087714:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
 8087716:	f813 0b01 	ldrb.w	r0, [r3], #1
 808771a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 808771e:	4041      	eors	r1, r0
 8087720:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
 8087722:	9914      	ldr	r1, [sp, #80]	; 0x50
 8087724:	4299      	cmp	r1, r3
 8087726:	d1f6      	bne.n	8087716 <mbedtls_gcm_starts+0x118>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8087728:	4652      	mov	r2, sl
 808772a:	4651      	mov	r1, sl
 808772c:	4620      	mov	r0, r4
 808772e:	f7ff fdfb 	bl	8087328 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
 8087732:	1b76      	subs	r6, r6, r5
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 8087734:	e7e4      	b.n	8087700 <mbedtls_gcm_starts+0x102>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8087736:	f06f 0013 	mvn.w	r0, #19
 808773a:	e000      	b.n	808773e <mbedtls_gcm_starts+0x140>

        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
 808773c:	4630      	mov	r0, r6
}
 808773e:	b00b      	add	sp, #44	; 0x2c
 8087740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08087744 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8087744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087748:	461f      	mov	r7, r3
 808774a:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 808774c:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 808774e:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8087750:	4604      	mov	r4, r0
 8087752:	460e      	mov	r6, r1
 8087754:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8087756:	9305      	str	r3, [sp, #20]

    if( output > input && (size_t) ( output - input ) < length )
 8087758:	d902      	bls.n	8087760 <mbedtls_gcm_update+0x1c>
 808775a:	1abb      	subs	r3, r7, r2
 808775c:	428b      	cmp	r3, r1
 808775e:	d35c      	bcc.n	808781a <mbedtls_gcm_update+0xd6>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8087760:	4625      	mov	r5, r4
 8087762:	e9f5 0150 	ldrd	r0, r1, [r5, #320]!	; 0x140
 8087766:	1982      	adds	r2, r0, r6
 8087768:	f141 0300 	adc.w	r3, r1, #0
 808776c:	428b      	cmp	r3, r1
 808776e:	bf08      	it	eq
 8087770:	4282      	cmpeq	r2, r0
 8087772:	d352      	bcc.n	808781a <mbedtls_gcm_update+0xd6>
 8087774:	210f      	movs	r1, #15
 8087776:	f06f 001f 	mvn.w	r0, #31
 808777a:	4299      	cmp	r1, r3
 808777c:	bf08      	it	eq
 808777e:	4290      	cmpeq	r0, r2
 8087780:	d34b      	bcc.n	808781a <mbedtls_gcm_update+0xd6>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8087782:	e9c5 2300 	strd	r2, r3, [r5]
 8087786:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 808778a:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 808778c:	f504 73b0 	add.w	r3, r4, #352	; 0x160
 8087790:	f10d 0a18 	add.w	sl, sp, #24
 8087794:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 8087796:	2e00      	cmp	r6, #0
 8087798:	d042      	beq.n	8087820 <mbedtls_gcm_update+0xdc>
 808779a:	f504 75b8 	add.w	r5, r4, #368	; 0x170
    {
        use_len = ( length < 16 ) ? length : 16;
 808779e:	462a      	mov	r2, r5
 80877a0:	46ab      	mov	fp, r5
 80877a2:	2e10      	cmp	r6, #16
 80877a4:	46b1      	mov	r9, r6
 80877a6:	bf28      	it	cs
 80877a8:	f04f 0910 	movcs.w	r9, #16

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
 80877ac:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80877b0:	3301      	adds	r3, #1
 80877b2:	b2db      	uxtb	r3, r3
 80877b4:	7013      	strb	r3, [r2, #0]
 80877b6:	b913      	cbnz	r3, 80877be <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
 80877b8:	9b02      	ldr	r3, [sp, #8]
 80877ba:	429a      	cmp	r2, r3
 80877bc:	d1f6      	bne.n	80877ac <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80877be:	ab05      	add	r3, sp, #20
 80877c0:	9300      	str	r3, [sp, #0]
 80877c2:	2210      	movs	r2, #16
 80877c4:	4653      	mov	r3, sl
 80877c6:	9903      	ldr	r1, [sp, #12]
 80877c8:	4620      	mov	r0, r4
 80877ca:	f7fb fd91 	bl	80832f0 <mbedtls_cipher_update>
 80877ce:	bb40      	cbnz	r0, 8087822 <mbedtls_gcm_update+0xde>
 80877d0:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 80877d2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80877d6:	b91b      	cbnz	r3, 80877e0 <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
 80877d8:	7829      	ldrb	r1, [r5, #0]
 80877da:	7813      	ldrb	r3, [r2, #0]
 80877dc:	404b      	eors	r3, r1
 80877de:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
 80877e0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80877e4:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80877e8:	3501      	adds	r5, #1
 80877ea:	404b      	eors	r3, r1
 80877ec:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80877ee:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 80877f2:	3001      	adds	r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80877f4:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
 80877f6:	bf02      	ittt	eq
 80877f8:	f815 1c01 	ldrbeq.w	r1, [r5, #-1]
 80877fc:	404b      	eoreq	r3, r1
 80877fe:	f805 3c01 	strbeq.w	r3, [r5, #-1]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 8087802:	4581      	cmp	r9, r0
 8087804:	d1e5      	bne.n	80877d2 <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8087806:	465a      	mov	r2, fp
 8087808:	4659      	mov	r1, fp
 808780a:	4620      	mov	r0, r4
 808780c:	f7ff fd8c 	bl	8087328 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
 8087810:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
 8087814:	44c8      	add	r8, r9
        out_p += use_len;
 8087816:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 8087818:	e7bd      	b.n	8087796 <mbedtls_gcm_update+0x52>
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 808781a:	f06f 0013 	mvn.w	r0, #19
 808781e:	e000      	b.n	8087822 <mbedtls_gcm_update+0xde>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 8087820:	4630      	mov	r0, r6
}
 8087822:	b00b      	add	sp, #44	; 0x2c
 8087824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08087828 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8087828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 808782c:	4688      	mov	r8, r1
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 808782e:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
 8087832:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 8087836:	00cd      	lsls	r5, r1, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8087838:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
                unsigned char *tag,
                size_t tag_len )
{
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 808783c:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 8087840:	00dc      	lsls	r4, r3, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8087842:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8087846:	00cf      	lsls	r7, r1, #3
 8087848:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 808784c:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 808784e:	1f13      	subs	r3, r2, #4
 8087850:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8087852:	4681      	mov	r9, r0
 8087854:	4692      	mov	sl, r2
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
 8087856:	d85b      	bhi.n	8087910 <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 8087858:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 808785c:	4640      	mov	r0, r8
 808785e:	f00b fc1e 	bl	809309e <memcpy>

    if( orig_len || orig_add_len )
 8087862:	ea54 0305 	orrs.w	r3, r4, r5
 8087866:	d104      	bne.n	8087872 <mbedtls_gcm_finish+0x4a>
 8087868:	ea56 0307 	orrs.w	r3, r6, r7
 808786c:	d101      	bne.n	8087872 <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 808786e:	2000      	movs	r0, #0
 8087870:	e050      	b.n	8087914 <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
 8087872:	2210      	movs	r2, #16
 8087874:	2100      	movs	r1, #0
 8087876:	4668      	mov	r0, sp
 8087878:	f00b fc37 	bl	80930ea <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 808787c:	0e3b      	lsrs	r3, r7, #24
 808787e:	f88d 3000 	strb.w	r3, [sp]
 8087882:	0c3b      	lsrs	r3, r7, #16
 8087884:	f88d 3001 	strb.w	r3, [sp, #1]
 8087888:	0a3b      	lsrs	r3, r7, #8
 808788a:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 808788e:	0e33      	lsrs	r3, r6, #24
 8087890:	f88d 3004 	strb.w	r3, [sp, #4]
 8087894:	0c33      	lsrs	r3, r6, #16
 8087896:	f88d 3005 	strb.w	r3, [sp, #5]
 808789a:	0a33      	lsrs	r3, r6, #8
 808789c:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80878a0:	0e2b      	lsrs	r3, r5, #24
 80878a2:	f88d 3008 	strb.w	r3, [sp, #8]
 80878a6:	0c2b      	lsrs	r3, r5, #16
 80878a8:	f88d 3009 	strb.w	r3, [sp, #9]
 80878ac:	0a2b      	lsrs	r3, r5, #8
 80878ae:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 80878b2:	0e23      	lsrs	r3, r4, #24
 80878b4:	f88d 300c 	strb.w	r3, [sp, #12]
 80878b8:	0c23      	lsrs	r3, r4, #16
 80878ba:	f88d 300d 	strb.w	r3, [sp, #13]
 80878be:	f88d 400f 	strb.w	r4, [sp, #15]
 80878c2:	0a23      	lsrs	r3, r4, #8
 80878c4:	f209 146f 	addw	r4, r9, #367	; 0x16f
 80878c8:	4622      	mov	r2, r4
 80878ca:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80878ce:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80878d2:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80878d6:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80878da:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 80878dc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80878e0:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80878e4:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 80878e6:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80878e8:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 80878ea:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80878ec:	d1f6      	bne.n	80878dc <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80878ee:	f509 72b8 	add.w	r2, r9, #368	; 0x170
 80878f2:	4611      	mov	r1, r2
 80878f4:	4648      	mov	r0, r9
 80878f6:	f7ff fd17 	bl	8087328 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
 80878fa:	4641      	mov	r1, r8
 80878fc:	44c2      	add	sl, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
 80878fe:	780a      	ldrb	r2, [r1, #0]
 8087900:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8087904:	4053      	eors	r3, r2
 8087906:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
 808790a:	4551      	cmp	r1, sl
 808790c:	d1f7      	bne.n	80878fe <mbedtls_gcm_finish+0xd6>
 808790e:	e7ae      	b.n	808786e <mbedtls_gcm_finish+0x46>
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8087910:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
 8087914:	b004      	add	sp, #16
 8087916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808791a <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 808791a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808791e:	4617      	mov	r7, r2
 8087920:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8087922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8087924:	4604      	mov	r4, r0
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8087926:	9301      	str	r3, [sp, #4]
 8087928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 808792a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 808792e:	9300      	str	r3, [sp, #0]
 8087930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8087932:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8087936:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8087938:	9d10      	ldr	r5, [sp, #64]	; 0x40
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 808793a:	f7ff fe60 	bl	80875fe <mbedtls_gcm_starts>
 808793e:	b970      	cbnz	r0, 808795e <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8087940:	464b      	mov	r3, r9
 8087942:	4642      	mov	r2, r8
 8087944:	4639      	mov	r1, r7
 8087946:	4620      	mov	r0, r4
 8087948:	f7ff fefc 	bl	8087744 <mbedtls_gcm_update>
 808794c:	b938      	cbnz	r0, 808795e <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 808794e:	4632      	mov	r2, r6
 8087950:	4629      	mov	r1, r5
 8087952:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 8087954:	b003      	add	sp, #12
 8087956:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 808795a:	f7ff bf65 	b.w	8087828 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
 808795e:	b003      	add	sp, #12
 8087960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08087964 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087966:	460e      	mov	r6, r1
 8087968:	b08d      	sub	sp, #52	; 0x34
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 808796a:	9916      	ldr	r1, [sp, #88]	; 0x58
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 808796c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 808796e:	9103      	str	r1, [sp, #12]
 8087970:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087972:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8087974:	9102      	str	r1, [sp, #8]
 8087976:	9912      	ldr	r1, [sp, #72]	; 0x48
 8087978:	af08      	add	r7, sp, #32
 808797a:	9101      	str	r1, [sp, #4]
 808797c:	9300      	str	r3, [sp, #0]
 808797e:	9706      	str	r7, [sp, #24]
 8087980:	4613      	mov	r3, r2
 8087982:	9505      	str	r5, [sp, #20]
 8087984:	9404      	str	r4, [sp, #16]
 8087986:	4632      	mov	r2, r6
 8087988:	2100      	movs	r1, #0
 808798a:	f7ff ffc6 	bl	808791a <mbedtls_gcm_crypt_and_tag>
 808798e:	b998      	cbnz	r0, 80879b8 <mbedtls_gcm_auth_decrypt+0x54>
 8087990:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8087992:	42ab      	cmp	r3, r5
 8087994:	d006      	beq.n	80879a4 <mbedtls_gcm_auth_decrypt+0x40>
        diff |= tag[i] ^ check_tag[i];
 8087996:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8087998:	5cd1      	ldrb	r1, [r2, r3]
 808799a:	5cfa      	ldrb	r2, [r7, r3]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 808799c:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 808799e:	404a      	eors	r2, r1
 80879a0:	4310      	orrs	r0, r2
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80879a2:	e7f6      	b.n	8087992 <mbedtls_gcm_auth_decrypt+0x2e>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 80879a4:	b140      	cbz	r0, 80879b8 <mbedtls_gcm_auth_decrypt+0x54>
 80879a6:	4426      	add	r6, r4
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80879a8:	2300      	movs	r3, #0
 80879aa:	42a6      	cmp	r6, r4
 80879ac:	d002      	beq.n	80879b4 <mbedtls_gcm_auth_decrypt+0x50>
 80879ae:	7023      	strb	r3, [r4, #0]
 80879b0:	3401      	adds	r4, #1
 80879b2:	e7fa      	b.n	80879aa <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 80879b4:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 80879b8:	b00d      	add	sp, #52	; 0x34
 80879ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080879bc <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 80879bc:	b510      	push	{r4, lr}
 80879be:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 80879c0:	f7fb fc36 	bl	8083230 <mbedtls_cipher_free>
 80879c4:	f504 72c4 	add.w	r2, r4, #392	; 0x188
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80879c8:	2300      	movs	r3, #0
 80879ca:	4294      	cmp	r4, r2
 80879cc:	d002      	beq.n	80879d4 <mbedtls_gcm_free+0x18>
 80879ce:	7023      	strb	r3, [r4, #0]
 80879d0:	3401      	adds	r4, #1
 80879d2:	e7fa      	b.n	80879ca <mbedtls_gcm_free+0xe>
 80879d4:	bd10      	pop	{r4, pc}
	...

080879d8 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 80879d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80879dc:	2700      	movs	r7, #0
 80879de:	463c      	mov	r4, r7
 80879e0:	463d      	mov	r5, r7
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 80879e2:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80879e6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8087b00 <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80879ea:	4575      	cmp	r5, lr
 80879ec:	d22d      	bcs.n	8087a4a <mbedtls_base64_decode+0x72>
 80879ee:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80879f2:	5d5e      	ldrb	r6, [r3, r5]
 80879f4:	2e20      	cmp	r6, #32
 80879f6:	d104      	bne.n	8087a02 <mbedtls_base64_decode+0x2a>
        {
            ++i;
 80879f8:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80879fa:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
 80879fc:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 8087a00:	d8f7      	bhi.n	80879f2 <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 8087a02:	45ae      	cmp	lr, r5
 8087a04:	d021      	beq.n	8087a4a <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
 8087a06:	ebc5 060e 	rsb	r6, r5, lr
 8087a0a:	2e01      	cmp	r6, #1
 8087a0c:	d906      	bls.n	8087a1c <mbedtls_base64_decode+0x44>
 8087a0e:	5d5e      	ldrb	r6, [r3, r5]
 8087a10:	2e0d      	cmp	r6, #13
 8087a12:	d103      	bne.n	8087a1c <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
 8087a14:	195e      	adds	r6, r3, r5
 8087a16:	7876      	ldrb	r6, [r6, #1]
 8087a18:	2e0a      	cmp	r6, #10
 8087a1a:	d014      	beq.n	8087a46 <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
 8087a1c:	5d5e      	ldrb	r6, [r3, r5]
 8087a1e:	2e0a      	cmp	r6, #10
 8087a20:	d011      	beq.n	8087a46 <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 8087a22:	f1bc 0f00 	cmp.w	ip, #0
 8087a26:	d166      	bne.n	8087af6 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
 8087a28:	2e3d      	cmp	r6, #61	; 0x3d
 8087a2a:	d102      	bne.n	8087a32 <mbedtls_base64_decode+0x5a>
 8087a2c:	3701      	adds	r7, #1
 8087a2e:	2f02      	cmp	r7, #2
 8087a30:	d861      	bhi.n	8087af6 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8087a32:	f016 0f80 	tst.w	r6, #128	; 0x80
 8087a36:	d15e      	bne.n	8087af6 <mbedtls_base64_decode+0x11e>
 8087a38:	f818 6006 	ldrb.w	r6, [r8, r6]
 8087a3c:	2e7f      	cmp	r6, #127	; 0x7f
 8087a3e:	d05a      	beq.n	8087af6 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8087a40:	2e3f      	cmp	r6, #63	; 0x3f
 8087a42:	d956      	bls.n	8087af2 <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 8087a44:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8087a46:	3501      	adds	r5, #1
 8087a48:	e7cf      	b.n	80879ea <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
 8087a4a:	b91c      	cbnz	r4, 8087a54 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
 8087a4c:	6014      	str	r4, [r2, #0]
        return( 0 );
 8087a4e:	4620      	mov	r0, r4
 8087a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
 8087a54:	f004 0e07 	and.w	lr, r4, #7
 8087a58:	2606      	movs	r6, #6
 8087a5a:	08e4      	lsrs	r4, r4, #3
 8087a5c:	fb06 fe0e 	mul.w	lr, r6, lr
 8087a60:	4366      	muls	r6, r4
 8087a62:	f10e 0e07 	add.w	lr, lr, #7
 8087a66:	1bf6      	subs	r6, r6, r7
 8087a68:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
 8087a6c:	b160      	cbz	r0, 8087a88 <mbedtls_base64_decode+0xb0>
 8087a6e:	428c      	cmp	r4, r1
 8087a70:	d80a      	bhi.n	8087a88 <mbedtls_base64_decode+0xb0>
 8087a72:	2600      	movs	r6, #0
 8087a74:	eb03 0e05 	add.w	lr, r3, r5
 8087a78:	4601      	mov	r1, r0
 8087a7a:	2503      	movs	r5, #3
 8087a7c:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8087a7e:	f8df c080 	ldr.w	ip, [pc, #128]	; 8087b00 <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8087a82:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8087b04 <mbedtls_base64_decode+0x12c>
 8087a86:	e00f      	b.n	8087aa8 <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
 8087a88:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8087a8a:	f06f 0029 	mvn.w	r0, #41	; 0x29
 8087a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8087a92:	f813 9b01 	ldrb.w	r9, [r3], #1
 8087a96:	f1a9 070a 	sub.w	r7, r9, #10
 8087a9a:	b2ff      	uxtb	r7, r7
 8087a9c:	2f16      	cmp	r7, #22
 8087a9e:	d806      	bhi.n	8087aae <mbedtls_base64_decode+0xd6>
 8087aa0:	fa28 f707 	lsr.w	r7, r8, r7
 8087aa4:	07ff      	lsls	r7, r7, #31
 8087aa6:	d502      	bpl.n	8087aae <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8087aa8:	4573      	cmp	r3, lr
 8087aaa:	d1f2      	bne.n	8087a92 <mbedtls_base64_decode+0xba>
 8087aac:	e01c      	b.n	8087ae8 <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8087aae:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
 8087ab2:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8087ab4:	2f40      	cmp	r7, #64	; 0x40
 8087ab6:	bf08      	it	eq
 8087ab8:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8087aba:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
 8087abe:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8087ac0:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
 8087ac4:	d1f0      	bne.n	8087aa8 <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8087ac6:	b16d      	cbz	r5, 8087ae4 <mbedtls_base64_decode+0x10c>
 8087ac8:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8087aca:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8087acc:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8087ace:	d101      	bne.n	8087ad4 <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8087ad0:	3101      	adds	r1, #1
 8087ad2:	e007      	b.n	8087ae4 <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8087ad4:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8087ad6:	ea4f 2416 	mov.w	r4, r6, lsr #8
 8087ada:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8087adc:	bf16      	itet	ne
 8087ade:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8087ae0:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8087ae2:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
 8087ae4:	2400      	movs	r4, #0
 8087ae6:	e7df      	b.n	8087aa8 <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
 8087ae8:	1a08      	subs	r0, r1, r0
 8087aea:	6010      	str	r0, [r2, #0]

    return( 0 );
 8087aec:	2000      	movs	r0, #0
 8087aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8087af2:	2f00      	cmp	r7, #0
 8087af4:	d0a6      	beq.n	8087a44 <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8087af6:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 8087afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8087afe:	bf00      	nop
 8087b00:	08094950 	.word	0x08094950
 8087b04:	00400009 	.word	0x00400009

08087b08 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 8087b08:	3804      	subs	r0, #4
 8087b0a:	b2c0      	uxtb	r0, r0
 8087b0c:	2804      	cmp	r0, #4
 8087b0e:	bf9a      	itte	ls
 8087b10:	4b02      	ldrls	r3, [pc, #8]	; (8087b1c <mbedtls_md_info_from_type+0x14>)
 8087b12:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8087b16:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 8087b18:	4770      	bx	lr
 8087b1a:	bf00      	nop
 8087b1c:	080949d0 	.word	0x080949d0

08087b20 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 8087b20:	2300      	movs	r3, #0
 8087b22:	6003      	str	r3, [r0, #0]
 8087b24:	6043      	str	r3, [r0, #4]
 8087b26:	6083      	str	r3, [r0, #8]
 8087b28:	4770      	bx	lr

08087b2a <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 8087b2a:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8087b2c:	4604      	mov	r4, r0
 8087b2e:	b1e0      	cbz	r0, 8087b6a <mbedtls_md_free+0x40>
 8087b30:	6803      	ldr	r3, [r0, #0]
 8087b32:	b1d3      	cbz	r3, 8087b6a <mbedtls_md_free+0x40>
        return;

    if( ctx->md_ctx != NULL )
 8087b34:	6840      	ldr	r0, [r0, #4]
 8087b36:	b108      	cbz	r0, 8087b3c <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 8087b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087b3a:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 8087b3c:	68a3      	ldr	r3, [r4, #8]
 8087b3e:	b163      	cbz	r3, 8087b5a <mbedtls_md_free+0x30>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 8087b40:	6822      	ldr	r2, [r4, #0]
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087b42:	2100      	movs	r1, #0
 8087b44:	68d2      	ldr	r2, [r2, #12]
 8087b46:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8087b4a:	429a      	cmp	r2, r3
 8087b4c:	d002      	beq.n	8087b54 <mbedtls_md_free+0x2a>
 8087b4e:	7019      	strb	r1, [r3, #0]
 8087b50:	3301      	adds	r3, #1
 8087b52:	e7fa      	b.n	8087b4a <mbedtls_md_free+0x20>
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
 8087b54:	68a0      	ldr	r0, [r4, #8]
 8087b56:	f008 ffbd 	bl	8090ad4 <free>
 8087b5a:	f104 020c 	add.w	r2, r4, #12
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087b5e:	2300      	movs	r3, #0
 8087b60:	4294      	cmp	r4, r2
 8087b62:	d002      	beq.n	8087b6a <mbedtls_md_free+0x40>
 8087b64:	7023      	strb	r3, [r4, #0]
 8087b66:	3401      	adds	r4, #1
 8087b68:	e7fa      	b.n	8087b60 <mbedtls_md_free+0x36>
 8087b6a:	bd10      	pop	{r4, pc}

08087b6c <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 8087b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087b6e:	4605      	mov	r5, r0
 8087b70:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 8087b72:	460c      	mov	r4, r1
 8087b74:	b199      	cbz	r1, 8087b9e <mbedtls_md_setup+0x32>
 8087b76:	b190      	cbz	r0, 8087b9e <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 8087b78:	6a0b      	ldr	r3, [r1, #32]
 8087b7a:	4798      	blx	r3
 8087b7c:	4606      	mov	r6, r0
 8087b7e:	6068      	str	r0, [r5, #4]
 8087b80:	b178      	cbz	r0, 8087ba2 <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 8087b82:	b14f      	cbz	r7, 8087b98 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 8087b84:	68e1      	ldr	r1, [r4, #12]
 8087b86:	2002      	movs	r0, #2
 8087b88:	f00b fa64 	bl	8093054 <calloc>
 8087b8c:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 8087b8e:	b918      	cbnz	r0, 8087b98 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 8087b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8087b92:	4630      	mov	r0, r6
 8087b94:	4798      	blx	r3
 8087b96:	e004      	b.n	8087ba2 <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 8087b98:	602c      	str	r4, [r5, #0]

    return( 0 );
 8087b9a:	2000      	movs	r0, #0
 8087b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8087b9e:	4802      	ldr	r0, [pc, #8]	; (8087ba8 <mbedtls_md_setup+0x3c>)
 8087ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 8087ba2:	4802      	ldr	r0, [pc, #8]	; (8087bac <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 8087ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8087ba6:	bf00      	nop
 8087ba8:	ffffaf00 	.word	0xffffaf00
 8087bac:	ffffae80 	.word	0xffffae80

08087bb0 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087bb0:	b120      	cbz	r0, 8087bbc <mbedtls_md_starts+0xc>
 8087bb2:	6803      	ldr	r3, [r0, #0]
 8087bb4:	b113      	cbz	r3, 8087bbc <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 8087bb6:	691b      	ldr	r3, [r3, #16]
 8087bb8:	6840      	ldr	r0, [r0, #4]
 8087bba:	4718      	bx	r3
}
 8087bbc:	4800      	ldr	r0, [pc, #0]	; (8087bc0 <mbedtls_md_starts+0x10>)
 8087bbe:	4770      	bx	lr
 8087bc0:	ffffaf00 	.word	0xffffaf00

08087bc4 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087bc4:	b120      	cbz	r0, 8087bd0 <mbedtls_md_update+0xc>
 8087bc6:	6803      	ldr	r3, [r0, #0]
 8087bc8:	b113      	cbz	r3, 8087bd0 <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8087bca:	695b      	ldr	r3, [r3, #20]
 8087bcc:	6840      	ldr	r0, [r0, #4]
 8087bce:	4718      	bx	r3
}
 8087bd0:	4800      	ldr	r0, [pc, #0]	; (8087bd4 <mbedtls_md_update+0x10>)
 8087bd2:	4770      	bx	lr
 8087bd4:	ffffaf00 	.word	0xffffaf00

08087bd8 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087bd8:	b120      	cbz	r0, 8087be4 <mbedtls_md_finish+0xc>
 8087bda:	6803      	ldr	r3, [r0, #0]
 8087bdc:	b113      	cbz	r3, 8087be4 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8087bde:	699b      	ldr	r3, [r3, #24]
 8087be0:	6840      	ldr	r0, [r0, #4]
 8087be2:	4718      	bx	r3
}
 8087be4:	4800      	ldr	r0, [pc, #0]	; (8087be8 <mbedtls_md_finish+0x10>)
 8087be6:	4770      	bx	lr
 8087be8:	ffffaf00 	.word	0xffffaf00

08087bec <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 8087bec:	b430      	push	{r4, r5}
 8087bee:	460d      	mov	r5, r1
 8087bf0:	4611      	mov	r1, r2
    if( md_info == NULL )
 8087bf2:	b128      	cbz	r0, 8087c00 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 8087bf4:	69c4      	ldr	r4, [r0, #28]
 8087bf6:	461a      	mov	r2, r3
 8087bf8:	4628      	mov	r0, r5
 8087bfa:	4623      	mov	r3, r4
}
 8087bfc:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 8087bfe:	4718      	bx	r3
}
 8087c00:	4801      	ldr	r0, [pc, #4]	; (8087c08 <mbedtls_md+0x1c>)
 8087c02:	bc30      	pop	{r4, r5}
 8087c04:	4770      	bx	lr
 8087c06:	bf00      	nop
 8087c08:	ffffaf00 	.word	0xffffaf00

08087c0c <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 8087c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087c10:	460d      	mov	r5, r1
 8087c12:	b090      	sub	sp, #64	; 0x40
 8087c14:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8087c16:	4604      	mov	r4, r0
 8087c18:	2800      	cmp	r0, #0
 8087c1a:	d050      	beq.n	8087cbe <mbedtls_md_hmac_starts+0xb2>
 8087c1c:	6803      	ldr	r3, [r0, #0]
 8087c1e:	2b00      	cmp	r3, #0
 8087c20:	d04d      	beq.n	8087cbe <mbedtls_md_hmac_starts+0xb2>
 8087c22:	6882      	ldr	r2, [r0, #8]
 8087c24:	2a00      	cmp	r2, #0
 8087c26:	d04a      	beq.n	8087cbe <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 8087c28:	68da      	ldr	r2, [r3, #12]
 8087c2a:	42ba      	cmp	r2, r7
 8087c2c:	d215      	bcs.n	8087c5a <mbedtls_md_hmac_starts+0x4e>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8087c2e:	691b      	ldr	r3, [r3, #16]
 8087c30:	6840      	ldr	r0, [r0, #4]
 8087c32:	4798      	blx	r3
 8087c34:	2800      	cmp	r0, #0
 8087c36:	d139      	bne.n	8087cac <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 8087c38:	6823      	ldr	r3, [r4, #0]
 8087c3a:	463a      	mov	r2, r7
 8087c3c:	695b      	ldr	r3, [r3, #20]
 8087c3e:	4629      	mov	r1, r5
 8087c40:	6860      	ldr	r0, [r4, #4]
 8087c42:	4798      	blx	r3
 8087c44:	2800      	cmp	r0, #0
 8087c46:	d131      	bne.n	8087cac <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 8087c48:	6823      	ldr	r3, [r4, #0]
 8087c4a:	4669      	mov	r1, sp
 8087c4c:	699b      	ldr	r3, [r3, #24]
 8087c4e:	6860      	ldr	r0, [r4, #4]
 8087c50:	4798      	blx	r3
 8087c52:	bb58      	cbnz	r0, 8087cac <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 8087c54:	466d      	mov	r5, sp
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
            goto cleanup;

        keylen = ctx->md_info->size;
 8087c56:	6823      	ldr	r3, [r4, #0]
 8087c58:	689f      	ldr	r7, [r3, #8]
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8087c5a:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 8087c5c:	68a6      	ldr	r6, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8087c5e:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8087c60:	2136      	movs	r1, #54	; 0x36
 8087c62:	4630      	mov	r0, r6
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8087c64:	eb06 0802 	add.w	r8, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
 8087c68:	f00b fa3f 	bl	80930ea <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 8087c6c:	6823      	ldr	r3, [r4, #0]
 8087c6e:	215c      	movs	r1, #92	; 0x5c
 8087c70:	68da      	ldr	r2, [r3, #12]
 8087c72:	4640      	mov	r0, r8
 8087c74:	f00b fa39 	bl	80930ea <memset>

    for( i = 0; i < keylen; i++ )
 8087c78:	2300      	movs	r3, #0
 8087c7a:	429f      	cmp	r7, r3
 8087c7c:	d00b      	beq.n	8087c96 <mbedtls_md_hmac_starts+0x8a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8087c7e:	5cf1      	ldrb	r1, [r6, r3]
 8087c80:	5cea      	ldrb	r2, [r5, r3]
 8087c82:	404a      	eors	r2, r1
 8087c84:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8087c86:	f818 1003 	ldrb.w	r1, [r8, r3]
 8087c8a:	5cea      	ldrb	r2, [r5, r3]
 8087c8c:	404a      	eors	r2, r1
 8087c8e:	f808 2003 	strb.w	r2, [r8, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 8087c92:	3301      	adds	r3, #1
 8087c94:	e7f1      	b.n	8087c7a <mbedtls_md_hmac_starts+0x6e>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8087c96:	6823      	ldr	r3, [r4, #0]
 8087c98:	6860      	ldr	r0, [r4, #4]
 8087c9a:	691b      	ldr	r3, [r3, #16]
 8087c9c:	4798      	blx	r3
 8087c9e:	b928      	cbnz	r0, 8087cac <mbedtls_md_hmac_starts+0xa0>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 8087ca0:	6823      	ldr	r3, [r4, #0]
 8087ca2:	4631      	mov	r1, r6
 8087ca4:	695d      	ldr	r5, [r3, #20]
 8087ca6:	68da      	ldr	r2, [r3, #12]
 8087ca8:	6860      	ldr	r0, [r4, #4]
 8087caa:	47a8      	blx	r5
 8087cac:	2300      	movs	r3, #0
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087cae:	4619      	mov	r1, r3
 8087cb0:	eb0d 0203 	add.w	r2, sp, r3
 8087cb4:	3301      	adds	r3, #1
 8087cb6:	2b41      	cmp	r3, #65	; 0x41
 8087cb8:	d002      	beq.n	8087cc0 <mbedtls_md_hmac_starts+0xb4>
 8087cba:	7011      	strb	r1, [r2, #0]
 8087cbc:	e7f8      	b.n	8087cb0 <mbedtls_md_hmac_starts+0xa4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8087cbe:	4802      	ldr	r0, [pc, #8]	; (8087cc8 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 8087cc0:	b010      	add	sp, #64	; 0x40
 8087cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087cc6:	bf00      	nop
 8087cc8:	ffffaf00 	.word	0xffffaf00

08087ccc <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8087ccc:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8087cce:	b138      	cbz	r0, 8087ce0 <mbedtls_md_hmac_update+0x14>
 8087cd0:	6803      	ldr	r3, [r0, #0]
 8087cd2:	b12b      	cbz	r3, 8087ce0 <mbedtls_md_hmac_update+0x14>
 8087cd4:	6884      	ldr	r4, [r0, #8]
 8087cd6:	b11c      	cbz	r4, 8087ce0 <mbedtls_md_hmac_update+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8087cd8:	695b      	ldr	r3, [r3, #20]
 8087cda:	6840      	ldr	r0, [r0, #4]
}
 8087cdc:	bc10      	pop	{r4}
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8087cde:	4718      	bx	r3
}
 8087ce0:	4801      	ldr	r0, [pc, #4]	; (8087ce8 <mbedtls_md_hmac_update+0x1c>)
 8087ce2:	bc10      	pop	{r4}
 8087ce4:	4770      	bx	lr
 8087ce6:	bf00      	nop
 8087ce8:	ffffaf00 	.word	0xffffaf00

08087cec <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 8087cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087cf0:	460d      	mov	r5, r1
 8087cf2:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8087cf4:	4604      	mov	r4, r0
 8087cf6:	b318      	cbz	r0, 8087d40 <mbedtls_md_hmac_finish+0x54>
 8087cf8:	6803      	ldr	r3, [r0, #0]
 8087cfa:	b30b      	cbz	r3, 8087d40 <mbedtls_md_hmac_finish+0x54>
 8087cfc:	6886      	ldr	r6, [r0, #8]
 8087cfe:	b1fe      	cbz	r6, 8087d40 <mbedtls_md_hmac_finish+0x54>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8087d00:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 8087d02:	4669      	mov	r1, sp
 8087d04:	699b      	ldr	r3, [r3, #24]
 8087d06:	6840      	ldr	r0, [r0, #4]
 8087d08:	4798      	blx	r3
 8087d0a:	b9d0      	cbnz	r0, 8087d42 <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8087d0c:	6823      	ldr	r3, [r4, #0]
 8087d0e:	6860      	ldr	r0, [r4, #4]
 8087d10:	691b      	ldr	r3, [r3, #16]
 8087d12:	4798      	blx	r3
 8087d14:	b9a8      	cbnz	r0, 8087d42 <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 8087d16:	6823      	ldr	r3, [r4, #0]
 8087d18:	19f1      	adds	r1, r6, r7
 8087d1a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8087d1e:	68da      	ldr	r2, [r3, #12]
 8087d20:	6860      	ldr	r0, [r4, #4]
 8087d22:	47c0      	blx	r8
 8087d24:	b968      	cbnz	r0, 8087d42 <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 8087d26:	6823      	ldr	r3, [r4, #0]
 8087d28:	4669      	mov	r1, sp
 8087d2a:	695e      	ldr	r6, [r3, #20]
 8087d2c:	689a      	ldr	r2, [r3, #8]
 8087d2e:	6860      	ldr	r0, [r4, #4]
 8087d30:	47b0      	blx	r6
 8087d32:	b930      	cbnz	r0, 8087d42 <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8087d34:	6823      	ldr	r3, [r4, #0]
 8087d36:	4629      	mov	r1, r5
 8087d38:	699b      	ldr	r3, [r3, #24]
 8087d3a:	6860      	ldr	r0, [r4, #4]
 8087d3c:	4798      	blx	r3
 8087d3e:	e000      	b.n	8087d42 <mbedtls_md_hmac_finish+0x56>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8087d40:	4801      	ldr	r0, [pc, #4]	; (8087d48 <mbedtls_md_hmac_finish+0x5c>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 8087d42:	b010      	add	sp, #64	; 0x40
 8087d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087d48:	ffffaf00 	.word	0xffffaf00

08087d4c <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 8087d4c:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8087d4e:	4604      	mov	r4, r0
 8087d50:	b180      	cbz	r0, 8087d74 <mbedtls_md_hmac_reset+0x28>
 8087d52:	6803      	ldr	r3, [r0, #0]
 8087d54:	b173      	cbz	r3, 8087d74 <mbedtls_md_hmac_reset+0x28>
 8087d56:	6885      	ldr	r5, [r0, #8]
 8087d58:	b165      	cbz	r5, 8087d74 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8087d5a:	691b      	ldr	r3, [r3, #16]
 8087d5c:	6840      	ldr	r0, [r0, #4]
 8087d5e:	4798      	blx	r3
 8087d60:	b948      	cbnz	r0, 8087d76 <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8087d62:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
 8087d64:	4629      	mov	r1, r5
 8087d66:	695e      	ldr	r6, [r3, #20]
 8087d68:	68da      	ldr	r2, [r3, #12]
 8087d6a:	6860      	ldr	r0, [r4, #4]
 8087d6c:	4633      	mov	r3, r6
}
 8087d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
 8087d72:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8087d74:	4800      	ldr	r0, [pc, #0]	; (8087d78 <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 8087d76:	bd70      	pop	{r4, r5, r6, pc}
 8087d78:	ffffaf00 	.word	0xffffaf00

08087d7c <mbedtls_md_process>:
    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087d7c:	b120      	cbz	r0, 8087d88 <mbedtls_md_process+0xc>
 8087d7e:	6803      	ldr	r3, [r0, #0]
 8087d80:	b113      	cbz	r3, 8087d88 <mbedtls_md_process+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 8087d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087d84:	6840      	ldr	r0, [r0, #4]
 8087d86:	4718      	bx	r3
}
 8087d88:	4800      	ldr	r0, [pc, #0]	; (8087d8c <mbedtls_md_process+0x10>)
 8087d8a:	4770      	bx	lr
 8087d8c:	ffffaf00 	.word	0xffffaf00

08087d90 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8087d90:	b100      	cbz	r0, 8087d94 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 8087d92:	7a00      	ldrb	r0, [r0, #8]
}
 8087d94:	4770      	bx	lr

08087d96 <_ZL15mbedtls_zeroizePvj>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8087d96:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087d98:	2300      	movs	r3, #0
 8087d9a:	4288      	cmp	r0, r1
 8087d9c:	d002      	beq.n	8087da4 <_ZL15mbedtls_zeroizePvj+0xe>
 8087d9e:	7003      	strb	r3, [r0, #0]
 8087da0:	3001      	adds	r0, #1
 8087da2:	e7fa      	b.n	8087d9a <_ZL15mbedtls_zeroizePvj+0x4>
 8087da4:	4770      	bx	lr

08087da6 <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 8087da6:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 8087da8:	2400      	movs	r4, #0
 8087daa:	4294      	cmp	r4, r2
 8087dac:	d00c      	beq.n	8087dc8 <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
 8087dae:	5d03      	ldrb	r3, [r0, r4]
 8087db0:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
 8087db2:	405d      	eors	r5, r3
 8087db4:	d006      	beq.n	8087dc4 <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
 8087db6:	2d20      	cmp	r5, #32
 8087db8:	d108      	bne.n	8087dcc <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 8087dba:	f023 0320 	bic.w	r3, r3, #32
 8087dbe:	3b41      	subs	r3, #65	; 0x41
 8087dc0:	2b19      	cmp	r3, #25
 8087dc2:	d803      	bhi.n	8087dcc <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 8087dc4:	3401      	adds	r4, #1
 8087dc6:	e7f0      	b.n	8087daa <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
 8087dc8:	2000      	movs	r0, #0
 8087dca:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
 8087dcc:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return( 0 );
}
 8087dd0:	bd30      	pop	{r4, r5, pc}

08087dd2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 8087dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087dd4:	4605      	mov	r5, r0
 8087dd6:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 8087dd8:	b925      	cbnz	r5, 8087de4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
 8087dda:	1c20      	adds	r0, r4, #0
 8087ddc:	bf18      	it	ne
 8087dde:	2001      	movne	r0, #1
 8087de0:	4240      	negs	r0, r0
 8087de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
 8087de4:	2c00      	cmp	r4, #0
 8087de6:	d031      	beq.n	8087e4c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 8087de8:	682a      	ldr	r2, [r5, #0]
 8087dea:	6823      	ldr	r3, [r4, #0]
 8087dec:	429a      	cmp	r2, r3
 8087dee:	d12d      	bne.n	8087e4c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
 8087df0:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 8087df2:	6863      	ldr	r3, [r4, #4]
 8087df4:	429a      	cmp	r2, r3
 8087df6:	d129      	bne.n	8087e4c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 8087df8:	68a1      	ldr	r1, [r4, #8]
 8087dfa:	68a8      	ldr	r0, [r5, #8]
 8087dfc:	f00b f940 	bl	8093080 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
 8087e00:	bb20      	cbnz	r0, 8087e4c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 8087e02:	68ef      	ldr	r7, [r5, #12]
 8087e04:	68e6      	ldr	r6, [r4, #12]
 8087e06:	42b7      	cmp	r7, r6
 8087e08:	d108      	bne.n	8087e1c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
 8087e0a:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 8087e0c:	6923      	ldr	r3, [r4, #16]
 8087e0e:	429a      	cmp	r2, r3
 8087e10:	d104      	bne.n	8087e1c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
 8087e12:	6961      	ldr	r1, [r4, #20]
 8087e14:	6968      	ldr	r0, [r5, #20]
 8087e16:	f00b f933 	bl	8093080 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
 8087e1a:	b180      	cbz	r0, 8087e3e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
 8087e1c:	2f0c      	cmp	r7, #12
 8087e1e:	d001      	beq.n	8087e24 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8087e20:	2f13      	cmp	r7, #19
 8087e22:	d113      	bne.n	8087e4c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 8087e24:	2e0c      	cmp	r6, #12
 8087e26:	d001      	beq.n	8087e2c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8087e28:	2e13      	cmp	r6, #19
 8087e2a:	d10f      	bne.n	8087e4c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
 8087e2c:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8087e2e:	6923      	ldr	r3, [r4, #16]
 8087e30:	429a      	cmp	r2, r3
 8087e32:	d10b      	bne.n	8087e4c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 8087e34:	6961      	ldr	r1, [r4, #20]
 8087e36:	6968      	ldr	r0, [r5, #20]
 8087e38:	f7ff ffb5 	bl	8087da6 <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 8087e3c:	b930      	cbnz	r0, 8087e4c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 8087e3e:	7f2a      	ldrb	r2, [r5, #28]
 8087e40:	7f23      	ldrb	r3, [r4, #28]
 8087e42:	429a      	cmp	r2, r3
 8087e44:	d102      	bne.n	8087e4c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
 8087e46:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 8087e48:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 8087e4a:	e7c5      	b.n	8087dd8 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
 8087e4c:	f04f 30ff 	mov.w	r0, #4294967295
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
 8087e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087e52 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
 8087e52:	b570      	push	{r4, r5, r6, lr}
 8087e54:	460e      	mov	r6, r1
 8087e56:	4604      	mov	r4, r0
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 8087e58:	f00b f967 	bl	809312a <strlen>

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 8087e5c:	6875      	ldr	r5, [r6, #4]
 8087e5e:	2d02      	cmp	r5, #2
 8087e60:	d91e      	bls.n	8087ea0 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8087e62:	68b6      	ldr	r6, [r6, #8]
 8087e64:	7833      	ldrb	r3, [r6, #0]
 8087e66:	2b2a      	cmp	r3, #42	; 0x2a
 8087e68:	d11a      	bne.n	8087ea0 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8087e6a:	7873      	ldrb	r3, [r6, #1]
 8087e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8087e6e:	d117      	bne.n	8087ea0 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8087e70:	4623      	mov	r3, r4
 8087e72:	2200      	movs	r2, #0
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 8087e74:	4282      	cmp	r2, r0
 8087e76:	d015      	beq.n	8087ea4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
    {
        if( cn[i] == '.' )
 8087e78:	4619      	mov	r1, r3
 8087e7a:	780c      	ldrb	r4, [r1, #0]
 8087e7c:	3301      	adds	r3, #1
 8087e7e:	2c2e      	cmp	r4, #46	; 0x2e
 8087e80:	d001      	beq.n	8087e86 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x34>
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 8087e82:	3201      	adds	r2, #1
 8087e84:	e7f6      	b.n	8087e74 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x22>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
 8087e86:	b16a      	cbz	r2, 8087ea4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 8087e88:	1a82      	subs	r2, r0, r2
 8087e8a:	3d01      	subs	r5, #1
 8087e8c:	42aa      	cmp	r2, r5
 8087e8e:	d109      	bne.n	8087ea4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 8087e90:	1c70      	adds	r0, r6, #1
 8087e92:	f7ff ff88 	bl	8087da6 <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 8087e96:	3000      	adds	r0, #0
 8087e98:	bf18      	it	ne
 8087e9a:	2001      	movne	r0, #1
 8087e9c:	4240      	negs	r0, r0
 8087e9e:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
 8087ea0:	2000      	movs	r0, #0
 8087ea2:	bd70      	pop	{r4, r5, r6, pc}
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
 8087ea4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8087ea8:	bd70      	pop	{r4, r5, r6, pc}

08087eaa <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 8087eaa:	b570      	push	{r4, r5, r6, lr}
 8087eac:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
 8087eae:	6802      	ldr	r2, [r0, #0]
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 8087eb0:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
 8087eb2:	428a      	cmp	r2, r1
 8087eb4:	d00b      	beq.n	8087ece <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x24>
        return( 0 );

    uid->tag = **p;
 8087eb6:	7816      	ldrb	r6, [r2, #0]
 8087eb8:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 8087eba:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
 8087ebe:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 8087ec2:	f7fb fc69 	bl	8083798 <mbedtls_asn1_get_tag>
 8087ec6:	b120      	cbz	r0, 8087ed2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x28>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8087ec8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8087ecc:	d107      	bne.n	8087ede <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x34>
            return( 0 );
 8087ece:	2000      	movs	r0, #0
 8087ed0:	bd70      	pop	{r4, r5, r6, pc}

        return( ret );
    }

    uid->p = *p;
 8087ed2:	6823      	ldr	r3, [r4, #0]
 8087ed4:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 8087ed6:	6822      	ldr	r2, [r4, #0]
 8087ed8:	686b      	ldr	r3, [r5, #4]
 8087eda:	4413      	add	r3, r2
 8087edc:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8087ede:	bd70      	pop	{r4, r5, r6, pc}

08087ee0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>:
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8087ee0:	2901      	cmp	r1, #1

/*
 * Check key against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 8087ee2:	b510      	push	{r4, lr}
 8087ee4:	4604      	mov	r4, r0
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8087ee6:	d001      	beq.n	8087eec <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0xc>
 8087ee8:	2906      	cmp	r1, #6
 8087eea:	d109      	bne.n	8087f00 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0x20>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 8087eec:	4610      	mov	r0, r2
 8087eee:	f004 fcbb 	bl	808c868 <mbedtls_pk_get_bitlen>
 8087ef2:	6823      	ldr	r3, [r4, #0]
 8087ef4:	4298      	cmp	r0, r3
 8087ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8087efa:	bf28      	it	cs
 8087efc:	2000      	movcs	r0, #0
 8087efe:	bd10      	pop	{r4, pc}

        return( -1 );
    }
#endif

    return( -1 );
 8087f00:	f04f 30ff 	mov.w	r0, #4294967295
}
 8087f04:	bd10      	pop	{r4, pc}
	...

08087f08 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
 8087f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087f0c:	4682      	mov	sl, r0
 8087f0e:	b08d      	sub	sp, #52	; 0x34
 8087f10:	460f      	mov	r7, r1
 8087f12:	4691      	mov	r9, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
 8087f14:	4698      	mov	r8, r3
 8087f16:	b94b      	cbnz	r3, 8087f2c <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 8087f18:	4aa5      	ldr	r2, [pc, #660]	; (80881b0 <mbedtls_x509_crt_info+0x2a8>)
 8087f1a:	f008 fdeb 	bl	8090af4 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087f1e:	2800      	cmp	r0, #0
 8087f20:	f2c0 82d6 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087f24:	4287      	cmp	r7, r0
 8087f26:	f200 82d4 	bhi.w	80884d2 <mbedtls_x509_crt_info+0x5ca>
 8087f2a:	e2d1      	b.n	80884d0 <mbedtls_x509_crt_info+0x5c8>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
                               prefix, crt->version );
 8087f2c:	699b      	ldr	r3, [r3, #24]
 8087f2e:	9300      	str	r3, [sp, #0]
 8087f30:	4613      	mov	r3, r2
 8087f32:	4aa0      	ldr	r2, [pc, #640]	; (80881b4 <mbedtls_x509_crt_info+0x2ac>)
 8087f34:	f008 fdde 	bl	8090af4 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087f38:	2800      	cmp	r0, #0
 8087f3a:	f2c0 82c9 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087f3e:	4287      	cmp	r7, r0
 8087f40:	f240 82c6 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087f44:	1a3e      	subs	r6, r7, r0
 8087f46:	4482      	add	sl, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
                               prefix );
 8087f48:	464b      	mov	r3, r9
 8087f4a:	4a9b      	ldr	r2, [pc, #620]	; (80881b8 <mbedtls_x509_crt_info+0x2b0>)
 8087f4c:	4631      	mov	r1, r6
 8087f4e:	4650      	mov	r0, sl
 8087f50:	f008 fdd0 	bl	8090af4 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087f54:	2800      	cmp	r0, #0
 8087f56:	f2c0 82bb 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087f5a:	4286      	cmp	r6, r0
 8087f5c:	f240 82b8 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087f60:	1a36      	subs	r6, r6, r0
 8087f62:	4482      	add	sl, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 8087f64:	f108 021c 	add.w	r2, r8, #28
 8087f68:	4631      	mov	r1, r6
 8087f6a:	4650      	mov	r0, sl
 8087f6c:	f7fe fdca 	bl	8086b04 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087f70:	2800      	cmp	r0, #0
 8087f72:	f2c0 82ad 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087f76:	4286      	cmp	r6, r0
 8087f78:	f240 82aa 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087f7c:	1a36      	subs	r6, r6, r0
 8087f7e:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 8087f80:	464b      	mov	r3, r9
 8087f82:	4a8e      	ldr	r2, [pc, #568]	; (80881bc <mbedtls_x509_crt_info+0x2b4>)
 8087f84:	4631      	mov	r1, r6
 8087f86:	4650      	mov	r0, sl
 8087f88:	f008 fdb4 	bl	8090af4 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087f8c:	2800      	cmp	r0, #0
 8087f8e:	f2c0 829f 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087f92:	4286      	cmp	r6, r0
 8087f94:	f240 829c 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087f98:	1a36      	subs	r6, r6, r0
 8087f9a:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 8087f9c:	f108 024c 	add.w	r2, r8, #76	; 0x4c
 8087fa0:	4631      	mov	r1, r6
 8087fa2:	4650      	mov	r0, sl
 8087fa4:	f7fe fd2c 	bl	8086a00 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087fa8:	2800      	cmp	r0, #0
 8087faa:	f2c0 8291 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087fae:	4286      	cmp	r6, r0
 8087fb0:	f240 828e 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087fb4:	1a36      	subs	r6, r6, r0
 8087fb6:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 8087fb8:	464b      	mov	r3, r9
 8087fba:	4a81      	ldr	r2, [pc, #516]	; (80881c0 <mbedtls_x509_crt_info+0x2b8>)
 8087fbc:	4631      	mov	r1, r6
 8087fbe:	4650      	mov	r0, sl
 8087fc0:	f008 fd98 	bl	8090af4 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087fc4:	2800      	cmp	r0, #0
 8087fc6:	f2c0 8283 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087fca:	4286      	cmp	r6, r0
 8087fcc:	f240 8280 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087fd0:	1a36      	subs	r6, r6, r0
 8087fd2:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 8087fd4:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 8087fd8:	4631      	mov	r1, r6
 8087fda:	4650      	mov	r0, sl
 8087fdc:	f7fe fd10 	bl	8086a00 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087fe0:	2800      	cmp	r0, #0
 8087fe2:	f2c0 8275 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8087fe6:	4286      	cmp	r6, r0
 8087fe8:	f240 8272 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8087fec:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087ff0:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8087ff2:	9305      	str	r3, [sp, #20]
 8087ff4:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087ff8:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8087ffa:	9304      	str	r3, [sp, #16]
 8087ffc:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 8088000:	4a70      	ldr	r2, [pc, #448]	; (80881c4 <mbedtls_x509_crt_info+0x2bc>)
 8088002:	9303      	str	r3, [sp, #12]
 8088004:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 8088008:	4631      	mov	r1, r6
 808800a:	9302      	str	r3, [sp, #8]
 808800c:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8088010:	4650      	mov	r0, sl
 8088012:	9301      	str	r3, [sp, #4]
 8088014:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 8088018:	9300      	str	r3, [sp, #0]
 808801a:	464b      	mov	r3, r9
 808801c:	f008 fd6a 	bl	8090af4 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088020:	2800      	cmp	r0, #0
 8088022:	f2c0 8255 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088026:	4286      	cmp	r6, r0
 8088028:	f240 8252 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 808802c:	f8d8 30b8 	ldr.w	r3, [r8, #184]	; 0xb8
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088030:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8088032:	9305      	str	r3, [sp, #20]
 8088034:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088038:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 808803a:	9304      	str	r3, [sp, #16]
 808803c:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 8088040:	4a61      	ldr	r2, [pc, #388]	; (80881c8 <mbedtls_x509_crt_info+0x2c0>)
 8088042:	9303      	str	r3, [sp, #12]
 8088044:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
 8088048:	4631      	mov	r1, r6
 808804a:	9302      	str	r3, [sp, #8]
 808804c:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8088050:	4650      	mov	r0, sl
 8088052:	9301      	str	r3, [sp, #4]
 8088054:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 8088058:	9300      	str	r3, [sp, #0]
 808805a:	464b      	mov	r3, r9
 808805c:	f008 fd4a 	bl	8090af4 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088060:	2800      	cmp	r0, #0
 8088062:	f2c0 8235 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088066:	4286      	cmp	r6, r0
 8088068:	f240 8232 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 808806c:	1a36      	subs	r6, r6, r0
 808806e:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 8088070:	464b      	mov	r3, r9
 8088072:	4a56      	ldr	r2, [pc, #344]	; (80881cc <mbedtls_x509_crt_info+0x2c4>)
 8088074:	4631      	mov	r1, r6
 8088076:	4650      	mov	r0, sl
 8088078:	f008 fd3c 	bl	8090af4 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 808807c:	2800      	cmp	r0, #0
 808807e:	f2c0 8227 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088082:	4286      	cmp	r6, r0
 8088084:	f240 8224 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 8088088:	f8d8 212c 	ldr.w	r2, [r8, #300]	; 0x12c
 808808c:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 8088090:	9201      	str	r2, [sp, #4]
 8088092:	f898 2128 	ldrb.w	r2, [r8, #296]	; 0x128
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088096:	1a36      	subs	r6, r6, r0
 8088098:	4482      	add	sl, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 808809a:	9200      	str	r2, [sp, #0]
 808809c:	4631      	mov	r1, r6
 808809e:	f108 0228 	add.w	r2, r8, #40	; 0x28
 80880a2:	4650      	mov	r0, sl
 80880a4:	f7fe fd78 	bl	8086b98 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80880a8:	1e05      	subs	r5, r0, #0
 80880aa:	f2c0 8211 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80880ae:	42ae      	cmp	r6, r5
 80880b0:	f240 820e 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 80880b4:	f108 0bbc 	add.w	fp, r8, #188	; 0xbc
 80880b8:	4658      	mov	r0, fp
 80880ba:	f004 fc39 	bl	808c930 <mbedtls_pk_get_name>
 80880be:	ac07      	add	r4, sp, #28
 80880c0:	4602      	mov	r2, r0
 80880c2:	2112      	movs	r1, #18
 80880c4:	4620      	mov	r0, r4
 80880c6:	f7fe fd8f 	bl	8086be8 <mbedtls_x509_key_size_helper>
 80880ca:	2800      	cmp	r0, #0
 80880cc:	f040 8201 	bne.w	80884d2 <mbedtls_x509_crt_info+0x5ca>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 80880d0:	4658      	mov	r0, fp
 80880d2:	f004 fbc9 	bl	808c868 <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80880d6:	1b76      	subs	r6, r6, r5
 80880d8:	4455      	add	r5, sl
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 80880da:	9001      	str	r0, [sp, #4]
 80880dc:	9400      	str	r4, [sp, #0]
 80880de:	464b      	mov	r3, r9
 80880e0:	4a3b      	ldr	r2, [pc, #236]	; (80881d0 <mbedtls_x509_crt_info+0x2c8>)
 80880e2:	4631      	mov	r1, r6
 80880e4:	4628      	mov	r0, r5
 80880e6:	f008 fd05 	bl	8090af4 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80880ea:	2800      	cmp	r0, #0
 80880ec:	f2c0 81f0 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80880f0:	4286      	cmp	r6, r0
 80880f2:	f240 81ed 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80880f6:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80880fa:	1a34      	subs	r4, r6, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80880fc:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80880fe:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8088100:	d527      	bpl.n	8088152 <mbedtls_x509_crt_info+0x24a>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 8088102:	f8d8 10fc 	ldr.w	r1, [r8, #252]	; 0xfc
 8088106:	4a33      	ldr	r2, [pc, #204]	; (80881d4 <mbedtls_x509_crt_info+0x2cc>)
 8088108:	4b33      	ldr	r3, [pc, #204]	; (80881d8 <mbedtls_x509_crt_info+0x2d0>)
                        crt->ca_istrue ? "true" : "false" );
 808810a:	4628      	mov	r0, r5
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 808810c:	2900      	cmp	r1, #0
 808810e:	bf18      	it	ne
 8088110:	4613      	movne	r3, r2
                        crt->ca_istrue ? "true" : "false" );
 8088112:	4a32      	ldr	r2, [pc, #200]	; (80881dc <mbedtls_x509_crt_info+0x2d4>)
 8088114:	9300      	str	r3, [sp, #0]
 8088116:	4621      	mov	r1, r4
 8088118:	464b      	mov	r3, r9
 808811a:	f008 fceb 	bl	8090af4 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808811e:	2800      	cmp	r0, #0
 8088120:	f2c0 81d6 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088124:	4284      	cmp	r4, r0
 8088126:	f240 81d3 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>

        if( crt->max_pathlen > 0 )
 808812a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 808812e:	1a24      	subs	r4, r4, r0

        if( crt->max_pathlen > 0 )
 8088130:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088132:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
 8088134:	dd0d      	ble.n	8088152 <mbedtls_x509_crt_info+0x24a>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 8088136:	3b01      	subs	r3, #1
 8088138:	4a29      	ldr	r2, [pc, #164]	; (80881e0 <mbedtls_x509_crt_info+0x2d8>)
 808813a:	4621      	mov	r1, r4
 808813c:	4628      	mov	r0, r5
 808813e:	f008 fcd9 	bl	8090af4 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8088142:	2800      	cmp	r0, #0
 8088144:	f2c0 81c4 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088148:	4284      	cmp	r4, r0
 808814a:	f240 81c1 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 808814e:	1a24      	subs	r4, r4, r0
 8088150:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8088152:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8088156:	069e      	lsls	r6, r3, #26
 8088158:	d54e      	bpl.n	80881f8 <mbedtls_x509_crt_info+0x2f0>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 808815a:	464b      	mov	r3, r9
 808815c:	4a21      	ldr	r2, [pc, #132]	; (80881e4 <mbedtls_x509_crt_info+0x2dc>)
 808815e:	4621      	mov	r1, r4
 8088160:	4628      	mov	r0, r5
 8088162:	f008 fcc7 	bl	8090af4 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088166:	2800      	cmp	r0, #0
 8088168:	f2c0 81b2 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 808816c:	42a0      	cmp	r0, r4
 808816e:	f080 81af 	bcs.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
 8088172:	4e1d      	ldr	r6, [pc, #116]	; (80881e8 <mbedtls_x509_crt_info+0x2e0>)
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088174:	1a24      	subs	r4, r4, r0
 8088176:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
 8088178:	f108 02e8 	add.w	r2, r8, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
 808817c:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
 808817e:	6851      	ldr	r1, [r2, #4]
 8088180:	2300      	movs	r3, #0
 8088182:	4401      	add	r1, r0
 8088184:	42a1      	cmp	r1, r4
 8088186:	d301      	bcc.n	808818c <mbedtls_x509_crt_info+0x284>
        {
            *p = '\0';
 8088188:	702b      	strb	r3, [r5, #0]
 808818a:	e1a1      	b.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
 808818c:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
 808818e:	4283      	cmp	r3, r0
 8088190:	d003      	beq.n	808819a <mbedtls_x509_crt_info+0x292>
            *p++ = sep[i];
 8088192:	5cf1      	ldrb	r1, [r6, r3]
 8088194:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
 8088196:	3301      	adds	r3, #1
 8088198:	e7f9      	b.n	808818e <mbedtls_x509_crt_info+0x286>
 808819a:	441d      	add	r5, r3
 808819c:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
 808819e:	6851      	ldr	r1, [r2, #4]
 80881a0:	1a2b      	subs	r3, r5, r0
 80881a2:	4299      	cmp	r1, r3
 80881a4:	d922      	bls.n	80881ec <mbedtls_x509_crt_info+0x2e4>
            *p++ = cur->buf.p[i];
 80881a6:	6891      	ldr	r1, [r2, #8]
 80881a8:	5ccb      	ldrb	r3, [r1, r3]
 80881aa:	f805 3b01 	strb.w	r3, [r5], #1
 80881ae:	e7f6      	b.n	808819e <mbedtls_x509_crt_info+0x296>
 80881b0:	080949ff 	.word	0x080949ff
 80881b4:	08094a1f 	.word	0x08094a1f
 80881b8:	08094a39 	.word	0x08094a39
 80881bc:	08094a50 	.word	0x08094a50
 80881c0:	08094a68 	.word	0x08094a68
 80881c4:	08094a80 	.word	0x08094a80
 80881c8:	08094ab5 	.word	0x08094ab5
 80881cc:	08094aea 	.word	0x08094aea
 80881d0:	08094b02 	.word	0x08094b02
 80881d4:	080949f4 	.word	0x080949f4
 80881d8:	080949f9 	.word	0x080949f9
 80881dc:	08094b14 	.word	0x08094b14
 80881e0:	08094b31 	.word	0x08094b31
 80881e4:	08094b42 	.word	0x08094b42
 80881e8:	080938f0 	.word	0x080938f0

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
 80881ec:	68d2      	ldr	r2, [r2, #12]
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
        sep_len = 2;
 80881ee:	2002      	movs	r0, #2
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
 80881f0:	4eb9      	ldr	r6, [pc, #740]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
 80881f2:	2a00      	cmp	r2, #0
 80881f4:	d1c3      	bne.n	808817e <mbedtls_x509_crt_info+0x276>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
 80881f6:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 80881f8:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 80881fc:	03d8      	lsls	r0, r3, #15
 80881fe:	f140 8090 	bpl.w	8088322 <mbedtls_x509_crt_info+0x41a>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 8088202:	464b      	mov	r3, r9
 8088204:	4ab5      	ldr	r2, [pc, #724]	; (80884dc <mbedtls_x509_crt_info+0x5d4>)
 8088206:	4621      	mov	r1, r4
 8088208:	4628      	mov	r0, r5
 808820a:	f008 fc73 	bl	8090af4 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808820e:	2800      	cmp	r0, #0
 8088210:	f2c0 815e 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088214:	42a0      	cmp	r0, r4
 8088216:	f080 815b 	bcs.w	80884d0 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 808821a:	f898 6118 	ldrb.w	r6, [r8, #280]	; 0x118
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 808821e:	1a24      	subs	r4, r4, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8088220:	0631      	lsls	r1, r6, #24
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088222:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8088224:	4bae      	ldr	r3, [pc, #696]	; (80884e0 <mbedtls_x509_crt_info+0x5d8>)
 8088226:	d50d      	bpl.n	8088244 <mbedtls_x509_crt_info+0x33c>
 8088228:	4aae      	ldr	r2, [pc, #696]	; (80884e4 <mbedtls_x509_crt_info+0x5dc>)
 808822a:	4621      	mov	r1, r4
 808822c:	4628      	mov	r0, r5
 808822e:	f008 fc61 	bl	8090af4 <snprintf>
 8088232:	2800      	cmp	r0, #0
 8088234:	f2c0 814c 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088238:	4284      	cmp	r4, r0
 808823a:	f240 8149 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 808823e:	4ba6      	ldr	r3, [pc, #664]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 8088240:	1a24      	subs	r4, r4, r0
 8088242:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 8088244:	0672      	lsls	r2, r6, #25
 8088246:	d50d      	bpl.n	8088264 <mbedtls_x509_crt_info+0x35c>
 8088248:	4aa7      	ldr	r2, [pc, #668]	; (80884e8 <mbedtls_x509_crt_info+0x5e0>)
 808824a:	4621      	mov	r1, r4
 808824c:	4628      	mov	r0, r5
 808824e:	f008 fc51 	bl	8090af4 <snprintf>
 8088252:	2800      	cmp	r0, #0
 8088254:	f2c0 813c 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088258:	4284      	cmp	r4, r0
 808825a:	f240 8139 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 808825e:	4b9e      	ldr	r3, [pc, #632]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 8088260:	1a24      	subs	r4, r4, r0
 8088262:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 8088264:	06b0      	lsls	r0, r6, #26
 8088266:	d50d      	bpl.n	8088284 <mbedtls_x509_crt_info+0x37c>
 8088268:	4aa0      	ldr	r2, [pc, #640]	; (80884ec <mbedtls_x509_crt_info+0x5e4>)
 808826a:	4621      	mov	r1, r4
 808826c:	4628      	mov	r0, r5
 808826e:	f008 fc41 	bl	8090af4 <snprintf>
 8088272:	2800      	cmp	r0, #0
 8088274:	f2c0 812c 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088278:	4284      	cmp	r4, r0
 808827a:	f240 8129 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 808827e:	4b96      	ldr	r3, [pc, #600]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 8088280:	1a24      	subs	r4, r4, r0
 8088282:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 8088284:	06f1      	lsls	r1, r6, #27
 8088286:	d50d      	bpl.n	80882a4 <mbedtls_x509_crt_info+0x39c>
 8088288:	4a99      	ldr	r2, [pc, #612]	; (80884f0 <mbedtls_x509_crt_info+0x5e8>)
 808828a:	4621      	mov	r1, r4
 808828c:	4628      	mov	r0, r5
 808828e:	f008 fc31 	bl	8090af4 <snprintf>
 8088292:	2800      	cmp	r0, #0
 8088294:	f2c0 811c 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088298:	4284      	cmp	r4, r0
 808829a:	f240 8119 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 808829e:	4b8e      	ldr	r3, [pc, #568]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 80882a0:	1a24      	subs	r4, r4, r0
 80882a2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 80882a4:	0732      	lsls	r2, r6, #28
 80882a6:	d50d      	bpl.n	80882c4 <mbedtls_x509_crt_info+0x3bc>
 80882a8:	4a92      	ldr	r2, [pc, #584]	; (80884f4 <mbedtls_x509_crt_info+0x5ec>)
 80882aa:	4621      	mov	r1, r4
 80882ac:	4628      	mov	r0, r5
 80882ae:	f008 fc21 	bl	8090af4 <snprintf>
 80882b2:	2800      	cmp	r0, #0
 80882b4:	f2c0 810c 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80882b8:	4284      	cmp	r4, r0
 80882ba:	f240 8109 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80882be:	4b86      	ldr	r3, [pc, #536]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 80882c0:	1a24      	subs	r4, r4, r0
 80882c2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 80882c4:	0770      	lsls	r0, r6, #29
 80882c6:	d50d      	bpl.n	80882e4 <mbedtls_x509_crt_info+0x3dc>
 80882c8:	4a8b      	ldr	r2, [pc, #556]	; (80884f8 <mbedtls_x509_crt_info+0x5f0>)
 80882ca:	4621      	mov	r1, r4
 80882cc:	4628      	mov	r0, r5
 80882ce:	f008 fc11 	bl	8090af4 <snprintf>
 80882d2:	2800      	cmp	r0, #0
 80882d4:	f2c0 80fc 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80882d8:	4284      	cmp	r4, r0
 80882da:	f240 80f9 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80882de:	4b7e      	ldr	r3, [pc, #504]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 80882e0:	1a24      	subs	r4, r4, r0
 80882e2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 80882e4:	07b1      	lsls	r1, r6, #30
 80882e6:	d50d      	bpl.n	8088304 <mbedtls_x509_crt_info+0x3fc>
 80882e8:	4a84      	ldr	r2, [pc, #528]	; (80884fc <mbedtls_x509_crt_info+0x5f4>)
 80882ea:	4621      	mov	r1, r4
 80882ec:	4628      	mov	r0, r5
 80882ee:	f008 fc01 	bl	8090af4 <snprintf>
 80882f2:	2800      	cmp	r0, #0
 80882f4:	f2c0 80ec 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80882f8:	4284      	cmp	r4, r0
 80882fa:	f240 80e9 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80882fe:	4b76      	ldr	r3, [pc, #472]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 8088300:	1a24      	subs	r4, r4, r0
 8088302:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 8088304:	07f2      	lsls	r2, r6, #31
 8088306:	d50c      	bpl.n	8088322 <mbedtls_x509_crt_info+0x41a>
 8088308:	4a7d      	ldr	r2, [pc, #500]	; (8088500 <mbedtls_x509_crt_info+0x5f8>)
 808830a:	4621      	mov	r1, r4
 808830c:	4628      	mov	r0, r5
 808830e:	f008 fbf1 	bl	8090af4 <snprintf>
 8088312:	2800      	cmp	r0, #0
 8088314:	f2c0 80dc 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088318:	4284      	cmp	r4, r0
 808831a:	f240 80d9 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 808831e:	1a24      	subs	r4, r4, r0
 8088320:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 8088322:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8088326:	075e      	lsls	r6, r3, #29
 8088328:	f140 8096 	bpl.w	8088458 <mbedtls_x509_crt_info+0x550>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 808832c:	464b      	mov	r3, r9
 808832e:	4a75      	ldr	r2, [pc, #468]	; (8088504 <mbedtls_x509_crt_info+0x5fc>)
 8088330:	4621      	mov	r1, r4
 8088332:	4628      	mov	r0, r5
 8088334:	f008 fbde 	bl	8090af4 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088338:	2800      	cmp	r0, #0
 808833a:	f2c0 80c9 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 808833e:	42a0      	cmp	r0, r4
 8088340:	f080 80c6 	bcs.w	80884d0 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 8088344:	f8d8 6104 	ldr.w	r6, [r8, #260]	; 0x104
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088348:	1a24      	subs	r4, r4, r0
 808834a:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 808834c:	0630      	lsls	r0, r6, #24
 808834e:	4b64      	ldr	r3, [pc, #400]	; (80884e0 <mbedtls_x509_crt_info+0x5d8>)
 8088350:	d50d      	bpl.n	808836e <mbedtls_x509_crt_info+0x466>
 8088352:	4a6d      	ldr	r2, [pc, #436]	; (8088508 <mbedtls_x509_crt_info+0x600>)
 8088354:	4621      	mov	r1, r4
 8088356:	4628      	mov	r0, r5
 8088358:	f008 fbcc 	bl	8090af4 <snprintf>
 808835c:	2800      	cmp	r0, #0
 808835e:	f2c0 80b7 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088362:	4284      	cmp	r4, r0
 8088364:	f240 80b4 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088368:	4b5b      	ldr	r3, [pc, #364]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 808836a:	1a24      	subs	r4, r4, r0
 808836c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 808836e:	0671      	lsls	r1, r6, #25
 8088370:	d50d      	bpl.n	808838e <mbedtls_x509_crt_info+0x486>
 8088372:	4a66      	ldr	r2, [pc, #408]	; (808850c <mbedtls_x509_crt_info+0x604>)
 8088374:	4621      	mov	r1, r4
 8088376:	4628      	mov	r0, r5
 8088378:	f008 fbbc 	bl	8090af4 <snprintf>
 808837c:	2800      	cmp	r0, #0
 808837e:	f2c0 80a7 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088382:	4284      	cmp	r4, r0
 8088384:	f240 80a4 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088388:	4b53      	ldr	r3, [pc, #332]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 808838a:	1a24      	subs	r4, r4, r0
 808838c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 808838e:	06b2      	lsls	r2, r6, #26
 8088390:	d50d      	bpl.n	80883ae <mbedtls_x509_crt_info+0x4a6>
 8088392:	4a5f      	ldr	r2, [pc, #380]	; (8088510 <mbedtls_x509_crt_info+0x608>)
 8088394:	4621      	mov	r1, r4
 8088396:	4628      	mov	r0, r5
 8088398:	f008 fbac 	bl	8090af4 <snprintf>
 808839c:	2800      	cmp	r0, #0
 808839e:	f2c0 8097 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80883a2:	4284      	cmp	r4, r0
 80883a4:	f240 8094 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80883a8:	4b4b      	ldr	r3, [pc, #300]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 80883aa:	1a24      	subs	r4, r4, r0
 80883ac:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 80883ae:	06f0      	lsls	r0, r6, #27
 80883b0:	d50d      	bpl.n	80883ce <mbedtls_x509_crt_info+0x4c6>
 80883b2:	4a58      	ldr	r2, [pc, #352]	; (8088514 <mbedtls_x509_crt_info+0x60c>)
 80883b4:	4621      	mov	r1, r4
 80883b6:	4628      	mov	r0, r5
 80883b8:	f008 fb9c 	bl	8090af4 <snprintf>
 80883bc:	2800      	cmp	r0, #0
 80883be:	f2c0 8087 	blt.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80883c2:	4284      	cmp	r4, r0
 80883c4:	f240 8084 	bls.w	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80883c8:	4b43      	ldr	r3, [pc, #268]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 80883ca:	1a24      	subs	r4, r4, r0
 80883cc:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 80883ce:	0731      	lsls	r1, r6, #28
 80883d0:	d50b      	bpl.n	80883ea <mbedtls_x509_crt_info+0x4e2>
 80883d2:	4a51      	ldr	r2, [pc, #324]	; (8088518 <mbedtls_x509_crt_info+0x610>)
 80883d4:	4621      	mov	r1, r4
 80883d6:	4628      	mov	r0, r5
 80883d8:	f008 fb8c 	bl	8090af4 <snprintf>
 80883dc:	2800      	cmp	r0, #0
 80883de:	db77      	blt.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80883e0:	4284      	cmp	r4, r0
 80883e2:	d975      	bls.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80883e4:	4b3c      	ldr	r3, [pc, #240]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 80883e6:	1a24      	subs	r4, r4, r0
 80883e8:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 80883ea:	0772      	lsls	r2, r6, #29
 80883ec:	d50b      	bpl.n	8088406 <mbedtls_x509_crt_info+0x4fe>
 80883ee:	4a4b      	ldr	r2, [pc, #300]	; (808851c <mbedtls_x509_crt_info+0x614>)
 80883f0:	4621      	mov	r1, r4
 80883f2:	4628      	mov	r0, r5
 80883f4:	f008 fb7e 	bl	8090af4 <snprintf>
 80883f8:	2800      	cmp	r0, #0
 80883fa:	db69      	blt.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80883fc:	4284      	cmp	r4, r0
 80883fe:	d967      	bls.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088400:	4b35      	ldr	r3, [pc, #212]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 8088402:	1a24      	subs	r4, r4, r0
 8088404:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 8088406:	07b0      	lsls	r0, r6, #30
 8088408:	d50b      	bpl.n	8088422 <mbedtls_x509_crt_info+0x51a>
 808840a:	4a45      	ldr	r2, [pc, #276]	; (8088520 <mbedtls_x509_crt_info+0x618>)
 808840c:	4621      	mov	r1, r4
 808840e:	4628      	mov	r0, r5
 8088410:	f008 fb70 	bl	8090af4 <snprintf>
 8088414:	2800      	cmp	r0, #0
 8088416:	db5b      	blt.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088418:	4284      	cmp	r4, r0
 808841a:	d959      	bls.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 808841c:	4b2e      	ldr	r3, [pc, #184]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 808841e:	1a24      	subs	r4, r4, r0
 8088420:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 8088422:	07f1      	lsls	r1, r6, #31
 8088424:	d50b      	bpl.n	808843e <mbedtls_x509_crt_info+0x536>
 8088426:	4a3f      	ldr	r2, [pc, #252]	; (8088524 <mbedtls_x509_crt_info+0x61c>)
 8088428:	4621      	mov	r1, r4
 808842a:	4628      	mov	r0, r5
 808842c:	f008 fb62 	bl	8090af4 <snprintf>
 8088430:	2800      	cmp	r0, #0
 8088432:	db4d      	blt.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088434:	4284      	cmp	r4, r0
 8088436:	d94b      	bls.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088438:	4b27      	ldr	r3, [pc, #156]	; (80884d8 <mbedtls_x509_crt_info+0x5d0>)
 808843a:	1a24      	subs	r4, r4, r0
 808843c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 808843e:	0432      	lsls	r2, r6, #16
 8088440:	d50a      	bpl.n	8088458 <mbedtls_x509_crt_info+0x550>
 8088442:	4a39      	ldr	r2, [pc, #228]	; (8088528 <mbedtls_x509_crt_info+0x620>)
 8088444:	4621      	mov	r1, r4
 8088446:	4628      	mov	r0, r5
 8088448:	f008 fb54 	bl	8090af4 <snprintf>
 808844c:	2800      	cmp	r0, #0
 808844e:	db3f      	blt.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088450:	4284      	cmp	r4, r0
 8088452:	d93d      	bls.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088454:	1a24      	subs	r4, r4, r0
 8088456:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 8088458:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 808845c:	051b      	lsls	r3, r3, #20
 808845e:	d52b      	bpl.n	80884b8 <mbedtls_x509_crt_info+0x5b0>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 8088460:	464b      	mov	r3, r9
 8088462:	4a32      	ldr	r2, [pc, #200]	; (808852c <mbedtls_x509_crt_info+0x624>)
 8088464:	4621      	mov	r1, r4
 8088466:	4628      	mov	r0, r5
 8088468:	f008 fb44 	bl	8090af4 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808846c:	2800      	cmp	r0, #0
 808846e:	db2f      	blt.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 8088470:	42a0      	cmp	r0, r4
 8088472:	d22d      	bcs.n	80884d0 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_ext_key_usage( &p, &n,
 8088474:	f508 7684 	add.w	r6, r8, #264	; 0x108
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
 8088478:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 808853c <mbedtls_x509_crt_info+0x634>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
 808847c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80884e0 <mbedtls_x509_crt_info+0x5d8>
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
 8088480:	1a24      	subs	r4, r4, r0
    char *p = *buf;
 8088482:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 8088484:	a906      	add	r1, sp, #24
 8088486:	4630      	mov	r0, r6
 8088488:	f7fc fde4 	bl	8085054 <mbedtls_oid_get_extended_key_usage>
 808848c:	b108      	cbz	r0, 8088492 <mbedtls_x509_crt_info+0x58a>
            desc = "???";
 808848e:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8088492:	9b06      	ldr	r3, [sp, #24]
 8088494:	4a26      	ldr	r2, [pc, #152]	; (8088530 <mbedtls_x509_crt_info+0x628>)
 8088496:	9300      	str	r3, [sp, #0]
 8088498:	4621      	mov	r1, r4
 808849a:	4643      	mov	r3, r8
 808849c:	4628      	mov	r0, r5
 808849e:	f008 fb29 	bl	8090af4 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80884a2:	2800      	cmp	r0, #0
 80884a4:	db14      	blt.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80884a6:	42a0      	cmp	r0, r4
 80884a8:	d212      	bcs.n	80884d0 <mbedtls_x509_crt_info+0x5c8>

        sep = ", ";

        cur = cur->next;
 80884aa:	68f6      	ldr	r6, [r6, #12]
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80884ac:	1a24      	subs	r4, r4, r0
 80884ae:	4405      	add	r5, r0

        sep = ", ";
 80884b0:	f8df 8024 	ldr.w	r8, [pc, #36]	; 80884d8 <mbedtls_x509_crt_info+0x5d0>
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
 80884b4:	2e00      	cmp	r6, #0
 80884b6:	d1e5      	bne.n	8088484 <mbedtls_x509_crt_info+0x57c>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
 80884b8:	4a1e      	ldr	r2, [pc, #120]	; (8088534 <mbedtls_x509_crt_info+0x62c>)
 80884ba:	4621      	mov	r1, r4
 80884bc:	4628      	mov	r0, r5
 80884be:	f008 fb19 	bl	8090af4 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80884c2:	2800      	cmp	r0, #0
 80884c4:	db04      	blt.n	80884d0 <mbedtls_x509_crt_info+0x5c8>
 80884c6:	4284      	cmp	r4, r0
 80884c8:	d902      	bls.n	80884d0 <mbedtls_x509_crt_info+0x5c8>

    return( (int) ( size - n ) );
 80884ca:	1a20      	subs	r0, r4, r0
 80884cc:	1a38      	subs	r0, r7, r0
 80884ce:	e000      	b.n	80884d2 <mbedtls_x509_crt_info+0x5ca>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 80884d0:	4819      	ldr	r0, [pc, #100]	; (8088538 <mbedtls_x509_crt_info+0x630>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
 80884d2:	b00d      	add	sp, #52	; 0x34
 80884d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80884d8:	0809479c 	.word	0x0809479c
 80884dc:	08094b5a 	.word	0x08094b5a
 80884e0:	080938f0 	.word	0x080938f0
 80884e4:	08094b72 	.word	0x08094b72
 80884e8:	08094b7f 	.word	0x08094b7f
 80884ec:	08094b8c 	.word	0x08094b8c
 80884f0:	08094b94 	.word	0x08094b94
 80884f4:	08094ba5 	.word	0x08094ba5
 80884f8:	08094bb0 	.word	0x08094bb0
 80884fc:	08094bb9 	.word	0x08094bb9
 8088500:	08094bc4 	.word	0x08094bc4
 8088504:	08094bd8 	.word	0x08094bd8
 8088508:	08094bf0 	.word	0x08094bf0
 808850c:	08094c04 	.word	0x08094c04
 8088510:	08094c16 	.word	0x08094c16
 8088514:	08094c29 	.word	0x08094c29
 8088518:	08094c3d 	.word	0x08094c3d
 808851c:	08094c4d 	.word	0x08094c4d
 8088520:	08094c5d 	.word	0x08094c5d
 8088524:	08094c68 	.word	0x08094c68
 8088528:	08094c78 	.word	0x08094c78
 808852c:	08094c88 	.word	0x08094c88
 8088530:	08094ca0 	.word	0x08094ca0
 8088534:	08093a50 	.word	0x08093a50
 8088538:	ffffd680 	.word	0xffffd680
 808853c:	080947b5 	.word	0x080947b5

08088540 <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 8088540:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 8088544:	f013 0304 	ands.w	r3, r3, #4
 8088548:	d01a      	beq.n	8088580 <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 808854a:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 808854e:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 8088552:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
 8088556:	f023 0301 	bic.w	r3, r3, #1
 808855a:	f020 0001 	bic.w	r0, r0, #1
 808855e:	400b      	ands	r3, r1
 8088560:	4298      	cmp	r0, r3
 8088562:	d10c      	bne.n	808857e <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8088564:	f248 0301 	movw	r3, #32769	; 0x8001
 8088568:	f248 0001 	movw	r0, #32769	; 0x8001
 808856c:	430a      	orrs	r2, r1
 808856e:	4013      	ands	r3, r2
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088570:	4a04      	ldr	r2, [pc, #16]	; (8088584 <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8088572:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088574:	4298      	cmp	r0, r3
 8088576:	bf14      	ite	ne
 8088578:	4613      	movne	r3, r2
 808857a:	2300      	moveq	r3, #0
 808857c:	e000      	b.n	8088580 <mbedtls_x509_crt_check_key_usage+0x40>
 808857e:	4b01      	ldr	r3, [pc, #4]	; (8088584 <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
 8088580:	4618      	mov	r0, r3
 8088582:	4770      	bx	lr
 8088584:	ffffd800 	.word	0xffffd800

08088588 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 8088588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808858c:	4606      	mov	r6, r0
 808858e:	460d      	mov	r5, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8088590:	304c      	adds	r0, #76	; 0x4c
 8088592:	316c      	adds	r1, #108	; 0x6c
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 8088594:	4617      	mov	r7, r2
 8088596:	4698      	mov	r8, r3
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8088598:	f7ff fc1b 	bl	8087dd2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 808859c:	4604      	mov	r4, r0
 808859e:	b9d8      	cbnz	r0, 80885d8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 80885a0:	b177      	cbz	r7, 80885c0 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x38>
 80885a2:	69af      	ldr	r7, [r5, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 80885a4:	f1b8 0f00 	cmp.w	r8, #0
 80885a8:	d008      	beq.n	80885bc <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
 80885aa:	6872      	ldr	r2, [r6, #4]
    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 80885ac:	686b      	ldr	r3, [r5, #4]
 80885ae:	429a      	cmp	r2, r3
 80885b0:	d104      	bne.n	80885bc <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 80885b2:	68a9      	ldr	r1, [r5, #8]
 80885b4:	68b0      	ldr	r0, [r6, #8]
 80885b6:	f00a fd63 	bl	8093080 <memcmp>
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
        child->raw.len == parent->raw.len &&
 80885ba:	b178      	cbz	r0, 80885dc <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 80885bc:	2f02      	cmp	r7, #2
 80885be:	dd0d      	ble.n	80885dc <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
 80885c0:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 80885c4:	b143      	cbz	r3, 80885d8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 80885c6:	2104      	movs	r1, #4
 80885c8:	4628      	mov	r0, r5
 80885ca:	f7ff ffb9 	bl	8088540 <mbedtls_x509_crt_check_key_usage>

    if( need_ca_bit && ! parent->ca_istrue )
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
 80885ce:	3000      	adds	r0, #0
 80885d0:	bf18      	it	ne
 80885d2:	2001      	movne	r0, #1
 80885d4:	4244      	negs	r4, r0
 80885d6:	e001      	b.n	80885dc <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
        return( -1 );
 80885d8:	f04f 34ff 	mov.w	r4, #4294967295
        return( -1 );
    }
#endif

    return( 0 );
}
 80885dc:	4620      	mov	r0, r4
 80885de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080885e2 <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
 80885e2:	b538      	push	{r3, r4, r5, lr}
 80885e4:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 80885e6:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
 80885ea:	b1a4      	cbz	r4, 8088616 <mbedtls_x509_crt_is_revoked+0x34>
 80885ec:	6922      	ldr	r2, [r4, #16]
 80885ee:	b1a2      	cbz	r2, 808861a <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
 80885f0:	6a2b      	ldr	r3, [r5, #32]
 80885f2:	429a      	cmp	r2, r3
 80885f4:	d001      	beq.n	80885fa <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
 80885f6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
 80885f8:	e7f7      	b.n	80885ea <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 80885fa:	6961      	ldr	r1, [r4, #20]
 80885fc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80885fe:	f00a fd3f 	bl	8093080 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
 8088602:	2800      	cmp	r0, #0
 8088604:	d1f7      	bne.n	80885f6 <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 8088606:	f104 0018 	add.w	r0, r4, #24
 808860a:	f7fe fb01 	bl	8086c10 <mbedtls_x509_time_is_past>
 808860e:	2800      	cmp	r0, #0
 8088610:	d0f1      	beq.n	80885f6 <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
 8088612:	2001      	movs	r0, #1
 8088614:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
 8088616:	4620      	mov	r0, r4
 8088618:	bd38      	pop	{r3, r4, r5, pc}
 808861a:	4610      	mov	r0, r2
}
 808861c:	bd38      	pop	{r3, r4, r5, pc}

0808861e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>:
 * Skip validation if no CRL for the given CA is present.
 */
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
                               mbedtls_x509_crl *crl_list,
                               const mbedtls_x509_crt_profile *profile )
{
 808861e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088622:	b099      	sub	sp, #100	; 0x64
 8088624:	9005      	str	r0, [sp, #20]
 8088626:	4614      	mov	r4, r2
 8088628:	461f      	mov	r7, r3
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
 808862a:	460e      	mov	r6, r1
 808862c:	2900      	cmp	r1, #0
 808862e:	d077      	beq.n	8088720 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x102>
 8088630:	2500      	movs	r5, #0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088632:	f04f 0a01 	mov.w	sl, #1
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
 8088636:	2c00      	cmp	r4, #0
 8088638:	d07a      	beq.n	8088730 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
    {
        if( crl_list->version == 0 ||
 808863a:	69a3      	ldr	r3, [r4, #24]
 808863c:	2b00      	cmp	r3, #0
 808863e:	d06c      	beq.n	808871a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8088640:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
 8088642:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8088644:	429a      	cmp	r2, r3
 8088646:	d168      	bne.n	808871a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 8088648:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 808864a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808864c:	f00a fd18 	bl	8093080 <memcmp>
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8088650:	2800      	cmp	r0, #0
 8088652:	d162      	bne.n	808871a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 8088654:	2102      	movs	r1, #2
 8088656:	4630      	mov	r0, r6
 8088658:	f7ff ff72 	bl	8088540 <mbedtls_x509_crt_check_key_usage>
 808865c:	2800      	cmp	r0, #0
 808865e:	d143      	bne.n	80886e8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 8088660:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088664:	683a      	ldr	r2, [r7, #0]
 8088666:	1e43      	subs	r3, r0, #1
 8088668:	fa0a f303 	lsl.w	r3, sl, r3
 808866c:	4213      	tst	r3, r2
 808866e:	d059      	beq.n	8088724 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x106>
 8088670:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8088674:	2201      	movs	r2, #1
 8088676:	3b01      	subs	r3, #1
 8088678:	fa02 f303 	lsl.w	r3, r2, r3
 808867c:	687a      	ldr	r2, [r7, #4]
 808867e:	4213      	tst	r3, r2
 8088680:	d053      	beq.n	808872a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x10c>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8088682:	f7ff fa41 	bl	8087b08 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 8088686:	f10d 0920 	add.w	r9, sp, #32
 808868a:	464b      	mov	r3, r9
 808868c:	6922      	ldr	r2, [r4, #16]
 808868e:	6961      	ldr	r1, [r4, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8088690:	4683      	mov	fp, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 8088692:	f7ff faab 	bl	8087bec <mbedtls_md>
 8088696:	bb38      	cbnz	r0, 80886e8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 8088698:	f106 08bc 	add.w	r8, r6, #188	; 0xbc
 808869c:	4642      	mov	r2, r8
 808869e:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 80886a2:	f107 000c 	add.w	r0, r7, #12
 80886a6:	f7ff fc1b 	bl	8087ee0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80886aa:	b108      	cbz	r0, 80886b0 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x92>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80886ac:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80886b0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 80886b4:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 80886b8:	9304      	str	r3, [sp, #16]
 80886ba:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 80886be:	4658      	mov	r0, fp
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80886c0:	9107      	str	r1, [sp, #28]
 80886c2:	9306      	str	r3, [sp, #24]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 80886c4:	f7ff fb64 	bl	8087d90 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80886c8:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 80886cc:	9b06      	ldr	r3, [sp, #24]
 80886ce:	9203      	str	r2, [sp, #12]
 80886d0:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 80886d4:	9907      	ldr	r1, [sp, #28]
 80886d6:	9202      	str	r2, [sp, #8]
 80886d8:	9001      	str	r0, [sp, #4]
 80886da:	f8cd 9000 	str.w	r9, [sp]
 80886de:	4642      	mov	r2, r8
 80886e0:	9804      	ldr	r0, [sp, #16]
 80886e2:	f004 f8c9 	bl	808c878 <mbedtls_pk_verify_ext>
 80886e6:	b110      	cbz	r0, 80886ee <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xd0>
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 80886e8:	f045 0510 	orr.w	r5, r5, #16
            break;
 80886ec:	e020      	b.n	8088730 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 80886ee:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80886f2:	f7fe fa8d 	bl	8086c10 <mbedtls_x509_time_is_past>
 80886f6:	b108      	cbz	r0, 80886fc <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xde>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 80886f8:	f045 0520 	orr.w	r5, r5, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 80886fc:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8088700:	f7fe fa88 	bl	8086c14 <mbedtls_x509_time_is_future>
 8088704:	b108      	cbz	r0, 808870a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xec>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 8088706:	f445 6580 	orr.w	r5, r5, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 808870a:	4621      	mov	r1, r4
 808870c:	9805      	ldr	r0, [sp, #20]
 808870e:	f7ff ff68 	bl	80885e2 <mbedtls_x509_crt_is_revoked>
 8088712:	b110      	cbz	r0, 808871a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 8088714:	f045 0502 	orr.w	r5, r5, #2
            break;
 8088718:	e00a      	b.n	8088730 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        crl_list = crl_list->next;
 808871a:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 808871e:	e78a      	b.n	8088636 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x18>
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );
 8088720:	460d      	mov	r5, r1
 8088722:	e005      	b.n	8088730 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 8088724:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 8088728:	e7a2      	b.n	8088670 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x52>

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 808872a:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 808872e:	e7a8      	b.n	8088682 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x64>

        crl_list = crl_list->next;
    }

    return( flags );
}
 8088730:	4628      	mov	r0, r5
 8088732:	b019      	add	sp, #100	; 0x64
 8088734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088738 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808873c:	4604      	mov	r4, r0
 808873e:	b09d      	sub	sp, #116	; 0x74
 8088740:	4699      	mov	r9, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088742:	30a4      	adds	r0, #164	; 0xa4
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
    int ret;
    uint32_t ca_flags = 0;
 8088744:	2300      	movs	r3, #0
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088746:	460d      	mov	r5, r1
 8088748:	9206      	str	r2, [sp, #24]
 808874a:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 808874e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8088750:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
    int ret;
    uint32_t ca_flags = 0;
 8088754:	930b      	str	r3, [sp, #44]	; 0x2c
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088756:	f7fe fa5b 	bl	8086c10 <mbedtls_x509_time_is_past>
 808875a:	b118      	cbz	r0, 8088764 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2c>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 808875c:	6833      	ldr	r3, [r6, #0]
 808875e:	f043 0301 	orr.w	r3, r3, #1
 8088762:	6033      	str	r3, [r6, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8088764:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8088768:	f7fe fa54 	bl	8086c14 <mbedtls_x509_time_is_future>
 808876c:	b118      	cbz	r0, 8088776 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x3e>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 808876e:	6833      	ldr	r3, [r6, #0]
 8088770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088774:	6033      	str	r3, [r6, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088776:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 808877a:	1e5a      	subs	r2, r3, #1
 808877c:	2301      	movs	r3, #1
 808877e:	4093      	lsls	r3, r2
 8088780:	f8d9 2000 	ldr.w	r2, [r9]
 8088784:	4213      	tst	r3, r2
 8088786:	f000 80c0 	beq.w	808890a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d2>
 808878a:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 808878e:	1e5a      	subs	r2, r3, #1
 8088790:	2301      	movs	r3, #1
 8088792:	4093      	lsls	r3, r2
 8088794:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8088798:	4213      	tst	r3, r2
 808879a:	f000 80bb 	beq.w	8088914 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 808879e:	6833      	ldr	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80887a0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80887a4:	f043 0308 	orr.w	r3, r3, #8
 80887a8:	6033      	str	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80887aa:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 80887ae:	f7ff f9ab 	bl	8087b08 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80887b2:	465b      	mov	r3, fp
 80887b4:	6922      	ldr	r2, [r4, #16]
 80887b6:	6961      	ldr	r1, [r4, #20]
    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80887b8:	9005      	str	r0, [sp, #20]
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80887ba:	f7ff fa17 	bl	8087bec <mbedtls_md>
 80887be:	2800      	cmp	r0, #0
 80887c0:	d16d      	bne.n	808889e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
 80887c2:	4607      	mov	r7, r0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80887c4:	f8cd b01c 	str.w	fp, [sp, #28]
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 80887c8:	b915      	cbnz	r5, 80887d0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x98>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 80887ca:	2f00      	cmp	r7, #0
 80887cc:	d14c      	bne.n	8088868 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x130>
 80887ce:	e066      	b.n	808889e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 80887d0:	fab8 f388 	clz	r3, r8
 80887d4:	2201      	movs	r2, #1
 80887d6:	095b      	lsrs	r3, r3, #5
 80887d8:	4629      	mov	r1, r5
 80887da:	4620      	mov	r0, r4
 80887dc:	f7ff fed4 	bl	8088588 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80887e0:	2800      	cmp	r0, #0
 80887e2:	d13e      	bne.n	8088862 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 80887e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80887e6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
            continue;

        check_path_cnt = path_cnt + 1;
 80887e8:	f108 0b01 	add.w	fp, r8, #1

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 80887ec:	429a      	cmp	r2, r3
 80887ee:	d106      	bne.n	80887fe <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xc6>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 80887f0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80887f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80887f4:	f00a fc44 	bl	8093080 <memcmp>
                    child->subject_raw.len ) == 0 )
        {
            check_path_cnt--;
 80887f8:	2800      	cmp	r0, #0
 80887fa:	bf08      	it	eq
 80887fc:	46c3      	moveq	fp, r8
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
 80887fe:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8088802:	2b00      	cmp	r3, #0
 8088804:	dd04      	ble.n	8088810 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xd8>
 8088806:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8088808:	ebc2 0b0b 	rsb	fp, r2, fp
 808880c:	455b      	cmp	r3, fp
 808880e:	db28      	blt.n	8088862 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088810:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8088814:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088818:	9805      	ldr	r0, [sp, #20]
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 808881a:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 808881e:	9109      	str	r1, [sp, #36]	; 0x24
 8088820:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088822:	f7ff fab5 	bl	8087d90 <mbedtls_md_get_size>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088826:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 808882a:	9b07      	ldr	r3, [sp, #28]
 808882c:	9203      	str	r2, [sp, #12]
 808882e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8088832:	9001      	str	r0, [sp, #4]
 8088834:	9202      	str	r2, [sp, #8]
 8088836:	9300      	str	r3, [sp, #0]
 8088838:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
 808883c:	9b08      	ldr	r3, [sp, #32]
 808883e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8088840:	4658      	mov	r0, fp
 8088842:	f004 f819 	bl	808c878 <mbedtls_pk_verify_ext>
 8088846:	b960      	cbnz	r0, 8088862 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8088848:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 808884c:	f7fe f9e0 	bl	8086c10 <mbedtls_x509_time_is_past>
 8088850:	b920      	cbnz	r0, 808885c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x124>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8088852:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8088856:	f7fe f9dd 	bl	8086c14 <mbedtls_x509_time_is_future>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 808885a:	b130      	cbz	r0, 808886a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
        {
            if ( future_past_ca == NULL )
 808885c:	2f00      	cmp	r7, #0
 808885e:	bf08      	it	eq
 8088860:	462f      	moveq	r7, r5
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8088862:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 8088866:	e7af      	b.n	80887c8 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x90>
 8088868:	463d      	mov	r5, r7
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 808886a:	6833      	ldr	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 808886c:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088870:	f023 0308 	bic.w	r3, r3, #8
 8088874:	6033      	str	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8088876:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 808887a:	f109 000c 	add.w	r0, r9, #12
 808887e:	f7ff fb2f 	bl	8087ee0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8088882:	b118      	cbz	r0, 808888c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x154>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8088884:	6833      	ldr	r3, [r6, #0]
 8088886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808888a:	6033      	str	r3, [r6, #0]
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 808888c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
 808888e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8088890:	429a      	cmp	r2, r3
 8088892:	d10d      	bne.n	80888b0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8088894:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8088896:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8088898:	f00a fbf2 	bl	8093080 <memcmp>
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 808889c:	b940      	cbnz	r0, 80888b0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 808889e:	f1ba 0f00 	cmp.w	sl, #0
 80888a2:	d12a      	bne.n	80888fa <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1c2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 80888a4:	6832      	ldr	r2, [r6, #0]
 80888a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 80888a8:	2000      	movs	r0, #0
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 80888aa:	4313      	orrs	r3, r2
 80888ac:	6033      	str	r3, [r6, #0]

    return( 0 );
 80888ae:	e036      	b.n	808891e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
                  child->subject_raw.len ) != 0 ) )
    {
#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the chain's top crt */
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 80888b0:	464b      	mov	r3, r9
 80888b2:	9a06      	ldr	r2, [sp, #24]
 80888b4:	4629      	mov	r1, r5
 80888b6:	4620      	mov	r0, r4
 80888b8:	f7ff feb1 	bl	808861e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 80888bc:	6833      	ldr	r3, [r6, #0]
 80888be:	4318      	orrs	r0, r3
 80888c0:	6030      	str	r0, [r6, #0]
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 80888c2:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 80888c6:	f7fe f9a3 	bl	8086c10 <mbedtls_x509_time_is_past>
 80888ca:	b118      	cbz	r0, 80888d4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x19c>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 80888cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80888ce:	f043 0301 	orr.w	r3, r3, #1
 80888d2:	930b      	str	r3, [sp, #44]	; 0x2c

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 80888d4:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 80888d8:	f7fe f99c 	bl	8086c14 <mbedtls_x509_time_is_future>
 80888dc:	b118      	cbz	r0, 80888e6 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1ae>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 80888de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80888e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80888e4:	930b      	str	r3, [sp, #44]	; 0x2c

        if( NULL != f_vrfy )
 80888e6:	f1ba 0f00 	cmp.w	sl, #0
 80888ea:	d0db      	beq.n	80888a4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 80888ec:	ab0b      	add	r3, sp, #44	; 0x2c
 80888ee:	f108 0201 	add.w	r2, r8, #1
 80888f2:	4629      	mov	r1, r5
 80888f4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80888f6:	47d0      	blx	sl
 80888f8:	b988      	cbnz	r0, 808891e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 80888fa:	4633      	mov	r3, r6
 80888fc:	4642      	mov	r2, r8
 80888fe:	4621      	mov	r1, r4
 8088900:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8088902:	47d0      	blx	sl
 8088904:	2800      	cmp	r0, #0
 8088906:	d0cd      	beq.n	80888a4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
 8088908:	e009      	b.n	808891e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 808890a:	6833      	ldr	r3, [r6, #0]
 808890c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8088910:	6033      	str	r3, [r6, #0]
 8088912:	e73a      	b.n	808878a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8088914:	6833      	ldr	r3, [r6, #0]
 8088916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 808891a:	6033      	str	r3, [r6, #0]
 808891c:	e73f      	b.n	808879e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x66>
    }

    *flags |= ca_flags;

    return( 0 );
}
 808891e:	b01d      	add	sp, #116	; 0x74
 8088920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088924 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088928:	b09d      	sub	sp, #116	; 0x74
 808892a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 808892c:	469a      	mov	sl, r3
    int ret;
    uint32_t parent_flags = 0;
 808892e:	2300      	movs	r3, #0
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088930:	4605      	mov	r5, r0
 8088932:	460f      	mov	r7, r1
 8088934:	9206      	str	r2, [sp, #24]
 8088936:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 808893a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    uint32_t parent_flags = 0;
 808893c:	930b      	str	r3, [sp, #44]	; 0x2c
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 808893e:	b146      	cbz	r6, 8088952 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2e>
 8088940:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 8088944:	304c      	adds	r0, #76	; 0x4c
 8088946:	f7ff fa44 	bl	8087dd2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 808894a:	2800      	cmp	r0, #0
 808894c:	d07a      	beq.n	8088a44 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x120>
        self_cnt++;

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 808894e:	2e07      	cmp	r6, #7
 8088950:	dc76      	bgt.n	8088a40 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x11c>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088952:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8088956:	f7fe f95b 	bl	8086c10 <mbedtls_x509_time_is_past>
 808895a:	b118      	cbz	r0, 8088964 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x40>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 808895c:	6823      	ldr	r3, [r4, #0]
 808895e:	f043 0301 	orr.w	r3, r3, #1
 8088962:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8088964:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8088968:	f7fe f954 	bl	8086c14 <mbedtls_x509_time_is_future>
 808896c:	b118      	cbz	r0, 8088976 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 808896e:	6823      	ldr	r3, [r4, #0]
 8088970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088974:	6023      	str	r3, [r4, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088976:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 808897a:	1e5a      	subs	r2, r3, #1
 808897c:	2301      	movs	r3, #1
 808897e:	4093      	lsls	r3, r2
 8088980:	f8d8 2000 	ldr.w	r2, [r8]
 8088984:	4213      	tst	r3, r2
 8088986:	d061      	beq.n	8088a4c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x128>
 8088988:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 808898c:	1e5a      	subs	r2, r3, #1
 808898e:	2301      	movs	r3, #1
 8088990:	4093      	lsls	r3, r2
 8088992:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8088996:	4213      	tst	r3, r2
 8088998:	d05d      	beq.n	8088a56 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 808899a:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
 808899e:	f7ff f8b3 	bl	8087b08 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80889a2:	ab0c      	add	r3, sp, #48	; 0x30
 80889a4:	692a      	ldr	r2, [r5, #16]
 80889a6:	6969      	ldr	r1, [r5, #20]
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80889a8:	4683      	mov	fp, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80889aa:	f7ff f91f 	bl	8087bec <mbedtls_md>
 80889ae:	bb48      	cbnz	r0, 8088a04 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe0>
        /* Note: this can't happen except after an internal error */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
    }
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 80889b0:	f107 09bc 	add.w	r9, r7, #188	; 0xbc
 80889b4:	464a      	mov	r2, r9
 80889b6:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 80889ba:	f108 000c 	add.w	r0, r8, #12
 80889be:	f7ff fa8f 	bl	8087ee0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80889c2:	b118      	cbz	r0, 80889cc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xa8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80889c4:	6823      	ldr	r3, [r4, #0]
 80889c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80889ca:	6023      	str	r3, [r4, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80889cc:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 80889d0:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 80889d4:	9307      	str	r3, [sp, #28]
 80889d6:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80889da:	4658      	mov	r0, fp
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80889dc:	9109      	str	r1, [sp, #36]	; 0x24
 80889de:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80889e0:	f7ff f9d6 	bl	8087d90 <mbedtls_md_get_size>
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80889e4:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 80889e8:	9b08      	ldr	r3, [sp, #32]
 80889ea:	9203      	str	r2, [sp, #12]
 80889ec:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 80889f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80889f2:	9202      	str	r2, [sp, #8]
 80889f4:	aa0c      	add	r2, sp, #48	; 0x30
 80889f6:	9001      	str	r0, [sp, #4]
 80889f8:	9200      	str	r2, [sp, #0]
 80889fa:	9807      	ldr	r0, [sp, #28]
 80889fc:	464a      	mov	r2, r9
 80889fe:	f003 ff3b 	bl	808c878 <mbedtls_pk_verify_ext>
 8088a02:	b118      	cbz	r0, 8088a0c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe8>
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088a04:	6823      	ldr	r3, [r4, #0]
 8088a06:	f043 0308 	orr.w	r3, r3, #8
 8088a0a:	6023      	str	r3, [r4, #0]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8088a0c:	4643      	mov	r3, r8
 8088a0e:	4652      	mov	r2, sl
 8088a10:	4639      	mov	r1, r7
 8088a12:	4628      	mov	r0, r5
 8088a14:	f7ff fe03 	bl	808861e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 8088a18:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 8088a1a:	f8dd 9018 	ldr.w	r9, [sp, #24]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8088a1e:	4318      	orrs	r0, r3
 8088a20:	6020      	str	r0, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
         grandparent != NULL;
 8088a22:	f1b9 0f00 	cmp.w	r9, #0
 8088a26:	d029      	beq.n	8088a7c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x158>
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
 8088a28:	fab6 f386 	clz	r3, r6
 8088a2c:	2200      	movs	r2, #0
 8088a2e:	095b      	lsrs	r3, r3, #5
 8088a30:	4649      	mov	r1, r9
 8088a32:	4638      	mov	r0, r7
 8088a34:	f7ff fda8 	bl	8088588 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088a38:	b190      	cbz	r0, 8088a60 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x13c>
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 8088a3a:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 8088a3e:	e7f0      	b.n	8088a22 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xfe>

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 8088a40:	4838      	ldr	r0, [pc, #224]	; (8088b24 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x200>)
 8088a42:	e06b      	b.n	8088b1c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        self_cnt++;
 8088a44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088a46:	3301      	adds	r3, #1
 8088a48:	9328      	str	r3, [sp, #160]	; 0xa0
 8088a4a:	e780      	b.n	808894e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2a>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8088a4c:	6823      	ldr	r3, [r4, #0]
 8088a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8088a52:	6023      	str	r3, [r4, #0]
 8088a54:	e798      	b.n	8088988 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x64>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8088a56:	6823      	ldr	r3, [r4, #0]
 8088a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8088a5c:	6023      	str	r3, [r4, #0]
 8088a5e:	e79c      	b.n	808899a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x76>
    }

    if( grandparent != NULL )
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
                                path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
 8088a60:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8088a62:	4652      	mov	r2, sl
 8088a64:	9304      	str	r3, [sp, #16]
 8088a66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8088a68:	4649      	mov	r1, r9
 8088a6a:	9303      	str	r3, [sp, #12]
 8088a6c:	ab0b      	add	r3, sp, #44	; 0x2c
 8088a6e:	9302      	str	r3, [sp, #8]
 8088a70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088a72:	9301      	str	r3, [sp, #4]
 8088a74:	1c73      	adds	r3, r6, #1
 8088a76:	9300      	str	r3, [sp, #0]
 8088a78:	4643      	mov	r3, r8
 8088a7a:	e03b      	b.n	8088af4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d0>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8088a7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088a7e:	f106 0b02 	add.w	fp, r6, #2
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 8088a82:	f8d7 9130 	ldr.w	r9, [r7, #304]	; 0x130
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8088a86:	ebc3 0b0b 	rsb	fp, r3, fp
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
             grandparent != NULL;
 8088a8a:	f1b9 0f00 	cmp.w	r9, #0
 8088a8e:	d024      	beq.n	8088ada <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1b6>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8088a90:	f8d9 3100 	ldr.w	r3, [r9, #256]	; 0x100
 8088a94:	2b00      	cmp	r3, #0
 8088a96:	dd01      	ble.n	8088a9c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
 8088a98:	455b      	cmp	r3, fp
 8088a9a:	db08      	blt.n	8088aae <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x18a>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 8088a9c:	fab6 f386 	clz	r3, r6
 8088aa0:	2200      	movs	r2, #0
 8088aa2:	095b      	lsrs	r3, r3, #5
 8088aa4:	4649      	mov	r1, r9
 8088aa6:	4638      	mov	r0, r7
 8088aa8:	f7ff fd6e 	bl	8088588 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088aac:	b110      	cbz	r0, 8088ab4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x190>
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 8088aae:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 8088ab2:	e7ea      	b.n	8088a8a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
                                         profile, path_cnt + 1, self_cnt, &parent_flags,
                                         f_vrfy, p_vrfy );
 8088ab4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8088ab6:	f8cd 8000 	str.w	r8, [sp]
 8088aba:	9305      	str	r3, [sp, #20]
 8088abc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8088abe:	9a06      	ldr	r2, [sp, #24]
 8088ac0:	9304      	str	r3, [sp, #16]
 8088ac2:	ab0b      	add	r3, sp, #44	; 0x2c
 8088ac4:	9303      	str	r3, [sp, #12]
 8088ac6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088ac8:	4649      	mov	r1, r9
 8088aca:	9302      	str	r3, [sp, #8]
 8088acc:	1c73      	adds	r3, r6, #1
 8088ace:	9301      	str	r3, [sp, #4]
 8088ad0:	4638      	mov	r0, r7
 8088ad2:	4653      	mov	r3, sl
 8088ad4:	f7ff ff26 	bl	8088924 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 8088ad8:	e00f      	b.n	8088afa <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d6>
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
 8088ada:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8088adc:	4652      	mov	r2, sl
 8088ade:	9304      	str	r3, [sp, #16]
 8088ae0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8088ae2:	9906      	ldr	r1, [sp, #24]
 8088ae4:	9303      	str	r3, [sp, #12]
 8088ae6:	ab0b      	add	r3, sp, #44	; 0x2c
 8088ae8:	9302      	str	r3, [sp, #8]
 8088aea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088aec:	9301      	str	r3, [sp, #4]
 8088aee:	1c73      	adds	r3, r6, #1
 8088af0:	9300      	str	r3, [sp, #0]
 8088af2:	4643      	mov	r3, r8
 8088af4:	4638      	mov	r0, r7
 8088af6:	f7ff fe1f 	bl	8088738 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
            if( ret != 0 )
 8088afa:	b978      	cbnz	r0, 8088b1c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
                return( ret );
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
 8088afc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8088afe:	b92b      	cbnz	r3, 8088b0c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e8>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 8088b00:	6822      	ldr	r2, [r4, #0]
 8088b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 8088b04:	2000      	movs	r0, #0
    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 8088b06:	4313      	orrs	r3, r2
 8088b08:	6023      	str	r3, [r4, #0]

    return( 0 );
 8088b0a:	e007      	b.n	8088b1c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8088b0c:	4629      	mov	r1, r5
 8088b0e:	4623      	mov	r3, r4
 8088b10:	4632      	mov	r2, r6
 8088b12:	982b      	ldr	r0, [sp, #172]	; 0xac
 8088b14:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8088b16:	47a8      	blx	r5
 8088b18:	2800      	cmp	r0, #0
 8088b1a:	d0f1      	beq.n	8088b00 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
            return( ret );

    *flags |= parent_flags;

    return( 0 );
}
 8088b1c:	b01d      	add	sp, #116	; 0x74
 8088b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088b22:	bf00      	nop
 8088b24:	ffffd000 	.word	0xffffd000

08088b28 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8088b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088b2c:	b089      	sub	sp, #36	; 0x24
 8088b2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8088b30:	4693      	mov	fp, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 8088b32:	2200      	movs	r2, #0
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8088b34:	4605      	mov	r5, r0
 8088b36:	468a      	mov	sl, r1
 8088b38:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 8088b3c:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
 8088b3e:	461f      	mov	r7, r3
 8088b40:	2b00      	cmp	r3, #0
 8088b42:	d06e      	beq.n	8088c22 <mbedtls_x509_crt_verify_with_profile+0xfa>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 8088b44:	f1b8 0f00 	cmp.w	r8, #0
 8088b48:	d048      	beq.n	8088bdc <mbedtls_x509_crt_verify_with_profile+0xb4>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 8088b4a:	4640      	mov	r0, r8
 8088b4c:	f00a faed 	bl	809312a <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8088b50:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    }

    if( cn != NULL )
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 8088b54:	4681      	mov	r9, r0

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8088b56:	069b      	lsls	r3, r3, #26
 8088b58:	d50d      	bpl.n	8088b76 <mbedtls_x509_crt_verify_with_profile+0x4e>
        {
            cur = &crt->subject_alt_names;
 8088b5a:	f105 06e8 	add.w	r6, r5, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 8088b5e:	6873      	ldr	r3, [r6, #4]
 8088b60:	4599      	cmp	r9, r3
 8088b62:	d12c      	bne.n	8088bbe <mbedtls_x509_crt_verify_with_profile+0x96>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 8088b64:	464a      	mov	r2, r9
 8088b66:	68b1      	ldr	r1, [r6, #8]
 8088b68:	4640      	mov	r0, r8
 8088b6a:	9307      	str	r3, [sp, #28]
 8088b6c:	f7ff f91b 	bl	8087da6 <_ZL15x509_memcasecmpPKvS0_j>
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 8088b70:	9b07      	ldr	r3, [sp, #28]
 8088b72:	bb20      	cbnz	r0, 8088bbe <mbedtls_x509_crt_verify_with_profile+0x96>
 8088b74:	e032      	b.n	8088bdc <mbedtls_x509_crt_verify_with_profile+0xb4>
        goto exit;
    }

    if( cn != NULL )
    {
        name = &crt->subject;
 8088b76:	f105 066c 	add.w	r6, r5, #108	; 0x6c
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 8088b7a:	6872      	ldr	r2, [r6, #4]
 8088b7c:	2a03      	cmp	r2, #3
 8088b7e:	d118      	bne.n	8088bb2 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8088b80:	68b1      	ldr	r1, [r6, #8]
 8088b82:	4855      	ldr	r0, [pc, #340]	; (8088cd8 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 8088b84:	f00a fa7c 	bl	8093080 <memcmp>
 8088b88:	b998      	cbnz	r0, 8088bb2 <mbedtls_x509_crt_verify_with_profile+0x8a>
                {
                    if( name->val.len == cn_len &&
 8088b8a:	6933      	ldr	r3, [r6, #16]
 8088b8c:	4599      	cmp	r9, r3
 8088b8e:	d107      	bne.n	8088ba0 <mbedtls_x509_crt_verify_with_profile+0x78>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 8088b90:	464a      	mov	r2, r9
 8088b92:	4641      	mov	r1, r8
 8088b94:	6970      	ldr	r0, [r6, #20]
 8088b96:	9307      	str	r3, [sp, #28]
 8088b98:	f7ff f905 	bl	8087da6 <_ZL15x509_memcasecmpPKvS0_j>
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
                {
                    if( name->val.len == cn_len &&
 8088b9c:	9b07      	ldr	r3, [sp, #28]
 8088b9e:	b1e8      	cbz	r0, 8088bdc <mbedtls_x509_crt_verify_with_profile+0xb4>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8088ba0:	2b02      	cmp	r3, #2
 8088ba2:	d906      	bls.n	8088bb2 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8088ba4:	2202      	movs	r2, #2
 8088ba6:	494d      	ldr	r1, [pc, #308]	; (8088cdc <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 8088ba8:	6970      	ldr	r0, [r6, #20]
 8088baa:	f00a fa69 	bl	8093080 <memcmp>
                {
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
 8088bae:	2800      	cmp	r0, #0
 8088bb0:	d053      	beq.n	8088c5a <mbedtls_x509_crt_verify_with_profile+0x132>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
                        break;
                }

                name = name->next;
 8088bb2:	69b6      	ldr	r6, [r6, #24]
            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
        else
        {
            while( name != NULL )
 8088bb4:	2e00      	cmp	r6, #0
 8088bb6:	d1e0      	bne.n	8088b7a <mbedtls_x509_crt_verify_with_profile+0x52>

                cur = cur->next;
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 8088bb8:	2304      	movs	r3, #4
 8088bba:	6023      	str	r3, [r4, #0]
 8088bbc:	e00e      	b.n	8088bdc <mbedtls_x509_crt_verify_with_profile+0xb4>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8088bbe:	2b02      	cmp	r3, #2
 8088bc0:	d947      	bls.n	8088c52 <mbedtls_x509_crt_verify_with_profile+0x12a>
 8088bc2:	2202      	movs	r2, #2
 8088bc4:	4945      	ldr	r1, [pc, #276]	; (8088cdc <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 8088bc6:	68b0      	ldr	r0, [r6, #8]
 8088bc8:	f00a fa5a 	bl	8093080 <memcmp>
            {
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
 8088bcc:	2800      	cmp	r0, #0
 8088bce:	d140      	bne.n	8088c52 <mbedtls_x509_crt_verify_with_profile+0x12a>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 8088bd0:	4631      	mov	r1, r6
 8088bd2:	4640      	mov	r0, r8
 8088bd4:	f7ff f93d 	bl	8087e52 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8088bd8:	2800      	cmp	r0, #0
 8088bda:	d13a      	bne.n	8088c52 <mbedtls_x509_crt_verify_with_profile+0x12a>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 8088bdc:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
 8088be0:	4630      	mov	r0, r6
 8088be2:	f003 feaf 	bl	808c944 <mbedtls_pk_get_type>
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088be6:	2301      	movs	r3, #1
 8088be8:	1e42      	subs	r2, r0, #1
 8088bea:	4093      	lsls	r3, r2
 8088bec:	687a      	ldr	r2, [r7, #4]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 8088bee:	4601      	mov	r1, r0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088bf0:	4213      	tst	r3, r2
 8088bf2:	d03a      	beq.n	8088c6a <mbedtls_x509_crt_verify_with_profile+0x142>
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 8088bf4:	4632      	mov	r2, r6
 8088bf6:	f107 000c 	add.w	r0, r7, #12
 8088bfa:	f7ff f971 	bl	8087ee0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8088bfe:	b118      	cbz	r0, 8088c08 <mbedtls_x509_crt_verify_with_profile+0xe0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8088c00:	6823      	ldr	r3, [r4, #0]
 8088c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8088c06:	6023      	str	r3, [r4, #0]
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8088c08:	4656      	mov	r6, sl

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 8088c0a:	2e00      	cmp	r6, #0
 8088c0c:	d03d      	beq.n	8088c8a <mbedtls_x509_crt_verify_with_profile+0x162>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8088c0e:	2301      	movs	r3, #1
 8088c10:	2200      	movs	r2, #0
 8088c12:	4631      	mov	r1, r6
 8088c14:	4628      	mov	r0, r5
 8088c16:	f7ff fcb7 	bl	8088588 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088c1a:	b358      	cbz	r0, 8088c74 <mbedtls_x509_crt_verify_with_profile+0x14c>

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 8088c1c:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8088c20:	e7f3      	b.n	8088c0a <mbedtls_x509_crt_verify_with_profile+0xe2>

    *flags = 0;

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 8088c22:	482f      	ldr	r0, [pc, #188]	; (8088ce0 <mbedtls_x509_crt_verify_with_profile+0x1b8>)
 8088c24:	e011      	b.n	8088c4a <mbedtls_x509_crt_verify_with_profile+0x122>

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
                                         pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 8088c26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8088c28:	9002      	str	r0, [sp, #8]
 8088c2a:	9305      	str	r3, [sp, #20]
 8088c2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8088c2e:	9001      	str	r0, [sp, #4]
 8088c30:	9304      	str	r3, [sp, #16]
 8088c32:	9403      	str	r4, [sp, #12]
 8088c34:	9700      	str	r7, [sp, #0]
 8088c36:	465b      	mov	r3, fp
 8088c38:	4652      	mov	r2, sl
 8088c3a:	4631      	mov	r1, r6
 8088c3c:	4628      	mov	r0, r5
 8088c3e:	f7ff fe71 	bl	8088924 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>

exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 8088c42:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 8088c46:	d12e      	bne.n	8088ca6 <mbedtls_x509_crt_verify_with_profile+0x17e>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 8088c48:	4826      	ldr	r0, [pc, #152]	; (8088ce4 <mbedtls_x509_crt_verify_with_profile+0x1bc>)

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
 8088c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8088c4e:	6023      	str	r3, [r4, #0]
        return( ret );
 8088c50:	e03f      	b.n	8088cd2 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
                {
                    break;
                }

                cur = cur->next;
 8088c52:	68f6      	ldr	r6, [r6, #12]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
 8088c54:	2e00      	cmp	r6, #0
 8088c56:	d182      	bne.n	8088b5e <mbedtls_x509_crt_verify_with_profile+0x36>
 8088c58:	e7ae      	b.n	8088bb8 <mbedtls_x509_crt_verify_with_profile+0x90>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
 8088c5a:	f106 010c 	add.w	r1, r6, #12
 8088c5e:	4640      	mov	r0, r8
 8088c60:	f7ff f8f7 	bl	8087e52 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8088c64:	2800      	cmp	r0, #0
 8088c66:	d1a4      	bne.n	8088bb2 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8088c68:	e7b8      	b.n	8088bdc <mbedtls_x509_crt_verify_with_profile+0xb4>

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8088c6a:	6823      	ldr	r3, [r4, #0]
 8088c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8088c70:	6023      	str	r3, [r4, #0]
 8088c72:	e7bf      	b.n	8088bf4 <mbedtls_x509_crt_verify_with_profile+0xcc>
    }

    if( parent != NULL )
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 8088c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8088c76:	9402      	str	r4, [sp, #8]
 8088c78:	9304      	str	r3, [sp, #16]
 8088c7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8088c7c:	9001      	str	r0, [sp, #4]
 8088c7e:	9303      	str	r3, [sp, #12]
 8088c80:	9000      	str	r0, [sp, #0]
 8088c82:	463b      	mov	r3, r7
 8088c84:	465a      	mov	r2, fp
 8088c86:	4631      	mov	r1, r6
 8088c88:	e01f      	b.n	8088cca <mbedtls_x509_crt_verify_with_profile+0x1a2>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8088c8a:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
 8088c8e:	b196      	cbz	r6, 8088cb6 <mbedtls_x509_crt_verify_with_profile+0x18e>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8088c90:	2301      	movs	r3, #1
 8088c92:	2200      	movs	r2, #0
 8088c94:	4631      	mov	r1, r6
 8088c96:	4628      	mov	r0, r5
 8088c98:	f7ff fc76 	bl	8088588 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088c9c:	2800      	cmp	r0, #0
 8088c9e:	d0c2      	beq.n	8088c26 <mbedtls_x509_crt_verify_with_profile+0xfe>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8088ca0:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8088ca4:	e7f3      	b.n	8088c8e <mbedtls_x509_crt_verify_with_profile+0x166>
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
 8088ca6:	2800      	cmp	r0, #0
 8088ca8:	d1cf      	bne.n	8088c4a <mbedtls_x509_crt_verify_with_profile+0x122>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 8088caa:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
 8088cac:	480e      	ldr	r0, [pc, #56]	; (8088ce8 <mbedtls_x509_crt_verify_with_profile+0x1c0>)
 8088cae:	2b00      	cmp	r3, #0
 8088cb0:	bf08      	it	eq
 8088cb2:	2000      	moveq	r0, #0
 8088cb4:	e00d      	b.n	8088cd2 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
                                       pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 8088cb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8088cb8:	465a      	mov	r2, fp
 8088cba:	9304      	str	r3, [sp, #16]
 8088cbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8088cbe:	4651      	mov	r1, sl
 8088cc0:	9303      	str	r3, [sp, #12]
 8088cc2:	463b      	mov	r3, r7
 8088cc4:	9402      	str	r4, [sp, #8]
 8088cc6:	9601      	str	r6, [sp, #4]
 8088cc8:	9600      	str	r6, [sp, #0]
 8088cca:	4628      	mov	r0, r5
 8088ccc:	f7ff fd34 	bl	8088738 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 8088cd0:	e7b7      	b.n	8088c42 <mbedtls_x509_crt_verify_with_profile+0x11a>

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
 8088cd2:	b009      	add	sp, #36	; 0x24
 8088cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088cd8:	08093c44 	.word	0x08093c44
 8088cdc:	08094cd6 	.word	0x08094cd6
 8088ce0:	ffffd800 	.word	0xffffd800
 8088ce4:	ffffd000 	.word	0xffffd000
 8088ce8:	ffffd900 	.word	0xffffd900

08088cec <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 8088cec:	f44f 729a 	mov.w	r2, #308	; 0x134
 8088cf0:	2100      	movs	r1, #0
 8088cf2:	f00a b9fa 	b.w	80930ea <memset>

08088cf6 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 8088cf6:	b570      	push	{r4, r5, r6, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 8088cf8:	4605      	mov	r5, r0
 8088cfa:	2800      	cmp	r0, #0
 8088cfc:	d053      	beq.n	8088da6 <mbedtls_x509_crt_free+0xb0>
 8088cfe:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 8088d00:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8088d04:	f003 fd01 	bl	808c70a <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 8088d08:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 8088d0a:	b14a      	cbz	r2, 8088d20 <mbedtls_x509_crt_free+0x2a>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8088d0c:	4610      	mov	r0, r2
 8088d0e:	2120      	movs	r1, #32

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 8088d10:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8088d12:	f7ff f840 	bl	8087d96 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 8088d16:	4610      	mov	r0, r2
 8088d18:	f007 fedc 	bl	8090ad4 <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 8088d1c:	4632      	mov	r2, r6
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
 8088d1e:	e7f4      	b.n	8088d0a <mbedtls_x509_crt_free+0x14>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 8088d20:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 8088d24:	b14a      	cbz	r2, 8088d3a <mbedtls_x509_crt_free+0x44>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8088d26:	4610      	mov	r0, r2
 8088d28:	2120      	movs	r1, #32

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 8088d2a:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8088d2c:	f7ff f833 	bl	8087d96 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 8088d30:	4610      	mov	r0, r2
 8088d32:	f007 fecf 	bl	8090ad4 <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 8088d36:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
 8088d38:	e7f4      	b.n	8088d24 <mbedtls_x509_crt_free+0x2e>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 8088d3a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 8088d3e:	b14a      	cbz	r2, 8088d54 <mbedtls_x509_crt_free+0x5e>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8088d40:	4610      	mov	r0, r2
 8088d42:	2110      	movs	r1, #16

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 8088d44:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8088d46:	f7ff f826 	bl	8087d96 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 8088d4a:	4610      	mov	r0, r2
 8088d4c:	f007 fec2 	bl	8090ad4 <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 8088d50:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
 8088d52:	e7f4      	b.n	8088d3e <mbedtls_x509_crt_free+0x48>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 8088d54:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 8088d58:	b14a      	cbz	r2, 8088d6e <mbedtls_x509_crt_free+0x78>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8088d5a:	4610      	mov	r0, r2
 8088d5c:	2110      	movs	r1, #16

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 8088d5e:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8088d60:	f7ff f819 	bl	8087d96 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 8088d64:	4610      	mov	r0, r2
 8088d66:	f007 feb5 	bl	8090ad4 <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 8088d6a:	4632      	mov	r2, r6
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
 8088d6c:	e7f4      	b.n	8088d58 <mbedtls_x509_crt_free+0x62>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 8088d6e:	68a0      	ldr	r0, [r4, #8]
 8088d70:	b128      	cbz	r0, 8088d7e <mbedtls_x509_crt_free+0x88>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 8088d72:	6861      	ldr	r1, [r4, #4]
 8088d74:	f7ff f80f 	bl	8087d96 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( cert_cur->raw.p );
 8088d78:	68a0      	ldr	r0, [r4, #8]
 8088d7a:	f007 feab 	bl	8090ad4 <free>
        }

        cert_cur = cert_cur->next;
 8088d7e:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 8088d82:	2c00      	cmp	r4, #0
 8088d84:	d1bc      	bne.n	8088d00 <mbedtls_x509_crt_free+0xa>
 8088d86:	462a      	mov	r2, r5
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8088d88:	f44f 719a 	mov.w	r1, #308	; 0x134
 8088d8c:	4610      	mov	r0, r2

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 8088d8e:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8088d92:	f7ff f800 	bl	8087d96 <_ZL15mbedtls_zeroizePvj>
        if( cert_prv != crt )
 8088d96:	42aa      	cmp	r2, r5
 8088d98:	d002      	beq.n	8088da0 <mbedtls_x509_crt_free+0xaa>
            mbedtls_free( cert_prv );
 8088d9a:	4610      	mov	r0, r2
 8088d9c:	f007 fe9a 	bl	8090ad4 <free>
    }
    while( cert_cur != NULL );
 8088da0:	4622      	mov	r2, r4
 8088da2:	2c00      	cmp	r4, #0
 8088da4:	d1f0      	bne.n	8088d88 <mbedtls_x509_crt_free+0x92>
 8088da6:	bd70      	pop	{r4, r5, r6, pc}

08088da8 <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 8088da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088dac:	4688      	mov	r8, r1
 8088dae:	b09b      	sub	sp, #108	; 0x6c
 8088db0:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 8088db2:	4682      	mov	sl, r0
 8088db4:	2800      	cmp	r0, #0
 8088db6:	f000 812c 	beq.w	8089012 <mbedtls_x509_crt_parse_der+0x26a>
 8088dba:	2900      	cmp	r1, #0
 8088dbc:	f000 8129 	beq.w	8089012 <mbedtls_x509_crt_parse_der+0x26a>
 8088dc0:	4604      	mov	r4, r0
 8088dc2:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
 8088dc6:	69a3      	ldr	r3, [r4, #24]
 8088dc8:	b1a3      	cbz	r3, 8088df4 <mbedtls_x509_crt_parse_der+0x4c>
 8088dca:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8088dce:	46a1      	mov	r9, r4
 8088dd0:	b10b      	cbz	r3, 8088dd6 <mbedtls_x509_crt_parse_der+0x2e>
 8088dd2:	461c      	mov	r4, r3
 8088dd4:	e7f7      	b.n	8088dc6 <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 8088dd6:	f44f 719a 	mov.w	r1, #308	; 0x134
 8088dda:	2001      	movs	r0, #1
 8088ddc:	f00a f93a 	bl	8093054 <calloc>
 8088de0:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
 8088de4:	2800      	cmp	r0, #0
 8088de6:	f000 8116 	beq.w	8089016 <mbedtls_x509_crt_parse_der+0x26e>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
 8088dea:	f7ff ff7f 	bl	8088cec <mbedtls_x509_crt_init>
 8088dee:	46a1      	mov	r9, r4
        crt = crt->next;
 8088df0:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 8088df4:	2300      	movs	r3, #0
 8088df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8088df8:	930c      	str	r3, [sp, #48]	; 0x30
 8088dfa:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 8088dfc:	930e      	str	r3, [sp, #56]	; 0x38
 8088dfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8088e00:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 8088e02:	9311      	str	r3, [sp, #68]	; 0x44
 8088e04:	9312      	str	r3, [sp, #72]	; 0x48
 8088e06:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 8088e08:	2c00      	cmp	r4, #0
 8088e0a:	f000 80e9 	beq.w	8088fe0 <mbedtls_x509_crt_parse_der+0x238>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
 8088e0e:	ae1a      	add	r6, sp, #104	; 0x68
 8088e10:	f846 5d54 	str.w	r5, [r6, #-84]!
    end = p + len;
 8088e14:	eb08 0b05 	add.w	fp, r8, r5
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088e18:	2330      	movs	r3, #48	; 0x30
 8088e1a:	4632      	mov	r2, r6
 8088e1c:	4659      	mov	r1, fp
 8088e1e:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 8088e20:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088e24:	f7fa fcb8 	bl	8083798 <mbedtls_asn1_get_tag>
 8088e28:	b120      	cbz	r0, 8088e34 <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8088e2a:	4620      	mov	r0, r4
 8088e2c:	f7ff ff63 	bl	8088cf6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 8088e30:	4da3      	ldr	r5, [pc, #652]	; (80890c0 <mbedtls_x509_crt_parse_der+0x318>)
 8088e32:	e0e1      	b.n	8088ff8 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( len > (size_t) ( end - p ) )
 8088e34:	9d06      	ldr	r5, [sp, #24]
 8088e36:	9f05      	ldr	r7, [sp, #20]
 8088e38:	ebc5 0b0b 	rsb	fp, r5, fp
 8088e3c:	45bb      	cmp	fp, r7
 8088e3e:	f0c0 80ca 	bcc.w	8088fd6 <mbedtls_x509_crt_parse_der+0x22e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 8088e42:	443d      	add	r5, r7
 8088e44:	ebc8 0505 	rsb	r5, r8, r5
 8088e48:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
 8088e4a:	4629      	mov	r1, r5
 8088e4c:	2001      	movs	r0, #1
 8088e4e:	f00a f901 	bl	8093054 <calloc>
 8088e52:	4683      	mov	fp, r0
 8088e54:	9006      	str	r0, [sp, #24]
 8088e56:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 8088e58:	2800      	cmp	r0, #0
 8088e5a:	f000 80c3 	beq.w	8088fe4 <mbedtls_x509_crt_parse_der+0x23c>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8088e5e:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 8088e60:	1bed      	subs	r5, r5, r7
 8088e62:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8088e64:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
 8088e66:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8088e68:	f00a f919 	bl	809309e <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 8088e6c:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088e6e:	2330      	movs	r3, #48	; 0x30
 8088e70:	4632      	mov	r2, r6
 8088e72:	4639      	mov	r1, r7
 8088e74:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 8088e76:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088e78:	f7fa fc8e 	bl	8083798 <mbedtls_asn1_get_tag>
 8088e7c:	4680      	mov	r8, r0
 8088e7e:	b128      	cbz	r0, 8088e8c <mbedtls_x509_crt_parse_der+0xe4>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8088e80:	4620      	mov	r0, r4
 8088e82:	f7ff ff38 	bl	8088cf6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8088e86:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
 8088e8a:	e0b2      	b.n	8088ff2 <mbedtls_x509_crt_parse_der+0x24a>
    }

    end = p + len;
 8088e8c:	9b05      	ldr	r3, [sp, #20]
 8088e8e:	9e06      	ldr	r6, [sp, #24]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088e90:	aa17      	add	r2, sp, #92	; 0x5c
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
 8088e92:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 8088e94:	6963      	ldr	r3, [r4, #20]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088e96:	4631      	mov	r1, r6
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
    crt->tbs.len = end - crt->tbs.p;
 8088e98:	1af3      	subs	r3, r6, r3
 8088e9a:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088e9c:	a806      	add	r0, sp, #24
 8088e9e:	23a0      	movs	r3, #160	; 0xa0
 8088ea0:	f7fa fc7a 	bl	8083798 <mbedtls_asn1_get_tag>
 8088ea4:	4605      	mov	r5, r0
 8088ea6:	b128      	cbz	r0, 8088eb4 <mbedtls_x509_crt_parse_der+0x10c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8088ea8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8088eac:	d114      	bne.n	8088ed8 <mbedtls_x509_crt_parse_der+0x130>
        {
            *ver = 0;
 8088eae:	f8c4 8018 	str.w	r8, [r4, #24]
 8088eb2:	e014      	b.n	8088ede <mbedtls_x509_crt_parse_der+0x136>
        }

        return( ret );
    }

    end = *p + len;
 8088eb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088eb6:	9d06      	ldr	r5, [sp, #24]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8088eb8:	f104 0218 	add.w	r2, r4, #24
        }

        return( ret );
    }

    end = *p + len;
 8088ebc:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8088ebe:	4629      	mov	r1, r5
 8088ec0:	a806      	add	r0, sp, #24
 8088ec2:	f7fa fc96 	bl	80837f2 <mbedtls_asn1_get_int>
 8088ec6:	b110      	cbz	r0, 8088ece <mbedtls_x509_crt_parse_der+0x126>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 8088ec8:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
 8088ecc:	e004      	b.n	8088ed8 <mbedtls_x509_crt_parse_der+0x130>

    if( *p != end )
 8088ece:	9b06      	ldr	r3, [sp, #24]
 8088ed0:	429d      	cmp	r5, r3
 8088ed2:	d004      	beq.n	8088ede <mbedtls_x509_crt_parse_der+0x136>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8088ed4:	4d7b      	ldr	r5, [pc, #492]	; (80890c4 <mbedtls_x509_crt_parse_der+0x31c>)
 8088ed6:	e0d6      	b.n	8089086 <mbedtls_x509_crt_parse_der+0x2de>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 8088ed8:	2d00      	cmp	r5, #0
 8088eda:	f040 80d4 	bne.w	8089086 <mbedtls_x509_crt_parse_der+0x2de>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 8088ede:	f104 021c 	add.w	r2, r4, #28
 8088ee2:	4631      	mov	r1, r6
 8088ee4:	a806      	add	r0, sp, #24
 8088ee6:	f7fd fbc5 	bl	8086674 <mbedtls_x509_get_serial>
 8088eea:	4605      	mov	r5, r0
 8088eec:	2800      	cmp	r0, #0
 8088eee:	f040 80ca 	bne.w	8089086 <mbedtls_x509_crt_parse_der+0x2de>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 8088ef2:	f104 0828 	add.w	r8, r4, #40	; 0x28
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 8088ef6:	ab0b      	add	r3, sp, #44	; 0x2c
 8088ef8:	4642      	mov	r2, r8
 8088efa:	4631      	mov	r1, r6
 8088efc:	a806      	add	r0, sp, #24
 8088efe:	f7fd fbe1 	bl	80866c4 <mbedtls_x509_get_alg>
 8088f02:	4605      	mov	r5, r0
 8088f04:	2800      	cmp	r0, #0
 8088f06:	f040 80be 	bne.w	8089086 <mbedtls_x509_crt_parse_der+0x2de>
 8088f0a:	e086      	b.n	808901a <mbedtls_x509_crt_parse_der+0x272>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
 8088f0c:	3301      	adds	r3, #1
 8088f0e:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 8088f10:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 8088f14:	9300      	str	r3, [sp, #0]
 8088f16:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8088f1a:	f204 1329 	addw	r3, r4, #297	; 0x129
 8088f1e:	a90b      	add	r1, sp, #44	; 0x2c
 8088f20:	4640      	mov	r0, r8
 8088f22:	f7fd fd23 	bl	808696c <mbedtls_x509_get_sig_alg>
 8088f26:	4605      	mov	r5, r0
 8088f28:	2800      	cmp	r0, #0
 8088f2a:	f040 80ac 	bne.w	8089086 <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 8088f2e:	9b06      	ldr	r3, [sp, #24]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088f30:	aa05      	add	r2, sp, #20
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 8088f32:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088f34:	4631      	mov	r1, r6
 8088f36:	2330      	movs	r3, #48	; 0x30
 8088f38:	a806      	add	r0, sp, #24
 8088f3a:	f7fa fc2d 	bl	8083798 <mbedtls_asn1_get_tag>
 8088f3e:	4605      	mov	r5, r0
 8088f40:	2800      	cmp	r0, #0
 8088f42:	d151      	bne.n	8088fe8 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 8088f44:	9b05      	ldr	r3, [sp, #20]
 8088f46:	9906      	ldr	r1, [sp, #24]
 8088f48:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8088f4c:	4419      	add	r1, r3
 8088f4e:	a806      	add	r0, sp, #24
 8088f50:	f7fd fbc0 	bl	80866d4 <mbedtls_x509_get_name>
 8088f54:	4605      	mov	r5, r0
 8088f56:	2800      	cmp	r0, #0
 8088f58:	f040 8095 	bne.w	8089086 <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8088f5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8088f5e:	9b06      	ldr	r3, [sp, #24]
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088f60:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8088f62:	1a9b      	subs	r3, r3, r2
 8088f64:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088f66:	aa17      	add	r2, sp, #92	; 0x5c
 8088f68:	2330      	movs	r3, #48	; 0x30
 8088f6a:	a806      	add	r0, sp, #24
 8088f6c:	f7fa fc14 	bl	8083798 <mbedtls_asn1_get_tag>
 8088f70:	2800      	cmp	r0, #0
 8088f72:	d05b      	beq.n	808902c <mbedtls_x509_crt_parse_der+0x284>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8088f74:	f5a0 5510 	sub.w	r5, r0, #9216	; 0x2400
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 8088f78:	2d00      	cmp	r5, #0
 8088f7a:	f040 8084 	bne.w	8089086 <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 8088f7e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8088f82:	f85b 3d50 	ldr.w	r3, [fp, #-80]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088f86:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 8088f88:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088f8a:	4631      	mov	r1, r6
 8088f8c:	2330      	movs	r3, #48	; 0x30
 8088f8e:	4658      	mov	r0, fp
 8088f90:	f7fa fc02 	bl	8083798 <mbedtls_asn1_get_tag>
 8088f94:	4605      	mov	r5, r0
 8088f96:	bb38      	cbnz	r0, 8088fe8 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 8088f98:	9b05      	ldr	r3, [sp, #20]
 8088f9a:	2b00      	cmp	r3, #0
 8088f9c:	d15f      	bne.n	808905e <mbedtls_x509_crt_parse_der+0x2b6>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 8088f9e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8088fa0:	9b06      	ldr	r3, [sp, #24]

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8088fa2:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 8088fa4:	1a9b      	subs	r3, r3, r2
 8088fa6:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8088fa8:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8088fac:	4658      	mov	r0, fp
 8088fae:	f7fe f833 	bl	8087018 <mbedtls_pk_parse_subpubkey>
 8088fb2:	4605      	mov	r5, r0
 8088fb4:	2800      	cmp	r0, #0
 8088fb6:	d166      	bne.n	8089086 <mbedtls_x509_crt_parse_der+0x2de>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 8088fb8:	69a3      	ldr	r3, [r4, #24]
 8088fba:	3b02      	subs	r3, #2
 8088fbc:	2b01      	cmp	r3, #1
 8088fbe:	d958      	bls.n	8089072 <mbedtls_x509_crt_parse_der+0x2ca>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 8088fc0:	69a3      	ldr	r3, [r4, #24]
 8088fc2:	3b02      	subs	r3, #2
 8088fc4:	2b01      	cmp	r3, #1
 8088fc6:	d962      	bls.n	808908e <mbedtls_x509_crt_parse_der+0x2e6>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 8088fc8:	69a3      	ldr	r3, [r4, #24]
 8088fca:	2b03      	cmp	r3, #3
 8088fcc:	d06a      	beq.n	80890a4 <mbedtls_x509_crt_parse_der+0x2fc>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
 8088fce:	9b06      	ldr	r3, [sp, #24]
 8088fd0:	429e      	cmp	r6, r3
 8088fd2:	f000 811e 	beq.w	8089212 <mbedtls_x509_crt_parse_der+0x46a>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
 8088fd6:	4620      	mov	r0, r4
 8088fd8:	f7ff fe8d 	bl	8088cf6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8088fdc:	4d3a      	ldr	r5, [pc, #232]	; (80890c8 <mbedtls_x509_crt_parse_der+0x320>)
 8088fde:	e00b      	b.n	8088ff8 <mbedtls_x509_crt_parse_der+0x250>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088fe0:	4d3a      	ldr	r5, [pc, #232]	; (80890cc <mbedtls_x509_crt_parse_der+0x324>)
 8088fe2:	e009      	b.n	8088ff8 <mbedtls_x509_crt_parse_der+0x250>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8088fe4:	4d3a      	ldr	r5, [pc, #232]	; (80890d0 <mbedtls_x509_crt_parse_der+0x328>)
 8088fe6:	e007      	b.n	8088ff8 <mbedtls_x509_crt_parse_der+0x250>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8088fe8:	4620      	mov	r0, r4
 8088fea:	f7ff fe84 	bl	8088cf6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8088fee:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 8088ff2:	2d00      	cmp	r5, #0
 8088ff4:	f000 8204 	beq.w	8089400 <mbedtls_x509_crt_parse_der+0x658>
    {
        if( prev )
 8088ff8:	f1b9 0f00 	cmp.w	r9, #0
 8088ffc:	d002      	beq.n	8089004 <mbedtls_x509_crt_parse_der+0x25c>
            prev->next = NULL;
 8088ffe:	2300      	movs	r3, #0
 8089000:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
 8089004:	4554      	cmp	r4, sl
 8089006:	f000 81fb 	beq.w	8089400 <mbedtls_x509_crt_parse_der+0x658>
            mbedtls_free( crt );
 808900a:	4620      	mov	r0, r4
 808900c:	f007 fd62 	bl	8090ad4 <free>
 8089010:	e1f6      	b.n	8089400 <mbedtls_x509_crt_parse_der+0x658>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8089012:	4d2e      	ldr	r5, [pc, #184]	; (80890cc <mbedtls_x509_crt_parse_der+0x324>)
 8089014:	e1f4      	b.n	8089400 <mbedtls_x509_crt_parse_der+0x658>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8089016:	4d2e      	ldr	r5, [pc, #184]	; (80890d0 <mbedtls_x509_crt_parse_der+0x328>)
 8089018:	e1f2      	b.n	8089400 <mbedtls_x509_crt_parse_der+0x658>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
 808901a:	69a3      	ldr	r3, [r4, #24]
 808901c:	2b02      	cmp	r3, #2
 808901e:	f67f af75 	bls.w	8088f0c <mbedtls_x509_crt_parse_der+0x164>
    {
        mbedtls_x509_crt_free( crt );
 8089022:	4620      	mov	r0, r4
 8089024:	f7ff fe67 	bl	8088cf6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 8089028:	4d2a      	ldr	r5, [pc, #168]	; (80890d4 <mbedtls_x509_crt_parse_der+0x32c>)
 808902a:	e7e5      	b.n	8088ff8 <mbedtls_x509_crt_parse_der+0x250>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 808902c:	9a06      	ldr	r2, [sp, #24]
 808902e:	9b17      	ldr	r3, [sp, #92]	; 0x5c

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8089030:	a806      	add	r0, sp, #24

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 8089032:	eb02 0b03 	add.w	fp, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8089036:	4659      	mov	r1, fp
 8089038:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 808903c:	f7fd fbc2 	bl	80867c4 <mbedtls_x509_get_time>
 8089040:	b958      	cbnz	r0, 808905a <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8089042:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 8089046:	4659      	mov	r1, fp
 8089048:	a806      	add	r0, sp, #24
 808904a:	f7fd fbbb 	bl	80867c4 <mbedtls_x509_get_time>
 808904e:	b920      	cbnz	r0, 808905a <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( *p != end )
 8089050:	9b06      	ldr	r3, [sp, #24]
 8089052:	459b      	cmp	fp, r3
 8089054:	d093      	beq.n	8088f7e <mbedtls_x509_crt_parse_der+0x1d6>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8089056:	4d20      	ldr	r5, [pc, #128]	; (80890d8 <mbedtls_x509_crt_parse_der+0x330>)
 8089058:	e015      	b.n	8089086 <mbedtls_x509_crt_parse_der+0x2de>
    end = *p + len;

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 808905a:	4605      	mov	r5, r0
 808905c:	e78c      	b.n	8088f78 <mbedtls_x509_crt_parse_der+0x1d0>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 808905e:	9906      	ldr	r1, [sp, #24]
 8089060:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8089064:	4419      	add	r1, r3
 8089066:	4658      	mov	r0, fp
 8089068:	f7fd fb34 	bl	80866d4 <mbedtls_x509_get_name>
 808906c:	4605      	mov	r5, r0
 808906e:	b950      	cbnz	r0, 8089086 <mbedtls_x509_crt_parse_der+0x2de>
 8089070:	e795      	b.n	8088f9e <mbedtls_x509_crt_parse_der+0x1f6>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 8089072:	2301      	movs	r3, #1
 8089074:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 8089078:	4631      	mov	r1, r6
 808907a:	4658      	mov	r0, fp
 808907c:	f7fe ff15 	bl	8087eaa <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 8089080:	4605      	mov	r5, r0
 8089082:	2800      	cmp	r0, #0
 8089084:	d09c      	beq.n	8088fc0 <mbedtls_x509_crt_parse_der+0x218>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8089086:	4620      	mov	r0, r4
 8089088:	f7ff fe35 	bl	8088cf6 <mbedtls_x509_crt_free>
 808908c:	e7b1      	b.n	8088ff2 <mbedtls_x509_crt_parse_der+0x24a>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 808908e:	2302      	movs	r3, #2
 8089090:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 8089094:	4631      	mov	r1, r6
 8089096:	4658      	mov	r0, fp
 8089098:	f7fe ff07 	bl	8087eaa <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 808909c:	4605      	mov	r5, r0
 808909e:	2800      	cmp	r0, #0
 80890a0:	d092      	beq.n	8088fc8 <mbedtls_x509_crt_parse_der+0x220>
 80890a2:	e7f0      	b.n	8089086 <mbedtls_x509_crt_parse_der+0x2de>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 80890a4:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 80890a8:	4631      	mov	r1, r6
 80890aa:	4658      	mov	r0, fp
 80890ac:	f7fd fc7e 	bl	80869ac <mbedtls_x509_get_ext>
 80890b0:	b908      	cbnz	r0, 80890b6 <mbedtls_x509_crt_parse_der+0x30e>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80890b2:	4680      	mov	r8, r0
 80890b4:	e05a      	b.n	808916c <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80890b6:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80890ba:	f040 80a5 	bne.w	8089208 <mbedtls_x509_crt_parse_der+0x460>
 80890be:	e786      	b.n	8088fce <mbedtls_x509_crt_parse_der+0x226>
 80890c0:	ffffde80 	.word	0xffffde80
 80890c4:	ffffdd9a 	.word	0xffffdd9a
 80890c8:	ffffde1a 	.word	0xffffde1a
 80890cc:	ffffd800 	.word	0xffffd800
 80890d0:	ffffd780 	.word	0xffffd780
 80890d4:	ffffda80 	.word	0xffffda80
 80890d8:	ffffdb9a 	.word	0xffffdb9a
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80890dc:	2330      	movs	r3, #48	; 0x30
 80890de:	aa07      	add	r2, sp, #28
 80890e0:	4631      	mov	r1, r6
 80890e2:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80890e4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80890e8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 80890ec:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 80890f0:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 80890f4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80890f8:	f7fa fb4e 	bl	8083798 <mbedtls_asn1_get_tag>
 80890fc:	2800      	cmp	r0, #0
 80890fe:	f040 80bd 	bne.w	808927c <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 8089102:	9b06      	ldr	r3, [sp, #24]
 8089104:	9d07      	ldr	r5, [sp, #28]

        /* Get extension ID */
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8089106:	aa15      	add	r2, sp, #84	; 0x54

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 8089108:	441d      	add	r5, r3

        /* Get extension ID */
        extn_oid.tag = **p;
 808910a:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 808910c:	4631      	mov	r1, r6
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;

        /* Get extension ID */
        extn_oid.tag = **p;
 808910e:	9314      	str	r3, [sp, #80]	; 0x50

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8089110:	a806      	add	r0, sp, #24
 8089112:	2306      	movs	r3, #6
 8089114:	f7fa fb40 	bl	8083798 <mbedtls_asn1_get_tag>
 8089118:	2800      	cmp	r0, #0
 808911a:	f040 80af 	bne.w	808927c <mbedtls_x509_crt_parse_der+0x4d4>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 808911e:	9a06      	ldr	r2, [sp, #24]
        *p += extn_oid.len;
 8089120:	9b15      	ldr	r3, [sp, #84]	; 0x54
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 8089122:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
 8089124:	4413      	add	r3, r2
 8089126:	9306      	str	r3, [sp, #24]

        if( ( end - *p ) < 1 )
 8089128:	1af3      	subs	r3, r6, r3
 808912a:	2b00      	cmp	r3, #0
 808912c:	dd51      	ble.n	80891d2 <mbedtls_x509_crt_parse_der+0x42a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 808912e:	aa08      	add	r2, sp, #32
 8089130:	4629      	mov	r1, r5
 8089132:	a806      	add	r0, sp, #24
 8089134:	f7fa fb44 	bl	80837c0 <mbedtls_asn1_get_bool>
 8089138:	b9e0      	cbnz	r0, 8089174 <mbedtls_x509_crt_parse_der+0x3cc>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 808913a:	2304      	movs	r3, #4
 808913c:	aa07      	add	r2, sp, #28
 808913e:	4629      	mov	r1, r5
 8089140:	a806      	add	r0, sp, #24
 8089142:	f7fa fb29 	bl	8083798 <mbedtls_asn1_get_tag>
 8089146:	2800      	cmp	r0, #0
 8089148:	f040 8098 	bne.w	808927c <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
 808914c:	9b07      	ldr	r3, [sp, #28]
 808914e:	9a06      	ldr	r2, [sp, #24]
 8089150:	4413      	add	r3, r2
 8089152:	429d      	cmp	r5, r3
 8089154:	f040 814a 	bne.w	80893ec <mbedtls_x509_crt_parse_der+0x644>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 8089158:	a909      	add	r1, sp, #36	; 0x24
 808915a:	a814      	add	r0, sp, #80	; 0x50
 808915c:	f7fb ff60 	bl	8085020 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
 8089160:	b160      	cbz	r0, 808917c <mbedtls_x509_crt_parse_der+0x3d4>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 8089162:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 8089164:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 8089166:	2b00      	cmp	r3, #0
 8089168:	f040 8142 	bne.w	80893f0 <mbedtls_x509_crt_parse_der+0x648>
            return( 0 );

        return( ret );
    }

    while( *p < end )
 808916c:	9b06      	ldr	r3, [sp, #24]
 808916e:	429e      	cmp	r6, r3
 8089170:	d8b4      	bhi.n	80890dc <mbedtls_x509_crt_parse_der+0x334>
 8089172:	e030      	b.n	80891d6 <mbedtls_x509_crt_parse_der+0x42e>
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8089174:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8089178:	d0df      	beq.n	808913a <mbedtls_x509_crt_parse_der+0x392>
 808917a:	e07f      	b.n	808927c <mbedtls_x509_crt_parse_der+0x4d4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 808917c:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8089180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8089182:	ea12 0003 	ands.w	r0, r2, r3
 8089186:	f040 8135 	bne.w	80893f4 <mbedtls_x509_crt_parse_der+0x64c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 808918a:	431a      	orrs	r2, r3

        switch( ext_type )
 808918c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 8089190:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8

        switch( ext_type )
 8089194:	d023      	beq.n	80891de <mbedtls_x509_crt_parse_der+0x436>
 8089196:	dc74      	bgt.n	8089282 <mbedtls_x509_crt_parse_der+0x4da>
 8089198:	2b04      	cmp	r3, #4
 808919a:	f000 80a9 	beq.w	80892f0 <mbedtls_x509_crt_parse_der+0x548>
 808919e:	2b20      	cmp	r3, #32
 80891a0:	f040 812a 	bne.w	80893f8 <mbedtls_x509_crt_parse_der+0x650>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80891a4:	2330      	movs	r3, #48	; 0x30
 80891a6:	aa0a      	add	r2, sp, #40	; 0x28
 80891a8:	4629      	mov	r1, r5
 80891aa:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80891ac:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80891b0:	f7fa faf2 	bl	8083798 <mbedtls_asn1_get_tag>
 80891b4:	bb20      	cbnz	r0, 8089200 <mbedtls_x509_crt_parse_der+0x458>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
 80891b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80891b8:	9a06      	ldr	r2, [sp, #24]
 80891ba:	4413      	add	r3, r2
 80891bc:	429d      	cmp	r5, r3
 80891be:	f040 8115 	bne.w	80893ec <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
 80891c2:	9a06      	ldr	r2, [sp, #24]
 80891c4:	4295      	cmp	r5, r2
 80891c6:	f240 80f3 	bls.w	80893b0 <mbedtls_x509_crt_parse_der+0x608>
    {
        if( ( end - *p ) < 1 )
 80891ca:	1aab      	subs	r3, r5, r2
 80891cc:	2b00      	cmp	r3, #0
 80891ce:	f300 80be 	bgt.w	808934e <mbedtls_x509_crt_parse_der+0x5a6>
        extn_oid.p = *p;
        *p += extn_oid.len;

        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80891d2:	488d      	ldr	r0, [pc, #564]	; (8089408 <mbedtls_x509_crt_parse_der+0x660>)
 80891d4:	e018      	b.n	8089208 <mbedtls_x509_crt_parse_der+0x460>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
 80891d6:	f43f aefa 	beq.w	8088fce <mbedtls_x509_crt_parse_der+0x226>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80891da:	4d8c      	ldr	r5, [pc, #560]	; (808940c <mbedtls_x509_crt_parse_der+0x664>)
 80891dc:	e753      	b.n	8089086 <mbedtls_x509_crt_parse_der+0x2de>

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 80891de:	f504 7380 	add.w	r3, r4, #256	; 0x100
 80891e2:	9303      	str	r3, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 80891e4:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 80891e8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80891ec:	2330      	movs	r3, #48	; 0x30
 80891ee:	aa17      	add	r2, sp, #92	; 0x5c
 80891f0:	4629      	mov	r1, r5
 80891f2:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 80891f4:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80891f8:	f7fa face 	bl	8083798 <mbedtls_asn1_get_tag>
 80891fc:	2800      	cmp	r0, #0
 80891fe:	d048      	beq.n	8089292 <mbedtls_x509_crt_parse_der+0x4ea>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8089200:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8089204:	2800      	cmp	r0, #0
 8089206:	d0b1      	beq.n	808916c <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8089208:	4605      	mov	r5, r0
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
 808920a:	2800      	cmp	r0, #0
 808920c:	f43f aedf 	beq.w	8088fce <mbedtls_x509_crt_parse_der+0x226>
 8089210:	e739      	b.n	8089086 <mbedtls_x509_crt_parse_der+0x2de>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 8089212:	ab0e      	add	r3, sp, #56	; 0x38
 8089214:	aa11      	add	r2, sp, #68	; 0x44
 8089216:	4639      	mov	r1, r7
 8089218:	a806      	add	r0, sp, #24
 808921a:	f7fd fa53 	bl	80866c4 <mbedtls_x509_get_alg>
 808921e:	4605      	mov	r5, r0
 8089220:	2800      	cmp	r0, #0
 8089222:	f47f af30 	bne.w	8089086 <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 8089226:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8089228:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808922a:	429a      	cmp	r2, r3
 808922c:	d10f      	bne.n	808924e <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 808922e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8089230:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8089232:	f009 ff25 	bl	8093080 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 8089236:	4605      	mov	r5, r0
 8089238:	b948      	cbnz	r0, 808924e <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
 808923a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 808923c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808923e:	429a      	cmp	r2, r3
 8089240:	d105      	bne.n	808924e <mbedtls_x509_crt_parse_der+0x4a6>
        sig_params1.len != sig_params2.len ||
 8089242:	b14a      	cbz	r2, 8089258 <mbedtls_x509_crt_parse_der+0x4b0>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 8089244:	9910      	ldr	r1, [sp, #64]	; 0x40
 8089246:	980d      	ldr	r0, [sp, #52]	; 0x34
 8089248:	f009 ff1a 	bl	8093080 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
 808924c:	b120      	cbz	r0, 8089258 <mbedtls_x509_crt_parse_der+0x4b0>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
 808924e:	4620      	mov	r0, r4
 8089250:	f7ff fd51 	bl	8088cf6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 8089254:	4d6e      	ldr	r5, [pc, #440]	; (8089410 <mbedtls_x509_crt_parse_der+0x668>)
 8089256:	e6cf      	b.n	8088ff8 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 8089258:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 808925c:	4639      	mov	r1, r7
 808925e:	a806      	add	r0, sp, #24
 8089260:	f7fd fb66 	bl	8086930 <mbedtls_x509_get_sig>
 8089264:	4606      	mov	r6, r0
 8089266:	b120      	cbz	r0, 8089272 <mbedtls_x509_crt_parse_der+0x4ca>
    {
        mbedtls_x509_crt_free( crt );
 8089268:	4620      	mov	r0, r4
 808926a:	f7ff fd44 	bl	8088cf6 <mbedtls_x509_crt_free>
 808926e:	4635      	mov	r5, r6
 8089270:	e6bf      	b.n	8088ff2 <mbedtls_x509_crt_parse_der+0x24a>
        return( ret );
    }

    if( p != end )
 8089272:	9b06      	ldr	r3, [sp, #24]
 8089274:	429f      	cmp	r7, r3
 8089276:	f000 80c3 	beq.w	8089400 <mbedtls_x509_crt_parse_der+0x658>
 808927a:	e6ac      	b.n	8088fd6 <mbedtls_x509_crt_parse_der+0x22e>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 808927c:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 8089280:	e7c2      	b.n	8089208 <mbedtls_x509_crt_parse_der+0x460>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
 8089282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8089286:	d053      	beq.n	8089330 <mbedtls_x509_crt_parse_der+0x588>
 8089288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 808928c:	f000 8097 	beq.w	80893be <mbedtls_x509_crt_parse_der+0x616>
 8089290:	e0b2      	b.n	80893f8 <mbedtls_x509_crt_parse_der+0x650>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
 8089292:	9b06      	ldr	r3, [sp, #24]
 8089294:	429d      	cmp	r5, r3
 8089296:	f43f af69 	beq.w	808916c <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 808929a:	465a      	mov	r2, fp
 808929c:	4629      	mov	r1, r5
 808929e:	a806      	add	r0, sp, #24
 80892a0:	f7fa fa8e 	bl	80837c0 <mbedtls_asn1_get_bool>
 80892a4:	b178      	cbz	r0, 80892c6 <mbedtls_x509_crt_parse_der+0x51e>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80892a6:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80892aa:	d1a9      	bne.n	8089200 <mbedtls_x509_crt_parse_der+0x458>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 80892ac:	465a      	mov	r2, fp
 80892ae:	4629      	mov	r1, r5
 80892b0:	a806      	add	r0, sp, #24
 80892b2:	f7fa fa9e 	bl	80837f2 <mbedtls_asn1_get_int>

        if( ret != 0 )
 80892b6:	2800      	cmp	r0, #0
 80892b8:	d1a2      	bne.n	8089200 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
 80892ba:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80892be:	b113      	cbz	r3, 80892c6 <mbedtls_x509_crt_parse_der+0x51e>
            *ca_istrue = 1;
 80892c0:	2301      	movs	r3, #1
 80892c2:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
 80892c6:	9b06      	ldr	r3, [sp, #24]
 80892c8:	429d      	cmp	r5, r3
 80892ca:	f43f af4f 	beq.w	808916c <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 80892ce:	9a03      	ldr	r2, [sp, #12]
 80892d0:	4629      	mov	r1, r5
 80892d2:	a806      	add	r0, sp, #24
 80892d4:	f7fa fa8d 	bl	80837f2 <mbedtls_asn1_get_int>
 80892d8:	2800      	cmp	r0, #0
 80892da:	d191      	bne.n	8089200 <mbedtls_x509_crt_parse_der+0x458>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
 80892dc:	9b06      	ldr	r3, [sp, #24]
 80892de:	429d      	cmp	r5, r3
 80892e0:	f040 8084 	bne.w	80893ec <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 80892e4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80892e8:	3301      	adds	r3, #1
 80892ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80892ee:	e73d      	b.n	808916c <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80892f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80892f2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 80892f6:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80892f8:	aa17      	add	r2, sp, #92	; 0x5c
 80892fa:	4629      	mov	r1, r5
 80892fc:	a806      	add	r0, sp, #24
 80892fe:	f7fa faaf 	bl	8083860 <mbedtls_asn1_get_bitstring>
 8089302:	2800      	cmp	r0, #0
 8089304:	d165      	bne.n	80893d2 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
 8089306:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8089308:	2a00      	cmp	r2, #0
 808930a:	d077      	beq.n	80893fc <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 808930c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8089310:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8089312:	5c2b      	ldrb	r3, [r5, r0]
 8089314:	00c1      	lsls	r1, r0, #3
 8089316:	408b      	lsls	r3, r1
 8089318:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 808931c:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 808931e:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8089320:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8089322:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8089326:	f43f af21 	beq.w	808916c <mbedtls_x509_crt_parse_der+0x3c4>
 808932a:	2804      	cmp	r0, #4
 808932c:	d1f1      	bne.n	8089312 <mbedtls_x509_crt_parse_der+0x56a>
 808932e:	e71d      	b.n	808916c <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 8089330:	2306      	movs	r3, #6
 8089332:	f504 7284 	add.w	r2, r4, #264	; 0x108
 8089336:	4629      	mov	r1, r5
 8089338:	a806      	add	r0, sp, #24
 808933a:	f7fa faca 	bl	80838d2 <mbedtls_asn1_get_sequence_of>
 808933e:	2800      	cmp	r0, #0
 8089340:	d147      	bne.n	80893d2 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 8089342:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8089346:	2b00      	cmp	r3, #0
 8089348:	f47f af10 	bne.w	808916c <mbedtls_x509_crt_parse_der+0x3c4>
 808934c:	e056      	b.n	80893fc <mbedtls_x509_crt_parse_der+0x654>
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 808934e:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8089352:	4629      	mov	r1, r5
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
 8089354:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8089356:	a806      	add	r0, sp, #24
 8089358:	aa17      	add	r2, sp, #92	; 0x5c
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 808935a:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 808935c:	f7fa f9ca 	bl	80836f4 <mbedtls_asn1_get_len>
 8089360:	9b03      	ldr	r3, [sp, #12]
 8089362:	2800      	cmp	r0, #0
 8089364:	f47f af4c 	bne.w	8089200 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 8089368:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 808936c:	2a80      	cmp	r2, #128	; 0x80
 808936e:	d13f      	bne.n	80893f0 <mbedtls_x509_crt_parse_der+0x648>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8089370:	2b82      	cmp	r3, #130	; 0x82
 8089372:	d002      	beq.n	808937a <mbedtls_x509_crt_parse_der+0x5d2>
        {
            *p += tag_len;
 8089374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8089376:	9a06      	ldr	r2, [sp, #24]
 8089378:	e017      	b.n	80893aa <mbedtls_x509_crt_parse_der+0x602>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 808937a:	f8db 3008 	ldr.w	r3, [fp, #8]
 808937e:	b15b      	cbz	r3, 8089398 <mbedtls_x509_crt_parse_der+0x5f0>
        {
            if( cur->next != NULL )
 8089380:	f8db 300c 	ldr.w	r3, [fp, #12]
 8089384:	2b00      	cmp	r3, #0
 8089386:	d135      	bne.n	80893f4 <mbedtls_x509_crt_parse_der+0x64c>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8089388:	2110      	movs	r1, #16
 808938a:	2001      	movs	r0, #1
 808938c:	f009 fe62 	bl	8093054 <calloc>
 8089390:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
 8089394:	b188      	cbz	r0, 80893ba <mbedtls_x509_crt_parse_der+0x612>
 8089396:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
 8089398:	2382      	movs	r3, #130	; 0x82
 808939a:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
 808939e:	9a06      	ldr	r2, [sp, #24]
 80893a0:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
 80893a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80893a6:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
 80893aa:	4413      	add	r3, r2
 80893ac:	9306      	str	r3, [sp, #24]
 80893ae:	e708      	b.n	80891c2 <mbedtls_x509_crt_parse_der+0x41a>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 80893b0:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
 80893b4:	f43f aeda 	beq.w	808916c <mbedtls_x509_crt_parse_der+0x3c4>
 80893b8:	e018      	b.n	80893ec <mbedtls_x509_crt_parse_der+0x644>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 80893ba:	4816      	ldr	r0, [pc, #88]	; (8089414 <mbedtls_x509_crt_parse_der+0x66c>)
 80893bc:	e724      	b.n	8089208 <mbedtls_x509_crt_parse_der+0x460>
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80893be:	9017      	str	r0, [sp, #92]	; 0x5c
 80893c0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 80893c4:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80893c6:	aa17      	add	r2, sp, #92	; 0x5c
 80893c8:	4629      	mov	r1, r5
 80893ca:	a806      	add	r0, sp, #24
 80893cc:	f7fa fa48 	bl	8083860 <mbedtls_asn1_get_bitstring>
 80893d0:	b120      	cbz	r0, 80893dc <mbedtls_x509_crt_parse_der+0x634>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 80893d2:	f5b0 5014 	subs.w	r0, r0, #9472	; 0x2500
 80893d6:	f43f aec9 	beq.w	808916c <mbedtls_x509_crt_parse_der+0x3c4>
 80893da:	e715      	b.n	8089208 <mbedtls_x509_crt_parse_der+0x460>
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
 80893dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80893de:	2b01      	cmp	r3, #1
 80893e0:	d10c      	bne.n	80893fc <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 80893e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80893e4:	781b      	ldrb	r3, [r3, #0]
 80893e6:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 80893ea:	e6bf      	b.n	808916c <mbedtls_x509_crt_parse_der+0x3c4>

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80893ec:	4807      	ldr	r0, [pc, #28]	; (808940c <mbedtls_x509_crt_parse_der+0x664>)
 80893ee:	e70b      	b.n	8089208 <mbedtls_x509_crt_parse_der+0x460>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80893f0:	4809      	ldr	r0, [pc, #36]	; (8089418 <mbedtls_x509_crt_parse_der+0x670>)
 80893f2:	e709      	b.n	8089208 <mbedtls_x509_crt_parse_der+0x460>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 80893f4:	4809      	ldr	r0, [pc, #36]	; (808941c <mbedtls_x509_crt_parse_der+0x674>)
 80893f6:	e707      	b.n	8089208 <mbedtls_x509_crt_parse_der+0x460>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 80893f8:	4809      	ldr	r0, [pc, #36]	; (8089420 <mbedtls_x509_crt_parse_der+0x678>)
 80893fa:	e705      	b.n	8089208 <mbedtls_x509_crt_parse_der+0x460>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80893fc:	4809      	ldr	r0, [pc, #36]	; (8089424 <mbedtls_x509_crt_parse_der+0x67c>)
 80893fe:	e703      	b.n	8089208 <mbedtls_x509_crt_parse_der+0x460>

        return( ret );
    }

    return( 0 );
}
 8089400:	4628      	mov	r0, r5
 8089402:	b01b      	add	sp, #108	; 0x6c
 8089404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089408:	ffffdaa0 	.word	0xffffdaa0
 808940c:	ffffda9a 	.word	0xffffda9a
 8089410:	ffffd980 	.word	0xffffd980
 8089414:	ffffda96 	.word	0xffffda96
 8089418:	ffffda9e 	.word	0xffffda9e
 808941c:	ffffdb00 	.word	0xffffdb00
 8089420:	ffffdf80 	.word	0xffffdf80
 8089424:	ffffda9c 	.word	0xffffda9c

08089428 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
 8089428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808942c:	460d      	mov	r5, r1
 808942e:	b088      	sub	sp, #32
 8089430:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
 8089432:	4681      	mov	r9, r0
 8089434:	2800      	cmp	r0, #0
 8089436:	d054      	beq.n	80894e2 <mbedtls_x509_crt_parse+0xba>
 8089438:	2900      	cmp	r1, #0
 808943a:	d052      	beq.n	80894e2 <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 808943c:	2a00      	cmp	r2, #0
 808943e:	d054      	beq.n	80894ea <mbedtls_x509_crt_parse+0xc2>
 8089440:	188b      	adds	r3, r1, r2
 8089442:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8089446:	2c00      	cmp	r4, #0
 8089448:	d14f      	bne.n	80894ea <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 808944a:	492c      	ldr	r1, [pc, #176]	; (80894fc <mbedtls_x509_crt_parse+0xd4>)
 808944c:	4628      	mov	r0, r5
 808944e:	f009 fe74 	bl	809313a <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8089452:	2800      	cmp	r0, #0
 8089454:	d049      	beq.n	80894ea <mbedtls_x509_crt_parse+0xc2>
 8089456:	46a0      	mov	r8, r4
 8089458:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
 808945a:	2f01      	cmp	r7, #1
 808945c:	d938      	bls.n	80894d0 <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
 808945e:	a805      	add	r0, sp, #20
 8089460:	f005 fc66 	bl	808ed30 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );
 8089464:	ab04      	add	r3, sp, #16
 8089466:	9302      	str	r3, [sp, #8]
 8089468:	2300      	movs	r3, #0
 808946a:	9301      	str	r3, [sp, #4]
 808946c:	9300      	str	r3, [sp, #0]
 808946e:	4a24      	ldr	r2, [pc, #144]	; (8089500 <mbedtls_x509_crt_parse+0xd8>)
 8089470:	462b      	mov	r3, r5
 8089472:	4922      	ldr	r1, [pc, #136]	; (80894fc <mbedtls_x509_crt_parse+0xd4>)
 8089474:	a805      	add	r0, sp, #20
 8089476:	f005 fc61 	bl	808ed3c <mbedtls_pem_read_buffer>

            if( ret == 0 )
 808947a:	4606      	mov	r6, r0
 808947c:	b968      	cbnz	r0, 808949a <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 808947e:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8089480:	9a06      	ldr	r2, [sp, #24]
 8089482:	9905      	ldr	r1, [sp, #20]
 8089484:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 8089486:	1aff      	subs	r7, r7, r3
                buf += use_len;
 8089488:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 808948a:	f7ff fc8d 	bl	8088da8 <mbedtls_x509_crt_parse_der>
 808948e:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
 8089490:	a805      	add	r0, sp, #20
 8089492:	f005 fce1 	bl	808ee58 <mbedtls_pem_free>

            if( ret != 0 )
 8089496:	b96e      	cbnz	r6, 80894b4 <mbedtls_x509_crt_parse+0x8c>
 8089498:	e015      	b.n	80894c6 <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 808949a:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 808949e:	d015      	beq.n	80894cc <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80894a0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80894a4:	d014      	beq.n	80894d0 <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
 80894a6:	a805      	add	r0, sp, #20
 80894a8:	f005 fcd6 	bl	808ee58 <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
 80894ac:	9b04      	ldr	r3, [sp, #16]
 80894ae:	1aff      	subs	r7, r7, r3
                buf += use_len;
 80894b0:	441d      	add	r5, r3
 80894b2:	e002      	b.n	80894ba <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 80894b4:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
 80894b8:	d008      	beq.n	80894cc <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
 80894ba:	f1b8 0f00 	cmp.w	r8, #0
 80894be:	bf08      	it	eq
 80894c0:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
 80894c2:	3401      	adds	r4, #1
                continue;
 80894c4:	e7c9      	b.n	808945a <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
 80894c6:	f04f 0a01 	mov.w	sl, #1
 80894ca:	e7c6      	b.n	808945a <mbedtls_x509_crt_parse+0x32>
 80894cc:	4630      	mov	r0, r6
 80894ce:	e011      	b.n	80894f4 <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
 80894d0:	f1ba 0f00 	cmp.w	sl, #0
 80894d4:	d107      	bne.n	80894e6 <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
 80894d6:	480b      	ldr	r0, [pc, #44]	; (8089504 <mbedtls_x509_crt_parse+0xdc>)
 80894d8:	f1b8 0f00 	cmp.w	r8, #0
 80894dc:	bf18      	it	ne
 80894de:	4640      	movne	r0, r8
 80894e0:	e008      	b.n	80894f4 <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80894e2:	4809      	ldr	r0, [pc, #36]	; (8089508 <mbedtls_x509_crt_parse+0xe0>)
 80894e4:	e006      	b.n	80894f4 <mbedtls_x509_crt_parse+0xcc>
 80894e6:	4620      	mov	r0, r4
 80894e8:	e004      	b.n	80894f4 <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 80894ea:	463a      	mov	r2, r7
 80894ec:	4629      	mov	r1, r5
 80894ee:	4648      	mov	r0, r9
 80894f0:	f7ff fc5a 	bl	8088da8 <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
 80894f4:	b008      	add	sp, #32
 80894f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80894fa:	bf00      	nop
 80894fc:	08094cd9 	.word	0x08094cd9
 8089500:	08094cf5 	.word	0x08094cf5
 8089504:	ffffd880 	.word	0xffffd880
 8089508:	ffffd800 	.word	0xffffd800

0808950c <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808950c:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808950e:	2300      	movs	r3, #0
 8089510:	4288      	cmp	r0, r1
 8089512:	d002      	beq.n	808951a <_ZL15mbedtls_zeroizePvj+0xe>
 8089514:	7003      	strb	r3, [r0, #0]
 8089516:	3001      	adds	r0, #1
 8089518:	e7fa      	b.n	8089510 <_ZL15mbedtls_zeroizePvj+0x4>
 808951a:	4770      	bx	lr

0808951c <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
 808951c:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
 808951e:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
 8089520:	b113      	cbz	r3, 8089528 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 8089522:	0889      	lsrs	r1, r1, #2
 8089524:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8089526:	4718      	bx	r3
 8089528:	4770      	bx	lr
	...

0808952c <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 808952c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 808952e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089530:	b0a9      	sub	sp, #164	; 0xa4
 8089532:	4604      	mov	r4, r0
 8089534:	460f      	mov	r7, r1
 8089536:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 8089538:	b905      	cbnz	r5, 808953c <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 808953a:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
 808953c:	a80d      	add	r0, sp, #52	; 0x34
 808953e:	f7f8 ff4d 	bl	80823dc <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8089542:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8089544:	a80d      	add	r0, sp, #52	; 0x34
 8089546:	3118      	adds	r1, #24
 8089548:	f7f8 ff56 	bl	80823f8 <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 808954c:	4b10      	ldr	r3, [pc, #64]	; (8089590 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
 808954e:	4911      	ldr	r1, [pc, #68]	; (8089594 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 8089550:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089552:	2e00      	cmp	r6, #0
 8089554:	bf0c      	ite	eq
 8089556:	461e      	moveq	r6, r3
 8089558:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 808955a:	a905      	add	r1, sp, #20
 808955c:	f7f9 fb46 	bl	8082bec <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 8089560:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
 8089562:	220c      	movs	r2, #12
 8089564:	2420      	movs	r4, #32
 8089566:	9202      	str	r2, [sp, #8]
 8089568:	9701      	str	r7, [sp, #4]
 808956a:	9400      	str	r4, [sp, #0]
 808956c:	4632      	mov	r2, r6
 808956e:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 8089572:	2130      	movs	r1, #48	; 0x30
 8089574:	ab05      	add	r3, sp, #20
 8089576:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808957a:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
 808957c:	a80d      	add	r0, sp, #52	; 0x34
 808957e:	f7f8 ff31 	bl	80823e4 <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 8089582:	4621      	mov	r1, r4
 8089584:	a805      	add	r0, sp, #20
 8089586:	f7ff ffc1 	bl	808950c <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 808958a:	b029      	add	sp, #164	; 0xa4
 808958c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808958e:	bf00      	nop
 8089590:	08095109 	.word	0x08095109
 8089594:	08095119 	.word	0x08095119

08089598 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 8089598:	b530      	push	{r4, r5, lr}
 808959a:	4605      	mov	r5, r0
 808959c:	460c      	mov	r4, r1
 808959e:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 80895a0:	a801      	add	r0, sp, #4
 80895a2:	f7f8 ff1b 	bl	80823dc <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 80895a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80895a8:	a801      	add	r0, sp, #4
 80895aa:	3118      	adds	r1, #24
 80895ac:	f7f8 ff24 	bl	80823f8 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 80895b0:	4621      	mov	r1, r4
 80895b2:	a801      	add	r0, sp, #4
 80895b4:	f7f9 fb1a 	bl	8082bec <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
 80895b8:	a801      	add	r0, sp, #4
 80895ba:	f7f8 ff13 	bl	80823e4 <mbedtls_sha256_free>

    return;
}
 80895be:	b01d      	add	sp, #116	; 0x74
 80895c0:	bd30      	pop	{r4, r5, pc}
	...

080895c4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 80895c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80895c8:	4604      	mov	r4, r0
 80895ca:	b0b7      	sub	sp, #220	; 0xdc
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80895cc:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 80895ce:	468a      	mov	sl, r1
 80895d0:	4693      	mov	fp, r2
 80895d2:	4699      	mov	r9, r3
 80895d4:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80895d6:	f7fe faa3 	bl	8087b20 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 80895da:	4620      	mov	r0, r4
 80895dc:	f7fe fa94 	bl	8087b08 <mbedtls_md_info_from_type>
 80895e0:	4607      	mov	r7, r0
 80895e2:	2800      	cmp	r0, #0
 80895e4:	d073      	beq.n	80896ce <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10a>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
 80895e6:	f7fe fbd3 	bl	8087d90 <mbedtls_md_get_size>
 80895ea:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 80895ec:	4648      	mov	r0, r9
 80895ee:	f009 fd9c 	bl	809312a <strlen>
 80895f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80895f4:	1823      	adds	r3, r4, r0
 80895f6:	189a      	adds	r2, r3, r2
 80895f8:	2a80      	cmp	r2, #128	; 0x80
 80895fa:	4605      	mov	r5, r0
 80895fc:	9301      	str	r3, [sp, #4]
 80895fe:	d868      	bhi.n	80896d2 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
 8089600:	ab16      	add	r3, sp, #88	; 0x58
 8089602:	eb03 0804 	add.w	r8, r3, r4
 8089606:	4602      	mov	r2, r0
 8089608:	4649      	mov	r1, r9
 808960a:	4640      	mov	r0, r8
 808960c:	f009 fd47 	bl	809309e <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 8089610:	9b01      	ldr	r3, [sp, #4]
 8089612:	a816      	add	r0, sp, #88	; 0x58
 8089614:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8089616:	9940      	ldr	r1, [sp, #256]	; 0x100
 8089618:	4418      	add	r0, r3
 808961a:	f009 fd40 	bl	809309e <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 808961e:	4639      	mov	r1, r7
 8089620:	2201      	movs	r2, #1
 8089622:	a803      	add	r0, sp, #12
 8089624:	f7fe faa2 	bl	8087b6c <mbedtls_md_setup>
 8089628:	4607      	mov	r7, r0
 808962a:	2800      	cmp	r0, #0
 808962c:	d152      	bne.n	80896d4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 808962e:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8089630:	465a      	mov	r2, fp
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 8089632:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8089634:	4651      	mov	r1, sl
 8089636:	a803      	add	r0, sp, #12
 8089638:	f7fe fae8 	bl	8087c0c <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 808963c:	462a      	mov	r2, r5
 808963e:	4641      	mov	r1, r8
 8089640:	a803      	add	r0, sp, #12
 8089642:	f7fe fb43 	bl	8087ccc <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 8089646:	a916      	add	r1, sp, #88	; 0x58
 8089648:	a803      	add	r0, sp, #12
 808964a:	f7fe fb4f 	bl	8087cec <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 808964e:	46b9      	mov	r9, r7
 8089650:	f10d 0818 	add.w	r8, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8089654:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 8089656:	45b1      	cmp	r9, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 8089658:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 808965a:	d22c      	bcs.n	80896b6 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 808965c:	f7fe fb76 	bl	8087d4c <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8089660:	462a      	mov	r2, r5
 8089662:	a916      	add	r1, sp, #88	; 0x58
 8089664:	a803      	add	r0, sp, #12
 8089666:	f7fe fb31 	bl	8087ccc <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 808966a:	4641      	mov	r1, r8
 808966c:	a803      	add	r0, sp, #12
 808966e:	f7fe fb3d 	bl	8087cec <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 8089672:	a803      	add	r0, sp, #12
 8089674:	f7fe fb6a 	bl	8087d4c <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 8089678:	4622      	mov	r2, r4
 808967a:	a916      	add	r1, sp, #88	; 0x58
 808967c:	a803      	add	r0, sp, #12
 808967e:	f7fe fb25 	bl	8087ccc <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 8089682:	a916      	add	r1, sp, #88	; 0x58
 8089684:	a803      	add	r0, sp, #12
 8089686:	f7fe fb31 	bl	8087cec <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 808968a:	eb09 0104 	add.w	r1, r9, r4
 808968e:	428e      	cmp	r6, r1
 8089690:	bf36      	itet	cc
 8089692:	fbb6 f2f4 	udivcc	r2, r6, r4
 8089696:	4622      	movcs	r2, r4
 8089698:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 808969c:	9842      	ldr	r0, [sp, #264]	; 0x108
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 808969e:	2300      	movs	r3, #0
            dstbuf[i + j]  = h_i[j];
 80896a0:	4481      	add	r9, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80896a2:	4293      	cmp	r3, r2
 80896a4:	d101      	bne.n	80896aa <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe6>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 80896a6:	4689      	mov	r9, r1
 80896a8:	e7d5      	b.n	8089656 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 80896aa:	f818 0003 	ldrb.w	r0, [r8, r3]
 80896ae:	f809 0003 	strb.w	r0, [r9, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80896b2:	3301      	adds	r3, #1
 80896b4:	e7f5      	b.n	80896a2 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xde>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 80896b6:	f7fe fa38 	bl	8087b2a <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
 80896ba:	2180      	movs	r1, #128	; 0x80
 80896bc:	a816      	add	r0, sp, #88	; 0x58
 80896be:	f7ff ff25 	bl	808950c <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 80896c2:	4640      	mov	r0, r8
 80896c4:	2140      	movs	r1, #64	; 0x40
 80896c6:	f7ff ff21 	bl	808950c <_ZL15mbedtls_zeroizePvj>

    return( 0 );
 80896ca:	2000      	movs	r0, #0
 80896cc:	e002      	b.n	80896d4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80896ce:	4803      	ldr	r0, [pc, #12]	; (80896dc <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x118>)
 80896d0:	e000      	b.n	80896d4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80896d2:	4803      	ldr	r0, [pc, #12]	; (80896e0 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)

    mbedtls_zeroize( tmp, sizeof( tmp ) );
    mbedtls_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
 80896d4:	b037      	add	sp, #220	; 0xdc
 80896d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80896da:	bf00      	nop
 80896dc:	ffff9400 	.word	0xffff9400
 80896e0:	ffff8f00 	.word	0xffff8f00

080896e4 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 80896e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 80896e6:	9c08      	ldr	r4, [sp, #32]
 80896e8:	9403      	str	r4, [sp, #12]
 80896ea:	9c07      	ldr	r4, [sp, #28]
 80896ec:	9402      	str	r4, [sp, #8]
 80896ee:	9c06      	ldr	r4, [sp, #24]
 80896f0:	e88d 0018 	stmia.w	sp, {r3, r4}
 80896f4:	4613      	mov	r3, r2
 80896f6:	460a      	mov	r2, r1
 80896f8:	4601      	mov	r1, r0
 80896fa:	2006      	movs	r0, #6
 80896fc:	f7ff ff62 	bl	80895c4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 8089700:	b004      	add	sp, #16
 8089702:	bd10      	pop	{r4, pc}

08089704 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 8089704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 8089706:	9c08      	ldr	r4, [sp, #32]
 8089708:	9403      	str	r4, [sp, #12]
 808970a:	9c07      	ldr	r4, [sp, #28]
 808970c:	9402      	str	r4, [sp, #8]
 808970e:	9c06      	ldr	r4, [sp, #24]
 8089710:	e88d 0018 	stmia.w	sp, {r3, r4}
 8089714:	4613      	mov	r3, r2
 8089716:	460a      	mov	r2, r1
 8089718:	4601      	mov	r1, r0
 808971a:	2007      	movs	r0, #7
 808971c:	f7ff ff52 	bl	80895c4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 8089720:	b004      	add	sp, #16
 8089722:	bd10      	pop	{r4, pc}

08089724 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089724:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089726:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089728:	b0c7      	sub	sp, #284	; 0x11c
 808972a:	4604      	mov	r4, r0
 808972c:	460f      	mov	r7, r1
 808972e:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 8089730:	b905      	cbnz	r5, 8089734 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 8089732:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
 8089734:	a810      	add	r0, sp, #64	; 0x40
 8089736:	f004 f95b 	bl	808d9f0 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 808973a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 808973c:	a810      	add	r0, sp, #64	; 0x40
 808973e:	3188      	adds	r1, #136	; 0x88
 8089740:	f004 f964 	bl	808da0c <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089744:	4b10      	ldr	r3, [pc, #64]	; (8089788 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
 8089746:	4911      	ldr	r1, [pc, #68]	; (808978c <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8089748:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 808974a:	2e00      	cmp	r6, #0
 808974c:	bf0c      	ite	eq
 808974e:	461e      	moveq	r6, r3
 8089750:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8089752:	a904      	add	r1, sp, #16
 8089754:	f005 f884 	bl	808e860 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 8089758:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
 808975a:	220c      	movs	r2, #12
 808975c:	2430      	movs	r4, #48	; 0x30
 808975e:	9202      	str	r2, [sp, #8]
 8089760:	9701      	str	r7, [sp, #4]
 8089762:	9400      	str	r4, [sp, #0]
 8089764:	4632      	mov	r2, r6
 8089766:	4621      	mov	r1, r4
 8089768:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 808976c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8089770:	ab04      	add	r3, sp, #16
 8089772:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
 8089774:	a810      	add	r0, sp, #64	; 0x40
 8089776:	f004 f93f 	bl	808d9f8 <mbedtls_sha512_free>

    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 808977a:	4621      	mov	r1, r4
 808977c:	a804      	add	r0, sp, #16
 808977e:	f7ff fec5 	bl	808950c <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 8089782:	b047      	add	sp, #284	; 0x11c
 8089784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089786:	bf00      	nop
 8089788:	08095109 	.word	0x08095109
 808978c:	08095119 	.word	0x08095119

08089790 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
 8089790:	b530      	push	{r4, r5, lr}
 8089792:	4605      	mov	r5, r0
 8089794:	460c      	mov	r4, r1
 8089796:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
 8089798:	4668      	mov	r0, sp
 808979a:	f004 f929 	bl	808d9f0 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 808979e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80897a0:	4668      	mov	r0, sp
 80897a2:	3188      	adds	r1, #136	; 0x88
 80897a4:	f004 f932 	bl	808da0c <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
 80897a8:	4621      	mov	r1, r4
 80897aa:	4668      	mov	r0, sp
 80897ac:	f005 f858 	bl	808e860 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
 80897b0:	4668      	mov	r0, sp
 80897b2:	f004 f921 	bl	808d9f8 <mbedtls_sha512_free>

    return;
}
 80897b6:	b037      	add	sp, #220	; 0xdc
 80897b8:	bd30      	pop	{r4, r5, pc}
	...

080897bc <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 80897bc:	b570      	push	{r4, r5, r6, lr}
 80897be:	4604      	mov	r4, r0
 80897c0:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 80897c2:	2001      	movs	r0, #1
 80897c4:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 80897c6:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 80897c8:	f009 fc44 	bl	8093054 <calloc>
    if( new_cert == NULL )
 80897cc:	b178      	cbz	r0, 80897ee <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 80897ce:	6822      	ldr	r2, [r4, #0]
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;
 80897d0:	2300      	movs	r3, #0

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
 80897d2:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
 80897d4:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
 80897d6:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 80897d8:	b912      	cbnz	r2, 80897e0 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
 80897da:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
 80897dc:	4610      	mov	r0, r2
 80897de:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
 80897e0:	6893      	ldr	r3, [r2, #8]
 80897e2:	b10b      	cbz	r3, 80897e8 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
 80897e4:	461a      	mov	r2, r3
 80897e6:	e7fb      	b.n	80897e0 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
 80897e8:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
 80897ea:	4618      	mov	r0, r3
 80897ec:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80897ee:	4801      	ldr	r0, [pc, #4]	; (80897f4 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
 80897f0:	bd70      	pop	{r4, r5, r6, pc}
 80897f2:	bf00      	nop
 80897f4:	ffff8100 	.word	0xffff8100

080897f8 <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 80897f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80897fa:	3018      	adds	r0, #24
 80897fc:	f7f9 b9bc 	b.w	8082b78 <mbedtls_sha256_update_ret>

08089800 <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089800:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8089802:	3088      	adds	r0, #136	; 0x88
 8089804:	f004 bfe4 	b.w	808e7d0 <mbedtls_sha512_update_ret>

08089808 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
 8089808:	b570      	push	{r4, r5, r6, lr}
 808980a:	4604      	mov	r4, r0
 808980c:	460d      	mov	r5, r1
 808980e:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8089810:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8089812:	3018      	adds	r0, #24
 8089814:	f7f9 f9b0 	bl	8082b78 <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089818:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808981a:	4632      	mov	r2, r6
 808981c:	4629      	mov	r1, r5
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 808981e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089822:	3088      	adds	r0, #136	; 0x88
 8089824:	f004 bfd4 	b.w	808e7d0 <mbedtls_sha512_update_ret>

08089828 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 808982c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 808982e:	6c04      	ldr	r4, [r0, #64]	; 0x40
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089830:	b0d7      	sub	sp, #348	; 0x15c
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089832:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 8089834:	6823      	ldr	r3, [r4, #0]
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 8089836:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089838:	4680      	mov	r8, r0
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 808983a:	7a18      	ldrb	r0, [r3, #8]
 808983c:	f7f9 fcd2 	bl	80831e4 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 8089840:	4606      	mov	r6, r0
 8089842:	b908      	cbnz	r0, 8089848 <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089844:	48a5      	ldr	r0, [pc, #660]	; (8089adc <mbedtls_ssl_derive_keys+0x2b4>)
 8089846:	e145      	b.n	8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 8089848:	6823      	ldr	r3, [r4, #0]
 808984a:	7a58      	ldrb	r0, [r3, #9]
 808984c:	f7fe f95c 	bl	8087b08 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8089850:	4682      	mov	sl, r0
 8089852:	2800      	cmp	r0, #0
 8089854:	d0f6      	beq.n	8089844 <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8089856:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808985a:	2b03      	cmp	r3, #3
 808985c:	d001      	beq.n	8089862 <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808985e:	48a0      	ldr	r0, [pc, #640]	; (8089ae0 <mbedtls_ssl_derive_keys+0x2b8>)
 8089860:	e138      	b.n	8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 8089862:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8089864:	7a5b      	ldrb	r3, [r3, #9]
 8089866:	2b07      	cmp	r3, #7
 8089868:	d107      	bne.n	808987a <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
 808986a:	4b9e      	ldr	r3, [pc, #632]	; (8089ae4 <mbedtls_ssl_derive_keys+0x2bc>)
 808986c:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 8089870:	4b9d      	ldr	r3, [pc, #628]	; (8089ae8 <mbedtls_ssl_derive_keys+0x2c0>)
 8089872:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 8089876:	4b9d      	ldr	r3, [pc, #628]	; (8089aec <mbedtls_ssl_derive_keys+0x2c4>)
 8089878:	e006      	b.n	8089888 <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
 808987a:	4b9d      	ldr	r3, [pc, #628]	; (8089af0 <mbedtls_ssl_derive_keys+0x2c8>)
 808987c:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 8089880:	4b9c      	ldr	r3, [pc, #624]	; (8089af4 <mbedtls_ssl_derive_keys+0x2cc>)
 8089882:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 8089886:	4b9c      	ldr	r3, [pc, #624]	; (8089af8 <mbedtls_ssl_derive_keys+0x2d0>)
 8089888:	f8c5 3168 	str.w	r3, [r5, #360]	; 0x168
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 808988c:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 8089890:	f505 7bda 	add.w	fp, r5, #436	; 0x1b4
 8089894:	f505 79ba 	add.w	r9, r5, #372	; 0x174
 8089898:	b9ab      	cbnz	r3, 80898c6 <mbedtls_ssl_derive_keys+0x9e>
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 808989a:	2330      	movs	r3, #48	; 0x30
 808989c:	9302      	str	r3, [sp, #8]
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 808989e:	9b05      	ldr	r3, [sp, #20]
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 80898a0:	4a96      	ldr	r2, [pc, #600]	; (8089afc <mbedtls_ssl_derive_keys+0x2d4>)
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 80898a2:	332c      	adds	r3, #44	; 0x2c
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 80898a4:	9301      	str	r3, [sp, #4]
 80898a6:	2340      	movs	r3, #64	; 0x40
 80898a8:	9300      	str	r3, [sp, #0]
 80898aa:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
 80898ae:	464b      	mov	r3, r9
 80898b0:	4658      	mov	r0, fp
 80898b2:	f8d5 716c 	ldr.w	r7, [r5, #364]	; 0x16c
 80898b6:	47b8      	blx	r7
        if( ret != 0 )
 80898b8:	2800      	cmp	r0, #0
 80898ba:	f040 810b 	bne.w	8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 80898be:	2130      	movs	r1, #48	; 0x30
 80898c0:	4658      	mov	r0, fp
 80898c2:	f7ff fe23 	bl	808950c <_ZL15mbedtls_zeroizePvj>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 80898c6:	464b      	mov	r3, r9
 80898c8:	af06      	add	r7, sp, #24
 80898ca:	463a      	mov	r2, r7
 80898cc:	6818      	ldr	r0, [r3, #0]
 80898ce:	6859      	ldr	r1, [r3, #4]
 80898d0:	3308      	adds	r3, #8
 80898d2:	c203      	stmia	r2!, {r0, r1}
 80898d4:	455b      	cmp	r3, fp
 80898d6:	4617      	mov	r7, r2
 80898d8:	d1f7      	bne.n	80898ca <mbedtls_ssl_derive_keys+0xa2>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 80898da:	464f      	mov	r7, r9
 80898dc:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80898e0:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 80898e4:	4673      	mov	r3, lr
 80898e6:	cb03      	ldmia	r3!, {r0, r1}
 80898e8:	455b      	cmp	r3, fp
 80898ea:	6038      	str	r0, [r7, #0]
 80898ec:	6079      	str	r1, [r7, #4]
 80898ee:	469e      	mov	lr, r3
 80898f0:	f107 0708 	add.w	r7, r7, #8
 80898f4:	d1f6      	bne.n	80898e4 <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 80898f6:	f10d 0e18 	add.w	lr, sp, #24
 80898fa:	f505 77ca 	add.w	r7, r5, #404	; 0x194
 80898fe:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8089902:	4673      	mov	r3, lr
 8089904:	cb03      	ldmia	r3!, {r0, r1}
 8089906:	4563      	cmp	r3, ip
 8089908:	6038      	str	r0, [r7, #0]
 808990a:	6079      	str	r1, [r7, #4]
 808990c:	469e      	mov	lr, r3
 808990e:	f107 0708 	add.w	r7, r7, #8
 8089912:	d1f6      	bne.n	8089902 <mbedtls_ssl_derive_keys+0xda>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 8089914:	2140      	movs	r1, #64	; 0x40
 8089916:	a806      	add	r0, sp, #24
 8089918:	f7ff fdf8 	bl	808950c <_ZL15mbedtls_zeroizePvj>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 808991c:	9f05      	ldr	r7, [sp, #20]
                              handshake->randbytes, 64, keyblk, 256 );
 808991e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8089922:	f8cd b004 	str.w	fp, [sp, #4]
 8089926:	f04f 0b40 	mov.w	fp, #64	; 0x40
 808992a:	9302      	str	r3, [sp, #8]
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 808992c:	372c      	adds	r7, #44	; 0x2c
                              handshake->randbytes, 64, keyblk, 256 );
 808992e:	f8cd b000 	str.w	fp, [sp]
 8089932:	f8d5 516c 	ldr.w	r5, [r5, #364]	; 0x16c
 8089936:	464b      	mov	r3, r9
 8089938:	4a71      	ldr	r2, [pc, #452]	; (8089b00 <mbedtls_ssl_derive_keys+0x2d8>)
 808993a:	2130      	movs	r1, #48	; 0x30
 808993c:	4638      	mov	r0, r7
 808993e:	47a8      	blx	r5
    if( ret != 0 )
 8089940:	2800      	cmp	r0, #0
 8089942:	f040 80c7 	bne.w	8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 8089946:	4659      	mov	r1, fp
 8089948:	4648      	mov	r0, r9
 808994a:	f7ff fddf 	bl	808950c <_ZL15mbedtls_zeroizePvj>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 808994e:	6873      	ldr	r3, [r6, #4]
 8089950:	08db      	lsrs	r3, r3, #3
 8089952:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 8089954:	7873      	ldrb	r3, [r6, #1]
 8089956:	2b06      	cmp	r3, #6
 8089958:	d001      	beq.n	808995e <mbedtls_ssl_derive_keys+0x136>
 808995a:	2b08      	cmp	r3, #8
 808995c:	d10f      	bne.n	808997e <mbedtls_ssl_derive_keys+0x156>
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;

        transform->ivlen = 12;
 808995e:	220c      	movs	r2, #12
 8089960:	60e2      	str	r2, [r4, #12]
        transform->fixed_ivlen = 4;
 8089962:	2204      	movs	r2, #4
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 8089964:	2300      	movs	r3, #0
        mac_key_len = 0;

        transform->ivlen = 12;
        transform->fixed_ivlen = 4;
 8089966:	6122      	str	r2, [r4, #16]

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 8089968:	6822      	ldr	r2, [r4, #0]
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 808996a:	6163      	str	r3, [r4, #20]
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 808996c:	7f12      	ldrb	r2, [r2, #28]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;
 808996e:	469a      	mov	sl, r3
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 8089970:	f012 0f02 	tst.w	r2, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 8089974:	bf14      	ite	ne
 8089976:	2210      	movne	r2, #16
 8089978:	2218      	moveq	r2, #24
 808997a:	60a2      	str	r2, [r4, #8]
 808997c:	e01d      	b.n	80899ba <mbedtls_ssl_derive_keys+0x192>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 808997e:	2201      	movs	r2, #1
 8089980:	4651      	mov	r1, sl
 8089982:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8089986:	f7fe f8f1 	bl	8087b6c <mbedtls_md_setup>
 808998a:	2800      	cmp	r0, #0
 808998c:	f040 80a2 	bne.w	8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
 8089990:	2201      	movs	r2, #1
 8089992:	4651      	mov	r1, sl
 8089994:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8089998:	f7fe f8e8 	bl	8087b6c <mbedtls_md_setup>
 808999c:	2800      	cmp	r0, #0
 808999e:	f040 8099 	bne.w	8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 80899a2:	4650      	mov	r0, sl
 80899a4:	f7fe f9f4 	bl	8087d90 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
 80899a8:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 80899aa:	68f1      	ldr	r1, [r6, #12]
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 80899ac:	4682      	mov	sl, r0
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 80899ae:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 80899b0:	7873      	ldrb	r3, [r6, #1]
 80899b2:	2b07      	cmp	r3, #7
 80899b4:	d17f      	bne.n	8089ab6 <mbedtls_ssl_derive_keys+0x28e>
            transform->minlen = transform->maclen;
 80899b6:	f8c4 a008 	str.w	sl, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80899ba:	f8d8 3000 	ldr.w	r3, [r8]
 80899be:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80899c2:	07db      	lsls	r3, r3, #31
 80899c4:	f53f af4b 	bmi.w	808985e <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80899c8:	6863      	ldr	r3, [r4, #4]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
 80899ca:	ea4f 094a 	mov.w	r9, sl, lsl #1
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 80899ce:	f8d4 b010 	ldr.w	fp, [r4, #16]
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80899d2:	eb09 0503 	add.w	r5, r9, r3
 80899d6:	aa16      	add	r2, sp, #88	; 0x58
 80899d8:	4415      	add	r5, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
 80899da:	f1bb 0f00 	cmp.w	fp, #0
 80899de:	d101      	bne.n	80899e4 <mbedtls_ssl_derive_keys+0x1bc>
 80899e0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 80899e4:	18e9      	adds	r1, r5, r3
 80899e6:	465a      	mov	r2, fp
 80899e8:	f104 0018 	add.w	r0, r4, #24
 80899ec:	9305      	str	r3, [sp, #20]
 80899ee:	f009 fb56 	bl	809309e <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
 80899f2:	9b05      	ldr	r3, [sp, #20]
 80899f4:	465a      	mov	r2, fp
 80899f6:	eb0b 0103 	add.w	r1, fp, r3
 80899fa:	4429      	add	r1, r5
 80899fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8089a00:	f009 fb4d 	bl	809309e <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8089a04:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8089a08:	2b00      	cmp	r3, #0
 8089a0a:	f77f af28 	ble.w	808985e <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
 8089a0e:	f1ba 0f00 	cmp.w	sl, #0
 8089a12:	d00d      	beq.n	8089a30 <mbedtls_ssl_derive_keys+0x208>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 8089a14:	4652      	mov	r2, sl
 8089a16:	a916      	add	r1, sp, #88	; 0x58
 8089a18:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8089a1c:	f7fe f8f6 	bl	8087c0c <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 8089a20:	ab16      	add	r3, sp, #88	; 0x58
 8089a22:	4652      	mov	r2, sl
 8089a24:	eb03 010a 	add.w	r1, r3, sl
 8089a28:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8089a2c:	f7fe f8ee 	bl	8087c0c <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
 8089a30:	f8d8 0000 	ldr.w	r0, [r8]
 8089a34:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8089a38:	f1b8 0f00 	cmp.w	r8, #0
 8089a3c:	d008      	beq.n	8089a50 <mbedtls_ssl_derive_keys+0x228>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
 8089a3e:	f8cd b004 	str.w	fp, [sp, #4]
 8089a42:	6863      	ldr	r3, [r4, #4]
 8089a44:	aa16      	add	r2, sp, #88	; 0x58
 8089a46:	9300      	str	r3, [sp, #0]
 8089a48:	4639      	mov	r1, r7
 8089a4a:	4653      	mov	r3, sl
 8089a4c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8089a4e:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 8089a50:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8089a54:	4631      	mov	r1, r6
 8089a56:	4638      	mov	r0, r7
 8089a58:	f7f9 fdba 	bl	80835d0 <mbedtls_cipher_setup>
 8089a5c:	2800      	cmp	r0, #0
 8089a5e:	d139      	bne.n	8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 8089a60:	3490      	adds	r4, #144	; 0x90
 8089a62:	4631      	mov	r1, r6
 8089a64:	4620      	mov	r0, r4
 8089a66:	f7f9 fdb3 	bl	80835d0 <mbedtls_cipher_setup>
 8089a6a:	bb98      	cbnz	r0, 8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 8089a6c:	a916      	add	r1, sp, #88	; 0x58
 8089a6e:	2301      	movs	r3, #1
 8089a70:	6872      	ldr	r2, [r6, #4]
 8089a72:	4449      	add	r1, r9
 8089a74:	4638      	mov	r0, r7
 8089a76:	f7f9 fbed 	bl	8083254 <mbedtls_cipher_setkey>
 8089a7a:	bb58      	cbnz	r0, 8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 8089a7c:	4603      	mov	r3, r0
 8089a7e:	6872      	ldr	r2, [r6, #4]
 8089a80:	4629      	mov	r1, r5
 8089a82:	4620      	mov	r0, r4
 8089a84:	f7f9 fbe6 	bl	8083254 <mbedtls_cipher_setkey>
 8089a88:	bb20      	cbnz	r0, 8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 8089a8a:	7873      	ldrb	r3, [r6, #1]
 8089a8c:	2b02      	cmp	r3, #2
 8089a8e:	d006      	beq.n	8089a9e <mbedtls_ssl_derive_keys+0x276>
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 8089a90:	a816      	add	r0, sp, #88	; 0x58
 8089a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8089a96:	f7ff fd39 	bl	808950c <_ZL15mbedtls_zeroizePvj>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
 8089a9a:	2000      	movs	r0, #0
 8089a9c:	e01a      	b.n	8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
    {
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 8089a9e:	2104      	movs	r1, #4
 8089aa0:	4638      	mov	r0, r7
 8089aa2:	f7f9 fd57 	bl	8083554 <mbedtls_cipher_set_padding_mode>
 8089aa6:	b9a8      	cbnz	r0, 8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
            return( ret );
        }

        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 8089aa8:	2104      	movs	r1, #4
 8089aaa:	4620      	mov	r0, r4
 8089aac:	f7f9 fd52 	bl	8083554 <mbedtls_cipher_set_padding_mode>
 8089ab0:	2800      	cmp	r0, #0
 8089ab2:	d0ed      	beq.n	8089a90 <mbedtls_ssl_derive_keys+0x268>
 8089ab4:	e00e      	b.n	8089ad4 <mbedtls_ssl_derive_keys+0x2ac>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
 8089ab6:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
 8089ab8:	fbba f2f3 	udiv	r2, sl, r3
 8089abc:	fb03 3302 	mla	r3, r3, r2, r3
 8089ac0:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 8089ac2:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8089ac6:	3a02      	subs	r2, #2
 8089ac8:	2a01      	cmp	r2, #1
 8089aca:	f63f aec8 	bhi.w	808985e <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
 8089ace:	440b      	add	r3, r1
 8089ad0:	60a3      	str	r3, [r4, #8]
 8089ad2:	e772      	b.n	80899ba <mbedtls_ssl_derive_keys+0x192>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
 8089ad4:	b057      	add	sp, #348	; 0x15c
 8089ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089ada:	bf00      	nop
 8089adc:	ffff8f00 	.word	0xffff8f00
 8089ae0:	ffff9400 	.word	0xffff9400
 8089ae4:	08089705 	.word	0x08089705
 8089ae8:	08089791 	.word	0x08089791
 8089aec:	08089725 	.word	0x08089725
 8089af0:	080896e5 	.word	0x080896e5
 8089af4:	08089599 	.word	0x08089599
 8089af8:	0808952d 	.word	0x0808952d
 8089afc:	08095129 	.word	0x08095129
 8089b00:	08095137 	.word	0x08095137

08089b04 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 8089b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 8089b06:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 8089b08:	4604      	mov	r4, r0
 8089b0a:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 8089b0c:	b90b      	cbnz	r3, 8089b12 <mbedtls_ssl_fetch_input+0xe>
 8089b0e:	6983      	ldr	r3, [r0, #24]
 8089b10:	b19b      	cbz	r3, 8089b3a <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 8089b12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8089b14:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8089b16:	1a9b      	subs	r3, r3, r2
 8089b18:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 8089b1c:	330d      	adds	r3, #13
 8089b1e:	42b3      	cmp	r3, r6
 8089b20:	d30b      	bcc.n	8089b3a <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 8089b22:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8089b24:	42ae      	cmp	r6, r5
 8089b26:	d90a      	bls.n	8089b3e <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 8089b28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
 8089b2a:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 8089b2c:	b14b      	cbz	r3, 8089b42 <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 8089b2e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8089b30:	4798      	blx	r3
 8089b32:	2802      	cmp	r0, #2
 8089b34:	d105      	bne.n	8089b42 <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 8089b36:	4812      	ldr	r0, [pc, #72]	; (8089b80 <mbedtls_ssl_fetch_input+0x7c>)
 8089b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089b3a:	4812      	ldr	r0, [pc, #72]	; (8089b84 <mbedtls_ssl_fetch_input+0x80>)
 8089b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
 8089b3e:	2000      	movs	r0, #0
 8089b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
 8089b42:	69a7      	ldr	r7, [r4, #24]
 8089b44:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8089b46:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8089b48:	b137      	cbz	r7, 8089b58 <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
 8089b4a:	6823      	ldr	r3, [r4, #0]
 8089b4c:	4401      	add	r1, r0
 8089b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8089b50:	462a      	mov	r2, r5
 8089b52:	69e0      	ldr	r0, [r4, #28]
 8089b54:	47b8      	blx	r7
 8089b56:	e004      	b.n	8089b62 <mbedtls_ssl_fetch_input+0x5e>
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
                                       ssl->in_hdr + ssl->in_left, len );
 8089b58:	4401      	add	r1, r0
 8089b5a:	6963      	ldr	r3, [r4, #20]
 8089b5c:	462a      	mov	r2, r5
 8089b5e:	69e0      	ldr	r0, [r4, #28]
 8089b60:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
 8089b62:	2800      	cmp	r0, #0
 8089b64:	d006      	beq.n	8089b74 <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
 8089b66:	db09      	blt.n	8089b7c <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 8089b68:	4285      	cmp	r5, r0
 8089b6a:	d305      	bcc.n	8089b78 <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
 8089b6c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8089b6e:	4418      	add	r0, r3
 8089b70:	6760      	str	r0, [r4, #116]	; 0x74
 8089b72:	e7d6      	b.n	8089b22 <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 8089b74:	4804      	ldr	r0, [pc, #16]	; (8089b88 <mbedtls_ssl_fetch_input+0x84>)
 8089b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089b78:	4804      	ldr	r0, [pc, #16]	; (8089b8c <mbedtls_ssl_fetch_input+0x88>)
 8089b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
 8089b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8089b7e:	bf00      	nop
 8089b80:	ffff9800 	.word	0xffff9800
 8089b84:	ffff8f00 	.word	0xffff8f00
 8089b88:	ffff8d80 	.word	0xffff8d80
 8089b8c:	ffff9400 	.word	0xffff9400

08089b90 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 8089b90:	b510      	push	{r4, lr}
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 8089b92:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 8089b94:	4604      	mov	r4, r0
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 8089b96:	b34b      	cbz	r3, 8089bec <mbedtls_ssl_flush_output+0x5c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 8089b98:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8089b9c:	b9a3      	cbnz	r3, 8089bc8 <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
 8089b9e:	2000      	movs	r0, #0
 8089ba0:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
              ssl->out_msglen - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 8089ba2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8089ba6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8089baa:	3105      	adds	r1, #5
 8089bac:	1a89      	subs	r1, r1, r2
 8089bae:	4401      	add	r1, r0
 8089bb0:	6923      	ldr	r3, [r4, #16]
 8089bb2:	69e0      	ldr	r0, [r4, #28]
 8089bb4:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
 8089bb6:	2800      	cmp	r0, #0
 8089bb8:	dd1b      	ble.n	8089bf2 <mbedtls_ssl_flush_output+0x62>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 8089bba:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8089bbe:	4283      	cmp	r3, r0
 8089bc0:	d316      	bcc.n	8089bf0 <mbedtls_ssl_flush_output+0x60>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
 8089bc2:	1a18      	subs	r0, r3, r0
 8089bc4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
 8089bc8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8089bcc:	2a00      	cmp	r2, #0
 8089bce:	d1e8      	bne.n	8089ba2 <mbedtls_ssl_flush_output+0x12>
 8089bd0:	2207      	movs	r2, #7

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
        if( ++ssl->out_ctr[i - 1] != 0 )
 8089bd2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8089bd6:	5c8b      	ldrb	r3, [r1, r2]
 8089bd8:	3301      	adds	r3, #1
 8089bda:	b2db      	uxtb	r3, r3
 8089bdc:	548b      	strb	r3, [r1, r2]
 8089bde:	2b00      	cmp	r3, #0
 8089be0:	d1dd      	bne.n	8089b9e <mbedtls_ssl_flush_output+0xe>
        }

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8089be2:	f112 32ff 	adds.w	r2, r2, #4294967295
 8089be6:	d2f4      	bcs.n	8089bd2 <mbedtls_ssl_flush_output+0x42>

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 8089be8:	4802      	ldr	r0, [pc, #8]	; (8089bf4 <mbedtls_ssl_flush_output+0x64>)
 8089bea:	bd10      	pop	{r4, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089bec:	4802      	ldr	r0, [pc, #8]	; (8089bf8 <mbedtls_ssl_flush_output+0x68>)
 8089bee:	bd10      	pop	{r4, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089bf0:	4802      	ldr	r0, [pc, #8]	; (8089bfc <mbedtls_ssl_flush_output+0x6c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
 8089bf2:	bd10      	pop	{r4, pc}
 8089bf4:	ffff9480 	.word	0xffff9480
 8089bf8:	ffff8f00 	.word	0xffff8f00
 8089bfc:	ffff9400 	.word	0xffff9400

08089c00 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 8089c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089c02:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 8089c06:	b097      	sub	sp, #92	; 0x5c
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089c08:	2b16      	cmp	r3, #22
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 8089c0a:	4604      	mov	r4, r0
    int ret, done = 0, out_msg_type;
    size_t len = ssl->out_msglen;
 8089c0c:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089c10:	d11a      	bne.n	8089c48 <mbedtls_ssl_write_record+0x48>
    {
        out_msg_type = ssl->out_msg[0];
 8089c12:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 8089c16:	780a      	ldrb	r2, [r1, #0]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 8089c18:	b11a      	cbz	r2, 8089c22 <mbedtls_ssl_write_record+0x22>
 8089c1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8089c1c:	2b00      	cmp	r3, #0
 8089c1e:	f000 8139 	beq.w	8089e94 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 8089c22:	1f2b      	subs	r3, r5, #4
 8089c24:	0c18      	lsrs	r0, r3, #16
 8089c26:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 8089c28:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089c2c:	0a18      	lsrs	r0, r3, #8
 8089c2e:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 8089c30:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089c34:	70cb      	strb	r3, [r1, #3]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 8089c36:	b13a      	cbz	r2, 8089c48 <mbedtls_ssl_write_record+0x48>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 8089c38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8089c3a:	462a      	mov	r2, r5
 8089c3c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8089c40:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089c44:	4620      	mov	r0, r4
 8089c46:	4798      	blx	r3
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 8089c48:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8089c4c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8089c50:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8089c52:	68e2      	ldr	r2, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 8089c54:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089c58:	68a1      	ldr	r1, [r4, #8]
        ver[1] = (unsigned char) minor;
 8089c5a:	709a      	strb	r2, [r3, #2]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089c5c:	7059      	strb	r1, [r3, #1]
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        ssl->out_len[0] = (unsigned char)( len >> 8 );
 8089c5e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8089c62:	0a2a      	lsrs	r2, r5, #8
 8089c64:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 8089c66:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8089c6a:	705d      	strb	r5, [r3, #1]

        if( ssl->transform_out != NULL )
 8089c6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8089c6e:	2800      	cmp	r0, #0
 8089c70:	f000 8107 	beq.w	8089e82 <mbedtls_ssl_write_record+0x282>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 8089c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8089c76:	2b00      	cmp	r3, #0
 8089c78:	f000 810c 	beq.w	8089e94 <mbedtls_ssl_write_record+0x294>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8089c7c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8089c7e:	b105      	cbz	r5, 8089c82 <mbedtls_ssl_write_record+0x82>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 8089c80:	786d      	ldrb	r5, [r5, #1]
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8089c82:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8089c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8089c8a:	f200 8105 	bhi.w	8089e98 <mbedtls_ssl_write_record+0x298>

    /*
     * Add MAC before if needed
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( mode == MBEDTLS_MODE_STREAM ||
 8089c8e:	2d07      	cmp	r5, #7
 8089c90:	d001      	beq.n	8089c96 <mbedtls_ssl_write_record+0x96>
 8089c92:	2d02      	cmp	r5, #2
 8089c94:	d13b      	bne.n	8089d0e <mbedtls_ssl_write_record+0x10e>
        }
        else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8089c96:	68e3      	ldr	r3, [r4, #12]
 8089c98:	2b00      	cmp	r3, #0
 8089c9a:	f340 80fb 	ble.w	8089e94 <mbedtls_ssl_write_record+0x294>
        {
            unsigned char mac[MBEDTLS_SSL_MAC_ADD];

            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 8089c9e:	2208      	movs	r2, #8
 8089ca0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8089ca4:	3038      	adds	r0, #56	; 0x38
 8089ca6:	f7fe f811 	bl	8087ccc <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 8089caa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8089cac:	2203      	movs	r2, #3
 8089cae:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8089cb2:	3038      	adds	r0, #56	; 0x38
 8089cb4:	f7fe f80a 	bl	8087ccc <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 8089cb8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8089cba:	2202      	movs	r2, #2
 8089cbc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8089cc0:	3038      	adds	r0, #56	; 0x38
 8089cc2:	f7fe f803 	bl	8087ccc <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 8089cc6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
                             ssl->out_msg, ssl->out_msglen );
 8089cc8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8089ccc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089cd0:	3038      	adds	r0, #56	; 0x38
 8089cd2:	f7fd fffb 	bl	8087ccc <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 8089cd6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8089cd8:	a90a      	add	r1, sp, #40	; 0x28
 8089cda:	3038      	adds	r0, #56	; 0x38
 8089cdc:	f7fe f806 	bl	8087cec <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 8089ce0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
        auth_done++;
 8089ce2:	2601      	movs	r6, #1
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
                             ssl->out_msg, ssl->out_msglen );
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 8089ce4:	3038      	adds	r0, #56	; 0x38
 8089ce6:	f7fe f831 	bl	8087d4c <mbedtls_md_hmac_reset>

            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 8089cea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8089cee:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8089cf2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8089cf4:	4418      	add	r0, r3
 8089cf6:	6952      	ldr	r2, [r2, #20]
 8089cf8:	a90a      	add	r1, sp, #40	; 0x28
 8089cfa:	f009 f9d0 	bl	809309e <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
 8089cfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8089d00:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8089d04:	695b      	ldr	r3, [r3, #20]
 8089d06:	4413      	add	r3, r2
 8089d08:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8089d0c:	e000      	b.n	8089d10 <mbedtls_ssl_write_record+0x110>
 * Encryption/decryption functions
 */
static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
{
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 8089d0e:	2600      	movs	r6, #0
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 8089d10:	2d06      	cmp	r5, #6
 8089d12:	d001      	beq.n	8089d18 <mbedtls_ssl_write_record+0x118>
 8089d14:	2d08      	cmp	r5, #8
 8089d16:	d15c      	bne.n	8089dd2 <mbedtls_ssl_write_record+0x1d2>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 8089d18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 8089d1a:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 8089d1e:	681a      	ldr	r2, [r3, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 8089d20:	6879      	ldr	r1, [r7, #4]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089d22:	7f12      	ldrb	r2, [r2, #28]

        memcpy( add_data, ssl->out_ctr, 8 );
 8089d24:	6838      	ldr	r0, [r7, #0]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089d26:	f012 0f02 	tst.w	r2, #2

        memcpy( add_data, ssl->out_ctr, 8 );
 8089d2a:	aa0a      	add	r2, sp, #40	; 0x28
 8089d2c:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 8089d2e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089d32:	68a1      	ldr	r1, [r4, #8]
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
 8089d34:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8089d38:	68e2      	ldr	r2, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089d3a:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 8089d3e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 8089d42:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089d46:	bf08      	it	eq
 8089d48:	2510      	moveq	r5, #16

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 8089d4a:	ea4f 2112 	mov.w	r1, r2, lsr #8
 8089d4e:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
        add_data[12] = ssl->out_msglen & 0xFF;
 8089d52:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 8089d56:	6919      	ldr	r1, [r3, #16]
 8089d58:	68da      	ldr	r2, [r3, #12]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089d5a:	bf18      	it	ne
 8089d5c:	2508      	movne	r5, #8
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 8089d5e:	1a52      	subs	r2, r2, r1
 8089d60:	2a08      	cmp	r2, #8
 8089d62:	f040 8097 	bne.w	8089e94 <mbedtls_ssl_write_record+0x294>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
                             ssl->out_ctr, 8 );
 8089d66:	683a      	ldr	r2, [r7, #0]
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 8089d68:	3318      	adds	r3, #24
                             ssl->out_ctr, 8 );
 8089d6a:	505a      	str	r2, [r3, r1]
 8089d6c:	687a      	ldr	r2, [r7, #4]
 8089d6e:	1858      	adds	r0, r3, r1
 8089d70:	6042      	str	r2, [r0, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 8089d72:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8089d76:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8089d7a:	680b      	ldr	r3, [r1, #0]
 8089d7c:	6013      	str	r3, [r2, #0]
 8089d7e:	684b      	ldr	r3, [r1, #4]
 8089d80:	6053      	str	r3, [r2, #4]
        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
 8089d82:	6ba0      	ldr	r0, [r4, #56]	; 0x38

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
 8089d84:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 8089d88:	68c3      	ldr	r3, [r0, #12]
 8089d8a:	6901      	ldr	r1, [r0, #16]
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
 8089d8c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 8089d90:	443b      	add	r3, r7
 8089d92:	1a5b      	subs	r3, r3, r1
 8089d94:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 8089d98:	19d3      	adds	r3, r2, r7
 8089d9a:	9305      	str	r3, [sp, #20]
 8089d9c:	ab09      	add	r3, sp, #36	; 0x24
 8089d9e:	9304      	str	r3, [sp, #16]
 8089da0:	230d      	movs	r3, #13
 8089da2:	9300      	str	r3, [sp, #0]
 8089da4:	9506      	str	r5, [sp, #24]
 8089da6:	9203      	str	r2, [sp, #12]
 8089da8:	9702      	str	r7, [sp, #8]
 8089daa:	9201      	str	r2, [sp, #4]
 8089dac:	68c2      	ldr	r2, [r0, #12]
 8089dae:	f100 0118 	add.w	r1, r0, #24
 8089db2:	ab0a      	add	r3, sp, #40	; 0x28
 8089db4:	3050      	adds	r0, #80	; 0x50
 8089db6:	f7f9 fc4b 	bl	8083650 <mbedtls_cipher_auth_encrypt>
 8089dba:	2800      	cmp	r0, #0
 8089dbc:	d173      	bne.n	8089ea6 <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
 8089dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8089dc0:	429f      	cmp	r7, r3
 8089dc2:	d167      	bne.n	8089e94 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 8089dc4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        auth_done++;
 8089dc8:	3601      	adds	r6, #1
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 8089dca:	441d      	add	r5, r3
 8089dcc:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 8089dd0:	e04c      	b.n	8089e6c <mbedtls_ssl_write_record+0x26c>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 8089dd2:	2d02      	cmp	r5, #2
 8089dd4:	d15e      	bne.n	8089e94 <mbedtls_ssl_write_record+0x294>
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
 8089dd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
    {
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;
 8089dd8:	2200      	movs	r2, #0
 8089dda:	920a      	str	r2, [sp, #40]	; 0x28

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 8089ddc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
                 ssl->transform_out->ivlen;
 8089de0:	68d9      	ldr	r1, [r3, #12]
 8089de2:	1c45      	adds	r5, r0, #1
 8089de4:	fbb5 f3f1 	udiv	r3, r5, r1
 8089de8:	fb01 5513 	mls	r5, r1, r3, r5
 8089dec:	1b4b      	subs	r3, r1, r5
        if( padlen == ssl->transform_out->ivlen )
 8089dee:	4299      	cmp	r1, r3
 8089df0:	d054      	beq.n	8089e9c <mbedtls_ssl_write_record+0x29c>
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8089df2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089df6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8089dfa:	4411      	add	r1, r2
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 8089dfc:	3201      	adds	r2, #1
 8089dfe:	4293      	cmp	r3, r2
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8089e00:	540b      	strb	r3, [r1, r0]
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 8089e02:	d2f6      	bcs.n	8089df2 <mbedtls_ssl_write_record+0x1f2>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 8089e04:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8089e08:	3501      	adds	r5, #1
 8089e0a:	441d      	add	r5, r3
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089e0c:	68e3      	ldr	r3, [r4, #12]
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 8089e0e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089e12:	2b01      	cmp	r3, #1
 8089e14:	dc02      	bgt.n	8089e1c <mbedtls_ssl_write_record+0x21c>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;

        enc_msglen = ssl->out_msglen;
        enc_msg = ssl->out_msg;
 8089e16:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8089e1a:	e018      	b.n	8089e4e <mbedtls_ssl_write_record+0x24e>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            /*
             * Generate IV
             */
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 8089e1c:	6823      	ldr	r3, [r4, #0]
 8089e1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                  ssl->transform_out->ivlen );
 8089e20:	699d      	ldr	r5, [r3, #24]
 8089e22:	68ca      	ldr	r2, [r1, #12]
 8089e24:	69d8      	ldr	r0, [r3, #28]
 8089e26:	3118      	adds	r1, #24
 8089e28:	47a8      	blx	r5
            if( ret != 0 )
 8089e2a:	2800      	cmp	r0, #0
 8089e2c:	d13b      	bne.n	8089ea6 <mbedtls_ssl_write_record+0x2a6>
                return( ret );

            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 8089e2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    ssl->transform_out->ivlen );
 8089e30:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8089e34:	68ca      	ldr	r2, [r1, #12]
 8089e36:	3118      	adds	r1, #24
 8089e38:	f009 f931 	bl	809309e <memcpy>
            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 8089e3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
 8089e3e:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 8089e42:	68d2      	ldr	r2, [r2, #12]
                    ssl->transform_out->ivlen );

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
 8089e44:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 8089e48:	442a      	add	r2, r5
 8089e4a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
                            "including %d bytes of IV and %d bytes of padding",
                            ssl->out_msglen, ssl->transform_out->ivlen,
                            padlen + 1 ) );

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 8089e4e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8089e50:	aa0a      	add	r2, sp, #40	; 0x28
 8089e52:	9202      	str	r2, [sp, #8]
 8089e54:	9301      	str	r3, [sp, #4]
 8089e56:	9500      	str	r5, [sp, #0]
 8089e58:	68c2      	ldr	r2, [r0, #12]
 8089e5a:	f100 0118 	add.w	r1, r0, #24
 8089e5e:	3050      	adds	r0, #80	; 0x50
 8089e60:	f7f9 fbd4 	bl	808360c <mbedtls_cipher_crypt>
 8089e64:	b9f8      	cbnz	r0, 8089ea6 <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( enc_msglen != olen )
 8089e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089e68:	429d      	cmp	r5, r3
 8089e6a:	d113      	bne.n	8089e94 <mbedtls_ssl_write_record+0x294>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 8089e6c:	2e01      	cmp	r6, #1
 8089e6e:	d111      	bne.n	8089e94 <mbedtls_ssl_write_record+0x294>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
 8089e70:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 8089e74:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8089e78:	0a19      	lsrs	r1, r3, #8
 8089e7a:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 8089e7c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8089e80:	7053      	strb	r3, [r2, #1]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 8089e82:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8089e86:	4620      	mov	r0, r4
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 8089e88:	3305      	adds	r3, #5
 8089e8a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8089e8e:	f7ff fe7f 	bl	8089b90 <mbedtls_ssl_flush_output>
 8089e92:	e008      	b.n	8089ea6 <mbedtls_ssl_write_record+0x2a6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089e94:	4805      	ldr	r0, [pc, #20]	; (8089eac <mbedtls_ssl_write_record+0x2ac>)
 8089e96:	e006      	b.n	8089ea6 <mbedtls_ssl_write_record+0x2a6>
    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089e98:	4805      	ldr	r0, [pc, #20]	; (8089eb0 <mbedtls_ssl_write_record+0x2b0>)
 8089e9a:	e004      	b.n	8089ea6 <mbedtls_ssl_write_record+0x2a6>
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8089e9c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8089ea0:	541a      	strb	r2, [r3, r0]
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;
 8089ea2:	4613      	mov	r3, r2
 8089ea4:	e7ae      	b.n	8089e04 <mbedtls_ssl_write_record+0x204>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
}
 8089ea6:	b017      	add	sp, #92	; 0x5c
 8089ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089eaa:	bf00      	nop
 8089eac:	ffff9400 	.word	0xffff9400
 8089eb0:	ffff8f00 	.word	0xffff8f00

08089eb4 <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 8089eb4:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 8089eb6:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8089eb8:	2c03      	cmp	r4, #3
 8089eba:	d90f      	bls.n	8089edc <mbedtls_ssl_prepare_handshake_record+0x28>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
 8089ebc:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 8089ebe:	788a      	ldrb	r2, [r1, #2]
 8089ec0:	784b      	ldrb	r3, [r1, #1]
 8089ec2:	0212      	lsls	r2, r2, #8
 8089ec4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8089ec8:	78ca      	ldrb	r2, [r1, #3]
 8089eca:	4313      	orrs	r3, r2
 8089ecc:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8089ece:	4a04      	ldr	r2, [pc, #16]	; (8089ee0 <mbedtls_ssl_prepare_handshake_record+0x2c>)
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
                    ( ssl->in_msg[2] << 8  ) |
                      ssl->in_msg[3] );
 8089ed0:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8089ed2:	429c      	cmp	r4, r3
 8089ed4:	bf34      	ite	cc
 8089ed6:	4610      	movcc	r0, r2
 8089ed8:	2000      	movcs	r0, #0
 8089eda:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8089edc:	4801      	ldr	r0, [pc, #4]	; (8089ee4 <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
 8089ede:	bd10      	pop	{r4, pc}
 8089ee0:	ffff8f80 	.word	0xffff8f80
 8089ee4:	ffff8e00 	.word	0xffff8e00

08089ee8 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 8089ee8:	6842      	ldr	r2, [r0, #4]

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 8089eea:	b410      	push	{r4}

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 8089eec:	2a10      	cmp	r2, #16
 8089eee:	d008      	beq.n	8089f02 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
 8089ef0:	6b02      	ldr	r2, [r0, #48]	; 0x30
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 8089ef2:	b132      	cbz	r2, 8089f02 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 8089ef4:	f8d2 4160 	ldr.w	r4, [r2, #352]	; 0x160
 8089ef8:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8089efa:	4623      	mov	r3, r4
 8089efc:	6f82      	ldr	r2, [r0, #120]	; 0x78
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 8089efe:	bc10      	pop	{r4}
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 8089f00:	4718      	bx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 8089f02:	bc10      	pop	{r4}
 8089f04:	4770      	bx	lr
	...

08089f08 <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 8089f08:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089f0a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 8089f0c:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089f0e:	2b16      	cmp	r3, #22
 8089f10:	d004      	beq.n	8089f1c <mbedtls_ssl_handle_message_type+0x14>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 8089f12:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8089f14:	2b15      	cmp	r3, #21
 8089f16:	d006      	beq.n	8089f26 <mbedtls_ssl_handle_message_type+0x1e>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 8089f18:	2000      	movs	r0, #0
 8089f1a:	bd10      	pop	{r4, pc}
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 8089f1c:	f7ff ffca 	bl	8089eb4 <mbedtls_ssl_prepare_handshake_record>
 8089f20:	2800      	cmp	r0, #0
 8089f22:	d0f6      	beq.n	8089f12 <mbedtls_ssl_handle_message_type+0xa>
 8089f24:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
    {
        if( ssl->in_msglen != 2 )
 8089f26:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089f28:	2b02      	cmp	r3, #2
 8089f2a:	d10c      	bne.n	8089f46 <mbedtls_ssl_handle_message_type+0x3e>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 8089f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8089f2e:	781a      	ldrb	r2, [r3, #0]
 8089f30:	2a02      	cmp	r2, #2
 8089f32:	d00a      	beq.n	8089f4a <mbedtls_ssl_handle_message_type+0x42>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8089f34:	2a01      	cmp	r2, #1
 8089f36:	d10a      	bne.n	8089f4e <mbedtls_ssl_handle_message_type+0x46>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 8089f38:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8089f3a:	b153      	cbz	r3, 8089f52 <mbedtls_ssl_handle_message_type+0x4a>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 8089f3c:	2b64      	cmp	r3, #100	; 0x64
 8089f3e:	4806      	ldr	r0, [pc, #24]	; (8089f58 <mbedtls_ssl_handle_message_type+0x50>)
 8089f40:	bf08      	it	eq
 8089f42:	2000      	moveq	r0, #0
 8089f44:	bd10      	pop	{r4, pc}
            /* Note: Standard allows for more than one 2 byte alert
               to be packed in a single message, but Mbed TLS doesn't
               currently support this. */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8089f46:	4805      	ldr	r0, [pc, #20]	; (8089f5c <mbedtls_ssl_handle_message_type+0x54>)
 8089f48:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 8089f4a:	4805      	ldr	r0, [pc, #20]	; (8089f60 <mbedtls_ssl_handle_message_type+0x58>)
 8089f4c:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 8089f4e:	4802      	ldr	r0, [pc, #8]	; (8089f58 <mbedtls_ssl_handle_message_type+0x50>)
 8089f50:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 8089f52:	4804      	ldr	r0, [pc, #16]	; (8089f64 <mbedtls_ssl_handle_message_type+0x5c>)
        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
}
 8089f54:	bd10      	pop	{r4, pc}
 8089f56:	bf00      	nop
 8089f58:	ffff9980 	.word	0xffff9980
 8089f5c:	ffff8e00 	.word	0xffff8e00
 8089f60:	ffff8880 	.word	0xffff8880
 8089f64:	ffff8780 	.word	0xffff8780

08089f68 <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 8089f68:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 8089f6a:	b180      	cbz	r0, 8089f8e <mbedtls_ssl_send_alert_message+0x26>
 8089f6c:	6804      	ldr	r4, [r0, #0]
 8089f6e:	b174      	cbz	r4, 8089f8e <mbedtls_ssl_send_alert_message+0x26>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 8089f70:	2415      	movs	r4, #21
 8089f72:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
 8089f76:	2402      	movs	r4, #2
 8089f78:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
 8089f7c:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 8089f80:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
 8089f82:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8089f86:	705a      	strb	r2, [r3, #1]
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 8089f88:	bc10      	pop	{r4}
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8089f8a:	f7ff be39 	b.w	8089c00 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 8089f8e:	4801      	ldr	r0, [pc, #4]	; (8089f94 <mbedtls_ssl_send_alert_message+0x2c>)
 8089f90:	bc10      	pop	{r4}
 8089f92:	4770      	bx	lr
 8089f94:	ffff8f00 	.word	0xffff8f00

08089f98 <mbedtls_ssl_read_record_layer>:

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 8089f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 8089f9c:	6f81      	ldr	r1, [r0, #120]	; 0x78

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 8089f9e:	b096      	sub	sp, #88	; 0x58
 8089fa0:	4604      	mov	r4, r0
 8089fa2:	6e83      	ldr	r3, [r0, #104]	; 0x68
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 8089fa4:	b181      	cbz	r1, 8089fc8 <mbedtls_ssl_read_record_layer+0x30>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 8089fa6:	2b00      	cmp	r3, #0
 8089fa8:	f040 821c 	bne.w	808a3e4 <mbedtls_ssl_read_record_layer+0x44c>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 8089fac:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8089fae:	4291      	cmp	r1, r2
 8089fb0:	d206      	bcs.n	8089fc0 <mbedtls_ssl_read_record_layer+0x28>
        {
            ssl->in_msglen -= ssl->in_hslen;
 8089fb2:	1a52      	subs	r2, r2, r1
 8089fb4:	6702      	str	r2, [r0, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 8089fb6:	6e40      	ldr	r0, [r0, #100]	; 0x64
                     ssl->in_msglen );
 8089fb8:	4401      	add	r1, r0
 8089fba:	f009 f87b 	bl	80930b4 <memmove>
 8089fbe:	e000      	b.n	8089fc2 <mbedtls_ssl_read_record_layer+0x2a>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 8089fc0:	6703      	str	r3, [r0, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 8089fc2:	2300      	movs	r3, #0
 8089fc4:	67a3      	str	r3, [r4, #120]	; 0x78
 8089fc6:	e003      	b.n	8089fd0 <mbedtls_ssl_read_record_layer+0x38>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 8089fc8:	2b00      	cmp	r3, #0
 8089fca:	f040 820f 	bne.w	808a3ec <mbedtls_ssl_read_record_layer+0x454>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 8089fce:	6703      	str	r3, [r0, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
 8089fd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089fd2:	2b00      	cmp	r3, #0
 8089fd4:	f040 820a 	bne.w	808a3ec <mbedtls_ssl_read_record_layer+0x454>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 8089fd8:	2105      	movs	r1, #5
 8089fda:	4620      	mov	r0, r4
 8089fdc:	f7ff fd92 	bl	8089b04 <mbedtls_ssl_fetch_input>
 8089fe0:	2800      	cmp	r0, #0
 8089fe2:	f040 8204 	bne.w	808a3ee <mbedtls_ssl_read_record_layer+0x456>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 8089fe6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8089fe8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 8089fea:	7813      	ldrb	r3, [r2, #0]
 8089fec:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8089fee:	7805      	ldrb	r5, [r0, #0]
 8089ff0:	7841      	ldrb	r1, [r0, #1]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8089ff2:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8089ff4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8089ff8:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8089ffa:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 8089ffc:	7855      	ldrb	r5, [r2, #1]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 8089ffe:	6820      	ldr	r0, [r4, #0]
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 808a000:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 808a002:	d905      	bls.n	808a010 <mbedtls_ssl_read_record_layer+0x78>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808a004:	220a      	movs	r2, #10
 808a006:	2102      	movs	r1, #2
 808a008:	4620      	mov	r0, r4
 808a00a:	f7ff ffad 	bl	8089f68 <mbedtls_ssl_send_alert_message>
 808a00e:	e1eb      	b.n	808a3e8 <mbedtls_ssl_read_record_layer+0x450>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 808a010:	68a3      	ldr	r3, [r4, #8]
 808a012:	429d      	cmp	r5, r3
 808a014:	f040 81e8 	bne.w	808a3e8 <mbedtls_ssl_read_record_layer+0x450>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 808a018:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 808a01c:	429a      	cmp	r2, r3
 808a01e:	f300 81e3 	bgt.w	808a3e8 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 808a022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808a024:	6d22      	ldr	r2, [r4, #80]	; 0x50
 808a026:	1a9b      	subs	r3, r3, r2
 808a028:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 808a02c:	330d      	adds	r3, #13
 808a02e:	4299      	cmp	r1, r3
 808a030:	f200 81da 	bhi.w	808a3e8 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 808a034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 808a036:	b923      	cbnz	r3, 808a042 <mbedtls_ssl_read_record_layer+0xaa>
    {
        if( ssl->in_msglen < 1 ||
 808a038:	1e4b      	subs	r3, r1, #1
 808a03a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808a03e:	d30c      	bcc.n	808a05a <mbedtls_ssl_read_record_layer+0xc2>
 808a040:	e1d2      	b.n	808a3e8 <mbedtls_ssl_read_record_layer+0x450>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 808a042:	689b      	ldr	r3, [r3, #8]
 808a044:	4299      	cmp	r1, r3
 808a046:	f0c0 81cf 	bcc.w	808a3e8 <mbedtls_ssl_read_record_layer+0x450>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 808a04a:	68e2      	ldr	r2, [r4, #12]
 808a04c:	2a00      	cmp	r2, #0
 808a04e:	dd04      	ble.n	808a05a <mbedtls_ssl_read_record_layer+0xc2>
 808a050:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 808a054:	4299      	cmp	r1, r3
 808a056:	f200 81c7 	bhi.w	808a3e8 <mbedtls_ssl_read_record_layer+0x450>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 808a05a:	3105      	adds	r1, #5
 808a05c:	4620      	mov	r0, r4
 808a05e:	f7ff fd51 	bl	8089b04 <mbedtls_ssl_fetch_input>
 808a062:	2800      	cmp	r0, #0
 808a064:	f040 81c3 	bne.w	808a3ee <mbedtls_ssl_read_record_layer+0x456>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 808a068:	6b66      	ldr	r6, [r4, #52]	; 0x34
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
 808a06a:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 808a06c:	2e00      	cmp	r6, #0
 808a06e:	f000 81bd 	beq.w	808a3ec <mbedtls_ssl_read_record_layer+0x454>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 808a072:	6a23      	ldr	r3, [r4, #32]
 808a074:	2b00      	cmp	r3, #0
 808a076:	f000 81b5 	beq.w	808a3e4 <mbedtls_ssl_read_record_layer+0x44c>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 808a07a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 808a07e:	b103      	cbz	r3, 808a082 <mbedtls_ssl_read_record_layer+0xea>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 808a080:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
 808a082:	6f25      	ldr	r5, [r4, #112]	; 0x70
 808a084:	68b2      	ldr	r2, [r6, #8]
 808a086:	4295      	cmp	r5, r2
 808a088:	f0c0 819d 	bcc.w	808a3c6 <mbedtls_ssl_read_record_layer+0x42e>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 808a08c:	2b06      	cmp	r3, #6
 808a08e:	d001      	beq.n	808a094 <mbedtls_ssl_read_record_layer+0xfc>
 808a090:	2b08      	cmp	r3, #8
 808a092:	d175      	bne.n	808a180 <mbedtls_ssl_read_record_layer+0x1e8>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 808a094:	6833      	ldr	r3, [r6, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 808a096:	68f2      	ldr	r2, [r6, #12]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a098:	7f1b      	ldrb	r3, [r3, #28]
 808a09a:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 808a09e:	6933      	ldr	r3, [r6, #16]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a0a0:	bf14      	ite	ne
 808a0a2:	2708      	movne	r7, #8
 808a0a4:	2710      	moveq	r7, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 808a0a6:	1ad3      	subs	r3, r2, r3

        if( ssl->in_msglen < explicit_iv_len + taglen )
 808a0a8:	19da      	adds	r2, r3, r7
 808a0aa:	4295      	cmp	r5, r2
 808a0ac:	f0c0 818b 	bcc.w	808a3c6 <mbedtls_ssl_read_record_layer+0x42e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 808a0b0:	1aed      	subs	r5, r5, r3
 808a0b2:	1bed      	subs	r5, r5, r7

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
 808a0b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
 808a0b6:	6725      	str	r5, [r4, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
 808a0b8:	6810      	ldr	r0, [r2, #0]
 808a0ba:	6851      	ldr	r1, [r2, #4]
 808a0bc:	ab0a      	add	r3, sp, #40	; 0x28
 808a0be:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 808a0c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a0c2:	68a2      	ldr	r2, [r4, #8]
        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
 808a0c4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 808a0c8:	68e3      	ldr	r3, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a0ca:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 808a0ce:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 808a0d2:	0a2b      	lsrs	r3, r5, #8
 808a0d4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        add_data[12] = ssl->in_msglen & 0xFF;
 808a0d8:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 808a0dc:	6933      	ldr	r3, [r6, #16]
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 808a0de:	68f2      	ldr	r2, [r6, #12]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
 808a0e0:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
        add_data[12] = ssl->in_msglen & 0xFF;

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 808a0e4:	f106 0028 	add.w	r0, r6, #40	; 0x28
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 808a0e8:	1ad2      	subs	r2, r2, r3
 808a0ea:	6e21      	ldr	r1, [r4, #96]	; 0x60
 808a0ec:	4418      	add	r0, r3
 808a0ee:	f008 ffd6 	bl	809309e <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 808a0f2:	eb08 0305 	add.w	r3, r8, r5
 808a0f6:	9305      	str	r3, [sp, #20]
 808a0f8:	ab09      	add	r3, sp, #36	; 0x24
 808a0fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a0fc:	9304      	str	r3, [sp, #16]
 808a0fe:	230d      	movs	r3, #13
 808a100:	9300      	str	r3, [sp, #0]
 808a102:	9706      	str	r7, [sp, #24]
 808a104:	f8cd 800c 	str.w	r8, [sp, #12]
 808a108:	9502      	str	r5, [sp, #8]
 808a10a:	f8cd 8004 	str.w	r8, [sp, #4]
 808a10e:	68c2      	ldr	r2, [r0, #12]
 808a110:	f100 0128 	add.w	r1, r0, #40	; 0x28
 808a114:	ab0a      	add	r3, sp, #40	; 0x28
 808a116:	3090      	adds	r0, #144	; 0x90
 808a118:	f7f9 fac4 	bl	80836a4 <mbedtls_cipher_auth_decrypt>
 808a11c:	b128      	cbz	r0, 808a12a <mbedtls_ssl_read_record_layer+0x192>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 808a11e:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 808a122:	f000 8150 	beq.w	808a3c6 <mbedtls_ssl_read_record_layer+0x42e>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 808a126:	b328      	cbz	r0, 808a174 <mbedtls_ssl_read_record_layer+0x1dc>
 808a128:	e161      	b.n	808a3ee <mbedtls_ssl_read_record_layer+0x456>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
 808a12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808a12c:	429d      	cmp	r5, r3
 808a12e:	f040 8159 	bne.w	808a3e4 <mbedtls_ssl_read_record_layer+0x44c>
 808a132:	e007      	b.n	808a144 <mbedtls_ssl_read_record_layer+0x1ac>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 808a134:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 808a138:	2b00      	cmp	r3, #0
 808a13a:	f040 8144 	bne.w	808a3c6 <mbedtls_ssl_read_record_layer+0x42e>
        auth_done++;

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
 808a13e:	2d00      	cmp	r5, #0
 808a140:	f000 8141 	beq.w	808a3c6 <mbedtls_ssl_read_record_layer+0x42e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
 808a144:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a146:	2b00      	cmp	r3, #0
 808a148:	f040 8144 	bne.w	808a3d4 <mbedtls_ssl_read_record_layer+0x43c>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 808a14c:	68e3      	ldr	r3, [r4, #12]
 808a14e:	2b03      	cmp	r3, #3
 808a150:	f000 813b 	beq.w	808a3ca <mbedtls_ssl_read_record_layer+0x432>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 808a154:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 808a156:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 808a158:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 808a15a:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 808a15c:	f300 8133 	bgt.w	808a3c6 <mbedtls_ssl_read_record_layer+0x42e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 808a160:	2208      	movs	r2, #8
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
 808a162:	6d61      	ldr	r1, [r4, #84]	; 0x54
 808a164:	3a01      	subs	r2, #1
 808a166:	5c8b      	ldrb	r3, [r1, r2]
 808a168:	3301      	adds	r3, #1
 808a16a:	b2db      	uxtb	r3, r3
 808a16c:	548b      	strb	r3, [r1, r2]
 808a16e:	2b00      	cmp	r3, #0
 808a170:	f000 8133 	beq.w	808a3da <mbedtls_ssl_read_record_layer+0x442>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 808a174:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808a17a:	f240 8137 	bls.w	808a3ec <mbedtls_ssl_read_record_layer+0x454>
 808a17e:	e133      	b.n	808a3e8 <mbedtls_ssl_read_record_layer+0x450>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 808a180:	2b02      	cmp	r3, #2
 808a182:	f040 812f 	bne.w	808a3e4 <mbedtls_ssl_read_record_layer+0x44c>
        int ret;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        size_t dec_msglen;
        size_t minlen = 0;
        size_t olen = 0;
 808a186:	2300      	movs	r3, #0
 808a188:	930a      	str	r3, [sp, #40]	; 0x28

        /*
         * Check immediate ciphertext sanity
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a18a:	68e0      	ldr	r0, [r4, #12]
 808a18c:	68f2      	ldr	r2, [r6, #12]
            minlen += ssl->transform_in->ivlen;
 808a18e:	2802      	cmp	r0, #2
 808a190:	bfa8      	it	ge
 808a192:	4613      	movge	r3, r2
#endif

        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 808a194:	18d1      	adds	r1, r2, r3
 808a196:	428d      	cmp	r5, r1
 808a198:	f0c0 8115 	bcc.w	808a3c6 <mbedtls_ssl_read_record_layer+0x42e>
 808a19c:	6971      	ldr	r1, [r6, #20]
 808a19e:	3101      	adds	r1, #1
 808a1a0:	440b      	add	r3, r1
 808a1a2:	429d      	cmp	r5, r3
 808a1a4:	f0c0 810f 	bcc.w	808a3c6 <mbedtls_ssl_read_record_layer+0x42e>
#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */

        /*
         * Check length sanity
         */
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 808a1a8:	fbb5 f6f2 	udiv	r6, r5, r2
 808a1ac:	fb02 5616 	mls	r6, r2, r6, r5
 808a1b0:	2e00      	cmp	r6, #0
 808a1b2:	f040 8108 	bne.w	808a3c6 <mbedtls_ssl_read_record_layer+0x42e>

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a1b6:	2801      	cmp	r0, #1
                                ssl->transform_in->maclen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }

        dec_msglen = ssl->in_msglen;
        dec_msg = ssl->in_msg;
 808a1b8:	6e63      	ldr	r3, [r4, #100]	; 0x64

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a1ba:	dd0d      	ble.n	808a1d8 <mbedtls_ssl_read_record_layer+0x240>
        {
            dec_msglen -= ssl->transform_in->ivlen;
 808a1bc:	1aad      	subs	r5, r5, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 808a1be:	4632      	mov	r2, r6
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;
 808a1c0:	6725      	str	r5, [r4, #112]	; 0x70

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 808a1c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 808a1c4:	68c8      	ldr	r0, [r1, #12]
 808a1c6:	4290      	cmp	r0, r2
 808a1c8:	d906      	bls.n	808a1d8 <mbedtls_ssl_read_record_layer+0x240>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 808a1ca:	6e20      	ldr	r0, [r4, #96]	; 0x60
 808a1cc:	4411      	add	r1, r2
 808a1ce:	5c80      	ldrb	r0, [r0, r2]
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 808a1d0:	3201      	adds	r2, #1
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 808a1d2:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
 808a1d6:	e7f4      	b.n	808a1c2 <mbedtls_ssl_read_record_layer+0x22a>
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 808a1d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a1da:	af0a      	add	r7, sp, #40	; 0x28
 808a1dc:	9702      	str	r7, [sp, #8]
 808a1de:	9301      	str	r3, [sp, #4]
 808a1e0:	9500      	str	r5, [sp, #0]
 808a1e2:	68c2      	ldr	r2, [r0, #12]
 808a1e4:	f100 0128 	add.w	r1, r0, #40	; 0x28
 808a1e8:	3090      	adds	r0, #144	; 0x90
 808a1ea:	f7f9 fa0f 	bl	808360c <mbedtls_cipher_crypt>
 808a1ee:	2800      	cmp	r0, #0
 808a1f0:	f040 80fd 	bne.w	808a3ee <mbedtls_ssl_read_record_layer+0x456>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( dec_msglen != olen )
 808a1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a1f6:	429d      	cmp	r5, r3
 808a1f8:	f040 80f4 	bne.w	808a3e4 <mbedtls_ssl_read_record_layer+0x44c>
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 808a1fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a1fe:	6e65      	ldr	r5, [r4, #100]	; 0x64

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 808a200:	6b61      	ldr	r1, [r4, #52]	; 0x34
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 808a202:	18ea      	adds	r2, r5, r3
 808a204:	f812 ac01 	ldrb.w	sl, [r2, #-1]

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 808a208:	f8d1 c014 	ldr.w	ip, [r1, #20]
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 808a20c:	f10a 0e01 	add.w	lr, sl, #1

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 808a210:	eb0e 020c 	add.w	r2, lr, ip
 808a214:	4293      	cmp	r3, r2
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 808a216:	68e2      	ldr	r2, [r4, #12]
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
#endif
            padlen = 0;
 808a218:	bf34      	ite	cc
 808a21a:	4686      	movcc	lr, r0
{
    size_t i;
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
#if defined(SSL_SOME_MODES_USE_MAC)
    size_t padlen = 0, correct = 1;
 808a21c:	2001      	movcs	r0, #1
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 808a21e:	2a00      	cmp	r2, #0
 808a220:	f340 80e0 	ble.w	808a3e4 <mbedtls_ssl_read_record_layer+0x44c>
             *                     ssl->transform_in->maclen
             *
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
 808a224:	4573      	cmp	r3, lr
 808a226:	bf34      	ite	cc
 808a228:	2000      	movcc	r0, #0
 808a22a:	f000 0001 	andcs.w	r0, r0, #1
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
            size_t padding_idx = ssl->in_msglen - padlen;
 808a22e:	ebce 0203 	rsb	r2, lr, r3
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );
 808a232:	f50c 5c00 	add.w	ip, ip, #8192	; 0x2000
 808a236:	4562      	cmp	r2, ip
 808a238:	bf8c      	ite	hi
 808a23a:	2000      	movhi	r0, #0
 808a23c:	f000 0001 	andls.w	r0, r0, #1
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 808a240:	f04f 0800 	mov.w	r8, #0
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a244:	46c4      	mov	ip, r8
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a246:	fb00 5202 	mla	r2, r0, r2, r5
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 808a24a:	f04f 0901 	mov.w	r9, #1

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a24e:	f10e 3aff 	add.w	sl, lr, #4294967295

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
 808a252:	45e6      	cmp	lr, ip
 808a254:	bf94      	ite	ls
 808a256:	f04f 0900 	movls.w	r9, #0
 808a25a:	f009 0901 	andhi.w	r9, r9, #1
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a25e:	f812 500c 	ldrb.w	r5, [r2, ip]
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a262:	f10c 0c01 	add.w	ip, ip, #1
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a266:	4555      	cmp	r5, sl
 808a268:	bf14      	ite	ne
 808a26a:	2500      	movne	r5, #0
 808a26c:	2501      	moveq	r5, #1
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a26e:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a272:	fb09 8805 	mla	r8, r9, r5, r8
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a276:	d1ec      	bne.n	808a252 <mbedtls_ssl_read_record_layer+0x2ba>
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
            }

            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 808a278:	45c6      	cmp	lr, r8
 808a27a:	bf14      	ite	ne
 808a27c:	2500      	movne	r5, #0
 808a27e:	f000 0501 	andeq.w	r5, r0, #1

#if defined(MBEDTLS_SSL_DEBUG_ALL)
            if( padlen > 0 && correct == 0 )
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
#endif
            padlen &= correct * 0x1FF;
 808a282:	ea4f 2a45 	mov.w	sl, r5, lsl #9
 808a286:	ebc5 0a0a 	rsb	sl, r5, sl
 808a28a:	ea0a 0a0e 	and.w	sl, sl, lr
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->in_msglen -= padlen;
 808a28e:	ebca 0303 	rsb	r3, sl, r3
 808a292:	6723      	str	r3, [r4, #112]	; 0x70
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 808a294:	694a      	ldr	r2, [r1, #20]
 808a296:	1a9b      	subs	r3, r3, r2

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 808a298:	6de2      	ldr	r2, [r4, #92]	; 0x5c
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 808a29a:	6723      	str	r3, [r4, #112]	; 0x70

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 808a29c:	0a1b      	lsrs	r3, r3, #8
 808a29e:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 808a2a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 808a2a2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 808a2a4:	705a      	strb	r2, [r3, #1]
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 808a2a6:	68e3      	ldr	r3, [r4, #12]
 808a2a8:	2b00      	cmp	r3, #0
 808a2aa:	f340 809b 	ble.w	808a3e4 <mbedtls_ssl_read_record_layer+0x44c>
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a2ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 808a2b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a2b2:	6802      	ldr	r2, [r0, #0]
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 808a2b4:	eb0a 0903 	add.w	r9, sl, r3
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a2b8:	7a52      	ldrb	r2, [r2, #9]
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 808a2ba:	f5b9 7f80 	cmp.w	r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a2be:	f1a2 0203 	sub.w	r2, r2, #3
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 808a2c2:	bf88      	it	hi
 808a2c4:	f5a9 7680 	subhi.w	r6, r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a2c8:	2a04      	cmp	r2, #4
 808a2ca:	f200 808b 	bhi.w	808a3e4 <mbedtls_ssl_read_record_layer+0x44c>
 808a2ce:	e8df f002 	tbb	[pc, r2]
 808a2d2:	0303      	.short	0x0303
 808a2d4:	0389      	.short	0x0389
 808a2d6:	0b          	.byte	0x0b
 808a2d7:	00          	.byte	0x00
                case MBEDTLS_MD_MD5:
                case MBEDTLS_MD_SHA1:
                case MBEDTLS_MD_SHA256:
                    /* 8 bytes of message size, 64-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
                                ( 13 + ssl->in_msglen          + 8 ) / 64;
 808a2d8:	f103 0215 	add.w	r2, r3, #21
 808a2dc:	f109 0115 	add.w	r1, r9, #21
 808a2e0:	0992      	lsrs	r2, r2, #6
 808a2e2:	ebc2 1391 	rsb	r3, r2, r1, lsr #6
 808a2e6:	e006      	b.n	808a2f6 <mbedtls_ssl_read_record_layer+0x35e>
#endif
#if defined(MBEDTLS_SHA512_C)
                case MBEDTLS_MD_SHA384:
                    /* 16 bytes of message size, 128-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 16 ) / 128 -
                                ( 13 + ssl->in_msglen          + 16 ) / 128;
 808a2e8:	f103 021d 	add.w	r2, r3, #29
 808a2ec:	f109 011d 	add.w	r1, r9, #29
 808a2f0:	09d2      	lsrs	r2, r2, #7
 808a2f2:	ebc2 13d1 	rsb	r3, r2, r1, lsr #7
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 808a2f6:	ea4f 2805 	mov.w	r8, r5, lsl #8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 808a2fa:	2208      	movs	r2, #8
 808a2fc:	6d61      	ldr	r1, [r4, #84]	; 0x54
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 808a2fe:	ebc5 0808 	rsb	r8, r5, r8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 808a302:	3044      	adds	r0, #68	; 0x44
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 808a304:	ea08 0803 	and.w	r8, r8, r3

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 808a308:	f7fd fce0 	bl	8087ccc <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 808a30c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a30e:	2203      	movs	r2, #3
 808a310:	6da1      	ldr	r1, [r4, #88]	; 0x58
 808a312:	3044      	adds	r0, #68	; 0x44
 808a314:	f7fd fcda 	bl	8087ccc <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 808a318:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a31a:	2202      	movs	r2, #2
 808a31c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 808a31e:	3044      	adds	r0, #68	; 0x44
 808a320:	f7fd fcd4 	bl	8087ccc <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 808a324:	6b60      	ldr	r0, [r4, #52]	; 0x34
                             ssl->in_msglen );
 808a326:	6f22      	ldr	r2, [r4, #112]	; 0x70
 808a328:	6e61      	ldr	r1, [r4, #100]	; 0x64
 808a32a:	3044      	adds	r0, #68	; 0x44
 808a32c:	f7fd fcce 	bl	8087ccc <mbedtls_md_hmac_update>
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
 808a330:	6e62      	ldr	r2, [r4, #100]	; 0x64
 808a332:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a334:	4413      	add	r3, r2
 808a336:	449a      	add	sl, r3
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 808a338:	2200      	movs	r2, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 808a33a:	4553      	cmp	r3, sl
 808a33c:	d003      	beq.n	808a346 <mbedtls_ssl_read_record_layer+0x3ae>
        acc ^= *p;
 808a33e:	f813 1b01 	ldrb.w	r1, [r3], #1
 808a342:	404a      	eors	r2, r1
 808a344:	e7f9      	b.n	808a33a <mbedtls_ssl_read_record_layer+0x3a2>
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 808a346:	6b60      	ldr	r0, [r4, #52]	; 0x34
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
 808a348:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 808a34c:	4639      	mov	r1, r7
 808a34e:	3044      	adds	r0, #68	; 0x44

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
    (void) force;
 808a350:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 808a354:	f7fd fcca 	bl	8087cec <mbedtls_md_hmac_finish>

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 808a358:	f04f 0a00 	mov.w	sl, #0
 808a35c:	f108 0801 	add.w	r8, r8, #1
 808a360:	45d0      	cmp	r8, sl
 808a362:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a364:	d906      	bls.n	808a374 <mbedtls_ssl_read_record_layer+0x3dc>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 808a366:	6e61      	ldr	r1, [r4, #100]	; 0x64
 808a368:	3044      	adds	r0, #68	; 0x44
 808a36a:	f7fd fd07 	bl	8087d7c <mbedtls_md_process>
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 808a36e:	f10a 0a01 	add.w	sl, sl, #1
 808a372:	e7f5      	b.n	808a360 <mbedtls_ssl_read_record_layer+0x3c8>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );

            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 808a374:	3044      	adds	r0, #68	; 0x44
 808a376:	f7fd fce9 	bl	8087d4c <mbedtls_md_hmac_reset>
            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
                                 max_len - min_len + ssl->transform_in->maclen );
 808a37a:	6b63      	ldr	r3, [r4, #52]	; 0x34

            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
 808a37c:	6e61      	ldr	r1, [r4, #100]	; 0x64
                                 max_len - min_len + ssl->transform_in->maclen );
 808a37e:	6958      	ldr	r0, [r3, #20]
 808a380:	440e      	add	r6, r1
 808a382:	4481      	add	r9, r0
 808a384:	4489      	add	r9, r1
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 808a386:	2300      	movs	r3, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 808a388:	454e      	cmp	r6, r9
 808a38a:	d003      	beq.n	808a394 <mbedtls_ssl_read_record_layer+0x3fc>
        acc ^= *p;
 808a38c:	f816 2b01 	ldrb.w	r2, [r6], #1
 808a390:	4053      	eors	r3, r2
 808a392:	e7f9      	b.n	808a388 <mbedtls_ssl_read_record_layer+0x3f0>

    force = acc;
 808a394:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    (void) force;
 808a398:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 808a39c:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 808a3a0:	2300      	movs	r3, #0
 808a3a2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    for( i = 0; i < n; i++ )
 808a3a6:	4298      	cmp	r0, r3
 808a3a8:	f43f aec4 	beq.w	808a134 <mbedtls_ssl_read_record_layer+0x19c>
 808a3ac:	eb0c 0203 	add.w	r2, ip, r3
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 808a3b0:	5c8a      	ldrb	r2, [r1, r2]
 808a3b2:	5cfe      	ldrb	r6, [r7, r3]
        diff |= x ^ y;
 808a3b4:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
 808a3b8:	4072      	eors	r2, r6
 808a3ba:	ea4e 0202 	orr.w	r2, lr, r2
 808a3be:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808a3c2:	3301      	adds	r3, #1
 808a3c4:	e7ef      	b.n	808a3a6 <mbedtls_ssl_read_record_layer+0x40e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 808a3c6:	480b      	ldr	r0, [pc, #44]	; (808a3f4 <mbedtls_ssl_read_record_layer+0x45c>)
 808a3c8:	e011      	b.n	808a3ee <mbedtls_ssl_read_record_layer+0x456>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 808a3ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808a3cc:	2b17      	cmp	r3, #23
 808a3ce:	f43f aec1 	beq.w	808a154 <mbedtls_ssl_read_record_layer+0x1bc>
 808a3d2:	e009      	b.n	808a3e8 <mbedtls_ssl_read_record_layer+0x450>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
 808a3d4:	2300      	movs	r3, #0
 808a3d6:	67e3      	str	r3, [r4, #124]	; 0x7c
 808a3d8:	e6c2      	b.n	808a160 <mbedtls_ssl_read_record_layer+0x1c8>
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 808a3da:	2a00      	cmp	r2, #0
 808a3dc:	f47f aec1 	bne.w	808a162 <mbedtls_ssl_read_record_layer+0x1ca>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 808a3e0:	4805      	ldr	r0, [pc, #20]	; (808a3f8 <mbedtls_ssl_read_record_layer+0x460>)
 808a3e2:	e004      	b.n	808a3ee <mbedtls_ssl_read_record_layer+0x456>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808a3e4:	4805      	ldr	r0, [pc, #20]	; (808a3fc <mbedtls_ssl_read_record_layer+0x464>)
 808a3e6:	e002      	b.n	808a3ee <mbedtls_ssl_read_record_layer+0x456>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 808a3e8:	4805      	ldr	r0, [pc, #20]	; (808a400 <mbedtls_ssl_read_record_layer+0x468>)
 808a3ea:	e000      	b.n	808a3ee <mbedtls_ssl_read_record_layer+0x456>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
 808a3ec:	2000      	movs	r0, #0
}
 808a3ee:	b016      	add	sp, #88	; 0x58
 808a3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a3f4:	ffff8e80 	.word	0xffff8e80
 808a3f8:	ffff9480 	.word	0xffff9480
 808a3fc:	ffff9400 	.word	0xffff9400
 808a400:	ffff8e00 	.word	0xffff8e00

0808a404 <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 808a404:	b538      	push	{r3, r4, r5, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 808a406:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 808a40a:	4605      	mov	r5, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 808a40c:	b98c      	cbnz	r4, 808a432 <mbedtls_ssl_read_record+0x2e>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 808a40e:	4628      	mov	r0, r5
 808a410:	f7ff fdc2 	bl	8089f98 <mbedtls_ssl_read_record_layer>
 808a414:	b988      	cbnz	r0, 808a43a <mbedtls_ssl_read_record+0x36>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
                return( ret );
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 808a416:	4628      	mov	r0, r5
 808a418:	f7ff fd76 	bl	8089f08 <mbedtls_ssl_handle_message_type>

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 808a41c:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
 808a420:	d0f5      	beq.n	808a40e <mbedtls_ssl_read_record+0xa>

        if( 0 != ret )
 808a422:	b950      	cbnz	r0, 808a43a <mbedtls_ssl_read_record+0x36>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808a424:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808a426:	2b16      	cmp	r3, #22
 808a428:	d108      	bne.n	808a43c <mbedtls_ssl_read_record+0x38>
        {
            mbedtls_ssl_update_handshake_status( ssl );
 808a42a:	4628      	mov	r0, r5
 808a42c:	f7ff fd5c 	bl	8089ee8 <mbedtls_ssl_update_handshake_status>
 808a430:	e004      	b.n	808a43c <mbedtls_ssl_read_record+0x38>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
        ssl->keep_current_message = 0;
 808a432:	2400      	movs	r4, #0
 808a434:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 808a438:	e000      	b.n	808a43c <mbedtls_ssl_read_record+0x38>
 808a43a:	4604      	mov	r4, r0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
 808a43c:	4620      	mov	r0, r4
 808a43e:	bd38      	pop	{r3, r4, r5, pc}

0808a440 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 808a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808a442:	6c03      	ldr	r3, [r0, #64]	; 0x40

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 808a444:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808a446:	681b      	ldr	r3, [r3, #0]
 808a448:	7a9a      	ldrb	r2, [r3, #10]
 808a44a:	2a0b      	cmp	r2, #11
 808a44c:	d809      	bhi.n	808a462 <mbedtls_ssl_write_certificate+0x22>
 808a44e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 808a452:	40d3      	lsrs	r3, r2
 808a454:	07da      	lsls	r2, r3, #31
 808a456:	d504      	bpl.n	808a462 <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 808a458:	6863      	ldr	r3, [r4, #4]
        return( 0 );
 808a45a:	2000      	movs	r0, #0
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 808a45c:	3301      	adds	r3, #1
 808a45e:	6063      	str	r3, [r4, #4]
        return( 0 );
 808a460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a462:	6822      	ldr	r2, [r4, #0]
 808a464:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
 808a468:	07db      	lsls	r3, r3, #31
 808a46a:	d403      	bmi.n	808a474 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
 808a46c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 808a470:	2b00      	cmp	r3, #0
 808a472:	d0f1      	beq.n	808a458 <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808a474:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a476:	b10b      	cbz	r3, 808a47c <mbedtls_ssl_write_certificate+0x3c>
 808a478:	685b      	ldr	r3, [r3, #4]
 808a47a:	b90b      	cbnz	r3, 808a480 <mbedtls_ssl_write_certificate+0x40>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808a47c:	6c93      	ldr	r3, [r2, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 808a47e:	b30b      	cbz	r3, 808a4c4 <mbedtls_ssl_write_certificate+0x84>
 808a480:	681e      	ldr	r6, [r3, #0]
 808a482:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 808a484:	b1fe      	cbz	r6, 808a4c6 <mbedtls_ssl_write_certificate+0x86>
    {
        n = crt->raw.len;
 808a486:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 808a488:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
 808a48c:	321d      	adds	r2, #29
 808a48e:	4295      	cmp	r5, r2
 808a490:	d836      	bhi.n	808a500 <mbedtls_ssl_write_certificate+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 808a492:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808a496:	0c29      	lsrs	r1, r5, #16
 808a498:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 808a49a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808a49e:	0a29      	lsrs	r1, r5, #8
 808a4a0:	441a      	add	r2, r3
 808a4a2:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 808a4a4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 808a4a8:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 808a4aa:	441a      	add	r2, r3
 808a4ac:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 808a4ae:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808a4b2:	68b1      	ldr	r1, [r6, #8]
 808a4b4:	462a      	mov	r2, r5
 808a4b6:	4438      	add	r0, r7
 808a4b8:	f008 fdf1 	bl	809309e <memcpy>
        i += n; crt = crt->next;
 808a4bc:	19eb      	adds	r3, r5, r7
 808a4be:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 808a4c2:	e7df      	b.n	808a484 <mbedtls_ssl_write_certificate+0x44>
 808a4c4:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 808a4c6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a4ca:	1fda      	subs	r2, r3, #7
 808a4cc:	0c10      	lsrs	r0, r2, #16
 808a4ce:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 808a4d0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a4d4:	0a10      	lsrs	r0, r2, #8
 808a4d6:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 808a4d8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a4dc:	4620      	mov	r0, r4
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 808a4de:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
 808a4e0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808a4e4:	2316      	movs	r3, #22
 808a4e6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 808a4ea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808a4ee:	220b      	movs	r2, #11
 808a4f0:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 808a4f2:	6863      	ldr	r3, [r4, #4]
 808a4f4:	3301      	adds	r3, #1
 808a4f6:	6063      	str	r3, [r4, #4]
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 808a4f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a4fc:	f7ff bb80 	b.w	8089c00 <mbedtls_ssl_write_record>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 808a500:	4800      	ldr	r0, [pc, #0]	; (808a504 <mbedtls_ssl_write_certificate+0xc4>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 808a502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808a504:	ffff8b00 	.word	0xffff8b00

0808a508 <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 808a508:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
 808a50a:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 808a50e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
 808a512:	2201      	movs	r2, #1
 808a514:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 808a518:	700a      	strb	r2, [r1, #0]

    ssl->state++;
 808a51a:	6842      	ldr	r2, [r0, #4]
 808a51c:	3201      	adds	r2, #1
 808a51e:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a520:	f7ff bb6e 	b.w	8089c00 <mbedtls_ssl_write_record>

0808a524 <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 808a524:	b510      	push	{r4, lr}
 808a526:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a528:	f7ff ff6c 	bl	808a404 <mbedtls_ssl_read_record>
 808a52c:	2800      	cmp	r0, #0
 808a52e:	d12f      	bne.n	808a590 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 808a530:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808a532:	2b14      	cmp	r3, #20
 808a534:	d006      	beq.n	808a544 <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808a536:	220a      	movs	r2, #10
 808a538:	2102      	movs	r1, #2
 808a53a:	4620      	mov	r0, r4
 808a53c:	f7ff fd14 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808a540:	4814      	ldr	r0, [pc, #80]	; (808a594 <mbedtls_ssl_parse_change_cipher_spec+0x70>)
 808a542:	bd10      	pop	{r4, pc}
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 808a544:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a546:	2b01      	cmp	r3, #1
 808a548:	d103      	bne.n	808a552 <mbedtls_ssl_parse_change_cipher_spec+0x2e>
 808a54a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808a54c:	781b      	ldrb	r3, [r3, #0]
 808a54e:	2b01      	cmp	r3, #1
 808a550:	d006      	beq.n	808a560 <mbedtls_ssl_parse_change_cipher_spec+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808a552:	2232      	movs	r2, #50	; 0x32
 808a554:	2102      	movs	r1, #2
 808a556:	4620      	mov	r0, r4
 808a558:	f7ff fd06 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 808a55c:	480e      	ldr	r0, [pc, #56]	; (808a598 <mbedtls_ssl_parse_change_cipher_spec+0x74>)
 808a55e:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
 808a560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a562:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 808a564:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808a566:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 808a568:	6d63      	ldr	r3, [r4, #84]	; 0x54
 808a56a:	6018      	str	r0, [r3, #0]
 808a56c:	6058      	str	r0, [r3, #4]

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a56e:	68e3      	ldr	r3, [r4, #12]
 808a570:	6e21      	ldr	r1, [r4, #96]	; 0x60
 808a572:	2b01      	cmp	r3, #1
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 808a574:	bfc9      	itett	gt
 808a576:	6c23      	ldrgt	r3, [r4, #64]	; 0x40
                      ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
 808a578:	6661      	strle	r1, [r4, #100]	; 0x64
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 808a57a:	68da      	ldrgt	r2, [r3, #12]
 808a57c:	691b      	ldrgt	r3, [r3, #16]

    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
 808a57e:	f04f 0000 	mov.w	r0, #0
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 808a582:	bfc2      	ittt	gt
 808a584:	1ad3      	subgt	r3, r2, r3
 808a586:	185b      	addgt	r3, r3, r1
 808a588:	6663      	strgt	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 808a58a:	6863      	ldr	r3, [r4, #4]
 808a58c:	3301      	adds	r3, #1
 808a58e:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
 808a590:	bd10      	pop	{r4, pc}
 808a592:	bf00      	nop
 808a594:	ffff8900 	.word	0xffff8900
 808a598:	ffff8200 	.word	0xffff8200

0808a59c <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 808a59c:	7a4b      	ldrb	r3, [r1, #9]
 808a59e:	2b07      	cmp	r3, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 808a5a0:	bf08      	it	eq
 808a5a2:	4a03      	ldreq	r2, [pc, #12]	; (808a5b0 <mbedtls_ssl_optimize_checksum+0x14>)
 808a5a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 808a5a6:	bf18      	it	ne
 808a5a8:	4a02      	ldrne	r2, [pc, #8]	; (808a5b4 <mbedtls_ssl_optimize_checksum+0x18>)
 808a5aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 808a5ae:	4770      	bx	lr
 808a5b0:	08089801 	.word	0x08089801
 808a5b4:	080897f9 	.word	0x080897f9

0808a5b8 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 808a5b8:	b510      	push	{r4, lr}
 808a5ba:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a5bc:	68c3      	ldr	r3, [r0, #12]
 808a5be:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 808a5c2:	2b01      	cmp	r3, #1
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 808a5c4:	bfc9      	itett	gt
 808a5c6:	6c03      	ldrgt	r3, [r0, #64]	; 0x40
                       ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->out_msg = ssl->out_iv;
 808a5c8:	f8c0 1098 	strle.w	r1, [r0, #152]	; 0x98
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
                       ssl->transform_negotiate->fixed_ivlen;
 808a5cc:	68da      	ldrgt	r2, [r3, #12]
 808a5ce:	691b      	ldrgt	r3, [r3, #16]
 808a5d0:	bfc2      	ittt	gt
 808a5d2:	1ad3      	subgt	r3, r2, r3
 808a5d4:	185b      	addgt	r3, r3, r1
 808a5d6:	f8c0 3098 	strgt.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 808a5da:	6803      	ldr	r3, [r0, #0]
 808a5dc:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 808a5e0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808a5e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808a5e6:	f002 0201 	and.w	r2, r2, #1
 808a5ea:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 808a5ee:	3104      	adds	r1, #4
 808a5f0:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 808a5f2:	68e3      	ldr	r3, [r4, #12]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 808a5f4:	2214      	movs	r2, #20
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 808a5f6:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 808a5f8:	bf14      	ite	ne
 808a5fa:	2310      	movne	r3, #16
 808a5fc:	2328      	moveq	r3, #40	; 0x28
 808a5fe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808a602:	2316      	movs	r3, #22
 808a604:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 808a608:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808a60c:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 808a60e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a610:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 808a614:	b133      	cbz	r3, 808a624 <mbedtls_ssl_write_finished+0x6c>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a616:	6823      	ldr	r3, [r4, #0]
 808a618:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808a61c:	07db      	lsls	r3, r3, #31
 808a61e:	d404      	bmi.n	808a62a <mbedtls_ssl_write_finished+0x72>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 808a620:	230f      	movs	r3, #15
 808a622:	e001      	b.n	808a628 <mbedtls_ssl_write_finished+0x70>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 808a624:	6863      	ldr	r3, [r4, #4]
 808a626:	3301      	adds	r3, #1
 808a628:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
 808a62a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 808a62e:	2200      	movs	r2, #0
 808a630:	601a      	str	r2, [r3, #0]
 808a632:	605a      	str	r2, [r3, #4]

    ssl->transform_out = ssl->transform_negotiate;
 808a634:	6c23      	ldr	r3, [r4, #64]	; 0x40
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a636:	4620      	mov	r0, r4
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );

    ssl->transform_out = ssl->transform_negotiate;
 808a638:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 808a63a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808a63c:	6263      	str	r3, [r4, #36]	; 0x24
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
 808a63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a642:	f7ff badd 	b.w	8089c00 <mbedtls_ssl_write_record>
	...

0808a648 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 808a648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 808a64a:	6803      	ldr	r3, [r0, #0]
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 808a64c:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 808a64e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808a652:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808a654:	43d2      	mvns	r2, r2
 808a656:	ad01      	add	r5, sp, #4
 808a658:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 808a65c:	f002 0201 	and.w	r2, r2, #1
 808a660:	4629      	mov	r1, r5
 808a662:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a664:	4620      	mov	r0, r4
 808a666:	f7ff fecd 	bl	808a404 <mbedtls_ssl_read_record>
 808a66a:	2800      	cmp	r0, #0
 808a66c:	d13b      	bne.n	808a6e6 <mbedtls_ssl_parse_finished+0x9e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808a66e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808a670:	2b16      	cmp	r3, #22
 808a672:	d006      	beq.n	808a682 <mbedtls_ssl_parse_finished+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808a674:	220a      	movs	r2, #10
 808a676:	2102      	movs	r1, #2
 808a678:	4620      	mov	r0, r4
 808a67a:	f7ff fc75 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808a67e:	481b      	ldr	r0, [pc, #108]	; (808a6ec <mbedtls_ssl_parse_finished+0xa4>)
 808a680:	e031      	b.n	808a6e6 <mbedtls_ssl_parse_finished+0x9e>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 808a682:	6e61      	ldr	r1, [r4, #100]	; 0x64
 808a684:	780b      	ldrb	r3, [r1, #0]
 808a686:	2b14      	cmp	r3, #20
 808a688:	d115      	bne.n	808a6b6 <mbedtls_ssl_parse_finished+0x6e>
 808a68a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808a68c:	2b10      	cmp	r3, #16
 808a68e:	d112      	bne.n	808a6b6 <mbedtls_ssl_parse_finished+0x6e>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 808a690:	f88d 0003 	strb.w	r0, [sp, #3]
 808a694:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 808a696:	5ccb      	ldrb	r3, [r1, r3]
 808a698:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
 808a69a:	f89d 6003 	ldrb.w	r6, [sp, #3]
 808a69e:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808a6a0:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 808a6a2:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808a6a4:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 808a6a6:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808a6aa:	d1f3      	bne.n	808a694 <mbedtls_ssl_parse_finished+0x4c>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 808a6ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 808a6b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808a6b4:	b133      	cbz	r3, 808a6c4 <mbedtls_ssl_parse_finished+0x7c>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808a6b6:	2232      	movs	r2, #50	; 0x32
 808a6b8:	2102      	movs	r1, #2
 808a6ba:	4620      	mov	r0, r4
 808a6bc:	f7ff fc54 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 808a6c0:	480b      	ldr	r0, [pc, #44]	; (808a6f0 <mbedtls_ssl_parse_finished+0xa8>)
 808a6c2:	e010      	b.n	808a6e6 <mbedtls_ssl_parse_finished+0x9e>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 808a6c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a6c6:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
 808a6ca:	b138      	cbz	r0, 808a6dc <mbedtls_ssl_parse_finished+0x94>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a6cc:	6823      	ldr	r3, [r4, #0]
 808a6ce:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
 808a6d2:	f010 0001 	ands.w	r0, r0, #1
 808a6d6:	d105      	bne.n	808a6e4 <mbedtls_ssl_parse_finished+0x9c>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 808a6d8:	230a      	movs	r3, #10
 808a6da:	e001      	b.n	808a6e0 <mbedtls_ssl_parse_finished+0x98>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 808a6dc:	6863      	ldr	r3, [r4, #4]
 808a6de:	3301      	adds	r3, #1
 808a6e0:	6063      	str	r3, [r4, #4]
 808a6e2:	e000      	b.n	808a6e6 <mbedtls_ssl_parse_finished+0x9e>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
 808a6e4:	4610      	mov	r0, r2
}
 808a6e6:	b004      	add	sp, #16
 808a6e8:	bd70      	pop	{r4, r5, r6, pc}
 808a6ea:	bf00      	nop
 808a6ec:	ffff8900 	.word	0xffff8900
 808a6f0:	ffff8180 	.word	0xffff8180

0808a6f4 <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 808a6f4:	2274      	movs	r2, #116	; 0x74
 808a6f6:	2100      	movs	r1, #0
 808a6f8:	f008 bcf7 	b.w	80930ea <memset>

0808a6fc <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 808a6fc:	22b4      	movs	r2, #180	; 0xb4
 808a6fe:	2100      	movs	r1, #0
 808a700:	f008 bcf3 	b.w	80930ea <memset>

0808a704 <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
 808a704:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 808a708:	f361 0383 	bfi	r3, r1, #2, #2
 808a70c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 808a710:	4770      	bx	lr

0808a712 <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
 808a712:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
 808a714:	6382      	str	r2, [r0, #56]	; 0x38
 808a716:	4770      	bx	lr

0808a718 <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
 808a718:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 808a71a:	61c2      	str	r2, [r0, #28]
 808a71c:	4770      	bx	lr

0808a71e <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
 808a71e:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 808a720:	6142      	str	r2, [r0, #20]
 808a722:	4770      	bx	lr

0808a724 <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
 808a724:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 808a726:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
 808a728:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 808a72a:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
 808a72c:	6183      	str	r3, [r0, #24]
 808a72e:	4770      	bx	lr

0808a730 <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
 808a730:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
 808a732:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
 808a734:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
 808a736:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 808a738:	2100      	movs	r1, #0
}
 808a73a:	bc10      	pop	{r4}
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 808a73c:	f7fe beee 	b.w	808951c <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

0808a740 <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 808a740:	3048      	adds	r0, #72	; 0x48
 808a742:	f7ff b83b 	b.w	80897bc <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

0808a746 <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
 808a746:	64c1      	str	r1, [r0, #76]	; 0x4c
    conf->ca_crl     = ca_crl;
 808a748:	6502      	str	r2, [r0, #80]	; 0x50
 808a74a:	4770      	bx	lr

0808a74c <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
 808a74c:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    conf->min_minor_ver = minor;
 808a750:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
 808a754:	4770      	bx	lr
	...

0808a758 <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 808a758:	6803      	ldr	r3, [r0, #0]
 808a75a:	4a09      	ldr	r2, [pc, #36]	; (808a780 <mbedtls_ssl_get_max_frag_len+0x28>)
 808a75c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 808a760:	6a41      	ldr	r1, [r0, #36]	; 0x24
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 808a762:	f3c3 1382 	ubfx	r3, r3, #6, #3
 808a766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 808a76a:	b131      	cbz	r1, 808a77a <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 808a76c:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 808a770:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 808a774:	4293      	cmp	r3, r2
 808a776:	bf28      	it	cs
 808a778:	4613      	movcs	r3, r2
    {
        max_len = mfl_code_to_length[ssl->session_out->mfl_code];
    }

    return max_len;
}
 808a77a:	4618      	mov	r0, r3
 808a77c:	4770      	bx	lr
 808a77e:	bf00      	nop
 808a780:	08095168 	.word	0x08095168

0808a784 <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
 808a784:	b138      	cbz	r0, 808a796 <mbedtls_ssl_handshake_step+0x12>
 808a786:	6803      	ldr	r3, [r0, #0]
 808a788:	b12b      	cbz	r3, 808a796 <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a78a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808a78e:	07db      	lsls	r3, r3, #31
 808a790:	d403      	bmi.n	808a79a <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 808a792:	f005 b843 	b.w	808f81c <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a796:	4802      	ldr	r0, [pc, #8]	; (808a7a0 <mbedtls_ssl_handshake_step+0x1c>)
 808a798:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 808a79a:	4802      	ldr	r0, [pc, #8]	; (808a7a4 <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
 808a79c:	4770      	bx	lr
 808a79e:	bf00      	nop
 808a7a0:	ffff8f00 	.word	0xffff8f00
 808a7a4:	ffff8f80 	.word	0xffff8f80

0808a7a8 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 808a7a8:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
 808a7aa:	4604      	mov	r4, r0
 808a7ac:	b150      	cbz	r0, 808a7c4 <mbedtls_ssl_handshake+0x1c>
 808a7ae:	6803      	ldr	r3, [r0, #0]
 808a7b0:	b143      	cbz	r3, 808a7c4 <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808a7b2:	6863      	ldr	r3, [r4, #4]
 808a7b4:	2b10      	cmp	r3, #16
 808a7b6:	d007      	beq.n	808a7c8 <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 808a7b8:	4620      	mov	r0, r4
 808a7ba:	f7ff ffe3 	bl	808a784 <mbedtls_ssl_handshake_step>

        if( ret != 0 )
 808a7be:	2800      	cmp	r0, #0
 808a7c0:	d0f7      	beq.n	808a7b2 <mbedtls_ssl_handshake+0xa>
 808a7c2:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a7c4:	4801      	ldr	r0, [pc, #4]	; (808a7cc <mbedtls_ssl_handshake+0x24>)
 808a7c6:	bd10      	pop	{r4, pc}
 808a7c8:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
 808a7ca:	bd10      	pop	{r4, pc}
 808a7cc:	ffff8f00 	.word	0xffff8f00

0808a7d0 <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
 808a7d0:	b570      	push	{r4, r5, r6, lr}
 808a7d2:	460e      	mov	r6, r1
 808a7d4:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
 808a7d6:	4604      	mov	r4, r0
 808a7d8:	b350      	cbz	r0, 808a830 <mbedtls_ssl_write+0x60>
 808a7da:	6803      	ldr	r3, [r0, #0]
 808a7dc:	b343      	cbz	r3, 808a830 <mbedtls_ssl_write+0x60>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808a7de:	6843      	ldr	r3, [r0, #4]
 808a7e0:	2b10      	cmp	r3, #16
 808a7e2:	d109      	bne.n	808a7f8 <mbedtls_ssl_write+0x28>
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret;
#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 808a7e4:	4620      	mov	r0, r4
 808a7e6:	f7ff ffb7 	bl	808a758 <mbedtls_ssl_get_max_frag_len>
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
 808a7ea:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 808a7ee:	4285      	cmp	r5, r0
 808a7f0:	bf28      	it	cs
 808a7f2:	4605      	movcs	r5, r0
 808a7f4:	b92b      	cbnz	r3, 808a802 <mbedtls_ssl_write+0x32>
 808a7f6:	e00a      	b.n	808a80e <mbedtls_ssl_write+0x3e>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 808a7f8:	f7ff ffd6 	bl	808a7a8 <mbedtls_ssl_handshake>
 808a7fc:	2800      	cmp	r0, #0
 808a7fe:	d0f1      	beq.n	808a7e4 <mbedtls_ssl_write+0x14>
 808a800:	bd70      	pop	{r4, r5, r6, pc}
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808a802:	4620      	mov	r0, r4
 808a804:	f7ff f9c4 	bl	8089b90 <mbedtls_ssl_flush_output>
 808a808:	b998      	cbnz	r0, 808a832 <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
 808a80a:	4628      	mov	r0, r5
 808a80c:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 808a80e:	2317      	movs	r3, #23
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
 808a810:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 808a814:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 808a818:	462a      	mov	r2, r5
 808a81a:	4631      	mov	r1, r6
 808a81c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808a820:	f008 fc3d 	bl	809309e <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a824:	4620      	mov	r0, r4
 808a826:	f7ff f9eb 	bl	8089c00 <mbedtls_ssl_write_record>
 808a82a:	2800      	cmp	r0, #0
 808a82c:	d0ed      	beq.n	808a80a <mbedtls_ssl_write+0x3a>
 808a82e:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a830:	4800      	ldr	r0, [pc, #0]	; (808a834 <mbedtls_ssl_write+0x64>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
 808a832:	bd70      	pop	{r4, r5, r6, pc}
 808a834:	ffff8f00 	.word	0xffff8f00

0808a838 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 808a838:	b510      	push	{r4, lr}
    if( transform == NULL )
 808a83a:	4604      	mov	r4, r0
 808a83c:	b1a0      	cbz	r0, 808a868 <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 808a83e:	3050      	adds	r0, #80	; 0x50
 808a840:	f7f8 fcf6 	bl	8083230 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 808a844:	f104 0090 	add.w	r0, r4, #144	; 0x90
 808a848:	f7f8 fcf2 	bl	8083230 <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 808a84c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808a850:	f7fd f96b 	bl	8087b2a <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 808a854:	f104 0044 	add.w	r0, r4, #68	; 0x44
 808a858:	f7fd f967 	bl	8087b2a <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 808a85c:	4620      	mov	r0, r4
}
 808a85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 808a862:	21d0      	movs	r1, #208	; 0xd0
 808a864:	f7fe be52 	b.w	808950c <_ZL15mbedtls_zeroizePvj>
 808a868:	bd10      	pop	{r4, pc}

0808a86a <mbedtls_ssl_handshake_free>:
    }
}
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
 808a86a:	b538      	push	{r3, r4, r5, lr}
    if( handshake == NULL )
 808a86c:	4604      	mov	r4, r0
 808a86e:	b1a0      	cbz	r0, 808a89a <mbedtls_ssl_handshake_free+0x30>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 808a870:	3018      	adds	r0, #24
 808a872:	f7f7 fdb7 	bl	80823e4 <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 808a876:	f104 0088 	add.w	r0, r4, #136	; 0x88
 808a87a:	f003 f8bd 	bl	808d9f8 <mbedtls_sha512_free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
 808a87e:	68e0      	ldr	r0, [r4, #12]
 808a880:	b930      	cbnz	r0, 808a890 <mbedtls_ssl_handshake_free+0x26>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 808a882:	4620      	mov	r0, r4
}
 808a884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 808a888:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 808a88c:	f7fe be3e 	b.w	808950c <_ZL15mbedtls_zeroizePvj>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
 808a890:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
 808a892:	f006 f91f 	bl	8090ad4 <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
 808a896:	4628      	mov	r0, r5
 808a898:	e7f2      	b.n	808a880 <mbedtls_ssl_handshake_free+0x16>
 808a89a:	bd38      	pop	{r3, r4, r5, pc}

0808a89c <mbedtls_ssl_session_free>:

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 808a89c:	b510      	push	{r4, lr}
    if( session == NULL )
 808a89e:	4604      	mov	r4, r0
 808a8a0:	b178      	cbz	r0, 808a8c2 <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 808a8a2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808a8a4:	b120      	cbz	r0, 808a8b0 <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 808a8a6:	f7fe fa26 	bl	8088cf6 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 808a8aa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 808a8ac:	f006 f912 	bl	8090ad4 <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
 808a8b0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 808a8b2:	f006 f90f 	bl	8090ad4 <free>
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 808a8b6:	4620      	mov	r0, r4
}
 808a8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 808a8bc:	2174      	movs	r1, #116	; 0x74
 808a8be:	f7fe be25 	b.w	808950c <_ZL15mbedtls_zeroizePvj>
 808a8c2:	bd10      	pop	{r4, pc}

0808a8c4 <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 808a8c4:	b538      	push	{r3, r4, r5, lr}
 808a8c6:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 808a8c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 808a8ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
 808a8cc:	f8d3 51e4 	ldr.w	r5, [r3, #484]	; 0x1e4
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 808a8d0:	b120      	cbz	r0, 808a8dc <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 808a8d2:	f7ff ffe3 	bl	808a89c <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 808a8d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808a8d8:	f006 f8fc 	bl	8090ad4 <free>
    }
    ssl->session = ssl->session_negotiate;
 808a8dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;
 808a8de:	2300      	movs	r3, #0

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 808a8e0:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
 808a8e2:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 808a8e4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 808a8e6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 808a8e8:	b123      	cbz	r3, 808a8f4 <mbedtls_ssl_handshake_wrapup+0x30>
 808a8ea:	6888      	ldr	r0, [r1, #8]
 808a8ec:	b110      	cbz	r0, 808a8f4 <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
 808a8ee:	b90d      	cbnz	r5, 808a8f4 <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 808a8f0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 808a8f2:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
 808a8f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a8f6:	f7ff ffb8 	bl	808a86a <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 808a8fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a8fc:	f006 f8ea 	bl	8090ad4 <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 808a900:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
 808a902:	2300      	movs	r3, #0
 808a904:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 808a906:	b120      	cbz	r0, 808a912 <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 808a908:	f7ff ff96 	bl	808a838 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 808a90c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808a90e:	f006 f8e1 	bl	8090ad4 <free>
    }
    ssl->transform = ssl->transform_negotiate;
 808a912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a914:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 808a916:	2300      	movs	r3, #0
 808a918:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
 808a91a:	6863      	ldr	r3, [r4, #4]
 808a91c:	3301      	adds	r3, #1
 808a91e:	6063      	str	r3, [r4, #4]
 808a920:	bd38      	pop	{r3, r4, r5, pc}
	...

0808a924 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 808a924:	b538      	push	{r3, r4, r5, lr}
 808a926:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 808a928:	6c00      	ldr	r0, [r0, #64]	; 0x40
 808a92a:	b108      	cbz	r0, 808a930 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 808a92c:	f7ff ff84 	bl	808a838 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 808a930:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808a932:	b108      	cbz	r0, 808a938 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 808a934:	f7ff ffb2 	bl	808a89c <mbedtls_ssl_session_free>
    if( ssl->handshake )
 808a938:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a93a:	b108      	cbz	r0, 808a940 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 808a93c:	f7ff ff95 	bl	808a86a <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
 808a940:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a942:	b923      	cbnz	r3, 808a94e <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2a>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 808a944:	21d0      	movs	r1, #208	; 0xd0
 808a946:	2001      	movs	r0, #1
 808a948:	f008 fb84 	bl	8093054 <calloc>
 808a94c:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
 808a94e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808a950:	b923      	cbnz	r3, 808a95c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x38>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 808a952:	2174      	movs	r1, #116	; 0x74
 808a954:	2001      	movs	r0, #1
 808a956:	f008 fb7d 	bl	8093054 <calloc>
 808a95a:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
 808a95c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a95e:	b92b      	cbnz	r3, 808a96c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x48>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 808a960:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 808a964:	2001      	movs	r0, #1
 808a966:	f008 fb75 	bl	8093054 <calloc>
 808a96a:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
 808a96c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a96e:	b118      	cbz	r0, 808a978 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
 808a970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a972:	b10b      	cbz	r3, 808a978 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
 808a974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
 808a976:	b96b      	cbnz	r3, 808a994 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x70>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
 808a978:	f006 f8ac 	bl	8090ad4 <free>
        mbedtls_free( ssl->transform_negotiate );
 808a97c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808a97e:	f006 f8a9 	bl	8090ad4 <free>
        mbedtls_free( ssl->session_negotiate );
 808a982:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808a984:	f006 f8a6 	bl	8090ad4 <free>

        ssl->handshake = NULL;
 808a988:	2300      	movs	r3, #0
 808a98a:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 808a98c:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 808a98e:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808a990:	481e      	ldr	r0, [pc, #120]	; (808aa0c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xe8>)
 808a992:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
 808a994:	4618      	mov	r0, r3
 808a996:	f7ff fead 	bl	808a6f4 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 808a99a:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 808a99c:	22d0      	movs	r2, #208	; 0xd0
 808a99e:	2100      	movs	r1, #0
 808a9a0:	4628      	mov	r0, r5
 808a9a2:	f008 fba2 	bl	80930ea <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 808a9a6:	f105 0050 	add.w	r0, r5, #80	; 0x50
 808a9aa:	f7f8 fc3d 	bl	8083228 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 808a9ae:	f105 0090 	add.w	r0, r5, #144	; 0x90
 808a9b2:	f7f8 fc39 	bl	8083228 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
 808a9b6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 808a9ba:	f7fd f8b1 	bl	8087b20 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 808a9be:	f105 0044 	add.w	r0, r5, #68	; 0x44
 808a9c2:	f7fd f8ad 	bl	8087b20 <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
 808a9c6:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 808a9c8:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 808a9cc:	f104 0518 	add.w	r5, r4, #24
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 808a9d0:	2100      	movs	r1, #0
 808a9d2:	4620      	mov	r0, r4
 808a9d4:	f008 fb89 	bl	80930ea <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 808a9d8:	4628      	mov	r0, r5
 808a9da:	f7f7 fcff 	bl	80823dc <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 808a9de:	2100      	movs	r1, #0
 808a9e0:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 808a9e2:	f104 0588 	add.w	r5, r4, #136	; 0x88
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 808a9e6:	f7f7 fd0d 	bl	8082404 <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 808a9ea:	4628      	mov	r0, r5
 808a9ec:	f003 f800 	bl	808d9f0 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
 808a9f0:	2101      	movs	r1, #1
 808a9f2:	4628      	mov	r0, r5
 808a9f4:	f003 f810 	bl	808da18 <mbedtls_sha512_starts_ret>
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 808a9f8:	4b05      	ldr	r3, [pc, #20]	; (808aa10 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xec>)

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 808a9fa:	2000      	movs	r0, #0
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 808a9fc:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 808aa00:	2303      	movs	r3, #3

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 808aa02:	7020      	strb	r0, [r4, #0]
    set->ecdsa = md_alg;
 808aa04:	7060      	strb	r0, [r4, #1]
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 808aa06:	60a3      	str	r3, [r4, #8]
        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
}
 808aa08:	bd38      	pop	{r3, r4, r5, pc}
 808aa0a:	bf00      	nop
 808aa0c:	ffff8100 	.word	0xffff8100
 808aa10:	08089809 	.word	0x08089809

0808aa14 <mbedtls_ssl_setup>:
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 808aa14:	b538      	push	{r3, r4, r5, lr}
    int ret;
    const size_t len = MBEDTLS_SSL_BUFFER_LEN;

    ssl->conf = conf;
 808aa16:	6001      	str	r1, [r0, #0]
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 808aa18:	4604      	mov	r4, r0
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 808aa1a:	f242 114d 	movw	r1, #8525	; 0x214d
 808aa1e:	2001      	movs	r0, #1
 808aa20:	f008 fb18 	bl	8093054 <calloc>
 808aa24:	4605      	mov	r5, r0
 808aa26:	6520      	str	r0, [r4, #80]	; 0x50
 808aa28:	b328      	cbz	r0, 808aa76 <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 808aa2a:	f242 114d 	movw	r1, #8525	; 0x214d
 808aa2e:	2001      	movs	r0, #1
 808aa30:	f008 fb10 	bl	8093054 <calloc>
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 808aa34:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 808aa38:	b1e8      	cbz	r0, 808aa76 <mbedtls_ssl_setup+0x62>
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
 808aa3a:	f100 0308 	add.w	r3, r0, #8
 808aa3e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 808aa42:	f100 030b 	add.w	r3, r0, #11
 808aa46:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 808aa4a:	f105 0308 	add.w	r3, r5, #8
        ssl->in_msg = ssl->in_buf + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
 808aa4e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
 808aa52:	6565      	str	r5, [r4, #84]	; 0x54
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 808aa54:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 808aa56:	65a3      	str	r3, [r4, #88]	; 0x58
        ssl->in_len = ssl->in_buf + 11;
 808aa58:	f105 030b 	add.w	r3, r5, #11
        ssl->in_iv  = ssl->in_buf + 13;
 808aa5c:	350d      	adds	r5, #13
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 808aa5e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 808aa62:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
        ssl->in_len = ssl->in_buf + 11;
 808aa66:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 808aa68:	6625      	str	r5, [r4, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 808aa6a:	6665      	str	r5, [r4, #100]	; 0x64
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 808aa6c:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 808aa6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ssl->in_len = ssl->in_buf + 11;
        ssl->in_iv  = ssl->in_buf + 13;
        ssl->in_msg = ssl->in_buf + 13;
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 808aa72:	f7ff bf57 	b.w	808a924 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
        mbedtls_free( ssl->in_buf );
 808aa76:	4628      	mov	r0, r5
 808aa78:	f006 f82c 	bl	8090ad4 <free>
        ssl->in_buf = NULL;
 808aa7c:	2300      	movs	r3, #0
 808aa7e:	6523      	str	r3, [r4, #80]	; 0x50

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
        return( ret );

    return( 0 );
}
 808aa80:	4800      	ldr	r0, [pc, #0]	; (808aa84 <mbedtls_ssl_setup+0x70>)
 808aa82:	bd38      	pop	{r3, r4, r5, pc}
 808aa84:	ffff8100 	.word	0xffff8100

0808aa88 <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
 808aa88:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
 808aa8a:	4604      	mov	r4, r0
 808aa8c:	2800      	cmp	r0, #0
 808aa8e:	d048      	beq.n	808ab22 <mbedtls_ssl_free+0x9a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
 808aa90:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 808aa94:	b138      	cbz	r0, 808aaa6 <mbedtls_ssl_free+0x1e>
    {
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 808aa96:	f242 114d 	movw	r1, #8525	; 0x214d
 808aa9a:	f7fe fd37 	bl	808950c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->out_buf );
 808aa9e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 808aaa2:	f006 f817 	bl	8090ad4 <free>
    }

    if( ssl->in_buf != NULL )
 808aaa6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 808aaa8:	b130      	cbz	r0, 808aab8 <mbedtls_ssl_free+0x30>
    {
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 808aaaa:	f242 114d 	movw	r1, #8525	; 0x214d
 808aaae:	f7fe fd2d 	bl	808950c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->in_buf );
 808aab2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 808aab4:	f006 f80e 	bl	8090ad4 <free>
        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
 808aab8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808aaba:	b120      	cbz	r0, 808aac6 <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 808aabc:	f7ff febc 	bl	808a838 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 808aac0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808aac2:	f006 f807 	bl	8090ad4 <free>
    }

    if( ssl->handshake )
 808aac6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808aac8:	b180      	cbz	r0, 808aaec <mbedtls_ssl_free+0x64>
    {
        mbedtls_ssl_handshake_free( ssl->handshake );
 808aaca:	f7ff fece 	bl	808a86a <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 808aace:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808aad0:	f7ff feb2 	bl	808a838 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 808aad4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808aad6:	f7ff fee1 	bl	808a89c <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
 808aada:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808aadc:	f005 fffa 	bl	8090ad4 <free>
        mbedtls_free( ssl->transform_negotiate );
 808aae0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808aae2:	f005 fff7 	bl	8090ad4 <free>
        mbedtls_free( ssl->session_negotiate );
 808aae6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808aae8:	f005 fff4 	bl	8090ad4 <free>
    }

    if( ssl->session )
 808aaec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808aaee:	b120      	cbz	r0, 808aafa <mbedtls_ssl_free+0x72>
    {
        mbedtls_ssl_session_free( ssl->session );
 808aaf0:	f7ff fed4 	bl	808a89c <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 808aaf4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808aaf6:	f005 ffed 	bl	8090ad4 <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
 808aafa:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 808aafe:	b155      	cbz	r5, 808ab16 <mbedtls_ssl_free+0x8e>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 808ab00:	4628      	mov	r0, r5
 808ab02:	f008 fb12 	bl	809312a <strlen>
 808ab06:	4601      	mov	r1, r0
 808ab08:	4628      	mov	r0, r5
 808ab0a:	f7fe fcff 	bl	808950c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 808ab0e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 808ab12:	f005 ffdf 	bl	8090ad4 <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 808ab16:	4620      	mov	r0, r4
}
 808ab18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 808ab1c:	21b4      	movs	r1, #180	; 0xb4
 808ab1e:	f7fe bcf5 	b.w	808950c <_ZL15mbedtls_zeroizePvj>
 808ab22:	bd38      	pop	{r3, r4, r5, pc}

0808ab24 <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 808ab24:	2264      	movs	r2, #100	; 0x64
 808ab26:	2100      	movs	r1, #0
 808ab28:	f008 badf 	b.w	80930ea <memset>

0808ab2c <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
 808ab2c:	b510      	push	{r4, lr}
 808ab2e:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
 808ab30:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 808ab34:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
 808ab38:	f362 0041 	bfi	r0, r2, #1, #1
 808ab3c:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 808ab40:	b951      	cbnz	r1, 808ab58 <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 808ab42:	2102      	movs	r1, #2
 808ab44:	b2c2      	uxtb	r2, r0
 808ab46:	f361 0283 	bfi	r2, r1, #2, #2
 808ab4a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
 808ab4e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 808ab52:	430a      	orrs	r2, r1
 808ab54:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 808ab58:	2b02      	cmp	r3, #2
 808ab5a:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 808ab5e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 808ab62:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 808ab66:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 808ab6a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 808ab6e:	d108      	bne.n	808ab82 <mbedtls_ssl_config_defaults+0x56>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
 808ab70:	4b0a      	ldr	r3, [pc, #40]	; (808ab9c <mbedtls_ssl_config_defaults+0x70>)
 808ab72:	60e3      	str	r3, [r4, #12]
 808ab74:	60a3      	str	r3, [r4, #8]
 808ab76:	6063      	str	r3, [r4, #4]
 808ab78:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 808ab7a:	4b09      	ldr	r3, [pc, #36]	; (808aba0 <mbedtls_ssl_config_defaults+0x74>)
 808ab7c:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 808ab7e:	4b09      	ldr	r3, [pc, #36]	; (808aba4 <mbedtls_ssl_config_defaults+0x78>)
 808ab80:	e008      	b.n	808ab94 <mbedtls_ssl_config_defaults+0x68>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808ab82:	f7fb fd37 	bl	80865f4 <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 808ab86:	4b08      	ldr	r3, [pc, #32]	; (808aba8 <mbedtls_ssl_config_defaults+0x7c>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808ab88:	60e0      	str	r0, [r4, #12]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 808ab8a:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 808ab8c:	4b07      	ldr	r3, [pc, #28]	; (808abac <mbedtls_ssl_config_defaults+0x80>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808ab8e:	60a0      	str	r0, [r4, #8]
 808ab90:	6060      	str	r0, [r4, #4]
 808ab92:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 808ab94:	6563      	str	r3, [r4, #84]	; 0x54
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
 808ab96:	2000      	movs	r0, #0
 808ab98:	bd10      	pop	{r4, pc}
 808ab9a:	bf00      	nop
 808ab9c:	20000414 	.word	0x20000414
 808aba0:	080950f4 	.word	0x080950f4
 808aba4:	20000438 	.word	0x20000438
 808aba8:	080949e4 	.word	0x080949e4
 808abac:	20000420 	.word	0x20000420

0808abb0 <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
 808abb0:	b538      	push	{r3, r4, r5, lr}
 808abb2:	4604      	mov	r4, r0
        conf->psk_identity_len = 0;
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
 808abb4:	6c80      	ldr	r0, [r0, #72]	; 0x48
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
 808abb6:	b120      	cbz	r0, 808abc2 <mbedtls_ssl_config_free+0x12>
    {
        next = cur->next;
 808abb8:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 808abba:	f005 ff8b 	bl	8090ad4 <free>
        cur = next;
 808abbe:	4628      	mov	r0, r5
 808abc0:	e7f9      	b.n	808abb6 <mbedtls_ssl_config_free+0x6>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 808abc2:	4620      	mov	r0, r4
}
 808abc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 808abc8:	2164      	movs	r1, #100	; 0x64
 808abca:	f7fe bc9f 	b.w	808950c <_ZL15mbedtls_zeroizePvj>

0808abce <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 808abce:	b508      	push	{r3, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 808abd0:	2101      	movs	r1, #1
 808abd2:	f001 fdc9 	bl	808c768 <mbedtls_pk_can_do>
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
 808abd6:	3000      	adds	r0, #0
 808abd8:	bf18      	it	ne
 808abda:	2001      	movne	r0, #1
 808abdc:	bd08      	pop	{r3, pc}
	...

0808abe0 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 808abe0:	3804      	subs	r0, #4
 808abe2:	2804      	cmp	r0, #4
 808abe4:	bf9a      	itte	ls
 808abe6:	4b02      	ldrls	r3, [pc, #8]	; (808abf0 <mbedtls_ssl_hash_from_md_alg+0x10>)
 808abe8:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
 808abea:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
 808abec:	4770      	bx	lr
 808abee:	bf00      	nop
 808abf0:	08095104 	.word	0x08095104

0808abf4 <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 808abf4:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 808abf6:	b510      	push	{r4, lr}
 808abf8:	461c      	mov	r4, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 808abfa:	d10f      	bne.n	808ac1c <mbedtls_ssl_check_cert_usage+0x28>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
 808abfc:	7a8b      	ldrb	r3, [r1, #10]
 808abfe:	2b0a      	cmp	r3, #10
 808ac00:	d80e      	bhi.n	808ac20 <mbedtls_ssl_check_cert_usage+0x2c>
 808ac02:	409a      	lsls	r2, r3
 808ac04:	f012 0f82 	tst.w	r2, #130	; 0x82
 808ac08:	d10c      	bne.n	808ac24 <mbedtls_ssl_check_cert_usage+0x30>
 808ac0a:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 808ac0e:	d10b      	bne.n	808ac28 <mbedtls_ssl_check_cert_usage+0x34>
 808ac10:	f012 0f1c 	tst.w	r2, #28
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 808ac14:	bf14      	ite	ne
 808ac16:	2180      	movne	r1, #128	; 0x80
 808ac18:	2100      	moveq	r1, #0
 808ac1a:	e006      	b.n	808ac2a <mbedtls_ssl_check_cert_usage+0x36>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 808ac1c:	2180      	movs	r1, #128	; 0x80
 808ac1e:	e004      	b.n	808ac2a <mbedtls_ssl_check_cert_usage+0x36>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 808ac20:	2100      	movs	r1, #0
 808ac22:	e002      	b.n	808ac2a <mbedtls_ssl_check_cert_usage+0x36>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
 808ac24:	2120      	movs	r1, #32
 808ac26:	e000      	b.n	808ac2a <mbedtls_ssl_check_cert_usage+0x36>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 808ac28:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 808ac2a:	f7fd fc89 	bl	8088540 <mbedtls_x509_crt_check_key_usage>
 808ac2e:	b128      	cbz	r0, 808ac3c <mbedtls_ssl_check_cert_usage+0x48>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 808ac30:	6822      	ldr	r2, [r4, #0]
        ret = -1;
 808ac32:	f04f 30ff 	mov.w	r0, #4294967295
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 808ac36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 808ac3a:	6022      	str	r2, [r4, #0]
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
 808ac3c:	bd10      	pop	{r4, pc}
	...

0808ac40 <mbedtls_ssl_parse_certificate>:

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808ac40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808ac44:	6c03      	ldr	r3, [r0, #64]	; 0x40

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808ac46:	b085      	sub	sp, #20
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808ac48:	f8d3 8000 	ldr.w	r8, [r3]

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808ac4c:	4605      	mov	r5, r0
    int authmode = ssl->conf->authmode;
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808ac4e:	f898 200a 	ldrb.w	r2, [r8, #10]
 808ac52:	2a0b      	cmp	r2, #11
 808ac54:	d80b      	bhi.n	808ac6e <mbedtls_ssl_parse_certificate+0x2e>
 808ac56:	f44f 6316 	mov.w	r3, #2400	; 0x960
 808ac5a:	40d3      	lsrs	r3, r2
 808ac5c:	f003 0301 	and.w	r3, r3, #1
 808ac60:	f083 0001 	eor.w	r0, r3, #1
 808ac64:	b11b      	cbz	r3, 808ac6e <mbedtls_ssl_parse_certificate+0x2e>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        ssl->state++;
 808ac66:	686b      	ldr	r3, [r5, #4]
 808ac68:	3301      	adds	r3, #1
 808ac6a:	606b      	str	r3, [r5, #4]
        return( 0 );
 808ac6c:	e0e0      	b.n	808ae30 <mbedtls_ssl_parse_certificate+0x1f0>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808ac6e:	682b      	ldr	r3, [r5, #0]
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ac70:	4628      	mov	r0, r5
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808ac72:	f893 7060 	ldrb.w	r7, [r3, #96]	; 0x60
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ac76:	f7ff fbc5 	bl	808a404 <mbedtls_ssl_read_record>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808ac7a:	f3c7 0781 	ubfx	r7, r7, #2, #2
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ac7e:	4604      	mov	r4, r0
 808ac80:	bb80      	cbnz	r0, 808ace4 <mbedtls_ssl_parse_certificate+0xa4>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    ssl->state++;
 808ac82:	686b      	ldr	r3, [r5, #4]
 808ac84:	3301      	adds	r3, #1
 808ac86:	606b      	str	r3, [r5, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808ac88:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808ac8a:	2b16      	cmp	r3, #22
 808ac8c:	d006      	beq.n	808ac9c <mbedtls_ssl_parse_certificate+0x5c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808ac8e:	220a      	movs	r2, #10
 808ac90:	2102      	movs	r1, #2
 808ac92:	4628      	mov	r0, r5
 808ac94:	f7ff f968 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808ac98:	4867      	ldr	r0, [pc, #412]	; (808ae38 <mbedtls_ssl_parse_certificate+0x1f8>)
 808ac9a:	e0c9      	b.n	808ae30 <mbedtls_ssl_parse_certificate+0x1f0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 808ac9c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 808ac9e:	7813      	ldrb	r3, [r2, #0]
 808aca0:	2b0b      	cmp	r3, #11
 808aca2:	d10b      	bne.n	808acbc <mbedtls_ssl_parse_certificate+0x7c>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 808aca4:	6fa9      	ldr	r1, [r5, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 808aca6:	2909      	cmp	r1, #9
 808aca8:	d908      	bls.n	808acbc <mbedtls_ssl_parse_certificate+0x7c>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
 808acaa:	7913      	ldrb	r3, [r2, #4]
 808acac:	b933      	cbnz	r3, 808acbc <mbedtls_ssl_parse_certificate+0x7c>
 808acae:	7950      	ldrb	r0, [r2, #5]
 808acb0:	7993      	ldrb	r3, [r2, #6]
 808acb2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808acb6:	3307      	adds	r3, #7
 808acb8:	4299      	cmp	r1, r3
 808acba:	d015      	beq.n	808ace8 <mbedtls_ssl_parse_certificate+0xa8>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808acbc:	2232      	movs	r2, #50	; 0x32
 808acbe:	2102      	movs	r1, #2
 808acc0:	4628      	mov	r0, r5
 808acc2:	f7ff f951 	bl	8089f68 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 808acc6:	485d      	ldr	r0, [pc, #372]	; (808ae3c <mbedtls_ssl_parse_certificate+0x1fc>)
 808acc8:	e0b2      	b.n	808ae30 <mbedtls_ssl_parse_certificate+0x1f0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 808acca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 808accc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808ae48 <mbedtls_ssl_parse_certificate+0x208>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 808acd0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808acd2:	f7fe f80b 	bl	8088cec <mbedtls_x509_crt_init>

    i += 3;
 808acd6:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
 808acd8:	f8d5 e078 	ldr.w	lr, [r5, #120]	; 0x78
 808acdc:	4576      	cmp	r6, lr
 808acde:	d31c      	bcc.n	808ad1a <mbedtls_ssl_parse_certificate+0xda>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 808ace0:	2f00      	cmp	r7, #0
 808ace2:	d13f      	bne.n	808ad64 <mbedtls_ssl_parse_certificate+0x124>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808ace4:	4620      	mov	r0, r4
 808ace6:	e0a3      	b.n	808ae30 <mbedtls_ssl_parse_certificate+0x1f0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 808ace8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808acea:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808acec:	b128      	cbz	r0, 808acfa <mbedtls_ssl_parse_certificate+0xba>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 808acee:	f7fe f802 	bl	8088cf6 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 808acf2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808acf4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808acf6:	f005 feed 	bl	8090ad4 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
 808acfa:	f44f 719a 	mov.w	r1, #308	; 0x134
 808acfe:	2001      	movs	r0, #1
 808ad00:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 808ad02:	f008 f9a7 	bl	8093054 <calloc>
 808ad06:	65f0      	str	r0, [r6, #92]	; 0x5c
 808ad08:	2800      	cmp	r0, #0
 808ad0a:	d1de      	bne.n	808acca <mbedtls_ssl_parse_certificate+0x8a>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808ad0c:	2250      	movs	r2, #80	; 0x50
 808ad0e:	2102      	movs	r1, #2
 808ad10:	4628      	mov	r0, r5
 808ad12:	f7ff f929 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808ad16:	484a      	ldr	r0, [pc, #296]	; (808ae40 <mbedtls_ssl_parse_certificate+0x200>)
 808ad18:	e08a      	b.n	808ae30 <mbedtls_ssl_parse_certificate+0x1f0>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
 808ad1a:	1cf1      	adds	r1, r6, #3
 808ad1c:	458e      	cmp	lr, r1
 808ad1e:	d3cd      	bcc.n	808acbc <mbedtls_ssl_parse_certificate+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
 808ad20:	6e68      	ldr	r0, [r5, #100]	; 0x64
 808ad22:	5d83      	ldrb	r3, [r0, r6]
 808ad24:	2b00      	cmp	r3, #0
 808ad26:	d1c9      	bne.n	808acbc <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 808ad28:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
 808ad2a:	7872      	ldrb	r2, [r6, #1]
 808ad2c:	78b3      	ldrb	r3, [r6, #2]
 808ad2e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
 808ad32:	2a7f      	cmp	r2, #127	; 0x7f
 808ad34:	d9c2      	bls.n	808acbc <mbedtls_ssl_parse_certificate+0x7c>
 808ad36:	188e      	adds	r6, r1, r2
 808ad38:	45b6      	cmp	lr, r6
 808ad3a:	d3bf      	bcc.n	808acbc <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 808ad3c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                                  ssl->in_msg + i, n );
 808ad3e:	4401      	add	r1, r0
 808ad40:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808ad42:	f7fe f831 	bl	8088da8 <mbedtls_x509_crt_parse_der>
        switch( ret )
 808ad46:	4548      	cmp	r0, r9
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
 808ad48:	4604      	mov	r4, r0
        switch( ret )
 808ad4a:	d0c5      	beq.n	808acd8 <mbedtls_ssl_parse_certificate+0x98>
 808ad4c:	dc04      	bgt.n	808ad58 <mbedtls_ssl_parse_certificate+0x118>
 808ad4e:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 808ad52:	d158      	bne.n	808ae06 <mbedtls_ssl_parse_certificate+0x1c6>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 808ad54:	2250      	movs	r2, #80	; 0x50
 808ad56:	e05d      	b.n	808ae14 <mbedtls_ssl_parse_certificate+0x1d4>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 808ad58:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 808ad5c:	d055      	beq.n	808ae0a <mbedtls_ssl_parse_certificate+0x1ca>
 808ad5e:	2800      	cmp	r0, #0
 808ad60:	d0ba      	beq.n	808acd8 <mbedtls_ssl_parse_certificate+0x98>
 808ad62:	e050      	b.n	808ae06 <mbedtls_ssl_parse_certificate+0x1c6>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
 808ad64:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 808ad66:	682b      	ldr	r3, [r5, #0]
 808ad68:	6916      	ldr	r6, [r2, #16]
 808ad6a:	b10e      	cbz	r6, 808ad70 <mbedtls_ssl_parse_certificate+0x130>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
 808ad6c:	6952      	ldr	r2, [r2, #20]
 808ad6e:	e001      	b.n	808ad74 <mbedtls_ssl_parse_certificate+0x134>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 808ad70:	6cde      	ldr	r6, [r3, #76]	; 0x4c
            ca_crl   = ssl->conf->ca_crl;
 808ad72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808ad74:	6b99      	ldr	r1, [r3, #56]	; 0x38

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
                                ssl->session_negotiate->peer_cert,
 808ad76:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808ad78:	9103      	str	r1, [sp, #12]
 808ad7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 808ad7c:	9102      	str	r1, [sp, #8]
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
 808ad7e:	f100 0160 	add.w	r1, r0, #96	; 0x60
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808ad82:	9101      	str	r1, [sp, #4]
 808ad84:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 808ad88:	9100      	str	r1, [sp, #0]
 808ad8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808ad8c:	4631      	mov	r1, r6
 808ad8e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808ad90:	f7fd feca 	bl	8088b28 <mbedtls_x509_crt_verify_with_profile>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 808ad94:	682b      	ldr	r3, [r5, #0]
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808ad96:	4604      	mov	r4, r0
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 808ad98:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808ad9c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 808ad9e:	f002 0201 	and.w	r2, r2, #1
 808ada2:	f100 0360 	add.w	r3, r0, #96	; 0x60
 808ada6:	f082 0201 	eor.w	r2, r2, #1
 808adaa:	4641      	mov	r1, r8
 808adac:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808adae:	f7ff ff21 	bl	808abf4 <mbedtls_ssl_check_cert_usage>
 808adb2:	b100      	cbz	r0, 808adb6 <mbedtls_ssl_parse_certificate+0x176>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
 808adb4:	b174      	cbz	r4, 808add4 <mbedtls_ssl_parse_certificate+0x194>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808adb6:	2f01      	cmp	r7, #1
 808adb8:	d105      	bne.n	808adc6 <mbedtls_ssl_parse_certificate+0x186>
 808adba:	f514 5f1c 	cmn.w	r4, #9984	; 0x2700
 808adbe:	d02e      	beq.n	808ae1e <mbedtls_ssl_parse_certificate+0x1de>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 808adc0:	f514 4ff4 	cmn.w	r4, #31232	; 0x7a00
 808adc4:	d02b      	beq.n	808ae1e <mbedtls_ssl_parse_certificate+0x1de>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 808adc6:	b90e      	cbnz	r6, 808adcc <mbedtls_ssl_parse_certificate+0x18c>
 808adc8:	2f02      	cmp	r7, #2
 808adca:	d001      	beq.n	808add0 <mbedtls_ssl_parse_certificate+0x190>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
 808adcc:	b934      	cbnz	r4, 808addc <mbedtls_ssl_parse_certificate+0x19c>
 808adce:	e789      	b.n	808ace4 <mbedtls_ssl_parse_certificate+0xa4>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 808add0:	4c1c      	ldr	r4, [pc, #112]	; (808ae44 <mbedtls_ssl_parse_certificate+0x204>)
 808add2:	e003      	b.n	808addc <mbedtls_ssl_parse_certificate+0x19c>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808add4:	2f01      	cmp	r7, #1
 808add6:	d085      	beq.n	808ace4 <mbedtls_ssl_parse_certificate+0xa4>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 808add8:	b31e      	cbz	r6, 808ae22 <mbedtls_ssl_parse_certificate+0x1e2>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 808adda:	4c18      	ldr	r4, [pc, #96]	; (808ae3c <mbedtls_ssl_parse_certificate+0x1fc>)
        if( ret != 0 )
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 808addc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808adde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 808ade0:	05df      	lsls	r7, r3, #23
 808ade2:	d40e      	bmi.n	808ae02 <mbedtls_ssl_parse_certificate+0x1c2>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 808ade4:	075e      	lsls	r6, r3, #29
 808ade6:	d40e      	bmi.n	808ae06 <mbedtls_ssl_parse_certificate+0x1c6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 808ade8:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 808adec:	d10d      	bne.n	808ae0a <mbedtls_ssl_parse_certificate+0x1ca>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 808adee:	07d8      	lsls	r0, r3, #31
 808adf0:	d40d      	bmi.n	808ae0e <mbedtls_ssl_parse_certificate+0x1ce>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 808adf2:	0799      	lsls	r1, r3, #30
 808adf4:	d40d      	bmi.n	808ae12 <mbedtls_ssl_parse_certificate+0x1d2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 808adf6:	f013 0f08 	tst.w	r3, #8
 808adfa:	bf14      	ite	ne
 808adfc:	2230      	movne	r2, #48	; 0x30
 808adfe:	222e      	moveq	r2, #46	; 0x2e
 808ae00:	e008      	b.n	808ae14 <mbedtls_ssl_parse_certificate+0x1d4>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 808ae02:	2231      	movs	r2, #49	; 0x31
 808ae04:	e006      	b.n	808ae14 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 808ae06:	222a      	movs	r2, #42	; 0x2a
 808ae08:	e004      	b.n	808ae14 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 808ae0a:	222b      	movs	r2, #43	; 0x2b
 808ae0c:	e002      	b.n	808ae14 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 808ae0e:	222d      	movs	r2, #45	; 0x2d
 808ae10:	e000      	b.n	808ae14 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 808ae12:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
 808ae14:	2102      	movs	r1, #2
 808ae16:	4628      	mov	r0, r5
 808ae18:	f7ff f8a6 	bl	8089f68 <mbedtls_ssl_send_alert_message>
 808ae1c:	e762      	b.n	808ace4 <mbedtls_ssl_parse_certificate+0xa4>
 808ae1e:	2000      	movs	r0, #0
 808ae20:	e006      	b.n	808ae30 <mbedtls_ssl_parse_certificate+0x1f0>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 808ae22:	4b08      	ldr	r3, [pc, #32]	; (808ae44 <mbedtls_ssl_parse_certificate+0x204>)
 808ae24:	4805      	ldr	r0, [pc, #20]	; (808ae3c <mbedtls_ssl_parse_certificate+0x1fc>)
 808ae26:	2f02      	cmp	r7, #2
 808ae28:	bf14      	ite	ne
 808ae2a:	4604      	movne	r4, r0
 808ae2c:	461c      	moveq	r4, r3
 808ae2e:	e7d5      	b.n	808addc <mbedtls_ssl_parse_certificate+0x19c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
 808ae30:	b005      	add	sp, #20
 808ae32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808ae36:	bf00      	nop
 808ae38:	ffff8900 	.word	0xffff8900
 808ae3c:	ffff8600 	.word	0xffff8600
 808ae40:	ffff8100 	.word	0xffff8100
 808ae44:	ffff8980 	.word	0xffff8980
 808ae48:	ffffd9d2 	.word	0xffffd9d2

0808ae4c <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808ae4c:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 808ae4e:	7059      	strb	r1, [r3, #1]
 808ae50:	4770      	bx	lr

0808ae52 <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 808ae52:	781a      	ldrb	r2, [r3, #0]
 808ae54:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 808ae56:	785b      	ldrb	r3, [r3, #1]
 808ae58:	600b      	str	r3, [r1, #0]
 808ae5a:	4770      	bx	lr

0808ae5c <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808ae5c:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 808ae5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 808ae60:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808ae62:	461c      	mov	r4, r3
 808ae64:	4284      	cmp	r4, r0
 808ae66:	d016      	beq.n	808ae96 <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
 808ae68:	f8d6 e000 	ldr.w	lr, [r6]
 808ae6c:	ebc3 050e 	rsb	r5, r3, lr
 808ae70:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 808ae72:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808ae76:	3401      	adds	r4, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
 808ae78:	42bd      	cmp	r5, r7
 808ae7a:	bf2c      	ite	cs
 808ae7c:	f04f 0c00 	movcs.w	ip, #0
 808ae80:	f04f 0c01 	movcc.w	ip, #1
 808ae84:	1bed      	subs	r5, r5, r7
 808ae86:	4573      	cmp	r3, lr
 808ae88:	bf94      	ite	ls
 808ae8a:	4663      	movls	r3, ip
 808ae8c:	f10c 0301 	addhi.w	r3, ip, #1
 808ae90:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808ae94:	e7e6      	b.n	808ae64 <_ZL11mpi_sub_hlpjPmS_+0x8>
 808ae96:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 808ae9a:	b143      	cbz	r3, 808aeae <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
 808ae9c:	6811      	ldr	r1, [r2, #0]
 808ae9e:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 808aea0:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
 808aea2:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 808aea6:	bf94      	ite	ls
 808aea8:	2300      	movls	r3, #0
 808aeaa:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 808aeac:	e7f5      	b.n	808ae9a <_ZL11mpi_sub_hlpjPmS_+0x3e>
 808aeae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808aeb0 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 808aeb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808aeb4:	460d      	mov	r5, r1
 808aeb6:	4614      	mov	r4, r2
 808aeb8:	4686      	mov	lr, r0
    mbedtls_mpi_uint c = 0, t = 0;
 808aeba:	f04f 0c00 	mov.w	ip, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808aebe:	f1be 0f0f 	cmp.w	lr, #15
 808aec2:	f105 0540 	add.w	r5, r5, #64	; 0x40
 808aec6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 808aeca:	f240 811e 	bls.w	808b10a <_ZL11mpi_mul_hlpjPmS_m+0x25a>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808aece:	f855 6c40 	ldr.w	r6, [r5, #-64]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808aed2:	f1ae 0e10 	sub.w	lr, lr, #16
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808aed6:	fba6 9a03 	umull	r9, sl, r6, r3
 808aeda:	f854 6c40 	ldr.w	r6, [r4, #-64]
 808aede:	eb1c 0c09 	adds.w	ip, ip, r9
 808aee2:	bf2c      	ite	cs
 808aee4:	f04f 0801 	movcs.w	r8, #1
 808aee8:	f04f 0800 	movcc.w	r8, #0
 808aeec:	eb1c 0606 	adds.w	r6, ip, r6
 808aef0:	f844 6c40 	str.w	r6, [r4, #-64]
 808aef4:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 808aef8:	eb48 080a 	adc.w	r8, r8, sl
 808aefc:	fba3 9a06 	umull	r9, sl, r3, r6
 808af00:	f854 6c3c 	ldr.w	r6, [r4, #-60]
 808af04:	eb18 0809 	adds.w	r8, r8, r9
 808af08:	bf2c      	ite	cs
 808af0a:	f04f 0c01 	movcs.w	ip, #1
 808af0e:	f04f 0c00 	movcc.w	ip, #0
 808af12:	eb18 0606 	adds.w	r6, r8, r6
 808af16:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
 808af1a:	f855 7c38 	ldr.w	r7, [r5, #-56]
 808af1e:	f854 6c38 	ldr.w	r6, [r4, #-56]
 808af22:	fba3 8907 	umull	r8, r9, r3, r7
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808af26:	eb4c 0c0a 	adc.w	ip, ip, sl
        MULADDC_CORE   MULADDC_CORE
 808af2a:	eb1c 0c08 	adds.w	ip, ip, r8
 808af2e:	bf2c      	ite	cs
 808af30:	2701      	movcs	r7, #1
 808af32:	2700      	movcc	r7, #0
 808af34:	eb1c 0606 	adds.w	r6, ip, r6
 808af38:	f844 6c38 	str.w	r6, [r4, #-56]
 808af3c:	f855 6c34 	ldr.w	r6, [r5, #-52]
 808af40:	eb47 0709 	adc.w	r7, r7, r9
 808af44:	fba3 8906 	umull	r8, r9, r3, r6
 808af48:	f854 6c34 	ldr.w	r6, [r4, #-52]
 808af4c:	eb17 0708 	adds.w	r7, r7, r8
 808af50:	bf2c      	ite	cs
 808af52:	f04f 0c01 	movcs.w	ip, #1
 808af56:	f04f 0c00 	movcc.w	ip, #0
 808af5a:	19be      	adds	r6, r7, r6
 808af5c:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
 808af60:	f855 7c30 	ldr.w	r7, [r5, #-48]
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808af64:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808af68:	fba3 8907 	umull	r8, r9, r3, r7
 808af6c:	f854 6c30 	ldr.w	r6, [r4, #-48]
 808af70:	eb1c 0c08 	adds.w	ip, ip, r8
 808af74:	bf2c      	ite	cs
 808af76:	2701      	movcs	r7, #1
 808af78:	2700      	movcc	r7, #0
 808af7a:	eb1c 0606 	adds.w	r6, ip, r6
 808af7e:	f844 6c30 	str.w	r6, [r4, #-48]
 808af82:	f855 6c2c 	ldr.w	r6, [r5, #-44]
 808af86:	eb47 0709 	adc.w	r7, r7, r9
 808af8a:	fba3 8906 	umull	r8, r9, r3, r6
 808af8e:	f854 6c2c 	ldr.w	r6, [r4, #-44]
 808af92:	eb17 0708 	adds.w	r7, r7, r8
 808af96:	bf2c      	ite	cs
 808af98:	f04f 0c01 	movcs.w	ip, #1
 808af9c:	f04f 0c00 	movcc.w	ip, #0
 808afa0:	19be      	adds	r6, r7, r6
 808afa2:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
 808afa6:	f855 7c28 	ldr.w	r7, [r5, #-40]
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808afaa:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808afae:	fba3 8907 	umull	r8, r9, r3, r7
 808afb2:	f854 6c28 	ldr.w	r6, [r4, #-40]
 808afb6:	eb1c 0c08 	adds.w	ip, ip, r8
 808afba:	bf2c      	ite	cs
 808afbc:	2701      	movcs	r7, #1
 808afbe:	2700      	movcc	r7, #0
 808afc0:	eb1c 0606 	adds.w	r6, ip, r6
 808afc4:	f844 6c28 	str.w	r6, [r4, #-40]
 808afc8:	f855 6c24 	ldr.w	r6, [r5, #-36]
 808afcc:	eb47 0709 	adc.w	r7, r7, r9
 808afd0:	fba3 8906 	umull	r8, r9, r3, r6
 808afd4:	f854 6c24 	ldr.w	r6, [r4, #-36]
 808afd8:	eb17 0708 	adds.w	r7, r7, r8
 808afdc:	bf2c      	ite	cs
 808afde:	f04f 0c01 	movcs.w	ip, #1
 808afe2:	f04f 0c00 	movcc.w	ip, #0
 808afe6:	19be      	adds	r6, r7, r6
 808afe8:	f844 6c24 	str.w	r6, [r4, #-36]

        MULADDC_CORE   MULADDC_CORE
 808afec:	f855 7c20 	ldr.w	r7, [r5, #-32]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808aff0:	eb4c 0c09 	adc.w	ip, ip, r9

        MULADDC_CORE   MULADDC_CORE
 808aff4:	fba3 8907 	umull	r8, r9, r3, r7
 808aff8:	f854 6c20 	ldr.w	r6, [r4, #-32]
 808affc:	eb1c 0c08 	adds.w	ip, ip, r8
 808b000:	bf2c      	ite	cs
 808b002:	2701      	movcs	r7, #1
 808b004:	2700      	movcc	r7, #0
 808b006:	eb1c 0606 	adds.w	r6, ip, r6
 808b00a:	f844 6c20 	str.w	r6, [r4, #-32]
 808b00e:	f855 6c1c 	ldr.w	r6, [r5, #-28]
 808b012:	eb47 0709 	adc.w	r7, r7, r9
 808b016:	fba3 8906 	umull	r8, r9, r3, r6
 808b01a:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 808b01e:	eb17 0708 	adds.w	r7, r7, r8
 808b022:	bf2c      	ite	cs
 808b024:	f04f 0c01 	movcs.w	ip, #1
 808b028:	f04f 0c00 	movcc.w	ip, #0
 808b02c:	19be      	adds	r6, r7, r6
 808b02e:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
 808b032:	f855 7c18 	ldr.w	r7, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 808b036:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b03a:	fba3 8907 	umull	r8, r9, r3, r7
 808b03e:	f854 6c18 	ldr.w	r6, [r4, #-24]
 808b042:	eb1c 0c08 	adds.w	ip, ip, r8
 808b046:	bf2c      	ite	cs
 808b048:	2701      	movcs	r7, #1
 808b04a:	2700      	movcc	r7, #0
 808b04c:	eb1c 0606 	adds.w	r6, ip, r6
 808b050:	f844 6c18 	str.w	r6, [r4, #-24]
 808b054:	f855 6c14 	ldr.w	r6, [r5, #-20]
 808b058:	eb47 0709 	adc.w	r7, r7, r9
 808b05c:	fba3 8906 	umull	r8, r9, r3, r6
 808b060:	f854 6c14 	ldr.w	r6, [r4, #-20]
 808b064:	eb17 0708 	adds.w	r7, r7, r8
 808b068:	bf2c      	ite	cs
 808b06a:	f04f 0c01 	movcs.w	ip, #1
 808b06e:	f04f 0c00 	movcc.w	ip, #0
 808b072:	19be      	adds	r6, r7, r6
 808b074:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
 808b078:	f855 7c10 	ldr.w	r7, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b07c:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b080:	fba3 8907 	umull	r8, r9, r3, r7
 808b084:	f854 6c10 	ldr.w	r6, [r4, #-16]
 808b088:	eb1c 0c08 	adds.w	ip, ip, r8
 808b08c:	bf2c      	ite	cs
 808b08e:	2701      	movcs	r7, #1
 808b090:	2700      	movcc	r7, #0
 808b092:	eb1c 0606 	adds.w	r6, ip, r6
 808b096:	f844 6c10 	str.w	r6, [r4, #-16]
 808b09a:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 808b09e:	eb47 0709 	adc.w	r7, r7, r9
 808b0a2:	fba3 8906 	umull	r8, r9, r3, r6
 808b0a6:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 808b0aa:	eb17 0708 	adds.w	r7, r7, r8
 808b0ae:	bf2c      	ite	cs
 808b0b0:	f04f 0c01 	movcs.w	ip, #1
 808b0b4:	f04f 0c00 	movcc.w	ip, #0
 808b0b8:	19be      	adds	r6, r7, r6
 808b0ba:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
 808b0be:	f855 7c08 	ldr.w	r7, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b0c2:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b0c6:	fba3 8907 	umull	r8, r9, r3, r7
 808b0ca:	f854 6c08 	ldr.w	r6, [r4, #-8]
 808b0ce:	eb1c 0c08 	adds.w	ip, ip, r8
 808b0d2:	bf2c      	ite	cs
 808b0d4:	2701      	movcs	r7, #1
 808b0d6:	2700      	movcc	r7, #0
 808b0d8:	eb1c 0606 	adds.w	r6, ip, r6
 808b0dc:	f844 6c08 	str.w	r6, [r4, #-8]
 808b0e0:	f855 6c04 	ldr.w	r6, [r5, #-4]
 808b0e4:	eb47 0709 	adc.w	r7, r7, r9
 808b0e8:	fba3 8906 	umull	r8, r9, r3, r6
 808b0ec:	f854 6c04 	ldr.w	r6, [r4, #-4]
 808b0f0:	eb17 0708 	adds.w	r7, r7, r8
 808b0f4:	bf2c      	ite	cs
 808b0f6:	f04f 0c01 	movcs.w	ip, #1
 808b0fa:	f04f 0c00 	movcc.w	ip, #0
 808b0fe:	19be      	adds	r6, r7, r6
 808b100:	eb4c 0c09 	adc.w	ip, ip, r9
 808b104:	f844 6c04 	str.w	r6, [r4, #-4]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808b108:	e6d9      	b.n	808aebe <_ZL11mpi_mul_hlpjPmS_m+0xe>
 808b10a:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 808b10e:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 808b112:	2807      	cmp	r0, #7
 808b114:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 808b118:	eb01 050e 	add.w	r5, r1, lr
 808b11c:	eb02 040e 	add.w	r4, r2, lr
 808b120:	d966      	bls.n	808b1f0 <_ZL11mpi_mul_hlpjPmS_m+0x340>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b122:	f851 600e 	ldr.w	r6, [r1, lr]
 808b126:	fba6 7803 	umull	r7, r8, r6, r3
 808b12a:	f852 600e 	ldr.w	r6, [r2, lr]
 808b12e:	eb1c 0c07 	adds.w	ip, ip, r7
 808b132:	bf2c      	ite	cs
 808b134:	2101      	movcs	r1, #1
 808b136:	2100      	movcc	r1, #0
 808b138:	eb1c 0606 	adds.w	r6, ip, r6
 808b13c:	f842 600e 	str.w	r6, [r2, lr]
 808b140:	686e      	ldr	r6, [r5, #4]
 808b142:	eb41 0108 	adc.w	r1, r1, r8
 808b146:	fba3 7806 	umull	r7, r8, r3, r6
 808b14a:	6866      	ldr	r6, [r4, #4]
 808b14c:	19ca      	adds	r2, r1, r7
 808b14e:	bf2c      	ite	cs
 808b150:	2101      	movcs	r1, #1
 808b152:	2100      	movcc	r1, #0
 808b154:	1992      	adds	r2, r2, r6
 808b156:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 808b158:	68ae      	ldr	r6, [r5, #8]
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b15a:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 808b15e:	fba3 7806 	umull	r7, r8, r3, r6
 808b162:	68a6      	ldr	r6, [r4, #8]
 808b164:	19c9      	adds	r1, r1, r7
 808b166:	bf2c      	ite	cs
 808b168:	2201      	movcs	r2, #1
 808b16a:	2200      	movcc	r2, #0
 808b16c:	1989      	adds	r1, r1, r6
 808b16e:	60a1      	str	r1, [r4, #8]
 808b170:	68ee      	ldr	r6, [r5, #12]
 808b172:	eb42 0208 	adc.w	r2, r2, r8
 808b176:	fba3 7806 	umull	r7, r8, r3, r6
 808b17a:	68e6      	ldr	r6, [r4, #12]
 808b17c:	19d2      	adds	r2, r2, r7
 808b17e:	bf2c      	ite	cs
 808b180:	2101      	movcs	r1, #1
 808b182:	2100      	movcc	r1, #0
 808b184:	1992      	adds	r2, r2, r6
 808b186:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 808b188:	692e      	ldr	r6, [r5, #16]

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b18a:	eb41 0108 	adc.w	r1, r1, r8

        MULADDC_CORE   MULADDC_CORE
 808b18e:	fba3 7806 	umull	r7, r8, r3, r6
 808b192:	6926      	ldr	r6, [r4, #16]
 808b194:	19c9      	adds	r1, r1, r7
 808b196:	bf2c      	ite	cs
 808b198:	2201      	movcs	r2, #1
 808b19a:	2200      	movcc	r2, #0
 808b19c:	1989      	adds	r1, r1, r6
 808b19e:	6121      	str	r1, [r4, #16]
 808b1a0:	696e      	ldr	r6, [r5, #20]
 808b1a2:	eb42 0208 	adc.w	r2, r2, r8
 808b1a6:	fba3 7806 	umull	r7, r8, r3, r6
 808b1aa:	6966      	ldr	r6, [r4, #20]
 808b1ac:	19d2      	adds	r2, r2, r7
 808b1ae:	bf2c      	ite	cs
 808b1b0:	2101      	movcs	r1, #1
 808b1b2:	2100      	movcc	r1, #0
 808b1b4:	1992      	adds	r2, r2, r6
 808b1b6:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 808b1b8:	69ae      	ldr	r6, [r5, #24]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 808b1ba:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 808b1be:	fba3 7806 	umull	r7, r8, r3, r6
 808b1c2:	69a6      	ldr	r6, [r4, #24]
 808b1c4:	19c9      	adds	r1, r1, r7
 808b1c6:	bf2c      	ite	cs
 808b1c8:	2201      	movcs	r2, #1
 808b1ca:	2200      	movcc	r2, #0
 808b1cc:	1989      	adds	r1, r1, r6
 808b1ce:	61a1      	str	r1, [r4, #24]
 808b1d0:	69ee      	ldr	r6, [r5, #28]
 808b1d2:	69e1      	ldr	r1, [r4, #28]
 808b1d4:	fba3 6706 	umull	r6, r7, r3, r6
 808b1d8:	eb42 0208 	adc.w	r2, r2, r8
 808b1dc:	1992      	adds	r2, r2, r6
 808b1de:	bf2c      	ite	cs
 808b1e0:	f04f 0c01 	movcs.w	ip, #1
 808b1e4:	f04f 0c00 	movcc.w	ip, #0
 808b1e8:	1852      	adds	r2, r2, r1
 808b1ea:	eb4c 0c07 	adc.w	ip, ip, r7
 808b1ee:	61e2      	str	r2, [r4, #28]
 808b1f0:	08c2      	lsrs	r2, r0, #3
 808b1f2:	0151      	lsls	r1, r2, #5
 808b1f4:	440c      	add	r4, r1
 808b1f6:	440d      	add	r5, r1
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    mbedtls_mpi_uint c = 0, t = 0;
 808b1f8:	4621      	mov	r1, r4
 808b1fa:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 808b1fe:	0080      	lsls	r0, r0, #2
 808b200:	eb05 0e00 	add.w	lr, r5, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 808b204:	4575      	cmp	r5, lr
 808b206:	d011      	beq.n	808b22c <_ZL11mpi_mul_hlpjPmS_m+0x37c>
    {
        MULADDC_INIT
        MULADDC_CORE
 808b208:	f855 6b04 	ldr.w	r6, [r5], #4
 808b20c:	fba6 7803 	umull	r7, r8, r6, r3
 808b210:	680e      	ldr	r6, [r1, #0]
 808b212:	eb1c 0207 	adds.w	r2, ip, r7
 808b216:	bf2c      	ite	cs
 808b218:	f04f 0c01 	movcs.w	ip, #1
 808b21c:	f04f 0c00 	movcc.w	ip, #0
 808b220:	1992      	adds	r2, r2, r6
 808b222:	eb4c 0c08 	adc.w	ip, ip, r8
 808b226:	f841 2b04 	str.w	r2, [r1], #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 808b22a:	e7eb      	b.n	808b204 <_ZL11mpi_mul_hlpjPmS_m+0x354>
 808b22c:	4404      	add	r4, r0
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 808b22e:	6823      	ldr	r3, [r4, #0]
 808b230:	4463      	add	r3, ip
 808b232:	459c      	cmp	ip, r3
 808b234:	f844 3b04 	str.w	r3, [r4], #4
 808b238:	bf8c      	ite	hi
 808b23a:	f04f 0c01 	movhi.w	ip, #1
 808b23e:	f04f 0c00 	movls.w	ip, #0
    }
    while( c != 0 );
 808b242:	d8f4      	bhi.n	808b22e <_ZL11mpi_mul_hlpjPmS_m+0x37e>
}
 808b244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808b248 <mbedtls_mpi_init>:
/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
 808b248:	b120      	cbz	r0, 808b254 <mbedtls_mpi_init+0xc>
        return;

    X->s = 1;
 808b24a:	2301      	movs	r3, #1
 808b24c:	6003      	str	r3, [r0, #0]
    X->n = 0;
 808b24e:	2300      	movs	r3, #0
 808b250:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 808b252:	6083      	str	r3, [r0, #8]
 808b254:	4770      	bx	lr

0808b256 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 808b256:	b510      	push	{r4, lr}
    if( X == NULL )
 808b258:	4604      	mov	r4, r0
 808b25a:	b188      	cbz	r0, 808b280 <mbedtls_mpi_free+0x2a>
        return;

    if( X->p != NULL )
 808b25c:	6883      	ldr	r3, [r0, #8]
 808b25e:	b153      	cbz	r3, 808b276 <mbedtls_mpi_free+0x20>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 808b260:	6842      	ldr	r2, [r0, #4]
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 808b262:	2100      	movs	r1, #0
 808b264:	f112 32ff 	adds.w	r2, r2, #4294967295
 808b268:	d302      	bcc.n	808b270 <mbedtls_mpi_free+0x1a>
 808b26a:	6019      	str	r1, [r3, #0]
 808b26c:	3304      	adds	r3, #4
 808b26e:	e7f9      	b.n	808b264 <mbedtls_mpi_free+0xe>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
 808b270:	68a0      	ldr	r0, [r4, #8]
 808b272:	f005 fc2f 	bl	8090ad4 <free>
    }

    X->s = 1;
 808b276:	2301      	movs	r3, #1
 808b278:	6023      	str	r3, [r4, #0]
    X->n = 0;
 808b27a:	2300      	movs	r3, #0
 808b27c:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 808b27e:	60a3      	str	r3, [r4, #8]
 808b280:	bd10      	pop	{r4, pc}

0808b282 <mbedtls_mpi_grow>:
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 808b282:	f242 7310 	movw	r3, #10000	; 0x2710
 808b286:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 808b288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b28c:	4604      	mov	r4, r0
 808b28e:	460f      	mov	r7, r1
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 808b290:	d903      	bls.n	808b29a <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 808b292:	f06f 000f 	mvn.w	r0, #15
 808b296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
 808b29a:	6846      	ldr	r6, [r0, #4]
 808b29c:	42b1      	cmp	r1, r6
 808b29e:	d919      	bls.n	808b2d4 <mbedtls_mpi_grow+0x52>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 808b2a0:	2104      	movs	r1, #4
 808b2a2:	4638      	mov	r0, r7
 808b2a4:	f007 fed6 	bl	8093054 <calloc>
 808b2a8:	4680      	mov	r8, r0
 808b2aa:	2800      	cmp	r0, #0
 808b2ac:	d0f1      	beq.n	808b292 <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
 808b2ae:	68a5      	ldr	r5, [r4, #8]
 808b2b0:	b16d      	cbz	r5, 808b2ce <mbedtls_mpi_grow+0x4c>
        {
            memcpy( p, X->p, X->n * ciL );
 808b2b2:	00b2      	lsls	r2, r6, #2
 808b2b4:	4629      	mov	r1, r5
 808b2b6:	f007 fef2 	bl	809309e <memcpy>
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 808b2ba:	2300      	movs	r3, #0
 808b2bc:	f116 36ff 	adds.w	r6, r6, #4294967295
 808b2c0:	d302      	bcc.n	808b2c8 <mbedtls_mpi_grow+0x46>
 808b2c2:	602b      	str	r3, [r5, #0]
 808b2c4:	3504      	adds	r5, #4
 808b2c6:	e7f9      	b.n	808b2bc <mbedtls_mpi_grow+0x3a>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
 808b2c8:	68a0      	ldr	r0, [r4, #8]
 808b2ca:	f005 fc03 	bl	8090ad4 <free>
        }

        X->n = nblimbs;
 808b2ce:	6067      	str	r7, [r4, #4]
        X->p = p;
 808b2d0:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
 808b2d4:	2000      	movs	r0, #0
}
 808b2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808b2da <mbedtls_mpi_copy>:
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    int ret;
    size_t i;

    if( X == Y )
 808b2da:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808b2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b2de:	4606      	mov	r6, r0
 808b2e0:	460f      	mov	r7, r1
    int ret;
    size_t i;

    if( X == Y )
 808b2e2:	d020      	beq.n	808b326 <mbedtls_mpi_copy+0x4c>
        return( 0 );

    if( Y->p == NULL )
 808b2e4:	688c      	ldr	r4, [r1, #8]
 808b2e6:	b914      	cbnz	r4, 808b2ee <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
 808b2e8:	f7ff ffb5 	bl	808b256 <mbedtls_mpi_free>
 808b2ec:	e01d      	b.n	808b32a <mbedtls_mpi_copy+0x50>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
 808b2ee:	6849      	ldr	r1, [r1, #4]
 808b2f0:	3901      	subs	r1, #1
 808b2f2:	b119      	cbz	r1, 808b2fc <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
 808b2f4:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 808b2f8:	2b00      	cmp	r3, #0
 808b2fa:	d0f9      	beq.n	808b2f0 <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;
 808b2fc:	683b      	ldr	r3, [r7, #0]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
 808b2fe:	1c4d      	adds	r5, r1, #1

    X->s = Y->s;
 808b300:	6033      	str	r3, [r6, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 808b302:	4629      	mov	r1, r5
 808b304:	4630      	mov	r0, r6
 808b306:	f7ff ffbc 	bl	808b282 <mbedtls_mpi_grow>
 808b30a:	4604      	mov	r4, r0
 808b30c:	b968      	cbnz	r0, 808b32a <mbedtls_mpi_copy+0x50>

    memset( X->p, 0, X->n * ciL );
 808b30e:	6872      	ldr	r2, [r6, #4]
 808b310:	4601      	mov	r1, r0
 808b312:	0092      	lsls	r2, r2, #2
 808b314:	68b0      	ldr	r0, [r6, #8]
 808b316:	f007 fee8 	bl	80930ea <memset>
    memcpy( X->p, Y->p, i * ciL );
 808b31a:	00aa      	lsls	r2, r5, #2
 808b31c:	68b9      	ldr	r1, [r7, #8]
 808b31e:	68b0      	ldr	r0, [r6, #8]
 808b320:	f007 febd 	bl	809309e <memcpy>
 808b324:	e001      	b.n	808b32a <mbedtls_mpi_copy+0x50>
{
    int ret;
    size_t i;

    if( X == Y )
        return( 0 );
 808b326:	2000      	movs	r0, #0
 808b328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808b32a:	4620      	mov	r0, r4
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
 808b32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b32e <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808b32e:	b570      	push	{r4, r5, r6, lr}
 808b330:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 808b332:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808b334:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 808b336:	f7ff ffa4 	bl	808b282 <mbedtls_mpi_grow>
 808b33a:	4605      	mov	r5, r0
 808b33c:	b988      	cbnz	r0, 808b362 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 808b33e:	6862      	ldr	r2, [r4, #4]
 808b340:	4601      	mov	r1, r0
 808b342:	0092      	lsls	r2, r2, #2
 808b344:	68a0      	ldr	r0, [r4, #8]
 808b346:	f007 fed0 	bl	80930ea <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 808b34a:	68a3      	ldr	r3, [r4, #8]
 808b34c:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 808b350:	2e00      	cmp	r6, #0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
 808b352:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 808b356:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 808b358:	bfb4      	ite	lt
 808b35a:	f04f 33ff 	movlt.w	r3, #4294967295
 808b35e:	2301      	movge	r3, #1
 808b360:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 808b362:	4628      	mov	r0, r5
 808b364:	bd70      	pop	{r4, r5, r6, pc}

0808b366 <mbedtls_mpi_get_bit>:
/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
 808b366:	6843      	ldr	r3, [r0, #4]
 808b368:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 808b36c:	bf3f      	itttt	cc
 808b36e:	6883      	ldrcc	r3, [r0, #8]
 808b370:	094a      	lsrcc	r2, r1, #5
 808b372:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
 808b376:	f001 001f 	andcc.w	r0, r1, #31
 808b37a:	bf3a      	itte	cc
 808b37c:	fa23 f000 	lsrcc.w	r0, r3, r0
 808b380:	f000 0001 	andcc.w	r0, r0, #1
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
        return( 0 );
 808b384:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
 808b386:	4770      	bx	lr

0808b388 <mbedtls_mpi_lsb>:
/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
 808b388:	2300      	movs	r3, #0

    for( i = 0; i < X->n; i++ )
 808b38a:	461a      	mov	r2, r3

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 808b38c:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 808b38e:	6844      	ldr	r4, [r0, #4]
 808b390:	42a2      	cmp	r2, r4
 808b392:	d00e      	beq.n	808b3b2 <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 808b394:	6881      	ldr	r1, [r0, #8]
 808b396:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 808b39a:	2100      	movs	r1, #0
 808b39c:	fa25 f601 	lsr.w	r6, r5, r1
 808b3a0:	07f6      	lsls	r6, r6, #31
 808b3a2:	d408      	bmi.n	808b3b6 <mbedtls_mpi_lsb+0x2e>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
 808b3a4:	3101      	adds	r1, #1
 808b3a6:	2920      	cmp	r1, #32
 808b3a8:	f103 0301 	add.w	r3, r3, #1
 808b3ac:	d1f6      	bne.n	808b39c <mbedtls_mpi_lsb+0x14>
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 808b3ae:	3201      	adds	r2, #1
 808b3b0:	e7ee      	b.n	808b390 <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
 808b3b2:	2000      	movs	r0, #0
 808b3b4:	bd70      	pop	{r4, r5, r6, pc}
 808b3b6:	4618      	mov	r0, r3
}
 808b3b8:	bd70      	pop	{r4, r5, r6, pc}

0808b3ba <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 808b3ba:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
 808b3bc:	6843      	ldr	r3, [r0, #4]
 808b3be:	b1d3      	cbz	r3, 808b3f6 <mbedtls_mpi_bitlen+0x3c>
 808b3c0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b3c4:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808b3c6:	1e59      	subs	r1, r3, #1
 808b3c8:	0092      	lsls	r2, r2, #2
 808b3ca:	6883      	ldr	r3, [r0, #8]
 808b3cc:	b121      	cbz	r1, 808b3d8 <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
 808b3ce:	589c      	ldr	r4, [r3, r2]
 808b3d0:	3a04      	subs	r2, #4
 808b3d2:	b90c      	cbnz	r4, 808b3d8 <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808b3d4:	3901      	subs	r1, #1
 808b3d6:	e7f8      	b.n	808b3ca <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
 808b3d8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 808b3dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
 808b3e0:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
 808b3e2:	4210      	tst	r0, r2
 808b3e4:	d104      	bne.n	808b3f0 <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808b3e6:	3301      	adds	r3, #1
 808b3e8:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
 808b3ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808b3ee:	d1f8      	bne.n	808b3e2 <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
 808b3f0:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
 808b3f4:	3320      	adds	r3, #32
}
 808b3f6:	4618      	mov	r0, r3
 808b3f8:	bd10      	pop	{r4, pc}

0808b3fa <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 808b3fa:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 808b3fc:	f7ff ffdd 	bl	808b3ba <mbedtls_mpi_bitlen>
 808b400:	3007      	adds	r0, #7
}
 808b402:	08c0      	lsrs	r0, r0, #3
 808b404:	bd08      	pop	{r3, pc}

0808b406 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808b406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b408:	460d      	mov	r5, r1
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808b40a:	f012 0103 	ands.w	r1, r2, #3
 808b40e:	bf18      	it	ne
 808b410:	2101      	movne	r1, #1

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808b412:	6843      	ldr	r3, [r0, #4]
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808b414:	eb01 0492 	add.w	r4, r1, r2, lsr #2

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808b418:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808b41a:	4606      	mov	r6, r0
 808b41c:	4617      	mov	r7, r2
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808b41e:	d105      	bne.n	808b42c <mbedtls_mpi_read_binary+0x26>
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808b420:	2100      	movs	r1, #0
 808b422:	4630      	mov	r0, r6
 808b424:	f7ff ff83 	bl	808b32e <mbedtls_mpi_lset>
 808b428:	b160      	cbz	r0, 808b444 <mbedtls_mpi_read_binary+0x3e>
 808b42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
 808b42c:	f7ff ff13 	bl	808b256 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 808b430:	4630      	mov	r0, r6
 808b432:	f7ff ff09 	bl	808b248 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 808b436:	4621      	mov	r1, r4
 808b438:	4630      	mov	r0, r6
 808b43a:	f7ff ff22 	bl	808b282 <mbedtls_mpi_grow>
 808b43e:	2800      	cmp	r0, #0
 808b440:	d0ee      	beq.n	808b420 <mbedtls_mpi_read_binary+0x1a>
 808b442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808b444:	4603      	mov	r3, r0
 808b446:	19e9      	adds	r1, r5, r7

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808b448:	42bb      	cmp	r3, r7
 808b44a:	d010      	beq.n	808b46e <mbedtls_mpi_read_binary+0x68>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808b44c:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 808b450:	68b2      	ldr	r2, [r6, #8]
 808b452:	00dc      	lsls	r4, r3, #3
 808b454:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 808b458:	f004 0418 	and.w	r4, r4, #24
 808b45c:	fa05 f404 	lsl.w	r4, r5, r4
 808b460:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808b464:	3301      	adds	r3, #1
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808b466:	432c      	orrs	r4, r5
 808b468:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808b46c:	e7ec      	b.n	808b448 <mbedtls_mpi_read_binary+0x42>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);

cleanup:

    return( ret );
}
 808b46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b470 <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
 808b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b472:	4614      	mov	r4, r2
 808b474:	4605      	mov	r5, r0
 808b476:	460f      	mov	r7, r1
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808b478:	f7ff ffbf 	bl	808b3fa <mbedtls_mpi_size>

    if( buflen < n )
 808b47c:	42a0      	cmp	r0, r4
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808b47e:	4606      	mov	r6, r0

    if( buflen < n )
 808b480:	d814      	bhi.n	808b4ac <mbedtls_mpi_write_binary+0x3c>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );
 808b482:	4622      	mov	r2, r4
 808b484:	2100      	movs	r1, #0
 808b486:	4638      	mov	r0, r7
 808b488:	f007 fe2f 	bl	80930ea <memset>
 808b48c:	443c      	add	r4, r7

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808b48e:	2300      	movs	r3, #0
 808b490:	42b3      	cmp	r3, r6
 808b492:	d00e      	beq.n	808b4b2 <mbedtls_mpi_write_binary+0x42>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808b494:	68a8      	ldr	r0, [r5, #8]
 808b496:	00da      	lsls	r2, r3, #3
 808b498:	089f      	lsrs	r7, r3, #2
 808b49a:	f002 0118 	and.w	r1, r2, #24
 808b49e:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808b4a2:	3301      	adds	r3, #1
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808b4a4:	40ca      	lsrs	r2, r1
 808b4a6:	f804 2d01 	strb.w	r2, [r4, #-1]!
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808b4aa:	e7f1      	b.n	808b490 <mbedtls_mpi_write_binary+0x20>
    size_t i, j, n;

    n = mbedtls_mpi_size( X );

    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 808b4ac:	f06f 0007 	mvn.w	r0, #7
 808b4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );

    return( 0 );
 808b4b2:	2000      	movs	r0, #0
}
 808b4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b4b6 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 808b4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b4b8:	4604      	mov	r4, r0
 808b4ba:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
 808b4bc:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
 808b4be:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
 808b4c2:	f7ff ff7a 	bl	808b3ba <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
 808b4c6:	6863      	ldr	r3, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
 808b4c8:	4428      	add	r0, r5

    if( X->n * biL < i )
 808b4ca:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 808b4ce:	d809      	bhi.n	808b4e4 <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808b4d0:	b346      	cbz	r6, 808b524 <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
 808b4d2:	6863      	ldr	r3, [r4, #4]
 808b4d4:	f06f 0103 	mvn.w	r1, #3
 808b4d8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b4dc:	3a01      	subs	r2, #1
 808b4de:	0092      	lsls	r2, r2, #2
 808b4e0:	4371      	muls	r1, r6
 808b4e2:	e00b      	b.n	808b4fc <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 808b4e4:	f010 011f 	ands.w	r1, r0, #31
 808b4e8:	bf18      	it	ne
 808b4ea:	2101      	movne	r1, #1
 808b4ec:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 808b4f0:	4620      	mov	r0, r4
 808b4f2:	f7ff fec6 	bl	808b282 <mbedtls_mpi_grow>
 808b4f6:	2800      	cmp	r0, #0
 808b4f8:	d0ea      	beq.n	808b4d0 <mbedtls_mpi_shift_l+0x1a>
 808b4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808b4fc:	42b3      	cmp	r3, r6
 808b4fe:	d906      	bls.n	808b50e <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 808b500:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808b502:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 808b504:	1885      	adds	r5, r0, r2
 808b506:	586d      	ldr	r5, [r5, r1]
 808b508:	5085      	str	r5, [r0, r2]
 808b50a:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808b50c:	e7f6      	b.n	808b4fc <mbedtls_mpi_shift_l+0x46>
 808b50e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 808b512:	3b01      	subs	r3, #1
 808b514:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
 808b516:	2100      	movs	r1, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808b518:	1d1a      	adds	r2, r3, #4
 808b51a:	d003      	beq.n	808b524 <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
 808b51c:	68a2      	ldr	r2, [r4, #8]
 808b51e:	50d1      	str	r1, [r2, r3]
 808b520:	3b04      	subs	r3, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808b522:	e7f9      	b.n	808b518 <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808b524:	b90f      	cbnz	r7, 808b52a <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
 808b526:	2000      	movs	r0, #0
 808b528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808b52a:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808b52c:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
 808b52e:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808b532:	6861      	ldr	r1, [r4, #4]
 808b534:	428e      	cmp	r6, r1
 808b536:	d2f6      	bcs.n	808b526 <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
 808b538:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808b53a:	3601      	adds	r6, #1
        {
            r1 = X->p[i] >> (biL - t1);
 808b53c:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
 808b53e:	fa01 f507 	lsl.w	r5, r1, r7
 808b542:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
 808b544:	68a0      	ldr	r0, [r4, #8]
 808b546:	58c5      	ldr	r5, [r0, r3]
 808b548:	432a      	orrs	r2, r5
 808b54a:	50c2      	str	r2, [r0, r3]
 808b54c:	3304      	adds	r3, #4
            r0 = r1;
 808b54e:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808b552:	e7ee      	b.n	808b532 <mbedtls_mpi_shift_l+0x7c>

0808b554 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 808b554:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808b556:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
 808b558:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808b55a:	429a      	cmp	r2, r3
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);
 808b55c:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808b560:	d801      	bhi.n	808b566 <mbedtls_mpi_shift_r+0x12>
 808b562:	d105      	bne.n	808b570 <mbedtls_mpi_shift_r+0x1c>
 808b564:	b159      	cbz	r1, 808b57e <mbedtls_mpi_shift_r+0x2a>
            r0 = r1;
        }
    }

    return( 0 );
}
 808b566:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
 808b56a:	2100      	movs	r1, #0
 808b56c:	f7ff bedf 	b.w	808b32e <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808b570:	b1d2      	cbz	r2, 808b5a8 <mbedtls_mpi_shift_r+0x54>
 808b572:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
 808b574:	6844      	ldr	r4, [r0, #4]
 808b576:	1aa4      	subs	r4, r4, r2
 808b578:	42a3      	cmp	r3, r4
 808b57a:	d305      	bcc.n	808b588 <mbedtls_mpi_shift_r+0x34>
 808b57c:	e001      	b.n	808b582 <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808b57e:	b35a      	cbz	r2, 808b5d8 <mbedtls_mpi_shift_r+0x84>
 808b580:	460b      	mov	r3, r1
 808b582:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
 808b584:	2500      	movs	r5, #0
 808b586:	e007      	b.n	808b598 <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
 808b588:	6884      	ldr	r4, [r0, #8]
 808b58a:	189d      	adds	r5, r3, r2
 808b58c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 808b590:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
 808b594:	3301      	adds	r3, #1
 808b596:	e7ed      	b.n	808b574 <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808b598:	6844      	ldr	r4, [r0, #4]
 808b59a:	42a3      	cmp	r3, r4
 808b59c:	d204      	bcs.n	808b5a8 <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
 808b59e:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808b5a0:	3301      	adds	r3, #1
            X->p[i] = 0;
 808b5a2:	50a5      	str	r5, [r4, r2]
 808b5a4:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808b5a6:	e7f7      	b.n	808b598 <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 808b5a8:	b1b1      	cbz	r1, 808b5d8 <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
 808b5aa:	6844      	ldr	r4, [r0, #4]
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 808b5ac:	2200      	movs	r2, #0
 808b5ae:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808b5b2:	3b01      	subs	r3, #1
 808b5b4:	009b      	lsls	r3, r3, #2
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
 808b5b6:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808b5ba:	b16c      	cbz	r4, 808b5d8 <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
 808b5bc:	6886      	ldr	r6, [r0, #8]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808b5be:	3c01      	subs	r4, #1
        {
            r1 = X->p[i - 1] << (biL - v1);
 808b5c0:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
 808b5c2:	fa25 f701 	lsr.w	r7, r5, r1
 808b5c6:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
 808b5c8:	6886      	ldr	r6, [r0, #8]
 808b5ca:	58f7      	ldr	r7, [r6, r3]
 808b5cc:	433a      	orrs	r2, r7
 808b5ce:	50f2      	str	r2, [r6, r3]
 808b5d0:	3b04      	subs	r3, #4
            r0 = r1;
 808b5d2:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808b5d6:	e7f0      	b.n	808b5ba <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
 808b5d8:	2000      	movs	r0, #0
 808b5da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b5dc <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808b5dc:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b5de:	6843      	ldr	r3, [r0, #4]
 808b5e0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b5e4:	3a01      	subs	r2, #1
 808b5e6:	0092      	lsls	r2, r2, #2
 808b5e8:	b12b      	cbz	r3, 808b5f6 <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
 808b5ea:	6884      	ldr	r4, [r0, #8]
 808b5ec:	58a4      	ldr	r4, [r4, r2]
 808b5ee:	3a04      	subs	r2, #4
 808b5f0:	b90c      	cbnz	r4, 808b5f6 <mbedtls_mpi_cmp_abs+0x1a>
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b5f2:	3b01      	subs	r3, #1
 808b5f4:	e7f8      	b.n	808b5e8 <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b5f6:	684c      	ldr	r4, [r1, #4]
 808b5f8:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808b5fc:	3a01      	subs	r2, #1
 808b5fe:	0092      	lsls	r2, r2, #2
 808b600:	b1c4      	cbz	r4, 808b634 <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
 808b602:	688d      	ldr	r5, [r1, #8]
 808b604:	58ae      	ldr	r6, [r5, r2]
 808b606:	3a04      	subs	r2, #4
 808b608:	b90e      	cbnz	r6, 808b60e <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b60a:	3c01      	subs	r4, #1
 808b60c:	e7f8      	b.n	808b600 <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808b60e:	429c      	cmp	r4, r3
 808b610:	d30b      	bcc.n	808b62a <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 808b612:	d913      	bls.n	808b63c <mbedtls_mpi_cmp_abs+0x60>
 808b614:	e00b      	b.n	808b62e <mbedtls_mpi_cmp_abs+0x52>
 808b616:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 808b61a:	d308      	bcc.n	808b62e <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
 808b61c:	3b01      	subs	r3, #1
 808b61e:	b193      	cbz	r3, 808b646 <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 808b620:	6881      	ldr	r1, [r0, #8]
 808b622:	588c      	ldr	r4, [r1, r2]
 808b624:	58a9      	ldr	r1, [r5, r2]
 808b626:	428c      	cmp	r4, r1
 808b628:	d9f5      	bls.n	808b616 <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808b62a:	2001      	movs	r0, #1
 808b62c:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 808b62e:	f04f 30ff 	mov.w	r0, #4294967295
 808b632:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
 808b634:	1c18      	adds	r0, r3, #0
 808b636:	bf18      	it	ne
 808b638:	2001      	movne	r0, #1
 808b63a:	bd70      	pop	{r4, r5, r6, pc}
 808b63c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b640:	3a01      	subs	r2, #1
 808b642:	0092      	lsls	r2, r2, #2
 808b644:	e7eb      	b.n	808b61e <mbedtls_mpi_cmp_abs+0x42>
 808b646:	4618      	mov	r0, r3
 808b648:	bd70      	pop	{r4, r5, r6, pc}

0808b64a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808b64a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b64e:	4616      	mov	r6, r2
 808b650:	b085      	sub	sp, #20
 808b652:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808b654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808b656:	4681      	mov	r9, r0
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808b658:	685a      	ldr	r2, [r3, #4]
 808b65a:	6873      	ldr	r3, [r6, #4]
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808b65c:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808b65e:	3301      	adds	r3, #1
 808b660:	429a      	cmp	r2, r3
 808b662:	d351      	bcc.n	808b708 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
 808b664:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808b666:	6898      	ldr	r0, [r3, #8]
 808b668:	2800      	cmp	r0, #0
 808b66a:	d04d      	beq.n	808b708 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 808b66c:	0092      	lsls	r2, r2, #2
 808b66e:	2100      	movs	r1, #0
 808b670:	f007 fd3b 	bl	80930ea <memset>

    d = T->p;
 808b674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 808b676:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808b67a:	689b      	ldr	r3, [r3, #8]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808b67c:	f10a 0701 	add.w	r7, sl, #1
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808b680:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
 808b682:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808b686:	9d00      	ldr	r5, [sp, #0]
 808b688:	4553      	cmp	r3, sl
 808b68a:	bf28      	it	cs
 808b68c:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808b68e:	00bf      	lsls	r7, r7, #2
 808b690:	9302      	str	r3, [sp, #8]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808b692:	2400      	movs	r4, #0
 808b694:	4554      	cmp	r4, sl
 808b696:	f8d9 0008 	ldr.w	r0, [r9, #8]
 808b69a:	d01b      	beq.n	808b6d4 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b69c:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 808b6a0:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b6a4:	682a      	ldr	r2, [r5, #0]
 808b6a6:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
 808b6a8:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b6aa:	fb03 2308 	mla	r3, r3, r8, r2
 808b6ae:	9a03      	ldr	r2, [sp, #12]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808b6b0:	3401      	adds	r4, #1
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b6b2:	4353      	muls	r3, r2

        mpi_mul_hlp( m, B->p, d, u0 );
 808b6b4:	462a      	mov	r2, r5
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b6b6:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
 808b6b8:	4643      	mov	r3, r8
 808b6ba:	f7ff fbf9 	bl	808aeb0 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
 808b6be:	9b01      	ldr	r3, [sp, #4]
 808b6c0:	462a      	mov	r2, r5
 808b6c2:	68b1      	ldr	r1, [r6, #8]
 808b6c4:	4650      	mov	r0, sl
 808b6c6:	f7ff fbf3 	bl	808aeb0 <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
 808b6ca:	f845 8b04 	str.w	r8, [r5], #4
 808b6ce:	2300      	movs	r3, #0
 808b6d0:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808b6d2:	e7df      	b.n	808b694 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 808b6d4:	9b00      	ldr	r3, [sp, #0]
 808b6d6:	1f39      	subs	r1, r7, #4
 808b6d8:	440b      	add	r3, r1
 808b6da:	463a      	mov	r2, r7
 808b6dc:	4619      	mov	r1, r3
 808b6de:	f007 fcde 	bl	809309e <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 808b6e2:	4631      	mov	r1, r6
 808b6e4:	4648      	mov	r0, r9
 808b6e6:	f7ff ff79 	bl	808b5dc <mbedtls_mpi_cmp_abs>
 808b6ea:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808b6ec:	bfb8      	it	lt
 808b6ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 808b6f0:	4620      	mov	r0, r4
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
 808b6f2:	bfa7      	ittee	ge
 808b6f4:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 808b6f8:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808b6fa:	689a      	ldrlt	r2, [r3, #8]
 808b6fc:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 808b700:	f7ff fbac 	bl	808ae5c <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
 808b704:	2000      	movs	r0, #0
 808b706:	e001      	b.n	808b70c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808b708:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
 808b70c:	b005      	add	sp, #20
 808b70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808b712 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808b712:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b714:	6843      	ldr	r3, [r0, #4]
 808b716:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b71a:	3a01      	subs	r2, #1
 808b71c:	0092      	lsls	r2, r2, #2
 808b71e:	b12b      	cbz	r3, 808b72c <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
 808b720:	6884      	ldr	r4, [r0, #8]
 808b722:	58a4      	ldr	r4, [r4, r2]
 808b724:	3a04      	subs	r2, #4
 808b726:	b90c      	cbnz	r4, 808b72c <mbedtls_mpi_cmp_mpi+0x1a>
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b728:	3b01      	subs	r3, #1
 808b72a:	e7f8      	b.n	808b71e <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b72c:	684c      	ldr	r4, [r1, #4]
 808b72e:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808b732:	3a01      	subs	r2, #1
 808b734:	0092      	lsls	r2, r2, #2
 808b736:	b364      	cbz	r4, 808b792 <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
 808b738:	688d      	ldr	r5, [r1, #8]
 808b73a:	58ae      	ldr	r6, [r5, r2]
 808b73c:	3a04      	subs	r2, #4
 808b73e:	b90e      	cbnz	r6, 808b744 <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b740:	3c01      	subs	r4, #1
 808b742:	e7f8      	b.n	808b736 <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
 808b744:	429c      	cmp	r4, r3
 808b746:	d201      	bcs.n	808b74c <mbedtls_mpi_cmp_mpi+0x3a>
 808b748:	6802      	ldr	r2, [r0, #0]
 808b74a:	e025      	b.n	808b798 <mbedtls_mpi_cmp_mpi+0x86>
 808b74c:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 808b74e:	d901      	bls.n	808b754 <mbedtls_mpi_cmp_mpi+0x42>
 808b750:	424a      	negs	r2, r1
 808b752:	e021      	b.n	808b798 <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808b754:	6802      	ldr	r2, [r0, #0]
 808b756:	2a00      	cmp	r2, #0
 808b758:	dd01      	ble.n	808b75e <mbedtls_mpi_cmp_mpi+0x4c>
 808b75a:	2900      	cmp	r1, #0
 808b75c:	db14      	blt.n	808b788 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808b75e:	2900      	cmp	r1, #0
 808b760:	dd01      	ble.n	808b766 <mbedtls_mpi_cmp_mpi+0x54>
 808b762:	2a00      	cmp	r2, #0
 808b764:	db12      	blt.n	808b78c <mbedtls_mpi_cmp_mpi+0x7a>
 808b766:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 808b76a:	3901      	subs	r1, #1
 808b76c:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
 808b76e:	b193      	cbz	r3, 808b796 <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 808b770:	6884      	ldr	r4, [r0, #8]
 808b772:	5866      	ldr	r6, [r4, r1]
 808b774:	586c      	ldr	r4, [r5, r1]
 808b776:	42a6      	cmp	r6, r4
 808b778:	d80e      	bhi.n	808b798 <mbedtls_mpi_cmp_mpi+0x86>
 808b77a:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 808b77e:	d201      	bcs.n	808b784 <mbedtls_mpi_cmp_mpi+0x72>
 808b780:	4252      	negs	r2, r2
 808b782:	e009      	b.n	808b798 <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
 808b784:	3b01      	subs	r3, #1
 808b786:	e7f2      	b.n	808b76e <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808b788:	2201      	movs	r2, #1
 808b78a:	e005      	b.n	808b798 <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808b78c:	f04f 32ff 	mov.w	r2, #4294967295
 808b790:	e002      	b.n	808b798 <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
 808b792:	2b00      	cmp	r3, #0
 808b794:	d1d8      	bne.n	808b748 <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
 808b796:	461a      	mov	r2, r3
}
 808b798:	4610      	mov	r0, r2
 808b79a:	bd70      	pop	{r4, r5, r6, pc}

0808b79c <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808b79c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808b79e:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 808b7a2:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 808b7a6:	2900      	cmp	r1, #0
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808b7a8:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 808b7aa:	bfb4      	ite	lt
 808b7ac:	f04f 33ff 	movlt.w	r3, #4294967295
 808b7b0:	2301      	movge	r3, #1
 808b7b2:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808b7b4:	a901      	add	r1, sp, #4
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
 808b7b6:	2301      	movs	r3, #1
 808b7b8:	9302      	str	r3, [sp, #8]
    Y.p = p;
 808b7ba:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808b7be:	f7ff ffa8 	bl	808b712 <mbedtls_mpi_cmp_mpi>
}
 808b7c2:	b005      	add	sp, #20
 808b7c4:	f85d fb04 	ldr.w	pc, [sp], #4

0808b7c8 <mbedtls_mpi_add_abs>:
{
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808b7c8:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b7ce:	4606      	mov	r6, r0
 808b7d0:	4615      	mov	r5, r2
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808b7d2:	d006      	beq.n	808b7e2 <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
 808b7d4:	4288      	cmp	r0, r1
 808b7d6:	d005      	beq.n	808b7e4 <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808b7d8:	f7ff fd7f 	bl	808b2da <mbedtls_mpi_copy>
 808b7dc:	4607      	mov	r7, r0
 808b7de:	b108      	cbz	r0, 808b7e4 <mbedtls_mpi_add_abs+0x1c>
 808b7e0:	e049      	b.n	808b876 <mbedtls_mpi_add_abs+0xae>
 808b7e2:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 808b7e4:	2301      	movs	r3, #1
 808b7e6:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
 808b7e8:	686c      	ldr	r4, [r5, #4]
 808b7ea:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808b7ee:	3b01      	subs	r3, #1
 808b7f0:	009b      	lsls	r3, r3, #2
 808b7f2:	b12c      	cbz	r4, 808b800 <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
 808b7f4:	68aa      	ldr	r2, [r5, #8]
 808b7f6:	58d2      	ldr	r2, [r2, r3]
 808b7f8:	3b04      	subs	r3, #4
 808b7fa:	b90a      	cbnz	r2, 808b800 <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
 808b7fc:	3c01      	subs	r4, #1
 808b7fe:	e7f8      	b.n	808b7f2 <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808b800:	4621      	mov	r1, r4
 808b802:	4630      	mov	r0, r6
 808b804:	f7ff fd3d 	bl	808b282 <mbedtls_mpi_grow>
 808b808:	4607      	mov	r7, r0
 808b80a:	2800      	cmp	r0, #0
 808b80c:	d133      	bne.n	808b876 <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
 808b80e:	68b3      	ldr	r3, [r6, #8]
 808b810:	f8d5 c008 	ldr.w	ip, [r5, #8]
 808b814:	4618      	mov	r0, r3
 808b816:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808b818:	4639      	mov	r1, r7
 808b81a:	42a1      	cmp	r1, r4
 808b81c:	d00f      	beq.n	808b83e <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808b81e:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
 808b820:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 808b824:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
 808b826:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808b828:	bf2c      	ite	cs
 808b82a:	2201      	movcs	r2, #1
 808b82c:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
 808b82e:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808b832:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
 808b834:	45ae      	cmp	lr, r5
 808b836:	bf94      	ite	ls
 808b838:	4615      	movls	r5, r2
 808b83a:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808b83c:	e7ed      	b.n	808b81a <mbedtls_mpi_add_abs+0x52>
 808b83e:	ea4f 0884 	mov.w	r8, r4, lsl #2
 808b842:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808b844:	b1bd      	cbz	r5, 808b876 <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
 808b846:	6872      	ldr	r2, [r6, #4]
 808b848:	4294      	cmp	r4, r2
 808b84a:	f104 0401 	add.w	r4, r4, #1
 808b84e:	d306      	bcc.n	808b85e <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808b850:	4621      	mov	r1, r4
 808b852:	4630      	mov	r0, r6
 808b854:	f7ff fd15 	bl	808b282 <mbedtls_mpi_grow>
 808b858:	b960      	cbnz	r0, 808b874 <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
 808b85a:	68b3      	ldr	r3, [r6, #8]
 808b85c:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
 808b85e:	681a      	ldr	r2, [r3, #0]
 808b860:	f108 0804 	add.w	r8, r8, #4
 808b864:	442a      	add	r2, r5
 808b866:	4295      	cmp	r5, r2
 808b868:	f843 2b04 	str.w	r2, [r3], #4
 808b86c:	bf94      	ite	ls
 808b86e:	2500      	movls	r5, #0
 808b870:	2501      	movhi	r5, #1
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808b872:	e7e7      	b.n	808b844 <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808b874:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
 808b876:	4638      	mov	r0, r7
 808b878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808b87c <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b87e:	460f      	mov	r7, r1
 808b880:	b085      	sub	sp, #20
 808b882:	4606      	mov	r6, r0
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808b884:	4611      	mov	r1, r2
 808b886:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b888:	4615      	mov	r5, r2
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808b88a:	f7ff fea7 	bl	808b5dc <mbedtls_mpi_cmp_abs>
 808b88e:	2800      	cmp	r0, #0
 808b890:	db30      	blt.n	808b8f4 <mbedtls_mpi_sub_abs+0x78>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b892:	2301      	movs	r3, #1
 808b894:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808b896:	42b5      	cmp	r5, r6
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b898:	f04f 0300 	mov.w	r3, #0
 808b89c:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808b89e:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808b8a0:	d106      	bne.n	808b8b0 <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808b8a2:	4629      	mov	r1, r5
 808b8a4:	a801      	add	r0, sp, #4
 808b8a6:	f7ff fd18 	bl	808b2da <mbedtls_mpi_copy>
 808b8aa:	4604      	mov	r4, r0
 808b8ac:	b9e8      	cbnz	r0, 808b8ea <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
 808b8ae:	ad01      	add	r5, sp, #4
    }

    if( X != A )
 808b8b0:	42b7      	cmp	r7, r6
 808b8b2:	d107      	bne.n	808b8c4 <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 808b8b4:	2301      	movs	r3, #1
 808b8b6:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808b8b8:	6868      	ldr	r0, [r5, #4]
 808b8ba:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 808b8be:	3b01      	subs	r3, #1
 808b8c0:	009b      	lsls	r3, r3, #2
 808b8c2:	e00b      	b.n	808b8dc <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808b8c4:	4639      	mov	r1, r7
 808b8c6:	4630      	mov	r0, r6
 808b8c8:	f7ff fd07 	bl	808b2da <mbedtls_mpi_copy>
 808b8cc:	4604      	mov	r4, r0
 808b8ce:	b960      	cbnz	r0, 808b8ea <mbedtls_mpi_sub_abs+0x6e>
 808b8d0:	e7f0      	b.n	808b8b4 <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
 808b8d2:	68aa      	ldr	r2, [r5, #8]
 808b8d4:	58d2      	ldr	r2, [r2, r3]
 808b8d6:	3b04      	subs	r3, #4
 808b8d8:	b912      	cbnz	r2, 808b8e0 <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808b8da:	3801      	subs	r0, #1
 808b8dc:	2800      	cmp	r0, #0
 808b8de:	d1f8      	bne.n	808b8d2 <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
 808b8e0:	68b2      	ldr	r2, [r6, #8]
 808b8e2:	68a9      	ldr	r1, [r5, #8]
 808b8e4:	f7ff faba 	bl	808ae5c <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
 808b8e8:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
 808b8ea:	a801      	add	r0, sp, #4
 808b8ec:	f7ff fcb3 	bl	808b256 <mbedtls_mpi_free>

    return( ret );
 808b8f0:	4620      	mov	r0, r4
 808b8f2:	e001      	b.n	808b8f8 <mbedtls_mpi_sub_abs+0x7c>
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808b8f4:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
 808b8f8:	b005      	add	sp, #20
 808b8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b8fc <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808b8fe:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s < 0 )
 808b900:	6813      	ldr	r3, [r2, #0]

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b902:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808b904:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b906:	460f      	mov	r7, r1
 808b908:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808b90a:	d513      	bpl.n	808b934 <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808b90c:	4611      	mov	r1, r2
 808b90e:	4638      	mov	r0, r7
 808b910:	f7ff fe64 	bl	808b5dc <mbedtls_mpi_cmp_abs>
 808b914:	2800      	cmp	r0, #0
 808b916:	db05      	blt.n	808b924 <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808b918:	4632      	mov	r2, r6
 808b91a:	4639      	mov	r1, r7
 808b91c:	4628      	mov	r0, r5
 808b91e:	f7ff ffad 	bl	808b87c <mbedtls_mpi_sub_abs>
 808b922:	e009      	b.n	808b938 <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808b924:	463a      	mov	r2, r7
 808b926:	4631      	mov	r1, r6
 808b928:	4628      	mov	r0, r5
 808b92a:	f7ff ffa7 	bl	808b87c <mbedtls_mpi_sub_abs>
 808b92e:	b928      	cbnz	r0, 808b93c <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
 808b930:	4264      	negs	r4, r4
 808b932:	e002      	b.n	808b93a <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808b934:	f7ff ff48 	bl	808b7c8 <mbedtls_mpi_add_abs>
 808b938:	b900      	cbnz	r0, 808b93c <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
 808b93a:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808b93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b93e <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b93e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808b940:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s > 0 )
 808b942:	6813      	ldr	r3, [r2, #0]

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b944:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808b946:	4363      	muls	r3, r4
 808b948:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b94a:	460f      	mov	r7, r1
 808b94c:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808b94e:	dd13      	ble.n	808b978 <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808b950:	4611      	mov	r1, r2
 808b952:	4638      	mov	r0, r7
 808b954:	f7ff fe42 	bl	808b5dc <mbedtls_mpi_cmp_abs>
 808b958:	2800      	cmp	r0, #0
 808b95a:	db05      	blt.n	808b968 <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808b95c:	4632      	mov	r2, r6
 808b95e:	4639      	mov	r1, r7
 808b960:	4628      	mov	r0, r5
 808b962:	f7ff ff8b 	bl	808b87c <mbedtls_mpi_sub_abs>
 808b966:	e009      	b.n	808b97c <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808b968:	463a      	mov	r2, r7
 808b96a:	4631      	mov	r1, r6
 808b96c:	4628      	mov	r0, r5
 808b96e:	f7ff ff85 	bl	808b87c <mbedtls_mpi_sub_abs>
 808b972:	b928      	cbnz	r0, 808b980 <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
 808b974:	4264      	negs	r4, r4
 808b976:	e002      	b.n	808b97e <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808b978:	f7ff ff26 	bl	808b7c8 <mbedtls_mpi_add_abs>
 808b97c:	b900      	cbnz	r0, 808b980 <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
 808b97e:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808b980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b982 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808b982:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b984:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808b988:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808b98c:	2a00      	cmp	r2, #0
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b98e:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808b990:	bfb4      	ite	lt
 808b992:	f04f 33ff 	movlt.w	r3, #4294967295
 808b996:	2301      	movge	r3, #1
 808b998:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808b99a:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808b99c:	2301      	movs	r3, #1
 808b99e:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808b9a0:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808b9a4:	f7ff ffaa 	bl	808b8fc <mbedtls_mpi_add_mpi>
}
 808b9a8:	b005      	add	sp, #20
 808b9aa:	f85d fb04 	ldr.w	pc, [sp], #4

0808b9ae <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808b9ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b9b0:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808b9b4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808b9b8:	2a00      	cmp	r2, #0
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b9ba:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808b9bc:	bfb4      	ite	lt
 808b9be:	f04f 33ff 	movlt.w	r3, #4294967295
 808b9c2:	2301      	movge	r3, #1
 808b9c4:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808b9c6:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808b9c8:	2301      	movs	r3, #1
 808b9ca:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808b9cc:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808b9d0:	f7ff ffb5 	bl	808b93e <mbedtls_mpi_sub_mpi>
}
 808b9d4:	b005      	add	sp, #20
 808b9d6:	f85d fb04 	ldr.w	pc, [sp], #4

0808b9da <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b9da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b9de:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b9e0:	b086      	sub	sp, #24
 808b9e2:	4615      	mov	r5, r2
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808b9e4:	4288      	cmp	r0, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b9e6:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b9ea:	4681      	mov	r9, r0
 808b9ec:	460e      	mov	r6, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b9ee:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 808b9f2:	9302      	str	r3, [sp, #8]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b9f4:	9203      	str	r2, [sp, #12]
    X->n = 0;
 808b9f6:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 808b9f8:	9305      	str	r3, [sp, #20]
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808b9fa:	d106      	bne.n	808ba0a <mbedtls_mpi_mul_mpi+0x30>
 808b9fc:	4668      	mov	r0, sp
 808b9fe:	f7ff fc6c 	bl	808b2da <mbedtls_mpi_copy>
 808ba02:	4604      	mov	r4, r0
 808ba04:	2800      	cmp	r0, #0
 808ba06:	d14d      	bne.n	808baa4 <mbedtls_mpi_mul_mpi+0xca>
 808ba08:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 808ba0a:	45a9      	cmp	r9, r5
 808ba0c:	d107      	bne.n	808ba1e <mbedtls_mpi_mul_mpi+0x44>
 808ba0e:	4649      	mov	r1, r9
 808ba10:	a803      	add	r0, sp, #12
 808ba12:	f7ff fc62 	bl	808b2da <mbedtls_mpi_copy>
 808ba16:	4604      	mov	r4, r0
 808ba18:	2800      	cmp	r0, #0
 808ba1a:	d143      	bne.n	808baa4 <mbedtls_mpi_mul_mpi+0xca>
 808ba1c:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
 808ba1e:	f8d6 a004 	ldr.w	sl, [r6, #4]
 808ba22:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 808ba26:	3b01      	subs	r3, #1
 808ba28:	009b      	lsls	r3, r3, #2
 808ba2a:	f1ba 0f00 	cmp.w	sl, #0
 808ba2e:	d006      	beq.n	808ba3e <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
 808ba30:	68b2      	ldr	r2, [r6, #8]
 808ba32:	58d2      	ldr	r2, [r2, r3]
 808ba34:	3b04      	subs	r3, #4
 808ba36:	b912      	cbnz	r2, 808ba3e <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
 808ba38:	f10a 3aff 	add.w	sl, sl, #4294967295
 808ba3c:	e7f5      	b.n	808ba2a <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808ba3e:	686f      	ldr	r7, [r5, #4]
 808ba40:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 808ba44:	3b01      	subs	r3, #1
 808ba46:	009b      	lsls	r3, r3, #2
 808ba48:	b12f      	cbz	r7, 808ba56 <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
 808ba4a:	68aa      	ldr	r2, [r5, #8]
 808ba4c:	58d2      	ldr	r2, [r2, r3]
 808ba4e:	3b04      	subs	r3, #4
 808ba50:	b90a      	cbnz	r2, 808ba56 <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808ba52:	3f01      	subs	r7, #1
 808ba54:	e7f8      	b.n	808ba48 <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 808ba56:	eb0a 0107 	add.w	r1, sl, r7
 808ba5a:	4648      	mov	r0, r9
 808ba5c:	f7ff fc11 	bl	808b282 <mbedtls_mpi_grow>
 808ba60:	4604      	mov	r4, r0
 808ba62:	b9f8      	cbnz	r0, 808baa4 <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808ba64:	4601      	mov	r1, r0
 808ba66:	4648      	mov	r0, r9
 808ba68:	f7ff fc61 	bl	808b32e <mbedtls_mpi_lset>
 808ba6c:	4604      	mov	r4, r0
 808ba6e:	b9c8      	cbnz	r0, 808baa4 <mbedtls_mpi_mul_mpi+0xca>
 808ba70:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 808ba74:	f108 38ff 	add.w	r8, r8, #4294967295
 808ba78:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( i++; j > 0; j-- )
 808ba7c:	b16f      	cbz	r7, 808ba9a <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 808ba7e:	68ab      	ldr	r3, [r5, #8]
 808ba80:	f8d9 2008 	ldr.w	r2, [r9, #8]
 808ba84:	f853 3008 	ldr.w	r3, [r3, r8]
 808ba88:	4442      	add	r2, r8
 808ba8a:	68b1      	ldr	r1, [r6, #8]
 808ba8c:	4650      	mov	r0, sl
 808ba8e:	f7ff fa0f 	bl	808aeb0 <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i++; j > 0; j-- )
 808ba92:	3f01      	subs	r7, #1
 808ba94:	f1a8 0804 	sub.w	r8, r8, #4
 808ba98:	e7f0      	b.n	808ba7c <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
 808ba9a:	6832      	ldr	r2, [r6, #0]
 808ba9c:	682b      	ldr	r3, [r5, #0]
 808ba9e:	4353      	muls	r3, r2
 808baa0:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 808baa4:	a803      	add	r0, sp, #12
 808baa6:	f7ff fbd6 	bl	808b256 <mbedtls_mpi_free>
 808baaa:	4668      	mov	r0, sp
 808baac:	f7ff fbd3 	bl	808b256 <mbedtls_mpi_free>

    return( ret );
}
 808bab0:	4620      	mov	r0, r4
 808bab2:	b006      	add	sp, #24
 808bab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808bab8 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 808bab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808baba:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
 808babc:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808babe:	aa01      	add	r2, sp, #4
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808bac0:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 808bac2:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808bac4:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808bac8:	f7ff ff87 	bl	808b9da <mbedtls_mpi_mul_mpi>
}
 808bacc:	b005      	add	sp, #20
 808bace:	f85d fb04 	ldr.w	pc, [sp], #4

0808bad2 <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bad2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bad6:	b09b      	sub	sp, #108	; 0x6c
 808bad8:	9001      	str	r0, [sp, #4]
 808bada:	460f      	mov	r7, r1
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808badc:	4618      	mov	r0, r3
 808bade:	2100      	movs	r1, #0

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bae0:	4690      	mov	r8, r2
 808bae2:	9304      	str	r3, [sp, #16]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808bae4:	f7ff fe5a 	bl	808b79c <mbedtls_mpi_cmp_int>
 808bae8:	2800      	cmp	r0, #0
 808baea:	f000 81ad 	beq.w	808be48 <mbedtls_mpi_div_mpi+0x376>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808baee:	2400      	movs	r4, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808baf0:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808baf2:	9904      	ldr	r1, [sp, #16]
 808baf4:	4640      	mov	r0, r8
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808baf6:	950b      	str	r5, [sp, #44]	; 0x2c
    X->n = 0;
 808baf8:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 808bafa:	940d      	str	r4, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bafc:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
 808bafe:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 808bb00:	9410      	str	r4, [sp, #64]	; 0x40
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bb02:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
 808bb04:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 808bb06:	9413      	str	r4, [sp, #76]	; 0x4c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bb08:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
 808bb0a:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 808bb0c:	9416      	str	r4, [sp, #88]	; 0x58
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bb0e:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
 808bb10:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 808bb12:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808bb14:	f7ff fd62 	bl	808b5dc <mbedtls_mpi_cmp_abs>
 808bb18:	42a0      	cmp	r0, r4
 808bb1a:	da16      	bge.n	808bb4a <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808bb1c:	9b01      	ldr	r3, [sp, #4]
 808bb1e:	b90b      	cbnz	r3, 808bb24 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808bb20:	b94f      	cbnz	r7, 808bb36 <mbedtls_mpi_div_mpi+0x64>
 808bb22:	e010      	b.n	808bb46 <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808bb24:	4621      	mov	r1, r4
 808bb26:	9801      	ldr	r0, [sp, #4]
 808bb28:	f7ff fc01 	bl	808b32e <mbedtls_mpi_lset>
 808bb2c:	4604      	mov	r4, r0
 808bb2e:	2800      	cmp	r0, #0
 808bb30:	f040 8179 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>
 808bb34:	e7f4      	b.n	808bb20 <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808bb36:	4641      	mov	r1, r8
 808bb38:	4638      	mov	r0, r7
 808bb3a:	f7ff fbce 	bl	808b2da <mbedtls_mpi_copy>
 808bb3e:	4604      	mov	r4, r0
 808bb40:	2800      	cmp	r0, #0
 808bb42:	f040 8170 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
 808bb46:	2000      	movs	r0, #0
 808bb48:	e180      	b.n	808be4c <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 808bb4a:	4641      	mov	r1, r8
 808bb4c:	a80b      	add	r0, sp, #44	; 0x2c
 808bb4e:	f7ff fbc4 	bl	808b2da <mbedtls_mpi_copy>
 808bb52:	4604      	mov	r4, r0
 808bb54:	2800      	cmp	r0, #0
 808bb56:	f040 8166 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 808bb5a:	ae0e      	add	r6, sp, #56	; 0x38
 808bb5c:	9904      	ldr	r1, [sp, #16]
 808bb5e:	4630      	mov	r0, r6
 808bb60:	f7ff fbbb 	bl	808b2da <mbedtls_mpi_copy>
 808bb64:	4604      	mov	r4, r0
 808bb66:	2800      	cmp	r0, #0
 808bb68:	f040 815d 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808bb6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808bb70:	a811      	add	r0, sp, #68	; 0x44
 808bb72:	3102      	adds	r1, #2
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
 808bb74:	950e      	str	r5, [sp, #56]	; 0x38
 808bb76:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808bb78:	f7ff fb83 	bl	808b282 <mbedtls_mpi_grow>
 808bb7c:	4604      	mov	r4, r0
 808bb7e:	2800      	cmp	r0, #0
 808bb80:	f040 8151 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 808bb84:	4601      	mov	r1, r0
 808bb86:	a811      	add	r0, sp, #68	; 0x44
 808bb88:	f7ff fbd1 	bl	808b32e <mbedtls_mpi_lset>
 808bb8c:	4604      	mov	r4, r0
 808bb8e:	2800      	cmp	r0, #0
 808bb90:	f040 8149 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 808bb94:	2102      	movs	r1, #2
 808bb96:	a814      	add	r0, sp, #80	; 0x50
 808bb98:	f7ff fb73 	bl	808b282 <mbedtls_mpi_grow>
 808bb9c:	4604      	mov	r4, r0
 808bb9e:	2800      	cmp	r0, #0
 808bba0:	f040 8141 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 808bba4:	2103      	movs	r1, #3
 808bba6:	a817      	add	r0, sp, #92	; 0x5c
 808bba8:	f7ff fb6b 	bl	808b282 <mbedtls_mpi_grow>
 808bbac:	4604      	mov	r4, r0
 808bbae:	2800      	cmp	r0, #0
 808bbb0:	f040 8139 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 808bbb4:	4630      	mov	r0, r6
 808bbb6:	f7ff fc00 	bl	808b3ba <mbedtls_mpi_bitlen>
 808bbba:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 808bbbe:	281f      	cmp	r0, #31
 808bbc0:	d013      	beq.n	808bbea <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
 808bbc2:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808bbc6:	4619      	mov	r1, r3
 808bbc8:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
 808bbca:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808bbcc:	f7ff fc73 	bl	808b4b6 <mbedtls_mpi_shift_l>
 808bbd0:	4604      	mov	r4, r0
 808bbd2:	2800      	cmp	r0, #0
 808bbd4:	f040 8127 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 808bbd8:	9903      	ldr	r1, [sp, #12]
 808bbda:	4630      	mov	r0, r6
 808bbdc:	f7ff fc6b 	bl	808b4b6 <mbedtls_mpi_shift_l>
 808bbe0:	4604      	mov	r4, r0
 808bbe2:	2800      	cmp	r0, #0
 808bbe4:	f040 811f 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>
 808bbe8:	e000      	b.n	808bbec <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
 808bbea:	9403      	str	r4, [sp, #12]

    n = X.n - 1;
 808bbec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
 808bbee:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
 808bbf2:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 808bbf6:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808bbfa:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
 808bbfe:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808bc00:	ea4f 134b 	mov.w	r3, fp, lsl #5
 808bc04:	4619      	mov	r1, r3
 808bc06:	4630      	mov	r0, r6
 808bc08:	9302      	str	r3, [sp, #8]
 808bc0a:	f7ff fc54 	bl	808b4b6 <mbedtls_mpi_shift_l>
 808bc0e:	4604      	mov	r4, r0
 808bc10:	2800      	cmp	r0, #0
 808bc12:	f040 8108 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
 808bc16:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 808bc1a:	4631      	mov	r1, r6
 808bc1c:	a80b      	add	r0, sp, #44	; 0x2c
 808bc1e:	f7ff fd78 	bl	808b712 <mbedtls_mpi_cmp_mpi>
 808bc22:	2800      	cmp	r0, #0
 808bc24:	db0e      	blt.n	808bc44 <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
 808bc26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 808bc28:	f851 200b 	ldr.w	r2, [r1, fp]
 808bc2c:	3201      	adds	r2, #1
 808bc2e:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 808bc32:	a90b      	add	r1, sp, #44	; 0x2c
 808bc34:	4632      	mov	r2, r6
 808bc36:	4608      	mov	r0, r1
 808bc38:	f7ff fe81 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808bc3c:	4604      	mov	r4, r0
 808bc3e:	2800      	cmp	r0, #0
 808bc40:	d0eb      	beq.n	808bc1a <mbedtls_mpi_div_mpi+0x148>
 808bc42:	e0f0      	b.n	808be26 <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 808bc44:	9902      	ldr	r1, [sp, #8]
 808bc46:	4630      	mov	r0, r6
 808bc48:	f7ff fc84 	bl	808b554 <mbedtls_mpi_shift_r>
 808bc4c:	4604      	mov	r4, r0
 808bc4e:	2800      	cmp	r0, #0
 808bc50:	f040 80e9 	bne.w	808be26 <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
 808bc54:	9b00      	ldr	r3, [sp, #0]
 808bc56:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
 808bc5a:	009b      	lsls	r3, r3, #2
 808bc5c:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808bc5e:	3b04      	subs	r3, #4
 808bc60:	9308      	str	r3, [sp, #32]
 808bc62:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
 808bc66:	3b01      	subs	r3, #1
 808bc68:	3e01      	subs	r6, #1
 808bc6a:	ebca 0606 	rsb	r6, sl, r6
 808bc6e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 808bc72:	ebca 0a03 	rsb	sl, sl, r3
 808bc76:	ea4f 134a 	mov.w	r3, sl, lsl #5
 808bc7a:	3d02      	subs	r5, #2
 808bc7c:	00b6      	lsls	r6, r6, #2
 808bc7e:	9302      	str	r3, [sp, #8]
 808bc80:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808bc82:	9b00      	ldr	r3, [sp, #0]
 808bc84:	4599      	cmp	r9, r3
 808bc86:	f240 80a8 	bls.w	808bdda <mbedtls_mpi_div_mpi+0x308>
    {
        if( X.p[i] >= Y.p[t] )
 808bc8a:	9805      	ldr	r0, [sp, #20]
 808bc8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 808bc8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 808bc90:	1d2b      	adds	r3, r5, #4
 808bc92:	5812      	ldr	r2, [r2, r0]
 808bc94:	9309      	str	r3, [sp, #36]	; 0x24
 808bc96:	58cb      	ldr	r3, [r1, r3]
 808bc98:	9813      	ldr	r0, [sp, #76]	; 0x4c
 808bc9a:	4293      	cmp	r3, r2
 808bc9c:	d303      	bcc.n	808bca6 <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
 808bc9e:	f04f 33ff 	mov.w	r3, #4294967295
 808bca2:	5183      	str	r3, [r0, r6]
 808bca4:	e01b      	b.n	808bcde <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 808bca6:	eb00 0a06 	add.w	sl, r0, r6
 808bcaa:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 808bcac:	b19a      	cbz	r2, 808bcd6 <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 808bcae:	9307      	str	r3, [sp, #28]
 808bcb0:	2300      	movs	r3, #0
 808bcb2:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
 808bcb4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 808bcb8:	ea4b 0b00 	orr.w	fp, fp, r0
 808bcbc:	4658      	mov	r0, fp
 808bcbe:	4661      	mov	r1, ip
 808bcc0:	f007 f838 	bl	8092d34 <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
 808bcc4:	2300      	movs	r3, #0
 808bcc6:	f04f 32ff 	mov.w	r2, #4294967295
 808bcca:	428b      	cmp	r3, r1
 808bccc:	bf08      	it	eq
 808bcce:	4282      	cmpeq	r2, r0
 808bcd0:	d203      	bcs.n	808bcda <mbedtls_mpi_div_mpi+0x208>
 808bcd2:	4610      	mov	r0, r2
 808bcd4:	e001      	b.n	808bcda <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
 808bcd6:	f04f 30ff 	mov.w	r0, #4294967295
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
 808bcda:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
 808bcde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808bce0:	f1a5 0a04 	sub.w	sl, r5, #4
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
 808bce4:	5993      	ldr	r3, [r2, r6]
 808bce6:	3301      	adds	r3, #1
 808bce8:	5193      	str	r3, [r2, r6]
        do
        {
            Z.p[i - t - 1]--;
 808bcea:	9a13      	ldr	r2, [sp, #76]	; 0x4c

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808bcec:	2100      	movs	r1, #0
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808bcee:	5993      	ldr	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808bcf0:	a814      	add	r0, sp, #80	; 0x50
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808bcf2:	3b01      	subs	r3, #1
 808bcf4:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808bcf6:	f7ff fb1a 	bl	808b32e <mbedtls_mpi_lset>
 808bcfa:	2800      	cmp	r0, #0
 808bcfc:	f040 8090 	bne.w	808be20 <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808bd00:	9b00      	ldr	r3, [sp, #0]
 808bd02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808bd04:	b11b      	cbz	r3, 808bd0e <mbedtls_mpi_div_mpi+0x23c>
 808bd06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808bd08:	9908      	ldr	r1, [sp, #32]
 808bd0a:	585b      	ldr	r3, [r3, r1]
 808bd0c:	e000      	b.n	808bd10 <mbedtls_mpi_div_mpi+0x23e>
 808bd0e:	9b00      	ldr	r3, [sp, #0]
 808bd10:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 808bd12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808bd14:	9a05      	ldr	r2, [sp, #20]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808bd16:	a914      	add	r1, sp, #80	; 0x50
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808bd18:	589a      	ldr	r2, [r3, r2]
 808bd1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808bd1c:	4608      	mov	r0, r1
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808bd1e:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808bd20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808bd22:	599a      	ldr	r2, [r3, r6]
 808bd24:	f7ff fec8 	bl	808bab8 <mbedtls_mpi_mul_int>
 808bd28:	4601      	mov	r1, r0
 808bd2a:	2800      	cmp	r0, #0
 808bd2c:	d17a      	bne.n	808be24 <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 808bd2e:	a817      	add	r0, sp, #92	; 0x5c
 808bd30:	f7ff fafd 	bl	808b32e <mbedtls_mpi_lset>
 808bd34:	2800      	cmp	r0, #0
 808bd36:	d173      	bne.n	808be20 <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808bd38:	f1b9 0f01 	cmp.w	r9, #1
 808bd3c:	bf18      	it	ne
 808bd3e:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
 808bd40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808bd42:	bf18      	it	ne
 808bd44:	f852 000a 	ldrne.w	r0, [r2, sl]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808bd48:	a917      	add	r1, sp, #92	; 0x5c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808bd4a:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808bd4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808bd4e:	a814      	add	r0, sp, #80	; 0x50
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808bd50:	595a      	ldr	r2, [r3, r5]
 808bd52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808bd54:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
 808bd56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808bd58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808bd5a:	589a      	ldr	r2, [r3, r2]
 808bd5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808bd5e:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808bd60:	f7ff fcd7 	bl	808b712 <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
 808bd64:	2800      	cmp	r0, #0
 808bd66:	dcc0      	bgt.n	808bcea <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 808bd68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808bd6a:	a90e      	add	r1, sp, #56	; 0x38
 808bd6c:	599a      	ldr	r2, [r3, r6]
 808bd6e:	a814      	add	r0, sp, #80	; 0x50
 808bd70:	f7ff fea2 	bl	808bab8 <mbedtls_mpi_mul_int>
 808bd74:	2800      	cmp	r0, #0
 808bd76:	d153      	bne.n	808be20 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 808bd78:	9902      	ldr	r1, [sp, #8]
 808bd7a:	a814      	add	r0, sp, #80	; 0x50
 808bd7c:	f7ff fb9b 	bl	808b4b6 <mbedtls_mpi_shift_l>
 808bd80:	2800      	cmp	r0, #0
 808bd82:	d14d      	bne.n	808be20 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 808bd84:	a90b      	add	r1, sp, #44	; 0x2c
 808bd86:	4608      	mov	r0, r1
 808bd88:	aa14      	add	r2, sp, #80	; 0x50
 808bd8a:	f7ff fdd8 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808bd8e:	4601      	mov	r1, r0
 808bd90:	2800      	cmp	r0, #0
 808bd92:	d147      	bne.n	808be24 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 808bd94:	a80b      	add	r0, sp, #44	; 0x2c
 808bd96:	f7ff fd01 	bl	808b79c <mbedtls_mpi_cmp_int>
 808bd9a:	2800      	cmp	r0, #0
 808bd9c:	da15      	bge.n	808bdca <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 808bd9e:	a90e      	add	r1, sp, #56	; 0x38
 808bda0:	a814      	add	r0, sp, #80	; 0x50
 808bda2:	f7ff fa9a 	bl	808b2da <mbedtls_mpi_copy>
 808bda6:	2800      	cmp	r0, #0
 808bda8:	d13a      	bne.n	808be20 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 808bdaa:	9902      	ldr	r1, [sp, #8]
 808bdac:	a814      	add	r0, sp, #80	; 0x50
 808bdae:	f7ff fb82 	bl	808b4b6 <mbedtls_mpi_shift_l>
 808bdb2:	2800      	cmp	r0, #0
 808bdb4:	d134      	bne.n	808be20 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 808bdb6:	a90b      	add	r1, sp, #44	; 0x2c
 808bdb8:	aa14      	add	r2, sp, #80	; 0x50
 808bdba:	4608      	mov	r0, r1
 808bdbc:	f7ff fd9e 	bl	808b8fc <mbedtls_mpi_add_mpi>
 808bdc0:	bb70      	cbnz	r0, 808be20 <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
 808bdc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808bdc4:	5993      	ldr	r3, [r2, r6]
 808bdc6:	3b01      	subs	r3, #1
 808bdc8:	5193      	str	r3, [r2, r6]
 808bdca:	9b02      	ldr	r3, [sp, #8]
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808bdcc:	f109 39ff 	add.w	r9, r9, #4294967295
 808bdd0:	3b20      	subs	r3, #32
 808bdd2:	3e04      	subs	r6, #4
 808bdd4:	9302      	str	r3, [sp, #8]
 808bdd6:	3d04      	subs	r5, #4
 808bdd8:	e753      	b.n	808bc82 <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
 808bdda:	9b01      	ldr	r3, [sp, #4]
 808bddc:	b15b      	cbz	r3, 808bdf6 <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 808bdde:	a911      	add	r1, sp, #68	; 0x44
 808bde0:	4618      	mov	r0, r3
 808bde2:	f7ff fa7a 	bl	808b2da <mbedtls_mpi_copy>
 808bde6:	b9d8      	cbnz	r0, 808be20 <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
 808bde8:	9b04      	ldr	r3, [sp, #16]
 808bdea:	f8d8 2000 	ldr.w	r2, [r8]
 808bdee:	681b      	ldr	r3, [r3, #0]
 808bdf0:	4353      	muls	r3, r2
 808bdf2:	9a01      	ldr	r2, [sp, #4]
 808bdf4:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
 808bdf6:	b1b7      	cbz	r7, 808be26 <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 808bdf8:	9903      	ldr	r1, [sp, #12]
 808bdfa:	a80b      	add	r0, sp, #44	; 0x2c
 808bdfc:	f7ff fbaa 	bl	808b554 <mbedtls_mpi_shift_r>
 808be00:	b970      	cbnz	r0, 808be20 <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
 808be02:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808be06:	a90b      	add	r1, sp, #44	; 0x2c
 808be08:	4638      	mov	r0, r7
    }

    if( R != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
        X.s = A->s;
 808be0a:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808be0c:	f7ff fa65 	bl	808b2da <mbedtls_mpi_copy>
 808be10:	4601      	mov	r1, r0
 808be12:	b938      	cbnz	r0, 808be24 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 808be14:	4638      	mov	r0, r7
 808be16:	f7ff fcc1 	bl	808b79c <mbedtls_mpi_cmp_int>
 808be1a:	b920      	cbnz	r0, 808be26 <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
 808be1c:	2301      	movs	r3, #1
 808be1e:	603b      	str	r3, [r7, #0]
 808be20:	4604      	mov	r4, r0
 808be22:	e000      	b.n	808be26 <mbedtls_mpi_div_mpi+0x354>
 808be24:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 808be26:	a80b      	add	r0, sp, #44	; 0x2c
 808be28:	f7ff fa15 	bl	808b256 <mbedtls_mpi_free>
 808be2c:	a80e      	add	r0, sp, #56	; 0x38
 808be2e:	f7ff fa12 	bl	808b256 <mbedtls_mpi_free>
 808be32:	a811      	add	r0, sp, #68	; 0x44
 808be34:	f7ff fa0f 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 808be38:	a814      	add	r0, sp, #80	; 0x50
 808be3a:	f7ff fa0c 	bl	808b256 <mbedtls_mpi_free>
 808be3e:	a817      	add	r0, sp, #92	; 0x5c
 808be40:	f7ff fa09 	bl	808b256 <mbedtls_mpi_free>

    return( ret );
 808be44:	4620      	mov	r0, r4
 808be46:	e001      	b.n	808be4c <mbedtls_mpi_div_mpi+0x37a>
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 808be48:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
 808be4c:	b01b      	add	sp, #108	; 0x6c
 808be4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808be52 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808be52:	b570      	push	{r4, r5, r6, lr}
 808be54:	4604      	mov	r4, r0
 808be56:	460e      	mov	r6, r1
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808be58:	4610      	mov	r0, r2
 808be5a:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808be5c:	4615      	mov	r5, r2
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808be5e:	f7ff fc9d 	bl	808b79c <mbedtls_mpi_cmp_int>
 808be62:	2800      	cmp	r0, #0
 808be64:	db22      	blt.n	808beac <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 808be66:	462b      	mov	r3, r5
 808be68:	4632      	mov	r2, r6
 808be6a:	4621      	mov	r1, r4
 808be6c:	2000      	movs	r0, #0
 808be6e:	f7ff fe30 	bl	808bad2 <mbedtls_mpi_div_mpi>
 808be72:	b9f8      	cbnz	r0, 808beb4 <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 808be74:	2100      	movs	r1, #0
 808be76:	4620      	mov	r0, r4
 808be78:	f7ff fc90 	bl	808b79c <mbedtls_mpi_cmp_int>
 808be7c:	2800      	cmp	r0, #0
 808be7e:	da07      	bge.n	808be90 <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 808be80:	462a      	mov	r2, r5
 808be82:	4621      	mov	r1, r4
 808be84:	4620      	mov	r0, r4
 808be86:	f7ff fd39 	bl	808b8fc <mbedtls_mpi_add_mpi>
 808be8a:	2800      	cmp	r0, #0
 808be8c:	d0f2      	beq.n	808be74 <mbedtls_mpi_mod_mpi+0x22>
 808be8e:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 808be90:	4629      	mov	r1, r5
 808be92:	4620      	mov	r0, r4
 808be94:	f7ff fc3d 	bl	808b712 <mbedtls_mpi_cmp_mpi>
 808be98:	2800      	cmp	r0, #0
 808be9a:	db0a      	blt.n	808beb2 <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 808be9c:	462a      	mov	r2, r5
 808be9e:	4621      	mov	r1, r4
 808bea0:	4620      	mov	r0, r4
 808bea2:	f7ff fd4c 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808bea6:	2800      	cmp	r0, #0
 808bea8:	d0f2      	beq.n	808be90 <mbedtls_mpi_mod_mpi+0x3e>
 808beaa:	bd70      	pop	{r4, r5, r6, pc}
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808beac:	f06f 0009 	mvn.w	r0, #9
 808beb0:	bd70      	pop	{r4, r5, r6, pc}
 808beb2:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
 808beb4:	bd70      	pop	{r4, r5, r6, pc}

0808beb6 <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808beb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808beba:	4606      	mov	r6, r0
 808bebc:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 808bec0:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808bec2:	4618      	mov	r0, r3
 808bec4:	2100      	movs	r1, #0

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808bec6:	9202      	str	r2, [sp, #8]
 808bec8:	461d      	mov	r5, r3
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808beca:	f7ff fc67 	bl	808b79c <mbedtls_mpi_cmp_int>
 808bece:	2800      	cmp	r0, #0
 808bed0:	dd05      	ble.n	808bede <mbedtls_mpi_exp_mod+0x28>
 808bed2:	68ab      	ldr	r3, [r5, #8]
 808bed4:	f8d3 8000 	ldr.w	r8, [r3]
 808bed8:	f018 0f01 	tst.w	r8, #1
 808bedc:	d102      	bne.n	808bee4 <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808bede:	f06f 0003 	mvn.w	r0, #3
 808bee2:	e203      	b.n	808c2ec <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 808bee4:	2100      	movs	r1, #0
 808bee6:	9802      	ldr	r0, [sp, #8]
 808bee8:	f7ff fc58 	bl	808b79c <mbedtls_mpi_cmp_int>
 808beec:	2800      	cmp	r0, #0
 808beee:	dbf6      	blt.n	808bede <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
 808bef0:	f108 0402 	add.w	r4, r8, #2
 808bef4:	0064      	lsls	r4, r4, #1
 808bef6:	f004 0408 	and.w	r4, r4, #8
 808befa:	4444      	add	r4, r8
 808befc:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
 808befe:	fb04 f308 	mul.w	r3, r4, r8
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808bf02:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 808bf04:	f1c3 0302 	rsb	r3, r3, #2
 808bf08:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808bf0c:	d1f7      	bne.n	808befe <mbedtls_mpi_exp_mod+0x48>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf0e:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808bf10:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 808bf14:	a814      	add	r0, sp, #80	; 0x50
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf16:	9308      	str	r3, [sp, #32]
    X->n = 0;
 808bf18:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 808bf1a:	910a      	str	r1, [sp, #40]	; 0x28
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf1c:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 808bf1e:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 808bf20:	910d      	str	r1, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf22:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 808bf24:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 808bf26:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808bf28:	f007 f8df 	bl	80930ea <memset>

    i = mbedtls_mpi_bitlen( E );
 808bf2c:	9802      	ldr	r0, [sp, #8]
 808bf2e:	f7ff fa44 	bl	808b3ba <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
 808bf32:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 808bf36:	d20a      	bcs.n	808bf4e <mbedtls_mpi_exp_mod+0x98>
 808bf38:	28ef      	cmp	r0, #239	; 0xef
 808bf3a:	d80b      	bhi.n	808bf54 <mbedtls_mpi_exp_mod+0x9e>
 808bf3c:	284f      	cmp	r0, #79	; 0x4f
 808bf3e:	d80c      	bhi.n	808bf5a <mbedtls_mpi_exp_mod+0xa4>
 808bf40:	2818      	cmp	r0, #24
 808bf42:	bf34      	ite	cc
 808bf44:	f04f 0b01 	movcc.w	fp, #1
 808bf48:	f04f 0b03 	movcs.w	fp, #3
 808bf4c:	e007      	b.n	808bf5e <mbedtls_mpi_exp_mod+0xa8>
 808bf4e:	f04f 0b06 	mov.w	fp, #6
 808bf52:	e004      	b.n	808bf5e <mbedtls_mpi_exp_mod+0xa8>
 808bf54:	f04f 0b05 	mov.w	fp, #5
 808bf58:	e001      	b.n	808bf5e <mbedtls_mpi_exp_mod+0xa8>
 808bf5a:	f04f 0b04 	mov.w	fp, #4

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808bf5e:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808bf60:	4630      	mov	r0, r6
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808bf62:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808bf66:	4641      	mov	r1, r8
 808bf68:	f7ff f98b 	bl	808b282 <mbedtls_mpi_grow>
 808bf6c:	4603      	mov	r3, r0
 808bf6e:	2800      	cmp	r0, #0
 808bf70:	f040 8194 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 808bf74:	4641      	mov	r1, r8
 808bf76:	a817      	add	r0, sp, #92	; 0x5c
 808bf78:	f7ff f983 	bl	808b282 <mbedtls_mpi_grow>
 808bf7c:	4603      	mov	r3, r0
 808bf7e:	2800      	cmp	r0, #0
 808bf80:	f040 818c 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 808bf84:	ea4f 0148 	mov.w	r1, r8, lsl #1
 808bf88:	a80b      	add	r0, sp, #44	; 0x2c
 808bf8a:	f7ff f97a 	bl	808b282 <mbedtls_mpi_grow>
 808bf8e:	4603      	mov	r3, r0
 808bf90:	2800      	cmp	r0, #0
 808bf92:	f040 8183 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 808bf96:	683b      	ldr	r3, [r7, #0]
 808bf98:	9304      	str	r3, [sp, #16]
    if( neg )
 808bf9a:	3301      	adds	r3, #1
 808bf9c:	d10a      	bne.n	808bfb4 <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 808bf9e:	4639      	mov	r1, r7
 808bfa0:	a80e      	add	r0, sp, #56	; 0x38
 808bfa2:	f7ff f99a 	bl	808b2da <mbedtls_mpi_copy>
 808bfa6:	4603      	mov	r3, r0
 808bfa8:	2800      	cmp	r0, #0
 808bfaa:	f040 8177 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
 808bfae:	2301      	movs	r3, #1
 808bfb0:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 808bfb2:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 808bfb4:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808bfb8:	b10b      	cbz	r3, 808bfbe <mbedtls_mpi_exp_mod+0x108>
 808bfba:	689b      	ldr	r3, [r3, #8]
 808bfbc:	bb2b      	cbnz	r3, 808c00a <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 808bfbe:	2101      	movs	r1, #1
 808bfc0:	a808      	add	r0, sp, #32
 808bfc2:	f7ff f9b4 	bl	808b32e <mbedtls_mpi_lset>
 808bfc6:	4603      	mov	r3, r0
 808bfc8:	2800      	cmp	r0, #0
 808bfca:	f040 8167 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 808bfce:	6869      	ldr	r1, [r5, #4]
 808bfd0:	a808      	add	r0, sp, #32
 808bfd2:	0189      	lsls	r1, r1, #6
 808bfd4:	f7ff fa6f 	bl	808b4b6 <mbedtls_mpi_shift_l>
 808bfd8:	4603      	mov	r3, r0
 808bfda:	2800      	cmp	r0, #0
 808bfdc:	f040 815e 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 808bfe0:	a908      	add	r1, sp, #32
 808bfe2:	462a      	mov	r2, r5
 808bfe4:	4608      	mov	r0, r1
 808bfe6:	f7ff ff34 	bl	808be52 <mbedtls_mpi_mod_mpi>
 808bfea:	4603      	mov	r3, r0
 808bfec:	2800      	cmp	r0, #0
 808bfee:	f040 8155 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
 808bff2:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808bff6:	b183      	cbz	r3, 808c01a <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 808bff8:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808bffc:	ab08      	add	r3, sp, #32
 808bffe:	cb03      	ldmia	r3!, {r0, r1}
 808c000:	6010      	str	r0, [r2, #0]
 808c002:	6818      	ldr	r0, [r3, #0]
 808c004:	6051      	str	r1, [r2, #4]
 808c006:	6090      	str	r0, [r2, #8]
 808c008:	e007      	b.n	808c01a <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 808c00a:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808c00e:	ab08      	add	r3, sp, #32
 808c010:	6810      	ldr	r0, [r2, #0]
 808c012:	6851      	ldr	r1, [r2, #4]
 808c014:	c303      	stmia	r3!, {r0, r1}
 808c016:	6890      	ldr	r0, [r2, #8]
 808c018:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 808c01a:	4629      	mov	r1, r5
 808c01c:	4638      	mov	r0, r7
 808c01e:	f7ff fb78 	bl	808b712 <mbedtls_mpi_cmp_mpi>
 808c022:	2800      	cmp	r0, #0
 808c024:	db18      	blt.n	808c058 <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 808c026:	462a      	mov	r2, r5
 808c028:	4639      	mov	r1, r7
 808c02a:	a817      	add	r0, sp, #92	; 0x5c
 808c02c:	f7ff ff11 	bl	808be52 <mbedtls_mpi_mod_mpi>
 808c030:	4603      	mov	r3, r0
 808c032:	2800      	cmp	r0, #0
 808c034:	f040 8132 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
 808c038:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 808c03a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 808c03e:	4623      	mov	r3, r4
 808c040:	f8cd 9000 	str.w	r9, [sp]
 808c044:	462a      	mov	r2, r5
 808c046:	a908      	add	r1, sp, #32
 808c048:	a817      	add	r0, sp, #92	; 0x5c
 808c04a:	f7ff fafe 	bl	808b64a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c04e:	4603      	mov	r3, r0
 808c050:	2800      	cmp	r0, #0
 808c052:	f040 8123 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
 808c056:	e004      	b.n	808c062 <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 808c058:	4639      	mov	r1, r7
 808c05a:	a817      	add	r0, sp, #92	; 0x5c
 808c05c:	f7ff f93d 	bl	808b2da <mbedtls_mpi_copy>
 808c060:	e7e6      	b.n	808c030 <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 808c062:	a908      	add	r1, sp, #32
 808c064:	4630      	mov	r0, r6
 808c066:	f7ff f938 	bl	808b2da <mbedtls_mpi_copy>
 808c06a:	4603      	mov	r3, r0
 808c06c:	2800      	cmp	r0, #0
 808c06e:	f040 8115 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808c072:	ab07      	add	r3, sp, #28
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808c074:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808c076:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808c078:	f8cd 9000 	str.w	r9, [sp]
 808c07c:	4623      	mov	r3, r4
 808c07e:	462a      	mov	r2, r5
 808c080:	a911      	add	r1, sp, #68	; 0x44
 808c082:	4630      	mov	r0, r6
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808c084:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808c086:	9711      	str	r7, [sp, #68]	; 0x44
 808c088:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
 808c08a:	f7ff fade 	bl	808b64a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808c08e:	4603      	mov	r3, r0
 808c090:	2800      	cmp	r0, #0
 808c092:	f040 8103 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
 808c096:	45bb      	cmp	fp, r7
 808c098:	d05b      	beq.n	808c152 <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 808c09a:	f10b 33ff 	add.w	r3, fp, #4294967295
 808c09e:	9303      	str	r3, [sp, #12]
 808c0a0:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 808c0a2:	f04f 080c 	mov.w	r8, #12
 808c0a6:	ab14      	add	r3, sp, #80	; 0x50
 808c0a8:	fb08 3807 	mla	r8, r8, r7, r3
 808c0ac:	6869      	ldr	r1, [r5, #4]
 808c0ae:	4640      	mov	r0, r8
 808c0b0:	3101      	adds	r1, #1
 808c0b2:	f7ff f8e6 	bl	808b282 <mbedtls_mpi_grow>
 808c0b6:	4603      	mov	r3, r0
 808c0b8:	2800      	cmp	r0, #0
 808c0ba:	f040 80ef 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 808c0be:	a917      	add	r1, sp, #92	; 0x5c
 808c0c0:	4640      	mov	r0, r8
 808c0c2:	f7ff f90a 	bl	808b2da <mbedtls_mpi_copy>
 808c0c6:	4603      	mov	r3, r0
 808c0c8:	2800      	cmp	r0, #0
 808c0ca:	f040 80e7 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
 808c0ce:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 808c0d0:	4623      	mov	r3, r4
 808c0d2:	f8cd 9000 	str.w	r9, [sp]
 808c0d6:	462a      	mov	r2, r5
 808c0d8:	4641      	mov	r1, r8
 808c0da:	4640      	mov	r0, r8
 808c0dc:	f7ff fab5 	bl	808b64a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c0e0:	4603      	mov	r3, r0
 808c0e2:	2800      	cmp	r0, #0
 808c0e4:	f040 80da 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
 808c0e8:	9b03      	ldr	r3, [sp, #12]
 808c0ea:	f10a 0a01 	add.w	sl, sl, #1
 808c0ee:	4553      	cmp	r3, sl
 808c0f0:	d8ee      	bhi.n	808c0d0 <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808c0f2:	3701      	adds	r7, #1
 808c0f4:	f04f 080c 	mov.w	r8, #12
 808c0f8:	ab14      	add	r3, sp, #80	; 0x50
 808c0fa:	fb08 3807 	mla	r8, r8, r7, r3
 808c0fe:	f04f 0901 	mov.w	r9, #1
 808c102:	fa09 f90b 	lsl.w	r9, r9, fp
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808c106:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808c10a:	454f      	cmp	r7, r9
 808c10c:	d221      	bcs.n	808c152 <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 808c10e:	6869      	ldr	r1, [r5, #4]
 808c110:	4640      	mov	r0, r8
 808c112:	3101      	adds	r1, #1
 808c114:	f7ff f8b5 	bl	808b282 <mbedtls_mpi_grow>
 808c118:	4603      	mov	r3, r0
 808c11a:	2800      	cmp	r0, #0
 808c11c:	f040 80be 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 808c120:	f1a8 010c 	sub.w	r1, r8, #12
 808c124:	4640      	mov	r0, r8
 808c126:	f7ff f8d8 	bl	808b2da <mbedtls_mpi_copy>
 808c12a:	4603      	mov	r3, r0
 808c12c:	2800      	cmp	r0, #0
 808c12e:	f040 80b5 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808c132:	4623      	mov	r3, r4
 808c134:	4640      	mov	r0, r8
 808c136:	f8cd a000 	str.w	sl, [sp]
 808c13a:	462a      	mov	r2, r5
 808c13c:	a917      	add	r1, sp, #92	; 0x5c
 808c13e:	f7ff fa84 	bl	808b64a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c142:	f108 080c 	add.w	r8, r8, #12
 808c146:	4603      	mov	r3, r0
 808c148:	2800      	cmp	r0, #0
 808c14a:	f040 80a7 	bne.w	808c29c <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808c14e:	3701      	adds	r7, #1
 808c150:	e7db      	b.n	808c10a <mbedtls_mpi_exp_mod+0x254>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 808c152:	2700      	movs	r7, #0
        }
    }

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
 808c154:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
 808c156:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
 808c158:	46b8      	mov	r8, r7

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 808c15a:	9b02      	ldr	r3, [sp, #8]
 808c15c:	685b      	ldr	r3, [r3, #4]
 808c15e:	9303      	str	r3, [sp, #12]
    wbits   = 0;
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
 808c160:	f1ba 0f00 	cmp.w	sl, #0
 808c164:	d10e      	bne.n	808c184 <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
 808c166:	9b03      	ldr	r3, [sp, #12]
 808c168:	b93b      	cbnz	r3, 808c17a <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808c16a:	2301      	movs	r3, #1
 808c16c:	fa03 f30b 	lsl.w	r3, r3, fp
 808c170:	9305      	str	r3, [sp, #20]
 808c172:	9f03      	ldr	r7, [sp, #12]
 808c174:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 808c178:	e05e      	b.n	808c238 <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808c17a:	9b03      	ldr	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 808c17c:	f04f 0a20 	mov.w	sl, #32
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808c180:	3b01      	subs	r3, #1
 808c182:	9303      	str	r3, [sp, #12]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808c184:	9b02      	ldr	r3, [sp, #8]
 808c186:	9a03      	ldr	r2, [sp, #12]
 808c188:	689b      	ldr	r3, [r3, #8]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
 808c18a:	f10a 3aff 	add.w	sl, sl, #4294967295

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808c18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808c192:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 808c196:	f013 0301 	ands.w	r3, r3, #1
 808c19a:	d10f      	bne.n	808c1bc <mbedtls_mpi_exp_mod+0x306>
 808c19c:	2f00      	cmp	r7, #0
 808c19e:	d0df      	beq.n	808c160 <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
 808c1a0:	2f01      	cmp	r7, #1
 808c1a2:	d10b      	bne.n	808c1bc <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808c1a4:	ab0b      	add	r3, sp, #44	; 0x2c
 808c1a6:	9300      	str	r3, [sp, #0]
 808c1a8:	462a      	mov	r2, r5
 808c1aa:	4623      	mov	r3, r4
 808c1ac:	4631      	mov	r1, r6
 808c1ae:	4630      	mov	r0, r6
 808c1b0:	f7ff fa4b 	bl	808b64a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c1b4:	4603      	mov	r3, r0
 808c1b6:	2800      	cmp	r0, #0
 808c1b8:	d0d2      	beq.n	808c160 <mbedtls_mpi_exp_mod+0x2aa>
 808c1ba:	e06f      	b.n	808c29c <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
 808c1bc:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
 808c1c0:	ebc9 020b 	rsb	r2, r9, fp
 808c1c4:	4093      	lsls	r3, r2

        if( nbits == wsize )
 808c1c6:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
 808c1c8:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
 808c1cc:	d001      	beq.n	808c1d2 <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
 808c1ce:	2702      	movs	r7, #2
 808c1d0:	e7c6      	b.n	808c160 <mbedtls_mpi_exp_mod+0x2aa>
 808c1d2:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808c1d4:	ab0b      	add	r3, sp, #44	; 0x2c
 808c1d6:	9300      	str	r3, [sp, #0]
 808c1d8:	462a      	mov	r2, r5
 808c1da:	4623      	mov	r3, r4
 808c1dc:	4631      	mov	r1, r6
 808c1de:	4630      	mov	r0, r6
 808c1e0:	f7ff fa33 	bl	808b64a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c1e4:	4603      	mov	r3, r0
 808c1e6:	2800      	cmp	r0, #0
 808c1e8:	d158      	bne.n	808c29c <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 808c1ea:	3701      	adds	r7, #1
 808c1ec:	45bb      	cmp	fp, r7
 808c1ee:	d1f1      	bne.n	808c1d4 <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 808c1f0:	ab0b      	add	r3, sp, #44	; 0x2c
 808c1f2:	a814      	add	r0, sp, #80	; 0x50
 808c1f4:	210c      	movs	r1, #12
 808c1f6:	9300      	str	r3, [sp, #0]
 808c1f8:	fb01 0108 	mla	r1, r1, r8, r0
 808c1fc:	4623      	mov	r3, r4
 808c1fe:	462a      	mov	r2, r5
 808c200:	4630      	mov	r0, r6
 808c202:	f7ff fa22 	bl	808b64a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c206:	4603      	mov	r3, r0
 808c208:	2800      	cmp	r0, #0
 808c20a:	d147      	bne.n	808c29c <mbedtls_mpi_exp_mod+0x3e6>

            state--;
 808c20c:	2701      	movs	r7, #1
            nbits = 0;
 808c20e:	4680      	mov	r8, r0
            wbits = 0;
 808c210:	4681      	mov	r9, r0
 808c212:	e7a5      	b.n	808c160 <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808c214:	4623      	mov	r3, r4
 808c216:	f8cd a000 	str.w	sl, [sp]
 808c21a:	462a      	mov	r2, r5
 808c21c:	4631      	mov	r1, r6
 808c21e:	4630      	mov	r0, r6
 808c220:	f7ff fa13 	bl	808b64a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c224:	4603      	mov	r3, r0
 808c226:	2800      	cmp	r0, #0
 808c228:	d138      	bne.n	808c29c <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808c22a:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
 808c22c:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
 808c230:	ea18 0f03 	tst.w	r8, r3
 808c234:	d103      	bne.n	808c23e <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 808c236:	3701      	adds	r7, #1
 808c238:	454f      	cmp	r7, r9
 808c23a:	d1eb      	bne.n	808c214 <mbedtls_mpi_exp_mod+0x35e>
 808c23c:	e00b      	b.n	808c256 <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 808c23e:	4623      	mov	r3, r4
 808c240:	f8cd a000 	str.w	sl, [sp]
 808c244:	462a      	mov	r2, r5
 808c246:	a917      	add	r1, sp, #92	; 0x5c
 808c248:	4630      	mov	r0, r6
 808c24a:	f7ff f9fe 	bl	808b64a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c24e:	4603      	mov	r3, r0
 808c250:	2800      	cmp	r0, #0
 808c252:	d0f0      	beq.n	808c236 <mbedtls_mpi_exp_mod+0x380>
 808c254:	e022      	b.n	808c29c <mbedtls_mpi_exp_mod+0x3e6>
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808c256:	2301      	movs	r3, #1
 808c258:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808c25a:	9311      	str	r3, [sp, #68]	; 0x44
 808c25c:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 808c25e:	ab07      	add	r3, sp, #28
 808c260:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808c262:	f8cd a000 	str.w	sl, [sp]
 808c266:	4623      	mov	r3, r4
 808c268:	462a      	mov	r2, r5
 808c26a:	a911      	add	r1, sp, #68	; 0x44
 808c26c:	4630      	mov	r0, r6
 808c26e:	f7ff f9ec 	bl	808b64a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808c272:	4603      	mov	r3, r0
 808c274:	b990      	cbnz	r0, 808c29c <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 808c276:	9a04      	ldr	r2, [sp, #16]
 808c278:	3201      	adds	r2, #1
 808c27a:	d10f      	bne.n	808c29c <mbedtls_mpi_exp_mod+0x3e6>
 808c27c:	9a02      	ldr	r2, [sp, #8]
 808c27e:	6852      	ldr	r2, [r2, #4]
 808c280:	b162      	cbz	r2, 808c29c <mbedtls_mpi_exp_mod+0x3e6>
 808c282:	9a02      	ldr	r2, [sp, #8]
 808c284:	6892      	ldr	r2, [r2, #8]
 808c286:	6812      	ldr	r2, [r2, #0]
 808c288:	07d2      	lsls	r2, r2, #31
 808c28a:	d507      	bpl.n	808c29c <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
 808c28c:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808c28e:	4632      	mov	r2, r6
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    {
        X->s = -1;
 808c290:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808c292:	4629      	mov	r1, r5
 808c294:	4630      	mov	r0, r6
 808c296:	f7ff fb31 	bl	808b8fc <mbedtls_mpi_add_mpi>
 808c29a:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808c29c:	2201      	movs	r2, #1
 808c29e:	f10b 34ff 	add.w	r4, fp, #4294967295
 808c2a2:	fa02 f404 	lsl.w	r4, r2, r4
 808c2a6:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 808c2aa:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808c2ac:	42ac      	cmp	r4, r5
 808c2ae:	9302      	str	r3, [sp, #8]
 808c2b0:	d207      	bcs.n	808c2c2 <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
 808c2b2:	ab14      	add	r3, sp, #80	; 0x50
 808c2b4:	fb06 3004 	mla	r0, r6, r4, r3
 808c2b8:	f7fe ffcd 	bl	808b256 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808c2bc:	3401      	adds	r4, #1
 808c2be:	9b02      	ldr	r3, [sp, #8]
 808c2c0:	e7f4      	b.n	808c2ac <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 808c2c2:	a817      	add	r0, sp, #92	; 0x5c
 808c2c4:	f7fe ffc7 	bl	808b256 <mbedtls_mpi_free>
 808c2c8:	a80b      	add	r0, sp, #44	; 0x2c
 808c2ca:	f7fe ffc4 	bl	808b256 <mbedtls_mpi_free>
 808c2ce:	a80e      	add	r0, sp, #56	; 0x38
 808c2d0:	f7fe ffc1 	bl	808b256 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 808c2d4:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808c2d8:	9b02      	ldr	r3, [sp, #8]
 808c2da:	b10a      	cbz	r2, 808c2e0 <mbedtls_mpi_exp_mod+0x42a>
 808c2dc:	6892      	ldr	r2, [r2, #8]
 808c2de:	b922      	cbnz	r2, 808c2ea <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
 808c2e0:	a808      	add	r0, sp, #32
 808c2e2:	9302      	str	r3, [sp, #8]
 808c2e4:	f7fe ffb7 	bl	808b256 <mbedtls_mpi_free>

    return( ret );
 808c2e8:	9b02      	ldr	r3, [sp, #8]
 808c2ea:	4618      	mov	r0, r3
}
 808c2ec:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 808c2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c2f4 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c2f6:	b08b      	sub	sp, #44	; 0x2c
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c2f8:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c2fa:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c2fc:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808c2fe:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c300:	4615      	mov	r5, r2
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c302:	9601      	str	r6, [sp, #4]
    X->n = 0;
 808c304:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808c306:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c308:	9604      	str	r6, [sp, #16]
    X->n = 0;
 808c30a:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808c30c:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c30e:	9607      	str	r6, [sp, #28]
    X->n = 0;
 808c310:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808c312:	9309      	str	r3, [sp, #36]	; 0x24
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808c314:	f7fe ffe1 	bl	808b2da <mbedtls_mpi_copy>
 808c318:	4604      	mov	r4, r0
 808c31a:	2800      	cmp	r0, #0
 808c31c:	d163      	bne.n	808c3e6 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808c31e:	4629      	mov	r1, r5
 808c320:	a807      	add	r0, sp, #28
 808c322:	f7fe ffda 	bl	808b2da <mbedtls_mpi_copy>
 808c326:	4604      	mov	r4, r0
 808c328:	2800      	cmp	r0, #0
 808c32a:	d15c      	bne.n	808c3e6 <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
 808c32c:	a804      	add	r0, sp, #16
 808c32e:	f7ff f82b 	bl	808b388 <mbedtls_mpi_lsb>
 808c332:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 808c334:	a807      	add	r0, sp, #28
 808c336:	f7ff f827 	bl	808b388 <mbedtls_mpi_lsb>
 808c33a:	4285      	cmp	r5, r0
 808c33c:	bf28      	it	cs
 808c33e:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 808c340:	a804      	add	r0, sp, #16
 808c342:	4629      	mov	r1, r5
 808c344:	f7ff f906 	bl	808b554 <mbedtls_mpi_shift_r>
 808c348:	4604      	mov	r4, r0
 808c34a:	2800      	cmp	r0, #0
 808c34c:	d14b      	bne.n	808c3e6 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 808c34e:	4629      	mov	r1, r5
 808c350:	a807      	add	r0, sp, #28
 808c352:	f7ff f8ff 	bl	808b554 <mbedtls_mpi_shift_r>
 808c356:	4604      	mov	r4, r0
 808c358:	2800      	cmp	r0, #0
 808c35a:	d144      	bne.n	808c3e6 <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
 808c35c:	9607      	str	r6, [sp, #28]
 808c35e:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 808c360:	2100      	movs	r1, #0
 808c362:	a804      	add	r0, sp, #16
 808c364:	f7ff fa1a 	bl	808b79c <mbedtls_mpi_cmp_int>
 808c368:	2800      	cmp	r0, #0
 808c36a:	d031      	beq.n	808c3d0 <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 808c36c:	a804      	add	r0, sp, #16
 808c36e:	f7ff f80b 	bl	808b388 <mbedtls_mpi_lsb>
 808c372:	4601      	mov	r1, r0
 808c374:	a804      	add	r0, sp, #16
 808c376:	f7ff f8ed 	bl	808b554 <mbedtls_mpi_shift_r>
 808c37a:	4604      	mov	r4, r0
 808c37c:	2800      	cmp	r0, #0
 808c37e:	d132      	bne.n	808c3e6 <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 808c380:	a807      	add	r0, sp, #28
 808c382:	f7ff f801 	bl	808b388 <mbedtls_mpi_lsb>
 808c386:	4601      	mov	r1, r0
 808c388:	a807      	add	r0, sp, #28
 808c38a:	f7ff f8e3 	bl	808b554 <mbedtls_mpi_shift_r>
 808c38e:	4604      	mov	r4, r0
 808c390:	bb48      	cbnz	r0, 808c3e6 <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 808c392:	a907      	add	r1, sp, #28
 808c394:	a804      	add	r0, sp, #16
 808c396:	f7ff f9bc 	bl	808b712 <mbedtls_mpi_cmp_mpi>
 808c39a:	2800      	cmp	r0, #0
 808c39c:	db09      	blt.n	808c3b2 <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 808c39e:	a904      	add	r1, sp, #16
 808c3a0:	aa07      	add	r2, sp, #28
 808c3a2:	4608      	mov	r0, r1
 808c3a4:	f7ff fa6a 	bl	808b87c <mbedtls_mpi_sub_abs>
 808c3a8:	4604      	mov	r4, r0
 808c3aa:	b9e0      	cbnz	r0, 808c3e6 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 808c3ac:	2101      	movs	r1, #1
 808c3ae:	a804      	add	r0, sp, #16
 808c3b0:	e008      	b.n	808c3c4 <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 808c3b2:	a907      	add	r1, sp, #28
 808c3b4:	aa04      	add	r2, sp, #16
 808c3b6:	4608      	mov	r0, r1
 808c3b8:	f7ff fa60 	bl	808b87c <mbedtls_mpi_sub_abs>
 808c3bc:	4604      	mov	r4, r0
 808c3be:	b990      	cbnz	r0, 808c3e6 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 808c3c0:	2101      	movs	r1, #1
 808c3c2:	a807      	add	r0, sp, #28
 808c3c4:	f7ff f8c6 	bl	808b554 <mbedtls_mpi_shift_r>
 808c3c8:	4604      	mov	r4, r0
 808c3ca:	2800      	cmp	r0, #0
 808c3cc:	d0c8      	beq.n	808c360 <mbedtls_mpi_gcd+0x6c>
 808c3ce:	e00a      	b.n	808c3e6 <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 808c3d0:	4629      	mov	r1, r5
 808c3d2:	a807      	add	r0, sp, #28
 808c3d4:	f7ff f86f 	bl	808b4b6 <mbedtls_mpi_shift_l>
 808c3d8:	4604      	mov	r4, r0
 808c3da:	b920      	cbnz	r0, 808c3e6 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 808c3dc:	a907      	add	r1, sp, #28
 808c3de:	4638      	mov	r0, r7
 808c3e0:	f7fe ff7b 	bl	808b2da <mbedtls_mpi_copy>
 808c3e4:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 808c3e6:	a801      	add	r0, sp, #4
 808c3e8:	f7fe ff35 	bl	808b256 <mbedtls_mpi_free>
 808c3ec:	a804      	add	r0, sp, #16
 808c3ee:	f7fe ff32 	bl	808b256 <mbedtls_mpi_free>
 808c3f2:	a807      	add	r0, sp, #28
 808c3f4:	f7fe ff2f 	bl	808b256 <mbedtls_mpi_free>

    return( ret );
}
 808c3f8:	4620      	mov	r0, r4
 808c3fa:	b00b      	add	sp, #44	; 0x2c
 808c3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808c3fe <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808c3fe:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808c400:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808c404:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 808c408:	4605      	mov	r5, r0
 808c40a:	460c      	mov	r4, r1
 808c40c:	4616      	mov	r6, r2
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808c40e:	d814      	bhi.n	808c43a <mbedtls_mpi_fill_random+0x3c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 808c410:	460a      	mov	r2, r1
 808c412:	4618      	mov	r0, r3
 808c414:	4669      	mov	r1, sp
 808c416:	47b0      	blx	r6
 808c418:	b920      	cbnz	r0, 808c424 <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 808c41a:	4622      	mov	r2, r4
 808c41c:	4669      	mov	r1, sp
 808c41e:	4628      	mov	r0, r5
 808c420:	f7fe fff1 	bl	808b406 <mbedtls_mpi_read_binary>
 808c424:	2300      	movs	r3, #0
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
}

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808c426:	f240 4401 	movw	r4, #1025	; 0x401
 808c42a:	4619      	mov	r1, r3
 808c42c:	eb0d 0203 	add.w	r2, sp, r3
 808c430:	3301      	adds	r3, #1
 808c432:	42a3      	cmp	r3, r4
 808c434:	d003      	beq.n	808c43e <mbedtls_mpi_fill_random+0x40>
 808c436:	7011      	strb	r1, [r2, #0]
 808c438:	e7f8      	b.n	808c42c <mbedtls_mpi_fill_random+0x2e>
{
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808c43a:	f06f 0003 	mvn.w	r0, #3
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    return( ret );
}
 808c43e:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 808c442:	bd70      	pop	{r4, r5, r6, pc}

0808c444 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808c444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c448:	4680      	mov	r8, r0
 808c44a:	b09c      	sub	sp, #112	; 0x70
 808c44c:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808c44e:	4610      	mov	r0, r2
 808c450:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808c452:	4616      	mov	r6, r2
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808c454:	f7ff f9a2 	bl	808b79c <mbedtls_mpi_cmp_int>
 808c458:	2800      	cmp	r0, #0
 808c45a:	f340 814c 	ble.w	808c6f6 <mbedtls_mpi_inv_mod+0x2b2>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c45e:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c460:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808c462:	4632      	mov	r2, r6
 808c464:	4639      	mov	r1, r7
 808c466:	a801      	add	r0, sp, #4
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c468:	9504      	str	r5, [sp, #16]
    X->n = 0;
 808c46a:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808c46c:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c46e:	9507      	str	r5, [sp, #28]
    X->n = 0;
 808c470:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808c472:	9309      	str	r3, [sp, #36]	; 0x24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c474:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 808c476:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 808c478:	930c      	str	r3, [sp, #48]	; 0x30
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c47a:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 808c47c:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 808c47e:	930f      	str	r3, [sp, #60]	; 0x3c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c480:	9501      	str	r5, [sp, #4]
    X->n = 0;
 808c482:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808c484:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c486:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 808c488:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 808c48a:	9312      	str	r3, [sp, #72]	; 0x48
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c48c:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 808c48e:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 808c490:	9315      	str	r3, [sp, #84]	; 0x54
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c492:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 808c494:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 808c496:	9318      	str	r3, [sp, #96]	; 0x60
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c498:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 808c49a:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 808c49c:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808c49e:	f7ff ff29 	bl	808c2f4 <mbedtls_mpi_gcd>
 808c4a2:	4604      	mov	r4, r0
 808c4a4:	2800      	cmp	r0, #0
 808c4a6:	f040 8109 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 808c4aa:	4629      	mov	r1, r5
 808c4ac:	a801      	add	r0, sp, #4
 808c4ae:	f7ff f975 	bl	808b79c <mbedtls_mpi_cmp_int>
 808c4b2:	2800      	cmp	r0, #0
 808c4b4:	f040 8100 	bne.w	808c6b8 <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 808c4b8:	4632      	mov	r2, r6
 808c4ba:	4639      	mov	r1, r7
 808c4bc:	a804      	add	r0, sp, #16
 808c4be:	f7ff fcc8 	bl	808be52 <mbedtls_mpi_mod_mpi>
 808c4c2:	4604      	mov	r4, r0
 808c4c4:	2800      	cmp	r0, #0
 808c4c6:	f040 80f9 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 808c4ca:	a904      	add	r1, sp, #16
 808c4cc:	a807      	add	r0, sp, #28
 808c4ce:	f7fe ff04 	bl	808b2da <mbedtls_mpi_copy>
 808c4d2:	4604      	mov	r4, r0
 808c4d4:	2800      	cmp	r0, #0
 808c4d6:	f040 80f1 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 808c4da:	4631      	mov	r1, r6
 808c4dc:	a810      	add	r0, sp, #64	; 0x40
 808c4de:	f7fe fefc 	bl	808b2da <mbedtls_mpi_copy>
 808c4e2:	4604      	mov	r4, r0
 808c4e4:	2800      	cmp	r0, #0
 808c4e6:	f040 80e9 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 808c4ea:	4631      	mov	r1, r6
 808c4ec:	a813      	add	r0, sp, #76	; 0x4c
 808c4ee:	f7fe fef4 	bl	808b2da <mbedtls_mpi_copy>
 808c4f2:	4604      	mov	r4, r0
 808c4f4:	2800      	cmp	r0, #0
 808c4f6:	f040 80e1 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 808c4fa:	4629      	mov	r1, r5
 808c4fc:	a80a      	add	r0, sp, #40	; 0x28
 808c4fe:	f7fe ff16 	bl	808b32e <mbedtls_mpi_lset>
 808c502:	4604      	mov	r4, r0
 808c504:	2800      	cmp	r0, #0
 808c506:	f040 80d9 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 808c50a:	4601      	mov	r1, r0
 808c50c:	a80d      	add	r0, sp, #52	; 0x34
 808c50e:	f7fe ff0e 	bl	808b32e <mbedtls_mpi_lset>
 808c512:	4604      	mov	r4, r0
 808c514:	2800      	cmp	r0, #0
 808c516:	f040 80d1 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 808c51a:	4601      	mov	r1, r0
 808c51c:	a816      	add	r0, sp, #88	; 0x58
 808c51e:	f7fe ff06 	bl	808b32e <mbedtls_mpi_lset>
 808c522:	4604      	mov	r4, r0
 808c524:	2800      	cmp	r0, #0
 808c526:	f040 80c9 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 808c52a:	4629      	mov	r1, r5
 808c52c:	a819      	add	r0, sp, #100	; 0x64
 808c52e:	f7fe fefe 	bl	808b32e <mbedtls_mpi_lset>
 808c532:	4604      	mov	r4, r0
 808c534:	2800      	cmp	r0, #0
 808c536:	f040 80c1 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 808c53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c53c:	681b      	ldr	r3, [r3, #0]
 808c53e:	07dd      	lsls	r5, r3, #31
 808c540:	d44c      	bmi.n	808c5dc <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 808c542:	2101      	movs	r1, #1
 808c544:	a807      	add	r0, sp, #28
 808c546:	f7ff f805 	bl	808b554 <mbedtls_mpi_shift_r>
 808c54a:	4604      	mov	r4, r0
 808c54c:	2800      	cmp	r0, #0
 808c54e:	f040 80b5 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 808c552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808c554:	681b      	ldr	r3, [r3, #0]
 808c556:	07dc      	lsls	r4, r3, #31
 808c558:	d410      	bmi.n	808c57c <mbedtls_mpi_inv_mod+0x138>
 808c55a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808c55c:	681b      	ldr	r3, [r3, #0]
 808c55e:	07d8      	lsls	r0, r3, #31
 808c560:	d40c      	bmi.n	808c57c <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 808c562:	2101      	movs	r1, #1
 808c564:	a80a      	add	r0, sp, #40	; 0x28
 808c566:	f7fe fff5 	bl	808b554 <mbedtls_mpi_shift_r>
 808c56a:	4604      	mov	r4, r0
 808c56c:	2800      	cmp	r0, #0
 808c56e:	f040 80a5 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 808c572:	2101      	movs	r1, #1
 808c574:	a80d      	add	r0, sp, #52	; 0x34
 808c576:	f7fe ffed 	bl	808b554 <mbedtls_mpi_shift_r>
 808c57a:	e7da      	b.n	808c532 <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 808c57c:	a90a      	add	r1, sp, #40	; 0x28
 808c57e:	aa10      	add	r2, sp, #64	; 0x40
 808c580:	4608      	mov	r0, r1
 808c582:	f7ff f9bb 	bl	808b8fc <mbedtls_mpi_add_mpi>
 808c586:	4604      	mov	r4, r0
 808c588:	2800      	cmp	r0, #0
 808c58a:	f040 8097 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 808c58e:	a90d      	add	r1, sp, #52	; 0x34
 808c590:	aa04      	add	r2, sp, #16
 808c592:	4608      	mov	r0, r1
 808c594:	f7ff f9d3 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808c598:	4604      	mov	r4, r0
 808c59a:	2800      	cmp	r0, #0
 808c59c:	d0e1      	beq.n	808c562 <mbedtls_mpi_inv_mod+0x11e>
 808c59e:	e08d      	b.n	808c6bc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 808c5a0:	2101      	movs	r1, #1
 808c5a2:	a813      	add	r0, sp, #76	; 0x4c
 808c5a4:	f7fe ffd6 	bl	808b554 <mbedtls_mpi_shift_r>
 808c5a8:	4604      	mov	r4, r0
 808c5aa:	2800      	cmp	r0, #0
 808c5ac:	f040 8086 	bne.w	808c6bc <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 808c5b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 808c5b2:	681b      	ldr	r3, [r3, #0]
 808c5b4:	07da      	lsls	r2, r3, #31
 808c5b6:	d416      	bmi.n	808c5e6 <mbedtls_mpi_inv_mod+0x1a2>
 808c5b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c5ba:	681b      	ldr	r3, [r3, #0]
 808c5bc:	07db      	lsls	r3, r3, #31
 808c5be:	d412      	bmi.n	808c5e6 <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 808c5c0:	2101      	movs	r1, #1
 808c5c2:	a816      	add	r0, sp, #88	; 0x58
 808c5c4:	f7fe ffc6 	bl	808b554 <mbedtls_mpi_shift_r>
 808c5c8:	4604      	mov	r4, r0
 808c5ca:	2800      	cmp	r0, #0
 808c5cc:	d176      	bne.n	808c6bc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 808c5ce:	2101      	movs	r1, #1
 808c5d0:	a819      	add	r0, sp, #100	; 0x64
 808c5d2:	f7fe ffbf 	bl	808b554 <mbedtls_mpi_shift_r>
 808c5d6:	4604      	mov	r4, r0
 808c5d8:	2800      	cmp	r0, #0
 808c5da:	d16f      	bne.n	808c6bc <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
 808c5dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c5de:	681b      	ldr	r3, [r3, #0]
 808c5e0:	07d9      	lsls	r1, r3, #31
 808c5e2:	d411      	bmi.n	808c608 <mbedtls_mpi_inv_mod+0x1c4>
 808c5e4:	e7dc      	b.n	808c5a0 <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 808c5e6:	a916      	add	r1, sp, #88	; 0x58
 808c5e8:	aa10      	add	r2, sp, #64	; 0x40
 808c5ea:	4608      	mov	r0, r1
 808c5ec:	f7ff f986 	bl	808b8fc <mbedtls_mpi_add_mpi>
 808c5f0:	4604      	mov	r4, r0
 808c5f2:	2800      	cmp	r0, #0
 808c5f4:	d162      	bne.n	808c6bc <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 808c5f6:	a919      	add	r1, sp, #100	; 0x64
 808c5f8:	aa04      	add	r2, sp, #16
 808c5fa:	4608      	mov	r0, r1
 808c5fc:	f7ff f99f 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808c600:	4604      	mov	r4, r0
 808c602:	2800      	cmp	r0, #0
 808c604:	d0dc      	beq.n	808c5c0 <mbedtls_mpi_inv_mod+0x17c>
 808c606:	e059      	b.n	808c6bc <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 808c608:	a913      	add	r1, sp, #76	; 0x4c
 808c60a:	a807      	add	r0, sp, #28
 808c60c:	f7ff f881 	bl	808b712 <mbedtls_mpi_cmp_mpi>
 808c610:	2800      	cmp	r0, #0
 808c612:	db1f      	blt.n	808c654 <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 808c614:	a907      	add	r1, sp, #28
 808c616:	aa13      	add	r2, sp, #76	; 0x4c
 808c618:	4608      	mov	r0, r1
 808c61a:	f7ff f990 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808c61e:	4604      	mov	r4, r0
 808c620:	2800      	cmp	r0, #0
 808c622:	d14b      	bne.n	808c6bc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 808c624:	a90a      	add	r1, sp, #40	; 0x28
 808c626:	aa16      	add	r2, sp, #88	; 0x58
 808c628:	4608      	mov	r0, r1
 808c62a:	f7ff f988 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808c62e:	4604      	mov	r4, r0
 808c630:	2800      	cmp	r0, #0
 808c632:	d143      	bne.n	808c6bc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 808c634:	aa19      	add	r2, sp, #100	; 0x64
 808c636:	a90d      	add	r1, sp, #52	; 0x34
 808c638:	4608      	mov	r0, r1
 808c63a:	f7ff f980 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808c63e:	4604      	mov	r4, r0
 808c640:	2800      	cmp	r0, #0
 808c642:	d13b      	bne.n	808c6bc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 808c644:	2100      	movs	r1, #0
 808c646:	a807      	add	r0, sp, #28
 808c648:	f7ff f8a8 	bl	808b79c <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
 808c64c:	2800      	cmp	r0, #0
 808c64e:	f47f af74 	bne.w	808c53a <mbedtls_mpi_inv_mod+0xf6>
 808c652:	e017      	b.n	808c684 <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 808c654:	a913      	add	r1, sp, #76	; 0x4c
 808c656:	aa07      	add	r2, sp, #28
 808c658:	4608      	mov	r0, r1
 808c65a:	f7ff f970 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808c65e:	4604      	mov	r4, r0
 808c660:	bb60      	cbnz	r0, 808c6bc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 808c662:	a916      	add	r1, sp, #88	; 0x58
 808c664:	aa0a      	add	r2, sp, #40	; 0x28
 808c666:	4608      	mov	r0, r1
 808c668:	f7ff f969 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808c66c:	4604      	mov	r4, r0
 808c66e:	bb28      	cbnz	r0, 808c6bc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 808c670:	aa0d      	add	r2, sp, #52	; 0x34
 808c672:	a919      	add	r1, sp, #100	; 0x64
 808c674:	e7e0      	b.n	808c638 <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 808c676:	a916      	add	r1, sp, #88	; 0x58
 808c678:	4632      	mov	r2, r6
 808c67a:	4608      	mov	r0, r1
 808c67c:	f7ff f93e 	bl	808b8fc <mbedtls_mpi_add_mpi>
 808c680:	4604      	mov	r4, r0
 808c682:	b9d8      	cbnz	r0, 808c6bc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 808c684:	2100      	movs	r1, #0
 808c686:	a816      	add	r0, sp, #88	; 0x58
 808c688:	f7ff f888 	bl	808b79c <mbedtls_mpi_cmp_int>
 808c68c:	2800      	cmp	r0, #0
 808c68e:	dbf2      	blt.n	808c676 <mbedtls_mpi_inv_mod+0x232>
 808c690:	e006      	b.n	808c6a0 <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 808c692:	a916      	add	r1, sp, #88	; 0x58
 808c694:	4632      	mov	r2, r6
 808c696:	4608      	mov	r0, r1
 808c698:	f7ff f951 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808c69c:	4604      	mov	r4, r0
 808c69e:	b968      	cbnz	r0, 808c6bc <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 808c6a0:	4631      	mov	r1, r6
 808c6a2:	a816      	add	r0, sp, #88	; 0x58
 808c6a4:	f7ff f835 	bl	808b712 <mbedtls_mpi_cmp_mpi>
 808c6a8:	2800      	cmp	r0, #0
 808c6aa:	daf2      	bge.n	808c692 <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 808c6ac:	a916      	add	r1, sp, #88	; 0x58
 808c6ae:	4640      	mov	r0, r8
 808c6b0:	f7fe fe13 	bl	808b2da <mbedtls_mpi_copy>
 808c6b4:	4604      	mov	r4, r0
 808c6b6:	e001      	b.n	808c6bc <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 808c6b8:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 808c6bc:	a804      	add	r0, sp, #16
 808c6be:	f7fe fdca 	bl	808b256 <mbedtls_mpi_free>
 808c6c2:	a807      	add	r0, sp, #28
 808c6c4:	f7fe fdc7 	bl	808b256 <mbedtls_mpi_free>
 808c6c8:	a80a      	add	r0, sp, #40	; 0x28
 808c6ca:	f7fe fdc4 	bl	808b256 <mbedtls_mpi_free>
 808c6ce:	a80d      	add	r0, sp, #52	; 0x34
 808c6d0:	f7fe fdc1 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 808c6d4:	a801      	add	r0, sp, #4
 808c6d6:	f7fe fdbe 	bl	808b256 <mbedtls_mpi_free>
 808c6da:	a810      	add	r0, sp, #64	; 0x40
 808c6dc:	f7fe fdbb 	bl	808b256 <mbedtls_mpi_free>
 808c6e0:	a813      	add	r0, sp, #76	; 0x4c
 808c6e2:	f7fe fdb8 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 808c6e6:	a816      	add	r0, sp, #88	; 0x58
 808c6e8:	f7fe fdb5 	bl	808b256 <mbedtls_mpi_free>
 808c6ec:	a819      	add	r0, sp, #100	; 0x64
 808c6ee:	f7fe fdb2 	bl	808b256 <mbedtls_mpi_free>

    return( ret );
 808c6f2:	4620      	mov	r0, r4
 808c6f4:	e001      	b.n	808c6fa <mbedtls_mpi_inv_mod+0x2b6>
{
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808c6f6:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
 808c6fa:	b01c      	add	sp, #112	; 0x70
 808c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808c700 <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 808c700:	b110      	cbz	r0, 808c708 <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
 808c702:	2300      	movs	r3, #0
 808c704:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
 808c706:	6043      	str	r3, [r0, #4]
 808c708:	4770      	bx	lr

0808c70a <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 808c70a:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 808c70c:	4604      	mov	r4, r0
 808c70e:	b160      	cbz	r0, 808c72a <mbedtls_pk_free+0x20>
 808c710:	6803      	ldr	r3, [r0, #0]
 808c712:	b153      	cbz	r3, 808c72a <mbedtls_pk_free+0x20>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 808c714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808c716:	6840      	ldr	r0, [r0, #4]
 808c718:	4798      	blx	r3
 808c71a:	f104 0208 	add.w	r2, r4, #8
#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808c71e:	2300      	movs	r3, #0
 808c720:	4294      	cmp	r4, r2
 808c722:	d002      	beq.n	808c72a <mbedtls_pk_free+0x20>
 808c724:	7023      	strb	r3, [r4, #0]
 808c726:	3401      	adds	r4, #1
 808c728:	e7fa      	b.n	808c720 <mbedtls_pk_free+0x16>
 808c72a:	bd10      	pop	{r4, pc}

0808c72c <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 808c72c:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 808c72e:	4802      	ldr	r0, [pc, #8]	; (808c738 <mbedtls_pk_info_from_type+0xc>)
 808c730:	bf18      	it	ne
 808c732:	2000      	movne	r0, #0
 808c734:	4770      	bx	lr
 808c736:	bf00      	nop
 808c738:	08094338 	.word	0x08094338

0808c73c <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 808c73c:	b570      	push	{r4, r5, r6, lr}
 808c73e:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 808c740:	4605      	mov	r5, r0
 808c742:	b148      	cbz	r0, 808c758 <mbedtls_pk_setup+0x1c>
 808c744:	b141      	cbz	r1, 808c758 <mbedtls_pk_setup+0x1c>
 808c746:	6804      	ldr	r4, [r0, #0]
 808c748:	b934      	cbnz	r4, 808c758 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 808c74a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 808c74c:	4798      	blx	r3
 808c74e:	6068      	str	r0, [r5, #4]
 808c750:	b120      	cbz	r0, 808c75c <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 808c752:	602e      	str	r6, [r5, #0]

    return( 0 );
 808c754:	4620      	mov	r0, r4
 808c756:	bd70      	pop	{r4, r5, r6, pc}
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c758:	4801      	ldr	r0, [pc, #4]	; (808c760 <mbedtls_pk_setup+0x24>)
 808c75a:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 808c75c:	4801      	ldr	r0, [pc, #4]	; (808c764 <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
 808c75e:	bd70      	pop	{r4, r5, r6, pc}
 808c760:	ffffc180 	.word	0xffffc180
 808c764:	ffffc080 	.word	0xffffc080

0808c768 <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 808c768:	b120      	cbz	r0, 808c774 <mbedtls_pk_can_do+0xc>
 808c76a:	6803      	ldr	r3, [r0, #0]
 808c76c:	b113      	cbz	r3, 808c774 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 808c76e:	68db      	ldr	r3, [r3, #12]
 808c770:	4608      	mov	r0, r1
 808c772:	4718      	bx	r3
}
 808c774:	2000      	movs	r0, #0
 808c776:	4770      	bx	lr

0808c778 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 808c778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c77c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 808c780:	460e      	mov	r6, r1
 808c782:	4617      	mov	r7, r2
 808c784:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c788:	4604      	mov	r4, r0
 808c78a:	b910      	cbnz	r0, 808c792 <mbedtls_pk_verify+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c78c:	480f      	ldr	r0, [pc, #60]	; (808c7cc <mbedtls_pk_verify+0x54>)
 808c78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c792:	6802      	ldr	r2, [r0, #0]
 808c794:	2a00      	cmp	r2, #0
 808c796:	d0f9      	beq.n	808c78c <mbedtls_pk_verify+0x14>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808c798:	b93b      	cbnz	r3, 808c7aa <mbedtls_pk_verify+0x32>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808c79a:	4608      	mov	r0, r1
 808c79c:	f7fb f9b4 	bl	8087b08 <mbedtls_md_info_from_type>
 808c7a0:	2800      	cmp	r0, #0
 808c7a2:	d0f3      	beq.n	808c78c <mbedtls_pk_verify+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808c7a4:	f7fb faf4 	bl	8087d90 <mbedtls_md_get_size>
 808c7a8:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
 808c7aa:	6822      	ldr	r2, [r4, #0]
 808c7ac:	6915      	ldr	r5, [r2, #16]
 808c7ae:	b155      	cbz	r5, 808c7c6 <mbedtls_pk_verify+0x4e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808c7b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808c7b4:	f8cd 8020 	str.w	r8, [sp, #32]
 808c7b8:	463a      	mov	r2, r7
 808c7ba:	4631      	mov	r1, r6
 808c7bc:	6860      	ldr	r0, [r4, #4]
 808c7be:	46ac      	mov	ip, r5
}
 808c7c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808c7c4:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c7c6:	4802      	ldr	r0, [pc, #8]	; (808c7d0 <mbedtls_pk_verify+0x58>)
 808c7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c7cc:	ffffc180 	.word	0xffffc180
 808c7d0:	ffffc100 	.word	0xffffc100

0808c7d4 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808c7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c7d8:	af08      	add	r7, sp, #32
 808c7da:	460d      	mov	r5, r1
 808c7dc:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 808c7e0:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c7e2:	4604      	mov	r4, r0
 808c7e4:	b910      	cbnz	r0, 808c7ec <mbedtls_pk_sign+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c7e6:	4813      	ldr	r0, [pc, #76]	; (808c834 <mbedtls_pk_sign+0x60>)
 808c7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c7ec:	6802      	ldr	r2, [r0, #0]
 808c7ee:	2a00      	cmp	r2, #0
 808c7f0:	d0f9      	beq.n	808c7e6 <mbedtls_pk_sign+0x12>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808c7f2:	b93b      	cbnz	r3, 808c804 <mbedtls_pk_sign+0x30>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808c7f4:	4608      	mov	r0, r1
 808c7f6:	f7fb f987 	bl	8087b08 <mbedtls_md_info_from_type>
 808c7fa:	2800      	cmp	r0, #0
 808c7fc:	d0f3      	beq.n	808c7e6 <mbedtls_pk_sign+0x12>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808c7fe:	f7fb fac7 	bl	8087d90 <mbedtls_md_get_size>
 808c802:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
 808c804:	6822      	ldr	r2, [r4, #0]
 808c806:	f8d2 e014 	ldr.w	lr, [r2, #20]
 808c80a:	f1be 0f00 	cmp.w	lr, #0
 808c80e:	d00d      	beq.n	808c82c <mbedtls_pk_sign+0x58>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808c810:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 808c814:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 808c818:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 808c81c:	9708      	str	r7, [sp, #32]
 808c81e:	4632      	mov	r2, r6
 808c820:	4629      	mov	r1, r5
 808c822:	6860      	ldr	r0, [r4, #4]
 808c824:	46f4      	mov	ip, lr
}
 808c826:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808c82a:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c82c:	4802      	ldr	r0, [pc, #8]	; (808c838 <mbedtls_pk_sign+0x64>)
 808c82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c832:	bf00      	nop
 808c834:	ffffc180 	.word	0xffffc180
 808c838:	ffffc100 	.word	0xffffc100

0808c83c <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808c83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c83e:	f8dd e020 	ldr.w	lr, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL )
 808c842:	b140      	cbz	r0, 808c856 <mbedtls_pk_encrypt+0x1a>
 808c844:	6804      	ldr	r4, [r0, #0]
 808c846:	b134      	cbz	r4, 808c856 <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 808c848:	69e4      	ldr	r4, [r4, #28]
 808c84a:	b134      	cbz	r4, 808c85a <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808c84c:	46a4      	mov	ip, r4
}
 808c84e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808c852:	6840      	ldr	r0, [r0, #4]
 808c854:	4760      	bx	ip
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c856:	4802      	ldr	r0, [pc, #8]	; (808c860 <mbedtls_pk_encrypt+0x24>)
 808c858:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c85a:	4802      	ldr	r0, [pc, #8]	; (808c864 <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
 808c85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c85e:	bf00      	nop
 808c860:	ffffc180 	.word	0xffffc180
 808c864:	ffffc100 	.word	0xffffc100

0808c868 <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c868:	b120      	cbz	r0, 808c874 <mbedtls_pk_get_bitlen+0xc>
 808c86a:	6803      	ldr	r3, [r0, #0]
 808c86c:	b113      	cbz	r3, 808c874 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 808c86e:	689b      	ldr	r3, [r3, #8]
 808c870:	6840      	ldr	r0, [r0, #4]
 808c872:	4718      	bx	r3
}
 808c874:	2000      	movs	r0, #0
 808c876:	4770      	bx	lr

0808c878 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 808c878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c87c:	b087      	sub	sp, #28
 808c87e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 808c882:	4683      	mov	fp, r0
 808c884:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
 808c888:	460d      	mov	r5, r1
 808c88a:	461f      	mov	r7, r3
 808c88c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if( ctx == NULL || ctx->pk_info == NULL )
 808c88e:	4614      	mov	r4, r2
 808c890:	b90a      	cbnz	r2, 808c896 <mbedtls_pk_verify_ext+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c892:	4823      	ldr	r0, [pc, #140]	; (808c920 <mbedtls_pk_verify_ext+0xa8>)
 808c894:	e040      	b.n	808c918 <mbedtls_pk_verify_ext+0xa0>
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c896:	6813      	ldr	r3, [r2, #0]
 808c898:	2b00      	cmp	r3, #0
 808c89a:	d0fa      	beq.n	808c892 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
 808c89c:	4601      	mov	r1, r0
 808c89e:	4610      	mov	r0, r2
 808c8a0:	f7ff ff62 	bl	808c768 <mbedtls_pk_can_do>
 808c8a4:	2800      	cmp	r0, #0
 808c8a6:	d034      	beq.n	808c912 <mbedtls_pk_verify_ext+0x9a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
 808c8a8:	f1bb 0f06 	cmp.w	fp, #6
 808c8ac:	d123      	bne.n	808c8f6 <mbedtls_pk_verify_ext+0x7e>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
 808c8ae:	2d00      	cmp	r5, #0
 808c8b0:	d0ef      	beq.n	808c892 <mbedtls_pk_verify_ext+0x1a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 808c8b2:	4620      	mov	r0, r4
 808c8b4:	f7ff ffd8 	bl	808c868 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
 808c8b8:	3007      	adds	r0, #7
 808c8ba:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808c8be:	d32a      	bcc.n	808c916 <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
 808c8c0:	686b      	ldr	r3, [r5, #4]
 808c8c2:	e88d 0280 	stmia.w	sp, {r7, r9}
 808c8c6:	9304      	str	r3, [sp, #16]
 808c8c8:	782b      	ldrb	r3, [r5, #0]
 808c8ca:	f8cd a014 	str.w	sl, [sp, #20]
 808c8ce:	9303      	str	r3, [sp, #12]
 808c8d0:	f8cd 8008 	str.w	r8, [sp, #8]
 808c8d4:	2300      	movs	r3, #0
 808c8d6:	461a      	mov	r2, r3
 808c8d8:	4619      	mov	r1, r3
 808c8da:	6860      	ldr	r0, [r4, #4]
 808c8dc:	f7f8 f9aa 	bl	8084c34 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 808c8e0:	b9d0      	cbnz	r0, 808c918 <mbedtls_pk_verify_ext+0xa0>
 808c8e2:	4620      	mov	r0, r4
 808c8e4:	f7ff ffc0 	bl	808c868 <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
 808c8e8:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
 808c8ea:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808c8ee:	480d      	ldr	r0, [pc, #52]	; (808c924 <mbedtls_pk_verify_ext+0xac>)
 808c8f0:	bf98      	it	ls
 808c8f2:	2000      	movls	r0, #0
 808c8f4:	e010      	b.n	808c918 <mbedtls_pk_verify_ext+0xa0>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 808c8f6:	2d00      	cmp	r5, #0
 808c8f8:	d1cb      	bne.n	808c892 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808c8fa:	464b      	mov	r3, r9
 808c8fc:	4642      	mov	r2, r8
 808c8fe:	4639      	mov	r1, r7
 808c900:	4620      	mov	r0, r4
 808c902:	9611      	str	r6, [sp, #68]	; 0x44
 808c904:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
 808c908:	b007      	add	sp, #28
 808c90a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808c90e:	f7ff bf33 	b.w	808c778 <mbedtls_pk_verify>
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c912:	4805      	ldr	r0, [pc, #20]	; (808c928 <mbedtls_pk_verify_ext+0xb0>)
 808c914:	e000      	b.n	808c918 <mbedtls_pk_verify_ext+0xa0>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 808c916:	4805      	ldr	r0, [pc, #20]	; (808c92c <mbedtls_pk_verify_ext+0xb4>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 808c918:	b007      	add	sp, #28
 808c91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c91e:	bf00      	nop
 808c920:	ffffc180 	.word	0xffffc180
 808c924:	ffffc700 	.word	0xffffc700
 808c928:	ffffc100 	.word	0xffffc100
 808c92c:	ffffbc80 	.word	0xffffbc80

0808c930 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c930:	b118      	cbz	r0, 808c93a <mbedtls_pk_get_name+0xa>
 808c932:	6803      	ldr	r3, [r0, #0]
 808c934:	b10b      	cbz	r3, 808c93a <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 808c936:	6858      	ldr	r0, [r3, #4]
 808c938:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
 808c93a:	4801      	ldr	r0, [pc, #4]	; (808c940 <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
 808c93c:	4770      	bx	lr
 808c93e:	bf00      	nop
 808c940:	0809517c 	.word	0x0809517c

0808c944 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c944:	b110      	cbz	r0, 808c94c <mbedtls_pk_get_type+0x8>
 808c946:	6800      	ldr	r0, [r0, #0]
 808c948:	b100      	cbz	r0, 808c94c <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 808c94a:	7800      	ldrb	r0, [r0, #0]
}
 808c94c:	4770      	bx	lr
	...

0808c950 <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 808c950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c954:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c958:	2301      	movs	r3, #1
 808c95a:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 808c95c:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 808c960:	a904      	add	r1, sp, #16
 808c962:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c966:	f013 0180 	ands.w	r1, r3, #128	; 0x80
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 808c96a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c96e:	bf18      	it	ne
 808c970:	211b      	movne	r1, #27
 808c972:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c976:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c978:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c97a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c97e:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c980:	d1ee      	bne.n	808c960 <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808c982:	4c66      	ldr	r4, [pc, #408]	; (808cb1c <_ZL14aes_gen_tablesv+0x1cc>)
 808c984:	2301      	movs	r3, #1
 808c986:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
 808c988:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808c98c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 808c990:	bf18      	it	ne
 808c992:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808c994:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808c996:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808c99a:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808c99c:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808c99e:	d1f3      	bne.n	808c988 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808c9a0:	4e5f      	ldr	r6, [pc, #380]	; (808cb20 <_ZL14aes_gen_tablesv+0x1d0>)
 808c9a2:	2363      	movs	r3, #99	; 0x63
    RSb[0x63] = 0x00;
 808c9a4:	4d5f      	ldr	r5, [pc, #380]	; (808cb24 <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808c9a6:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 808c9a8:	2300      	movs	r3, #0
 808c9aa:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 808c9ae:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
 808c9b0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 808c9b4:	aa04      	add	r2, sp, #16
 808c9b6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 808c9ba:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c9be:	ea4f 11ee 	mov.w	r1, lr, asr #7
 808c9c2:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
 808c9c6:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c9c8:	11ca      	asrs	r2, r1, #7
 808c9ca:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 808c9ce:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c9d0:	11d3      	asrs	r3, r2, #7
 808c9d2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 808c9d6:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
 808c9d8:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c9dc:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
 808c9de:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c9e2:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
 808c9e6:	404a      	eors	r2, r1
 808c9e8:	4053      	eors	r3, r2
 808c9ea:	b2fa      	uxtb	r2, r7
 808c9ec:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 808c9ee:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 808c9f0:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 808c9f2:	3401      	adds	r4, #1
 808c9f4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 808c9f8:	d1da      	bne.n	808c9b0 <_ZL14aes_gen_tablesv+0x60>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c9fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808c9fc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c9fe:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808ca00:	6a43      	ldr	r3, [r0, #36]	; 0x24
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808ca02:	f8df e11c 	ldr.w	lr, [pc, #284]	; 808cb20 <_ZL14aes_gen_tablesv+0x1d0>
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808ca06:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808ca08:	6b43      	ldr	r3, [r0, #52]	; 0x34
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
 808ca0a:	f8df c12c 	ldr.w	ip, [pc, #300]	; 808cb38 <_ZL14aes_gen_tablesv+0x1e8>

        FT1[i] = ROTL8( FT0[i] );
 808ca0e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 808cb3c <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
 808ca12:	f8df 912c 	ldr.w	r9, [pc, #300]	; 808cb40 <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
 808ca16:	f8df a12c 	ldr.w	sl, [pc, #300]	; 808cb44 <_ZL14aes_gen_tablesv+0x1f4>

        x = RSb[i];
 808ca1a:	f8df b108 	ldr.w	fp, [pc, #264]	; 808cb24 <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808ca1e:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808ca20:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808ca22:	f812 000e 	ldrb.w	r0, [r2, lr]
 808ca26:	0094      	lsls	r4, r2, #2
        y = XTIME( x ) & 0xFF;
 808ca28:	f010 0f80 	tst.w	r0, #128	; 0x80
 808ca2c:	bf14      	ite	ne
 808ca2e:	211b      	movne	r1, #27
 808ca30:	2100      	moveq	r1, #0
 808ca32:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808ca36:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 808ca38:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808ca3a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808ca3e:	404b      	eors	r3, r1
 808ca40:	4041      	eors	r1, r0
 808ca42:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
 808ca46:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 808ca4a:	ea4f 6333 	mov.w	r3, r3, ror #24
 808ca4e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 808ca52:	ea4f 6333 	mov.w	r3, r3, ror #24
 808ca56:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 808ca5a:	ea4f 6333 	mov.w	r3, r3, ror #24
 808ca5e:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]

        x = RSb[i];
 808ca62:	f81b 3002 	ldrb.w	r3, [fp, r2]

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808ca66:	b1d3      	cbz	r3, 808ca9e <_ZL14aes_gen_tablesv+0x14e>
 808ca68:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808ca6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808ca70:	9801      	ldr	r0, [sp, #4]
 808ca72:	1845      	adds	r5, r0, r1
 808ca74:	20ff      	movs	r0, #255	; 0xff
 808ca76:	fb95 f6f0 	sdiv	r6, r5, r0
 808ca7a:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 808ca7e:	1bae      	subs	r6, r5, r6
 808ca80:	ad04      	add	r5, sp, #16
 808ca82:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808ca86:	9e02      	ldr	r6, [sp, #8]
 808ca88:	4431      	add	r1, r6
 808ca8a:	fb91 f0f0 	sdiv	r0, r1, r0
 808ca8e:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808ca92:	1a09      	subs	r1, r1, r0
 808ca94:	a804      	add	r0, sp, #16
 808ca96:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808ca9a:	0209      	lsls	r1, r1, #8
 808ca9c:	e001      	b.n	808caa2 <_ZL14aes_gen_tablesv+0x152>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808ca9e:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808caa0:	4619      	mov	r1, r3
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808caa2:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808caa4:	b183      	cbz	r3, 808cac8 <_ZL14aes_gen_tablesv+0x178>
 808caa6:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808caaa:	9803      	ldr	r0, [sp, #12]
 808caac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808cab0:	4401      	add	r1, r0
 808cab2:	20ff      	movs	r0, #255	; 0xff
 808cab4:	fb91 f0f0 	sdiv	r0, r1, r0
 808cab8:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808cabc:	1a08      	subs	r0, r1, r0
 808cabe:	a904      	add	r1, sp, #16
 808cac0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 808cac4:	0409      	lsls	r1, r1, #16
 808cac6:	e000      	b.n	808caca <_ZL14aes_gen_tablesv+0x17a>
 808cac8:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808caca:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808cacc:	b173      	cbz	r3, 808caec <_ZL14aes_gen_tablesv+0x19c>
 808cace:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808cad2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 808cad6:	21ff      	movs	r1, #255	; 0xff
 808cad8:	443b      	add	r3, r7
 808cada:	fb93 f1f1 	sdiv	r1, r3, r1
 808cade:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 808cae2:	1a59      	subs	r1, r3, r1
 808cae4:	ab04      	add	r3, sp, #16
 808cae6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808caea:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808caec:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808caee:	4b0e      	ldr	r3, [pc, #56]	; (808cb28 <_ZL14aes_gen_tablesv+0x1d8>)
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808caf0:	3201      	adds	r2, #1
        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808caf2:	50e5      	str	r5, [r4, r3]

        RT1[i] = ROTL8( RT0[i] );
 808caf4:	4b0d      	ldr	r3, [pc, #52]	; (808cb2c <_ZL14aes_gen_tablesv+0x1dc>)
 808caf6:	ea4f 6535 	mov.w	r5, r5, ror #24
 808cafa:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 808cafc:	4b0c      	ldr	r3, [pc, #48]	; (808cb30 <_ZL14aes_gen_tablesv+0x1e0>)
 808cafe:	ea4f 6535 	mov.w	r5, r5, ror #24
 808cb02:	50e5      	str	r5, [r4, r3]
        RT3[i] = ROTL8( RT2[i] );
 808cb04:	4b0b      	ldr	r3, [pc, #44]	; (808cb34 <_ZL14aes_gen_tablesv+0x1e4>)
 808cb06:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808cb0a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 808cb0e:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808cb10:	d187      	bne.n	808ca22 <_ZL14aes_gen_tablesv+0xd2>

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
    }
}
 808cb12:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 808cb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cb1a:	bf00      	nop
 808cb1c:	20003170 	.word	0x20003170
 808cb20:	20002070 	.word	0x20002070
 808cb24:	20001f70 	.word	0x20001f70
 808cb28:	20002570 	.word	0x20002570
 808cb2c:	20002970 	.word	0x20002970
 808cb30:	20002d70 	.word	0x20002d70
 808cb34:	20002170 	.word	0x20002170
 808cb38:	20000f70 	.word	0x20000f70
 808cb3c:	20001370 	.word	0x20001370
 808cb40:	20001770 	.word	0x20001770
 808cb44:	20001b70 	.word	0x20001b70

0808cb48 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 808cb48:	f44f 728c 	mov.w	r2, #280	; 0x118
 808cb4c:	2100      	movs	r1, #0
 808cb4e:	f006 bacc 	b.w	80930ea <memset>

0808cb52 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 808cb52:	b138      	cbz	r0, 808cb64 <mbedtls_aes_free+0x12>
 808cb54:	f500 728c 	add.w	r2, r0, #280	; 0x118

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 808cb58:	2300      	movs	r3, #0
 808cb5a:	4290      	cmp	r0, r2
 808cb5c:	d002      	beq.n	808cb64 <mbedtls_aes_free+0x12>
 808cb5e:	7003      	strb	r3, [r0, #0]
 808cb60:	3001      	adds	r0, #1
 808cb62:	e7fa      	b.n	808cb5a <mbedtls_aes_free+0x8>
 808cb64:	4770      	bx	lr
	...

0808cb68 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808cb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808cb6a:	4e7a      	ldr	r6, [pc, #488]	; (808cd54 <mbedtls_aes_setkey_enc+0x1ec>)
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808cb6c:	4604      	mov	r4, r0
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808cb6e:	6833      	ldr	r3, [r6, #0]
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808cb70:	460f      	mov	r7, r1
 808cb72:	4615      	mov	r5, r2
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808cb74:	b91b      	cbnz	r3, 808cb7e <mbedtls_aes_setkey_enc+0x16>
    {
        aes_gen_tables();
 808cb76:	f7ff feeb 	bl	808c950 <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
 808cb7a:	2301      	movs	r3, #1
 808cb7c:	6033      	str	r3, [r6, #0]

    }
#endif

    switch( keybits )
 808cb7e:	2dc0      	cmp	r5, #192	; 0xc0
 808cb80:	d007      	beq.n	808cb92 <mbedtls_aes_setkey_enc+0x2a>
 808cb82:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 808cb86:	d006      	beq.n	808cb96 <mbedtls_aes_setkey_enc+0x2e>
 808cb88:	2d80      	cmp	r5, #128	; 0x80
 808cb8a:	f040 80dd 	bne.w	808cd48 <mbedtls_aes_setkey_enc+0x1e0>
    {
        case 128: ctx->nr = 10; break;
 808cb8e:	230a      	movs	r3, #10
 808cb90:	e002      	b.n	808cb98 <mbedtls_aes_setkey_enc+0x30>
        case 192: ctx->nr = 12; break;
 808cb92:	230c      	movs	r3, #12
 808cb94:	e000      	b.n	808cb98 <mbedtls_aes_setkey_enc+0x30>
        case 256: ctx->nr = 14; break;
 808cb96:	230e      	movs	r3, #14
 808cb98:	6023      	str	r3, [r4, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808cb9a:	f104 0308 	add.w	r3, r4, #8
 808cb9e:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808cba0:	096d      	lsrs	r5, r5, #5
 808cba2:	2000      	movs	r0, #0
 808cba4:	42a8      	cmp	r0, r5
 808cba6:	d010      	beq.n	808cbca <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 808cba8:	eb07 0180 	add.w	r1, r7, r0, lsl #2
 808cbac:	788a      	ldrb	r2, [r1, #2]
 808cbae:	784e      	ldrb	r6, [r1, #1]
 808cbb0:	0412      	lsls	r2, r2, #16
 808cbb2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 808cbb6:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
 808cbba:	78c9      	ldrb	r1, [r1, #3]
 808cbbc:	4332      	orrs	r2, r6
 808cbbe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 808cbc2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808cbc6:	3001      	adds	r0, #1
 808cbc8:	e7ec      	b.n	808cba4 <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808cbca:	6822      	ldr	r2, [r4, #0]
 808cbcc:	2a0c      	cmp	r2, #12
 808cbce:	d031      	beq.n	808cc34 <mbedtls_aes_setkey_enc+0xcc>
 808cbd0:	2a0e      	cmp	r2, #14
 808cbd2:	d068      	beq.n	808cca6 <mbedtls_aes_setkey_enc+0x13e>
 808cbd4:	2a0a      	cmp	r2, #10
 808cbd6:	f040 80ba 	bne.w	808cd4e <mbedtls_aes_setkey_enc+0x1e6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 808cbda:	4f5f      	ldr	r7, [pc, #380]	; (808cd58 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808cbdc:	4e5f      	ldr	r6, [pc, #380]	; (808cd5c <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808cbde:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808cbe0:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808cbe2:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 808cbe6:	681a      	ldr	r2, [r3, #0]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808cbe8:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808cbea:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808cbec:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808cbf0:	5cb0      	ldrb	r0, [r6, r2]
 808cbf2:	0e22      	lsrs	r2, r4, #24
 808cbf4:	5cb2      	ldrb	r2, [r6, r2]
 808cbf6:	4041      	eors	r1, r0
 808cbf8:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808cbfc:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808cbfe:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808cc00:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808cc02:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 808cc06:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808cc0a:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808cc0c:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808cc10:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808cc14:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808cc18:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 808cc1a:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 808cc1e:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808cc22:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 808cc24:	ea82 0201 	eor.w	r2, r2, r1
 808cc28:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 808cc2a:	ea82 0204 	eor.w	r2, r2, r4
 808cc2e:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808cc30:	d1d6      	bne.n	808cbe0 <mbedtls_aes_setkey_enc+0x78>
 808cc32:	e08c      	b.n	808cd4e <mbedtls_aes_setkey_enc+0x1e6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 808cc34:	4e48      	ldr	r6, [pc, #288]	; (808cd58 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808cc36:	4d49      	ldr	r5, [pc, #292]	; (808cd5c <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808cc38:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808cc3a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808cc3e:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808cc40:	681a      	ldr	r2, [r3, #0]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808cc42:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808cc44:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808cc46:	f3c0 2107 	ubfx	r1, r0, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808cc4a:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808cc4c:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808cc4e:	ea82 0201 	eor.w	r2, r2, r1
 808cc52:	ea4f 6110 	mov.w	r1, r0, lsr #24
 808cc56:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808cc58:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808cc5c:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808cc60:	b2c1      	uxtb	r1, r0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808cc62:	5c69      	ldrb	r1, [r5, r1]
 808cc64:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 808cc68:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808cc6c:	5c69      	ldrb	r1, [r5, r1]
 808cc6e:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808cc72:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808cc76:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 808cc78:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 808cc7c:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808cc80:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 808cc82:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 808cc86:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 808cc8a:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 808cc8c:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 808cc90:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 808cc94:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 808cc96:	ea82 0201 	eor.w	r2, r2, r1
 808cc9a:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 808cc9c:	ea82 0200 	eor.w	r2, r2, r0
 808cca0:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808cca2:	d1ca      	bne.n	808cc3a <mbedtls_aes_setkey_enc+0xd2>
 808cca4:	e053      	b.n	808cd4e <mbedtls_aes_setkey_enc+0x1e6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 808cca6:	4e2c      	ldr	r6, [pc, #176]	; (808cd58 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808cca8:	482c      	ldr	r0, [pc, #176]	; (808cd5c <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808ccaa:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ccac:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808ccb0:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ccb2:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808ccb4:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ccb6:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808ccb8:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ccbc:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808ccbe:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ccc0:	4051      	eors	r1, r2
 808ccc2:	0e22      	lsrs	r2, r4, #24
 808ccc4:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808ccc6:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ccc8:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808cccc:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ccce:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808ccd0:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ccd4:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 808ccd8:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ccdc:	5c82      	ldrb	r2, [r0, r2]
 808ccde:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808cce2:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808cce6:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 808cce8:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 808ccec:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808ccf0:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 808ccf2:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
 808ccf6:	ea87 0701 	eor.w	r7, r7, r1
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808ccfa:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 808ccfc:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 808ccfe:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808cd00:	5c82      	ldrb	r2, [r0, r2]
 808cd02:	f853 1c10 	ldr.w	r1, [r3, #-16]
 808cd06:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808cd0a:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808cd0e:	5c82      	ldrb	r2, [r0, r2]
 808cd10:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 808cd14:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808cd18:	5c82      	ldrb	r2, [r0, r2]
 808cd1a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 808cd1e:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 808cd22:	5dc2      	ldrb	r2, [r0, r7]
 808cd24:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808cd28:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808cd2c:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
 808cd2e:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
 808cd32:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808cd36:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 808cd38:	ea82 0201 	eor.w	r2, r2, r1
 808cd3c:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 808cd3e:	ea82 0204 	eor.w	r2, r2, r4
 808cd42:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808cd44:	d1b2      	bne.n	808ccac <mbedtls_aes_setkey_enc+0x144>
 808cd46:	e002      	b.n	808cd4e <mbedtls_aes_setkey_enc+0x1e6>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 808cd48:	f06f 001f 	mvn.w	r0, #31
 808cd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 808cd4e:	2000      	movs	r0, #0
}
 808cd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808cd52:	bf00      	nop
 808cd54:	20000f6c 	.word	0x20000f6c
 808cd58:	20003170 	.word	0x20003170
 808cd5c:	20002070 	.word	0x20002070

0808cd60 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808cd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cd64:	4604      	mov	r4, r0
 808cd66:	460d      	mov	r5, r1
 808cd68:	4616      	mov	r6, r2
 808cd6a:	b0c9      	sub	sp, #292	; 0x124
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 808cd6c:	a802      	add	r0, sp, #8
 808cd6e:	f7ff feeb 	bl	808cb48 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808cd72:	f104 0308 	add.w	r3, r4, #8
 808cd76:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 808cd78:	4632      	mov	r2, r6
 808cd7a:	4629      	mov	r1, r5
 808cd7c:	a802      	add	r0, sp, #8
 808cd7e:	f7ff fef3 	bl	808cb68 <mbedtls_aes_setkey_enc>
 808cd82:	4680      	mov	r8, r0
 808cd84:	2800      	cmp	r0, #0
 808cd86:	d14b      	bne.n	808ce20 <mbedtls_aes_setkey_dec+0xc0>
        goto exit;

    ctx->nr = cty.nr;
 808cd88:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808cd8a:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 808cd8c:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808cd8e:	010a      	lsls	r2, r1, #4
 808cd90:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
 808cd92:	5882      	ldr	r2, [r0, r2]
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808cd94:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 808ce38 <mbedtls_aes_setkey_dec+0xd8>
    }
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
 808cd98:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 808cd9a:	685a      	ldr	r2, [r3, #4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808cd9c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 808ce3c <mbedtls_aes_setkey_dec+0xdc>
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
 808cda0:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 808cda2:	689a      	ldr	r2, [r3, #8]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808cda4:	f8df a098 	ldr.w	sl, [pc, #152]	; 808ce40 <mbedtls_aes_setkey_dec+0xe0>

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 808cda8:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 808cdaa:	68d8      	ldr	r0, [r3, #12]
 808cdac:	f104 0218 	add.w	r2, r4, #24
 808cdb0:	6160      	str	r0, [r4, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808cdb2:	4c1f      	ldr	r4, [pc, #124]	; (808ce30 <mbedtls_aes_setkey_dec+0xd0>)
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808cdb4:	3901      	subs	r1, #1
 808cdb6:	3b10      	subs	r3, #16
 808cdb8:	2900      	cmp	r1, #0
 808cdba:	dd29      	ble.n	808ce10 <mbedtls_aes_setkey_dec+0xb0>
 808cdbc:	1f1d      	subs	r5, r3, #4
 808cdbe:	f1a2 0e04 	sub.w	lr, r2, #4
 808cdc2:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808cdc6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 808cdca:	b2c6      	uxtb	r6, r0
 808cdcc:	5da7      	ldrb	r7, [r4, r6]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808cdce:	0e06      	lsrs	r6, r0, #24
 808cdd0:	5da6      	ldrb	r6, [r4, r6]
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808cdd2:	45ab      	cmp	fp, r5
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808cdd4:	9601      	str	r6, [sp, #4]
 808cdd6:	4e17      	ldr	r6, [pc, #92]	; (808ce34 <mbedtls_aes_setkey_dec+0xd4>)
 808cdd8:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808cddc:	9e01      	ldr	r6, [sp, #4]
 808cdde:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 808cde2:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808cde6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 808cdea:	5da6      	ldrb	r6, [r4, r6]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808cdec:	f3c0 4007 	ubfx	r0, r0, #16, #8
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808cdf0:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808cdf4:	5c20      	ldrb	r0, [r4, r0]
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808cdf6:	ea86 0607 	eor.w	r6, r6, r7
 808cdfa:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
 808cdfe:	ea86 0607 	eor.w	r6, r6, r7
 808ce02:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808ce06:	d1de      	bne.n	808cdc6 <mbedtls_aes_setkey_dec+0x66>
 808ce08:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808ce0a:	3901      	subs	r1, #1
 808ce0c:	3b10      	subs	r3, #16
 808ce0e:	e7d3      	b.n	808cdb8 <mbedtls_aes_setkey_dec+0x58>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 808ce10:	6819      	ldr	r1, [r3, #0]
 808ce12:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 808ce14:	6859      	ldr	r1, [r3, #4]
 808ce16:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 808ce18:	6899      	ldr	r1, [r3, #8]
 808ce1a:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 808ce1c:	68db      	ldr	r3, [r3, #12]
 808ce1e:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 808ce20:	a802      	add	r0, sp, #8
 808ce22:	f7ff fe96 	bl	808cb52 <mbedtls_aes_free>

    return( ret );
}
 808ce26:	4640      	mov	r0, r8
 808ce28:	b049      	add	sp, #292	; 0x124
 808ce2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ce2e:	bf00      	nop
 808ce30:	20002070 	.word	0x20002070
 808ce34:	20002570 	.word	0x20002570
 808ce38:	20002170 	.word	0x20002170
 808ce3c:	20002970 	.word	0x20002970
 808ce40:	20002d70 	.word	0x20002d70

0808ce44 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808ce48:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808ce4a:	680d      	ldr	r5, [r1, #0]
 808ce4c:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ce4e:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808ce50:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808ce54:	684d      	ldr	r5, [r1, #4]
 808ce56:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808ce58:	688e      	ldr	r6, [r1, #8]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808ce5a:	406c      	eors	r4, r5
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808ce5c:	689d      	ldr	r5, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ce5e:	1040      	asrs	r0, r0, #1
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808ce60:	b085      	sub	sp, #20
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ce62:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808ce64:	4075      	eors	r5, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808ce66:	68ce      	ldr	r6, [r1, #12]
 808ce68:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ce6a:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808ce6c:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808ce70:	4071      	eors	r1, r6
 808ce72:	f8df e364 	ldr.w	lr, [pc, #868]	; 808d1d8 <mbedtls_internal_aes_encrypt+0x394>
 808ce76:	4ed4      	ldr	r6, [pc, #848]	; (808d1c8 <mbedtls_internal_aes_encrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808ce78:	f8df a354 	ldr.w	sl, [pc, #852]	; 808d1d0 <mbedtls_internal_aes_encrypt+0x38c>
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808ce7c:	9002      	str	r0, [sp, #8]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ce7e:	9801      	ldr	r0, [sp, #4]
 808ce80:	461f      	mov	r7, r3
 808ce82:	2800      	cmp	r0, #0
 808ce84:	ea4f 6011 	mov.w	r0, r1, lsr #24
 808ce88:	f103 0320 	add.w	r3, r3, #32
 808ce8c:	f8df 8348 	ldr.w	r8, [pc, #840]	; 808d1d8 <mbedtls_internal_aes_encrypt+0x394>
 808ce90:	fa5f f98b 	uxtb.w	r9, fp
 808ce94:	f8df c330 	ldr.w	ip, [pc, #816]	; 808d1c8 <mbedtls_internal_aes_encrypt+0x384>
 808ce98:	9003      	str	r0, [sp, #12]
 808ce9a:	f340 80be 	ble.w	808d01a <mbedtls_internal_aes_encrypt+0x1d6>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808ce9e:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 808cea2:	f85e 8029 	ldr.w	r8, [lr, r9, lsl #2]
 808cea6:	48c9      	ldr	r0, [pc, #804]	; (808d1cc <mbedtls_internal_aes_encrypt+0x388>)
 808cea8:	ea88 0807 	eor.w	r8, r8, r7
 808ceac:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808ceb0:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 808ceb4:	ea88 0807 	eor.w	r8, r8, r7
 808ceb8:	f3c4 2707 	ubfx	r7, r4, #8, #8
 808cebc:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 808cec0:	ea88 0707 	eor.w	r7, r8, r7
 808cec4:	f85a 802c 	ldr.w	r8, [sl, ip, lsl #2]
 808cec8:	fa5f fc84 	uxtb.w	ip, r4
 808cecc:	ea87 0808 	eor.w	r8, r7, r8
 808ced0:	ea4f 671b 	mov.w	r7, fp, lsr #24
 808ced4:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808ced8:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808cedc:	f3c5 2c07 	ubfx	ip, r5, #8, #8
 808cee0:	ea89 0907 	eor.w	r9, r9, r7
 808cee4:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808cee8:	ea89 0707 	eor.w	r7, r9, r7
 808ceec:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808cef0:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808cef4:	ea87 0709 	eor.w	r7, r7, r9
 808cef8:	f85a 902c 	ldr.w	r9, [sl, ip, lsl #2]
 808cefc:	fa5f fc85 	uxtb.w	ip, r5
 808cf00:	ea87 0909 	eor.w	r9, r7, r9
 808cf04:	0e27      	lsrs	r7, r4, #24
 808cf06:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808cf0a:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808cf0e:	0e2d      	lsrs	r5, r5, #24
 808cf10:	ea8c 0c07 	eor.w	ip, ip, r7
 808cf14:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808cf18:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 808cf1c:	ea8c 0707 	eor.w	r7, ip, r7
 808cf20:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 808cf24:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808cf28:	b2c9      	uxtb	r1, r1
 808cf2a:	ea87 070c 	eor.w	r7, r7, ip
 808cf2e:	f3cb 4c07 	ubfx	ip, fp, #16, #8
 808cf32:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 808cf36:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808cf3a:	ea87 070c 	eor.w	r7, r7, ip
 808cf3e:	ea81 0c05 	eor.w	ip, r1, r5
 808cf42:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808cf46:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808cf4a:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808cf4e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808cf52:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 808cf56:	ea8c 0101 	eor.w	r1, ip, r1
 808cf5a:	4069      	eors	r1, r5
 808cf5c:	ea81 0c04 	eor.w	ip, r1, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808cf60:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808cf64:	fa5f f488 	uxtb.w	r4, r8
 808cf68:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808cf6c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808cf70:	b2fd      	uxtb	r5, r7
 808cf72:	4061      	eors	r1, r4
 808cf74:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808cf78:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808cf7c:	404c      	eors	r4, r1
 808cf7e:	f3c9 2107 	ubfx	r1, r9, #8, #8
 808cf82:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808cf86:	404c      	eors	r4, r1
 808cf88:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808cf8c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808cf90:	ea84 0b01 	eor.w	fp, r4, r1
 808cf94:	fa5f f489 	uxtb.w	r4, r9
 808cf98:	ea4f 6118 	mov.w	r1, r8, lsr #24
 808cf9c:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808cfa0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808cfa4:	4061      	eors	r1, r4
 808cfa6:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 808cfaa:	404c      	eors	r4, r1
 808cfac:	f3c7 2107 	ubfx	r1, r7, #8, #8
 808cfb0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808cfb4:	0e3f      	lsrs	r7, r7, #24
 808cfb6:	404c      	eors	r4, r1
 808cfb8:	f3cc 4107 	ubfx	r1, ip, #16, #8
 808cfbc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808cfc0:	404c      	eors	r4, r1
 808cfc2:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808cfc6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808cfca:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808cfce:	404d      	eors	r5, r1
 808cfd0:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808cfd4:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808cfd8:	4069      	eors	r1, r5
 808cfda:	f3cc 2507 	ubfx	r5, ip, #8, #8
 808cfde:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808cfe2:	fa5f fc8c 	uxtb.w	ip, ip
 808cfe6:	4069      	eors	r1, r5
 808cfe8:	f3c8 4507 	ubfx	r5, r8, #16, #8
 808cfec:	f85a 5025 	ldr.w	r5, [sl, r5, lsl #2]
 808cff0:	f3c8 2807 	ubfx	r8, r8, #8, #8
 808cff4:	404d      	eors	r5, r1
 808cff6:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808cffa:	404f      	eors	r7, r1
 808cffc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808d000:	4079      	eors	r1, r7
 808d002:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d006:	9801      	ldr	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d008:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d00a:	3801      	subs	r0, #1
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d00c:	f85a 7029 	ldr.w	r7, [sl, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d010:	9001      	str	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d012:	6818      	ldr	r0, [r3, #0]
 808d014:	4079      	eors	r1, r7
 808d016:	9002      	str	r0, [sp, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d018:	e731      	b.n	808ce7e <mbedtls_internal_aes_encrypt+0x3a>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d01a:	0e0b      	lsrs	r3, r1, #24
 808d01c:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 808d020:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808d024:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 808d1cc <mbedtls_internal_aes_encrypt+0x388>
 808d028:	4043      	eors	r3, r0
 808d02a:	9802      	ldr	r0, [sp, #8]
 808d02c:	4e68      	ldr	r6, [pc, #416]	; (808d1d0 <mbedtls_internal_aes_encrypt+0x38c>)
 808d02e:	ea83 0900 	eor.w	r9, r3, r0
 808d032:	f3c4 2307 	ubfx	r3, r4, #8, #8
 808d036:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 808d03a:	b2e0      	uxtb	r0, r4
 808d03c:	ea89 0903 	eor.w	r9, r9, r3
 808d040:	f3c5 4307 	ubfx	r3, r5, #16, #8
 808d044:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808d048:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808d04c:	ea89 0903 	eor.w	r9, r9, r3
 808d050:	ea4f 631b 	mov.w	r3, fp, lsr #24
 808d054:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808d058:	fa5f fa85 	uxtb.w	sl, r5
 808d05c:	4058      	eors	r0, r3
 808d05e:	687b      	ldr	r3, [r7, #4]
 808d060:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 808d064:	4043      	eors	r3, r0
 808d066:	f3c5 2007 	ubfx	r0, r5, #8, #8
 808d06a:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 808d06e:	0e2d      	lsrs	r5, r5, #24
 808d070:	4043      	eors	r3, r0
 808d072:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808d076:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808d07a:	4043      	eors	r3, r0
 808d07c:	0e20      	lsrs	r0, r4, #24
 808d07e:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808d082:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808d086:	ea8a 0a00 	eor.w	sl, sl, r0
 808d08a:	68b8      	ldr	r0, [r7, #8]
 808d08c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808d090:	ea8a 0000 	eor.w	r0, sl, r0
 808d094:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 808d098:	b2c9      	uxtb	r1, r1
 808d09a:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808d09e:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 808d0a2:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 808d0a6:	ea88 0501 	eor.w	r5, r8, r1
 808d0aa:	68f9      	ldr	r1, [r7, #12]
 808d0ac:	ea80 000a 	eor.w	r0, r0, sl
 808d0b0:	4069      	eors	r1, r5
 808d0b2:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808d0b6:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808d0ba:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 808d0be:	4069      	eors	r1, r5
 808d0c0:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 808d0c2:	4c44      	ldr	r4, [pc, #272]	; (808d1d4 <mbedtls_internal_aes_encrypt+0x390>)
 808d0c4:	fa5f f589 	uxtb.w	r5, r9
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d0c8:	f814 e005 	ldrb.w	lr, [r4, r5]
 808d0cc:	693d      	ldr	r5, [r7, #16]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d0ce:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d0d2:	0e0e      	lsrs	r6, r1, #24
 808d0d4:	ea8e 0505 	eor.w	r5, lr, r5
 808d0d8:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808d0dc:	f3c3 2607 	ubfx	r6, r3, #8, #8
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d0e0:	ea80 000a 	eor.w	r0, r0, sl

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d0e4:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808d0e8:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808d0ec:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d0f0:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808d0f4:	f814 e006 	ldrb.w	lr, [r4, r6]
 808d0f8:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 808d0fc:	b2dd      	uxtb	r5, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d0fe:	5d66      	ldrb	r6, [r4, r5]
 808d100:	697d      	ldr	r5, [r7, #20]
 808d102:	4075      	eors	r5, r6
 808d104:	ea4f 6619 	mov.w	r6, r9, lsr #24
 808d108:	5da6      	ldrb	r6, [r4, r6]
 808d10a:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808d10e:	f3c0 2607 	ubfx	r6, r0, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d112:	5da6      	ldrb	r6, [r4, r6]
 808d114:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808d118:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d11c:	5da6      	ldrb	r6, [r4, r6]
 808d11e:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 808d122:	b2c5      	uxtb	r5, r0
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d124:	f814 c005 	ldrb.w	ip, [r4, r5]
 808d128:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d12a:	0e00      	lsrs	r0, r0, #24

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d12c:	ea8c 0505 	eor.w	r5, ip, r5
 808d130:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 808d134:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d138:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d13a:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808d13e:	f3c1 2c07 	ubfx	ip, r1, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d142:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 808d146:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d148:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808d14c:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d150:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808d154:	f3c9 2907 	ubfx	r9, r9, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d158:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d15c:	f814 c001 	ldrb.w	ip, [r4, r1]
 808d160:	69f9      	ldr	r1, [r7, #28]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808d162:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d166:	ea8c 0101 	eor.w	r1, ip, r1
 808d16a:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
 808d16e:	f814 0009 	ldrb.w	r0, [r4, r9]
 808d172:	5ce3      	ldrb	r3, [r4, r3]
 808d174:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808d178:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808d17c:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808d180:	7051      	strb	r1, [r2, #1]
 808d182:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808d186:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808d188:	0a31      	lsrs	r1, r6, #8
 808d18a:	7151      	strb	r1, [r2, #5]
 808d18c:	0c31      	lsrs	r1, r6, #16
 808d18e:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808d190:	0a29      	lsrs	r1, r5, #8
 808d192:	7251      	strb	r1, [r2, #9]
 808d194:	0c29      	lsrs	r1, r5, #16
 808d196:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808d198:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d19a:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808d19e:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d1a0:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808d1a4:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808d1a6:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808d1a8:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808d1aa:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808d1ac:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808d1ae:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808d1b0:	0c19      	lsrs	r1, r3, #16
 808d1b2:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d1b4:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808d1b8:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808d1ba:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808d1bc:	7391      	strb	r1, [r2, #14]
 808d1be:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808d1c0:	b005      	add	sp, #20
 808d1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d1c6:	bf00      	nop
 808d1c8:	20001b70 	.word	0x20001b70
 808d1cc:	20001370 	.word	0x20001370
 808d1d0:	20001770 	.word	0x20001770
 808d1d4:	20002070 	.word	0x20002070
 808d1d8:	20000f70 	.word	0x20000f70

0808d1dc <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808d1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808d1e0:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808d1e2:	680d      	ldr	r5, [r1, #0]
 808d1e4:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d1e6:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808d1e8:	ea85 0a04 	eor.w	sl, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808d1ec:	684d      	ldr	r5, [r1, #4]
 808d1ee:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d1f0:	1040      	asrs	r0, r0, #1
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808d1f2:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808d1f6:	688d      	ldr	r5, [r1, #8]
 808d1f8:	689c      	ldr	r4, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d1fa:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808d1fc:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d1fe:	68cd      	ldr	r5, [r1, #12]
 808d200:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d202:	9000      	str	r0, [sp, #0]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d204:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808d208:	4069      	eors	r1, r5
 808d20a:	f8df e364 	ldr.w	lr, [pc, #868]	; 808d570 <mbedtls_internal_aes_decrypt+0x394>
 808d20e:	4ed4      	ldr	r6, [pc, #848]	; (808d560 <mbedtls_internal_aes_decrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d210:	4dd4      	ldr	r5, [pc, #848]	; (808d564 <mbedtls_internal_aes_decrypt+0x388>)
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d212:	9001      	str	r0, [sp, #4]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d214:	9800      	ldr	r0, [sp, #0]
 808d216:	461f      	mov	r7, r3
 808d218:	2800      	cmp	r0, #0
 808d21a:	f103 0320 	add.w	r3, r3, #32
 808d21e:	f8df 8350 	ldr.w	r8, [pc, #848]	; 808d570 <mbedtls_internal_aes_decrypt+0x394>
 808d222:	fa5f f08a 	uxtb.w	r0, sl
 808d226:	f8df c338 	ldr.w	ip, [pc, #824]	; 808d560 <mbedtls_internal_aes_decrypt+0x384>
 808d22a:	ea4f 691b 	mov.w	r9, fp, lsr #24
 808d22e:	f340 80c1 	ble.w	808d3b4 <mbedtls_internal_aes_decrypt+0x1d8>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d232:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 808d236:	f85e 8020 	ldr.w	r8, [lr, r0, lsl #2]
 808d23a:	48cb      	ldr	r0, [pc, #812]	; (808d568 <mbedtls_internal_aes_decrypt+0x38c>)
 808d23c:	ea88 0807 	eor.w	r8, r8, r7
 808d240:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808d244:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 808d248:	ea88 0807 	eor.w	r8, r8, r7
 808d24c:	f3c1 2707 	ubfx	r7, r1, #8, #8
 808d250:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808d254:	ea88 0707 	eor.w	r7, r8, r7
 808d258:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 808d25c:	fa5f fc8b 	uxtb.w	ip, fp
 808d260:	ea87 0808 	eor.w	r8, r7, r8
 808d264:	0e27      	lsrs	r7, r4, #24
 808d266:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808d26a:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d26e:	f3ca 2c07 	ubfx	ip, sl, #8, #8
 808d272:	ea89 0907 	eor.w	r9, r9, r7
 808d276:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808d27a:	ea89 0707 	eor.w	r7, r9, r7
 808d27e:	f855 902c 	ldr.w	r9, [r5, ip, lsl #2]
 808d282:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808d286:	ea87 0709 	eor.w	r7, r7, r9
 808d28a:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808d28e:	fa5f fc84 	uxtb.w	ip, r4
 808d292:	ea87 0909 	eor.w	r9, r7, r9
 808d296:	0e0f      	lsrs	r7, r1, #24
 808d298:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d29c:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808d2a0:	b2c9      	uxtb	r1, r1
 808d2a2:	ea8c 0c07 	eor.w	ip, ip, r7
 808d2a6:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808d2aa:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808d2ae:	ea8c 0707 	eor.w	r7, ip, r7
 808d2b2:	f3cb 2c07 	ubfx	ip, fp, #8, #8
 808d2b6:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 808d2ba:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808d2be:	ea87 070c 	eor.w	r7, r7, ip
 808d2c2:	f3ca 4c07 	ubfx	ip, sl, #16, #8
 808d2c6:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808d2ca:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 808d2ce:	ea87 070c 	eor.w	r7, r7, ip
 808d2d2:	f856 c02a 	ldr.w	ip, [r6, sl, lsl #2]
 808d2d6:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808d2da:	ea81 0c0c 	eor.w	ip, r1, ip
 808d2de:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808d2e2:	ea8c 0101 	eor.w	r1, ip, r1
 808d2e6:	4061      	eors	r1, r4
 808d2e8:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808d2ec:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808d2f0:	ea81 0c04 	eor.w	ip, r1, r4
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d2f4:	fa5f f488 	uxtb.w	r4, r8
 808d2f8:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808d2fc:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d300:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d304:	4061      	eors	r1, r4
 808d306:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808d30a:	404c      	eors	r4, r1
 808d30c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 808d310:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 808d314:	404c      	eors	r4, r1
 808d316:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808d31a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808d31e:	ea84 0a01 	eor.w	sl, r4, r1
 808d322:	fa5f f489 	uxtb.w	r4, r9
 808d326:	0e39      	lsrs	r1, r7, #24
 808d328:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d32c:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d330:	404c      	eors	r4, r1
 808d332:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 808d336:	4061      	eors	r1, r4
 808d338:	f3c8 2407 	ubfx	r4, r8, #8, #8
 808d33c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808d340:	4061      	eors	r1, r4
 808d342:	f3cc 4407 	ubfx	r4, ip, #16, #8
 808d346:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808d34a:	ea81 0b04 	eor.w	fp, r1, r4
 808d34e:	b2fc      	uxtb	r4, r7
 808d350:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808d354:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d358:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d35c:	fa5f fc8c 	uxtb.w	ip, ip
 808d360:	404c      	eors	r4, r1
 808d362:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808d366:	f3c7 2707 	ubfx	r7, r7, #8, #8
 808d36a:	4061      	eors	r1, r4
 808d36c:	f3c9 2407 	ubfx	r4, r9, #8, #8
 808d370:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808d374:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808d378:	4061      	eors	r1, r4
 808d37a:	f3c8 4407 	ubfx	r4, r8, #16, #8
 808d37e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808d382:	ea4f 6818 	mov.w	r8, r8, lsr #24
 808d386:	404c      	eors	r4, r1
 808d388:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808d38c:	f856 c028 	ldr.w	ip, [r6, r8, lsl #2]
 808d390:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808d394:	ea81 0c0c 	eor.w	ip, r1, ip
 808d398:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808d39c:	ea8c 0101 	eor.w	r1, ip, r1
 808d3a0:	4079      	eors	r1, r7
 808d3a2:	f850 7029 	ldr.w	r7, [r0, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d3a6:	9800      	ldr	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d3a8:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d3aa:	3801      	subs	r0, #1
 808d3ac:	9000      	str	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d3ae:	6818      	ldr	r0, [r3, #0]
 808d3b0:	9001      	str	r0, [sp, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d3b2:	e72f      	b.n	808d214 <mbedtls_internal_aes_decrypt+0x38>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d3b4:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808d3b8:	f85c 3029 	ldr.w	r3, [ip, r9, lsl #2]
 808d3bc:	4e69      	ldr	r6, [pc, #420]	; (808d564 <mbedtls_internal_aes_decrypt+0x388>)
 808d3be:	4043      	eors	r3, r0
 808d3c0:	9801      	ldr	r0, [sp, #4]
 808d3c2:	4d69      	ldr	r5, [pc, #420]	; (808d568 <mbedtls_internal_aes_decrypt+0x38c>)
 808d3c4:	ea83 0900 	eor.w	r9, r3, r0
 808d3c8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 808d3cc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808d3d0:	fa5f f08b 	uxtb.w	r0, fp
 808d3d4:	ea89 0903 	eor.w	r9, r9, r3
 808d3d8:	f3c4 4307 	ubfx	r3, r4, #16, #8
 808d3dc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808d3e0:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808d3e4:	ea89 0903 	eor.w	r9, r9, r3
 808d3e8:	0e23      	lsrs	r3, r4, #24
 808d3ea:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808d3ee:	fa5f fe84 	uxtb.w	lr, r4
 808d3f2:	4058      	eors	r0, r3
 808d3f4:	687b      	ldr	r3, [r7, #4]
 808d3f6:	f858 e02e 	ldr.w	lr, [r8, lr, lsl #2]
 808d3fa:	4043      	eors	r3, r0
 808d3fc:	f3ca 2007 	ubfx	r0, sl, #8, #8
 808d400:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808d404:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808d408:	4043      	eors	r3, r0
 808d40a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808d40e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 808d412:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808d416:	4043      	eors	r3, r0
 808d418:	0e08      	lsrs	r0, r1, #24
 808d41a:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808d41e:	b2c9      	uxtb	r1, r1
 808d420:	ea8e 0e00 	eor.w	lr, lr, r0
 808d424:	68b8      	ldr	r0, [r7, #8]
 808d426:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808d42a:	ea8e 0000 	eor.w	r0, lr, r0
 808d42e:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 808d432:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d436:	0e1e      	lsrs	r6, r3, #24
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d438:	ea80 000e 	eor.w	r0, r0, lr
 808d43c:	f3ca 4e07 	ubfx	lr, sl, #16, #8
 808d440:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 808d444:	ea80 000e 	eor.w	r0, r0, lr
 808d448:	ea4f 6e1a 	mov.w	lr, sl, lsr #24
 808d44c:	f85c 102e 	ldr.w	r1, [ip, lr, lsl #2]
 808d450:	ea88 0e01 	eor.w	lr, r8, r1
 808d454:	68f9      	ldr	r1, [r7, #12]
 808d456:	ea8e 0101 	eor.w	r1, lr, r1
 808d45a:	4061      	eors	r1, r4
 808d45c:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808d460:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808d464:	fa5f f589 	uxtb.w	r5, r9
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d468:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808d46a:	4c40      	ldr	r4, [pc, #256]	; (808d56c <mbedtls_internal_aes_decrypt+0x390>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d46c:	f814 e005 	ldrb.w	lr, [r4, r5]
 808d470:	693d      	ldr	r5, [r7, #16]
 808d472:	ea8e 0505 	eor.w	r5, lr, r5
 808d476:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808d47a:	f3c1 2607 	ubfx	r6, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d47e:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808d482:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808d486:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d48a:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808d48e:	f814 e006 	ldrb.w	lr, [r4, r6]
 808d492:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 808d496:	b2dd      	uxtb	r5, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d498:	5d66      	ldrb	r6, [r4, r5]
 808d49a:	697d      	ldr	r5, [r7, #20]
 808d49c:	4075      	eors	r5, r6
 808d49e:	0e06      	lsrs	r6, r0, #24
 808d4a0:	5da6      	ldrb	r6, [r4, r6]
 808d4a2:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808d4a6:	f3c9 2607 	ubfx	r6, r9, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d4aa:	5da6      	ldrb	r6, [r4, r6]
 808d4ac:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808d4b0:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d4b4:	5da6      	ldrb	r6, [r4, r6]
 808d4b6:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 808d4ba:	b2c5      	uxtb	r5, r0
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d4bc:	f814 c005 	ldrb.w	ip, [r4, r5]
 808d4c0:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808d4c2:	f3c0 2007 	ubfx	r0, r0, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d4c6:	ea8c 0505 	eor.w	r5, ip, r5
 808d4ca:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 808d4ce:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 808d4d2:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d4d4:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808d4d8:	f3c3 2c07 	ubfx	ip, r3, #8, #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d4dc:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d4e0:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d4e2:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808d4e6:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d4ea:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d4ee:	ea4f 6919 	mov.w	r9, r9, lsr #24

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d4f2:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d4f6:	f814 c001 	ldrb.w	ip, [r4, r1]
 808d4fa:	69f9      	ldr	r1, [r7, #28]
 808d4fc:	f814 7009 	ldrb.w	r7, [r4, r9]
 808d500:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808d504:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d508:	5ce3      	ldrb	r3, [r4, r3]
 808d50a:	ea81 6107 	eor.w	r1, r1, r7, lsl #24
 808d50e:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808d512:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808d516:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808d51a:	7051      	strb	r1, [r2, #1]
 808d51c:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808d520:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808d522:	0a31      	lsrs	r1, r6, #8
 808d524:	7151      	strb	r1, [r2, #5]
 808d526:	0c31      	lsrs	r1, r6, #16
 808d528:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808d52a:	0a29      	lsrs	r1, r5, #8
 808d52c:	7251      	strb	r1, [r2, #9]
 808d52e:	0c29      	lsrs	r1, r5, #16
 808d530:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808d532:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d534:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808d538:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d53a:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808d53e:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808d540:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808d542:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808d544:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808d546:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808d548:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808d54a:	0c19      	lsrs	r1, r3, #16
 808d54c:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d54e:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808d552:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808d554:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808d556:	7391      	strb	r1, [r2, #14]
 808d558:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808d55a:	b003      	add	sp, #12
 808d55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d560:	20002170 	.word	0x20002170
 808d564:	20002970 	.word	0x20002970
 808d568:	20002d70 	.word	0x20002d70
 808d56c:	20001f70 	.word	0x20001f70
 808d570:	20002570 	.word	0x20002570

0808d574 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808d574:	b410      	push	{r4}
 808d576:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808d578:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808d57a:	461a      	mov	r2, r3
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808d57c:	4621      	mov	r1, r4
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808d57e:	d102      	bne.n	808d586 <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808d580:	bc10      	pop	{r4}
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808d582:	f7ff bc5f 	b.w	808ce44 <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808d586:	bc10      	pop	{r4}
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 808d588:	f7ff be28 	b.w	808d1dc <mbedtls_internal_aes_decrypt>

0808d58c <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d590:	4698      	mov	r8, r3
 808d592:	b085      	sub	sp, #20
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808d594:	0713      	lsls	r3, r2, #28
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808d596:	4681      	mov	r9, r0
 808d598:	460f      	mov	r7, r1
 808d59a:	4616      	mov	r6, r2
 808d59c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 808d59e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808d5a0:	d15a      	bne.n	808d658 <mbedtls_aes_crypt_cbc+0xcc>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 808d5a2:	bba9      	cbnz	r1, 808d610 <mbedtls_aes_crypt_cbc+0x84>
 808d5a4:	462a      	mov	r2, r5
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808d5a6:	f10d 0b10 	add.w	fp, sp, #16
 808d5aa:	1ab3      	subs	r3, r6, r2
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808d5ac:	42dd      	cmn	r5, r3
 808d5ae:	d101      	bne.n	808d5b4 <mbedtls_aes_crypt_cbc+0x28>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 808d5b0:	2000      	movs	r0, #0
 808d5b2:	e053      	b.n	808d65c <mbedtls_aes_crypt_cbc+0xd0>

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
 808d5b4:	4613      	mov	r3, r2
 808d5b6:	46ee      	mov	lr, sp
 808d5b8:	466f      	mov	r7, sp
 808d5ba:	f102 0a10 	add.w	sl, r2, #16
 808d5be:	46f4      	mov	ip, lr
 808d5c0:	6818      	ldr	r0, [r3, #0]
 808d5c2:	6859      	ldr	r1, [r3, #4]
 808d5c4:	3308      	adds	r3, #8
 808d5c6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 808d5ca:	4553      	cmp	r3, sl
 808d5cc:	46e6      	mov	lr, ip
 808d5ce:	d1f6      	bne.n	808d5be <mbedtls_aes_crypt_cbc+0x32>
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 808d5d0:	4623      	mov	r3, r4
 808d5d2:	2100      	movs	r1, #0
 808d5d4:	4648      	mov	r0, r9
 808d5d6:	f7ff ffcd 	bl	808d574 <mbedtls_aes_crypt_ecb>
 808d5da:	1e63      	subs	r3, r4, #1
 808d5dc:	f108 31ff 	add.w	r1, r8, #4294967295
 808d5e0:	f104 000f 	add.w	r0, r4, #15

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808d5e4:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808d5e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808d5ec:	4283      	cmp	r3, r0
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808d5ee:	ea8e 0202 	eor.w	r2, lr, r2
 808d5f2:	701a      	strb	r2, [r3, #0]
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808d5f4:	d1f6      	bne.n	808d5e4 <mbedtls_aes_crypt_cbc+0x58>
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808d5f6:	4642      	mov	r2, r8
 808d5f8:	463b      	mov	r3, r7
 808d5fa:	cb03      	ldmia	r3!, {r0, r1}
 808d5fc:	455b      	cmp	r3, fp
 808d5fe:	6010      	str	r0, [r2, #0]
 808d600:	6051      	str	r1, [r2, #4]
 808d602:	461f      	mov	r7, r3
 808d604:	f102 0208 	add.w	r2, r2, #8
 808d608:	d1f6      	bne.n	808d5f8 <mbedtls_aes_crypt_cbc+0x6c>

            input  += 16;
 808d60a:	4652      	mov	r2, sl
            output += 16;
 808d60c:	3410      	adds	r4, #16
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808d60e:	e7cc      	b.n	808d5aa <mbedtls_aes_crypt_cbc+0x1e>
 808d610:	1e6b      	subs	r3, r5, #1
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808d612:	2e00      	cmp	r6, #0
 808d614:	d0cc      	beq.n	808d5b0 <mbedtls_aes_crypt_cbc+0x24>
 808d616:	f108 30ff 	add.w	r0, r8, #4294967295
 808d61a:	1e61      	subs	r1, r4, #1
 808d61c:	f103 0510 	add.w	r5, r3, #16
        {
            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808d620:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808d624:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808d628:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808d62a:	ea8e 0202 	eor.w	r2, lr, r2
 808d62e:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808d632:	d1f5      	bne.n	808d620 <mbedtls_aes_crypt_cbc+0x94>
                output[i] = (unsigned char)( input[i] ^ iv[i] );

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 808d634:	4623      	mov	r3, r4
 808d636:	4622      	mov	r2, r4
 808d638:	4639      	mov	r1, r7
 808d63a:	4648      	mov	r0, r9
 808d63c:	f7ff ff9a 	bl	808d574 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 808d640:	4643      	mov	r3, r8
 808d642:	f104 0210 	add.w	r2, r4, #16
 808d646:	f854 1b04 	ldr.w	r1, [r4], #4
 808d64a:	4294      	cmp	r4, r2
 808d64c:	f843 1b04 	str.w	r1, [r3], #4
 808d650:	d1f9      	bne.n	808d646 <mbedtls_aes_crypt_cbc+0xba>

            input  += 16;
            output += 16;
            length -= 16;
 808d652:	3e10      	subs	r6, #16
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808d654:	462b      	mov	r3, r5
 808d656:	e7dc      	b.n	808d612 <mbedtls_aes_crypt_cbc+0x86>
{
    int i;
    unsigned char temp[16];

    if( length % 16 )
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 808d658:	f06f 0021 	mvn.w	r0, #33	; 0x21
            length -= 16;
        }
    }

    return( 0 );
}
 808d65c:	b005      	add	sp, #20
 808d65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d662 <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_DES_C)
#include "mbedtls/des.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808d662:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808d664:	2300      	movs	r3, #0
 808d666:	4288      	cmp	r0, r1
 808d668:	d002      	beq.n	808d670 <_ZL15mbedtls_zeroizePvj+0xe>
 808d66a:	7003      	strb	r3, [r0, #0]
 808d66c:	3001      	adds	r0, #1
 808d66e:	e7fa      	b.n	808d666 <_ZL15mbedtls_zeroizePvj+0x4>
 808d670:	4770      	bx	lr

0808d672 <_ZL18pkcs12_fill_bufferPhjPKhj>:
    return( ret );
}

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
 808d672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d676:	4606      	mov	r6, r0
 808d678:	460c      	mov	r4, r1
 808d67a:	4617      	mov	r7, r2
 808d67c:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808d67e:	b15c      	cbz	r4, 808d698 <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
 808d680:	4544      	cmp	r4, r8
 808d682:	4625      	mov	r5, r4
 808d684:	bf28      	it	cs
 808d686:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
 808d688:	4630      	mov	r0, r6
 808d68a:	462a      	mov	r2, r5
 808d68c:	4639      	mov	r1, r7
 808d68e:	f005 fd06 	bl	809309e <memcpy>
        p += use_len;
 808d692:	442e      	add	r6, r5
        data_len -= use_len;
 808d694:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808d696:	e7f2      	b.n	808d67e <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
 808d698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808d69c <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
 808d69c:	4800      	ldr	r0, [pc, #0]	; (808d6a0 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
 808d69e:	4770      	bx	lr
 808d6a0:	ffffe100 	.word	0xffffe100

0808d6a4 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808d6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808d6a8:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808d6aa:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 808d6ae:	9001      	str	r0, [sp, #4]
 808d6b0:	460f      	mov	r7, r1
 808d6b2:	4693      	mov	fp, r2
 808d6b4:	4699      	mov	r9, r3
 808d6b6:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808d6b8:	f200 80c3 	bhi.w	808d842 <mbedtls_pkcs12_derivation+0x19e>
 808d6bc:	2b40      	cmp	r3, #64	; 0x40
 808d6be:	f200 80c0 	bhi.w	808d842 <mbedtls_pkcs12_derivation+0x19e>
 808d6c2:	2d40      	cmp	r5, #64	; 0x40
 808d6c4:	f200 80bd 	bhi.w	808d842 <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
 808d6c8:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
 808d6cc:	f7fa fa1c 	bl	8087b08 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 808d6d0:	9000      	str	r0, [sp, #0]
 808d6d2:	2800      	cmp	r0, #0
 808d6d4:	f000 80b7 	beq.w	808d846 <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
 808d6d8:	a803      	add	r0, sp, #12
 808d6da:	f7fa fa21 	bl	8087b20 <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808d6de:	2200      	movs	r2, #0
 808d6e0:	9900      	ldr	r1, [sp, #0]
 808d6e2:	a803      	add	r0, sp, #12
 808d6e4:	f7fa fa42 	bl	8087b6c <mbedtls_md_setup>
 808d6e8:	2800      	cmp	r0, #0
 808d6ea:	f040 80ad 	bne.w	808d848 <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808d6ee:	9800      	ldr	r0, [sp, #0]
 808d6f0:	f7fa fb4e 	bl	8087d90 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
 808d6f4:	2820      	cmp	r0, #32
 808d6f6:	bf8c      	ite	hi
 808d6f8:	2480      	movhi	r4, #128	; 0x80
 808d6fa:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808d6fc:	4622      	mov	r2, r4
 808d6fe:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808d702:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808d704:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808d708:	a816      	add	r0, sp, #88	; 0x58
 808d70a:	f005 fcee 	bl	80930ea <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808d70e:	462b      	mov	r3, r5
 808d710:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 808d712:	4621      	mov	r1, r4
 808d714:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808d716:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808d718:	f7ff ffab 	bl	808d672 <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808d71c:	464b      	mov	r3, r9
 808d71e:	465a      	mov	r2, fp
 808d720:	4621      	mov	r1, r4
 808d722:	4628      	mov	r0, r5
 808d724:	f7ff ffa5 	bl	808d672 <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808d728:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
 808d72c:	2f00      	cmp	r7, #0
 808d72e:	d072      	beq.n	808d816 <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 808d730:	a803      	add	r0, sp, #12
 808d732:	f7fa fa3d 	bl	8087bb0 <mbedtls_md_starts>
 808d736:	4606      	mov	r6, r0
 808d738:	2800      	cmp	r0, #0
 808d73a:	d16d      	bne.n	808d818 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
 808d73c:	4622      	mov	r2, r4
 808d73e:	a916      	add	r1, sp, #88	; 0x58
 808d740:	a803      	add	r0, sp, #12
 808d742:	f7fa fa3f 	bl	8087bc4 <mbedtls_md_update>
 808d746:	4606      	mov	r6, r0
 808d748:	2800      	cmp	r0, #0
 808d74a:	d165      	bne.n	808d818 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
 808d74c:	4622      	mov	r2, r4
 808d74e:	4641      	mov	r1, r8
 808d750:	a803      	add	r0, sp, #12
 808d752:	f7fa fa37 	bl	8087bc4 <mbedtls_md_update>
 808d756:	4606      	mov	r6, r0
 808d758:	2800      	cmp	r0, #0
 808d75a:	d15d      	bne.n	808d818 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
 808d75c:	4622      	mov	r2, r4
 808d75e:	4629      	mov	r1, r5
 808d760:	a803      	add	r0, sp, #12
 808d762:	f7fa fa2f 	bl	8087bc4 <mbedtls_md_update>
 808d766:	4606      	mov	r6, r0
 808d768:	2800      	cmp	r0, #0
 808d76a:	d155      	bne.n	808d818 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
 808d76c:	a906      	add	r1, sp, #24
 808d76e:	a803      	add	r0, sp, #12
 808d770:	f7fa fa32 	bl	8087bd8 <mbedtls_md_finish>
 808d774:	4606      	mov	r6, r0
 808d776:	2800      	cmp	r0, #0
 808d778:	d14e      	bne.n	808d818 <mbedtls_pkcs12_derivation+0x174>
 808d77a:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808d77e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 808d780:	459b      	cmp	fp, r3
 808d782:	d20b      	bcs.n	808d79c <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 808d784:	ab06      	add	r3, sp, #24
 808d786:	4652      	mov	r2, sl
 808d788:	4619      	mov	r1, r3
 808d78a:	9800      	ldr	r0, [sp, #0]
 808d78c:	f7fa fa2e 	bl	8087bec <mbedtls_md>
 808d790:	4606      	mov	r6, r0
 808d792:	2800      	cmp	r0, #0
 808d794:	d140      	bne.n	808d818 <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808d796:	f10b 0b01 	add.w	fp, fp, #1
 808d79a:	e7f0      	b.n	808d77e <mbedtls_pkcs12_derivation+0xda>
 808d79c:	4557      	cmp	r7, sl
 808d79e:	46bb      	mov	fp, r7
 808d7a0:	bf28      	it	cs
 808d7a2:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
 808d7a4:	a906      	add	r1, sp, #24
 808d7a6:	465a      	mov	r2, fp
 808d7a8:	9801      	ldr	r0, [sp, #4]
 808d7aa:	f005 fc78 	bl	809309e <memcpy>
        datalen -= use_len;
        p += use_len;
 808d7ae:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
 808d7b0:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
 808d7b4:	445b      	add	r3, fp
 808d7b6:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
 808d7b8:	d02d      	beq.n	808d816 <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808d7ba:	4653      	mov	r3, sl
 808d7bc:	aa06      	add	r2, sp, #24
 808d7be:	4621      	mov	r1, r4
 808d7c0:	4648      	mov	r0, r9
 808d7c2:	f7ff ff56 	bl	808d672 <_ZL18pkcs12_fill_bufferPhjPKhj>
 808d7c6:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
 808d7ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 808d7ce:	3201      	adds	r2, #1
 808d7d0:	b2d2      	uxtb	r2, r2
 808d7d2:	701a      	strb	r2, [r3, #0]
 808d7d4:	b91a      	cbnz	r2, 808d7de <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
 808d7d6:	454b      	cmp	r3, r9
 808d7d8:	d1f7      	bne.n	808d7ca <mbedtls_pkcs12_derivation+0x126>
 808d7da:	4623      	mov	r3, r4
 808d7dc:	e001      	b.n	808d7e2 <mbedtls_pkcs12_derivation+0x13e>
 808d7de:	4623      	mov	r3, r4
 808d7e0:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
 808d7e2:	3b01      	subs	r3, #1
 808d7e4:	f818 0003 	ldrb.w	r0, [r8, r3]
 808d7e8:	f813 1009 	ldrb.w	r1, [r3, r9]
 808d7ec:	4401      	add	r1, r0
 808d7ee:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
 808d7f0:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
 808d7f4:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
 808d7f8:	2b00      	cmp	r3, #0
 808d7fa:	d1f2      	bne.n	808d7e2 <mbedtls_pkcs12_derivation+0x13e>
 808d7fc:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
 808d7fe:	3a01      	subs	r2, #1
 808d800:	5d50      	ldrb	r0, [r2, r5]
 808d802:	f812 1009 	ldrb.w	r1, [r2, r9]
 808d806:	4401      	add	r1, r0
 808d808:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
 808d80a:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
 808d80e:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
 808d810:	2a00      	cmp	r2, #0
 808d812:	d1f4      	bne.n	808d7fe <mbedtls_pkcs12_derivation+0x15a>
 808d814:	e78a      	b.n	808d72c <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
 808d816:	2600      	movs	r6, #0

exit:
    mbedtls_zeroize( salt_block, sizeof( salt_block ) );
 808d818:	2180      	movs	r1, #128	; 0x80
 808d81a:	4640      	mov	r0, r8
 808d81c:	f7ff ff21 	bl	808d662 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( pwd_block, sizeof( pwd_block ) );
 808d820:	2180      	movs	r1, #128	; 0x80
 808d822:	4628      	mov	r0, r5
 808d824:	f7ff ff1d 	bl	808d662 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_block, sizeof( hash_block ) );
 808d828:	2180      	movs	r1, #128	; 0x80
 808d82a:	a876      	add	r0, sp, #472	; 0x1d8
 808d82c:	f7ff ff19 	bl	808d662 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );
 808d830:	2140      	movs	r1, #64	; 0x40
 808d832:	a806      	add	r0, sp, #24
 808d834:	f7ff ff15 	bl	808d662 <_ZL15mbedtls_zeroizePvj>

    mbedtls_md_free( &md_ctx );
 808d838:	a803      	add	r0, sp, #12
 808d83a:	f7fa f976 	bl	8087b2a <mbedtls_md_free>

    return( ret );
 808d83e:	4630      	mov	r0, r6
 808d840:	e002      	b.n	808d848 <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808d842:	4803      	ldr	r0, [pc, #12]	; (808d850 <mbedtls_pkcs12_derivation+0x1ac>)
 808d844:	e000      	b.n	808d848 <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808d846:	4803      	ldr	r0, [pc, #12]	; (808d854 <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
 808d848:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 808d84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d850:	ffffe080 	.word	0xffffe080
 808d854:	ffffe100 	.word	0xffffe100

0808d858 <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808d858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d85c:	4604      	mov	r4, r0
 808d85e:	b0d9      	sub	sp, #356	; 0x164
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808d860:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808d862:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808d864:	468b      	mov	fp, r1
 808d866:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808d868:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808d86a:	f7f5 fcbb 	bl	80831e4 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 808d86e:	4605      	mov	r5, r0
 808d870:	2800      	cmp	r0, #0
 808d872:	f000 80ac 	beq.w	808d9ce <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808d876:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808d878:	6847      	ldr	r7, [r0, #4]
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808d87a:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808d87c:	ea4f 07d7 	mov.w	r7, r7, lsr #3

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
 808d880:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
 808d884:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808d886:	d85e      	bhi.n	808d946 <mbedtls_pkcs12_pbe+0xee>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
 808d888:	4631      	mov	r1, r6
 808d88a:	f44f 7281 	mov.w	r2, #258	; 0x102
 808d88e:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
 808d890:	9608      	str	r6, [sp, #32]
 808d892:	9609      	str	r6, [sp, #36]	; 0x24
 808d894:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
 808d896:	f005 fc28 	bl	80930ea <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
 808d89a:	6863      	ldr	r3, [r4, #4]
 808d89c:	68a6      	ldr	r6, [r4, #8]

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
 808d89e:	f104 0a08 	add.w	sl, r4, #8
    const unsigned char *end = params->p + params->len;
 808d8a2:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 808d8a4:	6823      	ldr	r3, [r4, #0]
 808d8a6:	2b30      	cmp	r3, #48	; 0x30
 808d8a8:	f040 8093 	bne.w	808d9d2 <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 808d8ac:	2304      	movs	r3, #4
 808d8ae:	aa09      	add	r2, sp, #36	; 0x24
 808d8b0:	4631      	mov	r1, r6
 808d8b2:	4650      	mov	r0, sl
 808d8b4:	f7f5 ff70 	bl	8083798 <mbedtls_asn1_get_tag>
 808d8b8:	b950      	cbnz	r0, 808d8d0 <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808d8ba:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
 808d8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808d8be:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
 808d8c0:	4413      	add	r3, r2
 808d8c2:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
 808d8c4:	aa07      	add	r2, sp, #28
 808d8c6:	4631      	mov	r1, r6
 808d8c8:	4650      	mov	r0, sl
 808d8ca:	f7f5 ff92 	bl	80837f2 <mbedtls_asn1_get_int>
 808d8ce:	b118      	cbz	r0, 808d8d8 <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
 808d8d0:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
 808d8d4:	b118      	cbz	r0, 808d8de <mbedtls_pkcs12_pbe+0x86>
 808d8d6:	e07f      	b.n	808d9d8 <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
 808d8d8:	68a3      	ldr	r3, [r4, #8]
 808d8da:	429e      	cmp	r6, r3
 808d8dc:	d17b      	bne.n	808d9d6 <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808d8de:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808d8e0:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 808d8e2:	429a      	cmp	r2, r3
 808d8e4:	d007      	beq.n	808d8f6 <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
 808d8e6:	9962      	ldr	r1, [sp, #392]	; 0x188
 808d8e8:	aa17      	add	r2, sp, #92	; 0x5c
 808d8ea:	5cc9      	ldrb	r1, [r1, r3]
 808d8ec:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 808d8f0:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808d8f2:	3301      	adds	r3, #1
 808d8f4:	e7f4      	b.n	808d8e0 <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 808d8f6:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 808d8f8:	f8cd 9008 	str.w	r9, [sp, #8]
 808d8fc:	1c5c      	adds	r4, r3, #1
 808d8fe:	9b07      	ldr	r3, [sp, #28]
 808d900:	0064      	lsls	r4, r4, #1
 808d902:	9304      	str	r3, [sp, #16]
 808d904:	2301      	movs	r3, #1
 808d906:	9303      	str	r3, [sp, #12]
 808d908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d90a:	aa17      	add	r2, sp, #92	; 0x5c
 808d90c:	9301      	str	r3, [sp, #4]
 808d90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d910:	4639      	mov	r1, r7
 808d912:	9300      	str	r3, [sp, #0]
 808d914:	a80f      	add	r0, sp, #60	; 0x3c
 808d916:	4623      	mov	r3, r4
 808d918:	f7ff fec4 	bl	808d6a4 <mbedtls_pkcs12_derivation>
 808d91c:	b9a8      	cbnz	r0, 808d94a <mbedtls_pkcs12_pbe+0xf2>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
 808d91e:	f1b8 0f00 	cmp.w	r8, #0
 808d922:	d014      	beq.n	808d94e <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
 808d924:	9b07      	ldr	r3, [sp, #28]
 808d926:	f8cd 9008 	str.w	r9, [sp, #8]
 808d92a:	9304      	str	r3, [sp, #16]
 808d92c:	2302      	movs	r3, #2
 808d92e:	9303      	str	r3, [sp, #12]
 808d930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d932:	aa17      	add	r2, sp, #92	; 0x5c
 808d934:	9301      	str	r3, [sp, #4]
 808d936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d938:	4641      	mov	r1, r8
 808d93a:	9300      	str	r3, [sp, #0]
 808d93c:	a80b      	add	r0, sp, #44	; 0x2c
 808d93e:	4623      	mov	r3, r4
 808d940:	f7ff feb0 	bl	808d6a4 <mbedtls_pkcs12_derivation>
 808d944:	e001      	b.n	808d94a <mbedtls_pkcs12_pbe+0xf2>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808d946:	4826      	ldr	r0, [pc, #152]	; (808d9e0 <mbedtls_pkcs12_pbe+0x188>)
 808d948:	e046      	b.n	808d9d8 <mbedtls_pkcs12_pbe+0x180>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
 808d94a:	2800      	cmp	r0, #0
 808d94c:	d144      	bne.n	808d9d8 <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
 808d94e:	a817      	add	r0, sp, #92	; 0x5c
 808d950:	f7f5 fc6a 	bl	8083228 <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 808d954:	4629      	mov	r1, r5
 808d956:	a817      	add	r0, sp, #92	; 0x5c
 808d958:	f7f5 fe3a 	bl	80835d0 <mbedtls_cipher_setup>
 808d95c:	4604      	mov	r4, r0
 808d95e:	bb48      	cbnz	r0, 808d9b4 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 808d960:	fa4f f38b 	sxtb.w	r3, fp
 808d964:	00fa      	lsls	r2, r7, #3
 808d966:	a90f      	add	r1, sp, #60	; 0x3c
 808d968:	a817      	add	r0, sp, #92	; 0x5c
 808d96a:	f7f5 fc73 	bl	8083254 <mbedtls_cipher_setkey>
 808d96e:	4604      	mov	r4, r0
 808d970:	bb00      	cbnz	r0, 808d9b4 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
 808d972:	68ea      	ldr	r2, [r5, #12]
 808d974:	a90b      	add	r1, sp, #44	; 0x2c
 808d976:	a817      	add	r0, sp, #92	; 0x5c
 808d978:	f7f5 fc8e 	bl	8083298 <mbedtls_cipher_set_iv>
 808d97c:	4604      	mov	r4, r0
 808d97e:	b9c8      	cbnz	r0, 808d9b4 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
 808d980:	a817      	add	r0, sp, #92	; 0x5c
 808d982:	f7f5 fca9 	bl	80832d8 <mbedtls_cipher_reset>
 808d986:	4604      	mov	r4, r0
 808d988:	b9a0      	cbnz	r0, 808d9b4 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
 808d98a:	ad06      	add	r5, sp, #24
 808d98c:	9500      	str	r5, [sp, #0]
 808d98e:	a964      	add	r1, sp, #400	; 0x190
 808d990:	c90e      	ldmia	r1, {r1, r2, r3}
 808d992:	a817      	add	r0, sp, #92	; 0x5c
 808d994:	f7f5 fcac 	bl	80832f0 <mbedtls_cipher_update>
 808d998:	4604      	mov	r4, r0
 808d99a:	b958      	cbnz	r0, 808d9b4 <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
 808d99c:	6829      	ldr	r1, [r5, #0]
 808d99e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 808d9a0:	462a      	mov	r2, r5
 808d9a2:	4419      	add	r1, r3
 808d9a4:	a817      	add	r0, sp, #92	; 0x5c
 808d9a6:	f7f5 fd6d 	bl	8083484 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
 808d9aa:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
 808d9ae:	2800      	cmp	r0, #0
 808d9b0:	bf08      	it	eq
 808d9b2:	2400      	moveq	r4, #0

exit:
    mbedtls_zeroize( key, sizeof( key ) );
 808d9b4:	2120      	movs	r1, #32
 808d9b6:	a80f      	add	r0, sp, #60	; 0x3c
 808d9b8:	f7ff fe53 	bl	808d662 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( iv,  sizeof( iv  ) );
 808d9bc:	2110      	movs	r1, #16
 808d9be:	a80b      	add	r0, sp, #44	; 0x2c
 808d9c0:	f7ff fe4f 	bl	808d662 <_ZL15mbedtls_zeroizePvj>
    mbedtls_cipher_free( &cipher_ctx );
 808d9c4:	a817      	add	r0, sp, #92	; 0x5c
 808d9c6:	f7f5 fc33 	bl	8083230 <mbedtls_cipher_free>

    return( ret );
 808d9ca:	4620      	mov	r0, r4
 808d9cc:	e004      	b.n	808d9d8 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808d9ce:	4805      	ldr	r0, [pc, #20]	; (808d9e4 <mbedtls_pkcs12_pbe+0x18c>)
 808d9d0:	e002      	b.n	808d9d8 <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808d9d2:	4805      	ldr	r0, [pc, #20]	; (808d9e8 <mbedtls_pkcs12_pbe+0x190>)
 808d9d4:	e000      	b.n	808d9d8 <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808d9d6:	4805      	ldr	r0, [pc, #20]	; (808d9ec <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 808d9d8:	b059      	add	sp, #356	; 0x164
 808d9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d9de:	bf00      	nop
 808d9e0:	ffffe080 	.word	0xffffe080
 808d9e4:	ffffe100 	.word	0xffffe100
 808d9e8:	ffffe11e 	.word	0xffffe11e
 808d9ec:	ffffe11a 	.word	0xffffe11a

0808d9f0 <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 808d9f0:	22d8      	movs	r2, #216	; 0xd8
 808d9f2:	2100      	movs	r1, #0
 808d9f4:	f005 bb79 	b.w	80930ea <memset>

0808d9f8 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 808d9f8:	b138      	cbz	r0, 808da0a <mbedtls_sha512_free+0x12>
 808d9fa:	f100 02d8 	add.w	r2, r0, #216	; 0xd8

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808d9fe:	2300      	movs	r3, #0
 808da00:	4290      	cmp	r0, r2
 808da02:	d002      	beq.n	808da0a <mbedtls_sha512_free+0x12>
 808da04:	7003      	strb	r3, [r0, #0]
 808da06:	3001      	adds	r0, #1
 808da08:	e7fa      	b.n	808da00 <mbedtls_sha512_free+0x8>
 808da0a:	4770      	bx	lr

0808da0c <mbedtls_sha512_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 808da0c:	b508      	push	{r3, lr}
    *dst = *src;
 808da0e:	22d8      	movs	r2, #216	; 0xd8
 808da10:	f005 fb45 	bl	809309e <memcpy>
 808da14:	bd08      	pop	{r3, pc}
	...

0808da18 <mbedtls_sha512_starts_ret>:
/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 808da18:	2200      	movs	r2, #0
 808da1a:	2300      	movs	r3, #0
 808da1c:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 808da20:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 808da24:	bb31      	cbnz	r1, 808da74 <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 808da26:	a32a      	add	r3, pc, #168	; (adr r3, 808dad0 <mbedtls_sha512_starts_ret+0xb8>)
 808da28:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da2c:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 808da30:	a329      	add	r3, pc, #164	; (adr r3, 808dad8 <mbedtls_sha512_starts_ret+0xc0>)
 808da32:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da36:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 808da3a:	a329      	add	r3, pc, #164	; (adr r3, 808dae0 <mbedtls_sha512_starts_ret+0xc8>)
 808da3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da40:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 808da44:	a328      	add	r3, pc, #160	; (adr r3, 808dae8 <mbedtls_sha512_starts_ret+0xd0>)
 808da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da4a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 808da4e:	a328      	add	r3, pc, #160	; (adr r3, 808daf0 <mbedtls_sha512_starts_ret+0xd8>)
 808da50:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da54:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 808da58:	a327      	add	r3, pc, #156	; (adr r3, 808daf8 <mbedtls_sha512_starts_ret+0xe0>)
 808da5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da5e:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 808da62:	a327      	add	r3, pc, #156	; (adr r3, 808db00 <mbedtls_sha512_starts_ret+0xe8>)
 808da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da68:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 808da6c:	a326      	add	r3, pc, #152	; (adr r3, 808db08 <mbedtls_sha512_starts_ret+0xf0>)
 808da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da72:	e025      	b.n	808dac0 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 808da74:	a326      	add	r3, pc, #152	; (adr r3, 808db10 <mbedtls_sha512_starts_ret+0xf8>)
 808da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da7a:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 808da7e:	a326      	add	r3, pc, #152	; (adr r3, 808db18 <mbedtls_sha512_starts_ret+0x100>)
 808da80:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da84:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 808da88:	a325      	add	r3, pc, #148	; (adr r3, 808db20 <mbedtls_sha512_starts_ret+0x108>)
 808da8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da8e:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 808da92:	a325      	add	r3, pc, #148	; (adr r3, 808db28 <mbedtls_sha512_starts_ret+0x110>)
 808da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 808da98:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 808da9c:	a324      	add	r3, pc, #144	; (adr r3, 808db30 <mbedtls_sha512_starts_ret+0x118>)
 808da9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808daa2:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 808daa6:	a324      	add	r3, pc, #144	; (adr r3, 808db38 <mbedtls_sha512_starts_ret+0x120>)
 808daa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808daac:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 808dab0:	a323      	add	r3, pc, #140	; (adr r3, 808db40 <mbedtls_sha512_starts_ret+0x128>)
 808dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808dab6:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 808daba:	a323      	add	r3, pc, #140	; (adr r3, 808db48 <mbedtls_sha512_starts_ret+0x130>)
 808dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 808dac0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 808dac4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 808dac8:	2000      	movs	r0, #0
 808daca:	4770      	bx	lr
 808dacc:	f3af 8000 	nop.w
 808dad0:	f3bcc908 	.word	0xf3bcc908
 808dad4:	6a09e667 	.word	0x6a09e667
 808dad8:	84caa73b 	.word	0x84caa73b
 808dadc:	bb67ae85 	.word	0xbb67ae85
 808dae0:	fe94f82b 	.word	0xfe94f82b
 808dae4:	3c6ef372 	.word	0x3c6ef372
 808dae8:	5f1d36f1 	.word	0x5f1d36f1
 808daec:	a54ff53a 	.word	0xa54ff53a
 808daf0:	ade682d1 	.word	0xade682d1
 808daf4:	510e527f 	.word	0x510e527f
 808daf8:	2b3e6c1f 	.word	0x2b3e6c1f
 808dafc:	9b05688c 	.word	0x9b05688c
 808db00:	fb41bd6b 	.word	0xfb41bd6b
 808db04:	1f83d9ab 	.word	0x1f83d9ab
 808db08:	137e2179 	.word	0x137e2179
 808db0c:	5be0cd19 	.word	0x5be0cd19
 808db10:	c1059ed8 	.word	0xc1059ed8
 808db14:	cbbb9d5d 	.word	0xcbbb9d5d
 808db18:	367cd507 	.word	0x367cd507
 808db1c:	629a292a 	.word	0x629a292a
 808db20:	3070dd17 	.word	0x3070dd17
 808db24:	9159015a 	.word	0x9159015a
 808db28:	f70e5939 	.word	0xf70e5939
 808db2c:	152fecd8 	.word	0x152fecd8
 808db30:	ffc00b31 	.word	0xffc00b31
 808db34:	67332667 	.word	0x67332667
 808db38:	68581511 	.word	0x68581511
 808db3c:	8eb44a87 	.word	0x8eb44a87
 808db40:	64f98fa7 	.word	0x64f98fa7
 808db44:	db0c2e0d 	.word	0xdb0c2e0d
 808db48:	befa4fa4 	.word	0xbefa4fa4
 808db4c:	47b5481d 	.word	0x47b5481d

0808db50 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 808db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808db54:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 808db58:	4686      	mov	lr, r0
 808db5a:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808db5e:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808db60:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
 808db64:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
 808db68:	7866      	ldrb	r6, [r4, #1]
 808db6a:	f04f 0a00 	mov.w	sl, #0
 808db6e:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 808db72:	0436      	lsls	r6, r6, #16
 808db74:	2300      	movs	r3, #0
 808db76:	ea43 030b 	orr.w	r3, r3, fp
 808db7a:	9609      	str	r6, [sp, #36]	; 0x24
 808db7c:	f8cd a020 	str.w	sl, [sp, #32]
 808db80:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 808db84:	431e      	orrs	r6, r3
 808db86:	4633      	mov	r3, r6
 808db88:	79e2      	ldrb	r2, [r4, #7]
 808db8a:	78a6      	ldrb	r6, [r4, #2]
 808db8c:	ea42 020a 	orr.w	r2, r2, sl
 808db90:	4315      	orrs	r5, r2
 808db92:	462a      	mov	r2, r5
 808db94:	0236      	lsls	r6, r6, #8
 808db96:	960b      	str	r6, [sp, #44]	; 0x2c
 808db98:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 808db9c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 808dba0:	431e      	orrs	r6, r3
 808dba2:	4633      	mov	r3, r6
 808dba4:	4315      	orrs	r5, r2
 808dba6:	78e6      	ldrb	r6, [r4, #3]
 808dba8:	462a      	mov	r2, r5
 808dbaa:	960d      	str	r6, [sp, #52]	; 0x34
 808dbac:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 808dbb0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 808dbb4:	431e      	orrs	r6, r3
 808dbb6:	4633      	mov	r3, r6
 808dbb8:	7926      	ldrb	r6, [r4, #4]
 808dbba:	4315      	orrs	r5, r2
 808dbbc:	462a      	mov	r2, r5
 808dbbe:	0635      	lsls	r5, r6, #24
 808dbc0:	f8cd a014 	str.w	sl, [sp, #20]
 808dbc4:	9504      	str	r5, [sp, #16]
 808dbc6:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 808dbca:	431e      	orrs	r6, r3
 808dbcc:	4633      	mov	r3, r6
 808dbce:	7966      	ldrb	r6, [r4, #5]
 808dbd0:	4315      	orrs	r5, r2
 808dbd2:	462a      	mov	r2, r5
 808dbd4:	0435      	lsls	r5, r6, #16
 808dbd6:	f8cd a01c 	str.w	sl, [sp, #28]
 808dbda:	9506      	str	r5, [sp, #24]
 808dbdc:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 808dbe0:	431e      	orrs	r6, r3
 808dbe2:	4633      	mov	r3, r6
 808dbe4:	79a6      	ldrb	r6, [r4, #6]
 808dbe6:	4315      	orrs	r5, r2
 808dbe8:	ea4f 2806 	mov.w	r8, r6, lsl #8
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808dbec:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808dbee:	ea45 0208 	orr.w	r2, r5, r8
 808dbf2:	ea43 030a 	orr.w	r3, r3, sl
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808dbf6:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808dbf8:	e9ec 2302 	strd	r2, r3, [ip, #8]!
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808dbfc:	d1b0      	bne.n	808db60 <mbedtls_internal_sha512_process+0x10>
 808dbfe:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 808dc00:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 808dc02:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
 808dc04:	0cd4      	lsrs	r4, r2, #19
 808dc06:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 808dc0a:	940e      	str	r4, [sp, #56]	; 0x38
 808dc0c:	0cdc      	lsrs	r4, r3, #19
 808dc0e:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 808dc12:	940f      	str	r4, [sp, #60]	; 0x3c
 808dc14:	00dc      	lsls	r4, r3, #3
 808dc16:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
 808dc1a:	9411      	str	r4, [sp, #68]	; 0x44
 808dc1c:	00d4      	lsls	r4, r2, #3
 808dc1e:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 808dc22:	0992      	lsrs	r2, r2, #6
 808dc24:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
 808dc28:	9410      	str	r4, [sp, #64]	; 0x40
 808dc2a:	099b      	lsrs	r3, r3, #6
 808dc2c:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 808dc30:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808dc34:	9200      	str	r2, [sp, #0]
 808dc36:	4066      	eors	r6, r4
 808dc38:	9301      	str	r3, [sp, #4]
 808dc3a:	406f      	eors	r7, r5
 808dc3c:	e9dd 3400 	ldrd	r3, r4, [sp]
 808dc40:	4073      	eors	r3, r6
 808dc42:	461e      	mov	r6, r3
 808dc44:	e9d1 2300 	ldrd	r2, r3, [r1]
 808dc48:	407c      	eors	r4, r7
 808dc4a:	4627      	mov	r7, r4
 808dc4c:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
 808dc50:	f8d1 8008 	ldr.w	r8, [r1, #8]
 808dc54:	1912      	adds	r2, r2, r4
 808dc56:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 808dc5a:	416b      	adcs	r3, r5
 808dc5c:	18b4      	adds	r4, r6, r2
 808dc5e:	eb47 0503 	adc.w	r5, r7, r3
 808dc62:	ea4f 0358 	mov.w	r3, r8, lsr #1
 808dc66:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
 808dc6a:	9312      	str	r3, [sp, #72]	; 0x48
 808dc6c:	ea4f 035c 	mov.w	r3, ip, lsr #1
 808dc70:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
 808dc74:	9313      	str	r3, [sp, #76]	; 0x4c
 808dc76:	ea4f 2318 	mov.w	r3, r8, lsr #8
 808dc7a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 808dc7e:	9314      	str	r3, [sp, #80]	; 0x50
 808dc80:	ea4f 231c 	mov.w	r3, ip, lsr #8
 808dc84:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 808dc88:	9315      	str	r3, [sp, #84]	; 0x54
 808dc8a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808dc8e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 808dc92:	4072      	eors	r2, r6
 808dc94:	ea4f 16d8 	mov.w	r6, r8, lsr #7
 808dc98:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
 808dc9c:	9602      	str	r6, [sp, #8]
 808dc9e:	ea4f 16dc 	mov.w	r6, ip, lsr #7
 808dca2:	9603      	str	r6, [sp, #12]
 808dca4:	407b      	eors	r3, r7
 808dca6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808dcaa:	4056      	eors	r6, r2
 808dcac:	1932      	adds	r2, r6, r4
 808dcae:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808dcb2:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808dcb6:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808dcba:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808dcbc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 808dcc0:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808dcc4:	d19c      	bne.n	808dc00 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808dcc6:	e9de 3404 	ldrd	r3, r4, [lr, #16]
 808dcca:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    B = ctx->state[1];
 808dcce:	e9de 3406 	ldrd	r3, r4, [lr, #24]
 808dcd2:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    C = ctx->state[2];
 808dcd6:	e9de 3408 	ldrd	r3, r4, [lr, #32]
 808dcda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    D = ctx->state[3];
 808dcde:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 808dce2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
    D = ctx->state[3];
 808dce6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    E = ctx->state[4];
 808dcea:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 808dcee:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    E = ctx->state[4];
 808dcf2:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    F = ctx->state[5];
 808dcf6:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
 808dcfa:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    G = ctx->state[6];
 808dcfe:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
 808dd02:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    H = ctx->state[7];
 808dd06:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
 808dd0a:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 808dd0e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 808dd12:	4b0d      	ldr	r3, [pc, #52]	; (808dd48 <mbedtls_internal_sha512_process+0x1f8>)
 808dd14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 808dd18:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 808dd1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 808dd20:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 808dd24:	e9cd 0106 	strd	r0, r1, [sp, #24]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 808dd28:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 808dd2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
 808dd30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 808dd34:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808dd38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808dd3c:	e9cd 0100 	strd	r0, r1, [sp]
 808dd40:	aa80      	add	r2, sp, #512	; 0x200
 808dd42:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 808dd46:	e001      	b.n	808dd4c <mbedtls_internal_sha512_process+0x1fc>
 808dd48:	08095190 	.word	0x08095190
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808dd4c:	9904      	ldr	r1, [sp, #16]
 808dd4e:	9805      	ldr	r0, [sp, #20]
 808dd50:	0b89      	lsrs	r1, r1, #14
 808dd52:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808dd56:	911e      	str	r1, [sp, #120]	; 0x78
 808dd58:	0b81      	lsrs	r1, r0, #14
 808dd5a:	9804      	ldr	r0, [sp, #16]
 808dd5c:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 808dd60:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808dd64:	911f      	str	r1, [sp, #124]	; 0x7c
 808dd66:	0c81      	lsrs	r1, r0, #18
 808dd68:	9805      	ldr	r0, [sp, #20]
 808dd6a:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
 808dd6e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808dd72:	9120      	str	r1, [sp, #128]	; 0x80
 808dd74:	0c81      	lsrs	r1, r0, #18
 808dd76:	9804      	ldr	r0, [sp, #16]
 808dd78:	3340      	adds	r3, #64	; 0x40
 808dd7a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808dd7e:	9121      	str	r1, [sp, #132]	; 0x84
 808dd80:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 808dd84:	404f      	eors	r7, r1
 808dd86:	9905      	ldr	r1, [sp, #20]
 808dd88:	4046      	eors	r6, r0
 808dd8a:	9804      	ldr	r0, [sp, #16]
 808dd8c:	05c9      	lsls	r1, r1, #23
 808dd8e:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808dd92:	9123      	str	r1, [sp, #140]	; 0x8c
 808dd94:	05c1      	lsls	r1, r0, #23
 808dd96:	9805      	ldr	r0, [sp, #20]
 808dd98:	3240      	adds	r2, #64	; 0x40
 808dd9a:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808dd9e:	9122      	str	r1, [sp, #136]	; 0x88
 808dda0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 808dda4:	4070      	eors	r0, r6
 808dda6:	4079      	eors	r1, r7
 808dda8:	4606      	mov	r6, r0
 808ddaa:	460f      	mov	r7, r1
 808ddac:	e952 0112 	ldrd	r0, r1, [r2, #-72]	; 0x48
 808ddb0:	1900      	adds	r0, r0, r4
 808ddb2:	4169      	adcs	r1, r5
 808ddb4:	1836      	adds	r6, r6, r0
 808ddb6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808ddba:	414f      	adcs	r7, r1
 808ddbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808ddc0:	4060      	eors	r0, r4
 808ddc2:	4069      	eors	r1, r5
 808ddc4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808ddc8:	4004      	ands	r4, r0
 808ddca:	4620      	mov	r0, r4
 808ddcc:	400d      	ands	r5, r1
 808ddce:	4629      	mov	r1, r5
 808ddd0:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808ddd4:	4044      	eors	r4, r0
 808ddd6:	1936      	adds	r6, r6, r4
 808ddd8:	ea85 0501 	eor.w	r5, r5, r1
 808dddc:	416f      	adcs	r7, r5
 808ddde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808dde2:	1980      	adds	r0, r0, r6
 808dde4:	4179      	adcs	r1, r7
 808dde6:	4606      	mov	r6, r0
 808dde8:	460f      	mov	r7, r1
 808ddea:	eb18 0800 	adds.w	r8, r8, r0
 808ddee:	eb49 0901 	adc.w	r9, r9, r1
 808ddf2:	9900      	ldr	r1, [sp, #0]
 808ddf4:	9801      	ldr	r0, [sp, #4]
 808ddf6:	0f09      	lsrs	r1, r1, #28
 808ddf8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808ddfc:	9124      	str	r1, [sp, #144]	; 0x90
 808ddfe:	0f01      	lsrs	r1, r0, #28
 808de00:	9800      	ldr	r0, [sp, #0]
 808de02:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808de06:	9125      	str	r1, [sp, #148]	; 0x94
 808de08:	9901      	ldr	r1, [sp, #4]
 808de0a:	0789      	lsls	r1, r1, #30
 808de0c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808de10:	9127      	str	r1, [sp, #156]	; 0x9c
 808de12:	0781      	lsls	r1, r0, #30
 808de14:	9801      	ldr	r0, [sp, #4]
 808de16:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808de1a:	9126      	str	r1, [sp, #152]	; 0x98
 808de1c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 808de20:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 808de24:	404d      	eors	r5, r1
 808de26:	9901      	ldr	r1, [sp, #4]
 808de28:	4044      	eors	r4, r0
 808de2a:	9800      	ldr	r0, [sp, #0]
 808de2c:	0649      	lsls	r1, r1, #25
 808de2e:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808de32:	9129      	str	r1, [sp, #164]	; 0xa4
 808de34:	0641      	lsls	r1, r0, #25
 808de36:	9801      	ldr	r0, [sp, #4]
 808de38:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808de3c:	9128      	str	r1, [sp, #160]	; 0xa0
 808de3e:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 808de42:	4060      	eors	r0, r4
 808de44:	4069      	eors	r1, r5
 808de46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808de4a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808de4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 808de52:	4320      	orrs	r0, r4
 808de54:	4329      	orrs	r1, r5
 808de56:	ea00 040a 	and.w	r4, r0, sl
 808de5a:	ea01 050b 	and.w	r5, r1, fp
 808de5e:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 808de62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808de66:	e9dd 4500 	ldrd	r4, r5, [sp]
 808de6a:	4004      	ands	r4, r0
 808de6c:	400d      	ands	r5, r1
 808de6e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808de72:	4320      	orrs	r0, r4
 808de74:	4329      	orrs	r1, r5
 808de76:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808de7a:	1824      	adds	r4, r4, r0
 808de7c:	414d      	adcs	r5, r1
 808de7e:	19a4      	adds	r4, r4, r6
 808de80:	417d      	adcs	r5, r7
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808de82:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808de86:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808de8a:	e953 4510 	ldrd	r4, r5, [r3, #-64]	; 0x40
 808de8e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808de92:	1900      	adds	r0, r0, r4
 808de94:	4169      	adcs	r1, r5
 808de96:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808de9a:	1824      	adds	r4, r4, r0
 808de9c:	414d      	adcs	r5, r1
 808de9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808dea2:	4070      	eors	r0, r6
 808dea4:	ea00 0008 	and.w	r0, r0, r8
 808dea8:	4046      	eors	r6, r0
 808deaa:	19a0      	adds	r0, r4, r6
 808deac:	ea4f 3498 	mov.w	r4, r8, lsr #14
 808deb0:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 808deb4:	942a      	str	r4, [sp, #168]	; 0xa8
 808deb6:	ea4f 3499 	mov.w	r4, r9, lsr #14
 808deba:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 808debe:	942b      	str	r4, [sp, #172]	; 0xac
 808dec0:	ea4f 4498 	mov.w	r4, r8, lsr #18
 808dec4:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 808dec8:	942c      	str	r4, [sp, #176]	; 0xb0
 808deca:	ea81 0107 	eor.w	r1, r1, r7
 808dece:	ea4f 4499 	mov.w	r4, r9, lsr #18
 808ded2:	ea01 0109 	and.w	r1, r1, r9
 808ded6:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 808deda:	942d      	str	r4, [sp, #180]	; 0xb4
 808dedc:	ea87 0701 	eor.w	r7, r7, r1
 808dee0:	eb45 0107 	adc.w	r1, r5, r7
 808dee4:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 808dee8:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 808deec:	4074      	eors	r4, r6
 808deee:	ea4f 56c9 	mov.w	r6, r9, lsl #23
 808def2:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
 808def6:	962f      	str	r6, [sp, #188]	; 0xbc
 808def8:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 808defc:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
 808df00:	962e      	str	r6, [sp, #184]	; 0xb8
 808df02:	407d      	eors	r5, r7
 808df04:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 808df08:	4066      	eors	r6, r4
 808df0a:	1986      	adds	r6, r0, r6
 808df0c:	ea87 0705 	eor.w	r7, r7, r5
 808df10:	eb41 0707 	adc.w	r7, r1, r7
 808df14:	eb1a 0006 	adds.w	r0, sl, r6
 808df18:	eb4b 0107 	adc.w	r1, fp, r7
 808df1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808df20:	990a      	ldr	r1, [sp, #40]	; 0x28
 808df22:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808df24:	0f09      	lsrs	r1, r1, #28
 808df26:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808df2a:	9130      	str	r1, [sp, #192]	; 0xc0
 808df2c:	0f01      	lsrs	r1, r0, #28
 808df2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 808df30:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 808df34:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808df38:	9131      	str	r1, [sp, #196]	; 0xc4
 808df3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808df3c:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
 808df40:	0789      	lsls	r1, r1, #30
 808df42:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808df46:	9133      	str	r1, [sp, #204]	; 0xcc
 808df48:	0781      	lsls	r1, r0, #30
 808df4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808df4c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808df50:	9132      	str	r1, [sp, #200]	; 0xc8
 808df52:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 808df56:	404d      	eors	r5, r1
 808df58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808df5a:	4044      	eors	r4, r0
 808df5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 808df5e:	0649      	lsls	r1, r1, #25
 808df60:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808df64:	9135      	str	r1, [sp, #212]	; 0xd4
 808df66:	0641      	lsls	r1, r0, #25
 808df68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808df6a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808df6e:	9134      	str	r1, [sp, #208]	; 0xd0
 808df70:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 808df74:	4060      	eors	r0, r4
 808df76:	4604      	mov	r4, r0
 808df78:	4069      	eors	r1, r5
 808df7a:	460d      	mov	r5, r1
 808df7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 808df80:	ea40 000a 	orr.w	r0, r0, sl
 808df84:	ea41 010b 	orr.w	r1, r1, fp
 808df88:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 808df8c:	ea0a 0a00 	and.w	sl, sl, r0
 808df90:	ea0b 0b01 	and.w	fp, fp, r1
 808df94:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 808df98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808df9c:	e9dd ab00 	ldrd	sl, fp, [sp]
 808dfa0:	ea0a 0a00 	and.w	sl, sl, r0
 808dfa4:	ea0b 0b01 	and.w	fp, fp, r1
 808dfa8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808dfac:	ea40 000a 	orr.w	r0, r0, sl
 808dfb0:	1900      	adds	r0, r0, r4
 808dfb2:	ea41 010b 	orr.w	r1, r1, fp
 808dfb6:	4169      	adcs	r1, r5
 808dfb8:	eb10 0a06 	adds.w	sl, r0, r6
 808dfbc:	eb41 0b07 	adc.w	fp, r1, r7
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 808dfc0:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 808dfc4:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 808dfc8:	1900      	adds	r0, r0, r4
 808dfca:	4169      	adcs	r1, r5
 808dfcc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808dfd0:	1824      	adds	r4, r4, r0
 808dfd2:	414d      	adcs	r5, r1
 808dfd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808dfd8:	ea80 0008 	eor.w	r0, r0, r8
 808dfdc:	ea81 0109 	eor.w	r1, r1, r9
 808dfe0:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808dfe4:	4006      	ands	r6, r0
 808dfe6:	4630      	mov	r0, r6
 808dfe8:	400f      	ands	r7, r1
 808dfea:	4639      	mov	r1, r7
 808dfec:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808dff0:	4046      	eors	r6, r0
 808dff2:	19a0      	adds	r0, r4, r6
 808dff4:	ea87 0701 	eor.w	r7, r7, r1
 808dff8:	9c08      	ldr	r4, [sp, #32]
 808dffa:	eb45 0107 	adc.w	r1, r5, r7
 808dffe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e000:	0ba4      	lsrs	r4, r4, #14
 808e002:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e006:	9436      	str	r4, [sp, #216]	; 0xd8
 808e008:	0bac      	lsrs	r4, r5, #14
 808e00a:	9d08      	ldr	r5, [sp, #32]
 808e00c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e010:	9437      	str	r4, [sp, #220]	; 0xdc
 808e012:	0cac      	lsrs	r4, r5, #18
 808e014:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e016:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e01a:	9438      	str	r4, [sp, #224]	; 0xe0
 808e01c:	0cac      	lsrs	r4, r5, #18
 808e01e:	9d08      	ldr	r5, [sp, #32]
 808e020:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e024:	9439      	str	r4, [sp, #228]	; 0xe4
 808e026:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 808e02a:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 808e02e:	4074      	eors	r4, r6
 808e030:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808e032:	407d      	eors	r5, r7
 808e034:	9f08      	ldr	r7, [sp, #32]
 808e036:	05f6      	lsls	r6, r6, #23
 808e038:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e03c:	963b      	str	r6, [sp, #236]	; 0xec
 808e03e:	05fe      	lsls	r6, r7, #23
 808e040:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808e042:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e046:	963a      	str	r6, [sp, #232]	; 0xe8
 808e048:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 808e04c:	4066      	eors	r6, r4
 808e04e:	1986      	adds	r6, r0, r6
 808e050:	ea87 0705 	eor.w	r7, r7, r5
 808e054:	eb41 0707 	adc.w	r7, r1, r7
 808e058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e05c:	1980      	adds	r0, r0, r6
 808e05e:	4179      	adcs	r1, r7
 808e060:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808e064:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808e068:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808e06c:	913c      	str	r1, [sp, #240]	; 0xf0
 808e06e:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808e072:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808e076:	913d      	str	r1, [sp, #244]	; 0xf4
 808e078:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808e07c:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808e080:	913f      	str	r1, [sp, #252]	; 0xfc
 808e082:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808e086:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808e08a:	913e      	str	r1, [sp, #248]	; 0xf8
 808e08c:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 808e090:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
 808e094:	404d      	eors	r5, r1
 808e096:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808e09a:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808e09e:	9141      	str	r1, [sp, #260]	; 0x104
 808e0a0:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808e0a4:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808e0a8:	4044      	eors	r4, r0
 808e0aa:	9140      	str	r1, [sp, #256]	; 0x100
 808e0ac:	a940      	add	r1, sp, #256	; 0x100
 808e0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e0b2:	4060      	eors	r0, r4
 808e0b4:	4069      	eors	r1, r5
 808e0b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808e0ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e0be:	e9dd 4500 	ldrd	r4, r5, [sp]
 808e0c2:	ea40 000a 	orr.w	r0, r0, sl
 808e0c6:	ea41 010b 	orr.w	r1, r1, fp
 808e0ca:	4004      	ands	r4, r0
 808e0cc:	4620      	mov	r0, r4
 808e0ce:	400d      	ands	r5, r1
 808e0d0:	4629      	mov	r1, r5
 808e0d2:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808e0d6:	ea04 040a 	and.w	r4, r4, sl
 808e0da:	ea05 050b 	and.w	r5, r5, fp
 808e0de:	4304      	orrs	r4, r0
 808e0e0:	4620      	mov	r0, r4
 808e0e2:	430d      	orrs	r5, r1
 808e0e4:	4629      	mov	r1, r5
 808e0e6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808e0ea:	1824      	adds	r4, r4, r0
 808e0ec:	414d      	adcs	r5, r1
 808e0ee:	19a4      	adds	r4, r4, r6
 808e0f0:	417d      	adcs	r5, r7
 808e0f2:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 808e0f6:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
 808e0fa:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 808e0fe:	1900      	adds	r0, r0, r4
 808e100:	4169      	adcs	r1, r5
 808e102:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808e106:	1824      	adds	r4, r4, r0
 808e108:	414d      	adcs	r5, r1
 808e10a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808e10e:	ea80 0008 	eor.w	r0, r0, r8
 808e112:	ea81 0109 	eor.w	r1, r1, r9
 808e116:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808e11a:	4006      	ands	r6, r0
 808e11c:	ea86 0608 	eor.w	r6, r6, r8
 808e120:	400f      	ands	r7, r1
 808e122:	19a0      	adds	r0, r4, r6
 808e124:	ea87 0709 	eor.w	r7, r7, r9
 808e128:	9c06      	ldr	r4, [sp, #24]
 808e12a:	eb45 0107 	adc.w	r1, r5, r7
 808e12e:	9d07      	ldr	r5, [sp, #28]
 808e130:	0ba4      	lsrs	r4, r4, #14
 808e132:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e136:	9442      	str	r4, [sp, #264]	; 0x108
 808e138:	0bac      	lsrs	r4, r5, #14
 808e13a:	9d06      	ldr	r5, [sp, #24]
 808e13c:	ae44      	add	r6, sp, #272	; 0x110
 808e13e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e142:	9443      	str	r4, [sp, #268]	; 0x10c
 808e144:	0cac      	lsrs	r4, r5, #18
 808e146:	9d07      	ldr	r5, [sp, #28]
 808e148:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e14c:	9444      	str	r4, [sp, #272]	; 0x110
 808e14e:	0cac      	lsrs	r4, r5, #18
 808e150:	9d06      	ldr	r5, [sp, #24]
 808e152:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e156:	9445      	str	r4, [sp, #276]	; 0x114
 808e158:	ac42      	add	r4, sp, #264	; 0x108
 808e15a:	cec0      	ldmia	r6, {r6, r7}
 808e15c:	cc30      	ldmia	r4, {r4, r5}
 808e15e:	4074      	eors	r4, r6
 808e160:	9e07      	ldr	r6, [sp, #28]
 808e162:	407d      	eors	r5, r7
 808e164:	9f06      	ldr	r7, [sp, #24]
 808e166:	05f6      	lsls	r6, r6, #23
 808e168:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e16c:	9647      	str	r6, [sp, #284]	; 0x11c
 808e16e:	05fe      	lsls	r6, r7, #23
 808e170:	9f07      	ldr	r7, [sp, #28]
 808e172:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e176:	9646      	str	r6, [sp, #280]	; 0x118
 808e178:	ae46      	add	r6, sp, #280	; 0x118
 808e17a:	cec0      	ldmia	r6, {r6, r7}
 808e17c:	4066      	eors	r6, r4
 808e17e:	1986      	adds	r6, r0, r6
 808e180:	ea87 0705 	eor.w	r7, r7, r5
 808e184:	eb41 0707 	adc.w	r7, r1, r7
 808e188:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e18c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808e190:	e9dd 6700 	ldrd	r6, r7, [sp]
 808e194:	1836      	adds	r6, r6, r0
 808e196:	414f      	adcs	r7, r1
 808e198:	9902      	ldr	r1, [sp, #8]
 808e19a:	9803      	ldr	r0, [sp, #12]
 808e19c:	0f09      	lsrs	r1, r1, #28
 808e19e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e1a2:	9148      	str	r1, [sp, #288]	; 0x120
 808e1a4:	0f01      	lsrs	r1, r0, #28
 808e1a6:	9802      	ldr	r0, [sp, #8]
 808e1a8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 808e1ac:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e1b0:	9149      	str	r1, [sp, #292]	; 0x124
 808e1b2:	9903      	ldr	r1, [sp, #12]
 808e1b4:	0789      	lsls	r1, r1, #30
 808e1b6:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e1ba:	914b      	str	r1, [sp, #300]	; 0x12c
 808e1bc:	0781      	lsls	r1, r0, #30
 808e1be:	9803      	ldr	r0, [sp, #12]
 808e1c0:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808e1c4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e1c8:	914a      	str	r1, [sp, #296]	; 0x128
 808e1ca:	a948      	add	r1, sp, #288	; 0x120
 808e1cc:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e1d0:	a94a      	add	r1, sp, #296	; 0x128
 808e1d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e1d6:	404d      	eors	r5, r1
 808e1d8:	9903      	ldr	r1, [sp, #12]
 808e1da:	4044      	eors	r4, r0
 808e1dc:	9802      	ldr	r0, [sp, #8]
 808e1de:	0649      	lsls	r1, r1, #25
 808e1e0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e1e4:	914d      	str	r1, [sp, #308]	; 0x134
 808e1e6:	0641      	lsls	r1, r0, #25
 808e1e8:	9803      	ldr	r0, [sp, #12]
 808e1ea:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e1ee:	914c      	str	r1, [sp, #304]	; 0x130
 808e1f0:	a94c      	add	r1, sp, #304	; 0x130
 808e1f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e1f6:	4060      	eors	r0, r4
 808e1f8:	4069      	eors	r1, r5
 808e1fa:	4604      	mov	r4, r0
 808e1fc:	460d      	mov	r5, r1
 808e1fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e202:	ea40 000a 	orr.w	r0, r0, sl
 808e206:	ea41 010b 	orr.w	r1, r1, fp
 808e20a:	4006      	ands	r6, r0
 808e20c:	4630      	mov	r0, r6
 808e20e:	400f      	ands	r7, r1
 808e210:	4639      	mov	r1, r7
 808e212:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808e216:	ea06 060a 	and.w	r6, r6, sl
 808e21a:	ea07 070b 	and.w	r7, r7, fp
 808e21e:	4306      	orrs	r6, r0
 808e220:	1930      	adds	r0, r6, r4
 808e222:	ea47 0701 	orr.w	r7, r7, r1
 808e226:	eb47 0105 	adc.w	r1, r7, r5
 808e22a:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808e22e:	1824      	adds	r4, r4, r0
 808e230:	414d      	adcs	r5, r1
 808e232:	e9cd 4500 	strd	r4, r5, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 808e236:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 808e23a:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
 808e23e:	1900      	adds	r0, r0, r4
 808e240:	4169      	adcs	r1, r5
 808e242:	eb10 0008 	adds.w	r0, r0, r8
 808e246:	eb41 0109 	adc.w	r1, r1, r9
 808e24a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808e24e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 808e252:	ea88 0804 	eor.w	r8, r8, r4
 808e256:	ea89 0905 	eor.w	r9, r9, r5
 808e25a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808e25e:	ea04 0408 	and.w	r4, r4, r8
 808e262:	46a0      	mov	r8, r4
 808e264:	ea05 0509 	and.w	r5, r5, r9
 808e268:	46a9      	mov	r9, r5
 808e26a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e26e:	ea84 0408 	eor.w	r4, r4, r8
 808e272:	eb10 0804 	adds.w	r8, r0, r4
 808e276:	ea85 0509 	eor.w	r5, r5, r9
 808e27a:	eb41 0905 	adc.w	r9, r1, r5
 808e27e:	9904      	ldr	r1, [sp, #16]
 808e280:	9805      	ldr	r0, [sp, #20]
 808e282:	0b89      	lsrs	r1, r1, #14
 808e284:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808e288:	914e      	str	r1, [sp, #312]	; 0x138
 808e28a:	0b81      	lsrs	r1, r0, #14
 808e28c:	9804      	ldr	r0, [sp, #16]
 808e28e:	ac50      	add	r4, sp, #320	; 0x140
 808e290:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808e294:	914f      	str	r1, [sp, #316]	; 0x13c
 808e296:	0c81      	lsrs	r1, r0, #18
 808e298:	9805      	ldr	r0, [sp, #20]
 808e29a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808e29e:	9150      	str	r1, [sp, #320]	; 0x140
 808e2a0:	0c81      	lsrs	r1, r0, #18
 808e2a2:	9804      	ldr	r0, [sp, #16]
 808e2a4:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808e2a8:	9151      	str	r1, [sp, #324]	; 0x144
 808e2aa:	a94e      	add	r1, sp, #312	; 0x138
 808e2ac:	cc30      	ldmia	r4, {r4, r5}
 808e2ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e2b2:	4060      	eors	r0, r4
 808e2b4:	9c05      	ldr	r4, [sp, #20]
 808e2b6:	4069      	eors	r1, r5
 808e2b8:	9d04      	ldr	r5, [sp, #16]
 808e2ba:	05e4      	lsls	r4, r4, #23
 808e2bc:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e2c0:	9453      	str	r4, [sp, #332]	; 0x14c
 808e2c2:	05ec      	lsls	r4, r5, #23
 808e2c4:	9d05      	ldr	r5, [sp, #20]
 808e2c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 808e2ca:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e2ce:	9452      	str	r4, [sp, #328]	; 0x148
 808e2d0:	ac52      	add	r4, sp, #328	; 0x148
 808e2d2:	cc30      	ldmia	r4, {r4, r5}
 808e2d4:	4044      	eors	r4, r0
 808e2d6:	eb18 0804 	adds.w	r8, r8, r4
 808e2da:	ea85 0501 	eor.w	r5, r5, r1
 808e2de:	eb49 0905 	adc.w	r9, r9, r5
 808e2e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e2e6:	eb10 0008 	adds.w	r0, r0, r8
 808e2ea:	eb41 0109 	adc.w	r1, r1, r9
 808e2ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808e2f2:	9900      	ldr	r1, [sp, #0]
 808e2f4:	9801      	ldr	r0, [sp, #4]
 808e2f6:	0f09      	lsrs	r1, r1, #28
 808e2f8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e2fc:	9154      	str	r1, [sp, #336]	; 0x150
 808e2fe:	0f01      	lsrs	r1, r0, #28
 808e300:	9800      	ldr	r0, [sp, #0]
 808e302:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e306:	9155      	str	r1, [sp, #340]	; 0x154
 808e308:	9901      	ldr	r1, [sp, #4]
 808e30a:	0789      	lsls	r1, r1, #30
 808e30c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e310:	9157      	str	r1, [sp, #348]	; 0x15c
 808e312:	0781      	lsls	r1, r0, #30
 808e314:	9801      	ldr	r0, [sp, #4]
 808e316:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e31a:	9156      	str	r1, [sp, #344]	; 0x158
 808e31c:	a954      	add	r1, sp, #336	; 0x150
 808e31e:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e322:	a956      	add	r1, sp, #344	; 0x158
 808e324:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e328:	404d      	eors	r5, r1
 808e32a:	9901      	ldr	r1, [sp, #4]
 808e32c:	4044      	eors	r4, r0
 808e32e:	9800      	ldr	r0, [sp, #0]
 808e330:	0649      	lsls	r1, r1, #25
 808e332:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e336:	9159      	str	r1, [sp, #356]	; 0x164
 808e338:	0641      	lsls	r1, r0, #25
 808e33a:	9801      	ldr	r0, [sp, #4]
 808e33c:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e340:	9158      	str	r1, [sp, #352]	; 0x160
 808e342:	a958      	add	r1, sp, #352	; 0x160
 808e344:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e348:	4060      	eors	r0, r4
 808e34a:	4604      	mov	r4, r0
 808e34c:	4069      	eors	r1, r5
 808e34e:	460d      	mov	r5, r1
 808e350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e354:	4330      	orrs	r0, r6
 808e356:	4339      	orrs	r1, r7
 808e358:	ea00 060a 	and.w	r6, r0, sl
 808e35c:	ea01 070b 	and.w	r7, r1, fp
 808e360:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e364:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e368:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808e36c:	4006      	ands	r6, r0
 808e36e:	400f      	ands	r7, r1
 808e370:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808e374:	4330      	orrs	r0, r6
 808e376:	1900      	adds	r0, r0, r4
 808e378:	ea41 0107 	orr.w	r1, r1, r7
 808e37c:	4169      	adcs	r1, r5
 808e37e:	eb18 0800 	adds.w	r8, r8, r0
 808e382:	eb49 0901 	adc.w	r9, r9, r1
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 808e386:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 808e38a:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 808e38e:	1900      	adds	r0, r0, r4
 808e390:	4169      	adcs	r1, r5
 808e392:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e396:	1824      	adds	r4, r4, r0
 808e398:	414d      	adcs	r5, r1
 808e39a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808e39e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808e3a2:	4046      	eors	r6, r0
 808e3a4:	4630      	mov	r0, r6
 808e3a6:	404f      	eors	r7, r1
 808e3a8:	4639      	mov	r1, r7
 808e3aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808e3ae:	4006      	ands	r6, r0
 808e3b0:	4630      	mov	r0, r6
 808e3b2:	400f      	ands	r7, r1
 808e3b4:	4639      	mov	r1, r7
 808e3b6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808e3ba:	4046      	eors	r6, r0
 808e3bc:	1930      	adds	r0, r6, r4
 808e3be:	ea87 0701 	eor.w	r7, r7, r1
 808e3c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 808e3c4:	eb47 0105 	adc.w	r1, r7, r5
 808e3c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808e3ca:	0ba4      	lsrs	r4, r4, #14
 808e3cc:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e3d0:	945a      	str	r4, [sp, #360]	; 0x168
 808e3d2:	0bac      	lsrs	r4, r5, #14
 808e3d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808e3d6:	ae5c      	add	r6, sp, #368	; 0x170
 808e3d8:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e3dc:	945b      	str	r4, [sp, #364]	; 0x16c
 808e3de:	0cac      	lsrs	r4, r5, #18
 808e3e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808e3e2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e3e6:	945c      	str	r4, [sp, #368]	; 0x170
 808e3e8:	0cac      	lsrs	r4, r5, #18
 808e3ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808e3ec:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e3f0:	945d      	str	r4, [sp, #372]	; 0x174
 808e3f2:	ac5a      	add	r4, sp, #360	; 0x168
 808e3f4:	cec0      	ldmia	r6, {r6, r7}
 808e3f6:	cc30      	ldmia	r4, {r4, r5}
 808e3f8:	4074      	eors	r4, r6
 808e3fa:	4626      	mov	r6, r4
 808e3fc:	407d      	eors	r5, r7
 808e3fe:	462f      	mov	r7, r5
 808e400:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 808e402:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808e404:	05e4      	lsls	r4, r4, #23
 808e406:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e40a:	945f      	str	r4, [sp, #380]	; 0x17c
 808e40c:	05ec      	lsls	r4, r5, #23
 808e40e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808e410:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e414:	945e      	str	r4, [sp, #376]	; 0x178
 808e416:	ac5e      	add	r4, sp, #376	; 0x178
 808e418:	cc30      	ldmia	r4, {r4, r5}
 808e41a:	4074      	eors	r4, r6
 808e41c:	1906      	adds	r6, r0, r4
 808e41e:	ea85 0507 	eor.w	r5, r5, r7
 808e422:	eb41 0705 	adc.w	r7, r1, r5
 808e426:	eb16 000a 	adds.w	r0, r6, sl
 808e42a:	eb47 010b 	adc.w	r1, r7, fp
 808e42e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808e432:	ea4f 7118 	mov.w	r1, r8, lsr #28
 808e436:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
 808e43a:	9160      	str	r1, [sp, #384]	; 0x180
 808e43c:	ea4f 7119 	mov.w	r1, r9, lsr #28
 808e440:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 808e444:	9161      	str	r1, [sp, #388]	; 0x184
 808e446:	ea4f 7189 	mov.w	r1, r9, lsl #30
 808e44a:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 808e44e:	9163      	str	r1, [sp, #396]	; 0x18c
 808e450:	ea4f 7188 	mov.w	r1, r8, lsl #30
 808e454:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 808e458:	9162      	str	r1, [sp, #392]	; 0x188
 808e45a:	a960      	add	r1, sp, #384	; 0x180
 808e45c:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e460:	a962      	add	r1, sp, #392	; 0x188
 808e462:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e466:	404d      	eors	r5, r1
 808e468:	ea4f 6149 	mov.w	r1, r9, lsl #25
 808e46c:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
 808e470:	9165      	str	r1, [sp, #404]	; 0x194
 808e472:	ea4f 6148 	mov.w	r1, r8, lsl #25
 808e476:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
 808e47a:	4044      	eors	r4, r0
 808e47c:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e480:	9164      	str	r1, [sp, #400]	; 0x190
 808e482:	a964      	add	r1, sp, #400	; 0x190
 808e484:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e488:	4060      	eors	r0, r4
 808e48a:	4604      	mov	r4, r0
 808e48c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808e490:	e9dd ab00 	ldrd	sl, fp, [sp]
 808e494:	4069      	eors	r1, r5
 808e496:	460d      	mov	r5, r1
 808e498:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e49c:	ea40 0008 	orr.w	r0, r0, r8
 808e4a0:	ea41 0109 	orr.w	r1, r1, r9
 808e4a4:	4006      	ands	r6, r0
 808e4a6:	ea0a 0a08 	and.w	sl, sl, r8
 808e4aa:	ea46 000a 	orr.w	r0, r6, sl
 808e4ae:	400f      	ands	r7, r1
 808e4b0:	ea0b 0b09 	and.w	fp, fp, r9
 808e4b4:	1900      	adds	r0, r0, r4
 808e4b6:	ea47 010b 	orr.w	r1, r7, fp
 808e4ba:	4169      	adcs	r1, r5
 808e4bc:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
 808e4c0:	eb1a 0a00 	adds.w	sl, sl, r0
 808e4c4:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 808e4c8:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 808e4cc:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 808e4d0:	1900      	adds	r0, r0, r4
 808e4d2:	4169      	adcs	r1, r5
 808e4d4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808e4d8:	1824      	adds	r4, r4, r0
 808e4da:	414d      	adcs	r5, r1
 808e4dc:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808e4e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e4e4:	4046      	eors	r6, r0
 808e4e6:	4630      	mov	r0, r6
 808e4e8:	404f      	eors	r7, r1
 808e4ea:	4639      	mov	r1, r7
 808e4ec:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808e4f0:	4006      	ands	r6, r0
 808e4f2:	4630      	mov	r0, r6
 808e4f4:	400f      	ands	r7, r1
 808e4f6:	4639      	mov	r1, r7
 808e4f8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808e4fc:	4046      	eors	r6, r0
 808e4fe:	1930      	adds	r0, r6, r4
 808e500:	ea87 0701 	eor.w	r7, r7, r1
 808e504:	9c08      	ldr	r4, [sp, #32]
 808e506:	eb47 0105 	adc.w	r1, r7, r5
 808e50a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e50c:	0ba4      	lsrs	r4, r4, #14
 808e50e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e512:	9466      	str	r4, [sp, #408]	; 0x198
 808e514:	0bac      	lsrs	r4, r5, #14
 808e516:	9d08      	ldr	r5, [sp, #32]
 808e518:	ae68      	add	r6, sp, #416	; 0x1a0
 808e51a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e51e:	9467      	str	r4, [sp, #412]	; 0x19c
 808e520:	0cac      	lsrs	r4, r5, #18
 808e522:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e524:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e528:	9468      	str	r4, [sp, #416]	; 0x1a0
 808e52a:	0cac      	lsrs	r4, r5, #18
 808e52c:	9d08      	ldr	r5, [sp, #32]
 808e52e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e532:	9469      	str	r4, [sp, #420]	; 0x1a4
 808e534:	ac66      	add	r4, sp, #408	; 0x198
 808e536:	cec0      	ldmia	r6, {r6, r7}
 808e538:	cc30      	ldmia	r4, {r4, r5}
 808e53a:	4074      	eors	r4, r6
 808e53c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808e53e:	407d      	eors	r5, r7
 808e540:	9f08      	ldr	r7, [sp, #32]
 808e542:	05f6      	lsls	r6, r6, #23
 808e544:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e548:	966b      	str	r6, [sp, #428]	; 0x1ac
 808e54a:	05fe      	lsls	r6, r7, #23
 808e54c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808e54e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e552:	966a      	str	r6, [sp, #424]	; 0x1a8
 808e554:	ae6a      	add	r6, sp, #424	; 0x1a8
 808e556:	cec0      	ldmia	r6, {r6, r7}
 808e558:	4066      	eors	r6, r4
 808e55a:	1986      	adds	r6, r0, r6
 808e55c:	ea87 0705 	eor.w	r7, r7, r5
 808e560:	eb41 0707 	adc.w	r7, r1, r7
 808e564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e568:	1980      	adds	r0, r0, r6
 808e56a:	4179      	adcs	r1, r7
 808e56c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808e570:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808e574:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808e578:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e57c:	916c      	str	r1, [sp, #432]	; 0x1b0
 808e57e:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808e582:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808e586:	916d      	str	r1, [sp, #436]	; 0x1b4
 808e588:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808e58c:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808e590:	916f      	str	r1, [sp, #444]	; 0x1bc
 808e592:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808e596:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808e59a:	916e      	str	r1, [sp, #440]	; 0x1b8
 808e59c:	a96c      	add	r1, sp, #432	; 0x1b0
 808e59e:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e5a2:	a96e      	add	r1, sp, #440	; 0x1b8
 808e5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e5a8:	404d      	eors	r5, r1
 808e5aa:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808e5ae:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808e5b2:	9171      	str	r1, [sp, #452]	; 0x1c4
 808e5b4:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808e5b8:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808e5bc:	4044      	eors	r4, r0
 808e5be:	9170      	str	r1, [sp, #448]	; 0x1c0
 808e5c0:	a970      	add	r1, sp, #448	; 0x1c0
 808e5c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e5c6:	4060      	eors	r0, r4
 808e5c8:	4604      	mov	r4, r0
 808e5ca:	e9dd 6700 	ldrd	r6, r7, [sp]
 808e5ce:	4069      	eors	r1, r5
 808e5d0:	ea48 000a 	orr.w	r0, r8, sl
 808e5d4:	460d      	mov	r5, r1
 808e5d6:	4006      	ands	r6, r0
 808e5d8:	ea49 010b 	orr.w	r1, r9, fp
 808e5dc:	4630      	mov	r0, r6
 808e5de:	400f      	ands	r7, r1
 808e5e0:	4639      	mov	r1, r7
 808e5e2:	ea08 060a 	and.w	r6, r8, sl
 808e5e6:	4306      	orrs	r6, r0
 808e5e8:	ea09 070b 	and.w	r7, r9, fp
 808e5ec:	1930      	adds	r0, r6, r4
 808e5ee:	ea47 0701 	orr.w	r7, r7, r1
 808e5f2:	eb47 0105 	adc.w	r1, r7, r5
 808e5f6:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808e5fa:	1824      	adds	r4, r4, r0
 808e5fc:	414d      	adcs	r5, r1
 808e5fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808e602:	e952 0104 	ldrd	r0, r1, [r2, #-16]
 808e606:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 808e60a:	1900      	adds	r0, r0, r4
 808e60c:	4169      	adcs	r1, r5
 808e60e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808e612:	1824      	adds	r4, r4, r0
 808e614:	414d      	adcs	r5, r1
 808e616:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808e61a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e61e:	4070      	eors	r0, r6
 808e620:	4079      	eors	r1, r7
 808e622:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808e626:	4006      	ands	r6, r0
 808e628:	4630      	mov	r0, r6
 808e62a:	400f      	ands	r7, r1
 808e62c:	4639      	mov	r1, r7
 808e62e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808e632:	4046      	eors	r6, r0
 808e634:	19a0      	adds	r0, r4, r6
 808e636:	ea87 0701 	eor.w	r7, r7, r1
 808e63a:	9c06      	ldr	r4, [sp, #24]
 808e63c:	eb45 0107 	adc.w	r1, r5, r7
 808e640:	9d07      	ldr	r5, [sp, #28]
 808e642:	0ba4      	lsrs	r4, r4, #14
 808e644:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e648:	9472      	str	r4, [sp, #456]	; 0x1c8
 808e64a:	0bac      	lsrs	r4, r5, #14
 808e64c:	9d06      	ldr	r5, [sp, #24]
 808e64e:	ae74      	add	r6, sp, #464	; 0x1d0
 808e650:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e654:	9473      	str	r4, [sp, #460]	; 0x1cc
 808e656:	0cac      	lsrs	r4, r5, #18
 808e658:	9d07      	ldr	r5, [sp, #28]
 808e65a:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e65e:	9474      	str	r4, [sp, #464]	; 0x1d0
 808e660:	0cac      	lsrs	r4, r5, #18
 808e662:	9d06      	ldr	r5, [sp, #24]
 808e664:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e668:	9475      	str	r4, [sp, #468]	; 0x1d4
 808e66a:	ac72      	add	r4, sp, #456	; 0x1c8
 808e66c:	cec0      	ldmia	r6, {r6, r7}
 808e66e:	cc30      	ldmia	r4, {r4, r5}
 808e670:	4074      	eors	r4, r6
 808e672:	9e07      	ldr	r6, [sp, #28]
 808e674:	407d      	eors	r5, r7
 808e676:	9f06      	ldr	r7, [sp, #24]
 808e678:	05f6      	lsls	r6, r6, #23
 808e67a:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e67e:	9677      	str	r6, [sp, #476]	; 0x1dc
 808e680:	05fe      	lsls	r6, r7, #23
 808e682:	9f07      	ldr	r7, [sp, #28]
 808e684:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e688:	9676      	str	r6, [sp, #472]	; 0x1d8
 808e68a:	ae76      	add	r6, sp, #472	; 0x1d8
 808e68c:	cec0      	ldmia	r6, {r6, r7}
 808e68e:	4066      	eors	r6, r4
 808e690:	1986      	adds	r6, r0, r6
 808e692:	ea87 0705 	eor.w	r7, r7, r5
 808e696:	eb41 0707 	adc.w	r7, r1, r7
 808e69a:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e69e:	1980      	adds	r0, r0, r6
 808e6a0:	4179      	adcs	r1, r7
 808e6a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 808e6a6:	9902      	ldr	r1, [sp, #8]
 808e6a8:	9803      	ldr	r0, [sp, #12]
 808e6aa:	0f09      	lsrs	r1, r1, #28
 808e6ac:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e6b0:	9178      	str	r1, [sp, #480]	; 0x1e0
 808e6b2:	0f01      	lsrs	r1, r0, #28
 808e6b4:	9802      	ldr	r0, [sp, #8]
 808e6b6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e6ba:	9179      	str	r1, [sp, #484]	; 0x1e4
 808e6bc:	9903      	ldr	r1, [sp, #12]
 808e6be:	0789      	lsls	r1, r1, #30
 808e6c0:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e6c4:	917b      	str	r1, [sp, #492]	; 0x1ec
 808e6c6:	0781      	lsls	r1, r0, #30
 808e6c8:	9803      	ldr	r0, [sp, #12]
 808e6ca:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e6ce:	917a      	str	r1, [sp, #488]	; 0x1e8
 808e6d0:	a978      	add	r1, sp, #480	; 0x1e0
 808e6d2:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e6d6:	a97a      	add	r1, sp, #488	; 0x1e8
 808e6d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e6dc:	404d      	eors	r5, r1
 808e6de:	9903      	ldr	r1, [sp, #12]
 808e6e0:	4044      	eors	r4, r0
 808e6e2:	9802      	ldr	r0, [sp, #8]
 808e6e4:	0649      	lsls	r1, r1, #25
 808e6e6:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e6ea:	917d      	str	r1, [sp, #500]	; 0x1f4
 808e6ec:	0641      	lsls	r1, r0, #25
 808e6ee:	9803      	ldr	r0, [sp, #12]
 808e6f0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e6f4:	917c      	str	r1, [sp, #496]	; 0x1f0
 808e6f6:	a97c      	add	r1, sp, #496	; 0x1f0
 808e6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e6fc:	4060      	eors	r0, r4
 808e6fe:	4069      	eors	r1, r5
 808e700:	e9cd 0100 	strd	r0, r1, [sp]
 808e704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e708:	ea40 000a 	orr.w	r0, r0, sl
 808e70c:	ea41 010b 	orr.w	r1, r1, fp
 808e710:	ea00 0408 	and.w	r4, r0, r8
 808e714:	ea01 0509 	and.w	r5, r1, r9
 808e718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e71c:	ea00 000a 	and.w	r0, r0, sl
 808e720:	ea01 010b 	and.w	r1, r1, fp
 808e724:	4304      	orrs	r4, r0
 808e726:	430d      	orrs	r5, r1
 808e728:	4620      	mov	r0, r4
 808e72a:	4629      	mov	r1, r5
 808e72c:	e9dd 4500 	ldrd	r4, r5, [sp]
 808e730:	1824      	adds	r4, r4, r0
 808e732:	414d      	adcs	r5, r1
 808e734:	19a4      	adds	r4, r4, r6
 808e736:	417d      	adcs	r5, r7
    }
    while( i < 80 );
 808e738:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808e73a:	e9cd 4500 	strd	r4, r5, [sp]
    }
    while( i < 80 );
 808e73e:	f47f ab05 	bne.w	808dd4c <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
 808e742:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808e746:	4623      	mov	r3, r4
 808e748:	18c0      	adds	r0, r0, r3
 808e74a:	4169      	adcs	r1, r5
    ctx->state[1] += B;
 808e74c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e750:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 808e754:	18a4      	adds	r4, r4, r2
 808e756:	415d      	adcs	r5, r3
 808e758:	e9ce 4506 	strd	r4, r5, [lr, #24]
    ctx->state[2] += C;
 808e75c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 808e760:	eb13 030a 	adds.w	r3, r3, sl
 808e764:	eb44 040b 	adc.w	r4, r4, fp
 808e768:	469a      	mov	sl, r3
    ctx->state[3] += D;
    ctx->state[4] += E;
 808e76a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808e76e:	46a3      	mov	fp, r4
    ctx->state[3] += D;
    ctx->state[4] += E;
 808e770:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
 808e774:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808e778:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 808e77c:	eb10 0008 	adds.w	r0, r0, r8
 808e780:	eb41 0109 	adc.w	r1, r1, r9
    ctx->state[4] += E;
 808e784:	18a4      	adds	r4, r4, r2
 808e786:	415d      	adcs	r5, r3
 808e788:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 808e78c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 808e790:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 808e794:	18a4      	adds	r4, r4, r2
 808e796:	415d      	adcs	r5, r3
 808e798:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 808e79c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808e7a0:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 808e7a4:	18a4      	adds	r4, r4, r2
 808e7a6:	415d      	adcs	r5, r3
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808e7a8:	e9ce 010a 	strd	r0, r1, [lr, #40]	; 0x28
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 808e7ac:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 808e7b0:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
 808e7b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 808e7b8:	18c0      	adds	r0, r0, r3
 808e7ba:	4161      	adcs	r1, r4
 808e7bc:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
 808e7c0:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808e7c2:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
 808e7c6:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
 808e7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e7ce:	bf00      	nop

0808e7d0 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808e7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808e7d4:	4604      	mov	r4, r0
 808e7d6:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    unsigned int left;

    if( ilen == 0 )
 808e7d8:	4615      	mov	r5, r2
 808e7da:	2a00      	cmp	r2, #0
 808e7dc:	d03d      	beq.n	808e85a <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808e7de:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808e7e2:	f04f 0900 	mov.w	r9, #0
    unsigned int left;

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808e7e6:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808e7ea:	1952      	adds	r2, r2, r5
 808e7ec:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
 808e7f0:	454b      	cmp	r3, r9
 808e7f2:	bf08      	it	eq
 808e7f4:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808e7f6:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
 808e7fa:	d206      	bcs.n	808e80a <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
 808e7fc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 808e800:	3201      	adds	r2, #1
 808e802:	f143 0300 	adc.w	r3, r3, #0
 808e806:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
 808e80a:	b188      	cbz	r0, 808e830 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
 808e80c:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 808e810:	42bd      	cmp	r5, r7
 808e812:	d31c      	bcc.n	808e84e <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 808e814:	f104 0850 	add.w	r8, r4, #80	; 0x50
 808e818:	4631      	mov	r1, r6
 808e81a:	463a      	mov	r2, r7
 808e81c:	4440      	add	r0, r8
 808e81e:	f004 fc3e 	bl	809309e <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808e822:	4641      	mov	r1, r8
 808e824:	4620      	mov	r0, r4
 808e826:	f7ff f993 	bl	808db50 <mbedtls_internal_sha512_process>
 808e82a:	b9b8      	cbnz	r0, 808e85c <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
 808e82c:	443e      	add	r6, r7
        ilen  -= fill;
 808e82e:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808e830:	462f      	mov	r7, r5
 808e832:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
 808e834:	2f7f      	cmp	r7, #127	; 0x7f
 808e836:	4431      	add	r1, r6
 808e838:	d905      	bls.n	808e846 <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 808e83a:	4620      	mov	r0, r4
 808e83c:	f7ff f988 	bl	808db50 <mbedtls_internal_sha512_process>
 808e840:	b960      	cbnz	r0, 808e85c <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
 808e842:	3f80      	subs	r7, #128	; 0x80
 808e844:	e7f5      	b.n	808e832 <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
 808e846:	b147      	cbz	r7, 808e85a <mbedtls_sha512_update_ret+0x8a>
 808e848:	463d      	mov	r5, r7
 808e84a:	460e      	mov	r6, r1
 808e84c:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 808e84e:	3450      	adds	r4, #80	; 0x50
 808e850:	462a      	mov	r2, r5
 808e852:	4631      	mov	r1, r6
 808e854:	4420      	add	r0, r4
 808e856:	f004 fc22 	bl	809309e <memcpy>

    return( 0 );
 808e85a:	2000      	movs	r0, #0
}
 808e85c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808e860 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808e860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808e862:	4604      	mov	r4, r0
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808e864:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 808e866:	2280      	movs	r2, #128	; 0x80
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808e868:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
 808e86c:	1c58      	adds	r0, r3, #1

    if( used <= 112 )
 808e86e:	2870      	cmp	r0, #112	; 0x70
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808e870:	4423      	add	r3, r4
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808e872:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808e874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 808e878:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
 808e87c:	d804      	bhi.n	808e888 <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 808e87e:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 808e882:	2100      	movs	r1, #0
 808e884:	4430      	add	r0, r6
 808e886:	e00f      	b.n	808e8a8 <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 808e888:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 808e88c:	2100      	movs	r1, #0
 808e88e:	4430      	add	r0, r6
 808e890:	f004 fc2b 	bl	80930ea <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808e894:	4631      	mov	r1, r6
 808e896:	4620      	mov	r0, r4
 808e898:	f7ff f95a 	bl	808db50 <mbedtls_internal_sha512_process>
 808e89c:	2800      	cmp	r0, #0
 808e89e:	f040 8111 	bne.w	808eac4 <mbedtls_sha512_finish_ret+0x264>
            return( ret );

        memset( ctx->buffer, 0, 112 );
 808e8a2:	4601      	mov	r1, r0
 808e8a4:	4630      	mov	r0, r6
 808e8a6:	2270      	movs	r2, #112	; 0x70
 808e8a8:	f004 fc1f 	bl	80930ea <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 808e8ac:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
 808e8b0:	68e3      	ldr	r3, [r4, #12]
 808e8b2:	68a2      	ldr	r2, [r4, #8]
 808e8b4:	00d9      	lsls	r1, r3, #3
 808e8b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 808e8ba:	2300      	movs	r3, #0
 808e8bc:	4319      	orrs	r1, r3
 808e8be:	00d0      	lsls	r0, r2, #3
 808e8c0:	ea4f 725e 	mov.w	r2, lr, lsr #29
 808e8c4:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e8c6:	0e0a      	lsrs	r2, r1, #24
 808e8c8:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 808e8cc:	0c0a      	lsrs	r2, r1, #16
 808e8ce:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 808e8d2:	0a0a      	lsrs	r2, r1, #8
 808e8d4:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
 808e8d8:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808e8da:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e8de:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
 808e8e2:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808e8e4:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e8e8:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
 808e8ec:	0a02      	lsrs	r2, r0, #8
 808e8ee:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808e8f2:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808e8f4:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808e8f6:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 808e8fa:	0c1a      	lsrs	r2, r3, #16
 808e8fc:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
 808e900:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 808e904:	0a1a      	lsrs	r2, r3, #8
 808e906:	0e3b      	lsrs	r3, r7, #24
 808e908:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 808e90c:	0c3b      	lsrs	r3, r7, #16
 808e90e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 808e912:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e914:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
 808e918:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808e91c:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 808e920:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
 808e924:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808e928:	4631      	mov	r1, r6
 808e92a:	4620      	mov	r0, r4
 808e92c:	f7ff f910 	bl	808db50 <mbedtls_internal_sha512_process>
 808e930:	4603      	mov	r3, r0
 808e932:	2800      	cmp	r0, #0
 808e934:	f040 80c5 	bne.w	808eac2 <mbedtls_sha512_finish_ret+0x262>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 808e938:	7de2      	ldrb	r2, [r4, #23]
 808e93a:	702a      	strb	r2, [r5, #0]
 808e93c:	8ae2      	ldrh	r2, [r4, #22]
 808e93e:	706a      	strb	r2, [r5, #1]
 808e940:	6962      	ldr	r2, [r4, #20]
 808e942:	0a12      	lsrs	r2, r2, #8
 808e944:	70aa      	strb	r2, [r5, #2]
 808e946:	6962      	ldr	r2, [r4, #20]
 808e948:	70ea      	strb	r2, [r5, #3]
 808e94a:	7ce2      	ldrb	r2, [r4, #19]
 808e94c:	712a      	strb	r2, [r5, #4]
 808e94e:	8a62      	ldrh	r2, [r4, #18]
 808e950:	716a      	strb	r2, [r5, #5]
 808e952:	6922      	ldr	r2, [r4, #16]
 808e954:	0a12      	lsrs	r2, r2, #8
 808e956:	71aa      	strb	r2, [r5, #6]
 808e958:	6922      	ldr	r2, [r4, #16]
 808e95a:	71ea      	strb	r2, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 808e95c:	7fe2      	ldrb	r2, [r4, #31]
 808e95e:	722a      	strb	r2, [r5, #8]
 808e960:	8be2      	ldrh	r2, [r4, #30]
 808e962:	726a      	strb	r2, [r5, #9]
 808e964:	69e2      	ldr	r2, [r4, #28]
 808e966:	0a12      	lsrs	r2, r2, #8
 808e968:	72aa      	strb	r2, [r5, #10]
 808e96a:	69e2      	ldr	r2, [r4, #28]
 808e96c:	72ea      	strb	r2, [r5, #11]
 808e96e:	7ee2      	ldrb	r2, [r4, #27]
 808e970:	732a      	strb	r2, [r5, #12]
 808e972:	8b62      	ldrh	r2, [r4, #26]
 808e974:	736a      	strb	r2, [r5, #13]
 808e976:	69a2      	ldr	r2, [r4, #24]
 808e978:	0a12      	lsrs	r2, r2, #8
 808e97a:	73aa      	strb	r2, [r5, #14]
 808e97c:	69a2      	ldr	r2, [r4, #24]
 808e97e:	73ea      	strb	r2, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 808e980:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 808e984:	742a      	strb	r2, [r5, #16]
 808e986:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 808e988:	746a      	strb	r2, [r5, #17]
 808e98a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808e98c:	0a12      	lsrs	r2, r2, #8
 808e98e:	74aa      	strb	r2, [r5, #18]
 808e990:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808e992:	74ea      	strb	r2, [r5, #19]
 808e994:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 808e998:	752a      	strb	r2, [r5, #20]
 808e99a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 808e99c:	756a      	strb	r2, [r5, #21]
 808e99e:	6a22      	ldr	r2, [r4, #32]
 808e9a0:	0a12      	lsrs	r2, r2, #8
 808e9a2:	75aa      	strb	r2, [r5, #22]
 808e9a4:	6a22      	ldr	r2, [r4, #32]
 808e9a6:	75ea      	strb	r2, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 808e9a8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 808e9ac:	762a      	strb	r2, [r5, #24]
 808e9ae:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 808e9b0:	766a      	strb	r2, [r5, #25]
 808e9b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808e9b4:	0a12      	lsrs	r2, r2, #8
 808e9b6:	76aa      	strb	r2, [r5, #26]
 808e9b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808e9ba:	76ea      	strb	r2, [r5, #27]
 808e9bc:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 808e9c0:	772a      	strb	r2, [r5, #28]
 808e9c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 808e9c4:	776a      	strb	r2, [r5, #29]
 808e9c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808e9c8:	0a12      	lsrs	r2, r2, #8
 808e9ca:	77aa      	strb	r2, [r5, #30]
 808e9cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808e9ce:	77ea      	strb	r2, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 808e9d0:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 808e9d4:	f885 2020 	strb.w	r2, [r5, #32]
 808e9d8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 808e9da:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
 808e9de:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808e9e0:	0a12      	lsrs	r2, r2, #8
 808e9e2:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 808e9e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808e9e8:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
 808e9ec:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 808e9f0:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 808e9f4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 808e9f6:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 808e9fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808e9fc:	0a12      	lsrs	r2, r2, #8
 808e9fe:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
 808ea02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808ea04:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 808ea08:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 808ea0c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
 808ea10:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 808ea12:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 808ea16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808ea18:	0a12      	lsrs	r2, r2, #8
 808ea1a:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
 808ea1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808ea20:	f885 202b 	strb.w	r2, [r5, #43]	; 0x2b
 808ea24:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 808ea28:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
 808ea2c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 808ea2e:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
 808ea32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808ea34:	0a12      	lsrs	r2, r2, #8
 808ea36:	f885 202e 	strb.w	r2, [r5, #46]	; 0x2e
 808ea3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808ea3c:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 808ea40:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 808ea44:	2800      	cmp	r0, #0
 808ea46:	d13c      	bne.n	808eac2 <mbedtls_sha512_finish_ret+0x262>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 808ea48:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 808ea4c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 808ea50:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 808ea54:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 808ea58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808ea5a:	0a1b      	lsrs	r3, r3, #8
 808ea5c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 808ea60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808ea62:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 808ea66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 808ea6a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 808ea6e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 808ea72:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 808ea76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ea78:	0a1b      	lsrs	r3, r3, #8
 808ea7a:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 808ea7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ea80:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 808ea84:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 808ea88:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 808ea8c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 808ea90:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 808ea94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808ea96:	0a1b      	lsrs	r3, r3, #8
 808ea98:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 808ea9c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808ea9e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 808eaa2:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 808eaa6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 808eaaa:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 808eaae:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 808eab2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808eab4:	0a1b      	lsrs	r3, r3, #8
 808eab6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 808eaba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808eabc:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 808eac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    return( 0 );
 808eac2:	4618      	mov	r0, r3
}
 808eac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808eac6 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808eac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 808eac8:	461f      	mov	r7, r3
 808eaca:	b0b7      	sub	sp, #220	; 0xdc
 808eacc:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808eace:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808ead0:	460e      	mov	r6, r1
 808ead2:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808ead4:	f7fe ff8c 	bl	808d9f0 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 808ead8:	4639      	mov	r1, r7
 808eada:	4668      	mov	r0, sp
 808eadc:	f7fe ff9c 	bl	808da18 <mbedtls_sha512_starts_ret>
 808eae0:	4601      	mov	r1, r0
 808eae2:	b958      	cbnz	r0, 808eafc <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 808eae4:	4629      	mov	r1, r5
 808eae6:	4632      	mov	r2, r6
 808eae8:	4668      	mov	r0, sp
 808eaea:	f7ff fe71 	bl	808e7d0 <mbedtls_sha512_update_ret>
 808eaee:	4601      	mov	r1, r0
 808eaf0:	b920      	cbnz	r0, 808eafc <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 808eaf2:	4621      	mov	r1, r4
 808eaf4:	4668      	mov	r0, sp
 808eaf6:	f7ff feb3 	bl	808e860 <mbedtls_sha512_finish_ret>
 808eafa:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 808eafc:	4668      	mov	r0, sp
 808eafe:	f7fe ff7b 	bl	808d9f8 <mbedtls_sha512_free>

    return( ret );
}
 808eb02:	4608      	mov	r0, r1
 808eb04:	b037      	add	sp, #220	; 0xdc
 808eb06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808eb08 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 808eb08:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;
    int ret = 0;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808eb0a:	2b40      	cmp	r3, #64	; 0x40
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 808eb0c:	b093      	sub	sp, #76	; 0x4c
 808eb0e:	4607      	mov	r7, r0
 808eb10:	460d      	mov	r5, r1
 808eb12:	4616      	mov	r6, r2
 808eb14:	461c      	mov	r4, r3
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;
    int ret = 0;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808eb16:	d908      	bls.n	808eb2a <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x22>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 808eb18:	2300      	movs	r3, #0
 808eb1a:	aa02      	add	r2, sp, #8
 808eb1c:	4621      	mov	r1, r4
 808eb1e:	4630      	mov	r0, r6
 808eb20:	f7ff ffd1 	bl	808eac6 <mbedtls_sha512_ret>
 808eb24:	b9d0      	cbnz	r0, 808eb5c <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x54>
            goto cleanup;
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
 808eb26:	ae02      	add	r6, sp, #8
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 808eb28:	2440      	movs	r4, #64	; 0x40
    }

    header[0] = source_id;
 808eb2a:	f88d 5004 	strb.w	r5, [sp, #4]
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 808eb2e:	463d      	mov	r5, r7
 808eb30:	f855 1b08 	ldr.w	r1, [r5], #8
        p = tmp;
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
    }

    header[0] = source_id;
    header[1] = use_len & 0xFF;
 808eb34:	f88d 4005 	strb.w	r4, [sp, #5]
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 808eb38:	b919      	cbnz	r1, 808eb42 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x3a>
 808eb3a:	4628      	mov	r0, r5
 808eb3c:	f7fe ff6c 	bl	808da18 <mbedtls_sha512_starts_ret>
 808eb40:	b960      	cbnz	r0, 808eb5c <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x54>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 808eb42:	2301      	movs	r3, #1
 808eb44:	603b      	str	r3, [r7, #0]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 808eb46:	2202      	movs	r2, #2
 808eb48:	a901      	add	r1, sp, #4
 808eb4a:	4628      	mov	r0, r5
 808eb4c:	f7ff fe40 	bl	808e7d0 <mbedtls_sha512_update_ret>
 808eb50:	b920      	cbnz	r0, 808eb5c <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x54>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 808eb52:	4622      	mov	r2, r4
 808eb54:	4631      	mov	r1, r6
 808eb56:	4628      	mov	r0, r5
 808eb58:	f7ff fe3a 	bl	808e7d0 <mbedtls_sha512_update_ret>
 808eb5c:	2300      	movs	r3, #0
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808eb5e:	4619      	mov	r1, r3
 808eb60:	aa02      	add	r2, sp, #8
 808eb62:	441a      	add	r2, r3
 808eb64:	3301      	adds	r3, #1
 808eb66:	2b41      	cmp	r3, #65	; 0x41
 808eb68:	d001      	beq.n	808eb6e <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x66>
 808eb6a:	7011      	strb	r1, [r2, #0]
 808eb6c:	e7f8      	b.n	808eb60 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x58>

cleanup:
    mbedtls_zeroize( tmp, sizeof( tmp ) );

    return( ret );
}
 808eb6e:	b013      	add	sp, #76	; 0x4c
 808eb70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808eb72 <_ZL23entropy_gather_internalP23mbedtls_entropy_context>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 808eb72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 808eb76:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 808eb7a:	b0a3      	sub	sp, #140	; 0x8c
 808eb7c:	4680      	mov	r8, r0
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 808eb7e:	2b00      	cmp	r3, #0
 808eb80:	d037      	beq.n	808ebf2 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x80>
 808eb82:	2500      	movs	r5, #0
 808eb84:	4604      	mov	r4, r0
 808eb86:	462e      	mov	r6, r5
    for( i = 0; i < ctx->source_count; i++ )
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 808eb88:	46a9      	mov	r9, r5
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 808eb8a:	f8d8 30e0 	ldr.w	r3, [r8, #224]	; 0xe0
 808eb8e:	429e      	cmp	r6, r3
 808eb90:	da21      	bge.n	808ebd6 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x64>
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 808eb92:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
            have_one_strong = 1;

        olen = 0;
 808eb96:	f8cd 9004 	str.w	r9, [sp, #4]
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;
 808eb9a:	2b01      	cmp	r3, #1

        olen = 0;
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 808eb9c:	f04f 0280 	mov.w	r2, #128	; 0x80
 808eba0:	ab01      	add	r3, sp, #4
 808eba2:	a902      	add	r1, sp, #8
 808eba4:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 808eba8:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;
 808ebac:	bf08      	it	eq
 808ebae:	2501      	moveq	r5, #1

        olen = 0;
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 808ebb0:	47b8      	blx	r7
 808ebb2:	b9a8      	cbnz	r0, 808ebe0 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x6e>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 808ebb4:	9b01      	ldr	r3, [sp, #4]
 808ebb6:	b15b      	cbz	r3, 808ebd0 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x5e>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 808ebb8:	aa02      	add	r2, sp, #8
 808ebba:	b2f1      	uxtb	r1, r6
 808ebbc:	4640      	mov	r0, r8
 808ebbe:	f7ff ffa3 	bl	808eb08 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj>
 808ebc2:	b9c0      	cbnz	r0, 808ebf6 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x84>
                                        buf, olen ) ) != 0 )
                return( ret );
            ctx->source[i].size += olen;
 808ebc4:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 808ebc8:	9b01      	ldr	r3, [sp, #4]
 808ebca:	4413      	add	r3, r2
 808ebcc:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 808ebd0:	3601      	adds	r6, #1
 808ebd2:	3414      	adds	r4, #20
 808ebd4:	e7d9      	b.n	808eb8a <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x18>
            ctx->source[i].size += olen;
        }
    }

    if( have_one_strong == 0 )
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 808ebd6:	2d00      	cmp	r5, #0
 808ebd8:	bf14      	ite	ne
 808ebda:	2000      	movne	r0, #0
 808ebdc:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
 808ebe0:	2300      	movs	r3, #0
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808ebe2:	4619      	mov	r1, r3
 808ebe4:	aa02      	add	r2, sp, #8
 808ebe6:	441a      	add	r2, r3
 808ebe8:	3301      	adds	r3, #1
 808ebea:	2b81      	cmp	r3, #129	; 0x81
 808ebec:	d003      	beq.n	808ebf6 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x84>
 808ebee:	7011      	strb	r1, [r2, #0]
 808ebf0:	e7f8      	b.n	808ebe4 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x72>
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 808ebf2:	f06f 003f 	mvn.w	r0, #63	; 0x3f

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 808ebf6:	b023      	add	sp, #140	; 0x8c
 808ebf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808ebfc <mbedtls_entropy_init>:
}

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 808ebfc:	b538      	push	{r3, r4, r5, lr}
 808ebfe:	4604      	mov	r4, r0
    ctx->source_count = 0;
 808ec00:	2500      	movs	r5, #0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 808ec02:	f44f 72c8 	mov.w	r2, #400	; 0x190

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
    ctx->source_count = 0;
 808ec06:	f8c0 50e0 	str.w	r5, [r0, #224]	; 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 808ec0a:	4629      	mov	r1, r5
 808ec0c:	30e4      	adds	r0, #228	; 0xe4
 808ec0e:	f004 fa6c 	bl	80930ea <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 808ec12:	4620      	mov	r0, r4
 808ec14:	f840 5b08 	str.w	r5, [r0], #8
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 808ec18:	f7fe feea 	bl	808d9f0 <mbedtls_sha512_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    idx = ctx->source_count;
 808ec1c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 808ec20:	2a13      	cmp	r2, #19
 808ec22:	dc0f      	bgt.n	808ec44 <mbedtls_entropy_init+0x48>
    {
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
        goto exit;
    }

    ctx->source[idx].f_source  = f_source;
 808ec24:	2314      	movs	r3, #20
 808ec26:	fb03 4302 	mla	r3, r3, r2, r4
 808ec2a:	4907      	ldr	r1, [pc, #28]	; (808ec48 <mbedtls_entropy_init+0x4c>)
    ctx->source[idx].p_source  = p_source;
    ctx->source[idx].threshold = threshold;
    ctx->source[idx].strong    = strong;

    ctx->source_count++;
 808ec2c:	3201      	adds	r2, #1
    {
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
        goto exit;
    }

    ctx->source[idx].f_source  = f_source;
 808ec2e:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
    ctx->source[idx].p_source  = p_source;
    ctx->source[idx].threshold = threshold;
 808ec32:	2104      	movs	r1, #4
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
        goto exit;
    }

    ctx->source[idx].f_source  = f_source;
    ctx->source[idx].p_source  = p_source;
 808ec34:	f8c3 50e8 	str.w	r5, [r3, #232]	; 0xe8
    ctx->source[idx].threshold = threshold;
 808ec38:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    ctx->source[idx].strong    = strong;
 808ec3c:	f8c3 50f4 	str.w	r5, [r3, #244]	; 0xf4

    ctx->source_count++;
 808ec40:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 808ec44:	bd38      	pop	{r3, r4, r5, pc}
 808ec46:	bf00      	nop
 808ec48:	08084f93 	.word	0x08084f93

0808ec4c <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 808ec4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808ec50:	2a40      	cmp	r2, #64	; 0x40

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 808ec52:	b090      	sub	sp, #64	; 0x40
 808ec54:	4605      	mov	r5, r0
 808ec56:	4688      	mov	r8, r1
 808ec58:	4617      	mov	r7, r2
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808ec5a:	d862      	bhi.n	808ed22 <mbedtls_entropy_func+0xd6>
 808ec5c:	f44f 7681 	mov.w	r6, #258	; 0x102
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 808ec60:	3e01      	subs	r6, #1
 808ec62:	d053      	beq.n	808ed0c <mbedtls_entropy_func+0xc0>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
            goto exit;
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 808ec64:	4628      	mov	r0, r5
 808ec66:	f7ff ff84 	bl	808eb72 <_ZL23entropy_gather_internalP23mbedtls_entropy_context>
 808ec6a:	4604      	mov	r4, r0
 808ec6c:	2800      	cmp	r0, #0
 808ec6e:	d14f      	bne.n	808ed10 <mbedtls_entropy_func+0xc4>
 808ec70:	462a      	mov	r2, r5
            goto exit;

        done = 1;
        for( i = 0; i < ctx->source_count; i++ )
 808ec72:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 808ec76:	2101      	movs	r1, #1
 808ec78:	429c      	cmp	r4, r3
 808ec7a:	da0a      	bge.n	808ec92 <mbedtls_entropy_func+0x46>
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
 808ec7c:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
            goto exit;

        done = 1;
        for( i = 0; i < ctx->source_count; i++ )
 808ec80:	3401      	adds	r4, #1
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
 808ec82:	4686      	mov	lr, r0
 808ec84:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 808ec88:	3214      	adds	r2, #20
 808ec8a:	4586      	cmp	lr, r0
 808ec8c:	bf38      	it	cc
 808ec8e:	2100      	movcc	r1, #0

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
            goto exit;

        done = 1;
        for( i = 0; i < ctx->source_count; i++ )
 808ec90:	e7f2      	b.n	808ec78 <mbedtls_entropy_func+0x2c>
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
    }
    while( ! done );
 808ec92:	2900      	cmp	r1, #0
 808ec94:	d0e4      	beq.n	808ec60 <mbedtls_entropy_func+0x14>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 808ec96:	2240      	movs	r2, #64	; 0x40
 808ec98:	2100      	movs	r1, #0
 808ec9a:	4668      	mov	r0, sp
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 808ec9c:	f105 0608 	add.w	r6, r5, #8
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
    }
    while( ! done );

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 808eca0:	f004 fa23 	bl	80930ea <memset>
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 808eca4:	4669      	mov	r1, sp
 808eca6:	4630      	mov	r0, r6
 808eca8:	f7ff fdda 	bl	808e860 <mbedtls_sha512_finish_ret>
 808ecac:	4604      	mov	r4, r0
 808ecae:	bb78      	cbnz	r0, 808ed10 <mbedtls_entropy_func+0xc4>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 808ecb0:	4630      	mov	r0, r6
 808ecb2:	f7fe fea1 	bl	808d9f8 <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 808ecb6:	4630      	mov	r0, r6
 808ecb8:	f7fe fe9a 	bl	808d9f0 <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 808ecbc:	4621      	mov	r1, r4
 808ecbe:	4630      	mov	r0, r6
 808ecc0:	f7fe feaa 	bl	808da18 <mbedtls_sha512_starts_ret>
 808ecc4:	4604      	mov	r4, r0
 808ecc6:	bb18      	cbnz	r0, 808ed10 <mbedtls_entropy_func+0xc4>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 808ecc8:	2240      	movs	r2, #64	; 0x40
 808ecca:	4669      	mov	r1, sp
 808eccc:	4630      	mov	r0, r6
 808ecce:	f7ff fd7f 	bl	808e7d0 <mbedtls_sha512_update_ret>
 808ecd2:	4604      	mov	r4, r0
 808ecd4:	b9e0      	cbnz	r0, 808ed10 <mbedtls_entropy_func+0xc4>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 808ecd6:	4603      	mov	r3, r0
 808ecd8:	466a      	mov	r2, sp
 808ecda:	2140      	movs	r1, #64	; 0x40
 808ecdc:	4668      	mov	r0, sp
 808ecde:	f7ff fef2 	bl	808eac6 <mbedtls_sha512_ret>
 808ece2:	4604      	mov	r4, r0
 808ece4:	b9a0      	cbnz	r0, 808ed10 <mbedtls_entropy_func+0xc4>
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
        ctx->source[i].size = 0;
 808ece6:	4621      	mov	r1, r4
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808ece8:	f8d5 60e0 	ldr.w	r6, [r5, #224]	; 0xe0
 808ecec:	4603      	mov	r3, r0
        ctx->source[i].size = 0;
 808ecee:	2014      	movs	r0, #20
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808ecf0:	42b3      	cmp	r3, r6
 808ecf2:	da05      	bge.n	808ed00 <mbedtls_entropy_func+0xb4>
        ctx->source[i].size = 0;
 808ecf4:	fb00 5203 	mla	r2, r0, r3, r5
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808ecf8:	3301      	adds	r3, #1
        ctx->source[i].size = 0;
 808ecfa:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808ecfe:	e7f7      	b.n	808ecf0 <mbedtls_entropy_func+0xa4>
        ctx->source[i].size = 0;

    memcpy( output, buf, len );
 808ed00:	463a      	mov	r2, r7
 808ed02:	4669      	mov	r1, sp
 808ed04:	4640      	mov	r0, r8
 808ed06:	f004 f9ca 	bl	809309e <memcpy>
 808ed0a:	e001      	b.n	808ed10 <mbedtls_entropy_func+0xc4>
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 808ed0c:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 808ed10:	2300      	movs	r3, #0
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808ed12:	4619      	mov	r1, r3
 808ed14:	eb0d 0203 	add.w	r2, sp, r3
 808ed18:	3301      	adds	r3, #1
 808ed1a:	2b41      	cmp	r3, #65	; 0x41
 808ed1c:	d004      	beq.n	808ed28 <mbedtls_entropy_func+0xdc>
 808ed1e:	7011      	strb	r1, [r2, #0]
 808ed20:	e7f8      	b.n	808ed14 <mbedtls_entropy_func+0xc8>
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 808ed22:	f06f 003b 	mvn.w	r0, #59	; 0x3b
 808ed26:	e000      	b.n	808ed2a <mbedtls_entropy_func+0xde>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 808ed28:	4620      	mov	r0, r4
}
 808ed2a:	b010      	add	sp, #64	; 0x40
 808ed2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808ed30 <mbedtls_pem_init>:
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
}

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 808ed30:	2300      	movs	r3, #0
 808ed32:	6003      	str	r3, [r0, #0]
 808ed34:	6043      	str	r3, [r0, #4]
 808ed36:	6083      	str	r3, [r0, #8]
 808ed38:	4770      	bx	lr
	...

0808ed3c <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 808ed3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808ed40:	4689      	mov	r9, r1
 808ed42:	b085      	sub	sp, #20
 808ed44:	4690      	mov	r8, r2
 808ed46:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 808ed48:	4606      	mov	r6, r0
 808ed4a:	2800      	cmp	r0, #0
 808ed4c:	d067      	beq.n	808ee1e <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 808ed4e:	4618      	mov	r0, r3
 808ed50:	f004 f9f3 	bl	809313a <strstr>

    if( s1 == NULL )
 808ed54:	4604      	mov	r4, r0
 808ed56:	2800      	cmp	r0, #0
 808ed58:	d063      	beq.n	808ee22 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 808ed5a:	4641      	mov	r1, r8
 808ed5c:	4638      	mov	r0, r7
 808ed5e:	f004 f9ec 	bl	809313a <strstr>

    if( s2 == NULL || s2 <= s1 )
 808ed62:	4605      	mov	r5, r0
 808ed64:	2800      	cmp	r0, #0
 808ed66:	d05c      	beq.n	808ee22 <mbedtls_pem_read_buffer+0xe6>
 808ed68:	4284      	cmp	r4, r0
 808ed6a:	d25a      	bcs.n	808ee22 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808ed6c:	4648      	mov	r0, r9
 808ed6e:	f004 f9dc 	bl	809312a <strlen>
    if( *s1 == ' '  ) s1++;
 808ed72:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808ed74:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 808ed76:	2a20      	cmp	r2, #32
 808ed78:	bf08      	it	eq
 808ed7a:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 808ed7c:	781a      	ldrb	r2, [r3, #0]
 808ed7e:	2a0d      	cmp	r2, #13
 808ed80:	bf08      	it	eq
 808ed82:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 808ed84:	781a      	ldrb	r2, [r3, #0]
 808ed86:	2a0a      	cmp	r2, #10
 808ed88:	d14b      	bne.n	808ee22 <mbedtls_pem_read_buffer+0xe6>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808ed8a:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
 808ed8c:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808ed8e:	f004 f9cc 	bl	809312a <strlen>
    if( *end == ' '  ) end++;
 808ed92:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808ed94:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 808ed96:	2a20      	cmp	r2, #32
 808ed98:	bf08      	it	eq
 808ed9a:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 808ed9c:	781a      	ldrb	r2, [r3, #0]
 808ed9e:	2a0d      	cmp	r2, #13
 808eda0:	bf08      	it	eq
 808eda2:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 808eda4:	781a      	ldrb	r2, [r3, #0]
 808eda6:	2a0a      	cmp	r2, #10
 808eda8:	bf08      	it	eq
 808edaa:	3301      	addeq	r3, #1
    *use_len = end - data;
 808edac:	1bdb      	subs	r3, r3, r7
 808edae:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808edb0:	1b2f      	subs	r7, r5, r4
 808edb2:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
 808edb4:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808edb6:	dd05      	ble.n	808edc4 <mbedtls_pem_read_buffer+0x88>
 808edb8:	2216      	movs	r2, #22
 808edba:	4920      	ldr	r1, [pc, #128]	; (808ee3c <mbedtls_pem_read_buffer+0x100>)
 808edbc:	4620      	mov	r0, r4
 808edbe:	f004 f95f 	bl	8093080 <memcmp>
 808edc2:	b380      	cbz	r0, 808ee26 <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 808edc4:	42a5      	cmp	r5, r4
 808edc6:	d930      	bls.n	808ee2a <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 808edc8:	2100      	movs	r1, #0
 808edca:	9700      	str	r7, [sp, #0]
 808edcc:	4623      	mov	r3, r4
 808edce:	aa03      	add	r2, sp, #12
 808edd0:	4608      	mov	r0, r1
 808edd2:	f7f8 fe01 	bl	80879d8 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 808edd6:	302c      	adds	r0, #44	; 0x2c
 808edd8:	d029      	beq.n	808ee2e <mbedtls_pem_read_buffer+0xf2>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 808edda:	f8dd 800c 	ldr.w	r8, [sp, #12]
 808edde:	2001      	movs	r0, #1
 808ede0:	4641      	mov	r1, r8
 808ede2:	f004 f937 	bl	8093054 <calloc>
 808ede6:	4605      	mov	r5, r0
 808ede8:	b318      	cbz	r0, 808ee32 <mbedtls_pem_read_buffer+0xf6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 808edea:	4623      	mov	r3, r4
 808edec:	9700      	str	r7, [sp, #0]
 808edee:	aa03      	add	r2, sp, #12
 808edf0:	4641      	mov	r1, r8
 808edf2:	f7f8 fdf1 	bl	80879d8 <mbedtls_base64_decode>
 808edf6:	9b03      	ldr	r3, [sp, #12]
 808edf8:	4604      	mov	r4, r0
 808edfa:	b168      	cbz	r0, 808ee18 <mbedtls_pem_read_buffer+0xdc>
    {
        mbedtls_zeroize( buf, len );
 808edfc:	462a      	mov	r2, r5
 808edfe:	442b      	add	r3, r5
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808ee00:	2100      	movs	r1, #0
 808ee02:	429a      	cmp	r2, r3
 808ee04:	d002      	beq.n	808ee0c <mbedtls_pem_read_buffer+0xd0>
 808ee06:	7011      	strb	r1, [r2, #0]
 808ee08:	3201      	adds	r2, #1
 808ee0a:	e7fa      	b.n	808ee02 <mbedtls_pem_read_buffer+0xc6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
    {
        mbedtls_zeroize( buf, len );
        mbedtls_free( buf );
 808ee0c:	4628      	mov	r0, r5
 808ee0e:	f001 fe61 	bl	8090ad4 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808ee12:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
 808ee16:	e00d      	b.n	808ee34 <mbedtls_pem_read_buffer+0xf8>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 808ee18:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 808ee1a:	6073      	str	r3, [r6, #4]

    return( 0 );
 808ee1c:	e00a      	b.n	808ee34 <mbedtls_pem_read_buffer+0xf8>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 808ee1e:	4808      	ldr	r0, [pc, #32]	; (808ee40 <mbedtls_pem_read_buffer+0x104>)
 808ee20:	e008      	b.n	808ee34 <mbedtls_pem_read_buffer+0xf8>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 808ee22:	4808      	ldr	r0, [pc, #32]	; (808ee44 <mbedtls_pem_read_buffer+0x108>)
 808ee24:	e006      	b.n	808ee34 <mbedtls_pem_read_buffer+0xf8>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 808ee26:	4808      	ldr	r0, [pc, #32]	; (808ee48 <mbedtls_pem_read_buffer+0x10c>)
 808ee28:	e004      	b.n	808ee34 <mbedtls_pem_read_buffer+0xf8>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 808ee2a:	4808      	ldr	r0, [pc, #32]	; (808ee4c <mbedtls_pem_read_buffer+0x110>)
 808ee2c:	e002      	b.n	808ee34 <mbedtls_pem_read_buffer+0xf8>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808ee2e:	4808      	ldr	r0, [pc, #32]	; (808ee50 <mbedtls_pem_read_buffer+0x114>)
 808ee30:	e000      	b.n	808ee34 <mbedtls_pem_read_buffer+0xf8>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 808ee32:	4808      	ldr	r0, [pc, #32]	; (808ee54 <mbedtls_pem_read_buffer+0x118>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 808ee34:	b005      	add	sp, #20
 808ee36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808ee3a:	bf00      	nop
 808ee3c:	08095408 	.word	0x08095408
 808ee40:	ffffeb80 	.word	0xffffeb80
 808ee44:	ffffef80 	.word	0xffffef80
 808ee48:	ffffec00 	.word	0xffffec00
 808ee4c:	ffffef00 	.word	0xffffef00
 808ee50:	ffffeed4 	.word	0xffffeed4
 808ee54:	ffffee80 	.word	0xffffee80

0808ee58 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808ee58:	b510      	push	{r4, lr}
    if( ctx->buf != NULL )
 808ee5a:	6803      	ldr	r3, [r0, #0]

    return( 0 );
}

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808ee5c:	4604      	mov	r4, r0
    if( ctx->buf != NULL )
 808ee5e:	b13b      	cbz	r3, 808ee70 <mbedtls_pem_free+0x18>
 808ee60:	6842      	ldr	r2, [r0, #4]
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808ee62:	2100      	movs	r1, #0
 808ee64:	441a      	add	r2, r3
 808ee66:	429a      	cmp	r2, r3
 808ee68:	d002      	beq.n	808ee70 <mbedtls_pem_free+0x18>
 808ee6a:	7019      	strb	r1, [r3, #0]
 808ee6c:	3301      	adds	r3, #1
 808ee6e:	e7fa      	b.n	808ee66 <mbedtls_pem_free+0xe>

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
    if( ctx->buf != NULL )
        mbedtls_zeroize( ctx->buf, ctx->buflen );
    mbedtls_free( ctx->buf );
 808ee70:	6820      	ldr	r0, [r4, #0]
 808ee72:	f001 fe2f 	bl	8090ad4 <free>
    mbedtls_free( ctx->info );
 808ee76:	68a0      	ldr	r0, [r4, #8]
 808ee78:	f001 fe2c 	bl	8090ad4 <free>
 808ee7c:	f104 020c 	add.w	r2, r4, #12
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808ee80:	2300      	movs	r3, #0
 808ee82:	4294      	cmp	r4, r2
 808ee84:	d002      	beq.n	808ee8c <mbedtls_pem_free+0x34>
 808ee86:	7023      	strb	r3, [r4, #0]
 808ee88:	3401      	adds	r4, #1
 808ee8a:	e7fa      	b.n	808ee82 <mbedtls_pem_free+0x2a>
 808ee8c:	bd10      	pop	{r4, pc}
	...

0808ee90 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808ee90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808ee94:	4606      	mov	r6, r0
 808ee96:	4688      	mov	r8, r1
 808ee98:	b096      	sub	sp, #88	; 0x58
 808ee9a:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808ee9c:	4b79      	ldr	r3, [pc, #484]	; (808f084 <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808ee9e:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 808eea2:	4615      	mov	r5, r2
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808eea4:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 808eea8:	aa08      	add	r2, sp, #32
 808eeaa:	4614      	mov	r4, r2
 808eeac:	6818      	ldr	r0, [r3, #0]
 808eeae:	6859      	ldr	r1, [r3, #4]
 808eeb0:	3308      	adds	r3, #8
 808eeb2:	c403      	stmia	r4!, {r0, r1}
 808eeb4:	4573      	cmp	r3, lr
 808eeb6:	4622      	mov	r2, r4
 808eeb8:	d1f7      	bne.n	808eeaa <mbedtls_rsa_deduce_primes+0x1a>
 808eeba:	6818      	ldr	r0, [r3, #0]
 808eebc:	889b      	ldrh	r3, [r3, #4]
 808eebe:	6020      	str	r0, [r4, #0]
 808eec0:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 808eec2:	2f00      	cmp	r7, #0
 808eec4:	f000 80b8 	beq.w	808f038 <mbedtls_rsa_deduce_primes+0x1a8>
 808eec8:	f1b9 0f00 	cmp.w	r9, #0
 808eecc:	f000 80b4 	beq.w	808f038 <mbedtls_rsa_deduce_primes+0x1a8>
 808eed0:	68bb      	ldr	r3, [r7, #8]
 808eed2:	2b00      	cmp	r3, #0
 808eed4:	f040 80b0 	bne.w	808f038 <mbedtls_rsa_deduce_primes+0x1a8>
 808eed8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 808eedc:	2900      	cmp	r1, #0
 808eede:	f040 80ab 	bne.w	808f038 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808eee2:	4630      	mov	r0, r6
 808eee4:	f7fc fc5a 	bl	808b79c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808eee8:	2800      	cmp	r0, #0
 808eeea:	f340 80a5 	ble.w	808f038 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808eeee:	2101      	movs	r1, #1
 808eef0:	4628      	mov	r0, r5
 808eef2:	f7fc fc53 	bl	808b79c <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808eef6:	2800      	cmp	r0, #0
 808eef8:	f340 809e 	ble.w	808f038 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808eefc:	4631      	mov	r1, r6
 808eefe:	4628      	mov	r0, r5
 808ef00:	f7fc fc07 	bl	808b712 <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808ef04:	2800      	cmp	r0, #0
 808ef06:	f280 8097 	bge.w	808f038 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808ef0a:	2101      	movs	r1, #1
 808ef0c:	4640      	mov	r0, r8
 808ef0e:	f7fc fc45 	bl	808b79c <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808ef12:	2800      	cmp	r0, #0
 808ef14:	f340 8090 	ble.w	808f038 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808ef18:	4631      	mov	r1, r6
 808ef1a:	4640      	mov	r0, r8
 808ef1c:	f7fc fbf9 	bl	808b712 <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808ef20:	2800      	cmp	r0, #0
 808ef22:	f280 8089 	bge.w	808f038 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 808ef26:	a805      	add	r0, sp, #20
 808ef28:	f7fc f98e 	bl	808b248 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 808ef2c:	a802      	add	r0, sp, #8
 808ef2e:	f7fc f98b 	bl	808b248 <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 808ef32:	4642      	mov	r2, r8
 808ef34:	4629      	mov	r1, r5
 808ef36:	a802      	add	r0, sp, #8
 808ef38:	f7fc fd4f 	bl	808b9da <mbedtls_mpi_mul_mpi>
 808ef3c:	4604      	mov	r4, r0
 808ef3e:	2800      	cmp	r0, #0
 808ef40:	d172      	bne.n	808f028 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 808ef42:	a902      	add	r1, sp, #8
 808ef44:	2201      	movs	r2, #1
 808ef46:	4608      	mov	r0, r1
 808ef48:	f7fc fd31 	bl	808b9ae <mbedtls_mpi_sub_int>
 808ef4c:	4604      	mov	r4, r0
 808ef4e:	2800      	cmp	r0, #0
 808ef50:	d16a      	bne.n	808f028 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 808ef52:	a802      	add	r0, sp, #8
 808ef54:	f7fc fa18 	bl	808b388 <mbedtls_mpi_lsb>
 808ef58:	fa1f fa80 	uxth.w	sl, r0
 808ef5c:	f1ba 0f00 	cmp.w	sl, #0
 808ef60:	d102      	bne.n	808ef68 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 808ef62:	f06f 0403 	mvn.w	r4, #3
 808ef66:	e05f      	b.n	808f028 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 808ef68:	4651      	mov	r1, sl
 808ef6a:	a802      	add	r0, sp, #8
 808ef6c:	f7fc faf2 	bl	808b554 <mbedtls_mpi_shift_r>
 808ef70:	4604      	mov	r4, r0
 808ef72:	2800      	cmp	r0, #0
 808ef74:	d158      	bne.n	808f028 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
 808ef76:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
 808ef78:	681d      	ldr	r5, [r3, #0]
 808ef7a:	f005 0507 	and.w	r5, r5, #7
 808ef7e:	1e6b      	subs	r3, r5, #1
 808ef80:	425d      	negs	r5, r3
 808ef82:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 808ef84:	ab16      	add	r3, sp, #88	; 0x58
 808ef86:	442b      	add	r3, r5
 808ef88:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 808ef8c:	a805      	add	r0, sp, #20
 808ef8e:	f7fc f9ce 	bl	808b32e <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808ef92:	4632      	mov	r2, r6
 808ef94:	a905      	add	r1, sp, #20
 808ef96:	4638      	mov	r0, r7
 808ef98:	f7fd f9ac 	bl	808c2f4 <mbedtls_mpi_gcd>
 808ef9c:	4604      	mov	r4, r0
 808ef9e:	2800      	cmp	r0, #0
 808efa0:	d142      	bne.n	808f028 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 808efa2:	2101      	movs	r1, #1
 808efa4:	4638      	mov	r0, r7
 808efa6:	f7fc fbf9 	bl	808b79c <mbedtls_mpi_cmp_int>
 808efaa:	b120      	cbz	r0, 808efb6 <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
 808efac:	3501      	adds	r5, #1
 808efae:	b2ad      	uxth	r5, r5
 808efb0:	2d36      	cmp	r5, #54	; 0x36
 808efb2:	d1e7      	bne.n	808ef84 <mbedtls_rsa_deduce_primes+0xf4>
 808efb4:	e7d5      	b.n	808ef62 <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 808efb6:	a905      	add	r1, sp, #20
 808efb8:	f8cd 9000 	str.w	r9, [sp]
 808efbc:	4633      	mov	r3, r6
 808efbe:	aa02      	add	r2, sp, #8
 808efc0:	4608      	mov	r0, r1
 808efc2:	f7fc ff78 	bl	808beb6 <mbedtls_mpi_exp_mod>
 808efc6:	4604      	mov	r4, r0
 808efc8:	bb70      	cbnz	r0, 808f028 <mbedtls_rsa_deduce_primes+0x198>
 808efca:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 808efce:	2101      	movs	r1, #1
 808efd0:	a805      	add	r0, sp, #20
 808efd2:	f7fc fbe3 	bl	808b79c <mbedtls_mpi_cmp_int>
 808efd6:	b930      	cbnz	r0, 808efe6 <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 808efd8:	2101      	movs	r1, #1
 808efda:	a805      	add	r0, sp, #20
 808efdc:	f7fc fbde 	bl	808b79c <mbedtls_mpi_cmp_int>
 808efe0:	2800      	cmp	r0, #0
 808efe2:	d0e3      	beq.n	808efac <mbedtls_rsa_deduce_primes+0x11c>
 808efe4:	e7bd      	b.n	808ef62 <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 808efe6:	a905      	add	r1, sp, #20
 808efe8:	2201      	movs	r2, #1
 808efea:	4608      	mov	r0, r1
 808efec:	f7fc fcc9 	bl	808b982 <mbedtls_mpi_add_int>
 808eff0:	4604      	mov	r4, r0
 808eff2:	b9c8      	cbnz	r0, 808f028 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808eff4:	4632      	mov	r2, r6
 808eff6:	a905      	add	r1, sp, #20
 808eff8:	4638      	mov	r0, r7
 808effa:	f7fd f97b 	bl	808c2f4 <mbedtls_mpi_gcd>
 808effe:	4604      	mov	r4, r0
 808f000:	b990      	cbnz	r0, 808f028 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808f002:	2101      	movs	r1, #1
 808f004:	4638      	mov	r0, r7
 808f006:	f7fc fbc9 	bl	808b79c <mbedtls_mpi_cmp_int>
 808f00a:	2801      	cmp	r0, #1
 808f00c:	d117      	bne.n	808f03e <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 808f00e:	4631      	mov	r1, r6
 808f010:	4638      	mov	r0, r7
 808f012:	f7fc fb7e 	bl	808b712 <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808f016:	3001      	adds	r0, #1
 808f018:	d111      	bne.n	808f03e <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 808f01a:	4621      	mov	r1, r4
 808f01c:	463b      	mov	r3, r7
 808f01e:	4632      	mov	r2, r6
 808f020:	4648      	mov	r0, r9
 808f022:	f7fc fd56 	bl	808bad2 <mbedtls_mpi_div_mpi>
 808f026:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
 808f028:	a805      	add	r0, sp, #20
 808f02a:	f7fc f914 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 808f02e:	a802      	add	r0, sp, #8
 808f030:	f7fc f911 	bl	808b256 <mbedtls_mpi_free>
    return( ret );
 808f034:	4620      	mov	r0, r4
 808f036:	e021      	b.n	808f07c <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808f038:	f06f 0003 	mvn.w	r0, #3
 808f03c:	e01e      	b.n	808f07c <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f03e:	a905      	add	r1, sp, #20
 808f040:	2201      	movs	r2, #1
 808f042:	4608      	mov	r0, r1
 808f044:	f7fc fcb3 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f048:	4604      	mov	r4, r0
 808f04a:	2800      	cmp	r0, #0
 808f04c:	d1ec      	bne.n	808f028 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 808f04e:	aa05      	add	r2, sp, #20
 808f050:	4611      	mov	r1, r2
 808f052:	4610      	mov	r0, r2
 808f054:	f7fc fcc1 	bl	808b9da <mbedtls_mpi_mul_mpi>
 808f058:	4604      	mov	r4, r0
 808f05a:	2800      	cmp	r0, #0
 808f05c:	d1e4      	bne.n	808f028 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 808f05e:	a905      	add	r1, sp, #20
 808f060:	4632      	mov	r2, r6
 808f062:	4608      	mov	r0, r1
 808f064:	f7fc fef5 	bl	808be52 <mbedtls_mpi_mod_mpi>
 808f068:	4604      	mov	r4, r0
 808f06a:	2800      	cmp	r0, #0
 808f06c:	d1dc      	bne.n	808f028 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 808f06e:	f108 0801 	add.w	r8, r8, #1
 808f072:	fa1f f888 	uxth.w	r8, r8
 808f076:	45c2      	cmp	sl, r8
 808f078:	d2a9      	bcs.n	808efce <mbedtls_rsa_deduce_primes+0x13e>
 808f07a:	e7ad      	b.n	808efd8 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 808f07c:	b016      	add	sp, #88	; 0x58
 808f07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808f082:	bf00      	nop
 808f084:	0809541f 	.word	0x0809541f

0808f088 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 808f088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808f08c:	4604      	mov	r4, r0
 808f08e:	b086      	sub	sp, #24
 808f090:	460e      	mov	r6, r1
 808f092:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 808f094:	461d      	mov	r5, r3
 808f096:	b18b      	cbz	r3, 808f0bc <mbedtls_rsa_deduce_private_exponent+0x34>
 808f098:	2100      	movs	r1, #0
 808f09a:	4618      	mov	r0, r3
 808f09c:	f7fc fb7e 	bl	808b79c <mbedtls_mpi_cmp_int>
 808f0a0:	4680      	mov	r8, r0
 808f0a2:	b958      	cbnz	r0, 808f0bc <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f0a4:	2101      	movs	r1, #1
 808f0a6:	4620      	mov	r0, r4
 808f0a8:	f7fc fb78 	bl	808b79c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808f0ac:	2800      	cmp	r0, #0
 808f0ae:	dd05      	ble.n	808f0bc <mbedtls_rsa_deduce_private_exponent+0x34>
 808f0b0:	2101      	movs	r1, #1
 808f0b2:	4630      	mov	r0, r6
 808f0b4:	f7fc fb72 	bl	808b79c <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f0b8:	2800      	cmp	r0, #0
 808f0ba:	dc02      	bgt.n	808f0c2 <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808f0bc:	f06f 0003 	mvn.w	r0, #3
 808f0c0:	e03c      	b.n	808f13c <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 808f0c2:	4641      	mov	r1, r8
 808f0c4:	4638      	mov	r0, r7
 808f0c6:	f7fc fb69 	bl	808b79c <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808f0ca:	2800      	cmp	r0, #0
 808f0cc:	d0f6      	beq.n	808f0bc <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
 808f0ce:	4668      	mov	r0, sp
 808f0d0:	f7fc f8ba 	bl	808b248 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808f0d4:	a803      	add	r0, sp, #12
 808f0d6:	f7fc f8b7 	bl	808b248 <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808f0da:	4621      	mov	r1, r4
 808f0dc:	2201      	movs	r2, #1
 808f0de:	4668      	mov	r0, sp
 808f0e0:	f7fc fc65 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f0e4:	4604      	mov	r4, r0
 808f0e6:	bb10      	cbnz	r0, 808f12e <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808f0e8:	2201      	movs	r2, #1
 808f0ea:	4631      	mov	r1, r6
 808f0ec:	a803      	add	r0, sp, #12
 808f0ee:	f7fc fc5e 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f0f2:	4604      	mov	r4, r0
 808f0f4:	b9d8      	cbnz	r0, 808f12e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 808f0f6:	aa03      	add	r2, sp, #12
 808f0f8:	4669      	mov	r1, sp
 808f0fa:	4628      	mov	r0, r5
 808f0fc:	f7fd f8fa 	bl	808c2f4 <mbedtls_mpi_gcd>
 808f100:	4604      	mov	r4, r0
 808f102:	b9a0      	cbnz	r0, 808f12e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 808f104:	aa03      	add	r2, sp, #12
 808f106:	4669      	mov	r1, sp
 808f108:	4668      	mov	r0, sp
 808f10a:	f7fc fc66 	bl	808b9da <mbedtls_mpi_mul_mpi>
 808f10e:	4604      	mov	r4, r0
 808f110:	b968      	cbnz	r0, 808f12e <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 808f112:	4601      	mov	r1, r0
 808f114:	462b      	mov	r3, r5
 808f116:	466a      	mov	r2, sp
 808f118:	4668      	mov	r0, sp
 808f11a:	f7fc fcda 	bl	808bad2 <mbedtls_mpi_div_mpi>
 808f11e:	4604      	mov	r4, r0
 808f120:	b928      	cbnz	r0, 808f12e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 808f122:	466a      	mov	r2, sp
 808f124:	4639      	mov	r1, r7
 808f126:	4628      	mov	r0, r5
 808f128:	f7fd f98c 	bl	808c444 <mbedtls_mpi_inv_mod>
 808f12c:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
 808f12e:	4668      	mov	r0, sp
 808f130:	f7fc f891 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808f134:	a803      	add	r0, sp, #12
 808f136:	f7fc f88e 	bl	808b256 <mbedtls_mpi_free>

    return( ret );
 808f13a:	4620      	mov	r0, r4
}
 808f13c:	b006      	add	sp, #24
 808f13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808f144 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808f148:	4699      	mov	r9, r3
 808f14a:	b087      	sub	sp, #28
 808f14c:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808f14e:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f150:	460d      	mov	r5, r1
 808f152:	4690      	mov	r8, r2
 808f154:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 808f156:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808f158:	f7fc f876 	bl	808b248 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808f15c:	a803      	add	r0, sp, #12
 808f15e:	f7fc f873 	bl	808b248 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 808f162:	f1b9 0f00 	cmp.w	r9, #0
 808f166:	d101      	bne.n	808f16c <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 808f168:	b9f7      	cbnz	r7, 808f1a8 <mbedtls_rsa_validate_crt+0x64>
 808f16a:	e035      	b.n	808f1d8 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
 808f16c:	2c00      	cmp	r4, #0
 808f16e:	d058      	beq.n	808f222 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808f170:	2201      	movs	r2, #1
 808f172:	4621      	mov	r1, r4
 808f174:	4668      	mov	r0, sp
 808f176:	f7fc fc1a 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f17a:	2800      	cmp	r0, #0
 808f17c:	d148      	bne.n	808f210 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 808f17e:	4642      	mov	r2, r8
 808f180:	4649      	mov	r1, r9
 808f182:	a803      	add	r0, sp, #12
 808f184:	f7fc fbdb 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808f188:	2800      	cmp	r0, #0
 808f18a:	d141      	bne.n	808f210 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808f18c:	a903      	add	r1, sp, #12
 808f18e:	466a      	mov	r2, sp
 808f190:	4608      	mov	r0, r1
 808f192:	f7fc fe5e 	bl	808be52 <mbedtls_mpi_mod_mpi>
 808f196:	2800      	cmp	r0, #0
 808f198:	d13a      	bne.n	808f210 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808f19a:	4601      	mov	r1, r0
 808f19c:	a803      	add	r0, sp, #12
 808f19e:	f7fc fafd 	bl	808b79c <mbedtls_mpi_cmp_int>
 808f1a2:	2800      	cmp	r0, #0
 808f1a4:	d13f      	bne.n	808f226 <mbedtls_rsa_validate_crt+0xe2>
 808f1a6:	e7df      	b.n	808f168 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
 808f1a8:	b3dd      	cbz	r5, 808f222 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 808f1aa:	2201      	movs	r2, #1
 808f1ac:	4629      	mov	r1, r5
 808f1ae:	4668      	mov	r0, sp
 808f1b0:	f7fc fbfd 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f1b4:	bb60      	cbnz	r0, 808f210 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 808f1b6:	4642      	mov	r2, r8
 808f1b8:	4639      	mov	r1, r7
 808f1ba:	a803      	add	r0, sp, #12
 808f1bc:	f7fc fbbf 	bl	808b93e <mbedtls_mpi_sub_mpi>
 808f1c0:	bb30      	cbnz	r0, 808f210 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808f1c2:	a903      	add	r1, sp, #12
 808f1c4:	466a      	mov	r2, sp
 808f1c6:	4608      	mov	r0, r1
 808f1c8:	f7fc fe43 	bl	808be52 <mbedtls_mpi_mod_mpi>
 808f1cc:	bb00      	cbnz	r0, 808f210 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808f1ce:	4601      	mov	r1, r0
 808f1d0:	a803      	add	r0, sp, #12
 808f1d2:	f7fc fae3 	bl	808b79c <mbedtls_mpi_cmp_int>
 808f1d6:	bb30      	cbnz	r0, 808f226 <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 808f1d8:	b1c6      	cbz	r6, 808f20c <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
 808f1da:	b314      	cbz	r4, 808f222 <mbedtls_rsa_validate_crt+0xde>
 808f1dc:	b30d      	cbz	r5, 808f222 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 808f1de:	462a      	mov	r2, r5
 808f1e0:	4631      	mov	r1, r6
 808f1e2:	4668      	mov	r0, sp
 808f1e4:	f7fc fbf9 	bl	808b9da <mbedtls_mpi_mul_mpi>
 808f1e8:	b990      	cbnz	r0, 808f210 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f1ea:	2201      	movs	r2, #1
 808f1ec:	4669      	mov	r1, sp
 808f1ee:	4668      	mov	r0, sp
 808f1f0:	f7fc fbdd 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f1f4:	b960      	cbnz	r0, 808f210 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 808f1f6:	4622      	mov	r2, r4
 808f1f8:	4669      	mov	r1, sp
 808f1fa:	4668      	mov	r0, sp
 808f1fc:	f7fc fe29 	bl	808be52 <mbedtls_mpi_mod_mpi>
 808f200:	b930      	cbnz	r0, 808f210 <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808f202:	4601      	mov	r1, r0
 808f204:	4668      	mov	r0, sp
 808f206:	f7fc fac9 	bl	808b79c <mbedtls_mpi_cmp_int>
 808f20a:	b960      	cbnz	r0, 808f226 <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f20c:	2400      	movs	r4, #0
 808f20e:	e00b      	b.n	808f228 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 808f210:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 808f214:	d007      	beq.n	808f226 <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 808f216:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 808f21a:	d002      	beq.n	808f222 <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f21c:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 808f220:	e002      	b.n	808f228 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f222:	4c06      	ldr	r4, [pc, #24]	; (808f23c <mbedtls_rsa_validate_crt+0xf8>)
 808f224:	e000      	b.n	808f228 <mbedtls_rsa_validate_crt+0xe4>
 808f226:	4c06      	ldr	r4, [pc, #24]	; (808f240 <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 808f228:	4668      	mov	r0, sp
 808f22a:	f7fc f814 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808f22e:	a803      	add	r0, sp, #12
 808f230:	f7fc f811 	bl	808b256 <mbedtls_mpi_free>

    return( ret );
}
 808f234:	4620      	mov	r0, r4
 808f236:	b007      	add	sp, #28
 808f238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808f23c:	ffffbf80 	.word	0xffffbf80
 808f240:	ffffbe00 	.word	0xffffbe00

0808f244 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808f244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808f248:	4688      	mov	r8, r1
 808f24a:	b087      	sub	sp, #28
 808f24c:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808f24e:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808f250:	4691      	mov	r9, r2
 808f252:	461e      	mov	r6, r3
 808f254:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808f256:	f7fb fff7 	bl	808b248 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808f25a:	a803      	add	r0, sp, #12
 808f25c:	f7fb fff4 	bl	808b248 <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 808f260:	f1b8 0f00 	cmp.w	r8, #0
 808f264:	d018      	beq.n	808f298 <mbedtls_rsa_validate_params+0x54>
 808f266:	f1b9 0f00 	cmp.w	r9, #0
 808f26a:	d015      	beq.n	808f298 <mbedtls_rsa_validate_params+0x54>
 808f26c:	b90d      	cbnz	r5, 808f272 <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f26e:	b9de      	cbnz	r6, 808f2a8 <mbedtls_rsa_validate_params+0x64>
 808f270:	e018      	b.n	808f2a4 <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 808f272:	464a      	mov	r2, r9
 808f274:	4641      	mov	r1, r8
 808f276:	4668      	mov	r0, sp
 808f278:	f7fc fbaf 	bl	808b9da <mbedtls_mpi_mul_mpi>
 808f27c:	4604      	mov	r4, r0
 808f27e:	bb68      	cbnz	r0, 808f2dc <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808f280:	2101      	movs	r1, #1
 808f282:	4628      	mov	r0, r5
 808f284:	f7fc fa8a 	bl	808b79c <mbedtls_mpi_cmp_int>
 808f288:	2800      	cmp	r0, #0
 808f28a:	dd26      	ble.n	808f2da <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 808f28c:	4629      	mov	r1, r5
 808f28e:	4668      	mov	r0, sp
 808f290:	f7fc fa3f 	bl	808b712 <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808f294:	bb08      	cbnz	r0, 808f2da <mbedtls_rsa_validate_params+0x96>
 808f296:	e016      	b.n	808f2c6 <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808f298:	b125      	cbz	r5, 808f2a4 <mbedtls_rsa_validate_params+0x60>
 808f29a:	b9b6      	cbnz	r6, 808f2ca <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f29c:	f1b8 0f00 	cmp.w	r8, #0
 808f2a0:	f040 808a 	bne.w	808f3b8 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f2a4:	2400      	movs	r4, #0
 808f2a6:	e019      	b.n	808f2dc <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f2a8:	2f00      	cmp	r7, #0
 808f2aa:	d0fb      	beq.n	808f2a4 <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f2ac:	2101      	movs	r1, #1
 808f2ae:	4640      	mov	r0, r8
 808f2b0:	f7fc fa74 	bl	808b79c <mbedtls_mpi_cmp_int>
 808f2b4:	2800      	cmp	r0, #0
 808f2b6:	dd10      	ble.n	808f2da <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 808f2b8:	2101      	movs	r1, #1
 808f2ba:	4648      	mov	r0, r9
 808f2bc:	f7fc fa6e 	bl	808b79c <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f2c0:	2800      	cmp	r0, #0
 808f2c2:	dc19      	bgt.n	808f2f8 <mbedtls_rsa_validate_params+0xb4>
 808f2c4:	e009      	b.n	808f2da <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808f2c6:	2e00      	cmp	r6, #0
 808f2c8:	d0ec      	beq.n	808f2a4 <mbedtls_rsa_validate_params+0x60>
 808f2ca:	2f00      	cmp	r7, #0
 808f2cc:	d0e6      	beq.n	808f29c <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808f2ce:	2101      	movs	r1, #1
 808f2d0:	4630      	mov	r0, r6
 808f2d2:	f7fc fa63 	bl	808b79c <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f2d6:	2800      	cmp	r0, #0
 808f2d8:	dc5b      	bgt.n	808f392 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f2da:	4c3c      	ldr	r4, [pc, #240]	; (808f3cc <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 808f2dc:	4668      	mov	r0, sp
 808f2de:	f7fb ffba 	bl	808b256 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808f2e2:	a803      	add	r0, sp, #12
 808f2e4:	f7fb ffb7 	bl	808b256 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 808f2e8:	2c00      	cmp	r4, #0
 808f2ea:	d06a      	beq.n	808f3c2 <mbedtls_rsa_validate_params+0x17e>
 808f2ec:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 808f2f0:	d067      	beq.n	808f3c2 <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f2f2:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
 808f2f6:	e064      	b.n	808f3c2 <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808f2f8:	463a      	mov	r2, r7
 808f2fa:	4631      	mov	r1, r6
 808f2fc:	4668      	mov	r0, sp
 808f2fe:	f7fc fb6c 	bl	808b9da <mbedtls_mpi_mul_mpi>
 808f302:	4604      	mov	r4, r0
 808f304:	2800      	cmp	r0, #0
 808f306:	d1e9      	bne.n	808f2dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f308:	2201      	movs	r2, #1
 808f30a:	4669      	mov	r1, sp
 808f30c:	4668      	mov	r0, sp
 808f30e:	f7fc fb4e 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f312:	4604      	mov	r4, r0
 808f314:	2800      	cmp	r0, #0
 808f316:	d1e1      	bne.n	808f2dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 808f318:	2201      	movs	r2, #1
 808f31a:	4641      	mov	r1, r8
 808f31c:	a803      	add	r0, sp, #12
 808f31e:	f7fc fb46 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f322:	4604      	mov	r4, r0
 808f324:	2800      	cmp	r0, #0
 808f326:	d1d9      	bne.n	808f2dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808f328:	aa03      	add	r2, sp, #12
 808f32a:	4669      	mov	r1, sp
 808f32c:	4668      	mov	r0, sp
 808f32e:	f7fc fd90 	bl	808be52 <mbedtls_mpi_mod_mpi>
 808f332:	4604      	mov	r4, r0
 808f334:	2800      	cmp	r0, #0
 808f336:	d1d1      	bne.n	808f2dc <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808f338:	4601      	mov	r1, r0
 808f33a:	4668      	mov	r0, sp
 808f33c:	f7fc fa2e 	bl	808b79c <mbedtls_mpi_cmp_int>
 808f340:	2800      	cmp	r0, #0
 808f342:	d1ca      	bne.n	808f2da <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808f344:	463a      	mov	r2, r7
 808f346:	4631      	mov	r1, r6
 808f348:	4668      	mov	r0, sp
 808f34a:	f7fc fb46 	bl	808b9da <mbedtls_mpi_mul_mpi>
 808f34e:	4604      	mov	r4, r0
 808f350:	2800      	cmp	r0, #0
 808f352:	d1c3      	bne.n	808f2dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f354:	2201      	movs	r2, #1
 808f356:	4669      	mov	r1, sp
 808f358:	4668      	mov	r0, sp
 808f35a:	f7fc fb28 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f35e:	4604      	mov	r4, r0
 808f360:	2800      	cmp	r0, #0
 808f362:	d1bb      	bne.n	808f2dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808f364:	2201      	movs	r2, #1
 808f366:	4649      	mov	r1, r9
 808f368:	a803      	add	r0, sp, #12
 808f36a:	f7fc fb20 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f36e:	4604      	mov	r4, r0
 808f370:	2800      	cmp	r0, #0
 808f372:	d1b3      	bne.n	808f2dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808f374:	aa03      	add	r2, sp, #12
 808f376:	4669      	mov	r1, sp
 808f378:	4668      	mov	r0, sp
 808f37a:	f7fc fd6a 	bl	808be52 <mbedtls_mpi_mod_mpi>
 808f37e:	4604      	mov	r4, r0
 808f380:	2800      	cmp	r0, #0
 808f382:	d1ab      	bne.n	808f2dc <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808f384:	4601      	mov	r1, r0
 808f386:	4668      	mov	r0, sp
 808f388:	f7fc fa08 	bl	808b79c <mbedtls_mpi_cmp_int>
 808f38c:	2800      	cmp	r0, #0
 808f38e:	d089      	beq.n	808f2a4 <mbedtls_rsa_validate_params+0x60>
 808f390:	e7a3      	b.n	808f2da <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f392:	2101      	movs	r1, #1
 808f394:	4638      	mov	r0, r7
 808f396:	f7fc fa01 	bl	808b79c <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808f39a:	2800      	cmp	r0, #0
 808f39c:	dd9d      	ble.n	808f2da <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f39e:	4629      	mov	r1, r5
 808f3a0:	4630      	mov	r0, r6
 808f3a2:	f7fc f9b6 	bl	808b712 <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f3a6:	2800      	cmp	r0, #0
 808f3a8:	da97      	bge.n	808f2da <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808f3aa:	4629      	mov	r1, r5
 808f3ac:	4638      	mov	r0, r7
 808f3ae:	f7fc f9b0 	bl	808b712 <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f3b2:	2800      	cmp	r0, #0
 808f3b4:	da91      	bge.n	808f2da <mbedtls_rsa_validate_params+0x96>
 808f3b6:	e771      	b.n	808f29c <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f3b8:	f1b9 0f00 	cmp.w	r9, #0
 808f3bc:	f47f af57 	bne.w	808f26e <mbedtls_rsa_validate_params+0x2a>
 808f3c0:	e770      	b.n	808f2a4 <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
 808f3c2:	4620      	mov	r0, r4
 808f3c4:	b007      	add	sp, #28
 808f3c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808f3ca:	bf00      	nop
 808f3cc:	ffffbe00 	.word	0xffffbe00

0808f3d0 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808f3d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 808f3d4:	469a      	mov	sl, r3
 808f3d6:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808f3d8:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808f3da:	460e      	mov	r6, r1
 808f3dc:	4691      	mov	r9, r2
 808f3de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 808f3e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808f3e4:	f7fb ff30 	bl	808b248 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 808f3e8:	f1ba 0f00 	cmp.w	sl, #0
 808f3ec:	d103      	bne.n	808f3f6 <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 808f3ee:	f1b8 0f00 	cmp.w	r8, #0
 808f3f2:	d110      	bne.n	808f416 <mbedtls_rsa_deduce_crt+0x46>
 808f3f4:	e01d      	b.n	808f432 <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 808f3f6:	2201      	movs	r2, #1
 808f3f8:	4639      	mov	r1, r7
 808f3fa:	a801      	add	r0, sp, #4
 808f3fc:	f7fc fad7 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f400:	4604      	mov	r4, r0
 808f402:	b9f8      	cbnz	r0, 808f444 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 808f404:	aa01      	add	r2, sp, #4
 808f406:	4649      	mov	r1, r9
 808f408:	4650      	mov	r0, sl
 808f40a:	f7fc fd22 	bl	808be52 <mbedtls_mpi_mod_mpi>
 808f40e:	4604      	mov	r4, r0
 808f410:	2800      	cmp	r0, #0
 808f412:	d0ec      	beq.n	808f3ee <mbedtls_rsa_deduce_crt+0x1e>
 808f414:	e016      	b.n	808f444 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 808f416:	2201      	movs	r2, #1
 808f418:	4631      	mov	r1, r6
 808f41a:	a801      	add	r0, sp, #4
 808f41c:	f7fc fac7 	bl	808b9ae <mbedtls_mpi_sub_int>
 808f420:	4604      	mov	r4, r0
 808f422:	b978      	cbnz	r0, 808f444 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 808f424:	aa01      	add	r2, sp, #4
 808f426:	4649      	mov	r1, r9
 808f428:	4640      	mov	r0, r8
 808f42a:	f7fc fd12 	bl	808be52 <mbedtls_mpi_mod_mpi>
 808f42e:	4604      	mov	r4, r0
 808f430:	b940      	cbnz	r0, 808f444 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 808f432:	b90d      	cbnz	r5, 808f438 <mbedtls_rsa_deduce_crt+0x68>
 808f434:	462c      	mov	r4, r5
 808f436:	e005      	b.n	808f444 <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 808f438:	463a      	mov	r2, r7
 808f43a:	4631      	mov	r1, r6
 808f43c:	4628      	mov	r0, r5
 808f43e:	f7fd f801 	bl	808c444 <mbedtls_mpi_inv_mod>
 808f442:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
 808f444:	a801      	add	r0, sp, #4
 808f446:	f7fb ff06 	bl	808b256 <mbedtls_mpi_free>

    return( ret );
}
 808f44a:	4620      	mov	r0, r4
 808f44c:	b004      	add	sp, #16
 808f44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808f452 <_ZL15mbedtls_zeroizePvj>:
#define mbedtls_printf printf
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808f452:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f454:	2300      	movs	r3, #0
 808f456:	4288      	cmp	r0, r1
 808f458:	d002      	beq.n	808f460 <_ZL15mbedtls_zeroizePvj+0xe>
 808f45a:	7003      	strb	r3, [r0, #0]
 808f45c:	3001      	adds	r0, #1
 808f45e:	e7fa      	b.n	808f456 <_ZL15mbedtls_zeroizePvj+0x4>
 808f460:	4770      	bx	lr

0808f462 <_ZL15block_cipher_dfPhPKhj>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 808f462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = 0;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 808f466:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 808f46a:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 808f46e:	4607      	mov	r7, r0
 808f470:	460e      	mov	r6, r1
 808f472:	4615      	mov	r5, r2
    int ret = 0;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 808f474:	f200 80a2 	bhi.w	808f5bc <_ZL15block_cipher_dfPhPKhj+0x15a>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 808f478:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 808f47c:	2100      	movs	r1, #0
 808f47e:	a85e      	add	r0, sp, #376	; 0x178
 808f480:	f003 fe33 	bl	80930ea <memset>
    mbedtls_aes_init( &aes_ctx );
 808f484:	a818      	add	r0, sp, #96	; 0x60
 808f486:	f7fd fb5f 	bl	808cb48 <mbedtls_aes_init>
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
 808f48a:	0a2b      	lsrs	r3, r5, #8
 808f48c:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 808f490:	2330      	movs	r3, #48	; 0x30
 808f492:	f88d 318f 	strb.w	r3, [sp, #399]	; 0x18f
    memcpy( p, data, data_len );
 808f496:	ab64      	add	r3, sp, #400	; 0x190
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
 808f498:	2400      	movs	r4, #0
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
 808f49a:	462a      	mov	r2, r5
 808f49c:	4618      	mov	r0, r3
 808f49e:	4631      	mov	r1, r6
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
 808f4a0:	f88d 4188 	strb.w	r4, [sp, #392]	; 0x188
    *p++ = ( data_len >> 16 ) & 0xff;
 808f4a4:	f88d 4189 	strb.w	r4, [sp, #393]	; 0x189
    *p++ = ( data_len >> 8  ) & 0xff;
    *p++ = ( data_len       ) & 0xff;
 808f4a8:	f88d 518b 	strb.w	r5, [sp, #395]	; 0x18b
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
 808f4ac:	f003 fdf7 	bl	809309e <memcpy>
    p[data_len] = 0x80;

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 808f4b0:	4623      	mov	r3, r4
    *p++ = ( data_len >> 8  ) & 0xff;
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
    p[data_len] = 0x80;
 808f4b2:	2280      	movs	r2, #128	; 0x80
 808f4b4:	5542      	strb	r2, [r0, r5]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
        key[i] = i;
 808f4b6:	f10d 0810 	add.w	r8, sp, #16
 808f4ba:	f803 3008 	strb.w	r3, [r3, r8]
    memcpy( p, data, data_len );
    p[data_len] = 0x80;

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 808f4be:	3301      	adds	r3, #1
 808f4c0:	2b20      	cmp	r3, #32
 808f4c2:	d1fa      	bne.n	808f4ba <_ZL15block_cipher_dfPhPKhj+0x58>
        key[i] = i;

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808f4c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 808f4c8:	4641      	mov	r1, r8
 808f4ca:	a818      	add	r0, sp, #96	; 0x60
 808f4cc:	f7fd fb4c 	bl	808cb68 <mbedtls_aes_setkey_enc>
 808f4d0:	4604      	mov	r4, r0
 808f4d2:	2800      	cmp	r0, #0
 808f4d4:	d157      	bne.n	808f586 <_ZL15block_cipher_dfPhPKhj+0x124>
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
    p[data_len] = 0x80;

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 808f4d6:	4606      	mov	r6, r0
 808f4d8:	3519      	adds	r5, #25
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808f4da:	2210      	movs	r2, #16
 808f4dc:	2100      	movs	r1, #0
 808f4de:	4668      	mov	r0, sp
 808f4e0:	f003 fe03 	bl	80930ea <memset>
        use_len = buf_len;
 808f4e4:	46a9      	mov	r9, r5
 808f4e6:	f20d 1a77 	addw	sl, sp, #375	; 0x177
 808f4ea:	f10d 33ff 	add.w	r3, sp, #4294967295
 808f4ee:	f10a 0110 	add.w	r1, sl, #16

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
 808f4f2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 808f4f6:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 808f4fa:	4042      	eors	r2, r0
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        use_len = buf_len;

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 808f4fc:	458a      	cmp	sl, r1
                chain[i] ^= p[i];
 808f4fe:	701a      	strb	r2, [r3, #0]
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        use_len = buf_len;

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 808f500:	d1f7      	bne.n	808f4f2 <_ZL15block_cipher_dfPhPKhj+0x90>
                chain[i] ^= p[i];
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 808f502:	f1b9 0f10 	cmp.w	r9, #16

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 808f506:	466b      	mov	r3, sp
 808f508:	466a      	mov	r2, sp
 808f50a:	f04f 0101 	mov.w	r1, #1
 808f50e:	a818      	add	r0, sp, #96	; 0x60
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 808f510:	bf94      	ite	ls
 808f512:	ebc9 0909 	rsbls	r9, r9, r9
 808f516:	f1a9 0910 	subhi.w	r9, r9, #16

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 808f51a:	f7fe f82b 	bl	808d574 <mbedtls_aes_crypt_ecb>
 808f51e:	4604      	mov	r4, r0
 808f520:	bb88      	cbnz	r0, 808f586 <_ZL15block_cipher_dfPhPKhj+0x124>
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        use_len = buf_len;

        while( use_len > 0 )
 808f522:	f1b9 0f00 	cmp.w	r9, #0
 808f526:	d1e0      	bne.n	808f4ea <_ZL15block_cipher_dfPhPKhj+0x88>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808f528:	466c      	mov	r4, sp
 808f52a:	ab0c      	add	r3, sp, #48	; 0x30
 808f52c:	18f2      	adds	r2, r6, r3
 808f52e:	4623      	mov	r3, r4
 808f530:	cb03      	ldmia	r3!, {r0, r1}
 808f532:	4543      	cmp	r3, r8
 808f534:	6010      	str	r0, [r2, #0]
 808f536:	6051      	str	r1, [r2, #4]
 808f538:	461c      	mov	r4, r3
 808f53a:	f102 0208 	add.w	r2, r2, #8
 808f53e:	d1f6      	bne.n	808f52e <_ZL15block_cipher_dfPhPKhj+0xcc>

        /*
         * Update IV
         */
        buf[3]++;
 808f540:	f89d 317b 	ldrb.w	r3, [sp, #379]	; 0x17b
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808f544:	3610      	adds	r6, #16
        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );

        /*
         * Update IV
         */
        buf[3]++;
 808f546:	3301      	adds	r3, #1
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808f548:	2e30      	cmp	r6, #48	; 0x30
        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );

        /*
         * Update IV
         */
        buf[3]++;
 808f54a:	f88d 317b 	strb.w	r3, [sp, #379]	; 0x17b
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808f54e:	d1c4      	bne.n	808f4da <_ZL15block_cipher_dfPhPKhj+0x78>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808f550:	f44f 7280 	mov.w	r2, #256	; 0x100
 808f554:	a90c      	add	r1, sp, #48	; 0x30
 808f556:	a818      	add	r0, sp, #96	; 0x60
 808f558:	f7fd fb06 	bl	808cb68 <mbedtls_aes_setkey_enc>
 808f55c:	4604      	mov	r4, r0
 808f55e:	b990      	cbnz	r0, 808f586 <_ZL15block_cipher_dfPhPKhj+0x124>
 808f560:	463d      	mov	r5, r7
 808f562:	f107 0930 	add.w	r9, r7, #48	; 0x30
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )
 808f566:	ae14      	add	r6, sp, #80	; 0x50
 808f568:	4633      	mov	r3, r6
 808f56a:	4632      	mov	r2, r6
 808f56c:	2101      	movs	r1, #1
 808f56e:	a818      	add	r0, sp, #96	; 0x60
 808f570:	f7fe f800 	bl	808d574 <mbedtls_aes_crypt_ecb>
 808f574:	4604      	mov	r4, r0
 808f576:	b930      	cbnz	r0, 808f586 <_ZL15block_cipher_dfPhPKhj+0x124>
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808f578:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 808f57c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 808f580:	3510      	adds	r5, #16
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808f582:	45a9      	cmp	r9, r5
 808f584:	d1f0      	bne.n	808f568 <_ZL15block_cipher_dfPhPKhj+0x106>
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }
exit:
    mbedtls_aes_free( &aes_ctx );
 808f586:	a818      	add	r0, sp, #96	; 0x60
 808f588:	f7fd fae3 	bl	808cb52 <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_zeroize( buf, sizeof( buf ) );
 808f58c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 808f590:	a85e      	add	r0, sp, #376	; 0x178
 808f592:	f7ff ff5e 	bl	808f452 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 808f596:	2130      	movs	r1, #48	; 0x30
 808f598:	eb0d 0001 	add.w	r0, sp, r1
 808f59c:	f7ff ff59 	bl	808f452 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( key, sizeof( key ) );
 808f5a0:	2120      	movs	r1, #32
 808f5a2:	4640      	mov	r0, r8
 808f5a4:	f7ff ff55 	bl	808f452 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( chain, sizeof( chain ) );
 808f5a8:	2110      	movs	r1, #16
 808f5aa:	4668      	mov	r0, sp
 808f5ac:	f7ff ff51 	bl	808f452 <_ZL15mbedtls_zeroizePvj>
    if( 0 != ret )
 808f5b0:	b13c      	cbz	r4, 808f5c2 <_ZL15block_cipher_dfPhPKhj+0x160>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 808f5b2:	2130      	movs	r1, #48	; 0x30
 808f5b4:	4638      	mov	r0, r7
 808f5b6:	f7ff ff4c 	bl	808f452 <_ZL15mbedtls_zeroizePvj>
 808f5ba:	e002      	b.n	808f5c2 <_ZL15block_cipher_dfPhPKhj+0x160>

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 808f5bc:	f06f 0037 	mvn.w	r0, #55	; 0x37
 808f5c0:	e000      	b.n	808f5c4 <_ZL15block_cipher_dfPhPKhj+0x162>
 808f5c2:	4620      	mov	r0, r4
        */
        mbedtls_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
    }

    return( ret );
}
 808f5c4:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
 808f5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808f5cc <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>:

static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 808f5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 808f5ce:	b08d      	sub	sp, #52	; 0x34
 808f5d0:	4604      	mov	r4, r0
 808f5d2:	460d      	mov	r5, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;
    int ret = 0;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 808f5d4:	2230      	movs	r2, #48	; 0x30
 808f5d6:	2100      	movs	r1, #0
 808f5d8:	4668      	mov	r0, sp
 808f5da:	f003 fd86 	bl	80930ea <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808f5de:	2700      	movs	r7, #0
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 808f5e0:	f104 0620 	add.w	r6, r4, #32
 808f5e4:	eb0d 0307 	add.w	r3, sp, r7
 808f5e8:	f104 0110 	add.w	r1, r4, #16
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
            if( ++ctx->counter[i - 1] != 0 )
 808f5ec:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 808f5f0:	3201      	adds	r2, #1
 808f5f2:	b2d2      	uxtb	r2, r2
 808f5f4:	700a      	strb	r2, [r1, #0]
 808f5f6:	b90a      	cbnz	r2, 808f5fc <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x30>
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 808f5f8:	42a1      	cmp	r1, r4
 808f5fa:	d1f7      	bne.n	808f5ec <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x20>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 808f5fc:	4622      	mov	r2, r4
 808f5fe:	2101      	movs	r1, #1
 808f600:	4630      	mov	r0, r6
 808f602:	f7fd ffb7 	bl	808d574 <mbedtls_aes_crypt_ecb>
 808f606:	bb08      	cbnz	r0, 808f64c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x80>
    int i, j;
    int ret = 0;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808f608:	3710      	adds	r7, #16
 808f60a:	2f30      	cmp	r7, #48	; 0x30
 808f60c:	d1ea      	bne.n	808f5e4 <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x18>
 808f60e:	1e6b      	subs	r3, r5, #1
 808f610:	f10d 32ff 	add.w	r2, sp, #4294967295
 808f614:	352f      	adds	r5, #47	; 0x2f

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 808f616:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 808f61a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 808f61e:	4041      	eors	r1, r0
        }

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 808f620:	42ab      	cmp	r3, r5
        tmp[i] ^= data[i];
 808f622:	7011      	strb	r1, [r2, #0]
        }

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 808f624:	d1f7      	bne.n	808f616 <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x4a>
        tmp[i] ^= data[i];

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808f626:	f44f 7280 	mov.w	r2, #256	; 0x100
 808f62a:	4669      	mov	r1, sp
 808f62c:	4630      	mov	r0, r6
 808f62e:	f7fd fa9b 	bl	808cb68 <mbedtls_aes_setkey_enc>
 808f632:	b958      	cbnz	r0, 808f64c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x80>
    {
        return( ret );
    }
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808f634:	aa08      	add	r2, sp, #32
 808f636:	ad0c      	add	r5, sp, #48	; 0x30
 808f638:	4613      	mov	r3, r2
 808f63a:	cb03      	ldmia	r3!, {r0, r1}
 808f63c:	42ab      	cmp	r3, r5
 808f63e:	6020      	str	r0, [r4, #0]
 808f640:	6061      	str	r1, [r4, #4]
 808f642:	461a      	mov	r2, r3
 808f644:	f104 0408 	add.w	r4, r4, #8
 808f648:	d1f6      	bne.n	808f638 <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x6c>

    return( 0 );
 808f64a:	2000      	movs	r0, #0
}
 808f64c:	b00d      	add	sp, #52	; 0x34
 808f64e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808f650 <mbedtls_ctr_drbg_init>:
/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 808f650:	f44f 72a0 	mov.w	r2, #320	; 0x140
 808f654:	2100      	movs	r1, #0
 808f656:	f003 bd48 	b.w	80930ea <memset>

0808f65a <mbedtls_ctr_drbg_reseed>:
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 808f65a:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 808f65c:	6985      	ldr	r5, [r0, #24]
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 808f65e:	b0e1      	sub	sp, #388	; 0x184
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 808f660:	f5b5 7fc0 	cmp.w	r5, #384	; 0x180
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 808f664:	4604      	mov	r4, r0
 808f666:	460f      	mov	r7, r1
 808f668:	4616      	mov	r6, r2
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 808f66a:	d829      	bhi.n	808f6c0 <mbedtls_ctr_drbg_reseed+0x66>
 808f66c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
 808f670:	4293      	cmp	r3, r2
 808f672:	d325      	bcc.n	808f6c0 <mbedtls_ctr_drbg_reseed+0x66>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 808f674:	f44f 72c0 	mov.w	r2, #384	; 0x180
 808f678:	2100      	movs	r1, #0
 808f67a:	4668      	mov	r0, sp
 808f67c:	f003 fd35 	bl	80930ea <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 808f680:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 808f684:	462a      	mov	r2, r5
 808f686:	4669      	mov	r1, sp
 808f688:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 808f68c:	4798      	blx	r3
 808f68e:	b9d0      	cbnz	r0, 808f6c6 <mbedtls_ctr_drbg_reseed+0x6c>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }

    seedlen += ctx->entropy_len;
 808f690:	69a5      	ldr	r5, [r4, #24]

    /*
     * Add additional data
     */
    if( additional && len )
 808f692:	b13f      	cbz	r7, 808f6a4 <mbedtls_ctr_drbg_reseed+0x4a>
 808f694:	b136      	cbz	r6, 808f6a4 <mbedtls_ctr_drbg_reseed+0x4a>
    {
        memcpy( seed + seedlen, additional, len );
 808f696:	eb0d 0005 	add.w	r0, sp, r5
 808f69a:	4632      	mov	r2, r6
 808f69c:	4639      	mov	r1, r7
 808f69e:	f003 fcfe 	bl	809309e <memcpy>
        seedlen += len;
 808f6a2:	4435      	add	r5, r6
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 808f6a4:	462a      	mov	r2, r5
 808f6a6:	4669      	mov	r1, sp
 808f6a8:	4668      	mov	r0, sp
 808f6aa:	f7ff feda 	bl	808f462 <_ZL15block_cipher_dfPhPKhj>
 808f6ae:	b960      	cbnz	r0, 808f6ca <mbedtls_ctr_drbg_reseed+0x70>
    }

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 808f6b0:	4669      	mov	r1, sp
 808f6b2:	4620      	mov	r0, r4
 808f6b4:	f7ff ff8a 	bl	808f5cc <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>
 808f6b8:	b938      	cbnz	r0, 808f6ca <mbedtls_ctr_drbg_reseed+0x70>
    {
        return( ret );
    }
    ctx->reseed_counter = 1;
 808f6ba:	2301      	movs	r3, #1
 808f6bc:	6123      	str	r3, [r4, #16]

    return( 0 );
 808f6be:	e004      	b.n	808f6ca <mbedtls_ctr_drbg_reseed+0x70>
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 808f6c0:	f06f 0037 	mvn.w	r0, #55	; 0x37
 808f6c4:	e001      	b.n	808f6ca <mbedtls_ctr_drbg_reseed+0x70>
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 808f6c6:	f06f 0033 	mvn.w	r0, #51	; 0x33
        return( ret );
    }
    ctx->reseed_counter = 1;

    return( 0 );
}
 808f6ca:	b061      	add	sp, #388	; 0x184
 808f6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808f6ce <mbedtls_ctr_drbg_seed_entropy_len>:
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 808f6ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808f6d2:	4604      	mov	r4, r0
 808f6d4:	b088      	sub	sp, #32
 808f6d6:	4688      	mov	r8, r1
 808f6d8:	4617      	mov	r7, r2
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 808f6da:	2100      	movs	r1, #0
 808f6dc:	2220      	movs	r2, #32

    mbedtls_aes_init( &ctx->aes_ctx );
 808f6de:	f104 0520 	add.w	r5, r4, #32
                   size_t entropy_len )
{
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 808f6e2:	4668      	mov	r0, sp
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 808f6e4:	461e      	mov	r6, r3
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 808f6e6:	f003 fd00 	bl	80930ea <memset>

    mbedtls_aes_init( &ctx->aes_ctx );
 808f6ea:	4628      	mov	r0, r5
 808f6ec:	f7fd fa2c 	bl	808cb48 <mbedtls_aes_init>

    ctx->f_entropy = f_entropy;
    ctx->p_entropy = p_entropy;

    ctx->entropy_len = entropy_len;
 808f6f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );

    mbedtls_aes_init( &ctx->aes_ctx );

    ctx->f_entropy = f_entropy;
 808f6f2:	f8c4 8138 	str.w	r8, [r4, #312]	; 0x138
    ctx->p_entropy = p_entropy;

    ctx->entropy_len = entropy_len;
 808f6f6:	61a3      	str	r3, [r4, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 808f6f8:	f242 7310 	movw	r3, #10000	; 0x2710
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );

    mbedtls_aes_init( &ctx->aes_ctx );

    ctx->f_entropy = f_entropy;
    ctx->p_entropy = p_entropy;
 808f6fc:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c

    ctx->entropy_len = entropy_len;
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 808f700:	61e3      	str	r3, [r4, #28]

    /*
     * Initialize with an empty key
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808f702:	f44f 7280 	mov.w	r2, #256	; 0x100
 808f706:	4669      	mov	r1, sp
 808f708:	4628      	mov	r0, r5
 808f70a:	f7fd fa2d 	bl	808cb68 <mbedtls_aes_setkey_enc>
 808f70e:	b920      	cbnz	r0, 808f71a <mbedtls_ctr_drbg_seed_entropy_len+0x4c>
    {
        return( ret );
    }

    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 808f710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 808f712:	4631      	mov	r1, r6
 808f714:	4620      	mov	r0, r4
 808f716:	f7ff ffa0 	bl	808f65a <mbedtls_ctr_drbg_reseed>
    {
        return( ret );
    }
    return( 0 );
}
 808f71a:	b008      	add	sp, #32
 808f71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808f720 <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len )
{
 808f720:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
 808f722:	2430      	movs	r4, #48	; 0x30
 808f724:	9401      	str	r4, [sp, #4]
 808f726:	9c04      	ldr	r4, [sp, #16]
 808f728:	9400      	str	r4, [sp, #0]
 808f72a:	f7ff ffd0 	bl	808f6ce <mbedtls_ctr_drbg_seed_entropy_len>
}
 808f72e:	b002      	add	sp, #8
 808f730:	bd10      	pop	{r4, pc}

0808f732 <mbedtls_ctr_drbg_random_with_add>:
}

int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 808f732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 808f736:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
}

int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 808f73a:	b090      	sub	sp, #64	; 0x40
 808f73c:	4604      	mov	r4, r0
 808f73e:	460e      	mov	r6, r1
 808f740:	4615      	mov	r5, r2
 808f742:	4698      	mov	r8, r3
 808f744:	9f16      	ldr	r7, [sp, #88]	; 0x58
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 808f746:	d84e      	bhi.n	808f7e6 <mbedtls_ctr_drbg_random_with_add+0xb4>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 808f748:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 808f74c:	d84e      	bhi.n	808f7ec <mbedtls_ctr_drbg_random_with_add+0xba>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 808f74e:	2230      	movs	r2, #48	; 0x30
 808f750:	2100      	movs	r1, #0
 808f752:	a804      	add	r0, sp, #16
 808f754:	f003 fcc9 	bl	80930ea <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 808f758:	6922      	ldr	r2, [r4, #16]
 808f75a:	69e3      	ldr	r3, [r4, #28]
 808f75c:	429a      	cmp	r2, r3
 808f75e:	dc01      	bgt.n	808f764 <mbedtls_ctr_drbg_random_with_add+0x32>
 808f760:	6963      	ldr	r3, [r4, #20]
 808f762:	b14b      	cbz	r3, 808f778 <mbedtls_ctr_drbg_random_with_add+0x46>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 808f764:	463a      	mov	r2, r7
 808f766:	4641      	mov	r1, r8
 808f768:	4620      	mov	r0, r4
 808f76a:	f7ff ff76 	bl	808f65a <mbedtls_ctr_drbg_reseed>
 808f76e:	2800      	cmp	r0, #0
 808f770:	d13e      	bne.n	808f7f0 <mbedtls_ctr_drbg_random_with_add+0xbe>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 808f772:	f104 0720 	add.w	r7, r4, #32
 808f776:	e028      	b.n	808f7ca <mbedtls_ctr_drbg_random_with_add+0x98>
            return( ret );
        }
        add_len = 0;
    }

    if( add_len > 0 )
 808f778:	2f00      	cmp	r7, #0
 808f77a:	d0fa      	beq.n	808f772 <mbedtls_ctr_drbg_random_with_add+0x40>
    {
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 808f77c:	463a      	mov	r2, r7
 808f77e:	4641      	mov	r1, r8
 808f780:	a804      	add	r0, sp, #16
 808f782:	f7ff fe6e 	bl	808f462 <_ZL15block_cipher_dfPhPKhj>
 808f786:	bb98      	cbnz	r0, 808f7f0 <mbedtls_ctr_drbg_random_with_add+0xbe>
        {
            return( ret );
        }
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 808f788:	a904      	add	r1, sp, #16
 808f78a:	4620      	mov	r0, r4
 808f78c:	f7ff ff1e 	bl	808f5cc <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>
 808f790:	e7ed      	b.n	808f76e <mbedtls_ctr_drbg_random_with_add+0x3c>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
            if( ++ctx->counter[i - 1] != 0 )
 808f792:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 808f796:	3301      	adds	r3, #1
 808f798:	b2db      	uxtb	r3, r3
 808f79a:	7013      	strb	r3, [r2, #0]
 808f79c:	b90b      	cbnz	r3, 808f7a2 <mbedtls_ctr_drbg_random_with_add+0x70>
    while( output_len > 0 )
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 808f79e:	42a2      	cmp	r2, r4
 808f7a0:	d1f7      	bne.n	808f792 <mbedtls_ctr_drbg_random_with_add+0x60>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 808f7a2:	466b      	mov	r3, sp
 808f7a4:	4622      	mov	r2, r4
 808f7a6:	2101      	movs	r1, #1
 808f7a8:	4638      	mov	r0, r7
 808f7aa:	f7fd fee3 	bl	808d574 <mbedtls_aes_crypt_ecb>
 808f7ae:	b9f8      	cbnz	r0, 808f7f0 <mbedtls_ctr_drbg_random_with_add+0xbe>
        {
            return( ret );
        }

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
                                                       output_len;
 808f7b0:	46a8      	mov	r8, r5
 808f7b2:	2d10      	cmp	r5, #16
 808f7b4:	bf28      	it	cs
 808f7b6:	f04f 0810 	movcs.w	r8, #16
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 808f7ba:	4630      	mov	r0, r6
 808f7bc:	4642      	mov	r2, r8
 808f7be:	4669      	mov	r1, sp
 808f7c0:	f003 fc6d 	bl	809309e <memcpy>
        p += use_len;
 808f7c4:	4446      	add	r6, r8
        output_len -= use_len;
 808f7c6:	ebc8 0505 	rsb	r5, r8, r5
        {
            return( ret );
        }
    }

    while( output_len > 0 )
 808f7ca:	b115      	cbz	r5, 808f7d2 <mbedtls_ctr_drbg_random_with_add+0xa0>
 808f7cc:	f104 0210 	add.w	r2, r4, #16
 808f7d0:	e7df      	b.n	808f792 <mbedtls_ctr_drbg_random_with_add+0x60>
        memcpy( p, tmp, use_len );
        p += use_len;
        output_len -= use_len;
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 808f7d2:	a904      	add	r1, sp, #16
 808f7d4:	4620      	mov	r0, r4
 808f7d6:	f7ff fef9 	bl	808f5cc <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>
 808f7da:	b948      	cbnz	r0, 808f7f0 <mbedtls_ctr_drbg_random_with_add+0xbe>
    {
        return( ret );
    }

    ctx->reseed_counter++;
 808f7dc:	6923      	ldr	r3, [r4, #16]

    return( 0 );
 808f7de:	4628      	mov	r0, r5
    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
    {
        return( ret );
    }

    ctx->reseed_counter++;
 808f7e0:	3301      	adds	r3, #1
 808f7e2:	6123      	str	r3, [r4, #16]

    return( 0 );
 808f7e4:	e004      	b.n	808f7f0 <mbedtls_ctr_drbg_random_with_add+0xbe>
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 808f7e6:	f06f 0035 	mvn.w	r0, #53	; 0x35
 808f7ea:	e001      	b.n	808f7f0 <mbedtls_ctr_drbg_random_with_add+0xbe>

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 808f7ec:	f06f 0037 	mvn.w	r0, #55	; 0x37
    }

    ctx->reseed_counter++;

    return( 0 );
}
 808f7f0:	b010      	add	sp, #64	; 0x40
 808f7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808f7f6 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 808f7f6:	b507      	push	{r0, r1, r2, lr}
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 808f7f8:	2300      	movs	r3, #0
 808f7fa:	9300      	str	r3, [sp, #0]
 808f7fc:	f7ff ff99 	bl	808f732 <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 808f800:	b003      	add	sp, #12
 808f802:	f85d fb04 	ldr.w	pc, [sp], #4

0808f806 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808f806:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808f808:	b10b      	cbz	r3, 808f80e <mbedtls_ssl_own_key+0x8>
 808f80a:	685b      	ldr	r3, [r3, #4]
 808f80c:	b913      	cbnz	r3, 808f814 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808f80e:	6803      	ldr	r3, [r0, #0]
 808f810:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->key );
 808f812:	b10b      	cbz	r3, 808f818 <mbedtls_ssl_own_key+0x12>
 808f814:	6858      	ldr	r0, [r3, #4]
 808f816:	4770      	bx	lr
 808f818:	4618      	mov	r0, r3
}
 808f81a:	4770      	bx	lr

0808f81c <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808f81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808f820:	6843      	ldr	r3, [r0, #4]

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808f822:	b095      	sub	sp, #84	; 0x54
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808f824:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808f826:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808f828:	f000 80c1 	beq.w	808f9ae <mbedtls_ssl_handshake_client_step+0x192>
 808f82c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808f82e:	2b00      	cmp	r3, #0
 808f830:	f000 80bd 	beq.w	808f9ae <mbedtls_ssl_handshake_client_step+0x192>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808f834:	f7fa f9ac 	bl	8089b90 <mbedtls_ssl_flush_output>
 808f838:	2800      	cmp	r0, #0
 808f83a:	f040 8514 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808f83e:	6863      	ldr	r3, [r4, #4]
 808f840:	2b0c      	cmp	r3, #12
 808f842:	d105      	bne.n	808f850 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
 808f844:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808f846:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 808f84a:	b10b      	cbz	r3, 808f850 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 808f84c:	2311      	movs	r3, #17
 808f84e:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 808f850:	6860      	ldr	r0, [r4, #4]
 808f852:	2811      	cmp	r0, #17
 808f854:	f200 80ab 	bhi.w	808f9ae <mbedtls_ssl_handshake_client_step+0x192>
 808f858:	e8df f010 	tbh	[pc, r0, lsl #1]
 808f85c:	00140012 	.word	0x00140012
 808f860:	00dc004b 	.word	0x00dc004b
 808f864:	010500e1 	.word	0x010500e1
 808f868:	012b0117 	.word	0x012b0117
 808f86c:	0190012f 	.word	0x0190012f
 808f870:	020201fe 	.word	0x020201fe
 808f874:	02290225 	.word	0x02290225
 808f878:	022f022d 	.word	0x022f022d
 808f87c:	020c00a9 	.word	0x020c00a9
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 808f880:	2301      	movs	r3, #1
 808f882:	e0ed      	b.n	808fa60 <mbedtls_ssl_handshake_client_step+0x244>
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
 808f884:	6821      	ldr	r1, [r4, #0]
 808f886:	698b      	ldr	r3, [r1, #24]
 808f888:	2b00      	cmp	r3, #0
 808f88a:	f000 821a 	beq.w	808fcc2 <mbedtls_ssl_handshake_client_step+0x4a6>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 808f88e:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
 808f892:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 808f894:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
 808f898:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 808f89a:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 808f89e:	2800      	cmp	r0, #0
 808f8a0:	f000 8085 	beq.w	808f9ae <mbedtls_ssl_handshake_client_step+0x192>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808f8a4:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 808f8a8:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808f8ac:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808f8b0:	1d33      	adds	r3, r6, #4
 808f8b2:	f891 105d 	ldrb.w	r1, [r1, #93]	; 0x5d
 808f8b6:	f7fb fac9 	bl	808ae4c <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808f8ba:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 808f8bc:	6b25      	ldr	r5, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808f8be:	699f      	ldr	r7, [r3, #24]
 808f8c0:	2204      	movs	r2, #4
 808f8c2:	f505 71ba 	add.w	r1, r5, #372	; 0x174
 808f8c6:	69d8      	ldr	r0, [r3, #28]
 808f8c8:	47b8      	blx	r7
 808f8ca:	2800      	cmp	r0, #0
 808f8cc:	f040 84cb 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 808f8d0:	6823      	ldr	r3, [r4, #0]
 808f8d2:	221c      	movs	r2, #28
 808f8d4:	699f      	ldr	r7, [r3, #24]
 808f8d6:	f505 71bc 	add.w	r1, r5, #376	; 0x178
 808f8da:	69d8      	ldr	r0, [r3, #28]
 808f8dc:	47b8      	blx	r7
 808f8de:	2800      	cmp	r0, #0
 808f8e0:	f040 84c1 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 808f8e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808f8e6:	1db1      	adds	r1, r6, #6
 808f8e8:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 808f8ec:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808f8f0:	e1eb      	b.n	808fcca <mbedtls_ssl_handshake_client_step+0x4ae>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808f8f2:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
 808f8f4:	6e65      	ldr	r5, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808f8f6:	f7fa fd85 	bl	808a404 <mbedtls_ssl_read_record>
 808f8fa:	2800      	cmp	r0, #0
 808f8fc:	f040 84b3 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808f900:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808f902:	2b16      	cmp	r3, #22
 808f904:	d006      	beq.n	808f914 <mbedtls_ssl_handshake_client_step+0xf8>
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808f906:	220a      	movs	r2, #10
 808f908:	2102      	movs	r1, #2
 808f90a:	4620      	mov	r0, r4
 808f90c:	f7fa fb2c 	bl	8089f68 <mbedtls_ssl_send_alert_message>
 808f910:	f000 bc5b 	b.w	80901ca <mbedtls_ssl_handshake_client_step+0x9ae>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 808f914:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808f916:	2b29      	cmp	r3, #41	; 0x29
 808f918:	d938      	bls.n	808f98c <mbedtls_ssl_handshake_client_step+0x170>
 808f91a:	782b      	ldrb	r3, [r5, #0]
 808f91c:	2b02      	cmp	r3, #2
 808f91e:	d135      	bne.n	808f98c <mbedtls_ssl_handshake_client_step+0x170>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808f920:	4621      	mov	r1, r4
 808f922:	f851 3b0c 	ldr.w	r3, [r1], #12
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 808f926:	f105 0804 	add.w	r8, r5, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808f92a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808f92e:	f104 0008 	add.w	r0, r4, #8
 808f932:	4643      	mov	r3, r8
 808f934:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808f938:	f7fb fa8b 	bl	808ae52 <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808f93c:	6823      	ldr	r3, [r4, #0]
 808f93e:	68a2      	ldr	r2, [r4, #8]
 808f940:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 808f944:	428a      	cmp	r2, r1
 808f946:	f2c0 830f 	blt.w	808ff68 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808f94a:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808f94c:	f893 005f 	ldrb.w	r0, [r3, #95]	; 0x5f
 808f950:	4281      	cmp	r1, r0
 808f952:	f2c0 8309 	blt.w	808ff68 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808f956:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 808f95a:	4282      	cmp	r2, r0
 808f95c:	f300 8304 	bgt.w	808ff68 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->major_ver > ssl->conf->max_major_ver ||
 808f960:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 808f964:	4299      	cmp	r1, r3
 808f966:	f300 82ff 	bgt.w	808ff68 <mbedtls_ssl_handshake_client_step+0x74c>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 808f96a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808f96c:	1daa      	adds	r2, r5, #6
 808f96e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808f972:	f105 0126 	add.w	r1, r5, #38	; 0x26
 808f976:	f852 0b04 	ldr.w	r0, [r2], #4
 808f97a:	428a      	cmp	r2, r1
 808f97c:	f843 0b04 	str.w	r0, [r3], #4
 808f980:	d1f9      	bne.n	808f976 <mbedtls_ssl_handshake_client_step+0x15a>

    n = buf[34];
 808f982:	f895 6026 	ldrb.w	r6, [r5, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
 808f986:	2e20      	cmp	r6, #32
 808f988:	f240 82f5 	bls.w	808ff76 <mbedtls_ssl_handshake_client_step+0x75a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808f98c:	2232      	movs	r2, #50	; 0x32
 808f98e:	e03a      	b.n	808fa06 <mbedtls_ssl_handshake_client_step+0x1ea>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 808f990:	4648      	mov	r0, r9
 808f992:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 808f996:	f7f6 fe1f 	bl	80865d8 <mbedtls_ssl_ciphersuite_from_id>
 808f99a:	f8ca 0000 	str.w	r0, [sl]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 808f99e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808f9a0:	6819      	ldr	r1, [r3, #0]
 808f9a2:	b939      	cbnz	r1, 808f9b4 <mbedtls_ssl_handshake_client_step+0x198>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808f9a4:	2250      	movs	r2, #80	; 0x50
 808f9a6:	2102      	movs	r1, #2
 808f9a8:	4620      	mov	r0, r4
 808f9aa:	f7fa fadd 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808f9ae:	48ae      	ldr	r0, [pc, #696]	; (808fc68 <mbedtls_ssl_handshake_client_step+0x44c>)
 808f9b0:	f000 bc59 	b.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 808f9b4:	4620      	mov	r0, r4
 808f9b6:	f7fa fdf1 	bl	808a59c <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808f9ba:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 808f9be:	3527      	adds	r5, #39	; 0x27
 808f9c0:	f8da 31e4 	ldr.w	r3, [sl, #484]	; 0x1e4
 808f9c4:	2b00      	cmp	r3, #0
 808f9c6:	f040 8311 	bne.w	808ffec <mbedtls_ssl_handshake_client_step+0x7d0>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808f9ca:	6863      	ldr	r3, [r4, #4]
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808f9cc:	4629      	mov	r1, r5
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808f9ce:	3301      	adds	r3, #1
 808f9d0:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
 808f9d2:	2300      	movs	r3, #0
 808f9d4:	f8ca 31e4 	str.w	r3, [sl, #484]	; 0x1e4
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 808f9d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f9da:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
 808f9de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f9e0:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
 808f9e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808f9e4:	4632      	mov	r2, r6
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
 808f9e6:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808f9e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808f9ea:	300c      	adds	r0, #12
 808f9ec:	f003 fb57 	bl	809309e <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 808f9f0:	6823      	ldr	r3, [r4, #0]
 808f9f2:	68e2      	ldr	r2, [r4, #12]
 808f9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808f9f8:	3b04      	subs	r3, #4
 808f9fa:	f853 0f04 	ldr.w	r0, [r3, #4]!
 808f9fe:	2800      	cmp	r0, #0
 808fa00:	f040 831b 	bne.w	809003a <mbedtls_ssl_handshake_client_step+0x81e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 808fa04:	222f      	movs	r2, #47	; 0x2f
 808fa06:	2102      	movs	r1, #2
 808fa08:	4620      	mov	r0, r4
 808fa0a:	f7fa faad 	bl	8089f68 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 808fa0e:	4897      	ldr	r0, [pc, #604]	; (808fc6c <mbedtls_ssl_handshake_client_step+0x450>)
 808fa10:	f000 bc29 	b.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 808fa14:	4620      	mov	r0, r4
 808fa16:	f7fb f913 	bl	808ac40 <mbedtls_ssl_parse_certificate>
           break;
 808fa1a:	f000 bc24 	b.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808fa1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808fa20:	681d      	ldr	r5, [r3, #0]
    unsigned char *p = NULL, *end = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808fa22:	7aab      	ldrb	r3, [r5, #10]
 808fa24:	2b01      	cmp	r3, #1
 808fa26:	d101      	bne.n	808fa2c <mbedtls_ssl_handshake_client_step+0x210>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
 808fa28:	2305      	movs	r3, #5
 808fa2a:	e386      	b.n	809013a <mbedtls_ssl_handshake_client_step+0x91e>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808fa2c:	4620      	mov	r0, r4
 808fa2e:	f7fa fce9 	bl	808a404 <mbedtls_ssl_read_record>
 808fa32:	2800      	cmp	r0, #0
 808fa34:	f040 8417 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808fa38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808fa3a:	2b16      	cmp	r3, #22
 808fa3c:	f47f af63 	bne.w	808f906 <mbedtls_ssl_handshake_client_step+0xea>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 808fa40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808fa42:	781b      	ldrb	r3, [r3, #0]
 808fa44:	2b0c      	cmp	r3, #12
 808fa46:	f000 813e 	beq.w	808fcc6 <mbedtls_ssl_handshake_client_step+0x4aa>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808fa4a:	7aab      	ldrb	r3, [r5, #10]
 808fa4c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 808fa50:	2b05      	cmp	r3, #5
 808fa52:	f47f af58 	bne.w	808f906 <mbedtls_ssl_handshake_client_step+0xea>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 808fa56:	2301      	movs	r3, #1
 808fa58:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 808fa5c:	6863      	ldr	r3, [r4, #4]
 808fa5e:	3301      	adds	r3, #1
 808fa60:	6063      	str	r3, [r4, #4]
 808fa62:	f000 bc00 	b.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808fa66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808fa68:	681b      	ldr	r3, [r3, #0]
 808fa6a:	7a9b      	ldrb	r3, [r3, #10]
 808fa6c:	3b01      	subs	r3, #1
 808fa6e:	b2db      	uxtb	r3, r3
 808fa70:	2b09      	cmp	r3, #9
 808fa72:	f200 8361 	bhi.w	8090138 <mbedtls_ssl_handshake_client_step+0x91c>
 808fa76:	f240 320f 	movw	r2, #783	; 0x30f
 808fa7a:	2501      	movs	r5, #1
 808fa7c:	fa05 f303 	lsl.w	r3, r5, r3
 808fa80:	401a      	ands	r2, r3
 808fa82:	2a00      	cmp	r2, #0
 808fa84:	f000 8358 	beq.w	8090138 <mbedtls_ssl_handshake_client_step+0x91c>
 808fa88:	e35a      	b.n	8090140 <mbedtls_ssl_handshake_client_step+0x924>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808fa8a:	4620      	mov	r0, r4
 808fa8c:	f7fa fcba 	bl	808a404 <mbedtls_ssl_read_record>
 808fa90:	2800      	cmp	r0, #0
 808fa92:	f040 83e8 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808fa96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808fa98:	2b16      	cmp	r3, #22
 808fa9a:	f040 8396 	bne.w	80901ca <mbedtls_ssl_handshake_client_step+0x9ae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808fa9e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808faa0:	2b04      	cmp	r3, #4
 808faa2:	f040 838b 	bne.w	80901bc <mbedtls_ssl_handshake_client_step+0x9a0>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 808faa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808faa8:	781b      	ldrb	r3, [r3, #0]
 808faaa:	2b0e      	cmp	r3, #14
 808faac:	f040 8386 	bne.w	80901bc <mbedtls_ssl_handshake_client_step+0x9a0>
 808fab0:	e7d4      	b.n	808fa5c <mbedtls_ssl_handshake_client_step+0x240>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 808fab2:	4620      	mov	r0, r4
 808fab4:	f7fa fcc4 	bl	808a440 <mbedtls_ssl_write_certificate>
           break;
 808fab8:	e3d5      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808faba:	6c23      	ldr	r3, [r4, #64]	; 0x40
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808fabc:	681b      	ldr	r3, [r3, #0]
 808fabe:	7a9f      	ldrb	r7, [r3, #10]
 808fac0:	2f01      	cmp	r7, #1
 808fac2:	f040 8100 	bne.w	808fcc6 <mbedtls_ssl_handshake_client_step+0x4aa>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 808fac6:	6820      	ldr	r0, [r4, #0]
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808fac8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808facc:	68e3      	ldr	r3, [r4, #12]
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808face:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808fad2:	f508 76da 	add.w	r6, r8, #436	; 0x1b4
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808fad6:	2b00      	cmp	r3, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808fad8:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 808fadc:	4633      	mov	r3, r6
 808fade:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808fae2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808fae6:	bf14      	ite	ne
 808fae8:	2502      	movne	r5, #2
 808faea:	2500      	moveq	r5, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808faec:	f7fb f9ae 	bl	808ae4c <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 808faf0:	6823      	ldr	r3, [r4, #0]
 808faf2:	222e      	movs	r2, #46	; 0x2e
 808faf4:	f8d3 9018 	ldr.w	r9, [r3, #24]
 808faf8:	f508 71db 	add.w	r1, r8, #438	; 0x1b6
 808fafc:	69d8      	ldr	r0, [r3, #28]
 808fafe:	47c8      	blx	r9
 808fb00:	2800      	cmp	r0, #0
 808fb02:	f040 83b0 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
 808fb06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808fb08:	2230      	movs	r2, #48	; 0x30
 808fb0a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    if( ssl->session_negotiate->peer_cert == NULL )
 808fb0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808fb10:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808fb12:	2800      	cmp	r0, #0
 808fb14:	f000 8359 	beq.w	80901ca <mbedtls_ssl_handshake_client_step+0x9ae>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 808fb18:	4639      	mov	r1, r7
 808fb1a:	30bc      	adds	r0, #188	; 0xbc
 808fb1c:	f7fc fe24 	bl	808c768 <mbedtls_pk_can_do>
 808fb20:	2800      	cmp	r0, #0
 808fb22:	f000 8354 	beq.w	80901ce <mbedtls_ssl_handshake_client_step+0x9b2>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 808fb26:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 808fb28:	6b21      	ldr	r1, [r4, #48]	; 0x30
 808fb2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808fb2c:	9104      	str	r1, [sp, #16]
 808fb2e:	69d1      	ldr	r1, [r2, #28]
 808fb30:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808fb32:	9103      	str	r1, [sp, #12]
 808fb34:	6992      	ldr	r2, [r2, #24]
 808fb36:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 808fb3a:	9202      	str	r2, [sp, #8]
 808fb3c:	f5c5 52ff 	rsb	r2, r5, #8160	; 0x1fe0
 808fb40:	321c      	adds	r2, #28
 808fb42:	9201      	str	r2, [sp, #4]
 808fb44:	aa08      	add	r2, sp, #32
 808fb46:	9200      	str	r2, [sp, #0]
 808fb48:	9a04      	ldr	r2, [sp, #16]
 808fb4a:	1d2b      	adds	r3, r5, #4
 808fb4c:	443b      	add	r3, r7
 808fb4e:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 808fb52:	4631      	mov	r1, r6
 808fb54:	30bc      	adds	r0, #188	; 0xbc
 808fb56:	f7fc fe71 	bl	808c83c <mbedtls_pk_encrypt>
 808fb5a:	2800      	cmp	r0, #0
 808fb5c:	f040 8383 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 808fb60:	2d00      	cmp	r5, #0
 808fb62:	f000 8336 	beq.w	80901d2 <mbedtls_ssl_handshake_client_step+0x9b6>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 808fb66:	9b08      	ldr	r3, [sp, #32]
 808fb68:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808fb6c:	0a19      	lsrs	r1, r3, #8
 808fb6e:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 808fb70:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808fb74:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 808fb76:	3302      	adds	r3, #2
 808fb78:	9308      	str	r3, [sp, #32]
 808fb7a:	e32a      	b.n	80901d2 <mbedtls_ssl_handshake_client_step+0x9b6>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808fb7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808fb7e:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808fb80:	681d      	ldr	r5, [r3, #0]
    size_t n = 0, offset = 0;
 808fb82:	2300      	movs	r3, #0
 808fb84:	9307      	str	r3, [sp, #28]
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808fb86:	f7f9 fe4f 	bl	8089828 <mbedtls_ssl_derive_keys>
 808fb8a:	2800      	cmp	r0, #0
 808fb8c:	f040 836b 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808fb90:	7aab      	ldrb	r3, [r5, #10]
 808fb92:	1f5a      	subs	r2, r3, #5
 808fb94:	2a03      	cmp	r2, #3
 808fb96:	d901      	bls.n	808fb9c <mbedtls_ssl_handshake_client_step+0x380>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 808fb98:	2b0b      	cmp	r3, #11
 808fb9a:	d102      	bne.n	808fba2 <mbedtls_ssl_handshake_client_step+0x386>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
 808fb9c:	6863      	ldr	r3, [r4, #4]
 808fb9e:	3301      	adds	r3, #1
 808fba0:	e2cb      	b.n	809013a <mbedtls_ssl_handshake_client_step+0x91e>
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 808fba2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 808fba6:	2b00      	cmp	r3, #0
 808fba8:	d0f8      	beq.n	808fb9c <mbedtls_ssl_handshake_client_step+0x380>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808fbaa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 808fbac:	b10d      	cbz	r5, 808fbb2 <mbedtls_ssl_handshake_client_step+0x396>
 808fbae:	686b      	ldr	r3, [r5, #4]
 808fbb0:	b91b      	cbnz	r3, 808fbba <mbedtls_ssl_handshake_client_step+0x39e>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808fbb2:	6823      	ldr	r3, [r4, #0]
 808fbb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 808fbb6:	2b00      	cmp	r3, #0
 808fbb8:	d0f0      	beq.n	808fb9c <mbedtls_ssl_handshake_client_step+0x380>
 808fbba:	681b      	ldr	r3, [r3, #0]
 808fbbc:	2b00      	cmp	r3, #0
 808fbbe:	d0ed      	beq.n	808fb9c <mbedtls_ssl_handshake_client_step+0x380>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 808fbc0:	4620      	mov	r0, r4
 808fbc2:	f7ff fe20 	bl	808f806 <mbedtls_ssl_own_key>
 808fbc6:	2800      	cmp	r0, #0
 808fbc8:	d044      	beq.n	808fc54 <mbedtls_ssl_handshake_client_step+0x438>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
 808fbca:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
 808fbce:	a908      	add	r1, sp, #32
 808fbd0:	4620      	mov	r0, r4
 808fbd2:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 808fbd4:	68e3      	ldr	r3, [r4, #12]
 808fbd6:	2b03      	cmp	r3, #3
 808fbd8:	d175      	bne.n	808fcc6 <mbedtls_ssl_handshake_client_step+0x4aa>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 808fbda:	6c23      	ldr	r3, [r4, #64]	; 0x40
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 808fbdc:	4620      	mov	r0, r4
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 808fbde:	681b      	ldr	r3, [r3, #0]
 808fbe0:	7a5d      	ldrb	r5, [r3, #9]
 808fbe2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808fbe6:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 808fbe8:	bf0b      	itete	eq
 808fbea:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 808fbec:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 808fbee:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 808fbf0:	711a      	strbne	r2, [r3, #4]
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 808fbf2:	bf18      	it	ne
 808fbf4:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 808fbf6:	f7ff fe06 	bl	808f806 <mbedtls_ssl_own_key>
 808fbfa:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 808fbfe:	f7fa ffe6 	bl	808abce <mbedtls_ssl_sig_from_pk>
 808fc02:	7170      	strb	r0, [r6, #5]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 808fc04:	4620      	mov	r0, r4
 808fc06:	f7ff fdfe 	bl	808f806 <mbedtls_ssl_own_key>
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 808fc0a:	6823      	ldr	r3, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 808fc0c:	4629      	mov	r1, r5
 808fc0e:	69da      	ldr	r2, [r3, #28]
 808fc10:	9203      	str	r2, [sp, #12]
 808fc12:	699b      	ldr	r3, [r3, #24]
 808fc14:	aa08      	add	r2, sp, #32
 808fc16:	9302      	str	r3, [sp, #8]
 808fc18:	ab07      	add	r3, sp, #28
 808fc1a:	9301      	str	r3, [sp, #4]
 808fc1c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808fc20:	3308      	adds	r3, #8
 808fc22:	9300      	str	r3, [sp, #0]
 808fc24:	2300      	movs	r3, #0
 808fc26:	f7fc fdd5 	bl	808c7d4 <mbedtls_pk_sign>
 808fc2a:	2800      	cmp	r0, #0
 808fc2c:	f040 831b 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 808fc30:	9b07      	ldr	r3, [sp, #28]
 808fc32:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808fc36:	0a19      	lsrs	r1, r3, #8
 808fc38:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 808fc3a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808fc3e:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
 808fc40:	3308      	adds	r3, #8
 808fc42:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808fc46:	2316      	movs	r3, #22
 808fc48:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 808fc4c:	220f      	movs	r2, #15
 808fc4e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808fc52:	e2c8      	b.n	80901e6 <mbedtls_ssl_handshake_client_step+0x9ca>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 808fc54:	4806      	ldr	r0, [pc, #24]	; (808fc70 <mbedtls_ssl_handshake_client_step+0x454>)
 808fc56:	e306      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 808fc58:	4620      	mov	r0, r4
 808fc5a:	f7fa fc55 	bl	808a508 <mbedtls_ssl_write_change_cipher_spec>
           break;
 808fc5e:	e302      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 808fc60:	4620      	mov	r0, r4
 808fc62:	f7fa fca9 	bl	808a5b8 <mbedtls_ssl_write_finished>
           break;
 808fc66:	e2fe      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
 808fc68:	ffff8f00 	.word	0xffff8f00
 808fc6c:	ffff8680 	.word	0xffff8680
 808fc70:	ffff8a00 	.word	0xffff8a00
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808fc74:	4620      	mov	r0, r4
 808fc76:	f7fa fbc5 	bl	808a404 <mbedtls_ssl_read_record>
 808fc7a:	2800      	cmp	r0, #0
 808fc7c:	f040 82f3 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808fc80:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808fc82:	2b16      	cmp	r3, #22
 808fc84:	f47f ae3f 	bne.w	808f906 <mbedtls_ssl_handshake_client_step+0xea>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 808fc88:	6e67      	ldr	r7, [r4, #100]	; 0x64
 808fc8a:	783b      	ldrb	r3, [r7, #0]
 808fc8c:	2b04      	cmp	r3, #4
 808fc8e:	d103      	bne.n	808fc98 <mbedtls_ssl_handshake_client_step+0x47c>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 808fc90:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 808fc92:	2b09      	cmp	r3, #9
 808fc94:	f200 82af 	bhi.w	80901f6 <mbedtls_ssl_handshake_client_step+0x9da>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808fc98:	2232      	movs	r2, #50	; 0x32
 808fc9a:	2102      	movs	r1, #2
 808fc9c:	4620      	mov	r0, r4
 808fc9e:	f7fa f963 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 808fca2:	48c1      	ldr	r0, [pc, #772]	; (808ffa8 <mbedtls_ssl_handshake_client_step+0x78c>)
 808fca4:	e2df      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 808fca6:	4620      	mov	r0, r4
 808fca8:	f7fa fc3c 	bl	808a524 <mbedtls_ssl_parse_change_cipher_spec>
           break;
 808fcac:	e2db      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 808fcae:	4620      	mov	r0, r4
 808fcb0:	f7fa fcca 	bl	808a648 <mbedtls_ssl_parse_finished>
           break;
 808fcb4:	e2d7      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 808fcb6:	230f      	movs	r3, #15
 808fcb8:	e23f      	b.n	809013a <mbedtls_ssl_handshake_client_step+0x91e>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 808fcba:	4620      	mov	r0, r4
 808fcbc:	f7fa fe02 	bl	808a8c4 <mbedtls_ssl_handshake_wrapup>
 808fcc0:	e23c      	b.n	809013c <mbedtls_ssl_handshake_client_step+0x920>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
 808fcc2:	48ba      	ldr	r0, [pc, #744]	; (808ffac <mbedtls_ssl_handshake_client_step+0x790>)
 808fcc4:	e2cf      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808fcc6:	48ba      	ldr	r0, [pc, #744]	; (808ffb0 <mbedtls_ssl_handshake_client_step+0x794>)
 808fcc8:	e2cd      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 808fcca:	f852 0b04 	ldr.w	r0, [r2], #4
 808fcce:	429a      	cmp	r2, r3
 808fcd0:	f841 0b04 	str.w	r0, [r1], #4
 808fcd4:	d1f9      	bne.n	808fcca <mbedtls_ssl_handshake_client_step+0x4ae>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 808fcd6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808fcd8:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
 808fcda:	f1a3 0210 	sub.w	r2, r3, #16
 808fcde:	2a10      	cmp	r2, #16
 808fce0:	d806      	bhi.n	808fcf0 <mbedtls_ssl_handshake_client_step+0x4d4>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 808fce2:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
 808fce4:	f8d2 21e4 	ldr.w	r2, [r2, #484]	; 0x1e4
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
 808fce8:	2a00      	cmp	r2, #0
 808fcea:	bf08      	it	eq
 808fcec:	2300      	moveq	r3, #0
 808fcee:	e000      	b.n	808fcf2 <mbedtls_ssl_handshake_client_step+0x4d6>
 808fcf0:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
 808fcf2:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 808fcf4:	b16a      	cbz	r2, 808fd12 <mbedtls_ssl_handshake_client_step+0x4f6>
 808fcf6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 808fcf8:	b15a      	cbz	r2, 808fd12 <mbedtls_ssl_handshake_client_step+0x4f6>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 808fcfa:	6823      	ldr	r3, [r4, #0]
 808fcfc:	2220      	movs	r2, #32
 808fcfe:	699d      	ldr	r5, [r3, #24]
 808fd00:	310c      	adds	r1, #12
 808fd02:	69d8      	ldr	r0, [r3, #28]
 808fd04:	47a8      	blx	r5

            if( ret != 0 )
 808fd06:	2800      	cmp	r0, #0
 808fd08:	f040 82ad 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
 808fd0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808fd0e:	2320      	movs	r3, #32
 808fd10:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 808fd12:	f106 0527 	add.w	r5, r6, #39	; 0x27
 808fd16:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26

    for( i = 0; i < n; i++ )
 808fd1a:	2200      	movs	r2, #0
 808fd1c:	4293      	cmp	r3, r2
 808fd1e:	d005      	beq.n	808fd2c <mbedtls_ssl_handshake_client_step+0x510>
        *p++ = ssl->session_negotiate->id[i];
 808fd20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808fd22:	4411      	add	r1, r2
 808fd24:	7b09      	ldrb	r1, [r1, #12]
 808fd26:	54a9      	strb	r1, [r5, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
 808fd28:	3201      	adds	r2, #1
 808fd2a:	e7f7      	b.n	808fd1c <mbedtls_ssl_handshake_client_step+0x500>
 808fd2c:	441d      	add	r5, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 808fd2e:	68e2      	ldr	r2, [r4, #12]
 808fd30:	6823      	ldr	r3, [r4, #0]

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
 808fd32:	f105 0902 	add.w	r9, r5, #2
 808fd36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
 808fd3a:	2700      	movs	r7, #0
 808fd3c:	f1a3 0804 	sub.w	r8, r3, #4
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
 808fd40:	f858 bf04 	ldr.w	fp, [r8, #4]!
 808fd44:	f1bb 0f00 	cmp.w	fp, #0
 808fd48:	d01c      	beq.n	808fd84 <mbedtls_ssl_handshake_client_step+0x568>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 808fd4a:	4658      	mov	r0, fp
 808fd4c:	f7f6 fc44 	bl	80865d8 <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
 808fd50:	6822      	ldr	r2, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 808fd52:	f892 105d 	ldrb.w	r1, [r2, #93]	; 0x5d
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 808fd56:	2800      	cmp	r0, #0
 808fd58:	d0f2      	beq.n	808fd40 <mbedtls_ssl_handshake_client_step+0x524>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 808fd5a:	6903      	ldr	r3, [r0, #16]
 808fd5c:	4299      	cmp	r1, r3
 808fd5e:	dbef      	blt.n	808fd40 <mbedtls_ssl_handshake_client_step+0x524>
 808fd60:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 808fd64:	6983      	ldr	r3, [r0, #24]
 808fd66:	429a      	cmp	r2, r3
 808fd68:	dcea      	bgt.n	808fd40 <mbedtls_ssl_handshake_client_step+0x524>

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 808fd6a:	f8d8 3000 	ldr.w	r3, [r8]
            continue;

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
 808fd6e:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 808fd70:	121a      	asrs	r2, r3, #8
 808fd72:	464b      	mov	r3, r9
 808fd74:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 808fd78:	f8d8 2000 	ldr.w	r2, [r8]
 808fd7c:	f889 2001 	strb.w	r2, [r9, #1]
 808fd80:	4699      	mov	r9, r3
 808fd82:	e7dd      	b.n	808fd40 <mbedtls_ssl_handshake_client_step+0x524>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 808fd84:	23ff      	movs	r3, #255	; 0xff
        n++;
 808fd86:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 808fd88:	f889 3001 	strb.w	r3, [r9, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 808fd8c:	09fb      	lsrs	r3, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 808fd8e:	f889 b000 	strb.w	fp, [r9]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 808fd92:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 808fd94:	702b      	strb	r3, [r5, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 808fd96:	2301      	movs	r3, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 808fd98:	706f      	strb	r7, [r5, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 808fd9a:	f889 3002 	strb.w	r3, [r9, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 808fd9e:	f889 b003 	strb.w	fp, [r9, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808fda2:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 808fda6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 808fdaa:	f109 0704 	add.w	r7, r9, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 808fdae:	f109 0806 	add.w	r8, r9, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808fdb2:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 808fdb6:	b358      	cbz	r0, 808fe10 <mbedtls_ssl_handshake_client_step+0x5f4>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 808fdb8:	f003 f9b7 	bl	809312a <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 808fdbc:	45a8      	cmp	r8, r5
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 808fdbe:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 808fdc0:	d828      	bhi.n	808fe14 <mbedtls_ssl_handshake_client_step+0x5f8>
 808fdc2:	f100 0a09 	add.w	sl, r0, #9
 808fdc6:	ebc8 0505 	rsb	r5, r8, r5
 808fdca:	4555      	cmp	r5, sl
 808fdcc:	d322      	bcc.n	808fe14 <mbedtls_ssl_handshake_client_step+0x5f8>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 808fdce:	1d43      	adds	r3, r0, #5
 808fdd0:	0a1b      	lsrs	r3, r3, #8
 808fdd2:	f889 3008 	strb.w	r3, [r9, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 808fdd6:	b2c3      	uxtb	r3, r0
 808fdd8:	1d59      	adds	r1, r3, #5
 808fdda:	f889 1009 	strb.w	r1, [r9, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 808fdde:	1cc1      	adds	r1, r0, #3
 808fde0:	0a09      	lsrs	r1, r1, #8
 808fde2:	f889 100a 	strb.w	r1, [r9, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 808fde6:	1cd9      	adds	r1, r3, #3
 808fde8:	f889 100b 	strb.w	r1, [r9, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 808fdec:	0a01      	lsrs	r1, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 808fdee:	f889 b006 	strb.w	fp, [r9, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 808fdf2:	f889 b007 	strb.w	fp, [r9, #7]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 808fdf6:	f889 b00c 	strb.w	fp, [r9, #12]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 808fdfa:	f889 100d 	strb.w	r1, [r9, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 808fdfe:	f889 300e 	strb.w	r3, [r9, #14]

    memcpy( p, ssl->hostname, hostname_len );
 808fe02:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 808fe06:	f109 000f 	add.w	r0, r9, #15
 808fe0a:	f003 f948 	bl	809309e <memcpy>
 808fe0e:	e002      	b.n	808fe16 <mbedtls_ssl_handshake_client_step+0x5fa>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
 808fe10:	4682      	mov	sl, r0
 808fe12:	e000      	b.n	808fe16 <mbedtls_ssl_handshake_client_step+0x5fa>
 808fe14:	46da      	mov	sl, fp
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 808fe16:	6823      	ldr	r3, [r4, #0]
 808fe18:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 808fe1c:	2a03      	cmp	r2, #3
 808fe1e:	d13c      	bne.n	808fe9a <mbedtls_ssl_handshake_client_step+0x67e>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808fe20:	6d59      	ldr	r1, [r3, #84]	; 0x54
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t sig_alg_len = 0;
 808fe22:	2000      	movs	r0, #0
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808fe24:	f851 3010 	ldr.w	r3, [r1, r0, lsl #1]
 808fe28:	b10b      	cbz	r3, 808fe2e <mbedtls_ssl_handshake_client_step+0x612>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
 808fe2a:	3002      	adds	r0, #2
 808fe2c:	e7fa      	b.n	808fe24 <mbedtls_ssl_handshake_client_step+0x608>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808fe2e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 808fe32:	f10a 0b02 	add.w	fp, sl, #2
 808fe36:	44bb      	add	fp, r7
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808fe38:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 808fe3c:	4593      	cmp	fp, r2
 808fe3e:	d82d      	bhi.n	808fe9c <mbedtls_ssl_handshake_client_step+0x680>
 808fe40:	ebcb 0202 	rsb	r2, fp, r2
 808fe44:	3006      	adds	r0, #6
 808fe46:	4282      	cmp	r2, r0
 808fe48:	d328      	bcc.n	808fe9c <mbedtls_ssl_handshake_client_step+0x680>
 808fe4a:	461d      	mov	r5, r3
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808fe4c:	f851 0015 	ldr.w	r0, [r1, r5, lsl #1]
 808fe50:	9105      	str	r1, [sp, #20]
 808fe52:	1caa      	adds	r2, r5, #2
 808fe54:	b170      	cbz	r0, 808fe74 <mbedtls_ssl_handshake_client_step+0x658>
 808fe56:	9204      	str	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 808fe58:	f7fa fec2 	bl	808abe0 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 808fe5c:	9a04      	ldr	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 808fe5e:	eb0b 0305 	add.w	r3, fp, r5
 808fe62:	7198      	strb	r0, [r3, #6]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 808fe64:	4615      	mov	r5, r2
 808fe66:	eb0b 0302 	add.w	r3, fp, r2
 808fe6a:	f04f 0201 	mov.w	r2, #1
 808fe6e:	9905      	ldr	r1, [sp, #20]
 808fe70:	715a      	strb	r2, [r3, #5]
 808fe72:	e7eb      	b.n	808fe4c <mbedtls_ssl_handshake_client_step+0x630>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 808fe74:	230d      	movs	r3, #13
 808fe76:	f88b 3001 	strb.w	r3, [fp, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 808fe7a:	0a13      	lsrs	r3, r2, #8
 808fe7c:	f88b 3002 	strb.w	r3, [fp, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 808fe80:	b2eb      	uxtb	r3, r5
 808fe82:	1c9a      	adds	r2, r3, #2
 808fe84:	f88b 2003 	strb.w	r2, [fp, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 808fe88:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 808fe8a:	f88b 3005 	strb.w	r3, [fp, #5]
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 808fe8e:	f88b 0000 	strb.w	r0, [fp]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 808fe92:	f88b 2004 	strb.w	r2, [fp, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );

    *olen = 6 + sig_alg_len;
 808fe96:	1dab      	adds	r3, r5, #6
 808fe98:	e000      	b.n	808fe9c <mbedtls_ssl_handshake_client_step+0x680>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
 808fe9a:	2300      	movs	r3, #0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 808fe9c:	6822      	ldr	r2, [r4, #0]
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 808fe9e:	4453      	add	r3, sl
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 808fea0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 808fea4:	f412 72e0 	ands.w	r2, r2, #448	; 0x1c0
 808fea8:	d018      	beq.n	808fedc <mbedtls_ssl_handshake_client_step+0x6c0>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808feaa:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 808feae:	1c99      	adds	r1, r3, #2
 808feb0:	4439      	add	r1, r7
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808feb2:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
 808feb6:	4281      	cmp	r1, r0
 808feb8:	f04f 0200 	mov.w	r2, #0
 808febc:	d80e      	bhi.n	808fedc <mbedtls_ssl_handshake_client_step+0x6c0>
 808febe:	1a40      	subs	r0, r0, r1
 808fec0:	2804      	cmp	r0, #4
 808fec2:	d90b      	bls.n	808fedc <mbedtls_ssl_handshake_client_step+0x6c0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 808fec4:	2001      	movs	r0, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 808fec6:	700a      	strb	r2, [r1, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 808fec8:	7048      	strb	r0, [r1, #1]

    *p++ = 0x00;
 808feca:	708a      	strb	r2, [r1, #2]
    *p++ = 1;
 808fecc:	70c8      	strb	r0, [r1, #3]

    *p++ = ssl->conf->mfl_code;
 808fece:	6822      	ldr	r2, [r4, #0]
 808fed0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 808fed4:	f3c2 1282 	ubfx	r2, r2, #6, #3
 808fed8:	710a      	strb	r2, [r1, #4]

    *olen = 5;
 808feda:	2205      	movs	r2, #5
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 808fedc:	189d      	adds	r5, r3, r2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 808fede:	6823      	ldr	r3, [r4, #0]
 808fee0:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 808fee4:	f001 0102 	and.w	r1, r1, #2
 808fee8:	f001 0aff 	and.w	sl, r1, #255	; 0xff
 808feec:	b329      	cbz	r1, 808ff3a <mbedtls_ssl_handshake_client_step+0x71e>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808feee:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 808fef2:	1ca8      	adds	r0, r5, #2
 808fef4:	4438      	add	r0, r7
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808fef6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808fefa:	4298      	cmp	r0, r3
 808fefc:	d816      	bhi.n	808ff2c <mbedtls_ssl_handshake_client_step+0x710>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 808fefe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808ff00:	1a1b      	subs	r3, r3, r0
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 808ff02:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808ff04:	f102 0a04 	add.w	sl, r2, #4
 808ff08:	4553      	cmp	r3, sl
 808ff0a:	f04f 0300 	mov.w	r3, #0
 808ff0e:	d310      	bcc.n	808ff32 <mbedtls_ssl_handshake_client_step+0x716>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 808ff10:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 808ff12:	2323      	movs	r3, #35	; 0x23
 808ff14:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 808ff16:	0a13      	lsrs	r3, r2, #8
 808ff18:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 808ff1a:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 808ff1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808ff1e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 808ff20:	b149      	cbz	r1, 808ff36 <mbedtls_ssl_handshake_client_step+0x71a>
 808ff22:	b142      	cbz	r2, 808ff36 <mbedtls_ssl_handshake_client_step+0x71a>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
 808ff24:	3004      	adds	r0, #4
 808ff26:	f003 f8ba 	bl	809309e <memcpy>
 808ff2a:	e006      	b.n	808ff3a <mbedtls_ssl_handshake_client_step+0x71e>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
 808ff2c:	f04f 0a00 	mov.w	sl, #0
 808ff30:	e003      	b.n	808ff3a <mbedtls_ssl_handshake_client_step+0x71e>
 808ff32:	469a      	mov	sl, r3
 808ff34:	e001      	b.n	808ff3a <mbedtls_ssl_handshake_client_step+0x71e>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
 808ff36:	f04f 0a04 	mov.w	sl, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
 808ff3a:	eb15 030a 	adds.w	r3, r5, sl
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 808ff3e:	bf1f      	itttt	ne
 808ff40:	0a1a      	lsrne	r2, r3, #8
 808ff42:	f889 2004 	strbne.w	r2, [r9, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 808ff46:	f889 3005 	strbne.w	r3, [r9, #5]
        p += ext_len;
 808ff4a:	eb08 0703 	addne.w	r7, r8, r3
    }

    ssl->out_msglen  = p - buf;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808ff4e:	2316      	movs	r3, #22
 808ff50:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 808ff54:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808ff58:	2201      	movs	r2, #1
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
 808ff5a:	1bbe      	subs	r6, r7, r6
 808ff5c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 808ff60:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 808ff62:	6863      	ldr	r3, [r4, #4]
 808ff64:	4413      	add	r3, r2
 808ff66:	e141      	b.n	80901ec <mbedtls_ssl_handshake_client_step+0x9d0>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
 808ff68:	2246      	movs	r2, #70	; 0x46
 808ff6a:	2102      	movs	r1, #2
 808ff6c:	4620      	mov	r0, r4
 808ff6e:	f7f9 fffb 	bl	8089f68 <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 808ff72:	4810      	ldr	r0, [pc, #64]	; (808ffb4 <mbedtls_ssl_handshake_client_step+0x798>)
 808ff74:	e177      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 808ff76:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808ff78:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 808ff7c:	4293      	cmp	r3, r2
 808ff7e:	d91b      	bls.n	808ffb8 <mbedtls_ssl_handshake_client_step+0x79c>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 808ff80:	eb08 0206 	add.w	r2, r8, r6
                  | ( buf[39 + n]       ) );
 808ff84:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
 808ff88:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 808ff8c:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
 808ff90:	1e7a      	subs	r2, r7, #1
 808ff92:	2a02      	cmp	r2, #2
 808ff94:	f67f acfa 	bls.w	808f98c <mbedtls_ssl_handshake_client_step+0x170>
 808ff98:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 808ff9c:	443a      	add	r2, r7
 808ff9e:	4293      	cmp	r3, r2
 808ffa0:	f47f acf4 	bne.w	808f98c <mbedtls_ssl_handshake_client_step+0x170>
 808ffa4:	e00e      	b.n	808ffc4 <mbedtls_ssl_handshake_client_step+0x7a8>
 808ffa6:	bf00      	nop
 808ffa8:	ffff9200 	.word	0xffff9200
 808ffac:	ffff8c00 	.word	0xffff8c00
 808ffb0:	ffff9400 	.word	0xffff9400
 808ffb4:	ffff9180 	.word	0xffff9180
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 808ffb8:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 808ffbc:	4293      	cmp	r3, r2
 808ffbe:	f47f ace5 	bne.w	808f98c <mbedtls_ssl_handshake_client_step+0x170>
    {
        ext_len = 0;
 808ffc2:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 808ffc4:	eb08 0306 	add.w	r3, r8, r6
 808ffc8:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 808ffcc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 808ffd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 808ffd4:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 808ffd8:	2b00      	cmp	r3, #0
 808ffda:	f43f acd9 	beq.w	808f990 <mbedtls_ssl_handshake_client_step+0x174>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 808ffde:	222f      	movs	r2, #47	; 0x2f
 808ffe0:	2102      	movs	r1, #2
 808ffe2:	4620      	mov	r0, r4
 808ffe4:	f7f9 ffc0 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 808ffe8:	48a0      	ldr	r0, [pc, #640]	; (809026c <mbedtls_ssl_handshake_client_step+0xa50>)
 808ffea:	e13c      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808ffec:	2e00      	cmp	r6, #0
 808ffee:	f43f acec 	beq.w	808f9ca <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 808fff2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808fff4:	6803      	ldr	r3, [r0, #0]
 808fff6:	4599      	cmp	r9, r3
 808fff8:	f47f ace7 	bne.w	808f9ca <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 808fffc:	6843      	ldr	r3, [r0, #4]
 808fffe:	2b00      	cmp	r3, #0
 8090000:	f47f ace3 	bne.w	808f9ca <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->compression != comp ||
 8090004:	6883      	ldr	r3, [r0, #8]
 8090006:	429e      	cmp	r6, r3
 8090008:	f47f acdf 	bne.w	808f9ca <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 809000c:	4632      	mov	r2, r6
 809000e:	4629      	mov	r1, r5
 8090010:	300c      	adds	r0, #12
 8090012:	f003 f835 	bl	8093080 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
 8090016:	2800      	cmp	r0, #0
 8090018:	f47f acd7 	bne.w	808f9ca <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 809001c:	230c      	movs	r3, #12
 809001e:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 8090020:	4620      	mov	r0, r4
 8090022:	f7f9 fc01 	bl	8089828 <mbedtls_ssl_derive_keys>
 8090026:	4605      	mov	r5, r0
 8090028:	2800      	cmp	r0, #0
 809002a:	f43f ace1 	beq.w	808f9f0 <mbedtls_ssl_handshake_client_step+0x1d4>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 809002e:	2250      	movs	r2, #80	; 0x50
 8090030:	2102      	movs	r1, #2
 8090032:	4620      	mov	r0, r4
 8090034:	f7f9 ff98 	bl	8089f68 <mbedtls_ssl_send_alert_message>
 8090038:	e07c      	b.n	8090134 <mbedtls_ssl_handshake_client_step+0x918>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
 809003a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 809003c:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 809003e:	4290      	cmp	r0, r2
 8090040:	f47f acdb 	bne.w	808f9fa <mbedtls_ssl_handshake_client_step+0x1de>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 8090044:	f7f6 fac8 	bl	80865d8 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
 8090048:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 809004a:	2800      	cmp	r0, #0
 809004c:	f43f acda 	beq.w	808fa04 <mbedtls_ssl_handshake_client_step+0x1e8>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 8090050:	6902      	ldr	r2, [r0, #16]
 8090052:	429a      	cmp	r2, r3
 8090054:	f73f acd6 	bgt.w	808fa04 <mbedtls_ssl_handshake_client_step+0x1e8>
 8090058:	6982      	ldr	r2, [r0, #24]
 809005a:	4293      	cmp	r3, r2
 809005c:	f73f acd2 	bgt.w	808fa04 <mbedtls_ssl_handshake_client_step+0x1e8>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 8090060:	f64f 7001 	movw	r0, #65281	; 0xff01
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 8090064:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8090066:	2200      	movs	r2, #0

    ext = buf + 40 + n;
 8090068:	3628      	adds	r6, #40	; 0x28
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 809006a:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 809006c:	4446      	add	r6, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 809006e:	2501      	movs	r5, #1

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
 8090070:	2f00      	cmp	r7, #0
 8090072:	d03d      	beq.n	80900f0 <mbedtls_ssl_handshake_client_step+0x8d4>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 8090074:	7873      	ldrb	r3, [r6, #1]
 8090076:	7832      	ldrb	r2, [r6, #0]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 8090078:	78b1      	ldrb	r1, [r6, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 809007a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 809007e:	78f3      	ldrb	r3, [r6, #3]
 8090080:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

        if( ext_size + 4 > ext_len )
 8090084:	1d19      	adds	r1, r3, #4
 8090086:	428f      	cmp	r7, r1
 8090088:	f4ff ac80 	bcc.w	808f98c <mbedtls_ssl_handshake_client_step+0x170>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 809008c:	2a23      	cmp	r2, #35	; 0x23
 809008e:	d01e      	beq.n	80900ce <mbedtls_ssl_handshake_client_step+0x8b2>
 8090090:	4282      	cmp	r2, r0
 8090092:	d002      	beq.n	809009a <mbedtls_ssl_handshake_client_step+0x87e>
 8090094:	2a01      	cmp	r2, #1
 8090096:	d124      	bne.n	80900e2 <mbedtls_ssl_handshake_client_step+0x8c6>
 8090098:	e008      	b.n	80900ac <mbedtls_ssl_handshake_client_step+0x890>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 809009a:	2b01      	cmp	r3, #1
 809009c:	d101      	bne.n	80900a2 <mbedtls_ssl_handshake_client_step+0x886>
 809009e:	7932      	ldrb	r2, [r6, #4]
 80900a0:	b10a      	cbz	r2, 80900a6 <mbedtls_ssl_handshake_client_step+0x88a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 80900a2:	2228      	movs	r2, #40	; 0x28
 80900a4:	e4af      	b.n	808fa06 <mbedtls_ssl_handshake_client_step+0x1ea>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 80900a6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80900aa:	e01a      	b.n	80900e2 <mbedtls_ssl_handshake_client_step+0x8c6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 80900ac:	6822      	ldr	r2, [r4, #0]
 80900ae:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80900b2:	f402 7ee0 	and.w	lr, r2, #448	; 0x1c0
 80900b6:	f1be 0f00 	cmp.w	lr, #0
 80900ba:	d0f2      	beq.n	80900a2 <mbedtls_ssl_handshake_client_step+0x886>
 80900bc:	2b01      	cmp	r3, #1
 80900be:	d1f0      	bne.n	80900a2 <mbedtls_ssl_handshake_client_step+0x886>
        len != 1 ||
 80900c0:	f896 e004 	ldrb.w	lr, [r6, #4]
 80900c4:	f3c2 1282 	ubfx	r2, r2, #6, #3
 80900c8:	4596      	cmp	lr, r2
 80900ca:	d00a      	beq.n	80900e2 <mbedtls_ssl_handshake_client_step+0x8c6>
 80900cc:	e7e9      	b.n	80900a2 <mbedtls_ssl_handshake_client_step+0x886>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 80900ce:	6822      	ldr	r2, [r4, #0]
 80900d0:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 80900d4:	0792      	lsls	r2, r2, #30
 80900d6:	d5e4      	bpl.n	80900a2 <mbedtls_ssl_handshake_client_step+0x886>
 80900d8:	2b00      	cmp	r3, #0
 80900da:	d1e2      	bne.n	80900a2 <mbedtls_ssl_handshake_client_step+0x886>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 80900dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80900de:	f8c2 51f4 	str.w	r5, [r2, #500]	; 0x1f4
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 80900e2:	1afb      	subs	r3, r7, r3
 80900e4:	1f1f      	subs	r7, r3, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
 80900e6:	3b05      	subs	r3, #5
 80900e8:	2b02      	cmp	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
 80900ea:	440e      	add	r6, r1

        if( ext_len > 0 && ext_len < 4 )
 80900ec:	d8c0      	bhi.n	8090070 <mbedtls_ssl_handshake_client_step+0x854>
 80900ee:	e48e      	b.n	808fa0e <mbedtls_ssl_handshake_client_step+0x1f2>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80900f0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80900f4:	bb13      	cbnz	r3, 809013c <mbedtls_ssl_handshake_client_step+0x920>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 80900f6:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80900f8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80900fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8090100:	2b20      	cmp	r3, #32
 8090102:	d11b      	bne.n	809013c <mbedtls_ssl_handshake_client_step+0x920>
 8090104:	e7cd      	b.n	80900a2 <mbedtls_ssl_handshake_client_step+0x886>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );
 8090106:	465a      	mov	r2, fp
 8090108:	f107 010a 	add.w	r1, r7, #10
 809010c:	9004      	str	r0, [sp, #16]
 809010e:	f002 ffc6 	bl	809309e <memcpy>

    ssl->session_negotiate->ticket = ticket;
 8090112:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8090114:	9b04      	ldr	r3, [sp, #16]
    ssl->session_negotiate->ticket_len = ticket_len;
    ssl->session_negotiate->ticket_lifetime = lifetime;
 8090116:	0436      	lsls	r6, r6, #16
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
 8090118:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
 809011a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_lifetime = lifetime;
 809011c:	ea46 660a 	orr.w	r6, r6, sl, lsl #24
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
    ssl->session_negotiate->ticket_len = ticket_len;
 8090120:	f8c3 b068 	str.w	fp, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
 8090124:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8090126:	ea46 0808 	orr.w	r8, r6, r8
 809012a:	ea48 2609 	orr.w	r6, r8, r9, lsl #8
 809012e:	66de      	str	r6, [r3, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
 8090130:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8090132:	609d      	str	r5, [r3, #8]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );

    return( 0 );
 8090134:	4628      	mov	r0, r5
 8090136:	e096      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
 8090138:	2306      	movs	r3, #6
 809013a:	6063      	str	r3, [r4, #4]
        return( 0 );
 809013c:	2000      	movs	r0, #0
 809013e:	e092      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8090140:	4620      	mov	r0, r4
 8090142:	f7fa f95f 	bl	808a404 <mbedtls_ssl_read_record>
 8090146:	2800      	cmp	r0, #0
 8090148:	f040 808d 	bne.w	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 809014c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 809014e:	2b16      	cmp	r3, #22
 8090150:	f47f abd9 	bne.w	808f906 <mbedtls_ssl_handshake_client_step+0xea>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 8090154:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 8090156:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 8090158:	3301      	adds	r3, #1
 809015a:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 809015c:	7813      	ldrb	r3, [r2, #0]
 809015e:	2b0d      	cmp	r3, #13
 8090160:	bf0c      	ite	eq
 8090162:	2301      	moveq	r3, #1
 8090164:	2300      	movne	r3, #0
 8090166:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 809016a:	d002      	beq.n	8090172 <mbedtls_ssl_handshake_client_step+0x956>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 809016c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8090170:	e079      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 8090172:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8090174:	2904      	cmp	r1, #4
 8090176:	d806      	bhi.n	8090186 <mbedtls_ssl_handshake_client_step+0x96a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 8090178:	2232      	movs	r2, #50	; 0x32
 809017a:	2102      	movs	r1, #2
 809017c:	4620      	mov	r0, r4
 809017e:	f7f9 fef3 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 8090182:	483b      	ldr	r0, [pc, #236]	; (8090270 <mbedtls_ssl_handshake_client_step+0xa54>)
 8090184:	e06f      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 8090186:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 8090188:	1ddd      	adds	r5, r3, #7
 809018a:	42a9      	cmp	r1, r5
 809018c:	d9f4      	bls.n	8090178 <mbedtls_ssl_handshake_client_step+0x95c>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 809018e:	68e0      	ldr	r0, [r4, #12]
 8090190:	2803      	cmp	r0, #3
 8090192:	d109      	bne.n	80901a8 <mbedtls_ssl_handshake_client_step+0x98c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8090194:	18d6      	adds	r6, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 8090196:	7977      	ldrb	r7, [r6, #5]
 8090198:	79b0      	ldrb	r0, [r6, #6]
 809019a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 809019e:	4405      	add	r5, r0
 80901a0:	42a9      	cmp	r1, r5
 80901a2:	d9e9      	bls.n	8090178 <mbedtls_ssl_handshake_client_step+0x95c>
 80901a4:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 80901a6:	4403      	add	r3, r0
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80901a8:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80901aa:	7950      	ldrb	r0, [r2, #5]
 80901ac:	7992      	ldrb	r2, [r2, #6]
 80901ae:	3307      	adds	r3, #7
 80901b0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80901b4:	4413      	add	r3, r2
 80901b6:	4299      	cmp	r1, r3
 80901b8:	d0c0      	beq.n	809013c <mbedtls_ssl_handshake_client_step+0x920>
 80901ba:	e7dd      	b.n	8090178 <mbedtls_ssl_handshake_client_step+0x95c>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80901bc:	2232      	movs	r2, #50	; 0x32
 80901be:	2102      	movs	r1, #2
 80901c0:	4620      	mov	r0, r4
 80901c2:	f7f9 fed1 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 80901c6:	482b      	ldr	r0, [pc, #172]	; (8090274 <mbedtls_ssl_handshake_client_step+0xa58>)
 80901c8:	e04d      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80901ca:	482b      	ldr	r0, [pc, #172]	; (8090278 <mbedtls_ssl_handshake_client_step+0xa5c>)
 80901cc:	e04b      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 80901ce:	482b      	ldr	r0, [pc, #172]	; (809027c <mbedtls_ssl_handshake_client_step+0xa60>)
 80901d0:	e049      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 80901d2:	9b08      	ldr	r3, [sp, #32]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 80901d4:	2210      	movs	r2, #16
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 80901d6:	3304      	adds	r3, #4
 80901d8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80901dc:	2316      	movs	r3, #22
 80901de:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 80901e2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80901e6:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 80901e8:	6863      	ldr	r3, [r4, #4]
 80901ea:	3301      	adds	r3, #1
 80901ec:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80901ee:	4620      	mov	r0, r4
 80901f0:	f7f9 fd06 	bl	8089c00 <mbedtls_ssl_write_record>
 80901f4:	e037      	b.n	8090266 <mbedtls_ssl_handshake_client_step+0xa4a>
    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 80901f6:	7a7a      	ldrb	r2, [r7, #9]
 80901f8:	f897 b008 	ldrb.w	fp, [r7, #8]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 80901fc:	f897 a004 	ldrb.w	sl, [r7, #4]
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 8090200:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 8090204:	f10b 020a 	add.w	r2, fp, #10
 8090208:	4293      	cmp	r3, r2
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 809020a:	797e      	ldrb	r6, [r7, #5]
               ( msg[2] <<  8 ) | ( msg[3]       );
 809020c:	f897 9006 	ldrb.w	r9, [r7, #6]
 8090210:	f897 8007 	ldrb.w	r8, [r7, #7]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 8090214:	f47f ad40 	bne.w	808fc98 <mbedtls_ssl_handshake_client_step+0x47c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
 8090218:	6b23      	ldr	r3, [r4, #48]	; 0x30
 809021a:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 809021e:	230c      	movs	r3, #12
 8090220:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
 8090222:	f1bb 0f00 	cmp.w	fp, #0
 8090226:	d089      	beq.n	809013c <mbedtls_ssl_handshake_client_step+0x920>
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
 8090228:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 809022a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 809022c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 809022e:	441a      	add	r2, r3
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8090230:	429a      	cmp	r2, r3
 8090232:	d002      	beq.n	809023a <mbedtls_ssl_handshake_client_step+0xa1e>
 8090234:	7018      	strb	r0, [r3, #0]
 8090236:	3301      	adds	r3, #1
 8090238:	e7fa      	b.n	8090230 <mbedtls_ssl_handshake_client_step+0xa14>
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 809023a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket = NULL;
 809023c:	2500      	movs	r5, #0
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 809023e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8090240:	f000 fc48 	bl	8090ad4 <free>
    ssl->session_negotiate->ticket = NULL;
 8090244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_len = 0;

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 8090246:	4659      	mov	r1, fp
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
 8090248:	665d      	str	r5, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
 809024a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 809024c:	2001      	movs	r0, #1

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
 809024e:	669d      	str	r5, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 8090250:	f002 ff00 	bl	8093054 <calloc>
 8090254:	2800      	cmp	r0, #0
 8090256:	f47f af56 	bne.w	8090106 <mbedtls_ssl_handshake_client_step+0x8ea>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 809025a:	2250      	movs	r2, #80	; 0x50
 809025c:	2102      	movs	r1, #2
 809025e:	4620      	mov	r0, r4
 8090260:	f7f9 fe82 	bl	8089f68 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8090264:	4806      	ldr	r0, [pc, #24]	; (8090280 <mbedtls_ssl_handshake_client_step+0xa64>)
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 8090266:	b015      	add	sp, #84	; 0x54
 8090268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809026c:	ffff8f80 	.word	0xffff8f80
 8090270:	ffff8580 	.word	0xffff8580
 8090274:	ffff8480 	.word	0xffff8480
 8090278:	ffff8900 	.word	0xffff8900
 809027c:	ffff9300 	.word	0xffff9300
 8090280:	ffff8100 	.word	0xffff8100

08090284 <_ZN5Crypt11generateKeyEPh>:
#include "Crypt.h"
#include "application.h"

//generate key
int Crypt::generateKey(unsigned char* key){
 8090284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8090286:	4604      	mov	r4, r0
    int ret=0;

    mbedtls_entropy_init( &entropy );
 8090288:	f500 75a0 	add.w	r5, r0, #320	; 0x140
 809028c:	4628      	mov	r0, r5
#include "Crypt.h"
#include "application.h"

//generate key
int Crypt::generateKey(unsigned char* key){
 809028e:	460f      	mov	r7, r1
    int ret=0;

    mbedtls_entropy_init( &entropy );
 8090290:	f7fe fcb4 	bl	808ebfc <mbedtls_entropy_init>
    mbedtls_ctr_drbg_init( &ctr_drbg );
 8090294:	4620      	mov	r0, r4
 8090296:	f7ff f9db 	bl	808f650 <mbedtls_ctr_drbg_init>
    mbedtls_ctr_drbg_seed( &ctr_drbg, mbedtls_entropy_func, &entropy,(unsigned char *) pers, strlen(pers) );
 809029a:	f8d4 63b8 	ldr.w	r6, [r4, #952]	; 0x3b8
 809029e:	4630      	mov	r0, r6
 80902a0:	f002 ff43 	bl	809312a <strlen>
 80902a4:	4633      	mov	r3, r6
 80902a6:	9000      	str	r0, [sp, #0]
 80902a8:	462a      	mov	r2, r5
 80902aa:	4906      	ldr	r1, [pc, #24]	; (80902c4 <_ZN5Crypt11generateKeyEPh+0x40>)
 80902ac:	4620      	mov	r0, r4
 80902ae:	f7ff fa37 	bl	808f720 <mbedtls_ctr_drbg_seed>
    mbedtls_ctr_drbg_random( &ctr_drbg, key, 32 );
 80902b2:	2220      	movs	r2, #32
 80902b4:	4639      	mov	r1, r7
 80902b6:	4620      	mov	r0, r4
 80902b8:	f7ff fa9d 	bl	808f7f6 <mbedtls_ctr_drbg_random>

    return ret;
}
 80902bc:	2000      	movs	r0, #0
 80902be:	b003      	add	sp, #12
 80902c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80902c2:	bf00      	nop
 80902c4:	0808ec4d 	.word	0x0808ec4d

080902c8 <_GLOBAL__sub_I__ZN5Crypt11generateKeyEPh>:
 80902c8:	f000 b9f4 	b.w	80906b4 <HAL_Pin_Map>

080902cc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80902cc:	4770      	bx	lr

080902ce <_ZN11USARTSerialD0Ev>:
 80902ce:	b510      	push	{r4, lr}
 80902d0:	4604      	mov	r4, r0
 80902d2:	f7ef fee6 	bl	80800a2 <_ZdlPv>
 80902d6:	4620      	mov	r0, r4
 80902d8:	bd10      	pop	{r4, pc}
	...

080902dc <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 80902dc:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 80902de:	4c0c      	ldr	r4, [pc, #48]	; (8090310 <_Z22__fetch_global_Serial5v+0x34>)
 80902e0:	6823      	ldr	r3, [r4, #0]
 80902e2:	07db      	lsls	r3, r3, #31
 80902e4:	d411      	bmi.n	809030a <_Z22__fetch_global_Serial5v+0x2e>
 80902e6:	4620      	mov	r0, r4
 80902e8:	f7ef fedf 	bl	80800aa <__cxa_guard_acquire>
 80902ec:	b168      	cbz	r0, 809030a <_Z22__fetch_global_Serial5v+0x2e>
 80902ee:	4a09      	ldr	r2, [pc, #36]	; (8090314 <_Z22__fetch_global_Serial5v+0x38>)
 80902f0:	2104      	movs	r1, #4
 80902f2:	4b09      	ldr	r3, [pc, #36]	; (8090318 <_Z22__fetch_global_Serial5v+0x3c>)
 80902f4:	4809      	ldr	r0, [pc, #36]	; (809031c <_Z22__fetch_global_Serial5v+0x40>)
 80902f6:	f001 fb15 	bl	8091924 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80902fa:	4620      	mov	r0, r4
 80902fc:	f7ef feda 	bl	80800b4 <__cxa_guard_release>
 8090300:	4a07      	ldr	r2, [pc, #28]	; (8090320 <_Z22__fetch_global_Serial5v+0x44>)
 8090302:	4908      	ldr	r1, [pc, #32]	; (8090324 <_Z22__fetch_global_Serial5v+0x48>)
 8090304:	4805      	ldr	r0, [pc, #20]	; (809031c <_Z22__fetch_global_Serial5v+0x40>)
 8090306:	f001 fc69 	bl	8091bdc <__aeabi_atexit>
	return serial5;
}
 809030a:	4804      	ldr	r0, [pc, #16]	; (809031c <_Z22__fetch_global_Serial5v+0x40>)
 809030c:	bd10      	pop	{r4, pc}
 809030e:	bf00      	nop
 8090310:	20003198 	.word	0x20003198
 8090314:	2000319c 	.word	0x2000319c
 8090318:	20003234 	.word	0x20003234
 809031c:	20003220 	.word	0x20003220
 8090320:	200004b0 	.word	0x200004b0
 8090324:	080902cd 	.word	0x080902cd

08090328 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8090328:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 809032a:	f7ff ffd7 	bl	80902dc <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 809032e:	4b07      	ldr	r3, [pc, #28]	; (809034c <_Z15serialEventRun5v+0x24>)
 8090330:	4604      	mov	r4, r0
 8090332:	b153      	cbz	r3, 809034a <_Z15serialEventRun5v+0x22>
 8090334:	f001 fb15 	bl	8091962 <_ZN11USARTSerial9isEnabledEv>
 8090338:	b138      	cbz	r0, 809034a <_Z15serialEventRun5v+0x22>
 809033a:	6823      	ldr	r3, [r4, #0]
 809033c:	4620      	mov	r0, r4
 809033e:	691b      	ldr	r3, [r3, #16]
 8090340:	4798      	blx	r3
 8090342:	2800      	cmp	r0, #0
 8090344:	dd01      	ble.n	809034a <_Z15serialEventRun5v+0x22>
        handler();
 8090346:	f3af 8000 	nop.w
 809034a:	bd10      	pop	{r4, pc}
 809034c:	00000000 	.word	0x00000000

08090350 <_ZN3CANC1Ev>:
#include "CAN.h"
#include "Serial5/Serial5.h"

CAN::CAN() {
    //initialization parameters
}
 8090350:	4770      	bx	lr
	...

08090354 <_ZN3CAN5beginEv>:

void CAN::monitorOBD() {
    Serial5.write("stma\r");
}

void CAN::begin(){
 8090354:	b508      	push	{r3, lr}
    Serial5.begin(9600); 
 8090356:	f7ff ffc1 	bl	80902dc <_Z22__fetch_global_Serial5v>
 809035a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 809035e:	f001 fafb 	bl	8091958 <_ZN11USARTSerial5beginEm>
    while(!Serial5);      
 8090362:	f7ff ffbb 	bl	80902dc <_Z22__fetch_global_Serial5v>
 8090366:	f001 fafa 	bl	809195e <_ZN11USARTSerialcvbEv>
 809036a:	2800      	cmp	r0, #0
 809036c:	d0f9      	beq.n	8090362 <_ZN3CAN5beginEv+0xe>
    Serial5.write("atz\r");
 809036e:	f7ff ffb5 	bl	80902dc <_Z22__fetch_global_Serial5v>
 8090372:	4904      	ldr	r1, [pc, #16]	; (8090384 <_ZN3CAN5beginEv+0x30>)
 8090374:	f7f1 fcae 	bl	8081cd4 <_ZN5Print5writeEPKc>
    delay(1200);
}
 8090378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void CAN::begin(){
    Serial5.begin(9600); 
    while(!Serial5);      
    Serial5.write("atz\r");
    delay(1200);
 809037c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8090380:	f001 b8b6 	b.w	80914f0 <delay>
 8090384:	0809545b 	.word	0x0809545b

08090388 <_ZN3CAN7receiveEPiRi>:
}

int CAN::receive(int* buffer, int& size){
 8090388:	b570      	push	{r4, r5, r6, lr}
 809038a:	460e      	mov	r6, r1
 809038c:	4615      	mov	r5, r2
    int temp;
    int i = 0;
 809038e:	2400      	movs	r4, #0

    while(Serial5.available())
 8090390:	f7ff ffa4 	bl	80902dc <_Z22__fetch_global_Serial5v>
 8090394:	6803      	ldr	r3, [r0, #0]
 8090396:	691b      	ldr	r3, [r3, #16]
 8090398:	4798      	blx	r3
 809039a:	b140      	cbz	r0, 80903ae <_ZN3CAN7receiveEPiRi+0x26>
    {
        temp = Serial5.read();
 809039c:	f7ff ff9e 	bl	80902dc <_Z22__fetch_global_Serial5v>
 80903a0:	6803      	ldr	r3, [r0, #0]
 80903a2:	695b      	ldr	r3, [r3, #20]
 80903a4:	4798      	blx	r3
        *(buffer+i) = temp;
 80903a6:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        i++;
 80903aa:	3401      	adds	r4, #1

int CAN::receive(int* buffer, int& size){
    int temp;
    int i = 0;

    while(Serial5.available())
 80903ac:	e7f0      	b.n	8090390 <_ZN3CAN7receiveEPiRi+0x8>
    {
        temp = Serial5.read();
        *(buffer+i) = temp;
        i++;
    }
    size = i;
 80903ae:	602c      	str	r4, [r5, #0]
    return Serial5.available();
 80903b0:	f7ff ff94 	bl	80902dc <_Z22__fetch_global_Serial5v>
}
 80903b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        temp = Serial5.read();
        *(buffer+i) = temp;
        i++;
    }
    size = i;
    return Serial5.available();
 80903b8:	6803      	ldr	r3, [r0, #0]
 80903ba:	691b      	ldr	r3, [r3, #16]
 80903bc:	4718      	bx	r3

080903be <_GLOBAL__sub_I__Z22__fetch_global_Serial5v>:
 80903be:	f000 b979 	b.w	80906b4 <HAL_Pin_Map>

080903c2 <_GLOBAL__sub_I__ZN4CarTC2Ev>:
 80903c2:	f000 b977 	b.w	80906b4 <HAL_Pin_Map>

080903c6 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 80903c6:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80903ca:	f7f1 b86c 	b.w	80814a6 <_ZN9SdSpiCard11writeBlocksEmPKhj>

080903ce <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 80903ce:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80903d2:	f7f0 bfa0 	b.w	8081316 <_ZN9SdSpiCard10readBlocksEmPhj>

080903d6 <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 80903d6:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80903da:	f7f0 bfdf 	b.w	808139c <_ZN9SdSpiCard10writeBlockEmPKh>

080903de <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 80903de:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80903e2:	f7f0 bf50 	b.w	8081286 <_ZN9SdSpiCard9readBlockEmPh>
	...

080903e8 <_ZN2SDC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80903e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80903ec:	6081      	str	r1, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 80903ee:	490d      	ldr	r1, [pc, #52]	; (8090424 <_ZN2SDC1Ev+0x3c>)
 80903f0:	2200      	movs	r2, #0
 80903f2:	6001      	str	r1, [r0, #0]
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 80903f4:	2119      	movs	r1, #25
 80903f6:	f880 149e 	strb.w	r1, [r0, #1182]	; 0x49e
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 80903fa:	490b      	ldr	r1, [pc, #44]	; (8090428 <_ZN2SDC1Ev+0x40>)
 80903fc:	7402      	strb	r2, [r0, #16]
 80903fe:	6341      	str	r1, [r0, #52]	; 0x34
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8090400:	490a      	ldr	r1, [pc, #40]	; (809042c <_ZN2SDC1Ev+0x44>)
 8090402:	7442      	strb	r2, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8090404:	6042      	str	r2, [r0, #4]
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8090406:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
 809040a:	f880 2474 	strb.w	r2, [r0, #1140]	; 0x474
 809040e:	f880 2475 	strb.w	r2, [r0, #1141]	; 0x475
 8090412:	f880 249c 	strb.w	r2, [r0, #1180]	; 0x49c
 8090416:	f880 24a1 	strb.w	r2, [r0, #1185]	; 0x4a1
 809041a:	f8c0 14a4 	str.w	r1, [r0, #1188]	; 0x4a4
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 809041e:	f880 24a8 	strb.w	r2, [r0, #1192]	; 0x4a8
#include "SD.h"

SD::SD()
{
    //initialize variables
}
 8090422:	4770      	bx	lr
 8090424:	08095468 	.word	0x08095468
 8090428:	08095490 	.word	0x08095490
 809042c:	08093270 	.word	0x08093270

08090430 <_ZN2SD5beginEv>:

bool SD::begin()
{
 8090430:	b570      	push	{r4, r5, r6, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
    return m_sdCard.begin(spi, csPin, divisor) &&
 8090432:	f200 41a4 	addw	r1, r0, #1188	; 0x4a4
 8090436:	4604      	mov	r4, r0
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 8090438:	f100 0634 	add.w	r6, r0, #52	; 0x34
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
    return m_sdCard.begin(spi, csPin, divisor) &&
 809043c:	2304      	movs	r3, #4
 809043e:	220c      	movs	r2, #12
 8090440:	f500 6093 	add.w	r0, r0, #1176	; 0x498
 8090444:	f7f0 fe8b 	bl	808115e <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8090448:	b1f0      	cbz	r0, 8090488 <_ZN2SD5beginEv+0x58>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 809044a:	f204 4574 	addw	r5, r4, #1140	; 0x474
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
 809044e:	4628      	mov	r0, r5
 8090450:	f7f1 fb1c 	bl	8081a8c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8090454:	2101      	movs	r1, #1
 8090456:	4630      	mov	r0, r6
 8090458:	f7f1 fd56 	bl	8081f08 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 809045c:	4601      	mov	r1, r0
 809045e:	b128      	cbz	r0, 809046c <_ZN2SD5beginEv+0x3c>
 8090460:	4631      	mov	r1, r6
 8090462:	4628      	mov	r0, r5
 8090464:	f7f1 f93f 	bl	80816e6 <_ZN7FatFile8openRootEP9FatVolume>
 8090468:	b170      	cbz	r0, 8090488 <_ZN2SD5beginEv+0x58>
 809046a:	e005      	b.n	8090478 <_ZN2SD5beginEv+0x48>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 809046c:	4630      	mov	r0, r6
 809046e:	f7f1 fd4b 	bl	8081f08 <_ZN9FatVolume4initEh>
 8090472:	2800      	cmp	r0, #0
 8090474:	d1f4      	bne.n	8090460 <_ZN2SD5beginEv+0x30>
 8090476:	e007      	b.n	8090488 <_ZN2SD5beginEv+0x58>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8090478:	f894 3474 	ldrb.w	r3, [r4, #1140]	; 0x474
 809047c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8090480:	d002      	beq.n	8090488 <_ZN2SD5beginEv+0x58>
      return false;
    }
    m_cwd = dir;
 8090482:	4b02      	ldr	r3, [pc, #8]	; (809048c <_ZN2SD5beginEv+0x5c>)
 8090484:	601d      	str	r5, [r3, #0]
 8090486:	bd70      	pop	{r4, r5, r6, pc}
    /* Initialize SdFat or print a detailed error message and halt
    *  Use half speed like the native library.
    *  Change to SPI_FULL_SPEED for more performance.
    */
    if (!sd.begin(chipSelect, SPI_HALF_SPEED)) {
      return false;
 8090488:	2000      	movs	r0, #0
    }
    return true;
}
 809048a:	bd70      	pop	{r4, r5, r6, pc}
 809048c:	20000f38 	.word	0x20000f38

08090490 <_GLOBAL__sub_I__ZN2SDC2Ev>:
 8090490:	f000 b910 	b.w	80906b4 <HAL_Pin_Map>

08090494 <_ZN3AWS8setupConEPctPFvS0_PhjE>:
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090494:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090498:	4d5a      	ldr	r5, [pc, #360]	; (8090604 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x170>)
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 809049a:	4698      	mov	r8, r3
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 809049c:	682b      	ldr	r3, [r5, #0]
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 809049e:	4604      	mov	r4, r0
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 80904a0:	07db      	lsls	r3, r3, #31
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 80904a2:	460e      	mov	r6, r1
 80904a4:	4617      	mov	r7, r2
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 80904a6:	d411      	bmi.n	80904cc <_ZN3AWS8setupConEPctPFvS0_PhjE+0x38>
 80904a8:	4628      	mov	r0, r5
 80904aa:	f7ef fdfe 	bl	80800aa <__cxa_guard_acquire>
 80904ae:	b168      	cbz	r0, 80904cc <_ZN3AWS8setupConEPctPFvS0_PhjE+0x38>
 80904b0:	463a      	mov	r2, r7
 80904b2:	4631      	mov	r1, r6
 80904b4:	4643      	mov	r3, r8
 80904b6:	4854      	ldr	r0, [pc, #336]	; (8090608 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 80904b8:	f7f1 fe6c 	bl	8082194 <_ZN4MQTTC1EPctPFvS0_PhjE>
 80904bc:	4628      	mov	r0, r5
 80904be:	f7ef fdf9 	bl	80800b4 <__cxa_guard_release>
 80904c2:	4a52      	ldr	r2, [pc, #328]	; (809060c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x178>)
 80904c4:	4952      	ldr	r1, [pc, #328]	; (8090610 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x17c>)
 80904c6:	4850      	ldr	r0, [pc, #320]	; (8090608 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 80904c8:	f001 fb88 	bl	8091bdc <__aeabi_atexit>
 80904cc:	4d4e      	ldr	r5, [pc, #312]	; (8090608 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 80904ce:	686b      	ldr	r3, [r5, #4]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 80904d0:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 80904d2:	68ab      	ldr	r3, [r5, #8]
 80904d4:	60a3      	str	r3, [r4, #8]
 80904d6:	68eb      	ldr	r3, [r5, #12]
 80904d8:	60e3      	str	r3, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80904da:	692b      	ldr	r3, [r5, #16]
 80904dc:	6123      	str	r3, [r4, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80904de:	696b      	ldr	r3, [r5, #20]
 80904e0:	6163      	str	r3, [r4, #20]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80904e2:	69af      	ldr	r7, [r5, #24]
	if (__tmp != _M_pi)
 80904e4:	69a3      	ldr	r3, [r4, #24]
 80904e6:	429f      	cmp	r7, r3
 80904e8:	d016      	beq.n	8090518 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x84>
	  {
	    if (__tmp != 0)
 80904ea:	b117      	cbz	r7, 80904f2 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x5e>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80904ec:	687b      	ldr	r3, [r7, #4]
 80904ee:	3301      	adds	r3, #1
 80904f0:	607b      	str	r3, [r7, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 80904f2:	69a6      	ldr	r6, [r4, #24]
 80904f4:	b17e      	cbz	r6, 8090516 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80904f6:	6873      	ldr	r3, [r6, #4]
 80904f8:	3b01      	subs	r3, #1
 80904fa:	6073      	str	r3, [r6, #4]
 80904fc:	b95b      	cbnz	r3, 8090516 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>
        {
          _M_dispose();
 80904fe:	6833      	ldr	r3, [r6, #0]
 8090500:	4630      	mov	r0, r6
 8090502:	689b      	ldr	r3, [r3, #8]
 8090504:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8090506:	68b3      	ldr	r3, [r6, #8]
 8090508:	3b01      	subs	r3, #1
 809050a:	60b3      	str	r3, [r6, #8]
 809050c:	b91b      	cbnz	r3, 8090516 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>
            _M_destroy();
 809050e:	6833      	ldr	r3, [r6, #0]
 8090510:	4630      	mov	r0, r6
 8090512:	68db      	ldr	r3, [r3, #12]
 8090514:	4798      	blx	r3
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 8090516:	61a7      	str	r7, [r4, #24]
#define MQTTPINGREQ     12 << 4 // PING Request
#define MQTTPINGRESP    13 << 4 // PING Response
#define MQTTDISCONNECT  14 << 4 // Client is Disconnecting
#define MQTTReserved    15 << 4 // Reserved

class MQTT {
 8090518:	69eb      	ldr	r3, [r5, #28]
 809051a:	493e      	ldr	r1, [pc, #248]	; (8090614 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x180>)
 809051c:	61e3      	str	r3, [r4, #28]
 809051e:	8c2b      	ldrh	r3, [r5, #32]
 8090520:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8090524:	8423      	strh	r3, [r4, #32]
 8090526:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8090528:	4e3b      	ldr	r6, [pc, #236]	; (8090618 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x184>)
 809052a:	6263      	str	r3, [r4, #36]	; 0x24
 809052c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 809052e:	f504 67cb 	add.w	r7, r4, #1624	; 0x658
 8090532:	62a3      	str	r3, [r4, #40]	; 0x28
 8090534:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8090538:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 809053c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 809053e:	6323      	str	r3, [r4, #48]	; 0x30
 8090540:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8090542:	6363      	str	r3, [r4, #52]	; 0x34
 8090544:	f000 fe0e 	bl	8091164 <_ZN6StringaSERKS_>
 8090548:	6cab      	ldr	r3, [r5, #72]	; 0x48
 809054a:	f44f 721e 	mov.w	r2, #632	; 0x278
 809054e:	64a3      	str	r3, [r4, #72]	; 0x48
 8090550:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
 8090554:	4931      	ldr	r1, [pc, #196]	; (809061c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x188>)
 8090556:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 809055a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 809055c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8090560:	6523      	str	r3, [r4, #80]	; 0x50
 8090562:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 8090566:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 809056a:	f002 fd98 	bl	809309e <memcpy>
 809056e:	22b4      	movs	r2, #180	; 0xb4
 8090570:	492b      	ldr	r1, [pc, #172]	; (8090620 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x18c>)
 8090572:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8090576:	f002 fd92 	bl	809309e <memcpy>
 809057a:	2264      	movs	r2, #100	; 0x64
 809057c:	4929      	ldr	r1, [pc, #164]	; (8090624 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x190>)
 809057e:	f504 7061 	add.w	r0, r4, #900	; 0x384
 8090582:	f002 fd8c 	bl	809309e <memcpy>
 8090586:	f44f 729a 	mov.w	r2, #308	; 0x134
 809058a:	4927      	ldr	r1, [pc, #156]	; (8090628 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x194>)
 809058c:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8090590:	f002 fd85 	bl	809309e <memcpy>
 8090594:	f44f 729a 	mov.w	r2, #308	; 0x134
 8090598:	4924      	ldr	r1, [pc, #144]	; (809062c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x198>)
 809059a:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 809059e:	f002 fd7e 	bl	809309e <memcpy>
 80905a2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80905a6:	f504 63ca 	add.w	r3, r4, #1616	; 0x650
 80905aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80905ae:	3608      	adds	r6, #8
 80905b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80905b2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80905b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80905b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80905b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80905bc:	e887 0003 	stmia.w	r7, {r0, r1}
 80905c0:	f895 3680 	ldrb.w	r3, [r5, #1664]	; 0x680
    awsMqtt = temp;
    ret = awsMqtt.enableTls(amazonIoTRootCaPem, sizeof(amazonIoTRootCaPem),
 80905c4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80905c8:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
 80905cc:	f895 3681 	ldrb.w	r3, [r5, #1665]	; 0x681
 80905d0:	4917      	ldr	r1, [pc, #92]	; (8090630 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x19c>)
 80905d2:	f884 3681 	strb.w	r3, [r4, #1665]	; 0x681
 80905d6:	f895 3682 	ldrb.w	r3, [r5, #1666]	; 0x682
 80905da:	4620      	mov	r0, r4
 80905dc:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
 80905e0:	f240 63a6 	movw	r3, #1702	; 0x6a6
 80905e4:	9302      	str	r3, [sp, #8]
 80905e6:	4b13      	ldr	r3, [pc, #76]	; (8090634 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x1a0>)
 80905e8:	9301      	str	r3, [sp, #4]
 80905ea:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 80905ee:	9300      	str	r3, [sp, #0]
 80905f0:	4b11      	ldr	r3, [pc, #68]	; (8090638 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x1a4>)
 80905f2:	f7f1 fe53 	bl	808229c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>
                     clientKeyCrtPem, sizeof(clientKeyCrtPem),
                     clientKeyPem, sizeof(clientKeyPem));            
    return(ret);  
}
 80905f6:	3000      	adds	r0, #0
 80905f8:	bf18      	it	ne
 80905fa:	2001      	movne	r0, #1
 80905fc:	b004      	add	sp, #16
 80905fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8090602:	bf00      	nop
 8090604:	200032b8 	.word	0x200032b8
 8090608:	200032c0 	.word	0x200032c0
 809060c:	200004b0 	.word	0x200004b0
 8090610:	08082275 	.word	0x08082275
 8090614:	200032f8 	.word	0x200032f8
 8090618:	20003910 	.word	0x20003910
 809061c:	20003318 	.word	0x20003318
 8090620:	20003590 	.word	0x20003590
 8090624:	20003644 	.word	0x20003644
 8090628:	200036a8 	.word	0x200036a8
 809062c:	200037dc 	.word	0x200037dc
 8090630:	08095978 	.word	0x08095978
 8090634:	08096058 	.word	0x08096058
 8090638:	080954a0 	.word	0x080954a0

0809063c <_ZN3AWSC1EPctPFvS0_PhjE>:

AWS::AWS() {
    //add initializations for default case
}

AWS::AWS(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)){
 809063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 809063e:	4604      	mov	r4, r0
 8090640:	460d      	mov	r5, r1
 8090642:	4616      	mov	r6, r2
 8090644:	461f      	mov	r7, r3
 8090646:	f7f1 fd6d 	bl	8082124 <_ZN4MQTTC1Ev>
    setupCon(domain,port,callbackRef);
 809064a:	463b      	mov	r3, r7
 809064c:	4632      	mov	r2, r6
 809064e:	4629      	mov	r1, r5
 8090650:	4620      	mov	r0, r4
 8090652:	f7ff ff1f 	bl	8090494 <_ZN3AWS8setupConEPctPFvS0_PhjE>
}
 8090656:	4620      	mov	r0, r4
 8090658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0809065a <_ZN3DOFC1Ev>:
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -7.140 // Declination (degrees) in Columbus, OH.
//In future 


DOF::DOF()
 809065a:	b510      	push	{r4, lr}
 809065c:	4604      	mov	r4, r0
 809065e:	3034      	adds	r0, #52	; 0x34
 8090660:	f7ef fed2 	bl	8080408 <_ZN7LSM9DS1C1Ev>
{
  //initialize variables
} 
 8090664:	4620      	mov	r0, r4
 8090666:	bd10      	pop	{r4, pc}

08090668 <_ZN3DOF5beginEv>:


void DOF::begin() 
{
  imu.settings.device.commInterface = IMU_MODE_I2C;
 8090668:	2301      	movs	r3, #1
 809066a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  imu.settings.device.mAddress = LSM9DS1_M;
 809066e:	231e      	movs	r3, #30
 8090670:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  imu.settings.device.agAddress = LSM9DS1_AG;
 8090674:	236b      	movs	r3, #107	; 0x6b
 8090676:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  imu.begin();
 809067a:	3034      	adds	r0, #52	; 0x34
 809067c:	f7f0 b90d 	b.w	808089a <_ZN7LSM9DS15beginEv>

08090680 <_ZN3DOF7getTempEv>:
  MZ=imu.mz;
#endif
}

bool DOF::getTemp()
{
 8090680:	b510      	push	{r4, lr}
 8090682:	4604      	mov	r4, r0
  // To read from the temperature, you must first call the
  // readTemp() function. When this exits, it'll update the
  // temperature with the most current data.
  imu.readTemp(); 
 8090684:	3034      	adds	r0, #52	; 0x34
 8090686:	f7f0 f9a0 	bl	80809ca <_ZN7LSM9DS18readTempEv>
  // get temp
  TEMP = (imu.temperature/256 +25.0);
 809068a:	f9b4 006e 	ldrsh.w	r0, [r4, #110]	; 0x6e
 809068e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8090692:	fb90 f0f3 	sdiv	r0, r0, r3
 8090696:	f001 fd41 	bl	809211c <__aeabi_i2d>
 809069a:	2200      	movs	r2, #0
 809069c:	4b03      	ldr	r3, [pc, #12]	; (80906ac <_ZN3DOF7getTempEv+0x2c>)
 809069e:	f001 fbf1 	bl	8091e84 <__adddf3>
 80906a2:	f002 f899 	bl	80927d8 <__aeabi_d2f>
 80906a6:	6320      	str	r0, [r4, #48]	; 0x30
  return true;
}
 80906a8:	2001      	movs	r0, #1
 80906aa:	bd10      	pop	{r4, pc}
 80906ac:	40390000 	.word	0x40390000

080906b0 <_GLOBAL__sub_I__ZN3DOFC2Ev>:
 80906b0:	f000 b800 	b.w	80906b4 <HAL_Pin_Map>

080906b4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80906b4:	b508      	push	{r3, lr}
 80906b6:	4b02      	ldr	r3, [pc, #8]	; (80906c0 <HAL_Pin_Map+0xc>)
 80906b8:	681b      	ldr	r3, [r3, #0]
 80906ba:	681b      	ldr	r3, [r3, #0]
 80906bc:	9301      	str	r3, [sp, #4]
 80906be:	bd08      	pop	{r3, pc}
 80906c0:	080401b0 	.word	0x080401b0

080906c4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80906c4:	b508      	push	{r3, lr}
 80906c6:	4b02      	ldr	r3, [pc, #8]	; (80906d0 <HAL_Pin_Mode+0xc>)
 80906c8:	681b      	ldr	r3, [r3, #0]
 80906ca:	689b      	ldr	r3, [r3, #8]
 80906cc:	9301      	str	r3, [sp, #4]
 80906ce:	bd08      	pop	{r3, pc}
 80906d0:	080401b0 	.word	0x080401b0

080906d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80906d4:	b508      	push	{r3, lr}
 80906d6:	4b02      	ldr	r3, [pc, #8]	; (80906e0 <HAL_Get_Pin_Mode+0xc>)
 80906d8:	681b      	ldr	r3, [r3, #0]
 80906da:	68db      	ldr	r3, [r3, #12]
 80906dc:	9301      	str	r3, [sp, #4]
 80906de:	bd08      	pop	{r3, pc}
 80906e0:	080401b0 	.word	0x080401b0

080906e4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80906e4:	b508      	push	{r3, lr}
 80906e6:	4b02      	ldr	r3, [pc, #8]	; (80906f0 <HAL_GPIO_Write+0xc>)
 80906e8:	681b      	ldr	r3, [r3, #0]
 80906ea:	691b      	ldr	r3, [r3, #16]
 80906ec:	9301      	str	r3, [sp, #4]
 80906ee:	bd08      	pop	{r3, pc}
 80906f0:	080401b0 	.word	0x080401b0

080906f4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80906f4:	b508      	push	{r3, lr}
 80906f6:	4b02      	ldr	r3, [pc, #8]	; (8090700 <HAL_SPI_Begin+0xc>)
 80906f8:	681b      	ldr	r3, [r3, #0]
 80906fa:	681b      	ldr	r3, [r3, #0]
 80906fc:	9301      	str	r3, [sp, #4]
 80906fe:	bd08      	pop	{r3, pc}
 8090700:	080401b4 	.word	0x080401b4

08090704 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 8090704:	b508      	push	{r3, lr}
 8090706:	4b02      	ldr	r3, [pc, #8]	; (8090710 <HAL_SPI_Set_Bit_Order+0xc>)
 8090708:	681b      	ldr	r3, [r3, #0]
 809070a:	689b      	ldr	r3, [r3, #8]
 809070c:	9301      	str	r3, [sp, #4]
 809070e:	bd08      	pop	{r3, pc}
 8090710:	080401b4 	.word	0x080401b4

08090714 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 8090714:	b508      	push	{r3, lr}
 8090716:	4b02      	ldr	r3, [pc, #8]	; (8090720 <HAL_SPI_Set_Data_Mode+0xc>)
 8090718:	681b      	ldr	r3, [r3, #0]
 809071a:	68db      	ldr	r3, [r3, #12]
 809071c:	9301      	str	r3, [sp, #4]
 809071e:	bd08      	pop	{r3, pc}
 8090720:	080401b4 	.word	0x080401b4

08090724 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 8090724:	b508      	push	{r3, lr}
 8090726:	4b02      	ldr	r3, [pc, #8]	; (8090730 <HAL_SPI_Set_Clock_Divider+0xc>)
 8090728:	681b      	ldr	r3, [r3, #0]
 809072a:	691b      	ldr	r3, [r3, #16]
 809072c:	9301      	str	r3, [sp, #4]
 809072e:	bd08      	pop	{r3, pc}
 8090730:	080401b4 	.word	0x080401b4

08090734 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 8090734:	b508      	push	{r3, lr}
 8090736:	4b02      	ldr	r3, [pc, #8]	; (8090740 <HAL_SPI_Send_Receive_Data+0xc>)
 8090738:	681b      	ldr	r3, [r3, #0]
 809073a:	695b      	ldr	r3, [r3, #20]
 809073c:	9301      	str	r3, [sp, #4]
 809073e:	bd08      	pop	{r3, pc}
 8090740:	080401b4 	.word	0x080401b4

08090744 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8090744:	b508      	push	{r3, lr}
 8090746:	4b02      	ldr	r3, [pc, #8]	; (8090750 <HAL_SPI_Init+0xc>)
 8090748:	681b      	ldr	r3, [r3, #0]
 809074a:	69db      	ldr	r3, [r3, #28]
 809074c:	9301      	str	r3, [sp, #4]
 809074e:	bd08      	pop	{r3, pc}
 8090750:	080401b4 	.word	0x080401b4

08090754 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8090754:	b508      	push	{r3, lr}
 8090756:	4b02      	ldr	r3, [pc, #8]	; (8090760 <HAL_SPI_Is_Enabled+0xc>)
 8090758:	681b      	ldr	r3, [r3, #0]
 809075a:	6a1b      	ldr	r3, [r3, #32]
 809075c:	9301      	str	r3, [sp, #4]
 809075e:	bd08      	pop	{r3, pc}
 8090760:	080401b4 	.word	0x080401b4

08090764 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8090764:	b508      	push	{r3, lr}
 8090766:	4b02      	ldr	r3, [pc, #8]	; (8090770 <HAL_SPI_Info+0xc>)
 8090768:	681b      	ldr	r3, [r3, #0]
 809076a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 809076c:	9301      	str	r3, [sp, #4]
 809076e:	bd08      	pop	{r3, pc}
 8090770:	080401b4 	.word	0x080401b4

08090774 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 8090774:	b508      	push	{r3, lr}
 8090776:	4b02      	ldr	r3, [pc, #8]	; (8090780 <HAL_SPI_DMA_Transfer+0xc>)
 8090778:	681b      	ldr	r3, [r3, #0]
 809077a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 809077c:	9301      	str	r3, [sp, #4]
 809077e:	bd08      	pop	{r3, pc}
 8090780:	080401b4 	.word	0x080401b4

08090784 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8090784:	b508      	push	{r3, lr}
 8090786:	4b02      	ldr	r3, [pc, #8]	; (8090790 <HAL_SPI_DMA_Transfer_Status+0xc>)
 8090788:	681b      	ldr	r3, [r3, #0]
 809078a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 809078c:	9301      	str	r3, [sp, #4]
 809078e:	bd08      	pop	{r3, pc}
 8090790:	080401b4 	.word	0x080401b4

08090794 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8090794:	b508      	push	{r3, lr}
 8090796:	4b02      	ldr	r3, [pc, #8]	; (80907a0 <HAL_RNG_GetRandomNumber+0xc>)
 8090798:	681b      	ldr	r3, [r3, #0]
 809079a:	685b      	ldr	r3, [r3, #4]
 809079c:	9301      	str	r3, [sp, #4]
 809079e:	bd08      	pop	{r3, pc}
 80907a0:	0804019c 	.word	0x0804019c

080907a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80907a4:	b508      	push	{r3, lr}
 80907a6:	4b02      	ldr	r3, [pc, #8]	; (80907b0 <HAL_Delay_Microseconds+0xc>)
 80907a8:	681b      	ldr	r3, [r3, #0]
 80907aa:	68db      	ldr	r3, [r3, #12]
 80907ac:	9301      	str	r3, [sp, #4]
 80907ae:	bd08      	pop	{r3, pc}
 80907b0:	0804019c 	.word	0x0804019c

080907b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80907b4:	b508      	push	{r3, lr}
 80907b6:	4b02      	ldr	r3, [pc, #8]	; (80907c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80907b8:	681b      	ldr	r3, [r3, #0]
 80907ba:	695b      	ldr	r3, [r3, #20]
 80907bc:	9301      	str	r3, [sp, #4]
 80907be:	bd08      	pop	{r3, pc}
 80907c0:	0804019c 	.word	0x0804019c

080907c4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80907c4:	b508      	push	{r3, lr}
 80907c6:	4b02      	ldr	r3, [pc, #8]	; (80907d0 <HAL_RTC_Get_UnixTime+0xc>)
 80907c8:	681b      	ldr	r3, [r3, #0]
 80907ca:	69db      	ldr	r3, [r3, #28]
 80907cc:	9301      	str	r3, [sp, #4]
 80907ce:	bd08      	pop	{r3, pc}
 80907d0:	0804019c 	.word	0x0804019c

080907d4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80907d4:	b508      	push	{r3, lr}
 80907d6:	4b02      	ldr	r3, [pc, #8]	; (80907e0 <os_mutex_create+0xc>)
 80907d8:	681b      	ldr	r3, [r3, #0]
 80907da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80907dc:	9301      	str	r3, [sp, #4]
 80907de:	bd08      	pop	{r3, pc}
 80907e0:	080401d0 	.word	0x080401d0

080907e4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80907e4:	b508      	push	{r3, lr}
 80907e6:	4b02      	ldr	r3, [pc, #8]	; (80907f0 <HAL_USART_Init+0xc>)
 80907e8:	681b      	ldr	r3, [r3, #0]
 80907ea:	699b      	ldr	r3, [r3, #24]
 80907ec:	9301      	str	r3, [sp, #4]
 80907ee:	bd08      	pop	{r3, pc}
 80907f0:	080401c4 	.word	0x080401c4

080907f4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80907f4:	b508      	push	{r3, lr}
 80907f6:	4b02      	ldr	r3, [pc, #8]	; (8090800 <HAL_USART_Write_Data+0xc>)
 80907f8:	681b      	ldr	r3, [r3, #0]
 80907fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80907fc:	9301      	str	r3, [sp, #4]
 80907fe:	bd08      	pop	{r3, pc}
 8090800:	080401c4 	.word	0x080401c4

08090804 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8090804:	b508      	push	{r3, lr}
 8090806:	4b02      	ldr	r3, [pc, #8]	; (8090810 <HAL_USART_Available_Data+0xc>)
 8090808:	681b      	ldr	r3, [r3, #0]
 809080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 809080c:	9301      	str	r3, [sp, #4]
 809080e:	bd08      	pop	{r3, pc}
 8090810:	080401c4 	.word	0x080401c4

08090814 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8090814:	b508      	push	{r3, lr}
 8090816:	4b02      	ldr	r3, [pc, #8]	; (8090820 <HAL_USART_Read_Data+0xc>)
 8090818:	681b      	ldr	r3, [r3, #0]
 809081a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 809081c:	9301      	str	r3, [sp, #4]
 809081e:	bd08      	pop	{r3, pc}
 8090820:	080401c4 	.word	0x080401c4

08090824 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8090824:	b508      	push	{r3, lr}
 8090826:	4b02      	ldr	r3, [pc, #8]	; (8090830 <HAL_USART_Peek_Data+0xc>)
 8090828:	681b      	ldr	r3, [r3, #0]
 809082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 809082c:	9301      	str	r3, [sp, #4]
 809082e:	bd08      	pop	{r3, pc}
 8090830:	080401c4 	.word	0x080401c4

08090834 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8090834:	b508      	push	{r3, lr}
 8090836:	4b02      	ldr	r3, [pc, #8]	; (8090840 <HAL_USART_Flush_Data+0xc>)
 8090838:	681b      	ldr	r3, [r3, #0]
 809083a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 809083c:	9301      	str	r3, [sp, #4]
 809083e:	bd08      	pop	{r3, pc}
 8090840:	080401c4 	.word	0x080401c4

08090844 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8090844:	b508      	push	{r3, lr}
 8090846:	4b02      	ldr	r3, [pc, #8]	; (8090850 <HAL_USART_Is_Enabled+0xc>)
 8090848:	681b      	ldr	r3, [r3, #0]
 809084a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 809084c:	9301      	str	r3, [sp, #4]
 809084e:	bd08      	pop	{r3, pc}
 8090850:	080401c4 	.word	0x080401c4

08090854 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8090854:	b508      	push	{r3, lr}
 8090856:	4b02      	ldr	r3, [pc, #8]	; (8090860 <HAL_USART_Available_Data_For_Write+0xc>)
 8090858:	681b      	ldr	r3, [r3, #0]
 809085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 809085c:	9301      	str	r3, [sp, #4]
 809085e:	bd08      	pop	{r3, pc}
 8090860:	080401c4 	.word	0x080401c4

08090864 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8090864:	b508      	push	{r3, lr}
 8090866:	4b02      	ldr	r3, [pc, #8]	; (8090870 <HAL_USART_BeginConfig+0xc>)
 8090868:	681b      	ldr	r3, [r3, #0]
 809086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 809086c:	9301      	str	r3, [sp, #4]
 809086e:	bd08      	pop	{r3, pc}
 8090870:	080401c4 	.word	0x080401c4

08090874 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8090874:	b508      	push	{r3, lr}
 8090876:	4b02      	ldr	r3, [pc, #8]	; (8090880 <HAL_I2C_Begin+0xc>)
 8090878:	681b      	ldr	r3, [r3, #0]
 809087a:	68db      	ldr	r3, [r3, #12]
 809087c:	9301      	str	r3, [sp, #4]
 809087e:	bd08      	pop	{r3, pc}
 8090880:	080401ac 	.word	0x080401ac

08090884 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8090884:	b508      	push	{r3, lr}
 8090886:	4b02      	ldr	r3, [pc, #8]	; (8090890 <HAL_I2C_Request_Data+0xc>)
 8090888:	681b      	ldr	r3, [r3, #0]
 809088a:	695b      	ldr	r3, [r3, #20]
 809088c:	9301      	str	r3, [sp, #4]
 809088e:	bd08      	pop	{r3, pc}
 8090890:	080401ac 	.word	0x080401ac

08090894 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8090894:	b508      	push	{r3, lr}
 8090896:	4b02      	ldr	r3, [pc, #8]	; (80908a0 <HAL_I2C_Begin_Transmission+0xc>)
 8090898:	681b      	ldr	r3, [r3, #0]
 809089a:	699b      	ldr	r3, [r3, #24]
 809089c:	9301      	str	r3, [sp, #4]
 809089e:	bd08      	pop	{r3, pc}
 80908a0:	080401ac 	.word	0x080401ac

080908a4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80908a4:	b508      	push	{r3, lr}
 80908a6:	4b02      	ldr	r3, [pc, #8]	; (80908b0 <HAL_I2C_End_Transmission+0xc>)
 80908a8:	681b      	ldr	r3, [r3, #0]
 80908aa:	69db      	ldr	r3, [r3, #28]
 80908ac:	9301      	str	r3, [sp, #4]
 80908ae:	bd08      	pop	{r3, pc}
 80908b0:	080401ac 	.word	0x080401ac

080908b4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80908b4:	b508      	push	{r3, lr}
 80908b6:	4b02      	ldr	r3, [pc, #8]	; (80908c0 <HAL_I2C_Write_Data+0xc>)
 80908b8:	681b      	ldr	r3, [r3, #0]
 80908ba:	6a1b      	ldr	r3, [r3, #32]
 80908bc:	9301      	str	r3, [sp, #4]
 80908be:	bd08      	pop	{r3, pc}
 80908c0:	080401ac 	.word	0x080401ac

080908c4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80908c4:	b508      	push	{r3, lr}
 80908c6:	4b02      	ldr	r3, [pc, #8]	; (80908d0 <HAL_I2C_Available_Data+0xc>)
 80908c8:	681b      	ldr	r3, [r3, #0]
 80908ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80908cc:	9301      	str	r3, [sp, #4]
 80908ce:	bd08      	pop	{r3, pc}
 80908d0:	080401ac 	.word	0x080401ac

080908d4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80908d4:	b508      	push	{r3, lr}
 80908d6:	4b02      	ldr	r3, [pc, #8]	; (80908e0 <HAL_I2C_Read_Data+0xc>)
 80908d8:	681b      	ldr	r3, [r3, #0]
 80908da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80908dc:	9301      	str	r3, [sp, #4]
 80908de:	bd08      	pop	{r3, pc}
 80908e0:	080401ac 	.word	0x080401ac

080908e4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80908e4:	b508      	push	{r3, lr}
 80908e6:	4b02      	ldr	r3, [pc, #8]	; (80908f0 <HAL_I2C_Peek_Data+0xc>)
 80908e8:	681b      	ldr	r3, [r3, #0]
 80908ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80908ec:	9301      	str	r3, [sp, #4]
 80908ee:	bd08      	pop	{r3, pc}
 80908f0:	080401ac 	.word	0x080401ac

080908f4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80908f4:	b508      	push	{r3, lr}
 80908f6:	4b02      	ldr	r3, [pc, #8]	; (8090900 <HAL_I2C_Flush_Data+0xc>)
 80908f8:	681b      	ldr	r3, [r3, #0]
 80908fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80908fc:	9301      	str	r3, [sp, #4]
 80908fe:	bd08      	pop	{r3, pc}
 8090900:	080401ac 	.word	0x080401ac

08090904 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8090904:	b508      	push	{r3, lr}
 8090906:	4b02      	ldr	r3, [pc, #8]	; (8090910 <HAL_I2C_Is_Enabled+0xc>)
 8090908:	681b      	ldr	r3, [r3, #0]
 809090a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 809090c:	9301      	str	r3, [sp, #4]
 809090e:	bd08      	pop	{r3, pc}
 8090910:	080401ac 	.word	0x080401ac

08090914 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8090914:	b508      	push	{r3, lr}
 8090916:	4b02      	ldr	r3, [pc, #8]	; (8090920 <HAL_I2C_Init+0xc>)
 8090918:	681b      	ldr	r3, [r3, #0]
 809091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 809091c:	9301      	str	r3, [sp, #4]
 809091e:	bd08      	pop	{r3, pc}
 8090920:	080401ac 	.word	0x080401ac

08090924 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 8090924:	b508      	push	{r3, lr}
 8090926:	4b02      	ldr	r3, [pc, #8]	; (8090930 <socket_active_status+0xc>)
 8090928:	681b      	ldr	r3, [r3, #0]
 809092a:	681b      	ldr	r3, [r3, #0]
 809092c:	9301      	str	r3, [sp, #4]
 809092e:	bd08      	pop	{r3, pc}
 8090930:	08060024 	.word	0x08060024

08090934 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 8090934:	b508      	push	{r3, lr}
 8090936:	4b02      	ldr	r3, [pc, #8]	; (8090940 <socket_handle_valid+0xc>)
 8090938:	681b      	ldr	r3, [r3, #0]
 809093a:	685b      	ldr	r3, [r3, #4]
 809093c:	9301      	str	r3, [sp, #4]
 809093e:	bd08      	pop	{r3, pc}
 8090940:	08060024 	.word	0x08060024

08090944 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 8090944:	b508      	push	{r3, lr}
 8090946:	4b02      	ldr	r3, [pc, #8]	; (8090950 <socket_create+0xc>)
 8090948:	681b      	ldr	r3, [r3, #0]
 809094a:	689b      	ldr	r3, [r3, #8]
 809094c:	9301      	str	r3, [sp, #4]
 809094e:	bd08      	pop	{r3, pc}
 8090950:	08060024 	.word	0x08060024

08090954 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 8090954:	b508      	push	{r3, lr}
 8090956:	4b02      	ldr	r3, [pc, #8]	; (8090960 <socket_connect+0xc>)
 8090958:	681b      	ldr	r3, [r3, #0]
 809095a:	68db      	ldr	r3, [r3, #12]
 809095c:	9301      	str	r3, [sp, #4]
 809095e:	bd08      	pop	{r3, pc}
 8090960:	08060024 	.word	0x08060024

08090964 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 8090964:	b508      	push	{r3, lr}
 8090966:	4b02      	ldr	r3, [pc, #8]	; (8090970 <socket_receive+0xc>)
 8090968:	681b      	ldr	r3, [r3, #0]
 809096a:	691b      	ldr	r3, [r3, #16]
 809096c:	9301      	str	r3, [sp, #4]
 809096e:	bd08      	pop	{r3, pc}
 8090970:	08060024 	.word	0x08060024

08090974 <socket_send>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
 8090974:	b508      	push	{r3, lr}
 8090976:	4b02      	ldr	r3, [pc, #8]	; (8090980 <socket_send+0xc>)
 8090978:	681b      	ldr	r3, [r3, #0]
 809097a:	699b      	ldr	r3, [r3, #24]
 809097c:	9301      	str	r3, [sp, #4]
 809097e:	bd08      	pop	{r3, pc}
 8090980:	08060024 	.word	0x08060024

08090984 <socket_close>:
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 8090984:	b508      	push	{r3, lr}
 8090986:	4b02      	ldr	r3, [pc, #8]	; (8090990 <socket_close+0xc>)
 8090988:	681b      	ldr	r3, [r3, #0]
 809098a:	6a1b      	ldr	r3, [r3, #32]
 809098c:	9301      	str	r3, [sp, #4]
 809098e:	bd08      	pop	{r3, pc}
 8090990:	08060024 	.word	0x08060024

08090994 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 8090994:	b508      	push	{r3, lr}
 8090996:	4b02      	ldr	r3, [pc, #8]	; (80909a0 <socket_handle_invalid+0xc>)
 8090998:	681b      	ldr	r3, [r3, #0]
 809099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 809099c:	9301      	str	r3, [sp, #4]
 809099e:	bd08      	pop	{r3, pc}
 80909a0:	08060024 	.word	0x08060024

080909a4 <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80909a4:	b508      	push	{r3, lr}
 80909a6:	4b02      	ldr	r3, [pc, #8]	; (80909b0 <HAL_NET_SetNetWatchDog+0xc>)
 80909a8:	681b      	ldr	r3, [r3, #0]
 80909aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80909ac:	9301      	str	r3, [sp, #4]
 80909ae:	bd08      	pop	{r3, pc}
 80909b0:	08060020 	.word	0x08060020

080909b4 <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80909b4:	b508      	push	{r3, lr}
 80909b6:	4b02      	ldr	r3, [pc, #8]	; (80909c0 <inet_gethostbyname+0xc>)
 80909b8:	681b      	ldr	r3, [r3, #0]
 80909ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80909bc:	9301      	str	r3, [sp, #4]
 80909be:	bd08      	pop	{r3, pc}
 80909c0:	08060020 	.word	0x08060020

080909c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80909c4:	b508      	push	{r3, lr}
 80909c6:	4b02      	ldr	r3, [pc, #8]	; (80909d0 <HAL_USB_USART_Init+0xc>)
 80909c8:	681b      	ldr	r3, [r3, #0]
 80909ca:	681b      	ldr	r3, [r3, #0]
 80909cc:	9301      	str	r3, [sp, #4]
 80909ce:	bd08      	pop	{r3, pc}
 80909d0:	0806001c 	.word	0x0806001c

080909d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80909d4:	b508      	push	{r3, lr}
 80909d6:	4b02      	ldr	r3, [pc, #8]	; (80909e0 <HAL_USB_USART_Begin+0xc>)
 80909d8:	681b      	ldr	r3, [r3, #0]
 80909da:	685b      	ldr	r3, [r3, #4]
 80909dc:	9301      	str	r3, [sp, #4]
 80909de:	bd08      	pop	{r3, pc}
 80909e0:	0806001c 	.word	0x0806001c

080909e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80909e4:	b508      	push	{r3, lr}
 80909e6:	4b02      	ldr	r3, [pc, #8]	; (80909f0 <HAL_USB_USART_Available_Data+0xc>)
 80909e8:	681b      	ldr	r3, [r3, #0]
 80909ea:	691b      	ldr	r3, [r3, #16]
 80909ec:	9301      	str	r3, [sp, #4]
 80909ee:	bd08      	pop	{r3, pc}
 80909f0:	0806001c 	.word	0x0806001c

080909f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80909f4:	b508      	push	{r3, lr}
 80909f6:	4b02      	ldr	r3, [pc, #8]	; (8090a00 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80909f8:	681b      	ldr	r3, [r3, #0]
 80909fa:	695b      	ldr	r3, [r3, #20]
 80909fc:	9301      	str	r3, [sp, #4]
 80909fe:	bd08      	pop	{r3, pc}
 8090a00:	0806001c 	.word	0x0806001c

08090a04 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8090a04:	b508      	push	{r3, lr}
 8090a06:	4b02      	ldr	r3, [pc, #8]	; (8090a10 <HAL_USB_USART_Receive_Data+0xc>)
 8090a08:	681b      	ldr	r3, [r3, #0]
 8090a0a:	699b      	ldr	r3, [r3, #24]
 8090a0c:	9301      	str	r3, [sp, #4]
 8090a0e:	bd08      	pop	{r3, pc}
 8090a10:	0806001c 	.word	0x0806001c

08090a14 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8090a14:	b508      	push	{r3, lr}
 8090a16:	4b02      	ldr	r3, [pc, #8]	; (8090a20 <HAL_USB_USART_Send_Data+0xc>)
 8090a18:	681b      	ldr	r3, [r3, #0]
 8090a1a:	69db      	ldr	r3, [r3, #28]
 8090a1c:	9301      	str	r3, [sp, #4]
 8090a1e:	bd08      	pop	{r3, pc}
 8090a20:	0806001c 	.word	0x0806001c

08090a24 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8090a24:	b508      	push	{r3, lr}
 8090a26:	4b02      	ldr	r3, [pc, #8]	; (8090a30 <HAL_USB_USART_Flush_Data+0xc>)
 8090a28:	681b      	ldr	r3, [r3, #0]
 8090a2a:	6a1b      	ldr	r3, [r3, #32]
 8090a2c:	9301      	str	r3, [sp, #4]
 8090a2e:	bd08      	pop	{r3, pc}
 8090a30:	0806001c 	.word	0x0806001c

08090a34 <LED_SetSignalingColor>:
#include "dynalib.h"

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 8090a34:	b508      	push	{r3, lr}
 8090a36:	4b02      	ldr	r3, [pc, #8]	; (8090a40 <LED_SetSignalingColor+0xc>)
 8090a38:	681b      	ldr	r3, [r3, #0]
 8090a3a:	685b      	ldr	r3, [r3, #4]
 8090a3c:	9301      	str	r3, [sp, #4]
 8090a3e:	bd08      	pop	{r3, pc}
 8090a40:	080201a0 	.word	0x080201a0

08090a44 <LED_RGB_IsOverRidden>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 8090a44:	b508      	push	{r3, lr}
 8090a46:	4b02      	ldr	r3, [pc, #8]	; (8090a50 <LED_RGB_IsOverRidden+0xc>)
 8090a48:	681b      	ldr	r3, [r3, #0]
 8090a4a:	699b      	ldr	r3, [r3, #24]
 8090a4c:	9301      	str	r3, [sp, #4]
 8090a4e:	bd08      	pop	{r3, pc}
 8090a50:	080201a0 	.word	0x080201a0

08090a54 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 8090a54:	b508      	push	{r3, lr}
 8090a56:	4b02      	ldr	r3, [pc, #8]	; (8090a60 <LED_On+0xc>)
 8090a58:	681b      	ldr	r3, [r3, #0]
 8090a5a:	69db      	ldr	r3, [r3, #28]
 8090a5c:	9301      	str	r3, [sp, #4]
 8090a5e:	bd08      	pop	{r3, pc}
 8090a60:	080201a0 	.word	0x080201a0

08090a64 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8090a64:	b508      	push	{r3, lr}
 8090a66:	4b02      	ldr	r3, [pc, #8]	; (8090a70 <set_system_mode+0xc>)
 8090a68:	681b      	ldr	r3, [r3, #0]
 8090a6a:	685b      	ldr	r3, [r3, #4]
 8090a6c:	9301      	str	r3, [sp, #4]
 8090a6e:	bd08      	pop	{r3, pc}
 8090a70:	080401a4 	.word	0x080401a4

08090a74 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8090a74:	b508      	push	{r3, lr}
 8090a76:	4b02      	ldr	r3, [pc, #8]	; (8090a80 <system_delay_ms+0xc>)
 8090a78:	681b      	ldr	r3, [r3, #0]
 8090a7a:	695b      	ldr	r3, [r3, #20]
 8090a7c:	9301      	str	r3, [sp, #4]
 8090a7e:	bd08      	pop	{r3, pc}
 8090a80:	080401a4 	.word	0x080401a4

08090a84 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8090a84:	b508      	push	{r3, lr}
 8090a86:	4b02      	ldr	r3, [pc, #8]	; (8090a90 <system_thread_set_state+0xc>)
 8090a88:	681b      	ldr	r3, [r3, #0]
 8090a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8090a8c:	9301      	str	r3, [sp, #4]
 8090a8e:	bd08      	pop	{r3, pc}
 8090a90:	080401a4 	.word	0x080401a4

08090a94 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 8090a94:	b508      	push	{r3, lr}
 8090a96:	4b02      	ldr	r3, [pc, #8]	; (8090aa0 <system_set_usb_request_app_handler+0xc>)
 8090a98:	681b      	ldr	r3, [r3, #0]
 8090a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8090a9c:	9301      	str	r3, [sp, #4]
 8090a9e:	bd08      	pop	{r3, pc}
 8090aa0:	080401a4 	.word	0x080401a4

08090aa4 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 8090aa4:	b508      	push	{r3, lr}
 8090aa6:	4b02      	ldr	r3, [pc, #8]	; (8090ab0 <system_set_usb_request_result+0xc>)
 8090aa8:	681b      	ldr	r3, [r3, #0]
 8090aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8090aac:	9301      	str	r3, [sp, #4]
 8090aae:	bd08      	pop	{r3, pc}
 8090ab0:	080401a4 	.word	0x080401a4

08090ab4 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8090ab4:	b508      	push	{r3, lr}
 8090ab6:	4b02      	ldr	r3, [pc, #8]	; (8090ac0 <network_ready+0xc>)
 8090ab8:	681b      	ldr	r3, [r3, #0]
 8090aba:	691b      	ldr	r3, [r3, #16]
 8090abc:	9301      	str	r3, [sp, #4]
 8090abe:	bd08      	pop	{r3, pc}
 8090ac0:	080401c8 	.word	0x080401c8

08090ac4 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8090ac4:	b508      	push	{r3, lr}
 8090ac6:	4b02      	ldr	r3, [pc, #8]	; (8090ad0 <malloc+0xc>)
 8090ac8:	681b      	ldr	r3, [r3, #0]
 8090aca:	681b      	ldr	r3, [r3, #0]
 8090acc:	9301      	str	r3, [sp, #4]
 8090ace:	bd08      	pop	{r3, pc}
 8090ad0:	080401a0 	.word	0x080401a0

08090ad4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8090ad4:	b508      	push	{r3, lr}
 8090ad6:	4b02      	ldr	r3, [pc, #8]	; (8090ae0 <free+0xc>)
 8090ad8:	681b      	ldr	r3, [r3, #0]
 8090ada:	685b      	ldr	r3, [r3, #4]
 8090adc:	9301      	str	r3, [sp, #4]
 8090ade:	bd08      	pop	{r3, pc}
 8090ae0:	080401a0 	.word	0x080401a0

08090ae4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8090ae4:	b508      	push	{r3, lr}
 8090ae6:	4b02      	ldr	r3, [pc, #8]	; (8090af0 <realloc+0xc>)
 8090ae8:	681b      	ldr	r3, [r3, #0]
 8090aea:	689b      	ldr	r3, [r3, #8]
 8090aec:	9301      	str	r3, [sp, #4]
 8090aee:	bd08      	pop	{r3, pc}
 8090af0:	080401a0 	.word	0x080401a0

08090af4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8090af4:	b508      	push	{r3, lr}
 8090af6:	4b02      	ldr	r3, [pc, #8]	; (8090b00 <snprintf+0xc>)
 8090af8:	681b      	ldr	r3, [r3, #0]
 8090afa:	69db      	ldr	r3, [r3, #28]
 8090afc:	9301      	str	r3, [sp, #4]
 8090afe:	bd08      	pop	{r3, pc}
 8090b00:	080401a0 	.word	0x080401a0

08090b04 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8090b04:	b508      	push	{r3, lr}
 8090b06:	4b02      	ldr	r3, [pc, #8]	; (8090b10 <vsnprintf+0xc>)
 8090b08:	681b      	ldr	r3, [r3, #0]
 8090b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8090b0c:	9301      	str	r3, [sp, #4]
 8090b0e:	bd08      	pop	{r3, pc}
 8090b10:	080401a0 	.word	0x080401a0

08090b14 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8090b14:	b508      	push	{r3, lr}
 8090b16:	4b02      	ldr	r3, [pc, #8]	; (8090b20 <_malloc_r+0xc>)
 8090b18:	681b      	ldr	r3, [r3, #0]
 8090b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8090b1c:	9301      	str	r3, [sp, #4]
 8090b1e:	bd08      	pop	{r3, pc}
 8090b20:	080401a0 	.word	0x080401a0

08090b24 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8090b24:	4770      	bx	lr

08090b26 <_ZN8SPIClassD0Ev>:
 8090b26:	b510      	push	{r4, lr}
 8090b28:	4604      	mov	r4, r0
 8090b2a:	f7ef faba 	bl	80800a2 <_ZdlPv>
 8090b2e:	4620      	mov	r0, r4
 8090b30:	bd10      	pop	{r4, pc}
	...

08090b34 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8090b34:	b570      	push	{r4, r5, r6, lr}
 8090b36:	4604      	mov	r4, r0
 8090b38:	460e      	mov	r6, r1
 8090b3a:	4b07      	ldr	r3, [pc, #28]	; (8090b58 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8090b3c:	2500      	movs	r5, #0
 8090b3e:	6003      	str	r3, [r0, #0]
 8090b40:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8090b44:	f7ff fe46 	bl	80907d4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8090b48:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8090b4a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8090b4c:	f7ff fdfa 	bl	8090744 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8090b50:	60a5      	str	r5, [r4, #8]
}
 8090b52:	4620      	mov	r0, r4
 8090b54:	bd70      	pop	{r4, r5, r6, pc}
 8090b56:	bf00      	nop
 8090b58:	08096708 	.word	0x08096708

08090b5c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8090b5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8090b60:	7900      	ldrb	r0, [r0, #4]
 8090b62:	f7ff bdc7 	b.w	80906f4 <HAL_SPI_Begin>

08090b66 <_ZN8SPIClass5beginEt>:
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 8090b66:	292e      	cmp	r1, #46	; 0x2e
 8090b68:	d802      	bhi.n	8090b70 <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 8090b6a:	7900      	ldrb	r0, [r0, #4]
 8090b6c:	f7ff bdc2 	b.w	80906f4 <HAL_SPI_Begin>
 8090b70:	4770      	bx	lr

08090b72 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 8090b72:	7900      	ldrb	r0, [r0, #4]
 8090b74:	f7ff bdc6 	b.w	8090704 <HAL_SPI_Set_Bit_Order>

08090b78 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 8090b78:	7900      	ldrb	r0, [r0, #4]
 8090b7a:	f7ff bdcb 	b.w	8090714 <HAL_SPI_Set_Data_Mode>
	...

08090b80 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8090b80:	4a05      	ldr	r2, [pc, #20]	; (8090b98 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 8090b82:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8090b84:	5c99      	ldrb	r1, [r3, r2]
 8090b86:	4281      	cmp	r1, r0
 8090b88:	d002      	beq.n	8090b90 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 8090b8a:	3301      	adds	r3, #1
 8090b8c:	2b08      	cmp	r3, #8
 8090b8e:	d1f9      	bne.n	8090b84 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8090b90:	1c58      	adds	r0, r3, #1
}
 8090b92:	b2c0      	uxtb	r0, r0
 8090b94:	4770      	bx	lr
 8090b96:	bf00      	nop
 8090b98:	08096710 	.word	0x08096710

08090b9c <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8090b9c:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8090b9e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8090ba0:	6018      	str	r0, [r3, #0]
 8090ba2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8090ba4:	6818      	ldr	r0, [r3, #0]
 8090ba6:	b2e5      	uxtb	r5, r4
 8090ba8:	4288      	cmp	r0, r1
 8090baa:	d906      	bls.n	8090bba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8090bac:	3401      	adds	r4, #1
 8090bae:	2c08      	cmp	r4, #8
 8090bb0:	d002      	beq.n	8090bb8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 8090bb2:	0840      	lsrs	r0, r0, #1
 8090bb4:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 8090bb6:	e7f5      	b.n	8090ba4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8090bb8:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8090bba:	4b02      	ldr	r3, [pc, #8]	; (8090bc4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8090bbc:	5d5b      	ldrb	r3, [r3, r5]
 8090bbe:	7013      	strb	r3, [r2, #0]
 8090bc0:	bd30      	pop	{r4, r5, pc}
 8090bc2:	bf00      	nop
 8090bc4:	08096710 	.word	0x08096710

08090bc8 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8090bc8:	b570      	push	{r4, r5, r6, lr}
 8090bca:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 8090bcc:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8090bd0:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 8090bd2:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 8090bd4:	2214      	movs	r2, #20
 8090bd6:	2100      	movs	r1, #0
 8090bd8:	a803      	add	r0, sp, #12
 8090bda:	f002 fa86 	bl	80930ea <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8090bde:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8090be0:	a903      	add	r1, sp, #12
 8090be2:	4630      	mov	r0, r6
 8090be4:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 8090be6:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 8090bea:	f7ff fdbb 	bl	8090764 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 8090bee:	ab02      	add	r3, sp, #8
 8090bf0:	f10d 0207 	add.w	r2, sp, #7
 8090bf4:	4629      	mov	r1, r5
 8090bf6:	9804      	ldr	r0, [sp, #16]
 8090bf8:	f7ff ffd0 	bl	8090b9c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 8090bfc:	7920      	ldrb	r0, [r4, #4]
 8090bfe:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8090c02:	f7ff fd8f 	bl	8090724 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 8090c06:	9802      	ldr	r0, [sp, #8]
 8090c08:	b008      	add	sp, #32
 8090c0a:	bd70      	pop	{r4, r5, r6, pc}

08090c0c <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8090c0c:	b538      	push	{r3, r4, r5, lr}
 8090c0e:	4604      	mov	r4, r0
    if (dividerReference)
 8090c10:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8090c12:	4608      	mov	r0, r1
    if (dividerReference)
 8090c14:	b14d      	cbz	r5, 8090c2a <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 8090c16:	f7ff ffb3 	bl	8090b80 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8090c1a:	2201      	movs	r2, #1
 8090c1c:	fa25 f100 	lsr.w	r1, r5, r0
 8090c20:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 8090c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8090c26:	f7ff bfcf 	b.w	8090bc8 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8090c2a:	7920      	ldrb	r0, [r4, #4]
    }
}
 8090c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8090c30:	f7ff bd78 	b.w	8090724 <HAL_SPI_Set_Clock_Divider>

08090c34 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8090c34:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 8090c36:	7900      	ldrb	r0, [r0, #4]
 8090c38:	f7ff fd7c 	bl	8090734 <HAL_SPI_Send_Receive_Data>
}
 8090c3c:	b2c0      	uxtb	r0, r0
 8090c3e:	bd08      	pop	{r3, pc}

08090c40 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8090c40:	b530      	push	{r4, r5, lr}
 8090c42:	b087      	sub	sp, #28
 8090c44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8090c46:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8090c48:	7900      	ldrb	r0, [r0, #4]
 8090c4a:	9500      	str	r5, [sp, #0]
 8090c4c:	f7ff fd92 	bl	8090774 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 8090c50:	b93d      	cbnz	r5, 8090c62 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8090c52:	a902      	add	r1, sp, #8
 8090c54:	7920      	ldrb	r0, [r4, #4]
 8090c56:	f7ff fd95 	bl	8090784 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 8090c5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8090c5e:	07db      	lsls	r3, r3, #31
 8090c60:	d4f7      	bmi.n	8090c52 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 8090c62:	b007      	add	sp, #28
 8090c64:	bd30      	pop	{r4, r5, pc}

08090c66 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8090c66:	7900      	ldrb	r0, [r0, #4]
 8090c68:	f7ff bd74 	b.w	8090754 <HAL_SPI_Is_Enabled>

08090c6c <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8090c6c:	2000      	movs	r0, #0
 8090c6e:	f7ff bef9 	b.w	8090a64 <set_system_mode>

08090c72 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8090c72:	b513      	push	{r0, r1, r4, lr}
 8090c74:	ab02      	add	r3, sp, #8
        return write(&b, 1);
 8090c76:	6802      	ldr	r2, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8090c78:	f803 1d01 	strb.w	r1, [r3, #-1]!
        return write(&b, 1);
 8090c7c:	68d4      	ldr	r4, [r2, #12]
 8090c7e:	4619      	mov	r1, r3
 8090c80:	2201      	movs	r2, #1
 8090c82:	47a0      	blx	r4
}
 8090c84:	b002      	add	sp, #8
 8090c86:	bd10      	pop	{r4, pc}

08090c88 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 8090c88:	4770      	bx	lr
	...

08090c8c <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 8090c8c:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8090c8e:	4903      	ldr	r1, [pc, #12]	; (8090c9c <_ZN9TCPClient8remoteIPEv+0x10>)
 8090c90:	6001      	str	r1, [r0, #0]
 8090c92:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8090c96:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 8090c98:	4770      	bx	lr
 8090c9a:	bf00      	nop
 8090c9c:	08096888 	.word	0x08096888

08090ca0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8090ca0:	4770      	bx	lr

08090ca2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 8090ca2:	2000      	movs	r0, #0
 8090ca4:	4770      	bx	lr

08090ca6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8090ca6:	b510      	push	{r4, lr}
 8090ca8:	4604      	mov	r4, r0
 8090caa:	f7ef f9fa 	bl	80800a2 <_ZdlPv>
 8090cae:	4620      	mov	r0, r4
 8090cb0:	bd10      	pop	{r4, pc}

08090cb2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8090cb2:	f7ef b9f6 	b.w	80800a2 <_ZdlPv>
	...

08090cb8 <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8090cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8090cba:	461d      	mov	r5, r3
    stop();
 8090cbc:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8090cbe:	b087      	sub	sp, #28
    stop();
 8090cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8090cc2:	4604      	mov	r4, r0
 8090cc4:	460e      	mov	r6, r1
 8090cc6:	4617      	mov	r7, r2
    stop();
 8090cc8:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 8090cca:	4b11      	ldr	r3, [pc, #68]	; (8090d10 <_ZN9TCPClient7connectEPKctm+0x58>)
 8090ccc:	6818      	ldr	r0, [r3, #0]
 8090cce:	6803      	ldr	r3, [r0, #0]
 8090cd0:	681b      	ldr	r3, [r3, #0]
 8090cd2:	4798      	blx	r3
 8090cd4:	b1c8      	cbz	r0, 8090d0a <_ZN9TCPClient7connectEPKctm+0x52>
      {
        IPAddress ip_addr;
 8090cd6:	a802      	add	r0, sp, #8
 8090cd8:	f000 fd02 	bl	80916e0 <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 8090cdc:	4630      	mov	r0, r6
 8090cde:	f002 fa24 	bl	809312a <strlen>
 8090ce2:	2300      	movs	r3, #0
 8090ce4:	9300      	str	r3, [sp, #0]
 8090ce6:	b281      	uxth	r1, r0
 8090ce8:	462b      	mov	r3, r5
 8090cea:	aa03      	add	r2, sp, #12
 8090cec:	4630      	mov	r0, r6
 8090cee:	f7ff fe61 	bl	80909b4 <inet_gethostbyname>
 8090cf2:	b950      	cbnz	r0, 8090d0a <_ZN9TCPClient7connectEPKctm+0x52>
        {
                return connect(ip_addr, port, nif);
 8090cf4:	6823      	ldr	r3, [r4, #0]
 8090cf6:	463a      	mov	r2, r7
 8090cf8:	6a1e      	ldr	r6, [r3, #32]
 8090cfa:	4b06      	ldr	r3, [pc, #24]	; (8090d14 <_ZN9TCPClient7connectEPKctm+0x5c>)
 8090cfc:	a904      	add	r1, sp, #16
 8090cfe:	9304      	str	r3, [sp, #16]
 8090d00:	9b03      	ldr	r3, [sp, #12]
 8090d02:	4620      	mov	r0, r4
 8090d04:	9305      	str	r3, [sp, #20]
 8090d06:	462b      	mov	r3, r5
 8090d08:	47b0      	blx	r6
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 8090d0a:	b007      	add	sp, #28
 8090d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8090d0e:	bf00      	nop
 8090d10:	080968d0 	.word	0x080968d0
 8090d14:	08096888 	.word	0x08096888

08090d18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8090d18:	b510      	push	{r4, lr}
 8090d1a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 8090d1c:	6803      	ldr	r3, [r0, #0]
 8090d1e:	689b      	ldr	r3, [r3, #8]
 8090d20:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8090d22:	68a3      	ldr	r3, [r4, #8]
 8090d24:	3b01      	subs	r3, #1
 8090d26:	60a3      	str	r3, [r4, #8]
 8090d28:	b92b      	cbnz	r3, 8090d36 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32+0x1e>
            _M_destroy();
 8090d2a:	6823      	ldr	r3, [r4, #0]
 8090d2c:	4620      	mov	r0, r4
        }
    }
 8090d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 8090d32:	68db      	ldr	r3, [r3, #12]
 8090d34:	4718      	bx	r3
 8090d36:	bd10      	pop	{r4, pc}

08090d38 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 8090d38:	b510      	push	{r4, lr}
 8090d3a:	6943      	ldr	r3, [r0, #20]
 8090d3c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 8090d3e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8090d42:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8090d46:	429a      	cmp	r2, r3
 8090d48:	d005      	beq.n	8090d56 <_ZN9TCPClient4peekEv+0x1e>
 8090d4a:	6962      	ldr	r2, [r4, #20]
 8090d4c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8090d50:	4413      	add	r3, r2
 8090d52:	7918      	ldrb	r0, [r3, #4]
 8090d54:	bd10      	pop	{r4, pc}
 8090d56:	6803      	ldr	r3, [r0, #0]
 8090d58:	691b      	ldr	r3, [r3, #16]
 8090d5a:	4798      	blx	r3
 8090d5c:	2800      	cmp	r0, #0
 8090d5e:	d1f4      	bne.n	8090d4a <_ZN9TCPClient4peekEv+0x12>
 8090d60:	f04f 30ff 	mov.w	r0, #4294967295
}
 8090d64:	bd10      	pop	{r4, pc}

08090d66 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 8090d66:	b510      	push	{r4, lr}
 8090d68:	6943      	ldr	r3, [r0, #20]
 8090d6a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 8090d6c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8090d70:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8090d74:	429a      	cmp	r2, r3
 8090d76:	d008      	beq.n	8090d8a <_ZN9TCPClient4readEv+0x24>
 8090d78:	6962      	ldr	r2, [r4, #20]
 8090d7a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8090d7e:	1c59      	adds	r1, r3, #1
 8090d80:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8090d84:	4413      	add	r3, r2
 8090d86:	7918      	ldrb	r0, [r3, #4]
 8090d88:	bd10      	pop	{r4, pc}
 8090d8a:	6803      	ldr	r3, [r0, #0]
 8090d8c:	691b      	ldr	r3, [r3, #16]
 8090d8e:	4798      	blx	r3
 8090d90:	2800      	cmp	r0, #0
 8090d92:	d1f1      	bne.n	8090d78 <_ZN9TCPClient4readEv+0x12>
 8090d94:	f04f 30ff 	mov.w	r0, #4294967295
}
 8090d98:	bd10      	pop	{r4, pc}

08090d9a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 8090d9a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8090d9c:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 8090d9e:	6820      	ldr	r0, [r4, #0]
 8090da0:	f7ff fdc8 	bl	8090934 <socket_handle_valid>
 8090da4:	b110      	cbz	r0, 8090dac <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 8090da6:	6820      	ldr	r0, [r4, #0]
 8090da8:	f7ff fdec 	bl	8090984 <socket_close>
 8090dac:	4620      	mov	r0, r4
 8090dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8090db2:	f7ef b976 	b.w	80800a2 <_ZdlPv>

08090db6 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8090db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8090db8:	6943      	ldr	r3, [r0, #20]
 8090dba:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 8090dbc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8090dc0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8090dc4:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 8090dc6:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8090dc8:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 8090dca:	d106      	bne.n	8090dda <_ZN9TCPClient4readEPhj+0x24>
 8090dcc:	6803      	ldr	r3, [r0, #0]
 8090dce:	691b      	ldr	r3, [r3, #16]
 8090dd0:	4798      	blx	r3
 8090dd2:	b910      	cbnz	r0, 8090dda <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 8090dd4:	f04f 34ff 	mov.w	r4, #4294967295
 8090dd8:	e014      	b.n	8090e04 <_ZN9TCPClient4readEPhj+0x4e>
 8090dda:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8090ddc:	4630      	mov	r0, r6
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8090dde:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 8090de2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8090de6:	4419      	add	r1, r3
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8090de8:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 8090dea:	42bc      	cmp	r4, r7
 8090dec:	bf28      	it	cs
 8090dee:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8090df0:	3104      	adds	r1, #4
 8090df2:	4622      	mov	r2, r4
 8090df4:	f002 f953 	bl	809309e <memcpy>
 8090df8:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 8090dfa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8090dfe:	4423      	add	r3, r4
 8090e00:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 8090e04:	4620      	mov	r0, r4
 8090e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08090e08 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 8090e08:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 8090e0a:	2300      	movs	r3, #0
 8090e0c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 8090e10:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 8090e12:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 8090e16:	4770      	bx	lr

08090e18 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 8090e18:	b538      	push	{r3, r4, r5, lr}
 8090e1a:	6942      	ldr	r2, [r0, #20]
 8090e1c:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 8090e1e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8090e22:	b11b      	cbz	r3, 8090e2c <_ZN9TCPClient9availableEv+0x14>
 8090e24:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8090e28:	429a      	cmp	r2, r3
 8090e2a:	d00b      	beq.n	8090e44 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 8090e2c:	4b18      	ldr	r3, [pc, #96]	; (8090e90 <_ZN9TCPClient9availableEv+0x78>)
 8090e2e:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8090e30:	6803      	ldr	r3, [r0, #0]
 8090e32:	681b      	ldr	r3, [r3, #0]
 8090e34:	4798      	blx	r3
 8090e36:	b318      	cbz	r0, 8090e80 <_ZN9TCPClient9availableEv+0x68>
 8090e38:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8090e3a:	6818      	ldr	r0, [r3, #0]
 8090e3c:	f7ff fd7a 	bl	8090934 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8090e40:	b918      	cbnz	r0, 8090e4a <_ZN9TCPClient9availableEv+0x32>
 8090e42:	e01d      	b.n	8090e80 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 8090e44:	f7ff ffe0 	bl	8090e08 <_ZN9TCPClient12flush_bufferEv>
 8090e48:	e7f0      	b.n	8090e2c <_ZN9TCPClient9availableEv+0x14>
 8090e4a:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 8090e4c:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 8090e50:	297f      	cmp	r1, #127	; 0x7f
 8090e52:	d815      	bhi.n	8090e80 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 8090e54:	1d05      	adds	r5, r0, #4
 8090e56:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 8090e5a:	2300      	movs	r3, #0
 8090e5c:	4429      	add	r1, r5
 8090e5e:	6800      	ldr	r0, [r0, #0]
 8090e60:	f7ff fd80 	bl	8090964 <socket_receive>
            if (ret > 0)
 8090e64:	2800      	cmp	r0, #0
 8090e66:	dd0b      	ble.n	8090e80 <_ZN9TCPClient9availableEv+0x68>
 8090e68:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 8090e6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8090e6e:	b90a      	cbnz	r2, 8090e74 <_ZN9TCPClient9availableEv+0x5c>
 8090e70:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8090e74:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 8090e76:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8090e7a:	4418      	add	r0, r3
 8090e7c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 8090e80:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 8090e82:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8090e86:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 8090e8a:	1a18      	subs	r0, r3, r0
}
 8090e8c:	bd38      	pop	{r3, r4, r5, pc}
 8090e8e:	bf00      	nop
 8090e90:	080968d0 	.word	0x080968d0

08090e94 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 8090e94:	b538      	push	{r3, r4, r5, lr}
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 8090e96:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 8090e98:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8090e9a:	6818      	ldr	r0, [r3, #0]
 8090e9c:	f7ff fd4a 	bl	8090934 <socket_handle_valid>

void TCPClient::stop()
{
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 8090ea0:	b118      	cbz	r0, 8090eaa <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 8090ea2:	6963      	ldr	r3, [r4, #20]
 8090ea4:	6818      	ldr	r0, [r3, #0]
 8090ea6:	f7ff fd6d 	bl	8090984 <socket_close>
 8090eaa:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 8090eac:	f7ff fd72 	bl	8090994 <socket_handle_invalid>
 8090eb0:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8090eb2:	6963      	ldr	r3, [r4, #20]
 8090eb4:	2200      	movs	r2, #0
 8090eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 8090eba:	4620      	mov	r0, r4
}
 8090ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 8090ec0:	f7ff bfa2 	b.w	8090e08 <_ZN9TCPClient12flush_bufferEv>

08090ec4 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8090ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8090ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8090eca:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 8090ecc:	4b17      	ldr	r3, [pc, #92]	; (8090f2c <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8090ece:	2600      	movs	r6, #0
 8090ed0:	6046      	str	r6, [r0, #4]
 8090ed2:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 8090ed4:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 8090ed6:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8090ed8:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8090eda:	2090      	movs	r0, #144	; 0x90
 8090edc:	460f      	mov	r7, r1
 8090ede:	f7ef f8dc 	bl	808009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8090ee2:	4605      	mov	r5, r0
 8090ee4:	b138      	cbz	r0, 8090ef6 <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 8090ee6:	6007      	str	r7, [r0, #0]
 8090ee8:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 8090eec:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 8090ef0:	3088      	adds	r0, #136	; 0x88
 8090ef2:	f000 fbf5 	bl	80916e0 <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8090ef6:	2014      	movs	r0, #20
 8090ef8:	f7ef f8cf 	bl	808009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8090efc:	4603      	mov	r3, r0
 8090efe:	b128      	cbz	r0, 8090f0c <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8090f00:	2201      	movs	r2, #1
 8090f02:	6042      	str	r2, [r0, #4]
 8090f04:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8090f06:	4a0a      	ldr	r2, [pc, #40]	; (8090f30 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 8090f08:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8090f0a:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8090f0c:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 8090f0e:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8090f10:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8090f12:	b128      	cbz	r0, 8090f20 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8090f14:	6843      	ldr	r3, [r0, #4]
 8090f16:	3b01      	subs	r3, #1
 8090f18:	6043      	str	r3, [r0, #4]
 8090f1a:	b90b      	cbnz	r3, 8090f20 <_ZN9TCPClientC1Em+0x5c>
 8090f1c:	f7ff fefc 	bl	8090d18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 8090f20:	4620      	mov	r0, r4
 8090f22:	f7ff ff71 	bl	8090e08 <_ZN9TCPClient12flush_bufferEv>
}
 8090f26:	4620      	mov	r0, r4
 8090f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8090f2a:	bf00      	nop
 8090f2c:	0809673c 	.word	0x0809673c
 8090f30:	08096720 	.word	0x08096720

08090f34 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 8090f34:	b510      	push	{r4, lr}
 8090f36:	4604      	mov	r4, r0
 8090f38:	f7ff fd2c 	bl	8090994 <socket_handle_invalid>
 8090f3c:	4601      	mov	r1, r0
 8090f3e:	4620      	mov	r0, r4
 8090f40:	f7ff ffc0 	bl	8090ec4 <_ZN9TCPClientC1Em>
{
}
 8090f44:	4620      	mov	r0, r4
 8090f46:	bd10      	pop	{r4, pc}

08090f48 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8090f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8090f4c:	4698      	mov	r8, r3
    stop();
 8090f4e:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8090f50:	b086      	sub	sp, #24
    stop();
 8090f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8090f54:	4604      	mov	r4, r0
 8090f56:	460d      	mov	r5, r1
 8090f58:	4616      	mov	r6, r2
    stop();
 8090f5a:	4798      	blx	r3
 8090f5c:	4b25      	ldr	r3, [pc, #148]	; (8090ff4 <_ZN9TCPClient7connectE9IPAddresstm+0xac>)
 8090f5e:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 8090f60:	6803      	ldr	r3, [r0, #0]
 8090f62:	681b      	ldr	r3, [r3, #0]
 8090f64:	4798      	blx	r3
 8090f66:	2800      	cmp	r0, #0
 8090f68:	d040      	beq.n	8090fec <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8090f6a:	4633      	mov	r3, r6
 8090f6c:	f8cd 8000 	str.w	r8, [sp]
 8090f70:	2206      	movs	r2, #6
 8090f72:	2101      	movs	r1, #1
 8090f74:	2002      	movs	r0, #2
 8090f76:	6967      	ldr	r7, [r4, #20]
 8090f78:	f7ff fce4 	bl	8090944 <socket_create>
 8090f7c:	6038      	str	r0, [r7, #0]
          DEBUG("socket=%d",d_->sock);

          if (socket_handle_valid(d_->sock))
 8090f7e:	6963      	ldr	r3, [r4, #20]
 8090f80:	6818      	ldr	r0, [r3, #0]
 8090f82:	f7ff fcd7 	bl	8090934 <socket_handle_valid>
 8090f86:	b388      	cbz	r0, 8090fec <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
          {
            flush_buffer();
 8090f88:	4620      	mov	r0, r4
 8090f8a:	f7ff ff3d 	bl	8090e08 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 8090f8e:	2302      	movs	r3, #2
 8090f90:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8090f94:	0a33      	lsrs	r3, r6, #8
 8090f96:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8090f9a:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8090f9c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8090fa0:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 8090fa4:	79ab      	ldrb	r3, [r5, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 8090fa6:	f88d 600b 	strb.w	r6, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 8090faa:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 8090fae:	796b      	ldrb	r3, [r5, #5]
 8090fb0:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 8090fb4:	792b      	ldrb	r3, [r5, #4]
 8090fb6:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8090fba:	f7ff fcf3 	bl	80909a4 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8090fbe:	6963      	ldr	r3, [r4, #20]
 8090fc0:	2210      	movs	r2, #16
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8090fc2:	4607      	mov	r7, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8090fc4:	a902      	add	r1, sp, #8
 8090fc6:	6818      	ldr	r0, [r3, #0]
 8090fc8:	f7ff fcc4 	bl	8090954 <socket_connect>
 8090fcc:	4606      	mov	r6, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 8090fce:	4638      	mov	r0, r7
 8090fd0:	f7ff fce8 	bl	80909a4 <HAL_NET_SetNetWatchDog>
 8090fd4:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8090fd6:	686a      	ldr	r2, [r5, #4]
 8090fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 8090fdc:	b12e      	cbz	r6, 8090fea <_ZN9TCPClient7connectE9IPAddresstm+0xa2>
            {
                stop();
 8090fde:	6823      	ldr	r3, [r4, #0]
 8090fe0:	4620      	mov	r0, r4
 8090fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8090fe4:	4798      	blx	r3
 8090fe6:	2000      	movs	r0, #0
 8090fe8:	e000      	b.n	8090fec <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 8090fea:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 8090fec:	b006      	add	sp, #24
 8090fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8090ff2:	bf00      	nop
 8090ff4:	080968d0 	.word	0x080968d0

08090ff8 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8090ff8:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8090ffa:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8090ffc:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8090ffe:	6818      	ldr	r0, [r3, #0]
 8091000:	f7ff fc98 	bl	8090934 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8091004:	b908      	cbnz	r0, 809100a <_ZN9TCPClient6statusEv+0x12>
 8091006:	2000      	movs	r0, #0
 8091008:	bd10      	pop	{r4, pc}
 809100a:	4b07      	ldr	r3, [pc, #28]	; (8091028 <_ZN9TCPClient6statusEv+0x30>)
 809100c:	6818      	ldr	r0, [r3, #0]
 809100e:	6803      	ldr	r3, [r0, #0]
 8091010:	681b      	ldr	r3, [r3, #0]
 8091012:	4798      	blx	r3
 8091014:	2800      	cmp	r0, #0
 8091016:	d0f6      	beq.n	8091006 <_ZN9TCPClient6statusEv+0xe>
 8091018:	6963      	ldr	r3, [r4, #20]
 809101a:	6818      	ldr	r0, [r3, #0]
 809101c:	f7ff fc82 	bl	8090924 <socket_active_status>
 8091020:	fab0 f080 	clz	r0, r0
 8091024:	0940      	lsrs	r0, r0, #5
}
 8091026:	bd10      	pop	{r4, pc}
 8091028:	080968d0 	.word	0x080968d0

0809102c <_ZN9TCPClient5writeEPKhj>:
{
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 809102c:	b570      	push	{r4, r5, r6, lr}
 809102e:	4606      	mov	r6, r0
 8091030:	460c      	mov	r4, r1
 8091032:	4615      	mov	r5, r2
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 8091034:	f7ff ffe0 	bl	8090ff8 <_ZN9TCPClient6statusEv>
 8091038:	b138      	cbz	r0, 809104a <_ZN9TCPClient5writeEPKhj+0x1e>
 809103a:	6973      	ldr	r3, [r6, #20]
 809103c:	462a      	mov	r2, r5
 809103e:	4621      	mov	r1, r4
}
 8091040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 8091044:	6818      	ldr	r0, [r3, #0]
 8091046:	f7ff bc95 	b.w	8090974 <socket_send>
}
 809104a:	f04f 30ff 	mov.w	r0, #4294967295
 809104e:	bd70      	pop	{r4, r5, r6, pc}

08091050 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 8091050:	b538      	push	{r3, r4, r5, lr}
 8091052:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 8091054:	f7ff ffd0 	bl	8090ff8 <_ZN9TCPClient6statusEv>
 8091058:	bb00      	cbnz	r0, 809109c <_ZN9TCPClient9connectedEv+0x4c>
 809105a:	6963      	ldr	r3, [r4, #20]
 809105c:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8091060:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8091064:	4291      	cmp	r1, r2
 8091066:	d119      	bne.n	809109c <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8091068:	6818      	ldr	r0, [r3, #0]
 809106a:	f7ff fc63 	bl	8090934 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 809106e:	b128      	cbz	r0, 809107c <_ZN9TCPClient9connectedEv+0x2c>
 8091070:	6963      	ldr	r3, [r4, #20]
 8091072:	6818      	ldr	r0, [r3, #0]
 8091074:	f7ff fc56 	bl	8090924 <socket_active_status>
 8091078:	2801      	cmp	r0, #1
 809107a:	d001      	beq.n	8091080 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 809107c:	2500      	movs	r5, #0
 809107e:	e00e      	b.n	809109e <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 8091080:	6823      	ldr	r3, [r4, #0]
 8091082:	4620      	mov	r0, r4
 8091084:	691b      	ldr	r3, [r3, #16]
 8091086:	4798      	blx	r3
 8091088:	2800      	cmp	r0, #0
 809108a:	bf14      	ite	ne
 809108c:	2501      	movne	r5, #1
 809108e:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 8091090:	d105      	bne.n	809109e <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 8091092:	6823      	ldr	r3, [r4, #0]
 8091094:	4620      	mov	r0, r4
 8091096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8091098:	4798      	blx	r3
 809109a:	e000      	b.n	809109e <_ZN9TCPClient9connectedEv+0x4e>
 809109c:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 809109e:	4628      	mov	r0, r5
 80910a0:	bd38      	pop	{r3, r4, r5, pc}

080910a2 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80910a2:	b508      	push	{r3, lr}
   return (status()!=0);
 80910a4:	f7ff ffa8 	bl	8090ff8 <_ZN9TCPClient6statusEv>
}
 80910a8:	3000      	adds	r0, #0
 80910aa:	bf18      	it	ne
 80910ac:	2001      	movne	r0, #1
 80910ae:	bd08      	pop	{r3, pc}

080910b0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80910b0:	b510      	push	{r4, lr}
 80910b2:	4604      	mov	r4, r0
{
	free(buffer);
 80910b4:	6800      	ldr	r0, [r0, #0]
 80910b6:	f7ff fd0d 	bl	8090ad4 <free>
}
 80910ba:	4620      	mov	r0, r4
 80910bc:	bd10      	pop	{r4, pc}

080910be <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80910be:	b510      	push	{r4, lr}
 80910c0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80910c2:	6800      	ldr	r0, [r0, #0]
 80910c4:	b108      	cbz	r0, 80910ca <_ZN6String10invalidateEv+0xc>
 80910c6:	f7ff fd05 	bl	8090ad4 <free>
	buffer = NULL;
 80910ca:	2300      	movs	r3, #0
 80910cc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80910ce:	60a3      	str	r3, [r4, #8]
 80910d0:	6063      	str	r3, [r4, #4]
 80910d2:	bd10      	pop	{r4, pc}

080910d4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80910d4:	b538      	push	{r3, r4, r5, lr}
 80910d6:	4604      	mov	r4, r0
 80910d8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80910da:	6800      	ldr	r0, [r0, #0]
 80910dc:	3101      	adds	r1, #1
 80910de:	f7ff fd01 	bl	8090ae4 <realloc>
	if (newbuffer) {
 80910e2:	b110      	cbz	r0, 80910ea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80910e4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80910e8:	2001      	movs	r0, #1
	}
	return 0;
}
 80910ea:	bd38      	pop	{r3, r4, r5, pc}

080910ec <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80910ec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80910ee:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80910f0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80910f2:	b113      	cbz	r3, 80910fa <_ZN6String7reserveEj+0xe>
 80910f4:	6843      	ldr	r3, [r0, #4]
 80910f6:	428b      	cmp	r3, r1
 80910f8:	d207      	bcs.n	809110a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80910fa:	4620      	mov	r0, r4
 80910fc:	f7ff ffea 	bl	80910d4 <_ZN6String12changeBufferEj>
 8091100:	b120      	cbz	r0, 809110c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8091102:	68a3      	ldr	r3, [r4, #8]
 8091104:	b90b      	cbnz	r3, 809110a <_ZN6String7reserveEj+0x1e>
 8091106:	6822      	ldr	r2, [r4, #0]
 8091108:	7013      	strb	r3, [r2, #0]
 809110a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 809110c:	bd10      	pop	{r4, pc}

0809110e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 809110e:	b570      	push	{r4, r5, r6, lr}
 8091110:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8091112:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8091114:	4604      	mov	r4, r0
 8091116:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8091118:	f7ff ffe8 	bl	80910ec <_ZN6String7reserveEj>
 809111c:	b918      	cbnz	r0, 8091126 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 809111e:	4620      	mov	r0, r4
 8091120:	f7ff ffcd 	bl	80910be <_ZN6String10invalidateEv>
		return *this;
 8091124:	e009      	b.n	809113a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8091126:	462a      	mov	r2, r5
 8091128:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 809112a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 809112c:	6820      	ldr	r0, [r4, #0]
 809112e:	f001 ffb6 	bl	809309e <memcpy>
	buffer[len] = 0;
 8091132:	6822      	ldr	r2, [r4, #0]
 8091134:	68a3      	ldr	r3, [r4, #8]
 8091136:	2100      	movs	r1, #0
 8091138:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 809113a:	4620      	mov	r0, r4
 809113c:	bd70      	pop	{r4, r5, r6, pc}

0809113e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 809113e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091140:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8091142:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091144:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8091146:	6043      	str	r3, [r0, #4]
	len = 0;
 8091148:	6083      	str	r3, [r0, #8]
	flags = 0;
 809114a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 809114c:	460d      	mov	r5, r1
 809114e:	b139      	cbz	r1, 8091160 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8091150:	4608      	mov	r0, r1
 8091152:	f001 ffea 	bl	809312a <strlen>
 8091156:	4629      	mov	r1, r5
 8091158:	4602      	mov	r2, r0
 809115a:	4620      	mov	r0, r4
 809115c:	f7ff ffd7 	bl	809110e <_ZN6String4copyEPKcj>
}
 8091160:	4620      	mov	r0, r4
 8091162:	bd38      	pop	{r3, r4, r5, pc}

08091164 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8091164:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8091166:	b510      	push	{r4, lr}
 8091168:	460b      	mov	r3, r1
 809116a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 809116c:	d007      	beq.n	809117e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 809116e:	6809      	ldr	r1, [r1, #0]
 8091170:	b119      	cbz	r1, 809117a <_ZN6StringaSERKS_+0x16>
 8091172:	689a      	ldr	r2, [r3, #8]
 8091174:	f7ff ffcb 	bl	809110e <_ZN6String4copyEPKcj>
 8091178:	e001      	b.n	809117e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 809117a:	f7ff ffa0 	bl	80910be <_ZN6String10invalidateEv>

	return *this;
}
 809117e:	4620      	mov	r0, r4
 8091180:	bd10      	pop	{r4, pc}

08091182 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8091182:	b538      	push	{r3, r4, r5, lr}
 8091184:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8091186:	460c      	mov	r4, r1
 8091188:	b141      	cbz	r1, 809119c <_ZN6StringaSEPKc+0x1a>
 809118a:	4608      	mov	r0, r1
 809118c:	f001 ffcd 	bl	809312a <strlen>
 8091190:	4621      	mov	r1, r4
 8091192:	4602      	mov	r2, r0
 8091194:	4628      	mov	r0, r5
 8091196:	f7ff ffba 	bl	809110e <_ZN6String4copyEPKcj>
 809119a:	e001      	b.n	80911a0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 809119c:	f7ff ff8f 	bl	80910be <_ZN6String10invalidateEv>

	return *this;
}
 80911a0:	4628      	mov	r0, r5
 80911a2:	bd38      	pop	{r3, r4, r5, pc}

080911a4 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80911a4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80911a6:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80911a8:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80911aa:	b912      	cbnz	r2, 80911b2 <_ZNK6String6equalsEPKc+0xe>
 80911ac:	b919      	cbnz	r1, 80911b6 <_ZNK6String6equalsEPKc+0x12>
 80911ae:	2001      	movs	r0, #1
 80911b0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80911b2:	b911      	cbnz	r1, 80911ba <_ZNK6String6equalsEPKc+0x16>
 80911b4:	6803      	ldr	r3, [r0, #0]
 80911b6:	7818      	ldrb	r0, [r3, #0]
 80911b8:	e002      	b.n	80911c0 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80911ba:	6800      	ldr	r0, [r0, #0]
 80911bc:	f001 ffab 	bl	8093116 <strcmp>
 80911c0:	fab0 f080 	clz	r0, r0
 80911c4:	0940      	lsrs	r0, r0, #5
}
 80911c6:	bd08      	pop	{r3, pc}

080911c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80911c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80911ca:	4606      	mov	r6, r0
 80911cc:	460d      	mov	r5, r1
 80911ce:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80911d0:	2400      	movs	r4, #0
  while (size--) {
 80911d2:	42bd      	cmp	r5, r7
 80911d4:	d00c      	beq.n	80911f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80911d6:	6833      	ldr	r3, [r6, #0]
 80911d8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80911dc:	689b      	ldr	r3, [r3, #8]
 80911de:	4630      	mov	r0, r6
 80911e0:	4798      	blx	r3
     if (chunk>=0)
 80911e2:	2800      	cmp	r0, #0
 80911e4:	db01      	blt.n	80911ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80911e6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80911e8:	e7f3      	b.n	80911d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80911ea:	2c00      	cmp	r4, #0
 80911ec:	bf08      	it	eq
 80911ee:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80911f0:	4620      	mov	r0, r4
 80911f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080911f4 <_ZN5Print5printEPKc>:
 80911f4:	b508      	push	{r3, lr}
 80911f6:	f7f0 fd6d 	bl	8081cd4 <_ZN5Print5writeEPKc>
 80911fa:	bd08      	pop	{r3, pc}

080911fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80911fc:	6803      	ldr	r3, [r0, #0]
 80911fe:	689b      	ldr	r3, [r3, #8]
 8091200:	4718      	bx	r3

08091202 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8091202:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8091204:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8091206:	4605      	mov	r5, r0
  size_t n = print('\r');
 8091208:	f7ff fff8 	bl	80911fc <_ZN5Print5printEc>
  n += print('\n');
 809120c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 809120e:	4604      	mov	r4, r0
  n += print('\n');
 8091210:	4628      	mov	r0, r5
 8091212:	f7ff fff3 	bl	80911fc <_ZN5Print5printEc>
  return n;
}
 8091216:	4420      	add	r0, r4
 8091218:	bd38      	pop	{r3, r4, r5, pc}

0809121a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 809121a:	b538      	push	{r3, r4, r5, lr}
 809121c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 809121e:	f7f0 fd59 	bl	8081cd4 <_ZN5Print5writeEPKc>
 8091222:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8091224:	4628      	mov	r0, r5
 8091226:	f7ff ffec 	bl	8091202 <_ZN5Print7printlnEv>
  return n;
}
 809122a:	4420      	add	r0, r4
 809122c:	bd38      	pop	{r3, r4, r5, pc}

0809122e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 809122e:	2a01      	cmp	r2, #1
 8091230:	bf98      	it	ls
 8091232:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8091234:	b530      	push	{r4, r5, lr}
 8091236:	460b      	mov	r3, r1
 8091238:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 809123a:	2100      	movs	r1, #0
 809123c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8091240:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8091244:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8091248:	fb05 3312 	mls	r3, r5, r2, r3
 809124c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 809124e:	2b09      	cmp	r3, #9
 8091250:	bf94      	ite	ls
 8091252:	3330      	addls	r3, #48	; 0x30
 8091254:	3337      	addhi	r3, #55	; 0x37
 8091256:	b2db      	uxtb	r3, r3
 8091258:	4621      	mov	r1, r4
 809125a:	f804 3901 	strb.w	r3, [r4], #-1
 809125e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8091260:	2d00      	cmp	r5, #0
 8091262:	d1ef      	bne.n	8091244 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8091264:	f7f0 fd36 	bl	8081cd4 <_ZN5Print5writeEPKc>
}
 8091268:	b00b      	add	sp, #44	; 0x2c
 809126a:	bd30      	pop	{r4, r5, pc}

0809126c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 809126c:	b410      	push	{r4}
  if (base == 0) return write(n);
 809126e:	b922      	cbnz	r2, 809127a <_ZN5Print5printEmi+0xe>
 8091270:	6803      	ldr	r3, [r0, #0]
 8091272:	b2c9      	uxtb	r1, r1
 8091274:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8091276:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8091278:	4718      	bx	r3
  else return printNumber(n, base);
 809127a:	b2d2      	uxtb	r2, r2
}
 809127c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 809127e:	f7ff bfd6 	b.w	809122e <_ZN5Print11printNumberEmh>

08091282 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8091282:	f7ff bff3 	b.w	809126c <_ZN5Print5printEmi>

08091286 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8091286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 809128a:	4607      	mov	r7, r0
 809128c:	460e      	mov	r6, r1
  if (base == 0) {
 809128e:	4615      	mov	r5, r2
 8091290:	b92a      	cbnz	r2, 809129e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8091292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8091296:	6803      	ldr	r3, [r0, #0]
 8091298:	b2c9      	uxtb	r1, r1
 809129a:	689b      	ldr	r3, [r3, #8]
 809129c:	4718      	bx	r3
  } else if (base == 10) {
 809129e:	2a0a      	cmp	r2, #10
 80912a0:	d102      	bne.n	80912a8 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80912a2:	2900      	cmp	r1, #0
 80912a4:	da01      	bge.n	80912aa <_ZN5Print5printEli+0x24>
 80912a6:	e004      	b.n	80912b2 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80912a8:	b2d2      	uxtb	r2, r2
  }
}
 80912aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80912ae:	f7ff bfbe 	b.w	809122e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80912b2:	212d      	movs	r1, #45	; 0x2d
 80912b4:	f7ff ffa2 	bl	80911fc <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80912b8:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80912ba:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80912bc:	4271      	negs	r1, r6
 80912be:	4638      	mov	r0, r7
 80912c0:	f7ff ffb5 	bl	809122e <_ZN5Print11printNumberEmh>
 80912c4:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80912c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080912ca <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80912ca:	b538      	push	{r3, r4, r5, lr}
 80912cc:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80912ce:	f7ff ffda 	bl	8091286 <_ZN5Print5printEli>
 80912d2:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80912d4:	4628      	mov	r0, r5
 80912d6:	f7ff ff94 	bl	8091202 <_ZN5Print7printlnEv>
  return n;
}
 80912da:	4420      	add	r0, r4
 80912dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080912e0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80912e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80912e4:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80912e6:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80912e8:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80912ea:	4617      	mov	r7, r2
 80912ec:	461e      	mov	r6, r3
 80912ee:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80912f2:	f001 fa13 	bl	809271c <__aeabi_dcmpun>
 80912f6:	b108      	cbz	r0, 80912fc <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80912f8:	4947      	ldr	r1, [pc, #284]	; (8091418 <_ZN5Print10printFloatEdh+0x138>)
 80912fa:	e012      	b.n	8091322 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80912fc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8091300:	f04f 32ff 	mov.w	r2, #4294967295
 8091304:	4b45      	ldr	r3, [pc, #276]	; (809141c <_ZN5Print10printFloatEdh+0x13c>)
 8091306:	4638      	mov	r0, r7
 8091308:	4621      	mov	r1, r4
 809130a:	f001 fa07 	bl	809271c <__aeabi_dcmpun>
 809130e:	b968      	cbnz	r0, 809132c <_ZN5Print10printFloatEdh+0x4c>
 8091310:	f04f 32ff 	mov.w	r2, #4294967295
 8091314:	4b41      	ldr	r3, [pc, #260]	; (809141c <_ZN5Print10printFloatEdh+0x13c>)
 8091316:	4638      	mov	r0, r7
 8091318:	4621      	mov	r1, r4
 809131a:	f001 f9e1 	bl	80926e0 <__aeabi_dcmple>
 809131e:	b928      	cbnz	r0, 809132c <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091320:	493f      	ldr	r1, [pc, #252]	; (8091420 <_ZN5Print10printFloatEdh+0x140>)
 8091322:	4640      	mov	r0, r8
 8091324:	f7f0 fcd6 	bl	8081cd4 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8091328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 809132c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8091330:	4b3c      	ldr	r3, [pc, #240]	; (8091424 <_ZN5Print10printFloatEdh+0x144>)
 8091332:	4638      	mov	r0, r7
 8091334:	4631      	mov	r1, r6
 8091336:	f001 f9e7 	bl	8092708 <__aeabi_dcmpgt>
 809133a:	b108      	cbz	r0, 8091340 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 809133c:	493a      	ldr	r1, [pc, #232]	; (8091428 <_ZN5Print10printFloatEdh+0x148>)
 809133e:	e7f0      	b.n	8091322 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8091340:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8091344:	4b39      	ldr	r3, [pc, #228]	; (809142c <_ZN5Print10printFloatEdh+0x14c>)
 8091346:	4638      	mov	r0, r7
 8091348:	4631      	mov	r1, r6
 809134a:	f001 f9bf 	bl	80926cc <__aeabi_dcmplt>
 809134e:	2800      	cmp	r0, #0
 8091350:	d1f4      	bne.n	809133c <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8091352:	2200      	movs	r2, #0
 8091354:	2300      	movs	r3, #0
 8091356:	4638      	mov	r0, r7
 8091358:	4631      	mov	r1, r6
 809135a:	f001 f9b7 	bl	80926cc <__aeabi_dcmplt>
 809135e:	b138      	cbz	r0, 8091370 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8091360:	212d      	movs	r1, #45	; 0x2d
 8091362:	4640      	mov	r0, r8
 8091364:	f7ff ff4a 	bl	80911fc <_ZN5Print5printEc>
     number = -number;
 8091368:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 809136c:	4604      	mov	r4, r0
 809136e:	e000      	b.n	8091372 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8091370:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8091372:	492f      	ldr	r1, [pc, #188]	; (8091430 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8091374:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8091378:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 809137a:	fa5f f389 	uxtb.w	r3, r9
 809137e:	429d      	cmp	r5, r3
 8091380:	d906      	bls.n	8091390 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 8091382:	2200      	movs	r2, #0
 8091384:	4b2b      	ldr	r3, [pc, #172]	; (8091434 <_ZN5Print10printFloatEdh+0x154>)
 8091386:	f001 f859 	bl	809243c <__aeabi_ddiv>
 809138a:	f109 0901 	add.w	r9, r9, #1
 809138e:	e7f4      	b.n	809137a <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 8091390:	463a      	mov	r2, r7
 8091392:	4633      	mov	r3, r6
 8091394:	f000 fd76 	bl	8091e84 <__adddf3>
 8091398:	460f      	mov	r7, r1
 809139a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 809139c:	f001 f9fc 	bl	8092798 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80913a0:	220a      	movs	r2, #10
 80913a2:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80913a4:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80913a6:	4640      	mov	r0, r8
 80913a8:	f7ff ff41 	bl	809122e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80913ac:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80913ae:	b37d      	cbz	r5, 8091410 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80913b0:	4648      	mov	r0, r9
 80913b2:	f000 fea3 	bl	80920fc <__aeabi_ui2d>
 80913b6:	4602      	mov	r2, r0
 80913b8:	460b      	mov	r3, r1
 80913ba:	4630      	mov	r0, r6
 80913bc:	4639      	mov	r1, r7
 80913be:	f000 fd5f 	bl	8091e80 <__aeabi_dsub>
 80913c2:	4606      	mov	r6, r0
 80913c4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80913c6:	4640      	mov	r0, r8
 80913c8:	491b      	ldr	r1, [pc, #108]	; (8091438 <_ZN5Print10printFloatEdh+0x158>)
 80913ca:	f7f0 fc83 	bl	8081cd4 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80913ce:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80913d0:	4b18      	ldr	r3, [pc, #96]	; (8091434 <_ZN5Print10printFloatEdh+0x154>)
 80913d2:	2200      	movs	r2, #0
 80913d4:	4630      	mov	r0, r6
 80913d6:	4639      	mov	r1, r7
 80913d8:	f000 ff06 	bl	80921e8 <__aeabi_dmul>
 80913dc:	460f      	mov	r7, r1
 80913de:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80913e0:	f001 f9b2 	bl	8092748 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80913e4:	220a      	movs	r2, #10
 80913e6:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80913e8:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80913ea:	4640      	mov	r0, r8
 80913ec:	f7ff ff4b 	bl	8091286 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80913f0:	4404      	add	r4, r0
    remainder -= toPrint;
 80913f2:	4648      	mov	r0, r9
 80913f4:	f000 fe92 	bl	809211c <__aeabi_i2d>
 80913f8:	4602      	mov	r2, r0
 80913fa:	460b      	mov	r3, r1
 80913fc:	4630      	mov	r0, r6
 80913fe:	4639      	mov	r1, r7
 8091400:	f000 fd3e 	bl	8091e80 <__aeabi_dsub>
 8091404:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8091406:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 809140a:	4606      	mov	r6, r0
 809140c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 809140e:	d1df      	bne.n	80913d0 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8091410:	4620      	mov	r0, r4
 8091412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8091416:	bf00      	nop
 8091418:	08096778 	.word	0x08096778
 809141c:	7fefffff 	.word	0x7fefffff
 8091420:	08096780 	.word	0x08096780
 8091424:	41efffff 	.word	0x41efffff
 8091428:	0809677c 	.word	0x0809677c
 809142c:	c1efffff 	.word	0xc1efffff
 8091430:	3fe00000 	.word	0x3fe00000
 8091434:	40240000 	.word	0x40240000
 8091438:	08093e4a 	.word	0x08093e4a

0809143c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 809143c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 809143e:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8091442:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8091444:	9100      	str	r1, [sp, #0]
 8091446:	f7ff ff4b 	bl	80912e0 <_ZN5Print10printFloatEdh>
 809144a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 809144c:	4628      	mov	r0, r5
 809144e:	f7ff fed8 	bl	8091202 <_ZN5Print7printlnEv>
  return n;
}
 8091452:	4420      	add	r0, r4
 8091454:	b003      	add	sp, #12
 8091456:	bd30      	pop	{r4, r5, pc}

08091458 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8091458:	b40c      	push	{r2, r3}
 809145a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 809145e:	b087      	sub	sp, #28
 8091460:	af00      	add	r7, sp, #0
 8091462:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8091466:	f854 9b04 	ldr.w	r9, [r4], #4
 809146a:	4605      	mov	r5, r0
 809146c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 809146e:	4623      	mov	r3, r4
 8091470:	464a      	mov	r2, r9
 8091472:	2114      	movs	r1, #20
 8091474:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 8091476:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8091478:	f7ff fb44 	bl	8090b04 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 809147c:	2813      	cmp	r0, #19
 809147e:	d805      	bhi.n	809148c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091480:	1d39      	adds	r1, r7, #4
 8091482:	4628      	mov	r0, r5
 8091484:	f7f0 fc26 	bl	8081cd4 <_ZN5Print5writeEPKc>
 8091488:	4604      	mov	r4, r0
 809148a:	e013      	b.n	80914b4 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 809148c:	f100 0308 	add.w	r3, r0, #8
 8091490:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8091494:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8091496:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 809149a:	1c41      	adds	r1, r0, #1
 809149c:	4623      	mov	r3, r4
 809149e:	464a      	mov	r2, r9
 80914a0:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80914a2:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80914a4:	f7ff fb2e 	bl	8090b04 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80914a8:	4669      	mov	r1, sp
 80914aa:	4628      	mov	r0, r5
 80914ac:	f7f0 fc12 	bl	8081cd4 <_ZN5Print5writeEPKc>
 80914b0:	4604      	mov	r4, r0
 80914b2:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80914b4:	b11e      	cbz	r6, 80914be <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80914b6:	4628      	mov	r0, r5
 80914b8:	f7ff fea3 	bl	8091202 <_ZN5Print7printlnEv>
 80914bc:	4404      	add	r4, r0
    return n;
}
 80914be:	4620      	mov	r0, r4
 80914c0:	371c      	adds	r7, #28
 80914c2:	46bd      	mov	sp, r7
 80914c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80914c8:	b002      	add	sp, #8
 80914ca:	4770      	bx	lr

080914cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80914cc:	4a01      	ldr	r2, [pc, #4]	; (80914d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80914ce:	4b02      	ldr	r3, [pc, #8]	; (80914d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80914d0:	601a      	str	r2, [r3, #0]
 80914d2:	4770      	bx	lr
 80914d4:	0809682d 	.word	0x0809682d
 80914d8:	20003948 	.word	0x20003948

080914dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80914dc:	4b02      	ldr	r3, [pc, #8]	; (80914e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80914de:	681a      	ldr	r2, [r3, #0]
 80914e0:	4b02      	ldr	r3, [pc, #8]	; (80914ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80914e2:	601a      	str	r2, [r3, #0]
 80914e4:	4770      	bx	lr
 80914e6:	bf00      	nop
 80914e8:	20000444 	.word	0x20000444
 80914ec:	2000394c 	.word	0x2000394c

080914f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80914f0:	2100      	movs	r1, #0
 80914f2:	f7ff babf 	b.w	8090a74 <system_delay_ms>

080914f6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80914f6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80914f8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80914fa:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80914fc:	b113      	cbz	r3, 8091504 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80914fe:	2203      	movs	r2, #3
 8091500:	4601      	mov	r1, r0
 8091502:	4798      	blx	r3
    }
 8091504:	4620      	mov	r0, r4
 8091506:	bd10      	pop	{r4, pc}

08091508 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8091508:	b510      	push	{r4, lr}
 809150a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 809150c:	f7ff fff3 	bl	80914f6 <_ZNSt14_Function_baseD1Ev>
 8091510:	4620      	mov	r0, r4
 8091512:	bd10      	pop	{r4, pc}

08091514 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 8091514:	b570      	push	{r4, r5, r6, lr}
 8091516:	4605      	mov	r5, r0
 8091518:	460e      	mov	r6, r1
 809151a:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 809151c:	f7ff fa92 	bl	8090a44 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
 8091520:	b150      	cbz	r0, 8091538 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 8091522:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 8091526:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 809152a:	f7ff fa83 	bl	8090a34 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 809152e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
 8091532:	20e7      	movs	r0, #231	; 0xe7
 8091534:	f7ff ba8e 	b.w	8090a54 <LED_On>
 8091538:	bd70      	pop	{r4, r5, r6, pc}
	...

0809153c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 809153c:	4803      	ldr	r0, [pc, #12]	; (809154c <_GLOBAL__sub_I_RGB+0x10>)
 809153e:	2300      	movs	r3, #0
 8091540:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8091542:	4a03      	ldr	r2, [pc, #12]	; (8091550 <_GLOBAL__sub_I_RGB+0x14>)
 8091544:	4903      	ldr	r1, [pc, #12]	; (8091554 <_GLOBAL__sub_I_RGB+0x18>)
 8091546:	f000 bb49 	b.w	8091bdc <__aeabi_atexit>
 809154a:	bf00      	nop
 809154c:	20003950 	.word	0x20003950
 8091550:	200004b0 	.word	0x200004b0
 8091554:	08091509 	.word	0x08091509

08091558 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8091558:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 809155a:	4b18      	ldr	r3, [pc, #96]	; (80915bc <serialEventRun+0x64>)
 809155c:	b133      	cbz	r3, 809156c <serialEventRun+0x14>
 809155e:	f000 f937 	bl	80917d0 <_Z16_fetch_usbserialv>
 8091562:	6803      	ldr	r3, [r0, #0]
 8091564:	691b      	ldr	r3, [r3, #16]
 8091566:	4798      	blx	r3
 8091568:	2800      	cmp	r0, #0
 809156a:	dc1e      	bgt.n	80915aa <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 809156c:	4b14      	ldr	r3, [pc, #80]	; (80915c0 <serialEventRun+0x68>)
 809156e:	b133      	cbz	r3, 809157e <serialEventRun+0x26>
 8091570:	f000 f9fa 	bl	8091968 <_Z22__fetch_global_Serial1v>
 8091574:	6803      	ldr	r3, [r0, #0]
 8091576:	691b      	ldr	r3, [r3, #16]
 8091578:	4798      	blx	r3
 809157a:	2800      	cmp	r0, #0
 809157c:	dc18      	bgt.n	80915b0 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 809157e:	4b11      	ldr	r3, [pc, #68]	; (80915c4 <serialEventRun+0x6c>)
 8091580:	b10b      	cbz	r3, 8091586 <serialEventRun+0x2e>
 8091582:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8091586:	4b10      	ldr	r3, [pc, #64]	; (80915c8 <serialEventRun+0x70>)
 8091588:	b10b      	cbz	r3, 809158e <serialEventRun+0x36>
 809158a:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 809158e:	4b0f      	ldr	r3, [pc, #60]	; (80915cc <serialEventRun+0x74>)
 8091590:	b10b      	cbz	r3, 8091596 <serialEventRun+0x3e>
 8091592:	f7fe fec9 	bl	8090328 <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8091596:	4b0e      	ldr	r3, [pc, #56]	; (80915d0 <serialEventRun+0x78>)
 8091598:	b17b      	cbz	r3, 80915ba <serialEventRun+0x62>
 809159a:	f000 f955 	bl	8091848 <_Z17_fetch_usbserial1v>
 809159e:	6803      	ldr	r3, [r0, #0]
 80915a0:	691b      	ldr	r3, [r3, #16]
 80915a2:	4798      	blx	r3
 80915a4:	2800      	cmp	r0, #0
 80915a6:	dc06      	bgt.n	80915b6 <serialEventRun+0x5e>
 80915a8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80915aa:	f3af 8000 	nop.w
 80915ae:	e7dd      	b.n	809156c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80915b0:	f3af 8000 	nop.w
 80915b4:	e7e3      	b.n	809157e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80915b6:	f3af 8000 	nop.w
 80915ba:	bd08      	pop	{r3, pc}
	...
 80915cc:	08090329 	.word	0x08090329
 80915d0:	00000000 	.word	0x00000000

080915d4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80915d4:	b508      	push	{r3, lr}
	serialEventRun();
 80915d6:	f7ff ffbf 	bl	8091558 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80915da:	f7ff f8eb 	bl	80907b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80915de:	4b01      	ldr	r3, [pc, #4]	; (80915e4 <_post_loop+0x10>)
 80915e0:	6018      	str	r0, [r3, #0]
 80915e2:	bd08      	pop	{r3, pc}
 80915e4:	20003e48 	.word	0x20003e48

080915e8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80915e8:	4802      	ldr	r0, [pc, #8]	; (80915f4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80915ea:	4a03      	ldr	r2, [pc, #12]	; (80915f8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80915ec:	4903      	ldr	r1, [pc, #12]	; (80915fc <_Z33system_initialize_user_backup_ramv+0x14>)
 80915ee:	1a12      	subs	r2, r2, r0
 80915f0:	f001 bd55 	b.w	809309e <memcpy>
 80915f4:	40024000 	.word	0x40024000
 80915f8:	40024004 	.word	0x40024004
 80915fc:	08096a28 	.word	0x08096a28

08091600 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 8091600:	2000      	movs	r0, #0
 8091602:	4770      	bx	lr

08091604 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 8091604:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 8091606:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 8091608:	4604      	mov	r4, r0
    switch (req->type) {
 809160a:	2b0a      	cmp	r3, #10
 809160c:	d00e      	beq.n	809162c <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 809160e:	2b50      	cmp	r3, #80	; 0x50
 8091610:	d11c      	bne.n	809164c <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 8091612:	4b10      	ldr	r3, [pc, #64]	; (8091654 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 8091614:	681d      	ldr	r5, [r3, #0]
 8091616:	b1cd      	cbz	r5, 809164c <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 8091618:	7d03      	ldrb	r3, [r0, #20]
 809161a:	f44f 7100 	mov.w	r1, #512	; 0x200
 809161e:	9300      	str	r3, [sp, #0]
 8091620:	68c2      	ldr	r2, [r0, #12]
 8091622:	f100 0310 	add.w	r3, r0, #16
 8091626:	6880      	ldr	r0, [r0, #8]
 8091628:	47a8      	blx	r5
 809162a:	e007      	b.n	809163c <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 809162c:	f100 0310 	add.w	r3, r0, #16
 8091630:	68c2      	ldr	r2, [r0, #12]
 8091632:	f44f 7100 	mov.w	r1, #512	; 0x200
 8091636:	6880      	ldr	r0, [r0, #8]
 8091638:	f7ff ffe2 	bl	8091600 <_Z26usb_request_custom_handlerPcjjPj>
 809163c:	b130      	cbz	r0, 809164c <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 809163e:	2200      	movs	r2, #0
 8091640:	4620      	mov	r0, r4
 8091642:	4611      	mov	r1, r2
 8091644:	f7ff fa2e 	bl	8090aa4 <system_set_usb_request_result>
        return true;
 8091648:	2001      	movs	r0, #1
 809164a:	e000      	b.n	809164e <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 809164c:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 809164e:	b003      	add	sp, #12
 8091650:	bd30      	pop	{r4, r5, pc}
 8091652:	bf00      	nop
 8091654:	20003960 	.word	0x20003960

08091658 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 8091658:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 809165a:	4c0c      	ldr	r4, [pc, #48]	; (809168c <module_user_init_hook+0x34>)
 809165c:	4d0c      	ldr	r5, [pc, #48]	; (8091690 <module_user_init_hook+0x38>)
 809165e:	6823      	ldr	r3, [r4, #0]
 8091660:	42ab      	cmp	r3, r5
 8091662:	4b0c      	ldr	r3, [pc, #48]	; (8091694 <module_user_init_hook+0x3c>)
 8091664:	bf0c      	ite	eq
 8091666:	2201      	moveq	r2, #1
 8091668:	2200      	movne	r2, #0
 809166a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 809166c:	d002      	beq.n	8091674 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 809166e:	f7ff ffbb 	bl	80915e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8091672:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 8091674:	4b08      	ldr	r3, [pc, #32]	; (8091698 <module_user_init_hook+0x40>)
 8091676:	b11b      	cbz	r3, 8091680 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 8091678:	f7ff f88c 	bl	8090794 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 809167c:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 8091680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 8091684:	2100      	movs	r1, #0
 8091686:	4805      	ldr	r0, [pc, #20]	; (809169c <module_user_init_hook+0x44>)
 8091688:	f7ff ba04 	b.w	8090a94 <system_set_usb_request_app_handler>
 809168c:	40024000 	.word	0x40024000
 8091690:	9a271c1e 	.word	0x9a271c1e
 8091694:	20003964 	.word	0x20003964
 8091698:	00000000 	.word	0x00000000
 809169c:	08091605 	.word	0x08091605

080916a0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80916a0:	4770      	bx	lr

080916a2 <_ZN9IPAddressD0Ev>:
 80916a2:	b510      	push	{r4, lr}
 80916a4:	4604      	mov	r4, r0
 80916a6:	f7ee fcfc 	bl	80800a2 <_ZdlPv>
 80916aa:	4620      	mov	r0, r4
 80916ac:	bd10      	pop	{r4, pc}

080916ae <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80916ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80916b0:	460f      	mov	r7, r1
 80916b2:	f100 0608 	add.w	r6, r0, #8
 80916b6:	1d05      	adds	r5, r0, #4
 80916b8:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80916ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80916be:	220a      	movs	r2, #10
 80916c0:	4638      	mov	r0, r7
 80916c2:	f7ff fdde 	bl	8091282 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80916c6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80916c8:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80916ca:	d007      	beq.n	80916dc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80916cc:	2c00      	cmp	r4, #0
 80916ce:	d0f4      	beq.n	80916ba <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80916d0:	212e      	movs	r1, #46	; 0x2e
 80916d2:	4638      	mov	r0, r7
 80916d4:	f7ff fd92 	bl	80911fc <_ZN5Print5printEc>
 80916d8:	4404      	add	r4, r0
 80916da:	e7ee      	b.n	80916ba <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80916dc:	4620      	mov	r0, r4
 80916de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080916e0 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80916e0:	4a02      	ldr	r2, [pc, #8]	; (80916ec <_ZN9IPAddressC1Ev+0xc>)
 80916e2:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80916e4:	2200      	movs	r2, #0
 80916e6:	6042      	str	r2, [r0, #4]
{
    clear();
}
 80916e8:	4770      	bx	lr
 80916ea:	bf00      	nop
 80916ec:	08096888 	.word	0x08096888

080916f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80916f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80916f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80916f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80916fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80916fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8091702:	6041      	str	r1, [r0, #4]
 8091704:	bd10      	pop	{r4, pc}
	...

08091708 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8091708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 809170a:	4d04      	ldr	r5, [pc, #16]	; (809171c <_ZN9IPAddressC1Ehhhh+0x14>)
 809170c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 809170e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8091712:	9500      	str	r5, [sp, #0]
 8091714:	f7ff ffec 	bl	80916f0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8091718:	b003      	add	sp, #12
 809171a:	bd30      	pop	{r4, r5, pc}
 809171c:	08096888 	.word	0x08096888

08091720 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8091720:	7441      	strb	r1, [r0, #17]
 8091722:	4770      	bx	lr

08091724 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 8091724:	4770      	bx	lr

08091726 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8091726:	2100      	movs	r1, #0
 8091728:	7c00      	ldrb	r0, [r0, #16]
 809172a:	f7ff b96b 	b.w	8090a04 <HAL_USB_USART_Receive_Data>

0809172e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 809172e:	2101      	movs	r1, #1
 8091730:	7c00      	ldrb	r0, [r0, #16]
 8091732:	f7ff b967 	b.w	8090a04 <HAL_USB_USART_Receive_Data>

08091736 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8091736:	7c00      	ldrb	r0, [r0, #16]
 8091738:	f7ff b95c 	b.w	80909f4 <HAL_USB_USART_Available_Data_For_Write>

0809173c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 809173c:	7c00      	ldrb	r0, [r0, #16]
 809173e:	f7ff b951 	b.w	80909e4 <HAL_USB_USART_Available_Data>

08091742 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8091742:	b538      	push	{r3, r4, r5, lr}
 8091744:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8091746:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8091748:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 809174a:	f7ff f953 	bl	80909f4 <HAL_USB_USART_Available_Data_For_Write>
 809174e:	2800      	cmp	r0, #0
 8091750:	dc01      	bgt.n	8091756 <_ZN9USBSerial5writeEh+0x14>
 8091752:	7c60      	ldrb	r0, [r4, #17]
 8091754:	b120      	cbz	r0, 8091760 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8091756:	4629      	mov	r1, r5
 8091758:	7c20      	ldrb	r0, [r4, #16]
 809175a:	f7ff f95b 	bl	8090a14 <HAL_USB_USART_Send_Data>
    return 1;
 809175e:	2001      	movs	r0, #1
  }
  return 0;
}
 8091760:	bd38      	pop	{r3, r4, r5, pc}

08091762 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8091762:	7c00      	ldrb	r0, [r0, #16]
 8091764:	f7ff b95e 	b.w	8090a24 <HAL_USB_USART_Flush_Data>

08091768 <_ZN9USBSerialD0Ev>:
 8091768:	b510      	push	{r4, lr}
 809176a:	4604      	mov	r4, r0
 809176c:	f7ee fc99 	bl	80800a2 <_ZdlPv>
 8091770:	4620      	mov	r0, r4
 8091772:	bd10      	pop	{r4, pc}

08091774 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8091774:	b510      	push	{r4, lr}
 8091776:	4604      	mov	r4, r0
 8091778:	2300      	movs	r3, #0
 809177a:	6063      	str	r3, [r4, #4]
 809177c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8091780:	60a3      	str	r3, [r4, #8]
 8091782:	4b05      	ldr	r3, [pc, #20]	; (8091798 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8091784:	4608      	mov	r0, r1
 8091786:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8091788:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 809178a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 809178c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 809178e:	4611      	mov	r1, r2
 8091790:	f7ff f918 	bl	80909c4 <HAL_USB_USART_Init>
}
 8091794:	4620      	mov	r0, r4
 8091796:	bd10      	pop	{r4, pc}
 8091798:	0809689c 	.word	0x0809689c

0809179c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 809179c:	2200      	movs	r2, #0
 809179e:	7c00      	ldrb	r0, [r0, #16]
 80917a0:	f7ff b918 	b.w	80909d4 <HAL_USB_USART_Begin>

080917a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80917a4:	b510      	push	{r4, lr}
 80917a6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80917a8:	2214      	movs	r2, #20
 80917aa:	2100      	movs	r1, #0
 80917ac:	f001 fc9d 	bl	80930ea <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80917b0:	4b05      	ldr	r3, [pc, #20]	; (80917c8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80917b2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80917b4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80917b6:	4b05      	ldr	r3, [pc, #20]	; (80917cc <_Z19acquireSerialBufferv+0x28>)
 80917b8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80917ba:	f240 1301 	movw	r3, #257	; 0x101
 80917be:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80917c0:	2381      	movs	r3, #129	; 0x81
 80917c2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80917c4:	bd10      	pop	{r4, pc}
 80917c6:	bf00      	nop
 80917c8:	200039ed 	.word	0x200039ed
 80917cc:	2000396c 	.word	0x2000396c

080917d0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80917d0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80917d2:	4d0e      	ldr	r5, [pc, #56]	; (809180c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80917d4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80917d6:	a801      	add	r0, sp, #4
 80917d8:	f7ff ffe4 	bl	80917a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80917dc:	6829      	ldr	r1, [r5, #0]
 80917de:	f011 0401 	ands.w	r4, r1, #1
 80917e2:	d110      	bne.n	8091806 <_Z16_fetch_usbserialv+0x36>
 80917e4:	4628      	mov	r0, r5
 80917e6:	f7ee fc60 	bl	80800aa <__cxa_guard_acquire>
 80917ea:	b160      	cbz	r0, 8091806 <_Z16_fetch_usbserialv+0x36>
 80917ec:	aa01      	add	r2, sp, #4
 80917ee:	4621      	mov	r1, r4
 80917f0:	4807      	ldr	r0, [pc, #28]	; (8091810 <_Z16_fetch_usbserialv+0x40>)
 80917f2:	f7ff ffbf 	bl	8091774 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80917f6:	4628      	mov	r0, r5
 80917f8:	f7ee fc5c 	bl	80800b4 <__cxa_guard_release>
 80917fc:	4a05      	ldr	r2, [pc, #20]	; (8091814 <_Z16_fetch_usbserialv+0x44>)
 80917fe:	4906      	ldr	r1, [pc, #24]	; (8091818 <_Z16_fetch_usbserialv+0x48>)
 8091800:	4803      	ldr	r0, [pc, #12]	; (8091810 <_Z16_fetch_usbserialv+0x40>)
 8091802:	f000 f9eb 	bl	8091bdc <__aeabi_atexit>
	return _usbserial;
}
 8091806:	4802      	ldr	r0, [pc, #8]	; (8091810 <_Z16_fetch_usbserialv+0x40>)
 8091808:	b007      	add	sp, #28
 809180a:	bd30      	pop	{r4, r5, pc}
 809180c:	20003968 	.word	0x20003968
 8091810:	20003af0 	.word	0x20003af0
 8091814:	200004b0 	.word	0x200004b0
 8091818:	08091725 	.word	0x08091725

0809181c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 809181c:	b510      	push	{r4, lr}
 809181e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8091820:	2214      	movs	r2, #20
 8091822:	2100      	movs	r1, #0
 8091824:	f001 fc61 	bl	80930ea <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8091828:	4b05      	ldr	r3, [pc, #20]	; (8091840 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 809182a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 809182c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 809182e:	4b05      	ldr	r3, [pc, #20]	; (8091844 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8091830:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8091832:	f240 1301 	movw	r3, #257	; 0x101
 8091836:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8091838:	2381      	movs	r3, #129	; 0x81
 809183a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 809183c:	bd10      	pop	{r4, pc}
 809183e:	bf00      	nop
 8091840:	20003ba0 	.word	0x20003ba0
 8091844:	20003b08 	.word	0x20003b08

08091848 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8091848:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 809184a:	4c0e      	ldr	r4, [pc, #56]	; (8091884 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 809184c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 809184e:	a801      	add	r0, sp, #4
 8091850:	f7ff ffe4 	bl	809181c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8091854:	6823      	ldr	r3, [r4, #0]
 8091856:	07db      	lsls	r3, r3, #31
 8091858:	d410      	bmi.n	809187c <_Z17_fetch_usbserial1v+0x34>
 809185a:	4620      	mov	r0, r4
 809185c:	f7ee fc25 	bl	80800aa <__cxa_guard_acquire>
 8091860:	b160      	cbz	r0, 809187c <_Z17_fetch_usbserial1v+0x34>
 8091862:	aa01      	add	r2, sp, #4
 8091864:	2101      	movs	r1, #1
 8091866:	4808      	ldr	r0, [pc, #32]	; (8091888 <_Z17_fetch_usbserial1v+0x40>)
 8091868:	f7ff ff84 	bl	8091774 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 809186c:	4620      	mov	r0, r4
 809186e:	f7ee fc21 	bl	80800b4 <__cxa_guard_release>
 8091872:	4a06      	ldr	r2, [pc, #24]	; (809188c <_Z17_fetch_usbserial1v+0x44>)
 8091874:	4906      	ldr	r1, [pc, #24]	; (8091890 <_Z17_fetch_usbserial1v+0x48>)
 8091876:	4804      	ldr	r0, [pc, #16]	; (8091888 <_Z17_fetch_usbserial1v+0x40>)
 8091878:	f000 f9b0 	bl	8091bdc <__aeabi_atexit>
  return _usbserial1;
}
 809187c:	4802      	ldr	r0, [pc, #8]	; (8091888 <_Z17_fetch_usbserial1v+0x40>)
 809187e:	b006      	add	sp, #24
 8091880:	bd10      	pop	{r4, pc}
 8091882:	bf00      	nop
 8091884:	20003b04 	.word	0x20003b04
 8091888:	20003b8c 	.word	0x20003b8c
 809188c:	200004b0 	.word	0x200004b0
 8091890:	08091725 	.word	0x08091725

08091894 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8091894:	2200      	movs	r2, #0
 8091896:	4611      	mov	r1, r2
 8091898:	4610      	mov	r0, r2
 809189a:	f7ff b90b 	b.w	8090ab4 <network_ready>
	...

080918a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 80918a0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80918a2:	4d0b      	ldr	r5, [pc, #44]	; (80918d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 80918a4:	2428      	movs	r4, #40	; 0x28
 80918a6:	4622      	mov	r2, r4
 80918a8:	2100      	movs	r1, #0
 80918aa:	4628      	mov	r0, r5
 80918ac:	f001 fc1d 	bl	80930ea <memset>
        cid = -1;
 80918b0:	f04f 33ff 	mov.w	r3, #4294967295
 80918b4:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
 80918b6:	802c      	strh	r4, [r5, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 80918b8:	4d06      	ldr	r5, [pc, #24]	; (80918d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 80918ba:	4b07      	ldr	r3, [pc, #28]	; (80918d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 80918bc:	4628      	mov	r0, r5
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 80918be:	4622      	mov	r2, r4
 80918c0:	f840 3b04 	str.w	r3, [r0], #4
 80918c4:	2100      	movs	r1, #0
 80918c6:	f001 fc10 	bl	80930ea <memset>
        size = sizeof(*this);
 80918ca:	80ac      	strh	r4, [r5, #4]
 80918cc:	bd38      	pop	{r3, r4, r5, pc}
 80918ce:	bf00      	nop
 80918d0:	20003cd0 	.word	0x20003cd0
 80918d4:	20003ca4 	.word	0x20003ca4
 80918d8:	080968cc 	.word	0x080968cc

080918dc <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80918dc:	7441      	strb	r1, [r0, #17]
 80918de:	4770      	bx	lr

080918e0 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80918e0:	7c00      	ldrb	r0, [r0, #16]
 80918e2:	f7fe bfb7 	b.w	8090854 <HAL_USART_Available_Data_For_Write>

080918e6 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80918e6:	7c00      	ldrb	r0, [r0, #16]
 80918e8:	f7fe bf8c 	b.w	8090804 <HAL_USART_Available_Data>

080918ec <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80918ec:	7c00      	ldrb	r0, [r0, #16]
 80918ee:	f7fe bf99 	b.w	8090824 <HAL_USART_Peek_Data>

080918f2 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80918f2:	7c00      	ldrb	r0, [r0, #16]
 80918f4:	f7fe bf8e 	b.w	8090814 <HAL_USART_Read_Data>

080918f8 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80918f8:	7c00      	ldrb	r0, [r0, #16]
 80918fa:	f7fe bf9b 	b.w	8090834 <HAL_USART_Flush_Data>

080918fe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80918fe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8091900:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8091902:	4604      	mov	r4, r0
 8091904:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8091906:	b925      	cbnz	r5, 8091912 <_ZN11USARTSerial5writeEh+0x14>
 8091908:	7c00      	ldrb	r0, [r0, #16]
 809190a:	f7fe ffa3 	bl	8090854 <HAL_USART_Available_Data_For_Write>
 809190e:	2800      	cmp	r0, #0
 8091910:	dd05      	ble.n	809191e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8091912:	4631      	mov	r1, r6
 8091914:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8091916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 809191a:	f7fe bf6b 	b.w	80907f4 <HAL_USART_Write_Data>
  }
  return 0;
}
 809191e:	4628      	mov	r0, r5
 8091920:	bd70      	pop	{r4, r5, r6, pc}
	...

08091924 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8091924:	b510      	push	{r4, lr}
 8091926:	4604      	mov	r4, r0
 8091928:	4608      	mov	r0, r1
 809192a:	4611      	mov	r1, r2
 809192c:	2200      	movs	r2, #0
 809192e:	6062      	str	r2, [r4, #4]
 8091930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8091934:	60a2      	str	r2, [r4, #8]
 8091936:	4a05      	ldr	r2, [pc, #20]	; (809194c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8091938:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 809193a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 809193c:	2201      	movs	r2, #1
 809193e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8091940:	461a      	mov	r2, r3
 8091942:	f7fe ff4f 	bl	80907e4 <HAL_USART_Init>
}
 8091946:	4620      	mov	r0, r4
 8091948:	bd10      	pop	{r4, pc}
 809194a:	bf00      	nop
 809194c:	080968dc 	.word	0x080968dc

08091950 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8091950:	2300      	movs	r3, #0
 8091952:	7c00      	ldrb	r0, [r0, #16]
 8091954:	f7fe bf86 	b.w	8090864 <HAL_USART_BeginConfig>

08091958 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8091958:	2200      	movs	r2, #0
 809195a:	f7ff bff9 	b.w	8091950 <_ZN11USARTSerial5beginEmm>

0809195e <_ZN11USARTSerialcvbEv>:
  return HAL_USART_Write_NineBitData(_serial, c);
}

USARTSerial::operator bool() {
  return true;
}
 809195e:	2001      	movs	r0, #1
 8091960:	4770      	bx	lr

08091962 <_ZN11USARTSerial9isEnabledEv>:

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8091962:	7c00      	ldrb	r0, [r0, #16]
 8091964:	f7fe bf6e 	b.w	8090844 <HAL_USART_Is_Enabled>

08091968 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8091968:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 809196a:	4d0c      	ldr	r5, [pc, #48]	; (809199c <_Z22__fetch_global_Serial1v+0x34>)
 809196c:	6829      	ldr	r1, [r5, #0]
 809196e:	f011 0401 	ands.w	r4, r1, #1
 8091972:	d111      	bne.n	8091998 <_Z22__fetch_global_Serial1v+0x30>
 8091974:	4628      	mov	r0, r5
 8091976:	f7ee fb98 	bl	80800aa <__cxa_guard_acquire>
 809197a:	b168      	cbz	r0, 8091998 <_Z22__fetch_global_Serial1v+0x30>
 809197c:	4a08      	ldr	r2, [pc, #32]	; (80919a0 <_Z22__fetch_global_Serial1v+0x38>)
 809197e:	4621      	mov	r1, r4
 8091980:	4b08      	ldr	r3, [pc, #32]	; (80919a4 <_Z22__fetch_global_Serial1v+0x3c>)
 8091982:	4809      	ldr	r0, [pc, #36]	; (80919a8 <_Z22__fetch_global_Serial1v+0x40>)
 8091984:	f7ff ffce 	bl	8091924 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8091988:	4628      	mov	r0, r5
 809198a:	f7ee fb93 	bl	80800b4 <__cxa_guard_release>
 809198e:	4a07      	ldr	r2, [pc, #28]	; (80919ac <_Z22__fetch_global_Serial1v+0x44>)
 8091990:	4907      	ldr	r1, [pc, #28]	; (80919b0 <_Z22__fetch_global_Serial1v+0x48>)
 8091992:	4805      	ldr	r0, [pc, #20]	; (80919a8 <_Z22__fetch_global_Serial1v+0x40>)
 8091994:	f000 f922 	bl	8091bdc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8091998:	4803      	ldr	r0, [pc, #12]	; (80919a8 <_Z22__fetch_global_Serial1v+0x40>)
 809199a:	bd38      	pop	{r3, r4, r5, pc}
 809199c:	20003d90 	.word	0x20003d90
 80919a0:	20003d94 	.word	0x20003d94
 80919a4:	20003d0c 	.word	0x20003d0c
 80919a8:	20003cf8 	.word	0x20003cf8
 80919ac:	200004b0 	.word	0x200004b0
 80919b0:	080902cd 	.word	0x080902cd

080919b4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80919b4:	4770      	bx	lr

080919b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80919b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80919b8:	4606      	mov	r6, r0
 80919ba:	4615      	mov	r5, r2
 80919bc:	460c      	mov	r4, r1
 80919be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80919c0:	42bc      	cmp	r4, r7
 80919c2:	d006      	beq.n	80919d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80919c4:	6833      	ldr	r3, [r6, #0]
 80919c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80919ca:	689b      	ldr	r3, [r3, #8]
 80919cc:	4630      	mov	r0, r6
 80919ce:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80919d0:	e7f6      	b.n	80919c0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80919d2:	4628      	mov	r0, r5
 80919d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080919d6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80919d6:	2200      	movs	r2, #0
 80919d8:	7c00      	ldrb	r0, [r0, #16]
 80919da:	f7fe bf6b 	b.w	80908b4 <HAL_I2C_Write_Data>

080919de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80919de:	2100      	movs	r1, #0
 80919e0:	7c00      	ldrb	r0, [r0, #16]
 80919e2:	f7fe bf6f 	b.w	80908c4 <HAL_I2C_Available_Data>

080919e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80919e6:	2100      	movs	r1, #0
 80919e8:	7c00      	ldrb	r0, [r0, #16]
 80919ea:	f7fe bf73 	b.w	80908d4 <HAL_I2C_Read_Data>

080919ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80919ee:	2100      	movs	r1, #0
 80919f0:	7c00      	ldrb	r0, [r0, #16]
 80919f2:	f7fe bf77 	b.w	80908e4 <HAL_I2C_Peek_Data>

080919f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80919f6:	2100      	movs	r1, #0
 80919f8:	7c00      	ldrb	r0, [r0, #16]
 80919fa:	f7fe bf7b 	b.w	80908f4 <HAL_I2C_Flush_Data>

080919fe <_ZN7TwoWireD0Ev>:
 80919fe:	b510      	push	{r4, lr}
 8091a00:	4604      	mov	r4, r0
 8091a02:	f7ee fb4e 	bl	80800a2 <_ZdlPv>
 8091a06:	4620      	mov	r0, r4
 8091a08:	bd10      	pop	{r4, pc}
	...

08091a0c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8091a0c:	b510      	push	{r4, lr}
 8091a0e:	4604      	mov	r4, r0
 8091a10:	4608      	mov	r0, r1
 8091a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8091a16:	60a3      	str	r3, [r4, #8]
 8091a18:	4b04      	ldr	r3, [pc, #16]	; (8091a2c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 8091a1a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8091a1c:	7420      	strb	r0, [r4, #16]
 8091a1e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8091a20:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8091a22:	f7fe ff77 	bl	8090914 <HAL_I2C_Init>

}
 8091a26:	4620      	mov	r0, r4
 8091a28:	bd10      	pop	{r4, pc}
 8091a2a:	bf00      	nop
 8091a2c:	0809690c 	.word	0x0809690c

08091a30 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8091a30:	2300      	movs	r3, #0
 8091a32:	461a      	mov	r2, r3
 8091a34:	4619      	mov	r1, r3
 8091a36:	7c00      	ldrb	r0, [r0, #16]
 8091a38:	f7fe bf1c 	b.w	8090874 <HAL_I2C_Begin>

08091a3c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8091a3c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 8091a3e:	2400      	movs	r4, #0
 8091a40:	7c00      	ldrb	r0, [r0, #16]
 8091a42:	9400      	str	r4, [sp, #0]
 8091a44:	f7fe ff1e 	bl	8090884 <HAL_I2C_Request_Data>
  return result;
}
 8091a48:	b2c0      	uxtb	r0, r0
 8091a4a:	b002      	add	sp, #8
 8091a4c:	bd10      	pop	{r4, pc}

08091a4e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8091a4e:	2301      	movs	r3, #1
 8091a50:	f7ff bff4 	b.w	8091a3c <_ZN7TwoWire11requestFromEhhh>

08091a54 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8091a54:	2200      	movs	r2, #0
 8091a56:	7c00      	ldrb	r0, [r0, #16]
 8091a58:	f7fe bf1c 	b.w	8090894 <HAL_I2C_Begin_Transmission>

08091a5c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8091a5c:	2200      	movs	r2, #0
 8091a5e:	7c00      	ldrb	r0, [r0, #16]
 8091a60:	f7fe bf20 	b.w	80908a4 <HAL_I2C_End_Transmission>

08091a64 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 8091a64:	2101      	movs	r1, #1
 8091a66:	f7ff bff9 	b.w	8091a5c <_ZN7TwoWire15endTransmissionEh>

08091a6a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8091a6a:	2100      	movs	r1, #0
 8091a6c:	7c00      	ldrb	r0, [r0, #16]
 8091a6e:	f7fe bf49 	b.w	8090904 <HAL_I2C_Is_Enabled>
	...

08091a74 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8091a74:	b510      	push	{r4, lr}
 8091a76:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8091a78:	480f      	ldr	r0, [pc, #60]	; (8091ab8 <pinAvailable+0x44>)
 8091a7a:	f7ff f8f4 	bl	8090c66 <_ZN8SPIClass9isEnabledEv>
 8091a7e:	b128      	cbz	r0, 8091a8c <pinAvailable+0x18>
 8091a80:	f1a4 030d 	sub.w	r3, r4, #13
 8091a84:	2b02      	cmp	r3, #2
 8091a86:	d801      	bhi.n	8091a8c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8091a88:	2000      	movs	r0, #0
 8091a8a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8091a8c:	f000 f886 	bl	8091b9c <_Z19__fetch_global_Wirev>
 8091a90:	f7ff ffeb 	bl	8091a6a <_ZN7TwoWire9isEnabledEv>
 8091a94:	b108      	cbz	r0, 8091a9a <pinAvailable+0x26>
 8091a96:	2c01      	cmp	r4, #1
 8091a98:	d9f6      	bls.n	8091a88 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8091a9a:	f7ff ff65 	bl	8091968 <_Z22__fetch_global_Serial1v>
 8091a9e:	f7ff ff60 	bl	8091962 <_ZN11USARTSerial9isEnabledEv>
 8091aa2:	b118      	cbz	r0, 8091aac <pinAvailable+0x38>
 8091aa4:	f1a4 0312 	sub.w	r3, r4, #18
 8091aa8:	2b01      	cmp	r3, #1
 8091aaa:	d9ed      	bls.n	8091a88 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8091aac:	2c2e      	cmp	r4, #46	; 0x2e
 8091aae:	bf8c      	ite	hi
 8091ab0:	2000      	movhi	r0, #0
 8091ab2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8091ab4:	bd10      	pop	{r4, pc}
 8091ab6:	bf00      	nop
 8091ab8:	20003e18 	.word	0x20003e18

08091abc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8091abc:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8091abe:	b538      	push	{r3, r4, r5, lr}
 8091ac0:	4604      	mov	r4, r0
 8091ac2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8091ac4:	d80a      	bhi.n	8091adc <pinMode+0x20>
 8091ac6:	29ff      	cmp	r1, #255	; 0xff
 8091ac8:	d008      	beq.n	8091adc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8091aca:	f7ff ffd3 	bl	8091a74 <pinAvailable>
 8091ace:	b128      	cbz	r0, 8091adc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8091ad0:	4629      	mov	r1, r5
 8091ad2:	4620      	mov	r0, r4
}
 8091ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8091ad8:	f7fe bdf4 	b.w	80906c4 <HAL_Pin_Mode>
 8091adc:	bd38      	pop	{r3, r4, r5, pc}

08091ade <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8091ade:	b538      	push	{r3, r4, r5, lr}
 8091ae0:	4604      	mov	r4, r0
 8091ae2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8091ae4:	f7fe fdf6 	bl	80906d4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8091ae8:	28ff      	cmp	r0, #255	; 0xff
 8091aea:	d010      	beq.n	8091b0e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8091aec:	2806      	cmp	r0, #6
 8091aee:	d804      	bhi.n	8091afa <digitalWrite+0x1c>
 8091af0:	234d      	movs	r3, #77	; 0x4d
 8091af2:	fa23 f000 	lsr.w	r0, r3, r0
 8091af6:	07c3      	lsls	r3, r0, #31
 8091af8:	d409      	bmi.n	8091b0e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8091afa:	4620      	mov	r0, r4
 8091afc:	f7ff ffba 	bl	8091a74 <pinAvailable>
 8091b00:	b128      	cbz	r0, 8091b0e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8091b02:	4629      	mov	r1, r5
 8091b04:	4620      	mov	r0, r4
}
 8091b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8091b0a:	f7fe bdeb 	b.w	80906e4 <HAL_GPIO_Write>
 8091b0e:	bd38      	pop	{r3, r4, r5, pc}

08091b10 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8091b10:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8091b12:	4e11      	ldr	r6, [pc, #68]	; (8091b58 <_GLOBAL__sub_I_SPI+0x48>)
 8091b14:	4d11      	ldr	r5, [pc, #68]	; (8091b5c <_GLOBAL__sub_I_SPI+0x4c>)
 8091b16:	4c12      	ldr	r4, [pc, #72]	; (8091b60 <_GLOBAL__sub_I_SPI+0x50>)
 8091b18:	2100      	movs	r1, #0
 8091b1a:	4630      	mov	r0, r6
 8091b1c:	f7ff f80a 	bl	8090b34 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8091b20:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8091b22:	4e10      	ldr	r6, [pc, #64]	; (8091b64 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8091b24:	462a      	mov	r2, r5
 8091b26:	4621      	mov	r1, r4
 8091b28:	f000 f858 	bl	8091bdc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8091b2c:	2101      	movs	r1, #1
 8091b2e:	4630      	mov	r0, r6
 8091b30:	f7ff f800 	bl	8090b34 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8091b34:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8091b36:	4e0c      	ldr	r6, [pc, #48]	; (8091b68 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8091b38:	462a      	mov	r2, r5
 8091b3a:	4621      	mov	r1, r4
 8091b3c:	f000 f84e 	bl	8091bdc <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8091b40:	2102      	movs	r1, #2
 8091b42:	4630      	mov	r0, r6
 8091b44:	f7fe fff6 	bl	8090b34 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8091b48:	462a      	mov	r2, r5
 8091b4a:	4621      	mov	r1, r4
 8091b4c:	4630      	mov	r0, r6
 8091b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8091b52:	f000 b843 	b.w	8091bdc <__aeabi_atexit>
 8091b56:	bf00      	nop
 8091b58:	20003e18 	.word	0x20003e18
 8091b5c:	200004b0 	.word	0x200004b0
 8091b60:	08090b25 	.word	0x08090b25
 8091b64:	20003e28 	.word	0x20003e28
 8091b68:	20003e38 	.word	0x20003e38

08091b6c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 8091b6c:	b513      	push	{r0, r1, r4, lr}
 8091b6e:	4c08      	ldr	r4, [pc, #32]	; (8091b90 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8091b70:	2300      	movs	r3, #0
 8091b72:	461a      	mov	r2, r3
 8091b74:	4619      	mov	r1, r3
 8091b76:	9300      	str	r3, [sp, #0]
 8091b78:	4620      	mov	r0, r4
 8091b7a:	f7ff fdc5 	bl	8091708 <_ZN9IPAddressC1Ehhhh>
 8091b7e:	4620      	mov	r0, r4
 8091b80:	4a04      	ldr	r2, [pc, #16]	; (8091b94 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8091b82:	4905      	ldr	r1, [pc, #20]	; (8091b98 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8091b84:	b002      	add	sp, #8
 8091b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8091b8a:	f000 b827 	b.w	8091bdc <__aeabi_atexit>
 8091b8e:	bf00      	nop
 8091b90:	20003e4c 	.word	0x20003e4c
 8091b94:	200004b0 	.word	0x200004b0
 8091b98:	080916a1 	.word	0x080916a1

08091b9c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8091b9c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8091b9e:	4d0b      	ldr	r5, [pc, #44]	; (8091bcc <_Z19__fetch_global_Wirev+0x30>)
 8091ba0:	6829      	ldr	r1, [r5, #0]
 8091ba2:	f011 0401 	ands.w	r4, r1, #1
 8091ba6:	d10f      	bne.n	8091bc8 <_Z19__fetch_global_Wirev+0x2c>
 8091ba8:	4628      	mov	r0, r5
 8091baa:	f7ee fa7e 	bl	80800aa <__cxa_guard_acquire>
 8091bae:	b158      	cbz	r0, 8091bc8 <_Z19__fetch_global_Wirev+0x2c>
 8091bb0:	4621      	mov	r1, r4
 8091bb2:	4807      	ldr	r0, [pc, #28]	; (8091bd0 <_Z19__fetch_global_Wirev+0x34>)
 8091bb4:	f7ff ff2a 	bl	8091a0c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8091bb8:	4628      	mov	r0, r5
 8091bba:	f7ee fa7b 	bl	80800b4 <__cxa_guard_release>
 8091bbe:	4a05      	ldr	r2, [pc, #20]	; (8091bd4 <_Z19__fetch_global_Wirev+0x38>)
 8091bc0:	4905      	ldr	r1, [pc, #20]	; (8091bd8 <_Z19__fetch_global_Wirev+0x3c>)
 8091bc2:	4803      	ldr	r0, [pc, #12]	; (8091bd0 <_Z19__fetch_global_Wirev+0x34>)
 8091bc4:	f000 f80a 	bl	8091bdc <__aeabi_atexit>
	return wire;
}
 8091bc8:	4801      	ldr	r0, [pc, #4]	; (8091bd0 <_Z19__fetch_global_Wirev+0x34>)
 8091bca:	bd38      	pop	{r3, r4, r5, pc}
 8091bcc:	20003e54 	.word	0x20003e54
 8091bd0:	20003e58 	.word	0x20003e58
 8091bd4:	200004b0 	.word	0x200004b0
 8091bd8:	080919b5 	.word	0x080919b5

08091bdc <__aeabi_atexit>:
 8091bdc:	460b      	mov	r3, r1
 8091bde:	4601      	mov	r1, r0
 8091be0:	4618      	mov	r0, r3
 8091be2:	f001 ba3f 	b.w	8093064 <__cxa_atexit>
	...

08091be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8091be8:	4b18      	ldr	r3, [pc, #96]	; (8091c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8091bea:	681a      	ldr	r2, [r3, #0]
 8091bec:	07d1      	lsls	r1, r2, #31
 8091bee:	bf5c      	itt	pl
 8091bf0:	2201      	movpl	r2, #1
 8091bf2:	601a      	strpl	r2, [r3, #0]
 8091bf4:	4b16      	ldr	r3, [pc, #88]	; (8091c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8091bf6:	681a      	ldr	r2, [r3, #0]
 8091bf8:	07d2      	lsls	r2, r2, #31
 8091bfa:	bf5c      	itt	pl
 8091bfc:	2201      	movpl	r2, #1
 8091bfe:	601a      	strpl	r2, [r3, #0]
 8091c00:	4b14      	ldr	r3, [pc, #80]	; (8091c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8091c02:	681a      	ldr	r2, [r3, #0]
 8091c04:	07d0      	lsls	r0, r2, #31
 8091c06:	bf5c      	itt	pl
 8091c08:	2201      	movpl	r2, #1
 8091c0a:	601a      	strpl	r2, [r3, #0]
 8091c0c:	4b12      	ldr	r3, [pc, #72]	; (8091c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8091c0e:	681a      	ldr	r2, [r3, #0]
 8091c10:	07d1      	lsls	r1, r2, #31
 8091c12:	bf5c      	itt	pl
 8091c14:	2201      	movpl	r2, #1
 8091c16:	601a      	strpl	r2, [r3, #0]
 8091c18:	4b10      	ldr	r3, [pc, #64]	; (8091c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8091c1a:	681a      	ldr	r2, [r3, #0]
 8091c1c:	07d2      	lsls	r2, r2, #31
 8091c1e:	bf5c      	itt	pl
 8091c20:	2201      	movpl	r2, #1
 8091c22:	601a      	strpl	r2, [r3, #0]
 8091c24:	4b0e      	ldr	r3, [pc, #56]	; (8091c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8091c26:	681a      	ldr	r2, [r3, #0]
 8091c28:	07d0      	lsls	r0, r2, #31
 8091c2a:	bf5c      	itt	pl
 8091c2c:	2201      	movpl	r2, #1
 8091c2e:	601a      	strpl	r2, [r3, #0]
 8091c30:	4b0c      	ldr	r3, [pc, #48]	; (8091c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8091c32:	681a      	ldr	r2, [r3, #0]
 8091c34:	07d1      	lsls	r1, r2, #31
 8091c36:	bf5c      	itt	pl
 8091c38:	2201      	movpl	r2, #1
 8091c3a:	601a      	strpl	r2, [r3, #0]
 8091c3c:	4b0a      	ldr	r3, [pc, #40]	; (8091c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8091c3e:	681a      	ldr	r2, [r3, #0]
 8091c40:	07d2      	lsls	r2, r2, #31
 8091c42:	bf5c      	itt	pl
 8091c44:	2201      	movpl	r2, #1
 8091c46:	601a      	strpl	r2, [r3, #0]
 8091c48:	4770      	bx	lr
 8091c4a:	bf00      	nop
 8091c4c:	20003e88 	.word	0x20003e88
 8091c50:	20003e84 	.word	0x20003e84
 8091c54:	20003e80 	.word	0x20003e80
 8091c58:	20003e7c 	.word	0x20003e7c
 8091c5c:	20003e78 	.word	0x20003e78
 8091c60:	20003e74 	.word	0x20003e74
 8091c64:	20003e70 	.word	0x20003e70
 8091c68:	20003e6c 	.word	0x20003e6c

08091c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8091c6c:	4b24      	ldr	r3, [pc, #144]	; (8091d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8091c6e:	681a      	ldr	r2, [r3, #0]
 8091c70:	07d0      	lsls	r0, r2, #31
 8091c72:	bf5c      	itt	pl
 8091c74:	2201      	movpl	r2, #1
 8091c76:	601a      	strpl	r2, [r3, #0]
 8091c78:	4b22      	ldr	r3, [pc, #136]	; (8091d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8091c7a:	681a      	ldr	r2, [r3, #0]
 8091c7c:	07d1      	lsls	r1, r2, #31
 8091c7e:	bf5c      	itt	pl
 8091c80:	2201      	movpl	r2, #1
 8091c82:	601a      	strpl	r2, [r3, #0]
 8091c84:	4b20      	ldr	r3, [pc, #128]	; (8091d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8091c86:	681a      	ldr	r2, [r3, #0]
 8091c88:	07d2      	lsls	r2, r2, #31
 8091c8a:	bf5c      	itt	pl
 8091c8c:	2201      	movpl	r2, #1
 8091c8e:	601a      	strpl	r2, [r3, #0]
 8091c90:	4b1e      	ldr	r3, [pc, #120]	; (8091d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8091c92:	681a      	ldr	r2, [r3, #0]
 8091c94:	07d0      	lsls	r0, r2, #31
 8091c96:	bf5c      	itt	pl
 8091c98:	2201      	movpl	r2, #1
 8091c9a:	601a      	strpl	r2, [r3, #0]
 8091c9c:	4b1c      	ldr	r3, [pc, #112]	; (8091d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8091c9e:	681a      	ldr	r2, [r3, #0]
 8091ca0:	07d1      	lsls	r1, r2, #31
 8091ca2:	bf5c      	itt	pl
 8091ca4:	2201      	movpl	r2, #1
 8091ca6:	601a      	strpl	r2, [r3, #0]
 8091ca8:	4b1a      	ldr	r3, [pc, #104]	; (8091d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8091caa:	681a      	ldr	r2, [r3, #0]
 8091cac:	07d2      	lsls	r2, r2, #31
 8091cae:	bf5c      	itt	pl
 8091cb0:	2201      	movpl	r2, #1
 8091cb2:	601a      	strpl	r2, [r3, #0]
 8091cb4:	4b18      	ldr	r3, [pc, #96]	; (8091d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8091cb6:	681a      	ldr	r2, [r3, #0]
 8091cb8:	07d0      	lsls	r0, r2, #31
 8091cba:	bf5c      	itt	pl
 8091cbc:	2201      	movpl	r2, #1
 8091cbe:	601a      	strpl	r2, [r3, #0]
 8091cc0:	4b16      	ldr	r3, [pc, #88]	; (8091d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8091cc2:	681a      	ldr	r2, [r3, #0]
 8091cc4:	07d1      	lsls	r1, r2, #31
 8091cc6:	bf5c      	itt	pl
 8091cc8:	2201      	movpl	r2, #1
 8091cca:	601a      	strpl	r2, [r3, #0]
 8091ccc:	4b14      	ldr	r3, [pc, #80]	; (8091d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8091cce:	681a      	ldr	r2, [r3, #0]
 8091cd0:	07d2      	lsls	r2, r2, #31
 8091cd2:	bf5c      	itt	pl
 8091cd4:	2201      	movpl	r2, #1
 8091cd6:	601a      	strpl	r2, [r3, #0]
 8091cd8:	4b12      	ldr	r3, [pc, #72]	; (8091d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8091cda:	681a      	ldr	r2, [r3, #0]
 8091cdc:	07d0      	lsls	r0, r2, #31
 8091cde:	bf5c      	itt	pl
 8091ce0:	2201      	movpl	r2, #1
 8091ce2:	601a      	strpl	r2, [r3, #0]
 8091ce4:	4b10      	ldr	r3, [pc, #64]	; (8091d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8091ce6:	681a      	ldr	r2, [r3, #0]
 8091ce8:	07d1      	lsls	r1, r2, #31
 8091cea:	bf5c      	itt	pl
 8091cec:	2201      	movpl	r2, #1
 8091cee:	601a      	strpl	r2, [r3, #0]
 8091cf0:	4b0e      	ldr	r3, [pc, #56]	; (8091d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8091cf2:	681a      	ldr	r2, [r3, #0]
 8091cf4:	07d2      	lsls	r2, r2, #31
 8091cf6:	bf5c      	itt	pl
 8091cf8:	2201      	movpl	r2, #1
 8091cfa:	601a      	strpl	r2, [r3, #0]
 8091cfc:	4770      	bx	lr
 8091cfe:	bf00      	nop
 8091d00:	20003eb8 	.word	0x20003eb8
 8091d04:	20003eb4 	.word	0x20003eb4
 8091d08:	20003eb0 	.word	0x20003eb0
 8091d0c:	20003eac 	.word	0x20003eac
 8091d10:	20003ea8 	.word	0x20003ea8
 8091d14:	20003ea4 	.word	0x20003ea4
 8091d18:	20003ea0 	.word	0x20003ea0
 8091d1c:	20003e9c 	.word	0x20003e9c
 8091d20:	20003e98 	.word	0x20003e98
 8091d24:	20003e94 	.word	0x20003e94
 8091d28:	20003e90 	.word	0x20003e90
 8091d2c:	20003e8c 	.word	0x20003e8c

08091d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8091d30:	4b24      	ldr	r3, [pc, #144]	; (8091dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8091d32:	681a      	ldr	r2, [r3, #0]
 8091d34:	07d0      	lsls	r0, r2, #31
 8091d36:	bf5c      	itt	pl
 8091d38:	2201      	movpl	r2, #1
 8091d3a:	601a      	strpl	r2, [r3, #0]
 8091d3c:	4b22      	ldr	r3, [pc, #136]	; (8091dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8091d3e:	681a      	ldr	r2, [r3, #0]
 8091d40:	07d1      	lsls	r1, r2, #31
 8091d42:	bf5c      	itt	pl
 8091d44:	2201      	movpl	r2, #1
 8091d46:	601a      	strpl	r2, [r3, #0]
 8091d48:	4b20      	ldr	r3, [pc, #128]	; (8091dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8091d4a:	681a      	ldr	r2, [r3, #0]
 8091d4c:	07d2      	lsls	r2, r2, #31
 8091d4e:	bf5c      	itt	pl
 8091d50:	2201      	movpl	r2, #1
 8091d52:	601a      	strpl	r2, [r3, #0]
 8091d54:	4b1e      	ldr	r3, [pc, #120]	; (8091dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8091d56:	681a      	ldr	r2, [r3, #0]
 8091d58:	07d0      	lsls	r0, r2, #31
 8091d5a:	bf5c      	itt	pl
 8091d5c:	2201      	movpl	r2, #1
 8091d5e:	601a      	strpl	r2, [r3, #0]
 8091d60:	4b1c      	ldr	r3, [pc, #112]	; (8091dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8091d62:	681a      	ldr	r2, [r3, #0]
 8091d64:	07d1      	lsls	r1, r2, #31
 8091d66:	bf5c      	itt	pl
 8091d68:	2201      	movpl	r2, #1
 8091d6a:	601a      	strpl	r2, [r3, #0]
 8091d6c:	4b1a      	ldr	r3, [pc, #104]	; (8091dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8091d6e:	681a      	ldr	r2, [r3, #0]
 8091d70:	07d2      	lsls	r2, r2, #31
 8091d72:	bf5c      	itt	pl
 8091d74:	2201      	movpl	r2, #1
 8091d76:	601a      	strpl	r2, [r3, #0]
 8091d78:	4b18      	ldr	r3, [pc, #96]	; (8091ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8091d7a:	681a      	ldr	r2, [r3, #0]
 8091d7c:	07d0      	lsls	r0, r2, #31
 8091d7e:	bf5c      	itt	pl
 8091d80:	2201      	movpl	r2, #1
 8091d82:	601a      	strpl	r2, [r3, #0]
 8091d84:	4b16      	ldr	r3, [pc, #88]	; (8091de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8091d86:	681a      	ldr	r2, [r3, #0]
 8091d88:	07d1      	lsls	r1, r2, #31
 8091d8a:	bf5c      	itt	pl
 8091d8c:	2201      	movpl	r2, #1
 8091d8e:	601a      	strpl	r2, [r3, #0]
 8091d90:	4b14      	ldr	r3, [pc, #80]	; (8091de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8091d92:	681a      	ldr	r2, [r3, #0]
 8091d94:	07d2      	lsls	r2, r2, #31
 8091d96:	bf5c      	itt	pl
 8091d98:	2201      	movpl	r2, #1
 8091d9a:	601a      	strpl	r2, [r3, #0]
 8091d9c:	4b12      	ldr	r3, [pc, #72]	; (8091de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8091d9e:	681a      	ldr	r2, [r3, #0]
 8091da0:	07d0      	lsls	r0, r2, #31
 8091da2:	bf5c      	itt	pl
 8091da4:	2201      	movpl	r2, #1
 8091da6:	601a      	strpl	r2, [r3, #0]
 8091da8:	4b10      	ldr	r3, [pc, #64]	; (8091dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8091daa:	681a      	ldr	r2, [r3, #0]
 8091dac:	07d1      	lsls	r1, r2, #31
 8091dae:	bf5c      	itt	pl
 8091db0:	2201      	movpl	r2, #1
 8091db2:	601a      	strpl	r2, [r3, #0]
 8091db4:	4b0e      	ldr	r3, [pc, #56]	; (8091df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8091db6:	681a      	ldr	r2, [r3, #0]
 8091db8:	07d2      	lsls	r2, r2, #31
 8091dba:	bf5c      	itt	pl
 8091dbc:	2201      	movpl	r2, #1
 8091dbe:	601a      	strpl	r2, [r3, #0]
 8091dc0:	4770      	bx	lr
 8091dc2:	bf00      	nop
 8091dc4:	20003ee8 	.word	0x20003ee8
 8091dc8:	20003ee4 	.word	0x20003ee4
 8091dcc:	20003ee0 	.word	0x20003ee0
 8091dd0:	20003edc 	.word	0x20003edc
 8091dd4:	20003ed8 	.word	0x20003ed8
 8091dd8:	20003ed4 	.word	0x20003ed4
 8091ddc:	20003ed0 	.word	0x20003ed0
 8091de0:	20003ecc 	.word	0x20003ecc
 8091de4:	20003ec8 	.word	0x20003ec8
 8091de8:	20003ec4 	.word	0x20003ec4
 8091dec:	20003ec0 	.word	0x20003ec0
 8091df0:	20003ebc 	.word	0x20003ebc

08091df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8091df4:	4b18      	ldr	r3, [pc, #96]	; (8091e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8091df6:	681a      	ldr	r2, [r3, #0]
 8091df8:	07d1      	lsls	r1, r2, #31
 8091dfa:	bf5c      	itt	pl
 8091dfc:	2201      	movpl	r2, #1
 8091dfe:	601a      	strpl	r2, [r3, #0]
 8091e00:	4b16      	ldr	r3, [pc, #88]	; (8091e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8091e02:	681a      	ldr	r2, [r3, #0]
 8091e04:	07d2      	lsls	r2, r2, #31
 8091e06:	bf5c      	itt	pl
 8091e08:	2201      	movpl	r2, #1
 8091e0a:	601a      	strpl	r2, [r3, #0]
 8091e0c:	4b14      	ldr	r3, [pc, #80]	; (8091e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8091e0e:	681a      	ldr	r2, [r3, #0]
 8091e10:	07d0      	lsls	r0, r2, #31
 8091e12:	bf5c      	itt	pl
 8091e14:	2201      	movpl	r2, #1
 8091e16:	601a      	strpl	r2, [r3, #0]
 8091e18:	4b12      	ldr	r3, [pc, #72]	; (8091e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8091e1a:	681a      	ldr	r2, [r3, #0]
 8091e1c:	07d1      	lsls	r1, r2, #31
 8091e1e:	bf5c      	itt	pl
 8091e20:	2201      	movpl	r2, #1
 8091e22:	601a      	strpl	r2, [r3, #0]
 8091e24:	4b10      	ldr	r3, [pc, #64]	; (8091e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8091e26:	681a      	ldr	r2, [r3, #0]
 8091e28:	07d2      	lsls	r2, r2, #31
 8091e2a:	bf5c      	itt	pl
 8091e2c:	2201      	movpl	r2, #1
 8091e2e:	601a      	strpl	r2, [r3, #0]
 8091e30:	4b0e      	ldr	r3, [pc, #56]	; (8091e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8091e32:	681a      	ldr	r2, [r3, #0]
 8091e34:	07d0      	lsls	r0, r2, #31
 8091e36:	bf5c      	itt	pl
 8091e38:	2201      	movpl	r2, #1
 8091e3a:	601a      	strpl	r2, [r3, #0]
 8091e3c:	4b0c      	ldr	r3, [pc, #48]	; (8091e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8091e3e:	681a      	ldr	r2, [r3, #0]
 8091e40:	07d1      	lsls	r1, r2, #31
 8091e42:	bf5c      	itt	pl
 8091e44:	2201      	movpl	r2, #1
 8091e46:	601a      	strpl	r2, [r3, #0]
 8091e48:	4b0a      	ldr	r3, [pc, #40]	; (8091e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8091e4a:	681a      	ldr	r2, [r3, #0]
 8091e4c:	07d2      	lsls	r2, r2, #31
 8091e4e:	bf5c      	itt	pl
 8091e50:	2201      	movpl	r2, #1
 8091e52:	601a      	strpl	r2, [r3, #0]
 8091e54:	4770      	bx	lr
 8091e56:	bf00      	nop
 8091e58:	20003f08 	.word	0x20003f08
 8091e5c:	20003f04 	.word	0x20003f04
 8091e60:	20003f00 	.word	0x20003f00
 8091e64:	20003efc 	.word	0x20003efc
 8091e68:	20003ef8 	.word	0x20003ef8
 8091e6c:	20003ef4 	.word	0x20003ef4
 8091e70:	20003ef0 	.word	0x20003ef0
 8091e74:	20003eec 	.word	0x20003eec

08091e78 <__aeabi_drsub>:
 8091e78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8091e7c:	e002      	b.n	8091e84 <__adddf3>
 8091e7e:	bf00      	nop

08091e80 <__aeabi_dsub>:
 8091e80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08091e84 <__adddf3>:
 8091e84:	b530      	push	{r4, r5, lr}
 8091e86:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8091e8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8091e8e:	ea94 0f05 	teq	r4, r5
 8091e92:	bf08      	it	eq
 8091e94:	ea90 0f02 	teqeq	r0, r2
 8091e98:	bf1f      	itttt	ne
 8091e9a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8091e9e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8091ea2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8091ea6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8091eaa:	f000 80e2 	beq.w	8092072 <__adddf3+0x1ee>
 8091eae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8091eb2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8091eb6:	bfb8      	it	lt
 8091eb8:	426d      	neglt	r5, r5
 8091eba:	dd0c      	ble.n	8091ed6 <__adddf3+0x52>
 8091ebc:	442c      	add	r4, r5
 8091ebe:	ea80 0202 	eor.w	r2, r0, r2
 8091ec2:	ea81 0303 	eor.w	r3, r1, r3
 8091ec6:	ea82 0000 	eor.w	r0, r2, r0
 8091eca:	ea83 0101 	eor.w	r1, r3, r1
 8091ece:	ea80 0202 	eor.w	r2, r0, r2
 8091ed2:	ea81 0303 	eor.w	r3, r1, r3
 8091ed6:	2d36      	cmp	r5, #54	; 0x36
 8091ed8:	bf88      	it	hi
 8091eda:	bd30      	pophi	{r4, r5, pc}
 8091edc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8091ee0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8091ee4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8091ee8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8091eec:	d002      	beq.n	8091ef4 <__adddf3+0x70>
 8091eee:	4240      	negs	r0, r0
 8091ef0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8091ef4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8091ef8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8091efc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8091f00:	d002      	beq.n	8091f08 <__adddf3+0x84>
 8091f02:	4252      	negs	r2, r2
 8091f04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8091f08:	ea94 0f05 	teq	r4, r5
 8091f0c:	f000 80a7 	beq.w	809205e <__adddf3+0x1da>
 8091f10:	f1a4 0401 	sub.w	r4, r4, #1
 8091f14:	f1d5 0e20 	rsbs	lr, r5, #32
 8091f18:	db0d      	blt.n	8091f36 <__adddf3+0xb2>
 8091f1a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8091f1e:	fa22 f205 	lsr.w	r2, r2, r5
 8091f22:	1880      	adds	r0, r0, r2
 8091f24:	f141 0100 	adc.w	r1, r1, #0
 8091f28:	fa03 f20e 	lsl.w	r2, r3, lr
 8091f2c:	1880      	adds	r0, r0, r2
 8091f2e:	fa43 f305 	asr.w	r3, r3, r5
 8091f32:	4159      	adcs	r1, r3
 8091f34:	e00e      	b.n	8091f54 <__adddf3+0xd0>
 8091f36:	f1a5 0520 	sub.w	r5, r5, #32
 8091f3a:	f10e 0e20 	add.w	lr, lr, #32
 8091f3e:	2a01      	cmp	r2, #1
 8091f40:	fa03 fc0e 	lsl.w	ip, r3, lr
 8091f44:	bf28      	it	cs
 8091f46:	f04c 0c02 	orrcs.w	ip, ip, #2
 8091f4a:	fa43 f305 	asr.w	r3, r3, r5
 8091f4e:	18c0      	adds	r0, r0, r3
 8091f50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8091f54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8091f58:	d507      	bpl.n	8091f6a <__adddf3+0xe6>
 8091f5a:	f04f 0e00 	mov.w	lr, #0
 8091f5e:	f1dc 0c00 	rsbs	ip, ip, #0
 8091f62:	eb7e 0000 	sbcs.w	r0, lr, r0
 8091f66:	eb6e 0101 	sbc.w	r1, lr, r1
 8091f6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8091f6e:	d31b      	bcc.n	8091fa8 <__adddf3+0x124>
 8091f70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8091f74:	d30c      	bcc.n	8091f90 <__adddf3+0x10c>
 8091f76:	0849      	lsrs	r1, r1, #1
 8091f78:	ea5f 0030 	movs.w	r0, r0, rrx
 8091f7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8091f80:	f104 0401 	add.w	r4, r4, #1
 8091f84:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8091f88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8091f8c:	f080 809a 	bcs.w	80920c4 <__adddf3+0x240>
 8091f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8091f94:	bf08      	it	eq
 8091f96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8091f9a:	f150 0000 	adcs.w	r0, r0, #0
 8091f9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8091fa2:	ea41 0105 	orr.w	r1, r1, r5
 8091fa6:	bd30      	pop	{r4, r5, pc}
 8091fa8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8091fac:	4140      	adcs	r0, r0
 8091fae:	eb41 0101 	adc.w	r1, r1, r1
 8091fb2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8091fb6:	f1a4 0401 	sub.w	r4, r4, #1
 8091fba:	d1e9      	bne.n	8091f90 <__adddf3+0x10c>
 8091fbc:	f091 0f00 	teq	r1, #0
 8091fc0:	bf04      	itt	eq
 8091fc2:	4601      	moveq	r1, r0
 8091fc4:	2000      	moveq	r0, #0
 8091fc6:	fab1 f381 	clz	r3, r1
 8091fca:	bf08      	it	eq
 8091fcc:	3320      	addeq	r3, #32
 8091fce:	f1a3 030b 	sub.w	r3, r3, #11
 8091fd2:	f1b3 0220 	subs.w	r2, r3, #32
 8091fd6:	da0c      	bge.n	8091ff2 <__adddf3+0x16e>
 8091fd8:	320c      	adds	r2, #12
 8091fda:	dd08      	ble.n	8091fee <__adddf3+0x16a>
 8091fdc:	f102 0c14 	add.w	ip, r2, #20
 8091fe0:	f1c2 020c 	rsb	r2, r2, #12
 8091fe4:	fa01 f00c 	lsl.w	r0, r1, ip
 8091fe8:	fa21 f102 	lsr.w	r1, r1, r2
 8091fec:	e00c      	b.n	8092008 <__adddf3+0x184>
 8091fee:	f102 0214 	add.w	r2, r2, #20
 8091ff2:	bfd8      	it	le
 8091ff4:	f1c2 0c20 	rsble	ip, r2, #32
 8091ff8:	fa01 f102 	lsl.w	r1, r1, r2
 8091ffc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8092000:	bfdc      	itt	le
 8092002:	ea41 010c 	orrle.w	r1, r1, ip
 8092006:	4090      	lslle	r0, r2
 8092008:	1ae4      	subs	r4, r4, r3
 809200a:	bfa2      	ittt	ge
 809200c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8092010:	4329      	orrge	r1, r5
 8092012:	bd30      	popge	{r4, r5, pc}
 8092014:	ea6f 0404 	mvn.w	r4, r4
 8092018:	3c1f      	subs	r4, #31
 809201a:	da1c      	bge.n	8092056 <__adddf3+0x1d2>
 809201c:	340c      	adds	r4, #12
 809201e:	dc0e      	bgt.n	809203e <__adddf3+0x1ba>
 8092020:	f104 0414 	add.w	r4, r4, #20
 8092024:	f1c4 0220 	rsb	r2, r4, #32
 8092028:	fa20 f004 	lsr.w	r0, r0, r4
 809202c:	fa01 f302 	lsl.w	r3, r1, r2
 8092030:	ea40 0003 	orr.w	r0, r0, r3
 8092034:	fa21 f304 	lsr.w	r3, r1, r4
 8092038:	ea45 0103 	orr.w	r1, r5, r3
 809203c:	bd30      	pop	{r4, r5, pc}
 809203e:	f1c4 040c 	rsb	r4, r4, #12
 8092042:	f1c4 0220 	rsb	r2, r4, #32
 8092046:	fa20 f002 	lsr.w	r0, r0, r2
 809204a:	fa01 f304 	lsl.w	r3, r1, r4
 809204e:	ea40 0003 	orr.w	r0, r0, r3
 8092052:	4629      	mov	r1, r5
 8092054:	bd30      	pop	{r4, r5, pc}
 8092056:	fa21 f004 	lsr.w	r0, r1, r4
 809205a:	4629      	mov	r1, r5
 809205c:	bd30      	pop	{r4, r5, pc}
 809205e:	f094 0f00 	teq	r4, #0
 8092062:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8092066:	bf06      	itte	eq
 8092068:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 809206c:	3401      	addeq	r4, #1
 809206e:	3d01      	subne	r5, #1
 8092070:	e74e      	b.n	8091f10 <__adddf3+0x8c>
 8092072:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8092076:	bf18      	it	ne
 8092078:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 809207c:	d029      	beq.n	80920d2 <__adddf3+0x24e>
 809207e:	ea94 0f05 	teq	r4, r5
 8092082:	bf08      	it	eq
 8092084:	ea90 0f02 	teqeq	r0, r2
 8092088:	d005      	beq.n	8092096 <__adddf3+0x212>
 809208a:	ea54 0c00 	orrs.w	ip, r4, r0
 809208e:	bf04      	itt	eq
 8092090:	4619      	moveq	r1, r3
 8092092:	4610      	moveq	r0, r2
 8092094:	bd30      	pop	{r4, r5, pc}
 8092096:	ea91 0f03 	teq	r1, r3
 809209a:	bf1e      	ittt	ne
 809209c:	2100      	movne	r1, #0
 809209e:	2000      	movne	r0, #0
 80920a0:	bd30      	popne	{r4, r5, pc}
 80920a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80920a6:	d105      	bne.n	80920b4 <__adddf3+0x230>
 80920a8:	0040      	lsls	r0, r0, #1
 80920aa:	4149      	adcs	r1, r1
 80920ac:	bf28      	it	cs
 80920ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80920b2:	bd30      	pop	{r4, r5, pc}
 80920b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80920b8:	bf3c      	itt	cc
 80920ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80920be:	bd30      	popcc	{r4, r5, pc}
 80920c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80920c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80920c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80920cc:	f04f 0000 	mov.w	r0, #0
 80920d0:	bd30      	pop	{r4, r5, pc}
 80920d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80920d6:	bf1a      	itte	ne
 80920d8:	4619      	movne	r1, r3
 80920da:	4610      	movne	r0, r2
 80920dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80920e0:	bf1c      	itt	ne
 80920e2:	460b      	movne	r3, r1
 80920e4:	4602      	movne	r2, r0
 80920e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80920ea:	bf06      	itte	eq
 80920ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80920f0:	ea91 0f03 	teqeq	r1, r3
 80920f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80920f8:	bd30      	pop	{r4, r5, pc}
 80920fa:	bf00      	nop

080920fc <__aeabi_ui2d>:
 80920fc:	f090 0f00 	teq	r0, #0
 8092100:	bf04      	itt	eq
 8092102:	2100      	moveq	r1, #0
 8092104:	4770      	bxeq	lr
 8092106:	b530      	push	{r4, r5, lr}
 8092108:	f44f 6480 	mov.w	r4, #1024	; 0x400
 809210c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8092110:	f04f 0500 	mov.w	r5, #0
 8092114:	f04f 0100 	mov.w	r1, #0
 8092118:	e750      	b.n	8091fbc <__adddf3+0x138>
 809211a:	bf00      	nop

0809211c <__aeabi_i2d>:
 809211c:	f090 0f00 	teq	r0, #0
 8092120:	bf04      	itt	eq
 8092122:	2100      	moveq	r1, #0
 8092124:	4770      	bxeq	lr
 8092126:	b530      	push	{r4, r5, lr}
 8092128:	f44f 6480 	mov.w	r4, #1024	; 0x400
 809212c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8092130:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8092134:	bf48      	it	mi
 8092136:	4240      	negmi	r0, r0
 8092138:	f04f 0100 	mov.w	r1, #0
 809213c:	e73e      	b.n	8091fbc <__adddf3+0x138>
 809213e:	bf00      	nop

08092140 <__aeabi_f2d>:
 8092140:	0042      	lsls	r2, r0, #1
 8092142:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8092146:	ea4f 0131 	mov.w	r1, r1, rrx
 809214a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 809214e:	bf1f      	itttt	ne
 8092150:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8092154:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8092158:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 809215c:	4770      	bxne	lr
 809215e:	f092 0f00 	teq	r2, #0
 8092162:	bf14      	ite	ne
 8092164:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8092168:	4770      	bxeq	lr
 809216a:	b530      	push	{r4, r5, lr}
 809216c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8092170:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8092174:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8092178:	e720      	b.n	8091fbc <__adddf3+0x138>
 809217a:	bf00      	nop

0809217c <__aeabi_ul2d>:
 809217c:	ea50 0201 	orrs.w	r2, r0, r1
 8092180:	bf08      	it	eq
 8092182:	4770      	bxeq	lr
 8092184:	b530      	push	{r4, r5, lr}
 8092186:	f04f 0500 	mov.w	r5, #0
 809218a:	e00a      	b.n	80921a2 <__aeabi_l2d+0x16>

0809218c <__aeabi_l2d>:
 809218c:	ea50 0201 	orrs.w	r2, r0, r1
 8092190:	bf08      	it	eq
 8092192:	4770      	bxeq	lr
 8092194:	b530      	push	{r4, r5, lr}
 8092196:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 809219a:	d502      	bpl.n	80921a2 <__aeabi_l2d+0x16>
 809219c:	4240      	negs	r0, r0
 809219e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80921a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80921a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80921aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80921ae:	f43f aedc 	beq.w	8091f6a <__adddf3+0xe6>
 80921b2:	f04f 0203 	mov.w	r2, #3
 80921b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80921ba:	bf18      	it	ne
 80921bc:	3203      	addne	r2, #3
 80921be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80921c2:	bf18      	it	ne
 80921c4:	3203      	addne	r2, #3
 80921c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80921ca:	f1c2 0320 	rsb	r3, r2, #32
 80921ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80921d2:	fa20 f002 	lsr.w	r0, r0, r2
 80921d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80921da:	ea40 000e 	orr.w	r0, r0, lr
 80921de:	fa21 f102 	lsr.w	r1, r1, r2
 80921e2:	4414      	add	r4, r2
 80921e4:	e6c1      	b.n	8091f6a <__adddf3+0xe6>
 80921e6:	bf00      	nop

080921e8 <__aeabi_dmul>:
 80921e8:	b570      	push	{r4, r5, r6, lr}
 80921ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80921ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80921f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80921f6:	bf1d      	ittte	ne
 80921f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80921fc:	ea94 0f0c 	teqne	r4, ip
 8092200:	ea95 0f0c 	teqne	r5, ip
 8092204:	f000 f8de 	bleq	80923c4 <__aeabi_dmul+0x1dc>
 8092208:	442c      	add	r4, r5
 809220a:	ea81 0603 	eor.w	r6, r1, r3
 809220e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8092212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8092216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 809221a:	bf18      	it	ne
 809221c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8092220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8092224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8092228:	d038      	beq.n	809229c <__aeabi_dmul+0xb4>
 809222a:	fba0 ce02 	umull	ip, lr, r0, r2
 809222e:	f04f 0500 	mov.w	r5, #0
 8092232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8092236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 809223a:	fbe0 e503 	umlal	lr, r5, r0, r3
 809223e:	f04f 0600 	mov.w	r6, #0
 8092242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8092246:	f09c 0f00 	teq	ip, #0
 809224a:	bf18      	it	ne
 809224c:	f04e 0e01 	orrne.w	lr, lr, #1
 8092250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8092254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8092258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 809225c:	d204      	bcs.n	8092268 <__aeabi_dmul+0x80>
 809225e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8092262:	416d      	adcs	r5, r5
 8092264:	eb46 0606 	adc.w	r6, r6, r6
 8092268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 809226c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8092270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8092274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8092278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 809227c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8092280:	bf88      	it	hi
 8092282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8092286:	d81e      	bhi.n	80922c6 <__aeabi_dmul+0xde>
 8092288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 809228c:	bf08      	it	eq
 809228e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8092292:	f150 0000 	adcs.w	r0, r0, #0
 8092296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 809229a:	bd70      	pop	{r4, r5, r6, pc}
 809229c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80922a0:	ea46 0101 	orr.w	r1, r6, r1
 80922a4:	ea40 0002 	orr.w	r0, r0, r2
 80922a8:	ea81 0103 	eor.w	r1, r1, r3
 80922ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80922b0:	bfc2      	ittt	gt
 80922b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80922b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80922ba:	bd70      	popgt	{r4, r5, r6, pc}
 80922bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80922c0:	f04f 0e00 	mov.w	lr, #0
 80922c4:	3c01      	subs	r4, #1
 80922c6:	f300 80ab 	bgt.w	8092420 <__aeabi_dmul+0x238>
 80922ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80922ce:	bfde      	ittt	le
 80922d0:	2000      	movle	r0, #0
 80922d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80922d6:	bd70      	pople	{r4, r5, r6, pc}
 80922d8:	f1c4 0400 	rsb	r4, r4, #0
 80922dc:	3c20      	subs	r4, #32
 80922de:	da35      	bge.n	809234c <__aeabi_dmul+0x164>
 80922e0:	340c      	adds	r4, #12
 80922e2:	dc1b      	bgt.n	809231c <__aeabi_dmul+0x134>
 80922e4:	f104 0414 	add.w	r4, r4, #20
 80922e8:	f1c4 0520 	rsb	r5, r4, #32
 80922ec:	fa00 f305 	lsl.w	r3, r0, r5
 80922f0:	fa20 f004 	lsr.w	r0, r0, r4
 80922f4:	fa01 f205 	lsl.w	r2, r1, r5
 80922f8:	ea40 0002 	orr.w	r0, r0, r2
 80922fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8092300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8092304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8092308:	fa21 f604 	lsr.w	r6, r1, r4
 809230c:	eb42 0106 	adc.w	r1, r2, r6
 8092310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8092314:	bf08      	it	eq
 8092316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 809231a:	bd70      	pop	{r4, r5, r6, pc}
 809231c:	f1c4 040c 	rsb	r4, r4, #12
 8092320:	f1c4 0520 	rsb	r5, r4, #32
 8092324:	fa00 f304 	lsl.w	r3, r0, r4
 8092328:	fa20 f005 	lsr.w	r0, r0, r5
 809232c:	fa01 f204 	lsl.w	r2, r1, r4
 8092330:	ea40 0002 	orr.w	r0, r0, r2
 8092334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8092338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 809233c:	f141 0100 	adc.w	r1, r1, #0
 8092340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8092344:	bf08      	it	eq
 8092346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 809234a:	bd70      	pop	{r4, r5, r6, pc}
 809234c:	f1c4 0520 	rsb	r5, r4, #32
 8092350:	fa00 f205 	lsl.w	r2, r0, r5
 8092354:	ea4e 0e02 	orr.w	lr, lr, r2
 8092358:	fa20 f304 	lsr.w	r3, r0, r4
 809235c:	fa01 f205 	lsl.w	r2, r1, r5
 8092360:	ea43 0302 	orr.w	r3, r3, r2
 8092364:	fa21 f004 	lsr.w	r0, r1, r4
 8092368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 809236c:	fa21 f204 	lsr.w	r2, r1, r4
 8092370:	ea20 0002 	bic.w	r0, r0, r2
 8092374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8092378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 809237c:	bf08      	it	eq
 809237e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8092382:	bd70      	pop	{r4, r5, r6, pc}
 8092384:	f094 0f00 	teq	r4, #0
 8092388:	d10f      	bne.n	80923aa <__aeabi_dmul+0x1c2>
 809238a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 809238e:	0040      	lsls	r0, r0, #1
 8092390:	eb41 0101 	adc.w	r1, r1, r1
 8092394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8092398:	bf08      	it	eq
 809239a:	3c01      	subeq	r4, #1
 809239c:	d0f7      	beq.n	809238e <__aeabi_dmul+0x1a6>
 809239e:	ea41 0106 	orr.w	r1, r1, r6
 80923a2:	f095 0f00 	teq	r5, #0
 80923a6:	bf18      	it	ne
 80923a8:	4770      	bxne	lr
 80923aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80923ae:	0052      	lsls	r2, r2, #1
 80923b0:	eb43 0303 	adc.w	r3, r3, r3
 80923b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80923b8:	bf08      	it	eq
 80923ba:	3d01      	subeq	r5, #1
 80923bc:	d0f7      	beq.n	80923ae <__aeabi_dmul+0x1c6>
 80923be:	ea43 0306 	orr.w	r3, r3, r6
 80923c2:	4770      	bx	lr
 80923c4:	ea94 0f0c 	teq	r4, ip
 80923c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80923cc:	bf18      	it	ne
 80923ce:	ea95 0f0c 	teqne	r5, ip
 80923d2:	d00c      	beq.n	80923ee <__aeabi_dmul+0x206>
 80923d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80923d8:	bf18      	it	ne
 80923da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80923de:	d1d1      	bne.n	8092384 <__aeabi_dmul+0x19c>
 80923e0:	ea81 0103 	eor.w	r1, r1, r3
 80923e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80923e8:	f04f 0000 	mov.w	r0, #0
 80923ec:	bd70      	pop	{r4, r5, r6, pc}
 80923ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80923f2:	bf06      	itte	eq
 80923f4:	4610      	moveq	r0, r2
 80923f6:	4619      	moveq	r1, r3
 80923f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80923fc:	d019      	beq.n	8092432 <__aeabi_dmul+0x24a>
 80923fe:	ea94 0f0c 	teq	r4, ip
 8092402:	d102      	bne.n	809240a <__aeabi_dmul+0x222>
 8092404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8092408:	d113      	bne.n	8092432 <__aeabi_dmul+0x24a>
 809240a:	ea95 0f0c 	teq	r5, ip
 809240e:	d105      	bne.n	809241c <__aeabi_dmul+0x234>
 8092410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8092414:	bf1c      	itt	ne
 8092416:	4610      	movne	r0, r2
 8092418:	4619      	movne	r1, r3
 809241a:	d10a      	bne.n	8092432 <__aeabi_dmul+0x24a>
 809241c:	ea81 0103 	eor.w	r1, r1, r3
 8092420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8092424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8092428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 809242c:	f04f 0000 	mov.w	r0, #0
 8092430:	bd70      	pop	{r4, r5, r6, pc}
 8092432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8092436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 809243a:	bd70      	pop	{r4, r5, r6, pc}

0809243c <__aeabi_ddiv>:
 809243c:	b570      	push	{r4, r5, r6, lr}
 809243e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8092442:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8092446:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 809244a:	bf1d      	ittte	ne
 809244c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8092450:	ea94 0f0c 	teqne	r4, ip
 8092454:	ea95 0f0c 	teqne	r5, ip
 8092458:	f000 f8a7 	bleq	80925aa <__aeabi_ddiv+0x16e>
 809245c:	eba4 0405 	sub.w	r4, r4, r5
 8092460:	ea81 0e03 	eor.w	lr, r1, r3
 8092464:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8092468:	ea4f 3101 	mov.w	r1, r1, lsl #12
 809246c:	f000 8088 	beq.w	8092580 <__aeabi_ddiv+0x144>
 8092470:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8092474:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8092478:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 809247c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8092480:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8092484:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8092488:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 809248c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8092490:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8092494:	429d      	cmp	r5, r3
 8092496:	bf08      	it	eq
 8092498:	4296      	cmpeq	r6, r2
 809249a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 809249e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80924a2:	d202      	bcs.n	80924aa <__aeabi_ddiv+0x6e>
 80924a4:	085b      	lsrs	r3, r3, #1
 80924a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80924aa:	1ab6      	subs	r6, r6, r2
 80924ac:	eb65 0503 	sbc.w	r5, r5, r3
 80924b0:	085b      	lsrs	r3, r3, #1
 80924b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80924b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80924ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80924be:	ebb6 0e02 	subs.w	lr, r6, r2
 80924c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80924c6:	bf22      	ittt	cs
 80924c8:	1ab6      	subcs	r6, r6, r2
 80924ca:	4675      	movcs	r5, lr
 80924cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80924d0:	085b      	lsrs	r3, r3, #1
 80924d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80924d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80924da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80924de:	bf22      	ittt	cs
 80924e0:	1ab6      	subcs	r6, r6, r2
 80924e2:	4675      	movcs	r5, lr
 80924e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80924e8:	085b      	lsrs	r3, r3, #1
 80924ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80924ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80924f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80924f6:	bf22      	ittt	cs
 80924f8:	1ab6      	subcs	r6, r6, r2
 80924fa:	4675      	movcs	r5, lr
 80924fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8092500:	085b      	lsrs	r3, r3, #1
 8092502:	ea4f 0232 	mov.w	r2, r2, rrx
 8092506:	ebb6 0e02 	subs.w	lr, r6, r2
 809250a:	eb75 0e03 	sbcs.w	lr, r5, r3
 809250e:	bf22      	ittt	cs
 8092510:	1ab6      	subcs	r6, r6, r2
 8092512:	4675      	movcs	r5, lr
 8092514:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8092518:	ea55 0e06 	orrs.w	lr, r5, r6
 809251c:	d018      	beq.n	8092550 <__aeabi_ddiv+0x114>
 809251e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8092522:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8092526:	ea4f 1606 	mov.w	r6, r6, lsl #4
 809252a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 809252e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8092532:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8092536:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 809253a:	d1c0      	bne.n	80924be <__aeabi_ddiv+0x82>
 809253c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8092540:	d10b      	bne.n	809255a <__aeabi_ddiv+0x11e>
 8092542:	ea41 0100 	orr.w	r1, r1, r0
 8092546:	f04f 0000 	mov.w	r0, #0
 809254a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 809254e:	e7b6      	b.n	80924be <__aeabi_ddiv+0x82>
 8092550:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8092554:	bf04      	itt	eq
 8092556:	4301      	orreq	r1, r0
 8092558:	2000      	moveq	r0, #0
 809255a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 809255e:	bf88      	it	hi
 8092560:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8092564:	f63f aeaf 	bhi.w	80922c6 <__aeabi_dmul+0xde>
 8092568:	ebb5 0c03 	subs.w	ip, r5, r3
 809256c:	bf04      	itt	eq
 809256e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8092572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8092576:	f150 0000 	adcs.w	r0, r0, #0
 809257a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 809257e:	bd70      	pop	{r4, r5, r6, pc}
 8092580:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8092584:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8092588:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 809258c:	bfc2      	ittt	gt
 809258e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8092592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8092596:	bd70      	popgt	{r4, r5, r6, pc}
 8092598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 809259c:	f04f 0e00 	mov.w	lr, #0
 80925a0:	3c01      	subs	r4, #1
 80925a2:	e690      	b.n	80922c6 <__aeabi_dmul+0xde>
 80925a4:	ea45 0e06 	orr.w	lr, r5, r6
 80925a8:	e68d      	b.n	80922c6 <__aeabi_dmul+0xde>
 80925aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80925ae:	ea94 0f0c 	teq	r4, ip
 80925b2:	bf08      	it	eq
 80925b4:	ea95 0f0c 	teqeq	r5, ip
 80925b8:	f43f af3b 	beq.w	8092432 <__aeabi_dmul+0x24a>
 80925bc:	ea94 0f0c 	teq	r4, ip
 80925c0:	d10a      	bne.n	80925d8 <__aeabi_ddiv+0x19c>
 80925c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80925c6:	f47f af34 	bne.w	8092432 <__aeabi_dmul+0x24a>
 80925ca:	ea95 0f0c 	teq	r5, ip
 80925ce:	f47f af25 	bne.w	809241c <__aeabi_dmul+0x234>
 80925d2:	4610      	mov	r0, r2
 80925d4:	4619      	mov	r1, r3
 80925d6:	e72c      	b.n	8092432 <__aeabi_dmul+0x24a>
 80925d8:	ea95 0f0c 	teq	r5, ip
 80925dc:	d106      	bne.n	80925ec <__aeabi_ddiv+0x1b0>
 80925de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80925e2:	f43f aefd 	beq.w	80923e0 <__aeabi_dmul+0x1f8>
 80925e6:	4610      	mov	r0, r2
 80925e8:	4619      	mov	r1, r3
 80925ea:	e722      	b.n	8092432 <__aeabi_dmul+0x24a>
 80925ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80925f0:	bf18      	it	ne
 80925f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80925f6:	f47f aec5 	bne.w	8092384 <__aeabi_dmul+0x19c>
 80925fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80925fe:	f47f af0d 	bne.w	809241c <__aeabi_dmul+0x234>
 8092602:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8092606:	f47f aeeb 	bne.w	80923e0 <__aeabi_dmul+0x1f8>
 809260a:	e712      	b.n	8092432 <__aeabi_dmul+0x24a>

0809260c <__gedf2>:
 809260c:	f04f 3cff 	mov.w	ip, #4294967295
 8092610:	e006      	b.n	8092620 <__cmpdf2+0x4>
 8092612:	bf00      	nop

08092614 <__ledf2>:
 8092614:	f04f 0c01 	mov.w	ip, #1
 8092618:	e002      	b.n	8092620 <__cmpdf2+0x4>
 809261a:	bf00      	nop

0809261c <__cmpdf2>:
 809261c:	f04f 0c01 	mov.w	ip, #1
 8092620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8092624:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8092628:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 809262c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8092630:	bf18      	it	ne
 8092632:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8092636:	d01b      	beq.n	8092670 <__cmpdf2+0x54>
 8092638:	b001      	add	sp, #4
 809263a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 809263e:	bf0c      	ite	eq
 8092640:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8092644:	ea91 0f03 	teqne	r1, r3
 8092648:	bf02      	ittt	eq
 809264a:	ea90 0f02 	teqeq	r0, r2
 809264e:	2000      	moveq	r0, #0
 8092650:	4770      	bxeq	lr
 8092652:	f110 0f00 	cmn.w	r0, #0
 8092656:	ea91 0f03 	teq	r1, r3
 809265a:	bf58      	it	pl
 809265c:	4299      	cmppl	r1, r3
 809265e:	bf08      	it	eq
 8092660:	4290      	cmpeq	r0, r2
 8092662:	bf2c      	ite	cs
 8092664:	17d8      	asrcs	r0, r3, #31
 8092666:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 809266a:	f040 0001 	orr.w	r0, r0, #1
 809266e:	4770      	bx	lr
 8092670:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8092674:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8092678:	d102      	bne.n	8092680 <__cmpdf2+0x64>
 809267a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 809267e:	d107      	bne.n	8092690 <__cmpdf2+0x74>
 8092680:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8092684:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8092688:	d1d6      	bne.n	8092638 <__cmpdf2+0x1c>
 809268a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 809268e:	d0d3      	beq.n	8092638 <__cmpdf2+0x1c>
 8092690:	f85d 0b04 	ldr.w	r0, [sp], #4
 8092694:	4770      	bx	lr
 8092696:	bf00      	nop

08092698 <__aeabi_cdrcmple>:
 8092698:	4684      	mov	ip, r0
 809269a:	4610      	mov	r0, r2
 809269c:	4662      	mov	r2, ip
 809269e:	468c      	mov	ip, r1
 80926a0:	4619      	mov	r1, r3
 80926a2:	4663      	mov	r3, ip
 80926a4:	e000      	b.n	80926a8 <__aeabi_cdcmpeq>
 80926a6:	bf00      	nop

080926a8 <__aeabi_cdcmpeq>:
 80926a8:	b501      	push	{r0, lr}
 80926aa:	f7ff ffb7 	bl	809261c <__cmpdf2>
 80926ae:	2800      	cmp	r0, #0
 80926b0:	bf48      	it	mi
 80926b2:	f110 0f00 	cmnmi.w	r0, #0
 80926b6:	bd01      	pop	{r0, pc}

080926b8 <__aeabi_dcmpeq>:
 80926b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80926bc:	f7ff fff4 	bl	80926a8 <__aeabi_cdcmpeq>
 80926c0:	bf0c      	ite	eq
 80926c2:	2001      	moveq	r0, #1
 80926c4:	2000      	movne	r0, #0
 80926c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80926ca:	bf00      	nop

080926cc <__aeabi_dcmplt>:
 80926cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80926d0:	f7ff ffea 	bl	80926a8 <__aeabi_cdcmpeq>
 80926d4:	bf34      	ite	cc
 80926d6:	2001      	movcc	r0, #1
 80926d8:	2000      	movcs	r0, #0
 80926da:	f85d fb08 	ldr.w	pc, [sp], #8
 80926de:	bf00      	nop

080926e0 <__aeabi_dcmple>:
 80926e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80926e4:	f7ff ffe0 	bl	80926a8 <__aeabi_cdcmpeq>
 80926e8:	bf94      	ite	ls
 80926ea:	2001      	movls	r0, #1
 80926ec:	2000      	movhi	r0, #0
 80926ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80926f2:	bf00      	nop

080926f4 <__aeabi_dcmpge>:
 80926f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80926f8:	f7ff ffce 	bl	8092698 <__aeabi_cdrcmple>
 80926fc:	bf94      	ite	ls
 80926fe:	2001      	movls	r0, #1
 8092700:	2000      	movhi	r0, #0
 8092702:	f85d fb08 	ldr.w	pc, [sp], #8
 8092706:	bf00      	nop

08092708 <__aeabi_dcmpgt>:
 8092708:	f84d ed08 	str.w	lr, [sp, #-8]!
 809270c:	f7ff ffc4 	bl	8092698 <__aeabi_cdrcmple>
 8092710:	bf34      	ite	cc
 8092712:	2001      	movcc	r0, #1
 8092714:	2000      	movcs	r0, #0
 8092716:	f85d fb08 	ldr.w	pc, [sp], #8
 809271a:	bf00      	nop

0809271c <__aeabi_dcmpun>:
 809271c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8092720:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8092724:	d102      	bne.n	809272c <__aeabi_dcmpun+0x10>
 8092726:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 809272a:	d10a      	bne.n	8092742 <__aeabi_dcmpun+0x26>
 809272c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8092730:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8092734:	d102      	bne.n	809273c <__aeabi_dcmpun+0x20>
 8092736:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 809273a:	d102      	bne.n	8092742 <__aeabi_dcmpun+0x26>
 809273c:	f04f 0000 	mov.w	r0, #0
 8092740:	4770      	bx	lr
 8092742:	f04f 0001 	mov.w	r0, #1
 8092746:	4770      	bx	lr

08092748 <__aeabi_d2iz>:
 8092748:	ea4f 0241 	mov.w	r2, r1, lsl #1
 809274c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8092750:	d215      	bcs.n	809277e <__aeabi_d2iz+0x36>
 8092752:	d511      	bpl.n	8092778 <__aeabi_d2iz+0x30>
 8092754:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8092758:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 809275c:	d912      	bls.n	8092784 <__aeabi_d2iz+0x3c>
 809275e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8092762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8092766:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 809276a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 809276e:	fa23 f002 	lsr.w	r0, r3, r2
 8092772:	bf18      	it	ne
 8092774:	4240      	negne	r0, r0
 8092776:	4770      	bx	lr
 8092778:	f04f 0000 	mov.w	r0, #0
 809277c:	4770      	bx	lr
 809277e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8092782:	d105      	bne.n	8092790 <__aeabi_d2iz+0x48>
 8092784:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8092788:	bf08      	it	eq
 809278a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 809278e:	4770      	bx	lr
 8092790:	f04f 0000 	mov.w	r0, #0
 8092794:	4770      	bx	lr
 8092796:	bf00      	nop

08092798 <__aeabi_d2uiz>:
 8092798:	004a      	lsls	r2, r1, #1
 809279a:	d211      	bcs.n	80927c0 <__aeabi_d2uiz+0x28>
 809279c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80927a0:	d211      	bcs.n	80927c6 <__aeabi_d2uiz+0x2e>
 80927a2:	d50d      	bpl.n	80927c0 <__aeabi_d2uiz+0x28>
 80927a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80927a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80927ac:	d40e      	bmi.n	80927cc <__aeabi_d2uiz+0x34>
 80927ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80927b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80927b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80927ba:	fa23 f002 	lsr.w	r0, r3, r2
 80927be:	4770      	bx	lr
 80927c0:	f04f 0000 	mov.w	r0, #0
 80927c4:	4770      	bx	lr
 80927c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80927ca:	d102      	bne.n	80927d2 <__aeabi_d2uiz+0x3a>
 80927cc:	f04f 30ff 	mov.w	r0, #4294967295
 80927d0:	4770      	bx	lr
 80927d2:	f04f 0000 	mov.w	r0, #0
 80927d6:	4770      	bx	lr

080927d8 <__aeabi_d2f>:
 80927d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80927dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80927e0:	bf24      	itt	cs
 80927e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80927e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80927ea:	d90d      	bls.n	8092808 <__aeabi_d2f+0x30>
 80927ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80927f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80927f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80927f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80927fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8092800:	bf08      	it	eq
 8092802:	f020 0001 	biceq.w	r0, r0, #1
 8092806:	4770      	bx	lr
 8092808:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 809280c:	d121      	bne.n	8092852 <__aeabi_d2f+0x7a>
 809280e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8092812:	bfbc      	itt	lt
 8092814:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8092818:	4770      	bxlt	lr
 809281a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 809281e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8092822:	f1c2 0218 	rsb	r2, r2, #24
 8092826:	f1c2 0c20 	rsb	ip, r2, #32
 809282a:	fa10 f30c 	lsls.w	r3, r0, ip
 809282e:	fa20 f002 	lsr.w	r0, r0, r2
 8092832:	bf18      	it	ne
 8092834:	f040 0001 	orrne.w	r0, r0, #1
 8092838:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 809283c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8092840:	fa03 fc0c 	lsl.w	ip, r3, ip
 8092844:	ea40 000c 	orr.w	r0, r0, ip
 8092848:	fa23 f302 	lsr.w	r3, r3, r2
 809284c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8092850:	e7cc      	b.n	80927ec <__aeabi_d2f+0x14>
 8092852:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8092856:	d107      	bne.n	8092868 <__aeabi_d2f+0x90>
 8092858:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 809285c:	bf1e      	ittt	ne
 809285e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8092862:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8092866:	4770      	bxne	lr
 8092868:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 809286c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8092870:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8092874:	4770      	bx	lr
 8092876:	bf00      	nop

08092878 <__aeabi_frsub>:
 8092878:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 809287c:	e002      	b.n	8092884 <__addsf3>
 809287e:	bf00      	nop

08092880 <__aeabi_fsub>:
 8092880:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08092884 <__addsf3>:
 8092884:	0042      	lsls	r2, r0, #1
 8092886:	bf1f      	itttt	ne
 8092888:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 809288c:	ea92 0f03 	teqne	r2, r3
 8092890:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8092894:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8092898:	d06a      	beq.n	8092970 <__addsf3+0xec>
 809289a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 809289e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80928a2:	bfc1      	itttt	gt
 80928a4:	18d2      	addgt	r2, r2, r3
 80928a6:	4041      	eorgt	r1, r0
 80928a8:	4048      	eorgt	r0, r1
 80928aa:	4041      	eorgt	r1, r0
 80928ac:	bfb8      	it	lt
 80928ae:	425b      	neglt	r3, r3
 80928b0:	2b19      	cmp	r3, #25
 80928b2:	bf88      	it	hi
 80928b4:	4770      	bxhi	lr
 80928b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80928ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80928be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80928c2:	bf18      	it	ne
 80928c4:	4240      	negne	r0, r0
 80928c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80928ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80928ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80928d2:	bf18      	it	ne
 80928d4:	4249      	negne	r1, r1
 80928d6:	ea92 0f03 	teq	r2, r3
 80928da:	d03f      	beq.n	809295c <__addsf3+0xd8>
 80928dc:	f1a2 0201 	sub.w	r2, r2, #1
 80928e0:	fa41 fc03 	asr.w	ip, r1, r3
 80928e4:	eb10 000c 	adds.w	r0, r0, ip
 80928e8:	f1c3 0320 	rsb	r3, r3, #32
 80928ec:	fa01 f103 	lsl.w	r1, r1, r3
 80928f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80928f4:	d502      	bpl.n	80928fc <__addsf3+0x78>
 80928f6:	4249      	negs	r1, r1
 80928f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80928fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8092900:	d313      	bcc.n	809292a <__addsf3+0xa6>
 8092902:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8092906:	d306      	bcc.n	8092916 <__addsf3+0x92>
 8092908:	0840      	lsrs	r0, r0, #1
 809290a:	ea4f 0131 	mov.w	r1, r1, rrx
 809290e:	f102 0201 	add.w	r2, r2, #1
 8092912:	2afe      	cmp	r2, #254	; 0xfe
 8092914:	d251      	bcs.n	80929ba <__addsf3+0x136>
 8092916:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 809291a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 809291e:	bf08      	it	eq
 8092920:	f020 0001 	biceq.w	r0, r0, #1
 8092924:	ea40 0003 	orr.w	r0, r0, r3
 8092928:	4770      	bx	lr
 809292a:	0049      	lsls	r1, r1, #1
 809292c:	eb40 0000 	adc.w	r0, r0, r0
 8092930:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8092934:	f1a2 0201 	sub.w	r2, r2, #1
 8092938:	d1ed      	bne.n	8092916 <__addsf3+0x92>
 809293a:	fab0 fc80 	clz	ip, r0
 809293e:	f1ac 0c08 	sub.w	ip, ip, #8
 8092942:	ebb2 020c 	subs.w	r2, r2, ip
 8092946:	fa00 f00c 	lsl.w	r0, r0, ip
 809294a:	bfaa      	itet	ge
 809294c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8092950:	4252      	neglt	r2, r2
 8092952:	4318      	orrge	r0, r3
 8092954:	bfbc      	itt	lt
 8092956:	40d0      	lsrlt	r0, r2
 8092958:	4318      	orrlt	r0, r3
 809295a:	4770      	bx	lr
 809295c:	f092 0f00 	teq	r2, #0
 8092960:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8092964:	bf06      	itte	eq
 8092966:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 809296a:	3201      	addeq	r2, #1
 809296c:	3b01      	subne	r3, #1
 809296e:	e7b5      	b.n	80928dc <__addsf3+0x58>
 8092970:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8092974:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8092978:	bf18      	it	ne
 809297a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 809297e:	d021      	beq.n	80929c4 <__addsf3+0x140>
 8092980:	ea92 0f03 	teq	r2, r3
 8092984:	d004      	beq.n	8092990 <__addsf3+0x10c>
 8092986:	f092 0f00 	teq	r2, #0
 809298a:	bf08      	it	eq
 809298c:	4608      	moveq	r0, r1
 809298e:	4770      	bx	lr
 8092990:	ea90 0f01 	teq	r0, r1
 8092994:	bf1c      	itt	ne
 8092996:	2000      	movne	r0, #0
 8092998:	4770      	bxne	lr
 809299a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 809299e:	d104      	bne.n	80929aa <__addsf3+0x126>
 80929a0:	0040      	lsls	r0, r0, #1
 80929a2:	bf28      	it	cs
 80929a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80929a8:	4770      	bx	lr
 80929aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80929ae:	bf3c      	itt	cc
 80929b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80929b4:	4770      	bxcc	lr
 80929b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80929ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80929be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80929c2:	4770      	bx	lr
 80929c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80929c8:	bf16      	itet	ne
 80929ca:	4608      	movne	r0, r1
 80929cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80929d0:	4601      	movne	r1, r0
 80929d2:	0242      	lsls	r2, r0, #9
 80929d4:	bf06      	itte	eq
 80929d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80929da:	ea90 0f01 	teqeq	r0, r1
 80929de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80929e2:	4770      	bx	lr

080929e4 <__aeabi_ui2f>:
 80929e4:	f04f 0300 	mov.w	r3, #0
 80929e8:	e004      	b.n	80929f4 <__aeabi_i2f+0x8>
 80929ea:	bf00      	nop

080929ec <__aeabi_i2f>:
 80929ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80929f0:	bf48      	it	mi
 80929f2:	4240      	negmi	r0, r0
 80929f4:	ea5f 0c00 	movs.w	ip, r0
 80929f8:	bf08      	it	eq
 80929fa:	4770      	bxeq	lr
 80929fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8092a00:	4601      	mov	r1, r0
 8092a02:	f04f 0000 	mov.w	r0, #0
 8092a06:	e01c      	b.n	8092a42 <__aeabi_l2f+0x2a>

08092a08 <__aeabi_ul2f>:
 8092a08:	ea50 0201 	orrs.w	r2, r0, r1
 8092a0c:	bf08      	it	eq
 8092a0e:	4770      	bxeq	lr
 8092a10:	f04f 0300 	mov.w	r3, #0
 8092a14:	e00a      	b.n	8092a2c <__aeabi_l2f+0x14>
 8092a16:	bf00      	nop

08092a18 <__aeabi_l2f>:
 8092a18:	ea50 0201 	orrs.w	r2, r0, r1
 8092a1c:	bf08      	it	eq
 8092a1e:	4770      	bxeq	lr
 8092a20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8092a24:	d502      	bpl.n	8092a2c <__aeabi_l2f+0x14>
 8092a26:	4240      	negs	r0, r0
 8092a28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8092a2c:	ea5f 0c01 	movs.w	ip, r1
 8092a30:	bf02      	ittt	eq
 8092a32:	4684      	moveq	ip, r0
 8092a34:	4601      	moveq	r1, r0
 8092a36:	2000      	moveq	r0, #0
 8092a38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8092a3c:	bf08      	it	eq
 8092a3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8092a42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8092a46:	fabc f28c 	clz	r2, ip
 8092a4a:	3a08      	subs	r2, #8
 8092a4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8092a50:	db10      	blt.n	8092a74 <__aeabi_l2f+0x5c>
 8092a52:	fa01 fc02 	lsl.w	ip, r1, r2
 8092a56:	4463      	add	r3, ip
 8092a58:	fa00 fc02 	lsl.w	ip, r0, r2
 8092a5c:	f1c2 0220 	rsb	r2, r2, #32
 8092a60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8092a64:	fa20 f202 	lsr.w	r2, r0, r2
 8092a68:	eb43 0002 	adc.w	r0, r3, r2
 8092a6c:	bf08      	it	eq
 8092a6e:	f020 0001 	biceq.w	r0, r0, #1
 8092a72:	4770      	bx	lr
 8092a74:	f102 0220 	add.w	r2, r2, #32
 8092a78:	fa01 fc02 	lsl.w	ip, r1, r2
 8092a7c:	f1c2 0220 	rsb	r2, r2, #32
 8092a80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8092a84:	fa21 f202 	lsr.w	r2, r1, r2
 8092a88:	eb43 0002 	adc.w	r0, r3, r2
 8092a8c:	bf08      	it	eq
 8092a8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8092a92:	4770      	bx	lr

08092a94 <__aeabi_fmul>:
 8092a94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8092a98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8092a9c:	bf1e      	ittt	ne
 8092a9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8092aa2:	ea92 0f0c 	teqne	r2, ip
 8092aa6:	ea93 0f0c 	teqne	r3, ip
 8092aaa:	d06f      	beq.n	8092b8c <__aeabi_fmul+0xf8>
 8092aac:	441a      	add	r2, r3
 8092aae:	ea80 0c01 	eor.w	ip, r0, r1
 8092ab2:	0240      	lsls	r0, r0, #9
 8092ab4:	bf18      	it	ne
 8092ab6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8092aba:	d01e      	beq.n	8092afa <__aeabi_fmul+0x66>
 8092abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8092ac0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8092ac4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8092ac8:	fba0 3101 	umull	r3, r1, r0, r1
 8092acc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8092ad0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8092ad4:	bf3e      	ittt	cc
 8092ad6:	0049      	lslcc	r1, r1, #1
 8092ad8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8092adc:	005b      	lslcc	r3, r3, #1
 8092ade:	ea40 0001 	orr.w	r0, r0, r1
 8092ae2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8092ae6:	2afd      	cmp	r2, #253	; 0xfd
 8092ae8:	d81d      	bhi.n	8092b26 <__aeabi_fmul+0x92>
 8092aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8092aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8092af2:	bf08      	it	eq
 8092af4:	f020 0001 	biceq.w	r0, r0, #1
 8092af8:	4770      	bx	lr
 8092afa:	f090 0f00 	teq	r0, #0
 8092afe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8092b02:	bf08      	it	eq
 8092b04:	0249      	lsleq	r1, r1, #9
 8092b06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8092b0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8092b0e:	3a7f      	subs	r2, #127	; 0x7f
 8092b10:	bfc2      	ittt	gt
 8092b12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8092b16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8092b1a:	4770      	bxgt	lr
 8092b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8092b20:	f04f 0300 	mov.w	r3, #0
 8092b24:	3a01      	subs	r2, #1
 8092b26:	dc5d      	bgt.n	8092be4 <__aeabi_fmul+0x150>
 8092b28:	f112 0f19 	cmn.w	r2, #25
 8092b2c:	bfdc      	itt	le
 8092b2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8092b32:	4770      	bxle	lr
 8092b34:	f1c2 0200 	rsb	r2, r2, #0
 8092b38:	0041      	lsls	r1, r0, #1
 8092b3a:	fa21 f102 	lsr.w	r1, r1, r2
 8092b3e:	f1c2 0220 	rsb	r2, r2, #32
 8092b42:	fa00 fc02 	lsl.w	ip, r0, r2
 8092b46:	ea5f 0031 	movs.w	r0, r1, rrx
 8092b4a:	f140 0000 	adc.w	r0, r0, #0
 8092b4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8092b52:	bf08      	it	eq
 8092b54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8092b58:	4770      	bx	lr
 8092b5a:	f092 0f00 	teq	r2, #0
 8092b5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8092b62:	bf02      	ittt	eq
 8092b64:	0040      	lsleq	r0, r0, #1
 8092b66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8092b6a:	3a01      	subeq	r2, #1
 8092b6c:	d0f9      	beq.n	8092b62 <__aeabi_fmul+0xce>
 8092b6e:	ea40 000c 	orr.w	r0, r0, ip
 8092b72:	f093 0f00 	teq	r3, #0
 8092b76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8092b7a:	bf02      	ittt	eq
 8092b7c:	0049      	lsleq	r1, r1, #1
 8092b7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8092b82:	3b01      	subeq	r3, #1
 8092b84:	d0f9      	beq.n	8092b7a <__aeabi_fmul+0xe6>
 8092b86:	ea41 010c 	orr.w	r1, r1, ip
 8092b8a:	e78f      	b.n	8092aac <__aeabi_fmul+0x18>
 8092b8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8092b90:	ea92 0f0c 	teq	r2, ip
 8092b94:	bf18      	it	ne
 8092b96:	ea93 0f0c 	teqne	r3, ip
 8092b9a:	d00a      	beq.n	8092bb2 <__aeabi_fmul+0x11e>
 8092b9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8092ba0:	bf18      	it	ne
 8092ba2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8092ba6:	d1d8      	bne.n	8092b5a <__aeabi_fmul+0xc6>
 8092ba8:	ea80 0001 	eor.w	r0, r0, r1
 8092bac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8092bb0:	4770      	bx	lr
 8092bb2:	f090 0f00 	teq	r0, #0
 8092bb6:	bf17      	itett	ne
 8092bb8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8092bbc:	4608      	moveq	r0, r1
 8092bbe:	f091 0f00 	teqne	r1, #0
 8092bc2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8092bc6:	d014      	beq.n	8092bf2 <__aeabi_fmul+0x15e>
 8092bc8:	ea92 0f0c 	teq	r2, ip
 8092bcc:	d101      	bne.n	8092bd2 <__aeabi_fmul+0x13e>
 8092bce:	0242      	lsls	r2, r0, #9
 8092bd0:	d10f      	bne.n	8092bf2 <__aeabi_fmul+0x15e>
 8092bd2:	ea93 0f0c 	teq	r3, ip
 8092bd6:	d103      	bne.n	8092be0 <__aeabi_fmul+0x14c>
 8092bd8:	024b      	lsls	r3, r1, #9
 8092bda:	bf18      	it	ne
 8092bdc:	4608      	movne	r0, r1
 8092bde:	d108      	bne.n	8092bf2 <__aeabi_fmul+0x15e>
 8092be0:	ea80 0001 	eor.w	r0, r0, r1
 8092be4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8092be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8092bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8092bf0:	4770      	bx	lr
 8092bf2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8092bf6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8092bfa:	4770      	bx	lr

08092bfc <__aeabi_fdiv>:
 8092bfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8092c00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8092c04:	bf1e      	ittt	ne
 8092c06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8092c0a:	ea92 0f0c 	teqne	r2, ip
 8092c0e:	ea93 0f0c 	teqne	r3, ip
 8092c12:	d069      	beq.n	8092ce8 <__aeabi_fdiv+0xec>
 8092c14:	eba2 0203 	sub.w	r2, r2, r3
 8092c18:	ea80 0c01 	eor.w	ip, r0, r1
 8092c1c:	0249      	lsls	r1, r1, #9
 8092c1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8092c22:	d037      	beq.n	8092c94 <__aeabi_fdiv+0x98>
 8092c24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8092c28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8092c2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8092c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8092c34:	428b      	cmp	r3, r1
 8092c36:	bf38      	it	cc
 8092c38:	005b      	lslcc	r3, r3, #1
 8092c3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8092c3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8092c42:	428b      	cmp	r3, r1
 8092c44:	bf24      	itt	cs
 8092c46:	1a5b      	subcs	r3, r3, r1
 8092c48:	ea40 000c 	orrcs.w	r0, r0, ip
 8092c4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8092c50:	bf24      	itt	cs
 8092c52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8092c56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8092c5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8092c5e:	bf24      	itt	cs
 8092c60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8092c64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8092c68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8092c6c:	bf24      	itt	cs
 8092c6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8092c72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8092c76:	011b      	lsls	r3, r3, #4
 8092c78:	bf18      	it	ne
 8092c7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8092c7e:	d1e0      	bne.n	8092c42 <__aeabi_fdiv+0x46>
 8092c80:	2afd      	cmp	r2, #253	; 0xfd
 8092c82:	f63f af50 	bhi.w	8092b26 <__aeabi_fmul+0x92>
 8092c86:	428b      	cmp	r3, r1
 8092c88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8092c8c:	bf08      	it	eq
 8092c8e:	f020 0001 	biceq.w	r0, r0, #1
 8092c92:	4770      	bx	lr
 8092c94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8092c98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8092c9c:	327f      	adds	r2, #127	; 0x7f
 8092c9e:	bfc2      	ittt	gt
 8092ca0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8092ca4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8092ca8:	4770      	bxgt	lr
 8092caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8092cae:	f04f 0300 	mov.w	r3, #0
 8092cb2:	3a01      	subs	r2, #1
 8092cb4:	e737      	b.n	8092b26 <__aeabi_fmul+0x92>
 8092cb6:	f092 0f00 	teq	r2, #0
 8092cba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8092cbe:	bf02      	ittt	eq
 8092cc0:	0040      	lsleq	r0, r0, #1
 8092cc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8092cc6:	3a01      	subeq	r2, #1
 8092cc8:	d0f9      	beq.n	8092cbe <__aeabi_fdiv+0xc2>
 8092cca:	ea40 000c 	orr.w	r0, r0, ip
 8092cce:	f093 0f00 	teq	r3, #0
 8092cd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8092cd6:	bf02      	ittt	eq
 8092cd8:	0049      	lsleq	r1, r1, #1
 8092cda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8092cde:	3b01      	subeq	r3, #1
 8092ce0:	d0f9      	beq.n	8092cd6 <__aeabi_fdiv+0xda>
 8092ce2:	ea41 010c 	orr.w	r1, r1, ip
 8092ce6:	e795      	b.n	8092c14 <__aeabi_fdiv+0x18>
 8092ce8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8092cec:	ea92 0f0c 	teq	r2, ip
 8092cf0:	d108      	bne.n	8092d04 <__aeabi_fdiv+0x108>
 8092cf2:	0242      	lsls	r2, r0, #9
 8092cf4:	f47f af7d 	bne.w	8092bf2 <__aeabi_fmul+0x15e>
 8092cf8:	ea93 0f0c 	teq	r3, ip
 8092cfc:	f47f af70 	bne.w	8092be0 <__aeabi_fmul+0x14c>
 8092d00:	4608      	mov	r0, r1
 8092d02:	e776      	b.n	8092bf2 <__aeabi_fmul+0x15e>
 8092d04:	ea93 0f0c 	teq	r3, ip
 8092d08:	d104      	bne.n	8092d14 <__aeabi_fdiv+0x118>
 8092d0a:	024b      	lsls	r3, r1, #9
 8092d0c:	f43f af4c 	beq.w	8092ba8 <__aeabi_fmul+0x114>
 8092d10:	4608      	mov	r0, r1
 8092d12:	e76e      	b.n	8092bf2 <__aeabi_fmul+0x15e>
 8092d14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8092d18:	bf18      	it	ne
 8092d1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8092d1e:	d1ca      	bne.n	8092cb6 <__aeabi_fdiv+0xba>
 8092d20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8092d24:	f47f af5c 	bne.w	8092be0 <__aeabi_fmul+0x14c>
 8092d28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8092d2c:	f47f af3c 	bne.w	8092ba8 <__aeabi_fmul+0x114>
 8092d30:	e75f      	b.n	8092bf2 <__aeabi_fmul+0x15e>
 8092d32:	bf00      	nop

08092d34 <__aeabi_uldivmod>:
 8092d34:	b953      	cbnz	r3, 8092d4c <__aeabi_uldivmod+0x18>
 8092d36:	b94a      	cbnz	r2, 8092d4c <__aeabi_uldivmod+0x18>
 8092d38:	2900      	cmp	r1, #0
 8092d3a:	bf08      	it	eq
 8092d3c:	2800      	cmpeq	r0, #0
 8092d3e:	bf1c      	itt	ne
 8092d40:	f04f 31ff 	movne.w	r1, #4294967295
 8092d44:	f04f 30ff 	movne.w	r0, #4294967295
 8092d48:	f000 b982 	b.w	8093050 <__aeabi_idiv0>
 8092d4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8092d50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8092d54:	f000 f806 	bl	8092d64 <__udivmoddi4>
 8092d58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8092d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8092d60:	b004      	add	sp, #16
 8092d62:	4770      	bx	lr

08092d64 <__udivmoddi4>:
 8092d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8092d68:	468c      	mov	ip, r1
 8092d6a:	460c      	mov	r4, r1
 8092d6c:	4605      	mov	r5, r0
 8092d6e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8092d70:	2b00      	cmp	r3, #0
 8092d72:	d14f      	bne.n	8092e14 <__udivmoddi4+0xb0>
 8092d74:	428a      	cmp	r2, r1
 8092d76:	4617      	mov	r7, r2
 8092d78:	d96b      	bls.n	8092e52 <__udivmoddi4+0xee>
 8092d7a:	fab2 fe82 	clz	lr, r2
 8092d7e:	f1be 0f00 	cmp.w	lr, #0
 8092d82:	d00b      	beq.n	8092d9c <__udivmoddi4+0x38>
 8092d84:	f1ce 0520 	rsb	r5, lr, #32
 8092d88:	fa20 f505 	lsr.w	r5, r0, r5
 8092d8c:	fa01 f30e 	lsl.w	r3, r1, lr
 8092d90:	ea45 0c03 	orr.w	ip, r5, r3
 8092d94:	fa02 f70e 	lsl.w	r7, r2, lr
 8092d98:	fa00 f50e 	lsl.w	r5, r0, lr
 8092d9c:	0c39      	lsrs	r1, r7, #16
 8092d9e:	fbbc f0f1 	udiv	r0, ip, r1
 8092da2:	b2ba      	uxth	r2, r7
 8092da4:	fb01 c310 	mls	r3, r1, r0, ip
 8092da8:	fb00 f802 	mul.w	r8, r0, r2
 8092dac:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8092db0:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8092db4:	45a0      	cmp	r8, r4
 8092db6:	d909      	bls.n	8092dcc <__udivmoddi4+0x68>
 8092db8:	19e4      	adds	r4, r4, r7
 8092dba:	f100 33ff 	add.w	r3, r0, #4294967295
 8092dbe:	f080 8128 	bcs.w	8093012 <__udivmoddi4+0x2ae>
 8092dc2:	45a0      	cmp	r8, r4
 8092dc4:	f240 8125 	bls.w	8093012 <__udivmoddi4+0x2ae>
 8092dc8:	3802      	subs	r0, #2
 8092dca:	443c      	add	r4, r7
 8092dcc:	ebc8 0404 	rsb	r4, r8, r4
 8092dd0:	fbb4 f3f1 	udiv	r3, r4, r1
 8092dd4:	fb01 4c13 	mls	ip, r1, r3, r4
 8092dd8:	fb03 f202 	mul.w	r2, r3, r2
 8092ddc:	b2ac      	uxth	r4, r5
 8092dde:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8092de2:	428a      	cmp	r2, r1
 8092de4:	d909      	bls.n	8092dfa <__udivmoddi4+0x96>
 8092de6:	19c9      	adds	r1, r1, r7
 8092de8:	f103 34ff 	add.w	r4, r3, #4294967295
 8092dec:	f080 810f 	bcs.w	809300e <__udivmoddi4+0x2aa>
 8092df0:	428a      	cmp	r2, r1
 8092df2:	f240 810c 	bls.w	809300e <__udivmoddi4+0x2aa>
 8092df6:	3b02      	subs	r3, #2
 8092df8:	4439      	add	r1, r7
 8092dfa:	1a8a      	subs	r2, r1, r2
 8092dfc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8092e00:	2100      	movs	r1, #0
 8092e02:	2e00      	cmp	r6, #0
 8092e04:	d063      	beq.n	8092ece <__udivmoddi4+0x16a>
 8092e06:	fa22 f20e 	lsr.w	r2, r2, lr
 8092e0a:	2300      	movs	r3, #0
 8092e0c:	e886 000c 	stmia.w	r6, {r2, r3}
 8092e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8092e14:	428b      	cmp	r3, r1
 8092e16:	d907      	bls.n	8092e28 <__udivmoddi4+0xc4>
 8092e18:	2e00      	cmp	r6, #0
 8092e1a:	d056      	beq.n	8092eca <__udivmoddi4+0x166>
 8092e1c:	2100      	movs	r1, #0
 8092e1e:	e886 0011 	stmia.w	r6, {r0, r4}
 8092e22:	4608      	mov	r0, r1
 8092e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8092e28:	fab3 f183 	clz	r1, r3
 8092e2c:	2900      	cmp	r1, #0
 8092e2e:	f040 8093 	bne.w	8092f58 <__udivmoddi4+0x1f4>
 8092e32:	42a3      	cmp	r3, r4
 8092e34:	d302      	bcc.n	8092e3c <__udivmoddi4+0xd8>
 8092e36:	4282      	cmp	r2, r0
 8092e38:	f200 80fe 	bhi.w	8093038 <__udivmoddi4+0x2d4>
 8092e3c:	1a85      	subs	r5, r0, r2
 8092e3e:	eb64 0303 	sbc.w	r3, r4, r3
 8092e42:	469c      	mov	ip, r3
 8092e44:	2001      	movs	r0, #1
 8092e46:	2e00      	cmp	r6, #0
 8092e48:	d041      	beq.n	8092ece <__udivmoddi4+0x16a>
 8092e4a:	e886 1020 	stmia.w	r6, {r5, ip}
 8092e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8092e52:	b912      	cbnz	r2, 8092e5a <__udivmoddi4+0xf6>
 8092e54:	2701      	movs	r7, #1
 8092e56:	fbb7 f7f2 	udiv	r7, r7, r2
 8092e5a:	fab7 fe87 	clz	lr, r7
 8092e5e:	f1be 0f00 	cmp.w	lr, #0
 8092e62:	d136      	bne.n	8092ed2 <__udivmoddi4+0x16e>
 8092e64:	1be4      	subs	r4, r4, r7
 8092e66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8092e6a:	fa1f f987 	uxth.w	r9, r7
 8092e6e:	2101      	movs	r1, #1
 8092e70:	fbb4 f3f8 	udiv	r3, r4, r8
 8092e74:	fb08 4413 	mls	r4, r8, r3, r4
 8092e78:	fb09 f203 	mul.w	r2, r9, r3
 8092e7c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8092e80:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8092e84:	42a2      	cmp	r2, r4
 8092e86:	d907      	bls.n	8092e98 <__udivmoddi4+0x134>
 8092e88:	19e4      	adds	r4, r4, r7
 8092e8a:	f103 30ff 	add.w	r0, r3, #4294967295
 8092e8e:	d202      	bcs.n	8092e96 <__udivmoddi4+0x132>
 8092e90:	42a2      	cmp	r2, r4
 8092e92:	f200 80d3 	bhi.w	809303c <__udivmoddi4+0x2d8>
 8092e96:	4603      	mov	r3, r0
 8092e98:	1aa4      	subs	r4, r4, r2
 8092e9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8092e9e:	fb08 4810 	mls	r8, r8, r0, r4
 8092ea2:	fb09 f900 	mul.w	r9, r9, r0
 8092ea6:	b2ac      	uxth	r4, r5
 8092ea8:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8092eac:	4591      	cmp	r9, r2
 8092eae:	d907      	bls.n	8092ec0 <__udivmoddi4+0x15c>
 8092eb0:	19d2      	adds	r2, r2, r7
 8092eb2:	f100 34ff 	add.w	r4, r0, #4294967295
 8092eb6:	d202      	bcs.n	8092ebe <__udivmoddi4+0x15a>
 8092eb8:	4591      	cmp	r9, r2
 8092eba:	f200 80ba 	bhi.w	8093032 <__udivmoddi4+0x2ce>
 8092ebe:	4620      	mov	r0, r4
 8092ec0:	ebc9 0202 	rsb	r2, r9, r2
 8092ec4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8092ec8:	e79b      	b.n	8092e02 <__udivmoddi4+0x9e>
 8092eca:	4631      	mov	r1, r6
 8092ecc:	4630      	mov	r0, r6
 8092ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8092ed2:	fa07 f70e 	lsl.w	r7, r7, lr
 8092ed6:	f1ce 0c20 	rsb	ip, lr, #32
 8092eda:	fa24 f30c 	lsr.w	r3, r4, ip
 8092ede:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8092ee2:	fbb3 faf8 	udiv	sl, r3, r8
 8092ee6:	fa1f f987 	uxth.w	r9, r7
 8092eea:	fb08 351a 	mls	r5, r8, sl, r3
 8092eee:	fa20 fc0c 	lsr.w	ip, r0, ip
 8092ef2:	fa04 f40e 	lsl.w	r4, r4, lr
 8092ef6:	fb0a fb09 	mul.w	fp, sl, r9
 8092efa:	ea4c 0c04 	orr.w	ip, ip, r4
 8092efe:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8092f02:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8092f06:	459b      	cmp	fp, r3
 8092f08:	fa00 f50e 	lsl.w	r5, r0, lr
 8092f0c:	d90a      	bls.n	8092f24 <__udivmoddi4+0x1c0>
 8092f0e:	19db      	adds	r3, r3, r7
 8092f10:	f10a 32ff 	add.w	r2, sl, #4294967295
 8092f14:	f080 808b 	bcs.w	809302e <__udivmoddi4+0x2ca>
 8092f18:	459b      	cmp	fp, r3
 8092f1a:	f240 8088 	bls.w	809302e <__udivmoddi4+0x2ca>
 8092f1e:	f1aa 0a02 	sub.w	sl, sl, #2
 8092f22:	443b      	add	r3, r7
 8092f24:	ebcb 0303 	rsb	r3, fp, r3
 8092f28:	fbb3 f0f8 	udiv	r0, r3, r8
 8092f2c:	fb08 3310 	mls	r3, r8, r0, r3
 8092f30:	fb00 f409 	mul.w	r4, r0, r9
 8092f34:	fa1f fc8c 	uxth.w	ip, ip
 8092f38:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8092f3c:	429c      	cmp	r4, r3
 8092f3e:	d907      	bls.n	8092f50 <__udivmoddi4+0x1ec>
 8092f40:	19db      	adds	r3, r3, r7
 8092f42:	f100 32ff 	add.w	r2, r0, #4294967295
 8092f46:	d26e      	bcs.n	8093026 <__udivmoddi4+0x2c2>
 8092f48:	429c      	cmp	r4, r3
 8092f4a:	d96c      	bls.n	8093026 <__udivmoddi4+0x2c2>
 8092f4c:	3802      	subs	r0, #2
 8092f4e:	443b      	add	r3, r7
 8092f50:	1b1c      	subs	r4, r3, r4
 8092f52:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8092f56:	e78b      	b.n	8092e70 <__udivmoddi4+0x10c>
 8092f58:	f1c1 0e20 	rsb	lr, r1, #32
 8092f5c:	408b      	lsls	r3, r1
 8092f5e:	fa22 fc0e 	lsr.w	ip, r2, lr
 8092f62:	ea4c 0c03 	orr.w	ip, ip, r3
 8092f66:	fa24 f70e 	lsr.w	r7, r4, lr
 8092f6a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8092f6e:	fbb7 faf9 	udiv	sl, r7, r9
 8092f72:	fa1f f38c 	uxth.w	r3, ip
 8092f76:	fb09 771a 	mls	r7, r9, sl, r7
 8092f7a:	fa20 f80e 	lsr.w	r8, r0, lr
 8092f7e:	408c      	lsls	r4, r1
 8092f80:	fb0a f503 	mul.w	r5, sl, r3
 8092f84:	ea48 0404 	orr.w	r4, r8, r4
 8092f88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8092f8c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8092f90:	42bd      	cmp	r5, r7
 8092f92:	fa02 f201 	lsl.w	r2, r2, r1
 8092f96:	fa00 fb01 	lsl.w	fp, r0, r1
 8092f9a:	d909      	bls.n	8092fb0 <__udivmoddi4+0x24c>
 8092f9c:	eb17 070c 	adds.w	r7, r7, ip
 8092fa0:	f10a 30ff 	add.w	r0, sl, #4294967295
 8092fa4:	d241      	bcs.n	809302a <__udivmoddi4+0x2c6>
 8092fa6:	42bd      	cmp	r5, r7
 8092fa8:	d93f      	bls.n	809302a <__udivmoddi4+0x2c6>
 8092faa:	f1aa 0a02 	sub.w	sl, sl, #2
 8092fae:	4467      	add	r7, ip
 8092fb0:	1b7f      	subs	r7, r7, r5
 8092fb2:	fbb7 f5f9 	udiv	r5, r7, r9
 8092fb6:	fb09 7715 	mls	r7, r9, r5, r7
 8092fba:	fb05 f303 	mul.w	r3, r5, r3
 8092fbe:	b2a4      	uxth	r4, r4
 8092fc0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8092fc4:	42bb      	cmp	r3, r7
 8092fc6:	d908      	bls.n	8092fda <__udivmoddi4+0x276>
 8092fc8:	eb17 070c 	adds.w	r7, r7, ip
 8092fcc:	f105 30ff 	add.w	r0, r5, #4294967295
 8092fd0:	d227      	bcs.n	8093022 <__udivmoddi4+0x2be>
 8092fd2:	42bb      	cmp	r3, r7
 8092fd4:	d925      	bls.n	8093022 <__udivmoddi4+0x2be>
 8092fd6:	3d02      	subs	r5, #2
 8092fd8:	4467      	add	r7, ip
 8092fda:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8092fde:	fba0 8902 	umull	r8, r9, r0, r2
 8092fe2:	1aff      	subs	r7, r7, r3
 8092fe4:	454f      	cmp	r7, r9
 8092fe6:	4645      	mov	r5, r8
 8092fe8:	464c      	mov	r4, r9
 8092fea:	d314      	bcc.n	8093016 <__udivmoddi4+0x2b2>
 8092fec:	d029      	beq.n	8093042 <__udivmoddi4+0x2de>
 8092fee:	b366      	cbz	r6, 809304a <__udivmoddi4+0x2e6>
 8092ff0:	ebbb 0305 	subs.w	r3, fp, r5
 8092ff4:	eb67 0704 	sbc.w	r7, r7, r4
 8092ff8:	fa07 fe0e 	lsl.w	lr, r7, lr
 8092ffc:	40cb      	lsrs	r3, r1
 8092ffe:	40cf      	lsrs	r7, r1
 8093000:	ea4e 0303 	orr.w	r3, lr, r3
 8093004:	e886 0088 	stmia.w	r6, {r3, r7}
 8093008:	2100      	movs	r1, #0
 809300a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809300e:	4623      	mov	r3, r4
 8093010:	e6f3      	b.n	8092dfa <__udivmoddi4+0x96>
 8093012:	4618      	mov	r0, r3
 8093014:	e6da      	b.n	8092dcc <__udivmoddi4+0x68>
 8093016:	ebb8 0502 	subs.w	r5, r8, r2
 809301a:	eb69 040c 	sbc.w	r4, r9, ip
 809301e:	3801      	subs	r0, #1
 8093020:	e7e5      	b.n	8092fee <__udivmoddi4+0x28a>
 8093022:	4605      	mov	r5, r0
 8093024:	e7d9      	b.n	8092fda <__udivmoddi4+0x276>
 8093026:	4610      	mov	r0, r2
 8093028:	e792      	b.n	8092f50 <__udivmoddi4+0x1ec>
 809302a:	4682      	mov	sl, r0
 809302c:	e7c0      	b.n	8092fb0 <__udivmoddi4+0x24c>
 809302e:	4692      	mov	sl, r2
 8093030:	e778      	b.n	8092f24 <__udivmoddi4+0x1c0>
 8093032:	3802      	subs	r0, #2
 8093034:	443a      	add	r2, r7
 8093036:	e743      	b.n	8092ec0 <__udivmoddi4+0x15c>
 8093038:	4608      	mov	r0, r1
 809303a:	e704      	b.n	8092e46 <__udivmoddi4+0xe2>
 809303c:	3b02      	subs	r3, #2
 809303e:	443c      	add	r4, r7
 8093040:	e72a      	b.n	8092e98 <__udivmoddi4+0x134>
 8093042:	45c3      	cmp	fp, r8
 8093044:	d3e7      	bcc.n	8093016 <__udivmoddi4+0x2b2>
 8093046:	463c      	mov	r4, r7
 8093048:	e7d1      	b.n	8092fee <__udivmoddi4+0x28a>
 809304a:	4631      	mov	r1, r6
 809304c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08093050 <__aeabi_idiv0>:
 8093050:	4770      	bx	lr
 8093052:	bf00      	nop

08093054 <calloc>:
 8093054:	4b02      	ldr	r3, [pc, #8]	; (8093060 <calloc+0xc>)
 8093056:	460a      	mov	r2, r1
 8093058:	4601      	mov	r1, r0
 809305a:	6818      	ldr	r0, [r3, #0]
 809305c:	f000 b84d 	b.w	80930fa <_calloc_r>
 8093060:	200004a8 	.word	0x200004a8

08093064 <__cxa_atexit>:
 8093064:	b510      	push	{r4, lr}
 8093066:	4c05      	ldr	r4, [pc, #20]	; (809307c <__cxa_atexit+0x18>)
 8093068:	4613      	mov	r3, r2
 809306a:	b12c      	cbz	r4, 8093078 <__cxa_atexit+0x14>
 809306c:	460a      	mov	r2, r1
 809306e:	4601      	mov	r1, r0
 8093070:	2002      	movs	r0, #2
 8093072:	f3af 8000 	nop.w
 8093076:	bd10      	pop	{r4, pc}
 8093078:	4620      	mov	r0, r4
 809307a:	bd10      	pop	{r4, pc}
 809307c:	00000000 	.word	0x00000000

08093080 <memcmp>:
 8093080:	b510      	push	{r4, lr}
 8093082:	3901      	subs	r1, #1
 8093084:	4402      	add	r2, r0
 8093086:	4290      	cmp	r0, r2
 8093088:	d007      	beq.n	809309a <memcmp+0x1a>
 809308a:	f810 3b01 	ldrb.w	r3, [r0], #1
 809308e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8093092:	42a3      	cmp	r3, r4
 8093094:	d0f7      	beq.n	8093086 <memcmp+0x6>
 8093096:	1b18      	subs	r0, r3, r4
 8093098:	bd10      	pop	{r4, pc}
 809309a:	2000      	movs	r0, #0
 809309c:	bd10      	pop	{r4, pc}

0809309e <memcpy>:
 809309e:	b510      	push	{r4, lr}
 80930a0:	1e43      	subs	r3, r0, #1
 80930a2:	440a      	add	r2, r1
 80930a4:	4291      	cmp	r1, r2
 80930a6:	d004      	beq.n	80930b2 <memcpy+0x14>
 80930a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80930ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80930b0:	e7f8      	b.n	80930a4 <memcpy+0x6>
 80930b2:	bd10      	pop	{r4, pc}

080930b4 <memmove>:
 80930b4:	4288      	cmp	r0, r1
 80930b6:	b510      	push	{r4, lr}
 80930b8:	eb01 0302 	add.w	r3, r1, r2
 80930bc:	d801      	bhi.n	80930c2 <memmove+0xe>
 80930be:	1e42      	subs	r2, r0, #1
 80930c0:	e00b      	b.n	80930da <memmove+0x26>
 80930c2:	4298      	cmp	r0, r3
 80930c4:	d2fb      	bcs.n	80930be <memmove+0xa>
 80930c6:	1881      	adds	r1, r0, r2
 80930c8:	1ad2      	subs	r2, r2, r3
 80930ca:	42d3      	cmn	r3, r2
 80930cc:	d004      	beq.n	80930d8 <memmove+0x24>
 80930ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80930d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80930d6:	e7f8      	b.n	80930ca <memmove+0x16>
 80930d8:	bd10      	pop	{r4, pc}
 80930da:	4299      	cmp	r1, r3
 80930dc:	d004      	beq.n	80930e8 <memmove+0x34>
 80930de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80930e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80930e6:	e7f8      	b.n	80930da <memmove+0x26>
 80930e8:	bd10      	pop	{r4, pc}

080930ea <memset>:
 80930ea:	4603      	mov	r3, r0
 80930ec:	4402      	add	r2, r0
 80930ee:	4293      	cmp	r3, r2
 80930f0:	d002      	beq.n	80930f8 <memset+0xe>
 80930f2:	f803 1b01 	strb.w	r1, [r3], #1
 80930f6:	e7fa      	b.n	80930ee <memset+0x4>
 80930f8:	4770      	bx	lr

080930fa <_calloc_r>:
 80930fa:	b538      	push	{r3, r4, r5, lr}
 80930fc:	fb02 f401 	mul.w	r4, r2, r1
 8093100:	4621      	mov	r1, r4
 8093102:	f7fd fd07 	bl	8090b14 <_malloc_r>
 8093106:	4605      	mov	r5, r0
 8093108:	b118      	cbz	r0, 8093112 <_calloc_r+0x18>
 809310a:	4622      	mov	r2, r4
 809310c:	2100      	movs	r1, #0
 809310e:	f7ff ffec 	bl	80930ea <memset>
 8093112:	4628      	mov	r0, r5
 8093114:	bd38      	pop	{r3, r4, r5, pc}

08093116 <strcmp>:
 8093116:	f810 2b01 	ldrb.w	r2, [r0], #1
 809311a:	f811 3b01 	ldrb.w	r3, [r1], #1
 809311e:	2a01      	cmp	r2, #1
 8093120:	bf28      	it	cs
 8093122:	429a      	cmpcs	r2, r3
 8093124:	d0f7      	beq.n	8093116 <strcmp>
 8093126:	1ad0      	subs	r0, r2, r3
 8093128:	4770      	bx	lr

0809312a <strlen>:
 809312a:	4603      	mov	r3, r0
 809312c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8093130:	2a00      	cmp	r2, #0
 8093132:	d1fb      	bne.n	809312c <strlen+0x2>
 8093134:	1a18      	subs	r0, r3, r0
 8093136:	3801      	subs	r0, #1
 8093138:	4770      	bx	lr

0809313a <strstr>:
 809313a:	b5f0      	push	{r4, r5, r6, r7, lr}
 809313c:	7803      	ldrb	r3, [r0, #0]
 809313e:	b963      	cbnz	r3, 809315a <strstr+0x20>
 8093140:	780b      	ldrb	r3, [r1, #0]
 8093142:	2b00      	cmp	r3, #0
 8093144:	bf18      	it	ne
 8093146:	2000      	movne	r0, #0
 8093148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 809314a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 809314e:	b162      	cbz	r2, 809316a <strstr+0x30>
 8093150:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8093154:	4630      	mov	r0, r6
 8093156:	4297      	cmp	r7, r2
 8093158:	d0f7      	beq.n	809314a <strstr+0x10>
 809315a:	4603      	mov	r3, r0
 809315c:	1c46      	adds	r6, r0, #1
 809315e:	7800      	ldrb	r0, [r0, #0]
 8093160:	b110      	cbz	r0, 8093168 <strstr+0x2e>
 8093162:	1e4d      	subs	r5, r1, #1
 8093164:	1e5c      	subs	r4, r3, #1
 8093166:	e7f0      	b.n	809314a <strstr+0x10>
 8093168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 809316a:	4618      	mov	r0, r3
 809316c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08093170 <gettimeofday>:
 8093170:	4b02      	ldr	r3, [pc, #8]	; (809317c <gettimeofday+0xc>)
 8093172:	460a      	mov	r2, r1
 8093174:	4601      	mov	r1, r0
 8093176:	6818      	ldr	r0, [r3, #0]
 8093178:	f000 b802 	b.w	8093180 <_gettimeofday_r>
 809317c:	200004a8 	.word	0x200004a8

08093180 <_gettimeofday_r>:
 8093180:	b538      	push	{r3, r4, r5, lr}
 8093182:	4c07      	ldr	r4, [pc, #28]	; (80931a0 <_gettimeofday_r+0x20>)
 8093184:	2300      	movs	r3, #0
 8093186:	4605      	mov	r5, r0
 8093188:	4608      	mov	r0, r1
 809318a:	4611      	mov	r1, r2
 809318c:	6023      	str	r3, [r4, #0]
 809318e:	f7f3 f8d6 	bl	808633e <_gettimeofday>
 8093192:	1c43      	adds	r3, r0, #1
 8093194:	d102      	bne.n	809319c <_gettimeofday_r+0x1c>
 8093196:	6823      	ldr	r3, [r4, #0]
 8093198:	b103      	cbz	r3, 809319c <_gettimeofday_r+0x1c>
 809319a:	602b      	str	r3, [r5, #0]
 809319c:	bd38      	pop	{r3, r4, r5, pc}
 809319e:	bf00      	nop
 80931a0:	20003f0c 	.word	0x20003f0c

080931a4 <dynalib_user>:
 80931a4:	0808001d 0808005d 08080089 0808008d     ....]...........
 80931b4:	00000000 00444552 45455247 4c42004e     ....RED.GREEN.BL
 80931c4:	74004555 6f20706f 6f632066 25006564     UE.top of code.%
 80931d4:	65740063 742e7473 62007478 6f74746f     c.test.txt.botto
 80931e4:	666f206d 646f6320 656b0065 00203a79     m of code.key: .
 80931f4:	20646964 20746f6e 74697277 6f742065     did not write to
 8093204:	21647320 72697700 73656c65 77742e73      sd!.wireless.tw
 8093214:	6f696c69 6d6f632e 6d336100 7a6d3062     ilio.com.a3mb0mz
 8093224:	67656c36 2e387362 2e746f69 652d7375     6legbs8.iot.us-e
 8093234:	2d747361 6d612e32 6e6f7a61 2e737761     ast-2.amazonaws.
 8093244:	006d6f63 65627943 74754172 0020006f              com.CyberAuto.

08093252 <CSWTCH.59>:
 8093252:	00000020 00000040 3e180060                        ...@...`.

0809325c <_ZL6spiPtr>:
 809325c:	20003e18 20003e28 20003e38              .>. (>. 8>. 

08093268 <_ZTV5SdSpi>:
	...
 8093270:	080814f5 08081505 080814f1 08081581     ................
 8093280:	080815a5 08081595 080815e9 20212020     ............  ! 
 8093290:	2e642500 252e6425 64252e64 00000000     .%d.%d.%d.%d....

080932a0 <_ZL1K>:
 80932a0:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
 80932b0:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
 80932c0:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
 80932d0:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
 80932e0:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
 80932f0:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
 8093300:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
 8093310:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
 8093320:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
 8093330:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
 8093340:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
 8093350:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
 8093360:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
 8093370:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
 8093380:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
 8093390:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
 80933a0:	8648862a 05010df7 0000000c              *.H.........

080933ac <mbedtls_sha1_info>:
 80933ac:	00000004 08093971 00000014 00000040     ....q9......@...
 80933bc:	08083a45 08083a41 08083a3d 080862d9     E:..A:..=:...b..
 80933cc:	08083a27 08083a15 08083a11 08083a0d     ':...:...:...:..

080933dc <mbedtls_sha224_info>:
 80933dc:	00000005 080937e2 0000001c 00000040     .....7......@...
 80933ec:	08083a8d 08083a89 08083a85 08083a79     .:...:...:..y:..
 80933fc:	08083a63 08083a51 08083a4d 08083a49     c:..Q:..M:..I:..

0809340c <mbedtls_sha384_info>:
 809340c:	00000007 08094389 00000030 00000080     .....C..0.......
 809341c:	08083add 08083ad9 08083ad5 08083ac9     .:...:...:...:..
 809342c:	08083ab3 08083aa1 08083a9d 08083a99     .:...:...:...:..

0809343c <mbedtls_sha512_info>:
 809343c:	00000008 08093845 00000040 00000080     ....E8..@.......
 809344c:	08083ae3 08083ad9 08083ad5 08083acf     .:...:...:...:..
 809345c:	08083ab3 08083aa1 08083a9d 08083a99     .:...:...:...:..

0809346c <mbedtls_sha256_info>:
 809346c:	00000006 080943e9 00000020 00000040     .....C.. ...@...
 809347c:	08083a93 08083a89 08083a85 08083a7f     .:...:...:...:..
 809348c:	08083a63 08083a51 08083a4d 08083a49     c:..Q:..M:..I:..

0809349c <_ZL18oid_x520_attr_type>:
 809349c:	08093c44 00000003 08093c48 08093c59     D<......H<..Y<..
 80934ac:	08094da5 08093c65 00000003 08093c69     .M..e<......i<..
 80934bc:	08093c7b 0809426e 08093c83 00000003     {<..nB...<......
 80934cc:	08093c87 08093c96 08093c9f 08093ca1     .<...<...<...<..
 80934dc:	00000003 08093ca5 08093cb1 08093cb7     .....<...<...<..
 80934ec:	08093cba 00000003 08093cbe 08093cd5     .<.......<...<..
 80934fc:	08093ce2 08093ce4 00000003 08093ce8     .<...<.......<..
 809350c:	08093d05 08093d0e 08093d11 00000009     .=...=...=......
 809351c:	08093d1b 08093d28 08093d1b 08093d37     .=..(=...=..7=..
 809352c:	00000003 08093d3b 08093d4e 08093d41     ....;=..N=..A=..
 809353c:	08093d5c 00000003 08093d60 08093d74     \=......`=..t=..
 809354c:	08093d66 08093d83 00000003 08093d87     f=...=.......=..
 809355c:	08093d98 08093d8d 08093da4 00000003     .=...=...=......
 809356c:	08093da8 08093db6 08093dbe 08093dc1     .=...=...=...=..
 809357c:	00000003 08093dc5 08093dd5 08093de0     .....=...=...=..
 809358c:	08093de3 00000003 08093de7 08093df6     .=.......=...=..
 809359c:	08093ded 08093dff 00000003 08093e03     .=...=.......>..
 80935ac:	08093e1d 08093e09 08093e32 00000003     .>...>..2>......
 80935bc:	08093e36 08093e42 08093e3c 08093e48     6>..B>..<>..H>..
 80935cc:	00000003 08093e4c 08093e5e 08093e52     ....L>..^>..R>..
 80935dc:	08093e7b 00000003 08093e7f 08093e8f     {>.......>...>..
 80935ec:	08093e85 08093e99 0000000a 08093ea4     .>...>.......>..
 80935fc:	08093eb7 08093ec8 08093ecb 00000003     .>...>...>......
 809360c:	08093ecf 08093ee6 08093ed5 00000000     .>...>...>......
	...

0809362c <_ZL17oid_ext_key_usage>:
 809362c:	08093a5d 00000008 08093a66 08093a77     ]:......f:..w:..
 809363c:	08093a95 00000008 08093a9e 08093aaf     .:.......:...:..
 809364c:	08093acd 00000008 08093ad6 08093ae8     .:.......:...:..
 809365c:	08093af5 00000008 08093afe 08093b14     .:.......:...;..
 809366c:	08093b26 00000008 08093b2f 08093b42     &;....../;..B;..
 809367c:	08093b50 00000008 08093b59 08093b6b     P;......Y;..k;..
	...

0809369c <_ZL10oid_pk_alg>:
 809369c:	080938e7 00000009 080938f1 080938ff     .8.......8...8..
 80936ac:	00000001 08093903 00000007 0809390b     .....9.......9..
 80936bc:	0809391a 00000002 08093929 00000005     .9......)9......
 80936cc:	0809392f 08093937 00000003 00000000     /9..79..........
	...

080936ec <_ZL14oid_cipher_alg>:
 80936ec:	080938b7 00000005 080938bd 08093793     .8.......8...7..
 80936fc:	00000021 080938c4 00000008 080938cd     !....8.......8..
 809370c:	080938da 00000025 00000000 00000000     .8..%...........
	...
 8093728:	8648862a 0c010df7 70000301 69576562     *.H........pbeWi
 8093738:	48536874 646e4141 654b2d33 69725479     thSHAAnd3-KeyTri
 8093748:	44656c70 432d5345 50004342 77204542     pleDES-CBC.PBE w
 8093758:	20687469 31414853 646e6120 4b2d3320     ith SHA1 and 3-K
 8093768:	33207965 00534544 8648862a 0c010df7     ey 3DES.*.H.....
 8093778:	70000401 69576562 48536874 646e4141     ...pbeWithSHAAnd
 8093788:	654b2d32 69725479 44656c70 432d5345     2-KeyTripleDES-C
 8093798:	50004342 77204542 20687469 31414853     BC.PBE with SHA1
 80937a8:	646e6120 4b2d3220 33207965 00534544      and 2-Key 3DES.
 80937b8:	8648862a 07020df7 616d6800 41485363     *.H......hmacSHA
 80937c8:	4d480031 532d4341 312d4148 48862a00     1.HMAC-SHA-1.*.H
 80937d8:	020df786 6d680008 48536361 34323241     ......hmacSHA224
 80937e8:	414d4800 48532d43 32322d41 862a0034     .HMAC-SHA-224.*.
 80937f8:	0df78648 68000902 5363616d 35324148     H......hmacSHA25
 8093808:	4d480036 532d4341 322d4148 2a003635     6.HMAC-SHA-256.*
 8093818:	f7864886 000a020d 63616d68 33414853     .H......hmacSHA3
 8093828:	48003438 2d43414d 2d414853 00343833     84.HMAC-SHA-384.
 8093838:	8648862a 0b020df7 616d6800 41485363     *.H......hmacSHA
 8093848:	00323135 43414d48 4148532d 3231352d     512.HMAC-SHA-512
 8093858:	030e2b00 69001a02 68732d64 60003161     .+.....id-sha1.`
 8093868:	65014886 04020403 2d646900 32616873     .H.e.....id-sha2
 8093878:	60003432 65014886 01020403 2d646900     24.`.H.e.....id-
 8093888:	32616873 60003635 65014886 02020403     sha256.`.H.e....
 8093898:	2d646900 33616873 60003438 65014886     .id-sha384.`.H.e
 80938a8:	03020403 2d646900 35616873 2b003231     .....id-sha512.+
 80938b8:	0702030e 73656400 00434243 8648862a     .....desCBC.*.H.
 80938c8:	07030df7 73656400 6564652d 62632d33     .....des-ede3-cb
 80938d8:	45440063 44452d53 432d3345 2a004342     c.DES-EDE3-CBC.*
 80938e8:	f7864886 0101010d 61737200 72636e45     .H.......rsaEncr
 80938f8:	69747079 52006e6f 2a004153 3dce4886     yption.RSA.*.H.=
 8093908:	69000102 63652d64 6c627550 654b6369     ...id-ecPublicKe
 8093918:	65470079 6972656e 43452063 79656b20     y.Generic EC key
 8093928:	04812b00 69000c01 63652d64 45004844     .+.....id-ecDH.E
 8093938:	656b2043 6f662079 43452072 2a004844     C key for ECDH.*
 8093948:	f7864886 0501010d 61687300 6957312d     .H.......sha-1Wi
 8093958:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
 8093968:	20415352 68746977 41485320 862a0031     RSA with SHA1.*.
 8093978:	0df78648 000e0101 32616873 69573432     H.......sha224Wi
 8093988:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
 8093998:	20415352 68746977 41485320 3432322d     RSA with SHA-224
 80939a8:	48862a00 010df786 73000b01 35326168     .*.H.......sha25
 80939b8:	74695736 41535268 72636e45 69747079     6WithRSAEncrypti
 80939c8:	52006e6f 77204153 20687469 2d414853     on.RSA with SHA-
 80939d8:	00363532 8648862a 01010df7 6873000c     256.*.H.......sh
 80939e8:	34383361 68746957 45415352 7972636e     a384WithRSAEncry
 80939f8:	6f697470 5352006e 69772041 53206874     ption.RSA with S
 8093a08:	332d4148 2a003438 f7864886 0d01010d     HA-384.*.H......
 8093a18:	61687300 57323135 52687469 6e454153     .sha512WithRSAEn
 8093a28:	70797263 6e6f6974 41535200 74697720     cryption.RSA wit
 8093a38:	48532068 31352d41 0e2b0032 001d0203     h SHA-512.+.....
 8093a48:	8648862a 01010df7 5352000a 41535341     *.H.......RSASSA
 8093a58:	5353502d 01062b00 03070505 64690001     -PSS.+........id
 8093a68:	2d706b2d 76726573 75417265 54006874     -kp-serverAuth.T
 8093a78:	5720534c 53206265 65767265 75412072     LS Web Server Au
 8093a88:	6e656874 61636974 6e6f6974 01062b00     thentication.+..
 8093a98:	03070505 64690002 2d706b2d 65696c63     ......id-kp-clie
 8093aa8:	7541746e 54006874 5720534c 43206265     ntAuth.TLS Web C
 8093ab8:	6e65696c 75412074 6e656874 61636974     lient Authentica
 8093ac8:	6e6f6974 01062b00 03070505 64690003     tion.+........id
 8093ad8:	2d706b2d 65646f63 6e676953 00676e69     -kp-codeSigning.
 8093ae8:	65646f43 67695320 676e696e 01062b00     Code Signing.+..
 8093af8:	03070505 64690004 2d706b2d 69616d65     ......id-kp-emai
 8093b08:	6f72506c 74636574 006e6f69 616d2d45     lProtection.E-ma
 8093b18:	50206c69 65746f72 6f697463 062b006e     il Protection.+.
 8093b28:	07050501 69000803 706b2d64 6d69742d     .......id-kp-tim
 8093b38:	61745365 6e69706d 69540067 5320656d     eStamping.Time S
 8093b48:	706d6174 00676e69 0501062b 09030705     tamping.+.......
 8093b58:	2d646900 4f2d706b 53505343 696e6769     .id-kp-OCSPSigni
 8093b68:	4f00676e 20505343 6e676953 00676e69     ng.OCSP Signing.
 8093b78:	00131d55 632d6469 61622d65 43636973     U...id-ce-basicC
 8093b88:	74736e6f 6e696172 42007374 63697361     onstraints.Basic
 8093b98:	6e6f4320 61727473 73746e69 0f1d5500      Constraints.U..
 8093ba8:	2d646900 6b2d6563 73557965 00656761     .id-ce-keyUsage.
 8093bb8:	00251d55 632d6469 78652d65 79654b74     U.%.id-ce-extKey
 8093bc8:	67617355 78450065 646e6574 4b206465     Usage.Extended K
 8093bd8:	55207965 65676173 111d5500 2d646900     ey Usage.U...id-
 8093be8:	732d6563 656a6275 6c417463 6d614e74     ce-subjectAltNam
 8093bf8:	75530065 63656a62 6c412074 614e2074     e.Subject Alt Na
 8093c08:	6000656d 86014886 010142f8 2d646900     me.`.H...B...id-
 8093c18:	7374656e 65706163 7265632d 70797474     netscape-certtyp
 8093c28:	654e0065 61637374 43206570 69747265     e.Netscape Certi
 8093c38:	61636966 54206574 00657079 00030455     ficate Type.U...
 8093c48:	612d6469 6f632d74 6e6f6d6d 656d614e     id-at-commonName
 8093c58:	6d6f4300 206e6f6d 656d614e 06045500     .Common Name.U..
 8093c68:	2d646900 632d7461 746e756f 614e7972     .id-at-countryNa
 8093c78:	4300656d 746e756f 55007972 69000704     me.Country.U...i
 8093c88:	74612d64 636f6c2d 74696c61 6f4c0079     d-at-locality.Lo
 8093c98:	696c6163 4c007974 08045500 2d646900     cality.L.U...id-
 8093ca8:	732d7461 65746174 61745300 53006574     at-state.State.S
 8093cb8:	04550054 6469000a 2d74612d 6167726f     T.U...id-at-orga
 8093cc8:	617a696e 6e6f6974 656d614e 67724f00     nizationName.Org
 8093cd8:	7a696e61 6f697461 004f006e 000b0455     anization.O.U...
 8093ce8:	612d6469 726f2d74 696e6167 6974617a     id-at-organizati
 8093cf8:	6c616e6f 74696e55 656d614e 67724f00     onalUnitName.Org
 8093d08:	696e5520 554f0074 48862a00 010df786      Unit.OU.*.H....
 8093d18:	65000109 6c69616d 72646441 00737365     ...emailAddress.
 8093d28:	616d2d45 61206c69 65726464 55007373     E-mail address.U
 8093d38:	69000504 74612d64 7265732d 4e6c6169     ...id-at-serialN
 8093d48:	65626d75 65530072 6c616972 6d756e20     umber.Serial num
 8093d58:	00726562 00100455 612d6469 6f702d74     ber.U...id-at-po
 8093d68:	6c617473 72646441 00737365 74736f50     stalAddress.Post
 8093d78:	61206c61 65726464 55007373 69001104     al address.U...i
 8093d88:	74612d64 736f702d 436c6174 0065646f     d-at-postalCode.
 8093d98:	74736f50 63206c61 0065646f 00040455     Postal code.U...
 8093da8:	612d6469 75732d74 6d614e72 75530065     id-at-surName.Su
 8093db8:	6d616e72 4e530065 2a045500 2d646900     rname.SN.U.*.id-
 8093dc8:	672d7461 6e657669 656d614e 76694700     at-givenName.Giv
 8093dd8:	6e206e65 00656d61 55004e47 69002b04     en name.GN.U.+.i
 8093de8:	74612d64 696e692d 6c616974 6e490073     d-at-initials.In
 8093df8:	61697469 5500736c 69002c04 74612d64     itials.U.,.id-at
 8093e08:	6e65672d 74617265 516e6f69 696c6175     -generationQuali
 8093e18:	72656966 6e654700 74617265 206e6f69     fier.Generation 
 8093e28:	6c617571 65696669 04550072 6469000c     qualifier.U...id
 8093e38:	2d74612d 6c746974 69540065 00656c74     -at-title.Title.
 8093e48:	002e0455 612d6469 6e642d74 6c617551     U...id-at-dnQual
 8093e58:	65696669 69440072 6e697473 73697567     ifier.Distinguis
 8093e68:	20646568 656d614e 61757120 6966696c     hed Name qualifi
 8093e78:	55007265 69004104 74612d64 6573702d     er.U.A.id-at-pse
 8093e88:	6e6f6475 50006d79 64756573 6d796e6f     udonym.Pseudonym
 8093e98:	26920900 2cf29389 00190164 642d6469     ...&...,d...id-d
 8093ea8:	69616d6f 6d6f436e 656e6f70 4400746e     omainComponent.D
 8093eb8:	69616d6f 6f63206e 6e6f706d 00746e65     omain component.
 8093ec8:	55004344 69002d04 74612d64 696e752d     DC.U.-.id-at-uni
 8093ed8:	49657571 746e6564 65696669 6e550072     queIdentifier.Un
 8093ee8:	65757169 65644920 6669746e 00726569     ique Identifier.

08093ef8 <_ZL18oid_pkcs12_pbe_alg>:
 8093ef8:	08093728 0000000a 08093733 08093753     (7......37..S7..
 8093f08:	00002504 08093770 0000000a 0809377b     .%..p7......{7..
 8093f18:	0809379b 00002304 00000000 00000000     .7...#..........
	...

08093f34 <_ZL10oid_md_alg>:
 8093f34:	08093859 00000005 0809385f 080937cf     Y8......_8...7..
 8093f44:	00000004 08093867 00000009 08093871     ....g8......q8..
 8093f54:	080939a1 00000005 0809387b 00000009     .9......{8......
 8093f64:	08093885 080939d4 00000006 0809388f     .8...9.......8..
 8093f74:	00000009 08093899 08093a07 00000007     .....8...:......
 8093f84:	080938a3 00000009 080938ad 08093a3a     .8.......8..::..
 8093f94:	00000008 00000000 00000000 00000000     ................
	...

08093fac <_ZL11oid_sig_alg>:
 8093fac:	08093947 00000009 08093951 08093968     G9......Q9..h9..
 8093fbc:	00000104 08093976 00000009 08093980     ....v9.......9..
 8093fcc:	08093998 00000105 080939a9 00000009     .9.......9......
 8093fdc:	080939b3 080939cb 00000106 080939dc     .9...9.......9..
 8093fec:	00000009 080939e6 080939fe 00000107     .....9...9......
 8093ffc:	08093a0f 00000009 08093a19 08093a31     .:.......:..1:..
 809400c:	00000108 08093a42 00000005 08093951     ....B:......Q9..
 809401c:	08093968 00000104 08093a48 00000009     h9......H:......
 809402c:	08093a52 08093a52 00000600 00000000     R:..R:..........
	...

0809404c <_ZL11oid_md_hmac>:
 809404c:	080937b8 00000008 080937c1 080937ca     .7.......7...7..
 809405c:	00000004 080937d5 00000008 080937de     .....7.......7..
 809406c:	080937e9 00000005 080937f6 00000008     .7.......7......
 809407c:	080937ff 0809380a 00000006 08093817     .7...8.......8..
 809408c:	00000008 08093820 0809382b 00000007     .... 8..+8......
 809409c:	08093838 00000008 08093841 0809384c     88......A8..L8..
 80940ac:	00000008 00000000 00000000 00000000     ................
	...

080940c4 <_ZL12oid_x509_ext>:
 80940c4:	08093b78 00000003 08093b7c 08093b93     x;......|;...;..
 80940d4:	00000100 08093ba5 00000003 08093ba9     .....;.......;..
 80940e4:	08093bd7 00000004 08093bb8 00000003     .;.......;......
 80940f4:	08093bbc 08093bce 00000800 08093be1     .;...;.......;..
 8094104:	00000003 08093be5 08093bfa 00000020     .....;...;.. ...
 8094114:	08093c0b 00000009 08093c15 08093c2a     .<.......<..*<..
 8094124:	00010000 00000000 00000000 00000000     ................
	...

0809413c <_ZL16aes_192_cbc_info>:
 809413c:	00000206 000000c0 08094264 00000010     ........dB......
 809414c:	00000000 00000010 080942f4              .........B..

08094158 <_ZL16aes_256_ecb_info>:
 8094158:	00000104 00000100 0809427c 00000010     ........|B......
 8094168:	00000000 00000010 080942f4              .........B..

08094174 <_ZL16aes_128_ecb_info>:
 8094174:	00000102 00000080 08094294 00000010     .........B......
 8094184:	00000000 00000010 080942f4              .........B..

08094190 <_ZL12gcm_aes_info>:
 8094190:	00000002 00000000 00000000 08086405     .............d..
 80941a0:	08086405 080863ed 080863db              .d...c...c..

080941ac <mbedtls_cipher_definitions>:
 80941ac:	00000002 08094174 00000003 080942bc     ....tA.......B..
 80941bc:	00000004 08094158 00000005 08094218     ....XA.......B..
 80941cc:	00000006 0809413c 00000007 080942a0     ....<A.......B..
 80941dc:	0000000e 080942d8 0000000f 080941fc     .....B.......A..
 80941ec:	00000010 08094310 00000000 00000000     .....C..........

080941fc <_ZL16aes_192_gcm_info>:
 80941fc:	0000060f 000000c0 08094240 0000000c     ........@B......
 809420c:	00000001 00000010 08094190              .........A..

08094218 <_ZL16aes_128_cbc_info>:
 8094218:	00000205 00000080 08094270 00000010     ........pB......
 8094228:	00000000 00000010 080942f4 2d534541     .........B..AES-
 8094238:	2d363532 004d4347 2d534541 2d323931     256-GCM.AES-192-
 8094248:	004d4347 2d534541 2d383231 004d4347     GCM.AES-128-GCM.
 8094258:	2d534541 2d363532 00434243 2d534541     AES-256-CBC.AES-
 8094268:	2d323931 00434243 2d534541 2d383231     192-CBC.AES-128-
 8094278:	00434243 2d534541 2d363532 00424345     CBC.AES-256-ECB.
 8094288:	2d534541 2d323931 00424345 2d534541     AES-192-ECB.AES-
 8094298:	2d383231 00424345                       128-ECB.

080942a0 <_ZL16aes_256_cbc_info>:
 80942a0:	00000207 00000100 08094258 00000010     ........XB......
 80942b0:	00000000 00000010 080942f4              .........B..

080942bc <_ZL16aes_192_ecb_info>:
 80942bc:	00000103 000000c0 08094288 00000010     .........B......
 80942cc:	00000000 00000010 080942f4              .........B..

080942d8 <_ZL16aes_128_gcm_info>:
 80942d8:	0000060e 00000080 0809424c 0000000c     ........LB......
 80942e8:	00000001 00000010 08094190              .........A..

080942f4 <_ZL8aes_info>:
 80942f4:	00000002 08086449 08086441 0808643d     ....Id..Ad..=d..
 8094304:	08086439 08086421 0808640f              9d..!d...d..

08094310 <_ZL16aes_256_gcm_info>:
 8094310:	00000610 00000100 08094234 0000000c     ........4B......
 8094320:	00000001 00000010 08094190 2e617372     .........A..rsa.
 8094330:	7372004e 00452e61                       N.rsa.E.

08094338 <mbedtls_rsa_info>:
 8094338:	00000001 080938ff 080864ad 0808644d     .....8...d..Md..
 8094348:	08086591 08086551 08086505 080864b9     .e..Qe...e...d..
 8094358:	080864a9 0808648f 0808647d 08086459     .d...d..}d..Yd..
 8094368:	6e6b6e75 006e776f 2d534c54 2d415352     unknown.TLS-RSA-
 8094378:	48544957 5345412d 3635322d 4d43472d     WITH-AES-256-GCM
 8094388:	4148532d 00343833 2d534c54 2d415352     -SHA384.TLS-RSA-
 8094398:	48544957 5345412d 3832312d 4d43472d     WITH-AES-128-GCM
 80943a8:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 80943b8:	48544957 5345412d 3832312d 4342432d     WITH-AES-128-CBC
 80943c8:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 80943d8:	48544957 5345412d 3635322d 4342432d     WITH-AES-256-CBC
 80943e8:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 80943f8:	48544957 5345412d 3832312d 4342432d     WITH-AES-128-CBC
 8094408:	4148532d 534c5400 4153522d 5449572d     -SHA.TLS-RSA-WIT
 8094418:	45412d48 35322d53 42432d36 48532d43     H-AES-256-CBC-SH
 8094428:	00000041                                A...

0809442c <_ZL23ciphersuite_definitions>:
 809442c:	0000009d 08094370 00010710 00000003     ....pC..........
 809443c:	00000003 00000003 00000003 00000000     ................
 809444c:	0000009c 08094390 0001060e 00000003     .....C..........
 809445c:	00000003 00000003 00000003 00000000     ................
 809446c:	0000003c 080943b0 00010605 00000003     <....C..........
 809447c:	00000003 00000003 00000003 00000000     ................
 809448c:	0000003d 080943d0 00010607 00000003     =....C..........
 809449c:	00000003 00000003 00000003 00000000     ................
 80944ac:	0000002f 080943f0 00010405 00000003     /....C..........
 80944bc:	00000000 00000003 00000003 00000000     ................
 80944cc:	00000035 0809440d 00010407 00000003     5....D..........
 80944dc:	00000000 00000003 00000003 00000000     ................
 80944ec:	00000000 080938f0 00000000 00000000     .....8..........
	...

0809450c <_ZL22ciphersuite_preference>:
 809450c:	0000c02c 0000c030 0000009f 0000c0ad     ,...0...........
 809451c:	0000c09f 0000c024 0000c028 0000006b     ....$...(...k...
 809452c:	0000c00a 0000c014 00000039 0000c0af     ........9.......
 809453c:	0000c0a3 0000c087 0000c08b 0000c07d     ............}...
 809454c:	0000c073 0000c077 000000c4 00000088     s...w...........
 809455c:	0000c02b 0000c02f 0000009e 0000c0ac     +.../...........
 809456c:	0000c09e 0000c023 0000c027 00000067     ....#...'...g...
 809457c:	0000c009 0000c013 00000033 0000c0ae     ........3.......
 809458c:	0000c0a2 0000c086 0000c08a 0000c07c     ............|...
 809459c:	0000c072 0000c076 000000be 00000045     r...v.......E...
 80945ac:	0000c008 0000c012 00000016 000000ab     ................
 80945bc:	0000c0a7 0000c038 000000b3 0000c036     ....8.......6...
 80945cc:	00000091 0000c091 0000c09b 0000c097     ................
 80945dc:	0000c0ab 000000aa 0000c0a6 0000c037     ............7...
 80945ec:	000000b2 0000c035 00000090 0000c090     ....5...........
 80945fc:	0000c096 0000c09a 0000c0aa 0000c034     ............4...
 809460c:	0000008f 0000c0ff 0000009d 0000c09d     ................
 809461c:	0000003d 00000035 0000c032 0000c02a     =...5...2...*...
 809462c:	0000c00f 0000c02e 0000c026 0000c005     ........&.......
 809463c:	0000c0a1 0000c07b 000000c0 00000084     ....{...........
 809464c:	0000c08d 0000c079 0000c089 0000c075     ....y.......u...
 809465c:	0000009c 0000c09c 0000003c 0000002f     ........<.../...
 809466c:	0000c031 0000c029 0000c00e 0000c02d     1...).......-...
 809467c:	0000c025 0000c004 0000c0a0 0000c07a     %...........z...
 809468c:	000000ba 00000041 0000c08c 0000c078     ....A.......x...
 809469c:	0000c088 0000c074 0000000a 0000c00d     ....t...........
 80946ac:	0000c003 000000ad 000000b7 00000095     ................
 80946bc:	0000c093 0000c099 000000ac 000000b6     ................
 80946cc:	00000094 0000c092 0000c098 00000093     ................
 80946dc:	000000a9 0000c0a5 000000af 0000008d     ................
 80946ec:	0000c08f 0000c095 0000c0a9 000000a8     ................
 80946fc:	0000c0a4 000000ae 0000008c 0000c08e     ................
 809470c:	0000c094 0000c0a8 0000008b 0000c007     ................
 809471c:	0000c011 0000c033 0000008e 00000005     ....3...........
 809472c:	00000004 0000c00c 0000c002 00000092     ................
 809473c:	0000008a 00000015 00000009 0000c006     ................
 809474c:	0000c010 0000c03b 0000c03a 0000c039     ....;...:...9...
 809475c:	000000b5 000000b4 0000002d 0000003b     ........-...;...
 809476c:	00000002 00000001 0000c00b 0000c001     ................
 809477c:	000000b9 000000b8 0000002e 000000b1     ................
 809478c:	000000b0 0000002c 00000000 00202b20     ....,....... + .
 809479c:	2500202c 3f003d73 3a003d3f 32302500     , .%s=.??=.:.%02
 80947ac:	00732558 2e2e2e2e 3f3f3f00 20732500     X%s......???.%s 
 80947bc:	2079656b 657a6973 48862a00 010df786     key size.*.H....
 80947cc:	0001010c 8648862a 05010df7 2d2d000d     ....*.H.......--
 80947dc:	452d2d2d 5220444e 50204153 41564952     ---END RSA PRIVA
 80947ec:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 80947fc:	4745422d 52204e49 50204153 41564952     -BEGIN RSA PRIVA
 809480c:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 809481c:	444e452d 49525020 45544156 59454b20     -END PRIVATE KEY
 809482c:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
 809483c:	49525020 45544156 59454b20 2d2d2d2d      PRIVATE KEY----
 809484c:	2d2d002d 452d2d2d 4520444e 5952434e     -.-----END ENCRY
 809485c:	44455450 49525020 45544156 59454b20     PTED PRIVATE KEY
 809486c:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
 809487c:	434e4520 54505952 50204445 41564952      ENCRYPTED PRIVA
 809488c:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 809489c:	444e452d 42555020 2043494c 2d59454b     -END PUBLIC KEY-
 80948ac:	2d2d2d2d 2d2d2d00 45422d2d 204e4947     ----.-----BEGIN 
 80948bc:	4c425550 4b204349 2d2d5945 002d2d2d     PUBLIC KEY-----.
 80948cc:	00000000                                ....

080948d0 <_ZL5last4>:
	...
 80948d8:	00001c20 00000000 00003840 00000000      .......@8......
 80948e8:	00002460 00000000 00007080 00000000     `$.......p......
 80948f8:	00006ca0 00000000 000048c0 00000000     .l.......H......
 8094908:	000054e0 00000000 0000e100 00000000     .T..............
 8094918:	0000fd20 00000000 0000d940 00000000      .......@.......
 8094928:	0000c560 00000000 00009180 00000000     `...............
 8094938:	00008da0 00000000 0000a9c0 00000000     ................
 8094948:	0000b5e0 00000000                       ........

08094950 <_ZL14base64_dec_map>:
 8094950:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
 8094960:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
 8094970:	7f7f7f7f 7f7f7f7f 3e7f7f7f 3f7f7f7f     ...........>...?
 8094980:	37363534 3b3a3938 7f7f3d3c 7f7f407f     456789:;<=...@..
 8094990:	0201007f 06050403 0a090807 0e0d0c0b     ................
 80949a0:	1211100f 16151413 7f191817 7f7f7f7f     ................
 80949b0:	1c1b1a7f 201f1e1d 24232221 28272625     ....... !"#$%&'(
 80949c0:	2c2b2a29 302f2e2d 7f333231 7f7f7f7f     )*+,-./0123.....

080949d0 <CSWTCH.21>:
 80949d0:	080933ac 080933dc 0809346c 0809340c     .3...3..l4...4..
 80949e0:	0809343c                                <4..

080949e4 <mbedtls_x509_crt_profile_default>:
 80949e4:	000000f0 0fffffff 0fffffff 00000800     ................
 80949f4:	65757274 6c616600 0a006573 74726543     true.false..Cert
 8094a04:	63696669 20657461 75207369 696e696e     ificate is unini
 8094a14:	6c616974 64657369 25000a21 72656373     tialised!..%scer
 8094a24:	76202e74 69737265 20206e6f 3a202020     t. version     :
 8094a34:	0a642520 73732500 61697265 756e206c      %d..%sserial nu
 8094a44:	7265626d 20202020 00203a20 6973250a     mber     : ..%si
 8094a54:	65757373 616e2072 2020656d 20202020     ssuer name      
 8094a64:	00203a20 7373250a 656a6275 6e207463      : ..%ssubject n
 8094a74:	20656d61 20202020 00203a20 6973250a     ame      : ..%si
 8094a84:	65757373 6f202064 2020206e 20202020     ssued  on       
 8094a94:	25203a20 2d643430 64323025 3230252d      : %04d-%02d-%02
 8094aa4:	30252064 253a6432 3a643230 64323025     d %02d:%02d:%02d
 8094ab4:	73250a00 69707865 20736572 20206e6f     ..%sexpires on  
 8094ac4:	20202020 203a2020 64343025 3230252d           : %04d-%02
 8094ad4:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
 8094ae4:	3230253a 250a0064 67697373 2064656e     :%02d..%ssigned 
 8094af4:	6e697375 20202067 3a202020 250a0020     using      : ..%
 8094b04:	312d2573 203a7338 62206425 00737469     s%-18s: %d bits.
 8094b14:	6273250a 63697361 6e6f6320 61727473     .%sbasic constra
 8094b24:	73746e69 43203a20 73253d41 6d202c00     ints : CA=%s., m
 8094b34:	705f7861 6c687461 253d6e65 250a0064     ax_pathlen=%d..%
 8094b44:	62757373 7463656a 746c6120 6d616e20     ssubject alt nam
 8094b54:	3a202065 250a0020 72656373 74202e74     e  : ..%scert. t
 8094b64:	20657079 20202020 3a202020 73250020     ype        : .%s
 8094b74:	204c5353 65696c43 2500746e 4c535373     SSL Client.%sSSL
 8094b84:	72655320 00726576 6d457325 006c6961      Server.%sEmail.
 8094b94:	624f7325 7463656a 67695320 676e696e     %sObject Signing
 8094ba4:	52732500 72657365 00646576 53537325     .%sReserved.%sSS
 8094bb4:	4143204c 45732500 6c69616d 00414320     L CA.%sEmail CA.
 8094bc4:	624f7325 7463656a 67695320 676e696e     %sObject Signing
 8094bd4:	00414320 6b73250a 75207965 65676173      CA..%skey usage
 8094be4:	20202020 20202020 00203a20 69447325              : .%sDi
 8094bf4:	61746967 6953206c 74616e67 00657275     gital Signature.
 8094c04:	6f4e7325 6552206e 69647570 6f697461     %sNon Repudiatio
 8094c14:	7325006e 2079654b 69636e45 72656870     n.%sKey Encipher
 8094c24:	746e656d 44732500 20617461 69636e45     ment.%sData Enci
 8094c34:	72656870 746e656d 4b732500 41207965     pherment.%sKey A
 8094c44:	65657267 746e656d 4b732500 43207965     greement.%sKey C
 8094c54:	20747265 6e676953 43732500 53204c52     ert Sign.%sCRL S
 8094c64:	006e6769 6e457325 68706963 4f207265     ign.%sEncipher O
 8094c74:	00796c6e 65447325 68706963 4f207265     nly.%sDecipher O
 8094c84:	00796c6e 6573250a 6b207478 75207965     nly..%sext key u
 8094c94:	65676173 20202020 00203a20 73257325     sage     : .%s%s
 8094ca4:	25732500 25000a73 6b6e5573 6e776f6e     .%s%s..%sUnknown
 8094cb4:	61657220 206e6f73 69687428 68732073      reason (this sh
 8094cc4:	646c756f 746f6e20 70616820 296e6570     ould not happen)
 8094cd4:	2e2a000a 2d2d2d00 45422d2d 204e4947     ..*..-----BEGIN 
 8094ce4:	54524543 43494649 2d455441 2d2d2d2d     CERTIFICATE-----
 8094cf4:	2d2d2d00 4e452d2d 45432044 46495452     .-----END CERTIF
 8094d04:	54414349 2d2d2d45 54002d2d 63206568     ICATE-----.The c
 8094d14:	69747265 61636966 76206574 64696c61     ertificate valid
 8094d24:	20797469 20736168 69707865 00646572     ity has expired.
 8094d34:	20656854 74726563 63696669 20657461     The certificate 
 8094d44:	20736168 6e656562 76657220 64656b6f     has been revoked
 8094d54:	73692820 206e6f20 52432061 5400294c      (is on a CRL).T
 8094d64:	63206568 69747265 61636966 43206574     he certificate C
 8094d74:	6f6d6d6f 614e206e 2820656d 20294e43     ommon Name (CN) 
 8094d84:	73656f64 746f6e20 74616d20 77206863     does not match w
 8094d94:	20687469 20656874 65707865 64657463     ith the expected
 8094da4:	004e4320 20656854 74726563 63696669      CN.The certific
 8094db4:	20657461 6e207369 6320746f 6572726f     ate is not corre
 8094dc4:	796c7463 67697320 2064656e 74207962     ctly signed by t
 8094dd4:	74206568 74737572 43206465 68540041     he trusted CA.Th
 8094de4:	52432065 7369204c 746f6e20 726f6320     e CRL is not cor
 8094df4:	74636572 7320796c 656e6769 79622064     rectly signed by
 8094e04:	65687420 75727420 64657473 00414320      the trusted CA.
 8094e14:	20656854 204c5243 65207369 72697078     The CRL is expir
 8094e24:	43006465 69747265 61636966 77206574     ed.Certificate w
 8094e34:	6d207361 69737369 4300676e 69747265     as missing.Certi
 8094e44:	61636966 76206574 66697265 74616369     ficate verificat
 8094e54:	206e6f69 20736177 70696b73 00646570     ion was skipped.
 8094e64:	6568744f 65722072 6e6f7361 61632820     Other reason (ca
 8094e74:	6562206e 65737520 79622064 72657620     n be used by ver
 8094e84:	20796669 6c6c6163 6b636162 68540029     ify callback).Th
 8094e94:	65632065 66697472 74616369 61762065     e certificate va
 8094ea4:	6964696c 73207974 74726174 6e692073     lidity starts in
 8094eb4:	65687420 74756620 00657275 20656854      the future.The 
 8094ec4:	204c5243 66207369 206d6f72 20656874     CRL is from the 
 8094ed4:	75747566 55006572 65676173 656f6420     future.Usage doe
 8094ee4:	6f6e2073 616d2074 20686374 20656874     s not match the 
 8094ef4:	5579656b 65676173 74786520 69736e65     keyUsage extensi
 8094f04:	55006e6f 65676173 656f6420 6f6e2073     on.Usage does no
 8094f14:	616d2074 20686374 20656874 65747865     t match the exte
 8094f24:	6465646e 5579654b 65676173 74786520     ndedKeyUsage ext
 8094f34:	69736e65 55006e6f 65676173 656f6420     ension.Usage doe
 8094f44:	6f6e2073 616d2074 20686374 20656874     s not match the 
 8094f54:	6543736e 79547472 65206570 6e657478     nsCertType exten
 8094f64:	6e6f6973 65685400 72656320 69666974     sion.The certifi
 8094f74:	65746163 20736920 6e676973 77206465     cate is signed w
 8094f84:	20687469 75206e61 6363616e 61747065     ith an unaccepta
 8094f94:	20656c62 68736168 6854002e 65632065     ble hash..The ce
 8094fa4:	66697472 74616369 73692065 67697320     rtificate is sig
 8094fb4:	2064656e 68746977 206e6120 63616e75     ned with an unac
 8094fc4:	74706563 656c6261 204b5020 20676c61     ceptable PK alg 
 8094fd4:	20676528 20415352 45207376 41534443     (eg RSA vs ECDSA
 8094fe4:	54002e29 63206568 69747265 61636966     )..The certifica
 8094ff4:	69206574 69732073 64656e67 74697720     te is signed wit
 8095004:	6e612068 616e7520 70656363 6c626174     h an unacceptabl
 8095014:	656b2065 65282079 61622067 75632064     e key (eg bad cu
 8095024:	2c657672 41535220 6f6f7420 6f687320     rve, RSA too sho
 8095034:	2e297472 65685400 4c524320 20736920     rt)..The CRL is 
 8095044:	6e676973 77206465 20687469 75206e61     signed with an u
 8095054:	6363616e 61747065 20656c62 68736168     nacceptable hash
 8095064:	6854002e 52432065 7369204c 67697320     ..The CRL is sig
 8095074:	2064656e 68746977 206e6120 63616e75     ned with an unac
 8095084:	74706563 656c6261 204b5020 20676c61     ceptable PK alg 
 8095094:	20676528 20415352 45207376 41534443     (eg RSA vs ECDSA
 80950a4:	54002e29 43206568 69204c52 69732073     )..The CRL is si
 80950b4:	64656e67 74697720 6e612068 616e7520     gned with an una
 80950c4:	70656363 6c626174 656b2065 65282079     cceptable key (e
 80950d4:	61622067 75632064 2c657672 41535220     g bad curve, RSA
 80950e4:	6f6f7420 6f687320 2e297472 00000000      too short).....

080950f4 <mbedtls_x509_crt_profile_suiteb>:
 80950f4:	00000060 0000000a 00000000 00000000     `...............

08095104 <CSWTCH.205>:
 8095104:	05040302 696c6306 20746e65 696e6966     .....client fini
 8095114:	64656873 72657300 20726576 696e6966     shed.server fini
 8095124:	64656873 73616d00 20726574 72636573     shed.master secr
 8095134:	6b007465 65207965 6e617078 6e6f6973     et.key expansion
 8095144:	4c535300 302e3376 534c5400 302e3176     .SSLv3.0.TLSv1.0
 8095154:	534c5400 312e3176 534c5400 322e3176     .TLSv1.1.TLSv1.2
 8095164:	00000000                                ....

08095168 <_ZL18mfl_code_to_length>:
 8095168:	00002000 00000200 00000400 00000800     . ..............
 8095178:	00001000 61766e69 2064696c 00004b50     ....invalid PK..

08095188 <_ZL1K>:
 8095188:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
 8095198:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
 80951a8:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
 80951b8:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
 80951c8:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
 80951d8:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
 80951e8:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
 80951f8:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
 8095208:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
 8095218:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
 8095228:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
 8095238:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
 8095248:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
 8095258:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
 8095268:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
 8095278:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
 8095288:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
 8095298:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
 80952a8:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
 80952b8:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
 80952c8:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
 80952d8:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
 80952e8:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
 80952f8:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
 8095308:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
 8095318:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
 8095328:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
 8095338:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
 8095348:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
 8095358:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
 8095368:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
 8095378:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
 8095388:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
 8095398:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
 80953a8:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
 80953b8:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
 80953c8:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
 80953d8:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
 80953e8:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
 80953f8:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl
 8095408:	636f7250 7079542d 34203a65 434e452c     Proc-Type: 4,ENC
 8095418:	54505952 02004445 0b070503 1713110d     RYPTED..........
 8095428:	29251f1d 3b352f2b 4947433d 6159534f     ..%)+/5;=CGIOSYa
 8095438:	6d6b6765 89837f71 9d97958b b3ada7a3     egkmq...........
 8095448:	c5c1bfb5 e3dfd3c7 f1efe9e5 6d7473fb     .............stm
 8095458:	61000d61 000d7a74                       a..atz..

08095460 <_ZTV4File>:
	...
 8095468:	080800d7 08080165 080801a3 0808019d     ....e...........
 8095478:	080800bb 0808017d 08080177 08080171     ....}...w...q...

08095488 <_ZTV5SdFat>:
	...
 8095490:	080903df 080903d7 080903cf 080903c7     ................

080954a0 <_ZL15clientKeyCrtPem>:
 80954a0:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
 80954b0:	41434946 2d2d4554 202d2d2d 494d0a0d     FICATE----- ..MI
 80954c0:	54574449 6b414343 77416747 67414249     IDWTCCAkGgAwIBAg
 80954d0:	32515549 4168412f 522f497a 69475451     IUQ2/AhAzI/RQTGi
 80954e0:	466e7278 7569352f 7541336f 51447749     xrnF/5iuo3AuIwDQ
 80954f0:	6f4b4a59 7668495a 51414e63 0a0d4c45     YJKoZIhvcNAQEL..
 8095500:	77415142 4c465454 476b454d 45553141     BQAwTTFLMEkGA1UE
 8095510:	43787743 68315751 75396d65 6c644649     CwxCQW1hem9uIFdl
 8095520:	54426959 324a585a 6c4e5761 50427963     YiBTZXJ2aWNlcyBP
 8095530:	74465550 76705859 6a356962 67303262     PUFtYXpvbi5jb20g
 8095540:	57530a0d 694c6a35 56504d42 58596c4e     ..SW5jLiBMPVNlYX
 8095550:	47623052 31556755 32563951 47617a46     R0bGUgU1Q9V2FzaG
 8095560:	335a756c 69627652 56504442 424d5456     luZ3RvbiBDPVVTMB
 8095570:	54445834 444d3445 444f796b 544e3245     4XDTE4MDkyODE2NT
 8095580:	0a0d7a51 586f6c4e 35515444 7a49544d     Qz..NloXDTQ5MTIz
 8095590:	7a49544d 316b544e 776f564f 63456a48     MTIzNTk1OVowHjEc
 80955a0:	476f424d 45553141 54777741 54645651     MBoGA1UEAwwTQVdT
 80955b0:	766c4549 44424356 304a585a 705a5761     IElvVCBDZXJ0aWZp
 80955c0:	30463259 545a0a0d 53414343 51447749     Y2F0..ZTCCASIwDQ
 80955d0:	6f4b4a59 7668495a 51414e63 51424245     YJKoZIhvcNAQEBBQ
 80955e0:	67674441 44415045 51414343 6767436f     ADggEPADCCAQoCgg
 80955f0:	4d414245 65427278 50735554 395a4c6d     EBAMxrBeTUsPmLZ9
 8095600:	45595036 0a0d6b6a 41776762 74664364     6PYEjk..bgwAdCft
 8095610:	634c7170 2b416d41 545a752f 64414548     pqLcAmA+/uZTHEAd
 8095620:	646b4b2b 64387532 72385256 42394766     +Kkd2u8dVR8rfG9B
 8095630:	64385977 43715734 48455271 3641484f     wY8d4WqCqREHOHA6
 8095640:	774d7531 52794c6d 542b0a0d 58504f76     1uMwmLyR..+TvOPX
 8095650:	61544c4a 65746d36 567a3146 536f724a     JLTa6mteF1zVJroS
 8095660:	32526876 5a6d2f4c 3037524f 31424e77     vhR2L/mZOR70wNB1
 8095670:	6b433475 38356b52 556e7432 4f2f5830     u4CkRk582tnU0X/O
 8095680:	7151516d 754f4e2f 0a0d6d77 616b3663     mQQq/NOuwm..c6ka
 8095690:	71735948 644f7178 52336b32 7a414955     HYsqxqOd2k3RUIAz
 80956a0:	4862546f 372f3544 2f502b59 74752b30     oTbHD5/7Y+P/0+ut
 80956b0:	58664d57 37514f67 476e4b30 43674839     WMfXgOQ70KnG9HgC
 80956c0:	2f343266 5a795052 52796867 73320a0d     f24/RPyZghyR..2s
 80956d0:	54386a68 6d7a5a6d 566e5746 57644944     hj8TmZzmFWnVDIdW
 80956e0:	36666356 3779724b 344a664e 61455974     Vcf6Kry7NfJ4tYEa
 80956f0:	2b784261 53473849 49306570 78594e52     aBx+I8GSpe0IRNYx
 8095700:	457a4674 776d3078 54543756 0a0d7277     tFzEx0mwV7TTwr..
 8095710:	4151686f 70775837 4e7a6a64 35423365     ohQA7XwpdjzNe3B5
 8095720:	6e6f4b66 7a46726a 6c6a457a 574d4453     fKonjrFzzEjlSDMW
 8095730:	7333466d 4b4e3848 53754273 35766f67     mF3sH8NKsBuSgov5
 8095740:	72625066 6b39456e 434f6547 38346349     fPbrnE9kGeOCIc48
 8095750:	78780a0d 77414330 61414145 464d674e     ..xx0CAwEAAaNgMF
 8095760:	77487734 52564459 42426a30 6f467767     4wHwYDVR0jBBgwFo
 8095770:	69675541 56764f47 38464254 704e5550     AUgiGOvVTBF8PUNp
 8095780:	4f386462 4d724653 37563059 5148776b     bd8OSFrMY0V7kwHQ
 8095790:	0a0d4459 4f305256 45594242 36484446     YD..VR0OBBYEFDH6
 80957a0:	35465837 69527957 67416d6f 56567243     7XF5WyRiomAgCrVV
 80957b0:	2b765335 502f5a46 4777414d 64553141     5Sv+FZ/PMAwGA1Ud
 80957c0:	42457745 4351772f 7741414d 44596744     EwEB/wQCMAAwDgYD
 80957d0:	50305256 51410a0d 41422f48 67414451     VR0P..AQH/BAQDAg
 80957e0:	414d4165 53434730 49534771 51443362     eAMA0GCSqGSIb3DQ
 80957f0:	77434245 34414155 51414249 4d796441     EBCwUAA4IBAQAdyM
 8095800:	49795244 56307269 3761644f 77594931     DRyIir0VOda71IYw
 8095810:	71675432 0a0d5362 6b447a38 5552384c     2TgqbS..8zDkL8RU
 8095820:	616e4d72 30785549 36366973 71704b56     rMnaIUx0si66VKpq
 8095830:	4b655166 4476554b 6d724170 654c6a38     fQeKKUvDpArm8jLe
 8095840:	36436a4e 7753494f 54735553 455a7449     NjC6OISwSUsTItZE
 8095850:	4a746f47 39426b36 30590a0d 70594341     GotJ6kB9..Y0ACYp
 8095860:	36677370 36385834 4555525a 42396271     psg64X86ZRUEqb9B
 8095870:	4161692f 7a486b67 3678496b 68306238     /iaAgkHzkIx68b0h
 8095880:	6e445736 47394146 755a6757 4150766f     6WDnFA9GWgZuovPA
 8095890:	54544653 44384a6f 0a0d3539 69416531     SFTToJ8D95..1eAi
 80958a0:	62755a55 70504933 666b6e36 386c7350     UZub3IPp6nkfPsl8
 80958b0:	634b2b6c 396a6b56 2b784c79 4a4d6433     l+KcVkj9yLx+3dMJ
 80958c0:	422b7170 72513633 41564a76 48423979     pq+B36QrvJVAy9BH
 80958d0:	4e734e61 38344d46 48636c45 2b4f0a0d     aNsNFM48ElcH..O+
 80958e0:	5949394a 672f796b 4a457944 784b5241     J9IYky/gDyEJARKx
 80958f0:	63444234 6f417574 33506b6b 472f4c52     4BDctuAokkP3RL/G
 8095900:	4e382f6a 4c4c584b 75362b67 64434d30     j/8NKXLLg+6u0MCd
 8095910:	346b3147 65486958 3243656a 0a0d7634     G1k4XiHejeC24v..
 8095920:	5a51476b 55374b4f 675a7461 2b504735     kGQZOK7UatZg5GP+
 8095930:	64646d6f 65514534 376a3436 77465570     omdd4EQe64j7pUFw
 8095940:	4b776e6d 57505a55 4b617877 39623264     mnwKUZPWwxaKd2b9
 8095950:	6633474d 4b4e744c 54427341 2d2d0a0d     MG3fLtNKAsBT..--
 8095960:	452d2d2d 4320444e 49545245 41434946     ---END CERTIFICA
 8095970:	2d2d4554 002d2d2d                       TE-----.

08095978 <_ZL18amazonIoTRootCaPem>:
 8095978:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
 8095988:	41434946 2d2d4554 202d2d2d 494d0a0d     FICATE----- ..MI
 8095998:	7a304549 37414343 77416775 67414249     IE0zCCA7ugAwIBAg
 80959a8:	4e475149 696e5272 4c36395a 56494b74     IQGNrRniZ96LtKIV
 80959b8:	477a4e6a 6a533773 67424e41 6b68716b     jNzGs7SjANBgkqhk
 80959c8:	77394769 51414230 44414655 0a0d4243     iG9w0BAQUFADCB..
 80959d8:	4c456a79 476b414d 45553141 434d6842     yjELMAkGA1UEBhMC
 80959e8:	784d5656 56417a46 564e6742 546f4142     VVMxFzAVBgNVBAoT
 80959f8:	6c5a6c44 546c6d63 75645761 4a42434c     DlZlcmlTaWduLCBJ
 8095a08:	754d6d62 7738524d 44595148 4c515156     bmMuMR8wHQYDVQQL
 8095a18:	78450a0d 585a575a 3255704a 69626e6c     ..ExZWZXJpU2lnbi
 8095a28:	6e635542 43647a56 585a4f42 33623352     BUcnVzdCBOZXR3b3
 8095a38:	544d724a 414f776f 51564459 7a454c51     JrMTowOAYDVQQLEz
 8095a48:	79596f45 6a4d676b 694e7741 585a5742     EoYykgMjAwNiBWZX
 8095a58:	0a0d704a 6e6c3255 67776962 6a355753     Jp..U2lnbiwgSW5j
 8095a68:	7441694c 765a4549 68426963 6f525864     LiAtIEZvciBhdXRo
 8095a78:	704a3362 6b566d65 7a564849 7642535a     b3JpemVkIHVzZSBv
 8095a88:	35786d62 7755554d 44597751 44515156     bmx5MUUwQwYDVQQD
 8095a98:	57787a45 585a0a0d 3255704a 69626e6c     EzxW..ZXJpU2lnbi
 8095aa8:	47624442 79637a46 46497a41 6d593142     BDbGFzcyAzIFB1Ym
 8095ab8:	79597078 6d635142 5859746c 4549354a     xpYyBQcmltYXJ5IE
 8095ac8:	6e636c4e 6d5a7052 58596a6c 32627052     NlcnRpZmljYXRpb2
 8095ad8:	58516734 0a0d3056 79394761 35525861     4gQXV0..aG9yaXR5
 8095ae8:	67304349 77557a52 4e636848 7859444d     IC0gRzUwHhcNMDYx
 8095af8:	3441544d 7741444d 7741444d 4e636857     MTA4MDAwMDAwWhcN
 8095b08:	77597a4d 32457a4e 314d6a4d 3555544f     MzYwNzE2MjM1OTU5
 8095b18:	42436a57 4c456a79 414d0a0d 3141476b     WjCByjEL..MAkGA1
 8095b28:	68424555 5656434d 7a46784d 67425641     UEBhMCVVMxFzAVBg
 8095b38:	4142564e 6c44546f 6d636c5a 5761546c     NVBAoTDlZlcmlTaW
 8095b48:	434c7564 6d624a42 524d754d 51487738     duLCBJbmMuMR8wHQ
 8095b58:	51564459 78454c51 0a0d575a 704a585a     YDVQQLExZW..ZXJp
 8095b68:	6e6c3255 55426962 7a566e63 4f424364     U2lnbiBUcnVzdCBO
 8095b78:	3352585a 724a3362 776f544d 4459414f     ZXR3b3JrMTowOAYD
 8095b88:	4c515156 6f457a45 676b7959 77416a4d     VQQLEzEoYykgMjAw
 8095b98:	5742694e 704a585a 6e6c3255 69620a0d     NiBWZXJpU2ln..bi
 8095ba8:	57536777 694c6a35 45497441 6963765a     wgSW5jLiAtIEZvci
 8095bb8:	58646842 33626f52 6d65704a 48496b56     BhdXRob3JpemVkIH
 8095bc8:	535a7a56 6d627642 554d3578 77517755     VzZSBvbmx5MUUwQw
 8095bd8:	51564459 7a454451 585a5778 0a0d704a     YDVQQDEzxWZXJp..
 8095be8:	6e6c3255 44426962 7a464762 7a417963     U2lnbiBDbGFzcyAz
 8095bf8:	31424649 70786d59 51427959 746c6d63     IFB1YmxpYyBQcmlt
 8095c08:	354a5859 6c4e4549 70526e63 6a6c6d5a     YXJ5IENlcnRpZmlj
 8095c18:	70525859 67343262 30565851 79394761     YXRpb24gQXV0aG9y
 8095c28:	58610a0d 43493552 7a526730 67677755     ..aXR5IC0gRzUwgg
 8095c38:	414d6945 53434730 49534771 51443362     EiMA0GCSqGSIb3DQ
 8095c48:	51414245 34414155 77444249 67677741     EBAQUAA4IBDwAwgg
 8095c58:	6f414b45 51414249 414a7643 584b4967     EKAoIBAQCvJAgIKX
 8095c68:	0a0d316f 4d416d6e 4c647571 6337304f     o1..nmAMqudLO07c
 8095c78:	38774c66 37795252 2b442b4b 354c514b     fLw8RRy7K+D+KQL5
 8095c88:	6a697756 5655495a 78582f4a 78676372     VwijZIUVJ/Xxrcgx
 8095c98:	69305669 71714336 7a4b6b70 35692f6a     iV0i6CqqpkKzj/i5
 8095ca8:	78656256 30740a0d 6f2f7a75 31422b39     Vbex..t0uz/o9+B1
 8095cb8:	30377366 6d5a6250 63595649 61446739     fs70PbZmIVYc9gDa
 8095cc8:	76335954 3277676a 56504949 30365451     TY3vjgw2IIPVQT60
 8095cd8:	56574b6e 754a4653 786a7255 2f366675     nKWVSFJuUrjxuf6/
 8095ce8:	636b6857 0a0d7a49 44686453 53703259     WhkcIz..SdhDY2pS
 8095cf8:	504b3953 52424836 4a476454 48765861     S9KP6HBRTdGJaXvH
 8095d08:	7a615063 304a4233 64743332 54623153     cPaz3BJ023tdS1bT
 8095d18:	5638726c 77473664 6c494b39 63387138     lr8Vd6Gw9KIl8q8c
 8095d28:	59636d6b 47516635 4f420a0d 6575512b     kmcY5fQG..BO+Que
 8095d38:	4e354151 52743630 72412f6e 4f503072     QA5N06tRn/Arr0PO
 8095d48:	2b696737 2b693373 3631307a 7639797a     7gi+s3i+z016zy9v
 8095d58:	39723941 546b3131 52485a4d 33794178     A9r911kTMZHRxAy3
 8095d68:	53476b51 52325447 0a0d2b54 53704372     QkGSGT2RT+..rCpS
 8095d78:	562f3478 6b6e4542 484e576a 70784469     x4/VBEnkjWNHiDxp
 8095d88:	2b763867 72303752 462f6b66 4f34616c     g8v+R70rfk/Fla4O
 8095d98:	5254646e 6e423851 554d2b63 6c374843     ndTRQ8Bnc+MUCH7l
 8095da8:	7a393550 4b4d4475 2f30317a 494e0a0d     P59zuDMKz10/..NI
 8095db8:	75695765 43365435 67415655 4141424d     eWiu5T6CUVAgMBAA
 8095dc8:	62676a47 61677749 77447738 52564459     GjgbIwga8wDwYDVR
 8095dd8:	51415430 41422f48 77417755 7a2f4245     0TAQH/BAUwAwEB/z
 8095de8:	67424f41 5148564e 66414238 0a0d4538     AOBgNVHQ8BAf8E..
 8095df8:	434d4142 77595141 49595162 4259774b     BAMCAQYwbQYIKwYB
 8095e08:	48555142 45775141 66425459 6732566f     BQUHAQwEYTBfoV2g
 8095e18:	5a427a57 7763464d 4a595256 68315761     WzBZMFcwVRYJaW1h
 8095e28:	7655325a 6d6c325a 7745434d 48417a48     Z2UvZ2lmMCEwHzAH
 8095e38:	67420a0d 67447255 6747434d 2b6a5551     ..BgUrDgMCGgQUj+
 8095e48:	6f475458 596a7361 38777235 7461412b     XTGoasjY5rw8+Aat
 8095e58:	43474952 53473778 524a7734 48616a59     RIGCx7GS4wJRYjaH
 8095e68:	44633052 324c766f 325a7678 6d647538     R0cDovL2xvZ28udm
 8095e78:	0a0d7956 704e5861 7534325a 74393259     Vy..aXNpZ24uY29t
 8095e88:	7a5a334c 6e394762 6e357962 77595761     L3ZzbG9nby5naWYw
 8095e98:	44595148 4f305256 45594242 542f4846     HQYDVR0OBBYEFH/T
 8095ea8:	4366615a 37796533 4a414438 354d3038     ZafC3ey78DAJ80M5
 8095eb8:	764b672b 7a4d0a0d 414d7a45 53434730     +gKv..MzEzMA0GCS
 8095ec8:	49534771 51443362 51424245 34414155     qGSIb3DQEBBQUAA4
 8095ed8:	51414249 454a5443 3258776f 4232504c     IBAQCTJEowX2LP2B
 8095ee8:	7a4c5971 4a337133 5876746b 58703266     qYLz3q3JktvXf2pX
 8095ef8:	4f4f696b 0a0d457a 34423670 69317145     kiOOzE..p6B4Eq1i
 8095f08:	77566b44 6e584d5a 7459326c 2b6c416d     DkVwZMXnl2YtmAl+
 8095f18:	572f3658 6c68437a 71476738 48704243     X6/WzChl8gGqCBpH
 8095f28:	356e7633 614a4a66 676b4743 2b6b6444     3vn5fJJaCGkgDdk+
 8095f38:	38345762 59375744 67350a0d 42515261     bW48DW7Y..5gaRQB
 8095f48:	4d2b3569 39337448 75714274 4d495743     i5+MHt39tBquCWIM
 8095f58:	425a4e6e 63673455 7137556d 514b454b     nNZBU4gcmU7qKEKQ
 8095f68:	34625473 4e446237 74416c30 78696b75     sTb47bDN0lAtukix
 8095f78:	6b30456c 57423646 0a0d4b6c 67394557     lE0kF6BWlK..WE9g
 8095f88:	43366e79 43736761 58556971 6258624f     yn6CagsCqiUXObXb
 8095f98:	45652b66 5671535a 47327269 42366c33     f+eEZSqVir2G3l6B
 8095fa8:	744d6f46 657a4d45 4369612f 6f306d4b     FoMtEMze/aiCKm0o
 8095fb8:	4c307748 6e584f78 5a596947 66340a0d     Hw0LxOXnGiYZ..4f
 8095fc8:	78625251 666c3143 67516e7a 38327955     QRbxC1lfznQgUy28
 8095fd8:	56556436 70746f34 31304636 58707676     6dUV4otp6F01vvpX
 8095fe8:	48514631 77744f4b 67447235 7a4d3762     1FQHKOtw5rDgb7Mz
 8095ff8:	62634956 344a6469 565a4576 0a0d4e38     VIcbidJ4vEZV8N..
 8096008:	63616e68 32724852 327a566c 49495458     hnacRHr2lVz2XTII
 8096018:	5552364d 2f676874 797a4661 46716b51     M6RUthg/aFzyQkqF
 8096028:	4453464f 6f483958 734b504c 6f616445     OFSDX9HoLPKsEdao
 8096038:	714e5737 2d2d0a0d 452d2d2d 4320444e     7WNq..-----END C
 8096048:	49545245 41434946 2d2d4554 002d2d2d     ERTIFICATE-----.

08096058 <_ZL12clientKeyPem>:
 8096058:	2d2d2d2d 4745422d 52204e49 50204153     -----BEGIN RSA P
 8096068:	41564952 4b204554 2d2d5945 202d2d2d     RIVATE KEY----- 
 8096078:	494d0a0d 776f4549 41414249 5141434b     ..MIIEowIBAAKCAQ
 8096088:	477a4145 4e354673 592b7753 6f336e74     EAzGsF5NSw+Ytn3o
 8096098:	4f536739 41447552 2b4a3042 746f6d32     9gSORuDAB0J+2mot
 80960a8:	44594377 6c352b37 4251634d 52713433     wCYD7+5lMcQB34qR
 80960b8:	0a0d6133 56317837 38747948 42483062     3a..7x1VHyt8b0HB
 80960c8:	6833786a 704b6f61 34635145 57724463     jx3haoKpEQc4cDrW
 80960d8:	59437a34 35484a76 3934384f 4e746b63     4zCYvJH5O849cktN
 80960e8:	31617172 4e585834 68756d55 48462b4b     rqa14XXNUmuhK+FH
 80960f8:	5a2b7659 356b0a0d 41547648 37574830     Yv+Z..k5HvTA0HW7
 8096108:	47524b67 617a6e54 52546432 5a363866     gKRGTnza2dTRf86Z
 8096118:	38724342 43373630 52717a5a 7969646f     BCr8067CZzqRodiy
 8096128:	356f4772 64546133 44675146 734e684f     rGo53aTdFQgDOhNs
 8096138:	2f6e5063 0a0d6a74 542f2f34 59313636     cPn/tj..4//T661Y
 8096148:	41653978 51764435 30626371 2f4a4165     x9eA5DvQqcb0eAJ/
 8096158:	45396a62 436d4a2f 61484a48 78504779     bj9E/JmCHJHayGPx
 8096168:	4f6e5a4f 64615659 31684d55 2f78565a     OZnOYVadUMh1ZVx/
 8096178:	4c76716f 6e383173 31690a0d 6f705267     oqvLs18n..i1gRpo
 8096188:	6a344848 6c4b5a77 45685137 30476a31     HH4jwZKl7QhE1jG0
 8096198:	48544d58 58426253 43504e74 41466975     XMTHSbBXtNPCuiFA
 80961a8:	43667444 4d50326c 48633731 6971386c     DtfCl2PM17cHl8qi
 80961b8:	58734f65 4f534d50 0a0d4956 5961784d     eOsXPMSOVI..MxaY
 80961c8:	66776558 77713077 434b3547 386c2f69     Xewfw0qwG5KCi/l8
 80961d8:	63757539 5a513254 68493434 487a6a7a     9uucT2QZ44IhzjzH
 80961e8:	44495148 42415141 42496f41 55694841     HQIDAQABAoIBAHiU
 80961f8:	45764c51 51676b67 786f5535 4c420a0d     QLvEgkgQ5Uox..BL
 8096208:	666c3669 535a6164 7855516f 68394a55     i6lfdaZSoQUxUJ9h
 8096218:	41315454 6b7a4551 71343773 6f515076     TT1AQEzks74qvPQo
 8096228:	2f6d3939 6b38774a 41586d75 5a745269     99m/Jw8kumXAiRtZ
 8096238:	7452672f 6b685734 78556449 0a0d6368     /gRt4WhkIdUxhc..
 8096248:	54774257 434c7864 616a7843 70356f4e     WBwTdxLCCxjaNo5p
 8096258:	4578434a 6c4d7345 474c6358 39646864     JCxEEsMlXcLGdhd9
 8096268:	4d666863 57323349 65706479 41417961     chfMI32WydpeayAA
 8096278:	7a4d5937 7a412f66 746e4330 32684977     7YMzf/Az0CntwIh2
 8096288:	4f350a0d 616f6254 3544456f 44744231     ..5OTboaoED51BtD
 8096298:	4b4a6235 61623252 4b7a5266 4448457a     5bJKR2bafRzKzEHD
 80962a8:	6b4d4462 447a3962 64374779 7a683976     bDMkb9zDyG7dv9hz
 80962b8:	33705643 5332637a 2f4f615a 542f3077     CVp3zc2SZaO/w0/T
 80962c8:	0a0d364b 78434d66 6f4f5144 4c587739     K6..fMCxDQOo9wXL
 80962d8:	612f7238 304f716d 70434a6c 76447550     8r/amqO0lJCpPuDv
 80962e8:	494b4973 6c394161 61316170 4a486d77     sIKIaA9lpa1awmHJ
 80962f8:	596a526b 6c6f3463 41567a31 394b5144     kRjYc4ol1zVADQK9
 8096308:	31707a54 38340a0d 4e474d35 46523048     Tzp1..485MGNH0RF
 8096318:	57357a6e 2b413769 562f7533 41362b78     nz5Wi7A+3u/Vx+6A
 8096328:	43435171 444a4a34 50414c49 3649766b     qQCC4JJDILAPkvI6
 8096338:	43675069 67696170 34546a73 43536d43     iPgCpaigsjT4CmSC
 8096348:	5168316b 0a0d6a6d 56713561 436b5837     k1hQmj..a5qV7XkC
 8096358:	41455967 4c78462b 46704973 746e6152     gYEA+FxLsIpFRant
 8096368:	482f4d6e 58665933 5a516663 32364171     nM/H3YfXcfQZqA62
 8096378:	4b59756c 6357334a 56545438 64396e76     luYKJ3Wc8TTVvn9d
 8096388:	4d742f56 6c5a4f67 61750a0d 43556545     V/tMgOZl..uaEeUC
 8096398:	39374774 3743472b 6d717672 4c4a3744     tG79+GC7rvqmD7JL
 80963a8:	504e426c 2f2f2f73 685a3539 68713159     lBNPs///95ZhY1qh
 80963b8:	2b764b5a 416f487a 30727859 62564a41     ZKv+zHoAYxr0AJVb
 80963c8:	34783337 50333736 0a0d726e 54367354     73x4673Pnr..Ts6T
 80963d8:	61394b4b 53504633 324c7552 64395948     KK9a3FPSRuL2HY9d
 80963e8:	35653575 4a6a554a 4c474259 626d4f37     u5e5JUjJYBGL7Omb
 80963f8:	756e2b43 4a757879 31324471 42435132     C+nuyxuJqD212QCB
 8096408:	434d4134 41455967 30537230 68530a0d     4AMCgYEA0rS0..Sh
 8096418:	325a5477 4b795156 6d386d61 44684e33     wTZ2VQyKam8m3NhD
 8096428:	47315141 53733156 526d4f65 54543379     AQ1GV1sSeOmRy3TT
 8096438:	316e3645 47313769 3165416f 3839436a     E6n1i71GoAe1jC98
 8096448:	6e336a31 75497435 374e6145 0a0d557a     1j3n5tIuEaN7zU..
 8096458:	64696c63 6347364f 706d7159 55314b37     clidO6GcYqmp7K1U
 8096468:	72795157 4b4b5833 52356139 6c787169     WQyr3XKK9a5Riqxl
 8096478:	51472f6f 725a547a 342b4b76 5165366c     o/GQzTZrvK+4l6eQ
 8096488:	6b6b4763 334b4151 6c6d7979 316f6565     cGkkQAK3yymleeo1
 8096498:	55780a0d 69797a6b 70536e6f 414d5555     ..xUkzyionSpUUMA
 80964a8:	74547971 4d397738 66364735 67374d6b     qyTt8w9M5G6fkM7g
 80964b8:	6c764553 6c345949 59674338 32394145     SEvlIY4l8CgYEA92
 80964c8:	5367436e 7a6e4e6b 53474d75 666e6f59     nCgSkNnzuMGSYonf
 80964d8:	0a0d416a 71584b57 722b536c 73493646     jA..WKXqlS+rF6Is
 80964e8:	32685778 57677849 514c6f51 462f3138     xWh2IxgWQoLQ81/F
 80964f8:	52643773 6e325636 51674150 6c39387a     s7dR6V2nPAgQz89l
 8096508:	7a4f7630 66423534 494e4251 47585538     0vOz45BfQBNI8UXG
 8096518:	676b5057 2b370a0d 754c3644 344a736d     WPkg..7+D6LumsJ4
 8096528:	65787976 4377466a 64355462 654d7261     vyxejFwCbT5darMe
 8096538:	634a774a 5261572f 77494469 30516c6d     JwJc/WaRiDIwmlQ0
 8096548:	52634235 5a515371 78726270 61675443     5BcRqSQZpbrxCTga
 8096558:	43394441 0a0d6d38 2f6c4b72 7477704b     AD9C8m..rKl/Kpwt
 8096568:	57706170 634c514e 674f4530 43386748     papWNQLc0EOgHg8C
 8096578:	4e415967 666e332b 672b5256 704f2b67     gYAN+3nfVR+gg+Op
 8096588:	6c325166 46357346 3937466b 58495569     fQ2lFs5FkF79iUIX
 8096598:	68584849 4d765443 70760a0d 48565343     IHXhCTvM..vpCSVH
 80965a8:	33636151 5276574a 35447277 5a437145     Qac3JWvRwrD5EqCZ
 80965b8:	6361362b 546c772b 4436504a 6f342b74     +6ac+wlTJP6Dt+4o
 80965c8:	6f4c626d 4a4f6445 58545a39 6750324c     mbLoEdOJ9ZTXL2Pg
 80965d8:	776f6b79 784d3832 0a0d4861 7463356d     ykow28MxaH..m5ct
 80965e8:	74677756 32664550 414d476f 4b6e7159     VwgtPEf2oGMAYqnK
 80965f8:	4351614b 4e2f6c73 4c494679 75466f4a     KaQCsl/NyFILJoFu
 8096608:	4e2f2f54 5a6b6a66 38767775 496d6547     T//NfjkZuwv8GemI
 8096618:	46755578 48615561 69745059 64470a0d     xUuFaUaHYPti..Gd
 8096628:	77355761 4467424b 4661364c 43524633     aW5wKBgDL6aF3FRC
 8096638:	4f59774f 5a6e4e73 354a6d58 76617149     OwYOsNnZXmJ5Iqav
 8096648:	4c647a30 4e676362 4e764e51 4935794d     0zdLbcgNQNvNMy5I
 8096658:	754b5258 69464a37 532b3373 0a0d6931     XRKu7JFis3+S1i..
 8096668:	4664657a 6d63666e 2b704741 45534271     zedFnfcmAGp+qBSE
 8096678:	6a766457 68384743 304b784a 6d573863     WdvjCG8hJxK0c8Wm
 8096688:	3048702f 67666434 3656426e 46395361     /pH04dfgnBV6aS9F
 8096698:	4f4b6155 6647436c 6c6b3336 75796651     UaKOlCGf63klQfyu
 80966a8:	2b4a0a0d 32455236 50654b53 6872634a     ..J+6RE2SKePJcrh
 80966b8:	36714f46 4768666f 35704336 56777449     FOq6ofhG6Cp5ItwV
 80966c8:	42446e48 3352334f 734a7537 73427852     HnDBO3R37uJsRxBs
 80966d8:	6267796b 0a0d4a43 2d2d2d2d 444e452d     kygbCJ..-----END
 80966e8:	41535220 49525020 45544156 59454b20      RSA PRIVATE KEY
 80966f8:	2d2d2d2d 0000002d                       -----...

08096700 <_ZTV8SPIClass>:
	...
 8096708:	08090b25 08090b27                       %...'...

08096710 <_ZL14clock_divisors>:
 8096710:	18100800 38302820                       .... (08

08096718 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 8096720:	08090ca1 08090ca7 08090d9b 08090cb3     ................
 8096730:	08090ca3                                ....

08096734 <_ZTV9TCPClient>:
	...
 809673c:	080820dd 08082111 08090c73 0809102d     . ...!..s...-...
 809674c:	08090e19 08090d67 08090d39 08090c89     ....g...9.......
 809675c:	08090f49 08090cb9 08090db7 08090e95     I...............
 809676c:	08091051 080910a3 08090c8d 006e616e     Q...........nan.
 809677c:	0066766f 00666e69 66006e6c 6564006e     ovf.inf.ln.fn.de
 809678c:	6c696174 000a0d00 30313025 5d002075     tail....%010u .]
 809679c:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 80967ac:	69250020 74656400 736c6961 00203d20      .%i.details = .
 80967bc:	64756162 72655300 006c6169 53425355     baud.Serial.USBS
 80967cc:	61697265 7000316c 6d617261 646d6300     erial1.param.cmd
 80967dc:	00646900 00646e68 6d727473 6c696600     .id.hnd.strm.fil
 80967ec:	766c0074 6461006c 6e614864 72656c64     t.lvl.addHandler
 80967fc:	6d657200 4865766f 6c646e61 65007265     .removeHandler.e
 809680c:	486d756e 6c646e61 00737265 4e4f534a     numHandlers.JSON
 809681c:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 809682c:	70706100 6e6f6e00 72740065 00656361     .app.none.trace.
 809683c:	6f666e69 72617700 7265006e 00726f72     info.warn.error.
 809684c:	696e6170 6c610063 005a006c 33302b25     panic.all.Z.%+03
 809685c:	30253a64 25007532 6d252d59 5464252d     d:%02u.%Y-%m-%dT
 809686c:	253a4825 53253a4d 61007a25 69746373     %H:%M:%S%z.ascti
 809687c:	0000656d                                me..

08096880 <_ZTV9IPAddress>:
	...
 8096888:	080916af 080916a1 080916a3              ............

08096894 <_ZTV9USBSerial>:
	...
 809689c:	08091725 08091769 08091743 080911c9     %...i...C.......
 80968ac:	0809173d 08091727 0809172f 08091763     =...'.../...c...
 80968bc:	08091737 08091721                       7...!...

080968c4 <_ZTVN5spark13CellularClassE>:
	...
 80968cc:	08091895                                ....

080968d0 <_ZN5spark7NetworkE>:
 80968d0:	20003ca4                                .<. 

080968d4 <_ZTV11USARTSerial>:
	...
 80968dc:	080902cd 080902cf 080918ff 080911c9     ................
 80968ec:	080918e7 080918f3 080918ed 080918f9     ................
 80968fc:	080918dd 080918e1                       ........

08096904 <_ZTV7TwoWire>:
	...
 809690c:	080919b5 080919ff 080919d7 080919b7     ................
 809691c:	080919df 080919e7 080919ef 080919f7     ................

0809692c <__sf_fake_stdin>:
	...

0809694c <__sf_fake_stdout>:
	...

0809696c <__sf_fake_stderr>:
	...

0809698c <link_const_variable_data_end>:
 809698c:	080802d5 	.word	0x080802d5
 8096990:	08080361 	.word	0x08080361
 8096994:	08080365 	.word	0x08080365
 8096998:	08080369 	.word	0x08080369
 809699c:	0808036d 	.word	0x0808036d
 80969a0:	080809ed 	.word	0x080809ed
 80969a4:	080809f1 	.word	0x080809f1
 80969a8:	08081009 	.word	0x08081009
 80969ac:	0808100d 	.word	0x0808100d
 80969b0:	08081011 	.word	0x08081011
 80969b4:	08081015 	.word	0x08081015
 80969b8:	080814df 	.word	0x080814df
 80969bc:	08081631 	.word	0x08081631
 80969c0:	08081cd1 	.word	0x08081cd1
 80969c4:	08081cf5 	.word	0x08081cf5
 80969c8:	08081cf9 	.word	0x08081cf9
 80969cc:	08082011 	.word	0x08082011
 80969d0:	08082015 	.word	0x08082015
 80969d4:	08082019 	.word	0x08082019
 80969d8:	080823d9 	.word	0x080823d9
 80969dc:	080902c9 	.word	0x080902c9
 80969e0:	080903bf 	.word	0x080903bf
 80969e4:	080903c3 	.word	0x080903c3
 80969e8:	08090491 	.word	0x08090491
 80969ec:	080906b1 	.word	0x080906b1
 80969f0:	08090c6d 	.word	0x08090c6d
 80969f4:	080914cd 	.word	0x080914cd
 80969f8:	080914dd 	.word	0x080914dd
 80969fc:	0809153d 	.word	0x0809153d
 8096a00:	080918a1 	.word	0x080918a1
 8096a04:	08091b11 	.word	0x08091b11
 8096a08:	08091b6d 	.word	0x08091b6d
 8096a0c:	08091be9 	.word	0x08091be9
 8096a10:	08091c6d 	.word	0x08091c6d
 8096a14:	08091d31 	.word	0x08091d31
 8096a18:	08091df5 	.word	0x08091df5

08096a1c <link_constructors_end>:
 8096a1c:	00000000 	.word	0x00000000
