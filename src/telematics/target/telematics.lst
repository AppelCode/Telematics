
D:/CAR/TelematicsLocal/CybeSe/Telematics/src/telematics/target/telematics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a78  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  08097a90  08097a90  00027a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  08097a98  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f8  20000400  08097a9c  00040400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000030c8  200004f8  200004f8  000504f8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08097b94  08097b94  00047b94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08097bbc  08097bbc  00047bbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001e51f6  00000000  00000000  00047bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002c8fd  00000000  00000000  0022cdb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004c964  00000000  00000000  002596b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00004090  00000000  00000000  002a6017  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006078  00000000  00000000  002aa0a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004ddf1  00000000  00000000  002b011f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000716c0  00000000  00000000  002fdf10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1022  00000000  00000000  0036f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000120cc  00000000  00000000  004205f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	c0 3d 09 08                                         .=..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f013 fa90 	bl	8093552 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f013 fab0 	bl	809359e <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08097a9c 	.word	0x08097a9c
 808004c:	200004f8 	.word	0x200004f8
 8080050:	200004f8 	.word	0x200004f8
 8080054:	200035c0 	.word	0x200035c0
 8080058:	200035c0 	.word	0x200035c0

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f012 f90b 	bl	8092278 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	080979d0 	.word	0x080979d0
 8080084:	08097a8c 	.word	0x08097a8c

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b818 	b.w	80800bc <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f8bd 	bl	808020c <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f012 b8ad 	b.w	80921f4 <_post_loop>

0808009a <_Znwj>:
 808009a:	f011 baed 	b.w	8091678 <malloc>

0808009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 808009e:	f011 baeb 	b.w	8091678 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f011 baf1 	b.w	8091688 <free>

080800a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80800a6:	f011 baef 	b.w	8091688 <free>

080800aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800aa:	7800      	ldrb	r0, [r0, #0]
 80800ac:	fab0 f080 	clz	r0, r0
 80800b0:	0940      	lsrs	r0, r0, #5
 80800b2:	4770      	bx	lr

080800b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b4:	2301      	movs	r3, #1
 80800b6:	7003      	strb	r3, [r0, #0]
 80800b8:	4770      	bx	lr
	...

080800bc <setup>:
unsigned char key[32];

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
int counter = 0;
void setup() {
 80800bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80800be:	b0e1      	sub	sp, #388	; 0x184

    
    Serial.begin(9600);
 80800c0:	f012 f9ac 	bl	809241c <_Z16_fetch_usbserialv>
 80800c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80800c8:	f012 f98e 	bl	80923e8 <_ZN9USBSerial5beginEl>
    delay(5000);
 80800cc:	f241 3088 	movw	r0, #5000	; 0x1388
 80800d0:	f012 f818 	bl	8092104 <delay>
    //os_mutex_lock(mqtt_mutex);
    RGB.color(255, 0, 0);
 80800d4:	2200      	movs	r2, #0
 80800d6:	4611      	mov	r1, r2
 80800d8:	20ff      	movs	r0, #255	; 0xff
 80800da:	f012 f82c 	bl	8092136 <_ZN8RGBClass5colorEiii>
    WITH_LOCK(Serial)
 80800de:	f012 f99d 	bl	809241c <_Z16_fetch_usbserialv>
	virtual void blockOnOverrun(bool);

#if PLATFORM_THREADING
	os_mutex_recursive_t get_mutex()
	{
		return os_mutex_recursive_t(system_internal(2, nullptr));
 80800e2:	2100      	movs	r1, #0
 80800e4:	2002      	movs	r0, #2
 80800e6:	f011 fa87 	bl	80915f8 <system_internal>
	}

	void lock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_lock(get_mutex());
 80800ea:	f011 f8fd 	bl	80912e8 <os_mutex_recursive_lock>
    {
        RGB.color(0, 255, 0);
 80800ee:	2200      	movs	r2, #0
 80800f0:	4610      	mov	r0, r2
 80800f2:	21ff      	movs	r1, #255	; 0xff
 80800f4:	f012 f81f 	bl	8092136 <_ZN8RGBClass5colorEiii>
        pinMode(D6,OUTPUT);
 80800f8:	2101      	movs	r1, #1
 80800fa:	2006      	movs	r0, #6
 80800fc:	f012 fb02 	bl	8092704 <pinMode>


        //sd_storage->write(dof->TEMP);
        //sd_storage->write('\n');
        Serial.println();
        secretStuff->generateKey();
 8080100:	4c2e      	ldr	r4, [pc, #184]	; (80801bc <setup+0x100>)
    RGB.color(255, 0, 0);
    WITH_LOCK(Serial)
    {
        RGB.color(0, 255, 0);
        pinMode(D6,OUTPUT);
        digitalWrite(D6,LOW);
 8080102:	2100      	movs	r1, #0
 8080104:	2006      	movs	r0, #6
 8080106:	f012 fb0e 	bl	8092726 <digitalWrite>
        //dof->getTemp();


        //sd_storage->write(dof->TEMP);
        //sd_storage->write('\n');
        Serial.println();
 808010a:	f012 f987 	bl	809241c <_Z16_fetch_usbserialv>
 808010e:	f011 ff13 	bl	8091f38 <_ZN5Print7printlnEv>
        secretStuff->generateKey();
 8080112:	6820      	ldr	r0, [r4, #0]
 8080114:	f010 fa4e 	bl	80905b4 <_ZN5Crypt11generateKeyEv>
        unsigned char output[128];
        unsigned char in[128];
        unsigned char put[128];

        memset(input, 0, 128);
        memset(output, 0, 128);
 8080118:	ad20      	add	r5, sp, #128	; 0x80
        unsigned char input[128];
        unsigned char output[128];
        unsigned char in[128];
        unsigned char put[128];

        memset(input, 0, 128);
 808011a:	2280      	movs	r2, #128	; 0x80
 808011c:	2100      	movs	r1, #0
 808011e:	4668      	mov	r0, sp
 8080120:	f013 fa3d 	bl	809359e <memset>
        memset(output, 0, 128);
        memset(in, 0, 128);
        memset(put, 0, 128);
 8080124:	af40      	add	r7, sp, #256	; 0x100
        unsigned char output[128];
        unsigned char in[128];
        unsigned char put[128];

        memset(input, 0, 128);
        memset(output, 0, 128);
 8080126:	2280      	movs	r2, #128	; 0x80
 8080128:	2100      	movs	r1, #0
 808012a:	4628      	mov	r0, r5
 808012c:	f013 fa37 	bl	809359e <memset>
        memset(in, 0, 128);
        memset(put, 0, 128);
 8080130:	2280      	movs	r2, #128	; 0x80
 8080132:	2100      	movs	r1, #0
 8080134:	4638      	mov	r0, r7
 8080136:	f013 fa32 	bl	809359e <memset>

        memcpy(input,"hello",strlen("hello"));
 808013a:	4b21      	ldr	r3, [pc, #132]	; (80801c0 <setup+0x104>)

        Serial.print("Encrypted Data: ");
        secretStuff->encryptData(input,output);
        for(int i = 0; i < 16; i++){
 808013c:	2600      	movs	r6, #0
        memset(input, 0, 128);
        memset(output, 0, 128);
        memset(in, 0, 128);
        memset(put, 0, 128);

        memcpy(input,"hello",strlen("hello"));
 808013e:	6818      	ldr	r0, [r3, #0]
 8080140:	791b      	ldrb	r3, [r3, #4]
 8080142:	9000      	str	r0, [sp, #0]
 8080144:	f88d 3004 	strb.w	r3, [sp, #4]

        Serial.print("Encrypted Data: ");
 8080148:	f012 f968 	bl	809241c <_Z16_fetch_usbserialv>
 808014c:	491d      	ldr	r1, [pc, #116]	; (80801c4 <setup+0x108>)
 808014e:	f011 feec 	bl	8091f2a <_ZN5Print5printEPKc>
        secretStuff->encryptData(input,output);
 8080152:	462a      	mov	r2, r5
 8080154:	4669      	mov	r1, sp
 8080156:	6820      	ldr	r0, [r4, #0]
 8080158:	f010 fa53 	bl	8090602 <_ZN5Crypt11encryptDataEPhS0_>
        for(int i = 0; i < 16; i++){
            Serial.printf("%d",output[i]);
 808015c:	f012 f95e 	bl	809241c <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080160:	5dab      	ldrb	r3, [r5, r6]
 8080162:	4a19      	ldr	r2, [pc, #100]	; (80801c8 <setup+0x10c>)
 8080164:	2100      	movs	r1, #0

        memcpy(input,"hello",strlen("hello"));

        Serial.print("Encrypted Data: ");
        secretStuff->encryptData(input,output);
        for(int i = 0; i < 16; i++){
 8080166:	3601      	adds	r6, #1
 8080168:	f011 ff28 	bl	8091fbc <_ZN5Print11printf_implEbPKcz>
 808016c:	2e10      	cmp	r6, #16
 808016e:	d1f5      	bne.n	808015c <setup+0xa0>
            Serial.printf("%d",output[i]);
        }

        Serial.println();
 8080170:	f012 f954 	bl	809241c <_Z16_fetch_usbserialv>
 8080174:	f011 fee0 	bl	8091f38 <_ZN5Print7printlnEv>

        Serial.print("Decrypted Data: ");
 8080178:	f012 f950 	bl	809241c <_Z16_fetch_usbserialv>
 808017c:	4913      	ldr	r1, [pc, #76]	; (80801cc <setup+0x110>)
 808017e:	f011 fed4 	bl	8091f2a <_ZN5Print5printEPKc>
        secretStuff->decryptData(output,put);
 8080182:	6820      	ldr	r0, [r4, #0]
 8080184:	463a      	mov	r2, r7
 8080186:	4629      	mov	r1, r5
 8080188:	f010 fa48 	bl	809061c <_ZN5Crypt11decryptDataEPhS0_>
        for(int i = 0; i < 16; i++){
 808018c:	2400      	movs	r4, #0
            Serial.printf("%c",put[i]);
 808018e:	f012 f945 	bl	809241c <_Z16_fetch_usbserialv>
 8080192:	5d3b      	ldrb	r3, [r7, r4]
 8080194:	4a0e      	ldr	r2, [pc, #56]	; (80801d0 <setup+0x114>)
 8080196:	2100      	movs	r1, #0

        Serial.println();

        Serial.print("Decrypted Data: ");
        secretStuff->decryptData(output,put);
        for(int i = 0; i < 16; i++){
 8080198:	3401      	adds	r4, #1
 808019a:	f011 ff0f 	bl	8091fbc <_ZN5Print11printf_implEbPKcz>
 808019e:	2c10      	cmp	r4, #16
 80801a0:	d1f5      	bne.n	808018e <setup+0xd2>
            Serial.printf("%c",put[i]);
        }
        Serial.println();
 80801a2:	f012 f93b 	bl	809241c <_Z16_fetch_usbserialv>
 80801a6:	f011 fec7 	bl	8091f38 <_ZN5Print7printlnEv>
	virtual void blockOnOverrun(bool);

#if PLATFORM_THREADING
	os_mutex_recursive_t get_mutex()
	{
		return os_mutex_recursive_t(system_internal(2, nullptr));
 80801aa:	2100      	movs	r1, #0
 80801ac:	2002      	movs	r0, #2
 80801ae:	f011 fa23 	bl	80915f8 <system_internal>
	}

	void unlock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_unlock(get_mutex());
 80801b2:	f011 f8a1 	bl	80912f8 <os_mutex_recursive_unlock>

    }
    


}   
 80801b6:	b061      	add	sp, #388	; 0x184
 80801b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80801ba:	bf00      	nop
 80801bc:	200028ac 	.word	0x200028ac
 80801c0:	08093dd4 	.word	0x08093dd4
 80801c4:	08093dda 	.word	0x08093dda
 80801c8:	08093f26 	.word	0x08093f26
 80801cc:	08093deb 	.word	0x08093deb
 80801d0:	08093dfc 	.word	0x08093dfc

080801d4 <_ZN2SD5writeIcEEbT_>:
#ifndef CART_SD_TEMPLATE_H
#define CART_SD_TEMPLATE_H

#include "SD.h"
template<typename datatype>
bool SD::write(datatype data)
 80801d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80801d6:	460f      	mov	r7, r1
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return open(m_cwd, path, oflag);
 80801d8:	490a      	ldr	r1, [pc, #40]	; (8080204 <_ZN2SD5writeIcEEbT_+0x30>)
    {
        // open the file for write 
        if (!myFile.open("test.txt", O_RDWR | O_CREAT | O_AT_END)) {
 80801da:	f100 0510 	add.w	r5, r0, #16
#ifndef CART_SD_TEMPLATE_H
#define CART_SD_TEMPLATE_H

#include "SD.h"
template<typename datatype>
bool SD::write(datatype data)
 80801de:	4606      	mov	r6, r0
 80801e0:	2363      	movs	r3, #99	; 0x63
 80801e2:	4a09      	ldr	r2, [pc, #36]	; (8080208 <_ZN2SD5writeIcEEbT_+0x34>)
 80801e4:	6809      	ldr	r1, [r1, #0]
 80801e6:	4628      	mov	r0, r5
 80801e8:	f001 fc77 	bl	8081ada <_ZN7FatFile4openEPS_PKch>
    {
        // open the file for write 
        if (!myFile.open("test.txt", O_RDWR | O_CREAT | O_AT_END)) {
 80801ec:	4604      	mov	r4, r0
 80801ee:	b130      	cbz	r0, 80801fe <_ZN2SD5writeIcEEbT_+0x2a>
            return false;
        }
        
        myFile.print(data);   // write data to Sd
 80801f0:	4639      	mov	r1, r7
 80801f2:	4630      	mov	r0, r6
 80801f4:	f011 fe9d 	bl	8091f32 <_ZN5Print5printEc>
        myFile.close();         // close file to save data
 80801f8:	4628      	mov	r0, r5
 80801fa:	f001 fc67 	bl	8081acc <_ZN7FatFile5closeEv>

        return true;
    }
 80801fe:	4620      	mov	r0, r4
 8080200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080202:	bf00      	nop
 8080204:	20000508 	.word	0x20000508
 8080208:	08093dff 	.word	0x08093dff

0808020c <loop>:

void loop() {
 808020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

//process information
#if (MQTT_STATUS||SD_STATUS)
    //print out new informaiton sent from can bus
    if (new_can_flag) os_mutex_lock(can_recv_mutex);      //lock out buffer for reading
 8080210:	4b23      	ldr	r3, [pc, #140]	; (80802a0 <loop+0x94>)
 8080212:	781a      	ldrb	r2, [r3, #0]
 8080214:	461f      	mov	r7, r3
 8080216:	b11a      	cbz	r2, 8080220 <loop+0x14>
 8080218:	4b22      	ldr	r3, [pc, #136]	; (80802a4 <loop+0x98>)
 808021a:	6818      	ldr	r0, [r3, #0]
 808021c:	f011 f84c 	bl	80912b8 <os_mutex_lock>
    if (new_gps_flag) os_mutex_lock(gps_recv_mutex);      //lock out buffer for reading
 8080220:	4b21      	ldr	r3, [pc, #132]	; (80802a8 <loop+0x9c>)
 8080222:	781b      	ldrb	r3, [r3, #0]
 8080224:	b11b      	cbz	r3, 808022e <loop+0x22>
 8080226:	4b21      	ldr	r3, [pc, #132]	; (80802ac <loop+0xa0>)
 8080228:	6818      	ldr	r0, [r3, #0]
 808022a:	f011 f845 	bl	80912b8 <os_mutex_lock>
    if (new_dof_flag) os_mutex_lock(dof_recv_mutex);      //lock out buffer for reading
 808022e:	4b20      	ldr	r3, [pc, #128]	; (80802b0 <loop+0xa4>)
 8080230:	781b      	ldrb	r3, [r3, #0]
 8080232:	b11b      	cbz	r3, 808023c <loop+0x30>
 8080234:	4b1f      	ldr	r3, [pc, #124]	; (80802b4 <loop+0xa8>)
 8080236:	6818      	ldr	r0, [r3, #0]
 8080238:	f011 f83e 	bl	80912b8 <os_mutex_lock>
    message_id = message_id || (new_can_flag << 3);
    message_id = message_id || (new_can_flag << 2);
    message_id = message_id || (new_can_flag << 1);

    //sd write of can messages
    for(int i =0; i < can_frames_in_buffer; i++)
 808023c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80802bc <loop+0xb0>
    {
        for(int j = 0; j <8; j++)
        {
            //write in one frame at a time
            sd_storage->write((char)can_recv_buffer[i][j]);  
 8080240:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80802c0 <loop+0xb4>
    


}   

void loop() {
 8080244:	2400      	movs	r4, #0
    message_id = message_id || (new_can_flag << 3);
    message_id = message_id || (new_can_flag << 2);
    message_id = message_id || (new_can_flag << 1);

    //sd write of can messages
    for(int i =0; i < can_frames_in_buffer; i++)
 8080246:	f8d8 3000 	ldr.w	r3, [r8]
 808024a:	4e1b      	ldr	r6, [pc, #108]	; (80802b8 <loop+0xac>)
 808024c:	429c      	cmp	r4, r3
 808024e:	da0f      	bge.n	8080270 <loop+0x64>
 8080250:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8080254:	2500      	movs	r5, #0
    {
        for(int j = 0; j <8; j++)
        {
            //write in one frame at a time
            sd_storage->write((char)can_recv_buffer[i][j]);  
 8080256:	f8d9 3000 	ldr.w	r3, [r9]
 808025a:	6830      	ldr	r0, [r6, #0]
 808025c:	f853 300a 	ldr.w	r3, [r3, sl]
 8080260:	5d59      	ldrb	r1, [r3, r5]
 8080262:	3504      	adds	r5, #4
 8080264:	f7ff ffb6 	bl	80801d4 <_ZN2SD5writeIcEEbT_>
    message_id = message_id || (new_can_flag << 1);

    //sd write of can messages
    for(int i =0; i < can_frames_in_buffer; i++)
    {
        for(int j = 0; j <8; j++)
 8080268:	2d20      	cmp	r5, #32
 808026a:	d1f4      	bne.n	8080256 <loop+0x4a>
    message_id = message_id || (new_can_flag << 3);
    message_id = message_id || (new_can_flag << 2);
    message_id = message_id || (new_can_flag << 1);

    //sd write of can messages
    for(int i =0; i < can_frames_in_buffer; i++)
 808026c:	3401      	adds	r4, #1
 808026e:	e7ea      	b.n	8080246 <loop+0x3a>
        {
            //write in one frame at a time
            sd_storage->write((char)can_recv_buffer[i][j]);  
        }       
    }
    sd_storage->write('\n');   
 8080270:	210a      	movs	r1, #10
 8080272:	6830      	ldr	r0, [r6, #0]
 8080274:	f7ff ffae 	bl	80801d4 <_ZN2SD5writeIcEEbT_>

    new_can_flag = false;   //only change when buffer is locked
 8080278:	2300      	movs	r3, #0
 808027a:	703b      	strb	r3, [r7, #0]
    os_mutex_unlock(can_recv_mutex);
 808027c:	4b09      	ldr	r3, [pc, #36]	; (80802a4 <loop+0x98>)
 808027e:	6818      	ldr	r0, [r3, #0]
 8080280:	f011 f82a 	bl	80912d8 <os_mutex_unlock>
    os_mutex_unlock(gps_recv_mutex);
 8080284:	4b09      	ldr	r3, [pc, #36]	; (80802ac <loop+0xa0>)
 8080286:	6818      	ldr	r0, [r3, #0]
 8080288:	f011 f826 	bl	80912d8 <os_mutex_unlock>
    os_mutex_unlock(dof_recv_mutex);
 808028c:	4b09      	ldr	r3, [pc, #36]	; (80802b4 <loop+0xa8>)
 808028e:	6818      	ldr	r0, [r3, #0]
 8080290:	f011 f822 	bl	80912d8 <os_mutex_unlock>
#endif

    delay(20);
}
 8080294:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    os_mutex_unlock(can_recv_mutex);
    os_mutex_unlock(gps_recv_mutex);
    os_mutex_unlock(dof_recv_mutex);
#endif

    delay(20);
 8080298:	2014      	movs	r0, #20
 808029a:	f011 bf33 	b.w	8092104 <delay>
 808029e:	bf00      	nop
 80802a0:	20002918 	.word	0x20002918
 80802a4:	200028c0 	.word	0x200028c0
 80802a8:	20002890 	.word	0x20002890
 80802ac:	200028ec 	.word	0x200028ec
 80802b0:	200028bc 	.word	0x200028bc
 80802b4:	20002898 	.word	0x20002898
 80802b8:	200028b4 	.word	0x200028b4
 80802bc:	200028dc 	.word	0x200028dc
 80802c0:	200028b8 	.word	0x200028b8

080802c4 <_GLOBAL__sub_I_SystemMode>:
}
 80802c4:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80802c6:	f010 ff2f 	bl	8091128 <HAL_Pin_Map>

#include <CarT.h>
//#include <SparkJson.h>


SYSTEM_THREAD(ENABLED);     //setup threading
 80802ca:	2100      	movs	r1, #0
 80802cc:	2001      	movs	r0, #1
 80802ce:	f011 f98b 	bl	80915e8 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80802d2:	2003      	movs	r0, #3
 80802d4:	f011 f978 	bl	80915c8 <set_system_mode>
SYSTEM_MODE(MANUAL);        //system mode to disable auto cell connect        
STARTUP(startup_function());//setup stratup function and block everything untill finished
 80802d8:	f010 fb72 	bl	80909c0 <_Z16startup_functionv>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80802dc:	f010 ffa4 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>

//holds encryption key
unsigned char key[32];

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
 80802e0:	4b01      	ldr	r3, [pc, #4]	; (80802e8 <_GLOBAL__sub_I_SystemMode+0x24>)
 80802e2:	6018      	str	r0, [r3, #0]
 80802e4:	bd08      	pop	{r3, pc}
 80802e6:	bf00      	nop
 80802e8:	200004fc 	.word	0x200004fc

080802ec <_GLOBAL__sub_I__ZN4NmeaC2E6Stringh9NmeaCache>:
 80802ec:	f010 bf1c 	b.w	8091128 <HAL_Pin_Map>

080802f0 <_ZN9NmeaCacheC1Ev>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "NmeaCache.h"

NmeaCache::NmeaCache()
 80802f0:	b570      	push	{r4, r5, r6, lr}
 80802f2:	4605      	mov	r5, r0
 80802f4:	4604      	mov	r4, r0
 80802f6:	f100 0670 	add.w	r6, r0, #112	; 0x70
 80802fa:	4620      	mov	r0, r4
 80802fc:	4903      	ldr	r1, [pc, #12]	; (808030c <_ZN9NmeaCacheC1Ev+0x1c>)
 80802fe:	3410      	adds	r4, #16
 8080300:	f011 fd65 	bl	8091dce <_ZN6StringC1EPK19__FlashStringHelper>
 8080304:	42b4      	cmp	r4, r6
 8080306:	d1f8      	bne.n	80802fa <_ZN9NmeaCacheC1Ev+0xa>
{
}
 8080308:	4628      	mov	r0, r5
 808030a:	bd70      	pop	{r4, r5, r6, pc}
 808030c:	0809457c 	.word	0x0809457c

08080310 <_GLOBAL__sub_I__ZN9NmeaCacheC2Ev>:
 8080310:	f010 bf0a 	b.w	8091128 <HAL_Pin_Map>

08080314 <_GLOBAL__sub_I__ZN5PgtopC2E9NmeaCache>:
 8080314:	f010 bf08 	b.w	8091128 <HAL_Pin_Map>

08080318 <_ZN3GpsC1EP11USARTSerial>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Gps.h"

Gps::Gps(USARTSerial* serial)
 8080318:	b538      	push	{r3, r4, r5, lr}
 808031a:	4604      	mov	r4, r0
 808031c:	460d      	mov	r5, r1
 808031e:	f7ff ffe7 	bl	80802f0 <_ZN9NmeaCacheC1Ev>
 8080322:	2300      	movs	r3, #0
 8080324:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
{
    this->_serial = serial;
 8080328:	6725      	str	r5, [r4, #112]	; 0x70
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Gps.h"

Gps::Gps(USARTSerial* serial)
 808032a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
{
    this->_serial = serial;
};
 808032e:	4620      	mov	r0, r4
 8080330:	bd38      	pop	{r3, r4, r5, pc}

08080332 <_ZN3Gps11sendCommandEPKc>:
{
    this->_serial->end();
}

void Gps::sendCommand(const char* data)
{
 8080332:	b508      	push	{r3, lr}
    this->_serial->println(data);
 8080334:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8080336:	f011 fe0b 	bl	8091f50 <_ZN5Print7printlnEPKc>
    delay(250);
}
 808033a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void Gps::sendCommand(const char* data)
{
    this->_serial->println(data);
    delay(250);
 808033e:	20fa      	movs	r0, #250	; 0xfa
 8080340:	f011 bee0 	b.w	8092104 <delay>

08080344 <_ZN3Gps5beginEm>:
{
    this->_serial = serial;
};

void Gps::begin(uint32_t baud)
{
 8080344:	b510      	push	{r4, lr}
 8080346:	4604      	mov	r4, r0
    // ***
    // *** Initialize the serial port.
    // ***
    this->_serial->begin(baud);
 8080348:	6f00      	ldr	r0, [r0, #112]	; 0x70
 808034a:	f012 f92b 	bl	80925a4 <_ZN11USARTSerial5beginEm>
    this->_serial->blockOnOverrun(true);
 808034e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8080350:	2101      	movs	r1, #1
 8080352:	6803      	ldr	r3, [r0, #0]
 8080354:	6a1b      	ldr	r3, [r3, #32]
 8080356:	4798      	blx	r3
    
    // ***
    // *** Initialize the GPS.
    // ***
    this->sendCommand(PMTK_SET_BAUD_9600);
 8080358:	4620      	mov	r0, r4
 808035a:	490c      	ldr	r1, [pc, #48]	; (808038c <_ZN3Gps5beginEm+0x48>)
 808035c:	f7ff ffe9 	bl	8080332 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_UPDATE_200_MILLIHERTZ);
 8080360:	4620      	mov	r0, r4
 8080362:	490b      	ldr	r1, [pc, #44]	; (8080390 <_ZN3Gps5beginEm+0x4c>)
 8080364:	f7ff ffe5 	bl	8080332 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_API_SET_FIX_CTL_1HZ);
 8080368:	4620      	mov	r0, r4
 808036a:	490a      	ldr	r1, [pc, #40]	; (8080394 <_ZN3Gps5beginEm+0x50>)
 808036c:	f7ff ffe1 	bl	8080332 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 8080370:	4620      	mov	r0, r4
 8080372:	4909      	ldr	r1, [pc, #36]	; (8080398 <_ZN3Gps5beginEm+0x54>)
 8080374:	f7ff ffdd 	bl	8080332 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_ENABLE_WAAS);
 8080378:	4620      	mov	r0, r4
 808037a:	4908      	ldr	r1, [pc, #32]	; (808039c <_ZN3Gps5beginEm+0x58>)
 808037c:	f7ff ffd9 	bl	8080332 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PGCMD_ANTENNA);
 8080380:	4620      	mov	r0, r4
};
 8080382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    this->sendCommand(PMTK_SET_BAUD_9600);
    this->sendCommand(PMTK_SET_NMEA_UPDATE_200_MILLIHERTZ);
    this->sendCommand(PMTK_API_SET_FIX_CTL_1HZ);
    this->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
    this->sendCommand(PMTK_ENABLE_WAAS);
    this->sendCommand(PGCMD_ANTENNA);
 8080386:	4906      	ldr	r1, [pc, #24]	; (80803a0 <_ZN3Gps5beginEm+0x5c>)
 8080388:	f7ff bfd3 	b.w	8080332 <_ZN3Gps11sendCommandEPKc>
 808038c:	08093e32 	.word	0x08093e32
 8080390:	08093e43 	.word	0x08093e43
 8080394:	08093e54 	.word	0x08093e54
 8080398:	08093e6d 	.word	0x08093e6d
 808039c:	08093e9f 	.word	0x08093e9f
 80803a0:	08093ead 	.word	0x08093ead

080803a4 <_GLOBAL__sub_I__ZN3GpsC2EP11USARTSerial>:
 80803a4:	f010 bec0 	b.w	8091128 <HAL_Pin_Map>

080803a8 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80803a8:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80803aa:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80803ac:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80803ae:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80803b0:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80803b2:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80803b4:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80803b6:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80803b8:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80803ba:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80803bc:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80803be:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80803c0:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80803c2:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80803c4:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80803c8:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80803ca:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80803cc:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80803ce:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80803d0:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80803d2:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80803d4:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80803d6:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80803d8:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80803da:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80803dc:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80803de:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80803e0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80803e4:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80803e6:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80803e8:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80803ea:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80803ec:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80803ee:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80803f0:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80803f2:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80803f4:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80803f6:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80803f8:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80803fa:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80803fe:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 8080400:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 8080404:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 8080408:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 808040a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 808040e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 8080412:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 8080416:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 8080418:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 808041a:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 808041c:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 808041e:	6565      	str	r5, [r4, #84]	; 0x54
 8080420:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 8080424:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 8080428:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 808042c:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 8080430:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 8080434:	d1f0      	bne.n	8080418 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 8080436:	f04f 0300 	mov.w	r3, #0
 808043a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 808043e:	bd30      	pop	{r4, r5, pc}

08080440 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 8080440:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 8080442:	231e      	movs	r3, #30
 8080444:	226b      	movs	r2, #107	; 0x6b
 8080446:	2101      	movs	r1, #1
 8080448:	f7ff ffae 	bl	80803a8 <_ZN7LSM9DS14initE14interface_modehh>
}
 808044c:	bd10      	pop	{r4, pc}

0808044e <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 808044e:	b510      	push	{r4, lr}
 8080450:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 8080452:	88c0      	ldrh	r0, [r0, #6]
 8080454:	f012 fbec 	bl	8092c30 <__aeabi_ui2f>
 8080458:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 808045c:	f012 fc40 	bl	8092ce0 <__aeabi_fmul>
 8080460:	6760      	str	r0, [r4, #116]	; 0x74
 8080462:	bd10      	pop	{r4, pc}

08080464 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 8080464:	b510      	push	{r4, lr}
 8080466:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 8080468:	7dc0      	ldrb	r0, [r0, #23]
 808046a:	f012 fbe1 	bl	8092c30 <__aeabi_ui2f>
 808046e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8080472:	f012 fc35 	bl	8092ce0 <__aeabi_fmul>
 8080476:	67a0      	str	r0, [r4, #120]	; 0x78
 8080478:	bd10      	pop	{r4, pc}
	...

0808047c <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 808047c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8080480:	3b04      	subs	r3, #4
 8080482:	2b0c      	cmp	r3, #12
 8080484:	d814      	bhi.n	80804b0 <_ZN7LSM9DS18calcmResEv+0x34>
 8080486:	e8df f003 	tbb	[pc, r3]
 808048a:	1307      	.short	0x1307
 808048c:	130a1313 	.word	0x130a1313
 8080490:	130d1313 	.word	0x130d1313
 8080494:	1313      	.short	0x1313
 8080496:	10          	.byte	0x10
 8080497:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 8080498:	4b06      	ldr	r3, [pc, #24]	; (80804b4 <_ZN7LSM9DS18calcmResEv+0x38>)
 808049a:	681b      	ldr	r3, [r3, #0]
 808049c:	e007      	b.n	80804ae <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 808049e:	4b05      	ldr	r3, [pc, #20]	; (80804b4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80804a0:	685b      	ldr	r3, [r3, #4]
 80804a2:	e004      	b.n	80804ae <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80804a4:	4b03      	ldr	r3, [pc, #12]	; (80804b4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80804a6:	689b      	ldr	r3, [r3, #8]
 80804a8:	e001      	b.n	80804ae <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80804aa:	4b02      	ldr	r3, [pc, #8]	; (80804b4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80804ac:	68db      	ldr	r3, [r3, #12]
 80804ae:	67c3      	str	r3, [r0, #124]	; 0x7c
 80804b0:	4770      	bx	lr
 80804b2:	bf00      	nop
 80804b4:	20000400 	.word	0x20000400

080804b8 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80804b8:	88c3      	ldrh	r3, [r0, #6]
 80804ba:	2bf5      	cmp	r3, #245	; 0xf5
 80804bc:	d007      	beq.n	80804ce <_ZN7LSM9DS115constrainScalesEv+0x16>
 80804be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80804c2:	d004      	beq.n	80804ce <_ZN7LSM9DS115constrainScalesEv+0x16>
 80804c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80804c8:	bf1c      	itt	ne
 80804ca:	23f5      	movne	r3, #245	; 0xf5
 80804cc:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80804ce:	7dc2      	ldrb	r2, [r0, #23]
 80804d0:	2a10      	cmp	r2, #16
 80804d2:	d803      	bhi.n	80804dc <_ZN7LSM9DS115constrainScalesEv+0x24>
 80804d4:	4b08      	ldr	r3, [pc, #32]	; (80804f8 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80804d6:	40d3      	lsrs	r3, r2
 80804d8:	07da      	lsls	r2, r3, #31
 80804da:	d401      	bmi.n	80804e0 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80804dc:	2302      	movs	r3, #2
 80804de:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80804e0:	f890 2020 	ldrb.w	r2, [r0, #32]
 80804e4:	2a10      	cmp	r2, #16
 80804e6:	d803      	bhi.n	80804f0 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80804e8:	4b04      	ldr	r3, [pc, #16]	; (80804fc <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80804ea:	40d3      	lsrs	r3, r2
 80804ec:	07db      	lsls	r3, r3, #31
 80804ee:	d402      	bmi.n	80804f6 <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80804f0:	2304      	movs	r3, #4
 80804f2:	f880 3020 	strb.w	r3, [r0, #32]
 80804f6:	4770      	bx	lr
 80804f8:	00010114 	.word	0x00010114
 80804fc:	00011110 	.word	0x00011110

08080500 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 8080500:	b510      	push	{r4, lr}
 8080502:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 8080504:	2101      	movs	r1, #1
 8080506:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 808050a:	f012 f8fb 	bl	8092704 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 808050e:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 8080512:	2101      	movs	r1, #1
 8080514:	f012 f907 	bl	8092726 <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 8080518:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 808051c:	2101      	movs	r1, #1
 808051e:	f012 f8f1 	bl	8092704 <pinMode>
	digitalWrite(_mAddress, HIGH);
 8080522:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 8080526:	4c0a      	ldr	r4, [pc, #40]	; (8080550 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 8080528:	2101      	movs	r1, #1
 808052a:	f012 f8fc 	bl	8092726 <digitalWrite>
	
	SPI.begin();
 808052e:	4620      	mov	r0, r4
 8080530:	f011 f90e 	bl	8091750 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 8080534:	4620      	mov	r0, r4
 8080536:	2108      	movs	r1, #8
 8080538:	f011 f962 	bl	8091800 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 808053c:	4620      	mov	r0, r4
 808053e:	2101      	movs	r1, #1
 8080540:	f011 f911 	bl	8091766 <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 8080544:	4620      	mov	r0, r4
}
 8080546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 808054a:	2100      	movs	r1, #0
 808054c:	f011 b90e 	b.w	809176c <_ZN8SPIClass11setDataModeEh>
 8080550:	200034a0 	.word	0x200034a0

08080554 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 8080554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 8080556:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 8080558:	4617      	mov	r7, r2
 808055a:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 808055c:	4d09      	ldr	r5, [pc, #36]	; (8080584 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 808055e:	4620      	mov	r0, r4
 8080560:	2100      	movs	r1, #0
 8080562:	f012 f8e0 	bl	8092726 <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 8080566:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 808056a:	4628      	mov	r0, r5
 808056c:	f011 f95c 	bl	8091828 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 8080570:	4631      	mov	r1, r6
 8080572:	4628      	mov	r0, r5
 8080574:	f011 f958 	bl	8091828 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 8080578:	4620      	mov	r0, r4
}
 808057a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 808057e:	2101      	movs	r1, #1
 8080580:	f012 b8d1 	b.w	8092726 <digitalWrite>
 8080584:	200034a0 	.word	0x200034a0

08080588 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 8080588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808058a:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 808058c:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 8080590:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 8080594:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 8080596:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 808059a:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 808059e:	d103      	bne.n	80805a8 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80805a0:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80805a2:	bf88      	it	hi
 80805a4:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80805a8:	b28c      	uxth	r4, r1
 80805aa:	4620      	mov	r0, r4
 80805ac:	2100      	movs	r1, #0
 80805ae:	f012 f8ba 	bl	8092726 <digitalWrite>
	SPI.transfer(rAddress);
 80805b2:	4629      	mov	r1, r5
 80805b4:	4809      	ldr	r0, [pc, #36]	; (80805dc <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80805b6:	f011 f937 	bl	8091828 <_ZN8SPIClass8transferEh>
 80805ba:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80805bc:	1bab      	subs	r3, r5, r6
 80805be:	429f      	cmp	r7, r3
 80805c0:	dd06      	ble.n	80805d0 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80805c2:	2100      	movs	r1, #0
 80805c4:	4805      	ldr	r0, [pc, #20]	; (80805dc <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80805c6:	f011 f92f 	bl	8091828 <_ZN8SPIClass8transferEh>
 80805ca:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80805ce:	e7f5      	b.n	80805bc <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80805d0:	4620      	mov	r0, r4
 80805d2:	2101      	movs	r1, #1
 80805d4:	f012 f8a7 	bl	8092726 <digitalWrite>
	
	return 1;
}
 80805d8:	2001      	movs	r0, #1
 80805da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80805dc:	200034a0 	.word	0x200034a0

080805e0 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80805e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80805e2:	2301      	movs	r3, #1
 80805e4:	9300      	str	r3, [sp, #0]
 80805e6:	f10d 030f 	add.w	r3, sp, #15
 80805ea:	f7ff ffcd 	bl	8080588 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80805ee:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80805f2:	b005      	add	sp, #20
 80805f4:	f85d fb04 	ldr.w	pc, [sp], #4

080805f8 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80805f8:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80805fa:	f012 f8f3 	bl	80927e4 <_Z19__fetch_global_Wirev>
}
 80805fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 8080602:	f012 b839 	b.w	8092678 <_ZN7TwoWire5beginEv>

08080606 <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8080606:	b570      	push	{r4, r5, r6, lr}
 8080608:	460e      	mov	r6, r1
 808060a:	4615      	mov	r5, r2
 808060c:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 808060e:	f012 f8e9 	bl	80927e4 <_Z19__fetch_global_Wirev>
 8080612:	4631      	mov	r1, r6
 8080614:	f012 f842 	bl	809269c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 8080618:	f012 f8e4 	bl	80927e4 <_Z19__fetch_global_Wirev>
 808061c:	6803      	ldr	r3, [r0, #0]
 808061e:	4629      	mov	r1, r5
 8080620:	689b      	ldr	r3, [r3, #8]
 8080622:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 8080624:	f012 f8de 	bl	80927e4 <_Z19__fetch_global_Wirev>
 8080628:	6803      	ldr	r3, [r0, #0]
 808062a:	4621      	mov	r1, r4
 808062c:	689a      	ldr	r2, [r3, #8]
 808062e:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 8080630:	f012 f8d8 	bl	80927e4 <_Z19__fetch_global_Wirev>
}
 8080634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 8080638:	f012 b838 	b.w	80926ac <_ZN7TwoWire15endTransmissionEv>

0808063c <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 808063c:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 808063e:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 8080640:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080642:	2a01      	cmp	r2, #1
 8080644:	d105      	bne.n	8080652 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 8080646:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 8080648:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 808064a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 808064e:	f7ff bfda 	b.w	8080606 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8080652:	b92a      	cbnz	r2, 8080660 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 8080654:	460a      	mov	r2, r1
}
 8080656:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 8080658:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 808065c:	f7ff bf7a 	b.w	8080554 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 8080660:	bc10      	pop	{r4}
 8080662:	4770      	bx	lr

08080664 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 8080664:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 8080666:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 8080668:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 808066a:	b113      	cbz	r3, 8080672 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 808066c:	7a03      	ldrb	r3, [r0, #8]
 808066e:	015b      	lsls	r3, r3, #5
 8080670:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 8080672:	88e2      	ldrh	r2, [r4, #6]
 8080674:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8080678:	d005      	beq.n	8080686 <_ZN7LSM9DS18initGyroEv+0x22>
 808067a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 808067e:	d104      	bne.n	808068a <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 8080680:	f043 0318 	orr.w	r3, r3, #24
			break;
 8080684:	e001      	b.n	808068a <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 8080686:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 808068a:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 808068c:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 808068e:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 8080692:	431a      	orrs	r2, r3
 8080694:	4620      	mov	r0, r4
 8080696:	f7ff ffd1 	bl	808063c <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 808069a:	2200      	movs	r2, #0
 808069c:	2111      	movs	r1, #17
 808069e:	4620      	mov	r0, r4
 80806a0:	f7ff ffcc 	bl	808063c <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80806a4:	7aa3      	ldrb	r3, [r4, #10]
 80806a6:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80806a8:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80806aa:	bf14      	ite	ne
 80806ac:	2280      	movne	r2, #128	; 0x80
 80806ae:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80806b0:	b12b      	cbz	r3, 80806be <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80806b2:	7b23      	ldrb	r3, [r4, #12]
 80806b4:	f003 030f 	and.w	r3, r3, #15
 80806b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80806bc:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80806be:	2112      	movs	r1, #18
 80806c0:	4620      	mov	r0, r4
 80806c2:	f7ff ffbb 	bl	808063c <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80806c6:	7ce3      	ldrb	r3, [r4, #19]
 80806c8:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80806ca:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80806cc:	bf0c      	ite	eq
 80806ce:	2200      	moveq	r2, #0
 80806d0:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80806d2:	b113      	cbz	r3, 80806da <_ZN7LSM9DS18initGyroEv+0x76>
 80806d4:	f042 0210 	orr.w	r2, r2, #16
 80806d8:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80806da:	7c63      	ldrb	r3, [r4, #17]
 80806dc:	b10b      	cbz	r3, 80806e2 <_ZN7LSM9DS18initGyroEv+0x7e>
 80806de:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80806e2:	7d23      	ldrb	r3, [r4, #20]
 80806e4:	b10b      	cbz	r3, 80806ea <_ZN7LSM9DS18initGyroEv+0x86>
 80806e6:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80806ea:	211e      	movs	r1, #30
 80806ec:	4620      	mov	r0, r4
 80806ee:	f7ff ffa5 	bl	808063c <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80806f2:	7b63      	ldrb	r3, [r4, #13]
 80806f4:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80806f6:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80806f8:	bf0c      	ite	eq
 80806fa:	2200      	moveq	r2, #0
 80806fc:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80806fe:	b113      	cbz	r3, 8080706 <_ZN7LSM9DS18initGyroEv+0xa2>
 8080700:	f042 0210 	orr.w	r2, r2, #16
 8080704:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 8080706:	7be3      	ldrb	r3, [r4, #15]
 8080708:	b10b      	cbz	r3, 808070e <_ZN7LSM9DS18initGyroEv+0xaa>
 808070a:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 808070e:	4620      	mov	r0, r4
}
 8080710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 8080714:	2113      	movs	r1, #19
 8080716:	f7ff bf91 	b.w	808063c <_ZN7LSM9DS111xgWriteByteEhh>

0808071a <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 808071a:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 808071c:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 808071e:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 8080720:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 8080722:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 8080724:	bf0c      	ite	eq
 8080726:	2200      	moveq	r2, #0
 8080728:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 808072a:	b113      	cbz	r3, 8080732 <_ZN7LSM9DS19initAccelEv+0x18>
 808072c:	f042 0210 	orr.w	r2, r2, #16
 8080730:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 8080732:	7e63      	ldrb	r3, [r4, #25]
 8080734:	b10b      	cbz	r3, 808073a <_ZN7LSM9DS19initAccelEv+0x20>
 8080736:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 808073a:	211f      	movs	r1, #31
 808073c:	4620      	mov	r0, r4
 808073e:	f7ff ff7d 	bl	808063c <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 8080742:	7da2      	ldrb	r2, [r4, #22]
 8080744:	b112      	cbz	r2, 808074c <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 8080746:	7e22      	ldrb	r2, [r4, #24]
 8080748:	0152      	lsls	r2, r2, #5
 808074a:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 808074c:	7de3      	ldrb	r3, [r4, #23]
 808074e:	2b08      	cmp	r3, #8
 8080750:	d006      	beq.n	8080760 <_ZN7LSM9DS19initAccelEv+0x46>
 8080752:	2b10      	cmp	r3, #16
 8080754:	d007      	beq.n	8080766 <_ZN7LSM9DS19initAccelEv+0x4c>
 8080756:	2b04      	cmp	r3, #4
 8080758:	d107      	bne.n	808076a <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 808075a:	f042 0210 	orr.w	r2, r2, #16
			break;
 808075e:	e004      	b.n	808076a <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 8080760:	f042 0218 	orr.w	r2, r2, #24
			break;
 8080764:	e001      	b.n	808076a <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 8080766:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 808076a:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 808076e:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 8080770:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 8080772:	bfa2      	ittt	ge
 8080774:	f003 0303 	andge.w	r3, r3, #3
 8080778:	431a      	orrge	r2, r3
 808077a:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 808077e:	4620      	mov	r0, r4
 8080780:	f7ff ff5c 	bl	808063c <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 8080784:	7f62      	ldrb	r2, [r4, #29]
 8080786:	b12a      	cbz	r2, 8080794 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 8080788:	7fa2      	ldrb	r2, [r4, #30]
 808078a:	0152      	lsls	r2, r2, #5
 808078c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8080790:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 8080794:	4620      	mov	r0, r4
}
 8080796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 808079a:	2121      	movs	r1, #33	; 0x21
 808079c:	f7ff bf4e 	b.w	808063c <_ZN7LSM9DS111xgWriteByteEhh>

080807a0 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80807a0:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80807a2:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80807a4:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80807a6:	2a01      	cmp	r2, #1
 80807a8:	d105      	bne.n	80807b6 <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80807aa:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80807ac:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80807ae:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80807b2:	f7ff bf28 	b.w	8080606 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80807b6:	b92a      	cbnz	r2, 80807c4 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80807b8:	460a      	mov	r2, r1
}
 80807ba:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80807bc:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80807c0:	f7ff bec8 	b.w	8080554 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80807c4:	bc10      	pop	{r4}
 80807c6:	4770      	bx	lr

080807c8 <_ZN7LSM9DS17initMagEv>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80807c8:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80807ca:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80807ce:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80807d0:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80807d2:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80807d6:	bf08      	it	eq
 80807d8:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80807da:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80807de:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80807e2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80807e6:	bf18      	it	ne
 80807e8:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80807ea:	009b      	lsls	r3, r3, #2
 80807ec:	f003 031c 	and.w	r3, r3, #28
 80807f0:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80807f2:	431a      	orrs	r2, r3
 80807f4:	2120      	movs	r1, #32
 80807f6:	f7ff ffd3 	bl	80807a0 <_ZN7LSM9DS110mWriteByteEhh>
 80807fa:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80807fe:	4620      	mov	r0, r4
 8080800:	3b08      	subs	r3, #8
 8080802:	b2db      	uxtb	r3, r3
 8080804:	2b08      	cmp	r3, #8
 8080806:	bf96      	itet	ls
 8080808:	4a12      	ldrls	r2, [pc, #72]	; (8080854 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 808080a:	2200      	movhi	r2, #0
 808080c:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 808080e:	2121      	movs	r1, #33	; 0x21
 8080810:	f7ff ffc6 	bl	80807a0 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 8080814:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 8080818:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 808081a:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 808081c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 8080820:	bf0c      	ite	eq
 8080822:	2200      	moveq	r2, #0
 8080824:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 8080826:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 808082a:	431a      	orrs	r2, r3
 808082c:	2122      	movs	r1, #34	; 0x22
 808082e:	f7ff ffb7 	bl	80807a0 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 8080832:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8080836:	4620      	mov	r0, r4
 8080838:	0092      	lsls	r2, r2, #2
 808083a:	f002 020c 	and.w	r2, r2, #12
 808083e:	2123      	movs	r1, #35	; 0x23
 8080840:	f7ff ffae 	bl	80807a0 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 8080844:	4620      	mov	r0, r4
}
 8080846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 808084a:	2200      	movs	r2, #0
 808084c:	2124      	movs	r1, #36	; 0x24
 808084e:	f7ff bfa7 	b.w	80807a0 <_ZN7LSM9DS110mWriteByteEhh>
 8080852:	bf00      	nop
 8080854:	08093ecd 	.word	0x08093ecd

08080858 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 8080858:	b538      	push	{r3, r4, r5, lr}
 808085a:	460c      	mov	r4, r1
 808085c:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 808085e:	f011 ffc1 	bl	80927e4 <_Z19__fetch_global_Wirev>
 8080862:	4621      	mov	r1, r4
 8080864:	f011 ff1a 	bl	809269c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 8080868:	f011 ffbc 	bl	80927e4 <_Z19__fetch_global_Wirev>
 808086c:	6803      	ldr	r3, [r0, #0]
 808086e:	4629      	mov	r1, r5
 8080870:	689b      	ldr	r3, [r3, #8]
 8080872:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 8080874:	f011 ffb6 	bl	80927e4 <_Z19__fetch_global_Wirev>
 8080878:	2100      	movs	r1, #0
 808087a:	f011 ff13 	bl	80926a4 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 808087e:	f011 ffb1 	bl	80927e4 <_Z19__fetch_global_Wirev>
 8080882:	2201      	movs	r2, #1
 8080884:	4621      	mov	r1, r4
 8080886:	f011 ff06 	bl	8092696 <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 808088a:	f011 ffab 	bl	80927e4 <_Z19__fetch_global_Wirev>
 808088e:	6803      	ldr	r3, [r0, #0]
 8080890:	695b      	ldr	r3, [r3, #20]
 8080892:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 8080894:	b2c0      	uxtb	r0, r0
 8080896:	bd38      	pop	{r3, r4, r5, pc}

08080898 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 8080898:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 808089a:	7801      	ldrb	r1, [r0, #0]
 808089c:	2901      	cmp	r1, #1
 808089e:	d103      	bne.n	80808a8 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80808a0:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80808a4:	f7ff bfd8 	b.w	8080858 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80808a8:	b919      	cbnz	r1, 80808b2 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80808aa:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80808ae:	f7ff be97 	b.w	80805e0 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80808b2:	2000      	movs	r0, #0
 80808b4:	4770      	bx	lr

080808b6 <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80808b6:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80808b8:	7801      	ldrb	r1, [r0, #0]
 80808ba:	2901      	cmp	r1, #1
 80808bc:	d103      	bne.n	80808c6 <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80808be:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80808c2:	f7ff bfc9 	b.w	8080858 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80808c6:	b919      	cbnz	r1, 80808d0 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80808c8:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80808cc:	f7ff be88 	b.w	80805e0 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80808d0:	4770      	bx	lr

080808d2 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80808d2:	b538      	push	{r3, r4, r5, lr}
 80808d4:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80808d6:	7843      	ldrb	r3, [r0, #1]
 80808d8:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80808dc:	7883      	ldrb	r3, [r0, #2]
 80808de:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80808e2:	f7ff fde9 	bl	80804b8 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80808e6:	f7ff fdb2 	bl	808044e <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80808ea:	4620      	mov	r0, r4
 80808ec:	f7ff fdc6 	bl	808047c <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80808f0:	4620      	mov	r0, r4
 80808f2:	f7ff fdb7 	bl	8080464 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80808f6:	7823      	ldrb	r3, [r4, #0]
 80808f8:	2b01      	cmp	r3, #1
 80808fa:	d103      	bne.n	8080904 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80808fc:	4620      	mov	r0, r4
 80808fe:	f7ff fe7b 	bl	80805f8 <_ZN7LSM9DS17initI2CEv>
 8080902:	e003      	b.n	808090c <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 8080904:	b913      	cbnz	r3, 808090c <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 8080906:	4620      	mov	r0, r4
 8080908:	f7ff fdfa 	bl	8080500 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 808090c:	210f      	movs	r1, #15
 808090e:	4620      	mov	r0, r4
 8080910:	f7ff ffd1 	bl	80808b6 <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 8080914:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 8080916:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 8080918:	4620      	mov	r0, r4
 808091a:	f7ff ffbd 	bl	8080898 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 808091e:	f646 033d 	movw	r3, #26685	; 0x683d
 8080922:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 8080926:	b205      	sxth	r5, r0
 8080928:	429d      	cmp	r5, r3
 808092a:	d10a      	bne.n	8080942 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 808092c:	4620      	mov	r0, r4
 808092e:	f7ff fe99 	bl	8080664 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 8080932:	4620      	mov	r0, r4
 8080934:	f7ff fef1 	bl	808071a <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 8080938:	4620      	mov	r0, r4
 808093a:	f7ff ff45 	bl	80807c8 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 808093e:	4628      	mov	r0, r5
 8080940:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 8080942:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 8080944:	bd38      	pop	{r3, r4, r5, pc}

08080946 <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 8080946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808094a:	4690      	mov	r8, r2
 808094c:	460c      	mov	r4, r1
 808094e:	461d      	mov	r5, r3
 8080950:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8080954:	f010 fc68 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
 8080958:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 808095a:	f011 ff43 	bl	80927e4 <_Z19__fetch_global_Wirev>
 808095e:	4621      	mov	r1, r4
 8080960:	f011 fe9c 	bl	809269c <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 8080964:	f011 ff3e 	bl	80927e4 <_Z19__fetch_global_Wirev>
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8080968:	6803      	ldr	r3, [r0, #0]
 808096a:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 808096e:	689b      	ldr	r3, [r3, #8]
 8080970:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 8080972:	f011 ff37 	bl	80927e4 <_Z19__fetch_global_Wirev>
 8080976:	2100      	movs	r1, #0
 8080978:	f011 fe94 	bl	80926a4 <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 808097c:	f011 ff32 	bl	80927e4 <_Z19__fetch_global_Wirev>
 8080980:	4621      	mov	r1, r4
 8080982:	4632      	mov	r2, r6
 8080984:	f011 fe87 	bl	8092696 <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 8080988:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 808098a:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 808098e:	42b4      	cmp	r4, r6
 8080990:	da1a      	bge.n	80809c8 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 8080992:	f011 ff27 	bl	80927e4 <_Z19__fetch_global_Wirev>
 8080996:	6803      	ldr	r3, [r0, #0]
 8080998:	691b      	ldr	r3, [r3, #16]
 808099a:	4798      	blx	r3
 808099c:	b140      	cbz	r0, 80809b0 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 808099e:	f011 ff21 	bl	80927e4 <_Z19__fetch_global_Wirev>
 80809a2:	6803      	ldr	r3, [r0, #0]
 80809a4:	f104 0801 	add.w	r8, r4, #1
 80809a8:	695b      	ldr	r3, [r3, #20]
 80809aa:	4798      	blx	r3
 80809ac:	5528      	strb	r0, [r5, r4]
 80809ae:	4644      	mov	r4, r8
 80809b0:	f010 fc3a 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80809b4:	42b8      	cmp	r0, r7
 80809b6:	d9ea      	bls.n	808098e <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80809b8:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80809ba:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80809bc:	1b62      	subs	r2, r4, r5
 80809be:	4296      	cmp	r6, r2
 80809c0:	dd05      	ble.n	80809ce <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80809c2:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80809c6:	e7f9      	b.n	80809bc <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80809c8:	2001      	movs	r0, #1
 80809ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80809ce:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80809d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080809d4 <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80809d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80809d6:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80809d8:	7801      	ldrb	r1, [r0, #0]
 80809da:	2901      	cmp	r1, #1
 80809dc:	d107      	bne.n	80809ee <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80809de:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80809e2:	9300      	str	r3, [sp, #0]
 80809e4:	4613      	mov	r3, r2
 80809e6:	462a      	mov	r2, r5
 80809e8:	f7ff ffad 	bl	8080946 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80809ec:	e007      	b.n	80809fe <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80809ee:	b931      	cbnz	r1, 80809fe <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80809f0:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80809f4:	9300      	str	r3, [sp, #0]
 80809f6:	4613      	mov	r3, r2
 80809f8:	462a      	mov	r2, r5
 80809fa:	f7ff fdc5 	bl	8080588 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80809fe:	b003      	add	sp, #12
 8080a00:	bd30      	pop	{r4, r5, pc}

08080a02 <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 8080a02:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 8080a04:	2306      	movs	r3, #6
 8080a06:	466a      	mov	r2, sp
 8080a08:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 8080a0a:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 8080a0c:	f7ff ffe2 	bl	80809d4 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 8080a10:	b330      	cbz	r0, 8080a60 <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 8080a12:	f89d 3000 	ldrb.w	r3, [sp]
 8080a16:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 8080a1a:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 8080a1e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 8080a22:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 8080a26:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 8080a2a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 8080a2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 8080a32:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 8080a34:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 8080a38:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 8080a3c:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 8080a3e:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 8080a40:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 8080a42:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 8080a44:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 8080a46:	b15d      	cbz	r5, 8080a60 <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 8080a48:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 8080a4c:	1b49      	subs	r1, r1, r5
 8080a4e:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 8080a50:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 8080a54:	1a52      	subs	r2, r2, r1
 8080a56:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 8080a58:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8080a5c:	1a9b      	subs	r3, r3, r2
 8080a5e:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 8080a60:	b003      	add	sp, #12
 8080a62:	bd30      	pop	{r4, r5, pc}

08080a64 <_ZN7LSM9DS18readTempEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readTemp()
{
 8080a64:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[2]; // We'll read two bytes from the temperature sensor into temp	
	uint8_t status = xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
 8080a66:	2302      	movs	r3, #2
 8080a68:	aa01      	add	r2, sp, #4
 8080a6a:	2115      	movs	r1, #21
	else
		return 0;
}

uint8_t LSM9DS1::readTemp()
{
 8080a6c:	4604      	mov	r4, r0
	uint8_t temp[2]; // We'll read two bytes from the temperature sensor into temp	
	uint8_t status = xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
 8080a6e:	f7ff ffb1 	bl	80809d4 <_ZN7LSM9DS111xgReadBytesEhPhh>
	if (status)
 8080a72:	b130      	cbz	r0, 8080a82 <_ZN7LSM9DS18readTempEv+0x1e>
		temperature = ((int16_t)temp[1] << 8) | temp[0];
 8080a74:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8080a78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8080a7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080a80:	8763      	strh	r3, [r4, #58]	; 0x3a
	
	return status;
}
 8080a82:	b002      	add	sp, #8
 8080a84:	bd10      	pop	{r4, pc}

08080a86 <_ZN7LSM9DS18readGyroEv>:

uint8_t LSM9DS1::readGyro()
{
 8080a86:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 8080a88:	2306      	movs	r3, #6
 8080a8a:	466a      	mov	r2, sp
 8080a8c:	2118      	movs	r1, #24
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 8080a8e:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 8080a90:	f7ff ffa0 	bl	80809d4 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 8080a94:	b330      	cbz	r0, 8080ae4 <_ZN7LSM9DS18readGyroEv+0x5e>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 8080a96:	f89d 3000 	ldrb.w	r3, [sp]
 8080a9a:	f89d 1001 	ldrb.w	r1, [sp, #1]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 8080a9e:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 8080aa2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 8080aa6:	f89d 3002 	ldrb.w	r3, [sp, #2]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 8080aaa:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 8080aae:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 8080ab2:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 8080ab6:	b209      	sxth	r1, r1
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 8080ab8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 8080abc:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 8080ac0:	b212      	sxth	r2, r2
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 8080ac2:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 8080ac4:	8521      	strh	r1, [r4, #40]	; 0x28
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 8080ac6:	8562      	strh	r2, [r4, #42]	; 0x2a
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 8080ac8:	85a3      	strh	r3, [r4, #44]	; 0x2c
		if (_autoCalc)
 8080aca:	b15d      	cbz	r5, 8080ae4 <_ZN7LSM9DS18readGyroEv+0x5e>
		{
			gx -= gBiasRaw[X_AXIS];
 8080acc:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8080ad0:	1b49      	subs	r1, r1, r5
 8080ad2:	8521      	strh	r1, [r4, #40]	; 0x28
			gy -= gBiasRaw[Y_AXIS];
 8080ad4:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8080ad8:	1a52      	subs	r2, r2, r1
 8080ada:	8562      	strh	r2, [r4, #42]	; 0x2a
			gz -= gBiasRaw[Z_AXIS];
 8080adc:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8080ae0:	1a9b      	subs	r3, r3, r2
 8080ae2:	85a3      	strh	r3, [r4, #44]	; 0x2c
		}
	}
	
	return status;
}
 8080ae4:	b003      	add	sp, #12
 8080ae6:	bd30      	pop	{r4, r5, pc}

08080ae8 <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 8080ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080aea:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080aec:	7801      	ldrb	r1, [r0, #0]
 8080aee:	2901      	cmp	r1, #1
 8080af0:	d107      	bne.n	8080b02 <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 8080af2:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8080af6:	9300      	str	r3, [sp, #0]
 8080af8:	4613      	mov	r3, r2
 8080afa:	462a      	mov	r2, r5
 8080afc:	f7ff ff23 	bl	8080946 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 8080b00:	e007      	b.n	8080b12 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8080b02:	b931      	cbnz	r1, 8080b12 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 8080b04:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8080b08:	9300      	str	r3, [sp, #0]
 8080b0a:	4613      	mov	r3, r2
 8080b0c:	462a      	mov	r2, r5
 8080b0e:	f7ff fd3b 	bl	8080588 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 8080b12:	b003      	add	sp, #12
 8080b14:	bd30      	pop	{r4, r5, pc}

08080b16 <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 8080b16:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 8080b18:	2306      	movs	r3, #6
 8080b1a:	466a      	mov	r2, sp
 8080b1c:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 8080b1e:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 8080b20:	f7ff ffe2 	bl	8080ae8 <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 8080b24:	b1a0      	cbz	r0, 8080b50 <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 8080b26:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8080b2a:	f89d 3000 	ldrb.w	r3, [sp]
 8080b2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080b32:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 8080b34:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8080b38:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8080b3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080b40:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 8080b42:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8080b46:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8080b4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080b4e:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 8080b50:	b002      	add	sp, #8
 8080b52:	bd10      	pop	{r4, pc}

08080b54 <_GLOBAL__sub_I_magSensitivity>:
 8080b54:	f010 bae8 	b.w	8091128 <HAL_Pin_Map>

08080b58 <_GLOBAL__sub_I__ZN7istream3getEv>:
 8080b58:	f010 bae6 	b.w	8091128 <HAL_Pin_Map>

08080b5c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8080b5c:	b510      	push	{r4, lr}
 8080b5e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8080b60:	3028      	adds	r0, #40	; 0x28
 8080b62:	f001 f8eb 	bl	8081d3c <_ZN8FatCache4syncEv>
 8080b66:	b128      	cbz	r0, 8080b74 <_ZN9FatVolume9cacheSyncEv+0x18>
 8080b68:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 8080b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 8080b70:	f001 b8e4 	b.w	8081d3c <_ZN8FatCache4syncEv>
  }
 8080b74:	bd10      	pop	{r4, pc}

08080b76 <_ZN7FatFile11lfnChecksumEPh>:
 * <http://www.gnu.org/licenses/>.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 8080b76:	1e41      	subs	r1, r0, #1
 8080b78:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 8080b7c:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8080b7e:	0843      	lsrs	r3, r0, #1
 8080b80:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8080b84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8080b88:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8080b8a:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8080b8c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8080b90:	d1f5      	bne.n	8080b7e <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8080b92:	4770      	bx	lr

08080b94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8080b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8080b98:	7803      	ldrb	r3, [r0, #0]
 8080b9a:	1c44      	adds	r4, r0, #1
 8080b9c:	2b20      	cmp	r3, #32
 8080b9e:	d101      	bne.n	8080ba4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8080ba0:	4620      	mov	r0, r4
 8080ba2:	e7f9      	b.n	8080b98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8080ba4:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080ba6:	4f70      	ldr	r7, [pc, #448]	; (8080d68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 8080ba8:	6088      	str	r0, [r1, #8]
 8080baa:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 8080bac:	462e      	mov	r6, r5
 8080bae:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8080bb2:	b30b      	cbz	r3, 8080bf8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8080bb4:	2b2f      	cmp	r3, #47	; 0x2f
 8080bb6:	d101      	bne.n	8080bbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8080bb8:	1903      	adds	r3, r0, r4
 8080bba:	e017      	b.n	8080bec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080bbc:	2b5c      	cmp	r3, #92	; 0x5c
 8080bbe:	d102      	bne.n	8080bc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8080bc0:	2000      	movs	r0, #0
 8080bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080bc6:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 8080bca:	b2e4      	uxtb	r4, r4
 8080bcc:	2c1d      	cmp	r4, #29
 8080bce:	d803      	bhi.n	8080bd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8080bd0:	fa27 f404 	lsr.w	r4, r7, r4
 8080bd4:	07e4      	lsls	r4, r4, #31
 8080bd6:	d4f3      	bmi.n	8080bc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8080bd8:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 8080bdc:	2c3c      	cmp	r4, #60	; 0x3c
 8080bde:	d0ef      	beq.n	8080bc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 8080be0:	3b20      	subs	r3, #32
 8080be2:	2b5e      	cmp	r3, #94	; 0x5e
 8080be4:	d9e1      	bls.n	8080baa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 8080be6:	e7eb      	b.n	8080bc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 8080be8:	2d2f      	cmp	r5, #47	; 0x2f
 8080bea:	d105      	bne.n	8080bf8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8080bec:	461e      	mov	r6, r3
 8080bee:	f813 5b01 	ldrb.w	r5, [r3], #1
 8080bf2:	2d20      	cmp	r5, #32
 8080bf4:	d1f8      	bne.n	8080be8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 8080bf6:	e7f9      	b.n	8080bec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 8080bf8:	6016      	str	r6, [r2, #0]
 8080bfa:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 8080bfc:	4298      	cmp	r0, r3
 8080bfe:	ebc0 0803 	rsb	r8, r0, r3
 8080c02:	d009      	beq.n	8080c18 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 8080c04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8080c08:	2a2e      	cmp	r2, #46	; 0x2e
 8080c0a:	d0f7      	beq.n	8080bfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 8080c0c:	2a20      	cmp	r2, #32
 8080c0e:	d0f5      	beq.n	8080bfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 8080c10:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8080c14:	dcd4      	bgt.n	8080bc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 8080c16:	e001      	b.n	8080c1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 8080c18:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 8080c1c:	f8c1 8004 	str.w	r8, [r1, #4]
 8080c20:	f101 030c 	add.w	r3, r1, #12
 8080c24:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 8080c28:	2420      	movs	r4, #32
 8080c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 8080c2e:	4293      	cmp	r3, r2
 8080c30:	d1fb      	bne.n	8080c2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8080c32:	4603      	mov	r3, r0
 8080c34:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8080c36:	f813 4b01 	ldrb.w	r4, [r3], #1
 8080c3a:	2c2e      	cmp	r4, #46	; 0x2e
 8080c3c:	d0fa      	beq.n	8080c34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 8080c3e:	2c20      	cmp	r4, #32
 8080c40:	d0f8      	beq.n	8080c34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8080c42:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8080c46:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8080c4a:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8080c4c:	1c73      	adds	r3, r6, #1
 8080c4e:	d107      	bne.n	8080c60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8080c50:	2700      	movs	r7, #0
 8080c52:	f04f 0e07 	mov.w	lr, #7
 8080c56:	463d      	mov	r5, r7
 8080c58:	46ba      	mov	sl, r7
 8080c5a:	f04f 0908 	mov.w	r9, #8
 8080c5e:	e009      	b.n	8080c74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8080c60:	5d83      	ldrb	r3, [r0, r6]
 8080c62:	2b2e      	cmp	r3, #46	; 0x2e
 8080c64:	d0f4      	beq.n	8080c50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 8080c66:	3e01      	subs	r6, #1
 8080c68:	e7f0      	b.n	8080c4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 8080c6a:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 8080c6c:	2b20      	cmp	r3, #32
 8080c6e:	d104      	bne.n	8080c7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8080c70:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8080c72:	3201      	adds	r2, #1
 8080c74:	4542      	cmp	r2, r8
 8080c76:	dbf8      	blt.n	8080c6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 8080c78:	e04b      	b.n	8080d12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 8080c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8080c7c:	d102      	bne.n	8080c84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8080c7e:	42b2      	cmp	r2, r6
 8080c80:	d1f6      	bne.n	8080c70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8080c82:	e003      	b.n	8080c8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8080c84:	2b22      	cmp	r3, #34	; 0x22
 8080c86:	d017      	beq.n	8080cb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 8080c88:	2b7c      	cmp	r3, #124	; 0x7c
 8080c8a:	d015      	beq.n	8080cb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8080c8c:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8080c90:	f1bc 0f05 	cmp.w	ip, #5
 8080c94:	d801      	bhi.n	8080c9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 8080c96:	2b2d      	cmp	r3, #45	; 0x2d
 8080c98:	d10e      	bne.n	8080cb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 8080c9a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8080c9e:	f1bc 0f05 	cmp.w	ip, #5
 8080ca2:	d909      	bls.n	8080cb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8080ca4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8080ca8:	f1bc 0f02 	cmp.w	ip, #2
 8080cac:	d904      	bls.n	8080cb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 8080cae:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8080cb2:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8080cb6:	d902      	bls.n	8080cbe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 8080cb8:	42b2      	cmp	r2, r6
 8080cba:	d10e      	bne.n	8080cda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 8080cbc:	e049      	b.n	8080d52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8080cbe:	42b2      	cmp	r2, r6
 8080cc0:	d047      	beq.n	8080d52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 8080cc2:	4575      	cmp	r5, lr
 8080cc4:	d821      	bhi.n	8080d0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 8080cc6:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8080cca:	f1bc 0f19 	cmp.w	ip, #25
 8080cce:	d808      	bhi.n	8080ce2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 8080cd0:	3b20      	subs	r3, #32
 8080cd2:	b2db      	uxtb	r3, r3
        lc |= bit;
 8080cd4:	ea49 0707 	orr.w	r7, r9, r7
 8080cd8:	e00a      	b.n	8080cf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8080cda:	4575      	cmp	r5, lr
 8080cdc:	d815      	bhi.n	8080d0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 8080cde:	2400      	movs	r4, #0
      c = '_';
 8080ce0:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 8080ce2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8080ce6:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8080cea:	bf98      	it	ls
 8080cec:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 8080cf0:	f105 0c01 	add.w	ip, r5, #1
 8080cf4:	fa5f fc8c 	uxtb.w	ip, ip
 8080cf8:	440d      	add	r5, r1
      if (i < 7) {
 8080cfa:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 8080cfe:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 8080d00:	d801      	bhi.n	8080d06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 8080d02:	f881 c00c 	strb.w	ip, [r1, #12]
 8080d06:	4665      	mov	r5, ip
 8080d08:	e7b3      	b.n	8080c72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8080d0a:	f1be 0f0a 	cmp.w	lr, #10
 8080d0e:	d117      	bne.n	8080d40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8080d10:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 8080d12:	7b4b      	ldrb	r3, [r1, #13]
 8080d14:	2b20      	cmp	r3, #32
 8080d16:	f43f af53 	beq.w	8080bc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 8080d1a:	b13c      	cbz	r4, 8080d2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8080d1c:	ea1a 0f07 	tst.w	sl, r7
 8080d20:	bf18      	it	ne
 8080d22:	2702      	movne	r7, #2
 8080d24:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 8080d26:	2001      	movs	r0, #1
 8080d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8080d2c:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8080d2e:	2001      	movs	r0, #1
 8080d30:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8080d32:	4419      	add	r1, r3
 8080d34:	237e      	movs	r3, #126	; 0x7e
 8080d36:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8080d38:	2331      	movs	r3, #49	; 0x31
 8080d3a:	738b      	strb	r3, [r1, #14]
 8080d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8080d40:	42b2      	cmp	r2, r6
 8080d42:	dce5      	bgt.n	8080d10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8080d44:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8080d46:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8080d4a:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8080d4c:	f04f 0910 	mov.w	r9, #16
 8080d50:	e78e      	b.n	8080c70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8080d52:	f1be 0f0a 	cmp.w	lr, #10
 8080d56:	d0db      	beq.n	8080d10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8080d58:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8080d5a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8080d5e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8080d60:	f04f 0910 	mov.w	r9, #16
 8080d64:	e785      	b.n	8080c72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8080d66:	bf00      	nop
 8080d68:	31000101 	.word	0x31000101

08080d6c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8080d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080d70:	4606      	mov	r6, r0
 8080d72:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8080d74:	f891 900c 	ldrb.w	r9, [r1, #12]
 8080d78:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8080d7a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8080d7c:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8080d80:	6869      	ldr	r1, [r5, #4]
 8080d82:	68aa      	ldr	r2, [r5, #8]
 8080d84:	1863      	adds	r3, r4, r1
 8080d86:	b29b      	uxth	r3, r3
 8080d88:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 8080d8a:	4291      	cmp	r1, r2
 8080d8c:	d006      	beq.n	8080d9c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8080d8e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8080d92:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8080d96:	4043      	eors	r3, r0
 8080d98:	b29b      	uxth	r3, r3
 8080d9a:	e7f6      	b.n	8080d8a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8080d9c:	f1b9 0f03 	cmp.w	r9, #3
 8080da0:	bf28      	it	cs
 8080da2:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080da6:	f109 0204 	add.w	r2, r9, #4
 8080daa:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8080dac:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080db0:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080db2:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080db4:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080db6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080db8:	bf94      	ite	ls
 8080dba:	3130      	addls	r1, #48	; 0x30
 8080dbc:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080dbe:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080dc0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8080dc2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080dc6:	d3f1      	bcc.n	8080dac <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8080dc8:	eb05 0309 	add.w	r3, r5, r9
 8080dcc:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 8080dce:	2100      	movs	r1, #0
 8080dd0:	4630      	mov	r0, r6
 8080dd2:	f000 fda4 	bl	808191e <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 8080dd6:	2101      	movs	r1, #1
 8080dd8:	4630      	mov	r0, r6
 8080dda:	f000 fd83 	bl	80818e4 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8080dde:	4601      	mov	r1, r0
 8080de0:	b928      	cbnz	r0, 8080dee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8080de2:	7870      	ldrb	r0, [r6, #1]
 8080de4:	fab0 f080 	clz	r0, r0
 8080de8:	0940      	lsrs	r0, r0, #5
 8080dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8080dee:	7803      	ldrb	r3, [r0, #0]
 8080df0:	b14b      	cbz	r3, 8080e06 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8080df2:	7ac3      	ldrb	r3, [r0, #11]
 8080df4:	071b      	lsls	r3, r3, #28
 8080df6:	d4ee      	bmi.n	8080dd6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8080df8:	220b      	movs	r2, #11
 8080dfa:	4640      	mov	r0, r8
 8080dfc:	f012 fb9a 	bl	8093534 <memcmp>
 8080e00:	2800      	cmp	r0, #0
 8080e02:	d1e8      	bne.n	8080dd6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8080e04:	e002      	b.n	8080e0c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 8080e06:	2001      	movs	r0, #1
 8080e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8080e0c:	3401      	adds	r4, #1
 8080e0e:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8080e10:	2c64      	cmp	r4, #100	; 0x64
 8080e12:	d1b5      	bne.n	8080d80 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8080e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08080e18 <_ZN7FatFile4openEPS_P7fname_th>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8080e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080e1c:	b089      	sub	sp, #36	; 0x24
 8080e1e:	9303      	str	r3, [sp, #12]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080e20:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8080e22:	9005      	str	r0, [sp, #20]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080e24:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8080e28:	460e      	mov	r6, r1
 8080e2a:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080e2c:	d101      	bne.n	8080e32 <_ZN7FatFile4openEPS_P7fname_th+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8080e2e:	2000      	movs	r0, #0
 8080e30:	e199      	b.n	8081166 <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080e32:	9b05      	ldr	r3, [sp, #20]
 8080e34:	781b      	ldrb	r3, [r3, #0]
 8080e36:	2b00      	cmp	r3, #0
 8080e38:	d1f9      	bne.n	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8080e3a:	7813      	ldrb	r3, [r2, #0]
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8080e3c:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8080e40:	079b      	lsls	r3, r3, #30
 8080e42:	f000 8186 	beq.w	8081152 <_ZN7FatFile4openEPS_P7fname_th+0x33a>
 8080e46:	f10b 030c 	add.w	r3, fp, #12
 8080e4a:	270d      	movs	r7, #13
 8080e4c:	fbb3 f7f7 	udiv	r7, r3, r7
 8080e50:	3701      	adds	r7, #1
 8080e52:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8080e54:	f04f 0800 	mov.w	r8, #0
 8080e58:	2100      	movs	r1, #0
 8080e5a:	4630      	mov	r0, r6
 8080e5c:	f000 fd5f 	bl	808191e <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8080e60:	4645      	mov	r5, r8
  uint8_t ord = 0;
 8080e62:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8080e64:	4644      	mov	r4, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8080e66:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 8080e6a:	f8cd 8008 	str.w	r8, [sp, #8]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
 8080e6e:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8080e72:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8080e74:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 8080e76:	2101      	movs	r1, #1
 8080e78:	4630      	mov	r0, r6
 8080e7a:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8080e7c:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8080e80:	f000 fd30 	bl	80818e4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8080e84:	9b07      	ldr	r3, [sp, #28]
 8080e86:	b920      	cbnz	r0, 8080e92 <_ZN7FatFile4openEPS_P7fname_th+0x7a>
      if (dirFile->getError()) {
 8080e88:	7873      	ldrb	r3, [r6, #1]
 8080e8a:	2b00      	cmp	r3, #0
 8080e8c:	f000 808e 	beq.w	8080fac <_ZN7FatFile4openEPS_P7fname_th+0x194>
 8080e90:	e7cd      	b.n	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8080e92:	7802      	ldrb	r2, [r0, #0]
 8080e94:	2ae5      	cmp	r2, #229	; 0xe5
 8080e96:	d000      	beq.n	8080e9a <_ZN7FatFile4openEPS_P7fname_th+0x82>
 8080e98:	b942      	cbnz	r2, 8080eac <_ZN7FatFile4openEPS_P7fname_th+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8080e9a:	2d00      	cmp	r5, #0
 8080e9c:	bf08      	it	eq
 8080e9e:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8080ea0:	42bd      	cmp	r5, r7
        freeFound++;
 8080ea2:	bf3c      	itt	cc
 8080ea4:	3501      	addcc	r5, #1
 8080ea6:	b2ed      	uxtbcc	r5, r5
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8080ea8:	b922      	cbnz	r2, 8080eb4 <_ZN7FatFile4openEPS_P7fname_th+0x9c>
 8080eaa:	e07f      	b.n	8080fac <_ZN7FatFile4openEPS_P7fname_th+0x194>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8080eac:	42bd      	cmp	r5, r7
 8080eae:	bf38      	it	cc
 8080eb0:	2500      	movcc	r5, #0
 8080eb2:	e003      	b.n	8080ebc <_ZN7FatFile4openEPS_P7fname_th+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8080eb4:	2ae5      	cmp	r2, #229	; 0xe5
 8080eb6:	d101      	bne.n	8080ebc <_ZN7FatFile4openEPS_P7fname_th+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 8080eb8:	2400      	movs	r4, #0
 8080eba:	e7db      	b.n	8080e74 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8080ebc:	2a2e      	cmp	r2, #46	; 0x2e
 8080ebe:	d0fb      	beq.n	8080eb8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080ec0:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8080ec2:	290f      	cmp	r1, #15
 8080ec4:	d150      	bne.n	8080f68 <_ZN7FatFile4openEPS_P7fname_th+0x150>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 8080ec6:	b93c      	cbnz	r4, 8080ed8 <_ZN7FatFile4openEPS_P7fname_th+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8080ec8:	0651      	lsls	r1, r2, #25
 8080eca:	d5d3      	bpl.n	8080e74 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 8080ecc:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8080ece:	f002 041f 	and.w	r4, r2, #31
        chksum = ldir->chksum;
 8080ed2:	9302      	str	r3, [sp, #8]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8080ed4:	4623      	mov	r3, r4
 8080ed6:	e007      	b.n	8080ee8 <_ZN7FatFile4openEPS_P7fname_th+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8080ed8:	3b01      	subs	r3, #1
 8080eda:	b2db      	uxtb	r3, r3
 8080edc:	429a      	cmp	r2, r3
 8080ede:	d1eb      	bne.n	8080eb8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080ee0:	7b42      	ldrb	r2, [r0, #13]
 8080ee2:	9902      	ldr	r1, [sp, #8]
 8080ee4:	4291      	cmp	r1, r2
 8080ee6:	d1e7      	bne.n	8080eb8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8080ee8:	1e5a      	subs	r2, r3, #1
 8080eea:	f04f 0c0d 	mov.w	ip, #13
 8080eee:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8080ef2:	45e3      	cmp	fp, ip
 8080ef4:	d9e0      	bls.n	8080eb8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080ef6:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8080efa:	f1be 0f04 	cmp.w	lr, #4
 8080efe:	fa5f f28e 	uxtb.w	r2, lr
 8080f02:	d804      	bhi.n	8080f0e <_ZN7FatFile4openEPS_P7fname_th+0xf6>
    return ldir->name1[i];
 8080f04:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8080f08:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8080f0c:	e00c      	b.n	8080f28 <_ZN7FatFile4openEPS_P7fname_th+0x110>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8080f0e:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080f10:	bf95      	itete	ls
 8080f12:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080f16:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080f1a:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080f1e:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080f22:	bf94      	ite	ls
 8080f24:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080f26:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 8080f28:	45e3      	cmp	fp, ip
 8080f2a:	d103      	bne.n	8080f34 <_ZN7FatFile4openEPS_P7fname_th+0x11c>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8080f2c:	2a00      	cmp	r2, #0
 8080f2e:	bf18      	it	ne
 8080f30:	2400      	movne	r4, #0
 8080f32:	e79f      	b.n	8080e74 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080f34:	2aff      	cmp	r2, #255	; 0xff
 8080f36:	d8bf      	bhi.n	8080eb8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080f38:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080f3a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8080f3e:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080f40:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080f44:	bf98      	it	ls
 8080f46:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080f48:	f811 100c 	ldrb.w	r1, [r1, ip]
 8080f4c:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080f50:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8080f54:	bf98      	it	ls
 8080f56:	b2d2      	uxtbls	r2, r2
 8080f58:	f1bc 0f19 	cmp.w	ip, #25
 8080f5c:	bf9c      	itt	ls
 8080f5e:	3120      	addls	r1, #32
 8080f60:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080f62:	4291      	cmp	r1, r2
 8080f64:	d1a8      	bne.n	8080eb8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080f66:	e0f6      	b.n	8081156 <_ZN7FatFile4openEPS_P7fname_th+0x33e>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8080f68:	070a      	lsls	r2, r1, #28
 8080f6a:	d4a5      	bmi.n	8080eb8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
      if (lfnOrd) {
 8080f6c:	b14c      	cbz	r4, 8080f82 <_ZN7FatFile4openEPS_P7fname_th+0x16a>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8080f6e:	2b01      	cmp	r3, #1
 8080f70:	f47f af5d 	bne.w	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8080f74:	f7ff fdff 	bl	8080b76 <_ZN7FatFile11lfnChecksumEPh>
 8080f78:	9b02      	ldr	r3, [sp, #8]
 8080f7a:	4283      	cmp	r3, r0
 8080f7c:	f47f af57 	bne.w	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8080f80:	e00f      	b.n	8080fa2 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8080f82:	220b      	movs	r2, #11
 8080f84:	9906      	ldr	r1, [sp, #24]
 8080f86:	9307      	str	r3, [sp, #28]
 8080f88:	f012 fad4 	bl	8093534 <memcmp>
 8080f8c:	9b07      	ldr	r3, [sp, #28]
 8080f8e:	2800      	cmp	r0, #0
 8080f90:	f47f af70 	bne.w	8080e74 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8080f94:	f899 2000 	ldrb.w	r2, [r9]
 8080f98:	07d1      	lsls	r1, r2, #31
 8080f9a:	d502      	bpl.n	8080fa2 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        fnameFound = true;
 8080f9c:	2201      	movs	r2, #1
 8080f9e:	9204      	str	r2, [sp, #16]
 8080fa0:	e768      	b.n	8080e74 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8080fa2:	9b03      	ldr	r3, [sp, #12]
 8080fa4:	061a      	lsls	r2, r3, #24
 8080fa6:	f140 80cc 	bpl.w	8081142 <_ZN7FatFile4openEPS_P7fname_th+0x32a>
 8080faa:	e740      	b.n	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8080fac:	9b03      	ldr	r3, [sp, #12]
 8080fae:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8080fb2:	2b42      	cmp	r3, #66	; 0x42
 8080fb4:	f47f af3b 	bne.w	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 8080fb8:	2d00      	cmp	r5, #0
 8080fba:	bf08      	it	eq
 8080fbc:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8080fbe:	42bd      	cmp	r5, r7
 8080fc0:	d302      	bcc.n	8080fc8 <_ZN7FatFile4openEPS_P7fname_th+0x1b0>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8080fc2:	9b04      	ldr	r3, [sp, #16]
 8080fc4:	b9cb      	cbnz	r3, 8080ffa <_ZN7FatFile4openEPS_P7fname_th+0x1e2>
 8080fc6:	e01f      	b.n	8081008 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8080fc8:	2100      	movs	r1, #0
 8080fca:	4630      	mov	r0, r6
 8080fcc:	f000 fc8a 	bl	80818e4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8080fd0:	b910      	cbnz	r0, 8080fd8 <_ZN7FatFile4openEPS_P7fname_th+0x1c0>
      if (dirFile->getError()) {
 8080fd2:	7873      	ldrb	r3, [r6, #1]
 8080fd4:	b15b      	cbz	r3, 8080fee <_ZN7FatFile4openEPS_P7fname_th+0x1d6>
 8080fd6:	e72a      	b.n	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8080fd8:	3501      	adds	r5, #1
 8080fda:	b2ed      	uxtb	r5, r5
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8080fdc:	e7ef      	b.n	8080fbe <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 8080fde:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8080fe0:	791b      	ldrb	r3, [r3, #4]
 8080fe2:	2b01      	cmp	r3, #1
 8080fe4:	d8ed      	bhi.n	8080fc2 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
      break;
    }
    freeFound += 16;
 8080fe6:	3510      	adds	r5, #16
 8080fe8:	b2ed      	uxtb	r5, r5
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 8080fea:	42af      	cmp	r7, r5
 8080fec:	d9e9      	bls.n	8080fc2 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 8080fee:	4630      	mov	r0, r6
 8080ff0:	f000 fb4a 	bl	8081688 <_ZN7FatFile13addDirClusterEv>
 8080ff4:	2800      	cmp	r0, #0
 8080ff6:	d1f2      	bne.n	8080fde <_ZN7FatFile4openEPS_P7fname_th+0x1c6>
 8080ff8:	e719      	b.n	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 8080ffa:	4649      	mov	r1, r9
 8080ffc:	4630      	mov	r0, r6
 8080ffe:	f7ff feb5 	bl	8080d6c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8081002:	2800      	cmp	r0, #0
 8081004:	f43f af13 	beq.w	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8081008:	ea4f 1148 	mov.w	r1, r8, lsl #5
 808100c:	4630      	mov	r0, r6
 808100e:	f000 fc86 	bl	808191e <_ZN7FatFile7seekSetEm>
 8081012:	2800      	cmp	r0, #0
 8081014:	f43f af0b 	beq.w	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8081018:	1e7c      	subs	r4, r7, #1
 808101a:	b2e4      	uxtb	r4, r4
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 808101c:	4625      	mov	r5, r4
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808101e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8081022:	f04f 080f 	mov.w	r8, #15
 8081026:	e040      	b.n	80810aa <_ZN7FatFile4openEPS_P7fname_th+0x292>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8081028:	2100      	movs	r1, #0
 808102a:	4630      	mov	r0, r6
 808102c:	f000 fc5a 	bl	80818e4 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8081030:	4607      	mov	r7, r0
 8081032:	2800      	cmp	r0, #0
 8081034:	f43f aefb 	beq.w	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8081038:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808103a:	42a5      	cmp	r5, r4
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 808103c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8081040:	f043 0301 	orr.w	r3, r3, #1
 8081044:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8081048:	bf14      	ite	ne
 808104a:	462a      	movne	r2, r5
 808104c:	f045 0240 	orreq.w	r2, r5, #64	; 0x40
 8081050:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8081052:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8081056:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 808105a:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808105e:	9202      	str	r2, [sp, #8]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8081060:	f7ff fd89 	bl	8080b76 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081064:	9a02      	ldr	r2, [sp, #8]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8081066:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8081068:	f887 a01a 	strb.w	sl, [r7, #26]
 808106c:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081070:	f002 021f 	and.w	r2, r2, #31
 8081074:	230d      	movs	r3, #13
 8081076:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8081078:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 808107c:	435a      	muls	r2, r3
 808107e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8081080:	4593      	cmp	fp, r2
 8081082:	d915      	bls.n	80810b0 <_ZN7FatFile4openEPS_P7fname_th+0x298>
 8081084:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 8081088:	2b04      	cmp	r3, #4
 808108a:	fa5f fc83 	uxtb.w	ip, r3
 808108e:	f103 0001 	add.w	r0, r3, #1
 8081092:	d813      	bhi.n	80810bc <_ZN7FatFile4openEPS_P7fname_th+0x2a4>
    ldir->name1[i] = c;
 8081094:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8081098:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 808109c:	280d      	cmp	r0, #13
 808109e:	f102 0201 	add.w	r2, r2, #1
 80810a2:	4603      	mov	r3, r0
 80810a4:	d1ec      	bne.n	8081080 <_ZN7FatFile4openEPS_P7fname_th+0x268>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80810a6:	3d01      	subs	r5, #1
 80810a8:	b2ed      	uxtb	r5, r5
 80810aa:	2d00      	cmp	r5, #0
 80810ac:	d1bc      	bne.n	8081028 <_ZN7FatFile4openEPS_P7fname_th+0x210>
 80810ae:	e00e      	b.n	80810ce <_ZN7FatFile4openEPS_P7fname_th+0x2b6>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80810b0:	bf14      	ite	ne
 80810b2:	f04f 31ff 	movne.w	r1, #4294967295
 80810b6:	2100      	moveq	r1, #0
 80810b8:	b289      	uxth	r1, r1
 80810ba:	e7e5      	b.n	8081088 <_ZN7FatFile4openEPS_P7fname_th+0x270>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80810bc:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 80810c0:	bf94      	ite	ls
 80810c2:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 80810c6:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 80810ca:	8099      	strh	r1, [r3, #4]
 80810cc:	e7e6      	b.n	808109c <_ZN7FatFile4openEPS_P7fname_th+0x284>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80810ce:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 80810d0:	4629      	mov	r1, r5
 80810d2:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80810d4:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 80810d8:	f000 fc04 	bl	80818e4 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80810dc:	4607      	mov	r7, r0
 80810de:	2800      	cmp	r0, #0
 80810e0:	f43f aea5 	beq.w	8080e2e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 80810e4:	2220      	movs	r2, #32
 80810e6:	4629      	mov	r1, r5
 80810e8:	f012 fa59 	bl	809359e <memset>
  memcpy(dir->name, fname->sfn, 11);
 80810ec:	464b      	mov	r3, r9
 80810ee:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 80810f2:	603a      	str	r2, [r7, #0]
 80810f4:	685a      	ldr	r2, [r3, #4]
 80810f6:	607a      	str	r2, [r7, #4]
 80810f8:	891a      	ldrh	r2, [r3, #8]
 80810fa:	813a      	strh	r2, [r7, #8]
 80810fc:	7a9b      	ldrb	r3, [r3, #10]
 80810fe:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8081100:	f899 3000 	ldrb.w	r3, [r9]
 8081104:	f003 0318 	and.w	r3, r3, #24
 8081108:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 808110a:	4b18      	ldr	r3, [pc, #96]	; (808116c <_ZN7FatFile4openEPS_P7fname_th+0x354>)
 808110c:	681b      	ldr	r3, [r3, #0]
 808110e:	b12b      	cbz	r3, 808111c <_ZN7FatFile4openEPS_P7fname_th+0x304>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8081110:	f107 010e 	add.w	r1, r7, #14
 8081114:	f107 0010 	add.w	r0, r7, #16
 8081118:	4798      	blx	r3
 808111a:	e006      	b.n	808112a <_ZN7FatFile4openEPS_P7fname_th+0x312>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 808111c:	2321      	movs	r3, #33	; 0x21
 808111e:	743b      	strb	r3, [r7, #16]
 8081120:	2328      	movs	r3, #40	; 0x28
 8081122:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8081124:	2308      	movs	r3, #8
 8081126:	73bd      	strb	r5, [r7, #14]
 8081128:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 808112a:	8a3b      	ldrh	r3, [r7, #16]
 808112c:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 808112e:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8081130:	89fb      	ldrh	r3, [r7, #14]
 8081132:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8081134:	68b2      	ldr	r2, [r6, #8]
 8081136:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 808113a:	f043 0301 	orr.w	r3, r3, #1
 808113e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8081142:	9400      	str	r4, [sp, #0]
 8081144:	9b03      	ldr	r3, [sp, #12]
 8081146:	4652      	mov	r2, sl
 8081148:	4631      	mov	r1, r6
 808114a:	9805      	ldr	r0, [sp, #20]
 808114c:	f000 fc30 	bl	80819b0 <_ZN7FatFile15openCachedEntryEPS_thh>
 8081150:	e009      	b.n	8081166 <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8081152:	2701      	movs	r7, #1
 8081154:	e67e      	b.n	8080e54 <_ZN7FatFile4openEPS_P7fname_th+0x3c>
 8081156:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 808115a:	f1be 0f0d 	cmp.w	lr, #13
 808115e:	f43f ae89 	beq.w	8080e74 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081162:	46d4      	mov	ip, sl
 8081164:	e6c9      	b.n	8080efa <_ZN7FatFile4openEPS_P7fname_th+0xe2>
  }
  return true;

fail:
  return false;
}
 8081166:	b009      	add	sp, #36	; 0x24
 8081168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808116c:	2000050c 	.word	0x2000050c

08081170 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8081170:	f00f bfda 	b.w	8091128 <HAL_Pin_Map>

08081174 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8081174:	f00f bfd8 	b.w	8091128 <HAL_Pin_Map>

08081178 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8081178:	f00f bfd6 	b.w	8091128 <HAL_Pin_Map>

0808117c <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 808117c:	f00f bfd4 	b.w	8091128 <HAL_Pin_Map>

08081180 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8081180:	6803      	ldr	r3, [r0, #0]
 8081182:	695b      	ldr	r3, [r3, #20]
 8081184:	4718      	bx	r3

08081186 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8081186:	6803      	ldr	r3, [r0, #0]
 8081188:	68db      	ldr	r3, [r3, #12]
 808118a:	4718      	bx	r3

0808118c <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 808118c:	b510      	push	{r4, lr}
  if (!m_selected) {
 808118e:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8081190:	4604      	mov	r4, r0
  if (!m_selected) {
 8081192:	b16b      	cbz	r3, 80811b0 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8081194:	2101      	movs	r1, #1
 8081196:	7940      	ldrb	r0, [r0, #5]
 8081198:	f011 fac5 	bl	8092726 <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 808119c:	21ff      	movs	r1, #255	; 0xff
 808119e:	6820      	ldr	r0, [r4, #0]
 80811a0:	f7ff ffee 	bl	8081180 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 80811a4:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 80811a6:	6803      	ldr	r3, [r0, #0]
 80811a8:	689b      	ldr	r3, [r3, #8]
 80811aa:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 80811ac:	2300      	movs	r3, #0
 80811ae:	7123      	strb	r3, [r4, #4]
 80811b0:	bd10      	pop	{r4, pc}

080811b2 <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 80811b2:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 80811b4:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 80811b6:	4604      	mov	r4, r0
  if (m_selected) {
 80811b8:	b955      	cbnz	r5, 80811d0 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 80811ba:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 80811bc:	79e1      	ldrb	r1, [r4, #7]
 80811be:	6803      	ldr	r3, [r0, #0]
 80811c0:	685b      	ldr	r3, [r3, #4]
 80811c2:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 80811c4:	4629      	mov	r1, r5
 80811c6:	7960      	ldrb	r0, [r4, #5]
 80811c8:	f011 faad 	bl	8092726 <digitalWrite>
  m_selected = true;
 80811cc:	2301      	movs	r3, #1
 80811ce:	7123      	strb	r3, [r4, #4]
 80811d0:	bd38      	pop	{r3, r4, r5, pc}

080811d2 <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80811d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80811d4:	4604      	mov	r4, r0
 80811d6:	460d      	mov	r5, r1
 80811d8:	4616      	mov	r6, r2
 80811da:	f010 f825 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
 80811de:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 80811e0:	6820      	ldr	r0, [r4, #0]
 80811e2:	f7ff ffd0 	bl	8081186 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80811e6:	28ff      	cmp	r0, #255	; 0xff
 80811e8:	7220      	strb	r0, [r4, #8]
 80811ea:	d107      	bne.n	80811fc <_ZN9SdSpiCard8readDataEPhj+0x2a>
 80811ec:	f010 f81c 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 80811f0:	1bc0      	subs	r0, r0, r7
 80811f2:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80811f6:	d9f3      	bls.n	80811e0 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80811f8:	2311      	movs	r3, #17
 80811fa:	e00c      	b.n	8081216 <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 80811fc:	28fe      	cmp	r0, #254	; 0xfe
 80811fe:	d001      	beq.n	8081204 <_ZN9SdSpiCard8readDataEPhj+0x32>
 8081200:	230f      	movs	r3, #15
 8081202:	e008      	b.n	8081216 <_ZN9SdSpiCard8readDataEPhj+0x44>
 8081204:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 8081206:	4632      	mov	r2, r6
 8081208:	6803      	ldr	r3, [r0, #0]
 808120a:	4629      	mov	r1, r5
 808120c:	691b      	ldr	r3, [r3, #16]
 808120e:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8081210:	7220      	strb	r0, [r4, #8]
 8081212:	b130      	cbz	r0, 8081222 <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8081214:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8081216:	4620      	mov	r0, r4
 8081218:	71a3      	strb	r3, [r4, #6]
 808121a:	f7ff ffb7 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808121e:	2000      	movs	r0, #0
}
 8081220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 8081222:	6820      	ldr	r0, [r4, #0]
 8081224:	f7ff ffaf 	bl	8081186 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 8081228:	6820      	ldr	r0, [r4, #0]
 808122a:	f7ff ffac 	bl	8081186 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808122e:	2001      	movs	r0, #1
 8081230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081232 <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8081232:	b570      	push	{r4, r5, r6, lr}
 8081234:	4606      	mov	r6, r0
 8081236:	460c      	mov	r4, r1
 8081238:	f00f fff6 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
 808123c:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 808123e:	6830      	ldr	r0, [r6, #0]
 8081240:	f7ff ffa1 	bl	8081186 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8081244:	28ff      	cmp	r0, #255	; 0xff
 8081246:	d006      	beq.n	8081256 <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8081248:	f00f ffee 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 808124c:	1b40      	subs	r0, r0, r5
 808124e:	42a0      	cmp	r0, r4
 8081250:	d3f5      	bcc.n	808123e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8081252:	2000      	movs	r0, #0
 8081254:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 8081256:	2001      	movs	r0, #1

fail:
  return false;
}
 8081258:	bd70      	pop	{r4, r5, r6, pc}

0808125a <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 808125a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 808125c:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 808125e:	4604      	mov	r4, r0
 8081260:	460d      	mov	r5, r1
 8081262:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 8081264:	b90b      	cbnz	r3, 808126a <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8081266:	f7ff ffa4 	bl	80811b2 <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 808126a:	f44f 7116 	mov.w	r1, #600	; 0x258
 808126e:	4620      	mov	r0, r4
 8081270:	f7ff ffdf 	bl	8081232 <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 8081274:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8081278:	6820      	ldr	r0, [r4, #0]
 808127a:	f7ff ff81 	bl	8081180 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 808127e:	f10d 0607 	add.w	r6, sp, #7
 8081282:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 8081286:	f816 1901 	ldrb.w	r1, [r6], #-1
 808128a:	6820      	ldr	r0, [r4, #0]
 808128c:	f7ff ff78 	bl	8081180 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8081290:	42be      	cmp	r6, r7
 8081292:	d1f8      	bne.n	8081286 <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8081294:	2d00      	cmp	r5, #0
 8081296:	bf0c      	ite	eq
 8081298:	2195      	moveq	r1, #149	; 0x95
 808129a:	2187      	movne	r1, #135	; 0x87
 808129c:	6820      	ldr	r0, [r4, #0]
 808129e:	f7ff ff6f 	bl	8081180 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 80812a2:	2d0c      	cmp	r5, #12
 80812a4:	d102      	bne.n	80812ac <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 80812a6:	6820      	ldr	r0, [r4, #0]
 80812a8:	f7ff ff6d 	bl	8081186 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80812ac:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 80812ae:	6820      	ldr	r0, [r4, #0]
 80812b0:	f7ff ff69 	bl	8081186 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80812b4:	0603      	lsls	r3, r0, #24
 80812b6:	7220      	strb	r0, [r4, #8]
 80812b8:	d503      	bpl.n	80812c2 <_ZN9SdSpiCard11cardCommandEhm+0x68>
 80812ba:	3501      	adds	r5, #1
 80812bc:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80812c0:	d1f5      	bne.n	80812ae <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 80812c2:	b003      	add	sp, #12
 80812c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080812c6 <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80812c6:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80812c8:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80812ca:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80812cc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80812ce:	bf18      	it	ne
 80812d0:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 80812d2:	460a      	mov	r2, r1
 80812d4:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80812d6:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 80812d8:	f7ff ffbf 	bl	808125a <_ZN9SdSpiCard11cardCommandEhm>
 80812dc:	b110      	cbz	r0, 80812e4 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
 80812de:	2304      	movs	r3, #4
 80812e0:	71a3      	strb	r3, [r4, #6]
 80812e2:	e00b      	b.n	80812fc <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 80812e4:	4629      	mov	r1, r5
 80812e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80812ea:	4620      	mov	r0, r4
 80812ec:	f7ff ff71 	bl	80811d2 <_ZN9SdSpiCard8readDataEPhj>
 80812f0:	4605      	mov	r5, r0
 80812f2:	b118      	cbz	r0, 80812fc <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 80812f4:	4620      	mov	r0, r4
 80812f6:	f7ff ff49 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80812fa:	e003      	b.n	8081304 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 80812fc:	4620      	mov	r0, r4
 80812fe:	f7ff ff45 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081302:	2500      	movs	r5, #0
}
 8081304:	4628      	mov	r0, r5
 8081306:	bd38      	pop	{r3, r4, r5, pc}

08081308 <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8081308:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 808130a:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 808130c:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 808130e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8081310:	bf18      	it	ne
 8081312:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8081314:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8081316:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8081318:	f7ff ff9f 	bl	808125a <_ZN9SdSpiCard11cardCommandEhm>
 808131c:	b130      	cbz	r0, 808132c <_ZN9SdSpiCard9readStartEm+0x24>
 808131e:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8081320:	4620      	mov	r0, r4
 8081322:	71a3      	strb	r3, [r4, #6]
 8081324:	f7ff ff32 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081328:	2000      	movs	r0, #0
 808132a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 808132c:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 808132e:	bd10      	pop	{r4, pc}

08081330 <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8081330:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8081332:	2200      	movs	r2, #0
 8081334:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8081336:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8081338:	f7ff ff8f 	bl	808125a <_ZN9SdSpiCard11cardCommandEhm>
 808133c:	b130      	cbz	r0, 808134c <_ZN9SdSpiCard8readStopEv+0x1c>
 808133e:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 8081340:	4620      	mov	r0, r4
 8081342:	71a3      	strb	r3, [r4, #6]
 8081344:	f7ff ff22 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081348:	2000      	movs	r0, #0
 808134a:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 808134c:	4620      	mov	r0, r4
 808134e:	f7ff ff1d 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8081352:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8081354:	bd10      	pop	{r4, pc}

08081356 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8081356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081358:	4605      	mov	r5, r0
 808135a:	4616      	mov	r6, r2
 808135c:	461f      	mov	r7, r3
  if (!readStart(block)) {
 808135e:	f7ff ffd3 	bl	8081308 <_ZN9SdSpiCard9readStartEm>
 8081362:	b198      	cbz	r0, 808138c <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8081364:	2400      	movs	r4, #0
 8081366:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8081368:	429f      	cmp	r7, r3
 808136a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 808136e:	d908      	bls.n	8081382 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8081370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081374:	4628      	mov	r0, r5
 8081376:	f7ff ff2c 	bl	80811d2 <_ZN9SdSpiCard8readDataEPhj>
 808137a:	3401      	adds	r4, #1
 808137c:	2800      	cmp	r0, #0
 808137e:	d1f2      	bne.n	8081366 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8081380:	e004      	b.n	808138c <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8081382:	4628      	mov	r0, r5
}
 8081384:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8081388:	f7ff bfd2 	b.w	8081330 <_ZN9SdSpiCard8readStopEv>
}
 808138c:	2000      	movs	r0, #0
 808138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081390 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8081390:	b538      	push	{r3, r4, r5, lr}
 8081392:	4604      	mov	r4, r0
 8081394:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8081396:	6800      	ldr	r0, [r0, #0]
 8081398:	f7ff fef2 	bl	8081180 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 808139c:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 808139e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80813a2:	6803      	ldr	r3, [r0, #0]
 80813a4:	4629      	mov	r1, r5
 80813a6:	699b      	ldr	r3, [r3, #24]
 80813a8:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 80813aa:	21ff      	movs	r1, #255	; 0xff
 80813ac:	6820      	ldr	r0, [r4, #0]
 80813ae:	f7ff fee7 	bl	8081180 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 80813b2:	21ff      	movs	r1, #255	; 0xff
 80813b4:	6820      	ldr	r0, [r4, #0]
 80813b6:	f7ff fee3 	bl	8081180 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 80813ba:	6820      	ldr	r0, [r4, #0]
 80813bc:	f7ff fee3 	bl	8081186 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80813c0:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 80813c2:	f000 001f 	and.w	r0, r0, #31
 80813c6:	2805      	cmp	r0, #5
 80813c8:	d006      	beq.n	80813d8 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80813ca:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 80813cc:	4620      	mov	r0, r4
 80813ce:	71a3      	strb	r3, [r4, #6]
 80813d0:	f7ff fedc 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80813d4:	2000      	movs	r0, #0
 80813d6:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 80813d8:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 80813da:	bd38      	pop	{r3, r4, r5, pc}

080813dc <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80813dc:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80813de:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80813e0:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80813e2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80813e4:	bf18      	it	ne
 80813e6:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 80813e8:	460a      	mov	r2, r1
 80813ea:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80813ec:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 80813ee:	f7ff ff34 	bl	808125a <_ZN9SdSpiCard11cardCommandEhm>
 80813f2:	b110      	cbz	r0, 80813fa <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 80813f4:	2306      	movs	r3, #6
 80813f6:	71a3      	strb	r3, [r4, #6]
 80813f8:	e00a      	b.n	8081410 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 80813fa:	462a      	mov	r2, r5
 80813fc:	21fe      	movs	r1, #254	; 0xfe
 80813fe:	4620      	mov	r0, r4
 8081400:	f7ff ffc6 	bl	8081390 <_ZN9SdSpiCard9writeDataEhPKh>
 8081404:	4605      	mov	r5, r0
 8081406:	b118      	cbz	r0, 8081410 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 8081408:	4620      	mov	r0, r4
 808140a:	f7ff febf 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 808140e:	e003      	b.n	8081418 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 8081410:	4620      	mov	r0, r4
 8081412:	f7ff febb 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081416:	2500      	movs	r5, #0
}
 8081418:	4628      	mov	r0, r5
 808141a:	bd38      	pop	{r3, r4, r5, pc}

0808141c <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 808141c:	b570      	push	{r4, r5, r6, lr}
 808141e:	4604      	mov	r4, r0
 8081420:	460d      	mov	r5, r1
  bool selected = m_selected;
 8081422:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 8081424:	f7ff fec5 	bl	80811b2 <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8081428:	f44f 7116 	mov.w	r1, #600	; 0x258
 808142c:	4620      	mov	r0, r4
 808142e:	f7ff ff00 	bl	8081232 <_ZN9SdSpiCard11waitNotBusyEt>
 8081432:	b910      	cbnz	r0, 808143a <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 8081434:	2317      	movs	r3, #23
 8081436:	71a3      	strb	r3, [r4, #6]
 8081438:	e00b      	b.n	8081452 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 808143a:	462a      	mov	r2, r5
 808143c:	21fc      	movs	r1, #252	; 0xfc
 808143e:	4620      	mov	r0, r4
 8081440:	f7ff ffa6 	bl	8081390 <_ZN9SdSpiCard9writeDataEhPKh>
 8081444:	4605      	mov	r5, r0
 8081446:	b120      	cbz	r0, 8081452 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 8081448:	b93e      	cbnz	r6, 808145a <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 808144a:	4620      	mov	r0, r4
 808144c:	f7ff fe9e 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
 8081450:	e003      	b.n	808145a <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 8081452:	4620      	mov	r0, r4
 8081454:	f7ff fe9a 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081458:	2500      	movs	r5, #0
}
 808145a:	4628      	mov	r0, r5
 808145c:	bd70      	pop	{r4, r5, r6, pc}

0808145e <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 808145e:	b570      	push	{r4, r5, r6, lr}
 8081460:	4604      	mov	r4, r0
 8081462:	4616      	mov	r6, r2
 8081464:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8081466:	2200      	movs	r2, #0
 8081468:	2137      	movs	r1, #55	; 0x37
 808146a:	f7ff fef6 	bl	808125a <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 808146e:	4632      	mov	r2, r6
 8081470:	2117      	movs	r1, #23
 8081472:	4620      	mov	r0, r4
 8081474:	f7ff fef1 	bl	808125a <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8081478:	b108      	cbz	r0, 808147e <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808147a:	2309      	movs	r3, #9
 808147c:	e00a      	b.n	8081494 <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808147e:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8081480:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081482:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8081484:	bf18      	it	ne
 8081486:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8081488:	462a      	mov	r2, r5
 808148a:	4620      	mov	r0, r4
 808148c:	f7ff fee5 	bl	808125a <_ZN9SdSpiCard11cardCommandEhm>
 8081490:	b130      	cbz	r0, 80814a0 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8081492:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8081494:	4620      	mov	r0, r4
 8081496:	71a3      	strb	r3, [r4, #6]
 8081498:	f7ff fe78 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808149c:	2000      	movs	r0, #0
 808149e:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 80814a0:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 80814a2:	bd70      	pop	{r4, r5, r6, pc}

080814a4 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 80814a4:	b538      	push	{r3, r4, r5, lr}
 80814a6:	4604      	mov	r4, r0
  chipSelectLow();
 80814a8:	f7ff fe83 	bl	80811b2 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80814ac:	f44f 7116 	mov.w	r1, #600	; 0x258
 80814b0:	4620      	mov	r0, r4
 80814b2:	f7ff febe 	bl	8081232 <_ZN9SdSpiCard11waitNotBusyEt>
 80814b6:	b170      	cbz	r0, 80814d6 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 80814b8:	21fd      	movs	r1, #253	; 0xfd
 80814ba:	6820      	ldr	r0, [r4, #0]
 80814bc:	f7ff fe60 	bl	8081180 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80814c0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80814c4:	4620      	mov	r0, r4
 80814c6:	f7ff feb4 	bl	8081232 <_ZN9SdSpiCard11waitNotBusyEt>
 80814ca:	4605      	mov	r5, r0
 80814cc:	b118      	cbz	r0, 80814d6 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 80814ce:	4620      	mov	r0, r4
 80814d0:	f7ff fe5c 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80814d4:	e005      	b.n	80814e2 <_ZN9SdSpiCard9writeStopEv+0x3e>
 80814d6:	2312      	movs	r3, #18
 80814d8:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 80814da:	4620      	mov	r0, r4
 80814dc:	f7ff fe56 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80814e0:	2500      	movs	r5, #0
}
 80814e2:	4628      	mov	r0, r5
 80814e4:	bd38      	pop	{r3, r4, r5, pc}

080814e6 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80814e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80814e8:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 80814ea:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80814ec:	4605      	mov	r5, r0
 80814ee:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 80814f0:	f7ff ffb5 	bl	808145e <_ZN9SdSpiCard10writeStartEmm>
 80814f4:	b170      	cbz	r0, 8081514 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 80814f6:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80814f8:	42b4      	cmp	r4, r6
 80814fa:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80814fe:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8081500:	d004      	beq.n	808150c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8081502:	f7ff ff8b 	bl	808141c <_ZN9SdSpiCard9writeDataEPKh>
 8081506:	b128      	cbz	r0, 8081514 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8081508:	3401      	adds	r4, #1
 808150a:	e7f5      	b.n	80814f8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 808150c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8081510:	f7ff bfc8 	b.w	80814a4 <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 8081514:	4628      	mov	r0, r5
 8081516:	f7ff fe39 	bl	808118c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 808151a:	2000      	movs	r0, #0
 808151c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808151e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 808151e:	f00f be03 	b.w	8091128 <HAL_Pin_Map>
	...

08081524 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8081524:	4b01      	ldr	r3, [pc, #4]	; (808152c <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8081526:	2201      	movs	r2, #1
 8081528:	701a      	strb	r2, [r3, #0]
 808152a:	4770      	bx	lr
 808152c:	20000500 	.word	0x20000500

08081530 <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 8081530:	4770      	bx	lr
	...

08081534 <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8081534:	7902      	ldrb	r2, [r0, #4]
 8081536:	4b02      	ldr	r3, [pc, #8]	; (8081540 <_ZN5SdSpi5beginEh+0xc>)
 8081538:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 808153c:	f010 b90d 	b.w	809175a <_ZN8SPIClass5beginEt>
 8081540:	08093ed8 	.word	0x08093ed8

08081544 <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 8081544:	b570      	push	{r4, r5, r6, lr}
 8081546:	4606      	mov	r6, r0
 8081548:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 808154a:	7903      	ldrb	r3, [r0, #4]
 808154c:	4d1a      	ldr	r5, [pc, #104]	; (80815b8 <_ZN5SdSpi16beginTransactionEh+0x74>)
 808154e:	2101      	movs	r1, #1
 8081550:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8081554:	f010 f907 	bl	8091766 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8081558:	7933      	ldrb	r3, [r6, #4]
 808155a:	2100      	movs	r1, #0
 808155c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8081560:	f010 f904 	bl	809176c <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 8081564:	2c02      	cmp	r4, #2
 8081566:	d90c      	bls.n	8081582 <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 8081568:	2c04      	cmp	r4, #4
 808156a:	d90c      	bls.n	8081586 <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 808156c:	2c08      	cmp	r4, #8
 808156e:	d90c      	bls.n	808158a <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 8081570:	2c10      	cmp	r4, #16
 8081572:	d90c      	bls.n	808158e <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 8081574:	2c20      	cmp	r4, #32
 8081576:	d90c      	bls.n	8081592 <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 8081578:	2c41      	cmp	r4, #65	; 0x41
 808157a:	bf34      	ite	cc
 808157c:	2128      	movcc	r1, #40	; 0x28
 808157e:	2130      	movcs	r1, #48	; 0x30
 8081580:	e008      	b.n	8081594 <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 8081582:	2100      	movs	r1, #0
 8081584:	e006      	b.n	8081594 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 8081586:	2108      	movs	r1, #8
 8081588:	e004      	b.n	8081594 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 808158a:	2110      	movs	r1, #16
 808158c:	e002      	b.n	8081594 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 808158e:	2118      	movs	r1, #24
 8081590:	e000      	b.n	8081594 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 8081592:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 8081594:	7933      	ldrb	r3, [r6, #4]
 8081596:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 808159a:	f010 f931 	bl	8091800 <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 808159e:	2318      	movs	r3, #24
 80815a0:	fb03 f104 	mul.w	r1, r3, r4
 80815a4:	7932      	ldrb	r2, [r6, #4]
 80815a6:	233c      	movs	r3, #60	; 0x3c
 80815a8:	fb02 1101 	mla	r1, r2, r1, r1
 80815ac:	fb91 f1f3 	sdiv	r1, r1, r3
 80815b0:	4b02      	ldr	r3, [pc, #8]	; (80815bc <_ZN5SdSpi16beginTransactionEh+0x78>)
 80815b2:	6019      	str	r1, [r3, #0]
 80815b4:	bd70      	pop	{r4, r5, r6, pc}
 80815b6:	bf00      	nop
 80815b8:	08093ed8 	.word	0x08093ed8
 80815bc:	20000504 	.word	0x20000504

080815c0 <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 80815c0:	7902      	ldrb	r2, [r0, #4]
 80815c2:	4b03      	ldr	r3, [pc, #12]	; (80815d0 <_ZN5SdSpi7receiveEv+0x10>)
 80815c4:	21ff      	movs	r1, #255	; 0xff
 80815c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80815ca:	f010 b92d 	b.w	8091828 <_ZN8SPIClass8transferEh>
 80815ce:	bf00      	nop
 80815d0:	08093ed8 	.word	0x08093ed8

080815d4 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 80815d4:	7902      	ldrb	r2, [r0, #4]
 80815d6:	4b02      	ldr	r3, [pc, #8]	; (80815e0 <_ZN5SdSpi4sendEh+0xc>)
 80815d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80815dc:	f010 b924 	b.w	8091828 <_ZN8SPIClass8transferEh>
 80815e0:	08093ed8 	.word	0x08093ed8

080815e4 <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 80815e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80815e6:	4b0c      	ldr	r3, [pc, #48]	; (8081618 <_ZN5SdSpi7receiveEPhj+0x34>)
 80815e8:	7906      	ldrb	r6, [r0, #4]
 80815ea:	480c      	ldr	r0, [pc, #48]	; (808161c <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 80815ec:	2500      	movs	r5, #0
 80815ee:	4c0c      	ldr	r4, [pc, #48]	; (8081620 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80815f0:	9300      	str	r3, [sp, #0]
 80815f2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80815f6:	4613      	mov	r3, r2
 80815f8:	460a      	mov	r2, r1
 80815fa:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 80815fc:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80815fe:	f010 f919 	bl	8091834 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8081602:	7823      	ldrb	r3, [r4, #0]
 8081604:	2b00      	cmp	r3, #0
 8081606:	d0fc      	beq.n	8081602 <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8081608:	4b06      	ldr	r3, [pc, #24]	; (8081624 <_ZN5SdSpi7receiveEPhj+0x40>)
 808160a:	6818      	ldr	r0, [r3, #0]
 808160c:	b108      	cbz	r0, 8081612 <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 808160e:	f00f fe03 	bl	8091218 <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 8081612:	2000      	movs	r0, #0
 8081614:	b002      	add	sp, #8
 8081616:	bd70      	pop	{r4, r5, r6, pc}
 8081618:	08081525 	.word	0x08081525
 808161c:	08093ed8 	.word	0x08093ed8
 8081620:	20000500 	.word	0x20000500
 8081624:	20000504 	.word	0x20000504

08081628 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8081628:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808162a:	4b0d      	ldr	r3, [pc, #52]	; (8081660 <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 808162c:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 808162e:	480d      	ldr	r0, [pc, #52]	; (8081664 <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8081630:	2500      	movs	r5, #0
 8081632:	4c0d      	ldr	r4, [pc, #52]	; (8081668 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8081634:	9300      	str	r3, [sp, #0]
 8081636:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 808163a:	4613      	mov	r3, r2
 808163c:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 808163e:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8081640:	f010 f8f8 	bl	8091834 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8081644:	7823      	ldrb	r3, [r4, #0]
 8081646:	2b00      	cmp	r3, #0
 8081648:	d0fc      	beq.n	8081644 <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 808164a:	4b08      	ldr	r3, [pc, #32]	; (808166c <_ZN5SdSpi4sendEPKhj+0x44>)
 808164c:	6818      	ldr	r0, [r3, #0]
 808164e:	b120      	cbz	r0, 808165a <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 8081650:	b002      	add	sp, #8
 8081652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8081656:	f00f bddf 	b.w	8091218 <HAL_Delay_Microseconds>
 808165a:	b002      	add	sp, #8
 808165c:	bd70      	pop	{r4, r5, r6, pc}
 808165e:	bf00      	nop
 8081660:	08081525 	.word	0x08081525
 8081664:	08093ed8 	.word	0x08093ed8
 8081668:	20000500 	.word	0x20000500
 808166c:	20000504 	.word	0x20000504

08081670 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8081670:	f00f bd5a 	b.w	8091128 <HAL_Pin_Map>

08081674 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8081674:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081676:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 808167a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 808167e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081680:	6901      	ldr	r1, [r0, #16]
 8081682:	6880      	ldr	r0, [r0, #8]
 8081684:	f000 bc04 	b.w	8081e90 <_ZN9FatVolume15allocateClusterEmPm>

08081688 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8081688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 808168c:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 808168e:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8081690:	f003 0320 	and.w	r3, r3, #32
 8081694:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8081698:	b10b      	cbz	r3, 808169e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 808169a:	2600      	movs	r6, #0
 808169c:	e02e      	b.n	80816fc <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 808169e:	6942      	ldr	r2, [r0, #20]
 80816a0:	4b18      	ldr	r3, [pc, #96]	; (8081704 <_ZN7FatFile13addDirClusterEv+0x7c>)
 80816a2:	429a      	cmp	r2, r3
 80816a4:	d8f9      	bhi.n	808169a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 80816a6:	f7ff ffe5 	bl	8081674 <_ZN7FatFile10addClusterEv>
 80816aa:	4606      	mov	r6, r0
 80816ac:	2800      	cmp	r0, #0
 80816ae:	d0f4      	beq.n	808169a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
 80816b0:	6921      	ldr	r1, [r4, #16]
 80816b2:	68a0      	ldr	r0, [r4, #8]
 80816b4:	f000 fb8d 	bl	8081dd2 <_ZNK9FatVolume17clusterStartBlockEm>
 80816b8:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80816ba:	68a0      	ldr	r0, [r4, #8]
 80816bc:	2205      	movs	r2, #5
 80816be:	4639      	mov	r1, r7
 80816c0:	3028      	adds	r0, #40	; 0x28
 80816c2:	f000 fb62 	bl	8081d8a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 80816c6:	4680      	mov	r8, r0
 80816c8:	2800      	cmp	r0, #0
 80816ca:	d0e6      	beq.n	808169a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 80816cc:	4629      	mov	r1, r5
 80816ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80816d2:	f011 ff64 	bl	809359e <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80816d6:	2501      	movs	r5, #1
 80816d8:	68a0      	ldr	r0, [r4, #8]
 80816da:	7902      	ldrb	r2, [r0, #4]
 80816dc:	42aa      	cmp	r2, r5
 80816de:	d909      	bls.n	80816f4 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80816e0:	6803      	ldr	r3, [r0, #0]
 80816e2:	4642      	mov	r2, r8
 80816e4:	685b      	ldr	r3, [r3, #4]
 80816e6:	19e9      	adds	r1, r5, r7
 80816e8:	4798      	blx	r3
 80816ea:	2800      	cmp	r0, #0
 80816ec:	d0d5      	beq.n	808169a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80816ee:	3501      	adds	r5, #1
 80816f0:	b2ed      	uxtb	r5, r5
 80816f2:	e7f1      	b.n	80816d8 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80816f4:	6963      	ldr	r3, [r4, #20]
 80816f6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80816fa:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 80816fc:	4630      	mov	r0, r6
 80816fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081702:	bf00      	nop
 8081704:	001ffdff 	.word	0x001ffdff

08081708 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8081708:	b510      	push	{r4, lr}
 808170a:	4604      	mov	r4, r0
 808170c:	6880      	ldr	r0, [r0, #8]
 808170e:	460a      	mov	r2, r1
 8081710:	3028      	adds	r0, #40	; 0x28
 8081712:	69a1      	ldr	r1, [r4, #24]
 8081714:	f000 fb39 	bl	8081d8a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8081718:	b120      	cbz	r0, 8081724 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 808171a:	88a3      	ldrh	r3, [r4, #4]
 808171c:	f003 030f 	and.w	r3, r3, #15
 8081720:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8081724:	bd10      	pop	{r4, pc}

08081726 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8081726:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8081728:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 808172a:	4605      	mov	r5, r0
 808172c:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 808172e:	b984      	cbnz	r4, 8081752 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8081730:	2224      	movs	r2, #36	; 0x24
 8081732:	4621      	mov	r1, r4
 8081734:	f011 ff33 	bl	809359e <memset>

  m_vol = vol;
 8081738:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 808173a:	79f3      	ldrb	r3, [r6, #7]
 808173c:	2b10      	cmp	r3, #16
 808173e:	d003      	beq.n	8081748 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8081740:	2b20      	cmp	r3, #32
 8081742:	d106      	bne.n	8081752 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8081744:	2340      	movs	r3, #64	; 0x40
 8081746:	e000      	b.n	808174a <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8081748:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 808174a:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 808174c:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 808174e:	70a8      	strb	r0, [r5, #2]
 8081750:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8081752:	2000      	movs	r0, #0
 8081754:	bd70      	pop	{r4, r5, r6, pc}

08081756 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8081756:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808175a:	7803      	ldrb	r3, [r0, #0]
 808175c:	4604      	mov	r4, r0
 808175e:	4689      	mov	r9, r1
 8081760:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8081762:	b14b      	cbz	r3, 8081778 <_ZN7FatFile4readEPvj+0x22>
 8081764:	7882      	ldrb	r2, [r0, #2]
 8081766:	07d1      	lsls	r1, r2, #31
 8081768:	d506      	bpl.n	8081778 <_ZN7FatFile4readEPvj+0x22>
 808176a:	e00c      	b.n	8081786 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808176c:	465a      	mov	r2, fp
 808176e:	6921      	ldr	r1, [r4, #16]
 8081770:	f000 fb35 	bl	8081dde <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8081774:	2800      	cmp	r0, #0
 8081776:	da3d      	bge.n	80817f4 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8081778:	7863      	ldrb	r3, [r4, #1]
  return -1;
 808177a:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 808177e:	f043 0302 	orr.w	r3, r3, #2
 8081782:	7063      	strb	r3, [r4, #1]
  return -1;
 8081784:	e098      	b.n	80818b8 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8081786:	071a      	lsls	r2, r3, #28
 8081788:	d503      	bpl.n	8081792 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 808178a:	69e3      	ldr	r3, [r4, #28]
 808178c:	6962      	ldr	r2, [r4, #20]
 808178e:	1a9b      	subs	r3, r3, r2
 8081790:	e007      	b.n	80817a2 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8081792:	069a      	lsls	r2, r3, #26
 8081794:	d508      	bpl.n	80817a8 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8081796:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8081798:	891a      	ldrh	r2, [r3, #8]
 808179a:	6963      	ldr	r3, [r4, #20]
 808179c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 80817a0:	b29b      	uxth	r3, r3
 80817a2:	429d      	cmp	r5, r3
 80817a4:	bf28      	it	cs
 80817a6:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80817a8:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 80817aa:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80817ae:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80817b2:	2e00      	cmp	r6, #0
 80817b4:	d035      	beq.n	8081822 <_ZN7FatFile4readEPvj+0xcc>
 80817b6:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80817b8:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 80817ba:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80817be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80817c2:	68a0      	ldr	r0, [r4, #8]
 80817c4:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 80817c8:	d002      	beq.n	80817d0 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80817ca:	6a03      	ldr	r3, [r0, #32]
 80817cc:	4419      	add	r1, r3
 80817ce:	e01d      	b.n	808180c <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80817d0:	f890 8005 	ldrb.w	r8, [r0, #5]
 80817d4:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 80817d8:	f1ba 0f00 	cmp.w	sl, #0
 80817dc:	d110      	bne.n	8081800 <_ZN7FatFile4readEPvj+0xaa>
 80817de:	f1b8 0f00 	cmp.w	r8, #0
 80817e2:	d10d      	bne.n	8081800 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 80817e4:	2b00      	cmp	r3, #0
 80817e6:	d1c1      	bne.n	808176c <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80817e8:	0653      	lsls	r3, r2, #25
 80817ea:	bf4c      	ite	mi
 80817ec:	6a03      	ldrmi	r3, [r0, #32]
 80817ee:	6a23      	ldrpl	r3, [r4, #32]
 80817f0:	6123      	str	r3, [r4, #16]
 80817f2:	e005      	b.n	8081800 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 80817f4:	d104      	bne.n	8081800 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 80817f6:	7823      	ldrb	r3, [r4, #0]
 80817f8:	f013 0f70 	tst.w	r3, #112	; 0x70
 80817fc:	d111      	bne.n	8081822 <_ZN7FatFile4readEPvj+0xcc>
 80817fe:	e7bb      	b.n	8081778 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8081800:	6921      	ldr	r1, [r4, #16]
 8081802:	68a0      	ldr	r0, [r4, #8]
 8081804:	f000 fae5 	bl	8081dd2 <_ZNK9FatVolume17clusterStartBlockEm>
 8081808:	eb08 0100 	add.w	r1, r8, r0
 808180c:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 808180e:	f1ba 0f00 	cmp.w	sl, #0
 8081812:	d135      	bne.n	8081880 <_ZN7FatFile4readEPvj+0x12a>
 8081814:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081818:	d332      	bcc.n	8081880 <_ZN7FatFile4readEPvj+0x12a>
 808181a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 808181c:	4291      	cmp	r1, r2
 808181e:	d102      	bne.n	8081826 <_ZN7FatFile4readEPvj+0xd0>
 8081820:	e02e      	b.n	8081880 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8081822:	1ba8      	subs	r0, r5, r6
 8081824:	e048      	b.n	80818b8 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8081826:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 808182a:	d31b      	bcc.n	8081864 <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 808182c:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 808182e:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 8081832:	06bf      	lsls	r7, r7, #26
 8081834:	d406      	bmi.n	8081844 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8081836:	7907      	ldrb	r7, [r0, #4]
 8081838:	ebc8 0707 	rsb	r7, r8, r7
 808183c:	b2ff      	uxtb	r7, r7
 808183e:	42bb      	cmp	r3, r7
 8081840:	bf28      	it	cs
 8081842:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8081844:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8081846:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808184a:	d207      	bcs.n	808185c <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 808184c:	68a0      	ldr	r0, [r4, #8]
 808184e:	6802      	ldr	r2, [r0, #0]
 8081850:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8081854:	464a      	mov	r2, r9
 8081856:	47d0      	blx	sl
 8081858:	b960      	cbnz	r0, 8081874 <_ZN7FatFile4readEPvj+0x11e>
 808185a:	e78d      	b.n	8081778 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808185c:	441a      	add	r2, r3
 808185e:	4291      	cmp	r1, r2
 8081860:	d321      	bcc.n	80818a6 <_ZN7FatFile4readEPvj+0x150>
 8081862:	e7f3      	b.n	808184c <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8081864:	6803      	ldr	r3, [r0, #0]
 8081866:	464a      	mov	r2, r9
 8081868:	681b      	ldr	r3, [r3, #0]
 808186a:	4798      	blx	r3
 808186c:	2800      	cmp	r0, #0
 808186e:	d083      	beq.n	8081778 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8081870:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8081874:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8081876:	44b9      	add	r9, r7
    m_curPosition += n;
 8081878:	443b      	add	r3, r7
 808187a:	6163      	str	r3, [r4, #20]
    toRead -= n;
 808187c:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 808187e:	e798      	b.n	80817b2 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081880:	2200      	movs	r2, #0
 8081882:	3028      	adds	r0, #40	; 0x28
 8081884:	f000 fa81 	bl	8081d8a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8081888:	2800      	cmp	r0, #0
 808188a:	f43f af75 	beq.w	8081778 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 808188e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8081892:	42b7      	cmp	r7, r6
 8081894:	bf28      	it	cs
 8081896:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8081898:	eb00 010a 	add.w	r1, r0, sl
 808189c:	463a      	mov	r2, r7
 808189e:	4648      	mov	r0, r9
 80818a0:	f011 fe57 	bl	8093552 <memcpy>
 80818a4:	e7e6      	b.n	8081874 <_ZN7FatFile4readEPvj+0x11e>
 80818a6:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 80818aa:	f7ff f957 	bl	8080b5c <_ZN9FatVolume9cacheSyncEv>
 80818ae:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80818b2:	2800      	cmp	r0, #0
 80818b4:	d1ca      	bne.n	808184c <_ZN7FatFile4readEPvj+0xf6>
 80818b6:	e75f      	b.n	8081778 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 80818b8:	b003      	add	sp, #12
 80818ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080818be <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 80818be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 80818c0:	2201      	movs	r2, #1
 80818c2:	f10d 0107 	add.w	r1, sp, #7
 80818c6:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 80818c8:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 80818ca:	6905      	ldr	r5, [r0, #16]
 80818cc:	f7ff ff43 	bl	8081756 <_ZN7FatFile4readEPvj>
 80818d0:	2801      	cmp	r0, #1
 80818d2:	bf09      	itett	eq
 80818d4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 80818d8:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 80818dc:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 80818de:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 80818e0:	b002      	add	sp, #8
 80818e2:	bd70      	pop	{r4, r5, r6, pc}

080818e4 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80818e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80818e6:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80818e8:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80818ea:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 80818ee:	b105      	cbz	r5, 80818f2 <_ZN7FatFile12readDirCacheEb+0xe>
 80818f0:	b969      	cbnz	r1, 808190e <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 80818f2:	2201      	movs	r2, #1
 80818f4:	f10d 0107 	add.w	r1, sp, #7
 80818f8:	4620      	mov	r0, r4
 80818fa:	f7ff ff2c 	bl	8081756 <_ZN7FatFile4readEPvj>
 80818fe:	b240      	sxtb	r0, r0
    if  (n != 1) {
 8081900:	2801      	cmp	r0, #1
 8081902:	d001      	beq.n	8081908 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8081904:	2000      	movs	r0, #0
 8081906:	e008      	b.n	808191a <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 8081908:	6963      	ldr	r3, [r4, #20]
 808190a:	331f      	adds	r3, #31
 808190c:	e000      	b.n	8081910 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 808190e:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8081910:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 8081912:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8081914:	3034      	adds	r0, #52	; 0x34
 8081916:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 808191a:	b003      	add	sp, #12
 808191c:	bd30      	pop	{r4, r5, pc}

0808191e <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 808191e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081922:	460e      	mov	r6, r1
 8081924:	7801      	ldrb	r1, [r0, #0]
 8081926:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 8081928:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 808192a:	2900      	cmp	r1, #0
 808192c:	d039      	beq.n	80819a2 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 808192e:	6945      	ldr	r5, [r0, #20]
 8081930:	42b5      	cmp	r5, r6
 8081932:	d03a      	beq.n	80819aa <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8081934:	b90e      	cbnz	r6, 808193a <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8081936:	6106      	str	r6, [r0, #16]
    goto done;
 8081938:	e031      	b.n	808199e <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 808193a:	070b      	lsls	r3, r1, #28
 808193c:	d503      	bpl.n	8081946 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 808193e:	69c3      	ldr	r3, [r0, #28]
 8081940:	429e      	cmp	r6, r3
 8081942:	d82e      	bhi.n	80819a2 <_ZN7FatFile7seekSetEm+0x84>
 8081944:	e007      	b.n	8081956 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8081946:	0688      	lsls	r0, r1, #26
 8081948:	d505      	bpl.n	8081956 <_ZN7FatFile7seekSetEm+0x38>
 808194a:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 808194c:	891b      	ldrh	r3, [r3, #8]
 808194e:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8081952:	d826      	bhi.n	80819a2 <_ZN7FatFile7seekSetEm+0x84>
 8081954:	e023      	b.n	808199e <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081956:	f8d4 e008 	ldr.w	lr, [r4, #8]
 808195a:	1e6a      	subs	r2, r5, #1
 808195c:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8081960:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8081964:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081966:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8081968:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 808196a:	429a      	cmp	r2, r3
 808196c:	d800      	bhi.n	8081970 <_ZN7FatFile7seekSetEm+0x52>
 808196e:	b94d      	cbnz	r5, 8081984 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8081970:	064a      	lsls	r2, r1, #25
 8081972:	bf4c      	ite	mi
 8081974:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8081978:	6a22      	ldrpl	r2, [r4, #32]
 808197a:	6122      	str	r2, [r4, #16]
 808197c:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808197e:	f104 0810 	add.w	r8, r4, #16
 8081982:	e00a      	b.n	808199a <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8081984:	1a9b      	subs	r3, r3, r2
 8081986:	e7f9      	b.n	808197c <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8081988:	4642      	mov	r2, r8
 808198a:	6921      	ldr	r1, [r4, #16]
 808198c:	68a0      	ldr	r0, [r4, #8]
 808198e:	f000 fa26 	bl	8081dde <_ZN9FatVolume6fatGetEmPm>
 8081992:	2800      	cmp	r0, #0
 8081994:	f105 35ff 	add.w	r5, r5, #4294967295
 8081998:	dd03      	ble.n	80819a2 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 808199a:	2d00      	cmp	r5, #0
 808199c:	d1f4      	bne.n	8081988 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 808199e:	6166      	str	r6, [r4, #20]
 80819a0:	e003      	b.n	80819aa <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 80819a2:	6127      	str	r7, [r4, #16]
  return false;
 80819a4:	2000      	movs	r0, #0
 80819a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 80819aa:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 80819ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080819b0 <_ZN7FatFile15openCachedEntryEPS_thh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 80819b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80819b2:	460f      	mov	r7, r1
 80819b4:	4604      	mov	r4, r0
 80819b6:	4616      	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80819b8:	2100      	movs	r1, #0
 80819ba:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 80819bc:	461d      	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80819be:	f011 fdee 	bl	809359e <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80819c2:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80819c4:	80a6      	strh	r6, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80819c6:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80819c8:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80819ca:	f006 020f 	and.w	r2, r6, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80819ce:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80819d0:	0152      	lsls	r2, r2, #5
 80819d2:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80819d6:	4413      	add	r3, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80819d8:	7ad9      	ldrb	r1, [r3, #11]
 80819da:	070f      	lsls	r7, r1, #28
 80819dc:	d502      	bpl.n	80819e4 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 80819de:	2000      	movs	r0, #0
 80819e0:	7020      	strb	r0, [r4, #0]
  return false;
 80819e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80819e4:	1881      	adds	r1, r0, r2
 80819e6:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 80819ea:	f001 0117 	and.w	r1, r1, #23
 80819ee:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80819f0:	7adb      	ldrb	r3, [r3, #11]
 80819f2:	f013 0f18 	tst.w	r3, #24
    m_attr |= FILE_ATTR_FILE;
 80819f6:	bf08      	it	eq
 80819f8:	f041 0108 	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
 80819fc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
 8081a00:	bf08      	it	eq
 8081a02:	7021      	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8081a04:	f015 0f32 	tst.w	r5, #50	; 0x32
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
 8081a08:	70e3      	strb	r3, [r4, #3]
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8081a0a:	d003      	beq.n	8081a14 <_ZN7FatFile15openCachedEntryEPS_thh+0x64>
    if (isSubDir() || isReadOnly()) {
 8081a0c:	7823      	ldrb	r3, [r4, #0]
 8081a0e:	f013 0f11 	tst.w	r3, #17
 8081a12:	d1e4      	bne.n	80819de <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
 8081a14:	f005 030f 	and.w	r3, r5, #15
 8081a18:	70a3      	strb	r3, [r4, #2]
 8081a1a:	6b03      	ldr	r3, [r0, #48]	; 0x30

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8081a1c:	4402      	add	r2, r0
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;

  m_dirBlock = m_vol->cacheBlockNumber();
 8081a1e:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8081a20:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 8081a24:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e

  if (oflag & O_TRUNC) {
 8081a28:	06ee      	lsls	r6, r5, #27

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8081a2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16

  if (oflag & O_TRUNC) {
 8081a2e:	d504      	bpl.n	8081a3a <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8081a30:	b171      	cbz	r1, 8081a50 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 8081a32:	f000 fa68 	bl	8081f06 <_ZN9FatVolume9freeChainEm>
 8081a36:	b958      	cbnz	r0, 8081a50 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 8081a38:	e7d1      	b.n	80819de <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8081a3a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8081a3c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8081a3e:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8081a40:	06ab      	lsls	r3, r5, #26
 8081a42:	d50a      	bpl.n	8081a5a <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 8081a44:	69e1      	ldr	r1, [r4, #28]
 8081a46:	4620      	mov	r0, r4
 8081a48:	f7ff ff69 	bl	808191e <_ZN7FatFile7seekSetEm>
 8081a4c:	b928      	cbnz	r0, 8081a5a <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 8081a4e:	e7c6      	b.n	80819de <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 8081a50:	78a3      	ldrb	r3, [r4, #2]
 8081a52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8081a56:	70a3      	strb	r3, [r4, #2]
 8081a58:	e7f2      	b.n	8081a40 <_ZN7FatFile15openCachedEntryEPS_thh+0x90>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 8081a5a:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 8081a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08081a60 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8081a60:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8081a62:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8081a64:	4604      	mov	r4, r0
  if (!isOpen()) {
 8081a66:	b90b      	cbnz	r3, 8081a6c <_ZN7FatFile4syncEv+0xc>
    return true;
 8081a68:	2001      	movs	r0, #1
 8081a6a:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 8081a6c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8081a70:	2b00      	cmp	r3, #0
 8081a72:	da23      	bge.n	8081abc <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8081a74:	2101      	movs	r1, #1
 8081a76:	f7ff fe47 	bl	8081708 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081a7a:	4605      	mov	r5, r0
 8081a7c:	b928      	cbnz	r0, 8081a8a <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081a7e:	7863      	ldrb	r3, [r4, #1]
  return false;
 8081a80:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081a82:	f043 0301 	orr.w	r3, r3, #1
 8081a86:	7063      	strb	r3, [r4, #1]
 8081a88:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081a8a:	7803      	ldrb	r3, [r0, #0]
 8081a8c:	2be5      	cmp	r3, #229	; 0xe5
 8081a8e:	d0f6      	beq.n	8081a7e <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 8081a90:	7823      	ldrb	r3, [r4, #0]
 8081a92:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8081a94:	bf44      	itt	mi
 8081a96:	69e3      	ldrmi	r3, [r4, #28]
 8081a98:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8081a9a:	8c23      	ldrh	r3, [r4, #32]
 8081a9c:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8081a9e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8081aa0:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 8081aa2:	4b09      	ldr	r3, [pc, #36]	; (8081ac8 <_ZN7FatFile4syncEv+0x68>)
 8081aa4:	681b      	ldr	r3, [r3, #0]
 8081aa6:	b12b      	cbz	r3, 8081ab4 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8081aa8:	f100 0116 	add.w	r1, r0, #22
 8081aac:	3018      	adds	r0, #24
 8081aae:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8081ab0:	8b2b      	ldrh	r3, [r5, #24]
 8081ab2:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8081ab4:	78a3      	ldrb	r3, [r4, #2]
 8081ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8081aba:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8081abc:	68a0      	ldr	r0, [r4, #8]
 8081abe:	f7ff f84d 	bl	8080b5c <_ZN9FatVolume9cacheSyncEv>
 8081ac2:	2800      	cmp	r0, #0
 8081ac4:	d0db      	beq.n	8081a7e <_ZN7FatFile4syncEv+0x1e>
 8081ac6:	e7cf      	b.n	8081a68 <_ZN7FatFile4syncEv+0x8>
 8081ac8:	2000050c 	.word	0x2000050c

08081acc <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8081acc:	b510      	push	{r4, lr}
 8081ace:	4604      	mov	r4, r0
  bool rtn = sync();
 8081ad0:	f7ff ffc6 	bl	8081a60 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8081ad4:	2300      	movs	r3, #0
 8081ad6:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8081ad8:	bd10      	pop	{r4, pc}

08081ada <_ZN7FatFile4openEPS_PKch>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8081ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081adc:	461f      	mov	r7, r3
 8081ade:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8081ae0:	2300      	movs	r3, #0
 8081ae2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8081ae6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081aea:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8081aec:	4606      	mov	r6, r0
 8081aee:	460c      	mov	r4, r1
 8081af0:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081af2:	b10b      	cbz	r3, 8081af8 <_ZN7FatFile4openEPS_PKch+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8081af4:	2000      	movs	r0, #0
 8081af6:	e03d      	b.n	8081b74 <_ZN7FatFile4openEPS_PKch+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081af8:	780b      	ldrb	r3, [r1, #0]
 8081afa:	f013 0f70 	tst.w	r3, #112	; 0x70
 8081afe:	d0f9      	beq.n	8081af4 <_ZN7FatFile4openEPS_PKch+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8081b00:	7813      	ldrb	r3, [r2, #0]
 8081b02:	2b2f      	cmp	r3, #47	; 0x2f
 8081b04:	d112      	bne.n	8081b2c <_ZN7FatFile4openEPS_PKch+0x52>
    while (isDirSeparator(*path)) {
 8081b06:	9b01      	ldr	r3, [sp, #4]
 8081b08:	781a      	ldrb	r2, [r3, #0]
 8081b0a:	2a2f      	cmp	r2, #47	; 0x2f
 8081b0c:	d102      	bne.n	8081b14 <_ZN7FatFile4openEPS_PKch+0x3a>
      path++;
 8081b0e:	3301      	adds	r3, #1
 8081b10:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 8081b12:	e7f8      	b.n	8081b06 <_ZN7FatFile4openEPS_PKch+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8081b14:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8081b16:	b91a      	cbnz	r2, 8081b20 <_ZN7FatFile4openEPS_PKch+0x46>
      return openRoot(dirFile->m_vol);
 8081b18:	4630      	mov	r0, r6
 8081b1a:	f7ff fe04 	bl	8081726 <_ZN7FatFile8openRootEP9FatVolume>
 8081b1e:	e029      	b.n	8081b74 <_ZN7FatFile4openEPS_PKch+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8081b20:	a809      	add	r0, sp, #36	; 0x24
 8081b22:	f7ff fe00 	bl	8081726 <_ZN7FatFile8openRootEP9FatVolume>
 8081b26:	2800      	cmp	r0, #0
 8081b28:	d0e4      	beq.n	8081af4 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 8081b2a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 8081b2c:	aa01      	add	r2, sp, #4
 8081b2e:	a903      	add	r1, sp, #12
 8081b30:	9801      	ldr	r0, [sp, #4]
 8081b32:	f7ff f82f 	bl	8080b94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8081b36:	2800      	cmp	r0, #0
 8081b38:	d0dc      	beq.n	8081af4 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 8081b3a:	9b01      	ldr	r3, [sp, #4]
 8081b3c:	781b      	ldrb	r3, [r3, #0]
 8081b3e:	b19b      	cbz	r3, 8081b68 <_ZN7FatFile4openEPS_PKch+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
 8081b40:	2301      	movs	r3, #1
 8081b42:	aa03      	add	r2, sp, #12
 8081b44:	4621      	mov	r1, r4
 8081b46:	4630      	mov	r0, r6
 8081b48:	f7ff f966 	bl	8080e18 <_ZN7FatFile4openEPS_P7fname_th>
 8081b4c:	2800      	cmp	r0, #0
 8081b4e:	d0d1      	beq.n	8081af4 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8081b50:	4635      	mov	r5, r6
 8081b52:	ac09      	add	r4, sp, #36	; 0x24
 8081b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081b5c:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 8081b5e:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8081b60:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 8081b62:	f7ff ffb3 	bl	8081acc <_ZN7FatFile5closeEv>
 8081b66:	e7e0      	b.n	8081b2a <_ZN7FatFile4openEPS_PKch+0x50>
  }
  return open(dirFile, &fname, oflag);
 8081b68:	463b      	mov	r3, r7
 8081b6a:	aa03      	add	r2, sp, #12
 8081b6c:	4621      	mov	r1, r4
 8081b6e:	4630      	mov	r0, r6
 8081b70:	f7ff f952 	bl	8080e18 <_ZN7FatFile4openEPS_P7fname_th>

fail:
  return false;
}
 8081b74:	b013      	add	sp, #76	; 0x4c
 8081b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081b78 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8081b7c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081b7e:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8081b80:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081b82:	4689      	mov	r9, r1
 8081b84:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8081b86:	d508      	bpl.n	8081b9a <_ZN7FatFile5writeEPKvj+0x22>
 8081b88:	7883      	ldrb	r3, [r0, #2]
 8081b8a:	0799      	lsls	r1, r3, #30
 8081b8c:	d505      	bpl.n	8081b9a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 8081b8e:	075b      	lsls	r3, r3, #29
 8081b90:	d50b      	bpl.n	8081baa <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 8081b92:	69e1      	ldr	r1, [r4, #28]
 8081b94:	f7ff fec3 	bl	808191e <_ZN7FatFile7seekSetEm>
 8081b98:	b938      	cbnz	r0, 8081baa <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8081b9a:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8081b9c:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8081ba0:	f043 0301 	orr.w	r3, r3, #1
 8081ba4:	7063      	strb	r3, [r4, #1]
  return -1;
 8081ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8081baa:	6963      	ldr	r3, [r4, #20]
 8081bac:	43db      	mvns	r3, r3
 8081bae:	4598      	cmp	r8, r3
 8081bb0:	d8f3      	bhi.n	8081b9a <_ZN7FatFile5writeEPKvj+0x22>
 8081bb2:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081bb4:	f04f 0a00 	mov.w	sl, #0
 8081bb8:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8081bba:	2f00      	cmp	r7, #0
 8081bbc:	f000 8082 	beq.w	8081cc4 <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8081bc0:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8081bc2:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8081bc6:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8081bc8:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 8081bcc:	d11c      	bne.n	8081c08 <_ZN7FatFile5writeEPKvj+0x90>
 8081bce:	b9de      	cbnz	r6, 8081c08 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 8081bd0:	6921      	ldr	r1, [r4, #16]
 8081bd2:	b171      	cbz	r1, 8081bf2 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081bd4:	f104 0210 	add.w	r2, r4, #16
 8081bd8:	f000 f901 	bl	8081dde <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8081bdc:	2800      	cmp	r0, #0
 8081bde:	dbdc      	blt.n	8081b9a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8081be0:	f040 808e 	bne.w	8081d00 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 8081be4:	4620      	mov	r0, r4
 8081be6:	f7ff fd45 	bl	8081674 <_ZN7FatFile10addClusterEv>
 8081bea:	2800      	cmp	r0, #0
 8081bec:	f040 8088 	bne.w	8081d00 <_ZN7FatFile5writeEPKvj+0x188>
 8081bf0:	e7d3      	b.n	8081b9a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 8081bf2:	6a23      	ldr	r3, [r4, #32]
 8081bf4:	b93b      	cbnz	r3, 8081c06 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 8081bf6:	4620      	mov	r0, r4
 8081bf8:	f7ff fd3c 	bl	8081674 <_ZN7FatFile10addClusterEv>
 8081bfc:	2800      	cmp	r0, #0
 8081bfe:	d0cc      	beq.n	8081b9a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 8081c00:	6923      	ldr	r3, [r4, #16]
 8081c02:	6223      	str	r3, [r4, #32]
 8081c04:	e000      	b.n	8081c08 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 8081c06:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8081c08:	6921      	ldr	r1, [r4, #16]
 8081c0a:	68a0      	ldr	r0, [r4, #8]
 8081c0c:	f000 f8e1 	bl	8081dd2 <_ZNK9FatVolume17clusterStartBlockEm>
 8081c10:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8081c12:	b916      	cbnz	r6, 8081c1a <_ZN7FatFile5writeEPKvj+0xa2>
 8081c14:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8081c18:	d221      	bcs.n	8081c5e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8081c1a:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 8081c1e:	42bd      	cmp	r5, r7
 8081c20:	bf28      	it	cs
 8081c22:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8081c24:	b936      	cbnz	r6, 8081c34 <_ZN7FatFile5writeEPKvj+0xbc>
 8081c26:	6963      	ldr	r3, [r4, #20]
 8081c28:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8081c2a:	4293      	cmp	r3, r2
 8081c2c:	bf34      	ite	cc
 8081c2e:	2201      	movcc	r2, #1
 8081c30:	2205      	movcs	r2, #5
 8081c32:	e000      	b.n	8081c36 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8081c34:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081c36:	68a0      	ldr	r0, [r4, #8]
 8081c38:	3028      	adds	r0, #40	; 0x28
 8081c3a:	f000 f8a6 	bl	8081d8a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8081c3e:	2800      	cmp	r0, #0
 8081c40:	d0ab      	beq.n	8081b9a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8081c42:	4430      	add	r0, r6
 8081c44:	462a      	mov	r2, r5
 8081c46:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8081c48:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8081c4a:	f011 fc82 	bl	8093552 <memcpy>
      if (512 == (n + blockOffset)) {
 8081c4e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081c52:	d131      	bne.n	8081cb8 <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8081c54:	68a0      	ldr	r0, [r4, #8]
 8081c56:	3028      	adds	r0, #40	; 0x28
 8081c58:	f000 f870 	bl	8081d3c <_ZN8FatCache4syncEv>
 8081c5c:	e018      	b.n	8081c90 <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 8081c5e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8081c62:	68a2      	ldr	r2, [r4, #8]
 8081c64:	d316      	bcc.n	8081c94 <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8081c66:	7913      	ldrb	r3, [r2, #4]
 8081c68:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8081c6a:	1b5d      	subs	r5, r3, r5
 8081c6c:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 8081c6e:	f3c7 2347 	ubfx	r3, r7, #9, #8
 8081c72:	42ab      	cmp	r3, r5
 8081c74:	bf28      	it	cs
 8081c76:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8081c78:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 8081c7a:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8081c7e:	d302      	bcc.n	8081c86 <_ZN7FatFile5writeEPKvj+0x10e>
 8081c80:	4418      	add	r0, r3
 8081c82:	4281      	cmp	r1, r0
 8081c84:	d336      	bcc.n	8081cf4 <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8081c86:	68a0      	ldr	r0, [r4, #8]
 8081c88:	6802      	ldr	r2, [r0, #0]
 8081c8a:	68d6      	ldr	r6, [r2, #12]
 8081c8c:	464a      	mov	r2, r9
 8081c8e:	47b0      	blx	r6
 8081c90:	b990      	cbnz	r0, 8081cb8 <_ZN7FatFile5writeEPKvj+0x140>
 8081c92:	e782      	b.n	8081b9a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8081c94:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8081c96:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8081c98:	bf02      	ittt	eq
 8081c9a:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081c9e:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8081ca2:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8081ca4:	68a0      	ldr	r0, [r4, #8]
 8081ca6:	464a      	mov	r2, r9
 8081ca8:	6803      	ldr	r3, [r0, #0]
 8081caa:	685b      	ldr	r3, [r3, #4]
 8081cac:	4798      	blx	r3
 8081cae:	2800      	cmp	r0, #0
 8081cb0:	f43f af73 	beq.w	8081b9a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8081cb4:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8081cb8:	6963      	ldr	r3, [r4, #20]
    src += n;
 8081cba:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8081cbc:	442b      	add	r3, r5
 8081cbe:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8081cc0:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8081cc2:	e779      	b.n	8081bb8 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8081cc4:	69e2      	ldr	r2, [r4, #28]
 8081cc6:	4293      	cmp	r3, r2
 8081cc8:	78a2      	ldrb	r2, [r4, #2]
 8081cca:	d901      	bls.n	8081cd0 <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8081ccc:	61e3      	str	r3, [r4, #28]
 8081cce:	e002      	b.n	8081cd6 <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8081cd0:	4b0e      	ldr	r3, [pc, #56]	; (8081d0c <_ZN7FatFile5writeEPKvj+0x194>)
 8081cd2:	681b      	ldr	r3, [r3, #0]
 8081cd4:	b113      	cbz	r3, 8081cdc <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 8081cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8081cda:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 8081cdc:	78a3      	ldrb	r3, [r4, #2]
 8081cde:	071a      	lsls	r2, r3, #28
 8081ce0:	d402      	bmi.n	8081ce8 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 8081ce2:	4640      	mov	r0, r8
 8081ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 8081ce8:	4620      	mov	r0, r4
 8081cea:	f7ff feb9 	bl	8081a60 <_ZN7FatFile4syncEv>
 8081cee:	2800      	cmp	r0, #0
 8081cf0:	d1f7      	bne.n	8081ce2 <_ZN7FatFile5writeEPKvj+0x16a>
 8081cf2:	e752      	b.n	8081b9a <_ZN7FatFile5writeEPKvj+0x22>
 8081cf4:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081cf8:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8081cfc:	6310      	str	r0, [r2, #48]	; 0x30
 8081cfe:	e7c2      	b.n	8081c86 <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8081d00:	6921      	ldr	r1, [r4, #16]
 8081d02:	68a0      	ldr	r0, [r4, #8]
 8081d04:	f000 f865 	bl	8081dd2 <_ZNK9FatVolume17clusterStartBlockEm>
 8081d08:	4601      	mov	r1, r0
 8081d0a:	e783      	b.n	8081c14 <_ZN7FatFile5writeEPKvj+0x9c>
 8081d0c:	2000050c 	.word	0x2000050c

08081d10 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8081d10:	f00f ba0a 	b.w	8091128 <HAL_Pin_Map>

08081d14 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8081d14:	b570      	push	{r4, r5, r6, lr}
 8081d16:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081d18:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081d1a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081d1c:	b149      	cbz	r1, 8081d32 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8081d1e:	f011 fc66 	bl	80935ee <strlen>
 8081d22:	682b      	ldr	r3, [r5, #0]
 8081d24:	4602      	mov	r2, r0
 8081d26:	4621      	mov	r1, r4
 8081d28:	4628      	mov	r0, r5
    }
 8081d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8081d2e:	68db      	ldr	r3, [r3, #12]
 8081d30:	4718      	bx	r3
    }
 8081d32:	bd70      	pop	{r4, r5, r6, pc}

08081d34 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8081d34:	f00f b9f8 	b.w	8091128 <HAL_Pin_Map>

08081d38 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8081d38:	f00f b9f6 	b.w	8091128 <HAL_Pin_Map>

08081d3c <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8081d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8081d3e:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8081d40:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8081d42:	07da      	lsls	r2, r3, #31
 8081d44:	d51e      	bpl.n	8081d84 <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8081d46:	6840      	ldr	r0, [r0, #4]
 8081d48:	f104 060c 	add.w	r6, r4, #12
 8081d4c:	6803      	ldr	r3, [r0, #0]
 8081d4e:	4632      	mov	r2, r6
 8081d50:	685b      	ldr	r3, [r3, #4]
 8081d52:	68a1      	ldr	r1, [r4, #8]
 8081d54:	4798      	blx	r3
 8081d56:	4605      	mov	r5, r0
 8081d58:	b908      	cbnz	r0, 8081d5e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8081d5a:	2500      	movs	r5, #0
 8081d5c:	e013      	b.n	8081d86 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8081d5e:	7823      	ldrb	r3, [r4, #0]
 8081d60:	079b      	lsls	r3, r3, #30
 8081d62:	d404      	bmi.n	8081d6e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8081d64:	7823      	ldrb	r3, [r4, #0]
 8081d66:	f023 0301 	bic.w	r3, r3, #1
 8081d6a:	7023      	strb	r3, [r4, #0]
 8081d6c:	e00b      	b.n	8081d86 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8081d6e:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8081d70:	68a7      	ldr	r7, [r4, #8]
 8081d72:	6901      	ldr	r1, [r0, #16]
 8081d74:	6803      	ldr	r3, [r0, #0]
 8081d76:	4632      	mov	r2, r6
 8081d78:	685b      	ldr	r3, [r3, #4]
 8081d7a:	4439      	add	r1, r7
 8081d7c:	4798      	blx	r3
 8081d7e:	2800      	cmp	r0, #0
 8081d80:	d1f0      	bne.n	8081d64 <_ZN8FatCache4syncEv+0x28>
 8081d82:	e7ea      	b.n	8081d5a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8081d84:	2501      	movs	r5, #1

fail:
  return false;
}
 8081d86:	4628      	mov	r0, r5
 8081d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081d8a <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081d8a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8081d8c:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081d8e:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8081d90:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081d92:	460e      	mov	r6, r1
 8081d94:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8081d96:	d014      	beq.n	8081dc2 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8081d98:	f7ff ffd0 	bl	8081d3c <_ZN8FatCache4syncEv>
 8081d9c:	b908      	cbnz	r0, 8081da2 <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 8081d9e:	2000      	movs	r0, #0
 8081da0:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 8081da2:	076b      	lsls	r3, r5, #29
 8081da4:	d503      	bpl.n	8081dae <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 8081da6:	2300      	movs	r3, #0
 8081da8:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 8081daa:	60a6      	str	r6, [r4, #8]
 8081dac:	e009      	b.n	8081dc2 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8081dae:	6860      	ldr	r0, [r4, #4]
 8081db0:	f104 020c 	add.w	r2, r4, #12
 8081db4:	6803      	ldr	r3, [r0, #0]
 8081db6:	4631      	mov	r1, r6
 8081db8:	681b      	ldr	r3, [r3, #0]
 8081dba:	4798      	blx	r3
 8081dbc:	2800      	cmp	r0, #0
 8081dbe:	d1f2      	bne.n	8081da6 <_ZN8FatCache4readEmh+0x1c>
 8081dc0:	e7ed      	b.n	8081d9e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8081dc2:	4620      	mov	r0, r4
 8081dc4:	7823      	ldrb	r3, [r4, #0]
 8081dc6:	f005 0503 	and.w	r5, r5, #3
 8081dca:	431d      	orrs	r5, r3
 8081dcc:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 8081dd0:	bd70      	pop	{r4, r5, r6, pc}

08081dd2 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8081dd2:	7983      	ldrb	r3, [r0, #6]
 8081dd4:	3902      	subs	r1, #2
 8081dd6:	6940      	ldr	r0, [r0, #20]
 8081dd8:	4099      	lsls	r1, r3
}
 8081dda:	4408      	add	r0, r1
 8081ddc:	4770      	bx	lr

08081dde <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081dde:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081de0:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081de2:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081de4:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081de6:	460c      	mov	r4, r1
 8081de8:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081dea:	d112      	bne.n	8081e12 <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8081dec:	6981      	ldr	r1, [r0, #24]
 8081dee:	2202      	movs	r2, #2
 8081df0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081df4:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081df8:	f7ff ffc7 	bl	8081d8a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081dfc:	b910      	cbnz	r0, 8081e04 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8081dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8081e02:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8081e04:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8081e08:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8081e0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8081e10:	e00f      	b.n	8081e32 <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 8081e12:	2b10      	cmp	r3, #16
 8081e14:	d1f3      	bne.n	8081dfe <_ZN9FatVolume6fatGetEmPm+0x20>
 8081e16:	6983      	ldr	r3, [r0, #24]
 8081e18:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8081e1c:	2202      	movs	r2, #2
 8081e1e:	4419      	add	r1, r3
 8081e20:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081e24:	f7ff ffb1 	bl	8081d8a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081e28:	2800      	cmp	r0, #0
 8081e2a:	d0e8      	beq.n	8081dfe <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8081e2c:	b2e4      	uxtb	r4, r4
 8081e2e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 8081e32:	69ea      	ldr	r2, [r5, #28]
 8081e34:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8081e36:	bf9a      	itte	ls
 8081e38:	6033      	strls	r3, [r6, #0]
  return 1;
 8081e3a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8081e3c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8081e3e:	bd70      	pop	{r4, r5, r6, pc}

08081e40 <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081e40:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081e42:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081e44:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081e46:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081e48:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081e4a:	d10f      	bne.n	8081e6c <_ZN9FatVolume6fatPutEmm+0x2c>
 8081e4c:	6981      	ldr	r1, [r0, #24]
 8081e4e:	2203      	movs	r2, #3
 8081e50:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081e54:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081e58:	f7ff ff97 	bl	8081d8a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081e5c:	b908      	cbnz	r0, 8081e62 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8081e5e:	2000      	movs	r0, #0
 8081e60:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8081e62:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8081e66:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8081e6a:	e00f      	b.n	8081e8c <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 8081e6c:	2b10      	cmp	r3, #16
 8081e6e:	d1f6      	bne.n	8081e5e <_ZN9FatVolume6fatPutEmm+0x1e>
 8081e70:	6983      	ldr	r3, [r0, #24]
 8081e72:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8081e76:	2203      	movs	r2, #3
 8081e78:	4419      	add	r1, r3
 8081e7a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081e7e:	f7ff ff84 	bl	8081d8a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081e82:	2800      	cmp	r0, #0
 8081e84:	d0eb      	beq.n	8081e5e <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8081e86:	b2e4      	uxtb	r4, r4
 8081e88:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8081e8c:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8081e8e:	bd38      	pop	{r3, r4, r5, pc}

08081e90 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8081e90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8081e94:	4605      	mov	r5, r0
 8081e96:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8081e98:	460f      	mov	r7, r1
 8081e9a:	b909      	cbnz	r1, 8081ea0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
 8081e9c:	68c6      	ldr	r6, [r0, #12]
 8081e9e:	e000      	b.n	8081ea2 <_ZN9FatVolume15allocateClusterEmPm+0x12>
 8081ea0:	460e      	mov	r6, r1
 8081ea2:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 8081ea4:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 8081ea6:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 8081ea8:	429c      	cmp	r4, r3
 8081eaa:	bf88      	it	hi
 8081eac:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8081eae:	aa01      	add	r2, sp, #4
 8081eb0:	4621      	mov	r1, r4
 8081eb2:	4628      	mov	r0, r5
 8081eb4:	f7ff ff93 	bl	8081dde <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8081eb8:	2800      	cmp	r0, #0
 8081eba:	db0d      	blt.n	8081ed8 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8081ebc:	d001      	beq.n	8081ec2 <_ZN9FatVolume15allocateClusterEmPm+0x32>
 8081ebe:	9b01      	ldr	r3, [sp, #4]
 8081ec0:	b113      	cbz	r3, 8081ec8 <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 8081ec2:	42b4      	cmp	r4, r6
 8081ec4:	d1ee      	bne.n	8081ea4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8081ec6:	e007      	b.n	8081ed8 <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8081ec8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8081ecc:	4621      	mov	r1, r4
 8081ece:	4628      	mov	r0, r5
 8081ed0:	f7ff ffb6 	bl	8081e40 <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 8081ed4:	4606      	mov	r6, r0
 8081ed6:	b908      	cbnz	r0, 8081edc <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8081ed8:	2600      	movs	r6, #0
 8081eda:	e010      	b.n	8081efe <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8081edc:	b137      	cbz	r7, 8081eec <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 8081ede:	4622      	mov	r2, r4
 8081ee0:	4639      	mov	r1, r7
 8081ee2:	4628      	mov	r0, r5
 8081ee4:	f7ff ffac 	bl	8081e40 <_ZN9FatVolume6fatPutEmm>
 8081ee8:	b908      	cbnz	r0, 8081eee <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 8081eea:	e7f5      	b.n	8081ed8 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 8081eec:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8081eee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8081ef0:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8081ef2:	bfa4      	itt	ge
 8081ef4:	f103 33ff 	addge.w	r3, r3, #4294967295
 8081ef8:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 8081efa:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 8081efe:	4630      	mov	r0, r6
 8081f00:	b002      	add	sp, #8
 8081f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081f06 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8081f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8081f08:	4604      	mov	r4, r0
 8081f0a:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8081f0c:	aa01      	add	r2, sp, #4
 8081f0e:	4629      	mov	r1, r5
 8081f10:	4620      	mov	r0, r4
 8081f12:	f7ff ff64 	bl	8081dde <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8081f16:	1e06      	subs	r6, r0, #0
 8081f18:	da01      	bge.n	8081f1e <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8081f1a:	2000      	movs	r0, #0
 8081f1c:	e012      	b.n	8081f44 <_ZN9FatVolume9freeChainEm+0x3e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8081f1e:	2200      	movs	r2, #0
 8081f20:	4629      	mov	r1, r5
 8081f22:	4620      	mov	r0, r4
 8081f24:	f7ff ff8c 	bl	8081e40 <_ZN9FatVolume6fatPutEmm>
 8081f28:	2800      	cmp	r0, #0
 8081f2a:	d0f6      	beq.n	8081f1a <_ZN9FatVolume9freeChainEm+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8081f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8081f2e:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8081f30:	bfa4      	itt	ge
 8081f32:	3301      	addge	r3, #1
 8081f34:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8081f36:	68e3      	ldr	r3, [r4, #12]
 8081f38:	429d      	cmp	r5, r3
      m_allocSearchStart = cluster;
 8081f3a:	bf38      	it	cc
 8081f3c:	60e5      	strcc	r5, [r4, #12]
    }
    cluster = next;
 8081f3e:	9d01      	ldr	r5, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 8081f40:	2e00      	cmp	r6, #0
 8081f42:	d1e3      	bne.n	8081f0c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8081f44:	b002      	add	sp, #8
 8081f46:	bd70      	pop	{r4, r5, r6, pc}

08081f48 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8081f48:	f00f b8ee 	b.w	8091128 <HAL_Pin_Map>

08081f4c <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 8081f4c:	f00f b8ec 	b.w	8091128 <HAL_Pin_Map>

08081f50 <_ZN4MQTT9debug_TlsEPviPKciS2_>:
  return 0;
}

void MQTT::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
 8081f50:	4770      	bx	lr
	...

08081f54 <_ZN4MQTT8send_TlsEPvPKhj>:

bool MQTT::available() {
    return tcpClient.available();
}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
 8081f54:	b570      	push	{r4, r5, r6, lr}
 8081f56:	4605      	mov	r5, r0
 8081f58:	460c      	mov	r4, r1
 8081f5a:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
 8081f5c:	f00f fec0 	bl	8091ce0 <_ZN9TCPClient9connectedEv>
 8081f60:	b158      	cbz	r0, 8081f7a <_ZN4MQTT8send_TlsEPvPKhj+0x26>
    return -1;
  }

  int ret = sock->tcpClient.write(buf, len);
 8081f62:	4621      	mov	r1, r4
 8081f64:	4632      	mov	r2, r6
 8081f66:	4628      	mov	r0, r5
 8081f68:	f00f fea8 	bl	8091cbc <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
 8081f6c:	4604      	mov	r4, r0
 8081f6e:	b138      	cbz	r0, 8081f80 <_ZN4MQTT8send_TlsEPvPKhj+0x2c>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->tcpClient.flush();
 8081f70:	4628      	mov	r0, r5
 8081f72:	f00f fcd2 	bl	809191a <_ZN9TCPClient5flushEv>
  return ret;
 8081f76:	4620      	mov	r0, r4
 8081f78:	bd70      	pop	{r4, r5, r6, pc}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
    return -1;
 8081f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8081f7e:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->tcpClient.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
 8081f80:	4800      	ldr	r0, [pc, #0]	; (8081f84 <_ZN4MQTT8send_TlsEPvPKhj+0x30>)
  }
  sock->tcpClient.flush();
  return ret;
}
 8081f82:	bd70      	pop	{r4, r5, r6, pc}
 8081f84:	ffff9780 	.word	0xffff9780

08081f88 <_ZN4MQTT8recv_TlsEPvPhj>:

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
 8081f88:	b570      	push	{r4, r5, r6, lr}
 8081f8a:	4604      	mov	r4, r0
 8081f8c:	460d      	mov	r5, r1
 8081f8e:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
 8081f90:	f00f fea6 	bl	8091ce0 <_ZN9TCPClient9connectedEv>
 8081f94:	b158      	cbz	r0, 8081fae <_ZN4MQTT8recv_TlsEPvPhj+0x26>
    return -1;
  }

  if (sock->tcpClient.available() == 0) {
 8081f96:	4620      	mov	r0, r4
 8081f98:	f00f fd86 	bl	8091aa8 <_ZN9TCPClient9availableEv>
 8081f9c:	b128      	cbz	r0, 8081faa <_ZN4MQTT8recv_TlsEPvPhj+0x22>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->tcpClient.read(buf, len);
 8081f9e:	4632      	mov	r2, r6
 8081fa0:	4629      	mov	r1, r5
 8081fa2:	4620      	mov	r0, r4
 8081fa4:	f00f fd4f 	bl	8091a46 <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
 8081fa8:	b918      	cbnz	r0, 8081fb2 <_ZN4MQTT8recv_TlsEPvPhj+0x2a>
    return MBEDTLS_ERR_SSL_WANT_READ;
 8081faa:	4802      	ldr	r0, [pc, #8]	; (8081fb4 <_ZN4MQTT8recv_TlsEPvPhj+0x2c>)
 8081fac:	bd70      	pop	{r4, r5, r6, pc}
}

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
    return -1;
 8081fae:	f04f 30ff 	mov.w	r0, #4294967295
  int ret = sock->tcpClient.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
 8081fb2:	bd70      	pop	{r4, r5, r6, pc}
 8081fb4:	ffff9700 	.word	0xffff9700

08081fb8 <_ZN4MQTT7rng_TlsEPvPhj>:

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
 8081fb8:	b570      	push	{r4, r5, r6, lr}
 8081fba:	460e      	mov	r6, r1
 8081fbc:	4615      	mov	r5, r2
 8081fbe:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
 8081fc0:	1b2b      	subs	r3, r5, r4
 8081fc2:	4433      	add	r3, r6
 8081fc4:	2b03      	cmp	r3, #3
 8081fc6:	d904      	bls.n	8081fd2 <_ZN4MQTT7rng_TlsEPvPhj+0x1a>
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
 8081fc8:	f00f f91e 	bl	8091208 <HAL_RNG_GetRandomNumber>
 8081fcc:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
 8081fd0:	e7f6      	b.n	8081fc0 <_ZN4MQTT7rng_TlsEPvPhj+0x8>
 8081fd2:	08ac      	lsrs	r4, r5, #2
 8081fd4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8081fd8:	4435      	add	r5, r6
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 8081fda:	42ac      	cmp	r4, r5
 8081fdc:	d004      	beq.n	8081fe8 <_ZN4MQTT7rng_TlsEPvPhj+0x30>
      *data++ = HAL_RNG_GetRandomNumber();
 8081fde:	f00f f913 	bl	8091208 <HAL_RNG_GetRandomNumber>
 8081fe2:	f804 0b01 	strb.w	r0, [r4], #1
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 8081fe6:	e7f8      	b.n	8081fda <_ZN4MQTT7rng_TlsEPvPhj+0x22>
      *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
 8081fe8:	2000      	movs	r0, #0
 8081fea:	bd70      	pop	{r4, r5, r6, pc}

08081fec <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:
    return false;
  }
  return true;
}

int MQTT::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
 8081fec:	b500      	push	{lr}
 8081fee:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
 8081ff2:	460b      	mov	r3, r1
 8081ff4:	4a05      	ldr	r2, [pc, #20]	; (808200c <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
 8081ff6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8081ffa:	4668      	mov	r0, sp
 8081ffc:	f006 fa94 	bl	8088528 <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
 8082000:	2000      	movs	r0, #0
 8082002:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 8082006:	f85d fb04 	ldr.w	pc, [sp], #4
 808200a:	bf00      	nop
 808200c:	0809457c 	.word	0x0809457c

08082010 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
	TCPClient();
	TCPClient(sock_handle_t sock);
        virtual ~TCPClient() {};
 8082010:	b538      	push	{r3, r4, r5, lr}
 8082012:	4b0b      	ldr	r3, [pc, #44]	; (8082040 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8082014:	6984      	ldr	r4, [r0, #24]
 8082016:	4605      	mov	r5, r0
 8082018:	6003      	str	r3, [r0, #0]
 808201a:	b17c      	cbz	r4, 808203c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808201c:	6863      	ldr	r3, [r4, #4]
 808201e:	3b01      	subs	r3, #1
 8082020:	6063      	str	r3, [r4, #4]
 8082022:	b95b      	cbnz	r3, 808203c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 8082024:	6823      	ldr	r3, [r4, #0]
 8082026:	4620      	mov	r0, r4
 8082028:	689b      	ldr	r3, [r3, #8]
 808202a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808202c:	68a3      	ldr	r3, [r4, #8]
 808202e:	3b01      	subs	r3, #1
 8082030:	60a3      	str	r3, [r4, #8]
 8082032:	b91b      	cbnz	r3, 808203c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 8082034:	6823      	ldr	r3, [r4, #0]
 8082036:	4620      	mov	r0, r4
 8082038:	68db      	ldr	r3, [r3, #12]
 808203a:	4798      	blx	r3
 808203c:	4628      	mov	r0, r5
 808203e:	bd38      	pop	{r3, r4, r5, pc}
 8082040:	08097594 	.word	0x08097594

08082044 <_ZN9TCPClientD0Ev>:
 8082044:	b510      	push	{r4, lr}
 8082046:	4604      	mov	r4, r0
 8082048:	f7ff ffe2 	bl	8082010 <_ZN9TCPClientD1Ev>
 808204c:	4620      	mov	r0, r4
 808204e:	f7fe f828 	bl	80800a2 <_ZdlPv>
 8082052:	4620      	mov	r0, r4
 8082054:	bd10      	pop	{r4, pc}
	...

08082058 <_ZN4MQTTC1Ev>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT() {
 8082058:	b538      	push	{r3, r4, r5, lr}
 808205a:	4604      	mov	r4, r0
 808205c:	2500      	movs	r5, #0
 808205e:	f00f fdb1 	bl	8091bc4 <_ZN9TCPClientC1Ev>
 8082062:	61e5      	str	r5, [r4, #28]
 8082064:	4905      	ldr	r1, [pc, #20]	; (808207c <_ZN4MQTTC1Ev+0x24>)
 8082066:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808206a:	f00f feb0 	bl	8091dce <_ZN6StringC1EPK19__FlashStringHelper>
 808206e:	2301      	movs	r3, #1
 8082070:	64a5      	str	r5, [r4, #72]	; 0x48
 8082072:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->ip = NULL;
}
 8082076:	4620      	mov	r0, r4
 8082078:	bd38      	pop	{r3, r4, r5, pc}
 808207a:	bf00      	nop
 808207c:	0809457c 	.word	0x0809457c

08082080 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:
        disconnect();
        free(buffer);
    }
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 8082080:	b538      	push	{r3, r4, r5, lr}
 8082082:	4604      	mov	r4, r0
 8082084:	461d      	mov	r5, r3
    this->callback = callback;
 8082086:	9b05      	ldr	r3, [sp, #20]
 8082088:	6303      	str	r3, [r0, #48]	; 0x30
    this->tls = false;
 808208a:	2000      	movs	r0, #0
 808208c:	f884 0681 	strb.w	r0, [r4, #1665]	; 0x681
    this->tlsConnected = false;
 8082090:	f884 0680 	strb.w	r0, [r4, #1664]	; 0x680
    this->qoscallback = NULL;
 8082094:	6360      	str	r0, [r4, #52]	; 0x34
    if (ip != NULL)
 8082096:	b102      	cbz	r2, 808209a <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1a>
        this->ip = ip;
 8082098:	64a2      	str	r2, [r4, #72]	; 0x48
    if (domain != NULL)
 808209a:	b119      	cbz	r1, 80820a4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x24>
        this->domain = domain;
 808209c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80820a0:	f00f fec2 	bl	8091e28 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80820a4:	9b04      	ldr	r3, [sp, #16]

    this->maxpacketsize = maxpacketsize;
    if (buffer != NULL)
 80820a6:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80820a8:	6523      	str	r3, [r4, #80]	; 0x50

    this->maxpacketsize = maxpacketsize;
 80820aa:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80820ac:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    this->maxpacketsize = maxpacketsize;
 80820b0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80820b4:	b108      	cbz	r0, 80820ba <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x3a>
      delete[] buffer;
 80820b6:	f7fd fff6 	bl	80800a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80820ba:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80820be:	f7fd ffee 	bl	808009e <_Znaj>
 80820c2:	61e0      	str	r0, [r4, #28]
 80820c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080820c8 <_ZN4MQTTC1EPctPFvS0_PhjE>:

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80820c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80820cc:	4604      	mov	r4, r0
 80820ce:	4617      	mov	r7, r2
 80820d0:	4698      	mov	r8, r3
 80820d2:	460e      	mov	r6, r1
 80820d4:	2500      	movs	r5, #0
 80820d6:	f00f fd75 	bl	8091bc4 <_ZN9TCPClientC1Ev>
 80820da:	61e5      	str	r5, [r4, #28]
 80820dc:	490c      	ldr	r1, [pc, #48]	; (8082110 <_ZN4MQTTC1EPctPFvS0_PhjE+0x48>)
 80820de:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80820e2:	f00f fe74 	bl	8091dce <_ZN6StringC1EPK19__FlashStringHelper>
 80820e6:	2301      	movs	r3, #1
 80820e8:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80820ec:	23ff      	movs	r3, #255	; 0xff
 80820ee:	9302      	str	r3, [sp, #8]
 80820f0:	230f      	movs	r3, #15
 80820f2:	9300      	str	r3, [sp, #0]
 80820f4:	4620      	mov	r0, r4

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80820f6:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80820f8:	f8cd 8004 	str.w	r8, [sp, #4]
 80820fc:	463b      	mov	r3, r7
 80820fe:	462a      	mov	r2, r5
 8082100:	4631      	mov	r1, r6
 8082102:	f7ff ffbd 	bl	8082080 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 8082106:	4620      	mov	r0, r4
 8082108:	b004      	add	sp, #16
 808210a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808210e:	bf00      	nop
 8082110:	0809457c 	.word	0x0809457c

08082114 <_ZN4MQTT11writeStringEPKcPht>:
    }
    tcpClient.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 8082114:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 8082116:	460d      	mov	r5, r1
 8082118:	3302      	adds	r3, #2
 808211a:	b29b      	uxth	r3, r3
 808211c:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 808211e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8082122:	b2a4      	uxth	r4, r4
 8082124:	b13e      	cbz	r6, 8082136 <_ZN4MQTT11writeStringEPKcPht+0x22>
 8082126:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 808212a:	429f      	cmp	r7, r3
 808212c:	d903      	bls.n	8082136 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 808212e:	1c5c      	adds	r4, r3, #1
 8082130:	54d6      	strb	r6, [r2, r3]
 8082132:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 8082134:	e7f2      	b.n	808211c <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 8082136:	1b19      	subs	r1, r3, r4
 8082138:	440a      	add	r2, r1
 808213a:	1221      	asrs	r1, r4, #8
 808213c:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 8082140:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 8082144:	4618      	mov	r0, r3
 8082146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082148 <_ZN4MQTT8netWriteEPhi>:


uint16_t MQTT::netWrite(unsigned char *buff, int length) {
 8082148:	b510      	push	{r4, lr}
    debug_tls("netWrite!!\n");
    if (tls == false) {
 808214a:	f890 4681 	ldrb.w	r4, [r0, #1665]	; 0x681
 808214e:	b914      	cbnz	r4, 8082156 <_ZN4MQTT8netWriteEPhi+0xe>
        return tcpClient.write(buff, length);
 8082150:	f00f fdb4 	bl	8091cbc <_ZN9TCPClient5writeEPKhj>
 8082154:	e003      	b.n	808215e <_ZN4MQTT8netWriteEPhi+0x16>
    } else {
        return mbedtls_ssl_write(&ssl, buff, length);
 8082156:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 808215a:	f008 ff4d 	bl	808aff8 <mbedtls_ssl_write>
 808215e:	b280      	uxth	r0, r0
    }
}
 8082160:	bd10      	pop	{r4, pc}

08082162 <_ZN4MQTT5writeEhPht>:
    }
    return false;
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 8082162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8082164:	4607      	mov	r7, r0
 8082166:	468e      	mov	lr, r1
 8082168:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 808216a:	461d      	mov	r5, r3
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 808216c:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 808216e:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 8082172:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 8082174:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 8082176:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 8082178:	bf18      	it	ne
 808217a:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 808217e:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 8082180:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 8082184:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 8082186:	2d00      	cmp	r5, #0
 8082188:	d1f1      	bne.n	808216e <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 808218a:	f1c4 0304 	rsb	r3, r4, #4
 808218e:	18d1      	adds	r1, r2, r3
 8082190:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 8082194:	42a5      	cmp	r5, r4
 8082196:	da06      	bge.n	80821a6 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 8082198:	a801      	add	r0, sp, #4
 808219a:	1b2b      	subs	r3, r5, r4
 808219c:	5c28      	ldrb	r0, [r5, r0]
 808219e:	4413      	add	r3, r2
 80821a0:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80821a2:	3501      	adds	r5, #1
 80821a4:	e7f6      	b.n	8082194 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);
 80821a6:	1c72      	adds	r2, r6, #1
 80821a8:	4422      	add	r2, r4
 80821aa:	4638      	mov	r0, r7
 80821ac:	f7ff ffcc 	bl	8082148 <_ZN4MQTT8netWriteEPhi>
 80821b0:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80821b2:	f00f f839 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80821b6:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80821b8:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80821ba:	19a0      	adds	r0, r4, r6
}
 80821bc:	1b43      	subs	r3, r0, r5
 80821be:	4258      	negs	r0, r3
 80821c0:	4158      	adcs	r0, r3
 80821c2:	b003      	add	sp, #12
 80821c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080821c6 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80821c6:	b538      	push	{r3, r4, r5, lr}
 80821c8:	4604      	mov	r4, r0
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
 80821ca:	69c3      	ldr	r3, [r0, #28]
 80821cc:	22e0      	movs	r2, #224	; 0xe0
 80821ce:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80821d0:	69c3      	ldr	r3, [r0, #28]
 80821d2:	2500      	movs	r5, #0
 80821d4:	705d      	strb	r5, [r3, #1]
    netWrite(buffer,2);
 80821d6:	2202      	movs	r2, #2
 80821d8:	69c1      	ldr	r1, [r0, #28]
 80821da:	f7ff ffb5 	bl	8082148 <_ZN4MQTT8netWriteEPhi>

    if (tls) {
 80821de:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 80821e2:	b1bb      	cbz	r3, 8082214 <_ZN4MQTT10disconnectEv+0x4e>
        debug_tls("tls close\n");
        tlsConnected = false;
        tls = false;
        mbedtls_x509_crt_free(&cacert);
 80821e4:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
    buffer[1] = 0;
    netWrite(buffer,2);

    if (tls) {
        debug_tls("tls close\n");
        tlsConnected = false;
 80821e8:	f884 5680 	strb.w	r5, [r4, #1664]	; 0x680
        tls = false;
 80821ec:	f884 5681 	strb.w	r5, [r4, #1665]	; 0x681
        mbedtls_x509_crt_free(&cacert);
 80821f0:	f007 f8d1 	bl	8089396 <mbedtls_x509_crt_free>
        mbedtls_x509_crt_free(&clicert);
 80821f4:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 80821f8:	f007 f8cd 	bl	8089396 <mbedtls_x509_crt_free>
        mbedtls_pk_free(&pkey);
 80821fc:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8082200:	f00a fe97 	bl	808cf32 <mbedtls_pk_free>
        mbedtls_ssl_config_free (&conf);
 8082204:	f504 7061 	add.w	r0, r4, #900	; 0x384
 8082208:	f009 f8e6 	bl	808b3d8 <mbedtls_ssl_config_free>
        mbedtls_ssl_free (&ssl);
 808220c:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8082210:	f009 f84e 	bl	808b2b0 <mbedtls_ssl_free>
    }
    tcpClient.stop();
 8082214:	4620      	mov	r0, r4
 8082216:	f00f fc85 	bl	8091b24 <_ZN9TCPClient4stopEv>
 808221a:	f00f f805 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 808221e:	6260      	str	r0, [r4, #36]	; 0x24
 8082220:	62a0      	str	r0, [r4, #40]	; 0x28
 8082222:	bd38      	pop	{r3, r4, r5, pc}

08082224 <_ZN4MQTT8readByteEv>:
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
 8082224:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (tls == false) {
 8082226:	f890 3681 	ldrb.w	r3, [r0, #1665]	; 0x681
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
 808222a:	4604      	mov	r4, r0
    if (tls == false) {
 808222c:	b94b      	cbnz	r3, 8082242 <_ZN4MQTT8readByteEv+0x1e>
        while(!tcpClient.available()) {}
 808222e:	4620      	mov	r0, r4
 8082230:	f00f fc3a 	bl	8091aa8 <_ZN9TCPClient9availableEv>
 8082234:	2800      	cmp	r0, #0
 8082236:	d0fa      	beq.n	808222e <_ZN4MQTT8readByteEv+0xa>
        return tcpClient.read();
 8082238:	4620      	mov	r0, r4
 808223a:	f00f fbdc 	bl	80919f6 <_ZN9TCPClient4readEv>
 808223e:	b2c0      	uxtb	r0, r0
 8082240:	e017      	b.n	8082272 <_ZN4MQTT8readByteEv+0x4e>
    } else {
        uint8_t val = 0;
        uint8_t buff;

        if (tlsConnected) {
 8082242:	f890 3680 	ldrb.w	r3, [r0, #1664]	; 0x680
 8082246:	b19b      	cbz	r3, 8082270 <_ZN4MQTT8readByteEv+0x4c>
            while (1) {
                int ret = mbedtls_ssl_read(&ssl, &buff, 1);
 8082248:	f500 7534 	add.w	r5, r0, #720	; 0x2d0
 808224c:	2201      	movs	r2, #1
 808224e:	f10d 0107 	add.w	r1, sp, #7
 8082252:	4628      	mov	r0, r5
 8082254:	f008 fe4a 	bl	808aeec <mbedtls_ssl_read>
                if (ret < 0) {
 8082258:	2800      	cmp	r0, #0
 808225a:	da06      	bge.n	808226a <_ZN4MQTT8readByteEv+0x46>
                      switch (ret) {
 808225c:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 8082260:	d0f4      	beq.n	808224c <_ZN4MQTT8readByteEv+0x28>
                        case MBEDTLS_ERR_SSL_WANT_READ:
                          break;
                      case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                      case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
                      default:
                          disconnect();
 8082262:	4620      	mov	r0, r4
 8082264:	f7ff ffaf 	bl	80821c6 <_ZN4MQTT10disconnectEv>
 8082268:	e002      	b.n	8082270 <_ZN4MQTT8readByteEv+0x4c>
                          return -1;
                    }
                } else {
                    return buff;
 808226a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808226e:	e000      	b.n	8082272 <_ZN4MQTT8readByteEv+0x4e>
                }
            }
        } else {
            return -1;
 8082270:	20ff      	movs	r0, #255	; 0xff
        }
    }
}
 8082272:	b003      	add	sp, #12
 8082274:	bd30      	pop	{r4, r5, pc}

08082276 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 8082276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808227a:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 808227c:	69c4      	ldr	r4, [r0, #28]
            return -1;
        }
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 808227e:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 8082280:	f7ff ffd0 	bl	8082224 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 8082284:	f04f 0801 	mov.w	r8, #1
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 8082288:	4646      	mov	r6, r8
 808228a:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 808228c:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 808228e:	2700      	movs	r7, #0
 8082290:	f893 9000 	ldrb.w	r9, [r3]
 8082294:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 8082298:	4628      	mov	r0, r5
 808229a:	f7ff ffc3 	bl	8082224 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 808229e:	69eb      	ldr	r3, [r5, #28]
 80822a0:	1c74      	adds	r4, r6, #1
 80822a2:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80822a4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80822a8:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80822ac:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80822ae:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80822b0:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80822b2:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80822b6:	d501      	bpl.n	80822bc <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80822b8:	4626      	mov	r6, r4
 80822ba:	e7ed      	b.n	8082298 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80822bc:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80822be:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80822c2:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80822c6:	d113      	bne.n	80822f0 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80822c8:	4628      	mov	r0, r5
 80822ca:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80822ce:	f7ff ffa9 	bl	8082224 <_ZN4MQTT8readByteEv>
 80822d2:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80822d6:	4628      	mov	r0, r5
 80822d8:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80822dc:	f7ff ffa2 	bl	8082224 <_ZN4MQTT8readByteEv>
 80822e0:	1cf4      	adds	r4, r6, #3
 80822e2:	3602      	adds	r6, #2
 80822e4:	b2b6      	uxth	r6, r6
 80822e6:	b2a4      	uxth	r4, r4
 80822e8:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80822ec:	2302      	movs	r3, #2
 80822ee:	e000      	b.n	80822f2 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80822f0:	2300      	movs	r3, #0
 80822f2:	1b1b      	subs	r3, r3, r4
 80822f4:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80822f6:	19a3      	adds	r3, r4, r6
 80822f8:	b29b      	uxth	r3, r3
 80822fa:	429f      	cmp	r7, r3
 80822fc:	d90b      	bls.n	8082316 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80822fe:	4628      	mov	r0, r5
 8082300:	f7ff ff90 	bl	8082224 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 8082304:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 8082308:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 808230a:	bf84      	itt	hi
 808230c:	69eb      	ldrhi	r3, [r5, #28]
 808230e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 8082310:	3401      	adds	r4, #1
 8082312:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 8082314:	e7ef      	b.n	80822f6 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 8082316:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 808231a:	42a0      	cmp	r0, r4
 808231c:	bf2c      	ite	cs
 808231e:	4620      	movcs	r0, r4
 8082320:	2000      	movcc	r0, #0
 8082322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08082326 <_ZN4MQTT11isConnectedEv>:
        return mbedtls_ssl_write(&ssl, buff, length);
    }
}


bool MQTT::isConnected() {
 8082326:	b510      	push	{r4, lr}
 8082328:	4604      	mov	r4, r0
    bool rc = (int)tcpClient.connected();
 808232a:	f00f fcd9 	bl	8091ce0 <_ZN9TCPClient9connectedEv>
    if (tls)
 808232e:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8082332:	b91b      	cbnz	r3, 808233c <_ZN4MQTT11isConnectedEv+0x16>
    }
}


bool MQTT::isConnected() {
    bool rc = (int)tcpClient.connected();
 8082334:	3000      	adds	r0, #0
 8082336:	bf18      	it	ne
 8082338:	2001      	movne	r0, #1
 808233a:	bd10      	pop	{r4, pc}
    if (tls)
        return tlsConnected;
 808233c:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
    return rc;
}
 8082340:	bd10      	pop	{r4, pc}

08082342 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 8082342:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082346:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8082348:	4604      	mov	r4, r0
 808234a:	468b      	mov	fp, r1
 808234c:	4691      	mov	r9, r2
 808234e:	469a      	mov	sl, r3
 8082350:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8082354:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8082358:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 808235c:	f7ff ffe3 	bl	8082326 <_ZN4MQTT11isConnectedEv>
 8082360:	2800      	cmp	r0, #0
 8082362:	d048      	beq.n	80823f6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, sizeof(buffer));
 8082364:	69e3      	ldr	r3, [r4, #28]
 8082366:	2200      	movs	r2, #0
 8082368:	601a      	str	r2, [r3, #0]

        length = writeString(topic, buffer, length);
 808236a:	69e2      	ldr	r2, [r4, #28]
 808236c:	2305      	movs	r3, #5
 808236e:	4659      	mov	r1, fp
 8082370:	4620      	mov	r0, r4
 8082372:	f7ff fecf 	bl	8082114 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 8082376:	1e6b      	subs	r3, r5, #1
 8082378:	2b01      	cmp	r3, #1
 808237a:	d812      	bhi.n	80823a2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
            nextMsgId += 1;
 808237c:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 808237e:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, sizeof(buffer));

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 8082380:	3301      	adds	r3, #1
 8082382:	b29b      	uxth	r3, r3
 8082384:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 8082386:	121b      	asrs	r3, r3, #8
 8082388:	5413      	strb	r3, [r2, r0]
 808238a:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 808238c:	69e3      	ldr	r3, [r4, #28]
 808238e:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 8082390:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 8082392:	3002      	adds	r0, #2
 8082394:	b280      	uxth	r0, r0
 8082396:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 8082398:	b11e      	cbz	r6, 80823a2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
                *messageid = nextMsgId++;
 808239a:	8c23      	ldrh	r3, [r4, #32]
 808239c:	1c5a      	adds	r2, r3, #1
 808239e:	8422      	strh	r2, [r4, #32]
 80823a0:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80823a2:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80823a4:	b291      	uxth	r1, r2
 80823a6:	1883      	adds	r3, r0, r2
 80823a8:	458a      	cmp	sl, r1
 80823aa:	b29b      	uxth	r3, r3
 80823ac:	d909      	bls.n	80823c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x80>
 80823ae:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80823b2:	3201      	adds	r2, #1
 80823b4:	429e      	cmp	r6, r3
 80823b6:	d904      	bls.n	80823c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x80>
            buffer[length++] = payload[i];
 80823b8:	f819 6001 	ldrb.w	r6, [r9, r1]
 80823bc:	69e1      	ldr	r1, [r4, #28]
 80823be:	54ce      	strb	r6, [r1, r3]
 80823c0:	e7f0      	b.n	80823a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x62>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80823c2:	f1b8 0f00 	cmp.w	r8, #0
 80823c6:	bf0c      	ite	eq
 80823c8:	2130      	moveq	r1, #48	; 0x30
 80823ca:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80823cc:	b10f      	cbz	r7, 80823d2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
            header |= DUP_FLAG_ON_MASK;
 80823ce:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80823d2:	2d02      	cmp	r5, #2
 80823d4:	d102      	bne.n	80823dc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x9a>
            header |= MQTTQOS2_HEADER_MASK;
 80823d6:	f041 0104 	orr.w	r1, r1, #4
 80823da:	e003      	b.n	80823e4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
        else if (qos == QOS1)
 80823dc:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80823de:	bf08      	it	eq
 80823e0:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80823e4:	4620      	mov	r0, r4
 80823e6:	3b05      	subs	r3, #5
 80823e8:	69e2      	ldr	r2, [r4, #28]
 80823ea:	b29b      	uxth	r3, r3
    }
    return false;
}
 80823ec:	b001      	add	sp, #4
 80823ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80823f2:	f7ff beb6 	b.w	8082162 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80823f6:	b001      	add	sp, #4
 80823f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080823fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80823fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80823fe:	9c08      	ldr	r4, [sp, #32]
 8082400:	9403      	str	r4, [sp, #12]
 8082402:	2400      	movs	r4, #0
 8082404:	9402      	str	r4, [sp, #8]
 8082406:	f89d 401c 	ldrb.w	r4, [sp, #28]
 808240a:	9401      	str	r4, [sp, #4]
 808240c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8082410:	9400      	str	r4, [sp, #0]
 8082412:	f7ff ff96 	bl	8082342 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 8082416:	b004      	add	sp, #16
 8082418:	bd10      	pop	{r4, pc}

0808241a <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 808241a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 808241c:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 808241e:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 8082420:	460e      	mov	r6, r1
 8082422:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 8082424:	f011 f8e3 	bl	80935ee <strlen>
 8082428:	2300      	movs	r3, #0
 808242a:	9302      	str	r3, [sp, #8]
 808242c:	9301      	str	r3, [sp, #4]
 808242e:	9300      	str	r3, [sp, #0]
 8082430:	4622      	mov	r2, r4
 8082432:	4603      	mov	r3, r0
 8082434:	4631      	mov	r1, r6
 8082436:	4628      	mov	r0, r5
 8082438:	f7ff ffe0 	bl	80823fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 808243c:	b004      	add	sp, #16
 808243e:	bd70      	pop	{r4, r5, r6, pc}

08082440 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
    if (qos < 0 || qos > 1)
 8082440:	2a01      	cmp	r2, #1

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 8082442:	b570      	push	{r4, r5, r6, lr}
 8082444:	4604      	mov	r4, r0
 8082446:	460e      	mov	r6, r1
 8082448:	4615      	mov	r5, r2
    if (qos < 0 || qos > 1)
 808244a:	d820      	bhi.n	808248e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4e>
        return false;

    if (isConnected()) {
 808244c:	f7ff ff6b 	bl	8082326 <_ZN4MQTT11isConnectedEv>
 8082450:	b1e8      	cbz	r0, 808248e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4e>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 8082452:	8c23      	ldrh	r3, [r4, #32]
 8082454:	3301      	adds	r3, #1
 8082456:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 8082458:	b903      	cbnz	r3, 808245c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x1c>
            nextMsgId = 1;
 808245a:	2301      	movs	r3, #1
 808245c:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 808245e:	8c23      	ldrh	r3, [r4, #32]
 8082460:	69e2      	ldr	r2, [r4, #28]
 8082462:	121b      	asrs	r3, r3, #8
 8082464:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 8082466:	69e3      	ldr	r3, [r4, #28]
 8082468:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 808246a:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 808246c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 808246e:	69e2      	ldr	r2, [r4, #28]
 8082470:	2307      	movs	r3, #7
 8082472:	4620      	mov	r0, r4
 8082474:	f7ff fe4e 	bl	8082114 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 8082478:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 808247a:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 808247c:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 808247e:	1f03      	subs	r3, r0, #4
 8082480:	69e2      	ldr	r2, [r4, #28]
 8082482:	4620      	mov	r0, r4
    }
    return false;
}
 8082484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 8082488:	b29b      	uxth	r3, r3
 808248a:	f7ff be6a 	b.w	8082162 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 808248e:	2000      	movs	r0, #0
 8082490:	bd70      	pop	{r4, r5, r6, pc}

08082492 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
 8082492:	2200      	movs	r2, #0
 8082494:	f7ff bfd4 	b.w	8082440 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

08082498 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 8082498:	b510      	push	{r4, lr}
 808249a:	4604      	mov	r4, r0
    if (isConnected()) {
 808249c:	f7ff ff43 	bl	8082326 <_ZN4MQTT11isConnectedEv>
 80824a0:	b128      	cbz	r0, 80824ae <_ZN4MQTTD1Ev+0x16>
        disconnect();
 80824a2:	4620      	mov	r0, r4
 80824a4:	f7ff fe8f 	bl	80821c6 <_ZN4MQTT10disconnectEv>
        free(buffer);
 80824a8:	69e0      	ldr	r0, [r4, #28]
 80824aa:	f00f f8ed 	bl	8091688 <free>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80824ae:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80824b2:	f00f fc45 	bl	8091d40 <_ZN6StringD1Ev>
 80824b6:	4620      	mov	r0, r4
 80824b8:	f7ff fdaa 	bl	8082010 <_ZN9TCPClientD1Ev>
    if (isConnected()) {
        disconnect();
        free(buffer);
    }
}
 80824bc:	4620      	mov	r0, r4
 80824be:	bd10      	pop	{r4, pc}

080824c0 <_ZN4MQTT9availableEv>:
    if (tls)
        return tlsConnected;
    return rc;
}

bool MQTT::available() {
 80824c0:	b508      	push	{r3, lr}
    return tcpClient.available();
 80824c2:	f00f faf1 	bl	8091aa8 <_ZN9TCPClient9availableEv>
}
 80824c6:	3000      	adds	r0, #0
 80824c8:	bf18      	it	ne
 80824ca:	2001      	movne	r0, #1
 80824cc:	bd08      	pop	{r3, pc}

080824ce <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80824ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80824d2:	b083      	sub	sp, #12
 80824d4:	af00      	add	r7, sp, #0
 80824d6:	4604      	mov	r4, r0
    if (isConnected()) {
 80824d8:	f7ff ff25 	bl	8082326 <_ZN4MQTT11isConnectedEv>
 80824dc:	4606      	mov	r6, r0
 80824de:	2800      	cmp	r0, #0
 80824e0:	f000 80be 	beq.w	8082660 <_ZN4MQTT4loopEv+0x192>
 80824e4:	f00e fea0 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80824e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80824ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80824ee:	4353      	muls	r3, r2
 80824f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80824f2:	4605      	mov	r5, r0
 80824f4:	1a82      	subs	r2, r0, r2
 80824f6:	429a      	cmp	r2, r3
 80824f8:	d803      	bhi.n	8082502 <_ZN4MQTT4loopEv+0x34>
 80824fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80824fc:	1a82      	subs	r2, r0, r2
 80824fe:	4293      	cmp	r3, r2
 8082500:	d216      	bcs.n	8082530 <_ZN4MQTT4loopEv+0x62>
            if (pingOutstanding) {
 8082502:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8082506:	b123      	cbz	r3, 8082512 <_ZN4MQTT4loopEv+0x44>
                disconnect();
 8082508:	4620      	mov	r0, r4
 808250a:	f7ff fe5c 	bl	80821c6 <_ZN4MQTT10disconnectEv>
                return false;
 808250e:	2600      	movs	r6, #0
 8082510:	e0a6      	b.n	8082660 <_ZN4MQTT4loopEv+0x192>
            } else {
                buffer[0] = MQTTPINGREQ;
 8082512:	69e2      	ldr	r2, [r4, #28]
 8082514:	21c0      	movs	r1, #192	; 0xc0
 8082516:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 8082518:	69e2      	ldr	r2, [r4, #28]
                netWrite(buffer,2);
 808251a:	4620      	mov	r0, r4
            if (pingOutstanding) {
                disconnect();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 808251c:	7053      	strb	r3, [r2, #1]
                netWrite(buffer,2);
 808251e:	69e1      	ldr	r1, [r4, #28]
 8082520:	2202      	movs	r2, #2
 8082522:	f7ff fe11 	bl	8082148 <_ZN4MQTT8netWriteEPhi>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 8082526:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                netWrite(buffer,2);
                lastOutActivity = t;
 8082528:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 808252a:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 808252c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (available()) {
 8082530:	4620      	mov	r0, r4
 8082532:	f7ff ffc5 	bl	80824c0 <_ZN4MQTT9availableEv>
 8082536:	4681      	mov	r9, r0
 8082538:	2800      	cmp	r0, #0
 808253a:	f000 8091 	beq.w	8082660 <_ZN4MQTT4loopEv+0x192>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 808253e:	1df9      	adds	r1, r7, #7
 8082540:	4620      	mov	r0, r4
 8082542:	f7ff fe98 	bl	8082276 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 8082546:	4602      	mov	r2, r0
 8082548:	2800      	cmp	r0, #0
 808254a:	f000 8088 	beq.w	808265e <_ZN4MQTT4loopEv+0x190>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 808254e:	69e1      	ldr	r1, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 8082550:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 8082552:	7808      	ldrb	r0, [r1, #0]
 8082554:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 8082558:	2b30      	cmp	r3, #48	; 0x30
 808255a:	d158      	bne.n	808260e <_ZN4MQTT4loopEv+0x140>
                    if (callback) {
 808255c:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 8082560:	f1bb 0f00 	cmp.w	fp, #0
 8082564:	d07b      	beq.n	808265e <_ZN4MQTT4loopEv+0x190>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
 8082566:	f897 e007 	ldrb.w	lr, [r7, #7]
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 808256a:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
 808256c:	eb01 000e 	add.w	r0, r1, lr
 8082570:	7846      	ldrb	r6, [r0, #1]
 8082572:	7883      	ldrb	r3, [r0, #2]
 8082574:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8082578:	b29b      	uxth	r3, r3
                        char topic[tl+1];
 808257a:	f103 0008 	add.w	r0, r3, #8
 808257e:	f020 0007 	bic.w	r0, r0, #7
 8082582:	ebad 0d00 	sub.w	sp, sp, r0
 8082586:	4668      	mov	r0, sp
 8082588:	2600      	movs	r6, #0
                        for (uint16_t i=0;i<tl;i++) {
 808258a:	fa1f fc86 	uxth.w	ip, r6
 808258e:	4563      	cmp	r3, ip
 8082590:	d908      	bls.n	80825a4 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 8082592:	eb0e 0c06 	add.w	ip, lr, r6
 8082596:	448c      	add	ip, r1
 8082598:	f89c c003 	ldrb.w	ip, [ip, #3]
 808259c:	f800 c006 	strb.w	ip, [r0, r6]
 80825a0:	3601      	adds	r6, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80825a2:	e7f2      	b.n	808258a <_ZN4MQTT4loopEv+0xbc>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80825a4:	2600      	movs	r6, #0
 80825a6:	54c6      	strb	r6, [r0, r3]
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
 80825a8:	f891 8000 	ldrb.w	r8, [r1]
 80825ac:	f10e 0603 	add.w	r6, lr, #3
 80825b0:	f008 0806 	and.w	r8, r8, #6
 80825b4:	f1b8 0f02 	cmp.w	r8, #2
 80825b8:	ebce 0202 	rsb	r2, lr, r2
 80825bc:	d120      	bne.n	8082600 <_ZN4MQTT4loopEv+0x132>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80825be:	441e      	add	r6, r3
 80825c0:	f811 c006 	ldrb.w	ip, [r1, r6]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80825c4:	f10e 0e05 	add.w	lr, lr, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80825c8:	440e      	add	r6, r1
 80825ca:	7876      	ldrb	r6, [r6, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80825cc:	1ad2      	subs	r2, r2, r3
 80825ce:	4473      	add	r3, lr
 80825d0:	4419      	add	r1, r3
 80825d2:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80825d4:	eb06 260c 	add.w	r6, r6, ip, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80825d8:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK;
 80825da:	69e3      	ldr	r3, [r4, #28]
 80825dc:	2240      	movs	r2, #64	; 0x40
 80825de:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80825e0:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80825e2:	b2b6      	uxth	r6, r6
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
 80825e4:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80825e8:	69e3      	ldr	r3, [r4, #28]
 80825ea:	1232      	asrs	r2, r6, #8
 80825ec:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80825ee:	69e3      	ldr	r3, [r4, #28]
                            netWrite(buffer,4);
 80825f0:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80825f2:	70de      	strb	r6, [r3, #3]
                            netWrite(buffer,4);
 80825f4:	69e1      	ldr	r1, [r4, #28]
 80825f6:	4620      	mov	r0, r4
 80825f8:	f7ff fda6 	bl	8082148 <_ZN4MQTT8netWriteEPhi>
                            lastOutActivity = t;
 80825fc:	6265      	str	r5, [r4, #36]	; 0x24
 80825fe:	e004      	b.n	808260a <_ZN4MQTT4loopEv+0x13c>
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 8082600:	3a03      	subs	r2, #3
 8082602:	441e      	add	r6, r3
 8082604:	1ad2      	subs	r2, r2, r3
 8082606:	4431      	add	r1, r6
 8082608:	47d8      	blx	fp
 808260a:	46d5      	mov	sp, sl
 808260c:	e027      	b.n	808265e <_ZN4MQTT4loopEv+0x190>
                        }
                    }
                } else if (type == MQTTPUBACK || type == MQTTPUBREC) {
 808260e:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8082612:	2d40      	cmp	r5, #64	; 0x40
 8082614:	d10d      	bne.n	8082632 <_ZN4MQTT4loopEv+0x164>
                    if (qoscallback) {
 8082616:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8082618:	b30c      	cbz	r4, 808265e <_ZN4MQTT4loopEv+0x190>
                        // msgId only present for QOS==0
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 808261a:	2a04      	cmp	r2, #4
 808261c:	d11f      	bne.n	808265e <_ZN4MQTT4loopEv+0x190>
 808261e:	f010 0f06 	tst.w	r0, #6
 8082622:	d11c      	bne.n	808265e <_ZN4MQTT4loopEv+0x190>
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
 8082624:	7888      	ldrb	r0, [r1, #2]
 8082626:	78cb      	ldrb	r3, [r1, #3]
 8082628:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 808262c:	b280      	uxth	r0, r0
 808262e:	47a0      	blx	r4
 8082630:	e015      	b.n	808265e <_ZN4MQTT4loopEv+0x190>
                        }
                    }
                } else if (type == MQTTPUBCOMP) {
 8082632:	2b70      	cmp	r3, #112	; 0x70
 8082634:	d013      	beq.n	808265e <_ZN4MQTT4loopEv+0x190>
                    // TODO:if something...
                } else if (type == MQTTSUBACK) {
 8082636:	2b90      	cmp	r3, #144	; 0x90
 8082638:	d011      	beq.n	808265e <_ZN4MQTT4loopEv+0x190>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 808263a:	2bc0      	cmp	r3, #192	; 0xc0
 808263c:	d10a      	bne.n	8082654 <_ZN4MQTT4loopEv+0x186>
                    buffer[0] = MQTTPINGRESP;
 808263e:	23d0      	movs	r3, #208	; 0xd0
 8082640:	700b      	strb	r3, [r1, #0]
                    buffer[1] = 0;
 8082642:	69e3      	ldr	r3, [r4, #28]
 8082644:	2200      	movs	r2, #0
 8082646:	705a      	strb	r2, [r3, #1]
                    netWrite(buffer,2);
 8082648:	69e1      	ldr	r1, [r4, #28]
 808264a:	2202      	movs	r2, #2
 808264c:	4620      	mov	r0, r4
 808264e:	f7ff fd7b 	bl	8082148 <_ZN4MQTT8netWriteEPhi>
 8082652:	e004      	b.n	808265e <_ZN4MQTT4loopEv+0x190>
                } else if (type == MQTTPINGRESP) {
 8082654:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
 8082656:	bf04      	itt	eq
 8082658:	2300      	moveq	r3, #0
 808265a:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
                }
            }
        }
        return true;
 808265e:	464e      	mov	r6, r9
    }
    return false;
}
 8082660:	4630      	mov	r0, r6
 8082662:	370c      	adds	r7, #12
 8082664:	46bd      	mov	sp, r7
 8082666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808266c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>:
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 808266c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082670:	4605      	mov	r5, r0
 8082672:	4693      	mov	fp, r2
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8082674:	f500 7461 	add.w	r4, r0, #900	; 0x384
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8082678:	4699      	mov	r9, r3
    int ret;
    tls = true;
 808267a:	2301      	movs	r3, #1
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 808267c:	b085      	sub	sp, #20
    int ret;
    tls = true;
 808267e:	f880 3681 	strb.w	r3, [r0, #1665]	; 0x681

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
 8082682:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8082686:	4620      	mov	r0, r4
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8082688:	9103      	str	r1, [sp, #12]
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 808268a:	f505 7a7a 	add.w	sl, r5, #1000	; 0x3e8
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 808268e:	f008 fe5d 	bl	808b34c <mbedtls_ssl_config_init>
    mbedtls_ssl_init(&ssl);
 8082692:	4630      	mov	r0, r6
 8082694:	f008 fb82 	bl	808ad9c <mbedtls_ssl_init>
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 8082698:	f205 571c 	addw	r7, r5, #1308	; 0x51c
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 808269c:	4650      	mov	r0, sl
 808269e:	f006 fe75 	bl	808938c <mbedtls_x509_crt_init>
    mbedtls_x509_crt_init(&clicert);
    mbedtls_pk_init(&pkey);
 80826a2:	f505 68ca 	add.w	r8, r5, #1616	; 0x650
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 80826a6:	4638      	mov	r0, r7
 80826a8:	f006 fe70 	bl	808938c <mbedtls_x509_crt_init>
    mbedtls_pk_init(&pkey);
 80826ac:	4640      	mov	r0, r8
 80826ae:	f00a fc3b 	bl	808cf28 <mbedtls_pk_init>

    mbedtls_ssl_conf_dbg(&conf, &MQTT::debug_Tls, nullptr);
 80826b2:	2200      	movs	r2, #0
 80826b4:	4935      	ldr	r1, [pc, #212]	; (808278c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x120>)
 80826b6:	4620      	mov	r0, r4
 80826b8:	f008 fb81 	bl	808adbe <mbedtls_ssl_conf_dbg>
    #if defined(MBEDTLS_DEBUG_C)
      mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
    #endif

    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
 80826bc:	465a      	mov	r2, fp
 80826be:	9903      	ldr	r1, [sp, #12]
 80826c0:	4650      	mov	r0, sl
 80826c2:	f007 fa01 	bl	8089ac8 <mbedtls_x509_crt_parse>
 80826c6:	2800      	cmp	r0, #0
 80826c8:	db5d      	blt.n	8082786 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 80826ca:	f1b9 0f00 	cmp.w	r9, #0
 80826ce:	d102      	bne.n	80826d6 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x6a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 80826d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80826d2:	b95b      	cbnz	r3, 80826ec <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x80>
 80826d4:	e00c      	b.n	80826f0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 80826d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80826d8:	2b00      	cmp	r3, #0
 80826da:	d0f9      	beq.n	80826d0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
      if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
 80826dc:	461a      	mov	r2, r3
 80826de:	4649      	mov	r1, r9
 80826e0:	4638      	mov	r0, r7
 80826e2:	f007 f9f1 	bl	8089ac8 <mbedtls_x509_crt_parse>
 80826e6:	2800      	cmp	r0, #0
 80826e8:	daf2      	bge.n	80826d0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
 80826ea:	e04c      	b.n	8082786 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 80826ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80826ee:	b94b      	cbnz	r3, 8082704 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x98>
        debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
        return ret;
      }
    }

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
 80826f0:	2300      	movs	r3, #0
 80826f2:	461a      	mov	r2, r3
 80826f4:	4619      	mov	r1, r3
 80826f6:	4620      	mov	r0, r4
 80826f8:	f008 fe2c 	bl	808b354 <mbedtls_ssl_config_defaults>
 80826fc:	4683      	mov	fp, r0
 80826fe:	2800      	cmp	r0, #0
 8082700:	d141      	bne.n	8082786 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
 8082702:	e009      	b.n	8082718 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xac>
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
      if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
 8082704:	2300      	movs	r3, #0
 8082706:	9300      	str	r3, [sp, #0]
 8082708:	9a10      	ldr	r2, [sp, #64]	; 0x40
 808270a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 808270c:	4640      	mov	r0, r8
 808270e:	f005 f83b 	bl	8087788 <mbedtls_pk_parse_key>
 8082712:	2800      	cmp	r0, #0
 8082714:	d0ec      	beq.n	80826f0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
 8082716:	e036      	b.n	8082786 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                   MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
      return ret;
    }
    mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
 8082718:	2203      	movs	r2, #3
 808271a:	4611      	mov	r1, r2
 808271c:	4620      	mov	r0, r4
 808271e:	f008 fb9b 	bl	808ae58 <mbedtls_ssl_conf_min_version>
    mbedtls_ssl_conf_verify(&conf, &MQTT::veryfyCert_Tls, NULL);
 8082722:	465a      	mov	r2, fp
 8082724:	491a      	ldr	r1, [pc, #104]	; (8082790 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x124>)
 8082726:	4620      	mov	r0, r4
 8082728:	f008 fb43 	bl	808adb2 <mbedtls_ssl_conf_verify>

    // if server certificates is not valid, connection will success. check certificates on verify() function.
    mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 808272c:	2101      	movs	r1, #1
 808272e:	4620      	mov	r0, r4
 8082730:	f008 fb38 	bl	808ada4 <mbedtls_ssl_conf_authmode>
    mbedtls_ssl_conf_rng(&conf, &MQTT::rng_Tls, nullptr);
 8082734:	465a      	mov	r2, fp
 8082736:	4917      	ldr	r1, [pc, #92]	; (8082794 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x128>)
 8082738:	4620      	mov	r0, r4
 808273a:	f008 fb3d 	bl	808adb8 <mbedtls_ssl_conf_rng>
    mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
 808273e:	465a      	mov	r2, fp
 8082740:	4651      	mov	r1, sl
 8082742:	4620      	mov	r0, r4
 8082744:	f008 fb4f 	bl	808ade6 <mbedtls_ssl_conf_ca_chain>

    if (clientCertPem != NULL && clientKeyPem != NULL) {
 8082748:	f1b9 0f00 	cmp.w	r9, #0
 808274c:	d006      	beq.n	808275c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
 808274e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8082750:	b123      	cbz	r3, 808275c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
      mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
 8082752:	4642      	mov	r2, r8
 8082754:	4639      	mov	r1, r7
 8082756:	4620      	mov	r0, r4
 8082758:	f008 fb42 	bl	808ade0 <mbedtls_ssl_conf_own_cert>
    }

    if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
 808275c:	4621      	mov	r1, r4
 808275e:	4630      	mov	r0, r6
 8082760:	f008 fd6c 	bl	808b23c <mbedtls_ssl_setup>
 8082764:	4604      	mov	r4, r0
 8082766:	b968      	cbnz	r0, 8082784 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x118>
      return ret;
    }

    mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
 8082768:	4b0b      	ldr	r3, [pc, #44]	; (8082798 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x12c>)
 808276a:	4a0c      	ldr	r2, [pc, #48]	; (808279c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x130>)
 808276c:	f505 61cb 	add.w	r1, r5, #1624	; 0x658
 8082770:	4630      	mov	r0, r6
 8082772:	f008 fb2d 	bl	808add0 <mbedtls_ssl_set_timer_cb>
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
 8082776:	9400      	str	r4, [sp, #0]
 8082778:	4b09      	ldr	r3, [pc, #36]	; (80827a0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x134>)
 808277a:	4a0a      	ldr	r2, [pc, #40]	; (80827a4 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x138>)
 808277c:	4629      	mov	r1, r5
 808277e:	4630      	mov	r0, r6
 8082780:	f008 fb20 	bl	808adc4 <mbedtls_ssl_set_bio>
 8082784:	4620      	mov	r0, r4
    return 0;
}
 8082786:	b005      	add	sp, #20
 8082788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808278c:	08081f51 	.word	0x08081f51
 8082790:	08081fed 	.word	0x08081fed
 8082794:	08081fb9 	.word	0x08081fb9
 8082798:	080869d1 	.word	0x080869d1
 808279c:	080869c3 	.word	0x080869c3
 80827a0:	08081f89 	.word	0x08081f89
 80827a4:	08081f55 	.word	0x08081f55

080827a8 <_ZN4MQTT6verifyEv>:
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
 80827a8:	b500      	push	{lr}
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 80827aa:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
 80827ae:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 80827b2:	f008 fb56 	bl	808ae62 <mbedtls_ssl_get_verify_result>
 80827b6:	4603      	mov	r3, r0
 80827b8:	b138      	cbz	r0, 80827ca <_ZN4MQTT6verifyEv+0x22>
    char vrfy_buf[512];
    mbedtls_x509_crt_verify_info( vrfy_buf, sizeof( vrfy_buf ), "  ! ", ret );
 80827ba:	4a06      	ldr	r2, [pc, #24]	; (80827d4 <_ZN4MQTT6verifyEv+0x2c>)
 80827bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80827c0:	4668      	mov	r0, sp
 80827c2:	f006 f9cd 	bl	8088b60 <mbedtls_x509_crt_verify_info>
    debug_tls("%s\n", vrfy_buf);
    return false;
 80827c6:	2000      	movs	r0, #0
 80827c8:	e000      	b.n	80827cc <_ZN4MQTT6verifyEv+0x24>
  }
  return true;
 80827ca:	2001      	movs	r0, #1
}
 80827cc:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 80827d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80827d4:	08093f18 	.word	0x08093f18

080827d8 <_ZN4MQTT12handShakeTlsEv>:
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
    return 0;
}


int MQTT::handShakeTls() {
 80827d8:	b570      	push	{r4, r5, r6, lr}
 80827da:	4604      	mov	r4, r0
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 80827dc:	f500 7634 	add.w	r6, r0, #720	; 0x2d0

int MQTT::handShakeTls() {
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
 80827e0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 80827e4:	2b10      	cmp	r3, #16
 80827e6:	d005      	beq.n	80827f4 <_ZN4MQTT12handShakeTlsEv+0x1c>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 80827e8:	4630      	mov	r0, r6
 80827ea:	f00d f93d 	bl	808fa68 <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
 80827ee:	4605      	mov	r5, r0
 80827f0:	2800      	cmp	r0, #0
 80827f2:	d0f5      	beq.n	80827e0 <_ZN4MQTT12handShakeTlsEv+0x8>
              break;
      }
  } while (ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
 80827f4:	f515 4fd2 	cmn.w	r5, #26880	; 0x6900
 80827f8:	d0f2      	beq.n	80827e0 <_ZN4MQTT12handShakeTlsEv+0x8>
 80827fa:	f515 4fd1 	cmn.w	r5, #26752	; 0x6880
 80827fe:	d0ef      	beq.n	80827e0 <_ZN4MQTT12handShakeTlsEv+0x8>

  // clean ca cert/crt/pkey for memory limitation
  mbedtls_x509_crt_free(&cacert);
 8082800:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8082804:	f006 fdc7 	bl	8089396 <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
 8082808:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 808280c:	f006 fdc3 	bl	8089396 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
 8082810:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8082814:	f00a fb8d 	bl	808cf32 <mbedtls_pk_free>

  debug_tls("%s, ret = %d\n", "handshake done", ret);
  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
 8082818:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 808281c:	2b10      	cmp	r3, #16
 808281e:	d109      	bne.n	8082834 <_ZN4MQTT12handShakeTlsEv+0x5c>
      if (enableVerify && !verify())
 8082820:	f894 3682 	ldrb.w	r3, [r4, #1666]	; 0x682
 8082824:	b143      	cbz	r3, 8082838 <_ZN4MQTT12handShakeTlsEv+0x60>
 8082826:	4620      	mov	r0, r4
 8082828:	f7ff ffbe 	bl	80827a8 <_ZN4MQTT6verifyEv>
 808282c:	b920      	cbnz	r0, 8082838 <_ZN4MQTT12handShakeTlsEv+0x60>
        return -1;
 808282e:	f04f 30ff 	mov.w	r0, #4294967295
 8082832:	bd70      	pop	{r4, r5, r6, pc}
 8082834:	4628      	mov	r0, r5
 8082836:	bd70      	pop	{r4, r5, r6, pc}
      tlsConnected = true;
 8082838:	2301      	movs	r3, #1
 808283a:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
      debug_tls("tls connected\n");
      return 0;
 808283e:	2000      	movs	r0, #0
  }
  return ret;
}
 8082840:	bd70      	pop	{r4, r5, r6, pc}
	...

08082844 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage,true,MQTT_V311);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 8082844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8082848:	b08b      	sub	sp, #44	; 0x2c
 808284a:	4604      	mov	r4, r0
 808284c:	4689      	mov	r9, r1
 808284e:	4617      	mov	r7, r2
 8082850:	461e      	mov	r6, r3
 8082852:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    if (!isConnected()) {
 8082856:	f7ff fd66 	bl	8082326 <_ZN4MQTT11isConnectedEv>
 808285a:	4605      	mov	r5, r0
 808285c:	2800      	cmp	r0, #0
 808285e:	f040 80e7 	bne.w	8082a30 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ec>
        int result = 0;
        if (ip == NULL) {
 8082862:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8082864:	2900      	cmp	r1, #0
 8082866:	d138      	bne.n	80828da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
            result = tcpClient.connect(this->domain.c_str(), this->port);
 8082868:	4603      	mov	r3, r0
 808286a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 808286e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8082870:	4620      	mov	r0, r4
 8082872:	f00f f869 	bl	8091948 <_ZN9TCPClient7connectEPKctm>
            if (tls) {
 8082876:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 808287a:	2b00      	cmp	r3, #0
 808287c:	d050      	beq.n	8082920 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                mbedtls_ssl_set_hostname(&ssl, domain);
 808287e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8082880:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8082884:	f008 fab2 	bl	808adec <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
 8082888:	4620      	mov	r0, r4
 808288a:	f7ff ffa5 	bl	80827d8 <_ZN4MQTT12handShakeTlsEv>
 808288e:	2800      	cmp	r0, #0
 8082890:	f040 80ca 	bne.w	8082a28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
                result = (0 == this->handShakeTls() ? 1 : 0);
            }
        }

        if (result) {
            nextMsgId = 1;
 8082894:	2301      	movs	r3, #1
 8082896:	8423      	strh	r3, [r4, #32]

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 8082898:	4b68      	ldr	r3, [pc, #416]	; (8082a3c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1f8>)
 808289a:	aa06      	add	r2, sp, #24
 808289c:	6859      	ldr	r1, [r3, #4]
 808289e:	6818      	ldr	r0, [r3, #0]
 80828a0:	c203      	stmia	r2!, {r0, r1}
 80828a2:	7a19      	ldrb	r1, [r3, #8]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80828a4:	f853 0f09 	ldr.w	r0, [r3, #9]!
        if (result) {
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80828a8:	7011      	strb	r1, [r2, #0]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80828aa:	889a      	ldrh	r2, [r3, #4]
 80828ac:	799b      	ldrb	r3, [r3, #6]
 80828ae:	f8ad 2014 	strh.w	r2, [sp, #20]
 80828b2:	f88d 3016 	strb.w	r3, [sp, #22]

            if (version == MQTT_V311) {
 80828b6:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80828ba:	9004      	str	r0, [sp, #16]

            if (version == MQTT_V311) {
 80828bc:	2b04      	cmp	r3, #4
 80828be:	69e2      	ldr	r2, [r4, #28]
 80828c0:	d131      	bne.n	8082926 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80828c2:	9804      	ldr	r0, [sp, #16]
 80828c4:	1d53      	adds	r3, r2, #5
 80828c6:	f8c2 0005 	str.w	r0, [r2, #5]
 80828ca:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80828ce:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80828d2:	8099      	strh	r1, [r3, #4]
 80828d4:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80828d6:	230c      	movs	r3, #12
 80828d8:	e02e      	b.n	8082938 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xf4>
                mbedtls_ssl_set_hostname(&ssl, domain);
                result = (0 == this->handShakeTls() ? 1 : 0);
            }

        } else {
            result = tcpClient.connect(this->ip, this->port);
 80828da:	a806      	add	r0, sp, #24
 80828dc:	f00f fd3c 	bl	8092358 <_ZN9IPAddressC1EPKh>
 80828e0:	462b      	mov	r3, r5
 80828e2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80828e6:	a906      	add	r1, sp, #24
 80828e8:	4620      	mov	r0, r4
 80828ea:	f00f f975 	bl	8091bd8 <_ZN9TCPClient7connectE9IPAddresstm>
            if (tls) {
 80828ee:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 80828f2:	b1ab      	cbz	r3, 8082920 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                char buffername[16];
                sprintf(buffername, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
 80828f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80828f6:	78c8      	ldrb	r0, [r1, #3]
 80828f8:	784b      	ldrb	r3, [r1, #1]
 80828fa:	780a      	ldrb	r2, [r1, #0]
 80828fc:	9001      	str	r0, [sp, #4]
 80828fe:	7889      	ldrb	r1, [r1, #2]
 8082900:	a806      	add	r0, sp, #24
 8082902:	9100      	str	r1, [sp, #0]
 8082904:	494e      	ldr	r1, [pc, #312]	; (8082a40 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1fc>)
 8082906:	f00e fecf 	bl	80916a8 <sprintf>
                mbedtls_ssl_set_hostname(&ssl, buffername);
 808290a:	a906      	add	r1, sp, #24
 808290c:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8082910:	f008 fa6c 	bl	808adec <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
 8082914:	4620      	mov	r0, r4
 8082916:	f7ff ff5f 	bl	80827d8 <_ZN4MQTT12handShakeTlsEv>
 808291a:	fab0 f080 	clz	r0, r0
 808291e:	0940      	lsrs	r0, r0, #5
            }
        }

        if (result) {
 8082920:	2800      	cmp	r0, #0
 8082922:	d1b7      	bne.n	8082894 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x50>
 8082924:	e080      	b.n	8082a28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>

            if (version == MQTT_V311) {
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 8082926:	ab06      	add	r3, sp, #24
 8082928:	cb03      	ldmia	r3!, {r0, r1}
 808292a:	f8c2 0005 	str.w	r0, [r2, #5]
 808292e:	f8c2 1009 	str.w	r1, [r2, #9]
 8082932:	781b      	ldrb	r3, [r3, #0]
 8082934:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 8082936:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 8082938:	f1b8 0f00 	cmp.w	r8, #0
 808293c:	d00a      	beq.n	8082954 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x110>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 808293e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8082942:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 8082946:	0152      	lsls	r2, r2, #5
 8082948:	f042 0206 	orr.w	r2, r2, #6
 808294c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8082950:	b2d2      	uxtb	r2, r2
 8082952:	e000      	b.n	8082956 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x112>
            } else {
                v = 0x02;
 8082954:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 8082956:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 808295a:	b909      	cbnz	r1, 8082960 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x11c>
              v = v&0xfd;
 808295c:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 8082960:	b12f      	cbz	r7, 808296e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>
                v = v|0x80;

                if(pass != NULL) {
 8082962:	b916      	cbnz	r6, 808296a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x126>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 8082964:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8082968:	e001      	b.n	808296e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 808296a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 808296e:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 8082970:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 8082972:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 8082974:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8082976:	69e1      	ldr	r1, [r4, #28]
 8082978:	1212      	asrs	r2, r2, #8
 808297a:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 808297c:	69e1      	ldr	r1, [r4, #28]
 808297e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8082980:	1c9a      	adds	r2, r3, #2
 8082982:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 8082984:	3303      	adds	r3, #3
 8082986:	69e2      	ldr	r2, [r4, #28]
 8082988:	4649      	mov	r1, r9
 808298a:	4620      	mov	r0, r4
 808298c:	f7ff fbc2 	bl	8082114 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 8082990:	f1b8 0f00 	cmp.w	r8, #0
 8082994:	d00b      	beq.n	80829ae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x16a>
                length = writeString(willTopic, buffer, length);
 8082996:	4603      	mov	r3, r0
 8082998:	69e2      	ldr	r2, [r4, #28]
 808299a:	4641      	mov	r1, r8
 808299c:	4620      	mov	r0, r4
 808299e:	f7ff fbb9 	bl	8082114 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80829a2:	69e2      	ldr	r2, [r4, #28]
 80829a4:	4603      	mov	r3, r0
 80829a6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80829a8:	4620      	mov	r0, r4
 80829aa:	f7ff fbb3 	bl	8082114 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80829ae:	b167      	cbz	r7, 80829ca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                length = writeString(user,buffer,length);
 80829b0:	4603      	mov	r3, r0
 80829b2:	69e2      	ldr	r2, [r4, #28]
 80829b4:	4639      	mov	r1, r7
 80829b6:	4620      	mov	r0, r4
 80829b8:	f7ff fbac 	bl	8082114 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80829bc:	b12e      	cbz	r6, 80829ca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                    length = writeString(pass,buffer,length);
 80829be:	4603      	mov	r3, r0
 80829c0:	69e2      	ldr	r2, [r4, #28]
 80829c2:	4631      	mov	r1, r6
 80829c4:	4620      	mov	r0, r4
 80829c6:	f7ff fba5 	bl	8082114 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80829ca:	1f43      	subs	r3, r0, #5
 80829cc:	b29b      	uxth	r3, r3
 80829ce:	69e2      	ldr	r2, [r4, #28]
 80829d0:	2110      	movs	r1, #16
 80829d2:	4620      	mov	r0, r4
 80829d4:	f7ff fbc5 	bl	8082162 <_ZN4MQTT5writeEhPht>
 80829d8:	f00e fc26 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80829dc:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80829e0:	6260      	str	r0, [r4, #36]	; 0x24
 80829e2:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!available()) {
 80829e4:	4620      	mov	r0, r4
 80829e6:	f7ff fd6b 	bl	80824c0 <_ZN4MQTT9availableEv>
 80829ea:	4606      	mov	r6, r0
 80829ec:	b958      	cbnz	r0, 8082a06 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c2>
 80829ee:	f00e fc1b 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80829f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80829f4:	1ac0      	subs	r0, r0, r3
 80829f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80829f8:	437b      	muls	r3, r7
 80829fa:	4298      	cmp	r0, r3
 80829fc:	d9f2      	bls.n	80829e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
 80829fe:	4620      	mov	r0, r4
 8082a00:	f7ff fbe1 	bl	80821c6 <_ZN4MQTT10disconnectEv>
 8082a04:	e00e      	b.n	8082a24 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e0>
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 8082a06:	f10d 010f 	add.w	r1, sp, #15
 8082a0a:	4620      	mov	r0, r4
 8082a0c:	f7ff fc33 	bl	8082276 <_ZN4MQTT10readPacketEPh>

            if (len == 4 && buffer[3] == 0) {
 8082a10:	2804      	cmp	r0, #4
 8082a12:	d109      	bne.n	8082a28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
 8082a14:	69e3      	ldr	r3, [r4, #28]
 8082a16:	78df      	ldrb	r7, [r3, #3]
 8082a18:	b937      	cbnz	r7, 8082a28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
 8082a1a:	f00e fc05 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
                lastInActivity = millis();
                pingOutstanding = false;
 8082a1e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4 && buffer[3] == 0) {
                lastInActivity = millis();
 8082a22:	62a0      	str	r0, [r4, #40]	; 0x28
            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
                    return false;
 8082a24:	4635      	mov	r5, r6
 8082a26:	e004      	b.n	8082a32 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
                pingOutstanding = false;
                debug_tls("MQTT connected.\n");
                return true;
            }
        }
        disconnect();
 8082a28:	4620      	mov	r0, r4
 8082a2a:	f7ff fbcc 	bl	80821c6 <_ZN4MQTT10disconnectEv>
 8082a2e:	e000      	b.n	8082a32 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
    }
    return false;
 8082a30:	2500      	movs	r5, #0
}
 8082a32:	4628      	mov	r0, r5
 8082a34:	b00b      	add	sp, #44	; 0x2c
 8082a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8082a3a:	bf00      	nop
 8082a3c:	08093f08 	.word	0x08093f08
 8082a40:	08093f1d 	.word	0x08093f1d

08082a44 <_ZN4MQTT7connectEPKc>:

void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}

bool MQTT::connect(const char *id) {
 8082a44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id,NULL,NULL,0,QOS0,0,0,true,MQTT_V311);
 8082a46:	2304      	movs	r3, #4
 8082a48:	9305      	str	r3, [sp, #20]
 8082a4a:	2301      	movs	r3, #1
 8082a4c:	9304      	str	r3, [sp, #16]
 8082a4e:	2300      	movs	r3, #0
 8082a50:	9303      	str	r3, [sp, #12]
 8082a52:	9302      	str	r3, [sp, #8]
 8082a54:	9301      	str	r3, [sp, #4]
 8082a56:	9300      	str	r3, [sp, #0]
 8082a58:	461a      	mov	r2, r3
 8082a5a:	f7ff fef3 	bl	8082844 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 8082a5e:	b007      	add	sp, #28
 8082a60:	f85d fb04 	ldr.w	pc, [sp], #4

08082a64 <_GLOBAL__sub_I__ZN4MQTTC2Ev>:
 8082a64:	f00e bb60 	b.w	8091128 <HAL_Pin_Map>

08082a68 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8082a68:	226c      	movs	r2, #108	; 0x6c
 8082a6a:	2100      	movs	r1, #0
 8082a6c:	f010 bd97 	b.w	809359e <memset>

08082a70 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 8082a70:	b138      	cbz	r0, 8082a82 <mbedtls_sha256_free+0x12>
 8082a72:	f100 026c 	add.w	r2, r0, #108	; 0x6c

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8082a76:	2300      	movs	r3, #0
 8082a78:	4290      	cmp	r0, r2
 8082a7a:	d002      	beq.n	8082a82 <mbedtls_sha256_free+0x12>
 8082a7c:	7003      	strb	r3, [r0, #0]
 8082a7e:	3001      	adds	r0, #1
 8082a80:	e7fa      	b.n	8082a78 <mbedtls_sha256_free+0x8>
 8082a82:	4770      	bx	lr

08082a84 <mbedtls_sha256_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8082a84:	b508      	push	{r3, lr}
    *dst = *src;
 8082a86:	226c      	movs	r2, #108	; 0x6c
 8082a88:	f010 fd63 	bl	8093552 <memcpy>
 8082a8c:	bd08      	pop	{r3, pc}
	...

08082a90 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 8082a90:	2300      	movs	r3, #0
 8082a92:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 8082a94:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 8082a96:	b9a1      	cbnz	r1, 8082ac2 <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8082a98:	4b18      	ldr	r3, [pc, #96]	; (8082afc <mbedtls_sha256_starts_ret+0x6c>)
 8082a9a:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 8082a9c:	4b18      	ldr	r3, [pc, #96]	; (8082b00 <mbedtls_sha256_starts_ret+0x70>)
 8082a9e:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 8082aa0:	4b18      	ldr	r3, [pc, #96]	; (8082b04 <mbedtls_sha256_starts_ret+0x74>)
 8082aa2:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 8082aa4:	4b18      	ldr	r3, [pc, #96]	; (8082b08 <mbedtls_sha256_starts_ret+0x78>)
 8082aa6:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 8082aa8:	4b18      	ldr	r3, [pc, #96]	; (8082b0c <mbedtls_sha256_starts_ret+0x7c>)
 8082aaa:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 8082aac:	4b18      	ldr	r3, [pc, #96]	; (8082b10 <mbedtls_sha256_starts_ret+0x80>)
 8082aae:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 8082ab0:	4b18      	ldr	r3, [pc, #96]	; (8082b14 <mbedtls_sha256_starts_ret+0x84>)
 8082ab2:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8082ab4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8082ab8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8082abc:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8082ac0:	e018      	b.n	8082af4 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8082ac2:	4b15      	ldr	r3, [pc, #84]	; (8082b18 <mbedtls_sha256_starts_ret+0x88>)
 8082ac4:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 8082ac6:	4b15      	ldr	r3, [pc, #84]	; (8082b1c <mbedtls_sha256_starts_ret+0x8c>)
 8082ac8:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 8082aca:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 8082ace:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8082ad2:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8082ad6:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 8082ad8:	4b11      	ldr	r3, [pc, #68]	; (8082b20 <mbedtls_sha256_starts_ret+0x90>)
 8082ada:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 8082adc:	4b11      	ldr	r3, [pc, #68]	; (8082b24 <mbedtls_sha256_starts_ret+0x94>)
 8082ade:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 8082ae0:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 8082ae4:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 8082ae8:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8082aec:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 8082aee:	4b0e      	ldr	r3, [pc, #56]	; (8082b28 <mbedtls_sha256_starts_ret+0x98>)
 8082af0:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8082af2:	4b0e      	ldr	r3, [pc, #56]	; (8082b2c <mbedtls_sha256_starts_ret+0x9c>)
 8082af4:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 8082af6:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 8082af8:	2000      	movs	r0, #0
 8082afa:	4770      	bx	lr
 8082afc:	6a09e667 	.word	0x6a09e667
 8082b00:	bb67ae85 	.word	0xbb67ae85
 8082b04:	3c6ef372 	.word	0x3c6ef372
 8082b08:	a54ff53a 	.word	0xa54ff53a
 8082b0c:	510e527f 	.word	0x510e527f
 8082b10:	9b05688c 	.word	0x9b05688c
 8082b14:	1f83d9ab 	.word	0x1f83d9ab
 8082b18:	c1059ed8 	.word	0xc1059ed8
 8082b1c:	367cd507 	.word	0x367cd507
 8082b20:	f70e5939 	.word	0xf70e5939
 8082b24:	ffc00b31 	.word	0xffc00b31
 8082b28:	64f98fa7 	.word	0x64f98fa7
 8082b2c:	befa4fa4 	.word	0xbefa4fa4

08082b30 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8082b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082b34:	1d03      	adds	r3, r0, #4
 8082b36:	b0cf      	sub	sp, #316	; 0x13c
 8082b38:	9305      	str	r3, [sp, #20]
 8082b3a:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 8082b3c:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 8082b3e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8082b42:	ac06      	add	r4, sp, #24
 8082b44:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
{
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 8082b48:	3301      	adds	r3, #1
 8082b4a:	2b08      	cmp	r3, #8
 8082b4c:	d1f7      	bne.n	8082b3e <mbedtls_internal_sha256_process+0xe>
 8082b4e:	4608      	mov	r0, r1
 8082b50:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 8082b52:	ac0e      	add	r4, sp, #56	; 0x38
 8082b54:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
 8082b58:	78c3      	ldrb	r3, [r0, #3]
 8082b5a:	3004      	adds	r0, #4
 8082b5c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8082b60:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8082b64:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8082b68:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 8082b6c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8082b70:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8082b74:	3201      	adds	r2, #1
 8082b76:	2a10      	cmp	r2, #16
 8082b78:	d1ec      	bne.n	8082b54 <mbedtls_internal_sha256_process+0x24>
 8082b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8082b7c:	4c9f      	ldr	r4, [pc, #636]	; (8082dfc <mbedtls_internal_sha256_process+0x2cc>)
 8082b7e:	9300      	str	r3, [sp, #0]
 8082b80:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8082b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8082b84:	9f08      	ldr	r7, [sp, #32]
 8082b86:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8082b8a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8082b8e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8082b92:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8082b96:	ad0f      	add	r5, sp, #60	; 0x3c
 8082b98:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8082b9c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8082ba0:	ea4f 22f8 	mov.w	r2, r8, ror #11
 8082ba4:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8082ba8:	ea86 0c0b 	eor.w	ip, r6, fp
 8082bac:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
 8082bb0:	4401      	add	r1, r0
 8082bb2:	ea82 6278 	eor.w	r2, r2, r8, ror #25
 8082bb6:	ea0c 0c08 	and.w	ip, ip, r8
 8082bba:	ea8c 0c06 	eor.w	ip, ip, r6
 8082bbe:	440a      	add	r2, r1
 8082bc0:	9900      	ldr	r1, [sp, #0]
 8082bc2:	4462      	add	r2, ip
 8082bc4:	ea4f 3079 	mov.w	r0, r9, ror #13
 8082bc8:	ea4e 0c09 	orr.w	ip, lr, r9
 8082bcc:	440a      	add	r2, r1
 8082bce:	ea0c 0c07 	and.w	ip, ip, r7
 8082bd2:	ea0e 0109 	and.w	r1, lr, r9
 8082bd6:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
 8082bda:	ea4c 0101 	orr.w	r1, ip, r1
 8082bde:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
 8082be2:	4408      	add	r0, r1
 8082be4:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8082be6:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8082be8:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8082bea:	6820      	ldr	r0, [r4, #0]
 8082bec:	ea8b 0c08 	eor.w	ip, fp, r8
 8082bf0:	4401      	add	r1, r0
 8082bf2:	ea0c 0c03 	and.w	ip, ip, r3
 8082bf6:	ea4f 20f3 	mov.w	r0, r3, ror #11
 8082bfa:	ea8c 0c0b 	eor.w	ip, ip, fp
 8082bfe:	440e      	add	r6, r1
 8082c00:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
 8082c04:	eb06 010c 	add.w	r1, r6, ip
 8082c08:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 8082c0c:	180e      	adds	r6, r1, r0
 8082c0e:	eb06 0c07 	add.w	ip, r6, r7
 8082c12:	ea42 0009 	orr.w	r0, r2, r9
 8082c16:	ea4f 3772 	mov.w	r7, r2, ror #13
 8082c1a:	ea02 0109 	and.w	r1, r2, r9
 8082c1e:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 8082c22:	ea00 000e 	and.w	r0, r0, lr
 8082c26:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 8082c2a:	4308      	orrs	r0, r1
 8082c2c:	4438      	add	r0, r7
 8082c2e:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8082c30:	6869      	ldr	r1, [r5, #4]
 8082c32:	6866      	ldr	r6, [r4, #4]
 8082c34:	ea83 0708 	eor.w	r7, r3, r8
 8082c38:	440e      	add	r6, r1
 8082c3a:	ea07 070c 	and.w	r7, r7, ip
 8082c3e:	ea4f 21fc 	mov.w	r1, ip, ror #11
 8082c42:	ea87 0708 	eor.w	r7, r7, r8
 8082c46:	44b3      	add	fp, r6
 8082c48:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
 8082c4c:	eb0b 0607 	add.w	r6, fp, r7
 8082c50:	ea81 617c 	eor.w	r1, r1, ip, ror #25
 8082c54:	eb06 0b01 	add.w	fp, r6, r1
 8082c58:	ea4f 3770 	mov.w	r7, r0, ror #13
 8082c5c:	ea42 0100 	orr.w	r1, r2, r0
 8082c60:	ea02 0600 	and.w	r6, r2, r0
 8082c64:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
 8082c68:	ea01 0109 	and.w	r1, r1, r9
 8082c6c:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
 8082c70:	4331      	orrs	r1, r6
 8082c72:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8082c74:	68ae      	ldr	r6, [r5, #8]
 8082c76:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8082c78:	4459      	add	r1, fp
 8082c7a:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8082c7c:	443e      	add	r6, r7
 8082c7e:	ea83 0b0c 	eor.w	fp, r3, ip
 8082c82:	44b0      	add	r8, r6
 8082c84:	ea0b 0b0e 	and.w	fp, fp, lr
 8082c88:	ea4f 26fe 	mov.w	r6, lr, ror #11
 8082c8c:	ea8b 0b03 	eor.w	fp, fp, r3
 8082c90:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 8082c94:	44d8      	add	r8, fp
 8082c96:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 8082c9a:	4446      	add	r6, r8
 8082c9c:	ea4f 3b71 	mov.w	fp, r1, ror #13
 8082ca0:	ea40 0801 	orr.w	r8, r0, r1
 8082ca4:	ea00 0701 	and.w	r7, r0, r1
 8082ca8:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
 8082cac:	ea08 0802 	and.w	r8, r8, r2
 8082cb0:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 8082cb4:	ea48 0807 	orr.w	r8, r8, r7
 8082cb8:	44d8      	add	r8, fp
 8082cba:	44b0      	add	r8, r6
 8082cbc:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8082cbe:	68e7      	ldr	r7, [r4, #12]
 8082cc0:	68ee      	ldr	r6, [r5, #12]
 8082cc2:	ea8c 0b0e 	eor.w	fp, ip, lr
 8082cc6:	4437      	add	r7, r6
 8082cc8:	ea0b 0b09 	and.w	fp, fp, r9
 8082ccc:	ea8b 0b0c 	eor.w	fp, fp, ip
 8082cd0:	443b      	add	r3, r7
 8082cd2:	eb03 070b 	add.w	r7, r3, fp
 8082cd6:	ea4f 23f9 	mov.w	r3, r9, ror #11
 8082cda:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
 8082cde:	ea83 6379 	eor.w	r3, r3, r9, ror #25
 8082ce2:	18fe      	adds	r6, r7, r3
 8082ce4:	1993      	adds	r3, r2, r6
 8082ce6:	9300      	str	r3, [sp, #0]
 8082ce8:	ea4f 3778 	mov.w	r7, r8, ror #13
 8082cec:	ea41 0308 	orr.w	r3, r1, r8
 8082cf0:	ea01 0208 	and.w	r2, r1, r8
 8082cf4:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
 8082cf8:	4003      	ands	r3, r0
 8082cfa:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
 8082cfe:	4313      	orrs	r3, r2
 8082d00:	443b      	add	r3, r7
 8082d02:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8082d04:	692a      	ldr	r2, [r5, #16]
 8082d06:	6926      	ldr	r6, [r4, #16]
 8082d08:	ea4f 3b73 	mov.w	fp, r3, ror #13
 8082d0c:	4432      	add	r2, r6
 8082d0e:	4494      	add	ip, r2
 8082d10:	9a00      	ldr	r2, [sp, #0]
 8082d12:	ea8e 0609 	eor.w	r6, lr, r9
 8082d16:	4016      	ands	r6, r2
 8082d18:	ea4f 27f2 	mov.w	r7, r2, ror #11
 8082d1c:	ea86 060e 	eor.w	r6, r6, lr
 8082d20:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 8082d24:	44b4      	add	ip, r6
 8082d26:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 8082d2a:	eb0c 0207 	add.w	r2, ip, r7
 8082d2e:	ea48 0703 	orr.w	r7, r8, r3
 8082d32:	1886      	adds	r6, r0, r2
 8082d34:	400f      	ands	r7, r1
 8082d36:	ea08 0003 	and.w	r0, r8, r3
 8082d3a:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
 8082d3e:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 8082d42:	4307      	orrs	r7, r0
 8082d44:	445f      	add	r7, fp
 8082d46:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8082d48:	6960      	ldr	r0, [r4, #20]
 8082d4a:	696a      	ldr	r2, [r5, #20]
 8082d4c:	3420      	adds	r4, #32
 8082d4e:	4410      	add	r0, r2
 8082d50:	9a00      	ldr	r2, [sp, #0]
 8082d52:	4486      	add	lr, r0
 8082d54:	ea89 0c02 	eor.w	ip, r9, r2
 8082d58:	ea0c 0c06 	and.w	ip, ip, r6
 8082d5c:	ea8c 0c09 	eor.w	ip, ip, r9
 8082d60:	eb0e 000c 	add.w	r0, lr, ip
 8082d64:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 8082d68:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 8082d6c:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 8082d70:	eb00 020e 	add.w	r2, r0, lr
 8082d74:	ea4f 3077 	mov.w	r0, r7, ror #13
 8082d78:	ea43 0e07 	orr.w	lr, r3, r7
 8082d7c:	eb01 0b02 	add.w	fp, r1, r2
 8082d80:	ea0e 0e08 	and.w	lr, lr, r8
 8082d84:	ea03 0107 	and.w	r1, r3, r7
 8082d88:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 8082d8c:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 8082d90:	ea4e 0e01 	orr.w	lr, lr, r1
 8082d94:	4486      	add	lr, r0
 8082d96:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8082d98:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8082d9c:	69aa      	ldr	r2, [r5, #24]
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 8082d9e:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8082da0:	4411      	add	r1, r2
 8082da2:	9a00      	ldr	r2, [sp, #0]
 8082da4:	4489      	add	r9, r1
 8082da6:	ea82 0006 	eor.w	r0, r2, r6
 8082daa:	ea00 000b 	and.w	r0, r0, fp
 8082dae:	ea80 0002 	eor.w	r0, r0, r2
 8082db2:	eb09 0100 	add.w	r1, r9, r0
 8082db6:	ea4f 29fb 	mov.w	r9, fp, ror #11
 8082dba:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
 8082dbe:	ea89 697b 	eor.w	r9, r9, fp, ror #25
 8082dc2:	eb01 0209 	add.w	r2, r1, r9
 8082dc6:	ea4f 307e 	mov.w	r0, lr, ror #13
 8082dca:	ea47 090e 	orr.w	r9, r7, lr
 8082dce:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8082dd2:	ea09 0903 	and.w	r9, r9, r3
 8082dd6:	ea07 010e 	and.w	r1, r7, lr
 8082dda:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 8082dde:	ea49 0901 	orr.w	r9, r9, r1
 8082de2:	4481      	add	r9, r0
 8082de4:	4490      	add	r8, r2
 8082de6:	4491      	add	r9, r2
 8082de8:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 8082dec:	f47f aed6 	bne.w	8082b9c <mbedtls_internal_sha256_process+0x6c>
 8082df0:	2200      	movs	r2, #0
 8082df2:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8082e00 <mbedtls_internal_sha256_process+0x2d0>
 8082df6:	ac0e      	add	r4, sp, #56	; 0x38
 8082df8:	9204      	str	r2, [sp, #16]
 8082dfa:	e003      	b.n	8082e04 <mbedtls_internal_sha256_process+0x2d4>
 8082dfc:	08093f30 	.word	0x08093f30
 8082e00:	08093f2c 	.word	0x08093f2c
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8082e04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8082e06:	6860      	ldr	r0, [r4, #4]
 8082e08:	ea4f 45f2 	mov.w	r5, r2, ror #19
 8082e0c:	ea85 4572 	eor.w	r5, r5, r2, ror #17
 8082e10:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
 8082e14:	9a04      	ldr	r2, [sp, #16]
 8082e16:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8082e1a:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8082e1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8082e20:	ea4f 4cb0 	mov.w	ip, r0, ror #18
 8082e24:	440a      	add	r2, r1
 8082e26:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
 8082e2a:	ea4f 21f8 	mov.w	r1, r8, ror #11
 8082e2e:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 8082e32:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
 8082e36:	4415      	add	r5, r2
 8082e38:	eb05 020c 	add.w	r2, r5, ip
 8082e3c:	ea81 6578 	eor.w	r5, r1, r8, ror #25
 8082e40:	ea86 010b 	eor.w	r1, r6, fp
 8082e44:	ea01 0108 	and.w	r1, r1, r8
 8082e48:	9203      	str	r2, [sp, #12]
 8082e4a:	ea81 0206 	eor.w	r2, r1, r6
 8082e4e:	18a9      	adds	r1, r5, r2
 8082e50:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 8082e54:	ea4e 0509 	orr.w	r5, lr, r9
 8082e58:	440a      	add	r2, r1
 8082e5a:	9903      	ldr	r1, [sp, #12]
 8082e5c:	403d      	ands	r5, r7
 8082e5e:	6421      	str	r1, [r4, #64]	; 0x40
 8082e60:	440a      	add	r2, r1
 8082e62:	9900      	ldr	r1, [sp, #0]
 8082e64:	f10a 0a20 	add.w	sl, sl, #32
 8082e68:	440a      	add	r2, r1
 8082e6a:	18d3      	adds	r3, r2, r3
 8082e6c:	ea4f 3179 	mov.w	r1, r9, ror #13
 8082e70:	9300      	str	r3, [sp, #0]
 8082e72:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 8082e76:	ea0e 0309 	and.w	r3, lr, r9
 8082e7a:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 8082e7e:	432b      	orrs	r3, r5
 8082e80:	440b      	add	r3, r1
 8082e82:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8082e84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8082e86:	68a5      	ldr	r5, [r4, #8]
 8082e88:	ea4f 41f3 	mov.w	r1, r3, ror #19
 8082e8c:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 8082e90:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 8082e94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8082e96:	3420      	adds	r4, #32
 8082e98:	4403      	add	r3, r0
 8082e9a:	4419      	add	r1, r3
 8082e9c:	ea4f 43b5 	mov.w	r3, r5, ror #18
 8082ea0:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 8082ea4:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
 8082ea8:	eb01 030c 	add.w	r3, r1, ip
 8082eac:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8082eb0:	9900      	ldr	r1, [sp, #0]
 8082eb2:	ea8b 0c08 	eor.w	ip, fp, r8
 8082eb6:	4430      	add	r0, r6
 8082eb8:	ea0c 0c01 	and.w	ip, ip, r1
 8082ebc:	ea8c 0c0b 	eor.w	ip, ip, fp
 8082ec0:	18c1      	adds	r1, r0, r3
 8082ec2:	448c      	add	ip, r1
 8082ec4:	9900      	ldr	r1, [sp, #0]
 8082ec6:	6263      	str	r3, [r4, #36]	; 0x24
 8082ec8:	ea4f 20f1 	mov.w	r0, r1, ror #11
 8082ecc:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 8082ed0:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 8082ed4:	eb00 010c 	add.w	r1, r0, ip
 8082ed8:	19c8      	adds	r0, r1, r7
 8082eda:	9001      	str	r0, [sp, #4]
 8082edc:	ea4f 3c72 	mov.w	ip, r2, ror #13
 8082ee0:	ea42 0009 	orr.w	r0, r2, r9
 8082ee4:	ea02 0709 	and.w	r7, r2, r9
 8082ee8:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 8082eec:	ea00 000e 	and.w	r0, r0, lr
 8082ef0:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 8082ef4:	4338      	orrs	r0, r7
 8082ef6:	4460      	add	r0, ip
 8082ef8:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8082efa:	9903      	ldr	r1, [sp, #12]
 8082efc:	f854 7c14 	ldr.w	r7, [r4, #-20]
 8082f00:	ea4f 46f1 	mov.w	r6, r1, ror #19
 8082f04:	ea86 4671 	eor.w	r6, r6, r1, ror #17
 8082f08:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
 8082f0c:	68e1      	ldr	r1, [r4, #12]
 8082f0e:	ea4f 4cb7 	mov.w	ip, r7, ror #18
 8082f12:	4429      	add	r1, r5
 8082f14:	440e      	add	r6, r1
 8082f16:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
 8082f1a:	9900      	ldr	r1, [sp, #0]
 8082f1c:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
 8082f20:	4466      	add	r6, ip
 8082f22:	ea81 0c08 	eor.w	ip, r1, r8
 8082f26:	9901      	ldr	r1, [sp, #4]
 8082f28:	62a6      	str	r6, [r4, #40]	; 0x28
 8082f2a:	ea0c 0c01 	and.w	ip, ip, r1
 8082f2e:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 8082f32:	ea8c 0c08 	eor.w	ip, ip, r8
 8082f36:	4459      	add	r1, fp
 8082f38:	198d      	adds	r5, r1, r6
 8082f3a:	9901      	ldr	r1, [sp, #4]
 8082f3c:	44ac      	add	ip, r5
 8082f3e:	9d01      	ldr	r5, [sp, #4]
 8082f40:	ea4f 21f1 	mov.w	r1, r1, ror #11
 8082f44:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
 8082f48:	ea81 6175 	eor.w	r1, r1, r5, ror #25
 8082f4c:	eb01 050c 	add.w	r5, r1, ip
 8082f50:	ea42 0100 	orr.w	r1, r2, r0
 8082f54:	ea4f 3c70 	mov.w	ip, r0, ror #13
 8082f58:	eb05 0b0e 	add.w	fp, r5, lr
 8082f5c:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
 8082f60:	ea02 0e00 	and.w	lr, r2, r0
 8082f64:	ea01 0109 	and.w	r1, r1, r9
 8082f68:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
 8082f6c:	ea41 010e 	orr.w	r1, r1, lr
 8082f70:	4461      	add	r1, ip
 8082f72:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8082f74:	ea4f 45f3 	mov.w	r5, r3, ror #19
 8082f78:	ea85 4573 	eor.w	r5, r5, r3, ror #17
 8082f7c:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
 8082f80:	6925      	ldr	r5, [r4, #16]
 8082f82:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8082f86:	442f      	add	r7, r5
 8082f88:	443b      	add	r3, r7
 8082f8a:	ea4f 47bc 	mov.w	r7, ip, ror #18
 8082f8e:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
 8082f92:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
 8082f96:	eb03 070e 	add.w	r7, r3, lr
 8082f9a:	e89d 0028 	ldmia.w	sp, {r3, r5}
 8082f9e:	405d      	eors	r5, r3
 8082fa0:	ea05 050b 	and.w	r5, r5, fp
 8082fa4:	405d      	eors	r5, r3
 8082fa6:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8082faa:	ea4f 3e71 	mov.w	lr, r1, ror #13
 8082fae:	4498      	add	r8, r3
 8082fb0:	44b8      	add	r8, r7
 8082fb2:	4445      	add	r5, r8
 8082fb4:	ea4f 28fb 	mov.w	r8, fp, ror #11
 8082fb8:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
 8082fbc:	ea88 687b 	eor.w	r8, r8, fp, ror #25
 8082fc0:	eb08 0305 	add.w	r3, r8, r5
 8082fc4:	eb03 0509 	add.w	r5, r3, r9
 8082fc8:	ea40 0801 	orr.w	r8, r0, r1
 8082fcc:	9502      	str	r5, [sp, #8]
 8082fce:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 8082fd2:	ea00 0501 	and.w	r5, r0, r1
 8082fd6:	ea08 0802 	and.w	r8, r8, r2
 8082fda:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 8082fde:	ea48 0805 	orr.w	r8, r8, r5
 8082fe2:	44f0      	add	r8, lr
 8082fe4:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082fe6:	ea4f 4ef6 	mov.w	lr, r6, ror #19
 8082fea:	6963      	ldr	r3, [r4, #20]
 8082fec:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
 8082ff0:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 8082ff4:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
 8082ff8:	eb0c 0e03 	add.w	lr, ip, r3
 8082ffc:	9b01      	ldr	r3, [sp, #4]
 8082ffe:	4476      	add	r6, lr
 8083000:	ea83 0c0b 	eor.w	ip, r3, fp
 8083004:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 8083008:	9b02      	ldr	r3, [sp, #8]
 808300a:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 808300e:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
 8083012:	ea0c 0c03 	and.w	ip, ip, r3
 8083016:	9b01      	ldr	r3, [sp, #4]
 8083018:	eb06 0e09 	add.w	lr, r6, r9
 808301c:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 8083020:	ea8c 0c03 	eor.w	ip, ip, r3
 8083024:	9b00      	ldr	r3, [sp, #0]
 8083026:	4476      	add	r6, lr
 8083028:	441e      	add	r6, r3
 808302a:	9b02      	ldr	r3, [sp, #8]
 808302c:	44b4      	add	ip, r6
 808302e:	9e02      	ldr	r6, [sp, #8]
 8083030:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8083034:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
 8083038:	ea83 6376 	eor.w	r3, r3, r6, ror #25
 808303c:	eb03 060c 	add.w	r6, r3, ip
 8083040:	1993      	adds	r3, r2, r6
 8083042:	9300      	str	r3, [sp, #0]
 8083044:	ea41 0308 	orr.w	r3, r1, r8
 8083048:	ea01 0208 	and.w	r2, r1, r8
 808304c:	4003      	ands	r3, r0
 808304e:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8083050:	ea4f 42f7 	mov.w	r2, r7, ror #19
 8083054:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8083058:	62e7      	str	r7, [r4, #44]	; 0x2c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 808305a:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 808305e:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
 8083062:	69a2      	ldr	r2, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8083064:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8083068:	f854 9c08 	ldr.w	r9, [r4, #-8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 808306c:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8083070:	4415      	add	r5, r2
 8083072:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8083074:	4463      	add	r3, ip
 8083076:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8083078:	442f      	add	r7, r5
 808307a:	ea8b 0602 	eor.w	r6, fp, r2
 808307e:	ea4f 45b9 	mov.w	r5, r9, ror #18
 8083082:	9a00      	ldr	r2, [sp, #0]
 8083084:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
 8083088:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
 808308c:	4016      	ands	r6, r2
 808308e:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 8083092:	443d      	add	r5, r7
 8083094:	9f01      	ldr	r7, [sp, #4]
 8083096:	442a      	add	r2, r5
 8083098:	443a      	add	r2, r7
 808309a:	ea86 060b 	eor.w	r6, r6, fp
 808309e:	4416      	add	r6, r2
 80830a0:	9a00      	ldr	r2, [sp, #0]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80830a2:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80830a6:	ea4f 27f2 	mov.w	r7, r2, ror #11
 80830aa:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80830ae:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80830b2:	19ba      	adds	r2, r7, r6
 80830b4:	1886      	adds	r6, r0, r2
 80830b6:	ea4f 3073 	mov.w	r0, r3, ror #13
 80830ba:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
 80830be:	ea48 0703 	orr.w	r7, r8, r3
 80830c2:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
 80830c6:	400f      	ands	r7, r1
 80830c8:	ea08 0003 	and.w	r0, r8, r3
 80830cc:	4307      	orrs	r7, r0
 80830ce:	4467      	add	r7, ip
 80830d0:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80830d2:	ea4f 42fe 	mov.w	r2, lr, ror #19
 80830d6:	ea82 427e 	eor.w	r2, r2, lr, ror #17
 80830da:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
 80830de:	69e2      	ldr	r2, [r4, #28]
 80830e0:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80830e4:	4491      	add	r9, r2
 80830e6:	eb0e 0209 	add.w	r2, lr, r9
 80830ea:	ea4f 49b0 	mov.w	r9, r0, ror #18
 80830ee:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
 80830f2:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
 80830f6:	4491      	add	r9, r2
 80830f8:	9a02      	ldr	r2, [sp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80830fa:	6365      	str	r5, [r4, #52]	; 0x34
 80830fc:	4696      	mov	lr, r2
 80830fe:	9a00      	ldr	r2, [sp, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8083100:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 8083104:	ea8e 0c02 	eor.w	ip, lr, r2
 8083108:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
 808310c:	ea0c 0c06 	and.w	ip, ip, r6
 8083110:	ea8c 0c0e 	eor.w	ip, ip, lr
 8083114:	444a      	add	r2, r9
 8083116:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 808311a:	445a      	add	r2, fp
 808311c:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 8083120:	4462      	add	r2, ip
 8083122:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 8083126:	4472      	add	r2, lr
 8083128:	ea4f 3c77 	mov.w	ip, r7, ror #13
 808312c:	ea43 0e07 	orr.w	lr, r3, r7
 8083130:	eb01 0b02 	add.w	fp, r1, r2
 8083134:	ea0e 0e08 	and.w	lr, lr, r8
 8083138:	ea03 0107 	and.w	r1, r3, r7
 808313c:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8083140:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
 8083144:	ea4e 0e01 	orr.w	lr, lr, r1
 8083148:	44e6      	add	lr, ip
 808314a:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 808314c:	ea4f 42f5 	mov.w	r2, r5, ror #19
 8083150:	6821      	ldr	r1, [r4, #0]
 8083152:	ea82 4275 	eor.w	r2, r2, r5, ror #17
 8083156:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
 808315a:	9a03      	ldr	r2, [sp, #12]
 808315c:	ea4f 4cb1 	mov.w	ip, r1, ror #18
 8083160:	4410      	add	r0, r2
 8083162:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
 8083166:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
 808316a:	4405      	add	r5, r0
 808316c:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
 8083170:	440d      	add	r5, r1
 8083172:	9902      	ldr	r1, [sp, #8]
 8083174:	442a      	add	r2, r5
 8083176:	eb02 0901 	add.w	r9, r2, r1
 808317a:	9a00      	ldr	r2, [sp, #0]
 808317c:	ea4f 307e 	mov.w	r0, lr, ror #13
 8083180:	ea82 0106 	eor.w	r1, r2, r6
 8083184:	ea01 010b 	and.w	r1, r1, fp
 8083188:	4051      	eors	r1, r2
 808318a:	ea4f 22fb 	mov.w	r2, fp, ror #11
 808318e:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 8083192:	4489      	add	r9, r1
 8083194:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 8083198:	444a      	add	r2, r9
 808319a:	ea47 090e 	orr.w	r9, r7, lr
 808319e:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 80831a2:	ea09 0903 	and.w	r9, r9, r3
 80831a6:	ea07 010e 	and.w	r1, r7, lr
 80831aa:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 80831ae:	ea49 0901 	orr.w	r9, r9, r1
 80831b2:	4481      	add	r9, r0
 80831b4:	4490      	add	r8, r2
 80831b6:	4491      	add	r9, r2
 80831b8:	9a04      	ldr	r2, [sp, #16]
 80831ba:	63e5      	str	r5, [r4, #60]	; 0x3c
 80831bc:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 80831be:	2a30      	cmp	r2, #48	; 0x30
 80831c0:	9204      	str	r2, [sp, #16]
 80831c2:	f47f ae1f 	bne.w	8082e04 <mbedtls_internal_sha256_process+0x2d4>
 80831c6:	9a00      	ldr	r2, [sp, #0]
 80831c8:	9309      	str	r3, [sp, #36]	; 0x24
 80831ca:	920d      	str	r2, [sp, #52]	; 0x34
 80831cc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80831d0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80831d4:	960c      	str	r6, [sp, #48]	; 0x30
 80831d6:	f8cd 9018 	str.w	r9, [sp, #24]
 80831da:	f8cd e01c 	str.w	lr, [sp, #28]
 80831de:	9708      	str	r7, [sp, #32]
 80831e0:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 80831e2:	9a05      	ldr	r2, [sp, #20]
 80831e4:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80831e8:	9205      	str	r2, [sp, #20]
 80831ea:	aa06      	add	r2, sp, #24
 80831ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80831f0:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 80831f2:	440a      	add	r2, r1
 80831f4:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80831f6:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 80831f8:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80831fa:	d1f2      	bne.n	80831e2 <mbedtls_internal_sha256_process+0x6b2>
        ctx->state[i] += A[i];

    return( 0 );
}
 80831fc:	2000      	movs	r0, #0
 80831fe:	b04f      	add	sp, #316	; 0x13c
 8083200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08083204 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8083204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083208:	4604      	mov	r4, r0
 808320a:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 808320c:	4615      	mov	r5, r2
 808320e:	b382      	cbz	r2, 8083272 <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8083210:	6803      	ldr	r3, [r0, #0]
 8083212:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8083216:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 8083218:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 808321a:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 808321c:	bf82      	ittt	hi
 808321e:	6863      	ldrhi	r3, [r4, #4]
 8083220:	3301      	addhi	r3, #1
 8083222:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 8083224:	b180      	cbz	r0, 8083248 <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8083226:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 808322a:	42ba      	cmp	r2, r7
 808322c:	d31b      	bcc.n	8083266 <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 808322e:	f104 0828 	add.w	r8, r4, #40	; 0x28
 8083232:	463a      	mov	r2, r7
 8083234:	4440      	add	r0, r8
 8083236:	f010 f98c 	bl	8093552 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 808323a:	4641      	mov	r1, r8
 808323c:	4620      	mov	r0, r4
 808323e:	f7ff fc77 	bl	8082b30 <mbedtls_internal_sha256_process>
 8083242:	b9b8      	cbnz	r0, 8083274 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
 8083244:	443e      	add	r6, r7
        ilen  -= fill;
 8083246:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8083248:	462f      	mov	r7, r5
 808324a:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 808324c:	2f3f      	cmp	r7, #63	; 0x3f
 808324e:	4431      	add	r1, r6
 8083250:	d905      	bls.n	808325e <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8083252:	4620      	mov	r0, r4
 8083254:	f7ff fc6c 	bl	8082b30 <mbedtls_internal_sha256_process>
 8083258:	b960      	cbnz	r0, 8083274 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 808325a:	3f40      	subs	r7, #64	; 0x40
 808325c:	e7f5      	b.n	808324a <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
 808325e:	b147      	cbz	r7, 8083272 <mbedtls_sha256_update_ret+0x6e>
 8083260:	463d      	mov	r5, r7
 8083262:	460e      	mov	r6, r1
 8083264:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8083266:	3428      	adds	r4, #40	; 0x28
 8083268:	462a      	mov	r2, r5
 808326a:	4631      	mov	r1, r6
 808326c:	4420      	add	r0, r4
 808326e:	f010 f970 	bl	8093552 <memcpy>

    return( 0 );
 8083272:	2000      	movs	r0, #0
}
 8083274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08083278 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8083278:	b570      	push	{r4, r5, r6, lr}
 808327a:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 808327c:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 808327e:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8083280:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8083284:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 8083286:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8083288:	4423      	add	r3, r4
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 808328a:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 808328c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8083290:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
 8083294:	d804      	bhi.n	80832a0 <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8083296:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 808329a:	2100      	movs	r1, #0
 808329c:	4430      	add	r0, r6
 808329e:	e00e      	b.n	80832be <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 80832a0:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80832a4:	2100      	movs	r1, #0
 80832a6:	4430      	add	r0, r6
 80832a8:	f010 f979 	bl	809359e <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80832ac:	4631      	mov	r1, r6
 80832ae:	4620      	mov	r0, r4
 80832b0:	f7ff fc3e 	bl	8082b30 <mbedtls_internal_sha256_process>
 80832b4:	2800      	cmp	r0, #0
 80832b6:	d175      	bne.n	80833a4 <mbedtls_sha256_finish_ret+0x12c>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 80832b8:	4601      	mov	r1, r0
 80832ba:	4630      	mov	r0, r6
 80832bc:	2238      	movs	r2, #56	; 0x38
 80832be:	f010 f96e 	bl	809359e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80832c2:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 80832c4:	6861      	ldr	r1, [r4, #4]
 80832c6:	0f5a      	lsrs	r2, r3, #29
 80832c8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80832cc:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80832ce:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80832d0:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 80832d4:	0c11      	lsrs	r1, r2, #16
 80832d6:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 80832da:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 80832de:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80832e0:	0e1a      	lsrs	r2, r3, #24
 80832e2:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 80832e6:	0c1a      	lsrs	r2, r3, #16
 80832e8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80832ec:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80832ee:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80832f2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80832f6:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80832fa:	4631      	mov	r1, r6
 80832fc:	4620      	mov	r0, r4
 80832fe:	f7ff fc17 	bl	8082b30 <mbedtls_internal_sha256_process>
 8083302:	4603      	mov	r3, r0
 8083304:	2800      	cmp	r0, #0
 8083306:	d14c      	bne.n	80833a2 <mbedtls_sha256_finish_ret+0x12a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8083308:	7ae2      	ldrb	r2, [r4, #11]
 808330a:	702a      	strb	r2, [r5, #0]
 808330c:	8962      	ldrh	r2, [r4, #10]
 808330e:	706a      	strb	r2, [r5, #1]
 8083310:	68a2      	ldr	r2, [r4, #8]
 8083312:	0a12      	lsrs	r2, r2, #8
 8083314:	70aa      	strb	r2, [r5, #2]
 8083316:	68a2      	ldr	r2, [r4, #8]
 8083318:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 808331a:	7be2      	ldrb	r2, [r4, #15]
 808331c:	712a      	strb	r2, [r5, #4]
 808331e:	89e2      	ldrh	r2, [r4, #14]
 8083320:	716a      	strb	r2, [r5, #5]
 8083322:	68e2      	ldr	r2, [r4, #12]
 8083324:	0a12      	lsrs	r2, r2, #8
 8083326:	71aa      	strb	r2, [r5, #6]
 8083328:	68e2      	ldr	r2, [r4, #12]
 808332a:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 808332c:	7ce2      	ldrb	r2, [r4, #19]
 808332e:	722a      	strb	r2, [r5, #8]
 8083330:	8a62      	ldrh	r2, [r4, #18]
 8083332:	726a      	strb	r2, [r5, #9]
 8083334:	6922      	ldr	r2, [r4, #16]
 8083336:	0a12      	lsrs	r2, r2, #8
 8083338:	72aa      	strb	r2, [r5, #10]
 808333a:	6922      	ldr	r2, [r4, #16]
 808333c:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 808333e:	7de2      	ldrb	r2, [r4, #23]
 8083340:	732a      	strb	r2, [r5, #12]
 8083342:	8ae2      	ldrh	r2, [r4, #22]
 8083344:	736a      	strb	r2, [r5, #13]
 8083346:	6962      	ldr	r2, [r4, #20]
 8083348:	0a12      	lsrs	r2, r2, #8
 808334a:	73aa      	strb	r2, [r5, #14]
 808334c:	6962      	ldr	r2, [r4, #20]
 808334e:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8083350:	7ee2      	ldrb	r2, [r4, #27]
 8083352:	742a      	strb	r2, [r5, #16]
 8083354:	8b62      	ldrh	r2, [r4, #26]
 8083356:	746a      	strb	r2, [r5, #17]
 8083358:	69a2      	ldr	r2, [r4, #24]
 808335a:	0a12      	lsrs	r2, r2, #8
 808335c:	74aa      	strb	r2, [r5, #18]
 808335e:	69a2      	ldr	r2, [r4, #24]
 8083360:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8083362:	7fe2      	ldrb	r2, [r4, #31]
 8083364:	752a      	strb	r2, [r5, #20]
 8083366:	8be2      	ldrh	r2, [r4, #30]
 8083368:	756a      	strb	r2, [r5, #21]
 808336a:	69e2      	ldr	r2, [r4, #28]
 808336c:	0a12      	lsrs	r2, r2, #8
 808336e:	75aa      	strb	r2, [r5, #22]
 8083370:	69e2      	ldr	r2, [r4, #28]
 8083372:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8083374:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8083378:	762a      	strb	r2, [r5, #24]
 808337a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 808337c:	766a      	strb	r2, [r5, #25]
 808337e:	6a22      	ldr	r2, [r4, #32]
 8083380:	0a12      	lsrs	r2, r2, #8
 8083382:	76aa      	strb	r2, [r5, #26]
 8083384:	6a22      	ldr	r2, [r4, #32]
 8083386:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
 8083388:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 808338a:	b950      	cbnz	r0, 80833a2 <mbedtls_sha256_finish_ret+0x12a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 808338c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8083390:	772b      	strb	r3, [r5, #28]
 8083392:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8083394:	776b      	strb	r3, [r5, #29]
 8083396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8083398:	0a1b      	lsrs	r3, r3, #8
 808339a:	77ab      	strb	r3, [r5, #30]
 808339c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808339e:	77eb      	strb	r3, [r5, #31]
 80833a0:	bd70      	pop	{r4, r5, r6, pc}

    return( 0 );
 80833a2:	4618      	mov	r0, r3
}
 80833a4:	bd70      	pop	{r4, r5, r6, pc}

080833a6 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 80833a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80833a8:	461f      	mov	r7, r3
 80833aa:	b09d      	sub	sp, #116	; 0x74
 80833ac:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 80833ae:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 80833b0:	460e      	mov	r6, r1
 80833b2:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 80833b4:	f7ff fb58 	bl	8082a68 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 80833b8:	4639      	mov	r1, r7
 80833ba:	a801      	add	r0, sp, #4
 80833bc:	f7ff fb68 	bl	8082a90 <mbedtls_sha256_starts_ret>
 80833c0:	4601      	mov	r1, r0
 80833c2:	b958      	cbnz	r0, 80833dc <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 80833c4:	4629      	mov	r1, r5
 80833c6:	4632      	mov	r2, r6
 80833c8:	a801      	add	r0, sp, #4
 80833ca:	f7ff ff1b 	bl	8083204 <mbedtls_sha256_update_ret>
 80833ce:	4601      	mov	r1, r0
 80833d0:	b920      	cbnz	r0, 80833dc <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 80833d2:	4621      	mov	r1, r4
 80833d4:	a801      	add	r0, sp, #4
 80833d6:	f7ff ff4f 	bl	8083278 <mbedtls_sha256_finish_ret>
 80833da:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 80833dc:	a801      	add	r0, sp, #4
 80833de:	f7ff fb47 	bl	8082a70 <mbedtls_sha256_free>

    return( ret );
}
 80833e2:	4608      	mov	r0, r1
 80833e4:	b01d      	add	sp, #116	; 0x74
 80833e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080833e8 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 80833e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80833ec:	4604      	mov	r4, r0
 80833ee:	b0a5      	sub	sp, #148	; 0x94
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 80833f0:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 80833f2:	9301      	str	r3, [sp, #4]
 80833f4:	460f      	mov	r7, r1
 80833f6:	4693      	mov	fp, r2
 80833f8:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 80833fa:	f004 ffd9 	bl	80883b0 <mbedtls_md_get_size>
 80833fe:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
 8083400:	2300      	movs	r3, #0
 8083402:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
 8083404:	2301      	movs	r3, #1
 8083406:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 808340a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
 808340e:	2e00      	cmp	r6, #0
 8083410:	d05c      	beq.n	80834cc <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 8083412:	465a      	mov	r2, fp
 8083414:	4639      	mov	r1, r7
 8083416:	4620      	mov	r0, r4
 8083418:	f004 ff08 	bl	808822c <mbedtls_md_hmac_starts>
 808341c:	2800      	cmp	r0, #0
 808341e:	d156      	bne.n	80834ce <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
 8083420:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8083422:	9901      	ldr	r1, [sp, #4]
 8083424:	4620      	mov	r0, r4
 8083426:	f004 ff61 	bl	80882ec <mbedtls_md_hmac_update>
 808342a:	2800      	cmp	r0, #0
 808342c:	d14f      	bne.n	80834ce <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
 808342e:	2204      	movs	r2, #4
 8083430:	a903      	add	r1, sp, #12
 8083432:	4620      	mov	r0, r4
 8083434:	f004 ff5a 	bl	80882ec <mbedtls_md_hmac_update>
 8083438:	2800      	cmp	r0, #0
 808343a:	d148      	bne.n	80834ce <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 808343c:	4641      	mov	r1, r8
 808343e:	4620      	mov	r0, r4
 8083440:	f004 ff64 	bl	808830c <mbedtls_md_hmac_finish>
 8083444:	2800      	cmp	r0, #0
 8083446:	d142      	bne.n	80834ce <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
 8083448:	ad04      	add	r5, sp, #16
 808344a:	464a      	mov	r2, r9
 808344c:	4641      	mov	r1, r8
 808344e:	4628      	mov	r0, r5
 8083450:	f010 f87f 	bl	8093552 <memcpy>

        for( i = 1; i < iteration_count; i++ )
 8083454:	f04f 0a01 	mov.w	sl, #1
 8083458:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 808345a:	459a      	cmp	sl, r3
 808345c:	d21d      	bcs.n	808349a <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 808345e:	465a      	mov	r2, fp
 8083460:	4639      	mov	r1, r7
 8083462:	4620      	mov	r0, r4
 8083464:	f004 fee2 	bl	808822c <mbedtls_md_hmac_starts>
 8083468:	bb88      	cbnz	r0, 80834ce <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
 808346a:	464a      	mov	r2, r9
 808346c:	4629      	mov	r1, r5
 808346e:	4620      	mov	r0, r4
 8083470:	f004 ff3c 	bl	80882ec <mbedtls_md_hmac_update>
 8083474:	bb58      	cbnz	r0, 80834ce <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
 8083476:	4629      	mov	r1, r5
 8083478:	4620      	mov	r0, r4
 808347a:	f004 ff47 	bl	808830c <mbedtls_md_hmac_finish>
 808347e:	bb30      	cbnz	r0, 80834ce <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 8083480:	4548      	cmp	r0, r9
 8083482:	da07      	bge.n	8083494 <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
 8083484:	f810 2008 	ldrb.w	r2, [r0, r8]
 8083488:	5d43      	ldrb	r3, [r0, r5]
 808348a:	4053      	eors	r3, r2
 808348c:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 8083490:	3001      	adds	r0, #1
 8083492:	e7f5      	b.n	8083480 <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
 8083494:	f10a 0a01 	add.w	sl, sl, #1
 8083498:	e7de      	b.n	8083458 <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
 808349a:	454e      	cmp	r6, r9
 808349c:	4635      	mov	r5, r6
 808349e:	bf28      	it	cs
 80834a0:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
 80834a2:	4641      	mov	r1, r8
 80834a4:	462a      	mov	r2, r5
 80834a6:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80834a8:	f010 f853 	bl	8093552 <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
 80834ac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
 80834ae:	1b76      	subs	r6, r6, r5
        out_p += use_len;
 80834b0:	442b      	add	r3, r5
 80834b2:	9331      	str	r3, [sp, #196]	; 0xc4
 80834b4:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
 80834b6:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80834ba:	3301      	adds	r3, #1
 80834bc:	b2db      	uxtb	r3, r3
 80834be:	7013      	strb	r3, [r2, #0]
 80834c0:	2b00      	cmp	r3, #0
 80834c2:	d1a4      	bne.n	808340e <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
 80834c4:	ab03      	add	r3, sp, #12
 80834c6:	4293      	cmp	r3, r2
 80834c8:	d1f5      	bne.n	80834b6 <mbedtls_pkcs5_pbkdf2_hmac+0xce>
 80834ca:	e7a0      	b.n	808340e <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
 80834cc:	4630      	mov	r0, r6
}
 80834ce:	b025      	add	sp, #148	; 0x94
 80834d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080834d4 <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 80834d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80834d8:	461f      	mov	r7, r3
 80834da:	b0bd      	sub	sp, #244	; 0xf4
    int ret, iterations = 0, keylen = 0;
 80834dc:	2300      	movs	r3, #0
 80834de:	9306      	str	r3, [sp, #24]
 80834e0:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
 80834e2:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
 80834e4:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 80834e6:	6883      	ldr	r3, [r0, #8]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 80834e8:	f04f 0904 	mov.w	r9, #4
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 80834ec:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
 80834ee:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80834f0:	6803      	ldr	r3, [r0, #0]

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 80834f2:	460d      	mov	r5, r1
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80834f4:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 80834f6:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 80834f8:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80834fc:	f040 80c9 	bne.w	8083692 <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
 8083500:	ab10      	add	r3, sp, #64	; 0x40
 8083502:	aa0a      	add	r2, sp, #40	; 0x28
 8083504:	4621      	mov	r1, r4
 8083506:	a808      	add	r0, sp, #32
 8083508:	f000 fd65 	bl	8083fd6 <mbedtls_asn1_get_alg>
 808350c:	2800      	cmp	r0, #0
 808350e:	d158      	bne.n	80835c2 <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 8083510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8083512:	2a09      	cmp	r2, #9
 8083514:	d14c      	bne.n	80835b0 <mbedtls_pkcs5_pbes2+0xdc>
 8083516:	990c      	ldr	r1, [sp, #48]	; 0x30
 8083518:	4861      	ldr	r0, [pc, #388]	; (80836a0 <mbedtls_pkcs5_pbes2+0x1cc>)
 808351a:	f010 f80b 	bl	8093534 <memcmp>
 808351e:	2800      	cmp	r0, #0
 8083520:	d146      	bne.n	80835b0 <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 8083522:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
 8083524:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 8083526:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
 8083528:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 808352c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808352e:	2b30      	cmp	r3, #48	; 0x30
 8083530:	f040 80af 	bne.w	8083692 <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8083534:	464b      	mov	r3, r9
 8083536:	aa17      	add	r2, sp, #92	; 0x5c
 8083538:	4641      	mov	r1, r8
 808353a:	a824      	add	r0, sp, #144	; 0x90
 808353c:	f000 fc72 	bl	8083e24 <mbedtls_asn1_get_tag>
 8083540:	b9f8      	cbnz	r0, 8083582 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 8083542:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
 8083544:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 8083546:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
 8083548:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 808354a:	4641      	mov	r1, r8
 808354c:	aa06      	add	r2, sp, #24
 808354e:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
 8083550:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 8083552:	f000 fc94 	bl	8083e7e <mbedtls_asn1_get_int>
 8083556:	b9a0      	cbnz	r0, 8083582 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
 8083558:	9b24      	ldr	r3, [sp, #144]	; 0x90
 808355a:	4598      	cmp	r8, r3
 808355c:	d022      	beq.n	80835a4 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
 808355e:	aa07      	add	r2, sp, #28
 8083560:	4641      	mov	r1, r8
 8083562:	a824      	add	r0, sp, #144	; 0x90
 8083564:	f000 fc8b 	bl	8083e7e <mbedtls_asn1_get_int>
 8083568:	b110      	cbz	r0, 8083570 <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 808356a:	f110 0f62 	cmn.w	r0, #98	; 0x62
 808356e:	d108      	bne.n	8083582 <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
 8083570:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8083572:	4598      	cmp	r8, r3
 8083574:	d016      	beq.n	80835a4 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
 8083576:	aa2c      	add	r2, sp, #176	; 0xb0
 8083578:	4641      	mov	r1, r8
 808357a:	a824      	add	r0, sp, #144	; 0x90
 808357c:	f000 fd73 	bl	8084066 <mbedtls_asn1_get_alg_null>
 8083580:	b128      	cbz	r0, 808358e <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 8083582:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
 8083586:	2800      	cmp	r0, #0
 8083588:	f040 8086 	bne.w	8083698 <mbedtls_pkcs5_pbes2+0x1c4>
 808358c:	e00a      	b.n	80835a4 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
 808358e:	f10d 0116 	add.w	r1, sp, #22
 8083592:	a82c      	add	r0, sp, #176	; 0xb0
 8083594:	f002 f90c 	bl	80857b0 <mbedtls_oid_get_md_hmac>
 8083598:	b950      	cbnz	r0, 80835b0 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
 808359a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 808359c:	4598      	cmp	r8, r3
 808359e:	d001      	beq.n	80835a4 <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80835a0:	4840      	ldr	r0, [pc, #256]	; (80836a4 <mbedtls_pkcs5_pbes2+0x1d0>)
 80835a2:	e079      	b.n	8083698 <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
 80835a4:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80835a8:	f004 fdbe 	bl	8088128 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80835ac:	4681      	mov	r9, r0
 80835ae:	b908      	cbnz	r0, 80835b4 <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
 80835b0:	483d      	ldr	r0, [pc, #244]	; (80836a8 <mbedtls_pkcs5_pbes2+0x1d4>)
 80835b2:	e071      	b.n	8083698 <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
 80835b4:	ab13      	add	r3, sp, #76	; 0x4c
 80835b6:	aa0d      	add	r2, sp, #52	; 0x34
 80835b8:	4621      	mov	r1, r4
 80835ba:	a808      	add	r0, sp, #32
 80835bc:	f000 fd0b 	bl	8083fd6 <mbedtls_asn1_get_alg>
 80835c0:	b110      	cbz	r0, 80835c8 <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 80835c2:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
 80835c6:	e067      	b.n	8083698 <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
 80835c8:	f10d 0117 	add.w	r1, sp, #23
 80835cc:	a80d      	add	r0, sp, #52	; 0x34
 80835ce:	f002 f8c1 	bl	8085754 <mbedtls_oid_get_cipher_alg>
 80835d2:	2800      	cmp	r0, #0
 80835d4:	d1ec      	bne.n	80835b0 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
 80835d6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80835da:	f000 f949 	bl	8083870 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 80835de:	4680      	mov	r8, r0
 80835e0:	2800      	cmp	r0, #0
 80835e2:	d0e5      	beq.n	80835b0 <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
 80835e4:	6843      	ldr	r3, [r0, #4]
 80835e6:	08db      	lsrs	r3, r3, #3
 80835e8:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
 80835ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80835ec:	2b04      	cmp	r3, #4
 80835ee:	d152      	bne.n	8083696 <mbedtls_pkcs5_pbes2+0x1c2>
 80835f0:	68c3      	ldr	r3, [r0, #12]
 80835f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80835f4:	429a      	cmp	r2, r3
 80835f6:	d14e      	bne.n	8083696 <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
 80835f8:	a819      	add	r0, sp, #100	; 0x64
 80835fa:	f004 fda1 	bl	8088140 <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
 80835fe:	a82c      	add	r0, sp, #176	; 0xb0
 8083600:	f000 f958 	bl	80838b4 <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
 8083604:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8083606:	9915      	ldr	r1, [sp, #84]	; 0x54
 8083608:	a824      	add	r0, sp, #144	; 0x90
 808360a:	f00f ffa2 	bl	8093552 <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 808360e:	2201      	movs	r2, #1
 8083610:	4649      	mov	r1, r9
 8083612:	a819      	add	r0, sp, #100	; 0x64
 8083614:	f004 fdba 	bl	808818c <mbedtls_md_setup>
 8083618:	4604      	mov	r4, r0
 808361a:	2800      	cmp	r0, #0
 808361c:	d131      	bne.n	8083682 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
 808361e:	9b07      	ldr	r3, [sp, #28]
 8083620:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 8083624:	9302      	str	r3, [sp, #8]
 8083626:	9b06      	ldr	r3, [sp, #24]
 8083628:	f8cd 900c 	str.w	r9, [sp, #12]
 808362c:	9301      	str	r3, [sp, #4]
 808362e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8083630:	463a      	mov	r2, r7
 8083632:	9300      	str	r3, [sp, #0]
 8083634:	4631      	mov	r1, r6
 8083636:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8083638:	a819      	add	r0, sp, #100	; 0x64
 808363a:	f7ff fed5 	bl	80833e8 <mbedtls_pkcs5_pbkdf2_hmac>
 808363e:	4604      	mov	r4, r0
 8083640:	b9f8      	cbnz	r0, 8083682 <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 8083642:	4641      	mov	r1, r8
 8083644:	a82c      	add	r0, sp, #176	; 0xb0
 8083646:	f000 fb09 	bl	8083c5c <mbedtls_cipher_setup>
 808364a:	4604      	mov	r4, r0
 808364c:	b9c8      	cbnz	r0, 8083682 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 808364e:	9a07      	ldr	r2, [sp, #28]
 8083650:	b26b      	sxtb	r3, r5
 8083652:	00d2      	lsls	r2, r2, #3
 8083654:	4649      	mov	r1, r9
 8083656:	a82c      	add	r0, sp, #176	; 0xb0
 8083658:	f000 f942 	bl	80838e0 <mbedtls_cipher_setkey>
 808365c:	4604      	mov	r4, r0
 808365e:	b980      	cbnz	r0, 8083682 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
 8083660:	ab09      	add	r3, sp, #36	; 0x24
 8083662:	9302      	str	r3, [sp, #8]
 8083664:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8083666:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8083668:	9301      	str	r3, [sp, #4]
 808366a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 808366c:	a924      	add	r1, sp, #144	; 0x90
 808366e:	9300      	str	r3, [sp, #0]
 8083670:	a82c      	add	r0, sp, #176	; 0xb0
 8083672:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8083674:	f000 fb10 	bl	8083c98 <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
 8083678:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
 808367c:	2800      	cmp	r0, #0
 808367e:	bf08      	it	eq
 8083680:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
 8083682:	a819      	add	r0, sp, #100	; 0x64
 8083684:	f004 fd61 	bl	808814a <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
 8083688:	a82c      	add	r0, sp, #176	; 0xb0
 808368a:	f000 f917 	bl	80838bc <mbedtls_cipher_free>

    return( ret );
 808368e:	4620      	mov	r0, r4
 8083690:	e002      	b.n	8083698 <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8083692:	4806      	ldr	r0, [pc, #24]	; (80836ac <mbedtls_pkcs5_pbes2+0x1d8>)
 8083694:	e000      	b.n	8083698 <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
 8083696:	4806      	ldr	r0, [pc, #24]	; (80836b0 <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 8083698:	b03d      	add	sp, #244	; 0xf4
 808369a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808369e:	bf00      	nop
 80836a0:	0809402c 	.word	0x0809402c
 80836a4:	ffffd09a 	.word	0xffffd09a
 80836a8:	ffffd180 	.word	0xffffd180
 80836ac:	ffffd09e 	.word	0xffffd09e
 80836b0:	ffffd100 	.word	0xffffd100

080836b4 <mbedtls_cipher_get_block_size>:
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 80836b4:	b110      	cbz	r0, 80836bc <mbedtls_cipher_get_block_size+0x8>
 80836b6:	6800      	ldr	r0, [r0, #0]
 80836b8:	b100      	cbz	r0, 80836bc <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 80836ba:	6940      	ldr	r0, [r0, #20]
}
 80836bc:	4770      	bx	lr

080836be <_ZL16add_pkcs_paddingPhjj>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 80836be:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
 80836c0:	1a89      	subs	r1, r1, r2
 80836c2:	2400      	movs	r4, #0
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 80836c4:	b2e3      	uxtb	r3, r4
 80836c6:	4299      	cmp	r1, r3
 80836c8:	f104 0401 	add.w	r4, r4, #1
 80836cc:	d902      	bls.n	80836d4 <_ZL16add_pkcs_paddingPhjj+0x16>
        output[data_len + i] = (unsigned char) padding_len;
 80836ce:	4403      	add	r3, r0
 80836d0:	5499      	strb	r1, [r3, r2]
        size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 80836d2:	e7f7      	b.n	80836c4 <_ZL16add_pkcs_paddingPhjj+0x6>
 80836d4:	bd10      	pop	{r4, pc}
	...

080836d8 <_ZL16get_pkcs_paddingPhjPj>:
        output[data_len + i] = (unsigned char) padding_len;
}

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 80836d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 80836da:	b300      	cbz	r0, 808371e <_ZL16get_pkcs_paddingPhjPj+0x46>
 80836dc:	b1fa      	cbz	r2, 808371e <_ZL16get_pkcs_paddingPhjPj+0x46>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 80836de:	1843      	adds	r3, r0, r1
 80836e0:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 80836e4:	fab4 f384 	clz	r3, r4
 80836e8:	095b      	lsrs	r3, r3, #5
 80836ea:	42a1      	cmp	r1, r4
 80836ec:	bf38      	it	cc
 80836ee:	f043 0301 	orrcc.w	r3, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 80836f2:	1b0f      	subs	r7, r1, r4
 80836f4:	6017      	str	r7, [r2, #0]
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 80836f6:	2200      	movs	r2, #0
 80836f8:	428a      	cmp	r2, r1
 80836fa:	d00b      	beq.n	8083714 <_ZL16get_pkcs_paddingPhjPj+0x3c>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 80836fc:	5c85      	ldrb	r5, [r0, r2]
 80836fe:	42ba      	cmp	r2, r7
 8083700:	ea84 0605 	eor.w	r6, r4, r5
 8083704:	bf34      	ite	cc
 8083706:	2500      	movcc	r5, #0
 8083708:	2501      	movcs	r5, #1
 808370a:	4375      	muls	r5, r6
 808370c:	432b      	orrs	r3, r5
 808370e:	b2db      	uxtb	r3, r3
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 8083710:	3201      	adds	r2, #1
 8083712:	e7f1      	b.n	80836f8 <_ZL16get_pkcs_paddingPhjPj+0x20>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8083714:	2b00      	cmp	r3, #0
 8083716:	4803      	ldr	r0, [pc, #12]	; (8083724 <_ZL16get_pkcs_paddingPhjPj+0x4c>)
 8083718:	bf08      	it	eq
 808371a:	2000      	moveq	r0, #0
 808371c:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 808371e:	4802      	ldr	r0, [pc, #8]	; (8083728 <_ZL16get_pkcs_paddingPhjPj+0x50>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 8083720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083722:	bf00      	nop
 8083724:	ffff9e00 	.word	0xffff9e00
 8083728:	ffff9f00 	.word	0xffff9f00

0808372c <_ZL25add_one_and_zeros_paddingPhjj>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 808372c:	2380      	movs	r3, #128	; 0x80
/*
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 808372e:	b530      	push	{r4, r5, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 8083730:	5483      	strb	r3, [r0, r2]
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 8083732:	1a89      	subs	r1, r1, r2
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8083734:	2301      	movs	r3, #1
        output[data_len + i] = 0x00;
 8083736:	2500      	movs	r5, #0
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8083738:	4299      	cmp	r1, r3
 808373a:	d904      	bls.n	8083746 <_ZL25add_one_and_zeros_paddingPhjj+0x1a>
        output[data_len + i] = 0x00;
 808373c:	18c4      	adds	r4, r0, r3
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 808373e:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 8083740:	54a5      	strb	r5, [r4, r2]
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8083742:	b2db      	uxtb	r3, r3
 8083744:	e7f8      	b.n	8083738 <_ZL25add_one_and_zeros_paddingPhjj+0xc>
 8083746:	bd30      	pop	{r4, r5, pc}

08083748 <_ZL25add_zeros_and_len_paddingPhjj>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 8083748:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 808374a:	2301      	movs	r3, #1
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 808374c:	1a8d      	subs	r5, r1, r2
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
        output[data_len + i - 1] = 0x00;
 808374e:	2600      	movs	r6, #0
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8083750:	429d      	cmp	r5, r3
 8083752:	d906      	bls.n	8083762 <_ZL25add_zeros_and_len_paddingPhjj+0x1a>
        output[data_len + i - 1] = 0x00;
 8083754:	18c4      	adds	r4, r0, r3
 8083756:	4414      	add	r4, r2
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8083758:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 808375a:	f804 6c01 	strb.w	r6, [r4, #-1]
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 808375e:	b2db      	uxtb	r3, r3
 8083760:	e7f6      	b.n	8083750 <_ZL25add_zeros_and_len_paddingPhjj+0x8>
        output[data_len + i - 1] = 0x00;
    output[output_len - 1] = (unsigned char) padding_len;
 8083762:	4401      	add	r1, r0
 8083764:	f801 5c01 	strb.w	r5, [r1, #-1]
 8083768:	bd70      	pop	{r4, r5, r6, pc}
	...

0808376c <_ZL25get_zeros_and_len_paddingPhjPj>:
}

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 808376c:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 808376e:	b1f0      	cbz	r0, 80837ae <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
 8083770:	b1ea      	cbz	r2, 80837ae <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 8083772:	1e4e      	subs	r6, r1, #1
 8083774:	5d84      	ldrb	r4, [r0, r6]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8083776:	fab4 f384 	clz	r3, r4

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 808377a:	1b0d      	subs	r5, r1, r4

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 808377c:	095b      	lsrs	r3, r3, #5
 808377e:	42a1      	cmp	r1, r4
 8083780:	bf2c      	ite	cs
 8083782:	4619      	movcs	r1, r3
 8083784:	f043 0101 	orrcc.w	r1, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8083788:	6015      	str	r5, [r2, #0]
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 808378a:	2300      	movs	r3, #0
 808378c:	42b3      	cmp	r3, r6
 808378e:	d209      	bcs.n	80837a4 <_ZL25get_zeros_and_len_paddingPhjPj+0x38>
        bad |= input[i] * ( i >= pad_idx );
 8083790:	42ab      	cmp	r3, r5
 8083792:	5cc4      	ldrb	r4, [r0, r3]
 8083794:	bf34      	ite	cc
 8083796:	2200      	movcc	r2, #0
 8083798:	2201      	movcs	r2, #1
 808379a:	4362      	muls	r2, r4
 808379c:	4311      	orrs	r1, r2
 808379e:	b2c9      	uxtb	r1, r1
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 80837a0:	3301      	adds	r3, #1
 80837a2:	e7f3      	b.n	808378c <_ZL25get_zeros_and_len_paddingPhjPj+0x20>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 80837a4:	2900      	cmp	r1, #0
 80837a6:	4803      	ldr	r0, [pc, #12]	; (80837b4 <_ZL25get_zeros_and_len_paddingPhjPj+0x48>)
 80837a8:	bf08      	it	eq
 80837aa:	2000      	moveq	r0, #0
 80837ac:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80837ae:	4802      	ldr	r0, [pc, #8]	; (80837b8 <_ZL25get_zeros_and_len_paddingPhjPj+0x4c>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 80837b0:	bd70      	pop	{r4, r5, r6, pc}
 80837b2:	bf00      	nop
 80837b4:	ffff9e00 	.word	0xffff9e00
 80837b8:	ffff9f00 	.word	0xffff9f00

080837bc <_ZL17add_zeros_paddingPhjj>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 80837bc:	b510      	push	{r4, lr}
 80837be:	4402      	add	r2, r0
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 80837c0:	2300      	movs	r3, #0
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 80837c2:	1a14      	subs	r4, r2, r0
 80837c4:	42a1      	cmp	r1, r4
 80837c6:	d902      	bls.n	80837ce <_ZL17add_zeros_paddingPhjj+0x12>
        output[i] = 0x00;
 80837c8:	f802 3b01 	strb.w	r3, [r2], #1
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 80837cc:	e7f9      	b.n	80837c2 <_ZL17add_zeros_paddingPhjj+0x6>
 80837ce:	bd10      	pop	{r4, pc}

080837d0 <_ZL14get_no_paddingPhjPj>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 80837d0:	b118      	cbz	r0, 80837da <_ZL14get_no_paddingPhjPj+0xa>
 80837d2:	b112      	cbz	r2, 80837da <_ZL14get_no_paddingPhjPj+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 80837d4:	6011      	str	r1, [r2, #0]

    return( 0 );
 80837d6:	2000      	movs	r0, #0
 80837d8:	4770      	bx	lr
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80837da:	4801      	ldr	r0, [pc, #4]	; (80837e0 <_ZL14get_no_paddingPhjPj+0x10>)

    *data_len = input_len;

    return( 0 );
}
 80837dc:	4770      	bx	lr
 80837de:	bf00      	nop
 80837e0:	ffff9f00 	.word	0xffff9f00

080837e4 <_ZL25get_one_and_zeros_paddingPhjPj>:
        output[data_len + i] = 0x00;
}

static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 80837e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
 80837e6:	b1f0      	cbz	r0, 8083826 <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
 80837e8:	b1ea      	cbz	r2, 8083826 <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
    *data_len = 0;
 80837ea:	2300      	movs	r3, #0
 80837ec:	6013      	str	r3, [r2, #0]
 80837ee:	4408      	add	r0, r1
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
 80837f0:	2480      	movs	r4, #128	; 0x80
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 80837f2:	b199      	cbz	r1, 808381c <_ZL25get_one_and_zeros_paddingPhjPj+0x38>
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 80837f4:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 80837f8:	3901      	subs	r1, #1
 80837fa:	2d00      	cmp	r5, #0
 80837fc:	bf0c      	ite	eq
 80837fe:	461d      	moveq	r5, r3
 8083800:	f043 0501 	orrne.w	r5, r3, #1
 8083804:	406b      	eors	r3, r5
        *data_len |= ( i - 1 ) * ( done != prev_done );
 8083806:	fb01 f603 	mul.w	r6, r1, r3
 808380a:	6817      	ldr	r7, [r2, #0]
 808380c:	433e      	orrs	r6, r7
 808380e:	6016      	str	r6, [r2, #0]
        bad ^= input[i - 1] * ( done != prev_done );
 8083810:	7806      	ldrb	r6, [r0, #0]
 8083812:	4373      	muls	r3, r6
 8083814:	405c      	eors	r4, r3
 8083816:	b2e4      	uxtb	r4, r4
    bad = 0x80;
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 8083818:	462b      	mov	r3, r5
 808381a:	e7ea      	b.n	80837f2 <_ZL25get_one_and_zeros_paddingPhjPj+0xe>
        *data_len |= ( i - 1 ) * ( done != prev_done );
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 808381c:	2c00      	cmp	r4, #0
 808381e:	4803      	ldr	r0, [pc, #12]	; (808382c <_ZL25get_one_and_zeros_paddingPhjPj+0x48>)
 8083820:	bf08      	it	eq
 8083822:	2000      	moveq	r0, #0
 8083824:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083826:	4802      	ldr	r0, [pc, #8]	; (8083830 <_ZL25get_one_and_zeros_paddingPhjPj+0x4c>)
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );

}
 8083828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808382a:	bf00      	nop
 808382c:	ffff9e00 	.word	0xffff9e00
 8083830:	ffff9f00 	.word	0xffff9f00

08083834 <_ZL17get_zeros_paddingPhjPj>:
        output[i] = 0x00;
}

static int get_zeros_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 8083834:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
 8083836:	b1a8      	cbz	r0, 8083864 <_ZL17get_zeros_paddingPhjPj+0x30>
 8083838:	b1a2      	cbz	r2, 8083864 <_ZL17get_zeros_paddingPhjPj+0x30>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = 0;
 808383a:	2300      	movs	r3, #0
 808383c:	6013      	str	r3, [r2, #0]
 808383e:	4401      	add	r1, r0
    for( i = input_len; i > 0; i-- )
 8083840:	4281      	cmp	r1, r0
 8083842:	eba1 0400 	sub.w	r4, r1, r0
 8083846:	d00f      	beq.n	8083868 <_ZL17get_zeros_paddingPhjPj+0x34>
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 8083848:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 808384c:	2d00      	cmp	r5, #0
 808384e:	bf0c      	ite	eq
 8083850:	461d      	moveq	r5, r3
 8083852:	f043 0501 	orrne.w	r5, r3, #1
        *data_len |= i * ( done != prev_done );
 8083856:	406b      	eors	r3, r5
 8083858:	4363      	muls	r3, r4
 808385a:	6814      	ldr	r4, [r2, #0]
 808385c:	4323      	orrs	r3, r4
 808385e:	6013      	str	r3, [r2, #0]

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 8083860:	462b      	mov	r3, r5
 8083862:	e7ed      	b.n	8083840 <_ZL17get_zeros_paddingPhjPj+0xc>
{
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083864:	4801      	ldr	r0, [pc, #4]	; (808386c <_ZL17get_zeros_paddingPhjPj+0x38>)
 8083866:	bd30      	pop	{r4, r5, pc}

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 8083868:	2000      	movs	r0, #0
        done |= ( input[i-1] != 0 );
        *data_len |= i * ( done != prev_done );
    }

    return( 0 );
}
 808386a:	bd30      	pop	{r4, r5, pc}
 808386c:	ffff9f00 	.word	0xffff9f00

08083870 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 8083870:	4b05      	ldr	r3, [pc, #20]	; (8083888 <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8083872:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8083876:	b122      	cbz	r2, 8083882 <mbedtls_cipher_info_from_type+0x12>
 8083878:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 808387a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 808387e:	4281      	cmp	r1, r0
 8083880:	d1f7      	bne.n	8083872 <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
 8083882:	4610      	mov	r0, r2
 8083884:	4770      	bx	lr
 8083886:	bf00      	nop
 8083888:	08094e40 	.word	0x08094e40

0808388c <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 808388c:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 808388e:	4c08      	ldr	r4, [pc, #32]	; (80838b0 <mbedtls_cipher_info_from_values+0x24>)
 8083890:	6863      	ldr	r3, [r4, #4]
 8083892:	b15b      	cbz	r3, 80838ac <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 8083894:	699d      	ldr	r5, [r3, #24]
 8083896:	782d      	ldrb	r5, [r5, #0]
 8083898:	4285      	cmp	r5, r0
 808389a:	d105      	bne.n	80838a8 <mbedtls_cipher_info_from_values+0x1c>
 808389c:	685d      	ldr	r5, [r3, #4]
 808389e:	428d      	cmp	r5, r1
 80838a0:	d102      	bne.n	80838a8 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 80838a2:	785d      	ldrb	r5, [r3, #1]
 80838a4:	4295      	cmp	r5, r2
 80838a6:	d001      	beq.n	80838ac <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80838a8:	3408      	adds	r4, #8
 80838aa:	e7f1      	b.n	8083890 <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 80838ac:	4618      	mov	r0, r3
 80838ae:	bd30      	pop	{r4, r5, pc}
 80838b0:	08094e38 	.word	0x08094e38

080838b4 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80838b4:	2240      	movs	r2, #64	; 0x40
 80838b6:	2100      	movs	r1, #0
 80838b8:	f00f be71 	b.w	809359e <memset>

080838bc <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 80838bc:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80838be:	4604      	mov	r4, r0
 80838c0:	b168      	cbz	r0, 80838de <mbedtls_cipher_free+0x22>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 80838c2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80838c4:	b118      	cbz	r0, 80838ce <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 80838c6:	6823      	ldr	r3, [r4, #0]
 80838c8:	699b      	ldr	r3, [r3, #24]
 80838ca:	699b      	ldr	r3, [r3, #24]
 80838cc:	4798      	blx	r3
 80838ce:	f104 0240 	add.w	r2, r4, #64	; 0x40
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80838d2:	2300      	movs	r3, #0
 80838d4:	4294      	cmp	r4, r2
 80838d6:	d002      	beq.n	80838de <mbedtls_cipher_free+0x22>
 80838d8:	7023      	strb	r3, [r4, #0]
 80838da:	3401      	adds	r4, #1
 80838dc:	e7fa      	b.n	80838d4 <mbedtls_cipher_free+0x18>
 80838de:	bd10      	pop	{r4, pc}

080838e0 <mbedtls_cipher_setkey>:
    return( 0 );
}

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
 80838e0:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 80838e2:	b1c8      	cbz	r0, 8083918 <mbedtls_cipher_setkey+0x38>
 80838e4:	6804      	ldr	r4, [r0, #0]
 80838e6:	b1bc      	cbz	r4, 8083918 <mbedtls_cipher_setkey+0x38>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 80838e8:	6925      	ldr	r5, [r4, #16]
 80838ea:	07ad      	lsls	r5, r5, #30
 80838ec:	d402      	bmi.n	80838f4 <mbedtls_cipher_setkey+0x14>
 80838ee:	6865      	ldr	r5, [r4, #4]
 80838f0:	4295      	cmp	r5, r2
 80838f2:	d111      	bne.n	8083918 <mbedtls_cipher_setkey+0x38>
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80838f4:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 80838f6:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 80838f8:	7203      	strb	r3, [r0, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80838fa:	d004      	beq.n	8083906 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80838fc:	7865      	ldrb	r5, [r4, #1]
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80838fe:	2d03      	cmp	r5, #3
 8083900:	d001      	beq.n	8083906 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8083902:	2d05      	cmp	r5, #5
 8083904:	d102      	bne.n	808390c <mbedtls_cipher_setkey+0x2c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8083906:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 8083908:	68db      	ldr	r3, [r3, #12]
 808390a:	e002      	b.n	8083912 <mbedtls_cipher_setkey+0x32>
    }

    if( MBEDTLS_DECRYPT == operation )
 808390c:	b923      	cbnz	r3, 8083918 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 808390e:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 8083910:	691b      	ldr	r3, [r3, #16]
 8083912:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8083914:	bc30      	pop	{r4, r5}
                ctx->key_bitlen );
    }

    if( MBEDTLS_DECRYPT == operation )
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                ctx->key_bitlen );
 8083916:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8083918:	4801      	ldr	r0, [pc, #4]	; (8083920 <mbedtls_cipher_setkey+0x40>)
 808391a:	bc30      	pop	{r4, r5}
 808391c:	4770      	bx	lr
 808391e:	bf00      	nop
 8083920:	ffff9f00 	.word	0xffff9f00

08083924 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
 8083924:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 8083926:	4604      	mov	r4, r0
 8083928:	b1b0      	cbz	r0, 8083958 <mbedtls_cipher_set_iv+0x34>
 808392a:	6803      	ldr	r3, [r0, #0]
 808392c:	b1a3      	cbz	r3, 8083958 <mbedtls_cipher_set_iv+0x34>
 808392e:	b199      	cbz	r1, 8083958 <mbedtls_cipher_set_iv+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 8083930:	2a10      	cmp	r2, #16
 8083932:	d80f      	bhi.n	8083954 <mbedtls_cipher_set_iv+0x30>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 8083934:	6918      	ldr	r0, [r3, #16]
 8083936:	07c0      	lsls	r0, r0, #31
 8083938:	d403      	bmi.n	8083942 <mbedtls_cipher_set_iv+0x1e>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 808393a:	68dd      	ldr	r5, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 808393c:	42aa      	cmp	r2, r5
 808393e:	d201      	bcs.n	8083944 <mbedtls_cipher_set_iv+0x20>
 8083940:	e00a      	b.n	8083958 <mbedtls_cipher_set_iv+0x34>
 8083942:	4615      	mov	r5, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    memcpy( ctx->iv, iv, actual_iv_size );
 8083944:	462a      	mov	r2, r5
 8083946:	f104 0028 	add.w	r0, r4, #40	; 0x28
 808394a:	f00f fe02 	bl	8093552 <memcpy>
    ctx->iv_size = actual_iv_size;
 808394e:	63a5      	str	r5, [r4, #56]	; 0x38

    return( 0 );
 8083950:	2000      	movs	r0, #0
 8083952:	bd38      	pop	{r3, r4, r5, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8083954:	4801      	ldr	r0, [pc, #4]	; (808395c <mbedtls_cipher_set_iv+0x38>)
 8083956:	bd38      	pop	{r3, r4, r5, pc}
                   const unsigned char *iv, size_t iv_len )
{
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083958:	4801      	ldr	r0, [pc, #4]	; (8083960 <mbedtls_cipher_set_iv+0x3c>)

    memcpy( ctx->iv, iv, actual_iv_size );
    ctx->iv_size = actual_iv_size;

    return( 0 );
}
 808395a:	bd38      	pop	{r3, r4, r5, pc}
 808395c:	ffff9f80 	.word	0xffff9f80
 8083960:	ffff9f00 	.word	0xffff9f00

08083964 <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8083964:	b128      	cbz	r0, 8083972 <mbedtls_cipher_reset+0xe>
 8083966:	6803      	ldr	r3, [r0, #0]
 8083968:	b11b      	cbz	r3, 8083972 <mbedtls_cipher_reset+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
 808396a:	2300      	movs	r3, #0
 808396c:	6243      	str	r3, [r0, #36]	; 0x24

    return( 0 );
 808396e:	4618      	mov	r0, r3
 8083970:	4770      	bx	lr
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083972:	4801      	ldr	r0, [pc, #4]	; (8083978 <mbedtls_cipher_reset+0x14>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
 8083974:	4770      	bx	lr
 8083976:	bf00      	nop
 8083978:	ffff9f00 	.word	0xffff9f00

0808397c <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 808397c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083980:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8083984:	460f      	mov	r7, r1
 8083986:	4615      	mov	r5, r2
 8083988:	4699      	mov	r9, r3
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 808398a:	4604      	mov	r4, r0
 808398c:	b908      	cbnz	r0, 8083992 <mbedtls_cipher_update+0x16>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 808398e:	485c      	ldr	r0, [pc, #368]	; (8083b00 <mbedtls_cipher_update+0x184>)
 8083990:	e0b2      	b.n	8083af8 <mbedtls_cipher_update+0x17c>
                   size_t ilen, unsigned char *output, size_t *olen )
{
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8083992:	6803      	ldr	r3, [r0, #0]
 8083994:	2b00      	cmp	r3, #0
 8083996:	d0fa      	beq.n	808398e <mbedtls_cipher_update+0x12>
 8083998:	f1b8 0f00 	cmp.w	r8, #0
 808399c:	d0f7      	beq.n	808398e <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
 808399e:	2300      	movs	r3, #0
 80839a0:	f8c8 3000 	str.w	r3, [r8]
    block_size = mbedtls_cipher_get_block_size( ctx );
 80839a4:	f7ff fe86 	bl	80836b4 <mbedtls_cipher_get_block_size>

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 80839a8:	6823      	ldr	r3, [r4, #0]
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );
 80839aa:	4606      	mov	r6, r0

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 80839ac:	785b      	ldrb	r3, [r3, #1]
 80839ae:	2b01      	cmp	r3, #1
 80839b0:	d110      	bne.n	80839d4 <mbedtls_cipher_update+0x58>
    {
        if( ilen != block_size )
 80839b2:	4290      	cmp	r0, r2
 80839b4:	d17d      	bne.n	8083ab2 <mbedtls_cipher_update+0x136>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 80839b6:	f8c8 0000 	str.w	r0, [r8]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80839ba:	6823      	ldr	r3, [r4, #0]
 80839bc:	460a      	mov	r2, r1
 80839be:	699b      	ldr	r3, [r3, #24]
 80839c0:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80839c4:	685d      	ldr	r5, [r3, #4]
 80839c6:	464b      	mov	r3, r9
 80839c8:	46ac      	mov	ip, r5
 80839ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80839cc:	b003      	add	sp, #12
 80839ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80839d2:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 80839d4:	2b06      	cmp	r3, #6
 80839d6:	d10a      	bne.n	80839ee <mbedtls_cipher_update+0x72>
    {
        *olen = ilen;
 80839d8:	f8c8 2000 	str.w	r2, [r8]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 80839dc:	464b      	mov	r3, r9
 80839de:	460a      	mov	r2, r1
 80839e0:	4629      	mov	r1, r5
 80839e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80839e4:	b003      	add	sp, #12
 80839e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 80839ea:	f004 b9bb 	b.w	8087d64 <mbedtls_gcm_update>
    }
#endif

    if ( 0 == block_size )
 80839ee:	2800      	cmp	r0, #0
 80839f0:	d061      	beq.n	8083ab6 <mbedtls_cipher_update+0x13a>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
    }

    if( input == output &&
 80839f2:	4549      	cmp	r1, r9
 80839f4:	d108      	bne.n	8083a08 <mbedtls_cipher_update+0x8c>
 80839f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80839f8:	2a00      	cmp	r2, #0
 80839fa:	d1c8      	bne.n	808398e <mbedtls_cipher_update+0x12>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 80839fc:	fbb5 f2f0 	udiv	r2, r5, r0
 8083a00:	fb00 5212 	mls	r2, r0, r2, r5
 8083a04:	2a00      	cmp	r2, #0
 8083a06:	d1c2      	bne.n	808398e <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8083a08:	2b02      	cmp	r3, #2
 8083a0a:	d156      	bne.n	8083aba <mbedtls_cipher_update+0x13e>
        size_t copy_len = 0;

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8083a0c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8083a10:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8083a12:	b92b      	cbnz	r3, 8083a20 <mbedtls_cipher_update+0xa4>
 8083a14:	68e3      	ldr	r3, [r4, #12]
 8083a16:	b12b      	cbz	r3, 8083a24 <mbedtls_cipher_update+0xa8>
 8083a18:	1a33      	subs	r3, r6, r0
 8083a1a:	429d      	cmp	r5, r3
 8083a1c:	d80f      	bhi.n	8083a3e <mbedtls_cipher_update+0xc2>
 8083a1e:	e004      	b.n	8083a2a <mbedtls_cipher_update+0xae>
                ilen <= block_size - ctx->unprocessed_len ) ||
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
                ilen < block_size - ctx->unprocessed_len ) ||
 8083a20:	2b01      	cmp	r3, #1
 8083a22:	d10c      	bne.n	8083a3e <mbedtls_cipher_update+0xc2>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8083a24:	1a33      	subs	r3, r6, r0
 8083a26:	429d      	cmp	r5, r3
 8083a28:	d209      	bcs.n	8083a3e <mbedtls_cipher_update+0xc2>
                ilen < block_size - ctx->unprocessed_len ) )
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    ilen );
 8083a2a:	4420      	add	r0, r4
 8083a2c:	462a      	mov	r2, r5
 8083a2e:	4639      	mov	r1, r7
 8083a30:	3014      	adds	r0, #20
 8083a32:	f00f fd8e 	bl	8093552 <memcpy>

            ctx->unprocessed_len += ilen;
 8083a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8083a38:	441d      	add	r5, r3
 8083a3a:	6265      	str	r5, [r4, #36]	; 0x24
 8083a3c:	e037      	b.n	8083aae <mbedtls_cipher_update+0x132>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 8083a3e:	b310      	cbz	r0, 8083a86 <mbedtls_cipher_update+0x10a>
        {
            copy_len = block_size - ctx->unprocessed_len;
 8083a40:	ebc0 0a06 	rsb	sl, r0, r6

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    copy_len );
 8083a44:	4420      	add	r0, r4
 8083a46:	4652      	mov	r2, sl
 8083a48:	4639      	mov	r1, r7
 8083a4a:	3014      	adds	r0, #20
 8083a4c:	f00f fd81 	bl	8093552 <memcpy>

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8083a50:	4623      	mov	r3, r4
 8083a52:	f853 2b14 	ldr.w	r2, [r3], #20
 8083a56:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8083a5a:	6992      	ldr	r2, [r2, #24]
 8083a5c:	e88d 0208 	stmia.w	sp, {r3, r9}
 8083a60:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8083a64:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8083a68:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8083a6a:	4632      	mov	r2, r6
 8083a6c:	47d8      	blx	fp
 8083a6e:	2800      	cmp	r0, #0
 8083a70:	d142      	bne.n	8083af8 <mbedtls_cipher_update+0x17c>
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 8083a72:	f8d8 3000 	ldr.w	r3, [r8]
            output += block_size;
 8083a76:	44b1      	add	r9, r6
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 8083a78:	4433      	add	r3, r6
 8083a7a:	f8c8 3000 	str.w	r3, [r8]
            output += block_size;
            ctx->unprocessed_len = 0;

            input += copy_len;
 8083a7e:	4457      	add	r7, sl
                return( ret );
            }

            *olen += block_size;
            output += block_size;
            ctx->unprocessed_len = 0;
 8083a80:	6260      	str	r0, [r4, #36]	; 0x24

            input += copy_len;
            ilen -= copy_len;
 8083a82:	ebca 0505 	rsb	r5, sl, r5
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 8083a86:	b195      	cbz	r5, 8083aae <mbedtls_cipher_update+0x132>

            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 8083a88:	fbb5 faf6 	udiv	sl, r5, r6
 8083a8c:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 &&
 8083a90:	f1ba 0f00 	cmp.w	sl, #0
 8083a94:	d013      	beq.n	8083abe <mbedtls_cipher_update+0x142>
                NULL != ctx->add_padding)
            {
                copy_len = block_size;
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8083a96:	ebca 0505 	rsb	r5, sl, r5
                    copy_len );
 8083a9a:	4652      	mov	r2, sl
 8083a9c:	1979      	adds	r1, r7, r5
 8083a9e:	f104 0014 	add.w	r0, r4, #20
 8083aa2:	f00f fd56 	bl	8093552 <memcpy>

            ctx->unprocessed_len += copy_len;
 8083aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8083aa8:	4453      	add	r3, sl
 8083aaa:	6263      	str	r3, [r4, #36]	; 0x24
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 8083aac:	b995      	cbnz	r5, 8083ad4 <mbedtls_cipher_update+0x158>
            }

            *olen += ilen;
        }

        return( 0 );
 8083aae:	2000      	movs	r0, #0
 8083ab0:	e022      	b.n	8083af8 <mbedtls_cipher_update+0x17c>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8083ab2:	4814      	ldr	r0, [pc, #80]	; (8083b04 <mbedtls_cipher_update+0x188>)
 8083ab4:	e020      	b.n	8083af8 <mbedtls_cipher_update+0x17c>
    }
#endif

    if ( 0 == block_size )
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 8083ab6:	4814      	ldr	r0, [pc, #80]	; (8083b08 <mbedtls_cipher_update+0x18c>)
 8083ab8:	e01e      	b.n	8083af8 <mbedtls_cipher_update+0x17c>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8083aba:	4814      	ldr	r0, [pc, #80]	; (8083b0c <mbedtls_cipher_update+0x190>)
 8083abc:	e01c      	b.n	8083af8 <mbedtls_cipher_update+0x17c>
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
            if( copy_len == 0 &&
 8083abe:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8083ac2:	2b00      	cmp	r3, #0
 8083ac4:	d1e7      	bne.n	8083a96 <mbedtls_cipher_update+0x11a>
                ctx->operation == MBEDTLS_DECRYPT &&
 8083ac6:	68e3      	ldr	r3, [r4, #12]
 8083ac8:	2b00      	cmp	r3, #0
 8083aca:	bf0c      	ite	eq
 8083acc:	f04f 0a00 	moveq.w	sl, #0
 8083ad0:	46b2      	movne	sl, r6
 8083ad2:	e7e0      	b.n	8083a96 <mbedtls_cipher_update+0x11a>
        /*
         * Process remaining full blocks
         */
        if( ilen )
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8083ad4:	6823      	ldr	r3, [r4, #0]
 8083ad6:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8083ada:	699b      	ldr	r3, [r3, #24]
 8083adc:	e88d 0280 	stmia.w	sp, {r7, r9}
 8083ae0:	462a      	mov	r2, r5
 8083ae2:	689e      	ldr	r6, [r3, #8]
 8083ae4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8083ae6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8083aea:	47b0      	blx	r6
 8083aec:	b920      	cbnz	r0, 8083af8 <mbedtls_cipher_update+0x17c>
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
            {
                return( ret );
            }

            *olen += ilen;
 8083aee:	f8d8 3000 	ldr.w	r3, [r8]
 8083af2:	441d      	add	r5, r3
 8083af4:	f8c8 5000 	str.w	r5, [r8]
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083af8:	b003      	add	sp, #12
 8083afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083afe:	bf00      	nop
 8083b00:	ffff9f00 	.word	0xffff9f00
 8083b04:	ffff9d80 	.word	0xffff9d80
 8083b08:	ffff9c80 	.word	0xffff9c80
 8083b0c:	ffff9f80 	.word	0xffff9f80

08083b10 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 8083b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8083b12:	460e      	mov	r6, r1
 8083b14:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8083b16:	4604      	mov	r4, r0
 8083b18:	2800      	cmp	r0, #0
 8083b1a:	d052      	beq.n	8083bc2 <mbedtls_cipher_finish+0xb2>
 8083b1c:	6803      	ldr	r3, [r0, #0]
 8083b1e:	2b00      	cmp	r3, #0
 8083b20:	d04f      	beq.n	8083bc2 <mbedtls_cipher_finish+0xb2>
 8083b22:	2a00      	cmp	r2, #0
 8083b24:	d04d      	beq.n	8083bc2 <mbedtls_cipher_finish+0xb2>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 8083b26:	2300      	movs	r3, #0
 8083b28:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8083b2a:	6807      	ldr	r7, [r0, #0]
 8083b2c:	787a      	ldrb	r2, [r7, #1]
 8083b2e:	2a03      	cmp	r2, #3
 8083b30:	d04d      	beq.n	8083bce <mbedtls_cipher_finish+0xbe>
 8083b32:	1f51      	subs	r1, r2, #5
 8083b34:	2902      	cmp	r1, #2
 8083b36:	d94a      	bls.n	8083bce <mbedtls_cipher_finish+0xbe>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 8083b38:	2a01      	cmp	r2, #1
 8083b3a:	d101      	bne.n	8083b40 <mbedtls_cipher_finish+0x30>
    {
        if( ctx->unprocessed_len != 0 )
 8083b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8083b3e:	e016      	b.n	8083b6e <mbedtls_cipher_finish+0x5e>

        return( 0 );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 8083b40:	2a02      	cmp	r2, #2
 8083b42:	d140      	bne.n	8083bc6 <mbedtls_cipher_finish+0xb6>
    {
        int ret = 0;

        if( MBEDTLS_ENCRYPT == ctx->operation )
 8083b44:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8083b48:	2b01      	cmp	r3, #1
 8083b4a:	d109      	bne.n	8083b60 <mbedtls_cipher_finish+0x50>
        {
            /* check for 'no padding' mode */
            if( NULL == ctx->add_padding )
 8083b4c:	68c3      	ldr	r3, [r0, #12]
 8083b4e:	2b00      	cmp	r3, #0
 8083b50:	d0f4      	beq.n	8083b3c <mbedtls_cipher_finish+0x2c>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 8083b52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

                return( 0 );
            }

            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 8083b54:	3014      	adds	r0, #20
 8083b56:	b901      	cbnz	r1, 8083b5a <mbedtls_cipher_finish+0x4a>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 8083b58:	68f9      	ldr	r1, [r7, #12]
                    ctx->unprocessed_len );
 8083b5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8083b5c:	4798      	blx	r3
 8083b5e:	e00b      	b.n	8083b78 <mbedtls_cipher_finish+0x68>
        }
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 8083b60:	f7ff fda8 	bl	80836b4 <mbedtls_cipher_get_block_size>
 8083b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8083b66:	4298      	cmp	r0, r3
 8083b68:	d006      	beq.n	8083b78 <mbedtls_cipher_finish+0x68>
        {
            /*
             * For decrypt operations, expect a full block,
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 8083b6a:	68e2      	ldr	r2, [r4, #12]
 8083b6c:	bb6a      	cbnz	r2, 8083bca <mbedtls_cipher_finish+0xba>
    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
    {
        if( ctx->unprocessed_len != 0 )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        return( 0 );
 8083b6e:	2b00      	cmp	r3, #0
 8083b70:	4818      	ldr	r0, [pc, #96]	; (8083bd4 <mbedtls_cipher_finish+0xc4>)
 8083b72:	bf08      	it	eq
 8083b74:	2000      	moveq	r0, #0
 8083b76:	e02b      	b.n	8083bd0 <mbedtls_cipher_finish+0xc0>

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8083b78:	4620      	mov	r0, r4
 8083b7a:	f7ff fd9b 	bl	80836b4 <mbedtls_cipher_get_block_size>
 8083b7e:	4623      	mov	r3, r4
 8083b80:	f853 2b14 	ldr.w	r2, [r3], #20
 8083b84:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8083b88:	6992      	ldr	r2, [r2, #24]
 8083b8a:	e88d 0048 	stmia.w	sp, {r3, r6}
 8083b8e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8083b92:	6897      	ldr	r7, [r2, #8]
 8083b94:	4602      	mov	r2, r0
 8083b96:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8083b98:	47b8      	blx	r7
 8083b9a:	4603      	mov	r3, r0
 8083b9c:	b9b8      	cbnz	r0, 8083bce <mbedtls_cipher_finish+0xbe>
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 8083b9e:	f994 2008 	ldrsb.w	r2, [r4, #8]
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8083ba2:	4620      	mov	r0, r4
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 8083ba4:	b94a      	cbnz	r2, 8083bba <mbedtls_cipher_finish+0xaa>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8083ba6:	f7ff fd85 	bl	80836b4 <mbedtls_cipher_get_block_size>
                                     olen );
 8083baa:	462a      	mov	r2, r5
 8083bac:	4601      	mov	r1, r0
 8083bae:	4630      	mov	r0, r6
 8083bb0:	6923      	ldr	r3, [r4, #16]
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083bb2:	b003      	add	sp, #12
 8083bb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
                                     olen );
 8083bb8:	4718      	bx	r3

        /* Set output size for encryption */
        *olen = mbedtls_cipher_get_block_size( ctx );
 8083bba:	f7ff fd7b 	bl	80836b4 <mbedtls_cipher_get_block_size>
 8083bbe:	6028      	str	r0, [r5, #0]
 8083bc0:	e005      	b.n	8083bce <mbedtls_cipher_finish+0xbe>

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083bc2:	4805      	ldr	r0, [pc, #20]	; (8083bd8 <mbedtls_cipher_finish+0xc8>)
 8083bc4:	e004      	b.n	8083bd0 <mbedtls_cipher_finish+0xc0>
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8083bc6:	4805      	ldr	r0, [pc, #20]	; (8083bdc <mbedtls_cipher_finish+0xcc>)
 8083bc8:	e002      	b.n	8083bd0 <mbedtls_cipher_finish+0xc0>
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8083bca:	4802      	ldr	r0, [pc, #8]	; (8083bd4 <mbedtls_cipher_finish+0xc4>)
 8083bcc:	e000      	b.n	8083bd0 <mbedtls_cipher_finish+0xc0>
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8083bce:	4618      	mov	r0, r3
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083bd0:	b003      	add	sp, #12
 8083bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083bd4:	ffff9d80 	.word	0xffff9d80
 8083bd8:	ffff9f00 	.word	0xffff9f00
 8083bdc:	ffff9f80 	.word	0xffff9f80

08083be0 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8083be0:	b308      	cbz	r0, 8083c26 <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8083be2:	6803      	ldr	r3, [r0, #0]
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8083be4:	785b      	ldrb	r3, [r3, #1]
 8083be6:	2b02      	cmp	r3, #2
 8083be8:	d11d      	bne.n	8083c26 <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 8083bea:	2904      	cmp	r1, #4
 8083bec:	d81d      	bhi.n	8083c2a <mbedtls_cipher_set_padding_mode+0x4a>
 8083bee:	e8df f001 	tbb	[pc, r1]
 8083bf2:	0703      	.short	0x0703
 8083bf4:	110d      	.short	0x110d
 8083bf6:	15          	.byte	0x15
 8083bf7:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 8083bf8:	4b0d      	ldr	r3, [pc, #52]	; (8083c30 <mbedtls_cipher_set_padding_mode+0x50>)
 8083bfa:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 8083bfc:	4b0d      	ldr	r3, [pc, #52]	; (8083c34 <mbedtls_cipher_set_padding_mode+0x54>)
 8083bfe:	e002      	b.n	8083c06 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
 8083c00:	4b0d      	ldr	r3, [pc, #52]	; (8083c38 <mbedtls_cipher_set_padding_mode+0x58>)
 8083c02:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 8083c04:	4b0d      	ldr	r3, [pc, #52]	; (8083c3c <mbedtls_cipher_set_padding_mode+0x5c>)
 8083c06:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8083c08:	2000      	movs	r0, #0
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
        break;
 8083c0a:	4770      	bx	lr
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)
    case MBEDTLS_PADDING_ZEROS_AND_LEN:
        ctx->add_padding = add_zeros_and_len_padding;
 8083c0c:	4b0c      	ldr	r3, [pc, #48]	; (8083c40 <mbedtls_cipher_set_padding_mode+0x60>)
 8083c0e:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 8083c10:	4b0c      	ldr	r3, [pc, #48]	; (8083c44 <mbedtls_cipher_set_padding_mode+0x64>)
 8083c12:	e7f8      	b.n	8083c06 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)
    case MBEDTLS_PADDING_ZEROS:
        ctx->add_padding = add_zeros_padding;
 8083c14:	4b0c      	ldr	r3, [pc, #48]	; (8083c48 <mbedtls_cipher_set_padding_mode+0x68>)
 8083c16:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 8083c18:	4b0c      	ldr	r3, [pc, #48]	; (8083c4c <mbedtls_cipher_set_padding_mode+0x6c>)
 8083c1a:	e7f4      	b.n	8083c06 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
 8083c1c:	4a0c      	ldr	r2, [pc, #48]	; (8083c50 <mbedtls_cipher_set_padding_mode+0x70>)
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 8083c1e:	2300      	movs	r3, #0
 8083c20:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 8083c22:	6102      	str	r2, [r0, #16]
 8083c24:	e7f0      	b.n	8083c08 <mbedtls_cipher_set_padding_mode+0x28>
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083c26:	480b      	ldr	r0, [pc, #44]	; (8083c54 <mbedtls_cipher_set_padding_mode+0x74>)
 8083c28:	4770      	bx	lr
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
        break;

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8083c2a:	480b      	ldr	r0, [pc, #44]	; (8083c58 <mbedtls_cipher_set_padding_mode+0x78>)
    }

    return( 0 );
}
 8083c2c:	4770      	bx	lr
 8083c2e:	bf00      	nop
 8083c30:	080836bf 	.word	0x080836bf
 8083c34:	080836d9 	.word	0x080836d9
 8083c38:	0808372d 	.word	0x0808372d
 8083c3c:	080837e5 	.word	0x080837e5
 8083c40:	08083749 	.word	0x08083749
 8083c44:	0808376d 	.word	0x0808376d
 8083c48:	080837bd 	.word	0x080837bd
 8083c4c:	08083835 	.word	0x08083835
 8083c50:	080837d1 	.word	0x080837d1
 8083c54:	ffff9f00 	.word	0xffff9f00
 8083c58:	ffff9f80 	.word	0xffff9f80

08083c5c <mbedtls_cipher_setup>:

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 8083c5c:	b538      	push	{r3, r4, r5, lr}
 8083c5e:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 8083c60:	460d      	mov	r5, r1
 8083c62:	b181      	cbz	r1, 8083c86 <mbedtls_cipher_setup+0x2a>
 8083c64:	b178      	cbz	r0, 8083c86 <mbedtls_cipher_setup+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8083c66:	2240      	movs	r2, #64	; 0x40
 8083c68:	2100      	movs	r1, #0
 8083c6a:	f00f fc98 	bl	809359e <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8083c6e:	69ab      	ldr	r3, [r5, #24]
 8083c70:	695b      	ldr	r3, [r3, #20]
 8083c72:	4798      	blx	r3
 8083c74:	63e0      	str	r0, [r4, #60]	; 0x3c
 8083c76:	b140      	cbz	r0, 8083c8a <mbedtls_cipher_setup+0x2e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 8083c78:	6025      	str	r5, [r4, #0]
#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
    /*
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 8083c7a:	2100      	movs	r1, #0
 8083c7c:	4620      	mov	r0, r4
 8083c7e:	f7ff ffaf 	bl	8083be0 <mbedtls_cipher_set_padding_mode>
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 8083c82:	2000      	movs	r0, #0
 8083c84:	bd38      	pop	{r3, r4, r5, pc}
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    if( NULL == cipher_info || NULL == ctx )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083c86:	4802      	ldr	r0, [pc, #8]	; (8083c90 <mbedtls_cipher_setup+0x34>)
 8083c88:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8083c8a:	4802      	ldr	r0, [pc, #8]	; (8083c94 <mbedtls_cipher_setup+0x38>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 8083c8c:	bd38      	pop	{r3, r4, r5, pc}
 8083c8e:	bf00      	nop
 8083c90:	ffff9f00 	.word	0xffff9f00
 8083c94:	ffff9e80 	.word	0xffff9e80

08083c98 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 8083c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083c9a:	b085      	sub	sp, #20
 8083c9c:	4605      	mov	r5, r0
 8083c9e:	461f      	mov	r7, r3
 8083ca0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8083ca2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 8083ca4:	f7ff fe3e 	bl	8083924 <mbedtls_cipher_set_iv>
 8083ca8:	b9b0      	cbnz	r0, 8083cd8 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 8083caa:	4628      	mov	r0, r5
 8083cac:	f7ff fe5a 	bl	8083964 <mbedtls_cipher_reset>
 8083cb0:	b990      	cbnz	r0, 8083cd8 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 8083cb2:	9400      	str	r4, [sp, #0]
 8083cb4:	4633      	mov	r3, r6
 8083cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8083cb8:	4639      	mov	r1, r7
 8083cba:	4628      	mov	r0, r5
 8083cbc:	f7ff fe5e 	bl	808397c <mbedtls_cipher_update>
 8083cc0:	b950      	cbnz	r0, 8083cd8 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 8083cc2:	6821      	ldr	r1, [r4, #0]
 8083cc4:	aa03      	add	r2, sp, #12
 8083cc6:	4431      	add	r1, r6
 8083cc8:	4628      	mov	r0, r5
 8083cca:	f7ff ff21 	bl	8083b10 <mbedtls_cipher_finish>
 8083cce:	b918      	cbnz	r0, 8083cd8 <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 8083cd0:	6822      	ldr	r2, [r4, #0]
 8083cd2:	9b03      	ldr	r3, [sp, #12]
 8083cd4:	4413      	add	r3, r2
 8083cd6:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8083cd8:	b005      	add	sp, #20
 8083cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08083cdc <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083ce0:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083ce2:	4614      	mov	r4, r2
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083ce4:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083ce6:	9d07      	ldr	r5, [sp, #28]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083ce8:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083cea:	9e08      	ldr	r6, [sp, #32]
 8083cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8083cee:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8083cf2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8083cf6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8083cfa:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083cfe:	d112      	bne.n	8083d26 <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
 8083d00:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 8083d04:	9308      	str	r3, [sp, #32]
 8083d06:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8083d0a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8083d0e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8083d12:	960a      	str	r6, [sp, #40]	; 0x28
 8083d14:	9509      	str	r5, [sp, #36]	; 0x24
 8083d16:	9407      	str	r4, [sp, #28]
 8083d18:	460b      	mov	r3, r1
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083d1a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 8083d1e:	2101      	movs	r1, #1
 8083d20:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8083d22:	f004 b90a 	b.w	8087f3a <mbedtls_gcm_crypt_and_tag>
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083d26:	4801      	ldr	r0, [pc, #4]	; (8083d2c <mbedtls_cipher_auth_encrypt+0x50>)
 8083d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8083d2c:	ffff9f80 	.word	0xffff9f80

08083d30 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 8083d30:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083d32:	6805      	ldr	r5, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 8083d34:	b087      	sub	sp, #28
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083d36:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 8083d38:	460c      	mov	r4, r1
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083d3a:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 8083d3c:	990c      	ldr	r1, [sp, #48]	; 0x30
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083d3e:	d117      	bne.n	8083d70 <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
 8083d40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8083d42:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );
 8083d44:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8083d46:	9505      	str	r5, [sp, #20]
 8083d48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8083d4a:	9504      	str	r5, [sp, #16]
 8083d4c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8083d4e:	9503      	str	r5, [sp, #12]
 8083d50:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8083d52:	9502      	str	r5, [sp, #8]
 8083d54:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8083d56:	e88d 0028 	stmia.w	sp, {r3, r5}
 8083d5a:	4613      	mov	r3, r2
 8083d5c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8083d5e:	4622      	mov	r2, r4
 8083d60:	f004 f910 	bl	8087f84 <mbedtls_gcm_auth_decrypt>

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 8083d64:	4b04      	ldr	r3, [pc, #16]	; (8083d78 <mbedtls_cipher_auth_decrypt+0x48>)
 8083d66:	f110 0f12 	cmn.w	r0, #18
 8083d6a:	bf08      	it	eq
 8083d6c:	4618      	moveq	r0, r3
 8083d6e:	e000      	b.n	8083d72 <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8083d70:	4802      	ldr	r0, [pc, #8]	; (8083d7c <mbedtls_cipher_auth_decrypt+0x4c>)
}
 8083d72:	b007      	add	sp, #28
 8083d74:	bd30      	pop	{r4, r5, pc}
 8083d76:	bf00      	nop
 8083d78:	ffff9d00 	.word	0xffff9d00
 8083d7c:	ffff9f80 	.word	0xffff9f80

08083d80 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 8083d80:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 8083d82:	6803      	ldr	r3, [r0, #0]
 8083d84:	1acd      	subs	r5, r1, r3
 8083d86:	2d00      	cmp	r5, #0
 8083d88:	dc02      	bgt.n	8083d90 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8083d8a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8083d8e:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 8083d90:	781c      	ldrb	r4, [r3, #0]
 8083d92:	f014 0f80 	tst.w	r4, #128	; 0x80
 8083d96:	d104      	bne.n	8083da2 <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
 8083d98:	1c5c      	adds	r4, r3, #1
 8083d9a:	6004      	str	r4, [r0, #0]
 8083d9c:	781b      	ldrb	r3, [r3, #0]
 8083d9e:	6013      	str	r3, [r2, #0]
 8083da0:	e036      	b.n	8083e10 <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
 8083da2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8083da6:	3c01      	subs	r4, #1
 8083da8:	2c03      	cmp	r4, #3
 8083daa:	d838      	bhi.n	8083e1e <mbedtls_asn1_get_len+0x9e>
 8083dac:	e8df f004 	tbb	[pc, r4]
 8083db0:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
 8083db4:	2d01      	cmp	r5, #1
 8083db6:	d0e8      	beq.n	8083d8a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
 8083db8:	785b      	ldrb	r3, [r3, #1]
 8083dba:	6013      	str	r3, [r2, #0]
            (*p) += 2;
 8083dbc:	6803      	ldr	r3, [r0, #0]
 8083dbe:	3302      	adds	r3, #2
 8083dc0:	e025      	b.n	8083e0e <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
 8083dc2:	2d02      	cmp	r5, #2
 8083dc4:	dde1      	ble.n	8083d8a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8083dc6:	785c      	ldrb	r4, [r3, #1]
 8083dc8:	789b      	ldrb	r3, [r3, #2]
 8083dca:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8083dce:	6013      	str	r3, [r2, #0]
            (*p) += 3;
 8083dd0:	6803      	ldr	r3, [r0, #0]
 8083dd2:	3303      	adds	r3, #3
 8083dd4:	e01b      	b.n	8083e0e <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
 8083dd6:	2d03      	cmp	r5, #3
 8083dd8:	ddd7      	ble.n	8083d8a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8083dda:	789c      	ldrb	r4, [r3, #2]
 8083ddc:	785d      	ldrb	r5, [r3, #1]
 8083dde:	0224      	lsls	r4, r4, #8
 8083de0:	78db      	ldrb	r3, [r3, #3]
 8083de2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8083de6:	431c      	orrs	r4, r3
 8083de8:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 8083dea:	6803      	ldr	r3, [r0, #0]
 8083dec:	3304      	adds	r3, #4
 8083dee:	e00e      	b.n	8083e0e <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
 8083df0:	2d04      	cmp	r5, #4
 8083df2:	ddca      	ble.n	8083d8a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8083df4:	789c      	ldrb	r4, [r3, #2]
 8083df6:	785d      	ldrb	r5, [r3, #1]
 8083df8:	0424      	lsls	r4, r4, #16
 8083dfa:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
 8083dfe:	791c      	ldrb	r4, [r3, #4]
 8083e00:	78db      	ldrb	r3, [r3, #3]
 8083e02:	432c      	orrs	r4, r5
 8083e04:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8083e08:	6013      	str	r3, [r2, #0]
            (*p) += 5;
 8083e0a:	6803      	ldr	r3, [r0, #0]
 8083e0c:	3305      	adds	r3, #5
 8083e0e:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 8083e10:	6803      	ldr	r3, [r0, #0]
 8083e12:	1ac9      	subs	r1, r1, r3
 8083e14:	6813      	ldr	r3, [r2, #0]
 8083e16:	428b      	cmp	r3, r1
 8083e18:	d8b7      	bhi.n	8083d8a <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 8083e1a:	2000      	movs	r0, #0
 8083e1c:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8083e1e:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 8083e22:	bd30      	pop	{r4, r5, pc}

08083e24 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 8083e24:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 8083e26:	6804      	ldr	r4, [r0, #0]
 8083e28:	1b0e      	subs	r6, r1, r4
 8083e2a:	2e00      	cmp	r6, #0
 8083e2c:	dd07      	ble.n	8083e3e <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 8083e2e:	7826      	ldrb	r6, [r4, #0]
 8083e30:	429e      	cmp	r6, r3
 8083e32:	d107      	bne.n	8083e44 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 8083e34:	3401      	adds	r4, #1
 8083e36:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 8083e38:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
 8083e3a:	f7ff bfa1 	b.w	8083d80 <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8083e3e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8083e42:	e001      	b.n	8083e48 <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8083e44:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 8083e48:	bc70      	pop	{r4, r5, r6}
 8083e4a:	4770      	bx	lr

08083e4c <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8083e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8083e4e:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8083e50:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8083e52:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8083e54:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8083e56:	f7ff ffe5 	bl	8083e24 <mbedtls_asn1_get_tag>
 8083e5a:	b970      	cbnz	r0, 8083e7a <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
 8083e5c:	9b01      	ldr	r3, [sp, #4]
 8083e5e:	2b01      	cmp	r3, #1
 8083e60:	d109      	bne.n	8083e76 <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 8083e62:	6823      	ldr	r3, [r4, #0]
 8083e64:	781b      	ldrb	r3, [r3, #0]
 8083e66:	3300      	adds	r3, #0
 8083e68:	bf18      	it	ne
 8083e6a:	2301      	movne	r3, #1
 8083e6c:	602b      	str	r3, [r5, #0]
    (*p)++;
 8083e6e:	6823      	ldr	r3, [r4, #0]
 8083e70:	3301      	adds	r3, #1
 8083e72:	6023      	str	r3, [r4, #0]

    return( 0 );
 8083e74:	e001      	b.n	8083e7a <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8083e76:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
 8083e7a:	b003      	add	sp, #12
 8083e7c:	bd30      	pop	{r4, r5, pc}

08083e7e <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8083e7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083e80:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8083e82:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083e84:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8083e86:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083e88:	f7ff ffcc 	bl	8083e24 <mbedtls_asn1_get_tag>
 8083e8c:	b9c8      	cbnz	r0, 8083ec2 <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8083e8e:	9b01      	ldr	r3, [sp, #4]
 8083e90:	3b01      	subs	r3, #1
 8083e92:	2b03      	cmp	r3, #3
 8083e94:	d813      	bhi.n	8083ebe <mbedtls_asn1_get_int+0x40>
 8083e96:	6823      	ldr	r3, [r4, #0]
 8083e98:	f993 3000 	ldrsb.w	r3, [r3]
 8083e9c:	2b00      	cmp	r3, #0
 8083e9e:	db0e      	blt.n	8083ebe <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 8083ea0:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 8083ea2:	9801      	ldr	r0, [sp, #4]
 8083ea4:	1e43      	subs	r3, r0, #1
 8083ea6:	9301      	str	r3, [sp, #4]
 8083ea8:	b158      	cbz	r0, 8083ec2 <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
 8083eaa:	6823      	ldr	r3, [r4, #0]
 8083eac:	682a      	ldr	r2, [r5, #0]
 8083eae:	781b      	ldrb	r3, [r3, #0]
 8083eb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083eb4:	602b      	str	r3, [r5, #0]
        (*p)++;
 8083eb6:	6823      	ldr	r3, [r4, #0]
 8083eb8:	3301      	adds	r3, #1
 8083eba:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
 8083ebc:	e7f1      	b.n	8083ea2 <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8083ebe:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 8083ec2:	b003      	add	sp, #12
 8083ec4:	bd30      	pop	{r4, r5, pc}

08083ec6 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8083ec6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083ec8:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8083eca:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083ecc:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8083ece:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083ed0:	f7ff ffa8 	bl	8083e24 <mbedtls_asn1_get_tag>
 8083ed4:	b940      	cbnz	r0, 8083ee8 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 8083ed6:	9a01      	ldr	r2, [sp, #4]
 8083ed8:	6821      	ldr	r1, [r4, #0]
 8083eda:	4628      	mov	r0, r5
 8083edc:	f007 fea7 	bl	808bc2e <mbedtls_mpi_read_binary>

    *p += len;
 8083ee0:	6822      	ldr	r2, [r4, #0]
 8083ee2:	9b01      	ldr	r3, [sp, #4]
 8083ee4:	4413      	add	r3, r2
 8083ee6:	6023      	str	r3, [r4, #0]

    return( ret );
}
 8083ee8:	b003      	add	sp, #12
 8083eea:	bd30      	pop	{r4, r5, pc}

08083eec <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8083eec:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8083eee:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8083ef0:	4604      	mov	r4, r0
 8083ef2:	460e      	mov	r6, r1
 8083ef4:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8083ef6:	f7ff ff95 	bl	8083e24 <mbedtls_asn1_get_tag>
 8083efa:	b9d8      	cbnz	r0, 8083f34 <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 8083efc:	6813      	ldr	r3, [r2, #0]
 8083efe:	b1a3      	cbz	r3, 8083f2a <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 8083f00:	3b01      	subs	r3, #1
 8083f02:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8083f04:	6823      	ldr	r3, [r4, #0]
 8083f06:	781b      	ldrb	r3, [r3, #0]
    if( bs->unused_bits > 7 )
 8083f08:	2b07      	cmp	r3, #7
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8083f0a:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
 8083f0c:	d810      	bhi.n	8083f30 <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 8083f0e:	6823      	ldr	r3, [r4, #0]
 8083f10:	3301      	adds	r3, #1
 8083f12:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 8083f14:	6093      	str	r3, [r2, #8]
    *p += bs->len;
 8083f16:	6822      	ldr	r2, [r4, #0]
 8083f18:	682b      	ldr	r3, [r5, #0]
 8083f1a:	4413      	add	r3, r2

    if( *p != end )
 8083f1c:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 8083f1e:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 8083f20:	bf14      	ite	ne
 8083f22:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 8083f26:	2000      	moveq	r0, #0
 8083f28:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8083f2a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8083f2e:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8083f30:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8083f34:	bd70      	pop	{r4, r5, r6, pc}

08083f36 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 8083f36:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8083f38:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 8083f3a:	4604      	mov	r4, r0
 8083f3c:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8083f3e:	f7ff ff71 	bl	8083e24 <mbedtls_asn1_get_tag>
 8083f42:	b958      	cbnz	r0, 8083f5c <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 8083f44:	6813      	ldr	r3, [r2, #0]
 8083f46:	1e5a      	subs	r2, r3, #1
 8083f48:	2b01      	cmp	r3, #1
 8083f4a:	602a      	str	r2, [r5, #0]
 8083f4c:	d904      	bls.n	8083f58 <mbedtls_asn1_get_bitstring_null+0x22>
 8083f4e:	6823      	ldr	r3, [r4, #0]
 8083f50:	1c5a      	adds	r2, r3, #1
 8083f52:	6022      	str	r2, [r4, #0]
 8083f54:	7818      	ldrb	r0, [r3, #0]
 8083f56:	b108      	cbz	r0, 8083f5c <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8083f58:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 8083f5c:	bd38      	pop	{r3, r4, r5, pc}

08083f5e <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 8083f5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8083f62:	4615      	mov	r5, r2
 8083f64:	461f      	mov	r7, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083f66:	aa01      	add	r2, sp, #4
 8083f68:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 8083f6a:	4604      	mov	r4, r0
 8083f6c:	460e      	mov	r6, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083f6e:	f7ff ff59 	bl	8083e24 <mbedtls_asn1_get_tag>
 8083f72:	bb68      	cbnz	r0, 8083fd0 <mbedtls_asn1_get_sequence_of+0x72>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 8083f74:	6822      	ldr	r2, [r4, #0]
 8083f76:	9b01      	ldr	r3, [sp, #4]
 8083f78:	4413      	add	r3, r2
 8083f7a:	429e      	cmp	r6, r3
 8083f7c:	d01d      	beq.n	8083fba <mbedtls_asn1_get_sequence_of+0x5c>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8083f7e:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8083f82:	e025      	b.n	8083fd0 <mbedtls_asn1_get_sequence_of+0x72>

    while( *p < end )
 8083f84:	6823      	ldr	r3, [r4, #0]
 8083f86:	429e      	cmp	r6, r3
 8083f88:	d91a      	bls.n	8083fc0 <mbedtls_asn1_get_sequence_of+0x62>
    {
        buf = &(cur->buf);
        buf->tag = **p;
 8083f8a:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8083f8c:	4642      	mov	r2, r8
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;
 8083f8e:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8083f90:	4631      	mov	r1, r6
 8083f92:	463b      	mov	r3, r7
 8083f94:	4620      	mov	r0, r4
 8083f96:	f7ff ff45 	bl	8083e24 <mbedtls_asn1_get_tag>
 8083f9a:	b9c8      	cbnz	r0, 8083fd0 <mbedtls_asn1_get_sequence_of+0x72>
            return( ret );

        buf->p = *p;
 8083f9c:	6823      	ldr	r3, [r4, #0]
 8083f9e:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
 8083fa0:	6822      	ldr	r2, [r4, #0]
 8083fa2:	686b      	ldr	r3, [r5, #4]
 8083fa4:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
 8083fa6:	429e      	cmp	r6, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
 8083fa8:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 8083faa:	d9eb      	bls.n	8083f84 <mbedtls_asn1_get_sequence_of+0x26>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 8083fac:	2110      	movs	r1, #16
 8083fae:	2001      	movs	r0, #1
 8083fb0:	f00f f9b2 	bl	8093318 <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
 8083fb4:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
 8083fb6:	b148      	cbz	r0, 8083fcc <mbedtls_asn1_get_sequence_of+0x6e>
 8083fb8:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8083fba:	f105 0804 	add.w	r8, r5, #4
 8083fbe:	e7e1      	b.n	8083f84 <mbedtls_asn1_get_sequence_of+0x26>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8083fc0:	2000      	movs	r0, #0
 8083fc2:	60e8      	str	r0, [r5, #12]

    if( *p != end )
 8083fc4:	6823      	ldr	r3, [r4, #0]
 8083fc6:	429e      	cmp	r6, r3
 8083fc8:	d002      	beq.n	8083fd0 <mbedtls_asn1_get_sequence_of+0x72>
 8083fca:	e7d8      	b.n	8083f7e <mbedtls_asn1_get_sequence_of+0x20>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8083fcc:	f06f 0069 	mvn.w	r0, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8083fd0:	b002      	add	sp, #8
 8083fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08083fd6 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8083fd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8083fd8:	4617      	mov	r7, r2
 8083fda:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083fdc:	aa01      	add	r2, sp, #4
 8083fde:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8083fe0:	4604      	mov	r4, r0
 8083fe2:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083fe4:	f7ff ff1e 	bl	8083e24 <mbedtls_asn1_get_tag>
 8083fe8:	2800      	cmp	r0, #0
 8083fea:	d13a      	bne.n	8084062 <mbedtls_asn1_get_alg+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 8083fec:	6823      	ldr	r3, [r4, #0]
 8083fee:	1af6      	subs	r6, r6, r3
 8083ff0:	2e00      	cmp	r6, #0
 8083ff2:	dd31      	ble.n	8084058 <mbedtls_asn1_get_alg+0x82>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 8083ff4:	463a      	mov	r2, r7
 8083ff6:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8083ff8:	4620      	mov	r0, r4
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 8083ffa:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 8083ffe:	6826      	ldr	r6, [r4, #0]
 8084000:	9b01      	ldr	r3, [sp, #4]
 8084002:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8084004:	4631      	mov	r1, r6
 8084006:	2306      	movs	r3, #6
 8084008:	f7ff ff0c 	bl	8083e24 <mbedtls_asn1_get_tag>
 808400c:	bb48      	cbnz	r0, 8084062 <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    alg->p = *p;
 808400e:	6823      	ldr	r3, [r4, #0]
 8084010:	60bb      	str	r3, [r7, #8]
    *p += alg->len;
 8084012:	6822      	ldr	r2, [r4, #0]
 8084014:	687b      	ldr	r3, [r7, #4]
 8084016:	18d1      	adds	r1, r2, r3

    if( *p == end )
 8084018:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
 808401a:	6021      	str	r1, [r4, #0]

    if( *p == end )
 808401c:	d106      	bne.n	808402c <mbedtls_asn1_get_alg+0x56>
 808401e:	f105 030c 	add.w	r3, r5, #12
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8084022:	429d      	cmp	r5, r3
 8084024:	d016      	beq.n	8084054 <mbedtls_asn1_get_alg+0x7e>
 8084026:	7028      	strb	r0, [r5, #0]
 8084028:	3501      	adds	r5, #1
 808402a:	e7fa      	b.n	8084022 <mbedtls_asn1_get_alg+0x4c>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
 808402c:	5cd3      	ldrb	r3, [r2, r3]
 808402e:	462a      	mov	r2, r5
 8084030:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
 8084034:	6823      	ldr	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8084036:	4631      	mov	r1, r6
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
    (*p)++;
 8084038:	3301      	adds	r3, #1
 808403a:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 808403c:	4620      	mov	r0, r4
 808403e:	f7ff fe9f 	bl	8083d80 <mbedtls_asn1_get_len>
 8084042:	b970      	cbnz	r0, 8084062 <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    params->p = *p;
 8084044:	6823      	ldr	r3, [r4, #0]
 8084046:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 8084048:	6822      	ldr	r2, [r4, #0]
 808404a:	686b      	ldr	r3, [r5, #4]
 808404c:	4413      	add	r3, r2

    if( *p != end )
 808404e:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
 8084050:	6023      	str	r3, [r4, #0]

    if( *p != end )
 8084052:	d104      	bne.n	808405e <mbedtls_asn1_get_alg+0x88>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 8084054:	2000      	movs	r0, #0
 8084056:	e004      	b.n	8084062 <mbedtls_asn1_get_alg+0x8c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8084058:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 808405c:	e001      	b.n	8084062 <mbedtls_asn1_get_alg+0x8c>

    params->p = *p;
    *p += params->len;

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808405e:	f06f 0065 	mvn.w	r0, #101	; 0x65

    return( 0 );
}
 8084062:	b003      	add	sp, #12
 8084064:	bdf0      	pop	{r4, r5, r6, r7, pc}

08084066 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 8084066:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 8084068:	2300      	movs	r3, #0
 808406a:	9301      	str	r3, [sp, #4]
 808406c:	9302      	str	r3, [sp, #8]
 808406e:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 8084070:	ab01      	add	r3, sp, #4
 8084072:	f7ff ffb0 	bl	8083fd6 <mbedtls_asn1_get_alg>
 8084076:	b960      	cbnz	r0, 8084092 <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 8084078:	9b01      	ldr	r3, [sp, #4]
 808407a:	2b05      	cmp	r3, #5
 808407c:	d000      	beq.n	8084080 <mbedtls_asn1_get_alg_null+0x1a>
 808407e:	b933      	cbnz	r3, 808408e <mbedtls_asn1_get_alg_null+0x28>
 8084080:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );

    return( 0 );
 8084082:	2b00      	cmp	r3, #0
 8084084:	bf14      	ite	ne
 8084086:	f06f 0067 	mvnne.w	r0, #103	; 0x67
 808408a:	2000      	moveq	r0, #0
 808408c:	e001      	b.n	8084092 <mbedtls_asn1_get_alg_null+0x2c>

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 808408e:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 8084092:	b005      	add	sp, #20
 8084094:	f85d fb04 	ldr.w	pc, [sp], #4

08084098 <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
 8084098:	f001 bbee 	b.w	8085878 <mbedtls_internal_sha1_process>

0808409c <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
 808409c:	f001 bbcc 	b.w	8085838 <mbedtls_sha1_clone>

080840a0 <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
 80840a0:	b510      	push	{r4, lr}
 80840a2:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 80840a4:	f001 fbbe 	bl	8085824 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 80840a8:	4620      	mov	r0, r4
}
 80840aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
 80840ae:	f00d baeb 	b.w	8091688 <free>

080840b2 <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
 80840b2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 80840b4:	215c      	movs	r1, #92	; 0x5c
 80840b6:	2001      	movs	r0, #1
 80840b8:	f00f f92e 	bl	8093318 <calloc>

    if( ctx != NULL )
 80840bc:	4604      	mov	r4, r0
 80840be:	b108      	cbz	r0, 80840c4 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 80840c0:	f001 fbac 	bl	808581c <mbedtls_sha1_init>

    return( ctx );
}
 80840c4:	4620      	mov	r0, r4
 80840c6:	bd10      	pop	{r4, pc}

080840c8 <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 80840c8:	f002 bbc2 	b.w	8086850 <mbedtls_sha1_finish_ret>

080840cc <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
 80840cc:	f002 bb86 	b.w	80867dc <mbedtls_sha1_update_ret>

080840d0 <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 80840d0:	f001 bbb8 	b.w	8085844 <mbedtls_sha1_starts_ret>

080840d4 <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
 80840d4:	f7fe bd2c 	b.w	8082b30 <mbedtls_internal_sha256_process>

080840d8 <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
 80840d8:	f7fe bcd4 	b.w	8082a84 <mbedtls_sha256_clone>

080840dc <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 80840dc:	b510      	push	{r4, lr}
 80840de:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 80840e0:	f7fe fcc6 	bl	8082a70 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 80840e4:	4620      	mov	r0, r4
}
 80840e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 80840ea:	f00d bacd 	b.w	8091688 <free>

080840ee <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 80840ee:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 80840f0:	216c      	movs	r1, #108	; 0x6c
 80840f2:	2001      	movs	r0, #1
 80840f4:	f00f f910 	bl	8093318 <calloc>

    if( ctx != NULL )
 80840f8:	4604      	mov	r4, r0
 80840fa:	b108      	cbz	r0, 8084100 <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 80840fc:	f7fe fcb4 	bl	8082a68 <mbedtls_sha256_init>

    return( ctx );
}
 8084100:	4620      	mov	r0, r4
 8084102:	bd10      	pop	{r4, pc}

08084104 <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 8084104:	2301      	movs	r3, #1
 8084106:	f7ff b94e 	b.w	80833a6 <mbedtls_sha256_ret>

0808410a <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 808410a:	2300      	movs	r3, #0
 808410c:	f7ff b94b 	b.w	80833a6 <mbedtls_sha256_ret>

08084110 <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
 8084110:	f7ff b8b2 	b.w	8083278 <mbedtls_sha256_finish_ret>

08084114 <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
 8084114:	f7ff b876 	b.w	8083204 <mbedtls_sha256_update_ret>

08084118 <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 8084118:	2101      	movs	r1, #1
 808411a:	f7fe bcb9 	b.w	8082a90 <mbedtls_sha256_starts_ret>

0808411e <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 808411e:	2100      	movs	r1, #0
 8084120:	f7fe bcb6 	b.w	8082a90 <mbedtls_sha256_starts_ret>

08084124 <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
 8084124:	f00a b928 	b.w	808e378 <mbedtls_internal_sha512_process>

08084128 <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
 8084128:	f00a b884 	b.w	808e234 <mbedtls_sha512_clone>

0808412c <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
 808412c:	b510      	push	{r4, lr}
 808412e:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 8084130:	f00a f876 	bl	808e220 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 8084134:	4620      	mov	r0, r4
}
 8084136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
 808413a:	f00d baa5 	b.w	8091688 <free>

0808413e <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
 808413e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 8084140:	21d8      	movs	r1, #216	; 0xd8
 8084142:	2001      	movs	r0, #1
 8084144:	f00f f8e8 	bl	8093318 <calloc>

    if( ctx != NULL )
 8084148:	4604      	mov	r4, r0
 808414a:	b108      	cbz	r0, 8084150 <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 808414c:	f00a f864 	bl	808e218 <mbedtls_sha512_init>

    return( ctx );
}
 8084150:	4620      	mov	r0, r4
 8084152:	bd10      	pop	{r4, pc}

08084154 <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 8084154:	2301      	movs	r3, #1
 8084156:	f00b b8ca 	b.w	808f2ee <mbedtls_sha512_ret>

0808415a <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 808415a:	2300      	movs	r3, #0
 808415c:	f00b b8c7 	b.w	808f2ee <mbedtls_sha512_ret>

08084160 <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
 8084160:	f00a bf92 	b.w	808f088 <mbedtls_sha512_finish_ret>

08084164 <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
 8084164:	f00a bf48 	b.w	808eff8 <mbedtls_sha512_update_ret>

08084168 <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 8084168:	2101      	movs	r1, #1
 808416a:	f00a b869 	b.w	808e240 <mbedtls_sha512_starts_ret>

0808416e <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 808416e:	2100      	movs	r1, #0
 8084170:	f00a b866 	b.w	808e240 <mbedtls_sha512_starts_ret>

08084174 <_ZL15mbedtls_zeroizePvj>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8084174:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8084176:	2300      	movs	r3, #0
 8084178:	4288      	cmp	r0, r1
 808417a:	d002      	beq.n	8084182 <_ZL15mbedtls_zeroizePvj+0xe>
 808417c:	7003      	strb	r3, [r0, #0]
 808417e:	3001      	adds	r0, #1
 8084180:	e7fa      	b.n	8084178 <_ZL15mbedtls_zeroizePvj+0x4>
 8084182:	4770      	bx	lr

08084184 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8084184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084188:	b095      	sub	sp, #84	; 0x54
 808418a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 808418c:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 808418e:	4607      	mov	r7, r0
 8084190:	460c      	mov	r4, r1
 8084192:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8084194:	2100      	movs	r1, #0
 8084196:	2240      	movs	r2, #64	; 0x40
 8084198:	4630      	mov	r0, r6
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 808419a:	9301      	str	r3, [sp, #4]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 808419c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 80841a0:	f00f f9fd 	bl	809359e <memset>
    memset( counter, 0, 4 );
 80841a4:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 80841a6:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 80841a8:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 80841ac:	f004 f900 	bl	80883b0 <mbedtls_md_get_size>
 80841b0:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 80841b2:	b37c      	cbz	r4, 8084214 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
 80841b4:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 80841b6:	4628      	mov	r0, r5
 80841b8:	46a3      	mov	fp, r4
 80841ba:	bf28      	it	cs
 80841bc:	46d3      	movcs	fp, sl
 80841be:	f004 f807 	bl	80881d0 <mbedtls_md_starts>
 80841c2:	4602      	mov	r2, r0
 80841c4:	bb38      	cbnz	r0, 8084216 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 80841c6:	9a01      	ldr	r2, [sp, #4]
 80841c8:	4649      	mov	r1, r9
 80841ca:	4628      	mov	r0, r5
 80841cc:	f004 f80a 	bl	80881e4 <mbedtls_md_update>
 80841d0:	4602      	mov	r2, r0
 80841d2:	bb00      	cbnz	r0, 8084216 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 80841d4:	2204      	movs	r2, #4
 80841d6:	4641      	mov	r1, r8
 80841d8:	4628      	mov	r0, r5
 80841da:	f004 f803 	bl	80881e4 <mbedtls_md_update>
 80841de:	4602      	mov	r2, r0
 80841e0:	b9c8      	cbnz	r0, 8084216 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 80841e2:	4631      	mov	r1, r6
 80841e4:	4628      	mov	r0, r5
 80841e6:	f004 f807 	bl	80881f8 <mbedtls_md_finish>
 80841ea:	4602      	mov	r2, r0
 80841ec:	b998      	cbnz	r0, 8084216 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
 80841ee:	463b      	mov	r3, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
 80841f0:	455a      	cmp	r2, fp
 80841f2:	d007      	beq.n	8084204 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
 80841f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80841f8:	5cb1      	ldrb	r1, [r6, r2]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 80841fa:	3201      	adds	r2, #1
            *p++ ^= mask[i];
 80841fc:	4041      	eors	r1, r0
 80841fe:	f803 1c01 	strb.w	r1, [r3, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 8084202:	e7f5      	b.n	80841f0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
 8084204:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8084208:	4417      	add	r7, r2
 808420a:	3301      	adds	r3, #1
 808420c:	f88d 300f 	strb.w	r3, [sp, #15]

        dlen -= use_len;
 8084210:	1aa4      	subs	r4, r4, r2
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 8084212:	e7ce      	b.n	80841b2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
 8084214:	4622      	mov	r2, r4

        dlen -= use_len;
    }

exit:
    mbedtls_zeroize( mask, sizeof( mask ) );
 8084216:	4630      	mov	r0, r6
 8084218:	2140      	movs	r1, #64	; 0x40
 808421a:	f7ff ffab 	bl	8084174 <_ZL15mbedtls_zeroizePvj>

    return( ret );
}
 808421e:	4610      	mov	r0, r2
 8084220:	b015      	add	sp, #84	; 0x54
 8084222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08084228 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8084228:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 808422c:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 808422e:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8084230:	460e      	mov	r6, r1
 8084232:	4691      	mov	r9, r2
 8084234:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 8084238:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 808423a:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 808423c:	4604      	mov	r4, r0
 808423e:	b328      	cbz	r0, 808428c <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 8084240:	f003 ff72 	bl	8088128 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8084244:	4606      	mov	r6, r0
 8084246:	2800      	cmp	r0, #0
 8084248:	d063      	beq.n	8084312 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 808424a:	4620      	mov	r0, r4
 808424c:	466a      	mov	r2, sp
 808424e:	a901      	add	r1, sp, #4
 8084250:	f001 fa9a 	bl	8085788 <mbedtls_oid_get_oid_by_md>
 8084254:	4604      	mov	r4, r0
 8084256:	2800      	cmp	r0, #0
 8084258:	d15b      	bne.n	8084312 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 808425a:	4630      	mov	r0, r6
 808425c:	f004 f8a8 	bl	80883b0 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8084260:	9f00      	ldr	r7, [sp, #0]
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8084262:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8084264:	4407      	add	r7, r0
 8084266:	f107 0308 	add.w	r3, r7, #8
 808426a:	2b7f      	cmp	r3, #127	; 0x7f
 808426c:	d851      	bhi.n	8084312 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 808426e:	f110 020a 	adds.w	r2, r0, #10
 8084272:	d24e      	bcs.n	8084312 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 8084274:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
 8084278:	429a      	cmp	r2, r3
 808427a:	d84a      	bhi.n	8084312 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 808427c:	429d      	cmp	r5, r3
 808427e:	d348      	bcc.n	8084312 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
 8084280:	f1a5 030a 	sub.w	r3, r5, #10
 8084284:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8084286:	2f0a      	cmp	r7, #10
 8084288:	d806      	bhi.n	8084298 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
 808428a:	e042      	b.n	8084312 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
 808428c:	428d      	cmp	r5, r1
 808428e:	d340      	bcc.n	8084312 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
 8084290:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8084292:	2d0a      	cmp	r5, #10
 8084294:	d93d      	bls.n	8084312 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 8084296:	e03e      	b.n	8084316 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8084298:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 808429a:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 808429c:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 80842a0:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 80842a2:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
 80842a4:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
 80842a8:	21ff      	movs	r1, #255	; 0xff
 80842aa:	4650      	mov	r0, sl
 80842ac:	f00f f977 	bl	809359e <memset>
    p += nb_pad;
 80842b0:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80842b4:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
 80842b6:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80842ba:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80842bc:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80842be:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80842c0:	f107 0208 	add.w	r2, r7, #8
 80842c4:	4432      	add	r2, r6
 80842c6:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 80842c8:	b2fa      	uxtb	r2, r7
 80842ca:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
 80842cc:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 80842d0:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 80842d2:	2106      	movs	r1, #6
 80842d4:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 80842d6:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 80842d8:	9901      	ldr	r1, [sp, #4]
 80842da:	463a      	mov	r2, r7
 80842dc:	4650      	mov	r0, sl
 80842de:	f00f f938 	bl	8093552 <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
 80842e2:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
 80842e4:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
 80842e8:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80842ec:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
 80842ee:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80842f0:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
 80842f2:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
 80842f4:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
 80842f6:	4632      	mov	r2, r6
 80842f8:	4649      	mov	r1, r9
 80842fa:	4638      	mov	r0, r7
 80842fc:	f00f f929 	bl	8093552 <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 8084300:	443e      	add	r6, r7
 8084302:	eb08 0305 	add.w	r3, r8, r5
 8084306:	429e      	cmp	r6, r3
 8084308:	d019      	beq.n	808433e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_zeroize( dst, dst_len );
 808430a:	4629      	mov	r1, r5
 808430c:	4640      	mov	r0, r8
 808430e:	f7ff ff31 	bl	8084174 <_ZL15mbedtls_zeroizePvj>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084312:	4c0d      	ldr	r4, [pc, #52]	; (8084348 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
 8084314:	e013      	b.n	808433e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8084316:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 8084318:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 808431a:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 808431e:	2201      	movs	r2, #1
 8084320:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
 8084324:	21ff      	movs	r1, #255	; 0xff
 8084326:	463a      	mov	r2, r7
 8084328:	4618      	mov	r0, r3
 808432a:	f00f f938 	bl	809359e <memset>
 808432e:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
 8084330:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
 8084332:	1ea8      	subs	r0, r5, #2
 8084334:	4632      	mov	r2, r6
 8084336:	4649      	mov	r1, r9
 8084338:	4418      	add	r0, r3
 808433a:	f00f f90a 	bl	8093552 <memcpy>
        mbedtls_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 808433e:	4620      	mov	r0, r4
 8084340:	b002      	add	sp, #8
 8084342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084346:	bf00      	nop
 8084348:	ffffbf80 	.word	0xffffbf80

0808434c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 808434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 808434e:	f100 0508 	add.w	r5, r0, #8
 8084352:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8084354:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8084356:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8084358:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 808435a:	f007 fc62 	bl	808bc22 <mbedtls_mpi_size>
 808435e:	4287      	cmp	r7, r0
 8084360:	d117      	bne.n	8084392 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
 8084362:	6863      	ldr	r3, [r4, #4]
 8084364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8084368:	d813      	bhi.n	8084392 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 808436a:	2100      	movs	r1, #0
 808436c:	4628      	mov	r0, r5
 808436e:	f007 fe29 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 8084372:	2800      	cmp	r0, #0
 8084374:	dd0d      	ble.n	8084392 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 8084376:	2100      	movs	r1, #0
 8084378:	4628      	mov	r0, r5
 808437a:	f007 fc08 	bl	808bb8e <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 808437e:	b140      	cbz	r0, 8084392 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 8084380:	b1ee      	cbz	r6, 80843be <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8084382:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8084386:	2100      	movs	r1, #0
 8084388:	4628      	mov	r0, r5
 808438a:	f007 fe1b 	bl	808bfc4 <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 808438e:	2800      	cmp	r0, #0
 8084390:	dc01      	bgt.n	8084396 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084392:	481a      	ldr	r0, [pc, #104]	; (80843fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
 8084394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8084396:	2100      	movs	r1, #0
 8084398:	4628      	mov	r0, r5
 808439a:	f007 fbf8 	bl	808bb8e <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 808439e:	2800      	cmp	r0, #0
 80843a0:	d0f7      	beq.n	8084392 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 80843a2:	f104 0538 	add.w	r5, r4, #56	; 0x38
 80843a6:	2100      	movs	r1, #0
 80843a8:	4628      	mov	r0, r5
 80843aa:	f007 fe0b 	bl	808bfc4 <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 80843ae:	2800      	cmp	r0, #0
 80843b0:	ddef      	ble.n	8084392 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 80843b2:	2100      	movs	r1, #0
 80843b4:	4628      	mov	r0, r5
 80843b6:	f007 fbea 	bl	808bb8e <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 80843ba:	2800      	cmp	r0, #0
 80843bc:	d0e9      	beq.n	8084392 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 80843be:	2100      	movs	r1, #0
 80843c0:	f104 0014 	add.w	r0, r4, #20
 80843c4:	f007 fdfe 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 80843c8:	2800      	cmp	r0, #0
 80843ca:	dde2      	ble.n	8084392 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 80843cc:	b1a6      	cbz	r6, 80843f8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 80843ce:	2100      	movs	r1, #0
 80843d0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80843d4:	f007 fdf6 	bl	808bfc4 <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 80843d8:	2800      	cmp	r0, #0
 80843da:	ddda      	ble.n	8084392 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 80843dc:	2100      	movs	r1, #0
 80843de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80843e2:	f007 fdef 	bl	808bfc4 <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 80843e6:	2800      	cmp	r0, #0
 80843e8:	ddd3      	ble.n	8084392 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 80843ea:	2100      	movs	r1, #0
 80843ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80843f0:	f007 fde8 	bl	808bfc4 <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 80843f4:	2800      	cmp	r0, #0
 80843f6:	ddcc      	ble.n	8084392 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
 80843f8:	2000      	movs	r0, #0
 80843fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80843fc:	ffffbf80 	.word	0xffffbf80

08084400 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 8084400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8084404:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8084406:	4604      	mov	r4, r0
 8084408:	4698      	mov	r8, r3
 808440a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 808440c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;

    if( N != NULL )
 808440e:	b149      	cbz	r1, 8084424 <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 8084410:	f100 0908 	add.w	r9, r0, #8
 8084414:	4648      	mov	r0, r9
 8084416:	f007 fc0a 	bl	808bc2e <mbedtls_mpi_read_binary>
 808441a:	bb50      	cbnz	r0, 8084472 <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 808441c:	4648      	mov	r0, r9
 808441e:	f007 fc00 	bl	808bc22 <mbedtls_mpi_size>
 8084422:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
 8084424:	f1b8 0f00 	cmp.w	r8, #0
 8084428:	d101      	bne.n	808442e <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
 808442a:	b947      	cbnz	r7, 808443e <mbedtls_rsa_import_raw+0x3e>
 808442c:	e00e      	b.n	808444c <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 808442e:	9a08      	ldr	r2, [sp, #32]
 8084430:	4641      	mov	r1, r8
 8084432:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8084436:	f007 fbfa 	bl	808bc2e <mbedtls_mpi_read_binary>
 808443a:	b9d0      	cbnz	r0, 8084472 <mbedtls_rsa_import_raw+0x72>
 808443c:	e7f5      	b.n	808442a <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 808443e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8084440:	4639      	mov	r1, r7
 8084442:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8084446:	f007 fbf2 	bl	808bc2e <mbedtls_mpi_read_binary>
 808444a:	b990      	cbnz	r0, 8084472 <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
 808444c:	b136      	cbz	r6, 808445c <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 808444e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8084450:	4631      	mov	r1, r6
 8084452:	f104 0020 	add.w	r0, r4, #32
 8084456:	f007 fbea 	bl	808bc2e <mbedtls_mpi_read_binary>
 808445a:	b950      	cbnz	r0, 8084472 <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
 808445c:	b135      	cbz	r5, 808446c <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 808445e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8084460:	4629      	mov	r1, r5
 8084462:	f104 0014 	add.w	r0, r4, #20
 8084466:	f007 fbe2 	bl	808bc2e <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
 808446a:	b910      	cbnz	r0, 8084472 <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
 808446c:	2000      	movs	r0, #0
 808446e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8084472:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
 8084476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0808447c <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 808447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8084480:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 8084484:	b087      	sub	sp, #28
 8084486:	4607      	mov	r7, r0
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8084488:	2100      	movs	r1, #0
 808448a:	4658      	mov	r0, fp
 808448c:	f007 fd9a 	bl	808bfc4 <mbedtls_mpi_cmp_int>
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8084490:	f107 092c 	add.w	r9, r7, #44	; 0x2c
 8084494:	2100      	movs	r1, #0

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8084496:	4680      	mov	r8, r0
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8084498:	4648      	mov	r0, r9
 808449a:	f007 fd93 	bl	808bfc4 <mbedtls_mpi_cmp_int>
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 808449e:	f107 0a38 	add.w	sl, r7, #56	; 0x38
int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80844a2:	9005      	str	r0, [sp, #20]
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80844a4:	2100      	movs	r1, #0
 80844a6:	4650      	mov	r0, sl
 80844a8:	f007 fd8c 	bl	808bfc4 <mbedtls_mpi_cmp_int>
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80844ac:	f107 0320 	add.w	r3, r7, #32
 80844b0:	2100      	movs	r1, #0
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80844b2:	4605      	mov	r5, r0
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80844b4:	4618      	mov	r0, r3
 80844b6:	9302      	str	r3, [sp, #8]
 80844b8:	f007 fd84 	bl	808bfc4 <mbedtls_mpi_cmp_int>
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 80844bc:	f107 0314 	add.w	r3, r7, #20
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80844c0:	9004      	str	r0, [sp, #16]
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 80844c2:	2100      	movs	r1, #0
 80844c4:	4618      	mov	r0, r3
 80844c6:	9303      	str	r3, [sp, #12]
 80844c8:	f007 fd7c 	bl	808bfc4 <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80844cc:	9b05      	ldr	r3, [sp, #20]
 80844ce:	9a04      	ldr	r2, [sp, #16]
 80844d0:	b14b      	cbz	r3, 80844e6 <mbedtls_rsa_complete+0x6a>
 80844d2:	b125      	cbz	r5, 80844de <mbedtls_rsa_complete+0x62>
 80844d4:	b12a      	cbz	r2, 80844e2 <mbedtls_rsa_complete+0x66>
 80844d6:	1c06      	adds	r6, r0, #0
 80844d8:	bf18      	it	ne
 80844da:	2601      	movne	r6, #1
 80844dc:	e013      	b.n	8084506 <mbedtls_rsa_complete+0x8a>
 80844de:	462e      	mov	r6, r5
 80844e0:	e011      	b.n	8084506 <mbedtls_rsa_complete+0x8a>
 80844e2:	4616      	mov	r6, r2
 80844e4:	e00f      	b.n	8084506 <mbedtls_rsa_complete+0x8a>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80844e6:	f1b8 0f00 	cmp.w	r8, #0
 80844ea:	d103      	bne.n	80844f4 <mbedtls_rsa_complete+0x78>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80844ec:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80844ee:	4646      	mov	r6, r8
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80844f0:	2200      	movs	r2, #0
 80844f2:	e024      	b.n	808453e <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80844f4:	b9cd      	cbnz	r5, 808452a <mbedtls_rsa_complete+0xae>
 80844f6:	b11a      	cbz	r2, 8084500 <mbedtls_rsa_complete+0x84>
 80844f8:	b9f0      	cbnz	r0, 8084538 <mbedtls_rsa_complete+0xbc>
 80844fa:	4606      	mov	r6, r0
 80844fc:	4604      	mov	r4, r0
 80844fe:	e00e      	b.n	808451e <mbedtls_rsa_complete+0xa2>
 8084500:	462e      	mov	r6, r5
 8084502:	462c      	mov	r4, r5
 8084504:	e00d      	b.n	8084522 <mbedtls_rsa_complete+0xa6>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8084506:	b1ad      	cbz	r5, 8084534 <mbedtls_rsa_complete+0xb8>
 8084508:	b992      	cbnz	r2, 8084530 <mbedtls_rsa_complete+0xb4>
 808450a:	1c04      	adds	r4, r0, #0
 808450c:	bf18      	it	ne
 808450e:	2401      	movne	r4, #1
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 8084510:	f1b8 0f00 	cmp.w	r8, #0
 8084514:	d0ec      	beq.n	80844f0 <mbedtls_rsa_complete+0x74>
 8084516:	2b00      	cmp	r3, #0
 8084518:	d1ea      	bne.n	80844f0 <mbedtls_rsa_complete+0x74>
 808451a:	2d00      	cmp	r5, #0
 808451c:	d1e8      	bne.n	80844f0 <mbedtls_rsa_complete+0x74>
 808451e:	2a00      	cmp	r2, #0
 8084520:	d1e6      	bne.n	80844f0 <mbedtls_rsa_complete+0x74>
 8084522:	2800      	cmp	r0, #0
 8084524:	d0e4      	beq.n	80844f0 <mbedtls_rsa_complete+0x74>
 8084526:	2201      	movs	r2, #1
 8084528:	e009      	b.n	808453e <mbedtls_rsa_complete+0xc2>
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 808452a:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 808452c:	461e      	mov	r6, r3
 808452e:	e7df      	b.n	80844f0 <mbedtls_rsa_complete+0x74>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8084530:	2400      	movs	r4, #0
 8084532:	e7ed      	b.n	8084510 <mbedtls_rsa_complete+0x94>
 8084534:	462c      	mov	r4, r5
 8084536:	e7db      	b.n	80844f0 <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8084538:	2601      	movs	r6, #1
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 808453a:	462c      	mov	r4, r5
 808453c:	e002      	b.n	8084544 <mbedtls_rsa_complete+0xc8>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
 808453e:	2e00      	cmp	r6, #0
 8084540:	d03d      	beq.n	80845be <mbedtls_rsa_complete+0x142>
 8084542:	2600      	movs	r6, #0
 8084544:	9404      	str	r4, [sp, #16]
 8084546:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 8084548:	f1b8 0f00 	cmp.w	r8, #0
 808454c:	d10b      	bne.n	8084566 <mbedtls_rsa_complete+0xea>
 808454e:	b153      	cbz	r3, 8084566 <mbedtls_rsa_complete+0xea>
 8084550:	b14d      	cbz	r5, 8084566 <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 8084552:	4652      	mov	r2, sl
 8084554:	4649      	mov	r1, r9
 8084556:	4658      	mov	r0, fp
 8084558:	f007 fe53 	bl	808c202 <mbedtls_mpi_mul_mpi>
 808455c:	bb28      	cbnz	r0, 80845aa <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 808455e:	4658      	mov	r0, fp
 8084560:	f007 fb5f 	bl	808bc22 <mbedtls_mpi_size>
 8084564:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 8084566:	b146      	cbz	r6, 808457a <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
 8084568:	f8cd a000 	str.w	sl, [sp]
 808456c:	464b      	mov	r3, r9
 808456e:	9a02      	ldr	r2, [sp, #8]
 8084570:	9903      	ldr	r1, [sp, #12]
 8084572:	4658      	mov	r0, fp
 8084574:	f00a ff8c 	bl	808f490 <mbedtls_rsa_deduce_primes>
 8084578:	e007      	b.n	808458a <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
 808457a:	9b04      	ldr	r3, [sp, #16]
 808457c:	b133      	cbz	r3, 808458c <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 808457e:	9b02      	ldr	r3, [sp, #8]
 8084580:	9a03      	ldr	r2, [sp, #12]
 8084582:	4651      	mov	r1, sl
 8084584:	4648      	mov	r0, r9
 8084586:	f00b f87f 	bl	808f688 <mbedtls_rsa_deduce_private_exponent>
 808458a:	b970      	cbnz	r0, 80845aa <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 808458c:	b184      	cbz	r4, 80845b0 <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 808458e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 8084592:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8084594:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 8084598:	9300      	str	r3, [sp, #0]
 808459a:	9a02      	ldr	r2, [sp, #8]
 808459c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80845a0:	4651      	mov	r1, sl
 80845a2:	4648      	mov	r0, r9
 80845a4:	f00b fa14 	bl	808f9d0 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 80845a8:	b110      	cbz	r0, 80845b0 <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80845aa:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 80845ae:	e00c      	b.n	80845ca <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 80845b0:	4621      	mov	r1, r4
 80845b2:	4638      	mov	r0, r7
}
 80845b4:	b007      	add	sp, #28
 80845b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 80845ba:	f7ff bec7 	b.w	808434c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
 80845be:	b90c      	cbnz	r4, 80845c4 <mbedtls_rsa_complete+0x148>
 80845c0:	b112      	cbz	r2, 80845c8 <mbedtls_rsa_complete+0x14c>
 80845c2:	4626      	mov	r6, r4
 80845c4:	9404      	str	r4, [sp, #16]
 80845c6:	e7bf      	b.n	8084548 <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80845c8:	4801      	ldr	r0, [pc, #4]	; (80845d0 <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
 80845ca:	b007      	add	sp, #28
 80845cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80845d0:	ffffbf80 	.word	0xffffbf80

080845d4 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 80845d4:	b570      	push	{r4, r5, r6, lr}
 80845d6:	4604      	mov	r4, r0
 80845d8:	460e      	mov	r6, r1
 80845da:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 80845dc:	2100      	movs	r1, #0
 80845de:	22ac      	movs	r2, #172	; 0xac
 80845e0:	f00e ffdd 	bl	809359e <memset>
/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
    ctx->padding = padding;
 80845e4:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 80845e8:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 80845ec:	bd70      	pop	{r4, r5, r6, pc}

080845ee <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
 80845ee:	6840      	ldr	r0, [r0, #4]
 80845f0:	4770      	bx	lr
	...

080845f4 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 80845f4:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 80845f6:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 80845f8:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 80845fa:	f7ff fea7 	bl	808434c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80845fe:	4605      	mov	r5, r0
 8084600:	b9b8      	cbnz	r0, 8084632 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 8084602:	f104 0608 	add.w	r6, r4, #8
 8084606:	4630      	mov	r0, r6
 8084608:	f007 faeb 	bl	808bbe2 <mbedtls_mpi_bitlen>
 808460c:	287f      	cmp	r0, #127	; 0x7f
 808460e:	d910      	bls.n	8084632 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8084610:	3414      	adds	r4, #20
 8084612:	4629      	mov	r1, r5
 8084614:	4620      	mov	r0, r4
 8084616:	f007 faba 	bl	808bb8e <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 808461a:	b150      	cbz	r0, 8084632 <mbedtls_rsa_check_pubkey+0x3e>
 808461c:	4620      	mov	r0, r4
 808461e:	f007 fae0 	bl	808bbe2 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8084622:	2801      	cmp	r0, #1
 8084624:	d905      	bls.n	8084632 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 8084626:	4631      	mov	r1, r6
 8084628:	4620      	mov	r0, r4
 808462a:	f007 fc86 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 808462e:	2800      	cmp	r0, #0
 8084630:	db00      	blt.n	8084634 <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8084632:	4d01      	ldr	r5, [pc, #4]	; (8084638 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
 8084634:	4628      	mov	r0, r5
 8084636:	bd70      	pop	{r4, r5, r6, pc}
 8084638:	ffffbe00 	.word	0xffffbe00

0808463c <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 808463c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808463e:	b085      	sub	sp, #20
 8084640:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8084642:	f7ff ffd7 	bl	80845f4 <mbedtls_rsa_check_pubkey>
 8084646:	bb28      	cbnz	r0, 8084694 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 8084648:	2101      	movs	r1, #1
 808464a:	4620      	mov	r0, r4
 808464c:	f7ff fe7e 	bl	808434c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8084650:	bb00      	cbnz	r0, 8084694 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 8084652:	f104 0314 	add.w	r3, r4, #20
 8084656:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 808465a:	f104 0638 	add.w	r6, r4, #56	; 0x38
 808465e:	f104 0720 	add.w	r7, r4, #32
 8084662:	9002      	str	r0, [sp, #8]
 8084664:	9001      	str	r0, [sp, #4]
 8084666:	9300      	str	r3, [sp, #0]
 8084668:	4632      	mov	r2, r6
 808466a:	463b      	mov	r3, r7
 808466c:	4629      	mov	r1, r5
 808466e:	f104 0008 	add.w	r0, r4, #8
 8084672:	f00b f8e7 	bl	808f844 <mbedtls_rsa_validate_params>
 8084676:	b968      	cbnz	r0, 8084694 <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 8084678:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 808467c:	9301      	str	r3, [sp, #4]
 808467e:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8084682:	9300      	str	r3, [sp, #0]
 8084684:	463a      	mov	r2, r7
 8084686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 808468a:	4631      	mov	r1, r6
 808468c:	4628      	mov	r0, r5
 808468e:	f00b f859 	bl	808f744 <mbedtls_rsa_validate_crt>
 8084692:	b100      	cbz	r0, 8084696 <mbedtls_rsa_check_privkey+0x5a>
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8084694:	4801      	ldr	r0, [pc, #4]	; (808469c <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
 8084696:	b005      	add	sp, #20
 8084698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808469a:	bf00      	nop
 808469c:	ffffbe00 	.word	0xffffbe00

080846a0 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 80846a0:	b538      	push	{r3, r4, r5, lr}
 80846a2:	4605      	mov	r5, r0
 80846a4:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80846a6:	f7ff ffa5 	bl	80845f4 <mbedtls_rsa_check_pubkey>
 80846aa:	b950      	cbnz	r0, 80846c2 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 80846ac:	4620      	mov	r0, r4
 80846ae:	f7ff ffc5 	bl	808463c <mbedtls_rsa_check_privkey>
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80846b2:	b930      	cbnz	r0, 80846c2 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80846b4:	f104 0108 	add.w	r1, r4, #8
 80846b8:	f105 0008 	add.w	r0, r5, #8
 80846bc:	f007 fc3d 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
 80846c0:	b108      	cbz	r0, 80846c6 <mbedtls_rsa_check_pub_priv+0x26>
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80846c2:	4805      	ldr	r0, [pc, #20]	; (80846d8 <mbedtls_rsa_check_pub_priv+0x38>)
 80846c4:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 80846c6:	f104 0114 	add.w	r1, r4, #20
 80846ca:	f105 0014 	add.w	r0, r5, #20
 80846ce:	f007 fc34 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80846d2:	2800      	cmp	r0, #0
 80846d4:	d1f5      	bne.n	80846c2 <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
 80846d6:	bd38      	pop	{r3, r4, r5, pc}
 80846d8:	ffffbe00 	.word	0xffffbe00

080846dc <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 80846dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80846e0:	460c      	mov	r4, r1
 80846e2:	b086      	sub	sp, #24
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 80846e4:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 80846e6:	4605      	mov	r5, r0
 80846e8:	4617      	mov	r7, r2
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 80846ea:	f7ff fe2f 	bl	808434c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80846ee:	4606      	mov	r6, r0
 80846f0:	bb78      	cbnz	r0, 8084752 <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
 80846f2:	a803      	add	r0, sp, #12
 80846f4:	f007 f9bc 	bl	808ba70 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80846f8:	4621      	mov	r1, r4
 80846fa:	686a      	ldr	r2, [r5, #4]
 80846fc:	a803      	add	r0, sp, #12
 80846fe:	f007 fa96 	bl	808bc2e <mbedtls_mpi_read_binary>
 8084702:	4604      	mov	r4, r0
 8084704:	b9f0      	cbnz	r0, 8084744 <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8084706:	f105 0408 	add.w	r4, r5, #8
 808470a:	4621      	mov	r1, r4
 808470c:	a803      	add	r0, sp, #12
 808470e:	f007 fc14 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
 8084712:	2800      	cmp	r0, #0
 8084714:	da14      	bge.n	8084740 <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8084716:	f105 0368 	add.w	r3, r5, #104	; 0x68
 808471a:	a903      	add	r1, sp, #12
 808471c:	9300      	str	r3, [sp, #0]
 808471e:	f105 0214 	add.w	r2, r5, #20
 8084722:	4623      	mov	r3, r4
 8084724:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
 8084726:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 808472a:	f007 ffd8 	bl	808c6de <mbedtls_mpi_exp_mod>
 808472e:	4604      	mov	r4, r0
 8084730:	b940      	cbnz	r0, 8084744 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8084732:	4642      	mov	r2, r8
 8084734:	4639      	mov	r1, r7
 8084736:	a803      	add	r0, sp, #12
 8084738:	f007 faae 	bl	808bc98 <mbedtls_mpi_write_binary>
 808473c:	4604      	mov	r4, r0
 808473e:	e001      	b.n	8084744 <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8084740:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 8084744:	a803      	add	r0, sp, #12
 8084746:	f007 f99a 	bl	808ba7e <mbedtls_mpi_free>

    if( ret != 0 )
 808474a:	b11c      	cbz	r4, 8084754 <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 808474c:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
 8084750:	e000      	b.n	8084754 <mbedtls_rsa_public+0x78>
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084752:	4e02      	ldr	r6, [pc, #8]	; (808475c <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
 8084754:	4630      	mov	r0, r6
 8084756:	b006      	add	sp, #24
 8084758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808475c:	ffffbf80 	.word	0xffffbf80

08084760 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 8084760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084764:	460e      	mov	r6, r1
 8084766:	b0a5      	sub	sp, #148	; 0x94

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 8084768:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 808476a:	4604      	mov	r4, r0
 808476c:	4692      	mov	sl, r2
 808476e:	461d      	mov	r5, r3

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 8084770:	f7ff fdec 	bl	808434c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8084774:	9003      	str	r0, [sp, #12]
 8084776:	2800      	cmp	r0, #0
 8084778:	f040 819b 	bne.w	8084ab2 <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 808477c:	a806      	add	r0, sp, #24
 808477e:	f007 f977 	bl	808ba70 <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 8084782:	a809      	add	r0, sp, #36	; 0x24
 8084784:	f007 f974 	bl	808ba70 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 8084788:	a80c      	add	r0, sp, #48	; 0x30
 808478a:	f007 f971 	bl	808ba70 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 808478e:	a80f      	add	r0, sp, #60	; 0x3c
 8084790:	f007 f96e 	bl	808ba70 <mbedtls_mpi_init>

    if( f_rng != NULL )
 8084794:	b12e      	cbz	r6, 80847a2 <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 8084796:	a818      	add	r0, sp, #96	; 0x60
 8084798:	f007 f96a 	bl	808ba70 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 808479c:	a81b      	add	r0, sp, #108	; 0x6c
 808479e:	f007 f967 	bl	808ba70 <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 80847a2:	a812      	add	r0, sp, #72	; 0x48
 80847a4:	f007 f964 	bl	808ba70 <mbedtls_mpi_init>
 80847a8:	a815      	add	r0, sp, #84	; 0x54
 80847aa:	f007 f961 	bl	808ba70 <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 80847ae:	a81e      	add	r0, sp, #120	; 0x78
 80847b0:	f007 f95e 	bl	808ba70 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 80847b4:	a821      	add	r0, sp, #132	; 0x84
 80847b6:	f007 f95b 	bl	808ba70 <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80847ba:	6862      	ldr	r2, [r4, #4]
 80847bc:	4629      	mov	r1, r5
 80847be:	a806      	add	r0, sp, #24
 80847c0:	f007 fa35 	bl	808bc2e <mbedtls_mpi_read_binary>
 80847c4:	4607      	mov	r7, r0
 80847c6:	2800      	cmp	r0, #0
 80847c8:	f040 8150 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80847cc:	f104 0508 	add.w	r5, r4, #8
 80847d0:	4629      	mov	r1, r5
 80847d2:	a806      	add	r0, sp, #24
 80847d4:	f007 fbb1 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
 80847d8:	2800      	cmp	r0, #0
 80847da:	f280 8143 	bge.w	8084a64 <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 80847de:	a906      	add	r1, sp, #24
 80847e0:	a81e      	add	r0, sp, #120	; 0x78
 80847e2:	f007 f98e 	bl	808bb02 <mbedtls_mpi_copy>
 80847e6:	4607      	mov	r7, r0
 80847e8:	2800      	cmp	r0, #0
 80847ea:	f040 813f 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
 80847ee:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 80847f2:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 80847f6:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
 80847f8:	2e00      	cmp	r6, #0
 80847fa:	f000 80c5 	beq.w	8084988 <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 80847fe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8084802:	b323      	cbz	r3, 808484e <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8084804:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 8084808:	4642      	mov	r2, r8
 808480a:	4641      	mov	r1, r8
 808480c:	4640      	mov	r0, r8
 808480e:	f007 fcf8 	bl	808c202 <mbedtls_mpi_mul_mpi>
 8084812:	4607      	mov	r7, r0
 8084814:	2800      	cmp	r0, #0
 8084816:	f040 8129 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 808481a:	462a      	mov	r2, r5
 808481c:	4641      	mov	r1, r8
 808481e:	4640      	mov	r0, r8
 8084820:	f007 ff2b 	bl	808c67a <mbedtls_mpi_mod_mpi>
 8084824:	4607      	mov	r7, r0
 8084826:	2800      	cmp	r0, #0
 8084828:	f040 8120 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 808482c:	f104 0898 	add.w	r8, r4, #152	; 0x98
 8084830:	4642      	mov	r2, r8
 8084832:	4641      	mov	r1, r8
 8084834:	4640      	mov	r0, r8
 8084836:	f007 fce4 	bl	808c202 <mbedtls_mpi_mul_mpi>
 808483a:	4607      	mov	r7, r0
 808483c:	2800      	cmp	r0, #0
 808483e:	f040 8115 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 8084842:	462a      	mov	r2, r5
 8084844:	4641      	mov	r1, r8
 8084846:	4640      	mov	r0, r8
 8084848:	f007 ff17 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808484c:	e037      	b.n	80848be <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 808484e:	230c      	movs	r3, #12
 8084850:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8084852:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8084856:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 808485a:	9b05      	ldr	r3, [sp, #20]
 808485c:	3b01      	subs	r3, #1
 808485e:	9305      	str	r3, [sp, #20]
 8084860:	f000 812a 	beq.w	8084ab8 <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8084864:	6861      	ldr	r1, [r4, #4]
 8084866:	4653      	mov	r3, sl
 8084868:	4632      	mov	r2, r6
 808486a:	3901      	subs	r1, #1
 808486c:	4658      	mov	r0, fp
 808486e:	f008 f9da 	bl	808cc26 <mbedtls_mpi_fill_random>
 8084872:	4607      	mov	r7, r0
 8084874:	2800      	cmp	r0, #0
 8084876:	f040 80f9 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 808487a:	462a      	mov	r2, r5
 808487c:	4659      	mov	r1, fp
 808487e:	4640      	mov	r0, r8
 8084880:	f008 f94c 	bl	808cb1c <mbedtls_mpi_gcd>
 8084884:	4607      	mov	r7, r0
 8084886:	2800      	cmp	r0, #0
 8084888:	f040 80f0 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 808488c:	2101      	movs	r1, #1
 808488e:	4640      	mov	r0, r8
 8084890:	f007 fb98 	bl	808bfc4 <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
 8084894:	2800      	cmp	r0, #0
 8084896:	d1e0      	bne.n	808485a <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8084898:	462a      	mov	r2, r5
 808489a:	4659      	mov	r1, fp
 808489c:	4640      	mov	r0, r8
 808489e:	f008 f9e5 	bl	808cc6c <mbedtls_mpi_inv_mod>
 80848a2:	4607      	mov	r7, r0
 80848a4:	2800      	cmp	r0, #0
 80848a6:	f040 80e1 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 80848aa:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80848ae:	9300      	str	r3, [sp, #0]
 80848b0:	f104 0214 	add.w	r2, r4, #20
 80848b4:	462b      	mov	r3, r5
 80848b6:	4641      	mov	r1, r8
 80848b8:	4640      	mov	r0, r8
 80848ba:	f007 ff10 	bl	808c6de <mbedtls_mpi_exp_mod>
 80848be:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 80848c0:	2800      	cmp	r0, #0
 80848c2:	f040 80d3 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 80848c6:	a906      	add	r1, sp, #24
 80848c8:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80848cc:	4608      	mov	r0, r1
 80848ce:	f007 fc98 	bl	808c202 <mbedtls_mpi_mul_mpi>
 80848d2:	4607      	mov	r7, r0
 80848d4:	2800      	cmp	r0, #0
 80848d6:	f040 80c9 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80848da:	a906      	add	r1, sp, #24
 80848dc:	462a      	mov	r2, r5
 80848de:	4608      	mov	r0, r1
 80848e0:	f007 fecb 	bl	808c67a <mbedtls_mpi_mod_mpi>
 80848e4:	4607      	mov	r7, r0
 80848e6:	2800      	cmp	r0, #0
 80848e8:	f040 80c0 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 80848ec:	2201      	movs	r2, #1
 80848ee:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80848f2:	a809      	add	r0, sp, #36	; 0x24
 80848f4:	f007 fc6f 	bl	808c1d6 <mbedtls_mpi_sub_int>
 80848f8:	4607      	mov	r7, r0
 80848fa:	2800      	cmp	r0, #0
 80848fc:	f040 80b6 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 8084900:	2201      	movs	r2, #1
 8084902:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8084906:	a80c      	add	r0, sp, #48	; 0x30
 8084908:	f007 fc65 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808490c:	4607      	mov	r7, r0
 808490e:	2800      	cmp	r0, #0
 8084910:	f040 80ac 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8084914:	4653      	mov	r3, sl
 8084916:	4632      	mov	r2, r6
 8084918:	211c      	movs	r1, #28
 808491a:	a80f      	add	r0, sp, #60	; 0x3c
 808491c:	f008 f983 	bl	808cc26 <mbedtls_mpi_fill_random>
 8084920:	4607      	mov	r7, r0
 8084922:	2800      	cmp	r0, #0
 8084924:	f040 80a2 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8084928:	aa0f      	add	r2, sp, #60	; 0x3c
 808492a:	a909      	add	r1, sp, #36	; 0x24
 808492c:	a818      	add	r0, sp, #96	; 0x60
 808492e:	f007 fc68 	bl	808c202 <mbedtls_mpi_mul_mpi>
 8084932:	4607      	mov	r7, r0
 8084934:	2800      	cmp	r0, #0
 8084936:	f040 8099 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 808493a:	a918      	add	r1, sp, #96	; 0x60
 808493c:	464a      	mov	r2, r9
 808493e:	4608      	mov	r0, r1
 8084940:	f007 fbf0 	bl	808c124 <mbedtls_mpi_add_mpi>
 8084944:	4607      	mov	r7, r0
 8084946:	2800      	cmp	r0, #0
 8084948:	f040 8090 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 808494c:	4653      	mov	r3, sl
 808494e:	4632      	mov	r2, r6
 8084950:	211c      	movs	r1, #28
 8084952:	a80f      	add	r0, sp, #60	; 0x3c
 8084954:	f008 f967 	bl	808cc26 <mbedtls_mpi_fill_random>
 8084958:	4607      	mov	r7, r0
 808495a:	2800      	cmp	r0, #0
 808495c:	f040 8086 	bne.w	8084a6c <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 8084960:	aa0f      	add	r2, sp, #60	; 0x3c
 8084962:	a90c      	add	r1, sp, #48	; 0x30
 8084964:	a81b      	add	r0, sp, #108	; 0x6c
 8084966:	f007 fc4c 	bl	808c202 <mbedtls_mpi_mul_mpi>
 808496a:	4607      	mov	r7, r0
 808496c:	2800      	cmp	r0, #0
 808496e:	d17d      	bne.n	8084a6c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8084970:	a91b      	add	r1, sp, #108	; 0x6c
 8084972:	9a04      	ldr	r2, [sp, #16]
 8084974:	4608      	mov	r0, r1
 8084976:	f007 fbd5 	bl	808c124 <mbedtls_mpi_add_mpi>
 808497a:	4607      	mov	r7, r0
 808497c:	2800      	cmp	r0, #0
 808497e:	d175      	bne.n	8084a6c <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 8084980:	ab1b      	add	r3, sp, #108	; 0x6c
 8084982:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
 8084984:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 8084988:	f104 0374 	add.w	r3, r4, #116	; 0x74
 808498c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8084990:	9300      	str	r3, [sp, #0]
 8084992:	464a      	mov	r2, r9
 8084994:	4643      	mov	r3, r8
 8084996:	a906      	add	r1, sp, #24
 8084998:	a812      	add	r0, sp, #72	; 0x48
 808499a:	f007 fea0 	bl	808c6de <mbedtls_mpi_exp_mod>
 808499e:	4607      	mov	r7, r0
 80849a0:	2800      	cmp	r0, #0
 80849a2:	d163      	bne.n	8084a6c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 80849a4:	f104 0380 	add.w	r3, r4, #128	; 0x80
 80849a8:	f104 0938 	add.w	r9, r4, #56	; 0x38
 80849ac:	9300      	str	r3, [sp, #0]
 80849ae:	9a04      	ldr	r2, [sp, #16]
 80849b0:	464b      	mov	r3, r9
 80849b2:	a906      	add	r1, sp, #24
 80849b4:	a815      	add	r0, sp, #84	; 0x54
 80849b6:	f007 fe92 	bl	808c6de <mbedtls_mpi_exp_mod>
 80849ba:	4607      	mov	r7, r0
 80849bc:	2800      	cmp	r0, #0
 80849be:	d155      	bne.n	8084a6c <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 80849c0:	aa15      	add	r2, sp, #84	; 0x54
 80849c2:	a912      	add	r1, sp, #72	; 0x48
 80849c4:	a806      	add	r0, sp, #24
 80849c6:	f007 fbce 	bl	808c166 <mbedtls_mpi_sub_mpi>
 80849ca:	4607      	mov	r7, r0
 80849cc:	2800      	cmp	r0, #0
 80849ce:	d14d      	bne.n	8084a6c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 80849d0:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 80849d4:	a906      	add	r1, sp, #24
 80849d6:	a812      	add	r0, sp, #72	; 0x48
 80849d8:	f007 fc13 	bl	808c202 <mbedtls_mpi_mul_mpi>
 80849dc:	4607      	mov	r7, r0
 80849de:	2800      	cmp	r0, #0
 80849e0:	d144      	bne.n	8084a6c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 80849e2:	4642      	mov	r2, r8
 80849e4:	a912      	add	r1, sp, #72	; 0x48
 80849e6:	a806      	add	r0, sp, #24
 80849e8:	f007 fe47 	bl	808c67a <mbedtls_mpi_mod_mpi>
 80849ec:	4607      	mov	r7, r0
 80849ee:	2800      	cmp	r0, #0
 80849f0:	d13c      	bne.n	8084a6c <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 80849f2:	464a      	mov	r2, r9
 80849f4:	a906      	add	r1, sp, #24
 80849f6:	a812      	add	r0, sp, #72	; 0x48
 80849f8:	f007 fc03 	bl	808c202 <mbedtls_mpi_mul_mpi>
 80849fc:	4607      	mov	r7, r0
 80849fe:	2800      	cmp	r0, #0
 8084a00:	d134      	bne.n	8084a6c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 8084a02:	aa12      	add	r2, sp, #72	; 0x48
 8084a04:	a915      	add	r1, sp, #84	; 0x54
 8084a06:	a806      	add	r0, sp, #24
 8084a08:	f007 fb8c 	bl	808c124 <mbedtls_mpi_add_mpi>
 8084a0c:	4607      	mov	r7, r0
 8084a0e:	bb68      	cbnz	r0, 8084a6c <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 8084a10:	b966      	cbnz	r6, 8084a2c <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 8084a12:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8084a16:	9300      	str	r3, [sp, #0]
 8084a18:	f104 0214 	add.w	r2, r4, #20
 8084a1c:	462b      	mov	r3, r5
 8084a1e:	a906      	add	r1, sp, #24
 8084a20:	a821      	add	r0, sp, #132	; 0x84
 8084a22:	f007 fe5c 	bl	808c6de <mbedtls_mpi_exp_mod>
 8084a26:	4607      	mov	r7, r0
 8084a28:	bb00      	cbnz	r0, 8084a6c <mbedtls_rsa_private+0x30c>
 8084a2a:	e00f      	b.n	8084a4c <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8084a2c:	a906      	add	r1, sp, #24
 8084a2e:	f104 0298 	add.w	r2, r4, #152	; 0x98
 8084a32:	4608      	mov	r0, r1
 8084a34:	f007 fbe5 	bl	808c202 <mbedtls_mpi_mul_mpi>
 8084a38:	4607      	mov	r7, r0
 8084a3a:	b9b8      	cbnz	r0, 8084a6c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8084a3c:	a906      	add	r1, sp, #24
 8084a3e:	462a      	mov	r2, r5
 8084a40:	4608      	mov	r0, r1
 8084a42:	f007 fe1a 	bl	808c67a <mbedtls_mpi_mod_mpi>
 8084a46:	4607      	mov	r7, r0
 8084a48:	b980      	cbnz	r0, 8084a6c <mbedtls_rsa_private+0x30c>
 8084a4a:	e7e2      	b.n	8084a12 <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 8084a4c:	a91e      	add	r1, sp, #120	; 0x78
 8084a4e:	a821      	add	r0, sp, #132	; 0x84
 8084a50:	f007 fa73 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
 8084a54:	b948      	cbnz	r0, 8084a6a <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8084a56:	6862      	ldr	r2, [r4, #4]
 8084a58:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8084a5a:	a806      	add	r0, sp, #24
 8084a5c:	f007 f91c 	bl	808bc98 <mbedtls_mpi_write_binary>
 8084a60:	4607      	mov	r7, r0
 8084a62:	e003      	b.n	8084a6c <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8084a64:	f06f 0703 	mvn.w	r7, #3
 8084a68:	e000      	b.n	8084a6c <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8084a6a:	4f16      	ldr	r7, [pc, #88]	; (8084ac4 <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 8084a6c:	a809      	add	r0, sp, #36	; 0x24
 8084a6e:	f007 f806 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 8084a72:	a80c      	add	r0, sp, #48	; 0x30
 8084a74:	f007 f803 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8084a78:	a80f      	add	r0, sp, #60	; 0x3c
 8084a7a:	f007 f800 	bl	808ba7e <mbedtls_mpi_free>

    if( f_rng != NULL )
 8084a7e:	b12e      	cbz	r6, 8084a8c <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 8084a80:	a818      	add	r0, sp, #96	; 0x60
 8084a82:	f006 fffc 	bl	808ba7e <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 8084a86:	a81b      	add	r0, sp, #108	; 0x6c
 8084a88:	f006 fff9 	bl	808ba7e <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 8084a8c:	a806      	add	r0, sp, #24
 8084a8e:	f006 fff6 	bl	808ba7e <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 8084a92:	a812      	add	r0, sp, #72	; 0x48
 8084a94:	f006 fff3 	bl	808ba7e <mbedtls_mpi_free>
 8084a98:	a815      	add	r0, sp, #84	; 0x54
 8084a9a:	f006 fff0 	bl	808ba7e <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 8084a9e:	a821      	add	r0, sp, #132	; 0x84
 8084aa0:	f006 ffed 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 8084aa4:	a81e      	add	r0, sp, #120	; 0x78
 8084aa6:	f006 ffea 	bl	808ba7e <mbedtls_mpi_free>

    if( ret != 0 )
 8084aaa:	b13f      	cbz	r7, 8084abc <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 8084aac:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
 8084ab0:	e000      	b.n	8084ab4 <mbedtls_rsa_private+0x354>
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084ab2:	4b05      	ldr	r3, [pc, #20]	; (8084ac8 <mbedtls_rsa_private+0x368>)
 8084ab4:	9303      	str	r3, [sp, #12]
 8084ab6:	e001      	b.n	8084abc <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8084ab8:	4f04      	ldr	r7, [pc, #16]	; (8084acc <mbedtls_rsa_private+0x36c>)
 8084aba:	e7d7      	b.n	8084a6c <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
 8084abc:	9803      	ldr	r0, [sp, #12]
 8084abe:	b025      	add	sp, #148	; 0x94
 8084ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084ac4:	ffffbc80 	.word	0xffffbc80
 8084ac8:	ffffbf80 	.word	0xffffbf80
 8084acc:	ffffbb80 	.word	0xffffbb80

08084ad0 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8084ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084ad4:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8084ad6:	b08b      	sub	sp, #44	; 0x2c
 8084ad8:	4680      	mov	r8, r0
 8084ada:	468b      	mov	fp, r1
 8084adc:	9203      	str	r2, [sp, #12]
 8084ade:	9304      	str	r3, [sp, #16]
 8084ae0:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8084ae2:	9e18      	ldr	r6, [sp, #96]	; 0x60
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084ae4:	d105      	bne.n	8084af2 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
 8084ae6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8084aea:	2b01      	cmp	r3, #1
 8084aec:	d001      	beq.n	8084af2 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084aee:	4840      	ldr	r0, [pc, #256]	; (8084bf0 <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
 8084af0:	e07a      	b.n	8084be8 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    if( f_rng == NULL )
 8084af2:	f1bb 0f00 	cmp.w	fp, #0
 8084af6:	d0fa      	beq.n	8084aee <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8084af8:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 8084afc:	f003 fb14 	bl	8088128 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8084b00:	9002      	str	r0, [sp, #8]
 8084b02:	2800      	cmp	r0, #0
 8084b04:	d0f3      	beq.n	8084aee <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 8084b06:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
 8084b0a:	f003 fc51 	bl	80883b0 <mbedtls_md_get_size>

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8084b0e:	0043      	lsls	r3, r0, #1
 8084b10:	9305      	str	r3, [sp, #20]
 8084b12:	0042      	lsls	r2, r0, #1
 8084b14:	1cbb      	adds	r3, r7, #2
 8084b16:	4413      	add	r3, r2
 8084b18:	429f      	cmp	r7, r3
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
    hlen = mbedtls_md_get_size( md_info );
 8084b1a:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8084b1c:	d8e7      	bhi.n	8084aee <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 8084b1e:	429c      	cmp	r4, r3
 8084b20:	d3e5      	bcc.n	8084aee <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
 8084b22:	4622      	mov	r2, r4
 8084b24:	2100      	movs	r1, #0
 8084b26:	4630      	mov	r0, r6
 8084b28:	f00e fd39 	bl	809359e <memset>

    *p++ = 0;
 8084b2c:	f106 0901 	add.w	r9, r6, #1
 8084b30:	2300      	movs	r3, #0
 8084b32:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 8084b34:	462a      	mov	r2, r5
 8084b36:	4649      	mov	r1, r9
 8084b38:	9803      	ldr	r0, [sp, #12]
 8084b3a:	47d8      	blx	fp
 8084b3c:	b110      	cbz	r0, 8084b44 <mbedtls_rsa_rsaes_oaep_encrypt+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8084b3e:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 8084b42:	e051      	b.n	8084be8 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    p += hlen;
 8084b44:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 8084b48:	4653      	mov	r3, sl
 8084b4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8084b4c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8084b4e:	9802      	ldr	r0, [sp, #8]
 8084b50:	f003 fb5c 	bl	808820c <mbedtls_md>
 8084b54:	2800      	cmp	r0, #0
 8084b56:	d147      	bne.n	8084be8 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8084b58:	9005      	str	r0, [sp, #20]
 8084b5a:	1ea0      	subs	r0, r4, #2
 8084b5c:	1bc0      	subs	r0, r0, r7
 8084b5e:	006b      	lsls	r3, r5, #1
 8084b60:	4428      	add	r0, r5
 8084b62:	1ac0      	subs	r0, r0, r3
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
 8084b64:	2201      	movs	r2, #1
 8084b66:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
 8084b6a:	4410      	add	r0, r2
 8084b6c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8084b6e:	463a      	mov	r2, r7
 8084b70:	4450      	add	r0, sl

    mbedtls_md_init( &md_ctx );
 8084b72:	af07      	add	r7, sp, #28
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
 8084b74:	f00e fced 	bl	8093552 <memcpy>

    mbedtls_md_init( &md_ctx );
 8084b78:	4638      	mov	r0, r7
 8084b7a:	f003 fae1 	bl	8088140 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8084b7e:	9b05      	ldr	r3, [sp, #20]
 8084b80:	9902      	ldr	r1, [sp, #8]
 8084b82:	461a      	mov	r2, r3
 8084b84:	4638      	mov	r0, r7
 8084b86:	f003 fb01 	bl	808818c <mbedtls_md_setup>
 8084b8a:	4602      	mov	r2, r0
 8084b8c:	b9a8      	cbnz	r0, 8084bba <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 8084b8e:	f105 0a01 	add.w	sl, r5, #1
 8084b92:	3c01      	subs	r4, #1
 8084b94:	44b2      	add	sl, r6
 8084b96:	1b64      	subs	r4, r4, r5
 8084b98:	464a      	mov	r2, r9
 8084b9a:	9700      	str	r7, [sp, #0]
 8084b9c:	462b      	mov	r3, r5
 8084b9e:	4621      	mov	r1, r4
 8084ba0:	4650      	mov	r0, sl
 8084ba2:	f7ff faef 	bl	8084184 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084ba6:	4602      	mov	r2, r0
 8084ba8:	b938      	cbnz	r0, 8084bba <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 8084baa:	4652      	mov	r2, sl
 8084bac:	9700      	str	r7, [sp, #0]
 8084bae:	4623      	mov	r3, r4
 8084bb0:	4629      	mov	r1, r5
 8084bb2:	4648      	mov	r0, r9
 8084bb4:	f7ff fae6 	bl	8084184 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084bb8:	4602      	mov	r2, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
 8084bba:	a807      	add	r0, sp, #28
 8084bbc:	9202      	str	r2, [sp, #8]
 8084bbe:	f003 fac4 	bl	808814a <mbedtls_md_free>

    if( ret != 0 )
 8084bc2:	9a02      	ldr	r2, [sp, #8]
 8084bc4:	b97a      	cbnz	r2, 8084be6 <mbedtls_rsa_rsaes_oaep_encrypt+0x116>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084bc6:	9b04      	ldr	r3, [sp, #16]
 8084bc8:	b92b      	cbnz	r3, 8084bd6 <mbedtls_rsa_rsaes_oaep_encrypt+0x106>
 8084bca:	4632      	mov	r2, r6
 8084bcc:	4631      	mov	r1, r6
 8084bce:	4640      	mov	r0, r8
 8084bd0:	f7ff fd84 	bl	80846dc <mbedtls_rsa_public>
 8084bd4:	e008      	b.n	8084be8 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8084bd6:	9600      	str	r6, [sp, #0]
 8084bd8:	4633      	mov	r3, r6
 8084bda:	9a03      	ldr	r2, [sp, #12]
 8084bdc:	4659      	mov	r1, fp
 8084bde:	4640      	mov	r0, r8
 8084be0:	f7ff fdbe 	bl	8084760 <mbedtls_rsa_private>
 8084be4:	e000      	b.n	8084be8 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8084be6:	4610      	mov	r0, r2
}
 8084be8:	b00b      	add	sp, #44	; 0x2c
 8084bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084bee:	bf00      	nop
 8084bf0:	ffffbf80 	.word	0xffffbf80

08084bf4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8084bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084bf8:	469a      	mov	sl, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084bfa:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8084bfe:	4607      	mov	r7, r0
 8084c00:	4689      	mov	r9, r1
 8084c02:	4693      	mov	fp, r2
 8084c04:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8084c08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084c0a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084c0c:	d103      	bne.n	8084c16 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
 8084c0e:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8084c12:	2a00      	cmp	r2, #0
 8084c14:	d155      	bne.n	8084cc2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 8084c16:	f1b9 0f00 	cmp.w	r9, #0
 8084c1a:	d052      	beq.n	8084cc2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 8084c1c:	2b00      	cmp	r3, #0
 8084c1e:	d050      	beq.n	8084cc2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 8084c20:	2e00      	cmp	r6, #0
 8084c22:	d04e      	beq.n	8084cc2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8084c24:	f118 020b 	adds.w	r2, r8, #11

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 8084c28:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8084c2a:	d24a      	bcs.n	8084cc2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 8084c2c:	4294      	cmp	r4, r2
 8084c2e:	d348      	bcc.n	8084cc2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 8084c30:	4635      	mov	r5, r6

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 8084c32:	3c03      	subs	r4, #3

    *p++ = 0;
 8084c34:	2200      	movs	r2, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 8084c36:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
 8084c3a:	f805 2b02 	strb.w	r2, [r5], #2
    if( mode == MBEDTLS_RSA_PUBLIC )
 8084c3e:	f1ba 0f00 	cmp.w	sl, #0
 8084c42:	d118      	bne.n	8084c76 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 8084c44:	2202      	movs	r2, #2
 8084c46:	7072      	strb	r2, [r6, #1]
 8084c48:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
 8084c4a:	42a5      	cmp	r5, r4
 8084c4c:	d01c      	beq.n	8084c88 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
 8084c4e:	2264      	movs	r2, #100	; 0x64
 8084c50:	9200      	str	r2, [sp, #0]
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
 8084c52:	2201      	movs	r2, #1
 8084c54:	4629      	mov	r1, r5
 8084c56:	4658      	mov	r0, fp
 8084c58:	9301      	str	r3, [sp, #4]
 8084c5a:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
 8084c5c:	782a      	ldrb	r2, [r5, #0]
 8084c5e:	9b01      	ldr	r3, [sp, #4]
 8084c60:	bb8a      	cbnz	r2, 8084cc6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 8084c62:	9a00      	ldr	r2, [sp, #0]
 8084c64:	3a01      	subs	r2, #1
 8084c66:	9200      	str	r2, [sp, #0]
 8084c68:	d102      	bne.n	8084c70 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7c>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8084c6a:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 8084c6e:	e02e      	b.n	8084cce <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
 8084c70:	2800      	cmp	r0, #0
 8084c72:	d0ee      	beq.n	8084c52 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5e>
 8084c74:	e7f9      	b.n	8084c6a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 8084c76:	2201      	movs	r2, #1
 8084c78:	7072      	strb	r2, [r6, #1]
 8084c7a:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
 8084c7c:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 8084c7e:	42ac      	cmp	r4, r5
 8084c80:	d002      	beq.n	8084c88 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
            *p++ = 0xFF;
 8084c82:	f805 2b01 	strb.w	r2, [r5], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 8084c86:	e7fa      	b.n	8084c7e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
    }

    *p++ = 0;
 8084c88:	4620      	mov	r0, r4
 8084c8a:	2200      	movs	r2, #0
 8084c8c:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 8084c90:	4619      	mov	r1, r3
 8084c92:	4642      	mov	r2, r8
 8084c94:	f00e fc5d 	bl	8093552 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084c98:	f1ba 0f00 	cmp.w	sl, #0
 8084c9c:	d107      	bne.n	8084cae <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xba>
 8084c9e:	4632      	mov	r2, r6
 8084ca0:	4631      	mov	r1, r6
 8084ca2:	4638      	mov	r0, r7
}
 8084ca4:	b003      	add	sp, #12
 8084ca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084caa:	f7ff bd17 	b.w	80846dc <mbedtls_rsa_public>
 8084cae:	4633      	mov	r3, r6
 8084cb0:	465a      	mov	r2, fp
 8084cb2:	4649      	mov	r1, r9
 8084cb4:	4638      	mov	r0, r7
 8084cb6:	960c      	str	r6, [sp, #48]	; 0x30
}
 8084cb8:	b003      	add	sp, #12
 8084cba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084cbe:	f7ff bd4f 	b.w	8084760 <mbedtls_rsa_private>
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084cc2:	4804      	ldr	r0, [pc, #16]	; (8084cd4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
 8084cc4:	e003      	b.n	8084cce <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 8084cc6:	2800      	cmp	r0, #0
 8084cc8:	d1cf      	bne.n	8084c6a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
 8084cca:	3501      	adds	r5, #1
    *p++ = 0;
    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
 8084ccc:	e7bd      	b.n	8084c4a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 8084cce:	b003      	add	sp, #12
 8084cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084cd4:	ffffbf80 	.word	0xffffbf80

08084cd8 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8084cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084cda:	b087      	sub	sp, #28
    switch( ctx->padding )
 8084cdc:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8084ce0:	ac0c      	add	r4, sp, #48	; 0x30
 8084ce2:	cc70      	ldmia	r4, {r4, r5, r6}
    switch( ctx->padding )
 8084ce4:	b157      	cbz	r7, 8084cfc <mbedtls_rsa_pkcs1_encrypt+0x24>
 8084ce6:	2f01      	cmp	r7, #1
 8084ce8:	d110      	bne.n	8084d0c <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
 8084cea:	9402      	str	r4, [sp, #8]
 8084cec:	2400      	movs	r4, #0
 8084cee:	9604      	str	r6, [sp, #16]
 8084cf0:	9503      	str	r5, [sp, #12]
 8084cf2:	9401      	str	r4, [sp, #4]
 8084cf4:	9400      	str	r4, [sp, #0]
 8084cf6:	f7ff feeb 	bl	8084ad0 <mbedtls_rsa_rsaes_oaep_encrypt>
 8084cfa:	e008      	b.n	8084d0e <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 8084cfc:	960e      	str	r6, [sp, #56]	; 0x38
 8084cfe:	950d      	str	r5, [sp, #52]	; 0x34
 8084d00:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084d02:	b007      	add	sp, #28
 8084d04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 8084d08:	f7ff bf74 	b.w	8084bf4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8084d0c:	4801      	ldr	r0, [pc, #4]	; (8084d14 <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
 8084d0e:	b007      	add	sp, #28
 8084d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084d12:	bf00      	nop
 8084d14:	ffffbf00 	.word	0xffffbf00

08084d18 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 8084d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084d1c:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 8084d1e:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 8084d22:	4606      	mov	r6, r0
 8084d24:	468a      	mov	sl, r1
 8084d26:	9203      	str	r2, [sp, #12]
 8084d28:	469b      	mov	fp, r3
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084d2a:	d105      	bne.n	8084d38 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
 8084d2c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8084d30:	2b01      	cmp	r3, #1
 8084d32:	d001      	beq.n	8084d38 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084d34:	485c      	ldr	r0, [pc, #368]	; (8084ea8 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 8084d36:	e0b2      	b.n	8084e9e <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
 8084d38:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 8084d3a:	f1a7 0310 	sub.w	r3, r7, #16
 8084d3e:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8084d42:	d8f7      	bhi.n	8084d34 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8084d44:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
 8084d48:	f003 f9ee 	bl	8088128 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8084d4c:	9002      	str	r0, [sp, #8]
 8084d4e:	2800      	cmp	r0, #0
 8084d50:	d0f0      	beq.n	8084d34 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8084d52:	f003 fb2d 	bl	80883b0 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 8084d56:	f100 0801 	add.w	r8, r0, #1
 8084d5a:	ea4f 0548 	mov.w	r5, r8, lsl #1
 8084d5e:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8084d60:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 8084d62:	d3e7      	bcc.n	8084d34 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 8084d64:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8084d68:	f1bb 0f00 	cmp.w	fp, #0
 8084d6c:	d106      	bne.n	8084d7c <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
 8084d6e:	464a      	mov	r2, r9
 8084d70:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 8084d74:	4630      	mov	r0, r6
 8084d76:	f7ff fcb1 	bl	80846dc <mbedtls_rsa_public>
 8084d7a:	e008      	b.n	8084d8e <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
 8084d7c:	f8cd 9000 	str.w	r9, [sp]
 8084d80:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 8084d84:	9a03      	ldr	r2, [sp, #12]
 8084d86:	4651      	mov	r1, sl
 8084d88:	4630      	mov	r0, r6
 8084d8a:	f7ff fce9 	bl	8084760 <mbedtls_rsa_private>
 8084d8e:	4682      	mov	sl, r0

    if( ret != 0 )
 8084d90:	2800      	cmp	r0, #0
 8084d92:	d13c      	bne.n	8084e0e <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
 8084d94:	ae05      	add	r6, sp, #20
 8084d96:	4630      	mov	r0, r6
 8084d98:	f003 f9d2 	bl	8088140 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8084d9c:	4652      	mov	r2, sl
 8084d9e:	9902      	ldr	r1, [sp, #8]
 8084da0:	4630      	mov	r0, r6
 8084da2:	f003 f9f3 	bl	808818c <mbedtls_md_setup>
 8084da6:	4682      	mov	sl, r0
 8084da8:	b108      	cbz	r0, 8084dae <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
 8084daa:	4630      	mov	r0, r6
 8084dac:	e03b      	b.n	8084e26 <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 8084dae:	f107 3bff 	add.w	fp, r7, #4294967295
 8084db2:	44c8      	add	r8, r9
 8084db4:	ebc4 0b0b 	rsb	fp, r4, fp
                          &md_ctx ) ) != 0 ||
 8084db8:	9600      	str	r6, [sp, #0]
 8084dba:	465b      	mov	r3, fp
 8084dbc:	4642      	mov	r2, r8
 8084dbe:	4621      	mov	r1, r4
 8084dc0:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 8084dc4:	f7ff f9de 	bl	8084184 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084dc8:	4682      	mov	sl, r0
 8084dca:	bb58      	cbnz	r0, 8084e24 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 8084dcc:	9600      	str	r6, [sp, #0]
 8084dce:	4623      	mov	r3, r4
 8084dd0:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 8084dd4:	4659      	mov	r1, fp
 8084dd6:	4640      	mov	r0, r8
 8084dd8:	f7ff f9d4 	bl	8084184 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084ddc:	4682      	mov	sl, r0
 8084dde:	bb08      	cbnz	r0, 8084e24 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 8084de0:	e024      	b.n	8084e2c <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
 8084de2:	5c88      	ldrb	r0, [r1, r2]
 8084de4:	f080 0001 	eor.w	r0, r0, #1
 8084de8:	ea50 030e 	orrs.w	r3, r0, lr
 8084dec:	d151      	bne.n	8084e92 <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
 8084dee:	3201      	adds	r2, #1
 8084df0:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 8084df2:	aa18      	add	r2, sp, #96	; 0x60
 8084df4:	1a8a      	subs	r2, r1, r2
 8084df6:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
 8084dfa:	1aba      	subs	r2, r7, r2
 8084dfc:	4282      	cmp	r2, r0
 8084dfe:	d84b      	bhi.n	8084e98 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084e00:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
 8084e04:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
 8084e06:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
 8084e0a:	f00e fba2 	bl	8093552 <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 8084e0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8084e12:	a818      	add	r0, sp, #96	; 0x60
 8084e14:	f7ff f9ae 	bl	8084174 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 8084e18:	a808      	add	r0, sp, #32
 8084e1a:	2140      	movs	r1, #64	; 0x40
 8084e1c:	f7ff f9aa 	bl	8084174 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 8084e20:	4650      	mov	r0, sl
 8084e22:	e03c      	b.n	8084e9e <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
 8084e24:	a805      	add	r0, sp, #20
 8084e26:	f003 f990 	bl	808814a <mbedtls_md_free>
        goto cleanup;
 8084e2a:	e7f0      	b.n	8084e0e <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
 8084e2c:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 8084e2e:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
 8084e30:	f003 f98b 	bl	808814a <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 8084e34:	4633      	mov	r3, r6
 8084e36:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 8084e3a:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 8084e3e:	9802      	ldr	r0, [sp, #8]
 8084e40:	f003 f9e4 	bl	808820c <mbedtls_md>
 8084e44:	4682      	mov	sl, r0
 8084e46:	2800      	cmp	r0, #0
 8084e48:	d1e1      	bne.n	8084e0e <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8084e4a:	4650      	mov	r0, sl
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
 8084e4c:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
 8084e50:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
 8084e54:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8084e56:	42a0      	cmp	r0, r4
 8084e58:	d208      	bcs.n	8084e6c <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
 8084e5a:	5c32      	ldrb	r2, [r6, r0]
 8084e5c:	f811 c000 	ldrb.w	ip, [r1, r0]
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8084e60:	3001      	adds	r0, #1
        bad |= lhash[i] ^ *p++;
 8084e62:	ea82 0c0c 	eor.w	ip, r2, ip
 8084e66:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8084e6a:	e7f4      	b.n	8084e56 <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
 8084e6c:	4421      	add	r1, r4

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8084e6e:	2400      	movs	r4, #0
 8084e70:	460e      	mov	r6, r1
 8084e72:	4622      	mov	r2, r4
 8084e74:	1b7d      	subs	r5, r7, r5
 8084e76:	440d      	add	r5, r1
 8084e78:	42b5      	cmp	r5, r6
 8084e7a:	d0b2      	beq.n	8084de2 <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
 8084e7c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8084e80:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8084e82:	4260      	negs	r0, r4
 8084e84:	4320      	orrs	r0, r4
 8084e86:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8084e8a:	f080 0001 	eor.w	r0, r0, #1
 8084e8e:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8084e90:	e7f2      	b.n	8084e78 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8084e92:	f8df a018 	ldr.w	sl, [pc, #24]	; 8084eac <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
 8084e96:	e7ba      	b.n	8084e0e <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8084e98:	f8df a014 	ldr.w	sl, [pc, #20]	; 8084eb0 <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
 8084e9c:	e7b7      	b.n	8084e0e <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 8084e9e:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 8084ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084ea6:	bf00      	nop
 8084ea8:	ffffbf80 	.word	0xffffbf80
 8084eac:	ffffbf00 	.word	0xffffbf00
 8084eb0:	ffffbc00 	.word	0xffffbc00

08084eb4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8084eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084eb6:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8084eb8:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8084ebc:	461d      	mov	r5, r3
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084ebe:	d103      	bne.n	8084ec8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14>
 8084ec0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8084ec4:	2b00      	cmp	r3, #0
 8084ec6:	d17f      	bne.n	8084fc8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 8084ec8:	6847      	ldr	r7, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 8084eca:	f1a7 0310 	sub.w	r3, r7, #16
 8084ece:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8084ed2:	d879      	bhi.n	8084fc8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
 8084ed4:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8084ed6:	b945      	cbnz	r5, 8084eea <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x36>
 8084ed8:	4632      	mov	r2, r6
 8084eda:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
 8084ede:	f7ff fbfd 	bl	80846dc <mbedtls_rsa_public>

    if( ret != 0 )
 8084ee2:	4604      	mov	r4, r0
 8084ee4:	2800      	cmp	r0, #0
 8084ee6:	d168      	bne.n	8084fba <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
 8084ee8:	e02f      	b.n	8084f4a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x96>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8084eea:	9600      	str	r6, [sp, #0]
 8084eec:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
 8084ef0:	f7ff fc36 	bl	8084760 <mbedtls_rsa_private>

    if( ret != 0 )
 8084ef4:	4604      	mov	r4, r0
 8084ef6:	2800      	cmp	r0, #0
 8084ef8:	d15f      	bne.n	8084fba <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 8084efa:	2d01      	cmp	r5, #1
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 8084efc:	7832      	ldrb	r2, [r6, #0]

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 8084efe:	d125      	bne.n	8084f4c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x98>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084f00:	4601      	mov	r1, r0
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 8084f02:	4686      	mov	lr, r0
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8084f04:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084f06:	1efd      	subs	r5, r7, #3
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8084f08:	f083 0302 	eor.w	r3, r3, #2
 8084f0c:	4313      	orrs	r3, r2

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084f0e:	42a9      	cmp	r1, r5
 8084f10:	d212      	bcs.n	8084f38 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8084f12:	1872      	adds	r2, r6, r1
 8084f14:	7890      	ldrb	r0, [r2, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084f16:	3101      	adds	r1, #1
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8084f18:	4242      	negs	r2, r0
 8084f1a:	4310      	orrs	r0, r2
 8084f1c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8084f20:	f080 0001 	eor.w	r0, r0, #1
 8084f24:	4304      	orrs	r4, r0
 8084f26:	b2e4      	uxtb	r4, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8084f28:	4262      	negs	r2, r4
 8084f2a:	4322      	orrs	r2, r4
 8084f2c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8084f30:	f082 0201 	eor.w	r2, r2, #1
 8084f34:	4496      	add	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084f36:	e7ea      	b.n	8084f0e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5a>
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 8084f38:	f10d 020a 	add.w	r2, sp, #10
 8084f3c:	f10e 0101 	add.w	r1, lr, #1
 8084f40:	4411      	add	r1, r2
 8084f42:	f812 200e 	ldrb.w	r2, [r2, lr]
 8084f46:	4313      	orrs	r3, r2
 8084f48:	e01e      	b.n	8084f88 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd4>
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 8084f4a:	7832      	ldrb	r2, [r6, #0]
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8084f4c:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084f4e:	1efc      	subs	r4, r7, #3
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8084f50:	f083 0301 	eor.w	r3, r3, #1
 8084f54:	4313      	orrs	r3, r2
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
 8084f56:	2200      	movs	r2, #0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084f58:	4611      	mov	r1, r2
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 8084f5a:	4696      	mov	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084f5c:	42a1      	cmp	r1, r4
 8084f5e:	d20b      	bcs.n	8084f78 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc4>
        {
            pad_done |= ( p[i] != 0xFF );
 8084f60:	1870      	adds	r0, r6, r1
 8084f62:	7880      	ldrb	r0, [r0, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084f64:	3101      	adds	r1, #1
        {
            pad_done |= ( p[i] != 0xFF );
 8084f66:	28ff      	cmp	r0, #255	; 0xff
 8084f68:	bf18      	it	ne
 8084f6a:	f042 0201 	orrne.w	r2, r2, #1
            pad_count += ( pad_done == 0 );
 8084f6e:	f082 0001 	eor.w	r0, r2, #1
 8084f72:	b2c0      	uxtb	r0, r0
 8084f74:	4486      	add	lr, r0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084f76:	e7f1      	b.n	8084f5c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 8084f78:	f10d 020a 	add.w	r2, sp, #10
 8084f7c:	f812 500e 	ldrb.w	r5, [r2, lr]
 8084f80:	f10e 0101 	add.w	r1, lr, #1
 8084f84:	4411      	add	r1, r2
 8084f86:	432b      	orrs	r3, r5
    }

    bad |= ( pad_count < 8 );

    if( bad )
 8084f88:	f1be 0f07 	cmp.w	lr, #7
 8084f8c:	bf8c      	ite	hi
 8084f8e:	461c      	movhi	r4, r3
 8084f90:	f043 0401 	orrls.w	r4, r3, #1
 8084f94:	b264      	sxtb	r4, r4
 8084f96:	b96c      	cbnz	r4, 8084fb4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x100>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 8084f98:	1b8a      	subs	r2, r1, r6
 8084f9a:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 8084f9e:	1aba      	subs	r2, r7, r2
 8084fa0:	429a      	cmp	r2, r3
 8084fa2:	d809      	bhi.n	8084fb8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x104>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084fa4:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 8084fa8:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084fac:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 8084fae:	f00e fad0 	bl	8093552 <memcpy>
 8084fb2:	e002      	b.n	8084fba <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>

    bad |= ( pad_count < 8 );

    if( bad )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8084fb4:	4c06      	ldr	r4, [pc, #24]	; (8084fd0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11c>)
 8084fb6:	e000      	b.n	8084fba <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8084fb8:	4c06      	ldr	r4, [pc, #24]	; (8084fd4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x120>)
    *olen = ilen - (p - buf);
    memcpy( output, p, *olen );
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 8084fba:	4630      	mov	r0, r6
 8084fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8084fc0:	f7ff f8d8 	bl	8084174 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 8084fc4:	4620      	mov	r0, r4
 8084fc6:	e000      	b.n	8084fca <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x116>
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084fc8:	4803      	ldr	r0, [pc, #12]	; (8084fd8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x124>)

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 8084fca:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 8084fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084fd0:	ffffbf00 	.word	0xffffbf00
 8084fd4:	ffffbc00 	.word	0xffffbc00
 8084fd8:	ffffbf80 	.word	0xffffbf80

08084fdc <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8084fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084fde:	b087      	sub	sp, #28
    switch( ctx->padding )
 8084fe0:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8084fe4:	ac0c      	add	r4, sp, #48	; 0x30
 8084fe6:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
    switch( ctx->padding )
 8084fe8:	f1be 0f00 	cmp.w	lr, #0
 8084fec:	d00c      	beq.n	8085008 <mbedtls_rsa_pkcs1_decrypt+0x2c>
 8084fee:	f1be 0f01 	cmp.w	lr, #1
 8084ff2:	d112      	bne.n	808501a <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
 8084ff4:	9402      	str	r4, [sp, #8]
 8084ff6:	2400      	movs	r4, #0
 8084ff8:	9705      	str	r7, [sp, #20]
 8084ffa:	9604      	str	r6, [sp, #16]
 8084ffc:	9503      	str	r5, [sp, #12]
 8084ffe:	9401      	str	r4, [sp, #4]
 8085000:	9400      	str	r4, [sp, #0]
 8085002:	f7ff fe89 	bl	8084d18 <mbedtls_rsa_rsaes_oaep_decrypt>
 8085006:	e009      	b.n	808501c <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 8085008:	970f      	str	r7, [sp, #60]	; 0x3c
 808500a:	960e      	str	r6, [sp, #56]	; 0x38
 808500c:	950d      	str	r5, [sp, #52]	; 0x34
 808500e:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8085010:	b007      	add	sp, #28
 8085012:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 8085016:	f7ff bf4d 	b.w	8084eb4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 808501a:	4801      	ldr	r0, [pc, #4]	; (8085020 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 808501c:	b007      	add	sp, #28
 808501e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085020:	ffffbf00 	.word	0xffffbf00

08085024 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 8085024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8085028:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 808502a:	b09d      	sub	sp, #116	; 0x74
 808502c:	4680      	mov	r8, r0
 808502e:	468a      	mov	sl, r1
 8085030:	9204      	str	r2, [sp, #16]
 8085032:	9305      	str	r3, [sp, #20]
 8085034:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 8085038:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 808503a:	d105      	bne.n	8085048 <mbedtls_rsa_rsassa_pss_sign+0x24>
 808503c:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 8085040:	2b01      	cmp	r3, #1
 8085042:	d001      	beq.n	8085048 <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8085044:	4858      	ldr	r0, [pc, #352]	; (80851a8 <mbedtls_rsa_rsassa_pss_sign+0x184>)
 8085046:	e0ab      	b.n	80851a0 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    if( f_rng == NULL )
 8085048:	f1ba 0f00 	cmp.w	sl, #0
 808504c:	d0fa      	beq.n	8085044 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 808504e:	f8d8 6004 	ldr.w	r6, [r8, #4]

    if( md_alg != MBEDTLS_MD_NONE )
 8085052:	b130      	cbz	r0, 8085062 <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 8085054:	f003 f868 	bl	8088128 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8085058:	2800      	cmp	r0, #0
 808505a:	d0f3      	beq.n	8085044 <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 808505c:	f003 f9a8 	bl	80883b0 <mbedtls_md_get_size>
 8085060:	9027      	str	r0, [sp, #156]	; 0x9c
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8085062:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 8085066:	f003 f85f 	bl	8088128 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 808506a:	4683      	mov	fp, r0
 808506c:	2800      	cmp	r0, #0
 808506e:	d0e9      	beq.n	8085044 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8085070:	f003 f99e 	bl	80883b0 <mbedtls_md_get_size>
    slen = hlen;

    if( olen < hlen + slen + 2 )
 8085074:	0045      	lsls	r5, r0, #1
 8085076:	1cab      	adds	r3, r5, #2
 8085078:	429e      	cmp	r6, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 808507a:	4607      	mov	r7, r0
    slen = hlen;

    if( olen < hlen + slen + 2 )
 808507c:	d3e2      	bcc.n	8085044 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( sig, 0, olen );
 808507e:	4632      	mov	r2, r6
 8085080:	2100      	movs	r1, #0
 8085082:	4620      	mov	r0, r4
 8085084:	f00e fa8b 	bl	809359e <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 8085088:	463a      	mov	r2, r7
 808508a:	a90c      	add	r1, sp, #48	; 0x30
 808508c:	9804      	ldr	r0, [sp, #16]
 808508e:	47d0      	blx	sl
 8085090:	b110      	cbz	r0, 8085098 <mbedtls_rsa_rsassa_pss_sign+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8085092:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 8085096:	e083      	b.n	80851a0 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8085098:	f108 0308 	add.w	r3, r8, #8
 808509c:	9007      	str	r0, [sp, #28]
 808509e:	4618      	mov	r0, r3
 80850a0:	9303      	str	r3, [sp, #12]
 80850a2:	f006 fd9e 	bl	808bbe2 <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 80850a6:	1b75      	subs	r5, r6, r5
    *p++ = 0x01;
 80850a8:	f105 39ff 	add.w	r9, r5, #4294967295
 80850ac:	2201      	movs	r2, #1
 80850ae:	4425      	add	r5, r4
 80850b0:	44a1      	add	r9, r4
 80850b2:	f805 2c02 	strb.w	r2, [r5, #-2]
    memcpy( p, salt, slen );
 80850b6:	a90c      	add	r1, sp, #48	; 0x30
 80850b8:	463a      	mov	r2, r7
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80850ba:	9006      	str	r0, [sp, #24]
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;

    mbedtls_md_init( &md_ctx );
 80850bc:	ad09      	add	r5, sp, #36	; 0x24

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
 80850be:	4648      	mov	r0, r9
 80850c0:	f00e fa47 	bl	8093552 <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
 80850c4:	4628      	mov	r0, r5
 80850c6:	f003 f83b 	bl	8088140 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80850ca:	9b07      	ldr	r3, [sp, #28]
 80850cc:	4659      	mov	r1, fp
 80850ce:	461a      	mov	r2, r3
 80850d0:	4628      	mov	r0, r5
 80850d2:	f003 f85b 	bl	808818c <mbedtls_md_setup>
 80850d6:	4602      	mov	r2, r0
 80850d8:	2800      	cmp	r0, #0
 80850da:	d14a      	bne.n	8085172 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 80850dc:	4628      	mov	r0, r5
 80850de:	f003 f877 	bl	80881d0 <mbedtls_md_starts>
 80850e2:	4602      	mov	r2, r0
 80850e4:	2800      	cmp	r0, #0
 80850e6:	d144      	bne.n	8085172 <mbedtls_rsa_rsassa_pss_sign+0x14e>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
 80850e8:	eb09 0b07 	add.w	fp, r9, r7
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 80850ec:	2208      	movs	r2, #8
 80850ee:	4659      	mov	r1, fp
 80850f0:	4628      	mov	r0, r5
 80850f2:	f003 f877 	bl	80881e4 <mbedtls_md_update>
 80850f6:	4602      	mov	r2, r0
 80850f8:	2800      	cmp	r0, #0
 80850fa:	d13a      	bne.n	8085172 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 80850fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80850fe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8085100:	4628      	mov	r0, r5
 8085102:	f003 f86f 	bl	80881e4 <mbedtls_md_update>
 8085106:	4602      	mov	r2, r0
 8085108:	bb98      	cbnz	r0, 8085172 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 808510a:	463a      	mov	r2, r7
 808510c:	a90c      	add	r1, sp, #48	; 0x30
 808510e:	4628      	mov	r0, r5
 8085110:	f003 f868 	bl	80881e4 <mbedtls_md_update>
 8085114:	4602      	mov	r2, r0
 8085116:	bb60      	cbnz	r0, 8085172 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 8085118:	4659      	mov	r1, fp
 808511a:	4628      	mov	r0, r5
 808511c:	f003 f86c 	bl	80881f8 <mbedtls_md_finish>
 8085120:	4602      	mov	r2, r0
 8085122:	bb30      	cbnz	r0, 8085172 <mbedtls_rsa_rsassa_pss_sign+0x14e>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 8085124:	9b06      	ldr	r3, [sp, #24]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 8085126:	1e71      	subs	r1, r6, #1
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 8085128:	3b01      	subs	r3, #1
 808512a:	f013 0f07 	tst.w	r3, #7
 808512e:	bf0c      	ite	eq
 8085130:	2001      	moveq	r0, #1
 8085132:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 8085134:	1bc9      	subs	r1, r1, r7
 8085136:	465a      	mov	r2, fp
 8085138:	1a09      	subs	r1, r1, r0
 808513a:	9500      	str	r5, [sp, #0]
 808513c:	463b      	mov	r3, r7
 808513e:	4420      	add	r0, r4
 8085140:	f7ff f820 	bl	8084184 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8085144:	4602      	mov	r2, r0
 8085146:	b9a0      	cbnz	r0, 8085172 <mbedtls_rsa_rsassa_pss_sign+0x14e>
 8085148:	9006      	str	r0, [sp, #24]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 808514a:	9803      	ldr	r0, [sp, #12]
 808514c:	f006 fd49 	bl	808bbe2 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8085150:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 8085154:	7823      	ldrb	r3, [r4, #0]
 8085156:	3001      	adds	r0, #1
 8085158:	26ff      	movs	r6, #255	; 0xff
 808515a:	fa46 f000 	asr.w	r0, r6, r0
 808515e:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
 8085160:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8085162:	7020      	strb	r0, [r4, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_zeroize( salt, sizeof( salt ) );
 8085164:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
 8085166:	f809 3017 	strb.w	r3, [r9, r7, lsl #1]

    mbedtls_zeroize( salt, sizeof( salt ) );
 808516a:	a80c      	add	r0, sp, #48	; 0x30
 808516c:	f7ff f802 	bl	8084174 <_ZL15mbedtls_zeroizePvj>
 8085170:	9a06      	ldr	r2, [sp, #24]

exit:
    mbedtls_md_free( &md_ctx );
 8085172:	4628      	mov	r0, r5
 8085174:	9203      	str	r2, [sp, #12]
 8085176:	f002 ffe8 	bl	808814a <mbedtls_md_free>

    if( ret != 0 )
 808517a:	9a03      	ldr	r2, [sp, #12]
 808517c:	b97a      	cbnz	r2, 808519e <mbedtls_rsa_rsassa_pss_sign+0x17a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 808517e:	9b05      	ldr	r3, [sp, #20]
 8085180:	b92b      	cbnz	r3, 808518e <mbedtls_rsa_rsassa_pss_sign+0x16a>
 8085182:	4622      	mov	r2, r4
 8085184:	4621      	mov	r1, r4
 8085186:	4640      	mov	r0, r8
 8085188:	f7ff faa8 	bl	80846dc <mbedtls_rsa_public>
 808518c:	e008      	b.n	80851a0 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 808518e:	9400      	str	r4, [sp, #0]
 8085190:	4623      	mov	r3, r4
 8085192:	9a04      	ldr	r2, [sp, #16]
 8085194:	4651      	mov	r1, sl
 8085196:	4640      	mov	r0, r8
 8085198:	f7ff fae2 	bl	8084760 <mbedtls_rsa_private>
 808519c:	e000      	b.n	80851a0 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 808519e:	4610      	mov	r0, r2
}
 80851a0:	b01d      	add	sp, #116	; 0x74
 80851a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80851a6:	bf00      	nop
 80851a8:	ffffbf80 	.word	0xffffbf80

080851ac <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80851ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80851b0:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80851b2:	4689      	mov	r9, r1
 80851b4:	a90b      	add	r1, sp, #44	; 0x2c
 80851b6:	4605      	mov	r5, r0
 80851b8:	4692      	mov	sl, r2
 80851ba:	c986      	ldmia	r1, {r1, r2, r7}
 80851bc:	461c      	mov	r4, r3
 80851be:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80851c2:	d103      	bne.n	80851cc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 80851c4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80851c8:	2b00      	cmp	r3, #0
 80851ca:	d14b      	bne.n	8085264 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 80851cc:	9700      	str	r7, [sp, #0]
 80851ce:	686b      	ldr	r3, [r5, #4]
 80851d0:	f7ff f82a 	bl	8084228 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 80851d4:	2800      	cmp	r0, #0
 80851d6:	d149      	bne.n	808526c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 80851d8:	b93c      	cbnz	r4, 80851ea <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 80851da:	463a      	mov	r2, r7
 80851dc:	4639      	mov	r1, r7
 80851de:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 80851e0:	b002      	add	sp, #8
 80851e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 80851e6:	f7ff ba79 	b.w	80846dc <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 80851ea:	686c      	ldr	r4, [r5, #4]
 80851ec:	2001      	movs	r0, #1
 80851ee:	4621      	mov	r1, r4
 80851f0:	f00e f892 	bl	8093318 <calloc>
    if( sig_try == NULL )
 80851f4:	4606      	mov	r6, r0
 80851f6:	b3b8      	cbz	r0, 8085268 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 80851f8:	4621      	mov	r1, r4
 80851fa:	2001      	movs	r0, #1
 80851fc:	f00e f88c 	bl	8093318 <calloc>
    if( verif == NULL )
 8085200:	4680      	mov	r8, r0
 8085202:	b918      	cbnz	r0, 808520c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
 8085204:	4630      	mov	r0, r6
 8085206:	f00c fa3f 	bl	8091688 <free>
 808520a:	e02d      	b.n	8085268 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 808520c:	9600      	str	r6, [sp, #0]
 808520e:	463b      	mov	r3, r7
 8085210:	4652      	mov	r2, sl
 8085212:	4649      	mov	r1, r9
 8085214:	4628      	mov	r0, r5
 8085216:	f7ff faa3 	bl	8084760 <mbedtls_rsa_private>
 808521a:	4604      	mov	r4, r0
 808521c:	b9d0      	cbnz	r0, 8085254 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 808521e:	4642      	mov	r2, r8
 8085220:	4631      	mov	r1, r6
 8085222:	4628      	mov	r0, r5
 8085224:	f7ff fa5a 	bl	80846dc <mbedtls_rsa_public>
 8085228:	4604      	mov	r4, r0
 808522a:	b998      	cbnz	r0, 8085254 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
 808522c:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
 808522e:	4602      	mov	r2, r0
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8085230:	686d      	ldr	r5, [r5, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8085232:	42aa      	cmp	r2, r5
 8085234:	d007      	beq.n	8085246 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
 8085236:	f818 0002 	ldrb.w	r0, [r8, r2]
 808523a:	5cb9      	ldrb	r1, [r7, r2]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808523c:	3201      	adds	r2, #1
        diff |= A[i] ^ B[i];
 808523e:	4041      	eors	r1, r0
 8085240:	430b      	orrs	r3, r1
 8085242:	b2db      	uxtb	r3, r3
 8085244:	e7f5      	b.n	8085232 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8085246:	b923      	cbnz	r3, 8085252 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
 8085248:	4631      	mov	r1, r6
 808524a:	4638      	mov	r0, r7
 808524c:	f00e f981 	bl	8093552 <memcpy>
 8085250:	e000      	b.n	8085254 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8085252:	4c08      	ldr	r4, [pc, #32]	; (8085274 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
 8085254:	4630      	mov	r0, r6
 8085256:	f00c fa17 	bl	8091688 <free>
    mbedtls_free( verif );
 808525a:	4640      	mov	r0, r8
 808525c:	f00c fa14 	bl	8091688 <free>

    return( ret );
 8085260:	4620      	mov	r0, r4
 8085262:	e003      	b.n	808526c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
{
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8085264:	4804      	ldr	r0, [pc, #16]	; (8085278 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
 8085266:	e001      	b.n	808526c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8085268:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 808526c:	b002      	add	sp, #8
 808526e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085272:	bf00      	nop
 8085274:	ffffbd00 	.word	0xffffbd00
 8085278:	ffffbf80 	.word	0xffffbf80

0808527c <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 808527c:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 808527e:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8085282:	ad06      	add	r5, sp, #24
 8085284:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8085288:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 808528a:	f1be 0f00 	cmp.w	lr, #0
 808528e:	d00a      	beq.n	80852a6 <mbedtls_rsa_pkcs1_sign+0x2a>
 8085290:	f1be 0f01 	cmp.w	lr, #1
 8085294:	d10f      	bne.n	80852b6 <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 8085296:	9708      	str	r7, [sp, #32]
 8085298:	9607      	str	r6, [sp, #28]
 808529a:	9506      	str	r5, [sp, #24]
 808529c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808529e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 80852a2:	f7ff bebf 	b.w	8085024 <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 80852a6:	9708      	str	r7, [sp, #32]
 80852a8:	9607      	str	r6, [sp, #28]
 80852aa:	9506      	str	r5, [sp, #24]
 80852ac:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80852ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 80852b2:	f7ff bf7b 	b.w	80851ac <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80852b6:	4801      	ldr	r0, [pc, #4]	; (80852bc <mbedtls_rsa_pkcs1_sign+0x40>)
 80852b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80852ba:	bf00      	nop
 80852bc:	ffffbf00 	.word	0xffffbf00

080852c0 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 80852c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80852c4:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 80852c6:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80852ca:	4605      	mov	r5, r0
 80852cc:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80852d0:	d105      	bne.n	80852de <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 80852d2:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 80852d6:	2801      	cmp	r0, #1
 80852d8:	d001      	beq.n	80852de <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80852da:	4861      	ldr	r0, [pc, #388]	; (8085460 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
 80852dc:	e0bb      	b.n	8085456 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
 80852de:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
 80852e0:	f1a7 0010 	sub.w	r0, r7, #16
 80852e4:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 80852e8:	d8f7      	bhi.n	80852da <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
 80852ea:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80852ec:	b933      	cbnz	r3, 80852fc <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
 80852ee:	4632      	mov	r2, r6
 80852f0:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
 80852f4:	4628      	mov	r0, r5
 80852f6:	f7ff f9f1 	bl	80846dc <mbedtls_rsa_public>
 80852fa:	e005      	b.n	8085308 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
 80852fc:	9600      	str	r6, [sp, #0]
 80852fe:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 8085302:	4628      	mov	r0, r5
 8085304:	f7ff fa2c 	bl	8084760 <mbedtls_rsa_private>

    if( ret != 0 )
 8085308:	2800      	cmp	r0, #0
 808530a:	f040 80a4 	bne.w	8085456 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
 808530e:	1e7c      	subs	r4, r7, #1
 8085310:	5d33      	ldrb	r3, [r6, r4]
 8085312:	2bbc      	cmp	r3, #188	; 0xbc
 8085314:	f040 809e 	bne.w	8085454 <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
 8085318:	f1b8 0f00 	cmp.w	r8, #0
 808531c:	d008      	beq.n	8085330 <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 808531e:	4640      	mov	r0, r8
 8085320:	f002 ff02 	bl	8088128 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8085324:	2800      	cmp	r0, #0
 8085326:	d0d8      	beq.n	80852da <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8085328:	f003 f842 	bl	80883b0 <mbedtls_md_get_size>
 808532c:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 8085330:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
 8085334:	f002 fef8 	bl	8088128 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8085338:	4681      	mov	r9, r0
 808533a:	2800      	cmp	r0, #0
 808533c:	d0cd      	beq.n	80852da <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 808533e:	f003 f837 	bl	80883b0 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
 8085342:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8085344:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8085346:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
 808534a:	9303      	str	r3, [sp, #12]
 808534c:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 808534e:	f006 fc48 	bl	808bbe2 <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8085352:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8085354:	f100 38ff 	add.w	r8, r0, #4294967295

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8085358:	7832      	ldrb	r2, [r6, #0]
 808535a:	f1c3 0308 	rsb	r3, r3, #8
 808535e:	4443      	add	r3, r8
 8085360:	fa52 f303 	asrs.w	r3, r2, r3
 8085364:	d1b9      	bne.n	80852da <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
 8085366:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
 808536a:	bf08      	it	eq
 808536c:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
 808536e:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
 8085372:	bf0c      	ite	eq
 8085374:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
 8085378:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
 808537a:	429f      	cmp	r7, r3
 808537c:	d3ad      	bcc.n	80852da <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
 808537e:	ac05      	add	r4, sp, #20
 8085380:	4620      	mov	r0, r4
 8085382:	f002 fedd 	bl	8088140 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8085386:	2200      	movs	r2, #0
 8085388:	4649      	mov	r1, r9
 808538a:	4620      	mov	r0, r4
 808538c:	f002 fefe 	bl	808818c <mbedtls_md_setup>
 8085390:	4683      	mov	fp, r0
 8085392:	2800      	cmp	r0, #0
 8085394:	d159      	bne.n	808544a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
 8085396:	ea6f 010a 	mvn.w	r1, sl
 808539a:	4439      	add	r1, r7
 808539c:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 80853a0:	9400      	str	r4, [sp, #0]
 80853a2:	4653      	mov	r3, sl
 80853a4:	464a      	mov	r2, r9
 80853a6:	4628      	mov	r0, r5
 80853a8:	f7fe feec 	bl	8084184 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
 80853ac:	4683      	mov	fp, r0
 80853ae:	2800      	cmp	r0, #0
 80853b0:	d14b      	bne.n	808544a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 80853b2:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
 80853b6:	7833      	ldrb	r3, [r6, #0]
 80853b8:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80853bc:	fa48 f707 	asr.w	r7, r8, r7
 80853c0:	401f      	ands	r7, r3
 80853c2:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
 80853c4:	f109 32ff 	add.w	r2, r9, #4294967295
 80853c8:	4295      	cmp	r5, r2
 80853ca:	4629      	mov	r1, r5
 80853cc:	d203      	bcs.n	80853d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
 80853ce:	780b      	ldrb	r3, [r1, #0]
 80853d0:	3501      	adds	r5, #1
 80853d2:	2b00      	cmp	r3, #0
 80853d4:	d0f8      	beq.n	80853c8 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
 80853d6:	780b      	ldrb	r3, [r1, #0]
 80853d8:	2b01      	cmp	r3, #1
 80853da:	d134      	bne.n	8085446 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80853dc:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
 80853e0:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80853e2:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
 80853e4:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80853e8:	d001      	beq.n	80853ee <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
 80853ea:	429e      	cmp	r6, r3
 80853ec:	d12b      	bne.n	8085446 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
 80853ee:	4620      	mov	r0, r4
 80853f0:	f002 feee 	bl	80881d0 <mbedtls_md_starts>
    if ( ret != 0 )
 80853f4:	4683      	mov	fp, r0
 80853f6:	bb40      	cbnz	r0, 808544a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 80853f8:	2208      	movs	r2, #8
 80853fa:	a903      	add	r1, sp, #12
 80853fc:	4620      	mov	r0, r4
 80853fe:	f002 fef1 	bl	80881e4 <mbedtls_md_update>
    if ( ret != 0 )
 8085402:	4683      	mov	fp, r0
 8085404:	bb08      	cbnz	r0, 808544a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 8085406:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 808540a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
 808540e:	4620      	mov	r0, r4
 8085410:	f002 fee8 	bl	80881e4 <mbedtls_md_update>
    if ( ret != 0 )
 8085414:	4683      	mov	fp, r0
 8085416:	b9c0      	cbnz	r0, 808544a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 8085418:	4632      	mov	r2, r6
 808541a:	4629      	mov	r1, r5
 808541c:	4620      	mov	r0, r4
 808541e:	f002 fee1 	bl	80881e4 <mbedtls_md_update>
    if ( ret != 0 )
 8085422:	4683      	mov	fp, r0
 8085424:	b988      	cbnz	r0, 808544a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
 8085426:	a908      	add	r1, sp, #32
 8085428:	4620      	mov	r0, r4
 808542a:	f002 fee5 	bl	80881f8 <mbedtls_md_finish>
    if ( ret != 0 )
 808542e:	4683      	mov	fp, r0
 8085430:	b958      	cbnz	r0, 808544a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
 8085432:	4652      	mov	r2, sl
 8085434:	a908      	add	r1, sp, #32
 8085436:	4648      	mov	r0, r9
 8085438:	f00e f87c 	bl	8093534 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 808543c:	4a09      	ldr	r2, [pc, #36]	; (8085464 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
 808543e:	2800      	cmp	r0, #0
 8085440:	bf18      	it	ne
 8085442:	4693      	movne	fp, r2
 8085444:	e001      	b.n	808544a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8085446:	f8df b020 	ldr.w	fp, [pc, #32]	; 8085468 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
 808544a:	4620      	mov	r0, r4
 808544c:	f002 fe7d 	bl	808814a <mbedtls_md_free>

    return( ret );
 8085450:	4658      	mov	r0, fp
 8085452:	e000      	b.n	8085456 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8085454:	4804      	ldr	r0, [pc, #16]	; (8085468 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
 8085456:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 808545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808545e:	bf00      	nop
 8085460:	ffffbf80 	.word	0xffffbf80
 8085464:	ffffbc80 	.word	0xffffbc80
 8085468:	ffffbf00 	.word	0xffffbf00

0808546c <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 808546c:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 808546e:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 8085472:	b086      	sub	sp, #24
 8085474:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 8085478:	b10c      	cbz	r4, 808547e <mbedtls_rsa_rsassa_pss_verify+0x12>
 808547a:	b2e4      	uxtb	r4, r4
 808547c:	e000      	b.n	8085480 <mbedtls_rsa_rsassa_pss_verify+0x14>
 808547e:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
 8085480:	9403      	str	r4, [sp, #12]
 8085482:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085484:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8085486:	9402      	str	r4, [sp, #8]
 8085488:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 808548a:	9605      	str	r6, [sp, #20]
 808548c:	f04f 36ff 	mov.w	r6, #4294967295
 8085490:	9604      	str	r6, [sp, #16]
 8085492:	9401      	str	r4, [sp, #4]
 8085494:	9500      	str	r5, [sp, #0]
 8085496:	f7ff ff13 	bl	80852c0 <mbedtls_rsa_rsassa_pss_verify_ext>

}
 808549a:	b006      	add	sp, #24
 808549c:	bd70      	pop	{r4, r5, r6, pc}
	...

080854a0 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 80854a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80854a4:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 80854a6:	4680      	mov	r8, r0
 80854a8:	468a      	mov	sl, r1
 80854aa:	4693      	mov	fp, r2
 80854ac:	4699      	mov	r9, r3
    int ret = 0;
    const size_t sig_len = ctx->len;
 80854ae:	6845      	ldr	r5, [r0, #4]
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80854b0:	d102      	bne.n	80854b8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
 80854b2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80854b6:	b9eb      	cbnz	r3, 80854f4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
 80854b8:	4629      	mov	r1, r5
 80854ba:	2001      	movs	r0, #1
 80854bc:	f00d ff2c 	bl	8093318 <calloc>
 80854c0:	4606      	mov	r6, r0
 80854c2:	b1c8      	cbz	r0, 80854f8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
 80854c4:	4629      	mov	r1, r5
 80854c6:	2001      	movs	r0, #1
 80854c8:	f00d ff26 	bl	8093318 <calloc>
 80854cc:	4607      	mov	r7, r0
 80854ce:	b9c0      	cbnz	r0, 8085502 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80854d0:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_zeroize( encoded, sig_len );
 80854d4:	4630      	mov	r0, r6
 80854d6:	4629      	mov	r1, r5
 80854d8:	f7fe fe4c 	bl	8084174 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded );
 80854dc:	4630      	mov	r0, r6
 80854de:	f00c f8d3 	bl	8091688 <free>
    }

    if( encoded_expected != NULL )
 80854e2:	b167      	cbz	r7, 80854fe <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
 80854e4:	4638      	mov	r0, r7
 80854e6:	4629      	mov	r1, r5
 80854e8:	f7fe fe44 	bl	8084174 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded_expected );
 80854ec:	4638      	mov	r0, r7
 80854ee:	f00c f8cb 	bl	8091688 <free>
 80854f2:	e004      	b.n	80854fe <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80854f4:	481b      	ldr	r0, [pc, #108]	; (8085564 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 80854f6:	e031      	b.n	808555c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80854f8:	f06f 000f 	mvn.w	r0, #15
 80854fc:	e02e      	b.n	808555c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
 80854fe:	4620      	mov	r0, r4
 8085500:	e02c      	b.n	808555c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 8085502:	9000      	str	r0, [sp, #0]
 8085504:	462b      	mov	r3, r5
 8085506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8085508:	990d      	ldr	r1, [sp, #52]	; 0x34
 808550a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 808550e:	f7fe fe8b 	bl	8084228 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 8085512:	4604      	mov	r4, r0
 8085514:	2800      	cmp	r0, #0
 8085516:	d1dd      	bne.n	80854d4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8085518:	f1b9 0f00 	cmp.w	r9, #0
 808551c:	d105      	bne.n	808552a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
 808551e:	4632      	mov	r2, r6
 8085520:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8085522:	4640      	mov	r0, r8
 8085524:	f7ff f8da 	bl	80846dc <mbedtls_rsa_public>
 8085528:	e006      	b.n	8085538 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
 808552a:	9600      	str	r6, [sp, #0]
 808552c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808552e:	465a      	mov	r2, fp
 8085530:	4651      	mov	r1, sl
 8085532:	4640      	mov	r0, r8
 8085534:	f7ff f914 	bl	8084760 <mbedtls_rsa_private>
 8085538:	4604      	mov	r4, r0
    if( ret != 0 )
 808553a:	2800      	cmp	r0, #0
 808553c:	d1ca      	bne.n	80854d4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 808553e:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8085540:	429d      	cmp	r5, r3
 8085542:	d006      	beq.n	8085552 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
 8085544:	5cf0      	ldrb	r0, [r6, r3]
 8085546:	5cfa      	ldrb	r2, [r7, r3]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8085548:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 808554a:	4050      	eors	r0, r2
 808554c:	4304      	orrs	r4, r0
 808554e:	b2e4      	uxtb	r4, r4
 8085550:	e7f6      	b.n	8085540 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8085552:	2c00      	cmp	r4, #0
 8085554:	4c04      	ldr	r4, [pc, #16]	; (8085568 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
 8085556:	bf08      	it	eq
 8085558:	2400      	moveq	r4, #0
 808555a:	e7bb      	b.n	80854d4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
 808555c:	b003      	add	sp, #12
 808555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085562:	bf00      	nop
 8085564:	ffffbf80 	.word	0xffffbf80
 8085568:	ffffbc80 	.word	0xffffbc80

0808556c <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 808556c:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 808556e:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8085572:	ad06      	add	r5, sp, #24
 8085574:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8085578:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 808557a:	f1be 0f00 	cmp.w	lr, #0
 808557e:	d00a      	beq.n	8085596 <mbedtls_rsa_pkcs1_verify+0x2a>
 8085580:	f1be 0f01 	cmp.w	lr, #1
 8085584:	d10f      	bne.n	80855a6 <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 8085586:	9708      	str	r7, [sp, #32]
 8085588:	9607      	str	r6, [sp, #28]
 808558a:	9506      	str	r5, [sp, #24]
 808558c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808558e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 8085592:	f7ff bf6b 	b.w	808546c <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 8085596:	9708      	str	r7, [sp, #32]
 8085598:	9607      	str	r6, [sp, #28]
 808559a:	9506      	str	r5, [sp, #24]
 808559c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808559e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 80855a2:	f7ff bf7d 	b.w	80854a0 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80855a6:	4801      	ldr	r0, [pc, #4]	; (80855ac <mbedtls_rsa_pkcs1_verify+0x40>)
 80855a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80855aa:	bf00      	nop
 80855ac:	ffffbf00 	.word	0xffffbf00

080855b0 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 80855b0:	b510      	push	{r4, lr}
 80855b2:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 80855b4:	308c      	adds	r0, #140	; 0x8c
 80855b6:	f006 fa62 	bl	808ba7e <mbedtls_mpi_free>
 80855ba:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80855be:	f006 fa5e 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 80855c2:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80855c6:	f006 fa5a 	bl	808ba7e <mbedtls_mpi_free>
 80855ca:	f104 0020 	add.w	r0, r4, #32
 80855ce:	f006 fa56 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 80855d2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80855d6:	f006 fa52 	bl	808ba7e <mbedtls_mpi_free>
 80855da:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80855de:	f006 fa4e 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 80855e2:	f104 0014 	add.w	r0, r4, #20
 80855e6:	f006 fa4a 	bl	808ba7e <mbedtls_mpi_free>
 80855ea:	f104 0008 	add.w	r0, r4, #8
 80855ee:	f006 fa46 	bl	808ba7e <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 80855f2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80855f6:	f006 fa42 	bl	808ba7e <mbedtls_mpi_free>
 80855fa:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80855fe:	f006 fa3e 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 8085602:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8085606:	f006 fa3a 	bl	808ba7e <mbedtls_mpi_free>
 808560a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 808560e:	f006 fa36 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 8085612:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8085616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
 808561a:	f006 ba30 	b.w	808ba7e <mbedtls_mpi_free>
	...

08085620 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8085620:	b538      	push	{r3, r4, r5, lr}
 8085622:	4605      	mov	r5, r0
 8085624:	b160      	cbz	r0, 8085640 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
 8085626:	4c08      	ldr	r4, [pc, #32]	; (8085648 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
 8085628:	6820      	ldr	r0, [r4, #0]
 808562a:	b158      	cbz	r0, 8085644 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
 808562c:	6862      	ldr	r2, [r4, #4]
 808562e:	686b      	ldr	r3, [r5, #4]
 8085630:	429a      	cmp	r2, r3
 8085632:	d103      	bne.n	808563c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
 8085634:	68a9      	ldr	r1, [r5, #8]
 8085636:	f00d ff7d 	bl	8093534 <memcmp>
 808563a:	b110      	cbz	r0, 8085642 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
 808563c:	3414      	adds	r4, #20
 808563e:	e7f3      	b.n	8085628 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
 8085640:	bd38      	pop	{r3, r4, r5, pc}
 8085642:	4620      	mov	r0, r4
 8085644:	bd38      	pop	{r3, r4, r5, pc}
 8085646:	bf00      	nop
 8085648:	08094c38 	.word	0x08094c38

0808564c <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 808564c:	b570      	push	{r4, r5, r6, lr}
 808564e:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8085650:	4605      	mov	r5, r0
 8085652:	b160      	cbz	r0, 808566e <mbedtls_oid_get_attr_short_name+0x22>
 8085654:	4c09      	ldr	r4, [pc, #36]	; (808567c <mbedtls_oid_get_attr_short_name+0x30>)
 8085656:	6820      	ldr	r0, [r4, #0]
 8085658:	b148      	cbz	r0, 808566e <mbedtls_oid_get_attr_short_name+0x22>
 808565a:	6862      	ldr	r2, [r4, #4]
 808565c:	686b      	ldr	r3, [r5, #4]
 808565e:	429a      	cmp	r2, r3
 8085660:	d103      	bne.n	808566a <mbedtls_oid_get_attr_short_name+0x1e>
 8085662:	68a9      	ldr	r1, [r5, #8]
 8085664:	f00d ff66 	bl	8093534 <memcmp>
 8085668:	b120      	cbz	r0, 8085674 <mbedtls_oid_get_attr_short_name+0x28>
 808566a:	3414      	adds	r4, #20
 808566c:	e7f3      	b.n	8085656 <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 808566e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8085672:	bd70      	pop	{r4, r5, r6, pc}
 8085674:	6923      	ldr	r3, [r4, #16]
 8085676:	6033      	str	r3, [r6, #0]
 8085678:	bd70      	pop	{r4, r5, r6, pc}
 808567a:	bf00      	nop
 808567c:	08094128 	.word	0x08094128

08085680 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8085680:	b570      	push	{r4, r5, r6, lr}
 8085682:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8085684:	4605      	mov	r5, r0
 8085686:	b160      	cbz	r0, 80856a2 <mbedtls_oid_get_x509_ext_type+0x22>
 8085688:	4c09      	ldr	r4, [pc, #36]	; (80856b0 <mbedtls_oid_get_x509_ext_type+0x30>)
 808568a:	6820      	ldr	r0, [r4, #0]
 808568c:	b148      	cbz	r0, 80856a2 <mbedtls_oid_get_x509_ext_type+0x22>
 808568e:	6862      	ldr	r2, [r4, #4]
 8085690:	686b      	ldr	r3, [r5, #4]
 8085692:	429a      	cmp	r2, r3
 8085694:	d103      	bne.n	808569e <mbedtls_oid_get_x509_ext_type+0x1e>
 8085696:	68a9      	ldr	r1, [r5, #8]
 8085698:	f00d ff4c 	bl	8093534 <memcmp>
 808569c:	b120      	cbz	r0, 80856a8 <mbedtls_oid_get_x509_ext_type+0x28>
 808569e:	3414      	adds	r4, #20
 80856a0:	e7f3      	b.n	808568a <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80856a2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80856a6:	bd70      	pop	{r4, r5, r6, pc}
 80856a8:	6923      	ldr	r3, [r4, #16]
 80856aa:	6033      	str	r3, [r6, #0]
 80856ac:	bd70      	pop	{r4, r5, r6, pc}
 80856ae:	bf00      	nop
 80856b0:	08094d50 	.word	0x08094d50

080856b4 <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 80856b4:	b570      	push	{r4, r5, r6, lr}
 80856b6:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 80856b8:	4605      	mov	r5, r0
 80856ba:	b160      	cbz	r0, 80856d6 <mbedtls_oid_get_extended_key_usage+0x22>
 80856bc:	4c09      	ldr	r4, [pc, #36]	; (80856e4 <mbedtls_oid_get_extended_key_usage+0x30>)
 80856be:	6820      	ldr	r0, [r4, #0]
 80856c0:	b148      	cbz	r0, 80856d6 <mbedtls_oid_get_extended_key_usage+0x22>
 80856c2:	6862      	ldr	r2, [r4, #4]
 80856c4:	686b      	ldr	r3, [r5, #4]
 80856c6:	429a      	cmp	r2, r3
 80856c8:	d103      	bne.n	80856d2 <mbedtls_oid_get_extended_key_usage+0x1e>
 80856ca:	68a9      	ldr	r1, [r5, #8]
 80856cc:	f00d ff32 	bl	8093534 <memcmp>
 80856d0:	b120      	cbz	r0, 80856dc <mbedtls_oid_get_extended_key_usage+0x28>
 80856d2:	3410      	adds	r4, #16
 80856d4:	e7f3      	b.n	80856be <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 80856d6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80856da:	bd70      	pop	{r4, r5, r6, pc}
 80856dc:	68e3      	ldr	r3, [r4, #12]
 80856de:	6033      	str	r3, [r6, #0]
 80856e0:	bd70      	pop	{r4, r5, r6, pc}
 80856e2:	bf00      	nop
 80856e4:	080942b8 	.word	0x080942b8

080856e8 <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 80856e8:	b510      	push	{r4, lr}
 80856ea:	460c      	mov	r4, r1
 80856ec:	f7ff ff98 	bl	8085620 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 80856f0:	b118      	cbz	r0, 80856fa <mbedtls_oid_get_sig_alg_desc+0x12>
 80856f2:	68c3      	ldr	r3, [r0, #12]
 80856f4:	2000      	movs	r0, #0
 80856f6:	6023      	str	r3, [r4, #0]
 80856f8:	bd10      	pop	{r4, pc}
 80856fa:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80856fe:	bd10      	pop	{r4, pc}

08085700 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 8085700:	b538      	push	{r3, r4, r5, lr}
 8085702:	460d      	mov	r5, r1
 8085704:	4614      	mov	r4, r2
 8085706:	f7ff ff8b 	bl	8085620 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 808570a:	b128      	cbz	r0, 8085718 <mbedtls_oid_get_sig_alg+0x18>
 808570c:	7c03      	ldrb	r3, [r0, #16]
 808570e:	702b      	strb	r3, [r5, #0]
 8085710:	7c43      	ldrb	r3, [r0, #17]
 8085712:	2000      	movs	r0, #0
 8085714:	7023      	strb	r3, [r4, #0]
 8085716:	bd38      	pop	{r3, r4, r5, pc}
 8085718:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 808571c:	bd38      	pop	{r3, r4, r5, pc}
	...

08085720 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8085720:	b570      	push	{r4, r5, r6, lr}
 8085722:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8085724:	4605      	mov	r5, r0
 8085726:	b160      	cbz	r0, 8085742 <mbedtls_oid_get_pk_alg+0x22>
 8085728:	4c09      	ldr	r4, [pc, #36]	; (8085750 <mbedtls_oid_get_pk_alg+0x30>)
 808572a:	6820      	ldr	r0, [r4, #0]
 808572c:	b148      	cbz	r0, 8085742 <mbedtls_oid_get_pk_alg+0x22>
 808572e:	6862      	ldr	r2, [r4, #4]
 8085730:	686b      	ldr	r3, [r5, #4]
 8085732:	429a      	cmp	r2, r3
 8085734:	d103      	bne.n	808573e <mbedtls_oid_get_pk_alg+0x1e>
 8085736:	68a9      	ldr	r1, [r5, #8]
 8085738:	f00d fefc 	bl	8093534 <memcmp>
 808573c:	b120      	cbz	r0, 8085748 <mbedtls_oid_get_pk_alg+0x28>
 808573e:	3414      	adds	r4, #20
 8085740:	e7f3      	b.n	808572a <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8085742:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8085746:	bd70      	pop	{r4, r5, r6, pc}
 8085748:	7c23      	ldrb	r3, [r4, #16]
 808574a:	7033      	strb	r3, [r6, #0]
 808574c:	bd70      	pop	{r4, r5, r6, pc}
 808574e:	bf00      	nop
 8085750:	08094328 	.word	0x08094328

08085754 <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 8085754:	b570      	push	{r4, r5, r6, lr}
 8085756:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 8085758:	4605      	mov	r5, r0
 808575a:	b160      	cbz	r0, 8085776 <mbedtls_oid_get_cipher_alg+0x22>
 808575c:	4c09      	ldr	r4, [pc, #36]	; (8085784 <mbedtls_oid_get_cipher_alg+0x30>)
 808575e:	6820      	ldr	r0, [r4, #0]
 8085760:	b148      	cbz	r0, 8085776 <mbedtls_oid_get_cipher_alg+0x22>
 8085762:	6862      	ldr	r2, [r4, #4]
 8085764:	686b      	ldr	r3, [r5, #4]
 8085766:	429a      	cmp	r2, r3
 8085768:	d103      	bne.n	8085772 <mbedtls_oid_get_cipher_alg+0x1e>
 808576a:	68a9      	ldr	r1, [r5, #8]
 808576c:	f00d fee2 	bl	8093534 <memcmp>
 8085770:	b120      	cbz	r0, 808577c <mbedtls_oid_get_cipher_alg+0x28>
 8085772:	3414      	adds	r4, #20
 8085774:	e7f3      	b.n	808575e <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 8085776:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 808577a:	bd70      	pop	{r4, r5, r6, pc}
 808577c:	7c23      	ldrb	r3, [r4, #16]
 808577e:	7033      	strb	r3, [r6, #0]
 8085780:	bd70      	pop	{r4, r5, r6, pc}
 8085782:	bf00      	nop
 8085784:	08094378 	.word	0x08094378

08085788 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8085788:	b530      	push	{r4, r5, lr}
 808578a:	4b08      	ldr	r3, [pc, #32]	; (80857ac <mbedtls_oid_get_oid_by_md+0x24>)
 808578c:	681c      	ldr	r4, [r3, #0]
 808578e:	b14c      	cbz	r4, 80857a4 <mbedtls_oid_get_oid_by_md+0x1c>
 8085790:	7c1d      	ldrb	r5, [r3, #16]
 8085792:	4285      	cmp	r5, r0
 8085794:	d104      	bne.n	80857a0 <mbedtls_oid_get_oid_by_md+0x18>
 8085796:	600c      	str	r4, [r1, #0]
 8085798:	685b      	ldr	r3, [r3, #4]
 808579a:	2000      	movs	r0, #0
 808579c:	6013      	str	r3, [r2, #0]
 808579e:	bd30      	pop	{r4, r5, pc}
 80857a0:	3314      	adds	r3, #20
 80857a2:	e7f3      	b.n	808578c <mbedtls_oid_get_oid_by_md+0x4>
 80857a4:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80857a8:	bd30      	pop	{r4, r5, pc}
 80857aa:	bf00      	nop
 80857ac:	08094bc0 	.word	0x08094bc0

080857b0 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 80857b0:	b570      	push	{r4, r5, r6, lr}
 80857b2:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 80857b4:	4605      	mov	r5, r0
 80857b6:	b160      	cbz	r0, 80857d2 <mbedtls_oid_get_md_hmac+0x22>
 80857b8:	4c09      	ldr	r4, [pc, #36]	; (80857e0 <mbedtls_oid_get_md_hmac+0x30>)
 80857ba:	6820      	ldr	r0, [r4, #0]
 80857bc:	b148      	cbz	r0, 80857d2 <mbedtls_oid_get_md_hmac+0x22>
 80857be:	6862      	ldr	r2, [r4, #4]
 80857c0:	686b      	ldr	r3, [r5, #4]
 80857c2:	429a      	cmp	r2, r3
 80857c4:	d103      	bne.n	80857ce <mbedtls_oid_get_md_hmac+0x1e>
 80857c6:	68a9      	ldr	r1, [r5, #8]
 80857c8:	f00d feb4 	bl	8093534 <memcmp>
 80857cc:	b120      	cbz	r0, 80857d8 <mbedtls_oid_get_md_hmac+0x28>
 80857ce:	3414      	adds	r4, #20
 80857d0:	e7f3      	b.n	80857ba <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 80857d2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80857d6:	bd70      	pop	{r4, r5, r6, pc}
 80857d8:	7c23      	ldrb	r3, [r4, #16]
 80857da:	7033      	strb	r3, [r6, #0]
 80857dc:	bd70      	pop	{r4, r5, r6, pc}
 80857de:	bf00      	nop
 80857e0:	08094cd8 	.word	0x08094cd8

080857e4 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 80857e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80857e6:	460f      	mov	r7, r1
 80857e8:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 80857ea:	4605      	mov	r5, r0
 80857ec:	b160      	cbz	r0, 8085808 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 80857ee:	4c0a      	ldr	r4, [pc, #40]	; (8085818 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
 80857f0:	6820      	ldr	r0, [r4, #0]
 80857f2:	b148      	cbz	r0, 8085808 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 80857f4:	6862      	ldr	r2, [r4, #4]
 80857f6:	686b      	ldr	r3, [r5, #4]
 80857f8:	429a      	cmp	r2, r3
 80857fa:	d103      	bne.n	8085804 <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
 80857fc:	68a9      	ldr	r1, [r5, #8]
 80857fe:	f00d fe99 	bl	8093534 <memcmp>
 8085802:	b120      	cbz	r0, 808580e <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
 8085804:	3414      	adds	r4, #20
 8085806:	e7f3      	b.n	80857f0 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 8085808:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 808580c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808580e:	7c23      	ldrb	r3, [r4, #16]
 8085810:	703b      	strb	r3, [r7, #0]
 8085812:	7c63      	ldrb	r3, [r4, #17]
 8085814:	7033      	strb	r3, [r6, #0]
 8085816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085818:	08094b84 	.word	0x08094b84

0808581c <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 808581c:	225c      	movs	r2, #92	; 0x5c
 808581e:	2100      	movs	r1, #0
 8085820:	f00d bebd 	b.w	809359e <memset>

08085824 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 8085824:	b138      	cbz	r0, 8085836 <mbedtls_sha1_free+0x12>
 8085826:	f100 025c 	add.w	r2, r0, #92	; 0x5c

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 808582a:	2300      	movs	r3, #0
 808582c:	4290      	cmp	r0, r2
 808582e:	d002      	beq.n	8085836 <mbedtls_sha1_free+0x12>
 8085830:	7003      	strb	r3, [r0, #0]
 8085832:	3001      	adds	r0, #1
 8085834:	e7fa      	b.n	808582c <mbedtls_sha1_free+0x8>
 8085836:	4770      	bx	lr

08085838 <mbedtls_sha1_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 8085838:	b508      	push	{r3, lr}
    *dst = *src;
 808583a:	225c      	movs	r2, #92	; 0x5c
 808583c:	f00d fe89 	bl	8093552 <memcpy>
 8085840:	bd08      	pop	{r3, pc}
	...

08085844 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 8085844:	4603      	mov	r3, r0
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 8085846:	4a0a      	ldr	r2, [pc, #40]	; (8085870 <mbedtls_sha1_starts_ret+0x2c>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8085848:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 808584a:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 808584c:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8085850:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 8085852:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 8085856:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 808585a:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 808585e:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 8085860:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 8085864:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 8085866:	4a03      	ldr	r2, [pc, #12]	; (8085874 <mbedtls_sha1_starts_ret+0x30>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8085868:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
 808586a:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
 808586c:	619a      	str	r2, [r3, #24]

    return( 0 );
}
 808586e:	4770      	bx	lr
 8085870:	67452301 	.word	0x67452301
 8085874:	c3d2e1f0 	.word	0xc3d2e1f0

08085878 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8085878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 808587c:	784b      	ldrb	r3, [r1, #1]
 808587e:	780a      	ldrb	r2, [r1, #0]
 8085880:	041b      	lsls	r3, r3, #16
 8085882:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8085886:	78ca      	ldrb	r2, [r1, #3]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8085888:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 808588a:	4313      	orrs	r3, r2
 808588c:	788a      	ldrb	r2, [r1, #2]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 808588e:	f891 c008 	ldrb.w	ip, [r1, #8]
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8085892:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8085896:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
 8085898:	794b      	ldrb	r3, [r1, #5]
 808589a:	790a      	ldrb	r2, [r1, #4]
 808589c:	041b      	lsls	r3, r3, #16
 808589e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80858a2:	79ca      	ldrb	r2, [r1, #7]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
 80858a4:	f891 800c 	ldrb.w	r8, [r1, #12]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 80858a8:	4313      	orrs	r3, r2
 80858aa:	798a      	ldrb	r2, [r1, #6]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
 80858ac:	f891 e014 	ldrb.w	lr, [r1, #20]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 80858b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80858b4:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
 80858b6:	7a4b      	ldrb	r3, [r1, #9]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
 80858b8:	7c0a      	ldrb	r2, [r1, #16]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80858ba:	041b      	lsls	r3, r3, #16
 80858bc:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80858c0:	f891 c00b 	ldrb.w	ip, [r1, #11]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80858c4:	7e0f      	ldrb	r7, [r1, #24]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80858c6:	ea43 030c 	orr.w	r3, r3, ip
 80858ca:	f891 c00a 	ldrb.w	ip, [r1, #10]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 80858ce:	9001      	str	r0, [sp, #4]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80858d0:	ea43 2c0c 	orr.w	ip, r3, ip, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
 80858d4:	7b4b      	ldrb	r3, [r1, #13]
 80858d6:	041b      	lsls	r3, r3, #16
 80858d8:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80858dc:	f891 800f 	ldrb.w	r8, [r1, #15]
 80858e0:	ea43 0308 	orr.w	r3, r3, r8
 80858e4:	f891 800e 	ldrb.w	r8, [r1, #14]
 80858e8:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
 80858ec:	7c4b      	ldrb	r3, [r1, #17]
 80858ee:	041b      	lsls	r3, r3, #16
 80858f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80858f4:	7cca      	ldrb	r2, [r1, #19]
 80858f6:	4313      	orrs	r3, r2
 80858f8:	7c8a      	ldrb	r2, [r1, #18]
 80858fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80858fe:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
 8085900:	7d4b      	ldrb	r3, [r1, #21]
 8085902:	041b      	lsls	r3, r3, #16
 8085904:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8085908:	f891 e017 	ldrb.w	lr, [r1, #23]
 808590c:	ea43 030e 	orr.w	r3, r3, lr
 8085910:	f891 e016 	ldrb.w	lr, [r1, #22]
 8085914:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8085918:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
 808591a:	7e4b      	ldrb	r3, [r1, #25]
 808591c:	041b      	lsls	r3, r3, #16
 808591e:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8085922:	7ecf      	ldrb	r7, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
 8085924:	7f0e      	ldrb	r6, [r1, #28]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 8085926:	433b      	orrs	r3, r7
 8085928:	7e8f      	ldrb	r7, [r1, #26]
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
 808592a:	f891 4020 	ldrb.w	r4, [r1, #32]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 808592e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8085932:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
 8085934:	7f4b      	ldrb	r3, [r1, #29]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
 8085936:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 808593a:	041b      	lsls	r3, r3, #16
 808593c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8085940:	7fce      	ldrb	r6, [r1, #31]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
 8085942:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 8085946:	4333      	orrs	r3, r6
 8085948:	7f8e      	ldrb	r6, [r1, #30]
 808594a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 808594e:	9311      	str	r3, [sp, #68]	; 0x44
    GET_UINT32_BE( W[ 8], data, 32 );
 8085950:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8085954:	041b      	lsls	r3, r3, #16
 8085956:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 808595a:	f891 4023 	ldrb.w	r4, [r1, #35]	; 0x23
 808595e:	4323      	orrs	r3, r4
 8085960:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
 8085964:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8085968:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
 808596a:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 808596e:	041b      	lsls	r3, r3, #16
 8085970:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8085974:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
 8085978:	4313      	orrs	r3, r2
 808597a:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 808597e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8085982:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
 8085984:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8085988:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 808598c:	041b      	lsls	r3, r3, #16
 808598e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8085992:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
 8085996:	4313      	orrs	r3, r2
 8085998:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 808599c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80859a0:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
 80859a2:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 80859a6:	041b      	lsls	r3, r3, #16
 80859a8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80859ac:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
 80859b0:	4303      	orrs	r3, r0
 80859b2:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
 80859b6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80859ba:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
 80859bc:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80859c0:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 80859c4:	041b      	lsls	r3, r3, #16
 80859c6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80859ca:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
 80859ce:	4303      	orrs	r3, r0
 80859d0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 80859d4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80859d8:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
 80859da:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 80859de:	f891 9034 	ldrb.w	r9, [r1, #52]	; 0x34
 80859e2:	041b      	lsls	r3, r3, #16
 80859e4:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 80859e8:	f891 9037 	ldrb.w	r9, [r1, #55]	; 0x37
    GET_UINT32_BE( W[14], data, 56 );
 80859ec:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
    GET_UINT32_BE( W[13], data, 52 );
 80859f0:	ea43 0309 	orr.w	r3, r3, r9
 80859f4:	f891 9036 	ldrb.w	r9, [r1, #54]	; 0x36
 80859f8:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 80859fc:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
 80859fe:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 8085a02:	041b      	lsls	r3, r3, #16
 8085a04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8085a08:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 8085a0c:	4313      	orrs	r3, r2
 8085a0e:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8085a12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8085a16:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
 8085a18:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 8085a1c:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8085a20:	041b      	lsls	r3, r3, #16
 8085a22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8085a26:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8085a2a:	4313      	orrs	r3, r2
 8085a2c:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8085a30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8085a34:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 8085a36:	9b01      	ldr	r3, [sp, #4]
 8085a38:	689b      	ldr	r3, [r3, #8]
 8085a3a:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
 8085a3c:	9b01      	ldr	r3, [sp, #4]
 8085a3e:	68db      	ldr	r3, [r3, #12]
 8085a40:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 8085a42:	9b01      	ldr	r3, [sp, #4]
 8085a44:	691b      	ldr	r3, [r3, #16]
 8085a46:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 8085a48:	9b01      	ldr	r3, [sp, #4]
 8085a4a:	695b      	ldr	r3, [r3, #20]
 8085a4c:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
 8085a4e:	9b01      	ldr	r3, [sp, #4]
 8085a50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8085a52:	699b      	ldr	r3, [r3, #24]
 8085a54:	9315      	str	r3, [sp, #84]	; 0x54
 8085a56:	9b05      	ldr	r3, [sp, #20]
 8085a58:	ea83 0e02 	eor.w	lr, r3, r2
 8085a5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8085a5e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8085a60:	ea0e 0e03 	and.w	lr, lr, r3
 8085a64:	ea8e 0e02 	eor.w	lr, lr, r2
 8085a68:	4bdd      	ldr	r3, [pc, #884]	; (8085de0 <mbedtls_internal_sha1_process+0x568>)
 8085a6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8085a6c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8085a6e:	441a      	add	r2, r3
 8085a70:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8085a74:	4496      	add	lr, r2

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 8085a76:	9a06      	ldr	r2, [sp, #24]
 8085a78:	eb04 0b03 	add.w	fp, r4, r3
 8085a7c:	4496      	add	lr, r2
 8085a7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8085a80:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8085a82:	ea4f 00b2 	mov.w	r0, r2, ror #2
 8085a86:	9a05      	ldr	r2, [sp, #20]
 8085a88:	18c5      	adds	r5, r0, r3
 8085a8a:	ea82 0700 	eor.w	r7, r2, r0
 8085a8e:	9a05      	ldr	r2, [sp, #20]
 8085a90:	400f      	ands	r7, r1
 8085a92:	4057      	eors	r7, r2
 8085a94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
 8085a96:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8085a9a:	441a      	add	r2, r3
 8085a9c:	4417      	add	r7, r2
 8085a9e:	9a07      	ldr	r2, [sp, #28]
 8085aa0:	ea80 0901 	eor.w	r9, r0, r1
 8085aa4:	4417      	add	r7, r2
 8085aa6:	9a05      	ldr	r2, [sp, #20]
 8085aa8:	ea09 090e 	and.w	r9, r9, lr
 8085aac:	441a      	add	r2, r3
 8085aae:	eb07 67fe 	add.w	r7, r7, lr, ror #27
 8085ab2:	4462      	add	r2, ip
    P( D, E, A, B, C, W[2]  );
 8085ab4:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8085ab8:	ea89 0900 	eor.w	r9, r9, r0
 8085abc:	4491      	add	r9, r2
 8085abe:	ea81 020e 	eor.w	r2, r1, lr
 8085ac2:	403a      	ands	r2, r7
 8085ac4:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 8085ac8:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[3]  );
 8085aca:	ea4f 07b7 	mov.w	r7, r7, ror #2
 8085ace:	4445      	add	r5, r8
 8085ad0:	18c8      	adds	r0, r1, r3
 8085ad2:	4415      	add	r5, r2
 8085ad4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8085ad6:	ea8e 0207 	eor.w	r2, lr, r7
 8085ada:	ea02 0209 	and.w	r2, r2, r9
 8085ade:	eb05 65f9 	add.w	r5, r5, r9, ror #27
 8085ae2:	ea82 020e 	eor.w	r2, r2, lr
    P( B, C, D, E, A, W[4]  );
 8085ae6:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8085aea:	4408      	add	r0, r1
 8085aec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8085aee:	4410      	add	r0, r2
 8085af0:	ea87 0209 	eor.w	r2, r7, r9
 8085af4:	18ce      	adds	r6, r1, r3
 8085af6:	402a      	ands	r2, r5
 8085af8:	407a      	eors	r2, r7
 8085afa:	4476      	add	r6, lr
 8085afc:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8085b00:	4416      	add	r6, r2
    P( A, B, C, D, E, W[5]  );
 8085b02:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8085b06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8085b08:	ea89 0105 	eor.w	r1, r9, r5
 8085b0c:	4001      	ands	r1, r0
 8085b0e:	441a      	add	r2, r3
 8085b10:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 8085b14:	ea81 0109 	eor.w	r1, r1, r9
    P( E, A, B, C, D, W[6]  );
 8085b18:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8085b1c:	443a      	add	r2, r7
 8085b1e:	440a      	add	r2, r1
 8085b20:	ea85 0100 	eor.w	r1, r5, r0
 8085b24:	4031      	ands	r1, r6
 8085b26:	eb02 62f6 	add.w	r2, r2, r6, ror #27
 8085b2a:	4069      	eors	r1, r5
    P( D, E, A, B, C, W[7]  );
 8085b2c:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8085b30:	44cb      	add	fp, r9
 8085b32:	448b      	add	fp, r1
 8085b34:	ea80 0106 	eor.w	r1, r0, r6
 8085b38:	4011      	ands	r1, r2
 8085b3a:	441c      	add	r4, r3
 8085b3c:	4041      	eors	r1, r0
 8085b3e:	442c      	add	r4, r5
 8085b40:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
 8085b44:	440c      	add	r4, r1
    P( C, D, E, A, B, W[8]  );
 8085b46:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8085b4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8085b4c:	ea86 0502 	eor.w	r5, r6, r2
 8085b50:	ea05 050b 	and.w	r5, r5, fp
 8085b54:	4419      	add	r1, r3
 8085b56:	4075      	eors	r5, r6
 8085b58:	4401      	add	r1, r0
 8085b5a:	eb04 64fb 	add.w	r4, r4, fp, ror #27
 8085b5e:	4429      	add	r1, r5
    P( B, C, D, E, A, W[9]  );
 8085b60:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 8085b64:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8085b66:	ea82 000b 	eor.w	r0, r2, fp
 8085b6a:	eb05 0a03 	add.w	sl, r5, r3
 8085b6e:	4020      	ands	r0, r4
 8085b70:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8085b74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[10] );
 8085b76:	ea4f 04b4 	mov.w	r4, r4, ror #2
 8085b7a:	4050      	eors	r0, r2
 8085b7c:	44b2      	add	sl, r6
 8085b7e:	4482      	add	sl, r0
 8085b80:	ea8b 0004 	eor.w	r0, fp, r4
 8085b84:	eb05 0903 	add.w	r9, r5, r3
 8085b88:	4008      	ands	r0, r1
 8085b8a:	ea80 000b 	eor.w	r0, r0, fp
 8085b8e:	4491      	add	r9, r2
 8085b90:	eb0a 6af1 	add.w	sl, sl, r1, ror #27
 8085b94:	4481      	add	r9, r0
    P( E, A, B, C, D, W[11] );
 8085b96:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8085b9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8085b9c:	ea84 0201 	eor.w	r2, r4, r1
 8085ba0:	eb00 0e03 	add.w	lr, r0, r3
 8085ba4:	ea02 020a 	and.w	r2, r2, sl
 8085ba8:	eb09 69fa 	add.w	r9, r9, sl, ror #27
 8085bac:	9802      	ldr	r0, [sp, #8]
    P( D, E, A, B, C, W[12] );
 8085bae:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8085bb2:	4062      	eors	r2, r4
 8085bb4:	44de      	add	lr, fp
 8085bb6:	4496      	add	lr, r2
 8085bb8:	ea81 020a 	eor.w	r2, r1, sl
 8085bbc:	18c5      	adds	r5, r0, r3
 8085bbe:	ea02 0209 	and.w	r2, r2, r9
 8085bc2:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
 8085bc6:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[13] );
 8085bc8:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8085bcc:	9803      	ldr	r0, [sp, #12]
 8085bce:	4425      	add	r5, r4
 8085bd0:	4415      	add	r5, r2
 8085bd2:	ea8a 0209 	eor.w	r2, sl, r9
 8085bd6:	ea02 020e 	and.w	r2, r2, lr
 8085bda:	4418      	add	r0, r3
 8085bdc:	eb05 65fe 	add.w	r5, r5, lr, ror #27
 8085be0:	ea82 020a 	eor.w	r2, r2, sl
    P( B, C, D, E, A, W[14] );
 8085be4:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8085be8:	4408      	add	r0, r1
 8085bea:	9904      	ldr	r1, [sp, #16]
 8085bec:	4410      	add	r0, r2
 8085bee:	ea89 020e 	eor.w	r2, r9, lr
 8085bf2:	18cf      	adds	r7, r1, r3
 8085bf4:	402a      	ands	r2, r5
 8085bf6:	ea82 0209 	eor.w	r2, r2, r9
 8085bfa:	4457      	add	r7, sl
 8085bfc:	4417      	add	r7, r2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8085bfe:	9a06      	ldr	r2, [sp, #24]
 8085c00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8085c02:	ea82 020c 	eor.w	r2, r2, ip
 8085c06:	404a      	eors	r2, r1
 8085c08:	9902      	ldr	r1, [sp, #8]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
 8085c0a:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8085c0e:	404a      	eors	r2, r1
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 8085c10:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8085c14:	ea8e 0105 	eor.w	r1, lr, r5
    P( E, A, B, C, D, R(16) );
 8085c18:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085c1c:	9206      	str	r2, [sp, #24]
 8085c1e:	4001      	ands	r1, r0
 8085c20:	441a      	add	r2, r3
 8085c22:	ea81 010e 	eor.w	r1, r1, lr
 8085c26:	444a      	add	r2, r9
 8085c28:	440a      	add	r2, r1
    P( D, E, A, B, C, R(17) );
 8085c2a:	9907      	ldr	r1, [sp, #28]
 8085c2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8085c2e:	ea81 0108 	eor.w	r1, r1, r8
 8085c32:	4061      	eors	r1, r4
 8085c34:	9c03      	ldr	r4, [sp, #12]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 8085c36:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 8085c3a:	4061      	eors	r1, r4
 8085c3c:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8085c40:	9107      	str	r1, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8085c42:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8085c46:	9c07      	ldr	r4, [sp, #28]
 8085c48:	ea85 0100 	eor.w	r1, r5, r0
 8085c4c:	18e6      	adds	r6, r4, r3
 8085c4e:	4039      	ands	r1, r7
 8085c50:	4069      	eors	r1, r5
 8085c52:	4476      	add	r6, lr
 8085c54:	440e      	add	r6, r1
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 8085c56:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8085c58:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 8085c5c:	ea8c 0c01 	eor.w	ip, ip, r1
 8085c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 8085c62:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(18) );
 8085c66:	ea8c 0c01 	eor.w	ip, ip, r1
 8085c6a:	9904      	ldr	r1, [sp, #16]
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 8085c6c:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(18) );
 8085c70:	ea8c 0c01 	eor.w	ip, ip, r1
 8085c74:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8085c78:	9108      	str	r1, [sp, #32]
 8085c7a:	9c08      	ldr	r4, [sp, #32]
 8085c7c:	ea80 0107 	eor.w	r1, r0, r7
 8085c80:	4011      	ands	r1, r2
 8085c82:	441c      	add	r4, r3
 8085c84:	4041      	eors	r1, r0
 8085c86:	442c      	add	r4, r5
 8085c88:	440c      	add	r4, r1
    P( B, C, D, E, A, R(19) );
 8085c8a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 8085c8c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(19) );
 8085c90:	ea88 0801 	eor.w	r8, r8, r1
 8085c94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085c96:	ea87 0502 	eor.w	r5, r7, r2
 8085c9a:	ea88 0801 	eor.w	r8, r8, r1
 8085c9e:	9906      	ldr	r1, [sp, #24]
 8085ca0:	4035      	ands	r5, r6
 8085ca2:	ea88 0801 	eor.w	r8, r8, r1
 8085ca6:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8085caa:	4443      	add	r3, r8
 8085cac:	407d      	eors	r5, r7
 8085cae:	4403      	add	r3, r0
 8085cb0:	18e9      	adds	r1, r5, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085cb2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8085cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8085cb6:	4d4b      	ldr	r5, [pc, #300]	; (8085de4 <mbedtls_internal_sha1_process+0x56c>)
 8085cb8:	ea83 0c00 	eor.w	ip, r3, r0
 8085cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 8085cbe:	eb04 64f6 	add.w	r4, r4, r6, ror #27
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085cc2:	ea8c 0c03 	eor.w	ip, ip, r3
 8085cc6:	9b07      	ldr	r3, [sp, #28]
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 8085cc8:	ea4f 06b6 	mov.w	r6, r6, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085ccc:	ea8c 0c03 	eor.w	ip, ip, r3
 8085cd0:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8085cd4:	ea82 0306 	eor.w	r3, r2, r6
 8085cd8:	eb0c 0b05 	add.w	fp, ip, r5
 8085cdc:	4063      	eors	r3, r4
 8085cde:	44bb      	add	fp, r7
    P( E, A, B, C, D, R(21) );
 8085ce0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8085ce2:	449b      	add	fp, r3
 8085ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 8085ce6:	eb01 61f4 	add.w	r1, r1, r4, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 8085cea:	ea83 0e00 	eor.w	lr, r3, r0
 8085cee:	9b02      	ldr	r3, [sp, #8]
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085cf0:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(21) );
 8085cf4:	ea8e 0e03 	eor.w	lr, lr, r3
 8085cf8:	9b08      	ldr	r3, [sp, #32]
 8085cfa:	ea86 0004 	eor.w	r0, r6, r4
 8085cfe:	ea8e 0e03 	eor.w	lr, lr, r3
 8085d02:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8085d06:	eb0e 0305 	add.w	r3, lr, r5
 8085d0a:	4048      	eors	r0, r1
 8085d0c:	4413      	add	r3, r2
 8085d0e:	4403      	add	r3, r0
    P( D, E, A, B, C, R(22) );
 8085d10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8085d12:	9809      	ldr	r0, [sp, #36]	; 0x24
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085d14:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 8085d18:	ea82 0700 	eor.w	r7, r2, r0
 8085d1c:	9a03      	ldr	r2, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 8085d1e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(22) );
 8085d22:	4057      	eors	r7, r2
 8085d24:	ea87 0708 	eor.w	r7, r7, r8
 8085d28:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8085d2c:	ea84 0201 	eor.w	r2, r4, r1
 8085d30:	eb07 0a05 	add.w	sl, r7, r5
 8085d34:	ea82 020b 	eor.w	r2, r2, fp
 8085d38:	44b2      	add	sl, r6
    P( C, D, E, A, B, R(23) );
 8085d3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8085d3c:	4492      	add	sl, r2
 8085d3e:	9a11      	ldr	r2, [sp, #68]	; 0x44

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 8085d40:	eb03 63fb 	add.w	r3, r3, fp, ror #27
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8085d44:	ea82 0600 	eor.w	r6, r2, r0
 8085d48:	9a04      	ldr	r2, [sp, #16]
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 8085d4a:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( C, D, E, A, B, R(23) );
 8085d4e:	4056      	eors	r6, r2
 8085d50:	ea86 060c 	eor.w	r6, r6, ip
 8085d54:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8085d58:	ea81 020b 	eor.w	r2, r1, fp
 8085d5c:	eb06 0905 	add.w	r9, r6, r5
 8085d60:	405a      	eors	r2, r3
 8085d62:	44a1      	add	r9, r4
    P( B, C, D, E, A, R(24) );
 8085d64:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8085d66:	4491      	add	r9, r2
 8085d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 8085d6a:	eb0a 6af3 	add.w	sl, sl, r3, ror #27
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085d6e:	ea82 0400 	eor.w	r4, r2, r0
 8085d72:	9a06      	ldr	r2, [sp, #24]
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8085d74:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(24) );
 8085d78:	4054      	eors	r4, r2
 8085d7a:	ea84 040e 	eor.w	r4, r4, lr
 8085d7e:	ea4f 72f4 	mov.w	r2, r4, ror #31
 8085d82:	9209      	str	r2, [sp, #36]	; 0x24
 8085d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8085d86:	ea8b 0203 	eor.w	r2, fp, r3
 8085d8a:	4428      	add	r0, r5
 8085d8c:	ea82 020a 	eor.w	r2, r2, sl
 8085d90:	4408      	add	r0, r1
 8085d92:	4410      	add	r0, r2
    P( A, B, C, D, E, R(25) );
 8085d94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8085d98:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 8085d9c:	404a      	eors	r2, r1
 8085d9e:	9907      	ldr	r1, [sp, #28]

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085da0:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(25) );
 8085da4:	404a      	eors	r2, r1
 8085da6:	407a      	eors	r2, r7
 8085da8:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085dac:	920a      	str	r2, [sp, #40]	; 0x28
 8085dae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8085db0:	ea83 020a 	eor.w	r2, r3, sl
 8085db4:	4429      	add	r1, r5
 8085db6:	ea82 0209 	eor.w	r2, r2, r9
 8085dba:	4459      	add	r1, fp
 8085dbc:	4411      	add	r1, r2
    P( E, A, B, C, D, R(26) );
 8085dbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085dc0:	eb00 60f9 	add.w	r0, r0, r9, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 8085dc4:	4614      	mov	r4, r2
 8085dc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 8085dc8:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( E, A, B, C, D, R(26) );
 8085dcc:	4062      	eors	r2, r4
 8085dce:	9c08      	ldr	r4, [sp, #32]
 8085dd0:	ea8a 0b09 	eor.w	fp, sl, r9
 8085dd4:	4062      	eors	r2, r4
 8085dd6:	4072      	eors	r2, r6
 8085dd8:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085ddc:	e004      	b.n	8085de8 <mbedtls_internal_sha1_process+0x570>
 8085dde:	bf00      	nop
 8085de0:	5a827999 	.word	0x5a827999
 8085de4:	6ed9eba1 	.word	0x6ed9eba1
 8085de8:	920b      	str	r2, [sp, #44]	; 0x2c
 8085dea:	442a      	add	r2, r5
    P( D, E, A, B, C, R(27) );
 8085dec:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 8085dee:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8085df2:	ea8b 0b00 	eor.w	fp, fp, r0
 8085df6:	441a      	add	r2, r3
    P( E, A, B, C, D, R(26) );
 8085df8:	ea4f 03b0 	mov.w	r3, r0, ror #2
    P( D, E, A, B, C, R(27) );
 8085dfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8085dfe:	445a      	add	r2, fp
 8085e00:	4060      	eors	r0, r4
 8085e02:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8085e04:	ea80 0008 	eor.w	r0, r0, r8
 8085e08:	4060      	eors	r0, r4
 8085e0a:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8085e0e:	900c      	str	r0, [sp, #48]	; 0x30
 8085e10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085e12:	ea89 0003 	eor.w	r0, r9, r3
 8085e16:	eb04 0b05 	add.w	fp, r4, r5
 8085e1a:	4048      	eors	r0, r1
 8085e1c:	44da      	add	sl, fp
    P( C, D, E, A, B, R(28) );
 8085e1e:	9c03      	ldr	r4, [sp, #12]
 8085e20:	4482      	add	sl, r0
 8085e22:	980d      	ldr	r0, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 8085e24:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 8085e28:	4060      	eors	r0, r4
 8085e2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8085e2c:	ea80 000c 	eor.w	r0, r0, ip
 8085e30:	4060      	eors	r0, r4
 8085e32:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( B, C, D, E, A, R(29) );
 8085e36:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 8085e38:	900d      	str	r0, [sp, #52]	; 0x34
 8085e3a:	4428      	add	r0, r5
 8085e3c:	4448      	add	r0, r9
    P( B, C, D, E, A, R(29) );
 8085e3e:	46a1      	mov	r9, r4
 8085e40:	9c04      	ldr	r4, [sp, #16]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 8085e42:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 8085e46:	ea89 0904 	eor.w	r9, r9, r4
 8085e4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8085e4c:	ea89 090e 	eor.w	r9, r9, lr
 8085e50:	ea89 0904 	eor.w	r9, r9, r4
 8085e54:	ea4f 74f9 	mov.w	r4, r9, ror #31
 8085e58:	eb04 0905 	add.w	r9, r4, r5
 8085e5c:	9402      	str	r4, [sp, #8]
 8085e5e:	ea83 0b01 	eor.w	fp, r3, r1
    P( A, B, C, D, E, R(30) );
 8085e62:	9c06      	ldr	r4, [sp, #24]
 8085e64:	4499      	add	r9, r3
 8085e66:	9b03      	ldr	r3, [sp, #12]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 8085e68:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085e6c:	4063      	eors	r3, r4
 8085e6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085e70:	407b      	eors	r3, r7
 8085e72:	4063      	eors	r3, r4
 8085e74:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085e78:	9303      	str	r3, [sp, #12]
 8085e7a:	ea8b 0b02 	eor.w	fp, fp, r2
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 8085e7e:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8085e82:	9c03      	ldr	r4, [sp, #12]
 8085e84:	4458      	add	r0, fp
 8085e86:	ea81 0b02 	eor.w	fp, r1, r2
 8085e8a:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 8085e8e:	ea8b 0b0a 	eor.w	fp, fp, sl
    P( B, C, D, E, A, R(29) );
 8085e92:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8085e96:	ea82 030a 	eor.w	r3, r2, sl
 8085e9a:	44d9      	add	r9, fp
 8085e9c:	eb04 0b05 	add.w	fp, r4, r5
 8085ea0:	4043      	eors	r3, r0
 8085ea2:	4459      	add	r1, fp
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085ea4:	9c07      	ldr	r4, [sp, #28]
 8085ea6:	4419      	add	r1, r3
 8085ea8:	9b04      	ldr	r3, [sp, #16]
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 8085eaa:	eb09 69f0 	add.w	r9, r9, r0, ror #27
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085eae:	4063      	eors	r3, r4
 8085eb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8085eb2:	4073      	eors	r3, r6
 8085eb4:	4063      	eors	r3, r4
 8085eb6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085eba:	9304      	str	r3, [sp, #16]
 8085ebc:	442b      	add	r3, r5
    P( D, E, A, B, C, R(32) );
 8085ebe:	9c08      	ldr	r4, [sp, #32]
 8085ec0:	4413      	add	r3, r2
 8085ec2:	9a06      	ldr	r2, [sp, #24]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085ec4:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085ec8:	4062      	eors	r2, r4
 8085eca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8085ecc:	ea8a 0b00 	eor.w	fp, sl, r0
 8085ed0:	4062      	eors	r2, r4
 8085ed2:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085ed4:	eb01 61f9 	add.w	r1, r1, r9, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085ed8:	4062      	eors	r2, r4
 8085eda:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085ede:	9206      	str	r2, [sp, #24]
 8085ee0:	9c06      	ldr	r4, [sp, #24]
 8085ee2:	ea8b 0b09 	eor.w	fp, fp, r9
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085ee6:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8085eea:	ea80 0209 	eor.w	r2, r0, r9
 8085eee:	445b      	add	r3, fp
 8085ef0:	eb04 0b05 	add.w	fp, r4, r5
 8085ef4:	404a      	eors	r2, r1
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085ef6:	9c07      	ldr	r4, [sp, #28]
 8085ef8:	44da      	add	sl, fp
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085efa:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8085efe:	4492      	add	sl, r2
    P( D, E, A, B, C, R(32) );
 8085f00:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
    P( C, D, E, A, B, R(33) );
 8085f04:	ea84 0a08 	eor.w	sl, r4, r8
 8085f08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085f0a:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(33) );
 8085f0e:	ea8a 0a04 	eor.w	sl, sl, r4
 8085f12:	9c03      	ldr	r4, [sp, #12]
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 8085f14:	ea88 080e 	eor.w	r8, r8, lr
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085f18:	ea8a 0a04 	eor.w	sl, sl, r4
 8085f1c:	ea4f 74fa 	mov.w	r4, sl, ror #31
 8085f20:	eb04 0b05 	add.w	fp, r4, r5
 8085f24:	ea89 0a01 	eor.w	sl, r9, r1
 8085f28:	4458      	add	r0, fp
 8085f2a:	ea8a 0a03 	eor.w	sl, sl, r3
 8085f2e:	4482      	add	sl, r0
    P( B, C, D, E, A, R(34) );
 8085f30:	9808      	ldr	r0, [sp, #32]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085f32:	9407      	str	r4, [sp, #28]
    P( B, C, D, E, A, R(34) );
 8085f34:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8085f36:	ea80 000c 	eor.w	r0, r0, ip
 8085f3a:	4060      	eors	r0, r4
 8085f3c:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085f3e:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(34) );
 8085f42:	4060      	eors	r0, r4
 8085f44:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8085f48:	9008      	str	r0, [sp, #32]
 8085f4a:	9c08      	ldr	r4, [sp, #32]
 8085f4c:	ea81 0003 	eor.w	r0, r1, r3
 8085f50:	eb04 0b05 	add.w	fp, r4, r5
    P( A, B, C, D, E, R(35) );
 8085f54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085f56:	4050      	eors	r0, r2
 8085f58:	ea88 0804 	eor.w	r8, r8, r4
 8085f5c:	9c06      	ldr	r4, [sp, #24]
 8085f5e:	44d9      	add	r9, fp
 8085f60:	ea88 0804 	eor.w	r8, r8, r4
 8085f64:	ea4f 7bf8 	mov.w	fp, r8, ror #31
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085f68:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8085f6c:	4481      	add	r9, r0
    P( B, C, D, E, A, R(34) );
 8085f6e:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8085f72:	eb09 60fa 	add.w	r0, r9, sl, ror #27
 8085f76:	ea83 0802 	eor.w	r8, r3, r2
 8085f7a:	eb0b 0905 	add.w	r9, fp, r5
 8085f7e:	ea88 080a 	eor.w	r8, r8, sl
 8085f82:	4449      	add	r1, r9
 8085f84:	4441      	add	r1, r8
    P( A, B, C, D, E, R(35) );
 8085f86:	eb01 68f0 	add.w	r8, r1, r0, ror #27
    P( E, A, B, C, D, R(36) );
 8085f8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8085f8c:	ea8c 0c07 	eor.w	ip, ip, r7
 8085f90:	ea8c 0c01 	eor.w	ip, ip, r1
 8085f94:	9907      	ldr	r1, [sp, #28]
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 8085f96:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(36) );
 8085f9a:	ea8c 0c01 	eor.w	ip, ip, r1
 8085f9e:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8085fa2:	910e      	str	r1, [sp, #56]	; 0x38
 8085fa4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8085fa6:	ea82 010a 	eor.w	r1, r2, sl
 8085faa:	eb04 0c05 	add.w	ip, r4, r5
 8085fae:	4041      	eors	r1, r0
 8085fb0:	4463      	add	r3, ip
 8085fb2:	440b      	add	r3, r1
 8085fb4:	eb03 61f8 	add.w	r1, r3, r8, ror #27
    P( D, E, A, B, C, R(37) );
 8085fb8:	9b02      	ldr	r3, [sp, #8]
 8085fba:	ea8e 0e06 	eor.w	lr, lr, r6
 8085fbe:	ea8e 0e03 	eor.w	lr, lr, r3
 8085fc2:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
 8085fc4:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(37) );
 8085fc8:	ea8e 0e03 	eor.w	lr, lr, r3
 8085fcc:	ea4f 73fe 	mov.w	r3, lr, ror #31
 8085fd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8085fd2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8085fd4:	ea8a 0300 	eor.w	r3, sl, r0
 8085fd8:	eb04 0e05 	add.w	lr, r4, r5
 8085fdc:	ea83 0308 	eor.w	r3, r3, r8
 8085fe0:	4472      	add	r2, lr
 8085fe2:	441a      	add	r2, r3
 8085fe4:	eb02 63f1 	add.w	r3, r2, r1, ror #27
    P( C, D, E, A, B, R(38) );
 8085fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
 8085fea:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(38) );
 8085fee:	4057      	eors	r7, r2
 8085ff0:	9a03      	ldr	r2, [sp, #12]
 8085ff2:	4057      	eors	r7, r2
 8085ff4:	ea87 070b 	eor.w	r7, r7, fp
 8085ff8:	ea4f 72f7 	mov.w	r2, r7, ror #31
 8085ffc:	9210      	str	r2, [sp, #64]	; 0x40
 8085ffe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8086000:	ea80 0208 	eor.w	r2, r0, r8
 8086004:	1967      	adds	r7, r4, r5
    P( B, C, D, E, A, R(39) );
 8086006:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8086008:	404a      	eors	r2, r1
 808600a:	4066      	eors	r6, r4
 808600c:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 808600e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(39) );
 8086012:	4066      	eors	r6, r4
 8086014:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8086016:	44ba      	add	sl, r7
 8086018:	4066      	eors	r6, r4
 808601a:	ea4f 74f6 	mov.w	r4, r6, ror #31
 808601e:	4425      	add	r5, r4
 8086020:	9411      	str	r4, [sp, #68]	; 0x44
 8086022:	4428      	add	r0, r5
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8086024:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8086026:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8086028:	ea88 0601 	eor.w	r6, r8, r1
 808602c:	4065      	eors	r5, r4
 808602e:	462c      	mov	r4, r5
 8086030:	9d06      	ldr	r5, [sp, #24]
 8086032:	405e      	eors	r6, r3
 8086034:	406c      	eors	r4, r5
 8086036:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8086038:	4492      	add	sl, r2
 808603a:	4430      	add	r0, r6
 808603c:	406c      	eors	r4, r5
 808603e:	4ed6      	ldr	r6, [pc, #856]	; (8086398 <mbedtls_internal_sha1_process+0xb20>)
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 8086040:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8086044:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 8086048:	ea4f 03b3 	mov.w	r3, r3, ror #2
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 808604c:	9409      	str	r4, [sp, #36]	; 0x24
 808604e:	ea42 0503 	orr.w	r5, r2, r3
 8086052:	4434      	add	r4, r6
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 8086054:	eb00 60f2 	add.w	r0, r0, r2, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8086058:	400d      	ands	r5, r1
 808605a:	44a0      	add	r8, r4
 808605c:	ea02 0403 	and.w	r4, r2, r3
 8086060:	432c      	orrs	r4, r5
 8086062:	eb08 68f0 	add.w	r8, r8, r0, ror #27
 8086066:	ea4f 0ab2 	mov.w	sl, r2, ror #2
 808606a:	44a0      	add	r8, r4
    P( E, A, B, C, D, R(41) );
 808606c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 808606e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8086070:	ea4f 0cb0 	mov.w	ip, r0, ror #2
 8086074:	4062      	eors	r2, r4
 8086076:	9c07      	ldr	r4, [sp, #28]
 8086078:	4062      	eors	r2, r4
 808607a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 808607c:	4062      	eors	r2, r4
 808607e:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8086082:	920a      	str	r2, [sp, #40]	; 0x28
 8086084:	ea40 020a 	orr.w	r2, r0, sl
 8086088:	ea02 0403 	and.w	r4, r2, r3
 808608c:	ea00 020a 	and.w	r2, r0, sl
 8086090:	4322      	orrs	r2, r4
 8086092:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(42) );
 8086094:	980d      	ldr	r0, [sp, #52]	; 0x34
 8086096:	4434      	add	r4, r6
 8086098:	4421      	add	r1, r4
 808609a:	4411      	add	r1, r2
 808609c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
 808609e:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( D, E, A, B, C, R(42) );
 80860a2:	4042      	eors	r2, r0
 80860a4:	9808      	ldr	r0, [sp, #32]
 80860a6:	4042      	eors	r2, r0
 80860a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80860aa:	4042      	eors	r2, r0
 80860ac:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80860b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80860b2:	ea48 000c 	orr.w	r0, r8, ip
 80860b6:	4432      	add	r2, r6
 80860b8:	ea00 000a 	and.w	r0, r0, sl
 80860bc:	4413      	add	r3, r2
 80860be:	ea08 020c 	and.w	r2, r8, ip
 80860c2:	4302      	orrs	r2, r0
 80860c4:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80860c8:	4413      	add	r3, r2
    P( C, D, E, A, B, R(43) );
 80860ca:	9802      	ldr	r0, [sp, #8]
 80860cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 80860ce:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(43) );
 80860d2:	4050      	eors	r0, r2
 80860d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80860d6:	ea80 000b 	eor.w	r0, r0, fp
 80860da:	4050      	eors	r0, r2
 80860dc:	ea4f 72f0 	mov.w	r2, r0, ror #31
 80860e0:	ea41 0008 	orr.w	r0, r1, r8
 80860e4:	920c      	str	r2, [sp, #48]	; 0x30
 80860e6:	ea00 000c 	and.w	r0, r0, ip
 80860ea:	ea01 0208 	and.w	r2, r1, r8
 80860ee:	4310      	orrs	r0, r2
 80860f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80860f2:	ea4f 01b1 	mov.w	r1, r1, ror #2
 80860f6:	4432      	add	r2, r6
 80860f8:	4452      	add	r2, sl
 80860fa:	4402      	add	r2, r0
 80860fc:	eb02 6af3 	add.w	sl, r2, r3, ror #27
    P( B, C, D, E, A, R(44) );
 8086100:	9803      	ldr	r0, [sp, #12]
 8086102:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8086104:	ea43 0401 	orr.w	r4, r3, r1
 8086108:	4050      	eors	r0, r2
 808610a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 808610c:	ea04 0408 	and.w	r4, r4, r8
 8086110:	4050      	eors	r0, r2
 8086112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086114:	ea4f 07b3 	mov.w	r7, r3, ror #2
 8086118:	4050      	eors	r0, r2
 808611a:	ea4f 72f0 	mov.w	r2, r0, ror #31
 808611e:	1990      	adds	r0, r2, r6
 8086120:	920d      	str	r2, [sp, #52]	; 0x34
 8086122:	4460      	add	r0, ip
 8086124:	ea03 0201 	and.w	r2, r3, r1
 8086128:	4322      	orrs	r2, r4
 808612a:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 808612e:	4410      	add	r0, r2
    P( A, B, C, D, E, R(45) );
 8086130:	9b02      	ldr	r3, [sp, #8]
 8086132:	9a04      	ldr	r2, [sp, #16]
 8086134:	ea4f 09ba 	mov.w	r9, sl, ror #2
 8086138:	4053      	eors	r3, r2
 808613a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808613c:	4053      	eors	r3, r2
 808613e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8086140:	4053      	eors	r3, r2
 8086142:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8086146:	9302      	str	r3, [sp, #8]
 8086148:	9a02      	ldr	r2, [sp, #8]
 808614a:	ea4a 0307 	orr.w	r3, sl, r7
 808614e:	ea03 0e01 	and.w	lr, r3, r1
 8086152:	ea0a 0307 	and.w	r3, sl, r7
 8086156:	ea4e 0303 	orr.w	r3, lr, r3
 808615a:	eb02 0e06 	add.w	lr, r2, r6
 808615e:	44f0      	add	r8, lr
 8086160:	4498      	add	r8, r3
    P( E, A, B, C, D, R(46) );
 8086162:	9a06      	ldr	r2, [sp, #24]
 8086164:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
 8086166:	eb08 6ef0 	add.w	lr, r8, r0, ror #27
    P( E, A, B, C, D, R(46) );
 808616a:	ea83 0802 	eor.w	r8, r3, r2
 808616e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8086170:	ea88 0803 	eor.w	r8, r8, r3
 8086174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8086176:	ea88 0803 	eor.w	r8, r8, r3
 808617a:	ea4f 73f8 	mov.w	r3, r8, ror #31
 808617e:	199c      	adds	r4, r3, r6
 8086180:	4421      	add	r1, r4
 8086182:	ea40 0409 	orr.w	r4, r0, r9
 8086186:	9303      	str	r3, [sp, #12]
 8086188:	403c      	ands	r4, r7
 808618a:	ea00 0309 	and.w	r3, r0, r9
 808618e:	431c      	orrs	r4, r3
    P( D, E, A, B, C, R(47) );
 8086190:	9b04      	ldr	r3, [sp, #16]
 8086192:	9a07      	ldr	r2, [sp, #28]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 8086194:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(47) );
 8086198:	ea83 0c02 	eor.w	ip, r3, r2
 808619c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808619e:	eb01 61fe 	add.w	r1, r1, lr, ror #27
 80861a2:	ea8c 0c03 	eor.w	ip, ip, r3
 80861a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 80861a8:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
 80861aa:	ea8c 0c03 	eor.w	ip, ip, r3
 80861ae:	ea4f 73fc 	mov.w	r3, ip, ror #31
 80861b2:	ea4e 0100 	orr.w	r1, lr, r0
 80861b6:	9304      	str	r3, [sp, #16]
 80861b8:	ea01 0109 	and.w	r1, r1, r9
 80861bc:	ea0e 0300 	and.w	r3, lr, r0
 80861c0:	4319      	orrs	r1, r3
 80861c2:	9b04      	ldr	r3, [sp, #16]
    P( C, D, E, A, B, R(48) );
 80861c4:	9a08      	ldr	r2, [sp, #32]
 80861c6:	4433      	add	r3, r6
 80861c8:	443b      	add	r3, r7
 80861ca:	18cf      	adds	r7, r1, r3
 80861cc:	9b06      	ldr	r3, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 80861ce:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( C, D, E, A, B, R(48) );
 80861d2:	ea83 0802 	eor.w	r8, r3, r2
 80861d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 80861d8:	eb07 67f4 	add.w	r7, r7, r4, ror #27
    P( C, D, E, A, B, R(48) );
 80861dc:	ea88 0803 	eor.w	r8, r8, r3
 80861e0:	9b02      	ldr	r3, [sp, #8]
    P( B, C, D, E, A, R(49) );
 80861e2:	ea4f 0ab7 	mov.w	sl, r7, ror #2
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80861e6:	ea88 0803 	eor.w	r8, r8, r3
 80861ea:	ea4f 73f8 	mov.w	r3, r8, ror #31
 80861ee:	199a      	adds	r2, r3, r6
 80861f0:	4491      	add	r9, r2
 80861f2:	ea44 0201 	orr.w	r2, r4, r1
 80861f6:	9306      	str	r3, [sp, #24]
 80861f8:	4002      	ands	r2, r0
 80861fa:	ea04 0301 	and.w	r3, r4, r1
 80861fe:	431a      	orrs	r2, r3
    P( B, C, D, E, A, R(49) );
 8086200:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8086202:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(49) );
 8086206:	ea83 0c0b 	eor.w	ip, r3, fp
 808620a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808620c:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 8086210:	ea8c 0c03 	eor.w	ip, ip, r3
 8086214:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8086216:	444a      	add	r2, r9
    P( B, C, D, E, A, R(49) );
 8086218:	ea8c 0c03 	eor.w	ip, ip, r3
 808621c:	ea4f 73fc 	mov.w	r3, ip, ror #31
 8086220:	9307      	str	r3, [sp, #28]
 8086222:	9d07      	ldr	r5, [sp, #28]
 8086224:	ea47 0304 	orr.w	r3, r7, r4
 8086228:	ea03 0c01 	and.w	ip, r3, r1
 808622c:	ea07 0304 	and.w	r3, r7, r4
 8086230:	ea4c 0303 	orr.w	r3, ip, r3
 8086234:	eb05 0c06 	add.w	ip, r5, r6
 8086238:	4460      	add	r0, ip
 808623a:	4418      	add	r0, r3
 808623c:	eb00 6cf2 	add.w	ip, r0, r2, ror #27
    P( A, B, C, D, E, R(50) );
 8086240:	9b08      	ldr	r3, [sp, #32]
 8086242:	980e      	ldr	r0, [sp, #56]	; 0x38
 8086244:	ea83 0500 	eor.w	r5, r3, r0
 8086248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808624a:	ea42 000a 	orr.w	r0, r2, sl
 808624e:	405d      	eors	r5, r3
 8086250:	9b04      	ldr	r3, [sp, #16]
 8086252:	4020      	ands	r0, r4
 8086254:	405d      	eors	r5, r3
 8086256:	ea4f 77f5 	mov.w	r7, r5, ror #31
 808625a:	19bb      	adds	r3, r7, r6
 808625c:	4419      	add	r1, r3
 808625e:	eb01 63fc 	add.w	r3, r1, ip, ror #27
 8086262:	ea02 010a 	and.w	r1, r2, sl
 8086266:	4301      	orrs	r1, r0
 8086268:	4419      	add	r1, r3
    P( E, A, B, C, D, R(51) );
 808626a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
 808626c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(51) );
 8086270:	ea8b 0903 	eor.w	r9, fp, r3
 8086274:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8086276:	ea4f 00bc 	mov.w	r0, ip, ror #2
 808627a:	ea89 0903 	eor.w	r9, r9, r3
 808627e:	9b06      	ldr	r3, [sp, #24]
 8086280:	ea89 0903 	eor.w	r9, r9, r3
 8086284:	ea4c 0302 	orr.w	r3, ip, r2
 8086288:	ea4f 7ef9 	mov.w	lr, r9, ror #31
 808628c:	ea03 050a 	and.w	r5, r3, sl
 8086290:	ea0c 0302 	and.w	r3, ip, r2
 8086294:	432b      	orrs	r3, r5
 8086296:	eb0e 0506 	add.w	r5, lr, r6
 808629a:	4425      	add	r5, r4
 808629c:	441d      	add	r5, r3
    P( D, E, A, B, C, R(52) );
 808629e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80862a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
 80862a2:	eb05 65f1 	add.w	r5, r5, r1, ror #27
    P( D, E, A, B, C, R(52) );
 80862a6:	4063      	eors	r3, r4
 80862a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80862aa:	4063      	eors	r3, r4
 80862ac:	9c07      	ldr	r4, [sp, #28]
 80862ae:	4063      	eors	r3, r4
 80862b0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80862b4:	9308      	str	r3, [sp, #32]
 80862b6:	4433      	add	r3, r6
 80862b8:	449a      	add	sl, r3
 80862ba:	eb0a 63f5 	add.w	r3, sl, r5, ror #27
 80862be:	ea41 0a00 	orr.w	sl, r1, r0
 80862c2:	ea01 0400 	and.w	r4, r1, r0
 80862c6:	ea0a 0a02 	and.w	sl, sl, r2
 80862ca:	ea4a 0a04 	orr.w	sl, sl, r4
 80862ce:	449a      	add	sl, r3
    P( C, D, E, A, B, R(53) );
 80862d0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80862d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
 80862d4:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(53) );
 80862d8:	4063      	eors	r3, r4
 80862da:	9c02      	ldr	r4, [sp, #8]
 80862dc:	4063      	eors	r3, r4
 80862de:	407b      	eors	r3, r7
 80862e0:	ea45 0401 	orr.w	r4, r5, r1
 80862e4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80862e8:	930e      	str	r3, [sp, #56]	; 0x38
 80862ea:	4004      	ands	r4, r0
 80862ec:	ea05 0301 	and.w	r3, r5, r1
 80862f0:	431c      	orrs	r4, r3
 80862f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80862f4:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80862f8:	4433      	add	r3, r6
 80862fa:	4413      	add	r3, r2
 80862fc:	4423      	add	r3, r4
    P( B, C, D, E, A, R(54) );
 80862fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8086300:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
 8086302:	eb03 63fa 	add.w	r3, r3, sl, ror #27
    P( B, C, D, E, A, R(54) );
 8086306:	ea82 0804 	eor.w	r8, r2, r4
 808630a:	9a03      	ldr	r2, [sp, #12]
 808630c:	ea88 0802 	eor.w	r8, r8, r2
 8086310:	ea88 080e 	eor.w	r8, r8, lr
 8086314:	ea4f 72f8 	mov.w	r2, r8, ror #31
 8086318:	eb02 0806 	add.w	r8, r2, r6
 808631c:	4480      	add	r8, r0
 808631e:	eb08 60f3 	add.w	r0, r8, r3, ror #27
 8086322:	ea4a 0805 	orr.w	r8, sl, r5
 8086326:	920f      	str	r2, [sp, #60]	; 0x3c
 8086328:	ea08 0801 	and.w	r8, r8, r1
 808632c:	ea0a 0205 	and.w	r2, sl, r5
 8086330:	ea48 0802 	orr.w	r8, r8, r2
 8086334:	4480      	add	r8, r0
    P( A, B, C, D, E, R(55) );
 8086336:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8086338:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
 808633a:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(55) );
 808633e:	ea82 0c00 	eor.w	ip, r2, r0
 8086342:	9a04      	ldr	r2, [sp, #16]
 8086344:	ea8c 0c02 	eor.w	ip, ip, r2
 8086348:	9a08      	ldr	r2, [sp, #32]
 808634a:	ea8c 0c02 	eor.w	ip, ip, r2
 808634e:	ea4f 72fc 	mov.w	r2, ip, ror #31
 8086352:	9210      	str	r2, [sp, #64]	; 0x40
 8086354:	9810      	ldr	r0, [sp, #64]	; 0x40
 8086356:	ea43 020a 	orr.w	r2, r3, sl
 808635a:	ea02 0c05 	and.w	ip, r2, r5
 808635e:	ea03 020a 	and.w	r2, r3, sl
 8086362:	ea4c 0202 	orr.w	r2, ip, r2
 8086366:	eb00 0c06 	add.w	ip, r0, r6
 808636a:	448c      	add	ip, r1
    P( E, A, B, C, D, R(56) );
 808636c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808636e:	4494      	add	ip, r2
 8086370:	9a06      	ldr	r2, [sp, #24]
 8086372:	404c      	eors	r4, r1
 8086374:	4054      	eors	r4, r2
 8086376:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 8086378:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(56) );
 808637c:	4054      	eors	r4, r2
 808637e:	ea4f 72f4 	mov.w	r2, r4, ror #31
 8086382:	9209      	str	r2, [sp, #36]	; 0x24
 8086384:	4432      	add	r2, r6
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 8086386:	ea4f 03b3 	mov.w	r3, r3, ror #2
 808638a:	4415      	add	r5, r2
 808638c:	eb05 62fc 	add.w	r2, r5, ip, ror #27
    P( E, A, B, C, D, R(56) );
 8086390:	ea48 0503 	orr.w	r5, r8, r3
 8086394:	e002      	b.n	808639c <mbedtls_internal_sha1_process+0xb24>
 8086396:	bf00      	nop
 8086398:	8f1bbcdc 	.word	0x8f1bbcdc
 808639c:	ea08 0103 	and.w	r1, r8, r3
 80863a0:	ea05 050a 	and.w	r5, r5, sl
 80863a4:	430d      	orrs	r5, r1
 80863a6:	4415      	add	r5, r2
    P( D, E, A, B, C, R(57) );
 80863a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80863aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
 80863ac:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(57) );
 80863b0:	ea82 0b01 	eor.w	fp, r2, r1
 80863b4:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(58) );
 80863b6:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80863b8:	ea8b 0b02 	eor.w	fp, fp, r2
 80863bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80863be:	ea8b 0b02 	eor.w	fp, fp, r2
 80863c2:	ea4c 0208 	orr.w	r2, ip, r8
 80863c6:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80863ca:	ea02 0903 	and.w	r9, r2, r3
 80863ce:	ea0c 0208 	and.w	r2, ip, r8
 80863d2:	ea49 0202 	orr.w	r2, r9, r2
 80863d6:	eb0b 0906 	add.w	r9, fp, r6
 80863da:	44d1      	add	r9, sl
 80863dc:	4491      	add	r9, r2
    P( C, D, E, A, B, R(58) );
 80863de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80863e0:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(58) );
 80863e4:	ea82 0a01 	eor.w	sl, r2, r1
 80863e8:	ea8a 0a07 	eor.w	sl, sl, r7
 80863ec:	ea8a 0a00 	eor.w	sl, sl, r0
 80863f0:	ea4f 72fa 	mov.w	r2, sl, ror #31
 80863f4:	920a      	str	r2, [sp, #40]	; 0x28
 80863f6:	4432      	add	r2, r6
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80863f8:	eb09 69f5 	add.w	r9, r9, r5, ror #27
    P( C, D, E, A, B, R(58) );
 80863fc:	ea45 010c 	orr.w	r1, r5, ip
 8086400:	441a      	add	r2, r3
 8086402:	eb02 63f9 	add.w	r3, r2, r9, ror #27
 8086406:	ea01 0108 	and.w	r1, r1, r8
 808640a:	ea05 020c 	and.w	r2, r5, ip
 808640e:	430a      	orrs	r2, r1
 8086410:	441a      	add	r2, r3
    P( B, C, D, E, A, R(59) );
 8086412:	9902      	ldr	r1, [sp, #8]
 8086414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
 8086416:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( B, C, D, E, A, R(59) );
 808641a:	ea83 0001 	eor.w	r0, r3, r1
 808641e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086420:	ea80 000e 	eor.w	r0, r0, lr
 8086424:	4058      	eors	r0, r3
 8086426:	ea4f 73f0 	mov.w	r3, r0, ror #31
 808642a:	930b      	str	r3, [sp, #44]	; 0x2c
 808642c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808642e:	ea49 0005 	orr.w	r0, r9, r5
 8086432:	ea00 000c 	and.w	r0, r0, ip
 8086436:	ea09 0305 	and.w	r3, r9, r5
 808643a:	440e      	add	r6, r1
 808643c:	4446      	add	r6, r8
 808643e:	4303      	orrs	r3, r0
 8086440:	1998      	adds	r0, r3, r6
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8086442:	9903      	ldr	r1, [sp, #12]
 8086444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8086446:	4ed8      	ldr	r6, [pc, #864]	; (80867a8 <mbedtls_internal_sha1_process+0xf30>)
 8086448:	4059      	eors	r1, r3
 808644a:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 808644c:	ea4f 09b9 	mov.w	r9, r9, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8086450:	4059      	eors	r1, r3
 8086452:	ea81 010b 	eor.w	r1, r1, fp
 8086456:	ea4f 73f1 	mov.w	r3, r1, ror #31
 808645a:	930c      	str	r3, [sp, #48]	; 0x30
 808645c:	990c      	ldr	r1, [sp, #48]	; 0x30
 808645e:	ea85 0309 	eor.w	r3, r5, r9
 8086462:	4431      	add	r1, r6
 8086464:	4053      	eors	r3, r2
 8086466:	4461      	add	r1, ip
 8086468:	4419      	add	r1, r3
    P( E, A, B, C, D, R(61) );
 808646a:	9b02      	ldr	r3, [sp, #8]
 808646c:	9c04      	ldr	r4, [sp, #16]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 808646e:	eb00 60f2 	add.w	r0, r0, r2, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 8086472:	4063      	eors	r3, r4
 8086474:	9c0e      	ldr	r4, [sp, #56]	; 0x38
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8086476:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(61) );
 808647a:	4063      	eors	r3, r4
 808647c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 808647e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(61) );
 8086482:	4063      	eors	r3, r4
 8086484:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8086488:	9302      	str	r3, [sp, #8]
 808648a:	ea89 0402 	eor.w	r4, r9, r2
 808648e:	4433      	add	r3, r6
 8086490:	4044      	eors	r4, r0
 8086492:	442b      	add	r3, r5
 8086494:	4423      	add	r3, r4
    P( D, E, A, B, C, R(62) );
 8086496:	9d06      	ldr	r5, [sp, #24]
 8086498:	9c03      	ldr	r4, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 808649a:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
 808649e:	ea84 0805 	eor.w	r8, r4, r5
 80864a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80864a4:	ea82 0500 	eor.w	r5, r2, r0
 80864a8:	ea88 0804 	eor.w	r8, r8, r4
 80864ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80864ae:	404d      	eors	r5, r1
 80864b0:	ea88 0804 	eor.w	r8, r8, r4
 80864b4:	ea4f 74f8 	mov.w	r4, r8, ror #31
 80864b8:	9403      	str	r4, [sp, #12]
 80864ba:	4434      	add	r4, r6
 80864bc:	444c      	add	r4, r9
 80864be:	442c      	add	r4, r5
    P( C, D, E, A, B, R(63) );
 80864c0:	9d04      	ldr	r5, [sp, #16]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80864c2:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80864c6:	46ac      	mov	ip, r5
 80864c8:	9d07      	ldr	r5, [sp, #28]
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 80864ca:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(63) );
 80864ce:	ea8c 0c05 	eor.w	ip, ip, r5
 80864d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 80864d4:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(63) );
 80864d8:	ea8c 0c05 	eor.w	ip, ip, r5
 80864dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80864de:	ea8c 0c05 	eor.w	ip, ip, r5
 80864e2:	ea4f 75fc 	mov.w	r5, ip, ror #31
 80864e6:	9504      	str	r5, [sp, #16]
 80864e8:	ea80 0501 	eor.w	r5, r0, r1
 80864ec:	ea85 0c03 	eor.w	ip, r5, r3
 80864f0:	9d04      	ldr	r5, [sp, #16]
 80864f2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80864f6:	eb05 0a06 	add.w	sl, r5, r6
 80864fa:	4492      	add	sl, r2
    P( B, C, D, E, A, R(64) );
 80864fc:	9a06      	ldr	r2, [sp, #24]
 80864fe:	44e2      	add	sl, ip
 8086500:	ea82 0807 	eor.w	r8, r2, r7
 8086504:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 8086506:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    P( B, C, D, E, A, R(64) );
 808650a:	ea88 0802 	eor.w	r8, r8, r2
 808650e:	9a02      	ldr	r2, [sp, #8]
 8086510:	ea88 0802 	eor.w	r8, r8, r2
 8086514:	ea4f 72f8 	mov.w	r2, r8, ror #31
 8086518:	9206      	str	r2, [sp, #24]
 808651a:	9d06      	ldr	r5, [sp, #24]
 808651c:	ea81 0203 	eor.w	r2, r1, r3
 8086520:	eb05 0806 	add.w	r8, r5, r6
 8086524:	4062      	eors	r2, r4
 8086526:	4480      	add	r8, r0
 8086528:	4490      	add	r8, r2
    P( A, B, C, D, E, R(65) );
 808652a:	9a07      	ldr	r2, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 808652c:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(65) );
 8086530:	ea82 0c0e 	eor.w	ip, r2, lr
 8086534:	9a03      	ldr	r2, [sp, #12]
 8086536:	ea8c 0c0b 	eor.w	ip, ip, fp
 808653a:	ea8c 0c02 	eor.w	ip, ip, r2
 808653e:	ea4f 72fc 	mov.w	r2, ip, ror #31
 8086542:	9207      	str	r2, [sp, #28]
 8086544:	9807      	ldr	r0, [sp, #28]
 8086546:	ea83 0204 	eor.w	r2, r3, r4
 808654a:	eb00 0c06 	add.w	ip, r0, r6
 808654e:	ea82 020a 	eor.w	r2, r2, sl
 8086552:	448c      	add	ip, r1
 8086554:	4494      	add	ip, r2
    P( E, A, B, C, D, R(66) );
 8086556:	9a08      	ldr	r2, [sp, #32]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 8086558:	eb08 68fa 	add.w	r8, r8, sl, ror #27
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 808655c:	ea87 0502 	eor.w	r5, r7, r2
 8086560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 8086562:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(66) );
 8086566:	4055      	eors	r5, r2
 8086568:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 808656a:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(66) );
 808656e:	4055      	eors	r5, r2
 8086570:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8086574:	19af      	adds	r7, r5, r6
 8086576:	441f      	add	r7, r3
    P( D, E, A, B, C, R(67) );
 8086578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808657a:	ea84 020a 	eor.w	r2, r4, sl
 808657e:	ea8e 0903 	eor.w	r9, lr, r3
 8086582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8086584:	ea82 0208 	eor.w	r2, r2, r8
 8086588:	ea89 0903 	eor.w	r9, r9, r3
 808658c:	9b06      	ldr	r3, [sp, #24]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 808658e:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(67) );
 8086592:	ea89 0903 	eor.w	r9, r9, r3
 8086596:	ea4f 79f9 	mov.w	r9, r9, ror #31
 808659a:	ea8a 0308 	eor.w	r3, sl, r8
 808659e:	eb09 0e06 	add.w	lr, r9, r6
 80865a2:	ea83 030c 	eor.w	r3, r3, ip
 80865a6:	44a6      	add	lr, r4
 80865a8:	4417      	add	r7, r2
 80865aa:	449e      	add	lr, r3
    P( C, D, E, A, B, R(68) );
 80865ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80865ae:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 80865b0:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80865b4:	4053      	eors	r3, r2
 80865b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80865b8:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(68) );
 80865bc:	4053      	eors	r3, r2
 80865be:	4043      	eors	r3, r0
 80865c0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80865c4:	9308      	str	r3, [sp, #32]
 80865c6:	9a08      	ldr	r2, [sp, #32]
 80865c8:	ea88 030c 	eor.w	r3, r8, ip
 80865cc:	4432      	add	r2, r6
 80865ce:	407b      	eors	r3, r7
 80865d0:	4452      	add	r2, sl
    P( B, C, D, E, A, R(69) );
 80865d2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80865d4:	441a      	add	r2, r3
 80865d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80865d8:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80865dc:	404b      	eors	r3, r1
 80865de:	9902      	ldr	r1, [sp, #8]
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80865e0:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( B, C, D, E, A, R(69) );
 80865e4:	404b      	eors	r3, r1
 80865e6:	406b      	eors	r3, r5
 80865e8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80865ec:	930d      	str	r3, [sp, #52]	; 0x34
 80865ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80865f0:	ea8c 0307 	eor.w	r3, ip, r7
 80865f4:	1988      	adds	r0, r1, r6
 80865f6:	ea83 030e 	eor.w	r3, r3, lr
 80865fa:	4440      	add	r0, r8
    P( A, B, C, D, E, R(70) );
 80865fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80865fe:	4418      	add	r0, r3
 8086600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8086602:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8086606:	ea83 0801 	eor.w	r8, r3, r1
 808660a:	9b03      	ldr	r3, [sp, #12]
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 808660c:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, R(70) );
 8086610:	ea88 0803 	eor.w	r8, r8, r3
 8086614:	ea88 0809 	eor.w	r8, r8, r9
 8086618:	ea4f 78f8 	mov.w	r8, r8, ror #31
 808661c:	ea87 030e 	eor.w	r3, r7, lr
 8086620:	eb08 0106 	add.w	r1, r8, r6
 8086624:	4053      	eors	r3, r2
 8086626:	4461      	add	r1, ip
 8086628:	4419      	add	r1, r3
    P( E, A, B, C, D, R(71) );
 808662a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 808662c:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8086630:	ea83 0c0b 	eor.w	ip, r3, fp
 8086634:	9b04      	ldr	r3, [sp, #16]
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8086636:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(71) );
 808663a:	ea8c 0c03 	eor.w	ip, ip, r3
 808663e:	9b08      	ldr	r3, [sp, #32]
 8086640:	ea8e 0402 	eor.w	r4, lr, r2
 8086644:	ea8c 0c03 	eor.w	ip, ip, r3
 8086648:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 808664c:	eb0c 0306 	add.w	r3, ip, r6
 8086650:	4044      	eors	r4, r0
 8086652:	443b      	add	r3, r7
 8086654:	4423      	add	r3, r4
    P( D, E, A, B, C, R(72) );
 8086656:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8086658:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 808665a:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 808665e:	4067      	eors	r7, r4
 8086660:	9c06      	ldr	r4, [sp, #24]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8086662:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(72) );
 8086666:	4067      	eors	r7, r4
 8086668:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 808666a:	ea82 0a00 	eor.w	sl, r2, r0
 808666e:	4067      	eors	r7, r4
 8086670:	ea4f 74f7 	mov.w	r4, r7, ror #31
    P( C, D, E, A, B, R(73) );
 8086674:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8086676:	9409      	str	r4, [sp, #36]	; 0x24
 8086678:	4434      	add	r4, r6
 808667a:	4474      	add	r4, lr
    P( C, D, E, A, B, R(73) );
 808667c:	ea8b 0e07 	eor.w	lr, fp, r7
 8086680:	9f07      	ldr	r7, [sp, #28]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8086682:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8086686:	ea8e 0e07 	eor.w	lr, lr, r7
 808668a:	ea8e 0e08 	eor.w	lr, lr, r8
 808668e:	ea8a 0a01 	eor.w	sl, sl, r1
 8086692:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8086696:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 808669a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 808669c:	eb0e 0b06 	add.w	fp, lr, r6
 80866a0:	4454      	add	r4, sl
 80866a2:	ea80 0a01 	eor.w	sl, r0, r1
 80866a6:	ea8a 0a03 	eor.w	sl, sl, r3
 80866aa:	445a      	add	r2, fp
 80866ac:	4452      	add	r2, sl
 80866ae:	46ba      	mov	sl, r7
 80866b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80866b2:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80866b6:	ea8a 0a07 	eor.w	sl, sl, r7
 80866ba:	ea8a 0505 	eor.w	r5, sl, r5
 80866be:	ea85 050c 	eor.w	r5, r5, ip
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80866c2:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(74) );
 80866c6:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80866ca:	eb05 0b06 	add.w	fp, r5, r6
 80866ce:	ea81 0a03 	eor.w	sl, r1, r3
 80866d2:	4458      	add	r0, fp
 80866d4:	ea8a 0a04 	eor.w	sl, sl, r4
    P( A, B, C, D, E, R(75) );
 80866d8:	9f02      	ldr	r7, [sp, #8]
 80866da:	4482      	add	sl, r0
 80866dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80866de:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80866e2:	4078      	eors	r0, r7
 80866e4:	ea80 0909 	eor.w	r9, r0, r9
 80866e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80866ea:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(75) );
 80866ee:	ea89 0700 	eor.w	r7, r9, r0
 80866f2:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80866f6:	eb07 0906 	add.w	r9, r7, r6
 80866fa:	ea83 0004 	eor.w	r0, r3, r4
 80866fe:	4449      	add	r1, r9
 8086700:	4050      	eors	r0, r2
 8086702:	4408      	add	r0, r1
    P( E, A, B, C, D, R(76) );
 8086704:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8086706:	950a      	str	r5, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 8086708:	460d      	mov	r5, r1
 808670a:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 808670c:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 8086710:	4069      	eors	r1, r5
 8086712:	9d08      	ldr	r5, [sp, #32]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8086714:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(76) );
 8086718:	4069      	eors	r1, r5
 808671a:	ea81 0e0e 	eor.w	lr, r1, lr
 808671e:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8086722:	eb0e 0906 	add.w	r9, lr, r6
 8086726:	ea84 0102 	eor.w	r1, r4, r2
 808672a:	444b      	add	r3, r9
 808672c:	ea81 010a 	eor.w	r1, r1, sl
 8086730:	9d04      	ldr	r5, [sp, #16]
 8086732:	4419      	add	r1, r3
 8086734:	9b02      	ldr	r3, [sp, #8]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8086736:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 808673a:	406b      	eors	r3, r5
 808673c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(76) );
 808673e:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8086742:	406b      	eors	r3, r5
 8086744:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8086746:	ea82 090a 	eor.w	r9, r2, sl
 808674a:	406b      	eors	r3, r5
 808674c:	eb06 73f3 	add.w	r3, r6, r3, ror #31
 8086750:	9d06      	ldr	r5, [sp, #24]
 8086752:	441c      	add	r4, r3
 8086754:	9b03      	ldr	r3, [sp, #12]
 8086756:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 808675a:	406b      	eors	r3, r5
 808675c:	ea83 0808 	eor.w	r8, r3, r8
 8086760:	ea89 0900 	eor.w	r9, r9, r0
 8086764:	ea88 0807 	eor.w	r8, r8, r7
    P( D, E, A, B, C, R(77) );
 8086768:	ea4f 00b0 	mov.w	r0, r0, ror #2
 808676c:	eb06 78f8 	add.w	r8, r6, r8, ror #31
 8086770:	ea8a 0500 	eor.w	r5, sl, r0
 8086774:	404d      	eors	r5, r1
 8086776:	4442      	add	r2, r8
 8086778:	442a      	add	r2, r5
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 808677a:	9b04      	ldr	r3, [sp, #16]
 808677c:	9d07      	ldr	r5, [sp, #28]
 808677e:	444c      	add	r4, r9
 8086780:	406b      	eors	r3, r5
 8086782:	ea83 0c0c 	eor.w	ip, r3, ip
 8086786:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 8086788:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 808678c:	441e      	add	r6, r3
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 808678e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8086792:	ea8c 0e0e 	eor.w	lr, ip, lr
 8086796:	ea80 0501 	eor.w	r5, r0, r1
 808679a:	eb06 7efe 	add.w	lr, r6, lr, ror #31
 808679e:	4065      	eors	r5, r4
 80867a0:	44f2      	add	sl, lr
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 80867a2:	eb02 62f4 	add.w	r2, r2, r4, ror #27
 80867a6:	e001      	b.n	80867ac <mbedtls_internal_sha1_process+0xf34>
 80867a8:	ca62c1d6 	.word	0xca62c1d6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80867ac:	eb0a 0305 	add.w	r3, sl, r5
 80867b0:	9d01      	ldr	r5, [sp, #4]
 80867b2:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 80867b6:	60ab      	str	r3, [r5, #8]
    ctx->state[1] += B;
 80867b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80867ba:	441a      	add	r2, r3
    ctx->state[2] += C;
 80867bc:	9b05      	ldr	r3, [sp, #20]

#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
 80867be:	60ea      	str	r2, [r5, #12]
    ctx->state[2] += C;
 80867c0:	eb03 04b4 	add.w	r4, r3, r4, ror #2
    ctx->state[3] += D;
 80867c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80867c6:	612c      	str	r4, [r5, #16]
    ctx->state[3] += D;
 80867c8:	4419      	add	r1, r3
    ctx->state[4] += E;
 80867ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80867cc:	6169      	str	r1, [r5, #20]
    ctx->state[4] += E;
 80867ce:	4418      	add	r0, r3
 80867d0:	61a8      	str	r0, [r5, #24]

    return( 0 );
}
 80867d2:	2000      	movs	r0, #0
 80867d4:	b017      	add	sp, #92	; 0x5c
 80867d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80867da:	bf00      	nop

080867dc <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 80867dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80867e0:	4604      	mov	r4, r0
 80867e2:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 80867e4:	4615      	mov	r5, r2
 80867e6:	b382      	cbz	r2, 808684a <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80867e8:	6803      	ldr	r3, [r0, #0]
 80867ea:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80867ee:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80867f0:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80867f2:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80867f4:	bf82      	ittt	hi
 80867f6:	6863      	ldrhi	r3, [r4, #4]
 80867f8:	3301      	addhi	r3, #1
 80867fa:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 80867fc:	b180      	cbz	r0, 8086820 <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80867fe:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 8086802:	42ba      	cmp	r2, r7
 8086804:	d31b      	bcc.n	808683e <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8086806:	f104 081c 	add.w	r8, r4, #28
 808680a:	463a      	mov	r2, r7
 808680c:	4440      	add	r0, r8
 808680e:	f00c fea0 	bl	8093552 <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8086812:	4641      	mov	r1, r8
 8086814:	4620      	mov	r0, r4
 8086816:	f7ff f82f 	bl	8085878 <mbedtls_internal_sha1_process>
 808681a:	b9b8      	cbnz	r0, 808684c <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
 808681c:	443e      	add	r6, r7
        ilen  -= fill;
 808681e:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8086820:	462f      	mov	r7, r5
 8086822:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 8086824:	2f3f      	cmp	r7, #63	; 0x3f
 8086826:	4431      	add	r1, r6
 8086828:	d905      	bls.n	8086836 <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 808682a:	4620      	mov	r0, r4
 808682c:	f7ff f824 	bl	8085878 <mbedtls_internal_sha1_process>
 8086830:	b960      	cbnz	r0, 808684c <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 8086832:	3f40      	subs	r7, #64	; 0x40
 8086834:	e7f5      	b.n	8086822 <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
 8086836:	b147      	cbz	r7, 808684a <mbedtls_sha1_update_ret+0x6e>
 8086838:	463d      	mov	r5, r7
 808683a:	460e      	mov	r6, r1
 808683c:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 808683e:	341c      	adds	r4, #28
 8086840:	462a      	mov	r2, r5
 8086842:	4631      	mov	r1, r6
 8086844:	4420      	add	r0, r4
 8086846:	f00c fe84 	bl	8093552 <memcpy>

    return( 0 );
 808684a:	2000      	movs	r0, #0
}
 808684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086850 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 8086850:	b570      	push	{r4, r5, r6, lr}
 8086852:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8086854:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 8086856:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8086858:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 808685c:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 808685e:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8086860:	4423      	add	r3, r4
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 8086862:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8086864:	771a      	strb	r2, [r3, #28]
 8086866:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
 808686a:	d804      	bhi.n	8086876 <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 808686c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8086870:	2100      	movs	r1, #0
 8086872:	4430      	add	r0, r6
 8086874:	e00e      	b.n	8086894 <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8086876:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 808687a:	2100      	movs	r1, #0
 808687c:	4430      	add	r0, r6
 808687e:	f00c fe8e 	bl	809359e <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8086882:	4631      	mov	r1, r6
 8086884:	4620      	mov	r0, r4
 8086886:	f7fe fff7 	bl	8085878 <mbedtls_internal_sha1_process>
 808688a:	2800      	cmp	r0, #0
 808688c:	d153      	bne.n	8086936 <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 808688e:	4601      	mov	r1, r0
 8086890:	4630      	mov	r0, r6
 8086892:	2238      	movs	r2, #56	; 0x38
 8086894:	f00c fe83 	bl	809359e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8086898:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 808689a:	6861      	ldr	r1, [r4, #4]
 808689c:	0f5a      	lsrs	r2, r3, #29
 808689e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80868a2:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80868a4:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80868a6:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 80868aa:	0c11      	lsrs	r1, r2, #16
 80868ac:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 80868b0:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 80868b4:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80868b6:	0e1a      	lsrs	r2, r3, #24
 80868b8:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80868bc:	0c1a      	lsrs	r2, r3, #16
 80868be:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80868c2:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80868c4:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80868c8:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 80868cc:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80868d0:	4631      	mov	r1, r6
 80868d2:	4620      	mov	r0, r4
 80868d4:	f7fe ffd0 	bl	8085878 <mbedtls_internal_sha1_process>
 80868d8:	2800      	cmp	r0, #0
 80868da:	d12c      	bne.n	8086936 <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80868dc:	7ae3      	ldrb	r3, [r4, #11]
 80868de:	702b      	strb	r3, [r5, #0]
 80868e0:	8963      	ldrh	r3, [r4, #10]
 80868e2:	706b      	strb	r3, [r5, #1]
 80868e4:	68a3      	ldr	r3, [r4, #8]
 80868e6:	0a1b      	lsrs	r3, r3, #8
 80868e8:	70ab      	strb	r3, [r5, #2]
 80868ea:	68a3      	ldr	r3, [r4, #8]
 80868ec:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80868ee:	7be3      	ldrb	r3, [r4, #15]
 80868f0:	712b      	strb	r3, [r5, #4]
 80868f2:	89e3      	ldrh	r3, [r4, #14]
 80868f4:	716b      	strb	r3, [r5, #5]
 80868f6:	68e3      	ldr	r3, [r4, #12]
 80868f8:	0a1b      	lsrs	r3, r3, #8
 80868fa:	71ab      	strb	r3, [r5, #6]
 80868fc:	68e3      	ldr	r3, [r4, #12]
 80868fe:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8086900:	7ce3      	ldrb	r3, [r4, #19]
 8086902:	722b      	strb	r3, [r5, #8]
 8086904:	8a63      	ldrh	r3, [r4, #18]
 8086906:	726b      	strb	r3, [r5, #9]
 8086908:	6923      	ldr	r3, [r4, #16]
 808690a:	0a1b      	lsrs	r3, r3, #8
 808690c:	72ab      	strb	r3, [r5, #10]
 808690e:	6923      	ldr	r3, [r4, #16]
 8086910:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8086912:	7de3      	ldrb	r3, [r4, #23]
 8086914:	732b      	strb	r3, [r5, #12]
 8086916:	8ae3      	ldrh	r3, [r4, #22]
 8086918:	736b      	strb	r3, [r5, #13]
 808691a:	6963      	ldr	r3, [r4, #20]
 808691c:	0a1b      	lsrs	r3, r3, #8
 808691e:	73ab      	strb	r3, [r5, #14]
 8086920:	6963      	ldr	r3, [r4, #20]
 8086922:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8086924:	7ee3      	ldrb	r3, [r4, #27]
 8086926:	742b      	strb	r3, [r5, #16]
 8086928:	8b63      	ldrh	r3, [r4, #26]
 808692a:	746b      	strb	r3, [r5, #17]
 808692c:	69a3      	ldr	r3, [r4, #24]
 808692e:	0a1b      	lsrs	r3, r3, #8
 8086930:	74ab      	strb	r3, [r5, #18]
 8086932:	69a3      	ldr	r3, [r4, #24]
 8086934:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
 8086936:	bd70      	pop	{r4, r5, r6, pc}

08086938 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 8086938:	b5f0      	push	{r4, r5, r6, r7, lr}
 808693a:	b099      	sub	sp, #100	; 0x64
 808693c:	4606      	mov	r6, r0
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 808693e:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 8086940:	460f      	mov	r7, r1
 8086942:	4615      	mov	r5, r2
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 8086944:	f7fe ff6a 	bl	808581c <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 8086948:	a801      	add	r0, sp, #4
 808694a:	f7fe ff7b 	bl	8085844 <mbedtls_sha1_starts_ret>
 808694e:	4604      	mov	r4, r0
 8086950:	b958      	cbnz	r0, 808696a <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 8086952:	463a      	mov	r2, r7
 8086954:	4631      	mov	r1, r6
 8086956:	a801      	add	r0, sp, #4
 8086958:	f7ff ff40 	bl	80867dc <mbedtls_sha1_update_ret>
 808695c:	4604      	mov	r4, r0
 808695e:	b920      	cbnz	r0, 808696a <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 8086960:	4629      	mov	r1, r5
 8086962:	a801      	add	r0, sp, #4
 8086964:	f7ff ff74 	bl	8086850 <mbedtls_sha1_finish_ret>
 8086968:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 808696a:	a801      	add	r0, sp, #4
 808696c:	f7fe ff5a 	bl	8085824 <mbedtls_sha1_free>

    return( ret );
}
 8086970:	4620      	mov	r0, r4
 8086972:	b019      	add	sp, #100	; 0x64
 8086974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086976 <mbedtls_timing_get_timer.part.0>:
    CloseHandle( CreateThread( NULL, 0, TimerProc, NULL, 0, &ThreadId ) );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
 8086976:	b513      	push	{r0, r1, r4, lr}
 8086978:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
 808697a:	2100      	movs	r1, #0
 808697c:	4668      	mov	r0, sp
 808697e:	f00c fef5 	bl	809376c <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
 8086982:	9b00      	ldr	r3, [sp, #0]
 8086984:	6822      	ldr	r2, [r4, #0]
 8086986:	6861      	ldr	r1, [r4, #4]
 8086988:	1a9a      	subs	r2, r3, r2
 808698a:	9b01      	ldr	r3, [sp, #4]
 808698c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8086990:	1a5b      	subs	r3, r3, r1
 8086992:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
 8086996:	fb00 3002 	mla	r0, r0, r2, r3
 808699a:	b002      	add	sp, #8
 808699c:	bd10      	pop	{r4, pc}

0808699e <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
 808699e:	b538      	push	{r3, r4, r5, lr}
 80869a0:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
 80869a2:	f00a fc41 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
 80869a6:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 80869a8:	f00a fc46 	bl	8091238 <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 80869ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 80869b0:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 80869b2:	fbb5 f0f3 	udiv	r0, r5, r3
 80869b6:	fb03 5010 	mls	r0, r3, r0, r5
 80869ba:	4343      	muls	r3, r0
 80869bc:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
 80869be:	2000      	movs	r0, #0
 80869c0:	bd38      	pop	{r3, r4, r5, pc}

080869c2 <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
 80869c2:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
 80869c4:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
 80869c6:	b112      	cbz	r2, 80869ce <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
 80869c8:	2100      	movs	r1, #0
 80869ca:	f00c becf 	b.w	809376c <gettimeofday>
 80869ce:	4770      	bx	lr

080869d0 <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 80869d0:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 80869d2:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 80869d4:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 80869d6:	b153      	cbz	r3, 80869ee <mbedtls_timing_get_delay+0x1e>
 80869d8:	f7ff ffcd 	bl	8086976 <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
 80869dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80869de:	4283      	cmp	r3, r0
 80869e0:	d908      	bls.n	80869f4 <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
 80869e2:	6a23      	ldr	r3, [r4, #32]
 80869e4:	4283      	cmp	r3, r0
 80869e6:	bf8c      	ite	hi
 80869e8:	2000      	movhi	r0, #0
 80869ea:	2001      	movls	r0, #1
 80869ec:	bd10      	pop	{r4, pc}
 80869ee:	f04f 30ff 	mov.w	r0, #4294967295
 80869f2:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
 80869f4:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
 80869f6:	bd10      	pop	{r4, pc}

080869f8 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 80869f8:	b510      	push	{r4, lr}
 80869fa:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
 80869fc:	f001 faee 	bl	8087fdc <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8086a00:	4620      	mov	r0, r4
}
 8086a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
 8086a06:	f00a be3f 	b.w	8091688 <free>

08086a0a <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 8086a0a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8086a0c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8086a10:	2001      	movs	r0, #1
 8086a12:	f00c fc81 	bl	8093318 <calloc>

    if( ctx != NULL )
 8086a16:	4604      	mov	r4, r0
 8086a18:	b108      	cbz	r0, 8086a1e <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8086a1a:	f001 f84d 	bl	8087ab8 <mbedtls_gcm_init>

    return( ctx );
}
 8086a1e:	4620      	mov	r0, r4
 8086a20:	bd10      	pop	{r4, pc}

08086a22 <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
 8086a22:	4613      	mov	r3, r2
 8086a24:	460a      	mov	r2, r1
 8086a26:	2102      	movs	r1, #2
 8086a28:	f001 b84b 	b.w	8087ac2 <mbedtls_gcm_setkey>

08086a2c <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 8086a2c:	b510      	push	{r4, lr}
 8086a2e:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8086a30:	f006 fca3 	bl	808d37a <mbedtls_aes_free>
    mbedtls_free( ctx );
 8086a34:	4620      	mov	r0, r4
}
 8086a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 8086a3a:	f00a be25 	b.w	8091688 <free>

08086a3e <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 8086a3e:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8086a40:	f44f 718c 	mov.w	r1, #280	; 0x118
 8086a44:	2001      	movs	r0, #1
 8086a46:	f00c fc67 	bl	8093318 <calloc>

    if( aes == NULL )
 8086a4a:	4604      	mov	r4, r0
 8086a4c:	b108      	cbz	r0, 8086a52 <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 8086a4e:	f006 fc8f 	bl	808d370 <mbedtls_aes_init>

    return( aes );
}
 8086a52:	4620      	mov	r0, r4
 8086a54:	bd10      	pop	{r4, pc}

08086a56 <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8086a56:	f006 bd97 	b.w	808d588 <mbedtls_aes_setkey_dec>

08086a5a <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8086a5a:	f006 bc99 	b.w	808d390 <mbedtls_aes_setkey_enc>

08086a5e <_ZL18aes_crypt_cbc_wrapPv19mbedtls_operation_tjPhPKhS1_>:
}

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 8086a5e:	b410      	push	{r4}
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
}
 8086a60:	bc10      	pop	{r4}
#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
 8086a62:	f007 b9a7 	b.w	808ddb4 <mbedtls_aes_crypt_cbc>

08086a66 <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8086a66:	f007 b999 	b.w	808dd9c <mbedtls_aes_crypt_ecb>

08086a6a <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 8086a6a:	2801      	cmp	r0, #1
 8086a6c:	d002      	beq.n	8086a74 <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
 8086a6e:	1f83      	subs	r3, r0, #6
 8086a70:	4258      	negs	r0, r3
 8086a72:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 8086a74:	4770      	bx	lr
	...

08086a78 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8086a78:	2301      	movs	r3, #1
    items->name = "rsa.N";
 8086a7a:	4a06      	ldr	r2, [pc, #24]	; (8086a94 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8086a7c:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 8086a7e:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 8086a80:	4b05      	ldr	r3, [pc, #20]	; (8086a98 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
 8086a82:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8086a84:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8086a88:	3014      	adds	r0, #20

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8086a8a:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
 8086a8c:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8086a8e:	6148      	str	r0, [r1, #20]
 8086a90:	4770      	bx	lr
 8086a92:	bf00      	nop
 8086a94:	08094fb8 	.word	0x08094fb8
 8086a98:	08094fbe 	.word	0x08094fbe

08086a9c <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
 8086a9c:	b510      	push	{r4, lr}
 8086a9e:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8086aa0:	f7fe fd86 	bl	80855b0 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 8086aa4:	4620      	mov	r0, r4
}
 8086aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
 8086aaa:	f00a bded 	b.w	8091688 <free>

08086aae <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
 8086aae:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8086ab0:	21ac      	movs	r1, #172	; 0xac
 8086ab2:	2001      	movs	r0, #1
 8086ab4:	f00c fc30 	bl	8093318 <calloc>

    if( ctx != NULL )
 8086ab8:	4604      	mov	r4, r0
 8086aba:	b118      	cbz	r0, 8086ac4 <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 8086abc:	2200      	movs	r2, #0
 8086abe:	4611      	mov	r1, r2
 8086ac0:	f7fd fd88 	bl	80845d4 <mbedtls_rsa_init>

    return( ctx );
}
 8086ac4:	4620      	mov	r0, r4
 8086ac6:	bd10      	pop	{r4, pc}

08086ac8 <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
 8086ac8:	f7fd bdea 	b.w	80846a0 <mbedtls_rsa_check_pub_priv>

08086acc <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
 8086acc:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 8086ace:	f7fd fd8e 	bl	80845ee <mbedtls_rsa_get_len>
}
 8086ad2:	00c0      	lsls	r0, r0, #3
 8086ad4:	bd08      	pop	{r3, pc}
	...

08086ad8 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8086ad8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086adc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8086ae0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8086ae4:	4604      	mov	r4, r0
 8086ae6:	4688      	mov	r8, r1
 8086ae8:	4617      	mov	r7, r2
 8086aea:	4699      	mov	r9, r3
 8086aec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8086aee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 8086af0:	f7fd fd7d 	bl	80845ee <mbedtls_rsa_get_len>

    if( *olen > osize )
 8086af4:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 8086af6:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
 8086afa:	d80d      	bhi.n	8086b18 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 8086afc:	4632      	mov	r2, r6
 8086afe:	4629      	mov	r1, r5
 8086b00:	4620      	mov	r0, r4
 8086b02:	2300      	movs	r3, #0
 8086b04:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8086b08:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8086b0c:	970a      	str	r7, [sp, #40]	; 0x28
}
 8086b0e:	b001      	add	sp, #4
 8086b10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 8086b14:	f7fe b8e0 	b.w	8084cd8 <mbedtls_rsa_pkcs1_encrypt>
}
 8086b18:	4801      	ldr	r0, [pc, #4]	; (8086b20 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 8086b1a:	b001      	add	sp, #4
 8086b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086b20:	ffffbc00 	.word	0xffffbc00

08086b24 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8086b24:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086b28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8086b2a:	4693      	mov	fp, r2
 8086b2c:	4604      	mov	r4, r0
 8086b2e:	4688      	mov	r8, r1
 8086b30:	4699      	mov	r9, r3
 8086b32:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8086b36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8086b38:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 8086b3a:	f7fd fd58 	bl	80845ee <mbedtls_rsa_get_len>
 8086b3e:	4558      	cmp	r0, fp
 8086b40:	d10f      	bne.n	8086b62 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 8086b42:	4632      	mov	r2, r6
 8086b44:	4629      	mov	r1, r5
 8086b46:	4620      	mov	r0, r4
 8086b48:	2301      	movs	r3, #1
 8086b4a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8086b4e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8086b52:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8086b56:	970a      	str	r7, [sp, #40]	; 0x28
}
 8086b58:	b001      	add	sp, #4
 8086b5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 8086b5e:	f7fe ba3d 	b.w	8084fdc <mbedtls_rsa_pkcs1_decrypt>
}
 8086b62:	4802      	ldr	r0, [pc, #8]	; (8086b6c <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 8086b64:	b001      	add	sp, #4
 8086b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086b6a:	bf00      	nop
 8086b6c:	ffffbf80 	.word	0xffffbf80

08086b70 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8086b70:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086b74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8086b78:	460f      	mov	r7, r1
 8086b7a:	4691      	mov	r9, r2
 8086b7c:	4698      	mov	r8, r3
 8086b7e:	4604      	mov	r4, r0
 8086b80:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8086b84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8086b86:	9e0d      	ldr	r6, [sp, #52]	; 0x34
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 8086b88:	f7fd fd31 	bl	80845ee <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 8086b8c:	4632      	mov	r2, r6
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 8086b8e:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 8086b92:	4629      	mov	r1, r5
 8086b94:	4620      	mov	r0, r4
 8086b96:	2301      	movs	r3, #1
 8086b98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8086b9c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8086ba0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8086ba4:	970a      	str	r7, [sp, #40]	; 0x28
}
 8086ba6:	b001      	add	sp, #4
 8086ba8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 8086bac:	f7fe bb66 	b.w	808527c <mbedtls_rsa_pkcs1_sign>

08086bb0 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 8086bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086bb4:	b085      	sub	sp, #20
 8086bb6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8086bb8:	4606      	mov	r6, r0
 8086bba:	460f      	mov	r7, r1
 8086bbc:	4691      	mov	r9, r2
 8086bbe:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8086bc0:	f7fd fd15 	bl	80845ee <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 8086bc4:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8086bc6:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 8086bc8:	d810      	bhi.n	8086bec <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 8086bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8086bcc:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8086bd0:	9303      	str	r3, [sp, #12]
 8086bd2:	2300      	movs	r3, #0
 8086bd4:	461a      	mov	r2, r3
 8086bd6:	4619      	mov	r1, r3
 8086bd8:	4630      	mov	r0, r6
 8086bda:	f7fe fcc7 	bl	808556c <mbedtls_rsa_pkcs1_verify>
 8086bde:	b930      	cbnz	r0, 8086bee <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
 8086be0:	f5a0 5064 	sub.w	r0, r0, #14592	; 0x3900
 8086be4:	42a5      	cmp	r5, r4
 8086be6:	bf28      	it	cs
 8086be8:	2000      	movcs	r0, #0
 8086bea:	e000      	b.n	8086bee <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8086bec:	4801      	ldr	r0, [pc, #4]	; (8086bf4 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
 8086bee:	b005      	add	sp, #20
 8086bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086bf4:	ffffbc80 	.word	0xffffbc80

08086bf8 <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 8086bf8:	4b05      	ldr	r3, [pc, #20]	; (8086c10 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
 8086bfa:	681a      	ldr	r2, [r3, #0]
 8086bfc:	b11a      	cbz	r2, 8086c06 <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
 8086bfe:	4282      	cmp	r2, r0
 8086c00:	d003      	beq.n	8086c0a <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
 8086c02:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 8086c04:	e7f9      	b.n	8086bfa <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
 8086c06:	4610      	mov	r0, r2
 8086c08:	4770      	bx	lr
 8086c0a:	4618      	mov	r0, r3
}
 8086c0c:	4770      	bx	lr
 8086c0e:	bf00      	nop
 8086c10:	080950b8 	.word	0x080950b8

08086c14 <mbedtls_ssl_list_ciphersuites>:
                            sizeof( ciphersuite_definitions[0]  )
static int supported_ciphersuites[MAX_CIPHERSUITES];
static int supported_init = 0;

const int *mbedtls_ssl_list_ciphersuites( void )
{
 8086c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
 8086c16:	4b0d      	ldr	r3, [pc, #52]	; (8086c4c <mbedtls_ssl_list_ciphersuites+0x38>)
 8086c18:	681a      	ldr	r2, [r3, #0]
 8086c1a:	461c      	mov	r4, r3
 8086c1c:	b9a2      	cbnz	r2, 8086c48 <mbedtls_ssl_list_ciphersuites+0x34>
 8086c1e:	490c      	ldr	r1, [pc, #48]	; (8086c50 <mbedtls_ssl_list_ciphersuites+0x3c>)
 8086c20:	4e0c      	ldr	r6, [pc, #48]	; (8086c54 <mbedtls_ssl_list_ciphersuites+0x40>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 8086c22:	f101 0718 	add.w	r7, r1, #24
 8086c26:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8086c2a:	b14d      	cbz	r5, 8086c40 <mbedtls_ssl_list_ciphersuites+0x2c>
 8086c2c:	42b9      	cmp	r1, r7
 8086c2e:	d207      	bcs.n	8086c40 <mbedtls_ssl_list_ciphersuites+0x2c>
#if defined(MBEDTLS_REMOVE_ARC4_CIPHERSUITES)
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
                cs_info->cipher != MBEDTLS_CIPHER_ARC4_128 )
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
 8086c30:	4628      	mov	r0, r5
 8086c32:	f7ff ffe1 	bl	8086bf8 <mbedtls_ssl_ciphersuite_from_id>
 8086c36:	2800      	cmp	r0, #0
 8086c38:	d0f5      	beq.n	8086c26 <mbedtls_ssl_list_ciphersuites+0x12>
#endif
                *(q++) = *p;
 8086c3a:	600d      	str	r5, [r1, #0]
 8086c3c:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
 8086c3e:	e7f2      	b.n	8086c26 <mbedtls_ssl_list_ciphersuites+0x12>
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
#endif
                *(q++) = *p;
        }
        *q = 0;
 8086c40:	2300      	movs	r3, #0
 8086c42:	600b      	str	r3, [r1, #0]

        supported_init = 1;
 8086c44:	2301      	movs	r3, #1
 8086c46:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
 8086c48:	4801      	ldr	r0, [pc, #4]	; (8086c50 <mbedtls_ssl_list_ciphersuites+0x3c>)
 8086c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8086c4c:	20000510 	.word	0x20000510
 8086c50:	20000514 	.word	0x20000514
 8086c54:	08095194 	.word	0x08095194

08086c58 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 8086c58:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 8086c5a:	b530      	push	{r4, r5, lr}
    *res = 0;
 8086c5c:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8086c5e:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8086c60:	b189      	cbz	r1, 8086c86 <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 8086c62:	6803      	ldr	r3, [r0, #0]
 8086c64:	781b      	ldrb	r3, [r3, #0]
 8086c66:	3b30      	subs	r3, #48	; 0x30
 8086c68:	2b09      	cmp	r3, #9
 8086c6a:	d80e      	bhi.n	8086c8a <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8086c6c:	6813      	ldr	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8086c6e:	3901      	subs	r1, #1
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8086c70:	436b      	muls	r3, r5
 8086c72:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
 8086c74:	6803      	ldr	r3, [r0, #0]
 8086c76:	1c5c      	adds	r4, r3, #1
 8086c78:	6004      	str	r4, [r0, #0]
 8086c7a:	781b      	ldrb	r3, [r3, #0]
 8086c7c:	6814      	ldr	r4, [r2, #0]
 8086c7e:	3b30      	subs	r3, #48	; 0x30
 8086c80:	4423      	add	r3, r4
 8086c82:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8086c84:	e7ec      	b.n	8086c60 <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 8086c86:	4608      	mov	r0, r1
 8086c88:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8086c8a:	4801      	ldr	r0, [pc, #4]	; (8086c90 <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
 8086c8c:	bd30      	pop	{r4, r5, pc}
 8086c8e:	bf00      	nop
 8086c90:	ffffdc00 	.word	0xffffdc00

08086c94 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8086c94:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
 8086c96:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8086c98:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
 8086c9a:	1aca      	subs	r2, r1, r3
 8086c9c:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8086c9e:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
 8086ca0:	dd17      	ble.n	8086cd2 <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 8086ca2:	781a      	ldrb	r2, [r3, #0]
 8086ca4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8086ca8:	2a02      	cmp	r2, #2
 8086caa:	d114      	bne.n	8086cd6 <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 8086cac:	1c5a      	adds	r2, r3, #1
 8086cae:	6002      	str	r2, [r0, #0]
 8086cb0:	462a      	mov	r2, r5
 8086cb2:	781b      	ldrb	r3, [r3, #0]
 8086cb4:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 8086cb8:	f7fd f862 	bl	8083d80 <mbedtls_asn1_get_len>
 8086cbc:	b110      	cbz	r0, 8086cc4 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 8086cbe:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 8086cc2:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
 8086cc4:	6823      	ldr	r3, [r4, #0]
 8086cc6:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 8086cc8:	6822      	ldr	r2, [r4, #0]
 8086cca:	686b      	ldr	r3, [r5, #4]
 8086ccc:	4413      	add	r3, r2
 8086cce:	6023      	str	r3, [r4, #0]

    return( 0 );
 8086cd0:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086cd2:	4802      	ldr	r0, [pc, #8]	; (8086cdc <mbedtls_x509_get_serial+0x48>)
 8086cd4:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8086cd6:	4802      	ldr	r0, [pc, #8]	; (8086ce0 <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
 8086cd8:	bd38      	pop	{r3, r4, r5, pc}
 8086cda:	bf00      	nop
 8086cdc:	ffffdd20 	.word	0xffffdd20
 8086ce0:	ffffdd1e 	.word	0xffffdd1e

08086ce4 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 8086ce4:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 8086ce6:	f7fd f976 	bl	8083fd6 <mbedtls_asn1_get_alg>
 8086cea:	b108      	cbz	r0, 8086cf0 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 8086cec:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
 8086cf0:	bd08      	pop	{r3, pc}
	...

08086cf4 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 8086cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8086cf8:	4604      	mov	r4, r0
 8086cfa:	460f      	mov	r7, r1
 8086cfc:	4691      	mov	r9, r2
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8086cfe:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8086de0 <mbedtls_x509_get_name+0xec>
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 8086d02:	2331      	movs	r3, #49	; 0x31
 8086d04:	466a      	mov	r2, sp
 8086d06:	4639      	mov	r1, r7
 8086d08:	4620      	mov	r0, r4
 8086d0a:	f7fd f88b 	bl	8083e24 <mbedtls_asn1_get_tag>
 8086d0e:	b110      	cbz	r0, 8086d16 <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8086d10:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 8086d14:	e05a      	b.n	8086dcc <mbedtls_x509_get_name+0xd8>

        end_set  = *p + set_len;
 8086d16:	464d      	mov	r5, r9
 8086d18:	6826      	ldr	r6, [r4, #0]
 8086d1a:	9b00      	ldr	r3, [sp, #0]
 8086d1c:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086d1e:	2330      	movs	r3, #48	; 0x30
 8086d20:	aa01      	add	r2, sp, #4
 8086d22:	4631      	mov	r1, r6
 8086d24:	4620      	mov	r0, r4
 8086d26:	f7fd f87d 	bl	8083e24 <mbedtls_asn1_get_tag>
 8086d2a:	bb50      	cbnz	r0, 8086d82 <mbedtls_x509_get_name+0x8e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    if( ( end - *p ) < 1 )
 8086d2c:	6823      	ldr	r3, [r4, #0]
 8086d2e:	1af2      	subs	r2, r6, r3
 8086d30:	2a00      	cmp	r2, #0
 8086d32:	dc01      	bgt.n	8086d38 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086d34:	4827      	ldr	r0, [pc, #156]	; (8086dd4 <mbedtls_x509_get_name+0xe0>)
 8086d36:	e049      	b.n	8086dcc <mbedtls_x509_get_name+0xd8>

    oid = &cur->oid;
    oid->tag = **p;
 8086d38:	462a      	mov	r2, r5
 8086d3a:	781b      	ldrb	r3, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8086d3c:	4631      	mov	r1, r6
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
    oid->tag = **p;
 8086d3e:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8086d42:	4620      	mov	r0, r4
 8086d44:	2306      	movs	r3, #6
 8086d46:	f7fd f86d 	bl	8083e24 <mbedtls_asn1_get_tag>
 8086d4a:	b9d0      	cbnz	r0, 8086d82 <mbedtls_x509_get_name+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 8086d4c:	6823      	ldr	r3, [r4, #0]
    *p += oid->len;
 8086d4e:	6869      	ldr	r1, [r5, #4]
    oid->tag = **p;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 8086d50:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
 8086d52:	6820      	ldr	r0, [r4, #0]
 8086d54:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
 8086d56:	1af2      	subs	r2, r6, r3
 8086d58:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
 8086d5a:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
 8086d5c:	ddea      	ble.n	8086d34 <mbedtls_x509_get_name+0x40>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8086d5e:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8086d60:	2a1e      	cmp	r2, #30
 8086d62:	d81a      	bhi.n	8086d9a <mbedtls_x509_get_name+0xa6>
 8086d64:	fa28 f202 	lsr.w	r2, r8, r2
 8086d68:	07d2      	lsls	r2, r2, #31
 8086d6a:	d516      	bpl.n	8086d9a <mbedtls_x509_get_name+0xa6>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 8086d6c:	3301      	adds	r3, #1
 8086d6e:	6023      	str	r3, [r4, #0]
 8086d70:	5c43      	ldrb	r3, [r0, r1]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8086d72:	f105 0210 	add.w	r2, r5, #16
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 8086d76:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8086d78:	4631      	mov	r1, r6
 8086d7a:	4620      	mov	r0, r4
 8086d7c:	f7fd f800 	bl	8083d80 <mbedtls_asn1_get_len>
 8086d80:	b118      	cbz	r0, 8086d8a <mbedtls_x509_get_name+0x96>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8086d82:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8086d86:	b150      	cbz	r0, 8086d9e <mbedtls_x509_get_name+0xaa>
 8086d88:	e020      	b.n	8086dcc <mbedtls_x509_get_name+0xd8>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
 8086d8a:	6823      	ldr	r3, [r4, #0]
 8086d8c:	616b      	str	r3, [r5, #20]
    *p += val->len;
 8086d8e:	6822      	ldr	r2, [r4, #0]
 8086d90:	692b      	ldr	r3, [r5, #16]
 8086d92:	4413      	add	r3, r2
 8086d94:	6023      	str	r3, [r4, #0]

    cur->next = NULL;
 8086d96:	61a8      	str	r0, [r5, #24]
 8086d98:	e001      	b.n	8086d9e <mbedtls_x509_get_name+0xaa>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8086d9a:	480f      	ldr	r0, [pc, #60]	; (8086dd8 <mbedtls_x509_get_name+0xe4>)
 8086d9c:	e016      	b.n	8086dcc <mbedtls_x509_get_name+0xd8>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
 8086d9e:	6823      	ldr	r3, [r4, #0]
 8086da0:	429e      	cmp	r6, r3
 8086da2:	d008      	beq.n	8086db6 <mbedtls_x509_get_name+0xc2>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 8086da4:	2001      	movs	r0, #1
 8086da6:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8086da8:	2120      	movs	r1, #32
 8086daa:	f00c fab5 	bl	8093318 <calloc>
 8086dae:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
 8086db0:	b158      	cbz	r0, 8086dca <mbedtls_x509_get_name+0xd6>
 8086db2:	4605      	mov	r5, r0
 8086db4:	e7b3      	b.n	8086d1e <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 8086db6:	42b7      	cmp	r7, r6
 8086db8:	d008      	beq.n	8086dcc <mbedtls_x509_get_name+0xd8>
            return( 0 );

        cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8086dba:	2120      	movs	r1, #32
 8086dbc:	2001      	movs	r0, #1
 8086dbe:	f00c faab 	bl	8093318 <calloc>
 8086dc2:	4681      	mov	r9, r0
 8086dc4:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
 8086dc6:	2800      	cmp	r0, #0
 8086dc8:	d19b      	bne.n	8086d02 <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8086dca:	4804      	ldr	r0, [pc, #16]	; (8086ddc <mbedtls_x509_get_name+0xe8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
 8086dcc:	b003      	add	sp, #12
 8086dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086dd2:	bf00      	nop
 8086dd4:	ffffdc20 	.word	0xffffdc20
 8086dd8:	ffffdc1e 	.word	0xffffdc1e
 8086ddc:	ffffd780 	.word	0xffffd780
 8086de0:	50581008 	.word	0x50581008

08086de4 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8086de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 8086de6:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8086de8:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 8086dea:	1aca      	subs	r2, r1, r3
 8086dec:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8086dee:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 8086df0:	f340 80a1 	ble.w	8086f36 <mbedtls_x509_get_time+0x152>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 8086df4:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 8086df6:	2a17      	cmp	r2, #23
 8086df8:	d004      	beq.n	8086e04 <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 8086dfa:	2a18      	cmp	r2, #24
 8086dfc:	f040 809d 	bne.w	8086f3a <mbedtls_x509_get_time+0x156>
        year_len = 4;
 8086e00:	2704      	movs	r7, #4
 8086e02:	e000      	b.n	8086e06 <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
 8086e04:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 8086e06:	3301      	adds	r3, #1
 8086e08:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 8086e0a:	aa01      	add	r2, sp, #4
 8086e0c:	4628      	mov	r0, r5
 8086e0e:	f7fc ffb7 	bl	8083d80 <mbedtls_asn1_get_len>

    if( ret != 0 )
 8086e12:	b110      	cbz	r0, 8086e1a <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8086e14:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
 8086e18:	e092      	b.n	8086f40 <mbedtls_x509_get_time+0x15c>

    return x509_parse_time( p, len, year_len, tm );
 8086e1a:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 8086e1c:	f107 0308 	add.w	r3, r7, #8
 8086e20:	429e      	cmp	r6, r3
 8086e22:	f0c0 808c 	bcc.w	8086f3e <mbedtls_x509_get_time+0x15a>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 8086e26:	4622      	mov	r2, r4
 8086e28:	4639      	mov	r1, r7
 8086e2a:	4628      	mov	r0, r5
 8086e2c:	f7ff ff14 	bl	8086c58 <_ZL14x509_parse_intPPhjPi>
 8086e30:	2800      	cmp	r0, #0
 8086e32:	f040 8085 	bne.w	8086f40 <mbedtls_x509_get_time+0x15c>
    if ( 2 == yearlen )
 8086e36:	2f02      	cmp	r7, #2
 8086e38:	d108      	bne.n	8086e4c <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
 8086e3a:	6823      	ldr	r3, [r4, #0]
 8086e3c:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 8086e3e:	bfdc      	itt	le
 8086e40:	3364      	addle	r3, #100	; 0x64
 8086e42:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
 8086e44:	6823      	ldr	r3, [r4, #0]
 8086e46:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8086e4a:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 8086e4c:	1d22      	adds	r2, r4, #4
 8086e4e:	2102      	movs	r1, #2
 8086e50:	4628      	mov	r0, r5
 8086e52:	f7ff ff01 	bl	8086c58 <_ZL14x509_parse_intPPhjPi>
 8086e56:	2800      	cmp	r0, #0
 8086e58:	d172      	bne.n	8086f40 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 8086e5a:	f104 0208 	add.w	r2, r4, #8
 8086e5e:	2102      	movs	r1, #2
 8086e60:	4628      	mov	r0, r5
 8086e62:	f7ff fef9 	bl	8086c58 <_ZL14x509_parse_intPPhjPi>
 8086e66:	2800      	cmp	r0, #0
 8086e68:	d16a      	bne.n	8086f40 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 8086e6a:	f104 020c 	add.w	r2, r4, #12
 8086e6e:	2102      	movs	r1, #2
 8086e70:	4628      	mov	r0, r5
 8086e72:	f7ff fef1 	bl	8086c58 <_ZL14x509_parse_intPPhjPi>
 8086e76:	2800      	cmp	r0, #0
 8086e78:	d162      	bne.n	8086f40 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 8086e7a:	f104 0210 	add.w	r2, r4, #16
 8086e7e:	2102      	movs	r1, #2
 8086e80:	4628      	mov	r0, r5
 8086e82:	f7ff fee9 	bl	8086c58 <_ZL14x509_parse_intPPhjPi>
 8086e86:	2800      	cmp	r0, #0
 8086e88:	d15a      	bne.n	8086f40 <mbedtls_x509_get_time+0x15c>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
 8086e8a:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 8086e8c:	f1a6 0308 	sub.w	r3, r6, #8
 8086e90:	2b01      	cmp	r3, #1
 8086e92:	d954      	bls.n	8086f3e <mbedtls_x509_get_time+0x15a>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 8086e94:	f104 0214 	add.w	r2, r4, #20
 8086e98:	2102      	movs	r1, #2
 8086e9a:	4628      	mov	r0, r5
 8086e9c:	f7ff fedc 	bl	8086c58 <_ZL14x509_parse_intPPhjPi>
 8086ea0:	2800      	cmp	r0, #0
 8086ea2:	d14d      	bne.n	8086f40 <mbedtls_x509_get_time+0x15c>
        len -= 2;
 8086ea4:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 8086ea8:	2b01      	cmp	r3, #1
 8086eaa:	d107      	bne.n	8086ebc <mbedtls_x509_get_time+0xd8>
 8086eac:	682b      	ldr	r3, [r5, #0]
 8086eae:	781a      	ldrb	r2, [r3, #0]
 8086eb0:	2a5a      	cmp	r2, #90	; 0x5a
 8086eb2:	d144      	bne.n	8086f3e <mbedtls_x509_get_time+0x15a>
    {
        (*p)++;
 8086eb4:	3301      	adds	r3, #1
 8086eb6:	602b      	str	r3, [r5, #0]
        len--;
 8086eb8:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 8086ebc:	2b00      	cmp	r3, #0
 8086ebe:	d13e      	bne.n	8086f3e <mbedtls_x509_get_time+0x15a>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 8086ec0:	f242 720f 	movw	r2, #9999	; 0x270f
 8086ec4:	6823      	ldr	r3, [r4, #0]
 8086ec6:	4293      	cmp	r3, r2
 8086ec8:	d839      	bhi.n	8086f3e <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 23,   t->hour );
 8086eca:	68e2      	ldr	r2, [r4, #12]
 8086ecc:	2a17      	cmp	r2, #23
 8086ece:	d836      	bhi.n	8086f3e <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->min  );
 8086ed0:	6922      	ldr	r2, [r4, #16]
 8086ed2:	2a3b      	cmp	r2, #59	; 0x3b
 8086ed4:	d833      	bhi.n	8086f3e <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->sec  );
 8086ed6:	6962      	ldr	r2, [r4, #20]
 8086ed8:	2a3b      	cmp	r2, #59	; 0x3b
 8086eda:	d830      	bhi.n	8086f3e <mbedtls_x509_get_time+0x15a>
 8086edc:	6861      	ldr	r1, [r4, #4]
 8086ede:	290c      	cmp	r1, #12
 8086ee0:	d82d      	bhi.n	8086f3e <mbedtls_x509_get_time+0x15a>
 8086ee2:	2201      	movs	r2, #1
 8086ee4:	408a      	lsls	r2, r1
 8086ee6:	f241 51aa 	movw	r1, #5546	; 0x15aa
 8086eea:	4011      	ands	r1, r2
 8086eec:	b9b9      	cbnz	r1, 8086f1e <mbedtls_x509_get_time+0x13a>
 8086eee:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 8086ef2:	d116      	bne.n	8086f22 <mbedtls_x509_get_time+0x13e>
 8086ef4:	0751      	lsls	r1, r2, #29
 8086ef6:	d522      	bpl.n	8086f3e <mbedtls_x509_get_time+0x15a>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 8086ef8:	079a      	lsls	r2, r3, #30
 8086efa:	d105      	bne.n	8086f08 <mbedtls_x509_get_time+0x124>
 8086efc:	2164      	movs	r1, #100	; 0x64
 8086efe:	fb93 f2f1 	sdiv	r2, r3, r1
 8086f02:	fb01 3212 	mls	r2, r1, r2, r3
 8086f06:	b972      	cbnz	r2, 8086f26 <mbedtls_x509_get_time+0x142>
 8086f08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8086f0c:	fb93 f2f1 	sdiv	r2, r3, r1
 8086f10:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
 8086f14:	2b00      	cmp	r3, #0
 8086f16:	bf0c      	ite	eq
 8086f18:	231d      	moveq	r3, #29
 8086f1a:	231c      	movne	r3, #28
 8086f1c:	e004      	b.n	8086f28 <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 8086f1e:	231f      	movs	r3, #31
 8086f20:	e002      	b.n	8086f28 <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
 8086f22:	231e      	movs	r3, #30
 8086f24:	e000      	b.n	8086f28 <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
 8086f26:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
 8086f28:	68a2      	ldr	r2, [r4, #8]
 8086f2a:	2a00      	cmp	r2, #0
 8086f2c:	dd07      	ble.n	8086f3e <mbedtls_x509_get_time+0x15a>
 8086f2e:	429a      	cmp	r2, r3
 8086f30:	dc05      	bgt.n	8086f3e <mbedtls_x509_get_time+0x15a>
    if ( 0 != len )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    CHECK( x509_date_is_valid( tm ) );

    return ( 0 );
 8086f32:	2000      	movs	r0, #0
 8086f34:	e004      	b.n	8086f40 <mbedtls_x509_get_time+0x15c>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086f36:	4803      	ldr	r0, [pc, #12]	; (8086f44 <mbedtls_x509_get_time+0x160>)
 8086f38:	e002      	b.n	8086f40 <mbedtls_x509_get_time+0x15c>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8086f3a:	4803      	ldr	r0, [pc, #12]	; (8086f48 <mbedtls_x509_get_time+0x164>)
 8086f3c:	e000      	b.n	8086f40 <mbedtls_x509_get_time+0x15c>

        tm->year += 1900;
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 8086f3e:	4803      	ldr	r0, [pc, #12]	; (8086f4c <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
 8086f40:	b003      	add	sp, #12
 8086f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086f44:	ffffdba0 	.word	0xffffdba0
 8086f48:	ffffdb9e 	.word	0xffffdb9e
 8086f4c:	ffffdc00 	.word	0xffffdc00

08086f50 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8086f50:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8086f52:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8086f54:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8086f56:	1aca      	subs	r2, r1, r3
 8086f58:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8086f5a:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8086f5c:	dd10      	ble.n	8086f80 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8086f5e:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 8086f60:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8086f62:	f7fc ffe8 	bl	8083f36 <mbedtls_asn1_get_bitstring_null>
 8086f66:	b110      	cbz	r0, 8086f6e <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 8086f68:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
 8086f6c:	e009      	b.n	8086f82 <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
 8086f6e:	9b01      	ldr	r3, [sp, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
 8086f70:	602e      	str	r6, [r5, #0]
    sig->len = len;
 8086f72:	606b      	str	r3, [r5, #4]
    sig->p = *p;
 8086f74:	6822      	ldr	r2, [r4, #0]
 8086f76:	60aa      	str	r2, [r5, #8]

    *p += len;
 8086f78:	6822      	ldr	r2, [r4, #0]
 8086f7a:	4413      	add	r3, r2
 8086f7c:	6023      	str	r3, [r4, #0]

    return( 0 );
 8086f7e:	e000      	b.n	8086f82 <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086f80:	4801      	ldr	r0, [pc, #4]	; (8086f88 <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
 8086f82:	b002      	add	sp, #8
 8086f84:	bd70      	pop	{r4, r5, r6, pc}
 8086f86:	bf00      	nop
 8086f88:	ffffdb20 	.word	0xffffdb20

08086f8c <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 8086f8c:	b510      	push	{r4, lr}
 8086f8e:	460c      	mov	r4, r1
 8086f90:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 8086f92:	9a02      	ldr	r2, [sp, #8]
 8086f94:	6812      	ldr	r2, [r2, #0]
 8086f96:	b982      	cbnz	r2, 8086fba <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 8086f98:	461a      	mov	r2, r3
 8086f9a:	f7fe fbb1 	bl	8085700 <mbedtls_oid_get_sig_alg>
 8086f9e:	b110      	cbz	r0, 8086fa6 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 8086fa0:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 8086fa4:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 8086fa6:	6823      	ldr	r3, [r4, #0]
 8086fa8:	2b05      	cmp	r3, #5
 8086faa:	d000      	beq.n	8086fae <mbedtls_x509_get_sig_alg+0x22>
 8086fac:	b93b      	cbnz	r3, 8086fbe <mbedtls_x509_get_sig_alg+0x32>
 8086fae:	6863      	ldr	r3, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
 8086fb0:	4804      	ldr	r0, [pc, #16]	; (8086fc4 <mbedtls_x509_get_sig_alg+0x38>)
 8086fb2:	2b00      	cmp	r3, #0
 8086fb4:	bf08      	it	eq
 8086fb6:	2000      	moveq	r0, #0
 8086fb8:	bd10      	pop	{r4, pc}
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8086fba:	4803      	ldr	r0, [pc, #12]	; (8086fc8 <mbedtls_x509_get_sig_alg+0x3c>)
 8086fbc:	bd10      	pop	{r4, pc}
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 8086fbe:	4801      	ldr	r0, [pc, #4]	; (8086fc4 <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
 8086fc0:	bd10      	pop	{r4, pc}
 8086fc2:	bf00      	nop
 8086fc4:	ffffdd00 	.word	0xffffdd00
 8086fc8:	ffffd800 	.word	0xffffd800

08086fcc <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 8086fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086fce:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 8086fd0:	6802      	ldr	r2, [r0, #0]
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 8086fd2:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( *p == end )
 8086fd4:	428a      	cmp	r2, r1
 8086fd6:	d01c      	beq.n	8087012 <mbedtls_x509_get_ext+0x46>
        return( 0 );

    ext->tag = **p;
 8086fd8:	7815      	ldrb	r5, [r2, #0]
 8086fda:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 8086fdc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    size_t len;

    if( *p == end )
        return( 0 );

    ext->tag = **p;
 8086fe0:	f842 5b04 	str.w	r5, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 8086fe4:	f7fc ff1e 	bl	8083e24 <mbedtls_asn1_get_tag>
 8086fe8:	b9b0      	cbnz	r0, 8087018 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 8086fea:	6823      	ldr	r3, [r4, #0]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086fec:	aa01      	add	r2, sp, #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 8086fee:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 8086ff0:	6825      	ldr	r5, [r4, #0]
 8086ff2:	6873      	ldr	r3, [r6, #4]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086ff4:	4620      	mov	r0, r4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
    end = *p + ext->len;
 8086ff6:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086ff8:	4629      	mov	r1, r5
 8086ffa:	2330      	movs	r3, #48	; 0x30
 8086ffc:	f7fc ff12 	bl	8083e24 <mbedtls_asn1_get_tag>
 8087000:	b110      	cbz	r0, 8087008 <mbedtls_x509_get_ext+0x3c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8087002:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 8087006:	e007      	b.n	8087018 <mbedtls_x509_get_ext+0x4c>

    if( end != *p + len )
 8087008:	6822      	ldr	r2, [r4, #0]
 808700a:	9b01      	ldr	r3, [sp, #4]
 808700c:	4413      	add	r3, r2
 808700e:	429d      	cmp	r5, r3
 8087010:	d101      	bne.n	8087016 <mbedtls_x509_get_ext+0x4a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 8087012:	2000      	movs	r0, #0
 8087014:	e000      	b.n	8087018 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8087016:	4801      	ldr	r0, [pc, #4]	; (808701c <mbedtls_x509_get_ext+0x50>)

    return( 0 );
}
 8087018:	b002      	add	sp, #8
 808701a:	bd70      	pop	{r4, r5, r6, pc}
 808701c:	ffffda9a 	.word	0xffffda9a

08087020 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8087020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8087024:	460f      	mov	r7, r1
 8087026:	4691      	mov	r9, r2

    memset( s, 0, sizeof( s ) );

    name = dn;
    p = buf;
    n = size;
 8087028:	463d      	mov	r5, r7
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
 808702a:	464e      	mov	r6, r9
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 808702c:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 808702e:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8087032:	f10d 0808 	add.w	r8, sp, #8
 8087036:	f44f 7280 	mov.w	r2, #256	; 0x100
 808703a:	4651      	mov	r1, sl
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 808703c:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 808703e:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 8087040:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8087044:	f00c faab 	bl	809359e <memset>
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
 8087048:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
 808704a:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
 808704e:	2e00      	cmp	r6, #0
 8087050:	d057      	beq.n	8087102 <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
 8087052:	68b3      	ldr	r3, [r6, #8]
 8087054:	2b00      	cmp	r3, #0
 8087056:	d052      	beq.n	80870fe <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
 8087058:	454e      	cmp	r6, r9
 808705a:	d011      	beq.n	8087080 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 808705c:	4b2b      	ldr	r3, [pc, #172]	; (808710c <mbedtls_x509_dn_gets+0xec>)
 808705e:	492c      	ldr	r1, [pc, #176]	; (8087110 <mbedtls_x509_dn_gets+0xf0>)
 8087060:	4620      	mov	r0, r4
 8087062:	2a00      	cmp	r2, #0
 8087064:	bf14      	ite	ne
 8087066:	460a      	movne	r2, r1
 8087068:	461a      	moveq	r2, r3
 808706a:	4629      	mov	r1, r5
 808706c:	f00a fb34 	bl	80916d8 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8087070:	2800      	cmp	r0, #0
 8087072:	da01      	bge.n	8087078 <mbedtls_x509_dn_gets+0x58>
 8087074:	4827      	ldr	r0, [pc, #156]	; (8087114 <mbedtls_x509_dn_gets+0xf4>)
 8087076:	e045      	b.n	8087104 <mbedtls_x509_dn_gets+0xe4>
 8087078:	4285      	cmp	r5, r0
 808707a:	d9fb      	bls.n	8087074 <mbedtls_x509_dn_gets+0x54>
 808707c:	1a2d      	subs	r5, r5, r0
 808707e:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 8087080:	a901      	add	r1, sp, #4
 8087082:	4630      	mov	r0, r6
 8087084:	f7fe fae2 	bl	808564c <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
 8087088:	b930      	cbnz	r0, 8087098 <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 808708a:	9b01      	ldr	r3, [sp, #4]
 808708c:	4a22      	ldr	r2, [pc, #136]	; (8087118 <mbedtls_x509_dn_gets+0xf8>)
 808708e:	4629      	mov	r1, r5
 8087090:	4620      	mov	r0, r4
 8087092:	f00a fb21 	bl	80916d8 <snprintf>
 8087096:	e004      	b.n	80870a2 <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 8087098:	4a20      	ldr	r2, [pc, #128]	; (808711c <mbedtls_x509_dn_gets+0xfc>)
 808709a:	4629      	mov	r1, r5
 808709c:	4620      	mov	r0, r4
 808709e:	f00a fb1b 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80870a2:	2800      	cmp	r0, #0
 80870a4:	dbe6      	blt.n	8087074 <mbedtls_x509_dn_gets+0x54>
 80870a6:	4285      	cmp	r5, r0
 80870a8:	d9e4      	bls.n	8087074 <mbedtls_x509_dn_gets+0x54>
 80870aa:	1a2d      	subs	r5, r5, r0
 80870ac:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
 80870ae:	2300      	movs	r3, #0
 80870b0:	6932      	ldr	r2, [r6, #16]
 80870b2:	4293      	cmp	r3, r2
 80870b4:	d213      	bcs.n	80870de <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
 80870b6:	2bff      	cmp	r3, #255	; 0xff
 80870b8:	d011      	beq.n	80870de <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
 80870ba:	6972      	ldr	r2, [r6, #20]
 80870bc:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 80870be:	2a1f      	cmp	r2, #31
 80870c0:	d906      	bls.n	80870d0 <mbedtls_x509_dn_gets+0xb0>
 80870c2:	2a7f      	cmp	r2, #127	; 0x7f
 80870c4:	d004      	beq.n	80870d0 <mbedtls_x509_dn_gets+0xb0>
 80870c6:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 80870ca:	b2c9      	uxtb	r1, r1
 80870cc:	291e      	cmp	r1, #30
 80870ce:	d802      	bhi.n	80870d6 <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
 80870d0:	f808 a003 	strb.w	sl, [r8, r3]
 80870d4:	e001      	b.n	80870da <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
 80870d6:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
 80870da:	3301      	adds	r3, #1
 80870dc:	e7e8      	b.n	80870b0 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
 80870de:	2200      	movs	r2, #0
 80870e0:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 80870e4:	4629      	mov	r1, r5
 80870e6:	4643      	mov	r3, r8
 80870e8:	4a0d      	ldr	r2, [pc, #52]	; (8087120 <mbedtls_x509_dn_gets+0x100>)
 80870ea:	4620      	mov	r0, r4
 80870ec:	f00a faf4 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80870f0:	2800      	cmp	r0, #0
 80870f2:	dbbf      	blt.n	8087074 <mbedtls_x509_dn_gets+0x54>
 80870f4:	4285      	cmp	r5, r0
 80870f6:	d9bd      	bls.n	8087074 <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
 80870f8:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80870fa:	1a2d      	subs	r5, r5, r0
 80870fc:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
 80870fe:	69b6      	ldr	r6, [r6, #24]
 8087100:	e7a5      	b.n	808704e <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
 8087102:	1b78      	subs	r0, r7, r5
}
 8087104:	b042      	add	sp, #264	; 0x108
 8087106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808710a:	bf00      	nop
 808710c:	08095428 	.word	0x08095428
 8087110:	08095424 	.word	0x08095424
 8087114:	ffffd680 	.word	0xffffd680
 8087118:	0809542b 	.word	0x0809542b
 808711c:	0809542f 	.word	0x0809542f
 8087120:	0809585e 	.word	0x0809585e

08087124 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 8087124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087128:	4680      	mov	r8, r0
 808712a:	460f      	mov	r7, r1
 808712c:	4691      	mov	r9, r2
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
 808712e:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
 8087130:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8087132:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80871b0 <mbedtls_x509_serial_gets+0x8c>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 8087136:	2e21      	cmp	r6, #33	; 0x21
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8087138:	f8df b078 	ldr.w	fp, [pc, #120]	; 80871b4 <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 808713c:	bf28      	it	cs
 808713e:	261c      	movcs	r6, #28

    for( i = 0; i < nr; i++ )
 8087140:	2500      	movs	r5, #0
 8087142:	42b5      	cmp	r5, r6
 8087144:	d01c      	beq.n	8087180 <mbedtls_x509_serial_gets+0x5c>
 8087146:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 808714a:	b91d      	cbnz	r5, 8087154 <mbedtls_x509_serial_gets+0x30>
 808714c:	2e01      	cmp	r6, #1
 808714e:	d001      	beq.n	8087154 <mbedtls_x509_serial_gets+0x30>
 8087150:	781a      	ldrb	r2, [r3, #0]
 8087152:	b19a      	cbz	r2, 808717c <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8087154:	1e72      	subs	r2, r6, #1
 8087156:	4295      	cmp	r5, r2
 8087158:	bf34      	ite	cc
 808715a:	4652      	movcc	r2, sl
 808715c:	465a      	movcs	r2, fp
 808715e:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 8087160:	4621      	mov	r1, r4
 8087162:	9200      	str	r2, [sp, #0]
 8087164:	4640      	mov	r0, r8
 8087166:	4a0f      	ldr	r2, [pc, #60]	; (80871a4 <mbedtls_x509_serial_gets+0x80>)
 8087168:	f00a fab6 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808716c:	2800      	cmp	r0, #0
 808716e:	da01      	bge.n	8087174 <mbedtls_x509_serial_gets+0x50>
 8087170:	480d      	ldr	r0, [pc, #52]	; (80871a8 <mbedtls_x509_serial_gets+0x84>)
 8087172:	e014      	b.n	808719e <mbedtls_x509_serial_gets+0x7a>
 8087174:	4284      	cmp	r4, r0
 8087176:	d9fb      	bls.n	8087170 <mbedtls_x509_serial_gets+0x4c>
 8087178:	1a24      	subs	r4, r4, r0
 808717a:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
 808717c:	3501      	adds	r5, #1
 808717e:	e7e0      	b.n	8087142 <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
 8087180:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8087184:	429d      	cmp	r5, r3
 8087186:	d009      	beq.n	808719c <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 8087188:	4a08      	ldr	r2, [pc, #32]	; (80871ac <mbedtls_x509_serial_gets+0x88>)
 808718a:	4621      	mov	r1, r4
 808718c:	4640      	mov	r0, r8
 808718e:	f00a faa3 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087192:	2800      	cmp	r0, #0
 8087194:	dbec      	blt.n	8087170 <mbedtls_x509_serial_gets+0x4c>
 8087196:	4284      	cmp	r4, r0
 8087198:	d9ea      	bls.n	8087170 <mbedtls_x509_serial_gets+0x4c>
 808719a:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 808719c:	1b38      	subs	r0, r7, r4
}
 808719e:	b003      	add	sp, #12
 80871a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80871a4:	08095433 	.word	0x08095433
 80871a8:	ffffd680 	.word	0xffffd680
 80871ac:	0809543a 	.word	0x0809543a
 80871b0:	08097511 	.word	0x08097511
 80871b4:	0809457c 	.word	0x0809457c

080871b8 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80871b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80871ba:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80871bc:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80871be:	a902      	add	r1, sp, #8
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80871c0:	4605      	mov	r5, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80871c2:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 80871c6:	4610      	mov	r0, r2
 80871c8:	f7fe fa8e 	bl	80856e8 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 80871cc:	b128      	cbz	r0, 80871da <mbedtls_x509_sig_alg_gets+0x22>
        ret = mbedtls_snprintf( p, n, "???"  );
 80871ce:	4a0b      	ldr	r2, [pc, #44]	; (80871fc <mbedtls_x509_sig_alg_gets+0x44>)
 80871d0:	4621      	mov	r1, r4
 80871d2:	4628      	mov	r0, r5
 80871d4:	f00a fa80 	bl	80916d8 <snprintf>
 80871d8:	e005      	b.n	80871e6 <mbedtls_x509_sig_alg_gets+0x2e>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 80871da:	9b01      	ldr	r3, [sp, #4]
 80871dc:	4a08      	ldr	r2, [pc, #32]	; (8087200 <mbedtls_x509_sig_alg_gets+0x48>)
 80871de:	4621      	mov	r1, r4
 80871e0:	4628      	mov	r0, r5
 80871e2:	f00a fa79 	bl	80916d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80871e6:	2800      	cmp	r0, #0
 80871e8:	db04      	blt.n	80871f4 <mbedtls_x509_sig_alg_gets+0x3c>
 80871ea:	4b06      	ldr	r3, [pc, #24]	; (8087204 <mbedtls_x509_sig_alg_gets+0x4c>)
 80871ec:	4284      	cmp	r4, r0
 80871ee:	bf98      	it	ls
 80871f0:	4618      	movls	r0, r3
 80871f2:	e000      	b.n	80871f6 <mbedtls_x509_sig_alg_gets+0x3e>
 80871f4:	4803      	ldr	r0, [pc, #12]	; (8087204 <mbedtls_x509_sig_alg_gets+0x4c>)
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
 80871f6:	b003      	add	sp, #12
 80871f8:	bd30      	pop	{r4, r5, pc}
 80871fa:	bf00      	nop
 80871fc:	0809543f 	.word	0x0809543f
 8087200:	0809585e 	.word	0x0809585e
 8087204:	ffffd680 	.word	0xffffd680

08087208 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 8087208:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 808720a:	4613      	mov	r3, r2
 808720c:	4a06      	ldr	r2, [pc, #24]	; (8087228 <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 808720e:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 8087210:	f00a fa62 	bl	80916d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087214:	2800      	cmp	r0, #0
 8087216:	db05      	blt.n	8087224 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
 8087218:	4b04      	ldr	r3, [pc, #16]	; (808722c <mbedtls_x509_key_size_helper+0x24>)
 808721a:	4284      	cmp	r4, r0
 808721c:	bf94      	ite	ls
 808721e:	4618      	movls	r0, r3
 8087220:	2000      	movhi	r0, #0
 8087222:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087224:	4801      	ldr	r0, [pc, #4]	; (808722c <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
 8087226:	bd10      	pop	{r4, pc}
 8087228:	08095443 	.word	0x08095443
 808722c:	ffffd680 	.word	0xffffd680

08087230 <mbedtls_x509_time_is_past>:
 8087230:	2000      	movs	r0, #0
 8087232:	4770      	bx	lr

08087234 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 8087234:	2000      	movs	r0, #0
 8087236:	4770      	bx	lr

08087238 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 8087238:	b5f0      	push	{r4, r5, r6, r7, lr}
 808723a:	460c      	mov	r4, r1
 808723c:	4615      	mov	r5, r2
 808723e:	b08f      	sub	sp, #60	; 0x3c
 8087240:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 8087242:	a80b      	add	r0, sp, #44	; 0x2c
 8087244:	f004 fc14 	bl	808ba70 <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8087248:	2330      	movs	r3, #48	; 0x30
 808724a:	aa09      	add	r2, sp, #36	; 0x24
 808724c:	1961      	adds	r1, r4, r5
 808724e:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
 8087250:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8087252:	f7fc fde7 	bl	8083e24 <mbedtls_asn1_get_tag>
 8087256:	b940      	cbnz	r0, 808726a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8087258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808725a:	9e0a      	ldr	r6, [sp, #40]	; 0x28

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 808725c:	aa08      	add	r2, sp, #32
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 808725e:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8087260:	4631      	mov	r1, r6
 8087262:	a80a      	add	r0, sp, #40	; 0x28
 8087264:	f7fc fe0b 	bl	8083e7e <mbedtls_asn1_get_int>
 8087268:	b110      	cbz	r0, 8087270 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 808726a:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
 808726e:	e0d4      	b.n	808741a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
 8087270:	9d08      	ldr	r5, [sp, #32]
 8087272:	b9dd      	cbnz	r5, 80872ac <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8087274:	2302      	movs	r3, #2
 8087276:	aa09      	add	r2, sp, #36	; 0x24
 8087278:	4631      	mov	r1, r6
 808727a:	a80a      	add	r0, sp, #40	; 0x28
 808727c:	f7fc fdd2 	bl	8083e24 <mbedtls_asn1_get_tag>
 8087280:	4604      	mov	r4, r0
 8087282:	2800      	cmp	r0, #0
 8087284:	f040 80c5 	bne.w	8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8087288:	9006      	str	r0, [sp, #24]
 808728a:	9005      	str	r0, [sp, #20]
 808728c:	9004      	str	r0, [sp, #16]
 808728e:	9003      	str	r0, [sp, #12]
 8087290:	9002      	str	r0, [sp, #8]
 8087292:	9001      	str	r0, [sp, #4]
 8087294:	9000      	str	r0, [sp, #0]
 8087296:	4603      	mov	r3, r0
 8087298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808729a:	990a      	ldr	r1, [sp, #40]	; 0x28
 808729c:	4638      	mov	r0, r7
 808729e:	f7fd f8af 	bl	8084400 <mbedtls_rsa_import_raw>
 80872a2:	4604      	mov	r4, r0
 80872a4:	2800      	cmp	r0, #0
 80872a6:	f040 80b4 	bne.w	8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80872aa:	e001      	b.n	80872b0 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 80872ac:	4d5c      	ldr	r5, [pc, #368]	; (8087420 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
 80872ae:	e0b4      	b.n	808741a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80872b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80872b2:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80872b4:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80872b6:	4413      	add	r3, r2
 80872b8:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80872ba:	aa09      	add	r2, sp, #36	; 0x24
 80872bc:	2302      	movs	r3, #2
 80872be:	a80a      	add	r0, sp, #40	; 0x28
 80872c0:	f7fc fdb0 	bl	8083e24 <mbedtls_asn1_get_tag>
 80872c4:	4604      	mov	r4, r0
 80872c6:	2800      	cmp	r0, #0
 80872c8:	f040 80a3 	bne.w	8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80872cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80872ce:	9404      	str	r4, [sp, #16]
 80872d0:	9306      	str	r3, [sp, #24]
 80872d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80872d4:	9403      	str	r4, [sp, #12]
 80872d6:	9305      	str	r3, [sp, #20]
 80872d8:	9402      	str	r4, [sp, #8]
 80872da:	9401      	str	r4, [sp, #4]
 80872dc:	9400      	str	r4, [sp, #0]
 80872de:	4623      	mov	r3, r4
 80872e0:	4622      	mov	r2, r4
 80872e2:	4621      	mov	r1, r4
 80872e4:	4638      	mov	r0, r7
 80872e6:	f7fd f88b 	bl	8084400 <mbedtls_rsa_import_raw>
 80872ea:	4604      	mov	r4, r0
 80872ec:	2800      	cmp	r0, #0
 80872ee:	f040 8090 	bne.w	8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 80872f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80872f4:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80872f6:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 80872f8:	4413      	add	r3, r2
 80872fa:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80872fc:	aa09      	add	r2, sp, #36	; 0x24
 80872fe:	2302      	movs	r3, #2
 8087300:	a80a      	add	r0, sp, #40	; 0x28
 8087302:	f7fc fd8f 	bl	8083e24 <mbedtls_asn1_get_tag>
 8087306:	4604      	mov	r4, r0
 8087308:	2800      	cmp	r0, #0
 808730a:	f040 8082 	bne.w	8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 808730e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087310:	9406      	str	r4, [sp, #24]
 8087312:	9304      	str	r3, [sp, #16]
 8087314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087316:	9405      	str	r4, [sp, #20]
 8087318:	9303      	str	r3, [sp, #12]
 808731a:	9402      	str	r4, [sp, #8]
 808731c:	9401      	str	r4, [sp, #4]
 808731e:	9400      	str	r4, [sp, #0]
 8087320:	4623      	mov	r3, r4
 8087322:	4622      	mov	r2, r4
 8087324:	4621      	mov	r1, r4
 8087326:	4638      	mov	r0, r7
 8087328:	f7fd f86a 	bl	8084400 <mbedtls_rsa_import_raw>
 808732c:	4604      	mov	r4, r0
 808732e:	2800      	cmp	r0, #0
 8087330:	d16f      	bne.n	8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8087332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8087334:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8087336:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8087338:	4413      	add	r3, r2
 808733a:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 808733c:	aa09      	add	r2, sp, #36	; 0x24
 808733e:	2302      	movs	r3, #2
 8087340:	a80a      	add	r0, sp, #40	; 0x28
 8087342:	f7fc fd6f 	bl	8083e24 <mbedtls_asn1_get_tag>
 8087346:	4604      	mov	r4, r0
 8087348:	2800      	cmp	r0, #0
 808734a:	d162      	bne.n	8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 808734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808734e:	2200      	movs	r2, #0
 8087350:	9300      	str	r3, [sp, #0]
 8087352:	9206      	str	r2, [sp, #24]
 8087354:	9205      	str	r2, [sp, #20]
 8087356:	9204      	str	r2, [sp, #16]
 8087358:	9203      	str	r2, [sp, #12]
 808735a:	9202      	str	r2, [sp, #8]
 808735c:	9201      	str	r2, [sp, #4]
 808735e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087360:	4611      	mov	r1, r2
 8087362:	4638      	mov	r0, r7
 8087364:	f7fd f84c 	bl	8084400 <mbedtls_rsa_import_raw>
 8087368:	4604      	mov	r4, r0
 808736a:	2800      	cmp	r0, #0
 808736c:	d151      	bne.n	8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 808736e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8087370:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8087372:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8087374:	4413      	add	r3, r2
 8087376:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8087378:	aa09      	add	r2, sp, #36	; 0x24
 808737a:	2302      	movs	r3, #2
 808737c:	a80a      	add	r0, sp, #40	; 0x28
 808737e:	f7fc fd51 	bl	8083e24 <mbedtls_asn1_get_tag>
 8087382:	4604      	mov	r4, r0
 8087384:	2800      	cmp	r0, #0
 8087386:	d144      	bne.n	8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8087388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808738a:	9406      	str	r4, [sp, #24]
 808738c:	9302      	str	r3, [sp, #8]
 808738e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087390:	9405      	str	r4, [sp, #20]
 8087392:	9404      	str	r4, [sp, #16]
 8087394:	9403      	str	r4, [sp, #12]
 8087396:	9301      	str	r3, [sp, #4]
 8087398:	9400      	str	r4, [sp, #0]
 808739a:	4623      	mov	r3, r4
 808739c:	4622      	mov	r2, r4
 808739e:	4621      	mov	r1, r4
 80873a0:	4638      	mov	r0, r7
 80873a2:	f7fd f82d 	bl	8084400 <mbedtls_rsa_import_raw>
 80873a6:	4604      	mov	r4, r0
 80873a8:	2800      	cmp	r0, #0
 80873aa:	d132      	bne.n	8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80873ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80873ae:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 80873b0:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80873b2:	4413      	add	r3, r2
 80873b4:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 80873b6:	f7fd f861 	bl	808447c <mbedtls_rsa_complete>
 80873ba:	4604      	mov	r4, r0
 80873bc:	b9c8      	cbnz	r0, 80873f2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80873be:	aa0b      	add	r2, sp, #44	; 0x2c
 80873c0:	4631      	mov	r1, r6
 80873c2:	a80a      	add	r0, sp, #40	; 0x28
 80873c4:	f7fc fd7f 	bl	8083ec6 <mbedtls_asn1_get_mpi>
 80873c8:	4604      	mov	r4, r0
 80873ca:	bb10      	cbnz	r0, 8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80873cc:	aa0b      	add	r2, sp, #44	; 0x2c
 80873ce:	4631      	mov	r1, r6
 80873d0:	a80a      	add	r0, sp, #40	; 0x28
 80873d2:	f7fc fd78 	bl	8083ec6 <mbedtls_asn1_get_mpi>
 80873d6:	4604      	mov	r4, r0
 80873d8:	b9d8      	cbnz	r0, 8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80873da:	aa0b      	add	r2, sp, #44	; 0x2c
 80873dc:	4631      	mov	r1, r6
 80873de:	a80a      	add	r0, sp, #40	; 0x28
 80873e0:	f7fc fd71 	bl	8083ec6 <mbedtls_asn1_get_mpi>
 80873e4:	4604      	mov	r4, r0
 80873e6:	b9a0      	cbnz	r0, 8087412 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
 80873e8:	4b0e      	ldr	r3, [pc, #56]	; (8087424 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
 80873ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80873ec:	4296      	cmp	r6, r2
 80873ee:	bf18      	it	ne
 80873f0:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
 80873f2:	a80b      	add	r0, sp, #44	; 0x2c
 80873f4:	f004 fb43 	bl	808ba7e <mbedtls_mpi_free>

    if( ret != 0 )
 80873f8:	b17c      	cbz	r4, 808741a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
 80873fa:	f64f 7380 	movw	r3, #65408	; 0xff80
 80873fe:	4023      	ands	r3, r4
 8087400:	b913      	cbnz	r3, 8087408 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 8087402:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
 8087406:	e000      	b.n	808740a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 8087408:	4d07      	ldr	r5, [pc, #28]	; (8087428 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
 808740a:	4638      	mov	r0, r7
 808740c:	f7fe f8d0 	bl	80855b0 <mbedtls_rsa_free>
 8087410:	e003      	b.n	808741a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
 8087412:	a80b      	add	r0, sp, #44	; 0x2c
 8087414:	f004 fb33 	bl	808ba7e <mbedtls_mpi_free>
 8087418:	e7ef      	b.n	80873fa <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 808741a:	4628      	mov	r0, r5
 808741c:	b00f      	add	sp, #60	; 0x3c
 808741e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087420:	ffffc280 	.word	0xffffc280
 8087424:	ffffc29a 	.word	0xffffc29a
 8087428:	ffffc300 	.word	0xffffc300

0808742c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 808742c:	b530      	push	{r4, r5, lr}
 808742e:	4615      	mov	r5, r2
 8087430:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8087432:	2200      	movs	r2, #0
 8087434:	601a      	str	r2, [r3, #0]
 8087436:	605a      	str	r2, [r3, #4]
 8087438:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 808743a:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 808743c:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 808743e:	f7fc fdca 	bl	8083fd6 <mbedtls_asn1_get_alg>
 8087442:	b110      	cbz	r0, 808744a <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 8087444:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
 8087448:	e014      	b.n	8087474 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 808744a:	4629      	mov	r1, r5
 808744c:	a801      	add	r0, sp, #4
 808744e:	f7fe f967 	bl	8085720 <mbedtls_oid_get_pk_alg>
 8087452:	b960      	cbnz	r0, 808746e <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8087454:	782b      	ldrb	r3, [r5, #0]
 8087456:	2b01      	cmp	r3, #1
 8087458:	d10c      	bne.n	8087474 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 808745a:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 808745c:	2b05      	cmp	r3, #5
 808745e:	d000      	beq.n	8087462 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8087460:	b93b      	cbnz	r3, 8087472 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
 8087462:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8087464:	4804      	ldr	r0, [pc, #16]	; (8087478 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
 8087466:	2b00      	cmp	r3, #0
 8087468:	bf08      	it	eq
 808746a:	2000      	moveq	r0, #0
 808746c:	e002      	b.n	8087474 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 808746e:	4803      	ldr	r0, [pc, #12]	; (808747c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
 8087470:	e000      	b.n	8087474 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8087472:	4801      	ldr	r0, [pc, #4]	; (8087478 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
 8087474:	b005      	add	sp, #20
 8087476:	bd30      	pop	{r4, r5, pc}
 8087478:	ffffc580 	.word	0xffffc580
 808747c:	ffffc380 	.word	0xffffc380

08087480 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8087480:	b530      	push	{r4, r5, lr}
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8087482:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8087484:	b089      	sub	sp, #36	; 0x24
 8087486:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 8087488:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 808748a:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 808748e:	4411      	add	r1, r2
 8087490:	2330      	movs	r3, #48	; 0x30
 8087492:	aa03      	add	r2, sp, #12
 8087494:	a804      	add	r0, sp, #16
 8087496:	f7fc fcc5 	bl	8083e24 <mbedtls_asn1_get_tag>
 808749a:	b9c8      	cbnz	r0, 80874d0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 808749c:	9b03      	ldr	r3, [sp, #12]
 808749e:	9c04      	ldr	r4, [sp, #16]

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80874a0:	aa02      	add	r2, sp, #8
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80874a2:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80874a4:	4621      	mov	r1, r4
 80874a6:	a804      	add	r0, sp, #16
 80874a8:	f7fc fce9 	bl	8083e7e <mbedtls_asn1_get_int>
 80874ac:	b980      	cbnz	r0, 80874d0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
 80874ae:	9b02      	ldr	r3, [sp, #8]
 80874b0:	bb7b      	cbnz	r3, 8087512 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 80874b2:	ab05      	add	r3, sp, #20
 80874b4:	f10d 0207 	add.w	r2, sp, #7
 80874b8:	4621      	mov	r1, r4
 80874ba:	a804      	add	r0, sp, #16
 80874bc:	f7ff ffb6 	bl	808742c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 80874c0:	b930      	cbnz	r0, 80874d0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80874c2:	2304      	movs	r3, #4
 80874c4:	aa03      	add	r2, sp, #12
 80874c6:	4621      	mov	r1, r4
 80874c8:	a804      	add	r0, sp, #16
 80874ca:	f7fc fcab 	bl	8083e24 <mbedtls_asn1_get_tag>
 80874ce:	b110      	cbz	r0, 80874d6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x56>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80874d0:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 80874d4:	e022      	b.n	808751c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( len < 1 )
 80874d6:	9b03      	ldr	r3, [sp, #12]
 80874d8:	b1eb      	cbz	r3, 8087516 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x96>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 80874da:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80874de:	f005 fd39 	bl	808cf54 <mbedtls_pk_info_from_type>
 80874e2:	4601      	mov	r1, r0
 80874e4:	b908      	cbnz	r0, 80874ea <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80874e6:	480e      	ldr	r0, [pc, #56]	; (8087520 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa0>)
 80874e8:	e018      	b.n	808751c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 80874ea:	4628      	mov	r0, r5
 80874ec:	f005 fd3a 	bl	808cf64 <mbedtls_pk_setup>
 80874f0:	b9a0      	cbnz	r0, 808751c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 80874f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80874f6:	2b01      	cmp	r3, #1
 80874f8:	d1f5      	bne.n	80874e6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x66>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 80874fa:	9a03      	ldr	r2, [sp, #12]
 80874fc:	9904      	ldr	r1, [sp, #16]
 80874fe:	6868      	ldr	r0, [r5, #4]
 8087500:	f7ff fe9a 	bl	8087238 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 8087504:	4604      	mov	r4, r0
 8087506:	b140      	cbz	r0, 808751a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9a>
        {
            mbedtls_pk_free( pk );
 8087508:	4628      	mov	r0, r5
 808750a:	f005 fd12 	bl	808cf32 <mbedtls_pk_free>
            return( ret );
 808750e:	4620      	mov	r0, r4
 8087510:	e004      	b.n	808751c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 8087512:	4804      	ldr	r0, [pc, #16]	; (8087524 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa4>)
 8087514:	e002      	b.n	808751c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8087516:	4804      	ldr	r0, [pc, #16]	; (8087528 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa8>)
 8087518:	e000      	b.n	808751c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
 808751a:	2000      	movs	r0, #0
}
 808751c:	b009      	add	sp, #36	; 0x24
 808751e:	bd30      	pop	{r4, r5, pc}
 8087520:	ffffc380 	.word	0xffffc380
 8087524:	ffffc280 	.word	0xffffc280
 8087528:	ffffc2a0 	.word	0xffffc2a0

0808752c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 808752c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808752e:	b091      	sub	sp, #68	; 0x44
 8087530:	9e16      	ldr	r6, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
 8087532:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 8087534:	4605      	mov	r5, r0
 8087536:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
 8087538:	4411      	add	r1, r2

    if( pwdlen == 0 )
 808753a:	2e00      	cmp	r6, #0
 808753c:	d066      	beq.n	808760c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 808753e:	2330      	movs	r3, #48	; 0x30
 8087540:	aa08      	add	r2, sp, #32
 8087542:	a809      	add	r0, sp, #36	; 0x24
 8087544:	f7fc fc6e 	bl	8083e24 <mbedtls_asn1_get_tag>
 8087548:	b980      	cbnz	r0, 808756c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 808754a:	9b08      	ldr	r3, [sp, #32]
 808754c:	9c09      	ldr	r4, [sp, #36]	; 0x24

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 808754e:	aa0a      	add	r2, sp, #40	; 0x28
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8087550:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 8087552:	4621      	mov	r1, r4
 8087554:	ab0d      	add	r3, sp, #52	; 0x34
 8087556:	a809      	add	r0, sp, #36	; 0x24
 8087558:	f7fc fd3d 	bl	8083fd6 <mbedtls_asn1_get_alg>
 808755c:	b930      	cbnz	r0, 808756c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 808755e:	2304      	movs	r3, #4
 8087560:	aa08      	add	r2, sp, #32
 8087562:	4621      	mov	r1, r4
 8087564:	a809      	add	r0, sp, #36	; 0x24
 8087566:	f7fc fc5d 	bl	8083e24 <mbedtls_asn1_get_tag>
 808756a:	b110      	cbz	r0, 8087572 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 808756c:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8087570:	e055      	b.n	808761e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 8087572:	f10d 011f 	add.w	r1, sp, #31
 8087576:	f10d 021e 	add.w	r2, sp, #30
 808757a:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
 808757c:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 808757e:	f7fe f931 	bl	80857e4 <mbedtls_oid_get_pkcs12_pbe_alg>
 8087582:	4601      	mov	r1, r0
 8087584:	b9a0      	cbnz	r0, 80875b0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
 8087586:	9808      	ldr	r0, [sp, #32]
 8087588:	f89d 301f 	ldrb.w	r3, [sp, #31]
 808758c:	9003      	str	r0, [sp, #12]
 808758e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8087590:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8087594:	9002      	str	r0, [sp, #8]
 8087596:	9404      	str	r4, [sp, #16]
 8087598:	9601      	str	r6, [sp, #4]
 808759a:	9700      	str	r7, [sp, #0]
 808759c:	a80d      	add	r0, sp, #52	; 0x34
 808759e:	f006 fd6f 	bl	808e080 <mbedtls_pkcs12_pbe>
 80875a2:	2800      	cmp	r0, #0
 80875a4:	d036      	beq.n	8087614 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
 80875a6:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
 80875aa:	d138      	bne.n	808761e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 80875ac:	481d      	ldr	r0, [pc, #116]	; (8087624 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
 80875ae:	e036      	b.n	808761e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
 80875b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80875b2:	2a0a      	cmp	r2, #10
 80875b4:	d114      	bne.n	80875e0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
 80875b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80875b8:	481b      	ldr	r0, [pc, #108]	; (8087628 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
 80875ba:	f00b ffbb 	bl	8093534 <memcmp>
 80875be:	4601      	mov	r1, r0
 80875c0:	bb30      	cbnz	r0, 8087610 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
 80875c2:	9b08      	ldr	r3, [sp, #32]
 80875c4:	9402      	str	r4, [sp, #8]
 80875c6:	9301      	str	r3, [sp, #4]
 80875c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80875ca:	463a      	mov	r2, r7
 80875cc:	9300      	str	r3, [sp, #0]
 80875ce:	a80d      	add	r0, sp, #52	; 0x34
 80875d0:	4633      	mov	r3, r6
 80875d2:	f006 fc77 	bl	808dec4 <mbedtls_pkcs12_pbe_sha1_rc4_128>
 80875d6:	bb10      	cbnz	r0, 808761e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80875d8:	7823      	ldrb	r3, [r4, #0]
 80875da:	2b30      	cmp	r3, #48	; 0x30
 80875dc:	d01a      	beq.n	8087614 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
 80875de:	e7e5      	b.n	80875ac <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
 80875e0:	2a09      	cmp	r2, #9
 80875e2:	d115      	bne.n	8087610 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
 80875e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80875e6:	4811      	ldr	r0, [pc, #68]	; (808762c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
 80875e8:	f00b ffa4 	bl	8093534 <memcmp>
 80875ec:	4601      	mov	r1, r0
 80875ee:	b978      	cbnz	r0, 8087610 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
 80875f0:	9b08      	ldr	r3, [sp, #32]
 80875f2:	9402      	str	r4, [sp, #8]
 80875f4:	9301      	str	r3, [sp, #4]
 80875f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80875f8:	463a      	mov	r2, r7
 80875fa:	9300      	str	r3, [sp, #0]
 80875fc:	a80d      	add	r0, sp, #52	; 0x34
 80875fe:	4633      	mov	r3, r6
 8087600:	f7fb ff68 	bl	80834d4 <mbedtls_pkcs5_pbes2>
 8087604:	b130      	cbz	r0, 8087614 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
 8087606:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
 808760a:	e7ce      	b.n	80875aa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 808760c:	4808      	ldr	r0, [pc, #32]	; (8087630 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
 808760e:	e006      	b.n	808761e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 8087610:	4808      	ldr	r0, [pc, #32]	; (8087634 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
 8087612:	e004      	b.n	808761e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
 8087614:	9a08      	ldr	r2, [sp, #32]
 8087616:	4621      	mov	r1, r4
 8087618:	4628      	mov	r0, r5
 808761a:	f7ff ff31 	bl	8087480 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
 808761e:	b011      	add	sp, #68	; 0x44
 8087620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087622:	bf00      	nop
 8087624:	ffffc480 	.word	0xffffc480
 8087628:	0809544f 	.word	0x0809544f
 808762c:	0809545a 	.word	0x0809545a
 8087630:	ffffc400 	.word	0xffffc400
 8087634:	ffffc680 	.word	0xffffc680

08087638 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8087638:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 808763a:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 808763c:	b08f      	sub	sp, #60	; 0x3c
 808763e:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8087640:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087644:	aa09      	add	r2, sp, #36	; 0x24
 8087646:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8087648:	4605      	mov	r5, r0
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808764a:	f7fc fbeb 	bl	8083e24 <mbedtls_asn1_get_tag>
 808764e:	b110      	cbz	r0, 8087656 <mbedtls_pk_parse_subpubkey+0x1e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8087650:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8087654:	e090      	b.n	8087778 <mbedtls_pk_parse_subpubkey+0x140>
    }

    end = *p + len;
 8087656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087658:	682e      	ldr	r6, [r5, #0]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 808765a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = *p + len;
 808765e:	441e      	add	r6, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8087660:	4631      	mov	r1, r6
 8087662:	ab0b      	add	r3, sp, #44	; 0x2c
 8087664:	4628      	mov	r0, r5
 8087666:	f7ff fee1 	bl	808742c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 808766a:	2800      	cmp	r0, #0
 808766c:	f040 8084 	bne.w	8087778 <mbedtls_pk_parse_subpubkey+0x140>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8087670:	aa09      	add	r2, sp, #36	; 0x24
 8087672:	4631      	mov	r1, r6
 8087674:	4628      	mov	r0, r5
 8087676:	f7fc fc5e 	bl	8083f36 <mbedtls_asn1_get_bitstring_null>
 808767a:	b110      	cbz	r0, 8087682 <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 808767c:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 8087680:	e07a      	b.n	8087778 <mbedtls_pk_parse_subpubkey+0x140>

    if( *p + len != end )
 8087682:	682a      	ldr	r2, [r5, #0]
 8087684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087686:	4413      	add	r3, r2
 8087688:	429e      	cmp	r6, r3
 808768a:	d169      	bne.n	8087760 <mbedtls_pk_parse_subpubkey+0x128>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 808768c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8087690:	f005 fc60 	bl	808cf54 <mbedtls_pk_info_from_type>
 8087694:	4601      	mov	r1, r0
 8087696:	2800      	cmp	r0, #0
 8087698:	d064      	beq.n	8087764 <mbedtls_pk_parse_subpubkey+0x12c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 808769a:	4638      	mov	r0, r7
 808769c:	f005 fc62 	bl	808cf64 <mbedtls_pk_setup>
 80876a0:	4604      	mov	r4, r0
 80876a2:	2800      	cmp	r0, #0
 80876a4:	d160      	bne.n	8087768 <mbedtls_pk_parse_subpubkey+0x130>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 80876a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80876aa:	2b01      	cmp	r3, #1
 80876ac:	d162      	bne.n	8087774 <mbedtls_pk_parse_subpubkey+0x13c>
                             mbedtls_rsa_context *rsa )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80876ae:	2330      	movs	r3, #48	; 0x30
 80876b0:	aa0a      	add	r2, sp, #40	; 0x28
 80876b2:	4631      	mov	r1, r6
 80876b4:	4628      	mov	r0, r5
 80876b6:	687c      	ldr	r4, [r7, #4]
 80876b8:	f7fc fbb4 	bl	8083e24 <mbedtls_asn1_get_tag>
 80876bc:	bb28      	cbnz	r0, 808770a <mbedtls_pk_parse_subpubkey+0xd2>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
 80876be:	682a      	ldr	r2, [r5, #0]
 80876c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80876c2:	4413      	add	r3, r2
 80876c4:	429e      	cmp	r6, r3
 80876c6:	d146      	bne.n	8087756 <mbedtls_pk_parse_subpubkey+0x11e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80876c8:	2302      	movs	r3, #2
 80876ca:	aa0a      	add	r2, sp, #40	; 0x28
 80876cc:	4631      	mov	r1, r6
 80876ce:	4628      	mov	r0, r5
 80876d0:	f7fc fba8 	bl	8083e24 <mbedtls_asn1_get_tag>
 80876d4:	b9c8      	cbnz	r0, 808770a <mbedtls_pk_parse_subpubkey+0xd2>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 80876d6:	2300      	movs	r3, #0
 80876d8:	9306      	str	r3, [sp, #24]
 80876da:	9305      	str	r3, [sp, #20]
 80876dc:	9304      	str	r3, [sp, #16]
 80876de:	9303      	str	r3, [sp, #12]
 80876e0:	9302      	str	r3, [sp, #8]
 80876e2:	9301      	str	r3, [sp, #4]
 80876e4:	9300      	str	r3, [sp, #0]
 80876e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80876e8:	6829      	ldr	r1, [r5, #0]
 80876ea:	4620      	mov	r0, r4
 80876ec:	f7fc fe88 	bl	8084400 <mbedtls_rsa_import_raw>
 80876f0:	2800      	cmp	r0, #0
 80876f2:	d13d      	bne.n	8087770 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80876f4:	682a      	ldr	r2, [r5, #0]
 80876f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80876f8:	4631      	mov	r1, r6

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80876fa:	4413      	add	r3, r2
 80876fc:	602b      	str	r3, [r5, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80876fe:	aa0a      	add	r2, sp, #40	; 0x28
 8087700:	2302      	movs	r3, #2
 8087702:	4628      	mov	r0, r5
 8087704:	f7fc fb8e 	bl	8083e24 <mbedtls_asn1_get_tag>
 8087708:	b118      	cbz	r0, 8087712 <mbedtls_pk_parse_subpubkey+0xda>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 808770a:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 808770e:	b1fc      	cbz	r4, 8087750 <mbedtls_pk_parse_subpubkey+0x118>
 8087710:	e022      	b.n	8087758 <mbedtls_pk_parse_subpubkey+0x120>

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 8087712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087714:	9004      	str	r0, [sp, #16]
 8087716:	9306      	str	r3, [sp, #24]
 8087718:	682b      	ldr	r3, [r5, #0]
 808771a:	9003      	str	r0, [sp, #12]
 808771c:	9305      	str	r3, [sp, #20]
 808771e:	9002      	str	r0, [sp, #8]
 8087720:	9001      	str	r0, [sp, #4]
 8087722:	9000      	str	r0, [sp, #0]
 8087724:	4603      	mov	r3, r0
 8087726:	4602      	mov	r2, r0
 8087728:	4601      	mov	r1, r0
 808772a:	4620      	mov	r0, r4
 808772c:	f7fc fe68 	bl	8084400 <mbedtls_rsa_import_raw>
 8087730:	b9f0      	cbnz	r0, 8087770 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8087732:	682a      	ldr	r2, [r5, #0]
 8087734:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8087736:	4620      	mov	r0, r4

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8087738:	4413      	add	r3, r2
 808773a:	602b      	str	r3, [r5, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 808773c:	f7fc fe9e 	bl	808447c <mbedtls_rsa_complete>
 8087740:	b9b0      	cbnz	r0, 8087770 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 8087742:	4620      	mov	r0, r4
 8087744:	f7fc ff56 	bl	80845f4 <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8087748:	b990      	cbnz	r0, 8087770 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
 808774a:	682b      	ldr	r3, [r5, #0]
 808774c:	429e      	cmp	r6, r3
 808774e:	d102      	bne.n	8087756 <mbedtls_pk_parse_subpubkey+0x11e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 8087750:	682b      	ldr	r3, [r5, #0]
 8087752:	429e      	cmp	r6, r3
 8087754:	d00a      	beq.n	808776c <mbedtls_pk_parse_subpubkey+0x134>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
 8087756:	4c09      	ldr	r4, [pc, #36]	; (808777c <mbedtls_pk_parse_subpubkey+0x144>)

    if( ret != 0 )
        mbedtls_pk_free( pk );
 8087758:	4638      	mov	r0, r7
 808775a:	f005 fbea 	bl	808cf32 <mbedtls_pk_free>
 808775e:	e003      	b.n	8087768 <mbedtls_pk_parse_subpubkey+0x130>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8087760:	4806      	ldr	r0, [pc, #24]	; (808777c <mbedtls_pk_parse_subpubkey+0x144>)
 8087762:	e009      	b.n	8087778 <mbedtls_pk_parse_subpubkey+0x140>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8087764:	4806      	ldr	r0, [pc, #24]	; (8087780 <mbedtls_pk_parse_subpubkey+0x148>)
 8087766:	e007      	b.n	8087778 <mbedtls_pk_parse_subpubkey+0x140>
 8087768:	4620      	mov	r0, r4
 808776a:	e005      	b.n	8087778 <mbedtls_pk_parse_subpubkey+0x140>
 808776c:	2000      	movs	r0, #0
 808776e:	e003      	b.n	8087778 <mbedtls_pk_parse_subpubkey+0x140>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 8087770:	4c04      	ldr	r4, [pc, #16]	; (8087784 <mbedtls_pk_parse_subpubkey+0x14c>)
 8087772:	e7f1      	b.n	8087758 <mbedtls_pk_parse_subpubkey+0x120>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 8087774:	4c02      	ldr	r4, [pc, #8]	; (8087780 <mbedtls_pk_parse_subpubkey+0x148>)
 8087776:	e7ef      	b.n	8087758 <mbedtls_pk_parse_subpubkey+0x120>

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 8087778:	b00f      	add	sp, #60	; 0x3c
 808777a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808777c:	ffffc49a 	.word	0xffffc49a
 8087780:	ffffc380 	.word	0xffffc380
 8087784:	ffffc500 	.word	0xffffc500

08087788 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8087788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808778c:	4616      	mov	r6, r2
 808778e:	b089      	sub	sp, #36	; 0x24
 8087790:	4605      	mov	r5, r0

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 8087792:	a805      	add	r0, sp, #20
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8087794:	460c      	mov	r4, r1
 8087796:	461f      	mov	r7, r3
 8087798:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 808779c:	f007 fdc8 	bl	808f330 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80877a0:	2e00      	cmp	r6, #0
 80877a2:	f000 80b8 	beq.w	8087916 <mbedtls_pk_parse_key+0x18e>
 80877a6:	f106 39ff 	add.w	r9, r6, #4294967295
 80877aa:	f814 3009 	ldrb.w	r3, [r4, r9]
 80877ae:	b11b      	cbz	r3, 80877b8 <mbedtls_pk_parse_key+0x30>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80877b0:	f814 3009 	ldrb.w	r3, [r4, r9]
 80877b4:	bb6b      	cbnz	r3, 8087812 <mbedtls_pk_parse_key+0x8a>
 80877b6:	e031      	b.n	808781c <mbedtls_pk_parse_key+0x94>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
 80877b8:	ab04      	add	r3, sp, #16
 80877ba:	9302      	str	r3, [sp, #8]
 80877bc:	e88d 0180 	stmia.w	sp, {r7, r8}
 80877c0:	4623      	mov	r3, r4
 80877c2:	4a57      	ldr	r2, [pc, #348]	; (8087920 <mbedtls_pk_parse_key+0x198>)
 80877c4:	4957      	ldr	r1, [pc, #348]	; (8087924 <mbedtls_pk_parse_key+0x19c>)
 80877c6:	a805      	add	r0, sp, #20
 80877c8:	f007 fdb8 	bl	808f33c <mbedtls_pem_read_buffer>

    if( ret == 0 )
 80877cc:	b978      	cbnz	r0, 80877ee <mbedtls_pk_parse_key+0x66>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 80877ce:	2001      	movs	r0, #1
 80877d0:	f005 fbc0 	bl	808cf54 <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 80877d4:	4601      	mov	r1, r0
 80877d6:	4628      	mov	r0, r5
 80877d8:	f005 fbc4 	bl	808cf64 <mbedtls_pk_setup>
 80877dc:	4604      	mov	r4, r0
 80877de:	2800      	cmp	r0, #0
 80877e0:	d160      	bne.n	80878a4 <mbedtls_pk_parse_key+0x11c>
 80877e2:	9a06      	ldr	r2, [sp, #24]
 80877e4:	9905      	ldr	r1, [sp, #20]
 80877e6:	6868      	ldr	r0, [r5, #4]
 80877e8:	f7ff fd26 	bl	8087238 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80877ec:	e058      	b.n	80878a0 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 80877ee:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 80877f2:	d101      	bne.n	80877f8 <mbedtls_pk_parse_key+0x70>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 80877f4:	484c      	ldr	r0, [pc, #304]	; (8087928 <mbedtls_pk_parse_key+0x1a0>)
 80877f6:	e08f      	b.n	8087918 <mbedtls_pk_parse_key+0x190>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 80877f8:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 80877fc:	f000 8084 	beq.w	8087908 <mbedtls_pk_parse_key+0x180>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8087800:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8087804:	f040 8088 	bne.w	8087918 <mbedtls_pk_parse_key+0x190>
 8087808:	e7d2      	b.n	80877b0 <mbedtls_pk_parse_key+0x28>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 808780a:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 808780e:	f040 8083 	bne.w	8087918 <mbedtls_pk_parse_key+0x190>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8087812:	19a3      	adds	r3, r4, r6
 8087814:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8087818:	b9ab      	cbnz	r3, 8087846 <mbedtls_pk_parse_key+0xbe>
 808781a:	e02d      	b.n	8087878 <mbedtls_pk_parse_key+0xf0>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
 808781c:	aa04      	add	r2, sp, #16
 808781e:	9202      	str	r2, [sp, #8]
 8087820:	9301      	str	r3, [sp, #4]
 8087822:	9300      	str	r3, [sp, #0]
 8087824:	4a41      	ldr	r2, [pc, #260]	; (808792c <mbedtls_pk_parse_key+0x1a4>)
 8087826:	4623      	mov	r3, r4
 8087828:	4941      	ldr	r1, [pc, #260]	; (8087930 <mbedtls_pk_parse_key+0x1a8>)
 808782a:	a805      	add	r0, sp, #20
 808782c:	f007 fd86 	bl	808f33c <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8087830:	2800      	cmp	r0, #0
 8087832:	d1ea      	bne.n	808780a <mbedtls_pk_parse_key+0x82>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 8087834:	9a06      	ldr	r2, [sp, #24]
 8087836:	9905      	ldr	r1, [sp, #20]
 8087838:	4628      	mov	r0, r5
 808783a:	f7ff fe21 	bl	8087480 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 808783e:	e02f      	b.n	80878a0 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8087840:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8087844:	d168      	bne.n	8087918 <mbedtls_pk_parse_key+0x190>
        unsigned char *key_copy;

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
 8087846:	4631      	mov	r1, r6
 8087848:	2001      	movs	r0, #1
 808784a:	f00b fd65 	bl	8093318 <calloc>
 808784e:	4681      	mov	r9, r0
 8087850:	2800      	cmp	r0, #0
 8087852:	d05b      	beq.n	808790c <mbedtls_pk_parse_key+0x184>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
 8087854:	4632      	mov	r2, r6
 8087856:	4621      	mov	r1, r4
 8087858:	f00b fe7b 	bl	8093552 <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );
 808785c:	463b      	mov	r3, r7
 808785e:	4632      	mov	r2, r6
 8087860:	4649      	mov	r1, r9
 8087862:	f8cd 8000 	str.w	r8, [sp]
 8087866:	4628      	mov	r0, r5
 8087868:	f7ff fe60 	bl	808752c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 808786c:	eb09 0106 	add.w	r1, r9, r6
 8087870:	4607      	mov	r7, r0
 8087872:	464b      	mov	r3, r9

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087874:	2200      	movs	r2, #0
 8087876:	e01d      	b.n	80878b4 <mbedtls_pk_parse_key+0x12c>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
 8087878:	aa04      	add	r2, sp, #16
 808787a:	9202      	str	r2, [sp, #8]
 808787c:	9301      	str	r3, [sp, #4]
 808787e:	9300      	str	r3, [sp, #0]
 8087880:	4a2c      	ldr	r2, [pc, #176]	; (8087934 <mbedtls_pk_parse_key+0x1ac>)
 8087882:	4623      	mov	r3, r4
 8087884:	492c      	ldr	r1, [pc, #176]	; (8087938 <mbedtls_pk_parse_key+0x1b0>)
 8087886:	a805      	add	r0, sp, #20
 8087888:	f007 fd58 	bl	808f33c <mbedtls_pem_read_buffer>
    if( ret == 0 )
 808788c:	2800      	cmp	r0, #0
 808788e:	d1d7      	bne.n	8087840 <mbedtls_pk_parse_key+0xb8>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 8087890:	f8cd 8000 	str.w	r8, [sp]
 8087894:	463b      	mov	r3, r7
 8087896:	9a06      	ldr	r2, [sp, #24]
 8087898:	9905      	ldr	r1, [sp, #20]
 808789a:	4628      	mov	r0, r5
 808789c:	f7ff fe46 	bl	808752c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 80878a0:	4604      	mov	r4, r0
 80878a2:	b110      	cbz	r0, 80878aa <mbedtls_pk_parse_key+0x122>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
 80878a4:	4628      	mov	r0, r5
 80878a6:	f005 fb44 	bl	808cf32 <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 80878aa:	a805      	add	r0, sp, #20
 80878ac:	f007 fdd4 	bl	808f458 <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 80878b0:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
 80878b2:	e031      	b.n	8087918 <mbedtls_pk_parse_key+0x190>

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80878b4:	428b      	cmp	r3, r1
 80878b6:	d002      	beq.n	80878be <mbedtls_pk_parse_key+0x136>
 80878b8:	701a      	strb	r2, [r3, #0]
 80878ba:	3301      	adds	r3, #1
 80878bc:	e7fa      	b.n	80878b4 <mbedtls_pk_parse_key+0x12c>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );

        mbedtls_zeroize( key_copy, keylen );
        mbedtls_free( key_copy );
 80878be:	4648      	mov	r0, r9
 80878c0:	f009 fee2 	bl	8091688 <free>
    }

    if( ret == 0 )
 80878c4:	b90f      	cbnz	r7, 80878ca <mbedtls_pk_parse_key+0x142>
        return( 0 );
 80878c6:	2000      	movs	r0, #0
 80878c8:	e026      	b.n	8087918 <mbedtls_pk_parse_key+0x190>

    mbedtls_pk_free( pk );
 80878ca:	4628      	mov	r0, r5
 80878cc:	f005 fb31 	bl	808cf32 <mbedtls_pk_free>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
 80878d0:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
 80878d4:	d08e      	beq.n	80877f4 <mbedtls_pk_parse_key+0x6c>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 80878d6:	4632      	mov	r2, r6
 80878d8:	4621      	mov	r1, r4
 80878da:	4628      	mov	r0, r5
 80878dc:	f7ff fdd0 	bl	8087480 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 80878e0:	2800      	cmp	r0, #0
 80878e2:	d0f0      	beq.n	80878c6 <mbedtls_pk_parse_key+0x13e>
        return( 0 );

    mbedtls_pk_free( pk );
 80878e4:	4628      	mov	r0, r5
 80878e6:	f005 fb24 	bl	808cf32 <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 80878ea:	2001      	movs	r0, #1
 80878ec:	f005 fb32 	bl	808cf54 <mbedtls_pk_info_from_type>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 80878f0:	4601      	mov	r1, r0
 80878f2:	4628      	mov	r0, r5
 80878f4:	f005 fb36 	bl	808cf64 <mbedtls_pk_setup>
 80878f8:	b950      	cbnz	r0, 8087910 <mbedtls_pk_parse_key+0x188>
 80878fa:	4632      	mov	r2, r6
 80878fc:	4621      	mov	r1, r4
 80878fe:	6868      	ldr	r0, [r5, #4]
 8087900:	f7ff fc9a 	bl	8087238 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 8087904:	b920      	cbnz	r0, 8087910 <mbedtls_pk_parse_key+0x188>
 8087906:	e7de      	b.n	80878c6 <mbedtls_pk_parse_key+0x13e>
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8087908:	480c      	ldr	r0, [pc, #48]	; (808793c <mbedtls_pk_parse_key+0x1b4>)
 808790a:	e005      	b.n	8087918 <mbedtls_pk_parse_key+0x190>

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 808790c:	480c      	ldr	r0, [pc, #48]	; (8087940 <mbedtls_pk_parse_key+0x1b8>)
 808790e:	e003      	b.n	8087918 <mbedtls_pk_parse_key+0x190>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
                                        key, keylen ) ) != 0 )
    {
        mbedtls_pk_free( pk );
 8087910:	4628      	mov	r0, r5
 8087912:	f005 fb0e 	bl	808cf32 <mbedtls_pk_free>
        return( 0 );
    }

#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8087916:	480b      	ldr	r0, [pc, #44]	; (8087944 <mbedtls_pk_parse_key+0x1bc>)
}
 8087918:	b009      	add	sp, #36	; 0x24
 808791a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808791e:	bf00      	nop
 8087920:	08095464 	.word	0x08095464
 8087924:	08095482 	.word	0x08095482
 8087928:	ffffc480 	.word	0xffffc480
 808792c:	080954a2 	.word	0x080954a2
 8087930:	080954bc 	.word	0x080954bc
 8087934:	080954d8 	.word	0x080954d8
 8087938:	080954fc 	.word	0x080954fc
 808793c:	ffffc400 	.word	0xffffc400
 8087940:	ffffc080 	.word	0xffffc080
 8087944:	ffffc300 	.word	0xffffc300

08087948 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8087948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808794c:	7bcb      	ldrb	r3, [r1, #15]
 808794e:	b093      	sub	sp, #76	; 0x4c
 8087950:	f003 030f 	and.w	r3, r3, #15
 8087954:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
 8087958:	e9d3 6730 	ldrd	r6, r7, [r3, #192]	; 0xc0
    zl = ctx->HL[lo];
 808795c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 8087960:	f8df c150 	ldr.w	ip, [pc, #336]	; 8087ab4 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
 8087964:	f101 0310 	add.w	r3, r1, #16
 8087968:	9310      	str	r3, [sp, #64]	; 0x40
    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 808796a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808796c:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 8087970:	9310      	str	r3, [sp, #64]	; 0x40
 8087972:	f00e 030f 	and.w	r3, lr, #15
 8087976:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
 8087978:	9b10      	ldr	r3, [sp, #64]	; 0x40
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
 808797a:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
 808797e:	ebc1 0803 	rsb	r8, r1, r3
 8087982:	f1b8 0f0f 	cmp.w	r8, #15
 8087986:	d03a      	beq.n	80879fe <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
 8087988:	0923      	lsrs	r3, r4, #4
 808798a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 808798e:	9300      	str	r3, [sp, #0]
 8087990:	092b      	lsrs	r3, r5, #4
 8087992:	9301      	str	r3, [sp, #4]
 8087994:	0733      	lsls	r3, r6, #28
 8087996:	9309      	str	r3, [sp, #36]	; 0x24
 8087998:	2300      	movs	r3, #0
 808799a:	9308      	str	r3, [sp, #32]
 808799c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808799e:	e9dd ab00 	ldrd	sl, fp, [sp]
 80879a2:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 80879a6:	0933      	lsrs	r3, r6, #4
 80879a8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80879ac:	9304      	str	r3, [sp, #16]
 80879ae:	093b      	lsrs	r3, r7, #4
 80879b0:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80879b4:	9305      	str	r3, [sp, #20]
 80879b6:	ea48 080a 	orr.w	r8, r8, sl
 80879ba:	ea49 090b 	orr.w	r9, r9, fp
 80879be:	e9d5 6730 	ldrd	r6, r7, [r5, #192]	; 0xc0
 80879c2:	46c2      	mov	sl, r8
 80879c4:	46cb      	mov	fp, r9
 80879c6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80879ca:	ea88 0806 	eor.w	r8, r8, r6
 80879ce:	4646      	mov	r6, r8
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 80879d0:	f004 040f 	and.w	r4, r4, #15
            zh ^= ctx->HH[lo];
 80879d4:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 80879d8:	ea89 0907 	eor.w	r9, r9, r7
 80879dc:	0423      	lsls	r3, r4, #16
 80879de:	930d      	str	r3, [sp, #52]	; 0x34
 80879e0:	2300      	movs	r3, #0
 80879e2:	464f      	mov	r7, r9
 80879e4:	930c      	str	r3, [sp, #48]	; 0x30
 80879e6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80879ea:	4073      	eors	r3, r6
 80879ec:	461e      	mov	r6, r3
 80879ee:	407c      	eors	r4, r7
 80879f0:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
 80879f2:	e9d5 4510 	ldrd	r4, r5, [r5, #64]	; 0x40
 80879f6:	ea84 040a 	eor.w	r4, r4, sl
 80879fa:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 80879fe:	0923      	lsrs	r3, r4, #4
 8087a00:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8087a04:	9302      	str	r3, [sp, #8]
 8087a06:	092b      	lsrs	r3, r5, #4
 8087a08:	9303      	str	r3, [sp, #12]
 8087a0a:	0733      	lsls	r3, r6, #28
 8087a0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8087a0e:	2300      	movs	r3, #0
 8087a10:	930a      	str	r3, [sp, #40]	; 0x28
 8087a12:	0933      	lsrs	r3, r6, #4
 8087a14:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8087a18:	9306      	str	r3, [sp, #24]
 8087a1a:	093b      	lsrs	r3, r7, #4
 8087a1c:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8087a20:	9307      	str	r3, [sp, #28]
 8087a22:	e9de 6730 	ldrd	r6, r7, [lr, #192]	; 0xc0
 8087a26:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8087a2a:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8087a2e:	ea48 080a 	orr.w	r8, r8, sl
 8087a32:	ea49 090b 	orr.w	r9, r9, fp
 8087a36:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8087a3a:	ea8a 0a06 	eor.w	sl, sl, r6
 8087a3e:	4656      	mov	r6, sl
 8087a40:	ea8b 0b07 	eor.w	fp, fp, r7
 8087a44:	465f      	mov	r7, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 8087a46:	f004 040f 	and.w	r4, r4, #15
        zh ^= ctx->HH[hi];
 8087a4a:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 8087a4e:	0423      	lsls	r3, r4, #16
 8087a50:	930f      	str	r3, [sp, #60]	; 0x3c
 8087a52:	2300      	movs	r3, #0
 8087a54:	930e      	str	r3, [sp, #56]	; 0x38
 8087a56:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8087a5a:	4073      	eors	r3, r6
 8087a5c:	461e      	mov	r6, r3
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8087a5e:	9b10      	ldr	r3, [sp, #64]	; 0x40

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8087a60:	407c      	eors	r4, r7
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8087a62:	4299      	cmp	r1, r3

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8087a64:	4627      	mov	r7, r4
        zl ^= ctx->HL[hi];
 8087a66:	e9de 4510 	ldrd	r4, r5, [lr, #64]	; 0x40
 8087a6a:	ea84 0408 	eor.w	r4, r4, r8
 8087a6e:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8087a72:	f47f af7a 	bne.w	808796a <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8087a76:	0e3b      	lsrs	r3, r7, #24
 8087a78:	7013      	strb	r3, [r2, #0]
 8087a7a:	0c3b      	lsrs	r3, r7, #16
 8087a7c:	7053      	strb	r3, [r2, #1]
 8087a7e:	0a3b      	lsrs	r3, r7, #8
 8087a80:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 8087a82:	0e33      	lsrs	r3, r6, #24
 8087a84:	7113      	strb	r3, [r2, #4]
 8087a86:	0c33      	lsrs	r3, r6, #16
 8087a88:	7153      	strb	r3, [r2, #5]
 8087a8a:	0a33      	lsrs	r3, r6, #8
 8087a8c:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8087a8e:	0e2b      	lsrs	r3, r5, #24
 8087a90:	7213      	strb	r3, [r2, #8]
 8087a92:	0c2b      	lsrs	r3, r5, #16
 8087a94:	7253      	strb	r3, [r2, #9]
 8087a96:	0a2b      	lsrs	r3, r5, #8
 8087a98:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 8087a9a:	0e23      	lsrs	r3, r4, #24
 8087a9c:	7313      	strb	r3, [r2, #12]
 8087a9e:	0c23      	lsrs	r3, r4, #16
 8087aa0:	7353      	strb	r3, [r2, #13]
 8087aa2:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8087aa4:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 8087aa6:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8087aa8:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 8087aaa:	7393      	strb	r3, [r2, #14]
 8087aac:	73d4      	strb	r4, [r2, #15]
}
 8087aae:	b013      	add	sp, #76	; 0x4c
 8087ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087ab4:	08095558 	.word	0x08095558

08087ab8 <mbedtls_gcm_init>:
/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8087ab8:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8087abc:	2100      	movs	r1, #0
 8087abe:	f00b bd6e 	b.w	809359e <memset>

08087ac2 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8087ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087ac6:	4604      	mov	r4, r0
 8087ac8:	b08d      	sub	sp, #52	; 0x34
 8087aca:	4608      	mov	r0, r1
 8087acc:	4691      	mov	r9, r2
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8087ace:	4619      	mov	r1, r3
 8087ad0:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8087ad2:	4698      	mov	r8, r3
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8087ad4:	f7fb feda 	bl	808388c <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8087ad8:	2800      	cmp	r0, #0
 8087ada:	f000 809b 	beq.w	8087c14 <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 8087ade:	6945      	ldr	r5, [r0, #20]
 8087ae0:	9002      	str	r0, [sp, #8]
 8087ae2:	2d10      	cmp	r5, #16
 8087ae4:	f040 8096 	bne.w	8087c14 <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 8087ae8:	4620      	mov	r0, r4
 8087aea:	f7fb fee7 	bl	80838bc <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8087aee:	9902      	ldr	r1, [sp, #8]
 8087af0:	4620      	mov	r0, r4
 8087af2:	f7fc f8b3 	bl	8083c5c <mbedtls_cipher_setup>
 8087af6:	2800      	cmp	r0, #0
 8087af8:	f040 808e 	bne.w	8087c18 <mbedtls_gcm_setkey+0x156>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8087afc:	2301      	movs	r3, #1
 8087afe:	4642      	mov	r2, r8
 8087b00:	4649      	mov	r1, r9
 8087b02:	4620      	mov	r0, r4
 8087b04:	f7fb feec 	bl	80838e0 <mbedtls_cipher_setkey>
 8087b08:	2800      	cmp	r0, #0
 8087b0a:	f040 8085 	bne.w	8087c18 <mbedtls_gcm_setkey+0x156>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
 8087b0e:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 8087b10:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
 8087b12:	462a      	mov	r2, r5
 8087b14:	a808      	add	r0, sp, #32
 8087b16:	f00b fd42 	bl	809359e <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8087b1a:	ab07      	add	r3, sp, #28
 8087b1c:	9300      	str	r3, [sp, #0]
 8087b1e:	ab08      	add	r3, sp, #32
 8087b20:	462a      	mov	r2, r5
 8087b22:	4619      	mov	r1, r3
 8087b24:	4620      	mov	r0, r4
 8087b26:	f7fb ff29 	bl	808397c <mbedtls_cipher_update>
 8087b2a:	2800      	cmp	r0, #0
 8087b2c:	d174      	bne.n	8087c18 <mbedtls_gcm_setkey+0x156>
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 8087b2e:	4602      	mov	r2, r0
 8087b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087b32:	9908      	ldr	r1, [sp, #32]
 8087b34:	ba1d      	rev	r5, r3
 8087b36:	432a      	orrs	r2, r5

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 8087b38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 8087b3a:	ba0b      	rev	r3, r1
 8087b3c:	990b      	ldr	r1, [sp, #44]	; 0x2c

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 8087b3e:	fa95 f985 	rev.w	r9, r5
 8087b42:	fa91 fe81 	rev.w	lr, r1
 8087b46:	4649      	mov	r1, r9
 8087b48:	ea40 000e 	orr.w	r0, r0, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
    ctx->HH[8] = vh;
 8087b4c:	f504 7580 	add.w	r5, r4, #256	; 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8087b50:	f04f 0800 	mov.w	r8, #0
 8087b54:	f04f 0900 	mov.w	r9, #0
    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 8087b58:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
    ctx->HH[8] = vh;
 8087b5c:	e9c5 2300 	strd	r2, r3, [r5]
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8087b60:	e9c4 8930 	strd	r8, r9, [r4, #192]	; 0xc0
    ctx->HL[0] = 0;
 8087b64:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
 8087b68:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
 8087b6c:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8087b6e:	f04f 4c61 	mov.w	ip, #3774873600	; 0xe1000000
 8087b72:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8087b76:	07d7      	lsls	r7, r2, #31
 8087b78:	0849      	lsrs	r1, r1, #1
 8087b7a:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8087b7e:	085b      	lsrs	r3, r3, #1
 8087b80:	ea4f 0232 	mov.w	r2, r2, rrx
 8087b84:	fb0c fb08 	mul.w	fp, ip, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8087b88:	2600      	movs	r6, #0
 8087b8a:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 8087b8e:	4330      	orrs	r0, r6
 8087b90:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8087b92:	4072      	eors	r2, r6
 8087b94:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 8087b98:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
 8087b9c:	e9c8 0110 	strd	r0, r1, [r8, #64]	; 0x40
        ctx->HH[i] = vh;
 8087ba0:	e9c8 2330 	strd	r2, r3, [r8, #192]	; 0xc0

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 8087ba4:	ea4f 0565 	mov.w	r5, r5, asr #1
 8087ba8:	d1e3      	bne.n	8087b72 <mbedtls_gcm_setkey+0xb0>
 8087baa:	2003      	movs	r0, #3
 8087bac:	2102      	movs	r1, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8087bae:	f104 0840 	add.w	r8, r4, #64	; 0x40
 8087bb2:	f104 0cc0 	add.w	ip, r4, #192	; 0xc0
 8087bb6:	00cb      	lsls	r3, r1, #3
 8087bb8:	eb08 0e03 	add.w	lr, r8, r3
 8087bbc:	4463      	add	r3, ip
        vh = *HiH;
 8087bbe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8087bc2:	e9cd 4502 	strd	r4, r5, [sp, #8]
        vl = *HiL;
 8087bc6:	e9de 4500 	ldrd	r4, r5, [lr]
 8087bca:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8087bce:	4665      	mov	r5, ip
 8087bd0:	4644      	mov	r4, r8
        for( j = 1; j < i; j++ )
 8087bd2:	2201      	movs	r2, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
 8087bd4:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 8087bd8:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
 8087bdc:	ea89 0906 	eor.w	r9, r9, r6
 8087be0:	ea8a 0a07 	eor.w	sl, sl, r7
 8087be4:	464e      	mov	r6, r9
 8087be6:	4657      	mov	r7, sl
            HiL[j] = vl ^ ctx->HL[j];
 8087be8:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
        {
            HiH[j] = vh ^ ctx->HH[j];
 8087bec:	e9e3 6702 	strd	r6, r7, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
 8087bf0:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
 8087bf4:	ea89 0906 	eor.w	r9, r9, r6
 8087bf8:	ea8a 0a07 	eor.w	sl, sl, r7
 8087bfc:	464e      	mov	r6, r9
 8087bfe:	4657      	mov	r7, sl
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 8087c00:	3201      	adds	r2, #1
 8087c02:	428a      	cmp	r2, r1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
 8087c04:	e9ee 6702 	strd	r6, r7, [lr, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 8087c08:	d1e4      	bne.n	8087bd4 <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
 8087c0a:	3801      	subs	r0, #1
 8087c0c:	ea4f 0142 	mov.w	r1, r2, lsl #1
 8087c10:	d1d1      	bne.n	8087bb6 <mbedtls_gcm_setkey+0xf4>
 8087c12:	e001      	b.n	8087c18 <mbedtls_gcm_setkey+0x156>
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8087c14:	f06f 0013 	mvn.w	r0, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
 8087c18:	b00d      	add	sp, #52	; 0x34
 8087c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08087c1e <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8087c1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8087c22:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8087c26:	b08b      	sub	sp, #44	; 0x2c
 8087c28:	4604      	mov	r4, r0
 8087c2a:	468b      	mov	fp, r1
 8087c2c:	4690      	mov	r8, r2
 8087c2e:	9e15      	ldr	r6, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8087c30:	f8cd 9014 	str.w	r9, [sp, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 8087c34:	461d      	mov	r5, r3
 8087c36:	2b00      	cmp	r3, #0
 8087c38:	f000 808d 	beq.w	8087d56 <mbedtls_gcm_starts+0x138>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8087c3c:	f500 77b0 	add.w	r7, r0, #352	; 0x160
 8087c40:	2210      	movs	r2, #16
 8087c42:	4649      	mov	r1, r9
 8087c44:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8087c46:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8087c4a:	f00b fca8 	bl	809359e <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8087c4e:	4649      	mov	r1, r9
 8087c50:	2210      	movs	r2, #16
 8087c52:	4650      	mov	r0, sl
 8087c54:	f00b fca3 	bl	809359e <memset>

    ctx->mode = mode;
 8087c58:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    ctx->len = 0;
    ctx->add_len = 0;
 8087c5c:	46a3      	mov	fp, r4

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 8087c5e:	2000      	movs	r0, #0
 8087c60:	2100      	movs	r1, #0
 8087c62:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    ctx->add_len = 0;

    if( iv_len == 12 )
 8087c66:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 8087c68:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 8087c6c:	e9eb 0152 	strd	r0, r1, [fp, #328]!	; 0x148

    if( iv_len == 12 )
 8087c70:	d10d      	bne.n	8087c8e <mbedtls_gcm_starts+0x70>
    {
        memcpy( ctx->y, iv, iv_len );
 8087c72:	f8d8 3000 	ldr.w	r3, [r8]
 8087c76:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8087c7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8087c7e:	607b      	str	r3, [r7, #4]
 8087c80:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8087c84:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
 8087c86:	2301      	movs	r3, #1
 8087c88:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
 8087c8c:	e03a      	b.n	8087d04 <mbedtls_gcm_starts+0xe6>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 8087c8e:	2210      	movs	r2, #16
 8087c90:	4649      	mov	r1, r9
 8087c92:	a806      	add	r0, sp, #24
 8087c94:	f00b fc83 	bl	809359e <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8087c98:	00eb      	lsls	r3, r5, #3
 8087c9a:	0e1a      	lsrs	r2, r3, #24
 8087c9c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8087ca0:	0c1a      	lsrs	r2, r3, #16
 8087ca2:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8087ca6:	0a1a      	lsrs	r2, r3, #8
 8087ca8:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 8087cac:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8087cb0:	462b      	mov	r3, r5
 8087cb2:	f204 195f 	addw	r9, r4, #351	; 0x15f
 8087cb6:	4649      	mov	r1, r9
 8087cb8:	2d10      	cmp	r5, #16
 8087cba:	bf28      	it	cs
 8087cbc:	2310      	movcs	r3, #16
 8087cbe:	4642      	mov	r2, r8
 8087cc0:	4498      	add	r8, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
 8087cc2:	f812 eb01 	ldrb.w	lr, [r2], #1
 8087cc6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 8087cca:	4542      	cmp	r2, r8
                ctx->y[i] ^= p[i];
 8087ccc:	ea8e 0000 	eor.w	r0, lr, r0
 8087cd0:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 8087cd2:	d1f6      	bne.n	8087cc2 <mbedtls_gcm_starts+0xa4>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
 8087cd4:	463a      	mov	r2, r7
 8087cd6:	4639      	mov	r1, r7
 8087cd8:	4620      	mov	r0, r4
 8087cda:	9303      	str	r3, [sp, #12]
 8087cdc:	f7ff fe34 	bl	8087948 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
 8087ce0:	9b03      	ldr	r3, [sp, #12]
 8087ce2:	1aed      	subs	r5, r5, r3
 8087ce4:	d1e4      	bne.n	8087cb0 <mbedtls_gcm_starts+0x92>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
 8087ce6:	ab06      	add	r3, sp, #24
 8087ce8:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8087cec:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 8087cee:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 8087cf0:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 8087cf2:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 8087cf4:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 8087cf8:	d1f5      	bne.n	8087ce6 <mbedtls_gcm_starts+0xc8>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
 8087cfa:	463a      	mov	r2, r7
 8087cfc:	4639      	mov	r1, r7
 8087cfe:	4620      	mov	r0, r4
 8087d00:	f7ff fe22 	bl	8087948 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 8087d04:	ab05      	add	r3, sp, #20
 8087d06:	9300      	str	r3, [sp, #0]
 8087d08:	2210      	movs	r2, #16
 8087d0a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 8087d0e:	4639      	mov	r1, r7
 8087d10:	4620      	mov	r0, r4
 8087d12:	f7fb fe33 	bl	808397c <mbedtls_cipher_update>
 8087d16:	bb10      	cbnz	r0, 8087d5e <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
 8087d18:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
 8087d1c:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
 8087d20:	b1e6      	cbz	r6, 8087d5c <mbedtls_gcm_starts+0x13e>
 8087d22:	9b14      	ldr	r3, [sp, #80]	; 0x50
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 8087d24:	4635      	mov	r5, r6
 8087d26:	4619      	mov	r1, r3
 8087d28:	2e10      	cmp	r6, #16
 8087d2a:	bf28      	it	cs
 8087d2c:	2510      	movcs	r5, #16
 8087d2e:	4429      	add	r1, r5
 8087d30:	f204 126f 	addw	r2, r4, #367	; 0x16f
 8087d34:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
 8087d36:	f813 0b01 	ldrb.w	r0, [r3], #1
 8087d3a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8087d3e:	4041      	eors	r1, r0
 8087d40:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
 8087d42:	9914      	ldr	r1, [sp, #80]	; 0x50
 8087d44:	4299      	cmp	r1, r3
 8087d46:	d1f6      	bne.n	8087d36 <mbedtls_gcm_starts+0x118>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8087d48:	4652      	mov	r2, sl
 8087d4a:	4651      	mov	r1, sl
 8087d4c:	4620      	mov	r0, r4
 8087d4e:	f7ff fdfb 	bl	8087948 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
 8087d52:	1b76      	subs	r6, r6, r5
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 8087d54:	e7e4      	b.n	8087d20 <mbedtls_gcm_starts+0x102>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8087d56:	f06f 0013 	mvn.w	r0, #19
 8087d5a:	e000      	b.n	8087d5e <mbedtls_gcm_starts+0x140>

        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
 8087d5c:	4630      	mov	r0, r6
}
 8087d5e:	b00b      	add	sp, #44	; 0x2c
 8087d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08087d64 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8087d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087d68:	461f      	mov	r7, r3
 8087d6a:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8087d6c:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 8087d6e:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8087d70:	4604      	mov	r4, r0
 8087d72:	460e      	mov	r6, r1
 8087d74:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8087d76:	9305      	str	r3, [sp, #20]

    if( output > input && (size_t) ( output - input ) < length )
 8087d78:	d902      	bls.n	8087d80 <mbedtls_gcm_update+0x1c>
 8087d7a:	1abb      	subs	r3, r7, r2
 8087d7c:	428b      	cmp	r3, r1
 8087d7e:	d35c      	bcc.n	8087e3a <mbedtls_gcm_update+0xd6>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8087d80:	4625      	mov	r5, r4
 8087d82:	e9f5 0150 	ldrd	r0, r1, [r5, #320]!	; 0x140
 8087d86:	1982      	adds	r2, r0, r6
 8087d88:	f141 0300 	adc.w	r3, r1, #0
 8087d8c:	428b      	cmp	r3, r1
 8087d8e:	bf08      	it	eq
 8087d90:	4282      	cmpeq	r2, r0
 8087d92:	d352      	bcc.n	8087e3a <mbedtls_gcm_update+0xd6>
 8087d94:	210f      	movs	r1, #15
 8087d96:	f06f 001f 	mvn.w	r0, #31
 8087d9a:	4299      	cmp	r1, r3
 8087d9c:	bf08      	it	eq
 8087d9e:	4290      	cmpeq	r0, r2
 8087da0:	d34b      	bcc.n	8087e3a <mbedtls_gcm_update+0xd6>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8087da2:	e9c5 2300 	strd	r2, r3, [r5]
 8087da6:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 8087daa:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8087dac:	f504 73b0 	add.w	r3, r4, #352	; 0x160
 8087db0:	f10d 0a18 	add.w	sl, sp, #24
 8087db4:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 8087db6:	2e00      	cmp	r6, #0
 8087db8:	d042      	beq.n	8087e40 <mbedtls_gcm_update+0xdc>
 8087dba:	f504 75b8 	add.w	r5, r4, #368	; 0x170
    {
        use_len = ( length < 16 ) ? length : 16;
 8087dbe:	462a      	mov	r2, r5
 8087dc0:	46ab      	mov	fp, r5
 8087dc2:	2e10      	cmp	r6, #16
 8087dc4:	46b1      	mov	r9, r6
 8087dc6:	bf28      	it	cs
 8087dc8:	f04f 0910 	movcs.w	r9, #16

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
 8087dcc:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8087dd0:	3301      	adds	r3, #1
 8087dd2:	b2db      	uxtb	r3, r3
 8087dd4:	7013      	strb	r3, [r2, #0]
 8087dd6:	b913      	cbnz	r3, 8087dde <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
 8087dd8:	9b02      	ldr	r3, [sp, #8]
 8087dda:	429a      	cmp	r2, r3
 8087ddc:	d1f6      	bne.n	8087dcc <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8087dde:	ab05      	add	r3, sp, #20
 8087de0:	9300      	str	r3, [sp, #0]
 8087de2:	2210      	movs	r2, #16
 8087de4:	4653      	mov	r3, sl
 8087de6:	9903      	ldr	r1, [sp, #12]
 8087de8:	4620      	mov	r0, r4
 8087dea:	f7fb fdc7 	bl	808397c <mbedtls_cipher_update>
 8087dee:	bb40      	cbnz	r0, 8087e42 <mbedtls_gcm_update+0xde>
 8087df0:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 8087df2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8087df6:	b91b      	cbnz	r3, 8087e00 <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
 8087df8:	7829      	ldrb	r1, [r5, #0]
 8087dfa:	7813      	ldrb	r3, [r2, #0]
 8087dfc:	404b      	eors	r3, r1
 8087dfe:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
 8087e00:	f812 1b01 	ldrb.w	r1, [r2], #1
 8087e04:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8087e08:	3501      	adds	r5, #1
 8087e0a:	404b      	eors	r3, r1
 8087e0c:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8087e0e:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 8087e12:	3001      	adds	r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8087e14:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
 8087e16:	bf02      	ittt	eq
 8087e18:	f815 1c01 	ldrbeq.w	r1, [r5, #-1]
 8087e1c:	404b      	eoreq	r3, r1
 8087e1e:	f805 3c01 	strbeq.w	r3, [r5, #-1]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 8087e22:	4581      	cmp	r9, r0
 8087e24:	d1e5      	bne.n	8087df2 <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8087e26:	465a      	mov	r2, fp
 8087e28:	4659      	mov	r1, fp
 8087e2a:	4620      	mov	r0, r4
 8087e2c:	f7ff fd8c 	bl	8087948 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
 8087e30:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
 8087e34:	44c8      	add	r8, r9
        out_p += use_len;
 8087e36:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 8087e38:	e7bd      	b.n	8087db6 <mbedtls_gcm_update+0x52>
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8087e3a:	f06f 0013 	mvn.w	r0, #19
 8087e3e:	e000      	b.n	8087e42 <mbedtls_gcm_update+0xde>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 8087e40:	4630      	mov	r0, r6
}
 8087e42:	b00b      	add	sp, #44	; 0x2c
 8087e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08087e48 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8087e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8087e4c:	4688      	mov	r8, r1
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 8087e4e:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
 8087e52:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 8087e56:	00cd      	lsls	r5, r1, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8087e58:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
                unsigned char *tag,
                size_t tag_len )
{
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 8087e5c:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 8087e60:	00dc      	lsls	r4, r3, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8087e62:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8087e66:	00cf      	lsls	r7, r1, #3
 8087e68:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 8087e6c:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 8087e6e:	1f13      	subs	r3, r2, #4
 8087e70:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8087e72:	4681      	mov	r9, r0
 8087e74:	4692      	mov	sl, r2
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
 8087e76:	d85b      	bhi.n	8087f30 <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 8087e78:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 8087e7c:	4640      	mov	r0, r8
 8087e7e:	f00b fb68 	bl	8093552 <memcpy>

    if( orig_len || orig_add_len )
 8087e82:	ea54 0305 	orrs.w	r3, r4, r5
 8087e86:	d104      	bne.n	8087e92 <mbedtls_gcm_finish+0x4a>
 8087e88:	ea56 0307 	orrs.w	r3, r6, r7
 8087e8c:	d101      	bne.n	8087e92 <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 8087e8e:	2000      	movs	r0, #0
 8087e90:	e050      	b.n	8087f34 <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
 8087e92:	2210      	movs	r2, #16
 8087e94:	2100      	movs	r1, #0
 8087e96:	4668      	mov	r0, sp
 8087e98:	f00b fb81 	bl	809359e <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8087e9c:	0e3b      	lsrs	r3, r7, #24
 8087e9e:	f88d 3000 	strb.w	r3, [sp]
 8087ea2:	0c3b      	lsrs	r3, r7, #16
 8087ea4:	f88d 3001 	strb.w	r3, [sp, #1]
 8087ea8:	0a3b      	lsrs	r3, r7, #8
 8087eaa:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8087eae:	0e33      	lsrs	r3, r6, #24
 8087eb0:	f88d 3004 	strb.w	r3, [sp, #4]
 8087eb4:	0c33      	lsrs	r3, r6, #16
 8087eb6:	f88d 3005 	strb.w	r3, [sp, #5]
 8087eba:	0a33      	lsrs	r3, r6, #8
 8087ebc:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8087ec0:	0e2b      	lsrs	r3, r5, #24
 8087ec2:	f88d 3008 	strb.w	r3, [sp, #8]
 8087ec6:	0c2b      	lsrs	r3, r5, #16
 8087ec8:	f88d 3009 	strb.w	r3, [sp, #9]
 8087ecc:	0a2b      	lsrs	r3, r5, #8
 8087ece:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8087ed2:	0e23      	lsrs	r3, r4, #24
 8087ed4:	f88d 300c 	strb.w	r3, [sp, #12]
 8087ed8:	0c23      	lsrs	r3, r4, #16
 8087eda:	f88d 300d 	strb.w	r3, [sp, #13]
 8087ede:	f88d 400f 	strb.w	r4, [sp, #15]
 8087ee2:	0a23      	lsrs	r3, r4, #8
 8087ee4:	f209 146f 	addw	r4, r9, #367	; 0x16f
 8087ee8:	4622      	mov	r2, r4
 8087eea:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8087eee:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8087ef2:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8087ef6:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8087efa:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 8087efc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8087f00:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8087f04:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 8087f06:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8087f08:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 8087f0a:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8087f0c:	d1f6      	bne.n	8087efc <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8087f0e:	f509 72b8 	add.w	r2, r9, #368	; 0x170
 8087f12:	4611      	mov	r1, r2
 8087f14:	4648      	mov	r0, r9
 8087f16:	f7ff fd17 	bl	8087948 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
 8087f1a:	4641      	mov	r1, r8
 8087f1c:	44c2      	add	sl, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
 8087f1e:	780a      	ldrb	r2, [r1, #0]
 8087f20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8087f24:	4053      	eors	r3, r2
 8087f26:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
 8087f2a:	4551      	cmp	r1, sl
 8087f2c:	d1f7      	bne.n	8087f1e <mbedtls_gcm_finish+0xd6>
 8087f2e:	e7ae      	b.n	8087e8e <mbedtls_gcm_finish+0x46>
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8087f30:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
 8087f34:	b004      	add	sp, #16
 8087f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08087f3a <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8087f3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8087f3e:	4617      	mov	r7, r2
 8087f40:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8087f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8087f44:	4604      	mov	r4, r0
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8087f46:	9301      	str	r3, [sp, #4]
 8087f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8087f4a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8087f4e:	9300      	str	r3, [sp, #0]
 8087f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8087f52:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8087f56:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8087f58:	9d10      	ldr	r5, [sp, #64]	; 0x40
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8087f5a:	f7ff fe60 	bl	8087c1e <mbedtls_gcm_starts>
 8087f5e:	b970      	cbnz	r0, 8087f7e <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8087f60:	464b      	mov	r3, r9
 8087f62:	4642      	mov	r2, r8
 8087f64:	4639      	mov	r1, r7
 8087f66:	4620      	mov	r0, r4
 8087f68:	f7ff fefc 	bl	8087d64 <mbedtls_gcm_update>
 8087f6c:	b938      	cbnz	r0, 8087f7e <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8087f6e:	4632      	mov	r2, r6
 8087f70:	4629      	mov	r1, r5
 8087f72:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 8087f74:	b003      	add	sp, #12
 8087f76:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8087f7a:	f7ff bf65 	b.w	8087e48 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
 8087f7e:	b003      	add	sp, #12
 8087f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08087f84 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087f86:	460e      	mov	r6, r1
 8087f88:	b08d      	sub	sp, #52	; 0x34
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8087f8a:	9916      	ldr	r1, [sp, #88]	; 0x58
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087f8c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8087f8e:	9103      	str	r1, [sp, #12]
 8087f90:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087f92:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8087f94:	9102      	str	r1, [sp, #8]
 8087f96:	9912      	ldr	r1, [sp, #72]	; 0x48
 8087f98:	af08      	add	r7, sp, #32
 8087f9a:	9101      	str	r1, [sp, #4]
 8087f9c:	9300      	str	r3, [sp, #0]
 8087f9e:	9706      	str	r7, [sp, #24]
 8087fa0:	4613      	mov	r3, r2
 8087fa2:	9505      	str	r5, [sp, #20]
 8087fa4:	9404      	str	r4, [sp, #16]
 8087fa6:	4632      	mov	r2, r6
 8087fa8:	2100      	movs	r1, #0
 8087faa:	f7ff ffc6 	bl	8087f3a <mbedtls_gcm_crypt_and_tag>
 8087fae:	b998      	cbnz	r0, 8087fd8 <mbedtls_gcm_auth_decrypt+0x54>
 8087fb0:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8087fb2:	42ab      	cmp	r3, r5
 8087fb4:	d006      	beq.n	8087fc4 <mbedtls_gcm_auth_decrypt+0x40>
        diff |= tag[i] ^ check_tag[i];
 8087fb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8087fb8:	5cd1      	ldrb	r1, [r2, r3]
 8087fba:	5cfa      	ldrb	r2, [r7, r3]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8087fbc:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 8087fbe:	404a      	eors	r2, r1
 8087fc0:	4310      	orrs	r0, r2
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8087fc2:	e7f6      	b.n	8087fb2 <mbedtls_gcm_auth_decrypt+0x2e>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 8087fc4:	b140      	cbz	r0, 8087fd8 <mbedtls_gcm_auth_decrypt+0x54>
 8087fc6:	4426      	add	r6, r4
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087fc8:	2300      	movs	r3, #0
 8087fca:	42a6      	cmp	r6, r4
 8087fcc:	d002      	beq.n	8087fd4 <mbedtls_gcm_auth_decrypt+0x50>
 8087fce:	7023      	strb	r3, [r4, #0]
 8087fd0:	3401      	adds	r4, #1
 8087fd2:	e7fa      	b.n	8087fca <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 8087fd4:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 8087fd8:	b00d      	add	sp, #52	; 0x34
 8087fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087fdc <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 8087fdc:	b510      	push	{r4, lr}
 8087fde:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8087fe0:	f7fb fc6c 	bl	80838bc <mbedtls_cipher_free>
 8087fe4:	f504 72c4 	add.w	r2, r4, #392	; 0x188
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087fe8:	2300      	movs	r3, #0
 8087fea:	4294      	cmp	r4, r2
 8087fec:	d002      	beq.n	8087ff4 <mbedtls_gcm_free+0x18>
 8087fee:	7023      	strb	r3, [r4, #0]
 8087ff0:	3401      	adds	r4, #1
 8087ff2:	e7fa      	b.n	8087fea <mbedtls_gcm_free+0xe>
 8087ff4:	bd10      	pop	{r4, pc}
	...

08087ff8 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8087ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8087ffc:	2700      	movs	r7, #0
 8087ffe:	463c      	mov	r4, r7
 8088000:	463d      	mov	r5, r7
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8088002:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8088006:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8088120 <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 808800a:	4575      	cmp	r5, lr
 808800c:	d22d      	bcs.n	808806a <mbedtls_base64_decode+0x72>
 808800e:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 8088012:	5d5e      	ldrb	r6, [r3, r5]
 8088014:	2e20      	cmp	r6, #32
 8088016:	d104      	bne.n	8088022 <mbedtls_base64_decode+0x2a>
        {
            ++i;
 8088018:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 808801a:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
 808801c:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 8088020:	d8f7      	bhi.n	8088012 <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 8088022:	45ae      	cmp	lr, r5
 8088024:	d021      	beq.n	808806a <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
 8088026:	ebc5 060e 	rsb	r6, r5, lr
 808802a:	2e01      	cmp	r6, #1
 808802c:	d906      	bls.n	808803c <mbedtls_base64_decode+0x44>
 808802e:	5d5e      	ldrb	r6, [r3, r5]
 8088030:	2e0d      	cmp	r6, #13
 8088032:	d103      	bne.n	808803c <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
 8088034:	195e      	adds	r6, r3, r5
 8088036:	7876      	ldrb	r6, [r6, #1]
 8088038:	2e0a      	cmp	r6, #10
 808803a:	d014      	beq.n	8088066 <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
 808803c:	5d5e      	ldrb	r6, [r3, r5]
 808803e:	2e0a      	cmp	r6, #10
 8088040:	d011      	beq.n	8088066 <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 8088042:	f1bc 0f00 	cmp.w	ip, #0
 8088046:	d166      	bne.n	8088116 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
 8088048:	2e3d      	cmp	r6, #61	; 0x3d
 808804a:	d102      	bne.n	8088052 <mbedtls_base64_decode+0x5a>
 808804c:	3701      	adds	r7, #1
 808804e:	2f02      	cmp	r7, #2
 8088050:	d861      	bhi.n	8088116 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8088052:	f016 0f80 	tst.w	r6, #128	; 0x80
 8088056:	d15e      	bne.n	8088116 <mbedtls_base64_decode+0x11e>
 8088058:	f818 6006 	ldrb.w	r6, [r8, r6]
 808805c:	2e7f      	cmp	r6, #127	; 0x7f
 808805e:	d05a      	beq.n	8088116 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8088060:	2e3f      	cmp	r6, #63	; 0x3f
 8088062:	d956      	bls.n	8088112 <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 8088064:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8088066:	3501      	adds	r5, #1
 8088068:	e7cf      	b.n	808800a <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
 808806a:	b91c      	cbnz	r4, 8088074 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
 808806c:	6014      	str	r4, [r2, #0]
        return( 0 );
 808806e:	4620      	mov	r0, r4
 8088070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
 8088074:	f004 0e07 	and.w	lr, r4, #7
 8088078:	2606      	movs	r6, #6
 808807a:	08e4      	lsrs	r4, r4, #3
 808807c:	fb06 fe0e 	mul.w	lr, r6, lr
 8088080:	4366      	muls	r6, r4
 8088082:	f10e 0e07 	add.w	lr, lr, #7
 8088086:	1bf6      	subs	r6, r6, r7
 8088088:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
 808808c:	b160      	cbz	r0, 80880a8 <mbedtls_base64_decode+0xb0>
 808808e:	428c      	cmp	r4, r1
 8088090:	d80a      	bhi.n	80880a8 <mbedtls_base64_decode+0xb0>
 8088092:	2600      	movs	r6, #0
 8088094:	eb03 0e05 	add.w	lr, r3, r5
 8088098:	4601      	mov	r1, r0
 808809a:	2503      	movs	r5, #3
 808809c:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 808809e:	f8df c080 	ldr.w	ip, [pc, #128]	; 8088120 <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80880a2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8088124 <mbedtls_base64_decode+0x12c>
 80880a6:	e00f      	b.n	80880c8 <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
 80880a8:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 80880aa:	f06f 0029 	mvn.w	r0, #41	; 0x29
 80880ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80880b2:	f813 9b01 	ldrb.w	r9, [r3], #1
 80880b6:	f1a9 070a 	sub.w	r7, r9, #10
 80880ba:	b2ff      	uxtb	r7, r7
 80880bc:	2f16      	cmp	r7, #22
 80880be:	d806      	bhi.n	80880ce <mbedtls_base64_decode+0xd6>
 80880c0:	fa28 f707 	lsr.w	r7, r8, r7
 80880c4:	07ff      	lsls	r7, r7, #31
 80880c6:	d502      	bpl.n	80880ce <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 80880c8:	4573      	cmp	r3, lr
 80880ca:	d1f2      	bne.n	80880b2 <mbedtls_base64_decode+0xba>
 80880cc:	e01c      	b.n	8088108 <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80880ce:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
 80880d2:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80880d4:	2f40      	cmp	r7, #64	; 0x40
 80880d6:	bf08      	it	eq
 80880d8:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 80880da:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
 80880de:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 80880e0:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
 80880e4:	d1f0      	bne.n	80880c8 <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80880e6:	b16d      	cbz	r5, 8088104 <mbedtls_base64_decode+0x10c>
 80880e8:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80880ea:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80880ec:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80880ee:	d101      	bne.n	80880f4 <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80880f0:	3101      	adds	r1, #1
 80880f2:	e007      	b.n	8088104 <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80880f4:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80880f6:	ea4f 2416 	mov.w	r4, r6, lsr #8
 80880fa:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80880fc:	bf16      	itet	ne
 80880fe:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8088100:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8088102:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
 8088104:	2400      	movs	r4, #0
 8088106:	e7df      	b.n	80880c8 <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
 8088108:	1a08      	subs	r0, r1, r0
 808810a:	6010      	str	r0, [r2, #0]

    return( 0 );
 808810c:	2000      	movs	r0, #0
 808810e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8088112:	2f00      	cmp	r7, #0
 8088114:	d0a6      	beq.n	8088064 <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8088116:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 808811a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808811e:	bf00      	nop
 8088120:	080955d8 	.word	0x080955d8
 8088124:	00400009 	.word	0x00400009

08088128 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 8088128:	3804      	subs	r0, #4
 808812a:	b2c0      	uxtb	r0, r0
 808812c:	2804      	cmp	r0, #4
 808812e:	bf9a      	itte	ls
 8088130:	4b02      	ldrls	r3, [pc, #8]	; (808813c <mbedtls_md_info_from_type+0x14>)
 8088132:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8088136:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 8088138:	4770      	bx	lr
 808813a:	bf00      	nop
 808813c:	08095658 	.word	0x08095658

08088140 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 8088140:	2300      	movs	r3, #0
 8088142:	6003      	str	r3, [r0, #0]
 8088144:	6043      	str	r3, [r0, #4]
 8088146:	6083      	str	r3, [r0, #8]
 8088148:	4770      	bx	lr

0808814a <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 808814a:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 808814c:	4604      	mov	r4, r0
 808814e:	b1e0      	cbz	r0, 808818a <mbedtls_md_free+0x40>
 8088150:	6803      	ldr	r3, [r0, #0]
 8088152:	b1d3      	cbz	r3, 808818a <mbedtls_md_free+0x40>
        return;

    if( ctx->md_ctx != NULL )
 8088154:	6840      	ldr	r0, [r0, #4]
 8088156:	b108      	cbz	r0, 808815c <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 8088158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808815a:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 808815c:	68a3      	ldr	r3, [r4, #8]
 808815e:	b163      	cbz	r3, 808817a <mbedtls_md_free+0x30>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 8088160:	6822      	ldr	r2, [r4, #0]
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8088162:	2100      	movs	r1, #0
 8088164:	68d2      	ldr	r2, [r2, #12]
 8088166:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 808816a:	429a      	cmp	r2, r3
 808816c:	d002      	beq.n	8088174 <mbedtls_md_free+0x2a>
 808816e:	7019      	strb	r1, [r3, #0]
 8088170:	3301      	adds	r3, #1
 8088172:	e7fa      	b.n	808816a <mbedtls_md_free+0x20>
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
 8088174:	68a0      	ldr	r0, [r4, #8]
 8088176:	f009 fa87 	bl	8091688 <free>
 808817a:	f104 020c 	add.w	r2, r4, #12
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808817e:	2300      	movs	r3, #0
 8088180:	4294      	cmp	r4, r2
 8088182:	d002      	beq.n	808818a <mbedtls_md_free+0x40>
 8088184:	7023      	strb	r3, [r4, #0]
 8088186:	3401      	adds	r4, #1
 8088188:	e7fa      	b.n	8088180 <mbedtls_md_free+0x36>
 808818a:	bd10      	pop	{r4, pc}

0808818c <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 808818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808818e:	4605      	mov	r5, r0
 8088190:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 8088192:	460c      	mov	r4, r1
 8088194:	b199      	cbz	r1, 80881be <mbedtls_md_setup+0x32>
 8088196:	b190      	cbz	r0, 80881be <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 8088198:	6a0b      	ldr	r3, [r1, #32]
 808819a:	4798      	blx	r3
 808819c:	4606      	mov	r6, r0
 808819e:	6068      	str	r0, [r5, #4]
 80881a0:	b178      	cbz	r0, 80881c2 <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 80881a2:	b14f      	cbz	r7, 80881b8 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 80881a4:	68e1      	ldr	r1, [r4, #12]
 80881a6:	2002      	movs	r0, #2
 80881a8:	f00b f8b6 	bl	8093318 <calloc>
 80881ac:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 80881ae:	b918      	cbnz	r0, 80881b8 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 80881b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80881b2:	4630      	mov	r0, r6
 80881b4:	4798      	blx	r3
 80881b6:	e004      	b.n	80881c2 <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 80881b8:	602c      	str	r4, [r5, #0]

    return( 0 );
 80881ba:	2000      	movs	r0, #0
 80881bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80881be:	4802      	ldr	r0, [pc, #8]	; (80881c8 <mbedtls_md_setup+0x3c>)
 80881c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 80881c2:	4802      	ldr	r0, [pc, #8]	; (80881cc <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 80881c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80881c6:	bf00      	nop
 80881c8:	ffffaf00 	.word	0xffffaf00
 80881cc:	ffffae80 	.word	0xffffae80

080881d0 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80881d0:	b120      	cbz	r0, 80881dc <mbedtls_md_starts+0xc>
 80881d2:	6803      	ldr	r3, [r0, #0]
 80881d4:	b113      	cbz	r3, 80881dc <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 80881d6:	691b      	ldr	r3, [r3, #16]
 80881d8:	6840      	ldr	r0, [r0, #4]
 80881da:	4718      	bx	r3
}
 80881dc:	4800      	ldr	r0, [pc, #0]	; (80881e0 <mbedtls_md_starts+0x10>)
 80881de:	4770      	bx	lr
 80881e0:	ffffaf00 	.word	0xffffaf00

080881e4 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80881e4:	b120      	cbz	r0, 80881f0 <mbedtls_md_update+0xc>
 80881e6:	6803      	ldr	r3, [r0, #0]
 80881e8:	b113      	cbz	r3, 80881f0 <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80881ea:	695b      	ldr	r3, [r3, #20]
 80881ec:	6840      	ldr	r0, [r0, #4]
 80881ee:	4718      	bx	r3
}
 80881f0:	4800      	ldr	r0, [pc, #0]	; (80881f4 <mbedtls_md_update+0x10>)
 80881f2:	4770      	bx	lr
 80881f4:	ffffaf00 	.word	0xffffaf00

080881f8 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80881f8:	b120      	cbz	r0, 8088204 <mbedtls_md_finish+0xc>
 80881fa:	6803      	ldr	r3, [r0, #0]
 80881fc:	b113      	cbz	r3, 8088204 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 80881fe:	699b      	ldr	r3, [r3, #24]
 8088200:	6840      	ldr	r0, [r0, #4]
 8088202:	4718      	bx	r3
}
 8088204:	4800      	ldr	r0, [pc, #0]	; (8088208 <mbedtls_md_finish+0x10>)
 8088206:	4770      	bx	lr
 8088208:	ffffaf00 	.word	0xffffaf00

0808820c <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 808820c:	b430      	push	{r4, r5}
 808820e:	460d      	mov	r5, r1
 8088210:	4611      	mov	r1, r2
    if( md_info == NULL )
 8088212:	b128      	cbz	r0, 8088220 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 8088214:	69c4      	ldr	r4, [r0, #28]
 8088216:	461a      	mov	r2, r3
 8088218:	4628      	mov	r0, r5
 808821a:	4623      	mov	r3, r4
}
 808821c:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 808821e:	4718      	bx	r3
}
 8088220:	4801      	ldr	r0, [pc, #4]	; (8088228 <mbedtls_md+0x1c>)
 8088222:	bc30      	pop	{r4, r5}
 8088224:	4770      	bx	lr
 8088226:	bf00      	nop
 8088228:	ffffaf00 	.word	0xffffaf00

0808822c <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 808822c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088230:	460d      	mov	r5, r1
 8088232:	b090      	sub	sp, #64	; 0x40
 8088234:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8088236:	4604      	mov	r4, r0
 8088238:	2800      	cmp	r0, #0
 808823a:	d050      	beq.n	80882de <mbedtls_md_hmac_starts+0xb2>
 808823c:	6803      	ldr	r3, [r0, #0]
 808823e:	2b00      	cmp	r3, #0
 8088240:	d04d      	beq.n	80882de <mbedtls_md_hmac_starts+0xb2>
 8088242:	6882      	ldr	r2, [r0, #8]
 8088244:	2a00      	cmp	r2, #0
 8088246:	d04a      	beq.n	80882de <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 8088248:	68da      	ldr	r2, [r3, #12]
 808824a:	42ba      	cmp	r2, r7
 808824c:	d215      	bcs.n	808827a <mbedtls_md_hmac_starts+0x4e>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 808824e:	691b      	ldr	r3, [r3, #16]
 8088250:	6840      	ldr	r0, [r0, #4]
 8088252:	4798      	blx	r3
 8088254:	2800      	cmp	r0, #0
 8088256:	d139      	bne.n	80882cc <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 8088258:	6823      	ldr	r3, [r4, #0]
 808825a:	463a      	mov	r2, r7
 808825c:	695b      	ldr	r3, [r3, #20]
 808825e:	4629      	mov	r1, r5
 8088260:	6860      	ldr	r0, [r4, #4]
 8088262:	4798      	blx	r3
 8088264:	2800      	cmp	r0, #0
 8088266:	d131      	bne.n	80882cc <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 8088268:	6823      	ldr	r3, [r4, #0]
 808826a:	4669      	mov	r1, sp
 808826c:	699b      	ldr	r3, [r3, #24]
 808826e:	6860      	ldr	r0, [r4, #4]
 8088270:	4798      	blx	r3
 8088272:	bb58      	cbnz	r0, 80882cc <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 8088274:	466d      	mov	r5, sp
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
            goto cleanup;

        keylen = ctx->md_info->size;
 8088276:	6823      	ldr	r3, [r4, #0]
 8088278:	689f      	ldr	r7, [r3, #8]
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 808827a:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 808827c:	68a6      	ldr	r6, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 808827e:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8088280:	2136      	movs	r1, #54	; 0x36
 8088282:	4630      	mov	r0, r6
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8088284:	eb06 0802 	add.w	r8, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
 8088288:	f00b f989 	bl	809359e <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 808828c:	6823      	ldr	r3, [r4, #0]
 808828e:	215c      	movs	r1, #92	; 0x5c
 8088290:	68da      	ldr	r2, [r3, #12]
 8088292:	4640      	mov	r0, r8
 8088294:	f00b f983 	bl	809359e <memset>

    for( i = 0; i < keylen; i++ )
 8088298:	2300      	movs	r3, #0
 808829a:	429f      	cmp	r7, r3
 808829c:	d00b      	beq.n	80882b6 <mbedtls_md_hmac_starts+0x8a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 808829e:	5cf1      	ldrb	r1, [r6, r3]
 80882a0:	5cea      	ldrb	r2, [r5, r3]
 80882a2:	404a      	eors	r2, r1
 80882a4:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 80882a6:	f818 1003 	ldrb.w	r1, [r8, r3]
 80882aa:	5cea      	ldrb	r2, [r5, r3]
 80882ac:	404a      	eors	r2, r1
 80882ae:	f808 2003 	strb.w	r2, [r8, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 80882b2:	3301      	adds	r3, #1
 80882b4:	e7f1      	b.n	808829a <mbedtls_md_hmac_starts+0x6e>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80882b6:	6823      	ldr	r3, [r4, #0]
 80882b8:	6860      	ldr	r0, [r4, #4]
 80882ba:	691b      	ldr	r3, [r3, #16]
 80882bc:	4798      	blx	r3
 80882be:	b928      	cbnz	r0, 80882cc <mbedtls_md_hmac_starts+0xa0>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 80882c0:	6823      	ldr	r3, [r4, #0]
 80882c2:	4631      	mov	r1, r6
 80882c4:	695d      	ldr	r5, [r3, #20]
 80882c6:	68da      	ldr	r2, [r3, #12]
 80882c8:	6860      	ldr	r0, [r4, #4]
 80882ca:	47a8      	blx	r5
 80882cc:	2300      	movs	r3, #0
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80882ce:	4619      	mov	r1, r3
 80882d0:	eb0d 0203 	add.w	r2, sp, r3
 80882d4:	3301      	adds	r3, #1
 80882d6:	2b41      	cmp	r3, #65	; 0x41
 80882d8:	d002      	beq.n	80882e0 <mbedtls_md_hmac_starts+0xb4>
 80882da:	7011      	strb	r1, [r2, #0]
 80882dc:	e7f8      	b.n	80882d0 <mbedtls_md_hmac_starts+0xa4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80882de:	4802      	ldr	r0, [pc, #8]	; (80882e8 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 80882e0:	b010      	add	sp, #64	; 0x40
 80882e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80882e6:	bf00      	nop
 80882e8:	ffffaf00 	.word	0xffffaf00

080882ec <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 80882ec:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80882ee:	b138      	cbz	r0, 8088300 <mbedtls_md_hmac_update+0x14>
 80882f0:	6803      	ldr	r3, [r0, #0]
 80882f2:	b12b      	cbz	r3, 8088300 <mbedtls_md_hmac_update+0x14>
 80882f4:	6884      	ldr	r4, [r0, #8]
 80882f6:	b11c      	cbz	r4, 8088300 <mbedtls_md_hmac_update+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80882f8:	695b      	ldr	r3, [r3, #20]
 80882fa:	6840      	ldr	r0, [r0, #4]
}
 80882fc:	bc10      	pop	{r4}
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80882fe:	4718      	bx	r3
}
 8088300:	4801      	ldr	r0, [pc, #4]	; (8088308 <mbedtls_md_hmac_update+0x1c>)
 8088302:	bc10      	pop	{r4}
 8088304:	4770      	bx	lr
 8088306:	bf00      	nop
 8088308:	ffffaf00 	.word	0xffffaf00

0808830c <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 808830c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088310:	460d      	mov	r5, r1
 8088312:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8088314:	4604      	mov	r4, r0
 8088316:	b318      	cbz	r0, 8088360 <mbedtls_md_hmac_finish+0x54>
 8088318:	6803      	ldr	r3, [r0, #0]
 808831a:	b30b      	cbz	r3, 8088360 <mbedtls_md_hmac_finish+0x54>
 808831c:	6886      	ldr	r6, [r0, #8]
 808831e:	b1fe      	cbz	r6, 8088360 <mbedtls_md_hmac_finish+0x54>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8088320:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 8088322:	4669      	mov	r1, sp
 8088324:	699b      	ldr	r3, [r3, #24]
 8088326:	6840      	ldr	r0, [r0, #4]
 8088328:	4798      	blx	r3
 808832a:	b9d0      	cbnz	r0, 8088362 <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 808832c:	6823      	ldr	r3, [r4, #0]
 808832e:	6860      	ldr	r0, [r4, #4]
 8088330:	691b      	ldr	r3, [r3, #16]
 8088332:	4798      	blx	r3
 8088334:	b9a8      	cbnz	r0, 8088362 <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 8088336:	6823      	ldr	r3, [r4, #0]
 8088338:	19f1      	adds	r1, r6, r7
 808833a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 808833e:	68da      	ldr	r2, [r3, #12]
 8088340:	6860      	ldr	r0, [r4, #4]
 8088342:	47c0      	blx	r8
 8088344:	b968      	cbnz	r0, 8088362 <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 8088346:	6823      	ldr	r3, [r4, #0]
 8088348:	4669      	mov	r1, sp
 808834a:	695e      	ldr	r6, [r3, #20]
 808834c:	689a      	ldr	r2, [r3, #8]
 808834e:	6860      	ldr	r0, [r4, #4]
 8088350:	47b0      	blx	r6
 8088352:	b930      	cbnz	r0, 8088362 <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8088354:	6823      	ldr	r3, [r4, #0]
 8088356:	4629      	mov	r1, r5
 8088358:	699b      	ldr	r3, [r3, #24]
 808835a:	6860      	ldr	r0, [r4, #4]
 808835c:	4798      	blx	r3
 808835e:	e000      	b.n	8088362 <mbedtls_md_hmac_finish+0x56>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8088360:	4801      	ldr	r0, [pc, #4]	; (8088368 <mbedtls_md_hmac_finish+0x5c>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 8088362:	b010      	add	sp, #64	; 0x40
 8088364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8088368:	ffffaf00 	.word	0xffffaf00

0808836c <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 808836c:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 808836e:	4604      	mov	r4, r0
 8088370:	b180      	cbz	r0, 8088394 <mbedtls_md_hmac_reset+0x28>
 8088372:	6803      	ldr	r3, [r0, #0]
 8088374:	b173      	cbz	r3, 8088394 <mbedtls_md_hmac_reset+0x28>
 8088376:	6885      	ldr	r5, [r0, #8]
 8088378:	b165      	cbz	r5, 8088394 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 808837a:	691b      	ldr	r3, [r3, #16]
 808837c:	6840      	ldr	r0, [r0, #4]
 808837e:	4798      	blx	r3
 8088380:	b948      	cbnz	r0, 8088396 <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8088382:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
 8088384:	4629      	mov	r1, r5
 8088386:	695e      	ldr	r6, [r3, #20]
 8088388:	68da      	ldr	r2, [r3, #12]
 808838a:	6860      	ldr	r0, [r4, #4]
 808838c:	4633      	mov	r3, r6
}
 808838e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
 8088392:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8088394:	4800      	ldr	r0, [pc, #0]	; (8088398 <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 8088396:	bd70      	pop	{r4, r5, r6, pc}
 8088398:	ffffaf00 	.word	0xffffaf00

0808839c <mbedtls_md_process>:
    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
    if( ctx == NULL || ctx->md_info == NULL )
 808839c:	b120      	cbz	r0, 80883a8 <mbedtls_md_process+0xc>
 808839e:	6803      	ldr	r3, [r0, #0]
 80883a0:	b113      	cbz	r3, 80883a8 <mbedtls_md_process+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 80883a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80883a4:	6840      	ldr	r0, [r0, #4]
 80883a6:	4718      	bx	r3
}
 80883a8:	4800      	ldr	r0, [pc, #0]	; (80883ac <mbedtls_md_process+0x10>)
 80883aa:	4770      	bx	lr
 80883ac:	ffffaf00 	.word	0xffffaf00

080883b0 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 80883b0:	b100      	cbz	r0, 80883b4 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 80883b2:	7a00      	ldrb	r0, [r0, #8]
}
 80883b4:	4770      	bx	lr

080883b6 <_ZL15mbedtls_zeroizePvj>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80883b6:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80883b8:	2300      	movs	r3, #0
 80883ba:	4288      	cmp	r0, r1
 80883bc:	d002      	beq.n	80883c4 <_ZL15mbedtls_zeroizePvj+0xe>
 80883be:	7003      	strb	r3, [r0, #0]
 80883c0:	3001      	adds	r0, #1
 80883c2:	e7fa      	b.n	80883ba <_ZL15mbedtls_zeroizePvj+0x4>
 80883c4:	4770      	bx	lr

080883c6 <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 80883c6:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80883c8:	2400      	movs	r4, #0
 80883ca:	4294      	cmp	r4, r2
 80883cc:	d00c      	beq.n	80883e8 <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
 80883ce:	5d03      	ldrb	r3, [r0, r4]
 80883d0:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
 80883d2:	405d      	eors	r5, r3
 80883d4:	d006      	beq.n	80883e4 <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
 80883d6:	2d20      	cmp	r5, #32
 80883d8:	d108      	bne.n	80883ec <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 80883da:	f023 0320 	bic.w	r3, r3, #32
 80883de:	3b41      	subs	r3, #65	; 0x41
 80883e0:	2b19      	cmp	r3, #25
 80883e2:	d803      	bhi.n	80883ec <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80883e4:	3401      	adds	r4, #1
 80883e6:	e7f0      	b.n	80883ca <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
 80883e8:	2000      	movs	r0, #0
 80883ea:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
 80883ec:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return( 0 );
}
 80883f0:	bd30      	pop	{r4, r5, pc}

080883f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 80883f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80883f4:	4605      	mov	r5, r0
 80883f6:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 80883f8:	b925      	cbnz	r5, 8088404 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
 80883fa:	1c20      	adds	r0, r4, #0
 80883fc:	bf18      	it	ne
 80883fe:	2001      	movne	r0, #1
 8088400:	4240      	negs	r0, r0
 8088402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
 8088404:	2c00      	cmp	r4, #0
 8088406:	d031      	beq.n	808846c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 8088408:	682a      	ldr	r2, [r5, #0]
 808840a:	6823      	ldr	r3, [r4, #0]
 808840c:	429a      	cmp	r2, r3
 808840e:	d12d      	bne.n	808846c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
 8088410:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 8088412:	6863      	ldr	r3, [r4, #4]
 8088414:	429a      	cmp	r2, r3
 8088416:	d129      	bne.n	808846c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 8088418:	68a1      	ldr	r1, [r4, #8]
 808841a:	68a8      	ldr	r0, [r5, #8]
 808841c:	f00b f88a 	bl	8093534 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
 8088420:	bb20      	cbnz	r0, 808846c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 8088422:	68ef      	ldr	r7, [r5, #12]
 8088424:	68e6      	ldr	r6, [r4, #12]
 8088426:	42b7      	cmp	r7, r6
 8088428:	d108      	bne.n	808843c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
 808842a:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 808842c:	6923      	ldr	r3, [r4, #16]
 808842e:	429a      	cmp	r2, r3
 8088430:	d104      	bne.n	808843c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
 8088432:	6961      	ldr	r1, [r4, #20]
 8088434:	6968      	ldr	r0, [r5, #20]
 8088436:	f00b f87d 	bl	8093534 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
 808843a:	b180      	cbz	r0, 808845e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
 808843c:	2f0c      	cmp	r7, #12
 808843e:	d001      	beq.n	8088444 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8088440:	2f13      	cmp	r7, #19
 8088442:	d113      	bne.n	808846c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 8088444:	2e0c      	cmp	r6, #12
 8088446:	d001      	beq.n	808844c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8088448:	2e13      	cmp	r6, #19
 808844a:	d10f      	bne.n	808846c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
 808844c:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 808844e:	6923      	ldr	r3, [r4, #16]
 8088450:	429a      	cmp	r2, r3
 8088452:	d10b      	bne.n	808846c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 8088454:	6961      	ldr	r1, [r4, #20]
 8088456:	6968      	ldr	r0, [r5, #20]
 8088458:	f7ff ffb5 	bl	80883c6 <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 808845c:	b930      	cbnz	r0, 808846c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 808845e:	7f2a      	ldrb	r2, [r5, #28]
 8088460:	7f23      	ldrb	r3, [r4, #28]
 8088462:	429a      	cmp	r2, r3
 8088464:	d102      	bne.n	808846c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
 8088466:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 8088468:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 808846a:	e7c5      	b.n	80883f8 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
 808846c:	f04f 30ff 	mov.w	r0, #4294967295
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
 8088470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088472 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
 8088472:	b570      	push	{r4, r5, r6, lr}
 8088474:	460e      	mov	r6, r1
 8088476:	4604      	mov	r4, r0
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 8088478:	f00b f8b9 	bl	80935ee <strlen>

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 808847c:	6875      	ldr	r5, [r6, #4]
 808847e:	2d02      	cmp	r5, #2
 8088480:	d91e      	bls.n	80884c0 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8088482:	68b6      	ldr	r6, [r6, #8]
 8088484:	7833      	ldrb	r3, [r6, #0]
 8088486:	2b2a      	cmp	r3, #42	; 0x2a
 8088488:	d11a      	bne.n	80884c0 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 808848a:	7873      	ldrb	r3, [r6, #1]
 808848c:	2b2e      	cmp	r3, #46	; 0x2e
 808848e:	d117      	bne.n	80884c0 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8088490:	4623      	mov	r3, r4
 8088492:	2200      	movs	r2, #0
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 8088494:	4282      	cmp	r2, r0
 8088496:	d015      	beq.n	80884c4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
    {
        if( cn[i] == '.' )
 8088498:	4619      	mov	r1, r3
 808849a:	780c      	ldrb	r4, [r1, #0]
 808849c:	3301      	adds	r3, #1
 808849e:	2c2e      	cmp	r4, #46	; 0x2e
 80884a0:	d001      	beq.n	80884a6 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x34>
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 80884a2:	3201      	adds	r2, #1
 80884a4:	e7f6      	b.n	8088494 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x22>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
 80884a6:	b16a      	cbz	r2, 80884c4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80884a8:	1a82      	subs	r2, r0, r2
 80884aa:	3d01      	subs	r5, #1
 80884ac:	42aa      	cmp	r2, r5
 80884ae:	d109      	bne.n	80884c4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 80884b0:	1c70      	adds	r0, r6, #1
 80884b2:	f7ff ff88 	bl	80883c6 <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80884b6:	3000      	adds	r0, #0
 80884b8:	bf18      	it	ne
 80884ba:	2001      	movne	r0, #1
 80884bc:	4240      	negs	r0, r0
 80884be:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
 80884c0:	2000      	movs	r0, #0
 80884c2:	bd70      	pop	{r4, r5, r6, pc}
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
 80884c4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80884c8:	bd70      	pop	{r4, r5, r6, pc}

080884ca <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80884ca:	b570      	push	{r4, r5, r6, lr}
 80884cc:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
 80884ce:	6802      	ldr	r2, [r0, #0]
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80884d0:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
 80884d2:	428a      	cmp	r2, r1
 80884d4:	d00b      	beq.n	80884ee <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x24>
        return( 0 );

    uid->tag = **p;
 80884d6:	7816      	ldrb	r6, [r2, #0]
 80884d8:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80884da:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
 80884de:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80884e2:	f7fb fc9f 	bl	8083e24 <mbedtls_asn1_get_tag>
 80884e6:	b120      	cbz	r0, 80884f2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x28>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80884e8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80884ec:	d107      	bne.n	80884fe <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x34>
            return( 0 );
 80884ee:	2000      	movs	r0, #0
 80884f0:	bd70      	pop	{r4, r5, r6, pc}

        return( ret );
    }

    uid->p = *p;
 80884f2:	6823      	ldr	r3, [r4, #0]
 80884f4:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 80884f6:	6822      	ldr	r2, [r4, #0]
 80884f8:	686b      	ldr	r3, [r5, #4]
 80884fa:	4413      	add	r3, r2
 80884fc:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 80884fe:	bd70      	pop	{r4, r5, r6, pc}

08088500 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>:
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8088500:	2901      	cmp	r1, #1

/*
 * Check key against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 8088502:	b510      	push	{r4, lr}
 8088504:	4604      	mov	r4, r0
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8088506:	d001      	beq.n	808850c <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0xc>
 8088508:	2906      	cmp	r1, #6
 808850a:	d109      	bne.n	8088520 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0x20>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 808850c:	4610      	mov	r0, r2
 808850e:	f004 fdbf 	bl	808d090 <mbedtls_pk_get_bitlen>
 8088512:	6823      	ldr	r3, [r4, #0]
 8088514:	4298      	cmp	r0, r3
 8088516:	f04f 30ff 	mov.w	r0, #4294967295
 808851a:	bf28      	it	cs
 808851c:	2000      	movcs	r0, #0
 808851e:	bd10      	pop	{r4, pc}

        return( -1 );
    }
#endif

    return( -1 );
 8088520:	f04f 30ff 	mov.w	r0, #4294967295
}
 8088524:	bd10      	pop	{r4, pc}
	...

08088528 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
 8088528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808852c:	4682      	mov	sl, r0
 808852e:	b08d      	sub	sp, #52	; 0x34
 8088530:	460f      	mov	r7, r1
 8088532:	4691      	mov	r9, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
 8088534:	4698      	mov	r8, r3
 8088536:	b94b      	cbnz	r3, 808854c <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 8088538:	4aa5      	ldr	r2, [pc, #660]	; (80887d0 <mbedtls_x509_crt_info+0x2a8>)
 808853a:	f009 f8cd 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808853e:	2800      	cmp	r0, #0
 8088540:	f2c0 82d6 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088544:	4287      	cmp	r7, r0
 8088546:	f200 82d4 	bhi.w	8088af2 <mbedtls_x509_crt_info+0x5ca>
 808854a:	e2d1      	b.n	8088af0 <mbedtls_x509_crt_info+0x5c8>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
                               prefix, crt->version );
 808854c:	699b      	ldr	r3, [r3, #24]
 808854e:	9300      	str	r3, [sp, #0]
 8088550:	4613      	mov	r3, r2
 8088552:	4aa0      	ldr	r2, [pc, #640]	; (80887d4 <mbedtls_x509_crt_info+0x2ac>)
 8088554:	f009 f8c0 	bl	80916d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088558:	2800      	cmp	r0, #0
 808855a:	f2c0 82c9 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808855e:	4287      	cmp	r7, r0
 8088560:	f240 82c6 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088564:	1a3e      	subs	r6, r7, r0
 8088566:	4482      	add	sl, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
                               prefix );
 8088568:	464b      	mov	r3, r9
 808856a:	4a9b      	ldr	r2, [pc, #620]	; (80887d8 <mbedtls_x509_crt_info+0x2b0>)
 808856c:	4631      	mov	r1, r6
 808856e:	4650      	mov	r0, sl
 8088570:	f009 f8b2 	bl	80916d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088574:	2800      	cmp	r0, #0
 8088576:	f2c0 82bb 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808857a:	4286      	cmp	r6, r0
 808857c:	f240 82b8 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088580:	1a36      	subs	r6, r6, r0
 8088582:	4482      	add	sl, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 8088584:	f108 021c 	add.w	r2, r8, #28
 8088588:	4631      	mov	r1, r6
 808858a:	4650      	mov	r0, sl
 808858c:	f7fe fdca 	bl	8087124 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088590:	2800      	cmp	r0, #0
 8088592:	f2c0 82ad 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088596:	4286      	cmp	r6, r0
 8088598:	f240 82aa 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808859c:	1a36      	subs	r6, r6, r0
 808859e:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 80885a0:	464b      	mov	r3, r9
 80885a2:	4a8e      	ldr	r2, [pc, #568]	; (80887dc <mbedtls_x509_crt_info+0x2b4>)
 80885a4:	4631      	mov	r1, r6
 80885a6:	4650      	mov	r0, sl
 80885a8:	f009 f896 	bl	80916d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80885ac:	2800      	cmp	r0, #0
 80885ae:	f2c0 829f 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80885b2:	4286      	cmp	r6, r0
 80885b4:	f240 829c 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80885b8:	1a36      	subs	r6, r6, r0
 80885ba:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 80885bc:	f108 024c 	add.w	r2, r8, #76	; 0x4c
 80885c0:	4631      	mov	r1, r6
 80885c2:	4650      	mov	r0, sl
 80885c4:	f7fe fd2c 	bl	8087020 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80885c8:	2800      	cmp	r0, #0
 80885ca:	f2c0 8291 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80885ce:	4286      	cmp	r6, r0
 80885d0:	f240 828e 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80885d4:	1a36      	subs	r6, r6, r0
 80885d6:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 80885d8:	464b      	mov	r3, r9
 80885da:	4a81      	ldr	r2, [pc, #516]	; (80887e0 <mbedtls_x509_crt_info+0x2b8>)
 80885dc:	4631      	mov	r1, r6
 80885de:	4650      	mov	r0, sl
 80885e0:	f009 f87a 	bl	80916d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80885e4:	2800      	cmp	r0, #0
 80885e6:	f2c0 8283 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80885ea:	4286      	cmp	r6, r0
 80885ec:	f240 8280 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80885f0:	1a36      	subs	r6, r6, r0
 80885f2:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 80885f4:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 80885f8:	4631      	mov	r1, r6
 80885fa:	4650      	mov	r0, sl
 80885fc:	f7fe fd10 	bl	8087020 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088600:	2800      	cmp	r0, #0
 8088602:	f2c0 8275 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088606:	4286      	cmp	r6, r0
 8088608:	f240 8272 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 808860c:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088610:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8088612:	9305      	str	r3, [sp, #20]
 8088614:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088618:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 808861a:	9304      	str	r3, [sp, #16]
 808861c:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 8088620:	4a70      	ldr	r2, [pc, #448]	; (80887e4 <mbedtls_x509_crt_info+0x2bc>)
 8088622:	9303      	str	r3, [sp, #12]
 8088624:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 8088628:	4631      	mov	r1, r6
 808862a:	9302      	str	r3, [sp, #8]
 808862c:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8088630:	4650      	mov	r0, sl
 8088632:	9301      	str	r3, [sp, #4]
 8088634:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 8088638:	9300      	str	r3, [sp, #0]
 808863a:	464b      	mov	r3, r9
 808863c:	f009 f84c 	bl	80916d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088640:	2800      	cmp	r0, #0
 8088642:	f2c0 8255 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088646:	4286      	cmp	r6, r0
 8088648:	f240 8252 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 808864c:	f8d8 30b8 	ldr.w	r3, [r8, #184]	; 0xb8
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088650:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8088652:	9305      	str	r3, [sp, #20]
 8088654:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088658:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 808865a:	9304      	str	r3, [sp, #16]
 808865c:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 8088660:	4a61      	ldr	r2, [pc, #388]	; (80887e8 <mbedtls_x509_crt_info+0x2c0>)
 8088662:	9303      	str	r3, [sp, #12]
 8088664:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
 8088668:	4631      	mov	r1, r6
 808866a:	9302      	str	r3, [sp, #8]
 808866c:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8088670:	4650      	mov	r0, sl
 8088672:	9301      	str	r3, [sp, #4]
 8088674:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 8088678:	9300      	str	r3, [sp, #0]
 808867a:	464b      	mov	r3, r9
 808867c:	f009 f82c 	bl	80916d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088680:	2800      	cmp	r0, #0
 8088682:	f2c0 8235 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088686:	4286      	cmp	r6, r0
 8088688:	f240 8232 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808868c:	1a36      	subs	r6, r6, r0
 808868e:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 8088690:	464b      	mov	r3, r9
 8088692:	4a56      	ldr	r2, [pc, #344]	; (80887ec <mbedtls_x509_crt_info+0x2c4>)
 8088694:	4631      	mov	r1, r6
 8088696:	4650      	mov	r0, sl
 8088698:	f009 f81e 	bl	80916d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 808869c:	2800      	cmp	r0, #0
 808869e:	f2c0 8227 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80886a2:	4286      	cmp	r6, r0
 80886a4:	f240 8224 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 80886a8:	f8d8 212c 	ldr.w	r2, [r8, #300]	; 0x12c
 80886ac:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 80886b0:	9201      	str	r2, [sp, #4]
 80886b2:	f898 2128 	ldrb.w	r2, [r8, #296]	; 0x128
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80886b6:	1a36      	subs	r6, r6, r0
 80886b8:	4482      	add	sl, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 80886ba:	9200      	str	r2, [sp, #0]
 80886bc:	4631      	mov	r1, r6
 80886be:	f108 0228 	add.w	r2, r8, #40	; 0x28
 80886c2:	4650      	mov	r0, sl
 80886c4:	f7fe fd78 	bl	80871b8 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80886c8:	1e05      	subs	r5, r0, #0
 80886ca:	f2c0 8211 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80886ce:	42ae      	cmp	r6, r5
 80886d0:	f240 820e 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 80886d4:	f108 0bbc 	add.w	fp, r8, #188	; 0xbc
 80886d8:	4658      	mov	r0, fp
 80886da:	f004 fd3d 	bl	808d158 <mbedtls_pk_get_name>
 80886de:	ac07      	add	r4, sp, #28
 80886e0:	4602      	mov	r2, r0
 80886e2:	2112      	movs	r1, #18
 80886e4:	4620      	mov	r0, r4
 80886e6:	f7fe fd8f 	bl	8087208 <mbedtls_x509_key_size_helper>
 80886ea:	2800      	cmp	r0, #0
 80886ec:	f040 8201 	bne.w	8088af2 <mbedtls_x509_crt_info+0x5ca>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 80886f0:	4658      	mov	r0, fp
 80886f2:	f004 fccd 	bl	808d090 <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80886f6:	1b76      	subs	r6, r6, r5
 80886f8:	4455      	add	r5, sl
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 80886fa:	9001      	str	r0, [sp, #4]
 80886fc:	9400      	str	r4, [sp, #0]
 80886fe:	464b      	mov	r3, r9
 8088700:	4a3b      	ldr	r2, [pc, #236]	; (80887f0 <mbedtls_x509_crt_info+0x2c8>)
 8088702:	4631      	mov	r1, r6
 8088704:	4628      	mov	r0, r5
 8088706:	f008 ffe7 	bl	80916d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 808870a:	2800      	cmp	r0, #0
 808870c:	f2c0 81f0 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088710:	4286      	cmp	r6, r0
 8088712:	f240 81ed 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8088716:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 808871a:	1a34      	subs	r4, r6, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 808871c:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 808871e:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8088720:	d527      	bpl.n	8088772 <mbedtls_x509_crt_info+0x24a>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 8088722:	f8d8 10fc 	ldr.w	r1, [r8, #252]	; 0xfc
 8088726:	4a33      	ldr	r2, [pc, #204]	; (80887f4 <mbedtls_x509_crt_info+0x2cc>)
 8088728:	4b33      	ldr	r3, [pc, #204]	; (80887f8 <mbedtls_x509_crt_info+0x2d0>)
                        crt->ca_istrue ? "true" : "false" );
 808872a:	4628      	mov	r0, r5
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 808872c:	2900      	cmp	r1, #0
 808872e:	bf18      	it	ne
 8088730:	4613      	movne	r3, r2
                        crt->ca_istrue ? "true" : "false" );
 8088732:	4a32      	ldr	r2, [pc, #200]	; (80887fc <mbedtls_x509_crt_info+0x2d4>)
 8088734:	9300      	str	r3, [sp, #0]
 8088736:	4621      	mov	r1, r4
 8088738:	464b      	mov	r3, r9
 808873a:	f008 ffcd 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808873e:	2800      	cmp	r0, #0
 8088740:	f2c0 81d6 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088744:	4284      	cmp	r4, r0
 8088746:	f240 81d3 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>

        if( crt->max_pathlen > 0 )
 808874a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 808874e:	1a24      	subs	r4, r4, r0

        if( crt->max_pathlen > 0 )
 8088750:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088752:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
 8088754:	dd0d      	ble.n	8088772 <mbedtls_x509_crt_info+0x24a>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 8088756:	3b01      	subs	r3, #1
 8088758:	4a29      	ldr	r2, [pc, #164]	; (8088800 <mbedtls_x509_crt_info+0x2d8>)
 808875a:	4621      	mov	r1, r4
 808875c:	4628      	mov	r0, r5
 808875e:	f008 ffbb 	bl	80916d8 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8088762:	2800      	cmp	r0, #0
 8088764:	f2c0 81c4 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088768:	4284      	cmp	r4, r0
 808876a:	f240 81c1 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808876e:	1a24      	subs	r4, r4, r0
 8088770:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8088772:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8088776:	069e      	lsls	r6, r3, #26
 8088778:	d54e      	bpl.n	8088818 <mbedtls_x509_crt_info+0x2f0>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 808877a:	464b      	mov	r3, r9
 808877c:	4a21      	ldr	r2, [pc, #132]	; (8088804 <mbedtls_x509_crt_info+0x2dc>)
 808877e:	4621      	mov	r1, r4
 8088780:	4628      	mov	r0, r5
 8088782:	f008 ffa9 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088786:	2800      	cmp	r0, #0
 8088788:	f2c0 81b2 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808878c:	42a0      	cmp	r0, r4
 808878e:	f080 81af 	bcs.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
 8088792:	4e1d      	ldr	r6, [pc, #116]	; (8088808 <mbedtls_x509_crt_info+0x2e0>)
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088794:	1a24      	subs	r4, r4, r0
 8088796:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
 8088798:	f108 02e8 	add.w	r2, r8, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
 808879c:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
 808879e:	6851      	ldr	r1, [r2, #4]
 80887a0:	2300      	movs	r3, #0
 80887a2:	4401      	add	r1, r0
 80887a4:	42a1      	cmp	r1, r4
 80887a6:	d301      	bcc.n	80887ac <mbedtls_x509_crt_info+0x284>
        {
            *p = '\0';
 80887a8:	702b      	strb	r3, [r5, #0]
 80887aa:	e1a1      	b.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
 80887ac:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
 80887ae:	4283      	cmp	r3, r0
 80887b0:	d003      	beq.n	80887ba <mbedtls_x509_crt_info+0x292>
            *p++ = sep[i];
 80887b2:	5cf1      	ldrb	r1, [r6, r3]
 80887b4:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
 80887b6:	3301      	adds	r3, #1
 80887b8:	e7f9      	b.n	80887ae <mbedtls_x509_crt_info+0x286>
 80887ba:	441d      	add	r5, r3
 80887bc:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
 80887be:	6851      	ldr	r1, [r2, #4]
 80887c0:	1a2b      	subs	r3, r5, r0
 80887c2:	4299      	cmp	r1, r3
 80887c4:	d922      	bls.n	808880c <mbedtls_x509_crt_info+0x2e4>
            *p++ = cur->buf.p[i];
 80887c6:	6891      	ldr	r1, [r2, #8]
 80887c8:	5ccb      	ldrb	r3, [r1, r3]
 80887ca:	f805 3b01 	strb.w	r3, [r5], #1
 80887ce:	e7f6      	b.n	80887be <mbedtls_x509_crt_info+0x296>
 80887d0:	0809572f 	.word	0x0809572f
 80887d4:	0809574f 	.word	0x0809574f
 80887d8:	08095769 	.word	0x08095769
 80887dc:	08095780 	.word	0x08095780
 80887e0:	08095798 	.word	0x08095798
 80887e4:	080957b0 	.word	0x080957b0
 80887e8:	080957e5 	.word	0x080957e5
 80887ec:	0809581a 	.word	0x0809581a
 80887f0:	08095832 	.word	0x08095832
 80887f4:	08095724 	.word	0x08095724
 80887f8:	08095729 	.word	0x08095729
 80887fc:	08095844 	.word	0x08095844
 8088800:	08095861 	.word	0x08095861
 8088804:	08095872 	.word	0x08095872
 8088808:	0809457c 	.word	0x0809457c

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
 808880c:	68d2      	ldr	r2, [r2, #12]
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
        sep_len = 2;
 808880e:	2002      	movs	r0, #2
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
 8088810:	4eb9      	ldr	r6, [pc, #740]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
 8088812:	2a00      	cmp	r2, #0
 8088814:	d1c3      	bne.n	808879e <mbedtls_x509_crt_info+0x276>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
 8088816:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 8088818:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 808881c:	03d8      	lsls	r0, r3, #15
 808881e:	f140 8090 	bpl.w	8088942 <mbedtls_x509_crt_info+0x41a>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 8088822:	464b      	mov	r3, r9
 8088824:	4ab5      	ldr	r2, [pc, #724]	; (8088afc <mbedtls_x509_crt_info+0x5d4>)
 8088826:	4621      	mov	r1, r4
 8088828:	4628      	mov	r0, r5
 808882a:	f008 ff55 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808882e:	2800      	cmp	r0, #0
 8088830:	f2c0 815e 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088834:	42a0      	cmp	r0, r4
 8088836:	f080 815b 	bcs.w	8088af0 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 808883a:	f898 6118 	ldrb.w	r6, [r8, #280]	; 0x118
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 808883e:	1a24      	subs	r4, r4, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8088840:	0631      	lsls	r1, r6, #24
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088842:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8088844:	4bae      	ldr	r3, [pc, #696]	; (8088b00 <mbedtls_x509_crt_info+0x5d8>)
 8088846:	d50d      	bpl.n	8088864 <mbedtls_x509_crt_info+0x33c>
 8088848:	4aae      	ldr	r2, [pc, #696]	; (8088b04 <mbedtls_x509_crt_info+0x5dc>)
 808884a:	4621      	mov	r1, r4
 808884c:	4628      	mov	r0, r5
 808884e:	f008 ff43 	bl	80916d8 <snprintf>
 8088852:	2800      	cmp	r0, #0
 8088854:	f2c0 814c 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088858:	4284      	cmp	r4, r0
 808885a:	f240 8149 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808885e:	4ba6      	ldr	r3, [pc, #664]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 8088860:	1a24      	subs	r4, r4, r0
 8088862:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 8088864:	0672      	lsls	r2, r6, #25
 8088866:	d50d      	bpl.n	8088884 <mbedtls_x509_crt_info+0x35c>
 8088868:	4aa7      	ldr	r2, [pc, #668]	; (8088b08 <mbedtls_x509_crt_info+0x5e0>)
 808886a:	4621      	mov	r1, r4
 808886c:	4628      	mov	r0, r5
 808886e:	f008 ff33 	bl	80916d8 <snprintf>
 8088872:	2800      	cmp	r0, #0
 8088874:	f2c0 813c 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088878:	4284      	cmp	r4, r0
 808887a:	f240 8139 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808887e:	4b9e      	ldr	r3, [pc, #632]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 8088880:	1a24      	subs	r4, r4, r0
 8088882:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 8088884:	06b0      	lsls	r0, r6, #26
 8088886:	d50d      	bpl.n	80888a4 <mbedtls_x509_crt_info+0x37c>
 8088888:	4aa0      	ldr	r2, [pc, #640]	; (8088b0c <mbedtls_x509_crt_info+0x5e4>)
 808888a:	4621      	mov	r1, r4
 808888c:	4628      	mov	r0, r5
 808888e:	f008 ff23 	bl	80916d8 <snprintf>
 8088892:	2800      	cmp	r0, #0
 8088894:	f2c0 812c 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088898:	4284      	cmp	r4, r0
 808889a:	f240 8129 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808889e:	4b96      	ldr	r3, [pc, #600]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 80888a0:	1a24      	subs	r4, r4, r0
 80888a2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 80888a4:	06f1      	lsls	r1, r6, #27
 80888a6:	d50d      	bpl.n	80888c4 <mbedtls_x509_crt_info+0x39c>
 80888a8:	4a99      	ldr	r2, [pc, #612]	; (8088b10 <mbedtls_x509_crt_info+0x5e8>)
 80888aa:	4621      	mov	r1, r4
 80888ac:	4628      	mov	r0, r5
 80888ae:	f008 ff13 	bl	80916d8 <snprintf>
 80888b2:	2800      	cmp	r0, #0
 80888b4:	f2c0 811c 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80888b8:	4284      	cmp	r4, r0
 80888ba:	f240 8119 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80888be:	4b8e      	ldr	r3, [pc, #568]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 80888c0:	1a24      	subs	r4, r4, r0
 80888c2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 80888c4:	0732      	lsls	r2, r6, #28
 80888c6:	d50d      	bpl.n	80888e4 <mbedtls_x509_crt_info+0x3bc>
 80888c8:	4a92      	ldr	r2, [pc, #584]	; (8088b14 <mbedtls_x509_crt_info+0x5ec>)
 80888ca:	4621      	mov	r1, r4
 80888cc:	4628      	mov	r0, r5
 80888ce:	f008 ff03 	bl	80916d8 <snprintf>
 80888d2:	2800      	cmp	r0, #0
 80888d4:	f2c0 810c 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80888d8:	4284      	cmp	r4, r0
 80888da:	f240 8109 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80888de:	4b86      	ldr	r3, [pc, #536]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 80888e0:	1a24      	subs	r4, r4, r0
 80888e2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 80888e4:	0770      	lsls	r0, r6, #29
 80888e6:	d50d      	bpl.n	8088904 <mbedtls_x509_crt_info+0x3dc>
 80888e8:	4a8b      	ldr	r2, [pc, #556]	; (8088b18 <mbedtls_x509_crt_info+0x5f0>)
 80888ea:	4621      	mov	r1, r4
 80888ec:	4628      	mov	r0, r5
 80888ee:	f008 fef3 	bl	80916d8 <snprintf>
 80888f2:	2800      	cmp	r0, #0
 80888f4:	f2c0 80fc 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80888f8:	4284      	cmp	r4, r0
 80888fa:	f240 80f9 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80888fe:	4b7e      	ldr	r3, [pc, #504]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 8088900:	1a24      	subs	r4, r4, r0
 8088902:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 8088904:	07b1      	lsls	r1, r6, #30
 8088906:	d50d      	bpl.n	8088924 <mbedtls_x509_crt_info+0x3fc>
 8088908:	4a84      	ldr	r2, [pc, #528]	; (8088b1c <mbedtls_x509_crt_info+0x5f4>)
 808890a:	4621      	mov	r1, r4
 808890c:	4628      	mov	r0, r5
 808890e:	f008 fee3 	bl	80916d8 <snprintf>
 8088912:	2800      	cmp	r0, #0
 8088914:	f2c0 80ec 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088918:	4284      	cmp	r4, r0
 808891a:	f240 80e9 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808891e:	4b76      	ldr	r3, [pc, #472]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 8088920:	1a24      	subs	r4, r4, r0
 8088922:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 8088924:	07f2      	lsls	r2, r6, #31
 8088926:	d50c      	bpl.n	8088942 <mbedtls_x509_crt_info+0x41a>
 8088928:	4a7d      	ldr	r2, [pc, #500]	; (8088b20 <mbedtls_x509_crt_info+0x5f8>)
 808892a:	4621      	mov	r1, r4
 808892c:	4628      	mov	r0, r5
 808892e:	f008 fed3 	bl	80916d8 <snprintf>
 8088932:	2800      	cmp	r0, #0
 8088934:	f2c0 80dc 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088938:	4284      	cmp	r4, r0
 808893a:	f240 80d9 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808893e:	1a24      	subs	r4, r4, r0
 8088940:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 8088942:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8088946:	075e      	lsls	r6, r3, #29
 8088948:	f140 8096 	bpl.w	8088a78 <mbedtls_x509_crt_info+0x550>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 808894c:	464b      	mov	r3, r9
 808894e:	4a75      	ldr	r2, [pc, #468]	; (8088b24 <mbedtls_x509_crt_info+0x5fc>)
 8088950:	4621      	mov	r1, r4
 8088952:	4628      	mov	r0, r5
 8088954:	f008 fec0 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088958:	2800      	cmp	r0, #0
 808895a:	f2c0 80c9 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 808895e:	42a0      	cmp	r0, r4
 8088960:	f080 80c6 	bcs.w	8088af0 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 8088964:	f8d8 6104 	ldr.w	r6, [r8, #260]	; 0x104
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088968:	1a24      	subs	r4, r4, r0
 808896a:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 808896c:	0630      	lsls	r0, r6, #24
 808896e:	4b64      	ldr	r3, [pc, #400]	; (8088b00 <mbedtls_x509_crt_info+0x5d8>)
 8088970:	d50d      	bpl.n	808898e <mbedtls_x509_crt_info+0x466>
 8088972:	4a6d      	ldr	r2, [pc, #436]	; (8088b28 <mbedtls_x509_crt_info+0x600>)
 8088974:	4621      	mov	r1, r4
 8088976:	4628      	mov	r0, r5
 8088978:	f008 feae 	bl	80916d8 <snprintf>
 808897c:	2800      	cmp	r0, #0
 808897e:	f2c0 80b7 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088982:	4284      	cmp	r4, r0
 8088984:	f240 80b4 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088988:	4b5b      	ldr	r3, [pc, #364]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 808898a:	1a24      	subs	r4, r4, r0
 808898c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 808898e:	0671      	lsls	r1, r6, #25
 8088990:	d50d      	bpl.n	80889ae <mbedtls_x509_crt_info+0x486>
 8088992:	4a66      	ldr	r2, [pc, #408]	; (8088b2c <mbedtls_x509_crt_info+0x604>)
 8088994:	4621      	mov	r1, r4
 8088996:	4628      	mov	r0, r5
 8088998:	f008 fe9e 	bl	80916d8 <snprintf>
 808899c:	2800      	cmp	r0, #0
 808899e:	f2c0 80a7 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80889a2:	4284      	cmp	r4, r0
 80889a4:	f240 80a4 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80889a8:	4b53      	ldr	r3, [pc, #332]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 80889aa:	1a24      	subs	r4, r4, r0
 80889ac:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 80889ae:	06b2      	lsls	r2, r6, #26
 80889b0:	d50d      	bpl.n	80889ce <mbedtls_x509_crt_info+0x4a6>
 80889b2:	4a5f      	ldr	r2, [pc, #380]	; (8088b30 <mbedtls_x509_crt_info+0x608>)
 80889b4:	4621      	mov	r1, r4
 80889b6:	4628      	mov	r0, r5
 80889b8:	f008 fe8e 	bl	80916d8 <snprintf>
 80889bc:	2800      	cmp	r0, #0
 80889be:	f2c0 8097 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80889c2:	4284      	cmp	r4, r0
 80889c4:	f240 8094 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80889c8:	4b4b      	ldr	r3, [pc, #300]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 80889ca:	1a24      	subs	r4, r4, r0
 80889cc:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 80889ce:	06f0      	lsls	r0, r6, #27
 80889d0:	d50d      	bpl.n	80889ee <mbedtls_x509_crt_info+0x4c6>
 80889d2:	4a58      	ldr	r2, [pc, #352]	; (8088b34 <mbedtls_x509_crt_info+0x60c>)
 80889d4:	4621      	mov	r1, r4
 80889d6:	4628      	mov	r0, r5
 80889d8:	f008 fe7e 	bl	80916d8 <snprintf>
 80889dc:	2800      	cmp	r0, #0
 80889de:	f2c0 8087 	blt.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80889e2:	4284      	cmp	r4, r0
 80889e4:	f240 8084 	bls.w	8088af0 <mbedtls_x509_crt_info+0x5c8>
 80889e8:	4b43      	ldr	r3, [pc, #268]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 80889ea:	1a24      	subs	r4, r4, r0
 80889ec:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 80889ee:	0731      	lsls	r1, r6, #28
 80889f0:	d50b      	bpl.n	8088a0a <mbedtls_x509_crt_info+0x4e2>
 80889f2:	4a51      	ldr	r2, [pc, #324]	; (8088b38 <mbedtls_x509_crt_info+0x610>)
 80889f4:	4621      	mov	r1, r4
 80889f6:	4628      	mov	r0, r5
 80889f8:	f008 fe6e 	bl	80916d8 <snprintf>
 80889fc:	2800      	cmp	r0, #0
 80889fe:	db77      	blt.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088a00:	4284      	cmp	r4, r0
 8088a02:	d975      	bls.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088a04:	4b3c      	ldr	r3, [pc, #240]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 8088a06:	1a24      	subs	r4, r4, r0
 8088a08:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 8088a0a:	0772      	lsls	r2, r6, #29
 8088a0c:	d50b      	bpl.n	8088a26 <mbedtls_x509_crt_info+0x4fe>
 8088a0e:	4a4b      	ldr	r2, [pc, #300]	; (8088b3c <mbedtls_x509_crt_info+0x614>)
 8088a10:	4621      	mov	r1, r4
 8088a12:	4628      	mov	r0, r5
 8088a14:	f008 fe60 	bl	80916d8 <snprintf>
 8088a18:	2800      	cmp	r0, #0
 8088a1a:	db69      	blt.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088a1c:	4284      	cmp	r4, r0
 8088a1e:	d967      	bls.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088a20:	4b35      	ldr	r3, [pc, #212]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 8088a22:	1a24      	subs	r4, r4, r0
 8088a24:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 8088a26:	07b0      	lsls	r0, r6, #30
 8088a28:	d50b      	bpl.n	8088a42 <mbedtls_x509_crt_info+0x51a>
 8088a2a:	4a45      	ldr	r2, [pc, #276]	; (8088b40 <mbedtls_x509_crt_info+0x618>)
 8088a2c:	4621      	mov	r1, r4
 8088a2e:	4628      	mov	r0, r5
 8088a30:	f008 fe52 	bl	80916d8 <snprintf>
 8088a34:	2800      	cmp	r0, #0
 8088a36:	db5b      	blt.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088a38:	4284      	cmp	r4, r0
 8088a3a:	d959      	bls.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088a3c:	4b2e      	ldr	r3, [pc, #184]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 8088a3e:	1a24      	subs	r4, r4, r0
 8088a40:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 8088a42:	07f1      	lsls	r1, r6, #31
 8088a44:	d50b      	bpl.n	8088a5e <mbedtls_x509_crt_info+0x536>
 8088a46:	4a3f      	ldr	r2, [pc, #252]	; (8088b44 <mbedtls_x509_crt_info+0x61c>)
 8088a48:	4621      	mov	r1, r4
 8088a4a:	4628      	mov	r0, r5
 8088a4c:	f008 fe44 	bl	80916d8 <snprintf>
 8088a50:	2800      	cmp	r0, #0
 8088a52:	db4d      	blt.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088a54:	4284      	cmp	r4, r0
 8088a56:	d94b      	bls.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088a58:	4b27      	ldr	r3, [pc, #156]	; (8088af8 <mbedtls_x509_crt_info+0x5d0>)
 8088a5a:	1a24      	subs	r4, r4, r0
 8088a5c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 8088a5e:	0432      	lsls	r2, r6, #16
 8088a60:	d50a      	bpl.n	8088a78 <mbedtls_x509_crt_info+0x550>
 8088a62:	4a39      	ldr	r2, [pc, #228]	; (8088b48 <mbedtls_x509_crt_info+0x620>)
 8088a64:	4621      	mov	r1, r4
 8088a66:	4628      	mov	r0, r5
 8088a68:	f008 fe36 	bl	80916d8 <snprintf>
 8088a6c:	2800      	cmp	r0, #0
 8088a6e:	db3f      	blt.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088a70:	4284      	cmp	r4, r0
 8088a72:	d93d      	bls.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088a74:	1a24      	subs	r4, r4, r0
 8088a76:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 8088a78:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8088a7c:	051b      	lsls	r3, r3, #20
 8088a7e:	d52b      	bpl.n	8088ad8 <mbedtls_x509_crt_info+0x5b0>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 8088a80:	464b      	mov	r3, r9
 8088a82:	4a32      	ldr	r2, [pc, #200]	; (8088b4c <mbedtls_x509_crt_info+0x624>)
 8088a84:	4621      	mov	r1, r4
 8088a86:	4628      	mov	r0, r5
 8088a88:	f008 fe26 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088a8c:	2800      	cmp	r0, #0
 8088a8e:	db2f      	blt.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088a90:	42a0      	cmp	r0, r4
 8088a92:	d22d      	bcs.n	8088af0 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_ext_key_usage( &p, &n,
 8088a94:	f508 7684 	add.w	r6, r8, #264	; 0x108
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
 8088a98:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8088b5c <mbedtls_x509_crt_info+0x634>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
 8088a9c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8088b00 <mbedtls_x509_crt_info+0x5d8>
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
 8088aa0:	1a24      	subs	r4, r4, r0
    char *p = *buf;
 8088aa2:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 8088aa4:	a906      	add	r1, sp, #24
 8088aa6:	4630      	mov	r0, r6
 8088aa8:	f7fc fe04 	bl	80856b4 <mbedtls_oid_get_extended_key_usage>
 8088aac:	b108      	cbz	r0, 8088ab2 <mbedtls_x509_crt_info+0x58a>
            desc = "???";
 8088aae:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8088ab2:	9b06      	ldr	r3, [sp, #24]
 8088ab4:	4a26      	ldr	r2, [pc, #152]	; (8088b50 <mbedtls_x509_crt_info+0x628>)
 8088ab6:	9300      	str	r3, [sp, #0]
 8088ab8:	4621      	mov	r1, r4
 8088aba:	4643      	mov	r3, r8
 8088abc:	4628      	mov	r0, r5
 8088abe:	f008 fe0b 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088ac2:	2800      	cmp	r0, #0
 8088ac4:	db14      	blt.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088ac6:	42a0      	cmp	r0, r4
 8088ac8:	d212      	bcs.n	8088af0 <mbedtls_x509_crt_info+0x5c8>

        sep = ", ";

        cur = cur->next;
 8088aca:	68f6      	ldr	r6, [r6, #12]
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088acc:	1a24      	subs	r4, r4, r0
 8088ace:	4405      	add	r5, r0

        sep = ", ";
 8088ad0:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8088af8 <mbedtls_x509_crt_info+0x5d0>
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
 8088ad4:	2e00      	cmp	r6, #0
 8088ad6:	d1e5      	bne.n	8088aa4 <mbedtls_x509_crt_info+0x57c>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
 8088ad8:	4a1e      	ldr	r2, [pc, #120]	; (8088b54 <mbedtls_x509_crt_info+0x62c>)
 8088ada:	4621      	mov	r1, r4
 8088adc:	4628      	mov	r0, r5
 8088ade:	f008 fdfb 	bl	80916d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088ae2:	2800      	cmp	r0, #0
 8088ae4:	db04      	blt.n	8088af0 <mbedtls_x509_crt_info+0x5c8>
 8088ae6:	4284      	cmp	r4, r0
 8088ae8:	d902      	bls.n	8088af0 <mbedtls_x509_crt_info+0x5c8>

    return( (int) ( size - n ) );
 8088aea:	1a20      	subs	r0, r4, r0
 8088aec:	1a38      	subs	r0, r7, r0
 8088aee:	e000      	b.n	8088af2 <mbedtls_x509_crt_info+0x5ca>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 8088af0:	4819      	ldr	r0, [pc, #100]	; (8088b58 <mbedtls_x509_crt_info+0x630>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
 8088af2:	b00d      	add	sp, #52	; 0x34
 8088af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088af8:	08095428 	.word	0x08095428
 8088afc:	0809588a 	.word	0x0809588a
 8088b00:	0809457c 	.word	0x0809457c
 8088b04:	080958a2 	.word	0x080958a2
 8088b08:	080958af 	.word	0x080958af
 8088b0c:	080958bc 	.word	0x080958bc
 8088b10:	080958c4 	.word	0x080958c4
 8088b14:	080958d5 	.word	0x080958d5
 8088b18:	080958e0 	.word	0x080958e0
 8088b1c:	080958e9 	.word	0x080958e9
 8088b20:	080958f4 	.word	0x080958f4
 8088b24:	08095908 	.word	0x08095908
 8088b28:	08095920 	.word	0x08095920
 8088b2c:	08095934 	.word	0x08095934
 8088b30:	08095946 	.word	0x08095946
 8088b34:	08095959 	.word	0x08095959
 8088b38:	0809596d 	.word	0x0809596d
 8088b3c:	0809597d 	.word	0x0809597d
 8088b40:	0809598d 	.word	0x0809598d
 8088b44:	08095998 	.word	0x08095998
 8088b48:	080959a8 	.word	0x080959a8
 8088b4c:	080959b8 	.word	0x080959b8
 8088b50:	080959d0 	.word	0x080959d0
 8088b54:	080946dc 	.word	0x080946dc
 8088b58:	ffffd680 	.word	0xffffd680
 8088b5c:	0809543f 	.word	0x0809543f

08088b60 <mbedtls_x509_crt_verify_info>:
    { 0, NULL }
};

int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
                          uint32_t flags )
{
 8088b60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8088b64:	4607      	mov	r7, r0
 8088b66:	460d      	mov	r5, r1
 8088b68:	4691      	mov	r9, r2
 8088b6a:	4698      	mov	r8, r3
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;
 8088b6c:	460c      	mov	r4, r1
 8088b6e:	4e18      	ldr	r6, [pc, #96]	; (8088bd0 <mbedtls_x509_crt_verify_info+0x70>)

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 8088b70:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8088b74:	b1cb      	cbz	r3, 8088baa <mbedtls_x509_crt_verify_info+0x4a>
    {
        if( ( flags & cur->code ) == 0 )
 8088b76:	f856 2c08 	ldr.w	r2, [r6, #-8]
 8088b7a:	ea18 0f02 	tst.w	r8, r2
 8088b7e:	d012      	beq.n	8088ba6 <mbedtls_x509_crt_verify_info+0x46>
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8088b80:	9300      	str	r3, [sp, #0]
 8088b82:	4a14      	ldr	r2, [pc, #80]	; (8088bd4 <mbedtls_x509_crt_verify_info+0x74>)
 8088b84:	464b      	mov	r3, r9
 8088b86:	4621      	mov	r1, r4
 8088b88:	4638      	mov	r0, r7
 8088b8a:	f008 fda5 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088b8e:	2800      	cmp	r0, #0
 8088b90:	da01      	bge.n	8088b96 <mbedtls_x509_crt_verify_info+0x36>
 8088b92:	4811      	ldr	r0, [pc, #68]	; (8088bd8 <mbedtls_x509_crt_verify_info+0x78>)
 8088b94:	e018      	b.n	8088bc8 <mbedtls_x509_crt_verify_info+0x68>
 8088b96:	4284      	cmp	r4, r0
 8088b98:	d9fb      	bls.n	8088b92 <mbedtls_x509_crt_verify_info+0x32>
        flags ^= cur->code;
 8088b9a:	f856 3c08 	ldr.w	r3, [r6, #-8]
    {
        if( ( flags & cur->code ) == 0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088b9e:	1a24      	subs	r4, r4, r0
 8088ba0:	4407      	add	r7, r0
        flags ^= cur->code;
 8088ba2:	ea88 0803 	eor.w	r8, r8, r3
 8088ba6:	3608      	adds	r6, #8
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 8088ba8:	e7e2      	b.n	8088b70 <mbedtls_x509_crt_verify_info+0x10>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
        flags ^= cur->code;
    }

    if( flags != 0 )
 8088baa:	f1b8 0f00 	cmp.w	r8, #0
 8088bae:	d00a      	beq.n	8088bc6 <mbedtls_x509_crt_verify_info+0x66>
    {
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
                                       "(this should not happen)\n", prefix );
 8088bb0:	464b      	mov	r3, r9
 8088bb2:	4a0a      	ldr	r2, [pc, #40]	; (8088bdc <mbedtls_x509_crt_verify_info+0x7c>)
 8088bb4:	4621      	mov	r1, r4
 8088bb6:	4638      	mov	r0, r7
 8088bb8:	f008 fd8e 	bl	80916d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088bbc:	2800      	cmp	r0, #0
 8088bbe:	dbe8      	blt.n	8088b92 <mbedtls_x509_crt_verify_info+0x32>
 8088bc0:	4284      	cmp	r4, r0
 8088bc2:	d9e6      	bls.n	8088b92 <mbedtls_x509_crt_verify_info+0x32>
 8088bc4:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 8088bc6:	1b28      	subs	r0, r5, r4
}
 8088bc8:	b003      	add	sp, #12
 8088bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8088bce:	bf00      	nop
 8088bd0:	08095674 	.word	0x08095674
 8088bd4:	080959d5 	.word	0x080959d5
 8088bd8:	ffffd680 	.word	0xffffd680
 8088bdc:	080959db 	.word	0x080959db

08088be0 <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 8088be0:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 8088be4:	f013 0304 	ands.w	r3, r3, #4
 8088be8:	d01a      	beq.n	8088c20 <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 8088bea:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 8088bee:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 8088bf2:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
 8088bf6:	f023 0301 	bic.w	r3, r3, #1
 8088bfa:	f020 0001 	bic.w	r0, r0, #1
 8088bfe:	400b      	ands	r3, r1
 8088c00:	4298      	cmp	r0, r3
 8088c02:	d10c      	bne.n	8088c1e <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8088c04:	f248 0301 	movw	r3, #32769	; 0x8001
 8088c08:	f248 0001 	movw	r0, #32769	; 0x8001
 8088c0c:	430a      	orrs	r2, r1
 8088c0e:	4013      	ands	r3, r2
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088c10:	4a04      	ldr	r2, [pc, #16]	; (8088c24 <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8088c12:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088c14:	4298      	cmp	r0, r3
 8088c16:	bf14      	ite	ne
 8088c18:	4613      	movne	r3, r2
 8088c1a:	2300      	moveq	r3, #0
 8088c1c:	e000      	b.n	8088c20 <mbedtls_x509_crt_check_key_usage+0x40>
 8088c1e:	4b01      	ldr	r3, [pc, #4]	; (8088c24 <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
 8088c20:	4618      	mov	r0, r3
 8088c22:	4770      	bx	lr
 8088c24:	ffffd800 	.word	0xffffd800

08088c28 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 8088c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088c2c:	4606      	mov	r6, r0
 8088c2e:	460d      	mov	r5, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8088c30:	304c      	adds	r0, #76	; 0x4c
 8088c32:	316c      	adds	r1, #108	; 0x6c
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 8088c34:	4617      	mov	r7, r2
 8088c36:	4698      	mov	r8, r3
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8088c38:	f7ff fbdb 	bl	80883f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 8088c3c:	4604      	mov	r4, r0
 8088c3e:	b9d8      	cbnz	r0, 8088c78 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 8088c40:	b177      	cbz	r7, 8088c60 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x38>
 8088c42:	69af      	ldr	r7, [r5, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 8088c44:	f1b8 0f00 	cmp.w	r8, #0
 8088c48:	d008      	beq.n	8088c5c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
 8088c4a:	6872      	ldr	r2, [r6, #4]
    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 8088c4c:	686b      	ldr	r3, [r5, #4]
 8088c4e:	429a      	cmp	r2, r3
 8088c50:	d104      	bne.n	8088c5c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 8088c52:	68a9      	ldr	r1, [r5, #8]
 8088c54:	68b0      	ldr	r0, [r6, #8]
 8088c56:	f00a fc6d 	bl	8093534 <memcmp>
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
        child->raw.len == parent->raw.len &&
 8088c5a:	b178      	cbz	r0, 8088c7c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 8088c5c:	2f02      	cmp	r7, #2
 8088c5e:	dd0d      	ble.n	8088c7c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
 8088c60:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8088c64:	b143      	cbz	r3, 8088c78 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 8088c66:	2104      	movs	r1, #4
 8088c68:	4628      	mov	r0, r5
 8088c6a:	f7ff ffb9 	bl	8088be0 <mbedtls_x509_crt_check_key_usage>

    if( need_ca_bit && ! parent->ca_istrue )
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
 8088c6e:	3000      	adds	r0, #0
 8088c70:	bf18      	it	ne
 8088c72:	2001      	movne	r0, #1
 8088c74:	4244      	negs	r4, r0
 8088c76:	e001      	b.n	8088c7c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
        return( -1 );
 8088c78:	f04f 34ff 	mov.w	r4, #4294967295
        return( -1 );
    }
#endif

    return( 0 );
}
 8088c7c:	4620      	mov	r0, r4
 8088c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08088c82 <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
 8088c82:	b538      	push	{r3, r4, r5, lr}
 8088c84:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 8088c86:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
 8088c8a:	b1a4      	cbz	r4, 8088cb6 <mbedtls_x509_crt_is_revoked+0x34>
 8088c8c:	6922      	ldr	r2, [r4, #16]
 8088c8e:	b1a2      	cbz	r2, 8088cba <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
 8088c90:	6a2b      	ldr	r3, [r5, #32]
 8088c92:	429a      	cmp	r2, r3
 8088c94:	d001      	beq.n	8088c9a <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
 8088c96:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
 8088c98:	e7f7      	b.n	8088c8a <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 8088c9a:	6961      	ldr	r1, [r4, #20]
 8088c9c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8088c9e:	f00a fc49 	bl	8093534 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
 8088ca2:	2800      	cmp	r0, #0
 8088ca4:	d1f7      	bne.n	8088c96 <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 8088ca6:	f104 0018 	add.w	r0, r4, #24
 8088caa:	f7fe fac1 	bl	8087230 <mbedtls_x509_time_is_past>
 8088cae:	2800      	cmp	r0, #0
 8088cb0:	d0f1      	beq.n	8088c96 <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
 8088cb2:	2001      	movs	r0, #1
 8088cb4:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
 8088cb6:	4620      	mov	r0, r4
 8088cb8:	bd38      	pop	{r3, r4, r5, pc}
 8088cba:	4610      	mov	r0, r2
}
 8088cbc:	bd38      	pop	{r3, r4, r5, pc}

08088cbe <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>:
 * Skip validation if no CRL for the given CA is present.
 */
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
                               mbedtls_x509_crl *crl_list,
                               const mbedtls_x509_crt_profile *profile )
{
 8088cbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088cc2:	b099      	sub	sp, #100	; 0x64
 8088cc4:	9005      	str	r0, [sp, #20]
 8088cc6:	4614      	mov	r4, r2
 8088cc8:	461f      	mov	r7, r3
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
 8088cca:	460e      	mov	r6, r1
 8088ccc:	2900      	cmp	r1, #0
 8088cce:	d077      	beq.n	8088dc0 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x102>
 8088cd0:	2500      	movs	r5, #0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088cd2:	f04f 0a01 	mov.w	sl, #1
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
 8088cd6:	2c00      	cmp	r4, #0
 8088cd8:	d07a      	beq.n	8088dd0 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
    {
        if( crl_list->version == 0 ||
 8088cda:	69a3      	ldr	r3, [r4, #24]
 8088cdc:	2b00      	cmp	r3, #0
 8088cde:	d06c      	beq.n	8088dba <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8088ce0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
 8088ce2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8088ce4:	429a      	cmp	r2, r3
 8088ce6:	d168      	bne.n	8088dba <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 8088ce8:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8088cea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8088cec:	f00a fc22 	bl	8093534 <memcmp>
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8088cf0:	2800      	cmp	r0, #0
 8088cf2:	d162      	bne.n	8088dba <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 8088cf4:	2102      	movs	r1, #2
 8088cf6:	4630      	mov	r0, r6
 8088cf8:	f7ff ff72 	bl	8088be0 <mbedtls_x509_crt_check_key_usage>
 8088cfc:	2800      	cmp	r0, #0
 8088cfe:	d143      	bne.n	8088d88 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 8088d00:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088d04:	683a      	ldr	r2, [r7, #0]
 8088d06:	1e43      	subs	r3, r0, #1
 8088d08:	fa0a f303 	lsl.w	r3, sl, r3
 8088d0c:	4213      	tst	r3, r2
 8088d0e:	d059      	beq.n	8088dc4 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x106>
 8088d10:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8088d14:	2201      	movs	r2, #1
 8088d16:	3b01      	subs	r3, #1
 8088d18:	fa02 f303 	lsl.w	r3, r2, r3
 8088d1c:	687a      	ldr	r2, [r7, #4]
 8088d1e:	4213      	tst	r3, r2
 8088d20:	d053      	beq.n	8088dca <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x10c>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8088d22:	f7ff fa01 	bl	8088128 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 8088d26:	f10d 0920 	add.w	r9, sp, #32
 8088d2a:	464b      	mov	r3, r9
 8088d2c:	6922      	ldr	r2, [r4, #16]
 8088d2e:	6961      	ldr	r1, [r4, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8088d30:	4683      	mov	fp, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 8088d32:	f7ff fa6b 	bl	808820c <mbedtls_md>
 8088d36:	bb38      	cbnz	r0, 8088d88 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 8088d38:	f106 08bc 	add.w	r8, r6, #188	; 0xbc
 8088d3c:	4642      	mov	r2, r8
 8088d3e:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 8088d42:	f107 000c 	add.w	r0, r7, #12
 8088d46:	f7ff fbdb 	bl	8088500 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8088d4a:	b108      	cbz	r0, 8088d50 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x92>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8088d4c:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8088d50:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8088d54:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8088d58:	9304      	str	r3, [sp, #16]
 8088d5a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088d5e:	4658      	mov	r0, fp
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8088d60:	9107      	str	r1, [sp, #28]
 8088d62:	9306      	str	r3, [sp, #24]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088d64:	f7ff fb24 	bl	80883b0 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8088d68:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8088d6c:	9b06      	ldr	r3, [sp, #24]
 8088d6e:	9203      	str	r2, [sp, #12]
 8088d70:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 8088d74:	9907      	ldr	r1, [sp, #28]
 8088d76:	9202      	str	r2, [sp, #8]
 8088d78:	9001      	str	r0, [sp, #4]
 8088d7a:	f8cd 9000 	str.w	r9, [sp]
 8088d7e:	4642      	mov	r2, r8
 8088d80:	9804      	ldr	r0, [sp, #16]
 8088d82:	f004 f98d 	bl	808d0a0 <mbedtls_pk_verify_ext>
 8088d86:	b110      	cbz	r0, 8088d8e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xd0>
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 8088d88:	f045 0510 	orr.w	r5, r5, #16
            break;
 8088d8c:	e020      	b.n	8088dd0 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 8088d8e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8088d92:	f7fe fa4d 	bl	8087230 <mbedtls_x509_time_is_past>
 8088d96:	b108      	cbz	r0, 8088d9c <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xde>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 8088d98:	f045 0520 	orr.w	r5, r5, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 8088d9c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8088da0:	f7fe fa48 	bl	8087234 <mbedtls_x509_time_is_future>
 8088da4:	b108      	cbz	r0, 8088daa <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xec>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 8088da6:	f445 6580 	orr.w	r5, r5, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 8088daa:	4621      	mov	r1, r4
 8088dac:	9805      	ldr	r0, [sp, #20]
 8088dae:	f7ff ff68 	bl	8088c82 <mbedtls_x509_crt_is_revoked>
 8088db2:	b110      	cbz	r0, 8088dba <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 8088db4:	f045 0502 	orr.w	r5, r5, #2
            break;
 8088db8:	e00a      	b.n	8088dd0 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        crl_list = crl_list->next;
 8088dba:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8088dbe:	e78a      	b.n	8088cd6 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x18>
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );
 8088dc0:	460d      	mov	r5, r1
 8088dc2:	e005      	b.n	8088dd0 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 8088dc4:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 8088dc8:	e7a2      	b.n	8088d10 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x52>

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 8088dca:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 8088dce:	e7a8      	b.n	8088d22 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x64>

        crl_list = crl_list->next;
    }

    return( flags );
}
 8088dd0:	4628      	mov	r0, r5
 8088dd2:	b019      	add	sp, #100	; 0x64
 8088dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088dd8 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088ddc:	4604      	mov	r4, r0
 8088dde:	b09d      	sub	sp, #116	; 0x74
 8088de0:	4699      	mov	r9, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088de2:	30a4      	adds	r0, #164	; 0xa4
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
    int ret;
    uint32_t ca_flags = 0;
 8088de4:	2300      	movs	r3, #0
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088de6:	460d      	mov	r5, r1
 8088de8:	9206      	str	r2, [sp, #24]
 8088dea:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 8088dee:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8088df0:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
    int ret;
    uint32_t ca_flags = 0;
 8088df4:	930b      	str	r3, [sp, #44]	; 0x2c
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088df6:	f7fe fa1b 	bl	8087230 <mbedtls_x509_time_is_past>
 8088dfa:	b118      	cbz	r0, 8088e04 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2c>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8088dfc:	6833      	ldr	r3, [r6, #0]
 8088dfe:	f043 0301 	orr.w	r3, r3, #1
 8088e02:	6033      	str	r3, [r6, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8088e04:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8088e08:	f7fe fa14 	bl	8087234 <mbedtls_x509_time_is_future>
 8088e0c:	b118      	cbz	r0, 8088e16 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x3e>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8088e0e:	6833      	ldr	r3, [r6, #0]
 8088e10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088e14:	6033      	str	r3, [r6, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088e16:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8088e1a:	1e5a      	subs	r2, r3, #1
 8088e1c:	2301      	movs	r3, #1
 8088e1e:	4093      	lsls	r3, r2
 8088e20:	f8d9 2000 	ldr.w	r2, [r9]
 8088e24:	4213      	tst	r3, r2
 8088e26:	f000 80c0 	beq.w	8088faa <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d2>
 8088e2a:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8088e2e:	1e5a      	subs	r2, r3, #1
 8088e30:	2301      	movs	r3, #1
 8088e32:	4093      	lsls	r3, r2
 8088e34:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8088e38:	4213      	tst	r3, r2
 8088e3a:	f000 80bb 	beq.w	8088fb4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088e3e:	6833      	ldr	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8088e40:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088e44:	f043 0308 	orr.w	r3, r3, #8
 8088e48:	6033      	str	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8088e4a:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 8088e4e:	f7ff f96b 	bl	8088128 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8088e52:	465b      	mov	r3, fp
 8088e54:	6922      	ldr	r2, [r4, #16]
 8088e56:	6961      	ldr	r1, [r4, #20]
    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8088e58:	9005      	str	r0, [sp, #20]
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8088e5a:	f7ff f9d7 	bl	808820c <mbedtls_md>
 8088e5e:	2800      	cmp	r0, #0
 8088e60:	d16d      	bne.n	8088f3e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
 8088e62:	4607      	mov	r7, r0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088e64:	f8cd b01c 	str.w	fp, [sp, #28]
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8088e68:	b915      	cbnz	r5, 8088e70 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x98>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 8088e6a:	2f00      	cmp	r7, #0
 8088e6c:	d14c      	bne.n	8088f08 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x130>
 8088e6e:	e066      	b.n	8088f3e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 8088e70:	fab8 f388 	clz	r3, r8
 8088e74:	2201      	movs	r2, #1
 8088e76:	095b      	lsrs	r3, r3, #5
 8088e78:	4629      	mov	r1, r5
 8088e7a:	4620      	mov	r0, r4
 8088e7c:	f7ff fed4 	bl	8088c28 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088e80:	2800      	cmp	r0, #0
 8088e82:	d13e      	bne.n	8088f02 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8088e84:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8088e86:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
            continue;

        check_path_cnt = path_cnt + 1;
 8088e88:	f108 0b01 	add.w	fp, r8, #1

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8088e8c:	429a      	cmp	r2, r3
 8088e8e:	d106      	bne.n	8088e9e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xc6>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8088e90:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8088e92:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8088e94:	f00a fb4e 	bl	8093534 <memcmp>
                    child->subject_raw.len ) == 0 )
        {
            check_path_cnt--;
 8088e98:	2800      	cmp	r0, #0
 8088e9a:	bf08      	it	eq
 8088e9c:	46c3      	moveq	fp, r8
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
 8088e9e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8088ea2:	2b00      	cmp	r3, #0
 8088ea4:	dd04      	ble.n	8088eb0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xd8>
 8088ea6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8088ea8:	ebc2 0b0b 	rsb	fp, r2, fp
 8088eac:	455b      	cmp	r3, fp
 8088eae:	db28      	blt.n	8088f02 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088eb0:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8088eb4:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088eb8:	9805      	ldr	r0, [sp, #20]
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088eba:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 8088ebe:	9109      	str	r1, [sp, #36]	; 0x24
 8088ec0:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088ec2:	f7ff fa75 	bl	80883b0 <mbedtls_md_get_size>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088ec6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8088eca:	9b07      	ldr	r3, [sp, #28]
 8088ecc:	9203      	str	r2, [sp, #12]
 8088ece:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8088ed2:	9001      	str	r0, [sp, #4]
 8088ed4:	9202      	str	r2, [sp, #8]
 8088ed6:	9300      	str	r3, [sp, #0]
 8088ed8:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
 8088edc:	9b08      	ldr	r3, [sp, #32]
 8088ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8088ee0:	4658      	mov	r0, fp
 8088ee2:	f004 f8dd 	bl	808d0a0 <mbedtls_pk_verify_ext>
 8088ee6:	b960      	cbnz	r0, 8088f02 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8088ee8:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8088eec:	f7fe f9a0 	bl	8087230 <mbedtls_x509_time_is_past>
 8088ef0:	b920      	cbnz	r0, 8088efc <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x124>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8088ef2:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8088ef6:	f7fe f99d 	bl	8087234 <mbedtls_x509_time_is_future>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8088efa:	b130      	cbz	r0, 8088f0a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
        {
            if ( future_past_ca == NULL )
 8088efc:	2f00      	cmp	r7, #0
 8088efe:	bf08      	it	eq
 8088f00:	462f      	moveq	r7, r5
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8088f02:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 8088f06:	e7af      	b.n	8088e68 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x90>
 8088f08:	463d      	mov	r5, r7
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088f0a:	6833      	ldr	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8088f0c:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088f10:	f023 0308 	bic.w	r3, r3, #8
 8088f14:	6033      	str	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8088f16:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 8088f1a:	f109 000c 	add.w	r0, r9, #12
 8088f1e:	f7ff faef 	bl	8088500 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8088f22:	b118      	cbz	r0, 8088f2c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x154>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8088f24:	6833      	ldr	r3, [r6, #0]
 8088f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8088f2a:	6033      	str	r3, [r6, #0]
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 8088f2c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
 8088f2e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8088f30:	429a      	cmp	r2, r3
 8088f32:	d10d      	bne.n	8088f50 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8088f34:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8088f36:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8088f38:	f00a fafc 	bl	8093534 <memcmp>
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 8088f3c:	b940      	cbnz	r0, 8088f50 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 8088f3e:	f1ba 0f00 	cmp.w	sl, #0
 8088f42:	d12a      	bne.n	8088f9a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1c2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 8088f44:	6832      	ldr	r2, [r6, #0]
 8088f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 8088f48:	2000      	movs	r0, #0
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 8088f4a:	4313      	orrs	r3, r2
 8088f4c:	6033      	str	r3, [r6, #0]

    return( 0 );
 8088f4e:	e036      	b.n	8088fbe <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
                  child->subject_raw.len ) != 0 ) )
    {
#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the chain's top crt */
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 8088f50:	464b      	mov	r3, r9
 8088f52:	9a06      	ldr	r2, [sp, #24]
 8088f54:	4629      	mov	r1, r5
 8088f56:	4620      	mov	r0, r4
 8088f58:	f7ff feb1 	bl	8088cbe <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 8088f5c:	6833      	ldr	r3, [r6, #0]
 8088f5e:	4318      	orrs	r0, r3
 8088f60:	6030      	str	r0, [r6, #0]
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 8088f62:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8088f66:	f7fe f963 	bl	8087230 <mbedtls_x509_time_is_past>
 8088f6a:	b118      	cbz	r0, 8088f74 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x19c>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8088f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8088f6e:	f043 0301 	orr.w	r3, r3, #1
 8088f72:	930b      	str	r3, [sp, #44]	; 0x2c

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8088f74:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8088f78:	f7fe f95c 	bl	8087234 <mbedtls_x509_time_is_future>
 8088f7c:	b118      	cbz	r0, 8088f86 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1ae>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8088f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8088f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088f84:	930b      	str	r3, [sp, #44]	; 0x2c

        if( NULL != f_vrfy )
 8088f86:	f1ba 0f00 	cmp.w	sl, #0
 8088f8a:	d0db      	beq.n	8088f44 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 8088f8c:	ab0b      	add	r3, sp, #44	; 0x2c
 8088f8e:	f108 0201 	add.w	r2, r8, #1
 8088f92:	4629      	mov	r1, r5
 8088f94:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8088f96:	47d0      	blx	sl
 8088f98:	b988      	cbnz	r0, 8088fbe <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8088f9a:	4633      	mov	r3, r6
 8088f9c:	4642      	mov	r2, r8
 8088f9e:	4621      	mov	r1, r4
 8088fa0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8088fa2:	47d0      	blx	sl
 8088fa4:	2800      	cmp	r0, #0
 8088fa6:	d0cd      	beq.n	8088f44 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
 8088fa8:	e009      	b.n	8088fbe <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8088faa:	6833      	ldr	r3, [r6, #0]
 8088fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8088fb0:	6033      	str	r3, [r6, #0]
 8088fb2:	e73a      	b.n	8088e2a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8088fb4:	6833      	ldr	r3, [r6, #0]
 8088fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8088fba:	6033      	str	r3, [r6, #0]
 8088fbc:	e73f      	b.n	8088e3e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x66>
    }

    *flags |= ca_flags;

    return( 0 );
}
 8088fbe:	b01d      	add	sp, #116	; 0x74
 8088fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088fc4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088fc8:	b09d      	sub	sp, #116	; 0x74
 8088fca:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8088fcc:	469a      	mov	sl, r3
    int ret;
    uint32_t parent_flags = 0;
 8088fce:	2300      	movs	r3, #0
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088fd0:	4605      	mov	r5, r0
 8088fd2:	460f      	mov	r7, r1
 8088fd4:	9206      	str	r2, [sp, #24]
 8088fd6:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 8088fda:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    uint32_t parent_flags = 0;
 8088fdc:	930b      	str	r3, [sp, #44]	; 0x2c
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 8088fde:	b146      	cbz	r6, 8088ff2 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2e>
 8088fe0:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 8088fe4:	304c      	adds	r0, #76	; 0x4c
 8088fe6:	f7ff fa04 	bl	80883f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 8088fea:	2800      	cmp	r0, #0
 8088fec:	d07a      	beq.n	80890e4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x120>
        self_cnt++;

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 8088fee:	2e07      	cmp	r6, #7
 8088ff0:	dc76      	bgt.n	80890e0 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x11c>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088ff2:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8088ff6:	f7fe f91b 	bl	8087230 <mbedtls_x509_time_is_past>
 8088ffa:	b118      	cbz	r0, 8089004 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x40>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8088ffc:	6823      	ldr	r3, [r4, #0]
 8088ffe:	f043 0301 	orr.w	r3, r3, #1
 8089002:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8089004:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8089008:	f7fe f914 	bl	8087234 <mbedtls_x509_time_is_future>
 808900c:	b118      	cbz	r0, 8089016 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 808900e:	6823      	ldr	r3, [r4, #0]
 8089010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8089014:	6023      	str	r3, [r4, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8089016:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 808901a:	1e5a      	subs	r2, r3, #1
 808901c:	2301      	movs	r3, #1
 808901e:	4093      	lsls	r3, r2
 8089020:	f8d8 2000 	ldr.w	r2, [r8]
 8089024:	4213      	tst	r3, r2
 8089026:	d061      	beq.n	80890ec <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x128>
 8089028:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 808902c:	1e5a      	subs	r2, r3, #1
 808902e:	2301      	movs	r3, #1
 8089030:	4093      	lsls	r3, r2
 8089032:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8089036:	4213      	tst	r3, r2
 8089038:	d05d      	beq.n	80890f6 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 808903a:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
 808903e:	f7ff f873 	bl	8088128 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8089042:	ab0c      	add	r3, sp, #48	; 0x30
 8089044:	692a      	ldr	r2, [r5, #16]
 8089046:	6969      	ldr	r1, [r5, #20]
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8089048:	4683      	mov	fp, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 808904a:	f7ff f8df 	bl	808820c <mbedtls_md>
 808904e:	bb48      	cbnz	r0, 80890a4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe0>
        /* Note: this can't happen except after an internal error */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
    }
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 8089050:	f107 09bc 	add.w	r9, r7, #188	; 0xbc
 8089054:	464a      	mov	r2, r9
 8089056:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 808905a:	f108 000c 	add.w	r0, r8, #12
 808905e:	f7ff fa4f 	bl	8088500 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8089062:	b118      	cbz	r0, 808906c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xa8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8089064:	6823      	ldr	r3, [r4, #0]
 8089066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808906a:	6023      	str	r3, [r4, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 808906c:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 8089070:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 8089074:	9307      	str	r3, [sp, #28]
 8089076:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 808907a:	4658      	mov	r0, fp
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 808907c:	9109      	str	r1, [sp, #36]	; 0x24
 808907e:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8089080:	f7ff f996 	bl	80883b0 <mbedtls_md_get_size>
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8089084:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 8089088:	9b08      	ldr	r3, [sp, #32]
 808908a:	9203      	str	r2, [sp, #12]
 808908c:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8089090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8089092:	9202      	str	r2, [sp, #8]
 8089094:	aa0c      	add	r2, sp, #48	; 0x30
 8089096:	9001      	str	r0, [sp, #4]
 8089098:	9200      	str	r2, [sp, #0]
 808909a:	9807      	ldr	r0, [sp, #28]
 808909c:	464a      	mov	r2, r9
 808909e:	f003 ffff 	bl	808d0a0 <mbedtls_pk_verify_ext>
 80890a2:	b118      	cbz	r0, 80890ac <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe8>
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80890a4:	6823      	ldr	r3, [r4, #0]
 80890a6:	f043 0308 	orr.w	r3, r3, #8
 80890aa:	6023      	str	r3, [r4, #0]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 80890ac:	4643      	mov	r3, r8
 80890ae:	4652      	mov	r2, sl
 80890b0:	4639      	mov	r1, r7
 80890b2:	4628      	mov	r0, r5
 80890b4:	f7ff fe03 	bl	8088cbe <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 80890b8:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 80890ba:	f8dd 9018 	ldr.w	r9, [sp, #24]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 80890be:	4318      	orrs	r0, r3
 80890c0:	6020      	str	r0, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
         grandparent != NULL;
 80890c2:	f1b9 0f00 	cmp.w	r9, #0
 80890c6:	d029      	beq.n	808911c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x158>
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
 80890c8:	fab6 f386 	clz	r3, r6
 80890cc:	2200      	movs	r2, #0
 80890ce:	095b      	lsrs	r3, r3, #5
 80890d0:	4649      	mov	r1, r9
 80890d2:	4638      	mov	r0, r7
 80890d4:	f7ff fda8 	bl	8088c28 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80890d8:	b190      	cbz	r0, 8089100 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x13c>
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 80890da:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 80890de:	e7f0      	b.n	80890c2 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xfe>

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 80890e0:	4838      	ldr	r0, [pc, #224]	; (80891c4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x200>)
 80890e2:	e06b      	b.n	80891bc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        self_cnt++;
 80890e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80890e6:	3301      	adds	r3, #1
 80890e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80890ea:	e780      	b.n	8088fee <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2a>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 80890ec:	6823      	ldr	r3, [r4, #0]
 80890ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80890f2:	6023      	str	r3, [r4, #0]
 80890f4:	e798      	b.n	8089028 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x64>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80890f6:	6823      	ldr	r3, [r4, #0]
 80890f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80890fc:	6023      	str	r3, [r4, #0]
 80890fe:	e79c      	b.n	808903a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x76>
    }

    if( grandparent != NULL )
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
                                path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
 8089100:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8089102:	4652      	mov	r2, sl
 8089104:	9304      	str	r3, [sp, #16]
 8089106:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8089108:	4649      	mov	r1, r9
 808910a:	9303      	str	r3, [sp, #12]
 808910c:	ab0b      	add	r3, sp, #44	; 0x2c
 808910e:	9302      	str	r3, [sp, #8]
 8089110:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8089112:	9301      	str	r3, [sp, #4]
 8089114:	1c73      	adds	r3, r6, #1
 8089116:	9300      	str	r3, [sp, #0]
 8089118:	4643      	mov	r3, r8
 808911a:	e03b      	b.n	8089194 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d0>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 808911c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 808911e:	f106 0b02 	add.w	fp, r6, #2
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 8089122:	f8d7 9130 	ldr.w	r9, [r7, #304]	; 0x130
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8089126:	ebc3 0b0b 	rsb	fp, r3, fp
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
             grandparent != NULL;
 808912a:	f1b9 0f00 	cmp.w	r9, #0
 808912e:	d024      	beq.n	808917a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1b6>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8089130:	f8d9 3100 	ldr.w	r3, [r9, #256]	; 0x100
 8089134:	2b00      	cmp	r3, #0
 8089136:	dd01      	ble.n	808913c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
 8089138:	455b      	cmp	r3, fp
 808913a:	db08      	blt.n	808914e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x18a>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 808913c:	fab6 f386 	clz	r3, r6
 8089140:	2200      	movs	r2, #0
 8089142:	095b      	lsrs	r3, r3, #5
 8089144:	4649      	mov	r1, r9
 8089146:	4638      	mov	r0, r7
 8089148:	f7ff fd6e 	bl	8088c28 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 808914c:	b110      	cbz	r0, 8089154 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x190>
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 808914e:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 8089152:	e7ea      	b.n	808912a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
                                         profile, path_cnt + 1, self_cnt, &parent_flags,
                                         f_vrfy, p_vrfy );
 8089154:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8089156:	f8cd 8000 	str.w	r8, [sp]
 808915a:	9305      	str	r3, [sp, #20]
 808915c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 808915e:	9a06      	ldr	r2, [sp, #24]
 8089160:	9304      	str	r3, [sp, #16]
 8089162:	ab0b      	add	r3, sp, #44	; 0x2c
 8089164:	9303      	str	r3, [sp, #12]
 8089166:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8089168:	4649      	mov	r1, r9
 808916a:	9302      	str	r3, [sp, #8]
 808916c:	1c73      	adds	r3, r6, #1
 808916e:	9301      	str	r3, [sp, #4]
 8089170:	4638      	mov	r0, r7
 8089172:	4653      	mov	r3, sl
 8089174:	f7ff ff26 	bl	8088fc4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 8089178:	e00f      	b.n	808919a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d6>
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
 808917a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 808917c:	4652      	mov	r2, sl
 808917e:	9304      	str	r3, [sp, #16]
 8089180:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8089182:	9906      	ldr	r1, [sp, #24]
 8089184:	9303      	str	r3, [sp, #12]
 8089186:	ab0b      	add	r3, sp, #44	; 0x2c
 8089188:	9302      	str	r3, [sp, #8]
 808918a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 808918c:	9301      	str	r3, [sp, #4]
 808918e:	1c73      	adds	r3, r6, #1
 8089190:	9300      	str	r3, [sp, #0]
 8089192:	4643      	mov	r3, r8
 8089194:	4638      	mov	r0, r7
 8089196:	f7ff fe1f 	bl	8088dd8 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
            if( ret != 0 )
 808919a:	b978      	cbnz	r0, 80891bc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
                return( ret );
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
 808919c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 808919e:	b92b      	cbnz	r3, 80891ac <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e8>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 80891a0:	6822      	ldr	r2, [r4, #0]
 80891a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 80891a4:	2000      	movs	r0, #0
    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 80891a6:	4313      	orrs	r3, r2
 80891a8:	6023      	str	r3, [r4, #0]

    return( 0 );
 80891aa:	e007      	b.n	80891bc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 80891ac:	4629      	mov	r1, r5
 80891ae:	4623      	mov	r3, r4
 80891b0:	4632      	mov	r2, r6
 80891b2:	982b      	ldr	r0, [sp, #172]	; 0xac
 80891b4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80891b6:	47a8      	blx	r5
 80891b8:	2800      	cmp	r0, #0
 80891ba:	d0f1      	beq.n	80891a0 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
            return( ret );

    *flags |= parent_flags;

    return( 0 );
}
 80891bc:	b01d      	add	sp, #116	; 0x74
 80891be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80891c2:	bf00      	nop
 80891c4:	ffffd000 	.word	0xffffd000

080891c8 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80891c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80891cc:	b089      	sub	sp, #36	; 0x24
 80891ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80891d0:	4693      	mov	fp, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 80891d2:	2200      	movs	r2, #0
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80891d4:	4605      	mov	r5, r0
 80891d6:	468a      	mov	sl, r1
 80891d8:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 80891dc:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
 80891de:	461f      	mov	r7, r3
 80891e0:	2b00      	cmp	r3, #0
 80891e2:	d06e      	beq.n	80892c2 <mbedtls_x509_crt_verify_with_profile+0xfa>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 80891e4:	f1b8 0f00 	cmp.w	r8, #0
 80891e8:	d048      	beq.n	808927c <mbedtls_x509_crt_verify_with_profile+0xb4>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 80891ea:	4640      	mov	r0, r8
 80891ec:	f00a f9ff 	bl	80935ee <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80891f0:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    }

    if( cn != NULL )
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 80891f4:	4681      	mov	r9, r0

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80891f6:	069b      	lsls	r3, r3, #26
 80891f8:	d50d      	bpl.n	8089216 <mbedtls_x509_crt_verify_with_profile+0x4e>
        {
            cur = &crt->subject_alt_names;
 80891fa:	f105 06e8 	add.w	r6, r5, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 80891fe:	6873      	ldr	r3, [r6, #4]
 8089200:	4599      	cmp	r9, r3
 8089202:	d12c      	bne.n	808925e <mbedtls_x509_crt_verify_with_profile+0x96>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 8089204:	464a      	mov	r2, r9
 8089206:	68b1      	ldr	r1, [r6, #8]
 8089208:	4640      	mov	r0, r8
 808920a:	9307      	str	r3, [sp, #28]
 808920c:	f7ff f8db 	bl	80883c6 <_ZL15x509_memcasecmpPKvS0_j>
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 8089210:	9b07      	ldr	r3, [sp, #28]
 8089212:	bb20      	cbnz	r0, 808925e <mbedtls_x509_crt_verify_with_profile+0x96>
 8089214:	e032      	b.n	808927c <mbedtls_x509_crt_verify_with_profile+0xb4>
        goto exit;
    }

    if( cn != NULL )
    {
        name = &crt->subject;
 8089216:	f105 066c 	add.w	r6, r5, #108	; 0x6c
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 808921a:	6872      	ldr	r2, [r6, #4]
 808921c:	2a03      	cmp	r2, #3
 808921e:	d118      	bne.n	8089252 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8089220:	68b1      	ldr	r1, [r6, #8]
 8089222:	4855      	ldr	r0, [pc, #340]	; (8089378 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 8089224:	f00a f986 	bl	8093534 <memcmp>
 8089228:	b998      	cbnz	r0, 8089252 <mbedtls_x509_crt_verify_with_profile+0x8a>
                {
                    if( name->val.len == cn_len &&
 808922a:	6933      	ldr	r3, [r6, #16]
 808922c:	4599      	cmp	r9, r3
 808922e:	d107      	bne.n	8089240 <mbedtls_x509_crt_verify_with_profile+0x78>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 8089230:	464a      	mov	r2, r9
 8089232:	4641      	mov	r1, r8
 8089234:	6970      	ldr	r0, [r6, #20]
 8089236:	9307      	str	r3, [sp, #28]
 8089238:	f7ff f8c5 	bl	80883c6 <_ZL15x509_memcasecmpPKvS0_j>
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
                {
                    if( name->val.len == cn_len &&
 808923c:	9b07      	ldr	r3, [sp, #28]
 808923e:	b1e8      	cbz	r0, 808927c <mbedtls_x509_crt_verify_with_profile+0xb4>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8089240:	2b02      	cmp	r3, #2
 8089242:	d906      	bls.n	8089252 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8089244:	2202      	movs	r2, #2
 8089246:	494d      	ldr	r1, [pc, #308]	; (808937c <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 8089248:	6970      	ldr	r0, [r6, #20]
 808924a:	f00a f973 	bl	8093534 <memcmp>
                {
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
 808924e:	2800      	cmp	r0, #0
 8089250:	d053      	beq.n	80892fa <mbedtls_x509_crt_verify_with_profile+0x132>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
                        break;
                }

                name = name->next;
 8089252:	69b6      	ldr	r6, [r6, #24]
            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
        else
        {
            while( name != NULL )
 8089254:	2e00      	cmp	r6, #0
 8089256:	d1e0      	bne.n	808921a <mbedtls_x509_crt_verify_with_profile+0x52>

                cur = cur->next;
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 8089258:	2304      	movs	r3, #4
 808925a:	6023      	str	r3, [r4, #0]
 808925c:	e00e      	b.n	808927c <mbedtls_x509_crt_verify_with_profile+0xb4>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 808925e:	2b02      	cmp	r3, #2
 8089260:	d947      	bls.n	80892f2 <mbedtls_x509_crt_verify_with_profile+0x12a>
 8089262:	2202      	movs	r2, #2
 8089264:	4945      	ldr	r1, [pc, #276]	; (808937c <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 8089266:	68b0      	ldr	r0, [r6, #8]
 8089268:	f00a f964 	bl	8093534 <memcmp>
            {
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
 808926c:	2800      	cmp	r0, #0
 808926e:	d140      	bne.n	80892f2 <mbedtls_x509_crt_verify_with_profile+0x12a>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 8089270:	4631      	mov	r1, r6
 8089272:	4640      	mov	r0, r8
 8089274:	f7ff f8fd 	bl	8088472 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8089278:	2800      	cmp	r0, #0
 808927a:	d13a      	bne.n	80892f2 <mbedtls_x509_crt_verify_with_profile+0x12a>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 808927c:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
 8089280:	4630      	mov	r0, r6
 8089282:	f003 ff73 	bl	808d16c <mbedtls_pk_get_type>
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8089286:	2301      	movs	r3, #1
 8089288:	1e42      	subs	r2, r0, #1
 808928a:	4093      	lsls	r3, r2
 808928c:	687a      	ldr	r2, [r7, #4]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 808928e:	4601      	mov	r1, r0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8089290:	4213      	tst	r3, r2
 8089292:	d03a      	beq.n	808930a <mbedtls_x509_crt_verify_with_profile+0x142>
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 8089294:	4632      	mov	r2, r6
 8089296:	f107 000c 	add.w	r0, r7, #12
 808929a:	f7ff f931 	bl	8088500 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 808929e:	b118      	cbz	r0, 80892a8 <mbedtls_x509_crt_verify_with_profile+0xe0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80892a0:	6823      	ldr	r3, [r4, #0]
 80892a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80892a6:	6023      	str	r3, [r4, #0]
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80892a8:	4656      	mov	r6, sl

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80892aa:	2e00      	cmp	r6, #0
 80892ac:	d03d      	beq.n	808932a <mbedtls_x509_crt_verify_with_profile+0x162>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 80892ae:	2301      	movs	r3, #1
 80892b0:	2200      	movs	r2, #0
 80892b2:	4631      	mov	r1, r6
 80892b4:	4628      	mov	r0, r5
 80892b6:	f7ff fcb7 	bl	8088c28 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80892ba:	b358      	cbz	r0, 8089314 <mbedtls_x509_crt_verify_with_profile+0x14c>

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80892bc:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80892c0:	e7f3      	b.n	80892aa <mbedtls_x509_crt_verify_with_profile+0xe2>

    *flags = 0;

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 80892c2:	482f      	ldr	r0, [pc, #188]	; (8089380 <mbedtls_x509_crt_verify_with_profile+0x1b8>)
 80892c4:	e011      	b.n	80892ea <mbedtls_x509_crt_verify_with_profile+0x122>

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
                                         pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 80892c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80892c8:	9002      	str	r0, [sp, #8]
 80892ca:	9305      	str	r3, [sp, #20]
 80892cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80892ce:	9001      	str	r0, [sp, #4]
 80892d0:	9304      	str	r3, [sp, #16]
 80892d2:	9403      	str	r4, [sp, #12]
 80892d4:	9700      	str	r7, [sp, #0]
 80892d6:	465b      	mov	r3, fp
 80892d8:	4652      	mov	r2, sl
 80892da:	4631      	mov	r1, r6
 80892dc:	4628      	mov	r0, r5
 80892de:	f7ff fe71 	bl	8088fc4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>

exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 80892e2:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 80892e6:	d12e      	bne.n	8089346 <mbedtls_x509_crt_verify_with_profile+0x17e>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 80892e8:	4826      	ldr	r0, [pc, #152]	; (8089384 <mbedtls_x509_crt_verify_with_profile+0x1bc>)

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
 80892ea:	f04f 33ff 	mov.w	r3, #4294967295
 80892ee:	6023      	str	r3, [r4, #0]
        return( ret );
 80892f0:	e03f      	b.n	8089372 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
                {
                    break;
                }

                cur = cur->next;
 80892f2:	68f6      	ldr	r6, [r6, #12]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
 80892f4:	2e00      	cmp	r6, #0
 80892f6:	d182      	bne.n	80891fe <mbedtls_x509_crt_verify_with_profile+0x36>
 80892f8:	e7ae      	b.n	8089258 <mbedtls_x509_crt_verify_with_profile+0x90>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
 80892fa:	f106 010c 	add.w	r1, r6, #12
 80892fe:	4640      	mov	r0, r8
 8089300:	f7ff f8b7 	bl	8088472 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8089304:	2800      	cmp	r0, #0
 8089306:	d1a4      	bne.n	8089252 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8089308:	e7b8      	b.n	808927c <mbedtls_x509_crt_verify_with_profile+0xb4>

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 808930a:	6823      	ldr	r3, [r4, #0]
 808930c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8089310:	6023      	str	r3, [r4, #0]
 8089312:	e7bf      	b.n	8089294 <mbedtls_x509_crt_verify_with_profile+0xcc>
    }

    if( parent != NULL )
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 8089314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8089316:	9402      	str	r4, [sp, #8]
 8089318:	9304      	str	r3, [sp, #16]
 808931a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808931c:	9001      	str	r0, [sp, #4]
 808931e:	9303      	str	r3, [sp, #12]
 8089320:	9000      	str	r0, [sp, #0]
 8089322:	463b      	mov	r3, r7
 8089324:	465a      	mov	r2, fp
 8089326:	4631      	mov	r1, r6
 8089328:	e01f      	b.n	808936a <mbedtls_x509_crt_verify_with_profile+0x1a2>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 808932a:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
 808932e:	b196      	cbz	r6, 8089356 <mbedtls_x509_crt_verify_with_profile+0x18e>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8089330:	2301      	movs	r3, #1
 8089332:	2200      	movs	r2, #0
 8089334:	4631      	mov	r1, r6
 8089336:	4628      	mov	r0, r5
 8089338:	f7ff fc76 	bl	8088c28 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 808933c:	2800      	cmp	r0, #0
 808933e:	d0c2      	beq.n	80892c6 <mbedtls_x509_crt_verify_with_profile+0xfe>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8089340:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8089344:	e7f3      	b.n	808932e <mbedtls_x509_crt_verify_with_profile+0x166>
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
 8089346:	2800      	cmp	r0, #0
 8089348:	d1cf      	bne.n	80892ea <mbedtls_x509_crt_verify_with_profile+0x122>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 808934a:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
 808934c:	480e      	ldr	r0, [pc, #56]	; (8089388 <mbedtls_x509_crt_verify_with_profile+0x1c0>)
 808934e:	2b00      	cmp	r3, #0
 8089350:	bf08      	it	eq
 8089352:	2000      	moveq	r0, #0
 8089354:	e00d      	b.n	8089372 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
                                       pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 8089356:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8089358:	465a      	mov	r2, fp
 808935a:	9304      	str	r3, [sp, #16]
 808935c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808935e:	4651      	mov	r1, sl
 8089360:	9303      	str	r3, [sp, #12]
 8089362:	463b      	mov	r3, r7
 8089364:	9402      	str	r4, [sp, #8]
 8089366:	9601      	str	r6, [sp, #4]
 8089368:	9600      	str	r6, [sp, #0]
 808936a:	4628      	mov	r0, r5
 808936c:	f7ff fd34 	bl	8088dd8 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 8089370:	e7b7      	b.n	80892e2 <mbedtls_x509_crt_verify_with_profile+0x11a>

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
 8089372:	b009      	add	sp, #36	; 0x24
 8089374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089378:	080948d0 	.word	0x080948d0
 808937c:	08095a06 	.word	0x08095a06
 8089380:	ffffd800 	.word	0xffffd800
 8089384:	ffffd000 	.word	0xffffd000
 8089388:	ffffd900 	.word	0xffffd900

0808938c <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 808938c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8089390:	2100      	movs	r1, #0
 8089392:	f00a b904 	b.w	809359e <memset>

08089396 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 8089396:	b570      	push	{r4, r5, r6, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 8089398:	4605      	mov	r5, r0
 808939a:	2800      	cmp	r0, #0
 808939c:	d053      	beq.n	8089446 <mbedtls_x509_crt_free+0xb0>
 808939e:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 80893a0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80893a4:	f003 fdc5 	bl	808cf32 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 80893a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 80893aa:	b14a      	cbz	r2, 80893c0 <mbedtls_x509_crt_free+0x2a>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80893ac:	4610      	mov	r0, r2
 80893ae:	2120      	movs	r1, #32

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80893b0:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80893b2:	f7ff f800 	bl	80883b6 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 80893b6:	4610      	mov	r0, r2
 80893b8:	f008 f966 	bl	8091688 <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80893bc:	4632      	mov	r2, r6
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
 80893be:	e7f4      	b.n	80893aa <mbedtls_x509_crt_free+0x14>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 80893c0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 80893c4:	b14a      	cbz	r2, 80893da <mbedtls_x509_crt_free+0x44>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80893c6:	4610      	mov	r0, r2
 80893c8:	2120      	movs	r1, #32

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80893ca:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80893cc:	f7fe fff3 	bl	80883b6 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 80893d0:	4610      	mov	r0, r2
 80893d2:	f008 f959 	bl	8091688 <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80893d6:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
 80893d8:	e7f4      	b.n	80893c4 <mbedtls_x509_crt_free+0x2e>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 80893da:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 80893de:	b14a      	cbz	r2, 80893f4 <mbedtls_x509_crt_free+0x5e>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80893e0:	4610      	mov	r0, r2
 80893e2:	2110      	movs	r1, #16

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80893e4:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80893e6:	f7fe ffe6 	bl	80883b6 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 80893ea:	4610      	mov	r0, r2
 80893ec:	f008 f94c 	bl	8091688 <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80893f0:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
 80893f2:	e7f4      	b.n	80893de <mbedtls_x509_crt_free+0x48>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 80893f4:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 80893f8:	b14a      	cbz	r2, 808940e <mbedtls_x509_crt_free+0x78>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80893fa:	4610      	mov	r0, r2
 80893fc:	2110      	movs	r1, #16

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80893fe:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8089400:	f7fe ffd9 	bl	80883b6 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 8089404:	4610      	mov	r0, r2
 8089406:	f008 f93f 	bl	8091688 <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 808940a:	4632      	mov	r2, r6
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
 808940c:	e7f4      	b.n	80893f8 <mbedtls_x509_crt_free+0x62>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 808940e:	68a0      	ldr	r0, [r4, #8]
 8089410:	b128      	cbz	r0, 808941e <mbedtls_x509_crt_free+0x88>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 8089412:	6861      	ldr	r1, [r4, #4]
 8089414:	f7fe ffcf 	bl	80883b6 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( cert_cur->raw.p );
 8089418:	68a0      	ldr	r0, [r4, #8]
 808941a:	f008 f935 	bl	8091688 <free>
        }

        cert_cur = cert_cur->next;
 808941e:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 8089422:	2c00      	cmp	r4, #0
 8089424:	d1bc      	bne.n	80893a0 <mbedtls_x509_crt_free+0xa>
 8089426:	462a      	mov	r2, r5
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8089428:	f44f 719a 	mov.w	r1, #308	; 0x134
 808942c:	4610      	mov	r0, r2

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 808942e:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8089432:	f7fe ffc0 	bl	80883b6 <_ZL15mbedtls_zeroizePvj>
        if( cert_prv != crt )
 8089436:	42aa      	cmp	r2, r5
 8089438:	d002      	beq.n	8089440 <mbedtls_x509_crt_free+0xaa>
            mbedtls_free( cert_prv );
 808943a:	4610      	mov	r0, r2
 808943c:	f008 f924 	bl	8091688 <free>
    }
    while( cert_cur != NULL );
 8089440:	4622      	mov	r2, r4
 8089442:	2c00      	cmp	r4, #0
 8089444:	d1f0      	bne.n	8089428 <mbedtls_x509_crt_free+0x92>
 8089446:	bd70      	pop	{r4, r5, r6, pc}

08089448 <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 8089448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808944c:	4688      	mov	r8, r1
 808944e:	b09b      	sub	sp, #108	; 0x6c
 8089450:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 8089452:	4682      	mov	sl, r0
 8089454:	2800      	cmp	r0, #0
 8089456:	f000 812c 	beq.w	80896b2 <mbedtls_x509_crt_parse_der+0x26a>
 808945a:	2900      	cmp	r1, #0
 808945c:	f000 8129 	beq.w	80896b2 <mbedtls_x509_crt_parse_der+0x26a>
 8089460:	4604      	mov	r4, r0
 8089462:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
 8089466:	69a3      	ldr	r3, [r4, #24]
 8089468:	b1a3      	cbz	r3, 8089494 <mbedtls_x509_crt_parse_der+0x4c>
 808946a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 808946e:	46a1      	mov	r9, r4
 8089470:	b10b      	cbz	r3, 8089476 <mbedtls_x509_crt_parse_der+0x2e>
 8089472:	461c      	mov	r4, r3
 8089474:	e7f7      	b.n	8089466 <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 8089476:	f44f 719a 	mov.w	r1, #308	; 0x134
 808947a:	2001      	movs	r0, #1
 808947c:	f009 ff4c 	bl	8093318 <calloc>
 8089480:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
 8089484:	2800      	cmp	r0, #0
 8089486:	f000 8116 	beq.w	80896b6 <mbedtls_x509_crt_parse_der+0x26e>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
 808948a:	f7ff ff7f 	bl	808938c <mbedtls_x509_crt_init>
 808948e:	46a1      	mov	r9, r4
        crt = crt->next;
 8089490:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 8089494:	2300      	movs	r3, #0
 8089496:	930b      	str	r3, [sp, #44]	; 0x2c
 8089498:	930c      	str	r3, [sp, #48]	; 0x30
 808949a:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 808949c:	930e      	str	r3, [sp, #56]	; 0x38
 808949e:	930f      	str	r3, [sp, #60]	; 0x3c
 80894a0:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 80894a2:	9311      	str	r3, [sp, #68]	; 0x44
 80894a4:	9312      	str	r3, [sp, #72]	; 0x48
 80894a6:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 80894a8:	2c00      	cmp	r4, #0
 80894aa:	f000 80e9 	beq.w	8089680 <mbedtls_x509_crt_parse_der+0x238>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
 80894ae:	ae1a      	add	r6, sp, #104	; 0x68
 80894b0:	f846 5d54 	str.w	r5, [r6, #-84]!
    end = p + len;
 80894b4:	eb08 0b05 	add.w	fp, r8, r5
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80894b8:	2330      	movs	r3, #48	; 0x30
 80894ba:	4632      	mov	r2, r6
 80894bc:	4659      	mov	r1, fp
 80894be:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 80894c0:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80894c4:	f7fa fcae 	bl	8083e24 <mbedtls_asn1_get_tag>
 80894c8:	b120      	cbz	r0, 80894d4 <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80894ca:	4620      	mov	r0, r4
 80894cc:	f7ff ff63 	bl	8089396 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 80894d0:	4da3      	ldr	r5, [pc, #652]	; (8089760 <mbedtls_x509_crt_parse_der+0x318>)
 80894d2:	e0e1      	b.n	8089698 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( len > (size_t) ( end - p ) )
 80894d4:	9d06      	ldr	r5, [sp, #24]
 80894d6:	9f05      	ldr	r7, [sp, #20]
 80894d8:	ebc5 0b0b 	rsb	fp, r5, fp
 80894dc:	45bb      	cmp	fp, r7
 80894de:	f0c0 80ca 	bcc.w	8089676 <mbedtls_x509_crt_parse_der+0x22e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 80894e2:	443d      	add	r5, r7
 80894e4:	ebc8 0505 	rsb	r5, r8, r5
 80894e8:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
 80894ea:	4629      	mov	r1, r5
 80894ec:	2001      	movs	r0, #1
 80894ee:	f009 ff13 	bl	8093318 <calloc>
 80894f2:	4683      	mov	fp, r0
 80894f4:	9006      	str	r0, [sp, #24]
 80894f6:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 80894f8:	2800      	cmp	r0, #0
 80894fa:	f000 80c3 	beq.w	8089684 <mbedtls_x509_crt_parse_der+0x23c>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80894fe:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 8089500:	1bed      	subs	r5, r5, r7
 8089502:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8089504:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
 8089506:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8089508:	f00a f823 	bl	8093552 <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 808950c:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 808950e:	2330      	movs	r3, #48	; 0x30
 8089510:	4632      	mov	r2, r6
 8089512:	4639      	mov	r1, r7
 8089514:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 8089516:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8089518:	f7fa fc84 	bl	8083e24 <mbedtls_asn1_get_tag>
 808951c:	4680      	mov	r8, r0
 808951e:	b128      	cbz	r0, 808952c <mbedtls_x509_crt_parse_der+0xe4>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8089520:	4620      	mov	r0, r4
 8089522:	f7ff ff38 	bl	8089396 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8089526:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
 808952a:	e0b2      	b.n	8089692 <mbedtls_x509_crt_parse_der+0x24a>
    }

    end = p + len;
 808952c:	9b05      	ldr	r3, [sp, #20]
 808952e:	9e06      	ldr	r6, [sp, #24]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089530:	aa17      	add	r2, sp, #92	; 0x5c
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
 8089532:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 8089534:	6963      	ldr	r3, [r4, #20]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089536:	4631      	mov	r1, r6
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
    crt->tbs.len = end - crt->tbs.p;
 8089538:	1af3      	subs	r3, r6, r3
 808953a:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808953c:	a806      	add	r0, sp, #24
 808953e:	23a0      	movs	r3, #160	; 0xa0
 8089540:	f7fa fc70 	bl	8083e24 <mbedtls_asn1_get_tag>
 8089544:	4605      	mov	r5, r0
 8089546:	b128      	cbz	r0, 8089554 <mbedtls_x509_crt_parse_der+0x10c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8089548:	f110 0f62 	cmn.w	r0, #98	; 0x62
 808954c:	d114      	bne.n	8089578 <mbedtls_x509_crt_parse_der+0x130>
        {
            *ver = 0;
 808954e:	f8c4 8018 	str.w	r8, [r4, #24]
 8089552:	e014      	b.n	808957e <mbedtls_x509_crt_parse_der+0x136>
        }

        return( ret );
    }

    end = *p + len;
 8089554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8089556:	9d06      	ldr	r5, [sp, #24]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8089558:	f104 0218 	add.w	r2, r4, #24
        }

        return( ret );
    }

    end = *p + len;
 808955c:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 808955e:	4629      	mov	r1, r5
 8089560:	a806      	add	r0, sp, #24
 8089562:	f7fa fc8c 	bl	8083e7e <mbedtls_asn1_get_int>
 8089566:	b110      	cbz	r0, 808956e <mbedtls_x509_crt_parse_der+0x126>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 8089568:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
 808956c:	e004      	b.n	8089578 <mbedtls_x509_crt_parse_der+0x130>

    if( *p != end )
 808956e:	9b06      	ldr	r3, [sp, #24]
 8089570:	429d      	cmp	r5, r3
 8089572:	d004      	beq.n	808957e <mbedtls_x509_crt_parse_der+0x136>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8089574:	4d7b      	ldr	r5, [pc, #492]	; (8089764 <mbedtls_x509_crt_parse_der+0x31c>)
 8089576:	e0d6      	b.n	8089726 <mbedtls_x509_crt_parse_der+0x2de>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 8089578:	2d00      	cmp	r5, #0
 808957a:	f040 80d4 	bne.w	8089726 <mbedtls_x509_crt_parse_der+0x2de>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 808957e:	f104 021c 	add.w	r2, r4, #28
 8089582:	4631      	mov	r1, r6
 8089584:	a806      	add	r0, sp, #24
 8089586:	f7fd fb85 	bl	8086c94 <mbedtls_x509_get_serial>
 808958a:	4605      	mov	r5, r0
 808958c:	2800      	cmp	r0, #0
 808958e:	f040 80ca 	bne.w	8089726 <mbedtls_x509_crt_parse_der+0x2de>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 8089592:	f104 0828 	add.w	r8, r4, #40	; 0x28
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 8089596:	ab0b      	add	r3, sp, #44	; 0x2c
 8089598:	4642      	mov	r2, r8
 808959a:	4631      	mov	r1, r6
 808959c:	a806      	add	r0, sp, #24
 808959e:	f7fd fba1 	bl	8086ce4 <mbedtls_x509_get_alg>
 80895a2:	4605      	mov	r5, r0
 80895a4:	2800      	cmp	r0, #0
 80895a6:	f040 80be 	bne.w	8089726 <mbedtls_x509_crt_parse_der+0x2de>
 80895aa:	e086      	b.n	80896ba <mbedtls_x509_crt_parse_der+0x272>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
 80895ac:	3301      	adds	r3, #1
 80895ae:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 80895b0:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 80895b4:	9300      	str	r3, [sp, #0]
 80895b6:	f504 7294 	add.w	r2, r4, #296	; 0x128
 80895ba:	f204 1329 	addw	r3, r4, #297	; 0x129
 80895be:	a90b      	add	r1, sp, #44	; 0x2c
 80895c0:	4640      	mov	r0, r8
 80895c2:	f7fd fce3 	bl	8086f8c <mbedtls_x509_get_sig_alg>
 80895c6:	4605      	mov	r5, r0
 80895c8:	2800      	cmp	r0, #0
 80895ca:	f040 80ac 	bne.w	8089726 <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80895ce:	9b06      	ldr	r3, [sp, #24]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80895d0:	aa05      	add	r2, sp, #20
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80895d2:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80895d4:	4631      	mov	r1, r6
 80895d6:	2330      	movs	r3, #48	; 0x30
 80895d8:	a806      	add	r0, sp, #24
 80895da:	f7fa fc23 	bl	8083e24 <mbedtls_asn1_get_tag>
 80895de:	4605      	mov	r5, r0
 80895e0:	2800      	cmp	r0, #0
 80895e2:	d151      	bne.n	8089688 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 80895e4:	9b05      	ldr	r3, [sp, #20]
 80895e6:	9906      	ldr	r1, [sp, #24]
 80895e8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80895ec:	4419      	add	r1, r3
 80895ee:	a806      	add	r0, sp, #24
 80895f0:	f7fd fb80 	bl	8086cf4 <mbedtls_x509_get_name>
 80895f4:	4605      	mov	r5, r0
 80895f6:	2800      	cmp	r0, #0
 80895f8:	f040 8095 	bne.w	8089726 <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80895fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80895fe:	9b06      	ldr	r3, [sp, #24]
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089600:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8089602:	1a9b      	subs	r3, r3, r2
 8089604:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089606:	aa17      	add	r2, sp, #92	; 0x5c
 8089608:	2330      	movs	r3, #48	; 0x30
 808960a:	a806      	add	r0, sp, #24
 808960c:	f7fa fc0a 	bl	8083e24 <mbedtls_asn1_get_tag>
 8089610:	2800      	cmp	r0, #0
 8089612:	d05b      	beq.n	80896cc <mbedtls_x509_crt_parse_der+0x284>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8089614:	f5a0 5510 	sub.w	r5, r0, #9216	; 0x2400
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 8089618:	2d00      	cmp	r5, #0
 808961a:	f040 8084 	bne.w	8089726 <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 808961e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8089622:	f85b 3d50 	ldr.w	r3, [fp, #-80]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8089626:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 8089628:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 808962a:	4631      	mov	r1, r6
 808962c:	2330      	movs	r3, #48	; 0x30
 808962e:	4658      	mov	r0, fp
 8089630:	f7fa fbf8 	bl	8083e24 <mbedtls_asn1_get_tag>
 8089634:	4605      	mov	r5, r0
 8089636:	bb38      	cbnz	r0, 8089688 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 8089638:	9b05      	ldr	r3, [sp, #20]
 808963a:	2b00      	cmp	r3, #0
 808963c:	d15f      	bne.n	80896fe <mbedtls_x509_crt_parse_der+0x2b6>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 808963e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8089640:	9b06      	ldr	r3, [sp, #24]

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8089642:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 8089644:	1a9b      	subs	r3, r3, r2
 8089646:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8089648:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 808964c:	4658      	mov	r0, fp
 808964e:	f7fd fff3 	bl	8087638 <mbedtls_pk_parse_subpubkey>
 8089652:	4605      	mov	r5, r0
 8089654:	2800      	cmp	r0, #0
 8089656:	d166      	bne.n	8089726 <mbedtls_x509_crt_parse_der+0x2de>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 8089658:	69a3      	ldr	r3, [r4, #24]
 808965a:	3b02      	subs	r3, #2
 808965c:	2b01      	cmp	r3, #1
 808965e:	d958      	bls.n	8089712 <mbedtls_x509_crt_parse_der+0x2ca>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 8089660:	69a3      	ldr	r3, [r4, #24]
 8089662:	3b02      	subs	r3, #2
 8089664:	2b01      	cmp	r3, #1
 8089666:	d962      	bls.n	808972e <mbedtls_x509_crt_parse_der+0x2e6>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 8089668:	69a3      	ldr	r3, [r4, #24]
 808966a:	2b03      	cmp	r3, #3
 808966c:	d06a      	beq.n	8089744 <mbedtls_x509_crt_parse_der+0x2fc>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
 808966e:	9b06      	ldr	r3, [sp, #24]
 8089670:	429e      	cmp	r6, r3
 8089672:	f000 811e 	beq.w	80898b2 <mbedtls_x509_crt_parse_der+0x46a>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
 8089676:	4620      	mov	r0, r4
 8089678:	f7ff fe8d 	bl	8089396 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808967c:	4d3a      	ldr	r5, [pc, #232]	; (8089768 <mbedtls_x509_crt_parse_der+0x320>)
 808967e:	e00b      	b.n	8089698 <mbedtls_x509_crt_parse_der+0x250>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8089680:	4d3a      	ldr	r5, [pc, #232]	; (808976c <mbedtls_x509_crt_parse_der+0x324>)
 8089682:	e009      	b.n	8089698 <mbedtls_x509_crt_parse_der+0x250>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8089684:	4d3a      	ldr	r5, [pc, #232]	; (8089770 <mbedtls_x509_crt_parse_der+0x328>)
 8089686:	e007      	b.n	8089698 <mbedtls_x509_crt_parse_der+0x250>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8089688:	4620      	mov	r0, r4
 808968a:	f7ff fe84 	bl	8089396 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 808968e:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 8089692:	2d00      	cmp	r5, #0
 8089694:	f000 8204 	beq.w	8089aa0 <mbedtls_x509_crt_parse_der+0x658>
    {
        if( prev )
 8089698:	f1b9 0f00 	cmp.w	r9, #0
 808969c:	d002      	beq.n	80896a4 <mbedtls_x509_crt_parse_der+0x25c>
            prev->next = NULL;
 808969e:	2300      	movs	r3, #0
 80896a0:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
 80896a4:	4554      	cmp	r4, sl
 80896a6:	f000 81fb 	beq.w	8089aa0 <mbedtls_x509_crt_parse_der+0x658>
            mbedtls_free( crt );
 80896aa:	4620      	mov	r0, r4
 80896ac:	f007 ffec 	bl	8091688 <free>
 80896b0:	e1f6      	b.n	8089aa0 <mbedtls_x509_crt_parse_der+0x658>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80896b2:	4d2e      	ldr	r5, [pc, #184]	; (808976c <mbedtls_x509_crt_parse_der+0x324>)
 80896b4:	e1f4      	b.n	8089aa0 <mbedtls_x509_crt_parse_der+0x658>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80896b6:	4d2e      	ldr	r5, [pc, #184]	; (8089770 <mbedtls_x509_crt_parse_der+0x328>)
 80896b8:	e1f2      	b.n	8089aa0 <mbedtls_x509_crt_parse_der+0x658>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
 80896ba:	69a3      	ldr	r3, [r4, #24]
 80896bc:	2b02      	cmp	r3, #2
 80896be:	f67f af75 	bls.w	80895ac <mbedtls_x509_crt_parse_der+0x164>
    {
        mbedtls_x509_crt_free( crt );
 80896c2:	4620      	mov	r0, r4
 80896c4:	f7ff fe67 	bl	8089396 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 80896c8:	4d2a      	ldr	r5, [pc, #168]	; (8089774 <mbedtls_x509_crt_parse_der+0x32c>)
 80896ca:	e7e5      	b.n	8089698 <mbedtls_x509_crt_parse_der+0x250>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 80896cc:	9a06      	ldr	r2, [sp, #24]
 80896ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80896d0:	a806      	add	r0, sp, #24

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 80896d2:	eb02 0b03 	add.w	fp, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80896d6:	4659      	mov	r1, fp
 80896d8:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80896dc:	f7fd fb82 	bl	8086de4 <mbedtls_x509_get_time>
 80896e0:	b958      	cbnz	r0, 80896fa <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 80896e2:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 80896e6:	4659      	mov	r1, fp
 80896e8:	a806      	add	r0, sp, #24
 80896ea:	f7fd fb7b 	bl	8086de4 <mbedtls_x509_get_time>
 80896ee:	b920      	cbnz	r0, 80896fa <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( *p != end )
 80896f0:	9b06      	ldr	r3, [sp, #24]
 80896f2:	459b      	cmp	fp, r3
 80896f4:	d093      	beq.n	808961e <mbedtls_x509_crt_parse_der+0x1d6>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80896f6:	4d20      	ldr	r5, [pc, #128]	; (8089778 <mbedtls_x509_crt_parse_der+0x330>)
 80896f8:	e015      	b.n	8089726 <mbedtls_x509_crt_parse_der+0x2de>
    end = *p + len;

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 80896fa:	4605      	mov	r5, r0
 80896fc:	e78c      	b.n	8089618 <mbedtls_x509_crt_parse_der+0x1d0>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80896fe:	9906      	ldr	r1, [sp, #24]
 8089700:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8089704:	4419      	add	r1, r3
 8089706:	4658      	mov	r0, fp
 8089708:	f7fd faf4 	bl	8086cf4 <mbedtls_x509_get_name>
 808970c:	4605      	mov	r5, r0
 808970e:	b950      	cbnz	r0, 8089726 <mbedtls_x509_crt_parse_der+0x2de>
 8089710:	e795      	b.n	808963e <mbedtls_x509_crt_parse_der+0x1f6>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 8089712:	2301      	movs	r3, #1
 8089714:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 8089718:	4631      	mov	r1, r6
 808971a:	4658      	mov	r0, fp
 808971c:	f7fe fed5 	bl	80884ca <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 8089720:	4605      	mov	r5, r0
 8089722:	2800      	cmp	r0, #0
 8089724:	d09c      	beq.n	8089660 <mbedtls_x509_crt_parse_der+0x218>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8089726:	4620      	mov	r0, r4
 8089728:	f7ff fe35 	bl	8089396 <mbedtls_x509_crt_free>
 808972c:	e7b1      	b.n	8089692 <mbedtls_x509_crt_parse_der+0x24a>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 808972e:	2302      	movs	r3, #2
 8089730:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 8089734:	4631      	mov	r1, r6
 8089736:	4658      	mov	r0, fp
 8089738:	f7fe fec7 	bl	80884ca <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 808973c:	4605      	mov	r5, r0
 808973e:	2800      	cmp	r0, #0
 8089740:	d092      	beq.n	8089668 <mbedtls_x509_crt_parse_der+0x220>
 8089742:	e7f0      	b.n	8089726 <mbedtls_x509_crt_parse_der+0x2de>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 8089744:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 8089748:	4631      	mov	r1, r6
 808974a:	4658      	mov	r0, fp
 808974c:	f7fd fc3e 	bl	8086fcc <mbedtls_x509_get_ext>
 8089750:	b908      	cbnz	r0, 8089756 <mbedtls_x509_crt_parse_der+0x30e>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8089752:	4680      	mov	r8, r0
 8089754:	e05a      	b.n	808980c <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8089756:	f110 0f62 	cmn.w	r0, #98	; 0x62
 808975a:	f040 80a5 	bne.w	80898a8 <mbedtls_x509_crt_parse_der+0x460>
 808975e:	e786      	b.n	808966e <mbedtls_x509_crt_parse_der+0x226>
 8089760:	ffffde80 	.word	0xffffde80
 8089764:	ffffdd9a 	.word	0xffffdd9a
 8089768:	ffffde1a 	.word	0xffffde1a
 808976c:	ffffd800 	.word	0xffffd800
 8089770:	ffffd780 	.word	0xffffd780
 8089774:	ffffda80 	.word	0xffffda80
 8089778:	ffffdb9a 	.word	0xffffdb9a
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808977c:	2330      	movs	r3, #48	; 0x30
 808977e:	aa07      	add	r2, sp, #28
 8089780:	4631      	mov	r1, r6
 8089782:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8089784:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8089788:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 808978c:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 8089790:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 8089794:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089798:	f7fa fb44 	bl	8083e24 <mbedtls_asn1_get_tag>
 808979c:	2800      	cmp	r0, #0
 808979e:	f040 80bd 	bne.w	808991c <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 80897a2:	9b06      	ldr	r3, [sp, #24]
 80897a4:	9d07      	ldr	r5, [sp, #28]

        /* Get extension ID */
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80897a6:	aa15      	add	r2, sp, #84	; 0x54

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 80897a8:	441d      	add	r5, r3

        /* Get extension ID */
        extn_oid.tag = **p;
 80897aa:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80897ac:	4631      	mov	r1, r6
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;

        /* Get extension ID */
        extn_oid.tag = **p;
 80897ae:	9314      	str	r3, [sp, #80]	; 0x50

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80897b0:	a806      	add	r0, sp, #24
 80897b2:	2306      	movs	r3, #6
 80897b4:	f7fa fb36 	bl	8083e24 <mbedtls_asn1_get_tag>
 80897b8:	2800      	cmp	r0, #0
 80897ba:	f040 80af 	bne.w	808991c <mbedtls_x509_crt_parse_der+0x4d4>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 80897be:	9a06      	ldr	r2, [sp, #24]
        *p += extn_oid.len;
 80897c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 80897c2:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
 80897c4:	4413      	add	r3, r2
 80897c6:	9306      	str	r3, [sp, #24]

        if( ( end - *p ) < 1 )
 80897c8:	1af3      	subs	r3, r6, r3
 80897ca:	2b00      	cmp	r3, #0
 80897cc:	dd51      	ble.n	8089872 <mbedtls_x509_crt_parse_der+0x42a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 80897ce:	aa08      	add	r2, sp, #32
 80897d0:	4629      	mov	r1, r5
 80897d2:	a806      	add	r0, sp, #24
 80897d4:	f7fa fb3a 	bl	8083e4c <mbedtls_asn1_get_bool>
 80897d8:	b9e0      	cbnz	r0, 8089814 <mbedtls_x509_crt_parse_der+0x3cc>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 80897da:	2304      	movs	r3, #4
 80897dc:	aa07      	add	r2, sp, #28
 80897de:	4629      	mov	r1, r5
 80897e0:	a806      	add	r0, sp, #24
 80897e2:	f7fa fb1f 	bl	8083e24 <mbedtls_asn1_get_tag>
 80897e6:	2800      	cmp	r0, #0
 80897e8:	f040 8098 	bne.w	808991c <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
 80897ec:	9b07      	ldr	r3, [sp, #28]
 80897ee:	9a06      	ldr	r2, [sp, #24]
 80897f0:	4413      	add	r3, r2
 80897f2:	429d      	cmp	r5, r3
 80897f4:	f040 814a 	bne.w	8089a8c <mbedtls_x509_crt_parse_der+0x644>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 80897f8:	a909      	add	r1, sp, #36	; 0x24
 80897fa:	a814      	add	r0, sp, #80	; 0x50
 80897fc:	f7fb ff40 	bl	8085680 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
 8089800:	b160      	cbz	r0, 808981c <mbedtls_x509_crt_parse_der+0x3d4>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 8089802:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 8089804:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 8089806:	2b00      	cmp	r3, #0
 8089808:	f040 8142 	bne.w	8089a90 <mbedtls_x509_crt_parse_der+0x648>
            return( 0 );

        return( ret );
    }

    while( *p < end )
 808980c:	9b06      	ldr	r3, [sp, #24]
 808980e:	429e      	cmp	r6, r3
 8089810:	d8b4      	bhi.n	808977c <mbedtls_x509_crt_parse_der+0x334>
 8089812:	e030      	b.n	8089876 <mbedtls_x509_crt_parse_der+0x42e>
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8089814:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8089818:	d0df      	beq.n	80897da <mbedtls_x509_crt_parse_der+0x392>
 808981a:	e07f      	b.n	808991c <mbedtls_x509_crt_parse_der+0x4d4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 808981c:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8089820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8089822:	ea12 0003 	ands.w	r0, r2, r3
 8089826:	f040 8135 	bne.w	8089a94 <mbedtls_x509_crt_parse_der+0x64c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 808982a:	431a      	orrs	r2, r3

        switch( ext_type )
 808982c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 8089830:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8

        switch( ext_type )
 8089834:	d023      	beq.n	808987e <mbedtls_x509_crt_parse_der+0x436>
 8089836:	dc74      	bgt.n	8089922 <mbedtls_x509_crt_parse_der+0x4da>
 8089838:	2b04      	cmp	r3, #4
 808983a:	f000 80a9 	beq.w	8089990 <mbedtls_x509_crt_parse_der+0x548>
 808983e:	2b20      	cmp	r3, #32
 8089840:	f040 812a 	bne.w	8089a98 <mbedtls_x509_crt_parse_der+0x650>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089844:	2330      	movs	r3, #48	; 0x30
 8089846:	aa0a      	add	r2, sp, #40	; 0x28
 8089848:	4629      	mov	r1, r5
 808984a:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 808984c:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089850:	f7fa fae8 	bl	8083e24 <mbedtls_asn1_get_tag>
 8089854:	bb20      	cbnz	r0, 80898a0 <mbedtls_x509_crt_parse_der+0x458>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
 8089856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089858:	9a06      	ldr	r2, [sp, #24]
 808985a:	4413      	add	r3, r2
 808985c:	429d      	cmp	r5, r3
 808985e:	f040 8115 	bne.w	8089a8c <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
 8089862:	9a06      	ldr	r2, [sp, #24]
 8089864:	4295      	cmp	r5, r2
 8089866:	f240 80f3 	bls.w	8089a50 <mbedtls_x509_crt_parse_der+0x608>
    {
        if( ( end - *p ) < 1 )
 808986a:	1aab      	subs	r3, r5, r2
 808986c:	2b00      	cmp	r3, #0
 808986e:	f300 80be 	bgt.w	80899ee <mbedtls_x509_crt_parse_der+0x5a6>
        extn_oid.p = *p;
        *p += extn_oid.len;

        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8089872:	488d      	ldr	r0, [pc, #564]	; (8089aa8 <mbedtls_x509_crt_parse_der+0x660>)
 8089874:	e018      	b.n	80898a8 <mbedtls_x509_crt_parse_der+0x460>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
 8089876:	f43f aefa 	beq.w	808966e <mbedtls_x509_crt_parse_der+0x226>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808987a:	4d8c      	ldr	r5, [pc, #560]	; (8089aac <mbedtls_x509_crt_parse_der+0x664>)
 808987c:	e753      	b.n	8089726 <mbedtls_x509_crt_parse_der+0x2de>

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 808987e:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8089882:	9303      	str	r3, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 8089884:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 8089888:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808988c:	2330      	movs	r3, #48	; 0x30
 808988e:	aa17      	add	r2, sp, #92	; 0x5c
 8089890:	4629      	mov	r1, r5
 8089892:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8089894:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089898:	f7fa fac4 	bl	8083e24 <mbedtls_asn1_get_tag>
 808989c:	2800      	cmp	r0, #0
 808989e:	d048      	beq.n	8089932 <mbedtls_x509_crt_parse_der+0x4ea>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80898a0:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80898a4:	2800      	cmp	r0, #0
 80898a6:	d0b1      	beq.n	808980c <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80898a8:	4605      	mov	r5, r0
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
 80898aa:	2800      	cmp	r0, #0
 80898ac:	f43f aedf 	beq.w	808966e <mbedtls_x509_crt_parse_der+0x226>
 80898b0:	e739      	b.n	8089726 <mbedtls_x509_crt_parse_der+0x2de>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 80898b2:	ab0e      	add	r3, sp, #56	; 0x38
 80898b4:	aa11      	add	r2, sp, #68	; 0x44
 80898b6:	4639      	mov	r1, r7
 80898b8:	a806      	add	r0, sp, #24
 80898ba:	f7fd fa13 	bl	8086ce4 <mbedtls_x509_get_alg>
 80898be:	4605      	mov	r5, r0
 80898c0:	2800      	cmp	r0, #0
 80898c2:	f47f af30 	bne.w	8089726 <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 80898c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80898c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80898ca:	429a      	cmp	r2, r3
 80898cc:	d10f      	bne.n	80898ee <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80898ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80898d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80898d2:	f009 fe2f 	bl	8093534 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 80898d6:	4605      	mov	r5, r0
 80898d8:	b948      	cbnz	r0, 80898ee <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
 80898da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80898dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80898de:	429a      	cmp	r2, r3
 80898e0:	d105      	bne.n	80898ee <mbedtls_x509_crt_parse_der+0x4a6>
        sig_params1.len != sig_params2.len ||
 80898e2:	b14a      	cbz	r2, 80898f8 <mbedtls_x509_crt_parse_der+0x4b0>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 80898e4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80898e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80898e8:	f009 fe24 	bl	8093534 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
 80898ec:	b120      	cbz	r0, 80898f8 <mbedtls_x509_crt_parse_der+0x4b0>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
 80898ee:	4620      	mov	r0, r4
 80898f0:	f7ff fd51 	bl	8089396 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 80898f4:	4d6e      	ldr	r5, [pc, #440]	; (8089ab0 <mbedtls_x509_crt_parse_der+0x668>)
 80898f6:	e6cf      	b.n	8089698 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 80898f8:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80898fc:	4639      	mov	r1, r7
 80898fe:	a806      	add	r0, sp, #24
 8089900:	f7fd fb26 	bl	8086f50 <mbedtls_x509_get_sig>
 8089904:	4606      	mov	r6, r0
 8089906:	b120      	cbz	r0, 8089912 <mbedtls_x509_crt_parse_der+0x4ca>
    {
        mbedtls_x509_crt_free( crt );
 8089908:	4620      	mov	r0, r4
 808990a:	f7ff fd44 	bl	8089396 <mbedtls_x509_crt_free>
 808990e:	4635      	mov	r5, r6
 8089910:	e6bf      	b.n	8089692 <mbedtls_x509_crt_parse_der+0x24a>
        return( ret );
    }

    if( p != end )
 8089912:	9b06      	ldr	r3, [sp, #24]
 8089914:	429f      	cmp	r7, r3
 8089916:	f000 80c3 	beq.w	8089aa0 <mbedtls_x509_crt_parse_der+0x658>
 808991a:	e6ac      	b.n	8089676 <mbedtls_x509_crt_parse_der+0x22e>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 808991c:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 8089920:	e7c2      	b.n	80898a8 <mbedtls_x509_crt_parse_der+0x460>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
 8089922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8089926:	d053      	beq.n	80899d0 <mbedtls_x509_crt_parse_der+0x588>
 8089928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 808992c:	f000 8097 	beq.w	8089a5e <mbedtls_x509_crt_parse_der+0x616>
 8089930:	e0b2      	b.n	8089a98 <mbedtls_x509_crt_parse_der+0x650>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
 8089932:	9b06      	ldr	r3, [sp, #24]
 8089934:	429d      	cmp	r5, r3
 8089936:	f43f af69 	beq.w	808980c <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 808993a:	465a      	mov	r2, fp
 808993c:	4629      	mov	r1, r5
 808993e:	a806      	add	r0, sp, #24
 8089940:	f7fa fa84 	bl	8083e4c <mbedtls_asn1_get_bool>
 8089944:	b178      	cbz	r0, 8089966 <mbedtls_x509_crt_parse_der+0x51e>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8089946:	f110 0f62 	cmn.w	r0, #98	; 0x62
 808994a:	d1a9      	bne.n	80898a0 <mbedtls_x509_crt_parse_der+0x458>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 808994c:	465a      	mov	r2, fp
 808994e:	4629      	mov	r1, r5
 8089950:	a806      	add	r0, sp, #24
 8089952:	f7fa fa94 	bl	8083e7e <mbedtls_asn1_get_int>

        if( ret != 0 )
 8089956:	2800      	cmp	r0, #0
 8089958:	d1a2      	bne.n	80898a0 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
 808995a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 808995e:	b113      	cbz	r3, 8089966 <mbedtls_x509_crt_parse_der+0x51e>
            *ca_istrue = 1;
 8089960:	2301      	movs	r3, #1
 8089962:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
 8089966:	9b06      	ldr	r3, [sp, #24]
 8089968:	429d      	cmp	r5, r3
 808996a:	f43f af4f 	beq.w	808980c <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 808996e:	9a03      	ldr	r2, [sp, #12]
 8089970:	4629      	mov	r1, r5
 8089972:	a806      	add	r0, sp, #24
 8089974:	f7fa fa83 	bl	8083e7e <mbedtls_asn1_get_int>
 8089978:	2800      	cmp	r0, #0
 808997a:	d191      	bne.n	80898a0 <mbedtls_x509_crt_parse_der+0x458>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
 808997c:	9b06      	ldr	r3, [sp, #24]
 808997e:	429d      	cmp	r5, r3
 8089980:	f040 8084 	bne.w	8089a8c <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 8089984:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8089988:	3301      	adds	r3, #1
 808998a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 808998e:	e73d      	b.n	808980c <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8089990:	9017      	str	r0, [sp, #92]	; 0x5c
 8089992:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 8089996:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8089998:	aa17      	add	r2, sp, #92	; 0x5c
 808999a:	4629      	mov	r1, r5
 808999c:	a806      	add	r0, sp, #24
 808999e:	f7fa faa5 	bl	8083eec <mbedtls_asn1_get_bitstring>
 80899a2:	2800      	cmp	r0, #0
 80899a4:	d165      	bne.n	8089a72 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
 80899a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80899a8:	2a00      	cmp	r2, #0
 80899aa:	d077      	beq.n	8089a9c <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 80899ac:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80899b0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80899b2:	5c2b      	ldrb	r3, [r5, r0]
 80899b4:	00c1      	lsls	r1, r0, #3
 80899b6:	408b      	lsls	r3, r1
 80899b8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80899bc:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80899be:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80899c0:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80899c2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80899c6:	f43f af21 	beq.w	808980c <mbedtls_x509_crt_parse_der+0x3c4>
 80899ca:	2804      	cmp	r0, #4
 80899cc:	d1f1      	bne.n	80899b2 <mbedtls_x509_crt_parse_der+0x56a>
 80899ce:	e71d      	b.n	808980c <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 80899d0:	2306      	movs	r3, #6
 80899d2:	f504 7284 	add.w	r2, r4, #264	; 0x108
 80899d6:	4629      	mov	r1, r5
 80899d8:	a806      	add	r0, sp, #24
 80899da:	f7fa fac0 	bl	8083f5e <mbedtls_asn1_get_sequence_of>
 80899de:	2800      	cmp	r0, #0
 80899e0:	d147      	bne.n	8089a72 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 80899e2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80899e6:	2b00      	cmp	r3, #0
 80899e8:	f47f af10 	bne.w	808980c <mbedtls_x509_crt_parse_der+0x3c4>
 80899ec:	e056      	b.n	8089a9c <mbedtls_x509_crt_parse_der+0x654>
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 80899ee:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80899f2:	4629      	mov	r1, r5
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
 80899f4:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80899f6:	a806      	add	r0, sp, #24
 80899f8:	aa17      	add	r2, sp, #92	; 0x5c
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 80899fa:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80899fc:	f7fa f9c0 	bl	8083d80 <mbedtls_asn1_get_len>
 8089a00:	9b03      	ldr	r3, [sp, #12]
 8089a02:	2800      	cmp	r0, #0
 8089a04:	f47f af4c 	bne.w	80898a0 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 8089a08:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8089a0c:	2a80      	cmp	r2, #128	; 0x80
 8089a0e:	d13f      	bne.n	8089a90 <mbedtls_x509_crt_parse_der+0x648>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8089a10:	2b82      	cmp	r3, #130	; 0x82
 8089a12:	d002      	beq.n	8089a1a <mbedtls_x509_crt_parse_der+0x5d2>
        {
            *p += tag_len;
 8089a14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8089a16:	9a06      	ldr	r2, [sp, #24]
 8089a18:	e017      	b.n	8089a4a <mbedtls_x509_crt_parse_der+0x602>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 8089a1a:	f8db 3008 	ldr.w	r3, [fp, #8]
 8089a1e:	b15b      	cbz	r3, 8089a38 <mbedtls_x509_crt_parse_der+0x5f0>
        {
            if( cur->next != NULL )
 8089a20:	f8db 300c 	ldr.w	r3, [fp, #12]
 8089a24:	2b00      	cmp	r3, #0
 8089a26:	d135      	bne.n	8089a94 <mbedtls_x509_crt_parse_der+0x64c>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8089a28:	2110      	movs	r1, #16
 8089a2a:	2001      	movs	r0, #1
 8089a2c:	f009 fc74 	bl	8093318 <calloc>
 8089a30:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
 8089a34:	b188      	cbz	r0, 8089a5a <mbedtls_x509_crt_parse_der+0x612>
 8089a36:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
 8089a38:	2382      	movs	r3, #130	; 0x82
 8089a3a:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
 8089a3e:	9a06      	ldr	r2, [sp, #24]
 8089a40:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
 8089a44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8089a46:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
 8089a4a:	4413      	add	r3, r2
 8089a4c:	9306      	str	r3, [sp, #24]
 8089a4e:	e708      	b.n	8089862 <mbedtls_x509_crt_parse_der+0x41a>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8089a50:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
 8089a54:	f43f aeda 	beq.w	808980c <mbedtls_x509_crt_parse_der+0x3c4>
 8089a58:	e018      	b.n	8089a8c <mbedtls_x509_crt_parse_der+0x644>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8089a5a:	4816      	ldr	r0, [pc, #88]	; (8089ab4 <mbedtls_x509_crt_parse_der+0x66c>)
 8089a5c:	e724      	b.n	80898a8 <mbedtls_x509_crt_parse_der+0x460>
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8089a5e:	9017      	str	r0, [sp, #92]	; 0x5c
 8089a60:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 8089a64:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8089a66:	aa17      	add	r2, sp, #92	; 0x5c
 8089a68:	4629      	mov	r1, r5
 8089a6a:	a806      	add	r0, sp, #24
 8089a6c:	f7fa fa3e 	bl	8083eec <mbedtls_asn1_get_bitstring>
 8089a70:	b120      	cbz	r0, 8089a7c <mbedtls_x509_crt_parse_der+0x634>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 8089a72:	f5b0 5014 	subs.w	r0, r0, #9472	; 0x2500
 8089a76:	f43f aec9 	beq.w	808980c <mbedtls_x509_crt_parse_der+0x3c4>
 8089a7a:	e715      	b.n	80898a8 <mbedtls_x509_crt_parse_der+0x460>
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
 8089a7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8089a7e:	2b01      	cmp	r3, #1
 8089a80:	d10c      	bne.n	8089a9c <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 8089a82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8089a84:	781b      	ldrb	r3, [r3, #0]
 8089a86:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8089a8a:	e6bf      	b.n	808980c <mbedtls_x509_crt_parse_der+0x3c4>

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8089a8c:	4807      	ldr	r0, [pc, #28]	; (8089aac <mbedtls_x509_crt_parse_der+0x664>)
 8089a8e:	e70b      	b.n	80898a8 <mbedtls_x509_crt_parse_der+0x460>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8089a90:	4809      	ldr	r0, [pc, #36]	; (8089ab8 <mbedtls_x509_crt_parse_der+0x670>)
 8089a92:	e709      	b.n	80898a8 <mbedtls_x509_crt_parse_der+0x460>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 8089a94:	4809      	ldr	r0, [pc, #36]	; (8089abc <mbedtls_x509_crt_parse_der+0x674>)
 8089a96:	e707      	b.n	80898a8 <mbedtls_x509_crt_parse_der+0x460>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 8089a98:	4809      	ldr	r0, [pc, #36]	; (8089ac0 <mbedtls_x509_crt_parse_der+0x678>)
 8089a9a:	e705      	b.n	80898a8 <mbedtls_x509_crt_parse_der+0x460>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8089a9c:	4809      	ldr	r0, [pc, #36]	; (8089ac4 <mbedtls_x509_crt_parse_der+0x67c>)
 8089a9e:	e703      	b.n	80898a8 <mbedtls_x509_crt_parse_der+0x460>

        return( ret );
    }

    return( 0 );
}
 8089aa0:	4628      	mov	r0, r5
 8089aa2:	b01b      	add	sp, #108	; 0x6c
 8089aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089aa8:	ffffdaa0 	.word	0xffffdaa0
 8089aac:	ffffda9a 	.word	0xffffda9a
 8089ab0:	ffffd980 	.word	0xffffd980
 8089ab4:	ffffda96 	.word	0xffffda96
 8089ab8:	ffffda9e 	.word	0xffffda9e
 8089abc:	ffffdb00 	.word	0xffffdb00
 8089ac0:	ffffdf80 	.word	0xffffdf80
 8089ac4:	ffffda9c 	.word	0xffffda9c

08089ac8 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
 8089ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8089acc:	460d      	mov	r5, r1
 8089ace:	b088      	sub	sp, #32
 8089ad0:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
 8089ad2:	4681      	mov	r9, r0
 8089ad4:	2800      	cmp	r0, #0
 8089ad6:	d054      	beq.n	8089b82 <mbedtls_x509_crt_parse+0xba>
 8089ad8:	2900      	cmp	r1, #0
 8089ada:	d052      	beq.n	8089b82 <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8089adc:	2a00      	cmp	r2, #0
 8089ade:	d054      	beq.n	8089b8a <mbedtls_x509_crt_parse+0xc2>
 8089ae0:	188b      	adds	r3, r1, r2
 8089ae2:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8089ae6:	2c00      	cmp	r4, #0
 8089ae8:	d14f      	bne.n	8089b8a <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 8089aea:	492c      	ldr	r1, [pc, #176]	; (8089b9c <mbedtls_x509_crt_parse+0xd4>)
 8089aec:	4628      	mov	r0, r5
 8089aee:	f009 fd9b 	bl	8093628 <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8089af2:	2800      	cmp	r0, #0
 8089af4:	d049      	beq.n	8089b8a <mbedtls_x509_crt_parse+0xc2>
 8089af6:	46a0      	mov	r8, r4
 8089af8:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
 8089afa:	2f01      	cmp	r7, #1
 8089afc:	d938      	bls.n	8089b70 <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
 8089afe:	a805      	add	r0, sp, #20
 8089b00:	f005 fc16 	bl	808f330 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );
 8089b04:	ab04      	add	r3, sp, #16
 8089b06:	9302      	str	r3, [sp, #8]
 8089b08:	2300      	movs	r3, #0
 8089b0a:	9301      	str	r3, [sp, #4]
 8089b0c:	9300      	str	r3, [sp, #0]
 8089b0e:	4a24      	ldr	r2, [pc, #144]	; (8089ba0 <mbedtls_x509_crt_parse+0xd8>)
 8089b10:	462b      	mov	r3, r5
 8089b12:	4922      	ldr	r1, [pc, #136]	; (8089b9c <mbedtls_x509_crt_parse+0xd4>)
 8089b14:	a805      	add	r0, sp, #20
 8089b16:	f005 fc11 	bl	808f33c <mbedtls_pem_read_buffer>

            if( ret == 0 )
 8089b1a:	4606      	mov	r6, r0
 8089b1c:	b968      	cbnz	r0, 8089b3a <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 8089b1e:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8089b20:	9a06      	ldr	r2, [sp, #24]
 8089b22:	9905      	ldr	r1, [sp, #20]
 8089b24:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 8089b26:	1aff      	subs	r7, r7, r3
                buf += use_len;
 8089b28:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8089b2a:	f7ff fc8d 	bl	8089448 <mbedtls_x509_crt_parse_der>
 8089b2e:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
 8089b30:	a805      	add	r0, sp, #20
 8089b32:	f005 fc91 	bl	808f458 <mbedtls_pem_free>

            if( ret != 0 )
 8089b36:	b96e      	cbnz	r6, 8089b54 <mbedtls_x509_crt_parse+0x8c>
 8089b38:	e015      	b.n	8089b66 <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 8089b3a:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 8089b3e:	d015      	beq.n	8089b6c <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8089b40:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8089b44:	d014      	beq.n	8089b70 <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
 8089b46:	a805      	add	r0, sp, #20
 8089b48:	f005 fc86 	bl	808f458 <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
 8089b4c:	9b04      	ldr	r3, [sp, #16]
 8089b4e:	1aff      	subs	r7, r7, r3
                buf += use_len;
 8089b50:	441d      	add	r5, r3
 8089b52:	e002      	b.n	8089b5a <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 8089b54:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
 8089b58:	d008      	beq.n	8089b6c <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
 8089b5a:	f1b8 0f00 	cmp.w	r8, #0
 8089b5e:	bf08      	it	eq
 8089b60:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
 8089b62:	3401      	adds	r4, #1
                continue;
 8089b64:	e7c9      	b.n	8089afa <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
 8089b66:	f04f 0a01 	mov.w	sl, #1
 8089b6a:	e7c6      	b.n	8089afa <mbedtls_x509_crt_parse+0x32>
 8089b6c:	4630      	mov	r0, r6
 8089b6e:	e011      	b.n	8089b94 <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
 8089b70:	f1ba 0f00 	cmp.w	sl, #0
 8089b74:	d107      	bne.n	8089b86 <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
 8089b76:	480b      	ldr	r0, [pc, #44]	; (8089ba4 <mbedtls_x509_crt_parse+0xdc>)
 8089b78:	f1b8 0f00 	cmp.w	r8, #0
 8089b7c:	bf18      	it	ne
 8089b7e:	4640      	movne	r0, r8
 8089b80:	e008      	b.n	8089b94 <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8089b82:	4809      	ldr	r0, [pc, #36]	; (8089ba8 <mbedtls_x509_crt_parse+0xe0>)
 8089b84:	e006      	b.n	8089b94 <mbedtls_x509_crt_parse+0xcc>
 8089b86:	4620      	mov	r0, r4
 8089b88:	e004      	b.n	8089b94 <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 8089b8a:	463a      	mov	r2, r7
 8089b8c:	4629      	mov	r1, r5
 8089b8e:	4648      	mov	r0, r9
 8089b90:	f7ff fc5a 	bl	8089448 <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
 8089b94:	b008      	add	sp, #32
 8089b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089b9a:	bf00      	nop
 8089b9c:	08095a09 	.word	0x08095a09
 8089ba0:	08095a25 	.word	0x08095a25
 8089ba4:	ffffd880 	.word	0xffffd880
 8089ba8:	ffffd800 	.word	0xffffd800

08089bac <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8089bac:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8089bae:	2300      	movs	r3, #0
 8089bb0:	4288      	cmp	r0, r1
 8089bb2:	d002      	beq.n	8089bba <_ZL15mbedtls_zeroizePvj+0xe>
 8089bb4:	7003      	strb	r3, [r0, #0]
 8089bb6:	3001      	adds	r0, #1
 8089bb8:	e7fa      	b.n	8089bb0 <_ZL15mbedtls_zeroizePvj+0x4>
 8089bba:	4770      	bx	lr

08089bbc <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
 8089bbc:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
 8089bbe:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
 8089bc0:	b113      	cbz	r3, 8089bc8 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 8089bc2:	0889      	lsrs	r1, r1, #2
 8089bc4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8089bc6:	4718      	bx	r3
 8089bc8:	4770      	bx	lr
	...

08089bcc <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089bce:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089bd0:	b0a9      	sub	sp, #164	; 0xa4
 8089bd2:	4604      	mov	r4, r0
 8089bd4:	460f      	mov	r7, r1
 8089bd6:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 8089bd8:	b905      	cbnz	r5, 8089bdc <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 8089bda:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
 8089bdc:	a80d      	add	r0, sp, #52	; 0x34
 8089bde:	f7f8 ff43 	bl	8082a68 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8089be2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8089be4:	a80d      	add	r0, sp, #52	; 0x34
 8089be6:	3118      	adds	r1, #24
 8089be8:	f7f8 ff4c 	bl	8082a84 <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089bec:	4b10      	ldr	r3, [pc, #64]	; (8089c30 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
 8089bee:	4911      	ldr	r1, [pc, #68]	; (8089c34 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 8089bf0:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089bf2:	2e00      	cmp	r6, #0
 8089bf4:	bf0c      	ite	eq
 8089bf6:	461e      	moveq	r6, r3
 8089bf8:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 8089bfa:	a905      	add	r1, sp, #20
 8089bfc:	f7f9 fb3c 	bl	8083278 <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 8089c00:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
 8089c02:	220c      	movs	r2, #12
 8089c04:	2420      	movs	r4, #32
 8089c06:	9202      	str	r2, [sp, #8]
 8089c08:	9701      	str	r7, [sp, #4]
 8089c0a:	9400      	str	r4, [sp, #0]
 8089c0c:	4632      	mov	r2, r6
 8089c0e:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 8089c12:	2130      	movs	r1, #48	; 0x30
 8089c14:	ab05      	add	r3, sp, #20
 8089c16:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8089c1a:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
 8089c1c:	a80d      	add	r0, sp, #52	; 0x34
 8089c1e:	f7f8 ff27 	bl	8082a70 <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 8089c22:	4621      	mov	r1, r4
 8089c24:	a805      	add	r0, sp, #20
 8089c26:	f7ff ffc1 	bl	8089bac <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 8089c2a:	b029      	add	sp, #164	; 0xa4
 8089c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089c2e:	bf00      	nop
 8089c30:	08095e39 	.word	0x08095e39
 8089c34:	08095e49 	.word	0x08095e49

08089c38 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 8089c38:	b530      	push	{r4, r5, lr}
 8089c3a:	4605      	mov	r5, r0
 8089c3c:	460c      	mov	r4, r1
 8089c3e:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 8089c40:	a801      	add	r0, sp, #4
 8089c42:	f7f8 ff11 	bl	8082a68 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8089c46:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8089c48:	a801      	add	r0, sp, #4
 8089c4a:	3118      	adds	r1, #24
 8089c4c:	f7f8 ff1a 	bl	8082a84 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 8089c50:	4621      	mov	r1, r4
 8089c52:	a801      	add	r0, sp, #4
 8089c54:	f7f9 fb10 	bl	8083278 <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
 8089c58:	a801      	add	r0, sp, #4
 8089c5a:	f7f8 ff09 	bl	8082a70 <mbedtls_sha256_free>

    return;
}
 8089c5e:	b01d      	add	sp, #116	; 0x74
 8089c60:	bd30      	pop	{r4, r5, pc}
	...

08089c64 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 8089c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089c68:	4604      	mov	r4, r0
 8089c6a:	b0b7      	sub	sp, #220	; 0xdc
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 8089c6c:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 8089c6e:	468a      	mov	sl, r1
 8089c70:	4693      	mov	fp, r2
 8089c72:	4699      	mov	r9, r3
 8089c74:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 8089c76:	f7fe fa63 	bl	8088140 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 8089c7a:	4620      	mov	r0, r4
 8089c7c:	f7fe fa54 	bl	8088128 <mbedtls_md_info_from_type>
 8089c80:	4607      	mov	r7, r0
 8089c82:	2800      	cmp	r0, #0
 8089c84:	d073      	beq.n	8089d6e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10a>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
 8089c86:	f7fe fb93 	bl	80883b0 <mbedtls_md_get_size>
 8089c8a:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 8089c8c:	4648      	mov	r0, r9
 8089c8e:	f009 fcae 	bl	80935ee <strlen>
 8089c92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8089c94:	1823      	adds	r3, r4, r0
 8089c96:	189a      	adds	r2, r3, r2
 8089c98:	2a80      	cmp	r2, #128	; 0x80
 8089c9a:	4605      	mov	r5, r0
 8089c9c:	9301      	str	r3, [sp, #4]
 8089c9e:	d868      	bhi.n	8089d72 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
 8089ca0:	ab16      	add	r3, sp, #88	; 0x58
 8089ca2:	eb03 0804 	add.w	r8, r3, r4
 8089ca6:	4602      	mov	r2, r0
 8089ca8:	4649      	mov	r1, r9
 8089caa:	4640      	mov	r0, r8
 8089cac:	f009 fc51 	bl	8093552 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 8089cb0:	9b01      	ldr	r3, [sp, #4]
 8089cb2:	a816      	add	r0, sp, #88	; 0x58
 8089cb4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8089cb6:	9940      	ldr	r1, [sp, #256]	; 0x100
 8089cb8:	4418      	add	r0, r3
 8089cba:	f009 fc4a 	bl	8093552 <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 8089cbe:	4639      	mov	r1, r7
 8089cc0:	2201      	movs	r2, #1
 8089cc2:	a803      	add	r0, sp, #12
 8089cc4:	f7fe fa62 	bl	808818c <mbedtls_md_setup>
 8089cc8:	4607      	mov	r7, r0
 8089cca:	2800      	cmp	r0, #0
 8089ccc:	d152      	bne.n	8089d74 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 8089cce:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8089cd0:	465a      	mov	r2, fp
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 8089cd2:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8089cd4:	4651      	mov	r1, sl
 8089cd6:	a803      	add	r0, sp, #12
 8089cd8:	f7fe faa8 	bl	808822c <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 8089cdc:	462a      	mov	r2, r5
 8089cde:	4641      	mov	r1, r8
 8089ce0:	a803      	add	r0, sp, #12
 8089ce2:	f7fe fb03 	bl	80882ec <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 8089ce6:	a916      	add	r1, sp, #88	; 0x58
 8089ce8:	a803      	add	r0, sp, #12
 8089cea:	f7fe fb0f 	bl	808830c <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 8089cee:	46b9      	mov	r9, r7
 8089cf0:	f10d 0818 	add.w	r8, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8089cf4:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 8089cf6:	45b1      	cmp	r9, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 8089cf8:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 8089cfa:	d22c      	bcs.n	8089d56 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 8089cfc:	f7fe fb36 	bl	808836c <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8089d00:	462a      	mov	r2, r5
 8089d02:	a916      	add	r1, sp, #88	; 0x58
 8089d04:	a803      	add	r0, sp, #12
 8089d06:	f7fe faf1 	bl	80882ec <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 8089d0a:	4641      	mov	r1, r8
 8089d0c:	a803      	add	r0, sp, #12
 8089d0e:	f7fe fafd 	bl	808830c <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 8089d12:	a803      	add	r0, sp, #12
 8089d14:	f7fe fb2a 	bl	808836c <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 8089d18:	4622      	mov	r2, r4
 8089d1a:	a916      	add	r1, sp, #88	; 0x58
 8089d1c:	a803      	add	r0, sp, #12
 8089d1e:	f7fe fae5 	bl	80882ec <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 8089d22:	a916      	add	r1, sp, #88	; 0x58
 8089d24:	a803      	add	r0, sp, #12
 8089d26:	f7fe faf1 	bl	808830c <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 8089d2a:	eb09 0104 	add.w	r1, r9, r4
 8089d2e:	428e      	cmp	r6, r1
 8089d30:	bf36      	itet	cc
 8089d32:	fbb6 f2f4 	udivcc	r2, r6, r4
 8089d36:	4622      	movcs	r2, r4
 8089d38:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 8089d3c:	9842      	ldr	r0, [sp, #264]	; 0x108
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 8089d3e:	2300      	movs	r3, #0
            dstbuf[i + j]  = h_i[j];
 8089d40:	4481      	add	r9, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 8089d42:	4293      	cmp	r3, r2
 8089d44:	d101      	bne.n	8089d4a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe6>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 8089d46:	4689      	mov	r9, r1
 8089d48:	e7d5      	b.n	8089cf6 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 8089d4a:	f818 0003 	ldrb.w	r0, [r8, r3]
 8089d4e:	f809 0003 	strb.w	r0, [r9, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 8089d52:	3301      	adds	r3, #1
 8089d54:	e7f5      	b.n	8089d42 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xde>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 8089d56:	f7fe f9f8 	bl	808814a <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
 8089d5a:	2180      	movs	r1, #128	; 0x80
 8089d5c:	a816      	add	r0, sp, #88	; 0x58
 8089d5e:	f7ff ff25 	bl	8089bac <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 8089d62:	4640      	mov	r0, r8
 8089d64:	2140      	movs	r1, #64	; 0x40
 8089d66:	f7ff ff21 	bl	8089bac <_ZL15mbedtls_zeroizePvj>

    return( 0 );
 8089d6a:	2000      	movs	r0, #0
 8089d6c:	e002      	b.n	8089d74 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089d6e:	4803      	ldr	r0, [pc, #12]	; (8089d7c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x118>)
 8089d70:	e000      	b.n	8089d74 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089d72:	4803      	ldr	r0, [pc, #12]	; (8089d80 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)

    mbedtls_zeroize( tmp, sizeof( tmp ) );
    mbedtls_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
 8089d74:	b037      	add	sp, #220	; 0xdc
 8089d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089d7a:	bf00      	nop
 8089d7c:	ffff9400 	.word	0xffff9400
 8089d80:	ffff8f00 	.word	0xffff8f00

08089d84 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 8089d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 8089d86:	9c08      	ldr	r4, [sp, #32]
 8089d88:	9403      	str	r4, [sp, #12]
 8089d8a:	9c07      	ldr	r4, [sp, #28]
 8089d8c:	9402      	str	r4, [sp, #8]
 8089d8e:	9c06      	ldr	r4, [sp, #24]
 8089d90:	e88d 0018 	stmia.w	sp, {r3, r4}
 8089d94:	4613      	mov	r3, r2
 8089d96:	460a      	mov	r2, r1
 8089d98:	4601      	mov	r1, r0
 8089d9a:	2006      	movs	r0, #6
 8089d9c:	f7ff ff62 	bl	8089c64 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 8089da0:	b004      	add	sp, #16
 8089da2:	bd10      	pop	{r4, pc}

08089da4 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 8089da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 8089da6:	9c08      	ldr	r4, [sp, #32]
 8089da8:	9403      	str	r4, [sp, #12]
 8089daa:	9c07      	ldr	r4, [sp, #28]
 8089dac:	9402      	str	r4, [sp, #8]
 8089dae:	9c06      	ldr	r4, [sp, #24]
 8089db0:	e88d 0018 	stmia.w	sp, {r3, r4}
 8089db4:	4613      	mov	r3, r2
 8089db6:	460a      	mov	r2, r1
 8089db8:	4601      	mov	r1, r0
 8089dba:	2007      	movs	r0, #7
 8089dbc:	f7ff ff52 	bl	8089c64 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 8089dc0:	b004      	add	sp, #16
 8089dc2:	bd10      	pop	{r4, pc}

08089dc4 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089dc6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089dc8:	b0c7      	sub	sp, #284	; 0x11c
 8089dca:	4604      	mov	r4, r0
 8089dcc:	460f      	mov	r7, r1
 8089dce:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 8089dd0:	b905      	cbnz	r5, 8089dd4 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 8089dd2:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
 8089dd4:	a810      	add	r0, sp, #64	; 0x40
 8089dd6:	f004 fa1f 	bl	808e218 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 8089dda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8089ddc:	a810      	add	r0, sp, #64	; 0x40
 8089dde:	3188      	adds	r1, #136	; 0x88
 8089de0:	f004 fa28 	bl	808e234 <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089de4:	4b10      	ldr	r3, [pc, #64]	; (8089e28 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
 8089de6:	4911      	ldr	r1, [pc, #68]	; (8089e2c <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8089de8:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089dea:	2e00      	cmp	r6, #0
 8089dec:	bf0c      	ite	eq
 8089dee:	461e      	moveq	r6, r3
 8089df0:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8089df2:	a904      	add	r1, sp, #16
 8089df4:	f005 f948 	bl	808f088 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 8089df8:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
 8089dfa:	220c      	movs	r2, #12
 8089dfc:	2430      	movs	r4, #48	; 0x30
 8089dfe:	9202      	str	r2, [sp, #8]
 8089e00:	9701      	str	r7, [sp, #4]
 8089e02:	9400      	str	r4, [sp, #0]
 8089e04:	4632      	mov	r2, r6
 8089e06:	4621      	mov	r1, r4
 8089e08:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 8089e0c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8089e10:	ab04      	add	r3, sp, #16
 8089e12:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
 8089e14:	a810      	add	r0, sp, #64	; 0x40
 8089e16:	f004 fa03 	bl	808e220 <mbedtls_sha512_free>

    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 8089e1a:	4621      	mov	r1, r4
 8089e1c:	a804      	add	r0, sp, #16
 8089e1e:	f7ff fec5 	bl	8089bac <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 8089e22:	b047      	add	sp, #284	; 0x11c
 8089e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089e26:	bf00      	nop
 8089e28:	08095e39 	.word	0x08095e39
 8089e2c:	08095e49 	.word	0x08095e49

08089e30 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
 8089e30:	b530      	push	{r4, r5, lr}
 8089e32:	4605      	mov	r5, r0
 8089e34:	460c      	mov	r4, r1
 8089e36:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
 8089e38:	4668      	mov	r0, sp
 8089e3a:	f004 f9ed 	bl	808e218 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 8089e3e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8089e40:	4668      	mov	r0, sp
 8089e42:	3188      	adds	r1, #136	; 0x88
 8089e44:	f004 f9f6 	bl	808e234 <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
 8089e48:	4621      	mov	r1, r4
 8089e4a:	4668      	mov	r0, sp
 8089e4c:	f005 f91c 	bl	808f088 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
 8089e50:	4668      	mov	r0, sp
 8089e52:	f004 f9e5 	bl	808e220 <mbedtls_sha512_free>

    return;
}
 8089e56:	b037      	add	sp, #220	; 0xdc
 8089e58:	bd30      	pop	{r4, r5, pc}
	...

08089e5c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 8089e5c:	b570      	push	{r4, r5, r6, lr}
 8089e5e:	4604      	mov	r4, r0
 8089e60:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 8089e62:	2001      	movs	r0, #1
 8089e64:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 8089e66:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 8089e68:	f009 fa56 	bl	8093318 <calloc>
    if( new_cert == NULL )
 8089e6c:	b178      	cbz	r0, 8089e8e <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 8089e6e:	6822      	ldr	r2, [r4, #0]
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;
 8089e70:	2300      	movs	r3, #0

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
 8089e72:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
 8089e74:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
 8089e76:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 8089e78:	b912      	cbnz	r2, 8089e80 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
 8089e7a:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
 8089e7c:	4610      	mov	r0, r2
 8089e7e:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
 8089e80:	6893      	ldr	r3, [r2, #8]
 8089e82:	b10b      	cbz	r3, 8089e88 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
 8089e84:	461a      	mov	r2, r3
 8089e86:	e7fb      	b.n	8089e80 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
 8089e88:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
 8089e8a:	4618      	mov	r0, r3
 8089e8c:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8089e8e:	4801      	ldr	r0, [pc, #4]	; (8089e94 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
 8089e90:	bd70      	pop	{r4, r5, r6, pc}
 8089e92:	bf00      	nop
 8089e94:	ffff8100 	.word	0xffff8100

08089e98 <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8089e98:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8089e9a:	3018      	adds	r0, #24
 8089e9c:	f7f9 b9b2 	b.w	8083204 <mbedtls_sha256_update_ret>

08089ea0 <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089ea0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8089ea2:	3088      	adds	r0, #136	; 0x88
 8089ea4:	f005 b8a8 	b.w	808eff8 <mbedtls_sha512_update_ret>

08089ea8 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
 8089ea8:	b570      	push	{r4, r5, r6, lr}
 8089eaa:	4604      	mov	r4, r0
 8089eac:	460d      	mov	r5, r1
 8089eae:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8089eb0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8089eb2:	3018      	adds	r0, #24
 8089eb4:	f7f9 f9a6 	bl	8083204 <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089eb8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8089eba:	4632      	mov	r2, r6
 8089ebc:	4629      	mov	r1, r5
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 8089ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089ec2:	3088      	adds	r0, #136	; 0x88
 8089ec4:	f005 b898 	b.w	808eff8 <mbedtls_sha512_update_ret>

08089ec8 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089ecc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 8089ece:	6c04      	ldr	r4, [r0, #64]	; 0x40
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089ed0:	b0d7      	sub	sp, #348	; 0x15c
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089ed2:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 8089ed4:	6823      	ldr	r3, [r4, #0]
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 8089ed6:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089ed8:	4680      	mov	r8, r0
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 8089eda:	7a18      	ldrb	r0, [r3, #8]
 8089edc:	f7f9 fcc8 	bl	8083870 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 8089ee0:	4606      	mov	r6, r0
 8089ee2:	b908      	cbnz	r0, 8089ee8 <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089ee4:	48a5      	ldr	r0, [pc, #660]	; (808a17c <mbedtls_ssl_derive_keys+0x2b4>)
 8089ee6:	e145      	b.n	808a174 <mbedtls_ssl_derive_keys+0x2ac>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 8089ee8:	6823      	ldr	r3, [r4, #0]
 8089eea:	7a58      	ldrb	r0, [r3, #9]
 8089eec:	f7fe f91c 	bl	8088128 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8089ef0:	4682      	mov	sl, r0
 8089ef2:	2800      	cmp	r0, #0
 8089ef4:	d0f6      	beq.n	8089ee4 <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8089ef6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8089efa:	2b03      	cmp	r3, #3
 8089efc:	d001      	beq.n	8089f02 <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089efe:	48a0      	ldr	r0, [pc, #640]	; (808a180 <mbedtls_ssl_derive_keys+0x2b8>)
 8089f00:	e138      	b.n	808a174 <mbedtls_ssl_derive_keys+0x2ac>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 8089f02:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8089f04:	7a5b      	ldrb	r3, [r3, #9]
 8089f06:	2b07      	cmp	r3, #7
 8089f08:	d107      	bne.n	8089f1a <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
 8089f0a:	4b9e      	ldr	r3, [pc, #632]	; (808a184 <mbedtls_ssl_derive_keys+0x2bc>)
 8089f0c:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 8089f10:	4b9d      	ldr	r3, [pc, #628]	; (808a188 <mbedtls_ssl_derive_keys+0x2c0>)
 8089f12:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 8089f16:	4b9d      	ldr	r3, [pc, #628]	; (808a18c <mbedtls_ssl_derive_keys+0x2c4>)
 8089f18:	e006      	b.n	8089f28 <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
 8089f1a:	4b9d      	ldr	r3, [pc, #628]	; (808a190 <mbedtls_ssl_derive_keys+0x2c8>)
 8089f1c:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 8089f20:	4b9c      	ldr	r3, [pc, #624]	; (808a194 <mbedtls_ssl_derive_keys+0x2cc>)
 8089f22:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 8089f26:	4b9c      	ldr	r3, [pc, #624]	; (808a198 <mbedtls_ssl_derive_keys+0x2d0>)
 8089f28:	f8c5 3168 	str.w	r3, [r5, #360]	; 0x168
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 8089f2c:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 8089f30:	f505 7bda 	add.w	fp, r5, #436	; 0x1b4
 8089f34:	f505 79ba 	add.w	r9, r5, #372	; 0x174
 8089f38:	b9ab      	cbnz	r3, 8089f66 <mbedtls_ssl_derive_keys+0x9e>
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 8089f3a:	2330      	movs	r3, #48	; 0x30
 8089f3c:	9302      	str	r3, [sp, #8]
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8089f3e:	9b05      	ldr	r3, [sp, #20]
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 8089f40:	4a96      	ldr	r2, [pc, #600]	; (808a19c <mbedtls_ssl_derive_keys+0x2d4>)
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8089f42:	332c      	adds	r3, #44	; 0x2c
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 8089f44:	9301      	str	r3, [sp, #4]
 8089f46:	2340      	movs	r3, #64	; 0x40
 8089f48:	9300      	str	r3, [sp, #0]
 8089f4a:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
 8089f4e:	464b      	mov	r3, r9
 8089f50:	4658      	mov	r0, fp
 8089f52:	f8d5 716c 	ldr.w	r7, [r5, #364]	; 0x16c
 8089f56:	47b8      	blx	r7
        if( ret != 0 )
 8089f58:	2800      	cmp	r0, #0
 8089f5a:	f040 810b 	bne.w	808a174 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 8089f5e:	2130      	movs	r1, #48	; 0x30
 8089f60:	4658      	mov	r0, fp
 8089f62:	f7ff fe23 	bl	8089bac <_ZL15mbedtls_zeroizePvj>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 8089f66:	464b      	mov	r3, r9
 8089f68:	af06      	add	r7, sp, #24
 8089f6a:	463a      	mov	r2, r7
 8089f6c:	6818      	ldr	r0, [r3, #0]
 8089f6e:	6859      	ldr	r1, [r3, #4]
 8089f70:	3308      	adds	r3, #8
 8089f72:	c203      	stmia	r2!, {r0, r1}
 8089f74:	455b      	cmp	r3, fp
 8089f76:	4617      	mov	r7, r2
 8089f78:	d1f7      	bne.n	8089f6a <mbedtls_ssl_derive_keys+0xa2>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 8089f7a:	464f      	mov	r7, r9
 8089f7c:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 8089f80:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 8089f84:	4673      	mov	r3, lr
 8089f86:	cb03      	ldmia	r3!, {r0, r1}
 8089f88:	455b      	cmp	r3, fp
 8089f8a:	6038      	str	r0, [r7, #0]
 8089f8c:	6079      	str	r1, [r7, #4]
 8089f8e:	469e      	mov	lr, r3
 8089f90:	f107 0708 	add.w	r7, r7, #8
 8089f94:	d1f6      	bne.n	8089f84 <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 8089f96:	f10d 0e18 	add.w	lr, sp, #24
 8089f9a:	f505 77ca 	add.w	r7, r5, #404	; 0x194
 8089f9e:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8089fa2:	4673      	mov	r3, lr
 8089fa4:	cb03      	ldmia	r3!, {r0, r1}
 8089fa6:	4563      	cmp	r3, ip
 8089fa8:	6038      	str	r0, [r7, #0]
 8089faa:	6079      	str	r1, [r7, #4]
 8089fac:	469e      	mov	lr, r3
 8089fae:	f107 0708 	add.w	r7, r7, #8
 8089fb2:	d1f6      	bne.n	8089fa2 <mbedtls_ssl_derive_keys+0xda>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 8089fb4:	2140      	movs	r1, #64	; 0x40
 8089fb6:	a806      	add	r0, sp, #24
 8089fb8:	f7ff fdf8 	bl	8089bac <_ZL15mbedtls_zeroizePvj>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 8089fbc:	9f05      	ldr	r7, [sp, #20]
                              handshake->randbytes, 64, keyblk, 256 );
 8089fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8089fc2:	f8cd b004 	str.w	fp, [sp, #4]
 8089fc6:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8089fca:	9302      	str	r3, [sp, #8]
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 8089fcc:	372c      	adds	r7, #44	; 0x2c
                              handshake->randbytes, 64, keyblk, 256 );
 8089fce:	f8cd b000 	str.w	fp, [sp]
 8089fd2:	f8d5 516c 	ldr.w	r5, [r5, #364]	; 0x16c
 8089fd6:	464b      	mov	r3, r9
 8089fd8:	4a71      	ldr	r2, [pc, #452]	; (808a1a0 <mbedtls_ssl_derive_keys+0x2d8>)
 8089fda:	2130      	movs	r1, #48	; 0x30
 8089fdc:	4638      	mov	r0, r7
 8089fde:	47a8      	blx	r5
    if( ret != 0 )
 8089fe0:	2800      	cmp	r0, #0
 8089fe2:	f040 80c7 	bne.w	808a174 <mbedtls_ssl_derive_keys+0x2ac>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 8089fe6:	4659      	mov	r1, fp
 8089fe8:	4648      	mov	r0, r9
 8089fea:	f7ff fddf 	bl	8089bac <_ZL15mbedtls_zeroizePvj>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 8089fee:	6873      	ldr	r3, [r6, #4]
 8089ff0:	08db      	lsrs	r3, r3, #3
 8089ff2:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 8089ff4:	7873      	ldrb	r3, [r6, #1]
 8089ff6:	2b06      	cmp	r3, #6
 8089ff8:	d001      	beq.n	8089ffe <mbedtls_ssl_derive_keys+0x136>
 8089ffa:	2b08      	cmp	r3, #8
 8089ffc:	d10f      	bne.n	808a01e <mbedtls_ssl_derive_keys+0x156>
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;

        transform->ivlen = 12;
 8089ffe:	220c      	movs	r2, #12
 808a000:	60e2      	str	r2, [r4, #12]
        transform->fixed_ivlen = 4;
 808a002:	2204      	movs	r2, #4
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 808a004:	2300      	movs	r3, #0
        mac_key_len = 0;

        transform->ivlen = 12;
        transform->fixed_ivlen = 4;
 808a006:	6122      	str	r2, [r4, #16]

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 808a008:	6822      	ldr	r2, [r4, #0]
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 808a00a:	6163      	str	r3, [r4, #20]
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 808a00c:	7f12      	ldrb	r2, [r2, #28]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;
 808a00e:	469a      	mov	sl, r3
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 808a010:	f012 0f02 	tst.w	r2, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 808a014:	bf14      	ite	ne
 808a016:	2210      	movne	r2, #16
 808a018:	2218      	moveq	r2, #24
 808a01a:	60a2      	str	r2, [r4, #8]
 808a01c:	e01d      	b.n	808a05a <mbedtls_ssl_derive_keys+0x192>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 808a01e:	2201      	movs	r2, #1
 808a020:	4651      	mov	r1, sl
 808a022:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808a026:	f7fe f8b1 	bl	808818c <mbedtls_md_setup>
 808a02a:	2800      	cmp	r0, #0
 808a02c:	f040 80a2 	bne.w	808a174 <mbedtls_ssl_derive_keys+0x2ac>
 808a030:	2201      	movs	r2, #1
 808a032:	4651      	mov	r1, sl
 808a034:	f104 0044 	add.w	r0, r4, #68	; 0x44
 808a038:	f7fe f8a8 	bl	808818c <mbedtls_md_setup>
 808a03c:	2800      	cmp	r0, #0
 808a03e:	f040 8099 	bne.w	808a174 <mbedtls_ssl_derive_keys+0x2ac>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 808a042:	4650      	mov	r0, sl
 808a044:	f7fe f9b4 	bl	80883b0 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
 808a048:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 808a04a:	68f1      	ldr	r1, [r6, #12]
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 808a04c:	4682      	mov	sl, r0
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 808a04e:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 808a050:	7873      	ldrb	r3, [r6, #1]
 808a052:	2b07      	cmp	r3, #7
 808a054:	d17f      	bne.n	808a156 <mbedtls_ssl_derive_keys+0x28e>
            transform->minlen = transform->maclen;
 808a056:	f8c4 a008 	str.w	sl, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a05a:	f8d8 3000 	ldr.w	r3, [r8]
 808a05e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808a062:	07db      	lsls	r3, r3, #31
 808a064:	f53f af4b 	bmi.w	8089efe <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 808a068:	6863      	ldr	r3, [r4, #4]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
 808a06a:	ea4f 094a 	mov.w	r9, sl, lsl #1
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 808a06e:	f8d4 b010 	ldr.w	fp, [r4, #16]
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 808a072:	eb09 0503 	add.w	r5, r9, r3
 808a076:	aa16      	add	r2, sp, #88	; 0x58
 808a078:	4415      	add	r5, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
 808a07a:	f1bb 0f00 	cmp.w	fp, #0
 808a07e:	d101      	bne.n	808a084 <mbedtls_ssl_derive_keys+0x1bc>
 808a080:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 808a084:	18e9      	adds	r1, r5, r3
 808a086:	465a      	mov	r2, fp
 808a088:	f104 0018 	add.w	r0, r4, #24
 808a08c:	9305      	str	r3, [sp, #20]
 808a08e:	f009 fa60 	bl	8093552 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
 808a092:	9b05      	ldr	r3, [sp, #20]
 808a094:	465a      	mov	r2, fp
 808a096:	eb0b 0103 	add.w	r1, fp, r3
 808a09a:	4429      	add	r1, r5
 808a09c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 808a0a0:	f009 fa57 	bl	8093552 <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 808a0a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808a0a8:	2b00      	cmp	r3, #0
 808a0aa:	f77f af28 	ble.w	8089efe <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
 808a0ae:	f1ba 0f00 	cmp.w	sl, #0
 808a0b2:	d00d      	beq.n	808a0d0 <mbedtls_ssl_derive_keys+0x208>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 808a0b4:	4652      	mov	r2, sl
 808a0b6:	a916      	add	r1, sp, #88	; 0x58
 808a0b8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808a0bc:	f7fe f8b6 	bl	808822c <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 808a0c0:	ab16      	add	r3, sp, #88	; 0x58
 808a0c2:	4652      	mov	r2, sl
 808a0c4:	eb03 010a 	add.w	r1, r3, sl
 808a0c8:	f104 0044 	add.w	r0, r4, #68	; 0x44
 808a0cc:	f7fe f8ae 	bl	808822c <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
 808a0d0:	f8d8 0000 	ldr.w	r0, [r8]
 808a0d4:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 808a0d8:	f1b8 0f00 	cmp.w	r8, #0
 808a0dc:	d008      	beq.n	808a0f0 <mbedtls_ssl_derive_keys+0x228>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
 808a0de:	f8cd b004 	str.w	fp, [sp, #4]
 808a0e2:	6863      	ldr	r3, [r4, #4]
 808a0e4:	aa16      	add	r2, sp, #88	; 0x58
 808a0e6:	9300      	str	r3, [sp, #0]
 808a0e8:	4639      	mov	r1, r7
 808a0ea:	4653      	mov	r3, sl
 808a0ec:	6c00      	ldr	r0, [r0, #64]	; 0x40
 808a0ee:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 808a0f0:	f104 0750 	add.w	r7, r4, #80	; 0x50
 808a0f4:	4631      	mov	r1, r6
 808a0f6:	4638      	mov	r0, r7
 808a0f8:	f7f9 fdb0 	bl	8083c5c <mbedtls_cipher_setup>
 808a0fc:	2800      	cmp	r0, #0
 808a0fe:	d139      	bne.n	808a174 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 808a100:	3490      	adds	r4, #144	; 0x90
 808a102:	4631      	mov	r1, r6
 808a104:	4620      	mov	r0, r4
 808a106:	f7f9 fda9 	bl	8083c5c <mbedtls_cipher_setup>
 808a10a:	bb98      	cbnz	r0, 808a174 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 808a10c:	a916      	add	r1, sp, #88	; 0x58
 808a10e:	2301      	movs	r3, #1
 808a110:	6872      	ldr	r2, [r6, #4]
 808a112:	4449      	add	r1, r9
 808a114:	4638      	mov	r0, r7
 808a116:	f7f9 fbe3 	bl	80838e0 <mbedtls_cipher_setkey>
 808a11a:	bb58      	cbnz	r0, 808a174 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 808a11c:	4603      	mov	r3, r0
 808a11e:	6872      	ldr	r2, [r6, #4]
 808a120:	4629      	mov	r1, r5
 808a122:	4620      	mov	r0, r4
 808a124:	f7f9 fbdc 	bl	80838e0 <mbedtls_cipher_setkey>
 808a128:	bb20      	cbnz	r0, 808a174 <mbedtls_ssl_derive_keys+0x2ac>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 808a12a:	7873      	ldrb	r3, [r6, #1]
 808a12c:	2b02      	cmp	r3, #2
 808a12e:	d006      	beq.n	808a13e <mbedtls_ssl_derive_keys+0x276>
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 808a130:	a816      	add	r0, sp, #88	; 0x58
 808a132:	f44f 7180 	mov.w	r1, #256	; 0x100
 808a136:	f7ff fd39 	bl	8089bac <_ZL15mbedtls_zeroizePvj>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
 808a13a:	2000      	movs	r0, #0
 808a13c:	e01a      	b.n	808a174 <mbedtls_ssl_derive_keys+0x2ac>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
    {
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 808a13e:	2104      	movs	r1, #4
 808a140:	4638      	mov	r0, r7
 808a142:	f7f9 fd4d 	bl	8083be0 <mbedtls_cipher_set_padding_mode>
 808a146:	b9a8      	cbnz	r0, 808a174 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
            return( ret );
        }

        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 808a148:	2104      	movs	r1, #4
 808a14a:	4620      	mov	r0, r4
 808a14c:	f7f9 fd48 	bl	8083be0 <mbedtls_cipher_set_padding_mode>
 808a150:	2800      	cmp	r0, #0
 808a152:	d0ed      	beq.n	808a130 <mbedtls_ssl_derive_keys+0x268>
 808a154:	e00e      	b.n	808a174 <mbedtls_ssl_derive_keys+0x2ac>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
 808a156:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
 808a158:	fbba f2f3 	udiv	r2, sl, r3
 808a15c:	fb03 3302 	mla	r3, r3, r2, r3
 808a160:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 808a162:	f8d8 200c 	ldr.w	r2, [r8, #12]
 808a166:	3a02      	subs	r2, #2
 808a168:	2a01      	cmp	r2, #1
 808a16a:	f63f aec8 	bhi.w	8089efe <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
 808a16e:	440b      	add	r3, r1
 808a170:	60a3      	str	r3, [r4, #8]
 808a172:	e772      	b.n	808a05a <mbedtls_ssl_derive_keys+0x192>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
 808a174:	b057      	add	sp, #348	; 0x15c
 808a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a17a:	bf00      	nop
 808a17c:	ffff8f00 	.word	0xffff8f00
 808a180:	ffff9400 	.word	0xffff9400
 808a184:	08089da5 	.word	0x08089da5
 808a188:	08089e31 	.word	0x08089e31
 808a18c:	08089dc5 	.word	0x08089dc5
 808a190:	08089d85 	.word	0x08089d85
 808a194:	08089c39 	.word	0x08089c39
 808a198:	08089bcd 	.word	0x08089bcd
 808a19c:	08095e59 	.word	0x08095e59
 808a1a0:	08095e67 	.word	0x08095e67

0808a1a4 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 808a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 808a1a6:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 808a1a8:	4604      	mov	r4, r0
 808a1aa:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 808a1ac:	b90b      	cbnz	r3, 808a1b2 <mbedtls_ssl_fetch_input+0xe>
 808a1ae:	6983      	ldr	r3, [r0, #24]
 808a1b0:	b19b      	cbz	r3, 808a1da <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 808a1b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 808a1b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 808a1b6:	1a9b      	subs	r3, r3, r2
 808a1b8:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 808a1bc:	330d      	adds	r3, #13
 808a1be:	42b3      	cmp	r3, r6
 808a1c0:	d30b      	bcc.n	808a1da <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 808a1c2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 808a1c4:	42ae      	cmp	r6, r5
 808a1c6:	d90a      	bls.n	808a1de <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 808a1c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
 808a1ca:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 808a1cc:	b14b      	cbz	r3, 808a1e2 <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 808a1ce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 808a1d0:	4798      	blx	r3
 808a1d2:	2802      	cmp	r0, #2
 808a1d4:	d105      	bne.n	808a1e2 <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 808a1d6:	4812      	ldr	r0, [pc, #72]	; (808a220 <mbedtls_ssl_fetch_input+0x7c>)
 808a1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a1da:	4812      	ldr	r0, [pc, #72]	; (808a224 <mbedtls_ssl_fetch_input+0x80>)
 808a1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
 808a1de:	2000      	movs	r0, #0
 808a1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
 808a1e2:	69a7      	ldr	r7, [r4, #24]
 808a1e4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 808a1e6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 808a1e8:	b137      	cbz	r7, 808a1f8 <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
 808a1ea:	6823      	ldr	r3, [r4, #0]
 808a1ec:	4401      	add	r1, r0
 808a1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808a1f0:	462a      	mov	r2, r5
 808a1f2:	69e0      	ldr	r0, [r4, #28]
 808a1f4:	47b8      	blx	r7
 808a1f6:	e004      	b.n	808a202 <mbedtls_ssl_fetch_input+0x5e>
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
                                       ssl->in_hdr + ssl->in_left, len );
 808a1f8:	4401      	add	r1, r0
 808a1fa:	6963      	ldr	r3, [r4, #20]
 808a1fc:	462a      	mov	r2, r5
 808a1fe:	69e0      	ldr	r0, [r4, #28]
 808a200:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
 808a202:	2800      	cmp	r0, #0
 808a204:	d006      	beq.n	808a214 <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
 808a206:	db09      	blt.n	808a21c <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 808a208:	4285      	cmp	r5, r0
 808a20a:	d305      	bcc.n	808a218 <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
 808a20c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 808a20e:	4418      	add	r0, r3
 808a210:	6760      	str	r0, [r4, #116]	; 0x74
 808a212:	e7d6      	b.n	808a1c2 <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 808a214:	4804      	ldr	r0, [pc, #16]	; (808a228 <mbedtls_ssl_fetch_input+0x84>)
 808a216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808a218:	4804      	ldr	r0, [pc, #16]	; (808a22c <mbedtls_ssl_fetch_input+0x88>)
 808a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
 808a21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808a21e:	bf00      	nop
 808a220:	ffff9800 	.word	0xffff9800
 808a224:	ffff8f00 	.word	0xffff8f00
 808a228:	ffff8d80 	.word	0xffff8d80
 808a22c:	ffff9400 	.word	0xffff9400

0808a230 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 808a230:	b510      	push	{r4, lr}
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 808a232:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 808a234:	4604      	mov	r4, r0
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 808a236:	b34b      	cbz	r3, 808a28c <mbedtls_ssl_flush_output+0x5c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 808a238:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 808a23c:	b9a3      	cbnz	r3, 808a268 <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
 808a23e:	2000      	movs	r0, #0
 808a240:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
              ssl->out_msglen - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 808a242:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 808a246:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 808a24a:	3105      	adds	r1, #5
 808a24c:	1a89      	subs	r1, r1, r2
 808a24e:	4401      	add	r1, r0
 808a250:	6923      	ldr	r3, [r4, #16]
 808a252:	69e0      	ldr	r0, [r4, #28]
 808a254:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
 808a256:	2800      	cmp	r0, #0
 808a258:	dd1b      	ble.n	808a292 <mbedtls_ssl_flush_output+0x62>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 808a25a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 808a25e:	4283      	cmp	r3, r0
 808a260:	d316      	bcc.n	808a290 <mbedtls_ssl_flush_output+0x60>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
 808a262:	1a18      	subs	r0, r3, r0
 808a264:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
 808a268:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 808a26c:	2a00      	cmp	r2, #0
 808a26e:	d1e8      	bne.n	808a242 <mbedtls_ssl_flush_output+0x12>
 808a270:	2207      	movs	r2, #7

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
        if( ++ssl->out_ctr[i - 1] != 0 )
 808a272:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 808a276:	5c8b      	ldrb	r3, [r1, r2]
 808a278:	3301      	adds	r3, #1
 808a27a:	b2db      	uxtb	r3, r3
 808a27c:	548b      	strb	r3, [r1, r2]
 808a27e:	2b00      	cmp	r3, #0
 808a280:	d1dd      	bne.n	808a23e <mbedtls_ssl_flush_output+0xe>
        }

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 808a282:	f112 32ff 	adds.w	r2, r2, #4294967295
 808a286:	d2f4      	bcs.n	808a272 <mbedtls_ssl_flush_output+0x42>

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 808a288:	4802      	ldr	r0, [pc, #8]	; (808a294 <mbedtls_ssl_flush_output+0x64>)
 808a28a:	bd10      	pop	{r4, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a28c:	4802      	ldr	r0, [pc, #8]	; (808a298 <mbedtls_ssl_flush_output+0x68>)
 808a28e:	bd10      	pop	{r4, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808a290:	4802      	ldr	r0, [pc, #8]	; (808a29c <mbedtls_ssl_flush_output+0x6c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
 808a292:	bd10      	pop	{r4, pc}
 808a294:	ffff9480 	.word	0xffff9480
 808a298:	ffff8f00 	.word	0xffff8f00
 808a29c:	ffff9400 	.word	0xffff9400

0808a2a0 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 808a2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808a2a2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 808a2a6:	b097      	sub	sp, #92	; 0x5c
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808a2a8:	2b16      	cmp	r3, #22
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 808a2aa:	4604      	mov	r4, r0
    int ret, done = 0, out_msg_type;
    size_t len = ssl->out_msglen;
 808a2ac:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808a2b0:	d11a      	bne.n	808a2e8 <mbedtls_ssl_write_record+0x48>
    {
        out_msg_type = ssl->out_msg[0];
 808a2b2:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 808a2b6:	780a      	ldrb	r2, [r1, #0]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 808a2b8:	b11a      	cbz	r2, 808a2c2 <mbedtls_ssl_write_record+0x22>
 808a2ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808a2bc:	2b00      	cmp	r3, #0
 808a2be:	f000 8139 	beq.w	808a534 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 808a2c2:	1f2b      	subs	r3, r5, #4
 808a2c4:	0c18      	lsrs	r0, r3, #16
 808a2c6:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 808a2c8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a2cc:	0a18      	lsrs	r0, r3, #8
 808a2ce:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 808a2d0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a2d4:	70cb      	strb	r3, [r1, #3]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 808a2d6:	b13a      	cbz	r2, 808a2e8 <mbedtls_ssl_write_record+0x48>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 808a2d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a2da:	462a      	mov	r2, r5
 808a2dc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 808a2e0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a2e4:	4620      	mov	r0, r4
 808a2e6:	4798      	blx	r3
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 808a2e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 808a2ec:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 808a2f0:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 808a2f2:	68e2      	ldr	r2, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 808a2f4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a2f8:	68a1      	ldr	r1, [r4, #8]
        ver[1] = (unsigned char) minor;
 808a2fa:	709a      	strb	r2, [r3, #2]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a2fc:	7059      	strb	r1, [r3, #1]
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        ssl->out_len[0] = (unsigned char)( len >> 8 );
 808a2fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 808a302:	0a2a      	lsrs	r2, r5, #8
 808a304:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 808a306:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 808a30a:	705d      	strb	r5, [r3, #1]

        if( ssl->transform_out != NULL )
 808a30c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808a30e:	2800      	cmp	r0, #0
 808a310:	f000 8107 	beq.w	808a522 <mbedtls_ssl_write_record+0x282>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 808a314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808a316:	2b00      	cmp	r3, #0
 808a318:	f000 810c 	beq.w	808a534 <mbedtls_ssl_write_record+0x294>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 808a31c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 808a31e:	b105      	cbz	r5, 808a322 <mbedtls_ssl_write_record+0x82>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 808a320:	786d      	ldrb	r5, [r5, #1]
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 808a322:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 808a326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808a32a:	f200 8105 	bhi.w	808a538 <mbedtls_ssl_write_record+0x298>

    /*
     * Add MAC before if needed
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( mode == MBEDTLS_MODE_STREAM ||
 808a32e:	2d07      	cmp	r5, #7
 808a330:	d001      	beq.n	808a336 <mbedtls_ssl_write_record+0x96>
 808a332:	2d02      	cmp	r5, #2
 808a334:	d13b      	bne.n	808a3ae <mbedtls_ssl_write_record+0x10e>
        }
        else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 808a336:	68e3      	ldr	r3, [r4, #12]
 808a338:	2b00      	cmp	r3, #0
 808a33a:	f340 80fb 	ble.w	808a534 <mbedtls_ssl_write_record+0x294>
        {
            unsigned char mac[MBEDTLS_SSL_MAC_ADD];

            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 808a33e:	2208      	movs	r2, #8
 808a340:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 808a344:	3038      	adds	r0, #56	; 0x38
 808a346:	f7fd ffd1 	bl	80882ec <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 808a34a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808a34c:	2203      	movs	r2, #3
 808a34e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 808a352:	3038      	adds	r0, #56	; 0x38
 808a354:	f7fd ffca 	bl	80882ec <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 808a358:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808a35a:	2202      	movs	r2, #2
 808a35c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 808a360:	3038      	adds	r0, #56	; 0x38
 808a362:	f7fd ffc3 	bl	80882ec <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 808a366:	6ba0      	ldr	r0, [r4, #56]	; 0x38
                             ssl->out_msg, ssl->out_msglen );
 808a368:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 808a36c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a370:	3038      	adds	r0, #56	; 0x38
 808a372:	f7fd ffbb 	bl	80882ec <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 808a376:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808a378:	a90a      	add	r1, sp, #40	; 0x28
 808a37a:	3038      	adds	r0, #56	; 0x38
 808a37c:	f7fd ffc6 	bl	808830c <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 808a380:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
        auth_done++;
 808a382:	2601      	movs	r6, #1
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
                             ssl->out_msg, ssl->out_msglen );
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 808a384:	3038      	adds	r0, #56	; 0x38
 808a386:	f7fd fff1 	bl	808836c <mbedtls_md_hmac_reset>

            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 808a38a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 808a38e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808a392:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808a394:	4418      	add	r0, r3
 808a396:	6952      	ldr	r2, [r2, #20]
 808a398:	a90a      	add	r1, sp, #40	; 0x28
 808a39a:	f009 f8da 	bl	8093552 <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
 808a39e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808a3a0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 808a3a4:	695b      	ldr	r3, [r3, #20]
 808a3a6:	4413      	add	r3, r2
 808a3a8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 808a3ac:	e000      	b.n	808a3b0 <mbedtls_ssl_write_record+0x110>
 * Encryption/decryption functions
 */
static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
{
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 808a3ae:	2600      	movs	r6, #0
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 808a3b0:	2d06      	cmp	r5, #6
 808a3b2:	d001      	beq.n	808a3b8 <mbedtls_ssl_write_record+0x118>
 808a3b4:	2d08      	cmp	r5, #8
 808a3b6:	d15c      	bne.n	808a472 <mbedtls_ssl_write_record+0x1d2>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 808a3b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 808a3ba:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 808a3be:	681a      	ldr	r2, [r3, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 808a3c0:	6879      	ldr	r1, [r7, #4]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a3c2:	7f12      	ldrb	r2, [r2, #28]

        memcpy( add_data, ssl->out_ctr, 8 );
 808a3c4:	6838      	ldr	r0, [r7, #0]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a3c6:	f012 0f02 	tst.w	r2, #2

        memcpy( add_data, ssl->out_ctr, 8 );
 808a3ca:	aa0a      	add	r2, sp, #40	; 0x28
 808a3cc:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 808a3ce:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a3d2:	68a1      	ldr	r1, [r4, #8]
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
 808a3d4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 808a3d8:	68e2      	ldr	r2, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a3da:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 808a3de:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 808a3e2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a3e6:	bf08      	it	eq
 808a3e8:	2510      	moveq	r5, #16

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 808a3ea:	ea4f 2112 	mov.w	r1, r2, lsr #8
 808a3ee:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
        add_data[12] = ssl->out_msglen & 0xFF;
 808a3f2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 808a3f6:	6919      	ldr	r1, [r3, #16]
 808a3f8:	68da      	ldr	r2, [r3, #12]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a3fa:	bf18      	it	ne
 808a3fc:	2508      	movne	r5, #8
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 808a3fe:	1a52      	subs	r2, r2, r1
 808a400:	2a08      	cmp	r2, #8
 808a402:	f040 8097 	bne.w	808a534 <mbedtls_ssl_write_record+0x294>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
                             ssl->out_ctr, 8 );
 808a406:	683a      	ldr	r2, [r7, #0]
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 808a408:	3318      	adds	r3, #24
                             ssl->out_ctr, 8 );
 808a40a:	505a      	str	r2, [r3, r1]
 808a40c:	687a      	ldr	r2, [r7, #4]
 808a40e:	1858      	adds	r0, r3, r1
 808a410:	6042      	str	r2, [r0, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 808a412:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 808a416:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 808a41a:	680b      	ldr	r3, [r1, #0]
 808a41c:	6013      	str	r3, [r2, #0]
 808a41e:	684b      	ldr	r3, [r1, #4]
 808a420:	6053      	str	r3, [r2, #4]
        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
 808a422:	6ba0      	ldr	r0, [r4, #56]	; 0x38

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
 808a424:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 808a428:	68c3      	ldr	r3, [r0, #12]
 808a42a:	6901      	ldr	r1, [r0, #16]
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
 808a42c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 808a430:	443b      	add	r3, r7
 808a432:	1a5b      	subs	r3, r3, r1
 808a434:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 808a438:	19d3      	adds	r3, r2, r7
 808a43a:	9305      	str	r3, [sp, #20]
 808a43c:	ab09      	add	r3, sp, #36	; 0x24
 808a43e:	9304      	str	r3, [sp, #16]
 808a440:	230d      	movs	r3, #13
 808a442:	9300      	str	r3, [sp, #0]
 808a444:	9506      	str	r5, [sp, #24]
 808a446:	9203      	str	r2, [sp, #12]
 808a448:	9702      	str	r7, [sp, #8]
 808a44a:	9201      	str	r2, [sp, #4]
 808a44c:	68c2      	ldr	r2, [r0, #12]
 808a44e:	f100 0118 	add.w	r1, r0, #24
 808a452:	ab0a      	add	r3, sp, #40	; 0x28
 808a454:	3050      	adds	r0, #80	; 0x50
 808a456:	f7f9 fc41 	bl	8083cdc <mbedtls_cipher_auth_encrypt>
 808a45a:	2800      	cmp	r0, #0
 808a45c:	d173      	bne.n	808a546 <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
 808a45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808a460:	429f      	cmp	r7, r3
 808a462:	d167      	bne.n	808a534 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 808a464:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        auth_done++;
 808a468:	3601      	adds	r6, #1
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 808a46a:	441d      	add	r5, r3
 808a46c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 808a470:	e04c      	b.n	808a50c <mbedtls_ssl_write_record+0x26c>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 808a472:	2d02      	cmp	r5, #2
 808a474:	d15e      	bne.n	808a534 <mbedtls_ssl_write_record+0x294>
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
 808a476:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
    {
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;
 808a478:	2200      	movs	r2, #0
 808a47a:	920a      	str	r2, [sp, #40]	; 0x28

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 808a47c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
                 ssl->transform_out->ivlen;
 808a480:	68d9      	ldr	r1, [r3, #12]
 808a482:	1c45      	adds	r5, r0, #1
 808a484:	fbb5 f3f1 	udiv	r3, r5, r1
 808a488:	fb01 5513 	mls	r5, r1, r3, r5
 808a48c:	1b4b      	subs	r3, r1, r5
        if( padlen == ssl->transform_out->ivlen )
 808a48e:	4299      	cmp	r1, r3
 808a490:	d054      	beq.n	808a53c <mbedtls_ssl_write_record+0x29c>
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 808a492:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a496:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 808a49a:	4411      	add	r1, r2
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 808a49c:	3201      	adds	r2, #1
 808a49e:	4293      	cmp	r3, r2
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 808a4a0:	540b      	strb	r3, [r1, r0]
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 808a4a2:	d2f6      	bcs.n	808a492 <mbedtls_ssl_write_record+0x1f2>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 808a4a4:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 808a4a8:	3501      	adds	r5, #1
 808a4aa:	441d      	add	r5, r3
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a4ac:	68e3      	ldr	r3, [r4, #12]
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 808a4ae:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a4b2:	2b01      	cmp	r3, #1
 808a4b4:	dc02      	bgt.n	808a4bc <mbedtls_ssl_write_record+0x21c>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;

        enc_msglen = ssl->out_msglen;
        enc_msg = ssl->out_msg;
 808a4b6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808a4ba:	e018      	b.n	808a4ee <mbedtls_ssl_write_record+0x24e>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            /*
             * Generate IV
             */
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 808a4bc:	6823      	ldr	r3, [r4, #0]
 808a4be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                  ssl->transform_out->ivlen );
 808a4c0:	699d      	ldr	r5, [r3, #24]
 808a4c2:	68ca      	ldr	r2, [r1, #12]
 808a4c4:	69d8      	ldr	r0, [r3, #28]
 808a4c6:	3118      	adds	r1, #24
 808a4c8:	47a8      	blx	r5
            if( ret != 0 )
 808a4ca:	2800      	cmp	r0, #0
 808a4cc:	d13b      	bne.n	808a546 <mbedtls_ssl_write_record+0x2a6>
                return( ret );

            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 808a4ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    ssl->transform_out->ivlen );
 808a4d0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 808a4d4:	68ca      	ldr	r2, [r1, #12]
 808a4d6:	3118      	adds	r1, #24
 808a4d8:	f009 f83b 	bl	8093552 <memcpy>
            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 808a4dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
 808a4de:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 808a4e2:	68d2      	ldr	r2, [r2, #12]
                    ssl->transform_out->ivlen );

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
 808a4e4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 808a4e8:	442a      	add	r2, r5
 808a4ea:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
                            "including %d bytes of IV and %d bytes of padding",
                            ssl->out_msglen, ssl->transform_out->ivlen,
                            padlen + 1 ) );

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 808a4ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808a4f0:	aa0a      	add	r2, sp, #40	; 0x28
 808a4f2:	9202      	str	r2, [sp, #8]
 808a4f4:	9301      	str	r3, [sp, #4]
 808a4f6:	9500      	str	r5, [sp, #0]
 808a4f8:	68c2      	ldr	r2, [r0, #12]
 808a4fa:	f100 0118 	add.w	r1, r0, #24
 808a4fe:	3050      	adds	r0, #80	; 0x50
 808a500:	f7f9 fbca 	bl	8083c98 <mbedtls_cipher_crypt>
 808a504:	b9f8      	cbnz	r0, 808a546 <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( enc_msglen != olen )
 808a506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a508:	429d      	cmp	r5, r3
 808a50a:	d113      	bne.n	808a534 <mbedtls_ssl_write_record+0x294>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 808a50c:	2e01      	cmp	r6, #1
 808a50e:	d111      	bne.n	808a534 <mbedtls_ssl_write_record+0x294>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
 808a510:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 808a514:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 808a518:	0a19      	lsrs	r1, r3, #8
 808a51a:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 808a51c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 808a520:	7053      	strb	r3, [r2, #1]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 808a522:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808a526:	4620      	mov	r0, r4
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 808a528:	3305      	adds	r3, #5
 808a52a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808a52e:	f7ff fe7f 	bl	808a230 <mbedtls_ssl_flush_output>
 808a532:	e008      	b.n	808a546 <mbedtls_ssl_write_record+0x2a6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808a534:	4805      	ldr	r0, [pc, #20]	; (808a54c <mbedtls_ssl_write_record+0x2ac>)
 808a536:	e006      	b.n	808a546 <mbedtls_ssl_write_record+0x2a6>
    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a538:	4805      	ldr	r0, [pc, #20]	; (808a550 <mbedtls_ssl_write_record+0x2b0>)
 808a53a:	e004      	b.n	808a546 <mbedtls_ssl_write_record+0x2a6>
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 808a53c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808a540:	541a      	strb	r2, [r3, r0]
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;
 808a542:	4613      	mov	r3, r2
 808a544:	e7ae      	b.n	808a4a4 <mbedtls_ssl_write_record+0x204>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
}
 808a546:	b017      	add	sp, #92	; 0x5c
 808a548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a54a:	bf00      	nop
 808a54c:	ffff9400 	.word	0xffff9400
 808a550:	ffff8f00 	.word	0xffff8f00

0808a554 <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 808a554:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 808a556:	6f04      	ldr	r4, [r0, #112]	; 0x70
 808a558:	2c03      	cmp	r4, #3
 808a55a:	d90f      	bls.n	808a57c <mbedtls_ssl_prepare_handshake_record+0x28>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
 808a55c:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 808a55e:	788a      	ldrb	r2, [r1, #2]
 808a560:	784b      	ldrb	r3, [r1, #1]
 808a562:	0212      	lsls	r2, r2, #8
 808a564:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 808a568:	78ca      	ldrb	r2, [r1, #3]
 808a56a:	4313      	orrs	r3, r2
 808a56c:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 808a56e:	4a04      	ldr	r2, [pc, #16]	; (808a580 <mbedtls_ssl_prepare_handshake_record+0x2c>)
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
                    ( ssl->in_msg[2] << 8  ) |
                      ssl->in_msg[3] );
 808a570:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 808a572:	429c      	cmp	r4, r3
 808a574:	bf34      	ite	cc
 808a576:	4610      	movcc	r0, r2
 808a578:	2000      	movcs	r0, #0
 808a57a:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 808a57c:	4801      	ldr	r0, [pc, #4]	; (808a584 <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
 808a57e:	bd10      	pop	{r4, pc}
 808a580:	ffff8f80 	.word	0xffff8f80
 808a584:	ffff8e00 	.word	0xffff8e00

0808a588 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 808a588:	6842      	ldr	r2, [r0, #4]

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 808a58a:	b410      	push	{r4}

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 808a58c:	2a10      	cmp	r2, #16
 808a58e:	d008      	beq.n	808a5a2 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
 808a590:	6b02      	ldr	r2, [r0, #48]	; 0x30
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 808a592:	b132      	cbz	r2, 808a5a2 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 808a594:	f8d2 4160 	ldr.w	r4, [r2, #352]	; 0x160
 808a598:	6e41      	ldr	r1, [r0, #100]	; 0x64
 808a59a:	4623      	mov	r3, r4
 808a59c:	6f82      	ldr	r2, [r0, #120]	; 0x78
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 808a59e:	bc10      	pop	{r4}
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 808a5a0:	4718      	bx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 808a5a2:	bc10      	pop	{r4}
 808a5a4:	4770      	bx	lr
	...

0808a5a8 <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 808a5a8:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808a5aa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 808a5ac:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808a5ae:	2b16      	cmp	r3, #22
 808a5b0:	d004      	beq.n	808a5bc <mbedtls_ssl_handle_message_type+0x14>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 808a5b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808a5b4:	2b15      	cmp	r3, #21
 808a5b6:	d006      	beq.n	808a5c6 <mbedtls_ssl_handle_message_type+0x1e>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 808a5b8:	2000      	movs	r0, #0
 808a5ba:	bd10      	pop	{r4, pc}
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 808a5bc:	f7ff ffca 	bl	808a554 <mbedtls_ssl_prepare_handshake_record>
 808a5c0:	2800      	cmp	r0, #0
 808a5c2:	d0f6      	beq.n	808a5b2 <mbedtls_ssl_handle_message_type+0xa>
 808a5c4:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
    {
        if( ssl->in_msglen != 2 )
 808a5c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a5c8:	2b02      	cmp	r3, #2
 808a5ca:	d10c      	bne.n	808a5e6 <mbedtls_ssl_handle_message_type+0x3e>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 808a5cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808a5ce:	781a      	ldrb	r2, [r3, #0]
 808a5d0:	2a02      	cmp	r2, #2
 808a5d2:	d00a      	beq.n	808a5ea <mbedtls_ssl_handle_message_type+0x42>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 808a5d4:	2a01      	cmp	r2, #1
 808a5d6:	d10a      	bne.n	808a5ee <mbedtls_ssl_handle_message_type+0x46>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 808a5d8:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 808a5da:	b153      	cbz	r3, 808a5f2 <mbedtls_ssl_handle_message_type+0x4a>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 808a5dc:	2b64      	cmp	r3, #100	; 0x64
 808a5de:	4806      	ldr	r0, [pc, #24]	; (808a5f8 <mbedtls_ssl_handle_message_type+0x50>)
 808a5e0:	bf08      	it	eq
 808a5e2:	2000      	moveq	r0, #0
 808a5e4:	bd10      	pop	{r4, pc}
            /* Note: Standard allows for more than one 2 byte alert
               to be packed in a single message, but Mbed TLS doesn't
               currently support this. */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 808a5e6:	4805      	ldr	r0, [pc, #20]	; (808a5fc <mbedtls_ssl_handle_message_type+0x54>)
 808a5e8:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 808a5ea:	4805      	ldr	r0, [pc, #20]	; (808a600 <mbedtls_ssl_handle_message_type+0x58>)
 808a5ec:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 808a5ee:	4802      	ldr	r0, [pc, #8]	; (808a5f8 <mbedtls_ssl_handle_message_type+0x50>)
 808a5f0:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 808a5f2:	4804      	ldr	r0, [pc, #16]	; (808a604 <mbedtls_ssl_handle_message_type+0x5c>)
        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
}
 808a5f4:	bd10      	pop	{r4, pc}
 808a5f6:	bf00      	nop
 808a5f8:	ffff9980 	.word	0xffff9980
 808a5fc:	ffff8e00 	.word	0xffff8e00
 808a600:	ffff8880 	.word	0xffff8880
 808a604:	ffff8780 	.word	0xffff8780

0808a608 <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 808a608:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 808a60a:	b180      	cbz	r0, 808a62e <mbedtls_ssl_send_alert_message+0x26>
 808a60c:	6804      	ldr	r4, [r0, #0]
 808a60e:	b174      	cbz	r4, 808a62e <mbedtls_ssl_send_alert_message+0x26>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 808a610:	2415      	movs	r4, #21
 808a612:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
 808a616:	2402      	movs	r4, #2
 808a618:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
 808a61c:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 808a620:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
 808a622:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 808a626:	705a      	strb	r2, [r3, #1]
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 808a628:	bc10      	pop	{r4}
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a62a:	f7ff be39 	b.w	808a2a0 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 808a62e:	4801      	ldr	r0, [pc, #4]	; (808a634 <mbedtls_ssl_send_alert_message+0x2c>)
 808a630:	bc10      	pop	{r4}
 808a632:	4770      	bx	lr
 808a634:	ffff8f00 	.word	0xffff8f00

0808a638 <mbedtls_ssl_read_record_layer>:

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 808a638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 808a63c:	6f81      	ldr	r1, [r0, #120]	; 0x78

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 808a63e:	b096      	sub	sp, #88	; 0x58
 808a640:	4604      	mov	r4, r0
 808a642:	6e83      	ldr	r3, [r0, #104]	; 0x68
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 808a644:	b181      	cbz	r1, 808a668 <mbedtls_ssl_read_record_layer+0x30>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 808a646:	2b00      	cmp	r3, #0
 808a648:	f040 821c 	bne.w	808aa84 <mbedtls_ssl_read_record_layer+0x44c>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 808a64c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 808a64e:	4291      	cmp	r1, r2
 808a650:	d206      	bcs.n	808a660 <mbedtls_ssl_read_record_layer+0x28>
        {
            ssl->in_msglen -= ssl->in_hslen;
 808a652:	1a52      	subs	r2, r2, r1
 808a654:	6702      	str	r2, [r0, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 808a656:	6e40      	ldr	r0, [r0, #100]	; 0x64
                     ssl->in_msglen );
 808a658:	4401      	add	r1, r0
 808a65a:	f008 ff85 	bl	8093568 <memmove>
 808a65e:	e000      	b.n	808a662 <mbedtls_ssl_read_record_layer+0x2a>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 808a660:	6703      	str	r3, [r0, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 808a662:	2300      	movs	r3, #0
 808a664:	67a3      	str	r3, [r4, #120]	; 0x78
 808a666:	e003      	b.n	808a670 <mbedtls_ssl_read_record_layer+0x38>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 808a668:	2b00      	cmp	r3, #0
 808a66a:	f040 820f 	bne.w	808aa8c <mbedtls_ssl_read_record_layer+0x454>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 808a66e:	6703      	str	r3, [r0, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
 808a670:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a672:	2b00      	cmp	r3, #0
 808a674:	f040 820a 	bne.w	808aa8c <mbedtls_ssl_read_record_layer+0x454>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 808a678:	2105      	movs	r1, #5
 808a67a:	4620      	mov	r0, r4
 808a67c:	f7ff fd92 	bl	808a1a4 <mbedtls_ssl_fetch_input>
 808a680:	2800      	cmp	r0, #0
 808a682:	f040 8204 	bne.w	808aa8e <mbedtls_ssl_read_record_layer+0x456>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 808a686:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 808a688:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 808a68a:	7813      	ldrb	r3, [r2, #0]
 808a68c:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 808a68e:	7805      	ldrb	r5, [r0, #0]
 808a690:	7841      	ldrb	r1, [r0, #1]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 808a692:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 808a694:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 808a698:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 808a69a:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 808a69c:	7855      	ldrb	r5, [r2, #1]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 808a69e:	6820      	ldr	r0, [r4, #0]
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 808a6a0:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 808a6a2:	d905      	bls.n	808a6b0 <mbedtls_ssl_read_record_layer+0x78>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808a6a4:	220a      	movs	r2, #10
 808a6a6:	2102      	movs	r1, #2
 808a6a8:	4620      	mov	r0, r4
 808a6aa:	f7ff ffad 	bl	808a608 <mbedtls_ssl_send_alert_message>
 808a6ae:	e1eb      	b.n	808aa88 <mbedtls_ssl_read_record_layer+0x450>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 808a6b0:	68a3      	ldr	r3, [r4, #8]
 808a6b2:	429d      	cmp	r5, r3
 808a6b4:	f040 81e8 	bne.w	808aa88 <mbedtls_ssl_read_record_layer+0x450>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 808a6b8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 808a6bc:	429a      	cmp	r2, r3
 808a6be:	f300 81e3 	bgt.w	808aa88 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 808a6c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808a6c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 808a6c6:	1a9b      	subs	r3, r3, r2
 808a6c8:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 808a6cc:	330d      	adds	r3, #13
 808a6ce:	4299      	cmp	r1, r3
 808a6d0:	f200 81da 	bhi.w	808aa88 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 808a6d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 808a6d6:	b923      	cbnz	r3, 808a6e2 <mbedtls_ssl_read_record_layer+0xaa>
    {
        if( ssl->in_msglen < 1 ||
 808a6d8:	1e4b      	subs	r3, r1, #1
 808a6da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808a6de:	d30c      	bcc.n	808a6fa <mbedtls_ssl_read_record_layer+0xc2>
 808a6e0:	e1d2      	b.n	808aa88 <mbedtls_ssl_read_record_layer+0x450>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 808a6e2:	689b      	ldr	r3, [r3, #8]
 808a6e4:	4299      	cmp	r1, r3
 808a6e6:	f0c0 81cf 	bcc.w	808aa88 <mbedtls_ssl_read_record_layer+0x450>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 808a6ea:	68e2      	ldr	r2, [r4, #12]
 808a6ec:	2a00      	cmp	r2, #0
 808a6ee:	dd04      	ble.n	808a6fa <mbedtls_ssl_read_record_layer+0xc2>
 808a6f0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 808a6f4:	4299      	cmp	r1, r3
 808a6f6:	f200 81c7 	bhi.w	808aa88 <mbedtls_ssl_read_record_layer+0x450>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 808a6fa:	3105      	adds	r1, #5
 808a6fc:	4620      	mov	r0, r4
 808a6fe:	f7ff fd51 	bl	808a1a4 <mbedtls_ssl_fetch_input>
 808a702:	2800      	cmp	r0, #0
 808a704:	f040 81c3 	bne.w	808aa8e <mbedtls_ssl_read_record_layer+0x456>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 808a708:	6b66      	ldr	r6, [r4, #52]	; 0x34
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
 808a70a:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 808a70c:	2e00      	cmp	r6, #0
 808a70e:	f000 81bd 	beq.w	808aa8c <mbedtls_ssl_read_record_layer+0x454>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 808a712:	6a23      	ldr	r3, [r4, #32]
 808a714:	2b00      	cmp	r3, #0
 808a716:	f000 81b5 	beq.w	808aa84 <mbedtls_ssl_read_record_layer+0x44c>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 808a71a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 808a71e:	b103      	cbz	r3, 808a722 <mbedtls_ssl_read_record_layer+0xea>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 808a720:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
 808a722:	6f25      	ldr	r5, [r4, #112]	; 0x70
 808a724:	68b2      	ldr	r2, [r6, #8]
 808a726:	4295      	cmp	r5, r2
 808a728:	f0c0 819d 	bcc.w	808aa66 <mbedtls_ssl_read_record_layer+0x42e>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 808a72c:	2b06      	cmp	r3, #6
 808a72e:	d001      	beq.n	808a734 <mbedtls_ssl_read_record_layer+0xfc>
 808a730:	2b08      	cmp	r3, #8
 808a732:	d175      	bne.n	808a820 <mbedtls_ssl_read_record_layer+0x1e8>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 808a734:	6833      	ldr	r3, [r6, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 808a736:	68f2      	ldr	r2, [r6, #12]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a738:	7f1b      	ldrb	r3, [r3, #28]
 808a73a:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 808a73e:	6933      	ldr	r3, [r6, #16]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a740:	bf14      	ite	ne
 808a742:	2708      	movne	r7, #8
 808a744:	2710      	moveq	r7, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 808a746:	1ad3      	subs	r3, r2, r3

        if( ssl->in_msglen < explicit_iv_len + taglen )
 808a748:	19da      	adds	r2, r3, r7
 808a74a:	4295      	cmp	r5, r2
 808a74c:	f0c0 818b 	bcc.w	808aa66 <mbedtls_ssl_read_record_layer+0x42e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 808a750:	1aed      	subs	r5, r5, r3
 808a752:	1bed      	subs	r5, r5, r7

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
 808a754:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
 808a756:	6725      	str	r5, [r4, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
 808a758:	6810      	ldr	r0, [r2, #0]
 808a75a:	6851      	ldr	r1, [r2, #4]
 808a75c:	ab0a      	add	r3, sp, #40	; 0x28
 808a75e:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 808a760:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a762:	68a2      	ldr	r2, [r4, #8]
        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
 808a764:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 808a768:	68e3      	ldr	r3, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a76a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 808a76e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 808a772:	0a2b      	lsrs	r3, r5, #8
 808a774:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        add_data[12] = ssl->in_msglen & 0xFF;
 808a778:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 808a77c:	6933      	ldr	r3, [r6, #16]
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 808a77e:	68f2      	ldr	r2, [r6, #12]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
 808a780:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
        add_data[12] = ssl->in_msglen & 0xFF;

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 808a784:	f106 0028 	add.w	r0, r6, #40	; 0x28
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 808a788:	1ad2      	subs	r2, r2, r3
 808a78a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 808a78c:	4418      	add	r0, r3
 808a78e:	f008 fee0 	bl	8093552 <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 808a792:	eb08 0305 	add.w	r3, r8, r5
 808a796:	9305      	str	r3, [sp, #20]
 808a798:	ab09      	add	r3, sp, #36	; 0x24
 808a79a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a79c:	9304      	str	r3, [sp, #16]
 808a79e:	230d      	movs	r3, #13
 808a7a0:	9300      	str	r3, [sp, #0]
 808a7a2:	9706      	str	r7, [sp, #24]
 808a7a4:	f8cd 800c 	str.w	r8, [sp, #12]
 808a7a8:	9502      	str	r5, [sp, #8]
 808a7aa:	f8cd 8004 	str.w	r8, [sp, #4]
 808a7ae:	68c2      	ldr	r2, [r0, #12]
 808a7b0:	f100 0128 	add.w	r1, r0, #40	; 0x28
 808a7b4:	ab0a      	add	r3, sp, #40	; 0x28
 808a7b6:	3090      	adds	r0, #144	; 0x90
 808a7b8:	f7f9 faba 	bl	8083d30 <mbedtls_cipher_auth_decrypt>
 808a7bc:	b128      	cbz	r0, 808a7ca <mbedtls_ssl_read_record_layer+0x192>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 808a7be:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 808a7c2:	f000 8150 	beq.w	808aa66 <mbedtls_ssl_read_record_layer+0x42e>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 808a7c6:	b328      	cbz	r0, 808a814 <mbedtls_ssl_read_record_layer+0x1dc>
 808a7c8:	e161      	b.n	808aa8e <mbedtls_ssl_read_record_layer+0x456>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
 808a7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808a7cc:	429d      	cmp	r5, r3
 808a7ce:	f040 8159 	bne.w	808aa84 <mbedtls_ssl_read_record_layer+0x44c>
 808a7d2:	e007      	b.n	808a7e4 <mbedtls_ssl_read_record_layer+0x1ac>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 808a7d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 808a7d8:	2b00      	cmp	r3, #0
 808a7da:	f040 8144 	bne.w	808aa66 <mbedtls_ssl_read_record_layer+0x42e>
        auth_done++;

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
 808a7de:	2d00      	cmp	r5, #0
 808a7e0:	f000 8141 	beq.w	808aa66 <mbedtls_ssl_read_record_layer+0x42e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
 808a7e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a7e6:	2b00      	cmp	r3, #0
 808a7e8:	f040 8144 	bne.w	808aa74 <mbedtls_ssl_read_record_layer+0x43c>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 808a7ec:	68e3      	ldr	r3, [r4, #12]
 808a7ee:	2b03      	cmp	r3, #3
 808a7f0:	f000 813b 	beq.w	808aa6a <mbedtls_ssl_read_record_layer+0x432>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 808a7f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 808a7f6:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 808a7f8:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 808a7fa:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 808a7fc:	f300 8133 	bgt.w	808aa66 <mbedtls_ssl_read_record_layer+0x42e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 808a800:	2208      	movs	r2, #8
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
 808a802:	6d61      	ldr	r1, [r4, #84]	; 0x54
 808a804:	3a01      	subs	r2, #1
 808a806:	5c8b      	ldrb	r3, [r1, r2]
 808a808:	3301      	adds	r3, #1
 808a80a:	b2db      	uxtb	r3, r3
 808a80c:	548b      	strb	r3, [r1, r2]
 808a80e:	2b00      	cmp	r3, #0
 808a810:	f000 8133 	beq.w	808aa7a <mbedtls_ssl_read_record_layer+0x442>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 808a814:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808a81a:	f240 8137 	bls.w	808aa8c <mbedtls_ssl_read_record_layer+0x454>
 808a81e:	e133      	b.n	808aa88 <mbedtls_ssl_read_record_layer+0x450>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 808a820:	2b02      	cmp	r3, #2
 808a822:	f040 812f 	bne.w	808aa84 <mbedtls_ssl_read_record_layer+0x44c>
        int ret;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        size_t dec_msglen;
        size_t minlen = 0;
        size_t olen = 0;
 808a826:	2300      	movs	r3, #0
 808a828:	930a      	str	r3, [sp, #40]	; 0x28

        /*
         * Check immediate ciphertext sanity
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a82a:	68e0      	ldr	r0, [r4, #12]
 808a82c:	68f2      	ldr	r2, [r6, #12]
            minlen += ssl->transform_in->ivlen;
 808a82e:	2802      	cmp	r0, #2
 808a830:	bfa8      	it	ge
 808a832:	4613      	movge	r3, r2
#endif

        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 808a834:	18d1      	adds	r1, r2, r3
 808a836:	428d      	cmp	r5, r1
 808a838:	f0c0 8115 	bcc.w	808aa66 <mbedtls_ssl_read_record_layer+0x42e>
 808a83c:	6971      	ldr	r1, [r6, #20]
 808a83e:	3101      	adds	r1, #1
 808a840:	440b      	add	r3, r1
 808a842:	429d      	cmp	r5, r3
 808a844:	f0c0 810f 	bcc.w	808aa66 <mbedtls_ssl_read_record_layer+0x42e>
#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */

        /*
         * Check length sanity
         */
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 808a848:	fbb5 f6f2 	udiv	r6, r5, r2
 808a84c:	fb02 5616 	mls	r6, r2, r6, r5
 808a850:	2e00      	cmp	r6, #0
 808a852:	f040 8108 	bne.w	808aa66 <mbedtls_ssl_read_record_layer+0x42e>

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a856:	2801      	cmp	r0, #1
                                ssl->transform_in->maclen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }

        dec_msglen = ssl->in_msglen;
        dec_msg = ssl->in_msg;
 808a858:	6e63      	ldr	r3, [r4, #100]	; 0x64

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a85a:	dd0d      	ble.n	808a878 <mbedtls_ssl_read_record_layer+0x240>
        {
            dec_msglen -= ssl->transform_in->ivlen;
 808a85c:	1aad      	subs	r5, r5, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 808a85e:	4632      	mov	r2, r6
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;
 808a860:	6725      	str	r5, [r4, #112]	; 0x70

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 808a862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 808a864:	68c8      	ldr	r0, [r1, #12]
 808a866:	4290      	cmp	r0, r2
 808a868:	d906      	bls.n	808a878 <mbedtls_ssl_read_record_layer+0x240>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 808a86a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 808a86c:	4411      	add	r1, r2
 808a86e:	5c80      	ldrb	r0, [r0, r2]
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 808a870:	3201      	adds	r2, #1
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 808a872:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
 808a876:	e7f4      	b.n	808a862 <mbedtls_ssl_read_record_layer+0x22a>
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 808a878:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a87a:	af0a      	add	r7, sp, #40	; 0x28
 808a87c:	9702      	str	r7, [sp, #8]
 808a87e:	9301      	str	r3, [sp, #4]
 808a880:	9500      	str	r5, [sp, #0]
 808a882:	68c2      	ldr	r2, [r0, #12]
 808a884:	f100 0128 	add.w	r1, r0, #40	; 0x28
 808a888:	3090      	adds	r0, #144	; 0x90
 808a88a:	f7f9 fa05 	bl	8083c98 <mbedtls_cipher_crypt>
 808a88e:	2800      	cmp	r0, #0
 808a890:	f040 80fd 	bne.w	808aa8e <mbedtls_ssl_read_record_layer+0x456>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( dec_msglen != olen )
 808a894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a896:	429d      	cmp	r5, r3
 808a898:	f040 80f4 	bne.w	808aa84 <mbedtls_ssl_read_record_layer+0x44c>
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 808a89c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a89e:	6e65      	ldr	r5, [r4, #100]	; 0x64

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 808a8a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 808a8a2:	18ea      	adds	r2, r5, r3
 808a8a4:	f812 ac01 	ldrb.w	sl, [r2, #-1]

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 808a8a8:	f8d1 c014 	ldr.w	ip, [r1, #20]
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 808a8ac:	f10a 0e01 	add.w	lr, sl, #1

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 808a8b0:	eb0e 020c 	add.w	r2, lr, ip
 808a8b4:	4293      	cmp	r3, r2
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 808a8b6:	68e2      	ldr	r2, [r4, #12]
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
#endif
            padlen = 0;
 808a8b8:	bf34      	ite	cc
 808a8ba:	4686      	movcc	lr, r0
{
    size_t i;
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
#if defined(SSL_SOME_MODES_USE_MAC)
    size_t padlen = 0, correct = 1;
 808a8bc:	2001      	movcs	r0, #1
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 808a8be:	2a00      	cmp	r2, #0
 808a8c0:	f340 80e0 	ble.w	808aa84 <mbedtls_ssl_read_record_layer+0x44c>
             *                     ssl->transform_in->maclen
             *
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
 808a8c4:	4573      	cmp	r3, lr
 808a8c6:	bf34      	ite	cc
 808a8c8:	2000      	movcc	r0, #0
 808a8ca:	f000 0001 	andcs.w	r0, r0, #1
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
            size_t padding_idx = ssl->in_msglen - padlen;
 808a8ce:	ebce 0203 	rsb	r2, lr, r3
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );
 808a8d2:	f50c 5c00 	add.w	ip, ip, #8192	; 0x2000
 808a8d6:	4562      	cmp	r2, ip
 808a8d8:	bf8c      	ite	hi
 808a8da:	2000      	movhi	r0, #0
 808a8dc:	f000 0001 	andls.w	r0, r0, #1
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 808a8e0:	f04f 0800 	mov.w	r8, #0
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a8e4:	46c4      	mov	ip, r8
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a8e6:	fb00 5202 	mla	r2, r0, r2, r5
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 808a8ea:	f04f 0901 	mov.w	r9, #1

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a8ee:	f10e 3aff 	add.w	sl, lr, #4294967295

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
 808a8f2:	45e6      	cmp	lr, ip
 808a8f4:	bf94      	ite	ls
 808a8f6:	f04f 0900 	movls.w	r9, #0
 808a8fa:	f009 0901 	andhi.w	r9, r9, #1
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a8fe:	f812 500c 	ldrb.w	r5, [r2, ip]
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a902:	f10c 0c01 	add.w	ip, ip, #1
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a906:	4555      	cmp	r5, sl
 808a908:	bf14      	ite	ne
 808a90a:	2500      	movne	r5, #0
 808a90c:	2501      	moveq	r5, #1
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a90e:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a912:	fb09 8805 	mla	r8, r9, r5, r8
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a916:	d1ec      	bne.n	808a8f2 <mbedtls_ssl_read_record_layer+0x2ba>
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
            }

            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 808a918:	45c6      	cmp	lr, r8
 808a91a:	bf14      	ite	ne
 808a91c:	2500      	movne	r5, #0
 808a91e:	f000 0501 	andeq.w	r5, r0, #1

#if defined(MBEDTLS_SSL_DEBUG_ALL)
            if( padlen > 0 && correct == 0 )
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
#endif
            padlen &= correct * 0x1FF;
 808a922:	ea4f 2a45 	mov.w	sl, r5, lsl #9
 808a926:	ebc5 0a0a 	rsb	sl, r5, sl
 808a92a:	ea0a 0a0e 	and.w	sl, sl, lr
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->in_msglen -= padlen;
 808a92e:	ebca 0303 	rsb	r3, sl, r3
 808a932:	6723      	str	r3, [r4, #112]	; 0x70
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 808a934:	694a      	ldr	r2, [r1, #20]
 808a936:	1a9b      	subs	r3, r3, r2

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 808a938:	6de2      	ldr	r2, [r4, #92]	; 0x5c
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 808a93a:	6723      	str	r3, [r4, #112]	; 0x70

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 808a93c:	0a1b      	lsrs	r3, r3, #8
 808a93e:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 808a940:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 808a942:	6f22      	ldr	r2, [r4, #112]	; 0x70
 808a944:	705a      	strb	r2, [r3, #1]
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 808a946:	68e3      	ldr	r3, [r4, #12]
 808a948:	2b00      	cmp	r3, #0
 808a94a:	f340 809b 	ble.w	808aa84 <mbedtls_ssl_read_record_layer+0x44c>
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a94e:	6b60      	ldr	r0, [r4, #52]	; 0x34
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 808a950:	6f23      	ldr	r3, [r4, #112]	; 0x70
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a952:	6802      	ldr	r2, [r0, #0]
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 808a954:	eb0a 0903 	add.w	r9, sl, r3
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a958:	7a52      	ldrb	r2, [r2, #9]
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 808a95a:	f5b9 7f80 	cmp.w	r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a95e:	f1a2 0203 	sub.w	r2, r2, #3
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 808a962:	bf88      	it	hi
 808a964:	f5a9 7680 	subhi.w	r6, r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a968:	2a04      	cmp	r2, #4
 808a96a:	f200 808b 	bhi.w	808aa84 <mbedtls_ssl_read_record_layer+0x44c>
 808a96e:	e8df f002 	tbb	[pc, r2]
 808a972:	0303      	.short	0x0303
 808a974:	0389      	.short	0x0389
 808a976:	0b          	.byte	0x0b
 808a977:	00          	.byte	0x00
                case MBEDTLS_MD_MD5:
                case MBEDTLS_MD_SHA1:
                case MBEDTLS_MD_SHA256:
                    /* 8 bytes of message size, 64-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
                                ( 13 + ssl->in_msglen          + 8 ) / 64;
 808a978:	f103 0215 	add.w	r2, r3, #21
 808a97c:	f109 0115 	add.w	r1, r9, #21
 808a980:	0992      	lsrs	r2, r2, #6
 808a982:	ebc2 1391 	rsb	r3, r2, r1, lsr #6
 808a986:	e006      	b.n	808a996 <mbedtls_ssl_read_record_layer+0x35e>
#endif
#if defined(MBEDTLS_SHA512_C)
                case MBEDTLS_MD_SHA384:
                    /* 16 bytes of message size, 128-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 16 ) / 128 -
                                ( 13 + ssl->in_msglen          + 16 ) / 128;
 808a988:	f103 021d 	add.w	r2, r3, #29
 808a98c:	f109 011d 	add.w	r1, r9, #29
 808a990:	09d2      	lsrs	r2, r2, #7
 808a992:	ebc2 13d1 	rsb	r3, r2, r1, lsr #7
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 808a996:	ea4f 2805 	mov.w	r8, r5, lsl #8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 808a99a:	2208      	movs	r2, #8
 808a99c:	6d61      	ldr	r1, [r4, #84]	; 0x54
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 808a99e:	ebc5 0808 	rsb	r8, r5, r8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 808a9a2:	3044      	adds	r0, #68	; 0x44
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 808a9a4:	ea08 0803 	and.w	r8, r8, r3

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 808a9a8:	f7fd fca0 	bl	80882ec <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 808a9ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a9ae:	2203      	movs	r2, #3
 808a9b0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 808a9b2:	3044      	adds	r0, #68	; 0x44
 808a9b4:	f7fd fc9a 	bl	80882ec <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 808a9b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a9ba:	2202      	movs	r2, #2
 808a9bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 808a9be:	3044      	adds	r0, #68	; 0x44
 808a9c0:	f7fd fc94 	bl	80882ec <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 808a9c4:	6b60      	ldr	r0, [r4, #52]	; 0x34
                             ssl->in_msglen );
 808a9c6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 808a9c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 808a9ca:	3044      	adds	r0, #68	; 0x44
 808a9cc:	f7fd fc8e 	bl	80882ec <mbedtls_md_hmac_update>
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
 808a9d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 808a9d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a9d4:	4413      	add	r3, r2
 808a9d6:	449a      	add	sl, r3
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 808a9d8:	2200      	movs	r2, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 808a9da:	4553      	cmp	r3, sl
 808a9dc:	d003      	beq.n	808a9e6 <mbedtls_ssl_read_record_layer+0x3ae>
        acc ^= *p;
 808a9de:	f813 1b01 	ldrb.w	r1, [r3], #1
 808a9e2:	404a      	eors	r2, r1
 808a9e4:	e7f9      	b.n	808a9da <mbedtls_ssl_read_record_layer+0x3a2>
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 808a9e6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
 808a9e8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 808a9ec:	4639      	mov	r1, r7
 808a9ee:	3044      	adds	r0, #68	; 0x44

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
    (void) force;
 808a9f0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 808a9f4:	f7fd fc8a 	bl	808830c <mbedtls_md_hmac_finish>

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 808a9f8:	f04f 0a00 	mov.w	sl, #0
 808a9fc:	f108 0801 	add.w	r8, r8, #1
 808aa00:	45d0      	cmp	r8, sl
 808aa02:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808aa04:	d906      	bls.n	808aa14 <mbedtls_ssl_read_record_layer+0x3dc>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 808aa06:	6e61      	ldr	r1, [r4, #100]	; 0x64
 808aa08:	3044      	adds	r0, #68	; 0x44
 808aa0a:	f7fd fcc7 	bl	808839c <mbedtls_md_process>
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 808aa0e:	f10a 0a01 	add.w	sl, sl, #1
 808aa12:	e7f5      	b.n	808aa00 <mbedtls_ssl_read_record_layer+0x3c8>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );

            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 808aa14:	3044      	adds	r0, #68	; 0x44
 808aa16:	f7fd fca9 	bl	808836c <mbedtls_md_hmac_reset>
            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
                                 max_len - min_len + ssl->transform_in->maclen );
 808aa1a:	6b63      	ldr	r3, [r4, #52]	; 0x34

            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
 808aa1c:	6e61      	ldr	r1, [r4, #100]	; 0x64
                                 max_len - min_len + ssl->transform_in->maclen );
 808aa1e:	6958      	ldr	r0, [r3, #20]
 808aa20:	440e      	add	r6, r1
 808aa22:	4481      	add	r9, r0
 808aa24:	4489      	add	r9, r1
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 808aa26:	2300      	movs	r3, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 808aa28:	454e      	cmp	r6, r9
 808aa2a:	d003      	beq.n	808aa34 <mbedtls_ssl_read_record_layer+0x3fc>
        acc ^= *p;
 808aa2c:	f816 2b01 	ldrb.w	r2, [r6], #1
 808aa30:	4053      	eors	r3, r2
 808aa32:	e7f9      	b.n	808aa28 <mbedtls_ssl_read_record_layer+0x3f0>

    force = acc;
 808aa34:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    (void) force;
 808aa38:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 808aa3c:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 808aa40:	2300      	movs	r3, #0
 808aa42:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    for( i = 0; i < n; i++ )
 808aa46:	4298      	cmp	r0, r3
 808aa48:	f43f aec4 	beq.w	808a7d4 <mbedtls_ssl_read_record_layer+0x19c>
 808aa4c:	eb0c 0203 	add.w	r2, ip, r3
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 808aa50:	5c8a      	ldrb	r2, [r1, r2]
 808aa52:	5cfe      	ldrb	r6, [r7, r3]
        diff |= x ^ y;
 808aa54:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
 808aa58:	4072      	eors	r2, r6
 808aa5a:	ea4e 0202 	orr.w	r2, lr, r2
 808aa5e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808aa62:	3301      	adds	r3, #1
 808aa64:	e7ef      	b.n	808aa46 <mbedtls_ssl_read_record_layer+0x40e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 808aa66:	480b      	ldr	r0, [pc, #44]	; (808aa94 <mbedtls_ssl_read_record_layer+0x45c>)
 808aa68:	e011      	b.n	808aa8e <mbedtls_ssl_read_record_layer+0x456>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 808aa6a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808aa6c:	2b17      	cmp	r3, #23
 808aa6e:	f43f aec1 	beq.w	808a7f4 <mbedtls_ssl_read_record_layer+0x1bc>
 808aa72:	e009      	b.n	808aa88 <mbedtls_ssl_read_record_layer+0x450>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
 808aa74:	2300      	movs	r3, #0
 808aa76:	67e3      	str	r3, [r4, #124]	; 0x7c
 808aa78:	e6c2      	b.n	808a800 <mbedtls_ssl_read_record_layer+0x1c8>
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 808aa7a:	2a00      	cmp	r2, #0
 808aa7c:	f47f aec1 	bne.w	808a802 <mbedtls_ssl_read_record_layer+0x1ca>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 808aa80:	4805      	ldr	r0, [pc, #20]	; (808aa98 <mbedtls_ssl_read_record_layer+0x460>)
 808aa82:	e004      	b.n	808aa8e <mbedtls_ssl_read_record_layer+0x456>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808aa84:	4805      	ldr	r0, [pc, #20]	; (808aa9c <mbedtls_ssl_read_record_layer+0x464>)
 808aa86:	e002      	b.n	808aa8e <mbedtls_ssl_read_record_layer+0x456>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 808aa88:	4805      	ldr	r0, [pc, #20]	; (808aaa0 <mbedtls_ssl_read_record_layer+0x468>)
 808aa8a:	e000      	b.n	808aa8e <mbedtls_ssl_read_record_layer+0x456>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
 808aa8c:	2000      	movs	r0, #0
}
 808aa8e:	b016      	add	sp, #88	; 0x58
 808aa90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808aa94:	ffff8e80 	.word	0xffff8e80
 808aa98:	ffff9480 	.word	0xffff9480
 808aa9c:	ffff9400 	.word	0xffff9400
 808aaa0:	ffff8e00 	.word	0xffff8e00

0808aaa4 <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 808aaa4:	b538      	push	{r3, r4, r5, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 808aaa6:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 808aaaa:	4605      	mov	r5, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 808aaac:	b98c      	cbnz	r4, 808aad2 <mbedtls_ssl_read_record+0x2e>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 808aaae:	4628      	mov	r0, r5
 808aab0:	f7ff fdc2 	bl	808a638 <mbedtls_ssl_read_record_layer>
 808aab4:	b988      	cbnz	r0, 808aada <mbedtls_ssl_read_record+0x36>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
                return( ret );
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 808aab6:	4628      	mov	r0, r5
 808aab8:	f7ff fd76 	bl	808a5a8 <mbedtls_ssl_handle_message_type>

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 808aabc:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
 808aac0:	d0f5      	beq.n	808aaae <mbedtls_ssl_read_record+0xa>

        if( 0 != ret )
 808aac2:	b950      	cbnz	r0, 808aada <mbedtls_ssl_read_record+0x36>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808aac4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808aac6:	2b16      	cmp	r3, #22
 808aac8:	d108      	bne.n	808aadc <mbedtls_ssl_read_record+0x38>
        {
            mbedtls_ssl_update_handshake_status( ssl );
 808aaca:	4628      	mov	r0, r5
 808aacc:	f7ff fd5c 	bl	808a588 <mbedtls_ssl_update_handshake_status>
 808aad0:	e004      	b.n	808aadc <mbedtls_ssl_read_record+0x38>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
        ssl->keep_current_message = 0;
 808aad2:	2400      	movs	r4, #0
 808aad4:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 808aad8:	e000      	b.n	808aadc <mbedtls_ssl_read_record+0x38>
 808aada:	4604      	mov	r4, r0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
 808aadc:	4620      	mov	r0, r4
 808aade:	bd38      	pop	{r3, r4, r5, pc}

0808aae0 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 808aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808aae2:	6c03      	ldr	r3, [r0, #64]	; 0x40

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 808aae4:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808aae6:	681b      	ldr	r3, [r3, #0]
 808aae8:	7a9a      	ldrb	r2, [r3, #10]
 808aaea:	2a0b      	cmp	r2, #11
 808aaec:	d809      	bhi.n	808ab02 <mbedtls_ssl_write_certificate+0x22>
 808aaee:	f44f 6316 	mov.w	r3, #2400	; 0x960
 808aaf2:	40d3      	lsrs	r3, r2
 808aaf4:	07da      	lsls	r2, r3, #31
 808aaf6:	d504      	bpl.n	808ab02 <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 808aaf8:	6863      	ldr	r3, [r4, #4]
        return( 0 );
 808aafa:	2000      	movs	r0, #0
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 808aafc:	3301      	adds	r3, #1
 808aafe:	6063      	str	r3, [r4, #4]
        return( 0 );
 808ab00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808ab02:	6822      	ldr	r2, [r4, #0]
 808ab04:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
 808ab08:	07db      	lsls	r3, r3, #31
 808ab0a:	d403      	bmi.n	808ab14 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
 808ab0c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 808ab10:	2b00      	cmp	r3, #0
 808ab12:	d0f1      	beq.n	808aaf8 <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808ab14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808ab16:	b10b      	cbz	r3, 808ab1c <mbedtls_ssl_write_certificate+0x3c>
 808ab18:	685b      	ldr	r3, [r3, #4]
 808ab1a:	b90b      	cbnz	r3, 808ab20 <mbedtls_ssl_write_certificate+0x40>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808ab1c:	6c93      	ldr	r3, [r2, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 808ab1e:	b30b      	cbz	r3, 808ab64 <mbedtls_ssl_write_certificate+0x84>
 808ab20:	681e      	ldr	r6, [r3, #0]
 808ab22:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 808ab24:	b1fe      	cbz	r6, 808ab66 <mbedtls_ssl_write_certificate+0x86>
    {
        n = crt->raw.len;
 808ab26:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 808ab28:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
 808ab2c:	321d      	adds	r2, #29
 808ab2e:	4295      	cmp	r5, r2
 808ab30:	d836      	bhi.n	808aba0 <mbedtls_ssl_write_certificate+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 808ab32:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808ab36:	0c29      	lsrs	r1, r5, #16
 808ab38:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 808ab3a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808ab3e:	0a29      	lsrs	r1, r5, #8
 808ab40:	441a      	add	r2, r3
 808ab42:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 808ab44:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 808ab48:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 808ab4a:	441a      	add	r2, r3
 808ab4c:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 808ab4e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808ab52:	68b1      	ldr	r1, [r6, #8]
 808ab54:	462a      	mov	r2, r5
 808ab56:	4438      	add	r0, r7
 808ab58:	f008 fcfb 	bl	8093552 <memcpy>
        i += n; crt = crt->next;
 808ab5c:	19eb      	adds	r3, r5, r7
 808ab5e:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 808ab62:	e7df      	b.n	808ab24 <mbedtls_ssl_write_certificate+0x44>
 808ab64:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 808ab66:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808ab6a:	1fda      	subs	r2, r3, #7
 808ab6c:	0c10      	lsrs	r0, r2, #16
 808ab6e:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 808ab70:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808ab74:	0a10      	lsrs	r0, r2, #8
 808ab76:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 808ab78:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808ab7c:	4620      	mov	r0, r4
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 808ab7e:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
 808ab80:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808ab84:	2316      	movs	r3, #22
 808ab86:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 808ab8a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808ab8e:	220b      	movs	r2, #11
 808ab90:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 808ab92:	6863      	ldr	r3, [r4, #4]
 808ab94:	3301      	adds	r3, #1
 808ab96:	6063      	str	r3, [r4, #4]
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 808ab98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808ab9c:	f7ff bb80 	b.w	808a2a0 <mbedtls_ssl_write_record>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 808aba0:	4800      	ldr	r0, [pc, #0]	; (808aba4 <mbedtls_ssl_write_certificate+0xc4>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 808aba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808aba4:	ffff8b00 	.word	0xffff8b00

0808aba8 <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 808aba8:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
 808abaa:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 808abae:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
 808abb2:	2201      	movs	r2, #1
 808abb4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 808abb8:	700a      	strb	r2, [r1, #0]

    ssl->state++;
 808abba:	6842      	ldr	r2, [r0, #4]
 808abbc:	3201      	adds	r2, #1
 808abbe:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808abc0:	f7ff bb6e 	b.w	808a2a0 <mbedtls_ssl_write_record>

0808abc4 <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 808abc4:	b510      	push	{r4, lr}
 808abc6:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808abc8:	f7ff ff6c 	bl	808aaa4 <mbedtls_ssl_read_record>
 808abcc:	2800      	cmp	r0, #0
 808abce:	d12f      	bne.n	808ac30 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 808abd0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808abd2:	2b14      	cmp	r3, #20
 808abd4:	d006      	beq.n	808abe4 <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808abd6:	220a      	movs	r2, #10
 808abd8:	2102      	movs	r1, #2
 808abda:	4620      	mov	r0, r4
 808abdc:	f7ff fd14 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808abe0:	4814      	ldr	r0, [pc, #80]	; (808ac34 <mbedtls_ssl_parse_change_cipher_spec+0x70>)
 808abe2:	bd10      	pop	{r4, pc}
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 808abe4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808abe6:	2b01      	cmp	r3, #1
 808abe8:	d103      	bne.n	808abf2 <mbedtls_ssl_parse_change_cipher_spec+0x2e>
 808abea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808abec:	781b      	ldrb	r3, [r3, #0]
 808abee:	2b01      	cmp	r3, #1
 808abf0:	d006      	beq.n	808ac00 <mbedtls_ssl_parse_change_cipher_spec+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808abf2:	2232      	movs	r2, #50	; 0x32
 808abf4:	2102      	movs	r1, #2
 808abf6:	4620      	mov	r0, r4
 808abf8:	f7ff fd06 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 808abfc:	480e      	ldr	r0, [pc, #56]	; (808ac38 <mbedtls_ssl_parse_change_cipher_spec+0x74>)
 808abfe:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
 808ac00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ac02:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 808ac04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808ac06:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 808ac08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 808ac0a:	6018      	str	r0, [r3, #0]
 808ac0c:	6058      	str	r0, [r3, #4]

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808ac0e:	68e3      	ldr	r3, [r4, #12]
 808ac10:	6e21      	ldr	r1, [r4, #96]	; 0x60
 808ac12:	2b01      	cmp	r3, #1
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 808ac14:	bfc9      	itett	gt
 808ac16:	6c23      	ldrgt	r3, [r4, #64]	; 0x40
                      ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
 808ac18:	6661      	strle	r1, [r4, #100]	; 0x64
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 808ac1a:	68da      	ldrgt	r2, [r3, #12]
 808ac1c:	691b      	ldrgt	r3, [r3, #16]

    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
 808ac1e:	f04f 0000 	mov.w	r0, #0
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 808ac22:	bfc2      	ittt	gt
 808ac24:	1ad3      	subgt	r3, r2, r3
 808ac26:	185b      	addgt	r3, r3, r1
 808ac28:	6663      	strgt	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 808ac2a:	6863      	ldr	r3, [r4, #4]
 808ac2c:	3301      	adds	r3, #1
 808ac2e:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
 808ac30:	bd10      	pop	{r4, pc}
 808ac32:	bf00      	nop
 808ac34:	ffff8900 	.word	0xffff8900
 808ac38:	ffff8200 	.word	0xffff8200

0808ac3c <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 808ac3c:	7a4b      	ldrb	r3, [r1, #9]
 808ac3e:	2b07      	cmp	r3, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 808ac40:	bf08      	it	eq
 808ac42:	4a03      	ldreq	r2, [pc, #12]	; (808ac50 <mbedtls_ssl_optimize_checksum+0x14>)
 808ac44:	6b03      	ldr	r3, [r0, #48]	; 0x30
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 808ac46:	bf18      	it	ne
 808ac48:	4a02      	ldrne	r2, [pc, #8]	; (808ac54 <mbedtls_ssl_optimize_checksum+0x18>)
 808ac4a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 808ac4e:	4770      	bx	lr
 808ac50:	08089ea1 	.word	0x08089ea1
 808ac54:	08089e99 	.word	0x08089e99

0808ac58 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 808ac58:	b510      	push	{r4, lr}
 808ac5a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808ac5c:	68c3      	ldr	r3, [r0, #12]
 808ac5e:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 808ac62:	2b01      	cmp	r3, #1
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 808ac64:	bfc9      	itett	gt
 808ac66:	6c03      	ldrgt	r3, [r0, #64]	; 0x40
                       ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->out_msg = ssl->out_iv;
 808ac68:	f8c0 1098 	strle.w	r1, [r0, #152]	; 0x98
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
                       ssl->transform_negotiate->fixed_ivlen;
 808ac6c:	68da      	ldrgt	r2, [r3, #12]
 808ac6e:	691b      	ldrgt	r3, [r3, #16]
 808ac70:	bfc2      	ittt	gt
 808ac72:	1ad3      	subgt	r3, r2, r3
 808ac74:	185b      	addgt	r3, r3, r1
 808ac76:	f8c0 3098 	strgt.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 808ac7a:	6803      	ldr	r3, [r0, #0]
 808ac7c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 808ac80:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808ac84:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808ac86:	f002 0201 	and.w	r2, r2, #1
 808ac8a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 808ac8e:	3104      	adds	r1, #4
 808ac90:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 808ac92:	68e3      	ldr	r3, [r4, #12]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 808ac94:	2214      	movs	r2, #20
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 808ac96:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 808ac98:	bf14      	ite	ne
 808ac9a:	2310      	movne	r3, #16
 808ac9c:	2328      	moveq	r3, #40	; 0x28
 808ac9e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808aca2:	2316      	movs	r3, #22
 808aca4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 808aca8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808acac:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 808acae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808acb0:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 808acb4:	b133      	cbz	r3, 808acc4 <mbedtls_ssl_write_finished+0x6c>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808acb6:	6823      	ldr	r3, [r4, #0]
 808acb8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808acbc:	07db      	lsls	r3, r3, #31
 808acbe:	d404      	bmi.n	808acca <mbedtls_ssl_write_finished+0x72>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 808acc0:	230f      	movs	r3, #15
 808acc2:	e001      	b.n	808acc8 <mbedtls_ssl_write_finished+0x70>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 808acc4:	6863      	ldr	r3, [r4, #4]
 808acc6:	3301      	adds	r3, #1
 808acc8:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
 808acca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 808acce:	2200      	movs	r2, #0
 808acd0:	601a      	str	r2, [r3, #0]
 808acd2:	605a      	str	r2, [r3, #4]

    ssl->transform_out = ssl->transform_negotiate;
 808acd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808acd6:	4620      	mov	r0, r4
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );

    ssl->transform_out = ssl->transform_negotiate;
 808acd8:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 808acda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808acdc:	6263      	str	r3, [r4, #36]	; 0x24
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
 808acde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808ace2:	f7ff badd 	b.w	808a2a0 <mbedtls_ssl_write_record>
	...

0808ace8 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 808ace8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 808acea:	6803      	ldr	r3, [r0, #0]
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 808acec:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 808acee:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808acf2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808acf4:	43d2      	mvns	r2, r2
 808acf6:	ad01      	add	r5, sp, #4
 808acf8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 808acfc:	f002 0201 	and.w	r2, r2, #1
 808ad00:	4629      	mov	r1, r5
 808ad02:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ad04:	4620      	mov	r0, r4
 808ad06:	f7ff fecd 	bl	808aaa4 <mbedtls_ssl_read_record>
 808ad0a:	2800      	cmp	r0, #0
 808ad0c:	d13b      	bne.n	808ad86 <mbedtls_ssl_parse_finished+0x9e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808ad0e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808ad10:	2b16      	cmp	r3, #22
 808ad12:	d006      	beq.n	808ad22 <mbedtls_ssl_parse_finished+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808ad14:	220a      	movs	r2, #10
 808ad16:	2102      	movs	r1, #2
 808ad18:	4620      	mov	r0, r4
 808ad1a:	f7ff fc75 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808ad1e:	481b      	ldr	r0, [pc, #108]	; (808ad8c <mbedtls_ssl_parse_finished+0xa4>)
 808ad20:	e031      	b.n	808ad86 <mbedtls_ssl_parse_finished+0x9e>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 808ad22:	6e61      	ldr	r1, [r4, #100]	; 0x64
 808ad24:	780b      	ldrb	r3, [r1, #0]
 808ad26:	2b14      	cmp	r3, #20
 808ad28:	d115      	bne.n	808ad56 <mbedtls_ssl_parse_finished+0x6e>
 808ad2a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808ad2c:	2b10      	cmp	r3, #16
 808ad2e:	d112      	bne.n	808ad56 <mbedtls_ssl_parse_finished+0x6e>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 808ad30:	f88d 0003 	strb.w	r0, [sp, #3]
 808ad34:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 808ad36:	5ccb      	ldrb	r3, [r1, r3]
 808ad38:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
 808ad3a:	f89d 6003 	ldrb.w	r6, [sp, #3]
 808ad3e:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808ad40:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 808ad42:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808ad44:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 808ad46:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808ad4a:	d1f3      	bne.n	808ad34 <mbedtls_ssl_parse_finished+0x4c>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 808ad4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 808ad50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808ad54:	b133      	cbz	r3, 808ad64 <mbedtls_ssl_parse_finished+0x7c>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808ad56:	2232      	movs	r2, #50	; 0x32
 808ad58:	2102      	movs	r1, #2
 808ad5a:	4620      	mov	r0, r4
 808ad5c:	f7ff fc54 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 808ad60:	480b      	ldr	r0, [pc, #44]	; (808ad90 <mbedtls_ssl_parse_finished+0xa8>)
 808ad62:	e010      	b.n	808ad86 <mbedtls_ssl_parse_finished+0x9e>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 808ad64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808ad66:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
 808ad6a:	b138      	cbz	r0, 808ad7c <mbedtls_ssl_parse_finished+0x94>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808ad6c:	6823      	ldr	r3, [r4, #0]
 808ad6e:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
 808ad72:	f010 0001 	ands.w	r0, r0, #1
 808ad76:	d105      	bne.n	808ad84 <mbedtls_ssl_parse_finished+0x9c>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 808ad78:	230a      	movs	r3, #10
 808ad7a:	e001      	b.n	808ad80 <mbedtls_ssl_parse_finished+0x98>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 808ad7c:	6863      	ldr	r3, [r4, #4]
 808ad7e:	3301      	adds	r3, #1
 808ad80:	6063      	str	r3, [r4, #4]
 808ad82:	e000      	b.n	808ad86 <mbedtls_ssl_parse_finished+0x9e>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
 808ad84:	4610      	mov	r0, r2
}
 808ad86:	b004      	add	sp, #16
 808ad88:	bd70      	pop	{r4, r5, r6, pc}
 808ad8a:	bf00      	nop
 808ad8c:	ffff8900 	.word	0xffff8900
 808ad90:	ffff8180 	.word	0xffff8180

0808ad94 <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 808ad94:	2274      	movs	r2, #116	; 0x74
 808ad96:	2100      	movs	r1, #0
 808ad98:	f008 bc01 	b.w	809359e <memset>

0808ad9c <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 808ad9c:	22b4      	movs	r2, #180	; 0xb4
 808ad9e:	2100      	movs	r1, #0
 808ada0:	f008 bbfd 	b.w	809359e <memset>

0808ada4 <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
 808ada4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 808ada8:	f361 0383 	bfi	r3, r1, #2, #2
 808adac:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 808adb0:	4770      	bx	lr

0808adb2 <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
 808adb2:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
 808adb4:	6382      	str	r2, [r0, #56]	; 0x38
 808adb6:	4770      	bx	lr

0808adb8 <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
 808adb8:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 808adba:	61c2      	str	r2, [r0, #28]
 808adbc:	4770      	bx	lr

0808adbe <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
 808adbe:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 808adc0:	6142      	str	r2, [r0, #20]
 808adc2:	4770      	bx	lr

0808adc4 <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
 808adc4:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 808adc6:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
 808adc8:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 808adca:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
 808adcc:	6183      	str	r3, [r0, #24]
 808adce:	4770      	bx	lr

0808add0 <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
 808add0:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
 808add2:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
 808add4:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
 808add6:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 808add8:	2100      	movs	r1, #0
}
 808adda:	bc10      	pop	{r4}
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 808addc:	f7fe beee 	b.w	8089bbc <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

0808ade0 <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 808ade0:	3048      	adds	r0, #72	; 0x48
 808ade2:	f7ff b83b 	b.w	8089e5c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

0808ade6 <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
 808ade6:	64c1      	str	r1, [r0, #76]	; 0x4c
    conf->ca_crl     = ca_crl;
 808ade8:	6502      	str	r2, [r0, #80]	; 0x50
 808adea:	4770      	bx	lr

0808adec <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
 808adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808adee:	4606      	mov	r6, r0
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
 808adf0:	460c      	mov	r4, r1
 808adf2:	b131      	cbz	r1, 808ae02 <mbedtls_ssl_set_hostname+0x16>
    {
        hostname_len = strlen( hostname );
 808adf4:	4608      	mov	r0, r1
 808adf6:	f008 fbfa 	bl	80935ee <strlen>

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 808adfa:	28ff      	cmp	r0, #255	; 0xff

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );
 808adfc:	4605      	mov	r5, r0

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 808adfe:	d901      	bls.n	808ae04 <mbedtls_ssl_set_hostname+0x18>
 808ae00:	e022      	b.n	808ae48 <mbedtls_ssl_set_hostname+0x5c>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
 808ae02:	460d      	mov	r5, r1
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
 808ae04:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 808ae08:	b157      	cbz	r7, 808ae20 <mbedtls_ssl_set_hostname+0x34>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 808ae0a:	4638      	mov	r0, r7
 808ae0c:	f008 fbef 	bl	80935ee <strlen>
 808ae10:	4601      	mov	r1, r0
 808ae12:	4638      	mov	r0, r7
 808ae14:	f7fe feca 	bl	8089bac <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 808ae18:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
 808ae1c:	f006 fc34 	bl	8091688 <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
 808ae20:	b91c      	cbnz	r4, 808ae2a <mbedtls_ssl_set_hostname+0x3e>
    {
        ssl->hostname = NULL;
 808ae22:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
        memcpy( ssl->hostname, hostname, hostname_len );

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
 808ae26:	4620      	mov	r0, r4
 808ae28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        ssl->hostname = NULL;
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
 808ae2a:	1c69      	adds	r1, r5, #1
 808ae2c:	2001      	movs	r0, #1
 808ae2e:	f008 fa73 	bl	8093318 <calloc>
 808ae32:	4607      	mov	r7, r0
 808ae34:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
        if( ssl->hostname == NULL )
 808ae38:	b140      	cbz	r0, 808ae4c <mbedtls_ssl_set_hostname+0x60>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

        memcpy( ssl->hostname, hostname, hostname_len );
 808ae3a:	462a      	mov	r2, r5
 808ae3c:	4621      	mov	r1, r4
 808ae3e:	f008 fb88 	bl	8093552 <memcpy>

        ssl->hostname[hostname_len] = '\0';
 808ae42:	2000      	movs	r0, #0
 808ae44:	5578      	strb	r0, [r7, r5]
 808ae46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808ae48:	4801      	ldr	r0, [pc, #4]	; (808ae50 <mbedtls_ssl_set_hostname+0x64>)
 808ae4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
        if( ssl->hostname == NULL )
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808ae4c:	4801      	ldr	r0, [pc, #4]	; (808ae54 <mbedtls_ssl_set_hostname+0x68>)

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
}
 808ae4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808ae50:	ffff8f00 	.word	0xffff8f00
 808ae54:	ffff8100 	.word	0xffff8100

0808ae58 <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
 808ae58:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    conf->min_minor_ver = minor;
 808ae5c:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
 808ae60:	4770      	bx	lr

0808ae62 <mbedtls_ssl_get_verify_result>:
    return( ssl->in_offt == NULL ? 0 : ssl->in_msglen );
}

uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
{
    if( ssl->session != NULL )
 808ae62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 808ae64:	b90b      	cbnz	r3, 808ae6a <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session->verify_result );

    if( ssl->session_negotiate != NULL )
 808ae66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 808ae68:	b10b      	cbz	r3, 808ae6e <mbedtls_ssl_get_verify_result+0xc>
        return( ssl->session_negotiate->verify_result );
 808ae6a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 808ae6c:	4770      	bx	lr

    return( 0xFFFFFFFF );
 808ae6e:	f04f 30ff 	mov.w	r0, #4294967295
}
 808ae72:	4770      	bx	lr

0808ae74 <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 808ae74:	6803      	ldr	r3, [r0, #0]
 808ae76:	4a09      	ldr	r2, [pc, #36]	; (808ae9c <mbedtls_ssl_get_max_frag_len+0x28>)
 808ae78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 808ae7c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 808ae7e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 808ae82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 808ae86:	b131      	cbz	r1, 808ae96 <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 808ae88:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 808ae8c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 808ae90:	4293      	cmp	r3, r2
 808ae92:	bf28      	it	cs
 808ae94:	4613      	movcs	r3, r2
    {
        max_len = mfl_code_to_length[ssl->session_out->mfl_code];
    }

    return max_len;
}
 808ae96:	4618      	mov	r0, r3
 808ae98:	4770      	bx	lr
 808ae9a:	bf00      	nop
 808ae9c:	08095e98 	.word	0x08095e98

0808aea0 <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
 808aea0:	b138      	cbz	r0, 808aeb2 <mbedtls_ssl_handshake_step+0x12>
 808aea2:	6803      	ldr	r3, [r0, #0]
 808aea4:	b12b      	cbz	r3, 808aeb2 <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808aea6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808aeaa:	07db      	lsls	r3, r3, #31
 808aeac:	d403      	bmi.n	808aeb6 <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 808aeae:	f004 bddb 	b.w	808fa68 <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808aeb2:	4802      	ldr	r0, [pc, #8]	; (808aebc <mbedtls_ssl_handshake_step+0x1c>)
 808aeb4:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 808aeb6:	4802      	ldr	r0, [pc, #8]	; (808aec0 <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
 808aeb8:	4770      	bx	lr
 808aeba:	bf00      	nop
 808aebc:	ffff8f00 	.word	0xffff8f00
 808aec0:	ffff8f80 	.word	0xffff8f80

0808aec4 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 808aec4:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
 808aec6:	4604      	mov	r4, r0
 808aec8:	b150      	cbz	r0, 808aee0 <mbedtls_ssl_handshake+0x1c>
 808aeca:	6803      	ldr	r3, [r0, #0]
 808aecc:	b143      	cbz	r3, 808aee0 <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808aece:	6863      	ldr	r3, [r4, #4]
 808aed0:	2b10      	cmp	r3, #16
 808aed2:	d007      	beq.n	808aee4 <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 808aed4:	4620      	mov	r0, r4
 808aed6:	f7ff ffe3 	bl	808aea0 <mbedtls_ssl_handshake_step>

        if( ret != 0 )
 808aeda:	2800      	cmp	r0, #0
 808aedc:	d0f7      	beq.n	808aece <mbedtls_ssl_handshake+0xa>
 808aede:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808aee0:	4801      	ldr	r0, [pc, #4]	; (808aee8 <mbedtls_ssl_handshake+0x24>)
 808aee2:	bd10      	pop	{r4, pc}
 808aee4:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
 808aee6:	bd10      	pop	{r4, pc}
 808aee8:	ffff8f00 	.word	0xffff8f00

0808aeec <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
 808aeec:	b570      	push	{r4, r5, r6, lr}
 808aeee:	460e      	mov	r6, r1
 808aef0:	4614      	mov	r4, r2
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
 808aef2:	4605      	mov	r5, r0
 808aef4:	2800      	cmp	r0, #0
 808aef6:	d061      	beq.n	808afbc <mbedtls_ssl_read+0xd0>
 808aef8:	6803      	ldr	r3, [r0, #0]
 808aefa:	2b00      	cmp	r3, #0
 808aefc:	d05e      	beq.n	808afbc <mbedtls_ssl_read+0xd0>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808aefe:	6843      	ldr	r3, [r0, #4]
 808af00:	2b10      	cmp	r3, #16
 808af02:	d103      	bne.n	808af0c <mbedtls_ssl_read+0x20>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
            return( ret );
        }
    }

    if( ssl->in_offt == NULL )
 808af04:	6eab      	ldr	r3, [r5, #104]	; 0x68
 808af06:	2b00      	cmp	r3, #0
 808af08:	d142      	bne.n	808af90 <mbedtls_ssl_read+0xa4>
 808af0a:	e007      	b.n	808af1c <mbedtls_ssl_read+0x30>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        ret = mbedtls_ssl_handshake( ssl );
 808af0c:	f7ff ffda 	bl	808aec4 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 808af10:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
 808af14:	d0f6      	beq.n	808af04 <mbedtls_ssl_read+0x18>
 808af16:	2800      	cmp	r0, #0
 808af18:	d0f4      	beq.n	808af04 <mbedtls_ssl_read+0x18>
 808af1a:	bd70      	pop	{r4, r5, r6, pc}
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 808af1c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 808af1e:	b11b      	cbz	r3, 808af28 <mbedtls_ssl_read+0x3c>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 808af20:	6c68      	ldr	r0, [r5, #68]	; 0x44
 808af22:	4798      	blx	r3
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 808af24:	3001      	adds	r0, #1
 808af26:	d04d      	beq.n	808afc4 <mbedtls_ssl_read+0xd8>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
        }

        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808af28:	4628      	mov	r0, r5
 808af2a:	f7ff fdbb 	bl	808aaa4 <mbedtls_ssl_read_record>
 808af2e:	b120      	cbz	r0, 808af3a <mbedtls_ssl_read+0x4e>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 808af30:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 808af34:	d157      	bne.n	808afe6 <mbedtls_ssl_read+0xfa>
                return( 0 );
 808af36:	2000      	movs	r0, #0
 808af38:	bd70      	pop	{r4, r5, r6, pc}

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
            return( ret );
        }

        if( ssl->in_msglen  == 0 &&
 808af3a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 808af3c:	b953      	cbnz	r3, 808af54 <mbedtls_ssl_read+0x68>
 808af3e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808af40:	2b17      	cmp	r3, #23
 808af42:	d107      	bne.n	808af54 <mbedtls_ssl_read+0x68>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808af44:	4628      	mov	r0, r5
 808af46:	f7ff fdad 	bl	808aaa4 <mbedtls_ssl_read_record>
 808af4a:	b118      	cbz	r0, 808af54 <mbedtls_ssl_read+0x68>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 808af4c:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 808af50:	d0f1      	beq.n	808af36 <mbedtls_ssl_read+0x4a>
 808af52:	bd70      	pop	{r4, r5, r6, pc}
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
                return( ret );
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808af54:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808af56:	2b16      	cmp	r3, #22
 808af58:	d10b      	bne.n	808af72 <mbedtls_ssl_read+0x86>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 808af5a:	682b      	ldr	r3, [r5, #0]
 808af5c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808af60:	07db      	lsls	r3, r3, #31
 808af62:	d435      	bmi.n	808afd0 <mbedtls_ssl_read+0xe4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 808af64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 808af66:	781b      	ldrb	r3, [r3, #0]
 808af68:	bb53      	cbnz	r3, 808afc0 <mbedtls_ssl_read+0xd4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 808af6a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 808af6c:	2b04      	cmp	r3, #4
 808af6e:	d127      	bne.n	808afc0 <mbedtls_ssl_read+0xd4>
 808af70:	e02e      	b.n	808afd0 <mbedtls_ssl_read+0xe4>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 808af72:	2b15      	cmp	r3, #21
 808af74:	d101      	bne.n	808af7a <mbedtls_ssl_read+0x8e>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
                }
            }

            return( MBEDTLS_ERR_SSL_WANT_READ );
 808af76:	481c      	ldr	r0, [pc, #112]	; (808afe8 <mbedtls_ssl_read+0xfc>)
 808af78:	bd70      	pop	{r4, r5, r6, pc}
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 808af7a:	2b17      	cmp	r3, #23
 808af7c:	d120      	bne.n	808afc0 <mbedtls_ssl_read+0xd4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        }

        ssl->in_offt = ssl->in_msg;
 808af7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808af80:	66ab      	str	r3, [r5, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 808af82:	686b      	ldr	r3, [r5, #4]
 808af84:	2b10      	cmp	r3, #16
 808af86:	d103      	bne.n	808af90 <mbedtls_ssl_read+0xa4>
            ssl_set_timer( ssl, 0 );
 808af88:	2100      	movs	r1, #0
 808af8a:	4628      	mov	r0, r5
 808af8c:	f7fe fe16 	bl	8089bbc <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
 808af90:	6f28      	ldr	r0, [r5, #112]	; 0x70
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
 808af92:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 808af94:	4284      	cmp	r4, r0
 808af96:	bf28      	it	cs
 808af98:	4604      	movcs	r4, r0
 808af9a:	4630      	mov	r0, r6
 808af9c:	4622      	mov	r2, r4
 808af9e:	f008 fad8 	bl	8093552 <memcpy>
    ssl->in_msglen -= n;
 808afa2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 808afa4:	1b1b      	subs	r3, r3, r4
 808afa6:	672b      	str	r3, [r5, #112]	; 0x70

    if( ssl->in_msglen == 0 )
 808afa8:	b91b      	cbnz	r3, 808afb2 <mbedtls_ssl_read+0xc6>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
 808afaa:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
 808afac:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 808afb0:	e002      	b.n	808afb8 <mbedtls_ssl_read+0xcc>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
 808afb2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 808afb4:	4423      	add	r3, r4
 808afb6:	66ab      	str	r3, [r5, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
 808afb8:	4620      	mov	r0, r4
 808afba:	bd70      	pop	{r4, r5, r6, pc}
{
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808afbc:	480b      	ldr	r0, [pc, #44]	; (808afec <mbedtls_ssl_read+0x100>)
 808afbe:	bd70      	pop	{r4, r5, r6, pc}
                /* With DTLS, drop the packet (probably from last handshake) */
#if defined(MBEDTLS_SSL_PROTO_DTLS)
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                    return( MBEDTLS_ERR_SSL_WANT_READ );
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808afc0:	480b      	ldr	r0, [pc, #44]	; (808aff0 <mbedtls_ssl_read+0x104>)
 808afc2:	bd70      	pop	{r4, r5, r6, pc}
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 808afc4:	682b      	ldr	r3, [r5, #0]
 808afc6:	4628      	mov	r0, r5
 808afc8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 808afca:	f7fe fdf7 	bl	8089bbc <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
 808afce:	e7ab      	b.n	808af28 <mbedtls_ssl_read+0x3c>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 808afd0:	68eb      	ldr	r3, [r5, #12]
 808afd2:	2b00      	cmp	r3, #0
 808afd4:	dd06      	ble.n	808afe4 <mbedtls_ssl_read+0xf8>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 808afd6:	2264      	movs	r2, #100	; 0x64
 808afd8:	2101      	movs	r1, #1
 808afda:	4628      	mov	r0, r5
 808afdc:	f7ff fb14 	bl	808a608 <mbedtls_ssl_send_alert_message>
 808afe0:	b908      	cbnz	r0, 808afe6 <mbedtls_ssl_read+0xfa>
 808afe2:	e7c8      	b.n	808af76 <mbedtls_ssl_read+0x8a>
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808afe4:	4803      	ldr	r0, [pc, #12]	; (808aff4 <mbedtls_ssl_read+0x108>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
}
 808afe6:	bd70      	pop	{r4, r5, r6, pc}
 808afe8:	ffff9700 	.word	0xffff9700
 808afec:	ffff8f00 	.word	0xffff8f00
 808aff0:	ffff8900 	.word	0xffff8900
 808aff4:	ffff9400 	.word	0xffff9400

0808aff8 <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
 808aff8:	b570      	push	{r4, r5, r6, lr}
 808affa:	460e      	mov	r6, r1
 808affc:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
 808affe:	4604      	mov	r4, r0
 808b000:	b350      	cbz	r0, 808b058 <mbedtls_ssl_write+0x60>
 808b002:	6803      	ldr	r3, [r0, #0]
 808b004:	b343      	cbz	r3, 808b058 <mbedtls_ssl_write+0x60>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808b006:	6843      	ldr	r3, [r0, #4]
 808b008:	2b10      	cmp	r3, #16
 808b00a:	d109      	bne.n	808b020 <mbedtls_ssl_write+0x28>
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret;
#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 808b00c:	4620      	mov	r0, r4
 808b00e:	f7ff ff31 	bl	808ae74 <mbedtls_ssl_get_max_frag_len>
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
 808b012:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 808b016:	4285      	cmp	r5, r0
 808b018:	bf28      	it	cs
 808b01a:	4605      	movcs	r5, r0
 808b01c:	b92b      	cbnz	r3, 808b02a <mbedtls_ssl_write+0x32>
 808b01e:	e00a      	b.n	808b036 <mbedtls_ssl_write+0x3e>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 808b020:	f7ff ff50 	bl	808aec4 <mbedtls_ssl_handshake>
 808b024:	2800      	cmp	r0, #0
 808b026:	d0f1      	beq.n	808b00c <mbedtls_ssl_write+0x14>
 808b028:	bd70      	pop	{r4, r5, r6, pc}
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808b02a:	4620      	mov	r0, r4
 808b02c:	f7ff f900 	bl	808a230 <mbedtls_ssl_flush_output>
 808b030:	b998      	cbnz	r0, 808b05a <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
 808b032:	4628      	mov	r0, r5
 808b034:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 808b036:	2317      	movs	r3, #23
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
 808b038:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 808b03c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 808b040:	462a      	mov	r2, r5
 808b042:	4631      	mov	r1, r6
 808b044:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808b048:	f008 fa83 	bl	8093552 <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808b04c:	4620      	mov	r0, r4
 808b04e:	f7ff f927 	bl	808a2a0 <mbedtls_ssl_write_record>
 808b052:	2800      	cmp	r0, #0
 808b054:	d0ed      	beq.n	808b032 <mbedtls_ssl_write+0x3a>
 808b056:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808b058:	4800      	ldr	r0, [pc, #0]	; (808b05c <mbedtls_ssl_write+0x64>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
 808b05a:	bd70      	pop	{r4, r5, r6, pc}
 808b05c:	ffff8f00 	.word	0xffff8f00

0808b060 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 808b060:	b510      	push	{r4, lr}
    if( transform == NULL )
 808b062:	4604      	mov	r4, r0
 808b064:	b1a0      	cbz	r0, 808b090 <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 808b066:	3050      	adds	r0, #80	; 0x50
 808b068:	f7f8 fc28 	bl	80838bc <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 808b06c:	f104 0090 	add.w	r0, r4, #144	; 0x90
 808b070:	f7f8 fc24 	bl	80838bc <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 808b074:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808b078:	f7fd f867 	bl	808814a <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 808b07c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 808b080:	f7fd f863 	bl	808814a <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 808b084:	4620      	mov	r0, r4
}
 808b086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 808b08a:	21d0      	movs	r1, #208	; 0xd0
 808b08c:	f7fe bd8e 	b.w	8089bac <_ZL15mbedtls_zeroizePvj>
 808b090:	bd10      	pop	{r4, pc}

0808b092 <mbedtls_ssl_handshake_free>:
    }
}
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
 808b092:	b538      	push	{r3, r4, r5, lr}
    if( handshake == NULL )
 808b094:	4604      	mov	r4, r0
 808b096:	b1a0      	cbz	r0, 808b0c2 <mbedtls_ssl_handshake_free+0x30>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 808b098:	3018      	adds	r0, #24
 808b09a:	f7f7 fce9 	bl	8082a70 <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 808b09e:	f104 0088 	add.w	r0, r4, #136	; 0x88
 808b0a2:	f003 f8bd 	bl	808e220 <mbedtls_sha512_free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
 808b0a6:	68e0      	ldr	r0, [r4, #12]
 808b0a8:	b930      	cbnz	r0, 808b0b8 <mbedtls_ssl_handshake_free+0x26>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 808b0aa:	4620      	mov	r0, r4
}
 808b0ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 808b0b0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 808b0b4:	f7fe bd7a 	b.w	8089bac <_ZL15mbedtls_zeroizePvj>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
 808b0b8:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
 808b0ba:	f006 fae5 	bl	8091688 <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
 808b0be:	4628      	mov	r0, r5
 808b0c0:	e7f2      	b.n	808b0a8 <mbedtls_ssl_handshake_free+0x16>
 808b0c2:	bd38      	pop	{r3, r4, r5, pc}

0808b0c4 <mbedtls_ssl_session_free>:

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 808b0c4:	b510      	push	{r4, lr}
    if( session == NULL )
 808b0c6:	4604      	mov	r4, r0
 808b0c8:	b178      	cbz	r0, 808b0ea <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 808b0ca:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808b0cc:	b120      	cbz	r0, 808b0d8 <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 808b0ce:	f7fe f962 	bl	8089396 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 808b0d2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 808b0d4:	f006 fad8 	bl	8091688 <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
 808b0d8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 808b0da:	f006 fad5 	bl	8091688 <free>
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 808b0de:	4620      	mov	r0, r4
}
 808b0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 808b0e4:	2174      	movs	r1, #116	; 0x74
 808b0e6:	f7fe bd61 	b.w	8089bac <_ZL15mbedtls_zeroizePvj>
 808b0ea:	bd10      	pop	{r4, pc}

0808b0ec <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 808b0ec:	b538      	push	{r3, r4, r5, lr}
 808b0ee:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 808b0f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 808b0f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
 808b0f4:	f8d3 51e4 	ldr.w	r5, [r3, #484]	; 0x1e4
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 808b0f8:	b120      	cbz	r0, 808b104 <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 808b0fa:	f7ff ffe3 	bl	808b0c4 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 808b0fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808b100:	f006 fac2 	bl	8091688 <free>
    }
    ssl->session = ssl->session_negotiate;
 808b104:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;
 808b106:	2300      	movs	r3, #0

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 808b108:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
 808b10a:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 808b10c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 808b10e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 808b110:	b123      	cbz	r3, 808b11c <mbedtls_ssl_handshake_wrapup+0x30>
 808b112:	6888      	ldr	r0, [r1, #8]
 808b114:	b110      	cbz	r0, 808b11c <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
 808b116:	b90d      	cbnz	r5, 808b11c <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 808b118:	6a90      	ldr	r0, [r2, #40]	; 0x28
 808b11a:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
 808b11c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808b11e:	f7ff ffb8 	bl	808b092 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 808b122:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808b124:	f006 fab0 	bl	8091688 <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 808b128:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
 808b12a:	2300      	movs	r3, #0
 808b12c:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 808b12e:	b120      	cbz	r0, 808b13a <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 808b130:	f7ff ff96 	bl	808b060 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 808b134:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808b136:	f006 faa7 	bl	8091688 <free>
    }
    ssl->transform = ssl->transform_negotiate;
 808b13a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808b13c:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 808b13e:	2300      	movs	r3, #0
 808b140:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
 808b142:	6863      	ldr	r3, [r4, #4]
 808b144:	3301      	adds	r3, #1
 808b146:	6063      	str	r3, [r4, #4]
 808b148:	bd38      	pop	{r3, r4, r5, pc}
	...

0808b14c <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 808b14c:	b538      	push	{r3, r4, r5, lr}
 808b14e:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 808b150:	6c00      	ldr	r0, [r0, #64]	; 0x40
 808b152:	b108      	cbz	r0, 808b158 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 808b154:	f7ff ff84 	bl	808b060 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 808b158:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808b15a:	b108      	cbz	r0, 808b160 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 808b15c:	f7ff ffb2 	bl	808b0c4 <mbedtls_ssl_session_free>
    if( ssl->handshake )
 808b160:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808b162:	b108      	cbz	r0, 808b168 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 808b164:	f7ff ff95 	bl	808b092 <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
 808b168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808b16a:	b923      	cbnz	r3, 808b176 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2a>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 808b16c:	21d0      	movs	r1, #208	; 0xd0
 808b16e:	2001      	movs	r0, #1
 808b170:	f008 f8d2 	bl	8093318 <calloc>
 808b174:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
 808b176:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808b178:	b923      	cbnz	r3, 808b184 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x38>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 808b17a:	2174      	movs	r1, #116	; 0x74
 808b17c:	2001      	movs	r0, #1
 808b17e:	f008 f8cb 	bl	8093318 <calloc>
 808b182:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
 808b184:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808b186:	b92b      	cbnz	r3, 808b194 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x48>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 808b188:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 808b18c:	2001      	movs	r0, #1
 808b18e:	f008 f8c3 	bl	8093318 <calloc>
 808b192:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
 808b194:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808b196:	b118      	cbz	r0, 808b1a0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
 808b198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808b19a:	b10b      	cbz	r3, 808b1a0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
 808b19c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
 808b19e:	b96b      	cbnz	r3, 808b1bc <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x70>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
 808b1a0:	f006 fa72 	bl	8091688 <free>
        mbedtls_free( ssl->transform_negotiate );
 808b1a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808b1a6:	f006 fa6f 	bl	8091688 <free>
        mbedtls_free( ssl->session_negotiate );
 808b1aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808b1ac:	f006 fa6c 	bl	8091688 <free>

        ssl->handshake = NULL;
 808b1b0:	2300      	movs	r3, #0
 808b1b2:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 808b1b4:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 808b1b6:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808b1b8:	481e      	ldr	r0, [pc, #120]	; (808b234 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xe8>)
 808b1ba:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
 808b1bc:	4618      	mov	r0, r3
 808b1be:	f7ff fde9 	bl	808ad94 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 808b1c2:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 808b1c4:	22d0      	movs	r2, #208	; 0xd0
 808b1c6:	2100      	movs	r1, #0
 808b1c8:	4628      	mov	r0, r5
 808b1ca:	f008 f9e8 	bl	809359e <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 808b1ce:	f105 0050 	add.w	r0, r5, #80	; 0x50
 808b1d2:	f7f8 fb6f 	bl	80838b4 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 808b1d6:	f105 0090 	add.w	r0, r5, #144	; 0x90
 808b1da:	f7f8 fb6b 	bl	80838b4 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
 808b1de:	f105 0038 	add.w	r0, r5, #56	; 0x38
 808b1e2:	f7fc ffad 	bl	8088140 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 808b1e6:	f105 0044 	add.w	r0, r5, #68	; 0x44
 808b1ea:	f7fc ffa9 	bl	8088140 <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
 808b1ee:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 808b1f0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 808b1f4:	f104 0518 	add.w	r5, r4, #24
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 808b1f8:	2100      	movs	r1, #0
 808b1fa:	4620      	mov	r0, r4
 808b1fc:	f008 f9cf 	bl	809359e <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 808b200:	4628      	mov	r0, r5
 808b202:	f7f7 fc31 	bl	8082a68 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 808b206:	2100      	movs	r1, #0
 808b208:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 808b20a:	f104 0588 	add.w	r5, r4, #136	; 0x88
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 808b20e:	f7f7 fc3f 	bl	8082a90 <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 808b212:	4628      	mov	r0, r5
 808b214:	f003 f800 	bl	808e218 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
 808b218:	2101      	movs	r1, #1
 808b21a:	4628      	mov	r0, r5
 808b21c:	f003 f810 	bl	808e240 <mbedtls_sha512_starts_ret>
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 808b220:	4b05      	ldr	r3, [pc, #20]	; (808b238 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xec>)

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 808b222:	2000      	movs	r0, #0
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 808b224:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 808b228:	2303      	movs	r3, #3

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 808b22a:	7020      	strb	r0, [r4, #0]
    set->ecdsa = md_alg;
 808b22c:	7060      	strb	r0, [r4, #1]
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 808b22e:	60a3      	str	r3, [r4, #8]
        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
}
 808b230:	bd38      	pop	{r3, r4, r5, pc}
 808b232:	bf00      	nop
 808b234:	ffff8100 	.word	0xffff8100
 808b238:	08089ea9 	.word	0x08089ea9

0808b23c <mbedtls_ssl_setup>:
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 808b23c:	b538      	push	{r3, r4, r5, lr}
    int ret;
    const size_t len = MBEDTLS_SSL_BUFFER_LEN;

    ssl->conf = conf;
 808b23e:	6001      	str	r1, [r0, #0]
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 808b240:	4604      	mov	r4, r0
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 808b242:	f242 114d 	movw	r1, #8525	; 0x214d
 808b246:	2001      	movs	r0, #1
 808b248:	f008 f866 	bl	8093318 <calloc>
 808b24c:	4605      	mov	r5, r0
 808b24e:	6520      	str	r0, [r4, #80]	; 0x50
 808b250:	b328      	cbz	r0, 808b29e <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 808b252:	f242 114d 	movw	r1, #8525	; 0x214d
 808b256:	2001      	movs	r0, #1
 808b258:	f008 f85e 	bl	8093318 <calloc>
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 808b25c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 808b260:	b1e8      	cbz	r0, 808b29e <mbedtls_ssl_setup+0x62>
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
 808b262:	f100 0308 	add.w	r3, r0, #8
 808b266:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 808b26a:	f100 030b 	add.w	r3, r0, #11
 808b26e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 808b272:	f105 0308 	add.w	r3, r5, #8
        ssl->in_msg = ssl->in_buf + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
 808b276:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
 808b27a:	6565      	str	r5, [r4, #84]	; 0x54
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 808b27c:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 808b27e:	65a3      	str	r3, [r4, #88]	; 0x58
        ssl->in_len = ssl->in_buf + 11;
 808b280:	f105 030b 	add.w	r3, r5, #11
        ssl->in_iv  = ssl->in_buf + 13;
 808b284:	350d      	adds	r5, #13
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 808b286:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 808b28a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
        ssl->in_len = ssl->in_buf + 11;
 808b28e:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 808b290:	6625      	str	r5, [r4, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 808b292:	6665      	str	r5, [r4, #100]	; 0x64
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 808b294:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 808b296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ssl->in_len = ssl->in_buf + 11;
        ssl->in_iv  = ssl->in_buf + 13;
        ssl->in_msg = ssl->in_buf + 13;
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 808b29a:	f7ff bf57 	b.w	808b14c <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
        mbedtls_free( ssl->in_buf );
 808b29e:	4628      	mov	r0, r5
 808b2a0:	f006 f9f2 	bl	8091688 <free>
        ssl->in_buf = NULL;
 808b2a4:	2300      	movs	r3, #0
 808b2a6:	6523      	str	r3, [r4, #80]	; 0x50

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
        return( ret );

    return( 0 );
}
 808b2a8:	4800      	ldr	r0, [pc, #0]	; (808b2ac <mbedtls_ssl_setup+0x70>)
 808b2aa:	bd38      	pop	{r3, r4, r5, pc}
 808b2ac:	ffff8100 	.word	0xffff8100

0808b2b0 <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
 808b2b0:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
 808b2b2:	4604      	mov	r4, r0
 808b2b4:	2800      	cmp	r0, #0
 808b2b6:	d048      	beq.n	808b34a <mbedtls_ssl_free+0x9a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
 808b2b8:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 808b2bc:	b138      	cbz	r0, 808b2ce <mbedtls_ssl_free+0x1e>
    {
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 808b2be:	f242 114d 	movw	r1, #8525	; 0x214d
 808b2c2:	f7fe fc73 	bl	8089bac <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->out_buf );
 808b2c6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 808b2ca:	f006 f9dd 	bl	8091688 <free>
    }

    if( ssl->in_buf != NULL )
 808b2ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
 808b2d0:	b130      	cbz	r0, 808b2e0 <mbedtls_ssl_free+0x30>
    {
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 808b2d2:	f242 114d 	movw	r1, #8525	; 0x214d
 808b2d6:	f7fe fc69 	bl	8089bac <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->in_buf );
 808b2da:	6d20      	ldr	r0, [r4, #80]	; 0x50
 808b2dc:	f006 f9d4 	bl	8091688 <free>
        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
 808b2e0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808b2e2:	b120      	cbz	r0, 808b2ee <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 808b2e4:	f7ff febc 	bl	808b060 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 808b2e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808b2ea:	f006 f9cd 	bl	8091688 <free>
    }

    if( ssl->handshake )
 808b2ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808b2f0:	b180      	cbz	r0, 808b314 <mbedtls_ssl_free+0x64>
    {
        mbedtls_ssl_handshake_free( ssl->handshake );
 808b2f2:	f7ff fece 	bl	808b092 <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 808b2f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808b2f8:	f7ff feb2 	bl	808b060 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 808b2fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808b2fe:	f7ff fee1 	bl	808b0c4 <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
 808b302:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808b304:	f006 f9c0 	bl	8091688 <free>
        mbedtls_free( ssl->transform_negotiate );
 808b308:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808b30a:	f006 f9bd 	bl	8091688 <free>
        mbedtls_free( ssl->session_negotiate );
 808b30e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808b310:	f006 f9ba 	bl	8091688 <free>
    }

    if( ssl->session )
 808b314:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808b316:	b120      	cbz	r0, 808b322 <mbedtls_ssl_free+0x72>
    {
        mbedtls_ssl_session_free( ssl->session );
 808b318:	f7ff fed4 	bl	808b0c4 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 808b31c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808b31e:	f006 f9b3 	bl	8091688 <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
 808b322:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 808b326:	b155      	cbz	r5, 808b33e <mbedtls_ssl_free+0x8e>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 808b328:	4628      	mov	r0, r5
 808b32a:	f008 f960 	bl	80935ee <strlen>
 808b32e:	4601      	mov	r1, r0
 808b330:	4628      	mov	r0, r5
 808b332:	f7fe fc3b 	bl	8089bac <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 808b336:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 808b33a:	f006 f9a5 	bl	8091688 <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 808b33e:	4620      	mov	r0, r4
}
 808b340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 808b344:	21b4      	movs	r1, #180	; 0xb4
 808b346:	f7fe bc31 	b.w	8089bac <_ZL15mbedtls_zeroizePvj>
 808b34a:	bd38      	pop	{r3, r4, r5, pc}

0808b34c <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 808b34c:	2264      	movs	r2, #100	; 0x64
 808b34e:	2100      	movs	r1, #0
 808b350:	f008 b925 	b.w	809359e <memset>

0808b354 <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
 808b354:	b510      	push	{r4, lr}
 808b356:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
 808b358:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 808b35c:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
 808b360:	f362 0041 	bfi	r0, r2, #1, #1
 808b364:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 808b368:	b951      	cbnz	r1, 808b380 <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 808b36a:	2102      	movs	r1, #2
 808b36c:	b2c2      	uxtb	r2, r0
 808b36e:	f361 0283 	bfi	r2, r1, #2, #2
 808b372:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
 808b376:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 808b37a:	430a      	orrs	r2, r1
 808b37c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 808b380:	2b02      	cmp	r3, #2
 808b382:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 808b386:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 808b38a:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 808b38e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 808b392:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 808b396:	d108      	bne.n	808b3aa <mbedtls_ssl_config_defaults+0x56>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
 808b398:	4b0a      	ldr	r3, [pc, #40]	; (808b3c4 <mbedtls_ssl_config_defaults+0x70>)
 808b39a:	60e3      	str	r3, [r4, #12]
 808b39c:	60a3      	str	r3, [r4, #8]
 808b39e:	6063      	str	r3, [r4, #4]
 808b3a0:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 808b3a2:	4b09      	ldr	r3, [pc, #36]	; (808b3c8 <mbedtls_ssl_config_defaults+0x74>)
 808b3a4:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 808b3a6:	4b09      	ldr	r3, [pc, #36]	; (808b3cc <mbedtls_ssl_config_defaults+0x78>)
 808b3a8:	e008      	b.n	808b3bc <mbedtls_ssl_config_defaults+0x68>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808b3aa:	f7fb fc33 	bl	8086c14 <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 808b3ae:	4b08      	ldr	r3, [pc, #32]	; (808b3d0 <mbedtls_ssl_config_defaults+0x7c>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808b3b0:	60e0      	str	r0, [r4, #12]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 808b3b2:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 808b3b4:	4b07      	ldr	r3, [pc, #28]	; (808b3d4 <mbedtls_ssl_config_defaults+0x80>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808b3b6:	60a0      	str	r0, [r4, #8]
 808b3b8:	6060      	str	r0, [r4, #4]
 808b3ba:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 808b3bc:	6563      	str	r3, [r4, #84]	; 0x54
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
 808b3be:	2000      	movs	r0, #0
 808b3c0:	bd10      	pop	{r4, pc}
 808b3c2:	bf00      	nop
 808b3c4:	20000410 	.word	0x20000410
 808b3c8:	08095e24 	.word	0x08095e24
 808b3cc:	20000434 	.word	0x20000434
 808b3d0:	08095714 	.word	0x08095714
 808b3d4:	2000041c 	.word	0x2000041c

0808b3d8 <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
 808b3d8:	b538      	push	{r3, r4, r5, lr}
 808b3da:	4604      	mov	r4, r0
        conf->psk_identity_len = 0;
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
 808b3dc:	6c80      	ldr	r0, [r0, #72]	; 0x48
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
 808b3de:	b120      	cbz	r0, 808b3ea <mbedtls_ssl_config_free+0x12>
    {
        next = cur->next;
 808b3e0:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 808b3e2:	f006 f951 	bl	8091688 <free>
        cur = next;
 808b3e6:	4628      	mov	r0, r5
 808b3e8:	e7f9      	b.n	808b3de <mbedtls_ssl_config_free+0x6>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 808b3ea:	4620      	mov	r0, r4
}
 808b3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 808b3f0:	2164      	movs	r1, #100	; 0x64
 808b3f2:	f7fe bbdb 	b.w	8089bac <_ZL15mbedtls_zeroizePvj>

0808b3f6 <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 808b3f6:	b508      	push	{r3, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 808b3f8:	2101      	movs	r1, #1
 808b3fa:	f001 fdc9 	bl	808cf90 <mbedtls_pk_can_do>
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
 808b3fe:	3000      	adds	r0, #0
 808b400:	bf18      	it	ne
 808b402:	2001      	movne	r0, #1
 808b404:	bd08      	pop	{r3, pc}
	...

0808b408 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 808b408:	3804      	subs	r0, #4
 808b40a:	2804      	cmp	r0, #4
 808b40c:	bf9a      	itte	ls
 808b40e:	4b02      	ldrls	r3, [pc, #8]	; (808b418 <mbedtls_ssl_hash_from_md_alg+0x10>)
 808b410:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
 808b412:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
 808b414:	4770      	bx	lr
 808b416:	bf00      	nop
 808b418:	08095e34 	.word	0x08095e34

0808b41c <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 808b41c:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 808b41e:	b510      	push	{r4, lr}
 808b420:	461c      	mov	r4, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 808b422:	d10f      	bne.n	808b444 <mbedtls_ssl_check_cert_usage+0x28>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
 808b424:	7a8b      	ldrb	r3, [r1, #10]
 808b426:	2b0a      	cmp	r3, #10
 808b428:	d80e      	bhi.n	808b448 <mbedtls_ssl_check_cert_usage+0x2c>
 808b42a:	409a      	lsls	r2, r3
 808b42c:	f012 0f82 	tst.w	r2, #130	; 0x82
 808b430:	d10c      	bne.n	808b44c <mbedtls_ssl_check_cert_usage+0x30>
 808b432:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 808b436:	d10b      	bne.n	808b450 <mbedtls_ssl_check_cert_usage+0x34>
 808b438:	f012 0f1c 	tst.w	r2, #28
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 808b43c:	bf14      	ite	ne
 808b43e:	2180      	movne	r1, #128	; 0x80
 808b440:	2100      	moveq	r1, #0
 808b442:	e006      	b.n	808b452 <mbedtls_ssl_check_cert_usage+0x36>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 808b444:	2180      	movs	r1, #128	; 0x80
 808b446:	e004      	b.n	808b452 <mbedtls_ssl_check_cert_usage+0x36>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 808b448:	2100      	movs	r1, #0
 808b44a:	e002      	b.n	808b452 <mbedtls_ssl_check_cert_usage+0x36>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
 808b44c:	2120      	movs	r1, #32
 808b44e:	e000      	b.n	808b452 <mbedtls_ssl_check_cert_usage+0x36>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 808b450:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 808b452:	f7fd fbc5 	bl	8088be0 <mbedtls_x509_crt_check_key_usage>
 808b456:	b128      	cbz	r0, 808b464 <mbedtls_ssl_check_cert_usage+0x48>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 808b458:	6822      	ldr	r2, [r4, #0]
        ret = -1;
 808b45a:	f04f 30ff 	mov.w	r0, #4294967295
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 808b45e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 808b462:	6022      	str	r2, [r4, #0]
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
 808b464:	bd10      	pop	{r4, pc}
	...

0808b468 <mbedtls_ssl_parse_certificate>:

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808b468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808b46c:	6c03      	ldr	r3, [r0, #64]	; 0x40

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808b46e:	b085      	sub	sp, #20
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808b470:	f8d3 8000 	ldr.w	r8, [r3]

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808b474:	4605      	mov	r5, r0
    int authmode = ssl->conf->authmode;
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808b476:	f898 200a 	ldrb.w	r2, [r8, #10]
 808b47a:	2a0b      	cmp	r2, #11
 808b47c:	d80b      	bhi.n	808b496 <mbedtls_ssl_parse_certificate+0x2e>
 808b47e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 808b482:	40d3      	lsrs	r3, r2
 808b484:	f003 0301 	and.w	r3, r3, #1
 808b488:	f083 0001 	eor.w	r0, r3, #1
 808b48c:	b11b      	cbz	r3, 808b496 <mbedtls_ssl_parse_certificate+0x2e>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        ssl->state++;
 808b48e:	686b      	ldr	r3, [r5, #4]
 808b490:	3301      	adds	r3, #1
 808b492:	606b      	str	r3, [r5, #4]
        return( 0 );
 808b494:	e0e0      	b.n	808b658 <mbedtls_ssl_parse_certificate+0x1f0>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808b496:	682b      	ldr	r3, [r5, #0]
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808b498:	4628      	mov	r0, r5
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808b49a:	f893 7060 	ldrb.w	r7, [r3, #96]	; 0x60
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808b49e:	f7ff fb01 	bl	808aaa4 <mbedtls_ssl_read_record>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808b4a2:	f3c7 0781 	ubfx	r7, r7, #2, #2
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808b4a6:	4604      	mov	r4, r0
 808b4a8:	bb80      	cbnz	r0, 808b50c <mbedtls_ssl_parse_certificate+0xa4>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    ssl->state++;
 808b4aa:	686b      	ldr	r3, [r5, #4]
 808b4ac:	3301      	adds	r3, #1
 808b4ae:	606b      	str	r3, [r5, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808b4b0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808b4b2:	2b16      	cmp	r3, #22
 808b4b4:	d006      	beq.n	808b4c4 <mbedtls_ssl_parse_certificate+0x5c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808b4b6:	220a      	movs	r2, #10
 808b4b8:	2102      	movs	r1, #2
 808b4ba:	4628      	mov	r0, r5
 808b4bc:	f7ff f8a4 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808b4c0:	4867      	ldr	r0, [pc, #412]	; (808b660 <mbedtls_ssl_parse_certificate+0x1f8>)
 808b4c2:	e0c9      	b.n	808b658 <mbedtls_ssl_parse_certificate+0x1f0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 808b4c4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 808b4c6:	7813      	ldrb	r3, [r2, #0]
 808b4c8:	2b0b      	cmp	r3, #11
 808b4ca:	d10b      	bne.n	808b4e4 <mbedtls_ssl_parse_certificate+0x7c>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 808b4cc:	6fa9      	ldr	r1, [r5, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 808b4ce:	2909      	cmp	r1, #9
 808b4d0:	d908      	bls.n	808b4e4 <mbedtls_ssl_parse_certificate+0x7c>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
 808b4d2:	7913      	ldrb	r3, [r2, #4]
 808b4d4:	b933      	cbnz	r3, 808b4e4 <mbedtls_ssl_parse_certificate+0x7c>
 808b4d6:	7950      	ldrb	r0, [r2, #5]
 808b4d8:	7993      	ldrb	r3, [r2, #6]
 808b4da:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808b4de:	3307      	adds	r3, #7
 808b4e0:	4299      	cmp	r1, r3
 808b4e2:	d015      	beq.n	808b510 <mbedtls_ssl_parse_certificate+0xa8>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808b4e4:	2232      	movs	r2, #50	; 0x32
 808b4e6:	2102      	movs	r1, #2
 808b4e8:	4628      	mov	r0, r5
 808b4ea:	f7ff f88d 	bl	808a608 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 808b4ee:	485d      	ldr	r0, [pc, #372]	; (808b664 <mbedtls_ssl_parse_certificate+0x1fc>)
 808b4f0:	e0b2      	b.n	808b658 <mbedtls_ssl_parse_certificate+0x1f0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 808b4f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 808b4f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808b670 <mbedtls_ssl_parse_certificate+0x208>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 808b4f8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808b4fa:	f7fd ff47 	bl	808938c <mbedtls_x509_crt_init>

    i += 3;
 808b4fe:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
 808b500:	f8d5 e078 	ldr.w	lr, [r5, #120]	; 0x78
 808b504:	4576      	cmp	r6, lr
 808b506:	d31c      	bcc.n	808b542 <mbedtls_ssl_parse_certificate+0xda>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 808b508:	2f00      	cmp	r7, #0
 808b50a:	d13f      	bne.n	808b58c <mbedtls_ssl_parse_certificate+0x124>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808b50c:	4620      	mov	r0, r4
 808b50e:	e0a3      	b.n	808b658 <mbedtls_ssl_parse_certificate+0x1f0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 808b510:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808b512:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808b514:	b128      	cbz	r0, 808b522 <mbedtls_ssl_parse_certificate+0xba>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 808b516:	f7fd ff3e 	bl	8089396 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 808b51a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808b51c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808b51e:	f006 f8b3 	bl	8091688 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
 808b522:	f44f 719a 	mov.w	r1, #308	; 0x134
 808b526:	2001      	movs	r0, #1
 808b528:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 808b52a:	f007 fef5 	bl	8093318 <calloc>
 808b52e:	65f0      	str	r0, [r6, #92]	; 0x5c
 808b530:	2800      	cmp	r0, #0
 808b532:	d1de      	bne.n	808b4f2 <mbedtls_ssl_parse_certificate+0x8a>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808b534:	2250      	movs	r2, #80	; 0x50
 808b536:	2102      	movs	r1, #2
 808b538:	4628      	mov	r0, r5
 808b53a:	f7ff f865 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808b53e:	484a      	ldr	r0, [pc, #296]	; (808b668 <mbedtls_ssl_parse_certificate+0x200>)
 808b540:	e08a      	b.n	808b658 <mbedtls_ssl_parse_certificate+0x1f0>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
 808b542:	1cf1      	adds	r1, r6, #3
 808b544:	458e      	cmp	lr, r1
 808b546:	d3cd      	bcc.n	808b4e4 <mbedtls_ssl_parse_certificate+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
 808b548:	6e68      	ldr	r0, [r5, #100]	; 0x64
 808b54a:	5d83      	ldrb	r3, [r0, r6]
 808b54c:	2b00      	cmp	r3, #0
 808b54e:	d1c9      	bne.n	808b4e4 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 808b550:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
 808b552:	7872      	ldrb	r2, [r6, #1]
 808b554:	78b3      	ldrb	r3, [r6, #2]
 808b556:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
 808b55a:	2a7f      	cmp	r2, #127	; 0x7f
 808b55c:	d9c2      	bls.n	808b4e4 <mbedtls_ssl_parse_certificate+0x7c>
 808b55e:	188e      	adds	r6, r1, r2
 808b560:	45b6      	cmp	lr, r6
 808b562:	d3bf      	bcc.n	808b4e4 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 808b564:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                                  ssl->in_msg + i, n );
 808b566:	4401      	add	r1, r0
 808b568:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808b56a:	f7fd ff6d 	bl	8089448 <mbedtls_x509_crt_parse_der>
        switch( ret )
 808b56e:	4548      	cmp	r0, r9
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
 808b570:	4604      	mov	r4, r0
        switch( ret )
 808b572:	d0c5      	beq.n	808b500 <mbedtls_ssl_parse_certificate+0x98>
 808b574:	dc04      	bgt.n	808b580 <mbedtls_ssl_parse_certificate+0x118>
 808b576:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 808b57a:	d158      	bne.n	808b62e <mbedtls_ssl_parse_certificate+0x1c6>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 808b57c:	2250      	movs	r2, #80	; 0x50
 808b57e:	e05d      	b.n	808b63c <mbedtls_ssl_parse_certificate+0x1d4>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 808b580:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 808b584:	d055      	beq.n	808b632 <mbedtls_ssl_parse_certificate+0x1ca>
 808b586:	2800      	cmp	r0, #0
 808b588:	d0ba      	beq.n	808b500 <mbedtls_ssl_parse_certificate+0x98>
 808b58a:	e050      	b.n	808b62e <mbedtls_ssl_parse_certificate+0x1c6>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
 808b58c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 808b58e:	682b      	ldr	r3, [r5, #0]
 808b590:	6916      	ldr	r6, [r2, #16]
 808b592:	b10e      	cbz	r6, 808b598 <mbedtls_ssl_parse_certificate+0x130>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
 808b594:	6952      	ldr	r2, [r2, #20]
 808b596:	e001      	b.n	808b59c <mbedtls_ssl_parse_certificate+0x134>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 808b598:	6cde      	ldr	r6, [r3, #76]	; 0x4c
            ca_crl   = ssl->conf->ca_crl;
 808b59a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808b59c:	6b99      	ldr	r1, [r3, #56]	; 0x38

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
                                ssl->session_negotiate->peer_cert,
 808b59e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808b5a0:	9103      	str	r1, [sp, #12]
 808b5a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 808b5a4:	9102      	str	r1, [sp, #8]
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
 808b5a6:	f100 0160 	add.w	r1, r0, #96	; 0x60
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808b5aa:	9101      	str	r1, [sp, #4]
 808b5ac:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 808b5b0:	9100      	str	r1, [sp, #0]
 808b5b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808b5b4:	4631      	mov	r1, r6
 808b5b6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808b5b8:	f7fd fe06 	bl	80891c8 <mbedtls_x509_crt_verify_with_profile>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 808b5bc:	682b      	ldr	r3, [r5, #0]
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808b5be:	4604      	mov	r4, r0
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 808b5c0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808b5c4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 808b5c6:	f002 0201 	and.w	r2, r2, #1
 808b5ca:	f100 0360 	add.w	r3, r0, #96	; 0x60
 808b5ce:	f082 0201 	eor.w	r2, r2, #1
 808b5d2:	4641      	mov	r1, r8
 808b5d4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808b5d6:	f7ff ff21 	bl	808b41c <mbedtls_ssl_check_cert_usage>
 808b5da:	b100      	cbz	r0, 808b5de <mbedtls_ssl_parse_certificate+0x176>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
 808b5dc:	b174      	cbz	r4, 808b5fc <mbedtls_ssl_parse_certificate+0x194>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808b5de:	2f01      	cmp	r7, #1
 808b5e0:	d105      	bne.n	808b5ee <mbedtls_ssl_parse_certificate+0x186>
 808b5e2:	f514 5f1c 	cmn.w	r4, #9984	; 0x2700
 808b5e6:	d02e      	beq.n	808b646 <mbedtls_ssl_parse_certificate+0x1de>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 808b5e8:	f514 4ff4 	cmn.w	r4, #31232	; 0x7a00
 808b5ec:	d02b      	beq.n	808b646 <mbedtls_ssl_parse_certificate+0x1de>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 808b5ee:	b90e      	cbnz	r6, 808b5f4 <mbedtls_ssl_parse_certificate+0x18c>
 808b5f0:	2f02      	cmp	r7, #2
 808b5f2:	d001      	beq.n	808b5f8 <mbedtls_ssl_parse_certificate+0x190>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
 808b5f4:	b934      	cbnz	r4, 808b604 <mbedtls_ssl_parse_certificate+0x19c>
 808b5f6:	e789      	b.n	808b50c <mbedtls_ssl_parse_certificate+0xa4>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 808b5f8:	4c1c      	ldr	r4, [pc, #112]	; (808b66c <mbedtls_ssl_parse_certificate+0x204>)
 808b5fa:	e003      	b.n	808b604 <mbedtls_ssl_parse_certificate+0x19c>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808b5fc:	2f01      	cmp	r7, #1
 808b5fe:	d085      	beq.n	808b50c <mbedtls_ssl_parse_certificate+0xa4>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 808b600:	b31e      	cbz	r6, 808b64a <mbedtls_ssl_parse_certificate+0x1e2>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 808b602:	4c18      	ldr	r4, [pc, #96]	; (808b664 <mbedtls_ssl_parse_certificate+0x1fc>)
        if( ret != 0 )
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 808b604:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808b606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 808b608:	05df      	lsls	r7, r3, #23
 808b60a:	d40e      	bmi.n	808b62a <mbedtls_ssl_parse_certificate+0x1c2>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 808b60c:	075e      	lsls	r6, r3, #29
 808b60e:	d40e      	bmi.n	808b62e <mbedtls_ssl_parse_certificate+0x1c6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 808b610:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 808b614:	d10d      	bne.n	808b632 <mbedtls_ssl_parse_certificate+0x1ca>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 808b616:	07d8      	lsls	r0, r3, #31
 808b618:	d40d      	bmi.n	808b636 <mbedtls_ssl_parse_certificate+0x1ce>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 808b61a:	0799      	lsls	r1, r3, #30
 808b61c:	d40d      	bmi.n	808b63a <mbedtls_ssl_parse_certificate+0x1d2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 808b61e:	f013 0f08 	tst.w	r3, #8
 808b622:	bf14      	ite	ne
 808b624:	2230      	movne	r2, #48	; 0x30
 808b626:	222e      	moveq	r2, #46	; 0x2e
 808b628:	e008      	b.n	808b63c <mbedtls_ssl_parse_certificate+0x1d4>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 808b62a:	2231      	movs	r2, #49	; 0x31
 808b62c:	e006      	b.n	808b63c <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 808b62e:	222a      	movs	r2, #42	; 0x2a
 808b630:	e004      	b.n	808b63c <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 808b632:	222b      	movs	r2, #43	; 0x2b
 808b634:	e002      	b.n	808b63c <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 808b636:	222d      	movs	r2, #45	; 0x2d
 808b638:	e000      	b.n	808b63c <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 808b63a:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
 808b63c:	2102      	movs	r1, #2
 808b63e:	4628      	mov	r0, r5
 808b640:	f7fe ffe2 	bl	808a608 <mbedtls_ssl_send_alert_message>
 808b644:	e762      	b.n	808b50c <mbedtls_ssl_parse_certificate+0xa4>
 808b646:	2000      	movs	r0, #0
 808b648:	e006      	b.n	808b658 <mbedtls_ssl_parse_certificate+0x1f0>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 808b64a:	4b08      	ldr	r3, [pc, #32]	; (808b66c <mbedtls_ssl_parse_certificate+0x204>)
 808b64c:	4805      	ldr	r0, [pc, #20]	; (808b664 <mbedtls_ssl_parse_certificate+0x1fc>)
 808b64e:	2f02      	cmp	r7, #2
 808b650:	bf14      	ite	ne
 808b652:	4604      	movne	r4, r0
 808b654:	461c      	moveq	r4, r3
 808b656:	e7d5      	b.n	808b604 <mbedtls_ssl_parse_certificate+0x19c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
 808b658:	b005      	add	sp, #20
 808b65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808b65e:	bf00      	nop
 808b660:	ffff8900 	.word	0xffff8900
 808b664:	ffff8600 	.word	0xffff8600
 808b668:	ffff8100 	.word	0xffff8100
 808b66c:	ffff8980 	.word	0xffff8980
 808b670:	ffffd9d2 	.word	0xffffd9d2

0808b674 <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808b674:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 808b676:	7059      	strb	r1, [r3, #1]
 808b678:	4770      	bx	lr

0808b67a <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 808b67a:	781a      	ldrb	r2, [r3, #0]
 808b67c:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 808b67e:	785b      	ldrb	r3, [r3, #1]
 808b680:	600b      	str	r3, [r1, #0]
 808b682:	4770      	bx	lr

0808b684 <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808b684:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 808b686:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b688:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808b68a:	461c      	mov	r4, r3
 808b68c:	4284      	cmp	r4, r0
 808b68e:	d016      	beq.n	808b6be <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
 808b690:	f8d6 e000 	ldr.w	lr, [r6]
 808b694:	ebc3 050e 	rsb	r5, r3, lr
 808b698:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 808b69a:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808b69e:	3401      	adds	r4, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
 808b6a0:	42bd      	cmp	r5, r7
 808b6a2:	bf2c      	ite	cs
 808b6a4:	f04f 0c00 	movcs.w	ip, #0
 808b6a8:	f04f 0c01 	movcc.w	ip, #1
 808b6ac:	1bed      	subs	r5, r5, r7
 808b6ae:	4573      	cmp	r3, lr
 808b6b0:	bf94      	ite	ls
 808b6b2:	4663      	movls	r3, ip
 808b6b4:	f10c 0301 	addhi.w	r3, ip, #1
 808b6b8:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808b6bc:	e7e6      	b.n	808b68c <_ZL11mpi_sub_hlpjPmS_+0x8>
 808b6be:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 808b6c2:	b143      	cbz	r3, 808b6d6 <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
 808b6c4:	6811      	ldr	r1, [r2, #0]
 808b6c6:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 808b6c8:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
 808b6ca:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 808b6ce:	bf94      	ite	ls
 808b6d0:	2300      	movls	r3, #0
 808b6d2:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 808b6d4:	e7f5      	b.n	808b6c2 <_ZL11mpi_sub_hlpjPmS_+0x3e>
 808b6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b6d8 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 808b6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b6dc:	460d      	mov	r5, r1
 808b6de:	4614      	mov	r4, r2
 808b6e0:	4686      	mov	lr, r0
    mbedtls_mpi_uint c = 0, t = 0;
 808b6e2:	f04f 0c00 	mov.w	ip, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808b6e6:	f1be 0f0f 	cmp.w	lr, #15
 808b6ea:	f105 0540 	add.w	r5, r5, #64	; 0x40
 808b6ee:	f104 0440 	add.w	r4, r4, #64	; 0x40
 808b6f2:	f240 811e 	bls.w	808b932 <_ZL11mpi_mul_hlpjPmS_m+0x25a>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b6f6:	f855 6c40 	ldr.w	r6, [r5, #-64]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808b6fa:	f1ae 0e10 	sub.w	lr, lr, #16
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b6fe:	fba6 9a03 	umull	r9, sl, r6, r3
 808b702:	f854 6c40 	ldr.w	r6, [r4, #-64]
 808b706:	eb1c 0c09 	adds.w	ip, ip, r9
 808b70a:	bf2c      	ite	cs
 808b70c:	f04f 0801 	movcs.w	r8, #1
 808b710:	f04f 0800 	movcc.w	r8, #0
 808b714:	eb1c 0606 	adds.w	r6, ip, r6
 808b718:	f844 6c40 	str.w	r6, [r4, #-64]
 808b71c:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 808b720:	eb48 080a 	adc.w	r8, r8, sl
 808b724:	fba3 9a06 	umull	r9, sl, r3, r6
 808b728:	f854 6c3c 	ldr.w	r6, [r4, #-60]
 808b72c:	eb18 0809 	adds.w	r8, r8, r9
 808b730:	bf2c      	ite	cs
 808b732:	f04f 0c01 	movcs.w	ip, #1
 808b736:	f04f 0c00 	movcc.w	ip, #0
 808b73a:	eb18 0606 	adds.w	r6, r8, r6
 808b73e:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
 808b742:	f855 7c38 	ldr.w	r7, [r5, #-56]
 808b746:	f854 6c38 	ldr.w	r6, [r4, #-56]
 808b74a:	fba3 8907 	umull	r8, r9, r3, r7
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b74e:	eb4c 0c0a 	adc.w	ip, ip, sl
        MULADDC_CORE   MULADDC_CORE
 808b752:	eb1c 0c08 	adds.w	ip, ip, r8
 808b756:	bf2c      	ite	cs
 808b758:	2701      	movcs	r7, #1
 808b75a:	2700      	movcc	r7, #0
 808b75c:	eb1c 0606 	adds.w	r6, ip, r6
 808b760:	f844 6c38 	str.w	r6, [r4, #-56]
 808b764:	f855 6c34 	ldr.w	r6, [r5, #-52]
 808b768:	eb47 0709 	adc.w	r7, r7, r9
 808b76c:	fba3 8906 	umull	r8, r9, r3, r6
 808b770:	f854 6c34 	ldr.w	r6, [r4, #-52]
 808b774:	eb17 0708 	adds.w	r7, r7, r8
 808b778:	bf2c      	ite	cs
 808b77a:	f04f 0c01 	movcs.w	ip, #1
 808b77e:	f04f 0c00 	movcc.w	ip, #0
 808b782:	19be      	adds	r6, r7, r6
 808b784:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
 808b788:	f855 7c30 	ldr.w	r7, [r5, #-48]
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b78c:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b790:	fba3 8907 	umull	r8, r9, r3, r7
 808b794:	f854 6c30 	ldr.w	r6, [r4, #-48]
 808b798:	eb1c 0c08 	adds.w	ip, ip, r8
 808b79c:	bf2c      	ite	cs
 808b79e:	2701      	movcs	r7, #1
 808b7a0:	2700      	movcc	r7, #0
 808b7a2:	eb1c 0606 	adds.w	r6, ip, r6
 808b7a6:	f844 6c30 	str.w	r6, [r4, #-48]
 808b7aa:	f855 6c2c 	ldr.w	r6, [r5, #-44]
 808b7ae:	eb47 0709 	adc.w	r7, r7, r9
 808b7b2:	fba3 8906 	umull	r8, r9, r3, r6
 808b7b6:	f854 6c2c 	ldr.w	r6, [r4, #-44]
 808b7ba:	eb17 0708 	adds.w	r7, r7, r8
 808b7be:	bf2c      	ite	cs
 808b7c0:	f04f 0c01 	movcs.w	ip, #1
 808b7c4:	f04f 0c00 	movcc.w	ip, #0
 808b7c8:	19be      	adds	r6, r7, r6
 808b7ca:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
 808b7ce:	f855 7c28 	ldr.w	r7, [r5, #-40]
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b7d2:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b7d6:	fba3 8907 	umull	r8, r9, r3, r7
 808b7da:	f854 6c28 	ldr.w	r6, [r4, #-40]
 808b7de:	eb1c 0c08 	adds.w	ip, ip, r8
 808b7e2:	bf2c      	ite	cs
 808b7e4:	2701      	movcs	r7, #1
 808b7e6:	2700      	movcc	r7, #0
 808b7e8:	eb1c 0606 	adds.w	r6, ip, r6
 808b7ec:	f844 6c28 	str.w	r6, [r4, #-40]
 808b7f0:	f855 6c24 	ldr.w	r6, [r5, #-36]
 808b7f4:	eb47 0709 	adc.w	r7, r7, r9
 808b7f8:	fba3 8906 	umull	r8, r9, r3, r6
 808b7fc:	f854 6c24 	ldr.w	r6, [r4, #-36]
 808b800:	eb17 0708 	adds.w	r7, r7, r8
 808b804:	bf2c      	ite	cs
 808b806:	f04f 0c01 	movcs.w	ip, #1
 808b80a:	f04f 0c00 	movcc.w	ip, #0
 808b80e:	19be      	adds	r6, r7, r6
 808b810:	f844 6c24 	str.w	r6, [r4, #-36]

        MULADDC_CORE   MULADDC_CORE
 808b814:	f855 7c20 	ldr.w	r7, [r5, #-32]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b818:	eb4c 0c09 	adc.w	ip, ip, r9

        MULADDC_CORE   MULADDC_CORE
 808b81c:	fba3 8907 	umull	r8, r9, r3, r7
 808b820:	f854 6c20 	ldr.w	r6, [r4, #-32]
 808b824:	eb1c 0c08 	adds.w	ip, ip, r8
 808b828:	bf2c      	ite	cs
 808b82a:	2701      	movcs	r7, #1
 808b82c:	2700      	movcc	r7, #0
 808b82e:	eb1c 0606 	adds.w	r6, ip, r6
 808b832:	f844 6c20 	str.w	r6, [r4, #-32]
 808b836:	f855 6c1c 	ldr.w	r6, [r5, #-28]
 808b83a:	eb47 0709 	adc.w	r7, r7, r9
 808b83e:	fba3 8906 	umull	r8, r9, r3, r6
 808b842:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 808b846:	eb17 0708 	adds.w	r7, r7, r8
 808b84a:	bf2c      	ite	cs
 808b84c:	f04f 0c01 	movcs.w	ip, #1
 808b850:	f04f 0c00 	movcc.w	ip, #0
 808b854:	19be      	adds	r6, r7, r6
 808b856:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
 808b85a:	f855 7c18 	ldr.w	r7, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 808b85e:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b862:	fba3 8907 	umull	r8, r9, r3, r7
 808b866:	f854 6c18 	ldr.w	r6, [r4, #-24]
 808b86a:	eb1c 0c08 	adds.w	ip, ip, r8
 808b86e:	bf2c      	ite	cs
 808b870:	2701      	movcs	r7, #1
 808b872:	2700      	movcc	r7, #0
 808b874:	eb1c 0606 	adds.w	r6, ip, r6
 808b878:	f844 6c18 	str.w	r6, [r4, #-24]
 808b87c:	f855 6c14 	ldr.w	r6, [r5, #-20]
 808b880:	eb47 0709 	adc.w	r7, r7, r9
 808b884:	fba3 8906 	umull	r8, r9, r3, r6
 808b888:	f854 6c14 	ldr.w	r6, [r4, #-20]
 808b88c:	eb17 0708 	adds.w	r7, r7, r8
 808b890:	bf2c      	ite	cs
 808b892:	f04f 0c01 	movcs.w	ip, #1
 808b896:	f04f 0c00 	movcc.w	ip, #0
 808b89a:	19be      	adds	r6, r7, r6
 808b89c:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
 808b8a0:	f855 7c10 	ldr.w	r7, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b8a4:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b8a8:	fba3 8907 	umull	r8, r9, r3, r7
 808b8ac:	f854 6c10 	ldr.w	r6, [r4, #-16]
 808b8b0:	eb1c 0c08 	adds.w	ip, ip, r8
 808b8b4:	bf2c      	ite	cs
 808b8b6:	2701      	movcs	r7, #1
 808b8b8:	2700      	movcc	r7, #0
 808b8ba:	eb1c 0606 	adds.w	r6, ip, r6
 808b8be:	f844 6c10 	str.w	r6, [r4, #-16]
 808b8c2:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 808b8c6:	eb47 0709 	adc.w	r7, r7, r9
 808b8ca:	fba3 8906 	umull	r8, r9, r3, r6
 808b8ce:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 808b8d2:	eb17 0708 	adds.w	r7, r7, r8
 808b8d6:	bf2c      	ite	cs
 808b8d8:	f04f 0c01 	movcs.w	ip, #1
 808b8dc:	f04f 0c00 	movcc.w	ip, #0
 808b8e0:	19be      	adds	r6, r7, r6
 808b8e2:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
 808b8e6:	f855 7c08 	ldr.w	r7, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b8ea:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b8ee:	fba3 8907 	umull	r8, r9, r3, r7
 808b8f2:	f854 6c08 	ldr.w	r6, [r4, #-8]
 808b8f6:	eb1c 0c08 	adds.w	ip, ip, r8
 808b8fa:	bf2c      	ite	cs
 808b8fc:	2701      	movcs	r7, #1
 808b8fe:	2700      	movcc	r7, #0
 808b900:	eb1c 0606 	adds.w	r6, ip, r6
 808b904:	f844 6c08 	str.w	r6, [r4, #-8]
 808b908:	f855 6c04 	ldr.w	r6, [r5, #-4]
 808b90c:	eb47 0709 	adc.w	r7, r7, r9
 808b910:	fba3 8906 	umull	r8, r9, r3, r6
 808b914:	f854 6c04 	ldr.w	r6, [r4, #-4]
 808b918:	eb17 0708 	adds.w	r7, r7, r8
 808b91c:	bf2c      	ite	cs
 808b91e:	f04f 0c01 	movcs.w	ip, #1
 808b922:	f04f 0c00 	movcc.w	ip, #0
 808b926:	19be      	adds	r6, r7, r6
 808b928:	eb4c 0c09 	adc.w	ip, ip, r9
 808b92c:	f844 6c04 	str.w	r6, [r4, #-4]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808b930:	e6d9      	b.n	808b6e6 <_ZL11mpi_mul_hlpjPmS_m+0xe>
 808b932:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 808b936:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 808b93a:	2807      	cmp	r0, #7
 808b93c:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 808b940:	eb01 050e 	add.w	r5, r1, lr
 808b944:	eb02 040e 	add.w	r4, r2, lr
 808b948:	d966      	bls.n	808ba18 <_ZL11mpi_mul_hlpjPmS_m+0x340>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b94a:	f851 600e 	ldr.w	r6, [r1, lr]
 808b94e:	fba6 7803 	umull	r7, r8, r6, r3
 808b952:	f852 600e 	ldr.w	r6, [r2, lr]
 808b956:	eb1c 0c07 	adds.w	ip, ip, r7
 808b95a:	bf2c      	ite	cs
 808b95c:	2101      	movcs	r1, #1
 808b95e:	2100      	movcc	r1, #0
 808b960:	eb1c 0606 	adds.w	r6, ip, r6
 808b964:	f842 600e 	str.w	r6, [r2, lr]
 808b968:	686e      	ldr	r6, [r5, #4]
 808b96a:	eb41 0108 	adc.w	r1, r1, r8
 808b96e:	fba3 7806 	umull	r7, r8, r3, r6
 808b972:	6866      	ldr	r6, [r4, #4]
 808b974:	19ca      	adds	r2, r1, r7
 808b976:	bf2c      	ite	cs
 808b978:	2101      	movcs	r1, #1
 808b97a:	2100      	movcc	r1, #0
 808b97c:	1992      	adds	r2, r2, r6
 808b97e:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 808b980:	68ae      	ldr	r6, [r5, #8]
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b982:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 808b986:	fba3 7806 	umull	r7, r8, r3, r6
 808b98a:	68a6      	ldr	r6, [r4, #8]
 808b98c:	19c9      	adds	r1, r1, r7
 808b98e:	bf2c      	ite	cs
 808b990:	2201      	movcs	r2, #1
 808b992:	2200      	movcc	r2, #0
 808b994:	1989      	adds	r1, r1, r6
 808b996:	60a1      	str	r1, [r4, #8]
 808b998:	68ee      	ldr	r6, [r5, #12]
 808b99a:	eb42 0208 	adc.w	r2, r2, r8
 808b99e:	fba3 7806 	umull	r7, r8, r3, r6
 808b9a2:	68e6      	ldr	r6, [r4, #12]
 808b9a4:	19d2      	adds	r2, r2, r7
 808b9a6:	bf2c      	ite	cs
 808b9a8:	2101      	movcs	r1, #1
 808b9aa:	2100      	movcc	r1, #0
 808b9ac:	1992      	adds	r2, r2, r6
 808b9ae:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 808b9b0:	692e      	ldr	r6, [r5, #16]

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b9b2:	eb41 0108 	adc.w	r1, r1, r8

        MULADDC_CORE   MULADDC_CORE
 808b9b6:	fba3 7806 	umull	r7, r8, r3, r6
 808b9ba:	6926      	ldr	r6, [r4, #16]
 808b9bc:	19c9      	adds	r1, r1, r7
 808b9be:	bf2c      	ite	cs
 808b9c0:	2201      	movcs	r2, #1
 808b9c2:	2200      	movcc	r2, #0
 808b9c4:	1989      	adds	r1, r1, r6
 808b9c6:	6121      	str	r1, [r4, #16]
 808b9c8:	696e      	ldr	r6, [r5, #20]
 808b9ca:	eb42 0208 	adc.w	r2, r2, r8
 808b9ce:	fba3 7806 	umull	r7, r8, r3, r6
 808b9d2:	6966      	ldr	r6, [r4, #20]
 808b9d4:	19d2      	adds	r2, r2, r7
 808b9d6:	bf2c      	ite	cs
 808b9d8:	2101      	movcs	r1, #1
 808b9da:	2100      	movcc	r1, #0
 808b9dc:	1992      	adds	r2, r2, r6
 808b9de:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 808b9e0:	69ae      	ldr	r6, [r5, #24]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 808b9e2:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 808b9e6:	fba3 7806 	umull	r7, r8, r3, r6
 808b9ea:	69a6      	ldr	r6, [r4, #24]
 808b9ec:	19c9      	adds	r1, r1, r7
 808b9ee:	bf2c      	ite	cs
 808b9f0:	2201      	movcs	r2, #1
 808b9f2:	2200      	movcc	r2, #0
 808b9f4:	1989      	adds	r1, r1, r6
 808b9f6:	61a1      	str	r1, [r4, #24]
 808b9f8:	69ee      	ldr	r6, [r5, #28]
 808b9fa:	69e1      	ldr	r1, [r4, #28]
 808b9fc:	fba3 6706 	umull	r6, r7, r3, r6
 808ba00:	eb42 0208 	adc.w	r2, r2, r8
 808ba04:	1992      	adds	r2, r2, r6
 808ba06:	bf2c      	ite	cs
 808ba08:	f04f 0c01 	movcs.w	ip, #1
 808ba0c:	f04f 0c00 	movcc.w	ip, #0
 808ba10:	1852      	adds	r2, r2, r1
 808ba12:	eb4c 0c07 	adc.w	ip, ip, r7
 808ba16:	61e2      	str	r2, [r4, #28]
 808ba18:	08c2      	lsrs	r2, r0, #3
 808ba1a:	0151      	lsls	r1, r2, #5
 808ba1c:	440c      	add	r4, r1
 808ba1e:	440d      	add	r5, r1
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    mbedtls_mpi_uint c = 0, t = 0;
 808ba20:	4621      	mov	r1, r4
 808ba22:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 808ba26:	0080      	lsls	r0, r0, #2
 808ba28:	eb05 0e00 	add.w	lr, r5, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 808ba2c:	4575      	cmp	r5, lr
 808ba2e:	d011      	beq.n	808ba54 <_ZL11mpi_mul_hlpjPmS_m+0x37c>
    {
        MULADDC_INIT
        MULADDC_CORE
 808ba30:	f855 6b04 	ldr.w	r6, [r5], #4
 808ba34:	fba6 7803 	umull	r7, r8, r6, r3
 808ba38:	680e      	ldr	r6, [r1, #0]
 808ba3a:	eb1c 0207 	adds.w	r2, ip, r7
 808ba3e:	bf2c      	ite	cs
 808ba40:	f04f 0c01 	movcs.w	ip, #1
 808ba44:	f04f 0c00 	movcc.w	ip, #0
 808ba48:	1992      	adds	r2, r2, r6
 808ba4a:	eb4c 0c08 	adc.w	ip, ip, r8
 808ba4e:	f841 2b04 	str.w	r2, [r1], #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 808ba52:	e7eb      	b.n	808ba2c <_ZL11mpi_mul_hlpjPmS_m+0x354>
 808ba54:	4404      	add	r4, r0
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 808ba56:	6823      	ldr	r3, [r4, #0]
 808ba58:	4463      	add	r3, ip
 808ba5a:	459c      	cmp	ip, r3
 808ba5c:	f844 3b04 	str.w	r3, [r4], #4
 808ba60:	bf8c      	ite	hi
 808ba62:	f04f 0c01 	movhi.w	ip, #1
 808ba66:	f04f 0c00 	movls.w	ip, #0
    }
    while( c != 0 );
 808ba6a:	d8f4      	bhi.n	808ba56 <_ZL11mpi_mul_hlpjPmS_m+0x37e>
}
 808ba6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808ba70 <mbedtls_mpi_init>:
/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
 808ba70:	b120      	cbz	r0, 808ba7c <mbedtls_mpi_init+0xc>
        return;

    X->s = 1;
 808ba72:	2301      	movs	r3, #1
 808ba74:	6003      	str	r3, [r0, #0]
    X->n = 0;
 808ba76:	2300      	movs	r3, #0
 808ba78:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 808ba7a:	6083      	str	r3, [r0, #8]
 808ba7c:	4770      	bx	lr

0808ba7e <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 808ba7e:	b510      	push	{r4, lr}
    if( X == NULL )
 808ba80:	4604      	mov	r4, r0
 808ba82:	b188      	cbz	r0, 808baa8 <mbedtls_mpi_free+0x2a>
        return;

    if( X->p != NULL )
 808ba84:	6883      	ldr	r3, [r0, #8]
 808ba86:	b153      	cbz	r3, 808ba9e <mbedtls_mpi_free+0x20>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 808ba88:	6842      	ldr	r2, [r0, #4]
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 808ba8a:	2100      	movs	r1, #0
 808ba8c:	f112 32ff 	adds.w	r2, r2, #4294967295
 808ba90:	d302      	bcc.n	808ba98 <mbedtls_mpi_free+0x1a>
 808ba92:	6019      	str	r1, [r3, #0]
 808ba94:	3304      	adds	r3, #4
 808ba96:	e7f9      	b.n	808ba8c <mbedtls_mpi_free+0xe>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
 808ba98:	68a0      	ldr	r0, [r4, #8]
 808ba9a:	f005 fdf5 	bl	8091688 <free>
    }

    X->s = 1;
 808ba9e:	2301      	movs	r3, #1
 808baa0:	6023      	str	r3, [r4, #0]
    X->n = 0;
 808baa2:	2300      	movs	r3, #0
 808baa4:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 808baa6:	60a3      	str	r3, [r4, #8]
 808baa8:	bd10      	pop	{r4, pc}

0808baaa <mbedtls_mpi_grow>:
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 808baaa:	f242 7310 	movw	r3, #10000	; 0x2710
 808baae:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 808bab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808bab4:	4604      	mov	r4, r0
 808bab6:	460f      	mov	r7, r1
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 808bab8:	d903      	bls.n	808bac2 <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 808baba:	f06f 000f 	mvn.w	r0, #15
 808babe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
 808bac2:	6846      	ldr	r6, [r0, #4]
 808bac4:	42b1      	cmp	r1, r6
 808bac6:	d919      	bls.n	808bafc <mbedtls_mpi_grow+0x52>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 808bac8:	2104      	movs	r1, #4
 808baca:	4638      	mov	r0, r7
 808bacc:	f007 fc24 	bl	8093318 <calloc>
 808bad0:	4680      	mov	r8, r0
 808bad2:	2800      	cmp	r0, #0
 808bad4:	d0f1      	beq.n	808baba <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
 808bad6:	68a5      	ldr	r5, [r4, #8]
 808bad8:	b16d      	cbz	r5, 808baf6 <mbedtls_mpi_grow+0x4c>
        {
            memcpy( p, X->p, X->n * ciL );
 808bada:	00b2      	lsls	r2, r6, #2
 808badc:	4629      	mov	r1, r5
 808bade:	f007 fd38 	bl	8093552 <memcpy>
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 808bae2:	2300      	movs	r3, #0
 808bae4:	f116 36ff 	adds.w	r6, r6, #4294967295
 808bae8:	d302      	bcc.n	808baf0 <mbedtls_mpi_grow+0x46>
 808baea:	602b      	str	r3, [r5, #0]
 808baec:	3504      	adds	r5, #4
 808baee:	e7f9      	b.n	808bae4 <mbedtls_mpi_grow+0x3a>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
 808baf0:	68a0      	ldr	r0, [r4, #8]
 808baf2:	f005 fdc9 	bl	8091688 <free>
        }

        X->n = nblimbs;
 808baf6:	6067      	str	r7, [r4, #4]
        X->p = p;
 808baf8:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
 808bafc:	2000      	movs	r0, #0
}
 808bafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808bb02 <mbedtls_mpi_copy>:
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    int ret;
    size_t i;

    if( X == Y )
 808bb02:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808bb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808bb06:	4606      	mov	r6, r0
 808bb08:	460f      	mov	r7, r1
    int ret;
    size_t i;

    if( X == Y )
 808bb0a:	d020      	beq.n	808bb4e <mbedtls_mpi_copy+0x4c>
        return( 0 );

    if( Y->p == NULL )
 808bb0c:	688c      	ldr	r4, [r1, #8]
 808bb0e:	b914      	cbnz	r4, 808bb16 <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
 808bb10:	f7ff ffb5 	bl	808ba7e <mbedtls_mpi_free>
 808bb14:	e01d      	b.n	808bb52 <mbedtls_mpi_copy+0x50>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
 808bb16:	6849      	ldr	r1, [r1, #4]
 808bb18:	3901      	subs	r1, #1
 808bb1a:	b119      	cbz	r1, 808bb24 <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
 808bb1c:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 808bb20:	2b00      	cmp	r3, #0
 808bb22:	d0f9      	beq.n	808bb18 <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;
 808bb24:	683b      	ldr	r3, [r7, #0]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
 808bb26:	1c4d      	adds	r5, r1, #1

    X->s = Y->s;
 808bb28:	6033      	str	r3, [r6, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 808bb2a:	4629      	mov	r1, r5
 808bb2c:	4630      	mov	r0, r6
 808bb2e:	f7ff ffbc 	bl	808baaa <mbedtls_mpi_grow>
 808bb32:	4604      	mov	r4, r0
 808bb34:	b968      	cbnz	r0, 808bb52 <mbedtls_mpi_copy+0x50>

    memset( X->p, 0, X->n * ciL );
 808bb36:	6872      	ldr	r2, [r6, #4]
 808bb38:	4601      	mov	r1, r0
 808bb3a:	0092      	lsls	r2, r2, #2
 808bb3c:	68b0      	ldr	r0, [r6, #8]
 808bb3e:	f007 fd2e 	bl	809359e <memset>
    memcpy( X->p, Y->p, i * ciL );
 808bb42:	00aa      	lsls	r2, r5, #2
 808bb44:	68b9      	ldr	r1, [r7, #8]
 808bb46:	68b0      	ldr	r0, [r6, #8]
 808bb48:	f007 fd03 	bl	8093552 <memcpy>
 808bb4c:	e001      	b.n	808bb52 <mbedtls_mpi_copy+0x50>
{
    int ret;
    size_t i;

    if( X == Y )
        return( 0 );
 808bb4e:	2000      	movs	r0, #0
 808bb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808bb52:	4620      	mov	r0, r4
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
 808bb54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808bb56 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808bb56:	b570      	push	{r4, r5, r6, lr}
 808bb58:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 808bb5a:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808bb5c:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 808bb5e:	f7ff ffa4 	bl	808baaa <mbedtls_mpi_grow>
 808bb62:	4605      	mov	r5, r0
 808bb64:	b988      	cbnz	r0, 808bb8a <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 808bb66:	6862      	ldr	r2, [r4, #4]
 808bb68:	4601      	mov	r1, r0
 808bb6a:	0092      	lsls	r2, r2, #2
 808bb6c:	68a0      	ldr	r0, [r4, #8]
 808bb6e:	f007 fd16 	bl	809359e <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 808bb72:	68a3      	ldr	r3, [r4, #8]
 808bb74:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 808bb78:	2e00      	cmp	r6, #0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
 808bb7a:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 808bb7e:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 808bb80:	bfb4      	ite	lt
 808bb82:	f04f 33ff 	movlt.w	r3, #4294967295
 808bb86:	2301      	movge	r3, #1
 808bb88:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 808bb8a:	4628      	mov	r0, r5
 808bb8c:	bd70      	pop	{r4, r5, r6, pc}

0808bb8e <mbedtls_mpi_get_bit>:
/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
 808bb8e:	6843      	ldr	r3, [r0, #4]
 808bb90:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 808bb94:	bf3f      	itttt	cc
 808bb96:	6883      	ldrcc	r3, [r0, #8]
 808bb98:	094a      	lsrcc	r2, r1, #5
 808bb9a:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
 808bb9e:	f001 001f 	andcc.w	r0, r1, #31
 808bba2:	bf3a      	itte	cc
 808bba4:	fa23 f000 	lsrcc.w	r0, r3, r0
 808bba8:	f000 0001 	andcc.w	r0, r0, #1
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
        return( 0 );
 808bbac:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
 808bbae:	4770      	bx	lr

0808bbb0 <mbedtls_mpi_lsb>:
/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
 808bbb0:	2300      	movs	r3, #0

    for( i = 0; i < X->n; i++ )
 808bbb2:	461a      	mov	r2, r3

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 808bbb4:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 808bbb6:	6844      	ldr	r4, [r0, #4]
 808bbb8:	42a2      	cmp	r2, r4
 808bbba:	d00e      	beq.n	808bbda <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 808bbbc:	6881      	ldr	r1, [r0, #8]
 808bbbe:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 808bbc2:	2100      	movs	r1, #0
 808bbc4:	fa25 f601 	lsr.w	r6, r5, r1
 808bbc8:	07f6      	lsls	r6, r6, #31
 808bbca:	d408      	bmi.n	808bbde <mbedtls_mpi_lsb+0x2e>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
 808bbcc:	3101      	adds	r1, #1
 808bbce:	2920      	cmp	r1, #32
 808bbd0:	f103 0301 	add.w	r3, r3, #1
 808bbd4:	d1f6      	bne.n	808bbc4 <mbedtls_mpi_lsb+0x14>
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 808bbd6:	3201      	adds	r2, #1
 808bbd8:	e7ee      	b.n	808bbb8 <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
 808bbda:	2000      	movs	r0, #0
 808bbdc:	bd70      	pop	{r4, r5, r6, pc}
 808bbde:	4618      	mov	r0, r3
}
 808bbe0:	bd70      	pop	{r4, r5, r6, pc}

0808bbe2 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 808bbe2:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
 808bbe4:	6843      	ldr	r3, [r0, #4]
 808bbe6:	b1d3      	cbz	r3, 808bc1e <mbedtls_mpi_bitlen+0x3c>
 808bbe8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808bbec:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808bbee:	1e59      	subs	r1, r3, #1
 808bbf0:	0092      	lsls	r2, r2, #2
 808bbf2:	6883      	ldr	r3, [r0, #8]
 808bbf4:	b121      	cbz	r1, 808bc00 <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
 808bbf6:	589c      	ldr	r4, [r3, r2]
 808bbf8:	3a04      	subs	r2, #4
 808bbfa:	b90c      	cbnz	r4, 808bc00 <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808bbfc:	3901      	subs	r1, #1
 808bbfe:	e7f8      	b.n	808bbf2 <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
 808bc00:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 808bc04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
 808bc08:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
 808bc0a:	4210      	tst	r0, r2
 808bc0c:	d104      	bne.n	808bc18 <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808bc0e:	3301      	adds	r3, #1
 808bc10:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
 808bc12:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808bc16:	d1f8      	bne.n	808bc0a <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
 808bc18:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
 808bc1c:	3320      	adds	r3, #32
}
 808bc1e:	4618      	mov	r0, r3
 808bc20:	bd10      	pop	{r4, pc}

0808bc22 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 808bc22:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 808bc24:	f7ff ffdd 	bl	808bbe2 <mbedtls_mpi_bitlen>
 808bc28:	3007      	adds	r0, #7
}
 808bc2a:	08c0      	lsrs	r0, r0, #3
 808bc2c:	bd08      	pop	{r3, pc}

0808bc2e <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808bc2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808bc30:	460d      	mov	r5, r1
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808bc32:	f012 0103 	ands.w	r1, r2, #3
 808bc36:	bf18      	it	ne
 808bc38:	2101      	movne	r1, #1

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808bc3a:	6843      	ldr	r3, [r0, #4]
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808bc3c:	eb01 0492 	add.w	r4, r1, r2, lsr #2

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808bc40:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808bc42:	4606      	mov	r6, r0
 808bc44:	4617      	mov	r7, r2
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808bc46:	d105      	bne.n	808bc54 <mbedtls_mpi_read_binary+0x26>
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808bc48:	2100      	movs	r1, #0
 808bc4a:	4630      	mov	r0, r6
 808bc4c:	f7ff ff83 	bl	808bb56 <mbedtls_mpi_lset>
 808bc50:	b160      	cbz	r0, 808bc6c <mbedtls_mpi_read_binary+0x3e>
 808bc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
 808bc54:	f7ff ff13 	bl	808ba7e <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 808bc58:	4630      	mov	r0, r6
 808bc5a:	f7ff ff09 	bl	808ba70 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 808bc5e:	4621      	mov	r1, r4
 808bc60:	4630      	mov	r0, r6
 808bc62:	f7ff ff22 	bl	808baaa <mbedtls_mpi_grow>
 808bc66:	2800      	cmp	r0, #0
 808bc68:	d0ee      	beq.n	808bc48 <mbedtls_mpi_read_binary+0x1a>
 808bc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808bc6c:	4603      	mov	r3, r0
 808bc6e:	19e9      	adds	r1, r5, r7

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808bc70:	42bb      	cmp	r3, r7
 808bc72:	d010      	beq.n	808bc96 <mbedtls_mpi_read_binary+0x68>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808bc74:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 808bc78:	68b2      	ldr	r2, [r6, #8]
 808bc7a:	00dc      	lsls	r4, r3, #3
 808bc7c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 808bc80:	f004 0418 	and.w	r4, r4, #24
 808bc84:	fa05 f404 	lsl.w	r4, r5, r4
 808bc88:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808bc8c:	3301      	adds	r3, #1
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808bc8e:	432c      	orrs	r4, r5
 808bc90:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808bc94:	e7ec      	b.n	808bc70 <mbedtls_mpi_read_binary+0x42>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);

cleanup:

    return( ret );
}
 808bc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808bc98 <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
 808bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808bc9a:	4614      	mov	r4, r2
 808bc9c:	4605      	mov	r5, r0
 808bc9e:	460f      	mov	r7, r1
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808bca0:	f7ff ffbf 	bl	808bc22 <mbedtls_mpi_size>

    if( buflen < n )
 808bca4:	42a0      	cmp	r0, r4
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808bca6:	4606      	mov	r6, r0

    if( buflen < n )
 808bca8:	d814      	bhi.n	808bcd4 <mbedtls_mpi_write_binary+0x3c>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );
 808bcaa:	4622      	mov	r2, r4
 808bcac:	2100      	movs	r1, #0
 808bcae:	4638      	mov	r0, r7
 808bcb0:	f007 fc75 	bl	809359e <memset>
 808bcb4:	443c      	add	r4, r7

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808bcb6:	2300      	movs	r3, #0
 808bcb8:	42b3      	cmp	r3, r6
 808bcba:	d00e      	beq.n	808bcda <mbedtls_mpi_write_binary+0x42>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808bcbc:	68a8      	ldr	r0, [r5, #8]
 808bcbe:	00da      	lsls	r2, r3, #3
 808bcc0:	089f      	lsrs	r7, r3, #2
 808bcc2:	f002 0118 	and.w	r1, r2, #24
 808bcc6:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808bcca:	3301      	adds	r3, #1
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808bccc:	40ca      	lsrs	r2, r1
 808bcce:	f804 2d01 	strb.w	r2, [r4, #-1]!
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808bcd2:	e7f1      	b.n	808bcb8 <mbedtls_mpi_write_binary+0x20>
    size_t i, j, n;

    n = mbedtls_mpi_size( X );

    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 808bcd4:	f06f 0007 	mvn.w	r0, #7
 808bcd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );

    return( 0 );
 808bcda:	2000      	movs	r0, #0
}
 808bcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808bcde <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 808bcde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808bce0:	4604      	mov	r4, r0
 808bce2:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
 808bce4:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
 808bce6:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
 808bcea:	f7ff ff7a 	bl	808bbe2 <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
 808bcee:	6863      	ldr	r3, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
 808bcf0:	4428      	add	r0, r5

    if( X->n * biL < i )
 808bcf2:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 808bcf6:	d809      	bhi.n	808bd0c <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808bcf8:	b346      	cbz	r6, 808bd4c <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
 808bcfa:	6863      	ldr	r3, [r4, #4]
 808bcfc:	f06f 0103 	mvn.w	r1, #3
 808bd00:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808bd04:	3a01      	subs	r2, #1
 808bd06:	0092      	lsls	r2, r2, #2
 808bd08:	4371      	muls	r1, r6
 808bd0a:	e00b      	b.n	808bd24 <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 808bd0c:	f010 011f 	ands.w	r1, r0, #31
 808bd10:	bf18      	it	ne
 808bd12:	2101      	movne	r1, #1
 808bd14:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 808bd18:	4620      	mov	r0, r4
 808bd1a:	f7ff fec6 	bl	808baaa <mbedtls_mpi_grow>
 808bd1e:	2800      	cmp	r0, #0
 808bd20:	d0ea      	beq.n	808bcf8 <mbedtls_mpi_shift_l+0x1a>
 808bd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808bd24:	42b3      	cmp	r3, r6
 808bd26:	d906      	bls.n	808bd36 <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 808bd28:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808bd2a:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 808bd2c:	1885      	adds	r5, r0, r2
 808bd2e:	586d      	ldr	r5, [r5, r1]
 808bd30:	5085      	str	r5, [r0, r2]
 808bd32:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808bd34:	e7f6      	b.n	808bd24 <mbedtls_mpi_shift_l+0x46>
 808bd36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 808bd3a:	3b01      	subs	r3, #1
 808bd3c:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
 808bd3e:	2100      	movs	r1, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808bd40:	1d1a      	adds	r2, r3, #4
 808bd42:	d003      	beq.n	808bd4c <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
 808bd44:	68a2      	ldr	r2, [r4, #8]
 808bd46:	50d1      	str	r1, [r2, r3]
 808bd48:	3b04      	subs	r3, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808bd4a:	e7f9      	b.n	808bd40 <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808bd4c:	b90f      	cbnz	r7, 808bd52 <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
 808bd4e:	2000      	movs	r0, #0
 808bd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808bd52:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808bd54:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
 808bd56:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808bd5a:	6861      	ldr	r1, [r4, #4]
 808bd5c:	428e      	cmp	r6, r1
 808bd5e:	d2f6      	bcs.n	808bd4e <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
 808bd60:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808bd62:	3601      	adds	r6, #1
        {
            r1 = X->p[i] >> (biL - t1);
 808bd64:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
 808bd66:	fa01 f507 	lsl.w	r5, r1, r7
 808bd6a:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
 808bd6c:	68a0      	ldr	r0, [r4, #8]
 808bd6e:	58c5      	ldr	r5, [r0, r3]
 808bd70:	432a      	orrs	r2, r5
 808bd72:	50c2      	str	r2, [r0, r3]
 808bd74:	3304      	adds	r3, #4
            r0 = r1;
 808bd76:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808bd7a:	e7ee      	b.n	808bd5a <mbedtls_mpi_shift_l+0x7c>

0808bd7c <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 808bd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808bd7e:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
 808bd80:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808bd82:	429a      	cmp	r2, r3
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);
 808bd84:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808bd88:	d801      	bhi.n	808bd8e <mbedtls_mpi_shift_r+0x12>
 808bd8a:	d105      	bne.n	808bd98 <mbedtls_mpi_shift_r+0x1c>
 808bd8c:	b159      	cbz	r1, 808bda6 <mbedtls_mpi_shift_r+0x2a>
            r0 = r1;
        }
    }

    return( 0 );
}
 808bd8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
 808bd92:	2100      	movs	r1, #0
 808bd94:	f7ff bedf 	b.w	808bb56 <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808bd98:	b1d2      	cbz	r2, 808bdd0 <mbedtls_mpi_shift_r+0x54>
 808bd9a:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
 808bd9c:	6844      	ldr	r4, [r0, #4]
 808bd9e:	1aa4      	subs	r4, r4, r2
 808bda0:	42a3      	cmp	r3, r4
 808bda2:	d305      	bcc.n	808bdb0 <mbedtls_mpi_shift_r+0x34>
 808bda4:	e001      	b.n	808bdaa <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808bda6:	b35a      	cbz	r2, 808be00 <mbedtls_mpi_shift_r+0x84>
 808bda8:	460b      	mov	r3, r1
 808bdaa:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
 808bdac:	2500      	movs	r5, #0
 808bdae:	e007      	b.n	808bdc0 <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
 808bdb0:	6884      	ldr	r4, [r0, #8]
 808bdb2:	189d      	adds	r5, r3, r2
 808bdb4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 808bdb8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
 808bdbc:	3301      	adds	r3, #1
 808bdbe:	e7ed      	b.n	808bd9c <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808bdc0:	6844      	ldr	r4, [r0, #4]
 808bdc2:	42a3      	cmp	r3, r4
 808bdc4:	d204      	bcs.n	808bdd0 <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
 808bdc6:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808bdc8:	3301      	adds	r3, #1
            X->p[i] = 0;
 808bdca:	50a5      	str	r5, [r4, r2]
 808bdcc:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808bdce:	e7f7      	b.n	808bdc0 <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 808bdd0:	b1b1      	cbz	r1, 808be00 <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
 808bdd2:	6844      	ldr	r4, [r0, #4]
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 808bdd4:	2200      	movs	r2, #0
 808bdd6:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808bdda:	3b01      	subs	r3, #1
 808bddc:	009b      	lsls	r3, r3, #2
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
 808bdde:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808bde2:	b16c      	cbz	r4, 808be00 <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
 808bde4:	6886      	ldr	r6, [r0, #8]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808bde6:	3c01      	subs	r4, #1
        {
            r1 = X->p[i - 1] << (biL - v1);
 808bde8:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
 808bdea:	fa25 f701 	lsr.w	r7, r5, r1
 808bdee:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
 808bdf0:	6886      	ldr	r6, [r0, #8]
 808bdf2:	58f7      	ldr	r7, [r6, r3]
 808bdf4:	433a      	orrs	r2, r7
 808bdf6:	50f2      	str	r2, [r6, r3]
 808bdf8:	3b04      	subs	r3, #4
            r0 = r1;
 808bdfa:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808bdfe:	e7f0      	b.n	808bde2 <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
 808be00:	2000      	movs	r0, #0
 808be02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808be04 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808be04:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808be06:	6843      	ldr	r3, [r0, #4]
 808be08:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808be0c:	3a01      	subs	r2, #1
 808be0e:	0092      	lsls	r2, r2, #2
 808be10:	b12b      	cbz	r3, 808be1e <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
 808be12:	6884      	ldr	r4, [r0, #8]
 808be14:	58a4      	ldr	r4, [r4, r2]
 808be16:	3a04      	subs	r2, #4
 808be18:	b90c      	cbnz	r4, 808be1e <mbedtls_mpi_cmp_abs+0x1a>
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808be1a:	3b01      	subs	r3, #1
 808be1c:	e7f8      	b.n	808be10 <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808be1e:	684c      	ldr	r4, [r1, #4]
 808be20:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808be24:	3a01      	subs	r2, #1
 808be26:	0092      	lsls	r2, r2, #2
 808be28:	b1c4      	cbz	r4, 808be5c <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
 808be2a:	688d      	ldr	r5, [r1, #8]
 808be2c:	58ae      	ldr	r6, [r5, r2]
 808be2e:	3a04      	subs	r2, #4
 808be30:	b90e      	cbnz	r6, 808be36 <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808be32:	3c01      	subs	r4, #1
 808be34:	e7f8      	b.n	808be28 <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808be36:	429c      	cmp	r4, r3
 808be38:	d30b      	bcc.n	808be52 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 808be3a:	d913      	bls.n	808be64 <mbedtls_mpi_cmp_abs+0x60>
 808be3c:	e00b      	b.n	808be56 <mbedtls_mpi_cmp_abs+0x52>
 808be3e:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 808be42:	d308      	bcc.n	808be56 <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
 808be44:	3b01      	subs	r3, #1
 808be46:	b193      	cbz	r3, 808be6e <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 808be48:	6881      	ldr	r1, [r0, #8]
 808be4a:	588c      	ldr	r4, [r1, r2]
 808be4c:	58a9      	ldr	r1, [r5, r2]
 808be4e:	428c      	cmp	r4, r1
 808be50:	d9f5      	bls.n	808be3e <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808be52:	2001      	movs	r0, #1
 808be54:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 808be56:	f04f 30ff 	mov.w	r0, #4294967295
 808be5a:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
 808be5c:	1c18      	adds	r0, r3, #0
 808be5e:	bf18      	it	ne
 808be60:	2001      	movne	r0, #1
 808be62:	bd70      	pop	{r4, r5, r6, pc}
 808be64:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808be68:	3a01      	subs	r2, #1
 808be6a:	0092      	lsls	r2, r2, #2
 808be6c:	e7eb      	b.n	808be46 <mbedtls_mpi_cmp_abs+0x42>
 808be6e:	4618      	mov	r0, r3
 808be70:	bd70      	pop	{r4, r5, r6, pc}

0808be72 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808be72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808be76:	4616      	mov	r6, r2
 808be78:	b085      	sub	sp, #20
 808be7a:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808be7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808be7e:	4681      	mov	r9, r0
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808be80:	685a      	ldr	r2, [r3, #4]
 808be82:	6873      	ldr	r3, [r6, #4]
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808be84:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808be86:	3301      	adds	r3, #1
 808be88:	429a      	cmp	r2, r3
 808be8a:	d351      	bcc.n	808bf30 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
 808be8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808be8e:	6898      	ldr	r0, [r3, #8]
 808be90:	2800      	cmp	r0, #0
 808be92:	d04d      	beq.n	808bf30 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 808be94:	0092      	lsls	r2, r2, #2
 808be96:	2100      	movs	r1, #0
 808be98:	f007 fb81 	bl	809359e <memset>

    d = T->p;
 808be9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 808be9e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808bea2:	689b      	ldr	r3, [r3, #8]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808bea4:	f10a 0701 	add.w	r7, sl, #1
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808bea8:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
 808beaa:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808beae:	9d00      	ldr	r5, [sp, #0]
 808beb0:	4553      	cmp	r3, sl
 808beb2:	bf28      	it	cs
 808beb4:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808beb6:	00bf      	lsls	r7, r7, #2
 808beb8:	9302      	str	r3, [sp, #8]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808beba:	2400      	movs	r4, #0
 808bebc:	4554      	cmp	r4, sl
 808bebe:	f8d9 0008 	ldr.w	r0, [r9, #8]
 808bec2:	d01b      	beq.n	808befc <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808bec4:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 808bec8:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808becc:	682a      	ldr	r2, [r5, #0]
 808bece:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
 808bed0:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808bed2:	fb03 2308 	mla	r3, r3, r8, r2
 808bed6:	9a03      	ldr	r2, [sp, #12]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808bed8:	3401      	adds	r4, #1
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808beda:	4353      	muls	r3, r2

        mpi_mul_hlp( m, B->p, d, u0 );
 808bedc:	462a      	mov	r2, r5
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808bede:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
 808bee0:	4643      	mov	r3, r8
 808bee2:	f7ff fbf9 	bl	808b6d8 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
 808bee6:	9b01      	ldr	r3, [sp, #4]
 808bee8:	462a      	mov	r2, r5
 808beea:	68b1      	ldr	r1, [r6, #8]
 808beec:	4650      	mov	r0, sl
 808beee:	f7ff fbf3 	bl	808b6d8 <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
 808bef2:	f845 8b04 	str.w	r8, [r5], #4
 808bef6:	2300      	movs	r3, #0
 808bef8:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808befa:	e7df      	b.n	808bebc <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 808befc:	9b00      	ldr	r3, [sp, #0]
 808befe:	1f39      	subs	r1, r7, #4
 808bf00:	440b      	add	r3, r1
 808bf02:	463a      	mov	r2, r7
 808bf04:	4619      	mov	r1, r3
 808bf06:	f007 fb24 	bl	8093552 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 808bf0a:	4631      	mov	r1, r6
 808bf0c:	4648      	mov	r0, r9
 808bf0e:	f7ff ff79 	bl	808be04 <mbedtls_mpi_cmp_abs>
 808bf12:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808bf14:	bfb8      	it	lt
 808bf16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 808bf18:	4620      	mov	r0, r4
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
 808bf1a:	bfa7      	ittee	ge
 808bf1c:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 808bf20:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808bf22:	689a      	ldrlt	r2, [r3, #8]
 808bf24:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 808bf28:	f7ff fbac 	bl	808b684 <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
 808bf2c:	2000      	movs	r0, #0
 808bf2e:	e001      	b.n	808bf34 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808bf30:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
 808bf34:	b005      	add	sp, #20
 808bf36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808bf3a <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808bf3a:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808bf3c:	6843      	ldr	r3, [r0, #4]
 808bf3e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808bf42:	3a01      	subs	r2, #1
 808bf44:	0092      	lsls	r2, r2, #2
 808bf46:	b12b      	cbz	r3, 808bf54 <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
 808bf48:	6884      	ldr	r4, [r0, #8]
 808bf4a:	58a4      	ldr	r4, [r4, r2]
 808bf4c:	3a04      	subs	r2, #4
 808bf4e:	b90c      	cbnz	r4, 808bf54 <mbedtls_mpi_cmp_mpi+0x1a>
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808bf50:	3b01      	subs	r3, #1
 808bf52:	e7f8      	b.n	808bf46 <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808bf54:	684c      	ldr	r4, [r1, #4]
 808bf56:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808bf5a:	3a01      	subs	r2, #1
 808bf5c:	0092      	lsls	r2, r2, #2
 808bf5e:	b364      	cbz	r4, 808bfba <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
 808bf60:	688d      	ldr	r5, [r1, #8]
 808bf62:	58ae      	ldr	r6, [r5, r2]
 808bf64:	3a04      	subs	r2, #4
 808bf66:	b90e      	cbnz	r6, 808bf6c <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808bf68:	3c01      	subs	r4, #1
 808bf6a:	e7f8      	b.n	808bf5e <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
 808bf6c:	429c      	cmp	r4, r3
 808bf6e:	d201      	bcs.n	808bf74 <mbedtls_mpi_cmp_mpi+0x3a>
 808bf70:	6802      	ldr	r2, [r0, #0]
 808bf72:	e025      	b.n	808bfc0 <mbedtls_mpi_cmp_mpi+0x86>
 808bf74:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 808bf76:	d901      	bls.n	808bf7c <mbedtls_mpi_cmp_mpi+0x42>
 808bf78:	424a      	negs	r2, r1
 808bf7a:	e021      	b.n	808bfc0 <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808bf7c:	6802      	ldr	r2, [r0, #0]
 808bf7e:	2a00      	cmp	r2, #0
 808bf80:	dd01      	ble.n	808bf86 <mbedtls_mpi_cmp_mpi+0x4c>
 808bf82:	2900      	cmp	r1, #0
 808bf84:	db14      	blt.n	808bfb0 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808bf86:	2900      	cmp	r1, #0
 808bf88:	dd01      	ble.n	808bf8e <mbedtls_mpi_cmp_mpi+0x54>
 808bf8a:	2a00      	cmp	r2, #0
 808bf8c:	db12      	blt.n	808bfb4 <mbedtls_mpi_cmp_mpi+0x7a>
 808bf8e:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 808bf92:	3901      	subs	r1, #1
 808bf94:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
 808bf96:	b193      	cbz	r3, 808bfbe <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 808bf98:	6884      	ldr	r4, [r0, #8]
 808bf9a:	5866      	ldr	r6, [r4, r1]
 808bf9c:	586c      	ldr	r4, [r5, r1]
 808bf9e:	42a6      	cmp	r6, r4
 808bfa0:	d80e      	bhi.n	808bfc0 <mbedtls_mpi_cmp_mpi+0x86>
 808bfa2:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 808bfa6:	d201      	bcs.n	808bfac <mbedtls_mpi_cmp_mpi+0x72>
 808bfa8:	4252      	negs	r2, r2
 808bfaa:	e009      	b.n	808bfc0 <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
 808bfac:	3b01      	subs	r3, #1
 808bfae:	e7f2      	b.n	808bf96 <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808bfb0:	2201      	movs	r2, #1
 808bfb2:	e005      	b.n	808bfc0 <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808bfb4:	f04f 32ff 	mov.w	r2, #4294967295
 808bfb8:	e002      	b.n	808bfc0 <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
 808bfba:	2b00      	cmp	r3, #0
 808bfbc:	d1d8      	bne.n	808bf70 <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
 808bfbe:	461a      	mov	r2, r3
}
 808bfc0:	4610      	mov	r0, r2
 808bfc2:	bd70      	pop	{r4, r5, r6, pc}

0808bfc4 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808bfc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808bfc6:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 808bfca:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 808bfce:	2900      	cmp	r1, #0
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808bfd0:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 808bfd2:	bfb4      	ite	lt
 808bfd4:	f04f 33ff 	movlt.w	r3, #4294967295
 808bfd8:	2301      	movge	r3, #1
 808bfda:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808bfdc:	a901      	add	r1, sp, #4
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
 808bfde:	2301      	movs	r3, #1
 808bfe0:	9302      	str	r3, [sp, #8]
    Y.p = p;
 808bfe2:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808bfe6:	f7ff ffa8 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
}
 808bfea:	b005      	add	sp, #20
 808bfec:	f85d fb04 	ldr.w	pc, [sp], #4

0808bff0 <mbedtls_mpi_add_abs>:
{
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808bff0:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808bff6:	4606      	mov	r6, r0
 808bff8:	4615      	mov	r5, r2
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808bffa:	d006      	beq.n	808c00a <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
 808bffc:	4288      	cmp	r0, r1
 808bffe:	d005      	beq.n	808c00c <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808c000:	f7ff fd7f 	bl	808bb02 <mbedtls_mpi_copy>
 808c004:	4607      	mov	r7, r0
 808c006:	b108      	cbz	r0, 808c00c <mbedtls_mpi_add_abs+0x1c>
 808c008:	e049      	b.n	808c09e <mbedtls_mpi_add_abs+0xae>
 808c00a:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 808c00c:	2301      	movs	r3, #1
 808c00e:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
 808c010:	686c      	ldr	r4, [r5, #4]
 808c012:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808c016:	3b01      	subs	r3, #1
 808c018:	009b      	lsls	r3, r3, #2
 808c01a:	b12c      	cbz	r4, 808c028 <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
 808c01c:	68aa      	ldr	r2, [r5, #8]
 808c01e:	58d2      	ldr	r2, [r2, r3]
 808c020:	3b04      	subs	r3, #4
 808c022:	b90a      	cbnz	r2, 808c028 <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
 808c024:	3c01      	subs	r4, #1
 808c026:	e7f8      	b.n	808c01a <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808c028:	4621      	mov	r1, r4
 808c02a:	4630      	mov	r0, r6
 808c02c:	f7ff fd3d 	bl	808baaa <mbedtls_mpi_grow>
 808c030:	4607      	mov	r7, r0
 808c032:	2800      	cmp	r0, #0
 808c034:	d133      	bne.n	808c09e <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
 808c036:	68b3      	ldr	r3, [r6, #8]
 808c038:	f8d5 c008 	ldr.w	ip, [r5, #8]
 808c03c:	4618      	mov	r0, r3
 808c03e:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808c040:	4639      	mov	r1, r7
 808c042:	42a1      	cmp	r1, r4
 808c044:	d00f      	beq.n	808c066 <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808c046:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
 808c048:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 808c04c:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
 808c04e:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808c050:	bf2c      	ite	cs
 808c052:	2201      	movcs	r2, #1
 808c054:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
 808c056:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808c05a:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
 808c05c:	45ae      	cmp	lr, r5
 808c05e:	bf94      	ite	ls
 808c060:	4615      	movls	r5, r2
 808c062:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808c064:	e7ed      	b.n	808c042 <mbedtls_mpi_add_abs+0x52>
 808c066:	ea4f 0884 	mov.w	r8, r4, lsl #2
 808c06a:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808c06c:	b1bd      	cbz	r5, 808c09e <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
 808c06e:	6872      	ldr	r2, [r6, #4]
 808c070:	4294      	cmp	r4, r2
 808c072:	f104 0401 	add.w	r4, r4, #1
 808c076:	d306      	bcc.n	808c086 <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808c078:	4621      	mov	r1, r4
 808c07a:	4630      	mov	r0, r6
 808c07c:	f7ff fd15 	bl	808baaa <mbedtls_mpi_grow>
 808c080:	b960      	cbnz	r0, 808c09c <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
 808c082:	68b3      	ldr	r3, [r6, #8]
 808c084:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
 808c086:	681a      	ldr	r2, [r3, #0]
 808c088:	f108 0804 	add.w	r8, r8, #4
 808c08c:	442a      	add	r2, r5
 808c08e:	4295      	cmp	r5, r2
 808c090:	f843 2b04 	str.w	r2, [r3], #4
 808c094:	bf94      	ite	ls
 808c096:	2500      	movls	r5, #0
 808c098:	2501      	movhi	r5, #1
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808c09a:	e7e7      	b.n	808c06c <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808c09c:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
 808c09e:	4638      	mov	r0, r7
 808c0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808c0a4 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c0a6:	460f      	mov	r7, r1
 808c0a8:	b085      	sub	sp, #20
 808c0aa:	4606      	mov	r6, r0
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808c0ac:	4611      	mov	r1, r2
 808c0ae:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c0b0:	4615      	mov	r5, r2
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808c0b2:	f7ff fea7 	bl	808be04 <mbedtls_mpi_cmp_abs>
 808c0b6:	2800      	cmp	r0, #0
 808c0b8:	db30      	blt.n	808c11c <mbedtls_mpi_sub_abs+0x78>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c0ba:	2301      	movs	r3, #1
 808c0bc:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808c0be:	42b5      	cmp	r5, r6
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c0c0:	f04f 0300 	mov.w	r3, #0
 808c0c4:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808c0c6:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808c0c8:	d106      	bne.n	808c0d8 <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808c0ca:	4629      	mov	r1, r5
 808c0cc:	a801      	add	r0, sp, #4
 808c0ce:	f7ff fd18 	bl	808bb02 <mbedtls_mpi_copy>
 808c0d2:	4604      	mov	r4, r0
 808c0d4:	b9e8      	cbnz	r0, 808c112 <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
 808c0d6:	ad01      	add	r5, sp, #4
    }

    if( X != A )
 808c0d8:	42b7      	cmp	r7, r6
 808c0da:	d107      	bne.n	808c0ec <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 808c0dc:	2301      	movs	r3, #1
 808c0de:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808c0e0:	6868      	ldr	r0, [r5, #4]
 808c0e2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 808c0e6:	3b01      	subs	r3, #1
 808c0e8:	009b      	lsls	r3, r3, #2
 808c0ea:	e00b      	b.n	808c104 <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808c0ec:	4639      	mov	r1, r7
 808c0ee:	4630      	mov	r0, r6
 808c0f0:	f7ff fd07 	bl	808bb02 <mbedtls_mpi_copy>
 808c0f4:	4604      	mov	r4, r0
 808c0f6:	b960      	cbnz	r0, 808c112 <mbedtls_mpi_sub_abs+0x6e>
 808c0f8:	e7f0      	b.n	808c0dc <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
 808c0fa:	68aa      	ldr	r2, [r5, #8]
 808c0fc:	58d2      	ldr	r2, [r2, r3]
 808c0fe:	3b04      	subs	r3, #4
 808c100:	b912      	cbnz	r2, 808c108 <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808c102:	3801      	subs	r0, #1
 808c104:	2800      	cmp	r0, #0
 808c106:	d1f8      	bne.n	808c0fa <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
 808c108:	68b2      	ldr	r2, [r6, #8]
 808c10a:	68a9      	ldr	r1, [r5, #8]
 808c10c:	f7ff faba 	bl	808b684 <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
 808c110:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
 808c112:	a801      	add	r0, sp, #4
 808c114:	f7ff fcb3 	bl	808ba7e <mbedtls_mpi_free>

    return( ret );
 808c118:	4620      	mov	r0, r4
 808c11a:	e001      	b.n	808c120 <mbedtls_mpi_sub_abs+0x7c>
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808c11c:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
 808c120:	b005      	add	sp, #20
 808c122:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808c124 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808c126:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s < 0 )
 808c128:	6813      	ldr	r3, [r2, #0]

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c12a:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808c12c:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c12e:	460f      	mov	r7, r1
 808c130:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808c132:	d513      	bpl.n	808c15c <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808c134:	4611      	mov	r1, r2
 808c136:	4638      	mov	r0, r7
 808c138:	f7ff fe64 	bl	808be04 <mbedtls_mpi_cmp_abs>
 808c13c:	2800      	cmp	r0, #0
 808c13e:	db05      	blt.n	808c14c <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808c140:	4632      	mov	r2, r6
 808c142:	4639      	mov	r1, r7
 808c144:	4628      	mov	r0, r5
 808c146:	f7ff ffad 	bl	808c0a4 <mbedtls_mpi_sub_abs>
 808c14a:	e009      	b.n	808c160 <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808c14c:	463a      	mov	r2, r7
 808c14e:	4631      	mov	r1, r6
 808c150:	4628      	mov	r0, r5
 808c152:	f7ff ffa7 	bl	808c0a4 <mbedtls_mpi_sub_abs>
 808c156:	b928      	cbnz	r0, 808c164 <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
 808c158:	4264      	negs	r4, r4
 808c15a:	e002      	b.n	808c162 <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808c15c:	f7ff ff48 	bl	808bff0 <mbedtls_mpi_add_abs>
 808c160:	b900      	cbnz	r0, 808c164 <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
 808c162:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808c164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808c166 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808c168:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s > 0 )
 808c16a:	6813      	ldr	r3, [r2, #0]

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c16c:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808c16e:	4363      	muls	r3, r4
 808c170:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c172:	460f      	mov	r7, r1
 808c174:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808c176:	dd13      	ble.n	808c1a0 <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808c178:	4611      	mov	r1, r2
 808c17a:	4638      	mov	r0, r7
 808c17c:	f7ff fe42 	bl	808be04 <mbedtls_mpi_cmp_abs>
 808c180:	2800      	cmp	r0, #0
 808c182:	db05      	blt.n	808c190 <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808c184:	4632      	mov	r2, r6
 808c186:	4639      	mov	r1, r7
 808c188:	4628      	mov	r0, r5
 808c18a:	f7ff ff8b 	bl	808c0a4 <mbedtls_mpi_sub_abs>
 808c18e:	e009      	b.n	808c1a4 <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808c190:	463a      	mov	r2, r7
 808c192:	4631      	mov	r1, r6
 808c194:	4628      	mov	r0, r5
 808c196:	f7ff ff85 	bl	808c0a4 <mbedtls_mpi_sub_abs>
 808c19a:	b928      	cbnz	r0, 808c1a8 <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
 808c19c:	4264      	negs	r4, r4
 808c19e:	e002      	b.n	808c1a6 <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808c1a0:	f7ff ff26 	bl	808bff0 <mbedtls_mpi_add_abs>
 808c1a4:	b900      	cbnz	r0, 808c1a8 <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
 808c1a6:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808c1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808c1aa <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808c1aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808c1ac:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808c1b0:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808c1b4:	2a00      	cmp	r2, #0
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808c1b6:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808c1b8:	bfb4      	ite	lt
 808c1ba:	f04f 33ff 	movlt.w	r3, #4294967295
 808c1be:	2301      	movge	r3, #1
 808c1c0:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808c1c2:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808c1c4:	2301      	movs	r3, #1
 808c1c6:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808c1c8:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808c1cc:	f7ff ffaa 	bl	808c124 <mbedtls_mpi_add_mpi>
}
 808c1d0:	b005      	add	sp, #20
 808c1d2:	f85d fb04 	ldr.w	pc, [sp], #4

0808c1d6 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808c1d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808c1d8:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808c1dc:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808c1e0:	2a00      	cmp	r2, #0
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808c1e2:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808c1e4:	bfb4      	ite	lt
 808c1e6:	f04f 33ff 	movlt.w	r3, #4294967295
 808c1ea:	2301      	movge	r3, #1
 808c1ec:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808c1ee:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808c1f0:	2301      	movs	r3, #1
 808c1f2:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808c1f4:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808c1f8:	f7ff ffb5 	bl	808c166 <mbedtls_mpi_sub_mpi>
}
 808c1fc:	b005      	add	sp, #20
 808c1fe:	f85d fb04 	ldr.w	pc, [sp], #4

0808c202 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c206:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c208:	b086      	sub	sp, #24
 808c20a:	4615      	mov	r5, r2
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808c20c:	4288      	cmp	r0, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c20e:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c212:	4681      	mov	r9, r0
 808c214:	460e      	mov	r6, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c216:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 808c21a:	9302      	str	r3, [sp, #8]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c21c:	9203      	str	r2, [sp, #12]
    X->n = 0;
 808c21e:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 808c220:	9305      	str	r3, [sp, #20]
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808c222:	d106      	bne.n	808c232 <mbedtls_mpi_mul_mpi+0x30>
 808c224:	4668      	mov	r0, sp
 808c226:	f7ff fc6c 	bl	808bb02 <mbedtls_mpi_copy>
 808c22a:	4604      	mov	r4, r0
 808c22c:	2800      	cmp	r0, #0
 808c22e:	d14d      	bne.n	808c2cc <mbedtls_mpi_mul_mpi+0xca>
 808c230:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 808c232:	45a9      	cmp	r9, r5
 808c234:	d107      	bne.n	808c246 <mbedtls_mpi_mul_mpi+0x44>
 808c236:	4649      	mov	r1, r9
 808c238:	a803      	add	r0, sp, #12
 808c23a:	f7ff fc62 	bl	808bb02 <mbedtls_mpi_copy>
 808c23e:	4604      	mov	r4, r0
 808c240:	2800      	cmp	r0, #0
 808c242:	d143      	bne.n	808c2cc <mbedtls_mpi_mul_mpi+0xca>
 808c244:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
 808c246:	f8d6 a004 	ldr.w	sl, [r6, #4]
 808c24a:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 808c24e:	3b01      	subs	r3, #1
 808c250:	009b      	lsls	r3, r3, #2
 808c252:	f1ba 0f00 	cmp.w	sl, #0
 808c256:	d006      	beq.n	808c266 <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
 808c258:	68b2      	ldr	r2, [r6, #8]
 808c25a:	58d2      	ldr	r2, [r2, r3]
 808c25c:	3b04      	subs	r3, #4
 808c25e:	b912      	cbnz	r2, 808c266 <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
 808c260:	f10a 3aff 	add.w	sl, sl, #4294967295
 808c264:	e7f5      	b.n	808c252 <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808c266:	686f      	ldr	r7, [r5, #4]
 808c268:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 808c26c:	3b01      	subs	r3, #1
 808c26e:	009b      	lsls	r3, r3, #2
 808c270:	b12f      	cbz	r7, 808c27e <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
 808c272:	68aa      	ldr	r2, [r5, #8]
 808c274:	58d2      	ldr	r2, [r2, r3]
 808c276:	3b04      	subs	r3, #4
 808c278:	b90a      	cbnz	r2, 808c27e <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808c27a:	3f01      	subs	r7, #1
 808c27c:	e7f8      	b.n	808c270 <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 808c27e:	eb0a 0107 	add.w	r1, sl, r7
 808c282:	4648      	mov	r0, r9
 808c284:	f7ff fc11 	bl	808baaa <mbedtls_mpi_grow>
 808c288:	4604      	mov	r4, r0
 808c28a:	b9f8      	cbnz	r0, 808c2cc <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808c28c:	4601      	mov	r1, r0
 808c28e:	4648      	mov	r0, r9
 808c290:	f7ff fc61 	bl	808bb56 <mbedtls_mpi_lset>
 808c294:	4604      	mov	r4, r0
 808c296:	b9c8      	cbnz	r0, 808c2cc <mbedtls_mpi_mul_mpi+0xca>
 808c298:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 808c29c:	f108 38ff 	add.w	r8, r8, #4294967295
 808c2a0:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( i++; j > 0; j-- )
 808c2a4:	b16f      	cbz	r7, 808c2c2 <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 808c2a6:	68ab      	ldr	r3, [r5, #8]
 808c2a8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 808c2ac:	f853 3008 	ldr.w	r3, [r3, r8]
 808c2b0:	4442      	add	r2, r8
 808c2b2:	68b1      	ldr	r1, [r6, #8]
 808c2b4:	4650      	mov	r0, sl
 808c2b6:	f7ff fa0f 	bl	808b6d8 <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i++; j > 0; j-- )
 808c2ba:	3f01      	subs	r7, #1
 808c2bc:	f1a8 0804 	sub.w	r8, r8, #4
 808c2c0:	e7f0      	b.n	808c2a4 <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
 808c2c2:	6832      	ldr	r2, [r6, #0]
 808c2c4:	682b      	ldr	r3, [r5, #0]
 808c2c6:	4353      	muls	r3, r2
 808c2c8:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 808c2cc:	a803      	add	r0, sp, #12
 808c2ce:	f7ff fbd6 	bl	808ba7e <mbedtls_mpi_free>
 808c2d2:	4668      	mov	r0, sp
 808c2d4:	f7ff fbd3 	bl	808ba7e <mbedtls_mpi_free>

    return( ret );
}
 808c2d8:	4620      	mov	r0, r4
 808c2da:	b006      	add	sp, #24
 808c2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808c2e0 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 808c2e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808c2e2:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
 808c2e4:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808c2e6:	aa01      	add	r2, sp, #4
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808c2e8:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 808c2ea:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808c2ec:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808c2f0:	f7ff ff87 	bl	808c202 <mbedtls_mpi_mul_mpi>
}
 808c2f4:	b005      	add	sp, #20
 808c2f6:	f85d fb04 	ldr.w	pc, [sp], #4

0808c2fa <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c2fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c2fe:	b09b      	sub	sp, #108	; 0x6c
 808c300:	9001      	str	r0, [sp, #4]
 808c302:	460f      	mov	r7, r1
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808c304:	4618      	mov	r0, r3
 808c306:	2100      	movs	r1, #0

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c308:	4690      	mov	r8, r2
 808c30a:	9304      	str	r3, [sp, #16]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808c30c:	f7ff fe5a 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808c310:	2800      	cmp	r0, #0
 808c312:	f000 81ad 	beq.w	808c670 <mbedtls_mpi_div_mpi+0x376>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c316:	2400      	movs	r4, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c318:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808c31a:	9904      	ldr	r1, [sp, #16]
 808c31c:	4640      	mov	r0, r8
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c31e:	950b      	str	r5, [sp, #44]	; 0x2c
    X->n = 0;
 808c320:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 808c322:	940d      	str	r4, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c324:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
 808c326:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 808c328:	9410      	str	r4, [sp, #64]	; 0x40
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c32a:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
 808c32c:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 808c32e:	9413      	str	r4, [sp, #76]	; 0x4c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c330:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
 808c332:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 808c334:	9416      	str	r4, [sp, #88]	; 0x58
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c336:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
 808c338:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 808c33a:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808c33c:	f7ff fd62 	bl	808be04 <mbedtls_mpi_cmp_abs>
 808c340:	42a0      	cmp	r0, r4
 808c342:	da16      	bge.n	808c372 <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808c344:	9b01      	ldr	r3, [sp, #4]
 808c346:	b90b      	cbnz	r3, 808c34c <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808c348:	b94f      	cbnz	r7, 808c35e <mbedtls_mpi_div_mpi+0x64>
 808c34a:	e010      	b.n	808c36e <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808c34c:	4621      	mov	r1, r4
 808c34e:	9801      	ldr	r0, [sp, #4]
 808c350:	f7ff fc01 	bl	808bb56 <mbedtls_mpi_lset>
 808c354:	4604      	mov	r4, r0
 808c356:	2800      	cmp	r0, #0
 808c358:	f040 8179 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>
 808c35c:	e7f4      	b.n	808c348 <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808c35e:	4641      	mov	r1, r8
 808c360:	4638      	mov	r0, r7
 808c362:	f7ff fbce 	bl	808bb02 <mbedtls_mpi_copy>
 808c366:	4604      	mov	r4, r0
 808c368:	2800      	cmp	r0, #0
 808c36a:	f040 8170 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
 808c36e:	2000      	movs	r0, #0
 808c370:	e180      	b.n	808c674 <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 808c372:	4641      	mov	r1, r8
 808c374:	a80b      	add	r0, sp, #44	; 0x2c
 808c376:	f7ff fbc4 	bl	808bb02 <mbedtls_mpi_copy>
 808c37a:	4604      	mov	r4, r0
 808c37c:	2800      	cmp	r0, #0
 808c37e:	f040 8166 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 808c382:	ae0e      	add	r6, sp, #56	; 0x38
 808c384:	9904      	ldr	r1, [sp, #16]
 808c386:	4630      	mov	r0, r6
 808c388:	f7ff fbbb 	bl	808bb02 <mbedtls_mpi_copy>
 808c38c:	4604      	mov	r4, r0
 808c38e:	2800      	cmp	r0, #0
 808c390:	f040 815d 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808c394:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808c398:	a811      	add	r0, sp, #68	; 0x44
 808c39a:	3102      	adds	r1, #2
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
 808c39c:	950e      	str	r5, [sp, #56]	; 0x38
 808c39e:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808c3a0:	f7ff fb83 	bl	808baaa <mbedtls_mpi_grow>
 808c3a4:	4604      	mov	r4, r0
 808c3a6:	2800      	cmp	r0, #0
 808c3a8:	f040 8151 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 808c3ac:	4601      	mov	r1, r0
 808c3ae:	a811      	add	r0, sp, #68	; 0x44
 808c3b0:	f7ff fbd1 	bl	808bb56 <mbedtls_mpi_lset>
 808c3b4:	4604      	mov	r4, r0
 808c3b6:	2800      	cmp	r0, #0
 808c3b8:	f040 8149 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 808c3bc:	2102      	movs	r1, #2
 808c3be:	a814      	add	r0, sp, #80	; 0x50
 808c3c0:	f7ff fb73 	bl	808baaa <mbedtls_mpi_grow>
 808c3c4:	4604      	mov	r4, r0
 808c3c6:	2800      	cmp	r0, #0
 808c3c8:	f040 8141 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 808c3cc:	2103      	movs	r1, #3
 808c3ce:	a817      	add	r0, sp, #92	; 0x5c
 808c3d0:	f7ff fb6b 	bl	808baaa <mbedtls_mpi_grow>
 808c3d4:	4604      	mov	r4, r0
 808c3d6:	2800      	cmp	r0, #0
 808c3d8:	f040 8139 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 808c3dc:	4630      	mov	r0, r6
 808c3de:	f7ff fc00 	bl	808bbe2 <mbedtls_mpi_bitlen>
 808c3e2:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 808c3e6:	281f      	cmp	r0, #31
 808c3e8:	d013      	beq.n	808c412 <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
 808c3ea:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808c3ee:	4619      	mov	r1, r3
 808c3f0:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
 808c3f2:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808c3f4:	f7ff fc73 	bl	808bcde <mbedtls_mpi_shift_l>
 808c3f8:	4604      	mov	r4, r0
 808c3fa:	2800      	cmp	r0, #0
 808c3fc:	f040 8127 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 808c400:	9903      	ldr	r1, [sp, #12]
 808c402:	4630      	mov	r0, r6
 808c404:	f7ff fc6b 	bl	808bcde <mbedtls_mpi_shift_l>
 808c408:	4604      	mov	r4, r0
 808c40a:	2800      	cmp	r0, #0
 808c40c:	f040 811f 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>
 808c410:	e000      	b.n	808c414 <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
 808c412:	9403      	str	r4, [sp, #12]

    n = X.n - 1;
 808c414:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
 808c416:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
 808c41a:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 808c41e:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808c422:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
 808c426:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808c428:	ea4f 134b 	mov.w	r3, fp, lsl #5
 808c42c:	4619      	mov	r1, r3
 808c42e:	4630      	mov	r0, r6
 808c430:	9302      	str	r3, [sp, #8]
 808c432:	f7ff fc54 	bl	808bcde <mbedtls_mpi_shift_l>
 808c436:	4604      	mov	r4, r0
 808c438:	2800      	cmp	r0, #0
 808c43a:	f040 8108 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
 808c43e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 808c442:	4631      	mov	r1, r6
 808c444:	a80b      	add	r0, sp, #44	; 0x2c
 808c446:	f7ff fd78 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
 808c44a:	2800      	cmp	r0, #0
 808c44c:	db0e      	blt.n	808c46c <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
 808c44e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 808c450:	f851 200b 	ldr.w	r2, [r1, fp]
 808c454:	3201      	adds	r2, #1
 808c456:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 808c45a:	a90b      	add	r1, sp, #44	; 0x2c
 808c45c:	4632      	mov	r2, r6
 808c45e:	4608      	mov	r0, r1
 808c460:	f7ff fe81 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808c464:	4604      	mov	r4, r0
 808c466:	2800      	cmp	r0, #0
 808c468:	d0eb      	beq.n	808c442 <mbedtls_mpi_div_mpi+0x148>
 808c46a:	e0f0      	b.n	808c64e <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 808c46c:	9902      	ldr	r1, [sp, #8]
 808c46e:	4630      	mov	r0, r6
 808c470:	f7ff fc84 	bl	808bd7c <mbedtls_mpi_shift_r>
 808c474:	4604      	mov	r4, r0
 808c476:	2800      	cmp	r0, #0
 808c478:	f040 80e9 	bne.w	808c64e <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
 808c47c:	9b00      	ldr	r3, [sp, #0]
 808c47e:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
 808c482:	009b      	lsls	r3, r3, #2
 808c484:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808c486:	3b04      	subs	r3, #4
 808c488:	9308      	str	r3, [sp, #32]
 808c48a:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
 808c48e:	3b01      	subs	r3, #1
 808c490:	3e01      	subs	r6, #1
 808c492:	ebca 0606 	rsb	r6, sl, r6
 808c496:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 808c49a:	ebca 0a03 	rsb	sl, sl, r3
 808c49e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 808c4a2:	3d02      	subs	r5, #2
 808c4a4:	00b6      	lsls	r6, r6, #2
 808c4a6:	9302      	str	r3, [sp, #8]
 808c4a8:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808c4aa:	9b00      	ldr	r3, [sp, #0]
 808c4ac:	4599      	cmp	r9, r3
 808c4ae:	f240 80a8 	bls.w	808c602 <mbedtls_mpi_div_mpi+0x308>
    {
        if( X.p[i] >= Y.p[t] )
 808c4b2:	9805      	ldr	r0, [sp, #20]
 808c4b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 808c4b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 808c4b8:	1d2b      	adds	r3, r5, #4
 808c4ba:	5812      	ldr	r2, [r2, r0]
 808c4bc:	9309      	str	r3, [sp, #36]	; 0x24
 808c4be:	58cb      	ldr	r3, [r1, r3]
 808c4c0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 808c4c2:	4293      	cmp	r3, r2
 808c4c4:	d303      	bcc.n	808c4ce <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
 808c4c6:	f04f 33ff 	mov.w	r3, #4294967295
 808c4ca:	5183      	str	r3, [r0, r6]
 808c4cc:	e01b      	b.n	808c506 <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 808c4ce:	eb00 0a06 	add.w	sl, r0, r6
 808c4d2:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 808c4d4:	b19a      	cbz	r2, 808c4fe <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 808c4d6:	9307      	str	r3, [sp, #28]
 808c4d8:	2300      	movs	r3, #0
 808c4da:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
 808c4dc:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 808c4e0:	ea4b 0b00 	orr.w	fp, fp, r0
 808c4e4:	4658      	mov	r0, fp
 808c4e6:	4661      	mov	r1, ip
 808c4e8:	f006 fd4a 	bl	8092f80 <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
 808c4ec:	2300      	movs	r3, #0
 808c4ee:	f04f 32ff 	mov.w	r2, #4294967295
 808c4f2:	428b      	cmp	r3, r1
 808c4f4:	bf08      	it	eq
 808c4f6:	4282      	cmpeq	r2, r0
 808c4f8:	d203      	bcs.n	808c502 <mbedtls_mpi_div_mpi+0x208>
 808c4fa:	4610      	mov	r0, r2
 808c4fc:	e001      	b.n	808c502 <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
 808c4fe:	f04f 30ff 	mov.w	r0, #4294967295
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
 808c502:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
 808c506:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808c508:	f1a5 0a04 	sub.w	sl, r5, #4
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
 808c50c:	5993      	ldr	r3, [r2, r6]
 808c50e:	3301      	adds	r3, #1
 808c510:	5193      	str	r3, [r2, r6]
        do
        {
            Z.p[i - t - 1]--;
 808c512:	9a13      	ldr	r2, [sp, #76]	; 0x4c

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808c514:	2100      	movs	r1, #0
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808c516:	5993      	ldr	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808c518:	a814      	add	r0, sp, #80	; 0x50
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808c51a:	3b01      	subs	r3, #1
 808c51c:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808c51e:	f7ff fb1a 	bl	808bb56 <mbedtls_mpi_lset>
 808c522:	2800      	cmp	r0, #0
 808c524:	f040 8090 	bne.w	808c648 <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808c528:	9b00      	ldr	r3, [sp, #0]
 808c52a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808c52c:	b11b      	cbz	r3, 808c536 <mbedtls_mpi_div_mpi+0x23c>
 808c52e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808c530:	9908      	ldr	r1, [sp, #32]
 808c532:	585b      	ldr	r3, [r3, r1]
 808c534:	e000      	b.n	808c538 <mbedtls_mpi_div_mpi+0x23e>
 808c536:	9b00      	ldr	r3, [sp, #0]
 808c538:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 808c53a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808c53c:	9a05      	ldr	r2, [sp, #20]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808c53e:	a914      	add	r1, sp, #80	; 0x50
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808c540:	589a      	ldr	r2, [r3, r2]
 808c542:	9b16      	ldr	r3, [sp, #88]	; 0x58
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808c544:	4608      	mov	r0, r1
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808c546:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808c548:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808c54a:	599a      	ldr	r2, [r3, r6]
 808c54c:	f7ff fec8 	bl	808c2e0 <mbedtls_mpi_mul_int>
 808c550:	4601      	mov	r1, r0
 808c552:	2800      	cmp	r0, #0
 808c554:	d17a      	bne.n	808c64c <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 808c556:	a817      	add	r0, sp, #92	; 0x5c
 808c558:	f7ff fafd 	bl	808bb56 <mbedtls_mpi_lset>
 808c55c:	2800      	cmp	r0, #0
 808c55e:	d173      	bne.n	808c648 <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808c560:	f1b9 0f01 	cmp.w	r9, #1
 808c564:	bf18      	it	ne
 808c566:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
 808c568:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808c56a:	bf18      	it	ne
 808c56c:	f852 000a 	ldrne.w	r0, [r2, sl]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808c570:	a917      	add	r1, sp, #92	; 0x5c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808c572:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808c574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808c576:	a814      	add	r0, sp, #80	; 0x50
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808c578:	595a      	ldr	r2, [r3, r5]
 808c57a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808c57c:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
 808c57e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808c580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808c582:	589a      	ldr	r2, [r3, r2]
 808c584:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808c586:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808c588:	f7ff fcd7 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
 808c58c:	2800      	cmp	r0, #0
 808c58e:	dcc0      	bgt.n	808c512 <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 808c590:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808c592:	a90e      	add	r1, sp, #56	; 0x38
 808c594:	599a      	ldr	r2, [r3, r6]
 808c596:	a814      	add	r0, sp, #80	; 0x50
 808c598:	f7ff fea2 	bl	808c2e0 <mbedtls_mpi_mul_int>
 808c59c:	2800      	cmp	r0, #0
 808c59e:	d153      	bne.n	808c648 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 808c5a0:	9902      	ldr	r1, [sp, #8]
 808c5a2:	a814      	add	r0, sp, #80	; 0x50
 808c5a4:	f7ff fb9b 	bl	808bcde <mbedtls_mpi_shift_l>
 808c5a8:	2800      	cmp	r0, #0
 808c5aa:	d14d      	bne.n	808c648 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 808c5ac:	a90b      	add	r1, sp, #44	; 0x2c
 808c5ae:	4608      	mov	r0, r1
 808c5b0:	aa14      	add	r2, sp, #80	; 0x50
 808c5b2:	f7ff fdd8 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808c5b6:	4601      	mov	r1, r0
 808c5b8:	2800      	cmp	r0, #0
 808c5ba:	d147      	bne.n	808c64c <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 808c5bc:	a80b      	add	r0, sp, #44	; 0x2c
 808c5be:	f7ff fd01 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808c5c2:	2800      	cmp	r0, #0
 808c5c4:	da15      	bge.n	808c5f2 <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 808c5c6:	a90e      	add	r1, sp, #56	; 0x38
 808c5c8:	a814      	add	r0, sp, #80	; 0x50
 808c5ca:	f7ff fa9a 	bl	808bb02 <mbedtls_mpi_copy>
 808c5ce:	2800      	cmp	r0, #0
 808c5d0:	d13a      	bne.n	808c648 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 808c5d2:	9902      	ldr	r1, [sp, #8]
 808c5d4:	a814      	add	r0, sp, #80	; 0x50
 808c5d6:	f7ff fb82 	bl	808bcde <mbedtls_mpi_shift_l>
 808c5da:	2800      	cmp	r0, #0
 808c5dc:	d134      	bne.n	808c648 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 808c5de:	a90b      	add	r1, sp, #44	; 0x2c
 808c5e0:	aa14      	add	r2, sp, #80	; 0x50
 808c5e2:	4608      	mov	r0, r1
 808c5e4:	f7ff fd9e 	bl	808c124 <mbedtls_mpi_add_mpi>
 808c5e8:	bb70      	cbnz	r0, 808c648 <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
 808c5ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808c5ec:	5993      	ldr	r3, [r2, r6]
 808c5ee:	3b01      	subs	r3, #1
 808c5f0:	5193      	str	r3, [r2, r6]
 808c5f2:	9b02      	ldr	r3, [sp, #8]
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808c5f4:	f109 39ff 	add.w	r9, r9, #4294967295
 808c5f8:	3b20      	subs	r3, #32
 808c5fa:	3e04      	subs	r6, #4
 808c5fc:	9302      	str	r3, [sp, #8]
 808c5fe:	3d04      	subs	r5, #4
 808c600:	e753      	b.n	808c4aa <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
 808c602:	9b01      	ldr	r3, [sp, #4]
 808c604:	b15b      	cbz	r3, 808c61e <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 808c606:	a911      	add	r1, sp, #68	; 0x44
 808c608:	4618      	mov	r0, r3
 808c60a:	f7ff fa7a 	bl	808bb02 <mbedtls_mpi_copy>
 808c60e:	b9d8      	cbnz	r0, 808c648 <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
 808c610:	9b04      	ldr	r3, [sp, #16]
 808c612:	f8d8 2000 	ldr.w	r2, [r8]
 808c616:	681b      	ldr	r3, [r3, #0]
 808c618:	4353      	muls	r3, r2
 808c61a:	9a01      	ldr	r2, [sp, #4]
 808c61c:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
 808c61e:	b1b7      	cbz	r7, 808c64e <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 808c620:	9903      	ldr	r1, [sp, #12]
 808c622:	a80b      	add	r0, sp, #44	; 0x2c
 808c624:	f7ff fbaa 	bl	808bd7c <mbedtls_mpi_shift_r>
 808c628:	b970      	cbnz	r0, 808c648 <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
 808c62a:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808c62e:	a90b      	add	r1, sp, #44	; 0x2c
 808c630:	4638      	mov	r0, r7
    }

    if( R != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
        X.s = A->s;
 808c632:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808c634:	f7ff fa65 	bl	808bb02 <mbedtls_mpi_copy>
 808c638:	4601      	mov	r1, r0
 808c63a:	b938      	cbnz	r0, 808c64c <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 808c63c:	4638      	mov	r0, r7
 808c63e:	f7ff fcc1 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808c642:	b920      	cbnz	r0, 808c64e <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
 808c644:	2301      	movs	r3, #1
 808c646:	603b      	str	r3, [r7, #0]
 808c648:	4604      	mov	r4, r0
 808c64a:	e000      	b.n	808c64e <mbedtls_mpi_div_mpi+0x354>
 808c64c:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 808c64e:	a80b      	add	r0, sp, #44	; 0x2c
 808c650:	f7ff fa15 	bl	808ba7e <mbedtls_mpi_free>
 808c654:	a80e      	add	r0, sp, #56	; 0x38
 808c656:	f7ff fa12 	bl	808ba7e <mbedtls_mpi_free>
 808c65a:	a811      	add	r0, sp, #68	; 0x44
 808c65c:	f7ff fa0f 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 808c660:	a814      	add	r0, sp, #80	; 0x50
 808c662:	f7ff fa0c 	bl	808ba7e <mbedtls_mpi_free>
 808c666:	a817      	add	r0, sp, #92	; 0x5c
 808c668:	f7ff fa09 	bl	808ba7e <mbedtls_mpi_free>

    return( ret );
 808c66c:	4620      	mov	r0, r4
 808c66e:	e001      	b.n	808c674 <mbedtls_mpi_div_mpi+0x37a>
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 808c670:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
 808c674:	b01b      	add	sp, #108	; 0x6c
 808c676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c67a <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c67a:	b570      	push	{r4, r5, r6, lr}
 808c67c:	4604      	mov	r4, r0
 808c67e:	460e      	mov	r6, r1
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808c680:	4610      	mov	r0, r2
 808c682:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c684:	4615      	mov	r5, r2
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808c686:	f7ff fc9d 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808c68a:	2800      	cmp	r0, #0
 808c68c:	db22      	blt.n	808c6d4 <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 808c68e:	462b      	mov	r3, r5
 808c690:	4632      	mov	r2, r6
 808c692:	4621      	mov	r1, r4
 808c694:	2000      	movs	r0, #0
 808c696:	f7ff fe30 	bl	808c2fa <mbedtls_mpi_div_mpi>
 808c69a:	b9f8      	cbnz	r0, 808c6dc <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 808c69c:	2100      	movs	r1, #0
 808c69e:	4620      	mov	r0, r4
 808c6a0:	f7ff fc90 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808c6a4:	2800      	cmp	r0, #0
 808c6a6:	da07      	bge.n	808c6b8 <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 808c6a8:	462a      	mov	r2, r5
 808c6aa:	4621      	mov	r1, r4
 808c6ac:	4620      	mov	r0, r4
 808c6ae:	f7ff fd39 	bl	808c124 <mbedtls_mpi_add_mpi>
 808c6b2:	2800      	cmp	r0, #0
 808c6b4:	d0f2      	beq.n	808c69c <mbedtls_mpi_mod_mpi+0x22>
 808c6b6:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 808c6b8:	4629      	mov	r1, r5
 808c6ba:	4620      	mov	r0, r4
 808c6bc:	f7ff fc3d 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
 808c6c0:	2800      	cmp	r0, #0
 808c6c2:	db0a      	blt.n	808c6da <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 808c6c4:	462a      	mov	r2, r5
 808c6c6:	4621      	mov	r1, r4
 808c6c8:	4620      	mov	r0, r4
 808c6ca:	f7ff fd4c 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808c6ce:	2800      	cmp	r0, #0
 808c6d0:	d0f2      	beq.n	808c6b8 <mbedtls_mpi_mod_mpi+0x3e>
 808c6d2:	bd70      	pop	{r4, r5, r6, pc}
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808c6d4:	f06f 0009 	mvn.w	r0, #9
 808c6d8:	bd70      	pop	{r4, r5, r6, pc}
 808c6da:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
 808c6dc:	bd70      	pop	{r4, r5, r6, pc}

0808c6de <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808c6de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c6e2:	4606      	mov	r6, r0
 808c6e4:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 808c6e8:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808c6ea:	4618      	mov	r0, r3
 808c6ec:	2100      	movs	r1, #0

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808c6ee:	9202      	str	r2, [sp, #8]
 808c6f0:	461d      	mov	r5, r3
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808c6f2:	f7ff fc67 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808c6f6:	2800      	cmp	r0, #0
 808c6f8:	dd05      	ble.n	808c706 <mbedtls_mpi_exp_mod+0x28>
 808c6fa:	68ab      	ldr	r3, [r5, #8]
 808c6fc:	f8d3 8000 	ldr.w	r8, [r3]
 808c700:	f018 0f01 	tst.w	r8, #1
 808c704:	d102      	bne.n	808c70c <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808c706:	f06f 0003 	mvn.w	r0, #3
 808c70a:	e203      	b.n	808cb14 <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 808c70c:	2100      	movs	r1, #0
 808c70e:	9802      	ldr	r0, [sp, #8]
 808c710:	f7ff fc58 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808c714:	2800      	cmp	r0, #0
 808c716:	dbf6      	blt.n	808c706 <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
 808c718:	f108 0402 	add.w	r4, r8, #2
 808c71c:	0064      	lsls	r4, r4, #1
 808c71e:	f004 0408 	and.w	r4, r4, #8
 808c722:	4444      	add	r4, r8
 808c724:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
 808c726:	fb04 f308 	mul.w	r3, r4, r8
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808c72a:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 808c72c:	f1c3 0302 	rsb	r3, r3, #2
 808c730:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808c734:	d1f7      	bne.n	808c726 <mbedtls_mpi_exp_mod+0x48>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c736:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808c738:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 808c73c:	a814      	add	r0, sp, #80	; 0x50
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c73e:	9308      	str	r3, [sp, #32]
    X->n = 0;
 808c740:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 808c742:	910a      	str	r1, [sp, #40]	; 0x28
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c744:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 808c746:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 808c748:	910d      	str	r1, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c74a:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 808c74c:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 808c74e:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808c750:	f006 ff25 	bl	809359e <memset>

    i = mbedtls_mpi_bitlen( E );
 808c754:	9802      	ldr	r0, [sp, #8]
 808c756:	f7ff fa44 	bl	808bbe2 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
 808c75a:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 808c75e:	d20a      	bcs.n	808c776 <mbedtls_mpi_exp_mod+0x98>
 808c760:	28ef      	cmp	r0, #239	; 0xef
 808c762:	d80b      	bhi.n	808c77c <mbedtls_mpi_exp_mod+0x9e>
 808c764:	284f      	cmp	r0, #79	; 0x4f
 808c766:	d80c      	bhi.n	808c782 <mbedtls_mpi_exp_mod+0xa4>
 808c768:	2818      	cmp	r0, #24
 808c76a:	bf34      	ite	cc
 808c76c:	f04f 0b01 	movcc.w	fp, #1
 808c770:	f04f 0b03 	movcs.w	fp, #3
 808c774:	e007      	b.n	808c786 <mbedtls_mpi_exp_mod+0xa8>
 808c776:	f04f 0b06 	mov.w	fp, #6
 808c77a:	e004      	b.n	808c786 <mbedtls_mpi_exp_mod+0xa8>
 808c77c:	f04f 0b05 	mov.w	fp, #5
 808c780:	e001      	b.n	808c786 <mbedtls_mpi_exp_mod+0xa8>
 808c782:	f04f 0b04 	mov.w	fp, #4

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808c786:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808c788:	4630      	mov	r0, r6
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808c78a:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808c78e:	4641      	mov	r1, r8
 808c790:	f7ff f98b 	bl	808baaa <mbedtls_mpi_grow>
 808c794:	4603      	mov	r3, r0
 808c796:	2800      	cmp	r0, #0
 808c798:	f040 8194 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 808c79c:	4641      	mov	r1, r8
 808c79e:	a817      	add	r0, sp, #92	; 0x5c
 808c7a0:	f7ff f983 	bl	808baaa <mbedtls_mpi_grow>
 808c7a4:	4603      	mov	r3, r0
 808c7a6:	2800      	cmp	r0, #0
 808c7a8:	f040 818c 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 808c7ac:	ea4f 0148 	mov.w	r1, r8, lsl #1
 808c7b0:	a80b      	add	r0, sp, #44	; 0x2c
 808c7b2:	f7ff f97a 	bl	808baaa <mbedtls_mpi_grow>
 808c7b6:	4603      	mov	r3, r0
 808c7b8:	2800      	cmp	r0, #0
 808c7ba:	f040 8183 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 808c7be:	683b      	ldr	r3, [r7, #0]
 808c7c0:	9304      	str	r3, [sp, #16]
    if( neg )
 808c7c2:	3301      	adds	r3, #1
 808c7c4:	d10a      	bne.n	808c7dc <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 808c7c6:	4639      	mov	r1, r7
 808c7c8:	a80e      	add	r0, sp, #56	; 0x38
 808c7ca:	f7ff f99a 	bl	808bb02 <mbedtls_mpi_copy>
 808c7ce:	4603      	mov	r3, r0
 808c7d0:	2800      	cmp	r0, #0
 808c7d2:	f040 8177 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
 808c7d6:	2301      	movs	r3, #1
 808c7d8:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 808c7da:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 808c7dc:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808c7e0:	b10b      	cbz	r3, 808c7e6 <mbedtls_mpi_exp_mod+0x108>
 808c7e2:	689b      	ldr	r3, [r3, #8]
 808c7e4:	bb2b      	cbnz	r3, 808c832 <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 808c7e6:	2101      	movs	r1, #1
 808c7e8:	a808      	add	r0, sp, #32
 808c7ea:	f7ff f9b4 	bl	808bb56 <mbedtls_mpi_lset>
 808c7ee:	4603      	mov	r3, r0
 808c7f0:	2800      	cmp	r0, #0
 808c7f2:	f040 8167 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 808c7f6:	6869      	ldr	r1, [r5, #4]
 808c7f8:	a808      	add	r0, sp, #32
 808c7fa:	0189      	lsls	r1, r1, #6
 808c7fc:	f7ff fa6f 	bl	808bcde <mbedtls_mpi_shift_l>
 808c800:	4603      	mov	r3, r0
 808c802:	2800      	cmp	r0, #0
 808c804:	f040 815e 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 808c808:	a908      	add	r1, sp, #32
 808c80a:	462a      	mov	r2, r5
 808c80c:	4608      	mov	r0, r1
 808c80e:	f7ff ff34 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808c812:	4603      	mov	r3, r0
 808c814:	2800      	cmp	r0, #0
 808c816:	f040 8155 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
 808c81a:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808c81e:	b183      	cbz	r3, 808c842 <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 808c820:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808c824:	ab08      	add	r3, sp, #32
 808c826:	cb03      	ldmia	r3!, {r0, r1}
 808c828:	6010      	str	r0, [r2, #0]
 808c82a:	6818      	ldr	r0, [r3, #0]
 808c82c:	6051      	str	r1, [r2, #4]
 808c82e:	6090      	str	r0, [r2, #8]
 808c830:	e007      	b.n	808c842 <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 808c832:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808c836:	ab08      	add	r3, sp, #32
 808c838:	6810      	ldr	r0, [r2, #0]
 808c83a:	6851      	ldr	r1, [r2, #4]
 808c83c:	c303      	stmia	r3!, {r0, r1}
 808c83e:	6890      	ldr	r0, [r2, #8]
 808c840:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 808c842:	4629      	mov	r1, r5
 808c844:	4638      	mov	r0, r7
 808c846:	f7ff fb78 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
 808c84a:	2800      	cmp	r0, #0
 808c84c:	db18      	blt.n	808c880 <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 808c84e:	462a      	mov	r2, r5
 808c850:	4639      	mov	r1, r7
 808c852:	a817      	add	r0, sp, #92	; 0x5c
 808c854:	f7ff ff11 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808c858:	4603      	mov	r3, r0
 808c85a:	2800      	cmp	r0, #0
 808c85c:	f040 8132 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
 808c860:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 808c862:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 808c866:	4623      	mov	r3, r4
 808c868:	f8cd 9000 	str.w	r9, [sp]
 808c86c:	462a      	mov	r2, r5
 808c86e:	a908      	add	r1, sp, #32
 808c870:	a817      	add	r0, sp, #92	; 0x5c
 808c872:	f7ff fafe 	bl	808be72 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c876:	4603      	mov	r3, r0
 808c878:	2800      	cmp	r0, #0
 808c87a:	f040 8123 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
 808c87e:	e004      	b.n	808c88a <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 808c880:	4639      	mov	r1, r7
 808c882:	a817      	add	r0, sp, #92	; 0x5c
 808c884:	f7ff f93d 	bl	808bb02 <mbedtls_mpi_copy>
 808c888:	e7e6      	b.n	808c858 <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 808c88a:	a908      	add	r1, sp, #32
 808c88c:	4630      	mov	r0, r6
 808c88e:	f7ff f938 	bl	808bb02 <mbedtls_mpi_copy>
 808c892:	4603      	mov	r3, r0
 808c894:	2800      	cmp	r0, #0
 808c896:	f040 8115 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808c89a:	ab07      	add	r3, sp, #28
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808c89c:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808c89e:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808c8a0:	f8cd 9000 	str.w	r9, [sp]
 808c8a4:	4623      	mov	r3, r4
 808c8a6:	462a      	mov	r2, r5
 808c8a8:	a911      	add	r1, sp, #68	; 0x44
 808c8aa:	4630      	mov	r0, r6
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808c8ac:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808c8ae:	9711      	str	r7, [sp, #68]	; 0x44
 808c8b0:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
 808c8b2:	f7ff fade 	bl	808be72 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808c8b6:	4603      	mov	r3, r0
 808c8b8:	2800      	cmp	r0, #0
 808c8ba:	f040 8103 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
 808c8be:	45bb      	cmp	fp, r7
 808c8c0:	d05b      	beq.n	808c97a <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 808c8c2:	f10b 33ff 	add.w	r3, fp, #4294967295
 808c8c6:	9303      	str	r3, [sp, #12]
 808c8c8:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 808c8ca:	f04f 080c 	mov.w	r8, #12
 808c8ce:	ab14      	add	r3, sp, #80	; 0x50
 808c8d0:	fb08 3807 	mla	r8, r8, r7, r3
 808c8d4:	6869      	ldr	r1, [r5, #4]
 808c8d6:	4640      	mov	r0, r8
 808c8d8:	3101      	adds	r1, #1
 808c8da:	f7ff f8e6 	bl	808baaa <mbedtls_mpi_grow>
 808c8de:	4603      	mov	r3, r0
 808c8e0:	2800      	cmp	r0, #0
 808c8e2:	f040 80ef 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 808c8e6:	a917      	add	r1, sp, #92	; 0x5c
 808c8e8:	4640      	mov	r0, r8
 808c8ea:	f7ff f90a 	bl	808bb02 <mbedtls_mpi_copy>
 808c8ee:	4603      	mov	r3, r0
 808c8f0:	2800      	cmp	r0, #0
 808c8f2:	f040 80e7 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
 808c8f6:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 808c8f8:	4623      	mov	r3, r4
 808c8fa:	f8cd 9000 	str.w	r9, [sp]
 808c8fe:	462a      	mov	r2, r5
 808c900:	4641      	mov	r1, r8
 808c902:	4640      	mov	r0, r8
 808c904:	f7ff fab5 	bl	808be72 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c908:	4603      	mov	r3, r0
 808c90a:	2800      	cmp	r0, #0
 808c90c:	f040 80da 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
 808c910:	9b03      	ldr	r3, [sp, #12]
 808c912:	f10a 0a01 	add.w	sl, sl, #1
 808c916:	4553      	cmp	r3, sl
 808c918:	d8ee      	bhi.n	808c8f8 <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808c91a:	3701      	adds	r7, #1
 808c91c:	f04f 080c 	mov.w	r8, #12
 808c920:	ab14      	add	r3, sp, #80	; 0x50
 808c922:	fb08 3807 	mla	r8, r8, r7, r3
 808c926:	f04f 0901 	mov.w	r9, #1
 808c92a:	fa09 f90b 	lsl.w	r9, r9, fp
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808c92e:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808c932:	454f      	cmp	r7, r9
 808c934:	d221      	bcs.n	808c97a <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 808c936:	6869      	ldr	r1, [r5, #4]
 808c938:	4640      	mov	r0, r8
 808c93a:	3101      	adds	r1, #1
 808c93c:	f7ff f8b5 	bl	808baaa <mbedtls_mpi_grow>
 808c940:	4603      	mov	r3, r0
 808c942:	2800      	cmp	r0, #0
 808c944:	f040 80be 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 808c948:	f1a8 010c 	sub.w	r1, r8, #12
 808c94c:	4640      	mov	r0, r8
 808c94e:	f7ff f8d8 	bl	808bb02 <mbedtls_mpi_copy>
 808c952:	4603      	mov	r3, r0
 808c954:	2800      	cmp	r0, #0
 808c956:	f040 80b5 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808c95a:	4623      	mov	r3, r4
 808c95c:	4640      	mov	r0, r8
 808c95e:	f8cd a000 	str.w	sl, [sp]
 808c962:	462a      	mov	r2, r5
 808c964:	a917      	add	r1, sp, #92	; 0x5c
 808c966:	f7ff fa84 	bl	808be72 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c96a:	f108 080c 	add.w	r8, r8, #12
 808c96e:	4603      	mov	r3, r0
 808c970:	2800      	cmp	r0, #0
 808c972:	f040 80a7 	bne.w	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808c976:	3701      	adds	r7, #1
 808c978:	e7db      	b.n	808c932 <mbedtls_mpi_exp_mod+0x254>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 808c97a:	2700      	movs	r7, #0
        }
    }

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
 808c97c:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
 808c97e:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
 808c980:	46b8      	mov	r8, r7

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 808c982:	9b02      	ldr	r3, [sp, #8]
 808c984:	685b      	ldr	r3, [r3, #4]
 808c986:	9303      	str	r3, [sp, #12]
    wbits   = 0;
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
 808c988:	f1ba 0f00 	cmp.w	sl, #0
 808c98c:	d10e      	bne.n	808c9ac <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
 808c98e:	9b03      	ldr	r3, [sp, #12]
 808c990:	b93b      	cbnz	r3, 808c9a2 <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808c992:	2301      	movs	r3, #1
 808c994:	fa03 f30b 	lsl.w	r3, r3, fp
 808c998:	9305      	str	r3, [sp, #20]
 808c99a:	9f03      	ldr	r7, [sp, #12]
 808c99c:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 808c9a0:	e05e      	b.n	808ca60 <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808c9a2:	9b03      	ldr	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 808c9a4:	f04f 0a20 	mov.w	sl, #32
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808c9a8:	3b01      	subs	r3, #1
 808c9aa:	9303      	str	r3, [sp, #12]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808c9ac:	9b02      	ldr	r3, [sp, #8]
 808c9ae:	9a03      	ldr	r2, [sp, #12]
 808c9b0:	689b      	ldr	r3, [r3, #8]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
 808c9b2:	f10a 3aff 	add.w	sl, sl, #4294967295

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808c9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808c9ba:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 808c9be:	f013 0301 	ands.w	r3, r3, #1
 808c9c2:	d10f      	bne.n	808c9e4 <mbedtls_mpi_exp_mod+0x306>
 808c9c4:	2f00      	cmp	r7, #0
 808c9c6:	d0df      	beq.n	808c988 <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
 808c9c8:	2f01      	cmp	r7, #1
 808c9ca:	d10b      	bne.n	808c9e4 <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808c9cc:	ab0b      	add	r3, sp, #44	; 0x2c
 808c9ce:	9300      	str	r3, [sp, #0]
 808c9d0:	462a      	mov	r2, r5
 808c9d2:	4623      	mov	r3, r4
 808c9d4:	4631      	mov	r1, r6
 808c9d6:	4630      	mov	r0, r6
 808c9d8:	f7ff fa4b 	bl	808be72 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c9dc:	4603      	mov	r3, r0
 808c9de:	2800      	cmp	r0, #0
 808c9e0:	d0d2      	beq.n	808c988 <mbedtls_mpi_exp_mod+0x2aa>
 808c9e2:	e06f      	b.n	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
 808c9e4:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
 808c9e8:	ebc9 020b 	rsb	r2, r9, fp
 808c9ec:	4093      	lsls	r3, r2

        if( nbits == wsize )
 808c9ee:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
 808c9f0:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
 808c9f4:	d001      	beq.n	808c9fa <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
 808c9f6:	2702      	movs	r7, #2
 808c9f8:	e7c6      	b.n	808c988 <mbedtls_mpi_exp_mod+0x2aa>
 808c9fa:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808c9fc:	ab0b      	add	r3, sp, #44	; 0x2c
 808c9fe:	9300      	str	r3, [sp, #0]
 808ca00:	462a      	mov	r2, r5
 808ca02:	4623      	mov	r3, r4
 808ca04:	4631      	mov	r1, r6
 808ca06:	4630      	mov	r0, r6
 808ca08:	f7ff fa33 	bl	808be72 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808ca0c:	4603      	mov	r3, r0
 808ca0e:	2800      	cmp	r0, #0
 808ca10:	d158      	bne.n	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 808ca12:	3701      	adds	r7, #1
 808ca14:	45bb      	cmp	fp, r7
 808ca16:	d1f1      	bne.n	808c9fc <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 808ca18:	ab0b      	add	r3, sp, #44	; 0x2c
 808ca1a:	a814      	add	r0, sp, #80	; 0x50
 808ca1c:	210c      	movs	r1, #12
 808ca1e:	9300      	str	r3, [sp, #0]
 808ca20:	fb01 0108 	mla	r1, r1, r8, r0
 808ca24:	4623      	mov	r3, r4
 808ca26:	462a      	mov	r2, r5
 808ca28:	4630      	mov	r0, r6
 808ca2a:	f7ff fa22 	bl	808be72 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808ca2e:	4603      	mov	r3, r0
 808ca30:	2800      	cmp	r0, #0
 808ca32:	d147      	bne.n	808cac4 <mbedtls_mpi_exp_mod+0x3e6>

            state--;
 808ca34:	2701      	movs	r7, #1
            nbits = 0;
 808ca36:	4680      	mov	r8, r0
            wbits = 0;
 808ca38:	4681      	mov	r9, r0
 808ca3a:	e7a5      	b.n	808c988 <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808ca3c:	4623      	mov	r3, r4
 808ca3e:	f8cd a000 	str.w	sl, [sp]
 808ca42:	462a      	mov	r2, r5
 808ca44:	4631      	mov	r1, r6
 808ca46:	4630      	mov	r0, r6
 808ca48:	f7ff fa13 	bl	808be72 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808ca4c:	4603      	mov	r3, r0
 808ca4e:	2800      	cmp	r0, #0
 808ca50:	d138      	bne.n	808cac4 <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808ca52:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
 808ca54:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
 808ca58:	ea18 0f03 	tst.w	r8, r3
 808ca5c:	d103      	bne.n	808ca66 <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 808ca5e:	3701      	adds	r7, #1
 808ca60:	454f      	cmp	r7, r9
 808ca62:	d1eb      	bne.n	808ca3c <mbedtls_mpi_exp_mod+0x35e>
 808ca64:	e00b      	b.n	808ca7e <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 808ca66:	4623      	mov	r3, r4
 808ca68:	f8cd a000 	str.w	sl, [sp]
 808ca6c:	462a      	mov	r2, r5
 808ca6e:	a917      	add	r1, sp, #92	; 0x5c
 808ca70:	4630      	mov	r0, r6
 808ca72:	f7ff f9fe 	bl	808be72 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808ca76:	4603      	mov	r3, r0
 808ca78:	2800      	cmp	r0, #0
 808ca7a:	d0f0      	beq.n	808ca5e <mbedtls_mpi_exp_mod+0x380>
 808ca7c:	e022      	b.n	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808ca7e:	2301      	movs	r3, #1
 808ca80:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808ca82:	9311      	str	r3, [sp, #68]	; 0x44
 808ca84:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 808ca86:	ab07      	add	r3, sp, #28
 808ca88:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808ca8a:	f8cd a000 	str.w	sl, [sp]
 808ca8e:	4623      	mov	r3, r4
 808ca90:	462a      	mov	r2, r5
 808ca92:	a911      	add	r1, sp, #68	; 0x44
 808ca94:	4630      	mov	r0, r6
 808ca96:	f7ff f9ec 	bl	808be72 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808ca9a:	4603      	mov	r3, r0
 808ca9c:	b990      	cbnz	r0, 808cac4 <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 808ca9e:	9a04      	ldr	r2, [sp, #16]
 808caa0:	3201      	adds	r2, #1
 808caa2:	d10f      	bne.n	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
 808caa4:	9a02      	ldr	r2, [sp, #8]
 808caa6:	6852      	ldr	r2, [r2, #4]
 808caa8:	b162      	cbz	r2, 808cac4 <mbedtls_mpi_exp_mod+0x3e6>
 808caaa:	9a02      	ldr	r2, [sp, #8]
 808caac:	6892      	ldr	r2, [r2, #8]
 808caae:	6812      	ldr	r2, [r2, #0]
 808cab0:	07d2      	lsls	r2, r2, #31
 808cab2:	d507      	bpl.n	808cac4 <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
 808cab4:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808cab6:	4632      	mov	r2, r6
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    {
        X->s = -1;
 808cab8:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808caba:	4629      	mov	r1, r5
 808cabc:	4630      	mov	r0, r6
 808cabe:	f7ff fb31 	bl	808c124 <mbedtls_mpi_add_mpi>
 808cac2:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808cac4:	2201      	movs	r2, #1
 808cac6:	f10b 34ff 	add.w	r4, fp, #4294967295
 808caca:	fa02 f404 	lsl.w	r4, r2, r4
 808cace:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 808cad2:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808cad4:	42ac      	cmp	r4, r5
 808cad6:	9302      	str	r3, [sp, #8]
 808cad8:	d207      	bcs.n	808caea <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
 808cada:	ab14      	add	r3, sp, #80	; 0x50
 808cadc:	fb06 3004 	mla	r0, r6, r4, r3
 808cae0:	f7fe ffcd 	bl	808ba7e <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808cae4:	3401      	adds	r4, #1
 808cae6:	9b02      	ldr	r3, [sp, #8]
 808cae8:	e7f4      	b.n	808cad4 <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 808caea:	a817      	add	r0, sp, #92	; 0x5c
 808caec:	f7fe ffc7 	bl	808ba7e <mbedtls_mpi_free>
 808caf0:	a80b      	add	r0, sp, #44	; 0x2c
 808caf2:	f7fe ffc4 	bl	808ba7e <mbedtls_mpi_free>
 808caf6:	a80e      	add	r0, sp, #56	; 0x38
 808caf8:	f7fe ffc1 	bl	808ba7e <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 808cafc:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808cb00:	9b02      	ldr	r3, [sp, #8]
 808cb02:	b10a      	cbz	r2, 808cb08 <mbedtls_mpi_exp_mod+0x42a>
 808cb04:	6892      	ldr	r2, [r2, #8]
 808cb06:	b922      	cbnz	r2, 808cb12 <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
 808cb08:	a808      	add	r0, sp, #32
 808cb0a:	9302      	str	r3, [sp, #8]
 808cb0c:	f7fe ffb7 	bl	808ba7e <mbedtls_mpi_free>

    return( ret );
 808cb10:	9b02      	ldr	r3, [sp, #8]
 808cb12:	4618      	mov	r0, r3
}
 808cb14:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 808cb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808cb1c <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808cb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808cb1e:	b08b      	sub	sp, #44	; 0x2c
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808cb20:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808cb22:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808cb24:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808cb26:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808cb28:	4615      	mov	r5, r2
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808cb2a:	9601      	str	r6, [sp, #4]
    X->n = 0;
 808cb2c:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808cb2e:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808cb30:	9604      	str	r6, [sp, #16]
    X->n = 0;
 808cb32:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808cb34:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808cb36:	9607      	str	r6, [sp, #28]
    X->n = 0;
 808cb38:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808cb3a:	9309      	str	r3, [sp, #36]	; 0x24
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808cb3c:	f7fe ffe1 	bl	808bb02 <mbedtls_mpi_copy>
 808cb40:	4604      	mov	r4, r0
 808cb42:	2800      	cmp	r0, #0
 808cb44:	d163      	bne.n	808cc0e <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808cb46:	4629      	mov	r1, r5
 808cb48:	a807      	add	r0, sp, #28
 808cb4a:	f7fe ffda 	bl	808bb02 <mbedtls_mpi_copy>
 808cb4e:	4604      	mov	r4, r0
 808cb50:	2800      	cmp	r0, #0
 808cb52:	d15c      	bne.n	808cc0e <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
 808cb54:	a804      	add	r0, sp, #16
 808cb56:	f7ff f82b 	bl	808bbb0 <mbedtls_mpi_lsb>
 808cb5a:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 808cb5c:	a807      	add	r0, sp, #28
 808cb5e:	f7ff f827 	bl	808bbb0 <mbedtls_mpi_lsb>
 808cb62:	4285      	cmp	r5, r0
 808cb64:	bf28      	it	cs
 808cb66:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 808cb68:	a804      	add	r0, sp, #16
 808cb6a:	4629      	mov	r1, r5
 808cb6c:	f7ff f906 	bl	808bd7c <mbedtls_mpi_shift_r>
 808cb70:	4604      	mov	r4, r0
 808cb72:	2800      	cmp	r0, #0
 808cb74:	d14b      	bne.n	808cc0e <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 808cb76:	4629      	mov	r1, r5
 808cb78:	a807      	add	r0, sp, #28
 808cb7a:	f7ff f8ff 	bl	808bd7c <mbedtls_mpi_shift_r>
 808cb7e:	4604      	mov	r4, r0
 808cb80:	2800      	cmp	r0, #0
 808cb82:	d144      	bne.n	808cc0e <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
 808cb84:	9607      	str	r6, [sp, #28]
 808cb86:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 808cb88:	2100      	movs	r1, #0
 808cb8a:	a804      	add	r0, sp, #16
 808cb8c:	f7ff fa1a 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808cb90:	2800      	cmp	r0, #0
 808cb92:	d031      	beq.n	808cbf8 <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 808cb94:	a804      	add	r0, sp, #16
 808cb96:	f7ff f80b 	bl	808bbb0 <mbedtls_mpi_lsb>
 808cb9a:	4601      	mov	r1, r0
 808cb9c:	a804      	add	r0, sp, #16
 808cb9e:	f7ff f8ed 	bl	808bd7c <mbedtls_mpi_shift_r>
 808cba2:	4604      	mov	r4, r0
 808cba4:	2800      	cmp	r0, #0
 808cba6:	d132      	bne.n	808cc0e <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 808cba8:	a807      	add	r0, sp, #28
 808cbaa:	f7ff f801 	bl	808bbb0 <mbedtls_mpi_lsb>
 808cbae:	4601      	mov	r1, r0
 808cbb0:	a807      	add	r0, sp, #28
 808cbb2:	f7ff f8e3 	bl	808bd7c <mbedtls_mpi_shift_r>
 808cbb6:	4604      	mov	r4, r0
 808cbb8:	bb48      	cbnz	r0, 808cc0e <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 808cbba:	a907      	add	r1, sp, #28
 808cbbc:	a804      	add	r0, sp, #16
 808cbbe:	f7ff f9bc 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
 808cbc2:	2800      	cmp	r0, #0
 808cbc4:	db09      	blt.n	808cbda <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 808cbc6:	a904      	add	r1, sp, #16
 808cbc8:	aa07      	add	r2, sp, #28
 808cbca:	4608      	mov	r0, r1
 808cbcc:	f7ff fa6a 	bl	808c0a4 <mbedtls_mpi_sub_abs>
 808cbd0:	4604      	mov	r4, r0
 808cbd2:	b9e0      	cbnz	r0, 808cc0e <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 808cbd4:	2101      	movs	r1, #1
 808cbd6:	a804      	add	r0, sp, #16
 808cbd8:	e008      	b.n	808cbec <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 808cbda:	a907      	add	r1, sp, #28
 808cbdc:	aa04      	add	r2, sp, #16
 808cbde:	4608      	mov	r0, r1
 808cbe0:	f7ff fa60 	bl	808c0a4 <mbedtls_mpi_sub_abs>
 808cbe4:	4604      	mov	r4, r0
 808cbe6:	b990      	cbnz	r0, 808cc0e <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 808cbe8:	2101      	movs	r1, #1
 808cbea:	a807      	add	r0, sp, #28
 808cbec:	f7ff f8c6 	bl	808bd7c <mbedtls_mpi_shift_r>
 808cbf0:	4604      	mov	r4, r0
 808cbf2:	2800      	cmp	r0, #0
 808cbf4:	d0c8      	beq.n	808cb88 <mbedtls_mpi_gcd+0x6c>
 808cbf6:	e00a      	b.n	808cc0e <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 808cbf8:	4629      	mov	r1, r5
 808cbfa:	a807      	add	r0, sp, #28
 808cbfc:	f7ff f86f 	bl	808bcde <mbedtls_mpi_shift_l>
 808cc00:	4604      	mov	r4, r0
 808cc02:	b920      	cbnz	r0, 808cc0e <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 808cc04:	a907      	add	r1, sp, #28
 808cc06:	4638      	mov	r0, r7
 808cc08:	f7fe ff7b 	bl	808bb02 <mbedtls_mpi_copy>
 808cc0c:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 808cc0e:	a801      	add	r0, sp, #4
 808cc10:	f7fe ff35 	bl	808ba7e <mbedtls_mpi_free>
 808cc14:	a804      	add	r0, sp, #16
 808cc16:	f7fe ff32 	bl	808ba7e <mbedtls_mpi_free>
 808cc1a:	a807      	add	r0, sp, #28
 808cc1c:	f7fe ff2f 	bl	808ba7e <mbedtls_mpi_free>

    return( ret );
}
 808cc20:	4620      	mov	r0, r4
 808cc22:	b00b      	add	sp, #44	; 0x2c
 808cc24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808cc26 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808cc26:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808cc28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808cc2c:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 808cc30:	4605      	mov	r5, r0
 808cc32:	460c      	mov	r4, r1
 808cc34:	4616      	mov	r6, r2
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808cc36:	d814      	bhi.n	808cc62 <mbedtls_mpi_fill_random+0x3c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 808cc38:	460a      	mov	r2, r1
 808cc3a:	4618      	mov	r0, r3
 808cc3c:	4669      	mov	r1, sp
 808cc3e:	47b0      	blx	r6
 808cc40:	b920      	cbnz	r0, 808cc4c <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 808cc42:	4622      	mov	r2, r4
 808cc44:	4669      	mov	r1, sp
 808cc46:	4628      	mov	r0, r5
 808cc48:	f7fe fff1 	bl	808bc2e <mbedtls_mpi_read_binary>
 808cc4c:	2300      	movs	r3, #0
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
}

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808cc4e:	f240 4401 	movw	r4, #1025	; 0x401
 808cc52:	4619      	mov	r1, r3
 808cc54:	eb0d 0203 	add.w	r2, sp, r3
 808cc58:	3301      	adds	r3, #1
 808cc5a:	42a3      	cmp	r3, r4
 808cc5c:	d003      	beq.n	808cc66 <mbedtls_mpi_fill_random+0x40>
 808cc5e:	7011      	strb	r1, [r2, #0]
 808cc60:	e7f8      	b.n	808cc54 <mbedtls_mpi_fill_random+0x2e>
{
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808cc62:	f06f 0003 	mvn.w	r0, #3
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    return( ret );
}
 808cc66:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 808cc6a:	bd70      	pop	{r4, r5, r6, pc}

0808cc6c <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808cc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808cc70:	4680      	mov	r8, r0
 808cc72:	b09c      	sub	sp, #112	; 0x70
 808cc74:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808cc76:	4610      	mov	r0, r2
 808cc78:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808cc7a:	4616      	mov	r6, r2
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808cc7c:	f7ff f9a2 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808cc80:	2800      	cmp	r0, #0
 808cc82:	f340 814c 	ble.w	808cf1e <mbedtls_mpi_inv_mod+0x2b2>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808cc86:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808cc88:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808cc8a:	4632      	mov	r2, r6
 808cc8c:	4639      	mov	r1, r7
 808cc8e:	a801      	add	r0, sp, #4
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808cc90:	9504      	str	r5, [sp, #16]
    X->n = 0;
 808cc92:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808cc94:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808cc96:	9507      	str	r5, [sp, #28]
    X->n = 0;
 808cc98:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808cc9a:	9309      	str	r3, [sp, #36]	; 0x24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808cc9c:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 808cc9e:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 808cca0:	930c      	str	r3, [sp, #48]	; 0x30
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808cca2:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 808cca4:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 808cca6:	930f      	str	r3, [sp, #60]	; 0x3c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808cca8:	9501      	str	r5, [sp, #4]
    X->n = 0;
 808ccaa:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808ccac:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808ccae:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 808ccb0:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 808ccb2:	9312      	str	r3, [sp, #72]	; 0x48
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808ccb4:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 808ccb6:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 808ccb8:	9315      	str	r3, [sp, #84]	; 0x54
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808ccba:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 808ccbc:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 808ccbe:	9318      	str	r3, [sp, #96]	; 0x60
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808ccc0:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 808ccc2:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 808ccc4:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808ccc6:	f7ff ff29 	bl	808cb1c <mbedtls_mpi_gcd>
 808ccca:	4604      	mov	r4, r0
 808cccc:	2800      	cmp	r0, #0
 808ccce:	f040 8109 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 808ccd2:	4629      	mov	r1, r5
 808ccd4:	a801      	add	r0, sp, #4
 808ccd6:	f7ff f975 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808ccda:	2800      	cmp	r0, #0
 808ccdc:	f040 8100 	bne.w	808cee0 <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 808cce0:	4632      	mov	r2, r6
 808cce2:	4639      	mov	r1, r7
 808cce4:	a804      	add	r0, sp, #16
 808cce6:	f7ff fcc8 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808ccea:	4604      	mov	r4, r0
 808ccec:	2800      	cmp	r0, #0
 808ccee:	f040 80f9 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 808ccf2:	a904      	add	r1, sp, #16
 808ccf4:	a807      	add	r0, sp, #28
 808ccf6:	f7fe ff04 	bl	808bb02 <mbedtls_mpi_copy>
 808ccfa:	4604      	mov	r4, r0
 808ccfc:	2800      	cmp	r0, #0
 808ccfe:	f040 80f1 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 808cd02:	4631      	mov	r1, r6
 808cd04:	a810      	add	r0, sp, #64	; 0x40
 808cd06:	f7fe fefc 	bl	808bb02 <mbedtls_mpi_copy>
 808cd0a:	4604      	mov	r4, r0
 808cd0c:	2800      	cmp	r0, #0
 808cd0e:	f040 80e9 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 808cd12:	4631      	mov	r1, r6
 808cd14:	a813      	add	r0, sp, #76	; 0x4c
 808cd16:	f7fe fef4 	bl	808bb02 <mbedtls_mpi_copy>
 808cd1a:	4604      	mov	r4, r0
 808cd1c:	2800      	cmp	r0, #0
 808cd1e:	f040 80e1 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 808cd22:	4629      	mov	r1, r5
 808cd24:	a80a      	add	r0, sp, #40	; 0x28
 808cd26:	f7fe ff16 	bl	808bb56 <mbedtls_mpi_lset>
 808cd2a:	4604      	mov	r4, r0
 808cd2c:	2800      	cmp	r0, #0
 808cd2e:	f040 80d9 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 808cd32:	4601      	mov	r1, r0
 808cd34:	a80d      	add	r0, sp, #52	; 0x34
 808cd36:	f7fe ff0e 	bl	808bb56 <mbedtls_mpi_lset>
 808cd3a:	4604      	mov	r4, r0
 808cd3c:	2800      	cmp	r0, #0
 808cd3e:	f040 80d1 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 808cd42:	4601      	mov	r1, r0
 808cd44:	a816      	add	r0, sp, #88	; 0x58
 808cd46:	f7fe ff06 	bl	808bb56 <mbedtls_mpi_lset>
 808cd4a:	4604      	mov	r4, r0
 808cd4c:	2800      	cmp	r0, #0
 808cd4e:	f040 80c9 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 808cd52:	4629      	mov	r1, r5
 808cd54:	a819      	add	r0, sp, #100	; 0x64
 808cd56:	f7fe fefe 	bl	808bb56 <mbedtls_mpi_lset>
 808cd5a:	4604      	mov	r4, r0
 808cd5c:	2800      	cmp	r0, #0
 808cd5e:	f040 80c1 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 808cd62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808cd64:	681b      	ldr	r3, [r3, #0]
 808cd66:	07dd      	lsls	r5, r3, #31
 808cd68:	d44c      	bmi.n	808ce04 <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 808cd6a:	2101      	movs	r1, #1
 808cd6c:	a807      	add	r0, sp, #28
 808cd6e:	f7ff f805 	bl	808bd7c <mbedtls_mpi_shift_r>
 808cd72:	4604      	mov	r4, r0
 808cd74:	2800      	cmp	r0, #0
 808cd76:	f040 80b5 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 808cd7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808cd7c:	681b      	ldr	r3, [r3, #0]
 808cd7e:	07dc      	lsls	r4, r3, #31
 808cd80:	d410      	bmi.n	808cda4 <mbedtls_mpi_inv_mod+0x138>
 808cd82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808cd84:	681b      	ldr	r3, [r3, #0]
 808cd86:	07d8      	lsls	r0, r3, #31
 808cd88:	d40c      	bmi.n	808cda4 <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 808cd8a:	2101      	movs	r1, #1
 808cd8c:	a80a      	add	r0, sp, #40	; 0x28
 808cd8e:	f7fe fff5 	bl	808bd7c <mbedtls_mpi_shift_r>
 808cd92:	4604      	mov	r4, r0
 808cd94:	2800      	cmp	r0, #0
 808cd96:	f040 80a5 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 808cd9a:	2101      	movs	r1, #1
 808cd9c:	a80d      	add	r0, sp, #52	; 0x34
 808cd9e:	f7fe ffed 	bl	808bd7c <mbedtls_mpi_shift_r>
 808cda2:	e7da      	b.n	808cd5a <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 808cda4:	a90a      	add	r1, sp, #40	; 0x28
 808cda6:	aa10      	add	r2, sp, #64	; 0x40
 808cda8:	4608      	mov	r0, r1
 808cdaa:	f7ff f9bb 	bl	808c124 <mbedtls_mpi_add_mpi>
 808cdae:	4604      	mov	r4, r0
 808cdb0:	2800      	cmp	r0, #0
 808cdb2:	f040 8097 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 808cdb6:	a90d      	add	r1, sp, #52	; 0x34
 808cdb8:	aa04      	add	r2, sp, #16
 808cdba:	4608      	mov	r0, r1
 808cdbc:	f7ff f9d3 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808cdc0:	4604      	mov	r4, r0
 808cdc2:	2800      	cmp	r0, #0
 808cdc4:	d0e1      	beq.n	808cd8a <mbedtls_mpi_inv_mod+0x11e>
 808cdc6:	e08d      	b.n	808cee4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 808cdc8:	2101      	movs	r1, #1
 808cdca:	a813      	add	r0, sp, #76	; 0x4c
 808cdcc:	f7fe ffd6 	bl	808bd7c <mbedtls_mpi_shift_r>
 808cdd0:	4604      	mov	r4, r0
 808cdd2:	2800      	cmp	r0, #0
 808cdd4:	f040 8086 	bne.w	808cee4 <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 808cdd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 808cdda:	681b      	ldr	r3, [r3, #0]
 808cddc:	07da      	lsls	r2, r3, #31
 808cdde:	d416      	bmi.n	808ce0e <mbedtls_mpi_inv_mod+0x1a2>
 808cde0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808cde2:	681b      	ldr	r3, [r3, #0]
 808cde4:	07db      	lsls	r3, r3, #31
 808cde6:	d412      	bmi.n	808ce0e <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 808cde8:	2101      	movs	r1, #1
 808cdea:	a816      	add	r0, sp, #88	; 0x58
 808cdec:	f7fe ffc6 	bl	808bd7c <mbedtls_mpi_shift_r>
 808cdf0:	4604      	mov	r4, r0
 808cdf2:	2800      	cmp	r0, #0
 808cdf4:	d176      	bne.n	808cee4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 808cdf6:	2101      	movs	r1, #1
 808cdf8:	a819      	add	r0, sp, #100	; 0x64
 808cdfa:	f7fe ffbf 	bl	808bd7c <mbedtls_mpi_shift_r>
 808cdfe:	4604      	mov	r4, r0
 808ce00:	2800      	cmp	r0, #0
 808ce02:	d16f      	bne.n	808cee4 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
 808ce04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808ce06:	681b      	ldr	r3, [r3, #0]
 808ce08:	07d9      	lsls	r1, r3, #31
 808ce0a:	d411      	bmi.n	808ce30 <mbedtls_mpi_inv_mod+0x1c4>
 808ce0c:	e7dc      	b.n	808cdc8 <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 808ce0e:	a916      	add	r1, sp, #88	; 0x58
 808ce10:	aa10      	add	r2, sp, #64	; 0x40
 808ce12:	4608      	mov	r0, r1
 808ce14:	f7ff f986 	bl	808c124 <mbedtls_mpi_add_mpi>
 808ce18:	4604      	mov	r4, r0
 808ce1a:	2800      	cmp	r0, #0
 808ce1c:	d162      	bne.n	808cee4 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 808ce1e:	a919      	add	r1, sp, #100	; 0x64
 808ce20:	aa04      	add	r2, sp, #16
 808ce22:	4608      	mov	r0, r1
 808ce24:	f7ff f99f 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808ce28:	4604      	mov	r4, r0
 808ce2a:	2800      	cmp	r0, #0
 808ce2c:	d0dc      	beq.n	808cde8 <mbedtls_mpi_inv_mod+0x17c>
 808ce2e:	e059      	b.n	808cee4 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 808ce30:	a913      	add	r1, sp, #76	; 0x4c
 808ce32:	a807      	add	r0, sp, #28
 808ce34:	f7ff f881 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
 808ce38:	2800      	cmp	r0, #0
 808ce3a:	db1f      	blt.n	808ce7c <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 808ce3c:	a907      	add	r1, sp, #28
 808ce3e:	aa13      	add	r2, sp, #76	; 0x4c
 808ce40:	4608      	mov	r0, r1
 808ce42:	f7ff f990 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808ce46:	4604      	mov	r4, r0
 808ce48:	2800      	cmp	r0, #0
 808ce4a:	d14b      	bne.n	808cee4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 808ce4c:	a90a      	add	r1, sp, #40	; 0x28
 808ce4e:	aa16      	add	r2, sp, #88	; 0x58
 808ce50:	4608      	mov	r0, r1
 808ce52:	f7ff f988 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808ce56:	4604      	mov	r4, r0
 808ce58:	2800      	cmp	r0, #0
 808ce5a:	d143      	bne.n	808cee4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 808ce5c:	aa19      	add	r2, sp, #100	; 0x64
 808ce5e:	a90d      	add	r1, sp, #52	; 0x34
 808ce60:	4608      	mov	r0, r1
 808ce62:	f7ff f980 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808ce66:	4604      	mov	r4, r0
 808ce68:	2800      	cmp	r0, #0
 808ce6a:	d13b      	bne.n	808cee4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 808ce6c:	2100      	movs	r1, #0
 808ce6e:	a807      	add	r0, sp, #28
 808ce70:	f7ff f8a8 	bl	808bfc4 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
 808ce74:	2800      	cmp	r0, #0
 808ce76:	f47f af74 	bne.w	808cd62 <mbedtls_mpi_inv_mod+0xf6>
 808ce7a:	e017      	b.n	808ceac <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 808ce7c:	a913      	add	r1, sp, #76	; 0x4c
 808ce7e:	aa07      	add	r2, sp, #28
 808ce80:	4608      	mov	r0, r1
 808ce82:	f7ff f970 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808ce86:	4604      	mov	r4, r0
 808ce88:	bb60      	cbnz	r0, 808cee4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 808ce8a:	a916      	add	r1, sp, #88	; 0x58
 808ce8c:	aa0a      	add	r2, sp, #40	; 0x28
 808ce8e:	4608      	mov	r0, r1
 808ce90:	f7ff f969 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808ce94:	4604      	mov	r4, r0
 808ce96:	bb28      	cbnz	r0, 808cee4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 808ce98:	aa0d      	add	r2, sp, #52	; 0x34
 808ce9a:	a919      	add	r1, sp, #100	; 0x64
 808ce9c:	e7e0      	b.n	808ce60 <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 808ce9e:	a916      	add	r1, sp, #88	; 0x58
 808cea0:	4632      	mov	r2, r6
 808cea2:	4608      	mov	r0, r1
 808cea4:	f7ff f93e 	bl	808c124 <mbedtls_mpi_add_mpi>
 808cea8:	4604      	mov	r4, r0
 808ceaa:	b9d8      	cbnz	r0, 808cee4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 808ceac:	2100      	movs	r1, #0
 808ceae:	a816      	add	r0, sp, #88	; 0x58
 808ceb0:	f7ff f888 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808ceb4:	2800      	cmp	r0, #0
 808ceb6:	dbf2      	blt.n	808ce9e <mbedtls_mpi_inv_mod+0x232>
 808ceb8:	e006      	b.n	808cec8 <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 808ceba:	a916      	add	r1, sp, #88	; 0x58
 808cebc:	4632      	mov	r2, r6
 808cebe:	4608      	mov	r0, r1
 808cec0:	f7ff f951 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808cec4:	4604      	mov	r4, r0
 808cec6:	b968      	cbnz	r0, 808cee4 <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 808cec8:	4631      	mov	r1, r6
 808ceca:	a816      	add	r0, sp, #88	; 0x58
 808cecc:	f7ff f835 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
 808ced0:	2800      	cmp	r0, #0
 808ced2:	daf2      	bge.n	808ceba <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 808ced4:	a916      	add	r1, sp, #88	; 0x58
 808ced6:	4640      	mov	r0, r8
 808ced8:	f7fe fe13 	bl	808bb02 <mbedtls_mpi_copy>
 808cedc:	4604      	mov	r4, r0
 808cede:	e001      	b.n	808cee4 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 808cee0:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 808cee4:	a804      	add	r0, sp, #16
 808cee6:	f7fe fdca 	bl	808ba7e <mbedtls_mpi_free>
 808ceea:	a807      	add	r0, sp, #28
 808ceec:	f7fe fdc7 	bl	808ba7e <mbedtls_mpi_free>
 808cef0:	a80a      	add	r0, sp, #40	; 0x28
 808cef2:	f7fe fdc4 	bl	808ba7e <mbedtls_mpi_free>
 808cef6:	a80d      	add	r0, sp, #52	; 0x34
 808cef8:	f7fe fdc1 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 808cefc:	a801      	add	r0, sp, #4
 808cefe:	f7fe fdbe 	bl	808ba7e <mbedtls_mpi_free>
 808cf02:	a810      	add	r0, sp, #64	; 0x40
 808cf04:	f7fe fdbb 	bl	808ba7e <mbedtls_mpi_free>
 808cf08:	a813      	add	r0, sp, #76	; 0x4c
 808cf0a:	f7fe fdb8 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 808cf0e:	a816      	add	r0, sp, #88	; 0x58
 808cf10:	f7fe fdb5 	bl	808ba7e <mbedtls_mpi_free>
 808cf14:	a819      	add	r0, sp, #100	; 0x64
 808cf16:	f7fe fdb2 	bl	808ba7e <mbedtls_mpi_free>

    return( ret );
 808cf1a:	4620      	mov	r0, r4
 808cf1c:	e001      	b.n	808cf22 <mbedtls_mpi_inv_mod+0x2b6>
{
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808cf1e:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
 808cf22:	b01c      	add	sp, #112	; 0x70
 808cf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808cf28 <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 808cf28:	b110      	cbz	r0, 808cf30 <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
 808cf2a:	2300      	movs	r3, #0
 808cf2c:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
 808cf2e:	6043      	str	r3, [r0, #4]
 808cf30:	4770      	bx	lr

0808cf32 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 808cf32:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 808cf34:	4604      	mov	r4, r0
 808cf36:	b160      	cbz	r0, 808cf52 <mbedtls_pk_free+0x20>
 808cf38:	6803      	ldr	r3, [r0, #0]
 808cf3a:	b153      	cbz	r3, 808cf52 <mbedtls_pk_free+0x20>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 808cf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808cf3e:	6840      	ldr	r0, [r0, #4]
 808cf40:	4798      	blx	r3
 808cf42:	f104 0208 	add.w	r2, r4, #8
#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808cf46:	2300      	movs	r3, #0
 808cf48:	4294      	cmp	r4, r2
 808cf4a:	d002      	beq.n	808cf52 <mbedtls_pk_free+0x20>
 808cf4c:	7023      	strb	r3, [r4, #0]
 808cf4e:	3401      	adds	r4, #1
 808cf50:	e7fa      	b.n	808cf48 <mbedtls_pk_free+0x16>
 808cf52:	bd10      	pop	{r4, pc}

0808cf54 <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 808cf54:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 808cf56:	4802      	ldr	r0, [pc, #8]	; (808cf60 <mbedtls_pk_info_from_type+0xc>)
 808cf58:	bf18      	it	ne
 808cf5a:	2000      	movne	r0, #0
 808cf5c:	4770      	bx	lr
 808cf5e:	bf00      	nop
 808cf60:	08094fc4 	.word	0x08094fc4

0808cf64 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 808cf64:	b570      	push	{r4, r5, r6, lr}
 808cf66:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 808cf68:	4605      	mov	r5, r0
 808cf6a:	b148      	cbz	r0, 808cf80 <mbedtls_pk_setup+0x1c>
 808cf6c:	b141      	cbz	r1, 808cf80 <mbedtls_pk_setup+0x1c>
 808cf6e:	6804      	ldr	r4, [r0, #0]
 808cf70:	b934      	cbnz	r4, 808cf80 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 808cf72:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 808cf74:	4798      	blx	r3
 808cf76:	6068      	str	r0, [r5, #4]
 808cf78:	b120      	cbz	r0, 808cf84 <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 808cf7a:	602e      	str	r6, [r5, #0]

    return( 0 );
 808cf7c:	4620      	mov	r0, r4
 808cf7e:	bd70      	pop	{r4, r5, r6, pc}
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808cf80:	4801      	ldr	r0, [pc, #4]	; (808cf88 <mbedtls_pk_setup+0x24>)
 808cf82:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 808cf84:	4801      	ldr	r0, [pc, #4]	; (808cf8c <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
 808cf86:	bd70      	pop	{r4, r5, r6, pc}
 808cf88:	ffffc180 	.word	0xffffc180
 808cf8c:	ffffc080 	.word	0xffffc080

0808cf90 <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 808cf90:	b120      	cbz	r0, 808cf9c <mbedtls_pk_can_do+0xc>
 808cf92:	6803      	ldr	r3, [r0, #0]
 808cf94:	b113      	cbz	r3, 808cf9c <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 808cf96:	68db      	ldr	r3, [r3, #12]
 808cf98:	4608      	mov	r0, r1
 808cf9a:	4718      	bx	r3
}
 808cf9c:	2000      	movs	r0, #0
 808cf9e:	4770      	bx	lr

0808cfa0 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 808cfa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808cfa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 808cfa8:	460e      	mov	r6, r1
 808cfaa:	4617      	mov	r7, r2
 808cfac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( ctx == NULL || ctx->pk_info == NULL ||
 808cfb0:	4604      	mov	r4, r0
 808cfb2:	b910      	cbnz	r0, 808cfba <mbedtls_pk_verify+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808cfb4:	480f      	ldr	r0, [pc, #60]	; (808cff4 <mbedtls_pk_verify+0x54>)
 808cfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808cfba:	6802      	ldr	r2, [r0, #0]
 808cfbc:	2a00      	cmp	r2, #0
 808cfbe:	d0f9      	beq.n	808cfb4 <mbedtls_pk_verify+0x14>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808cfc0:	b93b      	cbnz	r3, 808cfd2 <mbedtls_pk_verify+0x32>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808cfc2:	4608      	mov	r0, r1
 808cfc4:	f7fb f8b0 	bl	8088128 <mbedtls_md_info_from_type>
 808cfc8:	2800      	cmp	r0, #0
 808cfca:	d0f3      	beq.n	808cfb4 <mbedtls_pk_verify+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808cfcc:	f7fb f9f0 	bl	80883b0 <mbedtls_md_get_size>
 808cfd0:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
 808cfd2:	6822      	ldr	r2, [r4, #0]
 808cfd4:	6915      	ldr	r5, [r2, #16]
 808cfd6:	b155      	cbz	r5, 808cfee <mbedtls_pk_verify+0x4e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808cfd8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808cfdc:	f8cd 8020 	str.w	r8, [sp, #32]
 808cfe0:	463a      	mov	r2, r7
 808cfe2:	4631      	mov	r1, r6
 808cfe4:	6860      	ldr	r0, [r4, #4]
 808cfe6:	46ac      	mov	ip, r5
}
 808cfe8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808cfec:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808cfee:	4802      	ldr	r0, [pc, #8]	; (808cff8 <mbedtls_pk_verify+0x58>)
 808cff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cff4:	ffffc180 	.word	0xffffc180
 808cff8:	ffffc100 	.word	0xffffc100

0808cffc <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808cffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808d000:	af08      	add	r7, sp, #32
 808d002:	460d      	mov	r5, r1
 808d004:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 808d008:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 808d00a:	4604      	mov	r4, r0
 808d00c:	b910      	cbnz	r0, 808d014 <mbedtls_pk_sign+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808d00e:	4813      	ldr	r0, [pc, #76]	; (808d05c <mbedtls_pk_sign+0x60>)
 808d010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808d014:	6802      	ldr	r2, [r0, #0]
 808d016:	2a00      	cmp	r2, #0
 808d018:	d0f9      	beq.n	808d00e <mbedtls_pk_sign+0x12>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808d01a:	b93b      	cbnz	r3, 808d02c <mbedtls_pk_sign+0x30>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808d01c:	4608      	mov	r0, r1
 808d01e:	f7fb f883 	bl	8088128 <mbedtls_md_info_from_type>
 808d022:	2800      	cmp	r0, #0
 808d024:	d0f3      	beq.n	808d00e <mbedtls_pk_sign+0x12>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808d026:	f7fb f9c3 	bl	80883b0 <mbedtls_md_get_size>
 808d02a:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
 808d02c:	6822      	ldr	r2, [r4, #0]
 808d02e:	f8d2 e014 	ldr.w	lr, [r2, #20]
 808d032:	f1be 0f00 	cmp.w	lr, #0
 808d036:	d00d      	beq.n	808d054 <mbedtls_pk_sign+0x58>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808d038:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 808d03c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 808d040:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 808d044:	9708      	str	r7, [sp, #32]
 808d046:	4632      	mov	r2, r6
 808d048:	4629      	mov	r1, r5
 808d04a:	6860      	ldr	r0, [r4, #4]
 808d04c:	46f4      	mov	ip, lr
}
 808d04e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808d052:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808d054:	4802      	ldr	r0, [pc, #8]	; (808d060 <mbedtls_pk_sign+0x64>)
 808d056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d05a:	bf00      	nop
 808d05c:	ffffc180 	.word	0xffffc180
 808d060:	ffffc100 	.word	0xffffc100

0808d064 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808d064:	b5f0      	push	{r4, r5, r6, r7, lr}
 808d066:	f8dd e020 	ldr.w	lr, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL )
 808d06a:	b140      	cbz	r0, 808d07e <mbedtls_pk_encrypt+0x1a>
 808d06c:	6804      	ldr	r4, [r0, #0]
 808d06e:	b134      	cbz	r4, 808d07e <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 808d070:	69e4      	ldr	r4, [r4, #28]
 808d072:	b134      	cbz	r4, 808d082 <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808d074:	46a4      	mov	ip, r4
}
 808d076:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808d07a:	6840      	ldr	r0, [r0, #4]
 808d07c:	4760      	bx	ip
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808d07e:	4802      	ldr	r0, [pc, #8]	; (808d088 <mbedtls_pk_encrypt+0x24>)
 808d080:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808d082:	4802      	ldr	r0, [pc, #8]	; (808d08c <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
 808d084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808d086:	bf00      	nop
 808d088:	ffffc180 	.word	0xffffc180
 808d08c:	ffffc100 	.word	0xffffc100

0808d090 <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808d090:	b120      	cbz	r0, 808d09c <mbedtls_pk_get_bitlen+0xc>
 808d092:	6803      	ldr	r3, [r0, #0]
 808d094:	b113      	cbz	r3, 808d09c <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 808d096:	689b      	ldr	r3, [r3, #8]
 808d098:	6840      	ldr	r0, [r0, #4]
 808d09a:	4718      	bx	r3
}
 808d09c:	2000      	movs	r0, #0
 808d09e:	4770      	bx	lr

0808d0a0 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 808d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d0a4:	b087      	sub	sp, #28
 808d0a6:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 808d0aa:	4683      	mov	fp, r0
 808d0ac:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
 808d0b0:	460d      	mov	r5, r1
 808d0b2:	461f      	mov	r7, r3
 808d0b4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if( ctx == NULL || ctx->pk_info == NULL )
 808d0b6:	4614      	mov	r4, r2
 808d0b8:	b90a      	cbnz	r2, 808d0be <mbedtls_pk_verify_ext+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808d0ba:	4823      	ldr	r0, [pc, #140]	; (808d148 <mbedtls_pk_verify_ext+0xa8>)
 808d0bc:	e040      	b.n	808d140 <mbedtls_pk_verify_ext+0xa0>
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808d0be:	6813      	ldr	r3, [r2, #0]
 808d0c0:	2b00      	cmp	r3, #0
 808d0c2:	d0fa      	beq.n	808d0ba <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
 808d0c4:	4601      	mov	r1, r0
 808d0c6:	4610      	mov	r0, r2
 808d0c8:	f7ff ff62 	bl	808cf90 <mbedtls_pk_can_do>
 808d0cc:	2800      	cmp	r0, #0
 808d0ce:	d034      	beq.n	808d13a <mbedtls_pk_verify_ext+0x9a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
 808d0d0:	f1bb 0f06 	cmp.w	fp, #6
 808d0d4:	d123      	bne.n	808d11e <mbedtls_pk_verify_ext+0x7e>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
 808d0d6:	2d00      	cmp	r5, #0
 808d0d8:	d0ef      	beq.n	808d0ba <mbedtls_pk_verify_ext+0x1a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 808d0da:	4620      	mov	r0, r4
 808d0dc:	f7ff ffd8 	bl	808d090 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
 808d0e0:	3007      	adds	r0, #7
 808d0e2:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808d0e6:	d32a      	bcc.n	808d13e <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
 808d0e8:	686b      	ldr	r3, [r5, #4]
 808d0ea:	e88d 0280 	stmia.w	sp, {r7, r9}
 808d0ee:	9304      	str	r3, [sp, #16]
 808d0f0:	782b      	ldrb	r3, [r5, #0]
 808d0f2:	f8cd a014 	str.w	sl, [sp, #20]
 808d0f6:	9303      	str	r3, [sp, #12]
 808d0f8:	f8cd 8008 	str.w	r8, [sp, #8]
 808d0fc:	2300      	movs	r3, #0
 808d0fe:	461a      	mov	r2, r3
 808d100:	4619      	mov	r1, r3
 808d102:	6860      	ldr	r0, [r4, #4]
 808d104:	f7f8 f8dc 	bl	80852c0 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 808d108:	b9d0      	cbnz	r0, 808d140 <mbedtls_pk_verify_ext+0xa0>
 808d10a:	4620      	mov	r0, r4
 808d10c:	f7ff ffc0 	bl	808d090 <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
 808d110:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
 808d112:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808d116:	480d      	ldr	r0, [pc, #52]	; (808d14c <mbedtls_pk_verify_ext+0xac>)
 808d118:	bf98      	it	ls
 808d11a:	2000      	movls	r0, #0
 808d11c:	e010      	b.n	808d140 <mbedtls_pk_verify_ext+0xa0>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 808d11e:	2d00      	cmp	r5, #0
 808d120:	d1cb      	bne.n	808d0ba <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808d122:	464b      	mov	r3, r9
 808d124:	4642      	mov	r2, r8
 808d126:	4639      	mov	r1, r7
 808d128:	4620      	mov	r0, r4
 808d12a:	9611      	str	r6, [sp, #68]	; 0x44
 808d12c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
 808d130:	b007      	add	sp, #28
 808d132:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808d136:	f7ff bf33 	b.w	808cfa0 <mbedtls_pk_verify>
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808d13a:	4805      	ldr	r0, [pc, #20]	; (808d150 <mbedtls_pk_verify_ext+0xb0>)
 808d13c:	e000      	b.n	808d140 <mbedtls_pk_verify_ext+0xa0>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 808d13e:	4805      	ldr	r0, [pc, #20]	; (808d154 <mbedtls_pk_verify_ext+0xb4>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 808d140:	b007      	add	sp, #28
 808d142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d146:	bf00      	nop
 808d148:	ffffc180 	.word	0xffffc180
 808d14c:	ffffc700 	.word	0xffffc700
 808d150:	ffffc100 	.word	0xffffc100
 808d154:	ffffbc80 	.word	0xffffbc80

0808d158 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808d158:	b118      	cbz	r0, 808d162 <mbedtls_pk_get_name+0xa>
 808d15a:	6803      	ldr	r3, [r0, #0]
 808d15c:	b10b      	cbz	r3, 808d162 <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 808d15e:	6858      	ldr	r0, [r3, #4]
 808d160:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
 808d162:	4801      	ldr	r0, [pc, #4]	; (808d168 <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
 808d164:	4770      	bx	lr
 808d166:	bf00      	nop
 808d168:	08095eac 	.word	0x08095eac

0808d16c <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808d16c:	b110      	cbz	r0, 808d174 <mbedtls_pk_get_type+0x8>
 808d16e:	6800      	ldr	r0, [r0, #0]
 808d170:	b100      	cbz	r0, 808d174 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 808d172:	7800      	ldrb	r0, [r0, #0]
}
 808d174:	4770      	bx	lr
	...

0808d178 <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 808d178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d17c:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808d180:	2301      	movs	r3, #1
 808d182:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 808d184:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 808d188:	a904      	add	r1, sp, #16
 808d18a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808d18e:	f013 0180 	ands.w	r1, r3, #128	; 0x80
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 808d192:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808d196:	bf18      	it	ne
 808d198:	211b      	movne	r1, #27
 808d19a:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808d19e:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808d1a0:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808d1a2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808d1a6:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808d1a8:	d1ee      	bne.n	808d188 <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808d1aa:	4c66      	ldr	r4, [pc, #408]	; (808d344 <_ZL14aes_gen_tablesv+0x1cc>)
 808d1ac:	2301      	movs	r3, #1
 808d1ae:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
 808d1b0:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808d1b4:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 808d1b8:	bf18      	it	ne
 808d1ba:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808d1bc:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808d1be:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808d1c2:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808d1c4:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808d1c6:	d1f3      	bne.n	808d1b0 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808d1c8:	4e5f      	ldr	r6, [pc, #380]	; (808d348 <_ZL14aes_gen_tablesv+0x1d0>)
 808d1ca:	2363      	movs	r3, #99	; 0x63
    RSb[0x63] = 0x00;
 808d1cc:	4d5f      	ldr	r5, [pc, #380]	; (808d34c <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808d1ce:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 808d1d0:	2300      	movs	r3, #0
 808d1d2:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 808d1d6:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
 808d1d8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 808d1dc:	aa04      	add	r2, sp, #16
 808d1de:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 808d1e2:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808d1e6:	ea4f 11ee 	mov.w	r1, lr, asr #7
 808d1ea:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
 808d1ee:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808d1f0:	11ca      	asrs	r2, r1, #7
 808d1f2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 808d1f6:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808d1f8:	11d3      	asrs	r3, r2, #7
 808d1fa:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 808d1fe:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
 808d200:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808d204:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
 808d206:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808d20a:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
 808d20e:	404a      	eors	r2, r1
 808d210:	4053      	eors	r3, r2
 808d212:	b2fa      	uxtb	r2, r7
 808d214:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 808d216:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 808d218:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 808d21a:	3401      	adds	r4, #1
 808d21c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 808d220:	d1da      	bne.n	808d1d8 <_ZL14aes_gen_tablesv+0x60>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808d222:	6b83      	ldr	r3, [r0, #56]	; 0x38
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808d224:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808d226:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808d228:	6a43      	ldr	r3, [r0, #36]	; 0x24
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808d22a:	f8df e11c 	ldr.w	lr, [pc, #284]	; 808d348 <_ZL14aes_gen_tablesv+0x1d0>
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808d22e:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808d230:	6b43      	ldr	r3, [r0, #52]	; 0x34
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
 808d232:	f8df c12c 	ldr.w	ip, [pc, #300]	; 808d360 <_ZL14aes_gen_tablesv+0x1e8>

        FT1[i] = ROTL8( FT0[i] );
 808d236:	f8df 812c 	ldr.w	r8, [pc, #300]	; 808d364 <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
 808d23a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 808d368 <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
 808d23e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 808d36c <_ZL14aes_gen_tablesv+0x1f4>

        x = RSb[i];
 808d242:	f8df b108 	ldr.w	fp, [pc, #264]	; 808d34c <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808d246:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808d248:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808d24a:	f812 000e 	ldrb.w	r0, [r2, lr]
 808d24e:	0094      	lsls	r4, r2, #2
        y = XTIME( x ) & 0xFF;
 808d250:	f010 0f80 	tst.w	r0, #128	; 0x80
 808d254:	bf14      	ite	ne
 808d256:	211b      	movne	r1, #27
 808d258:	2100      	moveq	r1, #0
 808d25a:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808d25e:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 808d260:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808d262:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808d266:	404b      	eors	r3, r1
 808d268:	4041      	eors	r1, r0
 808d26a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
 808d26e:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 808d272:	ea4f 6333 	mov.w	r3, r3, ror #24
 808d276:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 808d27a:	ea4f 6333 	mov.w	r3, r3, ror #24
 808d27e:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 808d282:	ea4f 6333 	mov.w	r3, r3, ror #24
 808d286:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]

        x = RSb[i];
 808d28a:	f81b 3002 	ldrb.w	r3, [fp, r2]

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808d28e:	b1d3      	cbz	r3, 808d2c6 <_ZL14aes_gen_tablesv+0x14e>
 808d290:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808d294:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808d298:	9801      	ldr	r0, [sp, #4]
 808d29a:	1845      	adds	r5, r0, r1
 808d29c:	20ff      	movs	r0, #255	; 0xff
 808d29e:	fb95 f6f0 	sdiv	r6, r5, r0
 808d2a2:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 808d2a6:	1bae      	subs	r6, r5, r6
 808d2a8:	ad04      	add	r5, sp, #16
 808d2aa:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808d2ae:	9e02      	ldr	r6, [sp, #8]
 808d2b0:	4431      	add	r1, r6
 808d2b2:	fb91 f0f0 	sdiv	r0, r1, r0
 808d2b6:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808d2ba:	1a09      	subs	r1, r1, r0
 808d2bc:	a804      	add	r0, sp, #16
 808d2be:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808d2c2:	0209      	lsls	r1, r1, #8
 808d2c4:	e001      	b.n	808d2ca <_ZL14aes_gen_tablesv+0x152>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808d2c6:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808d2c8:	4619      	mov	r1, r3
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808d2ca:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808d2cc:	b183      	cbz	r3, 808d2f0 <_ZL14aes_gen_tablesv+0x178>
 808d2ce:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808d2d2:	9803      	ldr	r0, [sp, #12]
 808d2d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808d2d8:	4401      	add	r1, r0
 808d2da:	20ff      	movs	r0, #255	; 0xff
 808d2dc:	fb91 f0f0 	sdiv	r0, r1, r0
 808d2e0:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808d2e4:	1a08      	subs	r0, r1, r0
 808d2e6:	a904      	add	r1, sp, #16
 808d2e8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 808d2ec:	0409      	lsls	r1, r1, #16
 808d2ee:	e000      	b.n	808d2f2 <_ZL14aes_gen_tablesv+0x17a>
 808d2f0:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808d2f2:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808d2f4:	b173      	cbz	r3, 808d314 <_ZL14aes_gen_tablesv+0x19c>
 808d2f6:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808d2fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 808d2fe:	21ff      	movs	r1, #255	; 0xff
 808d300:	443b      	add	r3, r7
 808d302:	fb93 f1f1 	sdiv	r1, r3, r1
 808d306:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 808d30a:	1a59      	subs	r1, r3, r1
 808d30c:	ab04      	add	r3, sp, #16
 808d30e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808d312:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808d314:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808d316:	4b0e      	ldr	r3, [pc, #56]	; (808d350 <_ZL14aes_gen_tablesv+0x1d8>)
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808d318:	3201      	adds	r2, #1
        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808d31a:	50e5      	str	r5, [r4, r3]

        RT1[i] = ROTL8( RT0[i] );
 808d31c:	4b0d      	ldr	r3, [pc, #52]	; (808d354 <_ZL14aes_gen_tablesv+0x1dc>)
 808d31e:	ea4f 6535 	mov.w	r5, r5, ror #24
 808d322:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 808d324:	4b0c      	ldr	r3, [pc, #48]	; (808d358 <_ZL14aes_gen_tablesv+0x1e0>)
 808d326:	ea4f 6535 	mov.w	r5, r5, ror #24
 808d32a:	50e5      	str	r5, [r4, r3]
        RT3[i] = ROTL8( RT2[i] );
 808d32c:	4b0b      	ldr	r3, [pc, #44]	; (808d35c <_ZL14aes_gen_tablesv+0x1e4>)
 808d32e:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808d332:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 808d336:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808d338:	d187      	bne.n	808d24a <_ZL14aes_gen_tablesv+0xd2>

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
    }
}
 808d33a:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 808d33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d342:	bf00      	nop
 808d344:	20002734 	.word	0x20002734
 808d348:	20001634 	.word	0x20001634
 808d34c:	20001534 	.word	0x20001534
 808d350:	20001b34 	.word	0x20001b34
 808d354:	20001f34 	.word	0x20001f34
 808d358:	20002334 	.word	0x20002334
 808d35c:	20001734 	.word	0x20001734
 808d360:	20000534 	.word	0x20000534
 808d364:	20000934 	.word	0x20000934
 808d368:	20000d34 	.word	0x20000d34
 808d36c:	20001134 	.word	0x20001134

0808d370 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 808d370:	f44f 728c 	mov.w	r2, #280	; 0x118
 808d374:	2100      	movs	r1, #0
 808d376:	f006 b912 	b.w	809359e <memset>

0808d37a <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 808d37a:	b138      	cbz	r0, 808d38c <mbedtls_aes_free+0x12>
 808d37c:	f500 728c 	add.w	r2, r0, #280	; 0x118

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 808d380:	2300      	movs	r3, #0
 808d382:	4290      	cmp	r0, r2
 808d384:	d002      	beq.n	808d38c <mbedtls_aes_free+0x12>
 808d386:	7003      	strb	r3, [r0, #0]
 808d388:	3001      	adds	r0, #1
 808d38a:	e7fa      	b.n	808d382 <mbedtls_aes_free+0x8>
 808d38c:	4770      	bx	lr
	...

0808d390 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808d392:	4e7a      	ldr	r6, [pc, #488]	; (808d57c <mbedtls_aes_setkey_enc+0x1ec>)
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808d394:	4604      	mov	r4, r0
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808d396:	6833      	ldr	r3, [r6, #0]
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808d398:	460f      	mov	r7, r1
 808d39a:	4615      	mov	r5, r2
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808d39c:	b91b      	cbnz	r3, 808d3a6 <mbedtls_aes_setkey_enc+0x16>
    {
        aes_gen_tables();
 808d39e:	f7ff feeb 	bl	808d178 <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
 808d3a2:	2301      	movs	r3, #1
 808d3a4:	6033      	str	r3, [r6, #0]

    }
#endif

    switch( keybits )
 808d3a6:	2dc0      	cmp	r5, #192	; 0xc0
 808d3a8:	d007      	beq.n	808d3ba <mbedtls_aes_setkey_enc+0x2a>
 808d3aa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 808d3ae:	d006      	beq.n	808d3be <mbedtls_aes_setkey_enc+0x2e>
 808d3b0:	2d80      	cmp	r5, #128	; 0x80
 808d3b2:	f040 80dd 	bne.w	808d570 <mbedtls_aes_setkey_enc+0x1e0>
    {
        case 128: ctx->nr = 10; break;
 808d3b6:	230a      	movs	r3, #10
 808d3b8:	e002      	b.n	808d3c0 <mbedtls_aes_setkey_enc+0x30>
        case 192: ctx->nr = 12; break;
 808d3ba:	230c      	movs	r3, #12
 808d3bc:	e000      	b.n	808d3c0 <mbedtls_aes_setkey_enc+0x30>
        case 256: ctx->nr = 14; break;
 808d3be:	230e      	movs	r3, #14
 808d3c0:	6023      	str	r3, [r4, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808d3c2:	f104 0308 	add.w	r3, r4, #8
 808d3c6:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808d3c8:	096d      	lsrs	r5, r5, #5
 808d3ca:	2000      	movs	r0, #0
 808d3cc:	42a8      	cmp	r0, r5
 808d3ce:	d010      	beq.n	808d3f2 <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 808d3d0:	eb07 0180 	add.w	r1, r7, r0, lsl #2
 808d3d4:	788a      	ldrb	r2, [r1, #2]
 808d3d6:	784e      	ldrb	r6, [r1, #1]
 808d3d8:	0412      	lsls	r2, r2, #16
 808d3da:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 808d3de:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
 808d3e2:	78c9      	ldrb	r1, [r1, #3]
 808d3e4:	4332      	orrs	r2, r6
 808d3e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 808d3ea:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808d3ee:	3001      	adds	r0, #1
 808d3f0:	e7ec      	b.n	808d3cc <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808d3f2:	6822      	ldr	r2, [r4, #0]
 808d3f4:	2a0c      	cmp	r2, #12
 808d3f6:	d031      	beq.n	808d45c <mbedtls_aes_setkey_enc+0xcc>
 808d3f8:	2a0e      	cmp	r2, #14
 808d3fa:	d068      	beq.n	808d4ce <mbedtls_aes_setkey_enc+0x13e>
 808d3fc:	2a0a      	cmp	r2, #10
 808d3fe:	f040 80ba 	bne.w	808d576 <mbedtls_aes_setkey_enc+0x1e6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 808d402:	4f5f      	ldr	r7, [pc, #380]	; (808d580 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808d404:	4e5f      	ldr	r6, [pc, #380]	; (808d584 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808d406:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808d408:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d40a:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 808d40e:	681a      	ldr	r2, [r3, #0]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808d410:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d412:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808d414:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d418:	5cb0      	ldrb	r0, [r6, r2]
 808d41a:	0e22      	lsrs	r2, r4, #24
 808d41c:	5cb2      	ldrb	r2, [r6, r2]
 808d41e:	4041      	eors	r1, r0
 808d420:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808d424:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d426:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808d428:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d42a:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 808d42e:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d432:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808d434:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d438:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808d43c:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808d440:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 808d442:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 808d446:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808d44a:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 808d44c:	ea82 0201 	eor.w	r2, r2, r1
 808d450:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 808d452:	ea82 0204 	eor.w	r2, r2, r4
 808d456:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808d458:	d1d6      	bne.n	808d408 <mbedtls_aes_setkey_enc+0x78>
 808d45a:	e08c      	b.n	808d576 <mbedtls_aes_setkey_enc+0x1e6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 808d45c:	4e48      	ldr	r6, [pc, #288]	; (808d580 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808d45e:	4d49      	ldr	r5, [pc, #292]	; (808d584 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808d460:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d462:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808d466:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d468:	681a      	ldr	r2, [r3, #0]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808d46a:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d46c:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808d46e:	f3c0 2107 	ubfx	r1, r0, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d472:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808d474:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d476:	ea82 0201 	eor.w	r2, r2, r1
 808d47a:	ea4f 6110 	mov.w	r1, r0, lsr #24
 808d47e:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808d480:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d484:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808d488:	b2c1      	uxtb	r1, r0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d48a:	5c69      	ldrb	r1, [r5, r1]
 808d48c:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 808d490:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d494:	5c69      	ldrb	r1, [r5, r1]
 808d496:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808d49a:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808d49e:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 808d4a0:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 808d4a4:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808d4a8:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 808d4aa:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 808d4ae:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 808d4b2:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 808d4b4:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 808d4b8:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 808d4bc:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 808d4be:	ea82 0201 	eor.w	r2, r2, r1
 808d4c2:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 808d4c4:	ea82 0200 	eor.w	r2, r2, r0
 808d4c8:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808d4ca:	d1ca      	bne.n	808d462 <mbedtls_aes_setkey_enc+0xd2>
 808d4cc:	e053      	b.n	808d576 <mbedtls_aes_setkey_enc+0x1e6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 808d4ce:	4e2c      	ldr	r6, [pc, #176]	; (808d580 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808d4d0:	482c      	ldr	r0, [pc, #176]	; (808d584 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808d4d2:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d4d4:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808d4d8:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d4da:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808d4dc:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d4de:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808d4e0:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d4e4:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808d4e6:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d4e8:	4051      	eors	r1, r2
 808d4ea:	0e22      	lsrs	r2, r4, #24
 808d4ec:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808d4ee:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d4f0:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808d4f4:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d4f6:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808d4f8:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d4fc:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 808d500:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d504:	5c82      	ldrb	r2, [r0, r2]
 808d506:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808d50a:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808d50e:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 808d510:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 808d514:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808d518:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 808d51a:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
 808d51e:	ea87 0701 	eor.w	r7, r7, r1
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808d522:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 808d524:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 808d526:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808d528:	5c82      	ldrb	r2, [r0, r2]
 808d52a:	f853 1c10 	ldr.w	r1, [r3, #-16]
 808d52e:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808d532:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808d536:	5c82      	ldrb	r2, [r0, r2]
 808d538:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 808d53c:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808d540:	5c82      	ldrb	r2, [r0, r2]
 808d542:	f3c7 4707 	ubfx	r7, r7, #16, #8
 808d546:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 808d54a:	5dc2      	ldrb	r2, [r0, r7]
 808d54c:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808d550:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808d554:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
 808d556:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
 808d55a:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808d55e:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 808d560:	ea82 0201 	eor.w	r2, r2, r1
 808d564:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 808d566:	ea82 0204 	eor.w	r2, r2, r4
 808d56a:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808d56c:	d1b2      	bne.n	808d4d4 <mbedtls_aes_setkey_enc+0x144>
 808d56e:	e002      	b.n	808d576 <mbedtls_aes_setkey_enc+0x1e6>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 808d570:	f06f 001f 	mvn.w	r0, #31
 808d574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 808d576:	2000      	movs	r0, #0
}
 808d578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808d57a:	bf00      	nop
 808d57c:	20000530 	.word	0x20000530
 808d580:	20002734 	.word	0x20002734
 808d584:	20001634 	.word	0x20001634

0808d588 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808d588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d58c:	4604      	mov	r4, r0
 808d58e:	460d      	mov	r5, r1
 808d590:	4616      	mov	r6, r2
 808d592:	b0c9      	sub	sp, #292	; 0x124
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 808d594:	a802      	add	r0, sp, #8
 808d596:	f7ff feeb 	bl	808d370 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808d59a:	f104 0308 	add.w	r3, r4, #8
 808d59e:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 808d5a0:	4632      	mov	r2, r6
 808d5a2:	4629      	mov	r1, r5
 808d5a4:	a802      	add	r0, sp, #8
 808d5a6:	f7ff fef3 	bl	808d390 <mbedtls_aes_setkey_enc>
 808d5aa:	4680      	mov	r8, r0
 808d5ac:	2800      	cmp	r0, #0
 808d5ae:	d14b      	bne.n	808d648 <mbedtls_aes_setkey_dec+0xc0>
        goto exit;

    ctx->nr = cty.nr;
 808d5b0:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808d5b2:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 808d5b4:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808d5b6:	010a      	lsls	r2, r1, #4
 808d5b8:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
 808d5ba:	5882      	ldr	r2, [r0, r2]
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808d5bc:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 808d660 <mbedtls_aes_setkey_dec+0xd8>
    }
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
 808d5c0:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 808d5c2:	685a      	ldr	r2, [r3, #4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808d5c4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 808d664 <mbedtls_aes_setkey_dec+0xdc>
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
 808d5c8:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 808d5ca:	689a      	ldr	r2, [r3, #8]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808d5cc:	f8df a098 	ldr.w	sl, [pc, #152]	; 808d668 <mbedtls_aes_setkey_dec+0xe0>

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 808d5d0:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 808d5d2:	68d8      	ldr	r0, [r3, #12]
 808d5d4:	f104 0218 	add.w	r2, r4, #24
 808d5d8:	6160      	str	r0, [r4, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808d5da:	4c1f      	ldr	r4, [pc, #124]	; (808d658 <mbedtls_aes_setkey_dec+0xd0>)
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808d5dc:	3901      	subs	r1, #1
 808d5de:	3b10      	subs	r3, #16
 808d5e0:	2900      	cmp	r1, #0
 808d5e2:	dd29      	ble.n	808d638 <mbedtls_aes_setkey_dec+0xb0>
 808d5e4:	1f1d      	subs	r5, r3, #4
 808d5e6:	f1a2 0e04 	sub.w	lr, r2, #4
 808d5ea:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808d5ee:	f855 0f04 	ldr.w	r0, [r5, #4]!
 808d5f2:	b2c6      	uxtb	r6, r0
 808d5f4:	5da7      	ldrb	r7, [r4, r6]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808d5f6:	0e06      	lsrs	r6, r0, #24
 808d5f8:	5da6      	ldrb	r6, [r4, r6]
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808d5fa:	45ab      	cmp	fp, r5
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808d5fc:	9601      	str	r6, [sp, #4]
 808d5fe:	4e17      	ldr	r6, [pc, #92]	; (808d65c <mbedtls_aes_setkey_dec+0xd4>)
 808d600:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d604:	9e01      	ldr	r6, [sp, #4]
 808d606:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 808d60a:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808d60e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 808d612:	5da6      	ldrb	r6, [r4, r6]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808d614:	f3c0 4007 	ubfx	r0, r0, #16, #8
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808d618:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808d61c:	5c20      	ldrb	r0, [r4, r0]
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808d61e:	ea86 0607 	eor.w	r6, r6, r7
 808d622:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
 808d626:	ea86 0607 	eor.w	r6, r6, r7
 808d62a:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808d62e:	d1de      	bne.n	808d5ee <mbedtls_aes_setkey_dec+0x66>
 808d630:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808d632:	3901      	subs	r1, #1
 808d634:	3b10      	subs	r3, #16
 808d636:	e7d3      	b.n	808d5e0 <mbedtls_aes_setkey_dec+0x58>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 808d638:	6819      	ldr	r1, [r3, #0]
 808d63a:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 808d63c:	6859      	ldr	r1, [r3, #4]
 808d63e:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 808d640:	6899      	ldr	r1, [r3, #8]
 808d642:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 808d644:	68db      	ldr	r3, [r3, #12]
 808d646:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 808d648:	a802      	add	r0, sp, #8
 808d64a:	f7ff fe96 	bl	808d37a <mbedtls_aes_free>

    return( ret );
}
 808d64e:	4640      	mov	r0, r8
 808d650:	b049      	add	sp, #292	; 0x124
 808d652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d656:	bf00      	nop
 808d658:	20001634 	.word	0x20001634
 808d65c:	20001b34 	.word	0x20001b34
 808d660:	20001734 	.word	0x20001734
 808d664:	20001f34 	.word	0x20001f34
 808d668:	20002334 	.word	0x20002334

0808d66c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808d66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808d670:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808d672:	680d      	ldr	r5, [r1, #0]
 808d674:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d676:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808d678:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808d67c:	684d      	ldr	r5, [r1, #4]
 808d67e:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808d680:	688e      	ldr	r6, [r1, #8]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808d682:	406c      	eors	r4, r5
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808d684:	689d      	ldr	r5, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d686:	1040      	asrs	r0, r0, #1
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808d688:	b085      	sub	sp, #20
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d68a:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808d68c:	4075      	eors	r5, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d68e:	68ce      	ldr	r6, [r1, #12]
 808d690:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d692:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d694:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808d698:	4071      	eors	r1, r6
 808d69a:	f8df e364 	ldr.w	lr, [pc, #868]	; 808da00 <mbedtls_internal_aes_encrypt+0x394>
 808d69e:	4ed4      	ldr	r6, [pc, #848]	; (808d9f0 <mbedtls_internal_aes_encrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d6a0:	f8df a354 	ldr.w	sl, [pc, #852]	; 808d9f8 <mbedtls_internal_aes_encrypt+0x38c>
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d6a4:	9002      	str	r0, [sp, #8]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d6a6:	9801      	ldr	r0, [sp, #4]
 808d6a8:	461f      	mov	r7, r3
 808d6aa:	2800      	cmp	r0, #0
 808d6ac:	ea4f 6011 	mov.w	r0, r1, lsr #24
 808d6b0:	f103 0320 	add.w	r3, r3, #32
 808d6b4:	f8df 8348 	ldr.w	r8, [pc, #840]	; 808da00 <mbedtls_internal_aes_encrypt+0x394>
 808d6b8:	fa5f f98b 	uxtb.w	r9, fp
 808d6bc:	f8df c330 	ldr.w	ip, [pc, #816]	; 808d9f0 <mbedtls_internal_aes_encrypt+0x384>
 808d6c0:	9003      	str	r0, [sp, #12]
 808d6c2:	f340 80be 	ble.w	808d842 <mbedtls_internal_aes_encrypt+0x1d6>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d6c6:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 808d6ca:	f85e 8029 	ldr.w	r8, [lr, r9, lsl #2]
 808d6ce:	48c9      	ldr	r0, [pc, #804]	; (808d9f4 <mbedtls_internal_aes_encrypt+0x388>)
 808d6d0:	ea88 0807 	eor.w	r8, r8, r7
 808d6d4:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808d6d8:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 808d6dc:	ea88 0807 	eor.w	r8, r8, r7
 808d6e0:	f3c4 2707 	ubfx	r7, r4, #8, #8
 808d6e4:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 808d6e8:	ea88 0707 	eor.w	r7, r8, r7
 808d6ec:	f85a 802c 	ldr.w	r8, [sl, ip, lsl #2]
 808d6f0:	fa5f fc84 	uxtb.w	ip, r4
 808d6f4:	ea87 0808 	eor.w	r8, r7, r8
 808d6f8:	ea4f 671b 	mov.w	r7, fp, lsr #24
 808d6fc:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808d700:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d704:	f3c5 2c07 	ubfx	ip, r5, #8, #8
 808d708:	ea89 0907 	eor.w	r9, r9, r7
 808d70c:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808d710:	ea89 0707 	eor.w	r7, r9, r7
 808d714:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808d718:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808d71c:	ea87 0709 	eor.w	r7, r7, r9
 808d720:	f85a 902c 	ldr.w	r9, [sl, ip, lsl #2]
 808d724:	fa5f fc85 	uxtb.w	ip, r5
 808d728:	ea87 0909 	eor.w	r9, r7, r9
 808d72c:	0e27      	lsrs	r7, r4, #24
 808d72e:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d732:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808d736:	0e2d      	lsrs	r5, r5, #24
 808d738:	ea8c 0c07 	eor.w	ip, ip, r7
 808d73c:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808d740:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 808d744:	ea8c 0707 	eor.w	r7, ip, r7
 808d748:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 808d74c:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808d750:	b2c9      	uxtb	r1, r1
 808d752:	ea87 070c 	eor.w	r7, r7, ip
 808d756:	f3cb 4c07 	ubfx	ip, fp, #16, #8
 808d75a:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 808d75e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808d762:	ea87 070c 	eor.w	r7, r7, ip
 808d766:	ea81 0c05 	eor.w	ip, r1, r5
 808d76a:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808d76e:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808d772:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808d776:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808d77a:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 808d77e:	ea8c 0101 	eor.w	r1, ip, r1
 808d782:	4069      	eors	r1, r5
 808d784:	ea81 0c04 	eor.w	ip, r1, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d788:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808d78c:	fa5f f488 	uxtb.w	r4, r8
 808d790:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d794:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d798:	b2fd      	uxtb	r5, r7
 808d79a:	4061      	eors	r1, r4
 808d79c:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808d7a0:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808d7a4:	404c      	eors	r4, r1
 808d7a6:	f3c9 2107 	ubfx	r1, r9, #8, #8
 808d7aa:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808d7ae:	404c      	eors	r4, r1
 808d7b0:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808d7b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808d7b8:	ea84 0b01 	eor.w	fp, r4, r1
 808d7bc:	fa5f f489 	uxtb.w	r4, r9
 808d7c0:	ea4f 6118 	mov.w	r1, r8, lsr #24
 808d7c4:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d7c8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d7cc:	4061      	eors	r1, r4
 808d7ce:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 808d7d2:	404c      	eors	r4, r1
 808d7d4:	f3c7 2107 	ubfx	r1, r7, #8, #8
 808d7d8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808d7dc:	0e3f      	lsrs	r7, r7, #24
 808d7de:	404c      	eors	r4, r1
 808d7e0:	f3cc 4107 	ubfx	r1, ip, #16, #8
 808d7e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808d7e8:	404c      	eors	r4, r1
 808d7ea:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808d7ee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d7f2:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808d7f6:	404d      	eors	r5, r1
 808d7f8:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808d7fc:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d800:	4069      	eors	r1, r5
 808d802:	f3cc 2507 	ubfx	r5, ip, #8, #8
 808d806:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808d80a:	fa5f fc8c 	uxtb.w	ip, ip
 808d80e:	4069      	eors	r1, r5
 808d810:	f3c8 4507 	ubfx	r5, r8, #16, #8
 808d814:	f85a 5025 	ldr.w	r5, [sl, r5, lsl #2]
 808d818:	f3c8 2807 	ubfx	r8, r8, #8, #8
 808d81c:	404d      	eors	r5, r1
 808d81e:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808d822:	404f      	eors	r7, r1
 808d824:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808d828:	4079      	eors	r1, r7
 808d82a:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d82e:	9801      	ldr	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d830:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d832:	3801      	subs	r0, #1
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d834:	f85a 7029 	ldr.w	r7, [sl, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d838:	9001      	str	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d83a:	6818      	ldr	r0, [r3, #0]
 808d83c:	4079      	eors	r1, r7
 808d83e:	9002      	str	r0, [sp, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d840:	e731      	b.n	808d6a6 <mbedtls_internal_aes_encrypt+0x3a>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d842:	0e0b      	lsrs	r3, r1, #24
 808d844:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 808d848:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808d84c:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 808d9f4 <mbedtls_internal_aes_encrypt+0x388>
 808d850:	4043      	eors	r3, r0
 808d852:	9802      	ldr	r0, [sp, #8]
 808d854:	4e68      	ldr	r6, [pc, #416]	; (808d9f8 <mbedtls_internal_aes_encrypt+0x38c>)
 808d856:	ea83 0900 	eor.w	r9, r3, r0
 808d85a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 808d85e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 808d862:	b2e0      	uxtb	r0, r4
 808d864:	ea89 0903 	eor.w	r9, r9, r3
 808d868:	f3c5 4307 	ubfx	r3, r5, #16, #8
 808d86c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808d870:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808d874:	ea89 0903 	eor.w	r9, r9, r3
 808d878:	ea4f 631b 	mov.w	r3, fp, lsr #24
 808d87c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808d880:	fa5f fa85 	uxtb.w	sl, r5
 808d884:	4058      	eors	r0, r3
 808d886:	687b      	ldr	r3, [r7, #4]
 808d888:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 808d88c:	4043      	eors	r3, r0
 808d88e:	f3c5 2007 	ubfx	r0, r5, #8, #8
 808d892:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 808d896:	0e2d      	lsrs	r5, r5, #24
 808d898:	4043      	eors	r3, r0
 808d89a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808d89e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808d8a2:	4043      	eors	r3, r0
 808d8a4:	0e20      	lsrs	r0, r4, #24
 808d8a6:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808d8aa:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808d8ae:	ea8a 0a00 	eor.w	sl, sl, r0
 808d8b2:	68b8      	ldr	r0, [r7, #8]
 808d8b4:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808d8b8:	ea8a 0000 	eor.w	r0, sl, r0
 808d8bc:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 808d8c0:	b2c9      	uxtb	r1, r1
 808d8c2:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808d8c6:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 808d8ca:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 808d8ce:	ea88 0501 	eor.w	r5, r8, r1
 808d8d2:	68f9      	ldr	r1, [r7, #12]
 808d8d4:	ea80 000a 	eor.w	r0, r0, sl
 808d8d8:	4069      	eors	r1, r5
 808d8da:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808d8de:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808d8e2:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 808d8e6:	4069      	eors	r1, r5
 808d8e8:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 808d8ea:	4c44      	ldr	r4, [pc, #272]	; (808d9fc <mbedtls_internal_aes_encrypt+0x390>)
 808d8ec:	fa5f f589 	uxtb.w	r5, r9
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d8f0:	f814 e005 	ldrb.w	lr, [r4, r5]
 808d8f4:	693d      	ldr	r5, [r7, #16]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d8f6:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d8fa:	0e0e      	lsrs	r6, r1, #24
 808d8fc:	ea8e 0505 	eor.w	r5, lr, r5
 808d900:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808d904:	f3c3 2607 	ubfx	r6, r3, #8, #8
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d908:	ea80 000a 	eor.w	r0, r0, sl

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d90c:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808d910:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808d914:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d918:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808d91c:	f814 e006 	ldrb.w	lr, [r4, r6]
 808d920:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 808d924:	b2dd      	uxtb	r5, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d926:	5d66      	ldrb	r6, [r4, r5]
 808d928:	697d      	ldr	r5, [r7, #20]
 808d92a:	4075      	eors	r5, r6
 808d92c:	ea4f 6619 	mov.w	r6, r9, lsr #24
 808d930:	5da6      	ldrb	r6, [r4, r6]
 808d932:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808d936:	f3c0 2607 	ubfx	r6, r0, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d93a:	5da6      	ldrb	r6, [r4, r6]
 808d93c:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808d940:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d944:	5da6      	ldrb	r6, [r4, r6]
 808d946:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 808d94a:	b2c5      	uxtb	r5, r0
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d94c:	f814 c005 	ldrb.w	ip, [r4, r5]
 808d950:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d952:	0e00      	lsrs	r0, r0, #24

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d954:	ea8c 0505 	eor.w	r5, ip, r5
 808d958:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 808d95c:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d960:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d962:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808d966:	f3c1 2c07 	ubfx	ip, r1, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d96a:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 808d96e:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d970:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808d974:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d978:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808d97c:	f3c9 2907 	ubfx	r9, r9, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d980:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d984:	f814 c001 	ldrb.w	ip, [r4, r1]
 808d988:	69f9      	ldr	r1, [r7, #28]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808d98a:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d98e:	ea8c 0101 	eor.w	r1, ip, r1
 808d992:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
 808d996:	f814 0009 	ldrb.w	r0, [r4, r9]
 808d99a:	5ce3      	ldrb	r3, [r4, r3]
 808d99c:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808d9a0:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808d9a4:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808d9a8:	7051      	strb	r1, [r2, #1]
 808d9aa:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808d9ae:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808d9b0:	0a31      	lsrs	r1, r6, #8
 808d9b2:	7151      	strb	r1, [r2, #5]
 808d9b4:	0c31      	lsrs	r1, r6, #16
 808d9b6:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808d9b8:	0a29      	lsrs	r1, r5, #8
 808d9ba:	7251      	strb	r1, [r2, #9]
 808d9bc:	0c29      	lsrs	r1, r5, #16
 808d9be:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808d9c0:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d9c2:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808d9c6:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d9c8:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808d9cc:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808d9ce:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808d9d0:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808d9d2:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808d9d4:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808d9d6:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808d9d8:	0c19      	lsrs	r1, r3, #16
 808d9da:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d9dc:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808d9e0:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808d9e2:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808d9e4:	7391      	strb	r1, [r2, #14]
 808d9e6:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808d9e8:	b005      	add	sp, #20
 808d9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d9ee:	bf00      	nop
 808d9f0:	20001134 	.word	0x20001134
 808d9f4:	20000934 	.word	0x20000934
 808d9f8:	20000d34 	.word	0x20000d34
 808d9fc:	20001634 	.word	0x20001634
 808da00:	20000534 	.word	0x20000534

0808da04 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808da04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808da08:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808da0a:	680d      	ldr	r5, [r1, #0]
 808da0c:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808da0e:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808da10:	ea85 0a04 	eor.w	sl, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808da14:	684d      	ldr	r5, [r1, #4]
 808da16:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808da18:	1040      	asrs	r0, r0, #1
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808da1a:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808da1e:	688d      	ldr	r5, [r1, #8]
 808da20:	689c      	ldr	r4, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808da22:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808da24:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808da26:	68cd      	ldr	r5, [r1, #12]
 808da28:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808da2a:	9000      	str	r0, [sp, #0]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808da2c:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808da30:	4069      	eors	r1, r5
 808da32:	f8df e364 	ldr.w	lr, [pc, #868]	; 808dd98 <mbedtls_internal_aes_decrypt+0x394>
 808da36:	4ed4      	ldr	r6, [pc, #848]	; (808dd88 <mbedtls_internal_aes_decrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808da38:	4dd4      	ldr	r5, [pc, #848]	; (808dd8c <mbedtls_internal_aes_decrypt+0x388>)
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808da3a:	9001      	str	r0, [sp, #4]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808da3c:	9800      	ldr	r0, [sp, #0]
 808da3e:	461f      	mov	r7, r3
 808da40:	2800      	cmp	r0, #0
 808da42:	f103 0320 	add.w	r3, r3, #32
 808da46:	f8df 8350 	ldr.w	r8, [pc, #848]	; 808dd98 <mbedtls_internal_aes_decrypt+0x394>
 808da4a:	fa5f f08a 	uxtb.w	r0, sl
 808da4e:	f8df c338 	ldr.w	ip, [pc, #824]	; 808dd88 <mbedtls_internal_aes_decrypt+0x384>
 808da52:	ea4f 691b 	mov.w	r9, fp, lsr #24
 808da56:	f340 80c1 	ble.w	808dbdc <mbedtls_internal_aes_decrypt+0x1d8>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808da5a:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 808da5e:	f85e 8020 	ldr.w	r8, [lr, r0, lsl #2]
 808da62:	48cb      	ldr	r0, [pc, #812]	; (808dd90 <mbedtls_internal_aes_decrypt+0x38c>)
 808da64:	ea88 0807 	eor.w	r8, r8, r7
 808da68:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808da6c:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 808da70:	ea88 0807 	eor.w	r8, r8, r7
 808da74:	f3c1 2707 	ubfx	r7, r1, #8, #8
 808da78:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808da7c:	ea88 0707 	eor.w	r7, r8, r7
 808da80:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 808da84:	fa5f fc8b 	uxtb.w	ip, fp
 808da88:	ea87 0808 	eor.w	r8, r7, r8
 808da8c:	0e27      	lsrs	r7, r4, #24
 808da8e:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808da92:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808da96:	f3ca 2c07 	ubfx	ip, sl, #8, #8
 808da9a:	ea89 0907 	eor.w	r9, r9, r7
 808da9e:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808daa2:	ea89 0707 	eor.w	r7, r9, r7
 808daa6:	f855 902c 	ldr.w	r9, [r5, ip, lsl #2]
 808daaa:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808daae:	ea87 0709 	eor.w	r7, r7, r9
 808dab2:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808dab6:	fa5f fc84 	uxtb.w	ip, r4
 808daba:	ea87 0909 	eor.w	r9, r7, r9
 808dabe:	0e0f      	lsrs	r7, r1, #24
 808dac0:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808dac4:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808dac8:	b2c9      	uxtb	r1, r1
 808daca:	ea8c 0c07 	eor.w	ip, ip, r7
 808dace:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808dad2:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808dad6:	ea8c 0707 	eor.w	r7, ip, r7
 808dada:	f3cb 2c07 	ubfx	ip, fp, #8, #8
 808dade:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 808dae2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808dae6:	ea87 070c 	eor.w	r7, r7, ip
 808daea:	f3ca 4c07 	ubfx	ip, sl, #16, #8
 808daee:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808daf2:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 808daf6:	ea87 070c 	eor.w	r7, r7, ip
 808dafa:	f856 c02a 	ldr.w	ip, [r6, sl, lsl #2]
 808dafe:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808db02:	ea81 0c0c 	eor.w	ip, r1, ip
 808db06:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808db0a:	ea8c 0101 	eor.w	r1, ip, r1
 808db0e:	4061      	eors	r1, r4
 808db10:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808db14:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808db18:	ea81 0c04 	eor.w	ip, r1, r4
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808db1c:	fa5f f488 	uxtb.w	r4, r8
 808db20:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808db24:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808db28:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808db2c:	4061      	eors	r1, r4
 808db2e:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808db32:	404c      	eors	r4, r1
 808db34:	f3cc 2107 	ubfx	r1, ip, #8, #8
 808db38:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 808db3c:	404c      	eors	r4, r1
 808db3e:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808db42:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808db46:	ea84 0a01 	eor.w	sl, r4, r1
 808db4a:	fa5f f489 	uxtb.w	r4, r9
 808db4e:	0e39      	lsrs	r1, r7, #24
 808db50:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808db54:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808db58:	404c      	eors	r4, r1
 808db5a:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 808db5e:	4061      	eors	r1, r4
 808db60:	f3c8 2407 	ubfx	r4, r8, #8, #8
 808db64:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808db68:	4061      	eors	r1, r4
 808db6a:	f3cc 4407 	ubfx	r4, ip, #16, #8
 808db6e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808db72:	ea81 0b04 	eor.w	fp, r1, r4
 808db76:	b2fc      	uxtb	r4, r7
 808db78:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808db7c:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808db80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808db84:	fa5f fc8c 	uxtb.w	ip, ip
 808db88:	404c      	eors	r4, r1
 808db8a:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808db8e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 808db92:	4061      	eors	r1, r4
 808db94:	f3c9 2407 	ubfx	r4, r9, #8, #8
 808db98:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808db9c:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808dba0:	4061      	eors	r1, r4
 808dba2:	f3c8 4407 	ubfx	r4, r8, #16, #8
 808dba6:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808dbaa:	ea4f 6818 	mov.w	r8, r8, lsr #24
 808dbae:	404c      	eors	r4, r1
 808dbb0:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808dbb4:	f856 c028 	ldr.w	ip, [r6, r8, lsl #2]
 808dbb8:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808dbbc:	ea81 0c0c 	eor.w	ip, r1, ip
 808dbc0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808dbc4:	ea8c 0101 	eor.w	r1, ip, r1
 808dbc8:	4079      	eors	r1, r7
 808dbca:	f850 7029 	ldr.w	r7, [r0, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808dbce:	9800      	ldr	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808dbd0:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808dbd2:	3801      	subs	r0, #1
 808dbd4:	9000      	str	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808dbd6:	6818      	ldr	r0, [r3, #0]
 808dbd8:	9001      	str	r0, [sp, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808dbda:	e72f      	b.n	808da3c <mbedtls_internal_aes_decrypt+0x38>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808dbdc:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808dbe0:	f85c 3029 	ldr.w	r3, [ip, r9, lsl #2]
 808dbe4:	4e69      	ldr	r6, [pc, #420]	; (808dd8c <mbedtls_internal_aes_decrypt+0x388>)
 808dbe6:	4043      	eors	r3, r0
 808dbe8:	9801      	ldr	r0, [sp, #4]
 808dbea:	4d69      	ldr	r5, [pc, #420]	; (808dd90 <mbedtls_internal_aes_decrypt+0x38c>)
 808dbec:	ea83 0900 	eor.w	r9, r3, r0
 808dbf0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 808dbf4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808dbf8:	fa5f f08b 	uxtb.w	r0, fp
 808dbfc:	ea89 0903 	eor.w	r9, r9, r3
 808dc00:	f3c4 4307 	ubfx	r3, r4, #16, #8
 808dc04:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808dc08:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808dc0c:	ea89 0903 	eor.w	r9, r9, r3
 808dc10:	0e23      	lsrs	r3, r4, #24
 808dc12:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808dc16:	fa5f fe84 	uxtb.w	lr, r4
 808dc1a:	4058      	eors	r0, r3
 808dc1c:	687b      	ldr	r3, [r7, #4]
 808dc1e:	f858 e02e 	ldr.w	lr, [r8, lr, lsl #2]
 808dc22:	4043      	eors	r3, r0
 808dc24:	f3ca 2007 	ubfx	r0, sl, #8, #8
 808dc28:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808dc2c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808dc30:	4043      	eors	r3, r0
 808dc32:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808dc36:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 808dc3a:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808dc3e:	4043      	eors	r3, r0
 808dc40:	0e08      	lsrs	r0, r1, #24
 808dc42:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808dc46:	b2c9      	uxtb	r1, r1
 808dc48:	ea8e 0e00 	eor.w	lr, lr, r0
 808dc4c:	68b8      	ldr	r0, [r7, #8]
 808dc4e:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808dc52:	ea8e 0000 	eor.w	r0, lr, r0
 808dc56:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 808dc5a:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808dc5e:	0e1e      	lsrs	r6, r3, #24
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808dc60:	ea80 000e 	eor.w	r0, r0, lr
 808dc64:	f3ca 4e07 	ubfx	lr, sl, #16, #8
 808dc68:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 808dc6c:	ea80 000e 	eor.w	r0, r0, lr
 808dc70:	ea4f 6e1a 	mov.w	lr, sl, lsr #24
 808dc74:	f85c 102e 	ldr.w	r1, [ip, lr, lsl #2]
 808dc78:	ea88 0e01 	eor.w	lr, r8, r1
 808dc7c:	68f9      	ldr	r1, [r7, #12]
 808dc7e:	ea8e 0101 	eor.w	r1, lr, r1
 808dc82:	4061      	eors	r1, r4
 808dc84:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808dc88:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808dc8c:	fa5f f589 	uxtb.w	r5, r9
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808dc90:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808dc92:	4c40      	ldr	r4, [pc, #256]	; (808dd94 <mbedtls_internal_aes_decrypt+0x390>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808dc94:	f814 e005 	ldrb.w	lr, [r4, r5]
 808dc98:	693d      	ldr	r5, [r7, #16]
 808dc9a:	ea8e 0505 	eor.w	r5, lr, r5
 808dc9e:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808dca2:	f3c1 2607 	ubfx	r6, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808dca6:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808dcaa:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808dcae:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808dcb2:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808dcb6:	f814 e006 	ldrb.w	lr, [r4, r6]
 808dcba:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 808dcbe:	b2dd      	uxtb	r5, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808dcc0:	5d66      	ldrb	r6, [r4, r5]
 808dcc2:	697d      	ldr	r5, [r7, #20]
 808dcc4:	4075      	eors	r5, r6
 808dcc6:	0e06      	lsrs	r6, r0, #24
 808dcc8:	5da6      	ldrb	r6, [r4, r6]
 808dcca:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808dcce:	f3c9 2607 	ubfx	r6, r9, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808dcd2:	5da6      	ldrb	r6, [r4, r6]
 808dcd4:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808dcd8:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808dcdc:	5da6      	ldrb	r6, [r4, r6]
 808dcde:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 808dce2:	b2c5      	uxtb	r5, r0
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808dce4:	f814 c005 	ldrb.w	ip, [r4, r5]
 808dce8:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808dcea:	f3c0 2007 	ubfx	r0, r0, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808dcee:	ea8c 0505 	eor.w	r5, ip, r5
 808dcf2:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 808dcf6:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 808dcfa:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808dcfc:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808dd00:	f3c3 2c07 	ubfx	ip, r3, #8, #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808dd04:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808dd08:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808dd0a:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808dd0e:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808dd12:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808dd16:	ea4f 6919 	mov.w	r9, r9, lsr #24

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808dd1a:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808dd1e:	f814 c001 	ldrb.w	ip, [r4, r1]
 808dd22:	69f9      	ldr	r1, [r7, #28]
 808dd24:	f814 7009 	ldrb.w	r7, [r4, r9]
 808dd28:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808dd2c:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808dd30:	5ce3      	ldrb	r3, [r4, r3]
 808dd32:	ea81 6107 	eor.w	r1, r1, r7, lsl #24
 808dd36:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808dd3a:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808dd3e:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808dd42:	7051      	strb	r1, [r2, #1]
 808dd44:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808dd48:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808dd4a:	0a31      	lsrs	r1, r6, #8
 808dd4c:	7151      	strb	r1, [r2, #5]
 808dd4e:	0c31      	lsrs	r1, r6, #16
 808dd50:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808dd52:	0a29      	lsrs	r1, r5, #8
 808dd54:	7251      	strb	r1, [r2, #9]
 808dd56:	0c29      	lsrs	r1, r5, #16
 808dd58:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808dd5a:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808dd5c:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808dd60:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808dd62:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808dd66:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808dd68:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808dd6a:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808dd6c:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808dd6e:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808dd70:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808dd72:	0c19      	lsrs	r1, r3, #16
 808dd74:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808dd76:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808dd7a:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808dd7c:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808dd7e:	7391      	strb	r1, [r2, #14]
 808dd80:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808dd82:	b003      	add	sp, #12
 808dd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808dd88:	20001734 	.word	0x20001734
 808dd8c:	20001f34 	.word	0x20001f34
 808dd90:	20002334 	.word	0x20002334
 808dd94:	20001534 	.word	0x20001534
 808dd98:	20001b34 	.word	0x20001b34

0808dd9c <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808dd9c:	b410      	push	{r4}
 808dd9e:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808dda0:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808dda2:	461a      	mov	r2, r3
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808dda4:	4621      	mov	r1, r4
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808dda6:	d102      	bne.n	808ddae <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808dda8:	bc10      	pop	{r4}
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808ddaa:	f7ff bc5f 	b.w	808d66c <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808ddae:	bc10      	pop	{r4}
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 808ddb0:	f7ff be28 	b.w	808da04 <mbedtls_internal_aes_decrypt>

0808ddb4 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808ddb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ddb8:	4698      	mov	r8, r3
 808ddba:	b085      	sub	sp, #20
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808ddbc:	0713      	lsls	r3, r2, #28
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808ddbe:	4681      	mov	r9, r0
 808ddc0:	460f      	mov	r7, r1
 808ddc2:	4616      	mov	r6, r2
 808ddc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 808ddc6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808ddc8:	d15a      	bne.n	808de80 <mbedtls_aes_crypt_cbc+0xcc>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 808ddca:	bba9      	cbnz	r1, 808de38 <mbedtls_aes_crypt_cbc+0x84>
 808ddcc:	462a      	mov	r2, r5
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808ddce:	f10d 0b10 	add.w	fp, sp, #16
 808ddd2:	1ab3      	subs	r3, r6, r2
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808ddd4:	42dd      	cmn	r5, r3
 808ddd6:	d101      	bne.n	808dddc <mbedtls_aes_crypt_cbc+0x28>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 808ddd8:	2000      	movs	r0, #0
 808ddda:	e053      	b.n	808de84 <mbedtls_aes_crypt_cbc+0xd0>

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
 808dddc:	4613      	mov	r3, r2
 808ddde:	46ee      	mov	lr, sp
 808dde0:	466f      	mov	r7, sp
 808dde2:	f102 0a10 	add.w	sl, r2, #16
 808dde6:	46f4      	mov	ip, lr
 808dde8:	6818      	ldr	r0, [r3, #0]
 808ddea:	6859      	ldr	r1, [r3, #4]
 808ddec:	3308      	adds	r3, #8
 808ddee:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 808ddf2:	4553      	cmp	r3, sl
 808ddf4:	46e6      	mov	lr, ip
 808ddf6:	d1f6      	bne.n	808dde6 <mbedtls_aes_crypt_cbc+0x32>
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 808ddf8:	4623      	mov	r3, r4
 808ddfa:	2100      	movs	r1, #0
 808ddfc:	4648      	mov	r0, r9
 808ddfe:	f7ff ffcd 	bl	808dd9c <mbedtls_aes_crypt_ecb>
 808de02:	1e63      	subs	r3, r4, #1
 808de04:	f108 31ff 	add.w	r1, r8, #4294967295
 808de08:	f104 000f 	add.w	r0, r4, #15

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808de0c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808de10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808de14:	4283      	cmp	r3, r0
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808de16:	ea8e 0202 	eor.w	r2, lr, r2
 808de1a:	701a      	strb	r2, [r3, #0]
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808de1c:	d1f6      	bne.n	808de0c <mbedtls_aes_crypt_cbc+0x58>
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808de1e:	4642      	mov	r2, r8
 808de20:	463b      	mov	r3, r7
 808de22:	cb03      	ldmia	r3!, {r0, r1}
 808de24:	455b      	cmp	r3, fp
 808de26:	6010      	str	r0, [r2, #0]
 808de28:	6051      	str	r1, [r2, #4]
 808de2a:	461f      	mov	r7, r3
 808de2c:	f102 0208 	add.w	r2, r2, #8
 808de30:	d1f6      	bne.n	808de20 <mbedtls_aes_crypt_cbc+0x6c>

            input  += 16;
 808de32:	4652      	mov	r2, sl
            output += 16;
 808de34:	3410      	adds	r4, #16
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808de36:	e7cc      	b.n	808ddd2 <mbedtls_aes_crypt_cbc+0x1e>
 808de38:	1e6b      	subs	r3, r5, #1
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808de3a:	2e00      	cmp	r6, #0
 808de3c:	d0cc      	beq.n	808ddd8 <mbedtls_aes_crypt_cbc+0x24>
 808de3e:	f108 30ff 	add.w	r0, r8, #4294967295
 808de42:	1e61      	subs	r1, r4, #1
 808de44:	f103 0510 	add.w	r5, r3, #16
        {
            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808de48:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808de4c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808de50:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808de52:	ea8e 0202 	eor.w	r2, lr, r2
 808de56:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808de5a:	d1f5      	bne.n	808de48 <mbedtls_aes_crypt_cbc+0x94>
                output[i] = (unsigned char)( input[i] ^ iv[i] );

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 808de5c:	4623      	mov	r3, r4
 808de5e:	4622      	mov	r2, r4
 808de60:	4639      	mov	r1, r7
 808de62:	4648      	mov	r0, r9
 808de64:	f7ff ff9a 	bl	808dd9c <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 808de68:	4643      	mov	r3, r8
 808de6a:	f104 0210 	add.w	r2, r4, #16
 808de6e:	f854 1b04 	ldr.w	r1, [r4], #4
 808de72:	4294      	cmp	r4, r2
 808de74:	f843 1b04 	str.w	r1, [r3], #4
 808de78:	d1f9      	bne.n	808de6e <mbedtls_aes_crypt_cbc+0xba>

            input  += 16;
            output += 16;
            length -= 16;
 808de7a:	3e10      	subs	r6, #16
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808de7c:	462b      	mov	r3, r5
 808de7e:	e7dc      	b.n	808de3a <mbedtls_aes_crypt_cbc+0x86>
{
    int i;
    unsigned char temp[16];

    if( length % 16 )
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 808de80:	f06f 0021 	mvn.w	r0, #33	; 0x21
            length -= 16;
        }
    }

    return( 0 );
}
 808de84:	b005      	add	sp, #20
 808de86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808de8a <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_DES_C)
#include "mbedtls/des.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808de8a:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808de8c:	2300      	movs	r3, #0
 808de8e:	4288      	cmp	r0, r1
 808de90:	d002      	beq.n	808de98 <_ZL15mbedtls_zeroizePvj+0xe>
 808de92:	7003      	strb	r3, [r0, #0]
 808de94:	3001      	adds	r0, #1
 808de96:	e7fa      	b.n	808de8e <_ZL15mbedtls_zeroizePvj+0x4>
 808de98:	4770      	bx	lr

0808de9a <_ZL18pkcs12_fill_bufferPhjPKhj>:
    return( ret );
}

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
 808de9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808de9e:	4606      	mov	r6, r0
 808dea0:	460c      	mov	r4, r1
 808dea2:	4617      	mov	r7, r2
 808dea4:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808dea6:	b15c      	cbz	r4, 808dec0 <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
 808dea8:	4544      	cmp	r4, r8
 808deaa:	4625      	mov	r5, r4
 808deac:	bf28      	it	cs
 808deae:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
 808deb0:	4630      	mov	r0, r6
 808deb2:	462a      	mov	r2, r5
 808deb4:	4639      	mov	r1, r7
 808deb6:	f005 fb4c 	bl	8093552 <memcpy>
        p += use_len;
 808deba:	442e      	add	r6, r5
        data_len -= use_len;
 808debc:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808debe:	e7f2      	b.n	808dea6 <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
 808dec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808dec4 <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
 808dec4:	4800      	ldr	r0, [pc, #0]	; (808dec8 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
 808dec6:	4770      	bx	lr
 808dec8:	ffffe100 	.word	0xffffe100

0808decc <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808decc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808ded0:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808ded2:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 808ded6:	9001      	str	r0, [sp, #4]
 808ded8:	460f      	mov	r7, r1
 808deda:	4693      	mov	fp, r2
 808dedc:	4699      	mov	r9, r3
 808dede:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808dee0:	f200 80c3 	bhi.w	808e06a <mbedtls_pkcs12_derivation+0x19e>
 808dee4:	2b40      	cmp	r3, #64	; 0x40
 808dee6:	f200 80c0 	bhi.w	808e06a <mbedtls_pkcs12_derivation+0x19e>
 808deea:	2d40      	cmp	r5, #64	; 0x40
 808deec:	f200 80bd 	bhi.w	808e06a <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
 808def0:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
 808def4:	f7fa f918 	bl	8088128 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 808def8:	9000      	str	r0, [sp, #0]
 808defa:	2800      	cmp	r0, #0
 808defc:	f000 80b7 	beq.w	808e06e <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
 808df00:	a803      	add	r0, sp, #12
 808df02:	f7fa f91d 	bl	8088140 <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808df06:	2200      	movs	r2, #0
 808df08:	9900      	ldr	r1, [sp, #0]
 808df0a:	a803      	add	r0, sp, #12
 808df0c:	f7fa f93e 	bl	808818c <mbedtls_md_setup>
 808df10:	2800      	cmp	r0, #0
 808df12:	f040 80ad 	bne.w	808e070 <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808df16:	9800      	ldr	r0, [sp, #0]
 808df18:	f7fa fa4a 	bl	80883b0 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
 808df1c:	2820      	cmp	r0, #32
 808df1e:	bf8c      	ite	hi
 808df20:	2480      	movhi	r4, #128	; 0x80
 808df22:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808df24:	4622      	mov	r2, r4
 808df26:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808df2a:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808df2c:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808df30:	a816      	add	r0, sp, #88	; 0x58
 808df32:	f005 fb34 	bl	809359e <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808df36:	462b      	mov	r3, r5
 808df38:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 808df3a:	4621      	mov	r1, r4
 808df3c:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808df3e:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808df40:	f7ff ffab 	bl	808de9a <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808df44:	464b      	mov	r3, r9
 808df46:	465a      	mov	r2, fp
 808df48:	4621      	mov	r1, r4
 808df4a:	4628      	mov	r0, r5
 808df4c:	f7ff ffa5 	bl	808de9a <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808df50:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
 808df54:	2f00      	cmp	r7, #0
 808df56:	d072      	beq.n	808e03e <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 808df58:	a803      	add	r0, sp, #12
 808df5a:	f7fa f939 	bl	80881d0 <mbedtls_md_starts>
 808df5e:	4606      	mov	r6, r0
 808df60:	2800      	cmp	r0, #0
 808df62:	d16d      	bne.n	808e040 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
 808df64:	4622      	mov	r2, r4
 808df66:	a916      	add	r1, sp, #88	; 0x58
 808df68:	a803      	add	r0, sp, #12
 808df6a:	f7fa f93b 	bl	80881e4 <mbedtls_md_update>
 808df6e:	4606      	mov	r6, r0
 808df70:	2800      	cmp	r0, #0
 808df72:	d165      	bne.n	808e040 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
 808df74:	4622      	mov	r2, r4
 808df76:	4641      	mov	r1, r8
 808df78:	a803      	add	r0, sp, #12
 808df7a:	f7fa f933 	bl	80881e4 <mbedtls_md_update>
 808df7e:	4606      	mov	r6, r0
 808df80:	2800      	cmp	r0, #0
 808df82:	d15d      	bne.n	808e040 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
 808df84:	4622      	mov	r2, r4
 808df86:	4629      	mov	r1, r5
 808df88:	a803      	add	r0, sp, #12
 808df8a:	f7fa f92b 	bl	80881e4 <mbedtls_md_update>
 808df8e:	4606      	mov	r6, r0
 808df90:	2800      	cmp	r0, #0
 808df92:	d155      	bne.n	808e040 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
 808df94:	a906      	add	r1, sp, #24
 808df96:	a803      	add	r0, sp, #12
 808df98:	f7fa f92e 	bl	80881f8 <mbedtls_md_finish>
 808df9c:	4606      	mov	r6, r0
 808df9e:	2800      	cmp	r0, #0
 808dfa0:	d14e      	bne.n	808e040 <mbedtls_pkcs12_derivation+0x174>
 808dfa2:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808dfa6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 808dfa8:	459b      	cmp	fp, r3
 808dfaa:	d20b      	bcs.n	808dfc4 <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 808dfac:	ab06      	add	r3, sp, #24
 808dfae:	4652      	mov	r2, sl
 808dfb0:	4619      	mov	r1, r3
 808dfb2:	9800      	ldr	r0, [sp, #0]
 808dfb4:	f7fa f92a 	bl	808820c <mbedtls_md>
 808dfb8:	4606      	mov	r6, r0
 808dfba:	2800      	cmp	r0, #0
 808dfbc:	d140      	bne.n	808e040 <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808dfbe:	f10b 0b01 	add.w	fp, fp, #1
 808dfc2:	e7f0      	b.n	808dfa6 <mbedtls_pkcs12_derivation+0xda>
 808dfc4:	4557      	cmp	r7, sl
 808dfc6:	46bb      	mov	fp, r7
 808dfc8:	bf28      	it	cs
 808dfca:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
 808dfcc:	a906      	add	r1, sp, #24
 808dfce:	465a      	mov	r2, fp
 808dfd0:	9801      	ldr	r0, [sp, #4]
 808dfd2:	f005 fabe 	bl	8093552 <memcpy>
        datalen -= use_len;
        p += use_len;
 808dfd6:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
 808dfd8:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
 808dfdc:	445b      	add	r3, fp
 808dfde:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
 808dfe0:	d02d      	beq.n	808e03e <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808dfe2:	4653      	mov	r3, sl
 808dfe4:	aa06      	add	r2, sp, #24
 808dfe6:	4621      	mov	r1, r4
 808dfe8:	4648      	mov	r0, r9
 808dfea:	f7ff ff56 	bl	808de9a <_ZL18pkcs12_fill_bufferPhjPKhj>
 808dfee:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
 808dff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 808dff6:	3201      	adds	r2, #1
 808dff8:	b2d2      	uxtb	r2, r2
 808dffa:	701a      	strb	r2, [r3, #0]
 808dffc:	b91a      	cbnz	r2, 808e006 <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
 808dffe:	454b      	cmp	r3, r9
 808e000:	d1f7      	bne.n	808dff2 <mbedtls_pkcs12_derivation+0x126>
 808e002:	4623      	mov	r3, r4
 808e004:	e001      	b.n	808e00a <mbedtls_pkcs12_derivation+0x13e>
 808e006:	4623      	mov	r3, r4
 808e008:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
 808e00a:	3b01      	subs	r3, #1
 808e00c:	f818 0003 	ldrb.w	r0, [r8, r3]
 808e010:	f813 1009 	ldrb.w	r1, [r3, r9]
 808e014:	4401      	add	r1, r0
 808e016:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
 808e018:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
 808e01c:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
 808e020:	2b00      	cmp	r3, #0
 808e022:	d1f2      	bne.n	808e00a <mbedtls_pkcs12_derivation+0x13e>
 808e024:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
 808e026:	3a01      	subs	r2, #1
 808e028:	5d50      	ldrb	r0, [r2, r5]
 808e02a:	f812 1009 	ldrb.w	r1, [r2, r9]
 808e02e:	4401      	add	r1, r0
 808e030:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
 808e032:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
 808e036:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
 808e038:	2a00      	cmp	r2, #0
 808e03a:	d1f4      	bne.n	808e026 <mbedtls_pkcs12_derivation+0x15a>
 808e03c:	e78a      	b.n	808df54 <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
 808e03e:	2600      	movs	r6, #0

exit:
    mbedtls_zeroize( salt_block, sizeof( salt_block ) );
 808e040:	2180      	movs	r1, #128	; 0x80
 808e042:	4640      	mov	r0, r8
 808e044:	f7ff ff21 	bl	808de8a <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( pwd_block, sizeof( pwd_block ) );
 808e048:	2180      	movs	r1, #128	; 0x80
 808e04a:	4628      	mov	r0, r5
 808e04c:	f7ff ff1d 	bl	808de8a <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_block, sizeof( hash_block ) );
 808e050:	2180      	movs	r1, #128	; 0x80
 808e052:	a876      	add	r0, sp, #472	; 0x1d8
 808e054:	f7ff ff19 	bl	808de8a <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );
 808e058:	2140      	movs	r1, #64	; 0x40
 808e05a:	a806      	add	r0, sp, #24
 808e05c:	f7ff ff15 	bl	808de8a <_ZL15mbedtls_zeroizePvj>

    mbedtls_md_free( &md_ctx );
 808e060:	a803      	add	r0, sp, #12
 808e062:	f7fa f872 	bl	808814a <mbedtls_md_free>

    return( ret );
 808e066:	4630      	mov	r0, r6
 808e068:	e002      	b.n	808e070 <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808e06a:	4803      	ldr	r0, [pc, #12]	; (808e078 <mbedtls_pkcs12_derivation+0x1ac>)
 808e06c:	e000      	b.n	808e070 <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808e06e:	4803      	ldr	r0, [pc, #12]	; (808e07c <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
 808e070:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 808e074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e078:	ffffe080 	.word	0xffffe080
 808e07c:	ffffe100 	.word	0xffffe100

0808e080 <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808e080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e084:	4604      	mov	r4, r0
 808e086:	b0d9      	sub	sp, #356	; 0x164
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808e088:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808e08a:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808e08c:	468b      	mov	fp, r1
 808e08e:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808e090:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808e092:	f7f5 fbed 	bl	8083870 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 808e096:	4605      	mov	r5, r0
 808e098:	2800      	cmp	r0, #0
 808e09a:	f000 80ac 	beq.w	808e1f6 <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808e09e:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808e0a0:	6847      	ldr	r7, [r0, #4]
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808e0a2:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808e0a4:	ea4f 07d7 	mov.w	r7, r7, lsr #3

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
 808e0a8:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
 808e0ac:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808e0ae:	d85e      	bhi.n	808e16e <mbedtls_pkcs12_pbe+0xee>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
 808e0b0:	4631      	mov	r1, r6
 808e0b2:	f44f 7281 	mov.w	r2, #258	; 0x102
 808e0b6:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
 808e0b8:	9608      	str	r6, [sp, #32]
 808e0ba:	9609      	str	r6, [sp, #36]	; 0x24
 808e0bc:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
 808e0be:	f005 fa6e 	bl	809359e <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
 808e0c2:	6863      	ldr	r3, [r4, #4]
 808e0c4:	68a6      	ldr	r6, [r4, #8]

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
 808e0c6:	f104 0a08 	add.w	sl, r4, #8
    const unsigned char *end = params->p + params->len;
 808e0ca:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 808e0cc:	6823      	ldr	r3, [r4, #0]
 808e0ce:	2b30      	cmp	r3, #48	; 0x30
 808e0d0:	f040 8093 	bne.w	808e1fa <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 808e0d4:	2304      	movs	r3, #4
 808e0d6:	aa09      	add	r2, sp, #36	; 0x24
 808e0d8:	4631      	mov	r1, r6
 808e0da:	4650      	mov	r0, sl
 808e0dc:	f7f5 fea2 	bl	8083e24 <mbedtls_asn1_get_tag>
 808e0e0:	b950      	cbnz	r0, 808e0f8 <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808e0e2:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
 808e0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808e0e6:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
 808e0e8:	4413      	add	r3, r2
 808e0ea:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
 808e0ec:	aa07      	add	r2, sp, #28
 808e0ee:	4631      	mov	r1, r6
 808e0f0:	4650      	mov	r0, sl
 808e0f2:	f7f5 fec4 	bl	8083e7e <mbedtls_asn1_get_int>
 808e0f6:	b118      	cbz	r0, 808e100 <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
 808e0f8:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
 808e0fc:	b118      	cbz	r0, 808e106 <mbedtls_pkcs12_pbe+0x86>
 808e0fe:	e07f      	b.n	808e200 <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
 808e100:	68a3      	ldr	r3, [r4, #8]
 808e102:	429e      	cmp	r6, r3
 808e104:	d17b      	bne.n	808e1fe <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808e106:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808e108:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 808e10a:	429a      	cmp	r2, r3
 808e10c:	d007      	beq.n	808e11e <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
 808e10e:	9962      	ldr	r1, [sp, #392]	; 0x188
 808e110:	aa17      	add	r2, sp, #92	; 0x5c
 808e112:	5cc9      	ldrb	r1, [r1, r3]
 808e114:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 808e118:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808e11a:	3301      	adds	r3, #1
 808e11c:	e7f4      	b.n	808e108 <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 808e11e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 808e120:	f8cd 9008 	str.w	r9, [sp, #8]
 808e124:	1c5c      	adds	r4, r3, #1
 808e126:	9b07      	ldr	r3, [sp, #28]
 808e128:	0064      	lsls	r4, r4, #1
 808e12a:	9304      	str	r3, [sp, #16]
 808e12c:	2301      	movs	r3, #1
 808e12e:	9303      	str	r3, [sp, #12]
 808e130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808e132:	aa17      	add	r2, sp, #92	; 0x5c
 808e134:	9301      	str	r3, [sp, #4]
 808e136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808e138:	4639      	mov	r1, r7
 808e13a:	9300      	str	r3, [sp, #0]
 808e13c:	a80f      	add	r0, sp, #60	; 0x3c
 808e13e:	4623      	mov	r3, r4
 808e140:	f7ff fec4 	bl	808decc <mbedtls_pkcs12_derivation>
 808e144:	b9a8      	cbnz	r0, 808e172 <mbedtls_pkcs12_pbe+0xf2>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
 808e146:	f1b8 0f00 	cmp.w	r8, #0
 808e14a:	d014      	beq.n	808e176 <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
 808e14c:	9b07      	ldr	r3, [sp, #28]
 808e14e:	f8cd 9008 	str.w	r9, [sp, #8]
 808e152:	9304      	str	r3, [sp, #16]
 808e154:	2302      	movs	r3, #2
 808e156:	9303      	str	r3, [sp, #12]
 808e158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808e15a:	aa17      	add	r2, sp, #92	; 0x5c
 808e15c:	9301      	str	r3, [sp, #4]
 808e15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808e160:	4641      	mov	r1, r8
 808e162:	9300      	str	r3, [sp, #0]
 808e164:	a80b      	add	r0, sp, #44	; 0x2c
 808e166:	4623      	mov	r3, r4
 808e168:	f7ff feb0 	bl	808decc <mbedtls_pkcs12_derivation>
 808e16c:	e001      	b.n	808e172 <mbedtls_pkcs12_pbe+0xf2>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808e16e:	4826      	ldr	r0, [pc, #152]	; (808e208 <mbedtls_pkcs12_pbe+0x188>)
 808e170:	e046      	b.n	808e200 <mbedtls_pkcs12_pbe+0x180>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
 808e172:	2800      	cmp	r0, #0
 808e174:	d144      	bne.n	808e200 <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
 808e176:	a817      	add	r0, sp, #92	; 0x5c
 808e178:	f7f5 fb9c 	bl	80838b4 <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 808e17c:	4629      	mov	r1, r5
 808e17e:	a817      	add	r0, sp, #92	; 0x5c
 808e180:	f7f5 fd6c 	bl	8083c5c <mbedtls_cipher_setup>
 808e184:	4604      	mov	r4, r0
 808e186:	bb48      	cbnz	r0, 808e1dc <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 808e188:	fa4f f38b 	sxtb.w	r3, fp
 808e18c:	00fa      	lsls	r2, r7, #3
 808e18e:	a90f      	add	r1, sp, #60	; 0x3c
 808e190:	a817      	add	r0, sp, #92	; 0x5c
 808e192:	f7f5 fba5 	bl	80838e0 <mbedtls_cipher_setkey>
 808e196:	4604      	mov	r4, r0
 808e198:	bb00      	cbnz	r0, 808e1dc <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
 808e19a:	68ea      	ldr	r2, [r5, #12]
 808e19c:	a90b      	add	r1, sp, #44	; 0x2c
 808e19e:	a817      	add	r0, sp, #92	; 0x5c
 808e1a0:	f7f5 fbc0 	bl	8083924 <mbedtls_cipher_set_iv>
 808e1a4:	4604      	mov	r4, r0
 808e1a6:	b9c8      	cbnz	r0, 808e1dc <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
 808e1a8:	a817      	add	r0, sp, #92	; 0x5c
 808e1aa:	f7f5 fbdb 	bl	8083964 <mbedtls_cipher_reset>
 808e1ae:	4604      	mov	r4, r0
 808e1b0:	b9a0      	cbnz	r0, 808e1dc <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
 808e1b2:	ad06      	add	r5, sp, #24
 808e1b4:	9500      	str	r5, [sp, #0]
 808e1b6:	a964      	add	r1, sp, #400	; 0x190
 808e1b8:	c90e      	ldmia	r1, {r1, r2, r3}
 808e1ba:	a817      	add	r0, sp, #92	; 0x5c
 808e1bc:	f7f5 fbde 	bl	808397c <mbedtls_cipher_update>
 808e1c0:	4604      	mov	r4, r0
 808e1c2:	b958      	cbnz	r0, 808e1dc <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
 808e1c4:	6829      	ldr	r1, [r5, #0]
 808e1c6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 808e1c8:	462a      	mov	r2, r5
 808e1ca:	4419      	add	r1, r3
 808e1cc:	a817      	add	r0, sp, #92	; 0x5c
 808e1ce:	f7f5 fc9f 	bl	8083b10 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
 808e1d2:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
 808e1d6:	2800      	cmp	r0, #0
 808e1d8:	bf08      	it	eq
 808e1da:	2400      	moveq	r4, #0

exit:
    mbedtls_zeroize( key, sizeof( key ) );
 808e1dc:	2120      	movs	r1, #32
 808e1de:	a80f      	add	r0, sp, #60	; 0x3c
 808e1e0:	f7ff fe53 	bl	808de8a <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( iv,  sizeof( iv  ) );
 808e1e4:	2110      	movs	r1, #16
 808e1e6:	a80b      	add	r0, sp, #44	; 0x2c
 808e1e8:	f7ff fe4f 	bl	808de8a <_ZL15mbedtls_zeroizePvj>
    mbedtls_cipher_free( &cipher_ctx );
 808e1ec:	a817      	add	r0, sp, #92	; 0x5c
 808e1ee:	f7f5 fb65 	bl	80838bc <mbedtls_cipher_free>

    return( ret );
 808e1f2:	4620      	mov	r0, r4
 808e1f4:	e004      	b.n	808e200 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808e1f6:	4805      	ldr	r0, [pc, #20]	; (808e20c <mbedtls_pkcs12_pbe+0x18c>)
 808e1f8:	e002      	b.n	808e200 <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808e1fa:	4805      	ldr	r0, [pc, #20]	; (808e210 <mbedtls_pkcs12_pbe+0x190>)
 808e1fc:	e000      	b.n	808e200 <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808e1fe:	4805      	ldr	r0, [pc, #20]	; (808e214 <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 808e200:	b059      	add	sp, #356	; 0x164
 808e202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e206:	bf00      	nop
 808e208:	ffffe080 	.word	0xffffe080
 808e20c:	ffffe100 	.word	0xffffe100
 808e210:	ffffe11e 	.word	0xffffe11e
 808e214:	ffffe11a 	.word	0xffffe11a

0808e218 <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 808e218:	22d8      	movs	r2, #216	; 0xd8
 808e21a:	2100      	movs	r1, #0
 808e21c:	f005 b9bf 	b.w	809359e <memset>

0808e220 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 808e220:	b138      	cbz	r0, 808e232 <mbedtls_sha512_free+0x12>
 808e222:	f100 02d8 	add.w	r2, r0, #216	; 0xd8

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808e226:	2300      	movs	r3, #0
 808e228:	4290      	cmp	r0, r2
 808e22a:	d002      	beq.n	808e232 <mbedtls_sha512_free+0x12>
 808e22c:	7003      	strb	r3, [r0, #0]
 808e22e:	3001      	adds	r0, #1
 808e230:	e7fa      	b.n	808e228 <mbedtls_sha512_free+0x8>
 808e232:	4770      	bx	lr

0808e234 <mbedtls_sha512_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 808e234:	b508      	push	{r3, lr}
    *dst = *src;
 808e236:	22d8      	movs	r2, #216	; 0xd8
 808e238:	f005 f98b 	bl	8093552 <memcpy>
 808e23c:	bd08      	pop	{r3, pc}
	...

0808e240 <mbedtls_sha512_starts_ret>:
/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 808e240:	2200      	movs	r2, #0
 808e242:	2300      	movs	r3, #0
 808e244:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 808e248:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 808e24c:	bb31      	cbnz	r1, 808e29c <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 808e24e:	a32a      	add	r3, pc, #168	; (adr r3, 808e2f8 <mbedtls_sha512_starts_ret+0xb8>)
 808e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e254:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 808e258:	a329      	add	r3, pc, #164	; (adr r3, 808e300 <mbedtls_sha512_starts_ret+0xc0>)
 808e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e25e:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 808e262:	a329      	add	r3, pc, #164	; (adr r3, 808e308 <mbedtls_sha512_starts_ret+0xc8>)
 808e264:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e268:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 808e26c:	a328      	add	r3, pc, #160	; (adr r3, 808e310 <mbedtls_sha512_starts_ret+0xd0>)
 808e26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e272:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 808e276:	a328      	add	r3, pc, #160	; (adr r3, 808e318 <mbedtls_sha512_starts_ret+0xd8>)
 808e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e27c:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 808e280:	a327      	add	r3, pc, #156	; (adr r3, 808e320 <mbedtls_sha512_starts_ret+0xe0>)
 808e282:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e286:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 808e28a:	a327      	add	r3, pc, #156	; (adr r3, 808e328 <mbedtls_sha512_starts_ret+0xe8>)
 808e28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e290:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 808e294:	a326      	add	r3, pc, #152	; (adr r3, 808e330 <mbedtls_sha512_starts_ret+0xf0>)
 808e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e29a:	e025      	b.n	808e2e8 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 808e29c:	a326      	add	r3, pc, #152	; (adr r3, 808e338 <mbedtls_sha512_starts_ret+0xf8>)
 808e29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e2a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 808e2a6:	a326      	add	r3, pc, #152	; (adr r3, 808e340 <mbedtls_sha512_starts_ret+0x100>)
 808e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e2ac:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 808e2b0:	a325      	add	r3, pc, #148	; (adr r3, 808e348 <mbedtls_sha512_starts_ret+0x108>)
 808e2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e2b6:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 808e2ba:	a325      	add	r3, pc, #148	; (adr r3, 808e350 <mbedtls_sha512_starts_ret+0x110>)
 808e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e2c0:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 808e2c4:	a324      	add	r3, pc, #144	; (adr r3, 808e358 <mbedtls_sha512_starts_ret+0x118>)
 808e2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e2ca:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 808e2ce:	a324      	add	r3, pc, #144	; (adr r3, 808e360 <mbedtls_sha512_starts_ret+0x120>)
 808e2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e2d4:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 808e2d8:	a323      	add	r3, pc, #140	; (adr r3, 808e368 <mbedtls_sha512_starts_ret+0x128>)
 808e2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e2de:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 808e2e2:	a323      	add	r3, pc, #140	; (adr r3, 808e370 <mbedtls_sha512_starts_ret+0x130>)
 808e2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e2e8:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 808e2ec:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 808e2f0:	2000      	movs	r0, #0
 808e2f2:	4770      	bx	lr
 808e2f4:	f3af 8000 	nop.w
 808e2f8:	f3bcc908 	.word	0xf3bcc908
 808e2fc:	6a09e667 	.word	0x6a09e667
 808e300:	84caa73b 	.word	0x84caa73b
 808e304:	bb67ae85 	.word	0xbb67ae85
 808e308:	fe94f82b 	.word	0xfe94f82b
 808e30c:	3c6ef372 	.word	0x3c6ef372
 808e310:	5f1d36f1 	.word	0x5f1d36f1
 808e314:	a54ff53a 	.word	0xa54ff53a
 808e318:	ade682d1 	.word	0xade682d1
 808e31c:	510e527f 	.word	0x510e527f
 808e320:	2b3e6c1f 	.word	0x2b3e6c1f
 808e324:	9b05688c 	.word	0x9b05688c
 808e328:	fb41bd6b 	.word	0xfb41bd6b
 808e32c:	1f83d9ab 	.word	0x1f83d9ab
 808e330:	137e2179 	.word	0x137e2179
 808e334:	5be0cd19 	.word	0x5be0cd19
 808e338:	c1059ed8 	.word	0xc1059ed8
 808e33c:	cbbb9d5d 	.word	0xcbbb9d5d
 808e340:	367cd507 	.word	0x367cd507
 808e344:	629a292a 	.word	0x629a292a
 808e348:	3070dd17 	.word	0x3070dd17
 808e34c:	9159015a 	.word	0x9159015a
 808e350:	f70e5939 	.word	0xf70e5939
 808e354:	152fecd8 	.word	0x152fecd8
 808e358:	ffc00b31 	.word	0xffc00b31
 808e35c:	67332667 	.word	0x67332667
 808e360:	68581511 	.word	0x68581511
 808e364:	8eb44a87 	.word	0x8eb44a87
 808e368:	64f98fa7 	.word	0x64f98fa7
 808e36c:	db0c2e0d 	.word	0xdb0c2e0d
 808e370:	befa4fa4 	.word	0xbefa4fa4
 808e374:	47b5481d 	.word	0x47b5481d

0808e378 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 808e378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e37c:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 808e380:	4686      	mov	lr, r0
 808e382:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808e386:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808e388:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
 808e38c:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
 808e390:	7866      	ldrb	r6, [r4, #1]
 808e392:	f04f 0a00 	mov.w	sl, #0
 808e396:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 808e39a:	0436      	lsls	r6, r6, #16
 808e39c:	2300      	movs	r3, #0
 808e39e:	ea43 030b 	orr.w	r3, r3, fp
 808e3a2:	9609      	str	r6, [sp, #36]	; 0x24
 808e3a4:	f8cd a020 	str.w	sl, [sp, #32]
 808e3a8:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 808e3ac:	431e      	orrs	r6, r3
 808e3ae:	4633      	mov	r3, r6
 808e3b0:	79e2      	ldrb	r2, [r4, #7]
 808e3b2:	78a6      	ldrb	r6, [r4, #2]
 808e3b4:	ea42 020a 	orr.w	r2, r2, sl
 808e3b8:	4315      	orrs	r5, r2
 808e3ba:	462a      	mov	r2, r5
 808e3bc:	0236      	lsls	r6, r6, #8
 808e3be:	960b      	str	r6, [sp, #44]	; 0x2c
 808e3c0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 808e3c4:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 808e3c8:	431e      	orrs	r6, r3
 808e3ca:	4633      	mov	r3, r6
 808e3cc:	4315      	orrs	r5, r2
 808e3ce:	78e6      	ldrb	r6, [r4, #3]
 808e3d0:	462a      	mov	r2, r5
 808e3d2:	960d      	str	r6, [sp, #52]	; 0x34
 808e3d4:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 808e3d8:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 808e3dc:	431e      	orrs	r6, r3
 808e3de:	4633      	mov	r3, r6
 808e3e0:	7926      	ldrb	r6, [r4, #4]
 808e3e2:	4315      	orrs	r5, r2
 808e3e4:	462a      	mov	r2, r5
 808e3e6:	0635      	lsls	r5, r6, #24
 808e3e8:	f8cd a014 	str.w	sl, [sp, #20]
 808e3ec:	9504      	str	r5, [sp, #16]
 808e3ee:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 808e3f2:	431e      	orrs	r6, r3
 808e3f4:	4633      	mov	r3, r6
 808e3f6:	7966      	ldrb	r6, [r4, #5]
 808e3f8:	4315      	orrs	r5, r2
 808e3fa:	462a      	mov	r2, r5
 808e3fc:	0435      	lsls	r5, r6, #16
 808e3fe:	f8cd a01c 	str.w	sl, [sp, #28]
 808e402:	9506      	str	r5, [sp, #24]
 808e404:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 808e408:	431e      	orrs	r6, r3
 808e40a:	4633      	mov	r3, r6
 808e40c:	79a6      	ldrb	r6, [r4, #6]
 808e40e:	4315      	orrs	r5, r2
 808e410:	ea4f 2806 	mov.w	r8, r6, lsl #8
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808e414:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808e416:	ea45 0208 	orr.w	r2, r5, r8
 808e41a:	ea43 030a 	orr.w	r3, r3, sl
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808e41e:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808e420:	e9ec 2302 	strd	r2, r3, [ip, #8]!
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808e424:	d1b0      	bne.n	808e388 <mbedtls_internal_sha512_process+0x10>
 808e426:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 808e428:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 808e42a:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
 808e42c:	0cd4      	lsrs	r4, r2, #19
 808e42e:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 808e432:	940e      	str	r4, [sp, #56]	; 0x38
 808e434:	0cdc      	lsrs	r4, r3, #19
 808e436:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 808e43a:	940f      	str	r4, [sp, #60]	; 0x3c
 808e43c:	00dc      	lsls	r4, r3, #3
 808e43e:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
 808e442:	9411      	str	r4, [sp, #68]	; 0x44
 808e444:	00d4      	lsls	r4, r2, #3
 808e446:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 808e44a:	0992      	lsrs	r2, r2, #6
 808e44c:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
 808e450:	9410      	str	r4, [sp, #64]	; 0x40
 808e452:	099b      	lsrs	r3, r3, #6
 808e454:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 808e458:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808e45c:	9200      	str	r2, [sp, #0]
 808e45e:	4066      	eors	r6, r4
 808e460:	9301      	str	r3, [sp, #4]
 808e462:	406f      	eors	r7, r5
 808e464:	e9dd 3400 	ldrd	r3, r4, [sp]
 808e468:	4073      	eors	r3, r6
 808e46a:	461e      	mov	r6, r3
 808e46c:	e9d1 2300 	ldrd	r2, r3, [r1]
 808e470:	407c      	eors	r4, r7
 808e472:	4627      	mov	r7, r4
 808e474:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
 808e478:	f8d1 8008 	ldr.w	r8, [r1, #8]
 808e47c:	1912      	adds	r2, r2, r4
 808e47e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 808e482:	416b      	adcs	r3, r5
 808e484:	18b4      	adds	r4, r6, r2
 808e486:	eb47 0503 	adc.w	r5, r7, r3
 808e48a:	ea4f 0358 	mov.w	r3, r8, lsr #1
 808e48e:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
 808e492:	9312      	str	r3, [sp, #72]	; 0x48
 808e494:	ea4f 035c 	mov.w	r3, ip, lsr #1
 808e498:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
 808e49c:	9313      	str	r3, [sp, #76]	; 0x4c
 808e49e:	ea4f 2318 	mov.w	r3, r8, lsr #8
 808e4a2:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 808e4a6:	9314      	str	r3, [sp, #80]	; 0x50
 808e4a8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 808e4ac:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 808e4b0:	9315      	str	r3, [sp, #84]	; 0x54
 808e4b2:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808e4b6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 808e4ba:	4072      	eors	r2, r6
 808e4bc:	ea4f 16d8 	mov.w	r6, r8, lsr #7
 808e4c0:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
 808e4c4:	9602      	str	r6, [sp, #8]
 808e4c6:	ea4f 16dc 	mov.w	r6, ip, lsr #7
 808e4ca:	9603      	str	r6, [sp, #12]
 808e4cc:	407b      	eors	r3, r7
 808e4ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808e4d2:	4056      	eors	r6, r2
 808e4d4:	1932      	adds	r2, r6, r4
 808e4d6:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808e4da:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808e4de:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808e4e2:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808e4e4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 808e4e8:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808e4ec:	d19c      	bne.n	808e428 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808e4ee:	e9de 3404 	ldrd	r3, r4, [lr, #16]
 808e4f2:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    B = ctx->state[1];
 808e4f6:	e9de 3406 	ldrd	r3, r4, [lr, #24]
 808e4fa:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    C = ctx->state[2];
 808e4fe:	e9de 3408 	ldrd	r3, r4, [lr, #32]
 808e502:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    D = ctx->state[3];
 808e506:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 808e50a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
    D = ctx->state[3];
 808e50e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    E = ctx->state[4];
 808e512:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 808e516:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    E = ctx->state[4];
 808e51a:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    F = ctx->state[5];
 808e51e:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
 808e522:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    G = ctx->state[6];
 808e526:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
 808e52a:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    H = ctx->state[7];
 808e52e:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
 808e532:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 808e536:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 808e53a:	4b0d      	ldr	r3, [pc, #52]	; (808e570 <mbedtls_internal_sha512_process+0x1f8>)
 808e53c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 808e540:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 808e544:	e9cd 0108 	strd	r0, r1, [sp, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 808e548:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 808e54c:	e9cd 0106 	strd	r0, r1, [sp, #24]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 808e550:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 808e554:	e9cd 0104 	strd	r0, r1, [sp, #16]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
 808e558:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 808e55c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808e560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808e564:	e9cd 0100 	strd	r0, r1, [sp]
 808e568:	aa80      	add	r2, sp, #512	; 0x200
 808e56a:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 808e56e:	e001      	b.n	808e574 <mbedtls_internal_sha512_process+0x1fc>
 808e570:	08095ec0 	.word	0x08095ec0
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808e574:	9904      	ldr	r1, [sp, #16]
 808e576:	9805      	ldr	r0, [sp, #20]
 808e578:	0b89      	lsrs	r1, r1, #14
 808e57a:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808e57e:	911e      	str	r1, [sp, #120]	; 0x78
 808e580:	0b81      	lsrs	r1, r0, #14
 808e582:	9804      	ldr	r0, [sp, #16]
 808e584:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 808e588:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808e58c:	911f      	str	r1, [sp, #124]	; 0x7c
 808e58e:	0c81      	lsrs	r1, r0, #18
 808e590:	9805      	ldr	r0, [sp, #20]
 808e592:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
 808e596:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808e59a:	9120      	str	r1, [sp, #128]	; 0x80
 808e59c:	0c81      	lsrs	r1, r0, #18
 808e59e:	9804      	ldr	r0, [sp, #16]
 808e5a0:	3340      	adds	r3, #64	; 0x40
 808e5a2:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808e5a6:	9121      	str	r1, [sp, #132]	; 0x84
 808e5a8:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 808e5ac:	404f      	eors	r7, r1
 808e5ae:	9905      	ldr	r1, [sp, #20]
 808e5b0:	4046      	eors	r6, r0
 808e5b2:	9804      	ldr	r0, [sp, #16]
 808e5b4:	05c9      	lsls	r1, r1, #23
 808e5b6:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808e5ba:	9123      	str	r1, [sp, #140]	; 0x8c
 808e5bc:	05c1      	lsls	r1, r0, #23
 808e5be:	9805      	ldr	r0, [sp, #20]
 808e5c0:	3240      	adds	r2, #64	; 0x40
 808e5c2:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808e5c6:	9122      	str	r1, [sp, #136]	; 0x88
 808e5c8:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 808e5cc:	4070      	eors	r0, r6
 808e5ce:	4079      	eors	r1, r7
 808e5d0:	4606      	mov	r6, r0
 808e5d2:	460f      	mov	r7, r1
 808e5d4:	e952 0112 	ldrd	r0, r1, [r2, #-72]	; 0x48
 808e5d8:	1900      	adds	r0, r0, r4
 808e5da:	4169      	adcs	r1, r5
 808e5dc:	1836      	adds	r6, r6, r0
 808e5de:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e5e2:	414f      	adcs	r7, r1
 808e5e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808e5e8:	4060      	eors	r0, r4
 808e5ea:	4069      	eors	r1, r5
 808e5ec:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808e5f0:	4004      	ands	r4, r0
 808e5f2:	4620      	mov	r0, r4
 808e5f4:	400d      	ands	r5, r1
 808e5f6:	4629      	mov	r1, r5
 808e5f8:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e5fc:	4044      	eors	r4, r0
 808e5fe:	1936      	adds	r6, r6, r4
 808e600:	ea85 0501 	eor.w	r5, r5, r1
 808e604:	416f      	adcs	r7, r5
 808e606:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e60a:	1980      	adds	r0, r0, r6
 808e60c:	4179      	adcs	r1, r7
 808e60e:	4606      	mov	r6, r0
 808e610:	460f      	mov	r7, r1
 808e612:	eb18 0800 	adds.w	r8, r8, r0
 808e616:	eb49 0901 	adc.w	r9, r9, r1
 808e61a:	9900      	ldr	r1, [sp, #0]
 808e61c:	9801      	ldr	r0, [sp, #4]
 808e61e:	0f09      	lsrs	r1, r1, #28
 808e620:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e624:	9124      	str	r1, [sp, #144]	; 0x90
 808e626:	0f01      	lsrs	r1, r0, #28
 808e628:	9800      	ldr	r0, [sp, #0]
 808e62a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e62e:	9125      	str	r1, [sp, #148]	; 0x94
 808e630:	9901      	ldr	r1, [sp, #4]
 808e632:	0789      	lsls	r1, r1, #30
 808e634:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e638:	9127      	str	r1, [sp, #156]	; 0x9c
 808e63a:	0781      	lsls	r1, r0, #30
 808e63c:	9801      	ldr	r0, [sp, #4]
 808e63e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e642:	9126      	str	r1, [sp, #152]	; 0x98
 808e644:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 808e648:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 808e64c:	404d      	eors	r5, r1
 808e64e:	9901      	ldr	r1, [sp, #4]
 808e650:	4044      	eors	r4, r0
 808e652:	9800      	ldr	r0, [sp, #0]
 808e654:	0649      	lsls	r1, r1, #25
 808e656:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e65a:	9129      	str	r1, [sp, #164]	; 0xa4
 808e65c:	0641      	lsls	r1, r0, #25
 808e65e:	9801      	ldr	r0, [sp, #4]
 808e660:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e664:	9128      	str	r1, [sp, #160]	; 0xa0
 808e666:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 808e66a:	4060      	eors	r0, r4
 808e66c:	4069      	eors	r1, r5
 808e66e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808e672:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808e676:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e67a:	4320      	orrs	r0, r4
 808e67c:	4329      	orrs	r1, r5
 808e67e:	ea00 040a 	and.w	r4, r0, sl
 808e682:	ea01 050b 	and.w	r5, r1, fp
 808e686:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 808e68a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e68e:	e9dd 4500 	ldrd	r4, r5, [sp]
 808e692:	4004      	ands	r4, r0
 808e694:	400d      	ands	r5, r1
 808e696:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808e69a:	4320      	orrs	r0, r4
 808e69c:	4329      	orrs	r1, r5
 808e69e:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808e6a2:	1824      	adds	r4, r4, r0
 808e6a4:	414d      	adcs	r5, r1
 808e6a6:	19a4      	adds	r4, r4, r6
 808e6a8:	417d      	adcs	r5, r7
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808e6aa:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808e6ae:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808e6b2:	e953 4510 	ldrd	r4, r5, [r3, #-64]	; 0x40
 808e6b6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808e6ba:	1900      	adds	r0, r0, r4
 808e6bc:	4169      	adcs	r1, r5
 808e6be:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e6c2:	1824      	adds	r4, r4, r0
 808e6c4:	414d      	adcs	r5, r1
 808e6c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808e6ca:	4070      	eors	r0, r6
 808e6cc:	ea00 0008 	and.w	r0, r0, r8
 808e6d0:	4046      	eors	r6, r0
 808e6d2:	19a0      	adds	r0, r4, r6
 808e6d4:	ea4f 3498 	mov.w	r4, r8, lsr #14
 808e6d8:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 808e6dc:	942a      	str	r4, [sp, #168]	; 0xa8
 808e6de:	ea4f 3499 	mov.w	r4, r9, lsr #14
 808e6e2:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 808e6e6:	942b      	str	r4, [sp, #172]	; 0xac
 808e6e8:	ea4f 4498 	mov.w	r4, r8, lsr #18
 808e6ec:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 808e6f0:	942c      	str	r4, [sp, #176]	; 0xb0
 808e6f2:	ea81 0107 	eor.w	r1, r1, r7
 808e6f6:	ea4f 4499 	mov.w	r4, r9, lsr #18
 808e6fa:	ea01 0109 	and.w	r1, r1, r9
 808e6fe:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 808e702:	942d      	str	r4, [sp, #180]	; 0xb4
 808e704:	ea87 0701 	eor.w	r7, r7, r1
 808e708:	eb45 0107 	adc.w	r1, r5, r7
 808e70c:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 808e710:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 808e714:	4074      	eors	r4, r6
 808e716:	ea4f 56c9 	mov.w	r6, r9, lsl #23
 808e71a:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
 808e71e:	962f      	str	r6, [sp, #188]	; 0xbc
 808e720:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 808e724:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
 808e728:	962e      	str	r6, [sp, #184]	; 0xb8
 808e72a:	407d      	eors	r5, r7
 808e72c:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 808e730:	4066      	eors	r6, r4
 808e732:	1986      	adds	r6, r0, r6
 808e734:	ea87 0705 	eor.w	r7, r7, r5
 808e738:	eb41 0707 	adc.w	r7, r1, r7
 808e73c:	eb1a 0006 	adds.w	r0, sl, r6
 808e740:	eb4b 0107 	adc.w	r1, fp, r7
 808e744:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808e748:	990a      	ldr	r1, [sp, #40]	; 0x28
 808e74a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808e74c:	0f09      	lsrs	r1, r1, #28
 808e74e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e752:	9130      	str	r1, [sp, #192]	; 0xc0
 808e754:	0f01      	lsrs	r1, r0, #28
 808e756:	980a      	ldr	r0, [sp, #40]	; 0x28
 808e758:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 808e75c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e760:	9131      	str	r1, [sp, #196]	; 0xc4
 808e762:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808e764:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
 808e768:	0789      	lsls	r1, r1, #30
 808e76a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e76e:	9133      	str	r1, [sp, #204]	; 0xcc
 808e770:	0781      	lsls	r1, r0, #30
 808e772:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808e774:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e778:	9132      	str	r1, [sp, #200]	; 0xc8
 808e77a:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 808e77e:	404d      	eors	r5, r1
 808e780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808e782:	4044      	eors	r4, r0
 808e784:	980a      	ldr	r0, [sp, #40]	; 0x28
 808e786:	0649      	lsls	r1, r1, #25
 808e788:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e78c:	9135      	str	r1, [sp, #212]	; 0xd4
 808e78e:	0641      	lsls	r1, r0, #25
 808e790:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808e792:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e796:	9134      	str	r1, [sp, #208]	; 0xd0
 808e798:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 808e79c:	4060      	eors	r0, r4
 808e79e:	4604      	mov	r4, r0
 808e7a0:	4069      	eors	r1, r5
 808e7a2:	460d      	mov	r5, r1
 808e7a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e7a8:	ea40 000a 	orr.w	r0, r0, sl
 808e7ac:	ea41 010b 	orr.w	r1, r1, fp
 808e7b0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 808e7b4:	ea0a 0a00 	and.w	sl, sl, r0
 808e7b8:	ea0b 0b01 	and.w	fp, fp, r1
 808e7bc:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 808e7c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e7c4:	e9dd ab00 	ldrd	sl, fp, [sp]
 808e7c8:	ea0a 0a00 	and.w	sl, sl, r0
 808e7cc:	ea0b 0b01 	and.w	fp, fp, r1
 808e7d0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808e7d4:	ea40 000a 	orr.w	r0, r0, sl
 808e7d8:	1900      	adds	r0, r0, r4
 808e7da:	ea41 010b 	orr.w	r1, r1, fp
 808e7de:	4169      	adcs	r1, r5
 808e7e0:	eb10 0a06 	adds.w	sl, r0, r6
 808e7e4:	eb41 0b07 	adc.w	fp, r1, r7
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 808e7e8:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 808e7ec:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 808e7f0:	1900      	adds	r0, r0, r4
 808e7f2:	4169      	adcs	r1, r5
 808e7f4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808e7f8:	1824      	adds	r4, r4, r0
 808e7fa:	414d      	adcs	r5, r1
 808e7fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808e800:	ea80 0008 	eor.w	r0, r0, r8
 808e804:	ea81 0109 	eor.w	r1, r1, r9
 808e808:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808e80c:	4006      	ands	r6, r0
 808e80e:	4630      	mov	r0, r6
 808e810:	400f      	ands	r7, r1
 808e812:	4639      	mov	r1, r7
 808e814:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808e818:	4046      	eors	r6, r0
 808e81a:	19a0      	adds	r0, r4, r6
 808e81c:	ea87 0701 	eor.w	r7, r7, r1
 808e820:	9c08      	ldr	r4, [sp, #32]
 808e822:	eb45 0107 	adc.w	r1, r5, r7
 808e826:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e828:	0ba4      	lsrs	r4, r4, #14
 808e82a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e82e:	9436      	str	r4, [sp, #216]	; 0xd8
 808e830:	0bac      	lsrs	r4, r5, #14
 808e832:	9d08      	ldr	r5, [sp, #32]
 808e834:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e838:	9437      	str	r4, [sp, #220]	; 0xdc
 808e83a:	0cac      	lsrs	r4, r5, #18
 808e83c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e83e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e842:	9438      	str	r4, [sp, #224]	; 0xe0
 808e844:	0cac      	lsrs	r4, r5, #18
 808e846:	9d08      	ldr	r5, [sp, #32]
 808e848:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e84c:	9439      	str	r4, [sp, #228]	; 0xe4
 808e84e:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 808e852:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 808e856:	4074      	eors	r4, r6
 808e858:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808e85a:	407d      	eors	r5, r7
 808e85c:	9f08      	ldr	r7, [sp, #32]
 808e85e:	05f6      	lsls	r6, r6, #23
 808e860:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e864:	963b      	str	r6, [sp, #236]	; 0xec
 808e866:	05fe      	lsls	r6, r7, #23
 808e868:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808e86a:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e86e:	963a      	str	r6, [sp, #232]	; 0xe8
 808e870:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 808e874:	4066      	eors	r6, r4
 808e876:	1986      	adds	r6, r0, r6
 808e878:	ea87 0705 	eor.w	r7, r7, r5
 808e87c:	eb41 0707 	adc.w	r7, r1, r7
 808e880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e884:	1980      	adds	r0, r0, r6
 808e886:	4179      	adcs	r1, r7
 808e888:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808e88c:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808e890:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808e894:	913c      	str	r1, [sp, #240]	; 0xf0
 808e896:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808e89a:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808e89e:	913d      	str	r1, [sp, #244]	; 0xf4
 808e8a0:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808e8a4:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808e8a8:	913f      	str	r1, [sp, #252]	; 0xfc
 808e8aa:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808e8ae:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808e8b2:	913e      	str	r1, [sp, #248]	; 0xf8
 808e8b4:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 808e8b8:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
 808e8bc:	404d      	eors	r5, r1
 808e8be:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808e8c2:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808e8c6:	9141      	str	r1, [sp, #260]	; 0x104
 808e8c8:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808e8cc:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808e8d0:	4044      	eors	r4, r0
 808e8d2:	9140      	str	r1, [sp, #256]	; 0x100
 808e8d4:	a940      	add	r1, sp, #256	; 0x100
 808e8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e8da:	4060      	eors	r0, r4
 808e8dc:	4069      	eors	r1, r5
 808e8de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808e8e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e8e6:	e9dd 4500 	ldrd	r4, r5, [sp]
 808e8ea:	ea40 000a 	orr.w	r0, r0, sl
 808e8ee:	ea41 010b 	orr.w	r1, r1, fp
 808e8f2:	4004      	ands	r4, r0
 808e8f4:	4620      	mov	r0, r4
 808e8f6:	400d      	ands	r5, r1
 808e8f8:	4629      	mov	r1, r5
 808e8fa:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808e8fe:	ea04 040a 	and.w	r4, r4, sl
 808e902:	ea05 050b 	and.w	r5, r5, fp
 808e906:	4304      	orrs	r4, r0
 808e908:	4620      	mov	r0, r4
 808e90a:	430d      	orrs	r5, r1
 808e90c:	4629      	mov	r1, r5
 808e90e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808e912:	1824      	adds	r4, r4, r0
 808e914:	414d      	adcs	r5, r1
 808e916:	19a4      	adds	r4, r4, r6
 808e918:	417d      	adcs	r5, r7
 808e91a:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 808e91e:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
 808e922:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 808e926:	1900      	adds	r0, r0, r4
 808e928:	4169      	adcs	r1, r5
 808e92a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808e92e:	1824      	adds	r4, r4, r0
 808e930:	414d      	adcs	r5, r1
 808e932:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808e936:	ea80 0008 	eor.w	r0, r0, r8
 808e93a:	ea81 0109 	eor.w	r1, r1, r9
 808e93e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808e942:	4006      	ands	r6, r0
 808e944:	ea86 0608 	eor.w	r6, r6, r8
 808e948:	400f      	ands	r7, r1
 808e94a:	19a0      	adds	r0, r4, r6
 808e94c:	ea87 0709 	eor.w	r7, r7, r9
 808e950:	9c06      	ldr	r4, [sp, #24]
 808e952:	eb45 0107 	adc.w	r1, r5, r7
 808e956:	9d07      	ldr	r5, [sp, #28]
 808e958:	0ba4      	lsrs	r4, r4, #14
 808e95a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e95e:	9442      	str	r4, [sp, #264]	; 0x108
 808e960:	0bac      	lsrs	r4, r5, #14
 808e962:	9d06      	ldr	r5, [sp, #24]
 808e964:	ae44      	add	r6, sp, #272	; 0x110
 808e966:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e96a:	9443      	str	r4, [sp, #268]	; 0x10c
 808e96c:	0cac      	lsrs	r4, r5, #18
 808e96e:	9d07      	ldr	r5, [sp, #28]
 808e970:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e974:	9444      	str	r4, [sp, #272]	; 0x110
 808e976:	0cac      	lsrs	r4, r5, #18
 808e978:	9d06      	ldr	r5, [sp, #24]
 808e97a:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e97e:	9445      	str	r4, [sp, #276]	; 0x114
 808e980:	ac42      	add	r4, sp, #264	; 0x108
 808e982:	cec0      	ldmia	r6, {r6, r7}
 808e984:	cc30      	ldmia	r4, {r4, r5}
 808e986:	4074      	eors	r4, r6
 808e988:	9e07      	ldr	r6, [sp, #28]
 808e98a:	407d      	eors	r5, r7
 808e98c:	9f06      	ldr	r7, [sp, #24]
 808e98e:	05f6      	lsls	r6, r6, #23
 808e990:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e994:	9647      	str	r6, [sp, #284]	; 0x11c
 808e996:	05fe      	lsls	r6, r7, #23
 808e998:	9f07      	ldr	r7, [sp, #28]
 808e99a:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e99e:	9646      	str	r6, [sp, #280]	; 0x118
 808e9a0:	ae46      	add	r6, sp, #280	; 0x118
 808e9a2:	cec0      	ldmia	r6, {r6, r7}
 808e9a4:	4066      	eors	r6, r4
 808e9a6:	1986      	adds	r6, r0, r6
 808e9a8:	ea87 0705 	eor.w	r7, r7, r5
 808e9ac:	eb41 0707 	adc.w	r7, r1, r7
 808e9b0:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e9b4:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808e9b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 808e9bc:	1836      	adds	r6, r6, r0
 808e9be:	414f      	adcs	r7, r1
 808e9c0:	9902      	ldr	r1, [sp, #8]
 808e9c2:	9803      	ldr	r0, [sp, #12]
 808e9c4:	0f09      	lsrs	r1, r1, #28
 808e9c6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e9ca:	9148      	str	r1, [sp, #288]	; 0x120
 808e9cc:	0f01      	lsrs	r1, r0, #28
 808e9ce:	9802      	ldr	r0, [sp, #8]
 808e9d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 808e9d4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e9d8:	9149      	str	r1, [sp, #292]	; 0x124
 808e9da:	9903      	ldr	r1, [sp, #12]
 808e9dc:	0789      	lsls	r1, r1, #30
 808e9de:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e9e2:	914b      	str	r1, [sp, #300]	; 0x12c
 808e9e4:	0781      	lsls	r1, r0, #30
 808e9e6:	9803      	ldr	r0, [sp, #12]
 808e9e8:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808e9ec:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e9f0:	914a      	str	r1, [sp, #296]	; 0x128
 808e9f2:	a948      	add	r1, sp, #288	; 0x120
 808e9f4:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e9f8:	a94a      	add	r1, sp, #296	; 0x128
 808e9fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e9fe:	404d      	eors	r5, r1
 808ea00:	9903      	ldr	r1, [sp, #12]
 808ea02:	4044      	eors	r4, r0
 808ea04:	9802      	ldr	r0, [sp, #8]
 808ea06:	0649      	lsls	r1, r1, #25
 808ea08:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808ea0c:	914d      	str	r1, [sp, #308]	; 0x134
 808ea0e:	0641      	lsls	r1, r0, #25
 808ea10:	9803      	ldr	r0, [sp, #12]
 808ea12:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808ea16:	914c      	str	r1, [sp, #304]	; 0x130
 808ea18:	a94c      	add	r1, sp, #304	; 0x130
 808ea1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ea1e:	4060      	eors	r0, r4
 808ea20:	4069      	eors	r1, r5
 808ea22:	4604      	mov	r4, r0
 808ea24:	460d      	mov	r5, r1
 808ea26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808ea2a:	ea40 000a 	orr.w	r0, r0, sl
 808ea2e:	ea41 010b 	orr.w	r1, r1, fp
 808ea32:	4006      	ands	r6, r0
 808ea34:	4630      	mov	r0, r6
 808ea36:	400f      	ands	r7, r1
 808ea38:	4639      	mov	r1, r7
 808ea3a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808ea3e:	ea06 060a 	and.w	r6, r6, sl
 808ea42:	ea07 070b 	and.w	r7, r7, fp
 808ea46:	4306      	orrs	r6, r0
 808ea48:	1930      	adds	r0, r6, r4
 808ea4a:	ea47 0701 	orr.w	r7, r7, r1
 808ea4e:	eb47 0105 	adc.w	r1, r7, r5
 808ea52:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808ea56:	1824      	adds	r4, r4, r0
 808ea58:	414d      	adcs	r5, r1
 808ea5a:	e9cd 4500 	strd	r4, r5, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 808ea5e:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 808ea62:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
 808ea66:	1900      	adds	r0, r0, r4
 808ea68:	4169      	adcs	r1, r5
 808ea6a:	eb10 0008 	adds.w	r0, r0, r8
 808ea6e:	eb41 0109 	adc.w	r1, r1, r9
 808ea72:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808ea76:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 808ea7a:	ea88 0804 	eor.w	r8, r8, r4
 808ea7e:	ea89 0905 	eor.w	r9, r9, r5
 808ea82:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808ea86:	ea04 0408 	and.w	r4, r4, r8
 808ea8a:	46a0      	mov	r8, r4
 808ea8c:	ea05 0509 	and.w	r5, r5, r9
 808ea90:	46a9      	mov	r9, r5
 808ea92:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808ea96:	ea84 0408 	eor.w	r4, r4, r8
 808ea9a:	eb10 0804 	adds.w	r8, r0, r4
 808ea9e:	ea85 0509 	eor.w	r5, r5, r9
 808eaa2:	eb41 0905 	adc.w	r9, r1, r5
 808eaa6:	9904      	ldr	r1, [sp, #16]
 808eaa8:	9805      	ldr	r0, [sp, #20]
 808eaaa:	0b89      	lsrs	r1, r1, #14
 808eaac:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808eab0:	914e      	str	r1, [sp, #312]	; 0x138
 808eab2:	0b81      	lsrs	r1, r0, #14
 808eab4:	9804      	ldr	r0, [sp, #16]
 808eab6:	ac50      	add	r4, sp, #320	; 0x140
 808eab8:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808eabc:	914f      	str	r1, [sp, #316]	; 0x13c
 808eabe:	0c81      	lsrs	r1, r0, #18
 808eac0:	9805      	ldr	r0, [sp, #20]
 808eac2:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808eac6:	9150      	str	r1, [sp, #320]	; 0x140
 808eac8:	0c81      	lsrs	r1, r0, #18
 808eaca:	9804      	ldr	r0, [sp, #16]
 808eacc:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808ead0:	9151      	str	r1, [sp, #324]	; 0x144
 808ead2:	a94e      	add	r1, sp, #312	; 0x138
 808ead4:	cc30      	ldmia	r4, {r4, r5}
 808ead6:	e9d1 0100 	ldrd	r0, r1, [r1]
 808eada:	4060      	eors	r0, r4
 808eadc:	9c05      	ldr	r4, [sp, #20]
 808eade:	4069      	eors	r1, r5
 808eae0:	9d04      	ldr	r5, [sp, #16]
 808eae2:	05e4      	lsls	r4, r4, #23
 808eae4:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808eae8:	9453      	str	r4, [sp, #332]	; 0x14c
 808eaea:	05ec      	lsls	r4, r5, #23
 808eaec:	9d05      	ldr	r5, [sp, #20]
 808eaee:	e9dd 6700 	ldrd	r6, r7, [sp]
 808eaf2:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808eaf6:	9452      	str	r4, [sp, #328]	; 0x148
 808eaf8:	ac52      	add	r4, sp, #328	; 0x148
 808eafa:	cc30      	ldmia	r4, {r4, r5}
 808eafc:	4044      	eors	r4, r0
 808eafe:	eb18 0804 	adds.w	r8, r8, r4
 808eb02:	ea85 0501 	eor.w	r5, r5, r1
 808eb06:	eb49 0905 	adc.w	r9, r9, r5
 808eb0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808eb0e:	eb10 0008 	adds.w	r0, r0, r8
 808eb12:	eb41 0109 	adc.w	r1, r1, r9
 808eb16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808eb1a:	9900      	ldr	r1, [sp, #0]
 808eb1c:	9801      	ldr	r0, [sp, #4]
 808eb1e:	0f09      	lsrs	r1, r1, #28
 808eb20:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808eb24:	9154      	str	r1, [sp, #336]	; 0x150
 808eb26:	0f01      	lsrs	r1, r0, #28
 808eb28:	9800      	ldr	r0, [sp, #0]
 808eb2a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808eb2e:	9155      	str	r1, [sp, #340]	; 0x154
 808eb30:	9901      	ldr	r1, [sp, #4]
 808eb32:	0789      	lsls	r1, r1, #30
 808eb34:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808eb38:	9157      	str	r1, [sp, #348]	; 0x15c
 808eb3a:	0781      	lsls	r1, r0, #30
 808eb3c:	9801      	ldr	r0, [sp, #4]
 808eb3e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808eb42:	9156      	str	r1, [sp, #344]	; 0x158
 808eb44:	a954      	add	r1, sp, #336	; 0x150
 808eb46:	e9d1 4500 	ldrd	r4, r5, [r1]
 808eb4a:	a956      	add	r1, sp, #344	; 0x158
 808eb4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808eb50:	404d      	eors	r5, r1
 808eb52:	9901      	ldr	r1, [sp, #4]
 808eb54:	4044      	eors	r4, r0
 808eb56:	9800      	ldr	r0, [sp, #0]
 808eb58:	0649      	lsls	r1, r1, #25
 808eb5a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808eb5e:	9159      	str	r1, [sp, #356]	; 0x164
 808eb60:	0641      	lsls	r1, r0, #25
 808eb62:	9801      	ldr	r0, [sp, #4]
 808eb64:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808eb68:	9158      	str	r1, [sp, #352]	; 0x160
 808eb6a:	a958      	add	r1, sp, #352	; 0x160
 808eb6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808eb70:	4060      	eors	r0, r4
 808eb72:	4604      	mov	r4, r0
 808eb74:	4069      	eors	r1, r5
 808eb76:	460d      	mov	r5, r1
 808eb78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808eb7c:	4330      	orrs	r0, r6
 808eb7e:	4339      	orrs	r1, r7
 808eb80:	ea00 060a 	and.w	r6, r0, sl
 808eb84:	ea01 070b 	and.w	r7, r1, fp
 808eb88:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808eb8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 808eb90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808eb94:	4006      	ands	r6, r0
 808eb96:	400f      	ands	r7, r1
 808eb98:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808eb9c:	4330      	orrs	r0, r6
 808eb9e:	1900      	adds	r0, r0, r4
 808eba0:	ea41 0107 	orr.w	r1, r1, r7
 808eba4:	4169      	adcs	r1, r5
 808eba6:	eb18 0800 	adds.w	r8, r8, r0
 808ebaa:	eb49 0901 	adc.w	r9, r9, r1
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 808ebae:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 808ebb2:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 808ebb6:	1900      	adds	r0, r0, r4
 808ebb8:	4169      	adcs	r1, r5
 808ebba:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808ebbe:	1824      	adds	r4, r4, r0
 808ebc0:	414d      	adcs	r5, r1
 808ebc2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808ebc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808ebca:	4046      	eors	r6, r0
 808ebcc:	4630      	mov	r0, r6
 808ebce:	404f      	eors	r7, r1
 808ebd0:	4639      	mov	r1, r7
 808ebd2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808ebd6:	4006      	ands	r6, r0
 808ebd8:	4630      	mov	r0, r6
 808ebda:	400f      	ands	r7, r1
 808ebdc:	4639      	mov	r1, r7
 808ebde:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808ebe2:	4046      	eors	r6, r0
 808ebe4:	1930      	adds	r0, r6, r4
 808ebe6:	ea87 0701 	eor.w	r7, r7, r1
 808ebea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 808ebec:	eb47 0105 	adc.w	r1, r7, r5
 808ebf0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808ebf2:	0ba4      	lsrs	r4, r4, #14
 808ebf4:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808ebf8:	945a      	str	r4, [sp, #360]	; 0x168
 808ebfa:	0bac      	lsrs	r4, r5, #14
 808ebfc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808ebfe:	ae5c      	add	r6, sp, #368	; 0x170
 808ec00:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808ec04:	945b      	str	r4, [sp, #364]	; 0x16c
 808ec06:	0cac      	lsrs	r4, r5, #18
 808ec08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808ec0a:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808ec0e:	945c      	str	r4, [sp, #368]	; 0x170
 808ec10:	0cac      	lsrs	r4, r5, #18
 808ec12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808ec14:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808ec18:	945d      	str	r4, [sp, #372]	; 0x174
 808ec1a:	ac5a      	add	r4, sp, #360	; 0x168
 808ec1c:	cec0      	ldmia	r6, {r6, r7}
 808ec1e:	cc30      	ldmia	r4, {r4, r5}
 808ec20:	4074      	eors	r4, r6
 808ec22:	4626      	mov	r6, r4
 808ec24:	407d      	eors	r5, r7
 808ec26:	462f      	mov	r7, r5
 808ec28:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 808ec2a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808ec2c:	05e4      	lsls	r4, r4, #23
 808ec2e:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808ec32:	945f      	str	r4, [sp, #380]	; 0x17c
 808ec34:	05ec      	lsls	r4, r5, #23
 808ec36:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808ec38:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808ec3c:	945e      	str	r4, [sp, #376]	; 0x178
 808ec3e:	ac5e      	add	r4, sp, #376	; 0x178
 808ec40:	cc30      	ldmia	r4, {r4, r5}
 808ec42:	4074      	eors	r4, r6
 808ec44:	1906      	adds	r6, r0, r4
 808ec46:	ea85 0507 	eor.w	r5, r5, r7
 808ec4a:	eb41 0705 	adc.w	r7, r1, r5
 808ec4e:	eb16 000a 	adds.w	r0, r6, sl
 808ec52:	eb47 010b 	adc.w	r1, r7, fp
 808ec56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808ec5a:	ea4f 7118 	mov.w	r1, r8, lsr #28
 808ec5e:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
 808ec62:	9160      	str	r1, [sp, #384]	; 0x180
 808ec64:	ea4f 7119 	mov.w	r1, r9, lsr #28
 808ec68:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 808ec6c:	9161      	str	r1, [sp, #388]	; 0x184
 808ec6e:	ea4f 7189 	mov.w	r1, r9, lsl #30
 808ec72:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 808ec76:	9163      	str	r1, [sp, #396]	; 0x18c
 808ec78:	ea4f 7188 	mov.w	r1, r8, lsl #30
 808ec7c:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 808ec80:	9162      	str	r1, [sp, #392]	; 0x188
 808ec82:	a960      	add	r1, sp, #384	; 0x180
 808ec84:	e9d1 4500 	ldrd	r4, r5, [r1]
 808ec88:	a962      	add	r1, sp, #392	; 0x188
 808ec8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ec8e:	404d      	eors	r5, r1
 808ec90:	ea4f 6149 	mov.w	r1, r9, lsl #25
 808ec94:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
 808ec98:	9165      	str	r1, [sp, #404]	; 0x194
 808ec9a:	ea4f 6148 	mov.w	r1, r8, lsl #25
 808ec9e:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
 808eca2:	4044      	eors	r4, r0
 808eca4:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808eca8:	9164      	str	r1, [sp, #400]	; 0x190
 808ecaa:	a964      	add	r1, sp, #400	; 0x190
 808ecac:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ecb0:	4060      	eors	r0, r4
 808ecb2:	4604      	mov	r4, r0
 808ecb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808ecb8:	e9dd ab00 	ldrd	sl, fp, [sp]
 808ecbc:	4069      	eors	r1, r5
 808ecbe:	460d      	mov	r5, r1
 808ecc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 808ecc4:	ea40 0008 	orr.w	r0, r0, r8
 808ecc8:	ea41 0109 	orr.w	r1, r1, r9
 808eccc:	4006      	ands	r6, r0
 808ecce:	ea0a 0a08 	and.w	sl, sl, r8
 808ecd2:	ea46 000a 	orr.w	r0, r6, sl
 808ecd6:	400f      	ands	r7, r1
 808ecd8:	ea0b 0b09 	and.w	fp, fp, r9
 808ecdc:	1900      	adds	r0, r0, r4
 808ecde:	ea47 010b 	orr.w	r1, r7, fp
 808ece2:	4169      	adcs	r1, r5
 808ece4:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
 808ece8:	eb1a 0a00 	adds.w	sl, sl, r0
 808ecec:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 808ecf0:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 808ecf4:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 808ecf8:	1900      	adds	r0, r0, r4
 808ecfa:	4169      	adcs	r1, r5
 808ecfc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808ed00:	1824      	adds	r4, r4, r0
 808ed02:	414d      	adcs	r5, r1
 808ed04:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808ed08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808ed0c:	4046      	eors	r6, r0
 808ed0e:	4630      	mov	r0, r6
 808ed10:	404f      	eors	r7, r1
 808ed12:	4639      	mov	r1, r7
 808ed14:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808ed18:	4006      	ands	r6, r0
 808ed1a:	4630      	mov	r0, r6
 808ed1c:	400f      	ands	r7, r1
 808ed1e:	4639      	mov	r1, r7
 808ed20:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808ed24:	4046      	eors	r6, r0
 808ed26:	1930      	adds	r0, r6, r4
 808ed28:	ea87 0701 	eor.w	r7, r7, r1
 808ed2c:	9c08      	ldr	r4, [sp, #32]
 808ed2e:	eb47 0105 	adc.w	r1, r7, r5
 808ed32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808ed34:	0ba4      	lsrs	r4, r4, #14
 808ed36:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808ed3a:	9466      	str	r4, [sp, #408]	; 0x198
 808ed3c:	0bac      	lsrs	r4, r5, #14
 808ed3e:	9d08      	ldr	r5, [sp, #32]
 808ed40:	ae68      	add	r6, sp, #416	; 0x1a0
 808ed42:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808ed46:	9467      	str	r4, [sp, #412]	; 0x19c
 808ed48:	0cac      	lsrs	r4, r5, #18
 808ed4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808ed4c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808ed50:	9468      	str	r4, [sp, #416]	; 0x1a0
 808ed52:	0cac      	lsrs	r4, r5, #18
 808ed54:	9d08      	ldr	r5, [sp, #32]
 808ed56:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808ed5a:	9469      	str	r4, [sp, #420]	; 0x1a4
 808ed5c:	ac66      	add	r4, sp, #408	; 0x198
 808ed5e:	cec0      	ldmia	r6, {r6, r7}
 808ed60:	cc30      	ldmia	r4, {r4, r5}
 808ed62:	4074      	eors	r4, r6
 808ed64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808ed66:	407d      	eors	r5, r7
 808ed68:	9f08      	ldr	r7, [sp, #32]
 808ed6a:	05f6      	lsls	r6, r6, #23
 808ed6c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808ed70:	966b      	str	r6, [sp, #428]	; 0x1ac
 808ed72:	05fe      	lsls	r6, r7, #23
 808ed74:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808ed76:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808ed7a:	966a      	str	r6, [sp, #424]	; 0x1a8
 808ed7c:	ae6a      	add	r6, sp, #424	; 0x1a8
 808ed7e:	cec0      	ldmia	r6, {r6, r7}
 808ed80:	4066      	eors	r6, r4
 808ed82:	1986      	adds	r6, r0, r6
 808ed84:	ea87 0705 	eor.w	r7, r7, r5
 808ed88:	eb41 0707 	adc.w	r7, r1, r7
 808ed8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808ed90:	1980      	adds	r0, r0, r6
 808ed92:	4179      	adcs	r1, r7
 808ed94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808ed98:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808ed9c:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808eda0:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808eda4:	916c      	str	r1, [sp, #432]	; 0x1b0
 808eda6:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808edaa:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808edae:	916d      	str	r1, [sp, #436]	; 0x1b4
 808edb0:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808edb4:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808edb8:	916f      	str	r1, [sp, #444]	; 0x1bc
 808edba:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808edbe:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808edc2:	916e      	str	r1, [sp, #440]	; 0x1b8
 808edc4:	a96c      	add	r1, sp, #432	; 0x1b0
 808edc6:	e9d1 4500 	ldrd	r4, r5, [r1]
 808edca:	a96e      	add	r1, sp, #440	; 0x1b8
 808edcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 808edd0:	404d      	eors	r5, r1
 808edd2:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808edd6:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808edda:	9171      	str	r1, [sp, #452]	; 0x1c4
 808eddc:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808ede0:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808ede4:	4044      	eors	r4, r0
 808ede6:	9170      	str	r1, [sp, #448]	; 0x1c0
 808ede8:	a970      	add	r1, sp, #448	; 0x1c0
 808edea:	e9d1 0100 	ldrd	r0, r1, [r1]
 808edee:	4060      	eors	r0, r4
 808edf0:	4604      	mov	r4, r0
 808edf2:	e9dd 6700 	ldrd	r6, r7, [sp]
 808edf6:	4069      	eors	r1, r5
 808edf8:	ea48 000a 	orr.w	r0, r8, sl
 808edfc:	460d      	mov	r5, r1
 808edfe:	4006      	ands	r6, r0
 808ee00:	ea49 010b 	orr.w	r1, r9, fp
 808ee04:	4630      	mov	r0, r6
 808ee06:	400f      	ands	r7, r1
 808ee08:	4639      	mov	r1, r7
 808ee0a:	ea08 060a 	and.w	r6, r8, sl
 808ee0e:	4306      	orrs	r6, r0
 808ee10:	ea09 070b 	and.w	r7, r9, fp
 808ee14:	1930      	adds	r0, r6, r4
 808ee16:	ea47 0701 	orr.w	r7, r7, r1
 808ee1a:	eb47 0105 	adc.w	r1, r7, r5
 808ee1e:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808ee22:	1824      	adds	r4, r4, r0
 808ee24:	414d      	adcs	r5, r1
 808ee26:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808ee2a:	e952 0104 	ldrd	r0, r1, [r2, #-16]
 808ee2e:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 808ee32:	1900      	adds	r0, r0, r4
 808ee34:	4169      	adcs	r1, r5
 808ee36:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808ee3a:	1824      	adds	r4, r4, r0
 808ee3c:	414d      	adcs	r5, r1
 808ee3e:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808ee42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808ee46:	4070      	eors	r0, r6
 808ee48:	4079      	eors	r1, r7
 808ee4a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808ee4e:	4006      	ands	r6, r0
 808ee50:	4630      	mov	r0, r6
 808ee52:	400f      	ands	r7, r1
 808ee54:	4639      	mov	r1, r7
 808ee56:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808ee5a:	4046      	eors	r6, r0
 808ee5c:	19a0      	adds	r0, r4, r6
 808ee5e:	ea87 0701 	eor.w	r7, r7, r1
 808ee62:	9c06      	ldr	r4, [sp, #24]
 808ee64:	eb45 0107 	adc.w	r1, r5, r7
 808ee68:	9d07      	ldr	r5, [sp, #28]
 808ee6a:	0ba4      	lsrs	r4, r4, #14
 808ee6c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808ee70:	9472      	str	r4, [sp, #456]	; 0x1c8
 808ee72:	0bac      	lsrs	r4, r5, #14
 808ee74:	9d06      	ldr	r5, [sp, #24]
 808ee76:	ae74      	add	r6, sp, #464	; 0x1d0
 808ee78:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808ee7c:	9473      	str	r4, [sp, #460]	; 0x1cc
 808ee7e:	0cac      	lsrs	r4, r5, #18
 808ee80:	9d07      	ldr	r5, [sp, #28]
 808ee82:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808ee86:	9474      	str	r4, [sp, #464]	; 0x1d0
 808ee88:	0cac      	lsrs	r4, r5, #18
 808ee8a:	9d06      	ldr	r5, [sp, #24]
 808ee8c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808ee90:	9475      	str	r4, [sp, #468]	; 0x1d4
 808ee92:	ac72      	add	r4, sp, #456	; 0x1c8
 808ee94:	cec0      	ldmia	r6, {r6, r7}
 808ee96:	cc30      	ldmia	r4, {r4, r5}
 808ee98:	4074      	eors	r4, r6
 808ee9a:	9e07      	ldr	r6, [sp, #28]
 808ee9c:	407d      	eors	r5, r7
 808ee9e:	9f06      	ldr	r7, [sp, #24]
 808eea0:	05f6      	lsls	r6, r6, #23
 808eea2:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808eea6:	9677      	str	r6, [sp, #476]	; 0x1dc
 808eea8:	05fe      	lsls	r6, r7, #23
 808eeaa:	9f07      	ldr	r7, [sp, #28]
 808eeac:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808eeb0:	9676      	str	r6, [sp, #472]	; 0x1d8
 808eeb2:	ae76      	add	r6, sp, #472	; 0x1d8
 808eeb4:	cec0      	ldmia	r6, {r6, r7}
 808eeb6:	4066      	eors	r6, r4
 808eeb8:	1986      	adds	r6, r0, r6
 808eeba:	ea87 0705 	eor.w	r7, r7, r5
 808eebe:	eb41 0707 	adc.w	r7, r1, r7
 808eec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 808eec6:	1980      	adds	r0, r0, r6
 808eec8:	4179      	adcs	r1, r7
 808eeca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 808eece:	9902      	ldr	r1, [sp, #8]
 808eed0:	9803      	ldr	r0, [sp, #12]
 808eed2:	0f09      	lsrs	r1, r1, #28
 808eed4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808eed8:	9178      	str	r1, [sp, #480]	; 0x1e0
 808eeda:	0f01      	lsrs	r1, r0, #28
 808eedc:	9802      	ldr	r0, [sp, #8]
 808eede:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808eee2:	9179      	str	r1, [sp, #484]	; 0x1e4
 808eee4:	9903      	ldr	r1, [sp, #12]
 808eee6:	0789      	lsls	r1, r1, #30
 808eee8:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808eeec:	917b      	str	r1, [sp, #492]	; 0x1ec
 808eeee:	0781      	lsls	r1, r0, #30
 808eef0:	9803      	ldr	r0, [sp, #12]
 808eef2:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808eef6:	917a      	str	r1, [sp, #488]	; 0x1e8
 808eef8:	a978      	add	r1, sp, #480	; 0x1e0
 808eefa:	e9d1 4500 	ldrd	r4, r5, [r1]
 808eefe:	a97a      	add	r1, sp, #488	; 0x1e8
 808ef00:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ef04:	404d      	eors	r5, r1
 808ef06:	9903      	ldr	r1, [sp, #12]
 808ef08:	4044      	eors	r4, r0
 808ef0a:	9802      	ldr	r0, [sp, #8]
 808ef0c:	0649      	lsls	r1, r1, #25
 808ef0e:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808ef12:	917d      	str	r1, [sp, #500]	; 0x1f4
 808ef14:	0641      	lsls	r1, r0, #25
 808ef16:	9803      	ldr	r0, [sp, #12]
 808ef18:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808ef1c:	917c      	str	r1, [sp, #496]	; 0x1f0
 808ef1e:	a97c      	add	r1, sp, #496	; 0x1f0
 808ef20:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ef24:	4060      	eors	r0, r4
 808ef26:	4069      	eors	r1, r5
 808ef28:	e9cd 0100 	strd	r0, r1, [sp]
 808ef2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808ef30:	ea40 000a 	orr.w	r0, r0, sl
 808ef34:	ea41 010b 	orr.w	r1, r1, fp
 808ef38:	ea00 0408 	and.w	r4, r0, r8
 808ef3c:	ea01 0509 	and.w	r5, r1, r9
 808ef40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808ef44:	ea00 000a 	and.w	r0, r0, sl
 808ef48:	ea01 010b 	and.w	r1, r1, fp
 808ef4c:	4304      	orrs	r4, r0
 808ef4e:	430d      	orrs	r5, r1
 808ef50:	4620      	mov	r0, r4
 808ef52:	4629      	mov	r1, r5
 808ef54:	e9dd 4500 	ldrd	r4, r5, [sp]
 808ef58:	1824      	adds	r4, r4, r0
 808ef5a:	414d      	adcs	r5, r1
 808ef5c:	19a4      	adds	r4, r4, r6
 808ef5e:	417d      	adcs	r5, r7
    }
    while( i < 80 );
 808ef60:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808ef62:	e9cd 4500 	strd	r4, r5, [sp]
    }
    while( i < 80 );
 808ef66:	f47f ab05 	bne.w	808e574 <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
 808ef6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808ef6e:	4623      	mov	r3, r4
 808ef70:	18c0      	adds	r0, r0, r3
 808ef72:	4169      	adcs	r1, r5
    ctx->state[1] += B;
 808ef74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ef78:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 808ef7c:	18a4      	adds	r4, r4, r2
 808ef7e:	415d      	adcs	r5, r3
 808ef80:	e9ce 4506 	strd	r4, r5, [lr, #24]
    ctx->state[2] += C;
 808ef84:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 808ef88:	eb13 030a 	adds.w	r3, r3, sl
 808ef8c:	eb44 040b 	adc.w	r4, r4, fp
 808ef90:	469a      	mov	sl, r3
    ctx->state[3] += D;
    ctx->state[4] += E;
 808ef92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808ef96:	46a3      	mov	fp, r4
    ctx->state[3] += D;
    ctx->state[4] += E;
 808ef98:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
 808ef9c:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808efa0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 808efa4:	eb10 0008 	adds.w	r0, r0, r8
 808efa8:	eb41 0109 	adc.w	r1, r1, r9
    ctx->state[4] += E;
 808efac:	18a4      	adds	r4, r4, r2
 808efae:	415d      	adcs	r5, r3
 808efb0:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 808efb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 808efb8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 808efbc:	18a4      	adds	r4, r4, r2
 808efbe:	415d      	adcs	r5, r3
 808efc0:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 808efc4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808efc8:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 808efcc:	18a4      	adds	r4, r4, r2
 808efce:	415d      	adcs	r5, r3
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808efd0:	e9ce 010a 	strd	r0, r1, [lr, #40]	; 0x28
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 808efd4:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 808efd8:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
 808efdc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 808efe0:	18c0      	adds	r0, r0, r3
 808efe2:	4161      	adcs	r1, r4
 808efe4:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
 808efe8:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808efea:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
 808efee:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
 808eff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808eff6:	bf00      	nop

0808eff8 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808eff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808effc:	4604      	mov	r4, r0
 808effe:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    unsigned int left;

    if( ilen == 0 )
 808f000:	4615      	mov	r5, r2
 808f002:	2a00      	cmp	r2, #0
 808f004:	d03d      	beq.n	808f082 <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808f006:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808f00a:	f04f 0900 	mov.w	r9, #0
    unsigned int left;

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808f00e:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808f012:	1952      	adds	r2, r2, r5
 808f014:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
 808f018:	454b      	cmp	r3, r9
 808f01a:	bf08      	it	eq
 808f01c:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808f01e:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
 808f022:	d206      	bcs.n	808f032 <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
 808f024:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 808f028:	3201      	adds	r2, #1
 808f02a:	f143 0300 	adc.w	r3, r3, #0
 808f02e:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
 808f032:	b188      	cbz	r0, 808f058 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
 808f034:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 808f038:	42bd      	cmp	r5, r7
 808f03a:	d31c      	bcc.n	808f076 <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 808f03c:	f104 0850 	add.w	r8, r4, #80	; 0x50
 808f040:	4631      	mov	r1, r6
 808f042:	463a      	mov	r2, r7
 808f044:	4440      	add	r0, r8
 808f046:	f004 fa84 	bl	8093552 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808f04a:	4641      	mov	r1, r8
 808f04c:	4620      	mov	r0, r4
 808f04e:	f7ff f993 	bl	808e378 <mbedtls_internal_sha512_process>
 808f052:	b9b8      	cbnz	r0, 808f084 <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
 808f054:	443e      	add	r6, r7
        ilen  -= fill;
 808f056:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808f058:	462f      	mov	r7, r5
 808f05a:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
 808f05c:	2f7f      	cmp	r7, #127	; 0x7f
 808f05e:	4431      	add	r1, r6
 808f060:	d905      	bls.n	808f06e <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 808f062:	4620      	mov	r0, r4
 808f064:	f7ff f988 	bl	808e378 <mbedtls_internal_sha512_process>
 808f068:	b960      	cbnz	r0, 808f084 <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
 808f06a:	3f80      	subs	r7, #128	; 0x80
 808f06c:	e7f5      	b.n	808f05a <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
 808f06e:	b147      	cbz	r7, 808f082 <mbedtls_sha512_update_ret+0x8a>
 808f070:	463d      	mov	r5, r7
 808f072:	460e      	mov	r6, r1
 808f074:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 808f076:	3450      	adds	r4, #80	; 0x50
 808f078:	462a      	mov	r2, r5
 808f07a:	4631      	mov	r1, r6
 808f07c:	4420      	add	r0, r4
 808f07e:	f004 fa68 	bl	8093552 <memcpy>

    return( 0 );
 808f082:	2000      	movs	r0, #0
}
 808f084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808f088 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808f08a:	4604      	mov	r4, r0
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808f08c:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 808f08e:	2280      	movs	r2, #128	; 0x80
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808f090:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
 808f094:	1c58      	adds	r0, r3, #1

    if( used <= 112 )
 808f096:	2870      	cmp	r0, #112	; 0x70
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808f098:	4423      	add	r3, r4
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808f09a:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808f09c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 808f0a0:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
 808f0a4:	d804      	bhi.n	808f0b0 <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 808f0a6:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 808f0aa:	2100      	movs	r1, #0
 808f0ac:	4430      	add	r0, r6
 808f0ae:	e00f      	b.n	808f0d0 <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 808f0b0:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 808f0b4:	2100      	movs	r1, #0
 808f0b6:	4430      	add	r0, r6
 808f0b8:	f004 fa71 	bl	809359e <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808f0bc:	4631      	mov	r1, r6
 808f0be:	4620      	mov	r0, r4
 808f0c0:	f7ff f95a 	bl	808e378 <mbedtls_internal_sha512_process>
 808f0c4:	2800      	cmp	r0, #0
 808f0c6:	f040 8111 	bne.w	808f2ec <mbedtls_sha512_finish_ret+0x264>
            return( ret );

        memset( ctx->buffer, 0, 112 );
 808f0ca:	4601      	mov	r1, r0
 808f0cc:	4630      	mov	r0, r6
 808f0ce:	2270      	movs	r2, #112	; 0x70
 808f0d0:	f004 fa65 	bl	809359e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 808f0d4:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
 808f0d8:	68e3      	ldr	r3, [r4, #12]
 808f0da:	68a2      	ldr	r2, [r4, #8]
 808f0dc:	00d9      	lsls	r1, r3, #3
 808f0de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 808f0e2:	2300      	movs	r3, #0
 808f0e4:	4319      	orrs	r1, r3
 808f0e6:	00d0      	lsls	r0, r2, #3
 808f0e8:	ea4f 725e 	mov.w	r2, lr, lsr #29
 808f0ec:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808f0ee:	0e0a      	lsrs	r2, r1, #24
 808f0f0:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 808f0f4:	0c0a      	lsrs	r2, r1, #16
 808f0f6:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 808f0fa:	0a0a      	lsrs	r2, r1, #8
 808f0fc:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
 808f100:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808f102:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808f106:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
 808f10a:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808f10c:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808f110:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
 808f114:	0a02      	lsrs	r2, r0, #8
 808f116:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808f11a:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808f11c:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808f11e:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 808f122:	0c1a      	lsrs	r2, r3, #16
 808f124:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
 808f128:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 808f12c:	0a1a      	lsrs	r2, r3, #8
 808f12e:	0e3b      	lsrs	r3, r7, #24
 808f130:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 808f134:	0c3b      	lsrs	r3, r7, #16
 808f136:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 808f13a:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808f13c:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
 808f140:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808f144:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 808f148:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
 808f14c:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808f150:	4631      	mov	r1, r6
 808f152:	4620      	mov	r0, r4
 808f154:	f7ff f910 	bl	808e378 <mbedtls_internal_sha512_process>
 808f158:	4603      	mov	r3, r0
 808f15a:	2800      	cmp	r0, #0
 808f15c:	f040 80c5 	bne.w	808f2ea <mbedtls_sha512_finish_ret+0x262>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 808f160:	7de2      	ldrb	r2, [r4, #23]
 808f162:	702a      	strb	r2, [r5, #0]
 808f164:	8ae2      	ldrh	r2, [r4, #22]
 808f166:	706a      	strb	r2, [r5, #1]
 808f168:	6962      	ldr	r2, [r4, #20]
 808f16a:	0a12      	lsrs	r2, r2, #8
 808f16c:	70aa      	strb	r2, [r5, #2]
 808f16e:	6962      	ldr	r2, [r4, #20]
 808f170:	70ea      	strb	r2, [r5, #3]
 808f172:	7ce2      	ldrb	r2, [r4, #19]
 808f174:	712a      	strb	r2, [r5, #4]
 808f176:	8a62      	ldrh	r2, [r4, #18]
 808f178:	716a      	strb	r2, [r5, #5]
 808f17a:	6922      	ldr	r2, [r4, #16]
 808f17c:	0a12      	lsrs	r2, r2, #8
 808f17e:	71aa      	strb	r2, [r5, #6]
 808f180:	6922      	ldr	r2, [r4, #16]
 808f182:	71ea      	strb	r2, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 808f184:	7fe2      	ldrb	r2, [r4, #31]
 808f186:	722a      	strb	r2, [r5, #8]
 808f188:	8be2      	ldrh	r2, [r4, #30]
 808f18a:	726a      	strb	r2, [r5, #9]
 808f18c:	69e2      	ldr	r2, [r4, #28]
 808f18e:	0a12      	lsrs	r2, r2, #8
 808f190:	72aa      	strb	r2, [r5, #10]
 808f192:	69e2      	ldr	r2, [r4, #28]
 808f194:	72ea      	strb	r2, [r5, #11]
 808f196:	7ee2      	ldrb	r2, [r4, #27]
 808f198:	732a      	strb	r2, [r5, #12]
 808f19a:	8b62      	ldrh	r2, [r4, #26]
 808f19c:	736a      	strb	r2, [r5, #13]
 808f19e:	69a2      	ldr	r2, [r4, #24]
 808f1a0:	0a12      	lsrs	r2, r2, #8
 808f1a2:	73aa      	strb	r2, [r5, #14]
 808f1a4:	69a2      	ldr	r2, [r4, #24]
 808f1a6:	73ea      	strb	r2, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 808f1a8:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 808f1ac:	742a      	strb	r2, [r5, #16]
 808f1ae:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 808f1b0:	746a      	strb	r2, [r5, #17]
 808f1b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808f1b4:	0a12      	lsrs	r2, r2, #8
 808f1b6:	74aa      	strb	r2, [r5, #18]
 808f1b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808f1ba:	74ea      	strb	r2, [r5, #19]
 808f1bc:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 808f1c0:	752a      	strb	r2, [r5, #20]
 808f1c2:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 808f1c4:	756a      	strb	r2, [r5, #21]
 808f1c6:	6a22      	ldr	r2, [r4, #32]
 808f1c8:	0a12      	lsrs	r2, r2, #8
 808f1ca:	75aa      	strb	r2, [r5, #22]
 808f1cc:	6a22      	ldr	r2, [r4, #32]
 808f1ce:	75ea      	strb	r2, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 808f1d0:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 808f1d4:	762a      	strb	r2, [r5, #24]
 808f1d6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 808f1d8:	766a      	strb	r2, [r5, #25]
 808f1da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f1dc:	0a12      	lsrs	r2, r2, #8
 808f1de:	76aa      	strb	r2, [r5, #26]
 808f1e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f1e2:	76ea      	strb	r2, [r5, #27]
 808f1e4:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 808f1e8:	772a      	strb	r2, [r5, #28]
 808f1ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 808f1ec:	776a      	strb	r2, [r5, #29]
 808f1ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808f1f0:	0a12      	lsrs	r2, r2, #8
 808f1f2:	77aa      	strb	r2, [r5, #30]
 808f1f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808f1f6:	77ea      	strb	r2, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 808f1f8:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 808f1fc:	f885 2020 	strb.w	r2, [r5, #32]
 808f200:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 808f202:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
 808f206:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808f208:	0a12      	lsrs	r2, r2, #8
 808f20a:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 808f20e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808f210:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
 808f214:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 808f218:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 808f21c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 808f21e:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 808f222:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808f224:	0a12      	lsrs	r2, r2, #8
 808f226:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
 808f22a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808f22c:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 808f230:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 808f234:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
 808f238:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 808f23a:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 808f23e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808f240:	0a12      	lsrs	r2, r2, #8
 808f242:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
 808f246:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808f248:	f885 202b 	strb.w	r2, [r5, #43]	; 0x2b
 808f24c:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 808f250:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
 808f254:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 808f256:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
 808f25a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808f25c:	0a12      	lsrs	r2, r2, #8
 808f25e:	f885 202e 	strb.w	r2, [r5, #46]	; 0x2e
 808f262:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808f264:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 808f268:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 808f26c:	2800      	cmp	r0, #0
 808f26e:	d13c      	bne.n	808f2ea <mbedtls_sha512_finish_ret+0x262>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 808f270:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 808f274:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 808f278:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 808f27c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 808f280:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808f282:	0a1b      	lsrs	r3, r3, #8
 808f284:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 808f288:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808f28a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 808f28e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 808f292:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 808f296:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 808f29a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 808f29e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808f2a0:	0a1b      	lsrs	r3, r3, #8
 808f2a2:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 808f2a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808f2a8:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 808f2ac:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 808f2b0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 808f2b4:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 808f2b8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 808f2bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808f2be:	0a1b      	lsrs	r3, r3, #8
 808f2c0:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 808f2c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808f2c6:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 808f2ca:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 808f2ce:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 808f2d2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 808f2d6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 808f2da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808f2dc:	0a1b      	lsrs	r3, r3, #8
 808f2de:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 808f2e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808f2e4:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 808f2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    return( 0 );
 808f2ea:	4618      	mov	r0, r3
}
 808f2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808f2ee <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808f2ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 808f2f0:	461f      	mov	r7, r3
 808f2f2:	b0b7      	sub	sp, #220	; 0xdc
 808f2f4:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808f2f6:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808f2f8:	460e      	mov	r6, r1
 808f2fa:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808f2fc:	f7fe ff8c 	bl	808e218 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 808f300:	4639      	mov	r1, r7
 808f302:	4668      	mov	r0, sp
 808f304:	f7fe ff9c 	bl	808e240 <mbedtls_sha512_starts_ret>
 808f308:	4601      	mov	r1, r0
 808f30a:	b958      	cbnz	r0, 808f324 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 808f30c:	4629      	mov	r1, r5
 808f30e:	4632      	mov	r2, r6
 808f310:	4668      	mov	r0, sp
 808f312:	f7ff fe71 	bl	808eff8 <mbedtls_sha512_update_ret>
 808f316:	4601      	mov	r1, r0
 808f318:	b920      	cbnz	r0, 808f324 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 808f31a:	4621      	mov	r1, r4
 808f31c:	4668      	mov	r0, sp
 808f31e:	f7ff feb3 	bl	808f088 <mbedtls_sha512_finish_ret>
 808f322:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 808f324:	4668      	mov	r0, sp
 808f326:	f7fe ff7b 	bl	808e220 <mbedtls_sha512_free>

    return( ret );
}
 808f32a:	4608      	mov	r0, r1
 808f32c:	b037      	add	sp, #220	; 0xdc
 808f32e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808f330 <mbedtls_pem_init>:
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
}

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 808f330:	2300      	movs	r3, #0
 808f332:	6003      	str	r3, [r0, #0]
 808f334:	6043      	str	r3, [r0, #4]
 808f336:	6083      	str	r3, [r0, #8]
 808f338:	4770      	bx	lr
	...

0808f33c <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 808f33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808f340:	4689      	mov	r9, r1
 808f342:	b085      	sub	sp, #20
 808f344:	4690      	mov	r8, r2
 808f346:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 808f348:	4606      	mov	r6, r0
 808f34a:	2800      	cmp	r0, #0
 808f34c:	d067      	beq.n	808f41e <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 808f34e:	4618      	mov	r0, r3
 808f350:	f004 f96a 	bl	8093628 <strstr>

    if( s1 == NULL )
 808f354:	4604      	mov	r4, r0
 808f356:	2800      	cmp	r0, #0
 808f358:	d063      	beq.n	808f422 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 808f35a:	4641      	mov	r1, r8
 808f35c:	4638      	mov	r0, r7
 808f35e:	f004 f963 	bl	8093628 <strstr>

    if( s2 == NULL || s2 <= s1 )
 808f362:	4605      	mov	r5, r0
 808f364:	2800      	cmp	r0, #0
 808f366:	d05c      	beq.n	808f422 <mbedtls_pem_read_buffer+0xe6>
 808f368:	4284      	cmp	r4, r0
 808f36a:	d25a      	bcs.n	808f422 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808f36c:	4648      	mov	r0, r9
 808f36e:	f004 f93e 	bl	80935ee <strlen>
    if( *s1 == ' '  ) s1++;
 808f372:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808f374:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 808f376:	2a20      	cmp	r2, #32
 808f378:	bf08      	it	eq
 808f37a:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 808f37c:	781a      	ldrb	r2, [r3, #0]
 808f37e:	2a0d      	cmp	r2, #13
 808f380:	bf08      	it	eq
 808f382:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 808f384:	781a      	ldrb	r2, [r3, #0]
 808f386:	2a0a      	cmp	r2, #10
 808f388:	d14b      	bne.n	808f422 <mbedtls_pem_read_buffer+0xe6>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808f38a:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
 808f38c:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808f38e:	f004 f92e 	bl	80935ee <strlen>
    if( *end == ' '  ) end++;
 808f392:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808f394:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 808f396:	2a20      	cmp	r2, #32
 808f398:	bf08      	it	eq
 808f39a:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 808f39c:	781a      	ldrb	r2, [r3, #0]
 808f39e:	2a0d      	cmp	r2, #13
 808f3a0:	bf08      	it	eq
 808f3a2:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 808f3a4:	781a      	ldrb	r2, [r3, #0]
 808f3a6:	2a0a      	cmp	r2, #10
 808f3a8:	bf08      	it	eq
 808f3aa:	3301      	addeq	r3, #1
    *use_len = end - data;
 808f3ac:	1bdb      	subs	r3, r3, r7
 808f3ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808f3b0:	1b2f      	subs	r7, r5, r4
 808f3b2:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
 808f3b4:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808f3b6:	dd05      	ble.n	808f3c4 <mbedtls_pem_read_buffer+0x88>
 808f3b8:	2216      	movs	r2, #22
 808f3ba:	4920      	ldr	r1, [pc, #128]	; (808f43c <mbedtls_pem_read_buffer+0x100>)
 808f3bc:	4620      	mov	r0, r4
 808f3be:	f004 f8b9 	bl	8093534 <memcmp>
 808f3c2:	b380      	cbz	r0, 808f426 <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 808f3c4:	42a5      	cmp	r5, r4
 808f3c6:	d930      	bls.n	808f42a <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 808f3c8:	2100      	movs	r1, #0
 808f3ca:	9700      	str	r7, [sp, #0]
 808f3cc:	4623      	mov	r3, r4
 808f3ce:	aa03      	add	r2, sp, #12
 808f3d0:	4608      	mov	r0, r1
 808f3d2:	f7f8 fe11 	bl	8087ff8 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 808f3d6:	302c      	adds	r0, #44	; 0x2c
 808f3d8:	d029      	beq.n	808f42e <mbedtls_pem_read_buffer+0xf2>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 808f3da:	f8dd 800c 	ldr.w	r8, [sp, #12]
 808f3de:	2001      	movs	r0, #1
 808f3e0:	4641      	mov	r1, r8
 808f3e2:	f003 ff99 	bl	8093318 <calloc>
 808f3e6:	4605      	mov	r5, r0
 808f3e8:	b318      	cbz	r0, 808f432 <mbedtls_pem_read_buffer+0xf6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 808f3ea:	4623      	mov	r3, r4
 808f3ec:	9700      	str	r7, [sp, #0]
 808f3ee:	aa03      	add	r2, sp, #12
 808f3f0:	4641      	mov	r1, r8
 808f3f2:	f7f8 fe01 	bl	8087ff8 <mbedtls_base64_decode>
 808f3f6:	9b03      	ldr	r3, [sp, #12]
 808f3f8:	4604      	mov	r4, r0
 808f3fa:	b168      	cbz	r0, 808f418 <mbedtls_pem_read_buffer+0xdc>
    {
        mbedtls_zeroize( buf, len );
 808f3fc:	462a      	mov	r2, r5
 808f3fe:	442b      	add	r3, r5
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f400:	2100      	movs	r1, #0
 808f402:	429a      	cmp	r2, r3
 808f404:	d002      	beq.n	808f40c <mbedtls_pem_read_buffer+0xd0>
 808f406:	7011      	strb	r1, [r2, #0]
 808f408:	3201      	adds	r2, #1
 808f40a:	e7fa      	b.n	808f402 <mbedtls_pem_read_buffer+0xc6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
    {
        mbedtls_zeroize( buf, len );
        mbedtls_free( buf );
 808f40c:	4628      	mov	r0, r5
 808f40e:	f002 f93b 	bl	8091688 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808f412:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
 808f416:	e00d      	b.n	808f434 <mbedtls_pem_read_buffer+0xf8>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 808f418:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 808f41a:	6073      	str	r3, [r6, #4]

    return( 0 );
 808f41c:	e00a      	b.n	808f434 <mbedtls_pem_read_buffer+0xf8>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 808f41e:	4808      	ldr	r0, [pc, #32]	; (808f440 <mbedtls_pem_read_buffer+0x104>)
 808f420:	e008      	b.n	808f434 <mbedtls_pem_read_buffer+0xf8>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 808f422:	4808      	ldr	r0, [pc, #32]	; (808f444 <mbedtls_pem_read_buffer+0x108>)
 808f424:	e006      	b.n	808f434 <mbedtls_pem_read_buffer+0xf8>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 808f426:	4808      	ldr	r0, [pc, #32]	; (808f448 <mbedtls_pem_read_buffer+0x10c>)
 808f428:	e004      	b.n	808f434 <mbedtls_pem_read_buffer+0xf8>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 808f42a:	4808      	ldr	r0, [pc, #32]	; (808f44c <mbedtls_pem_read_buffer+0x110>)
 808f42c:	e002      	b.n	808f434 <mbedtls_pem_read_buffer+0xf8>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808f42e:	4808      	ldr	r0, [pc, #32]	; (808f450 <mbedtls_pem_read_buffer+0x114>)
 808f430:	e000      	b.n	808f434 <mbedtls_pem_read_buffer+0xf8>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 808f432:	4808      	ldr	r0, [pc, #32]	; (808f454 <mbedtls_pem_read_buffer+0x118>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 808f434:	b005      	add	sp, #20
 808f436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808f43a:	bf00      	nop
 808f43c:	08096138 	.word	0x08096138
 808f440:	ffffeb80 	.word	0xffffeb80
 808f444:	ffffef80 	.word	0xffffef80
 808f448:	ffffec00 	.word	0xffffec00
 808f44c:	ffffef00 	.word	0xffffef00
 808f450:	ffffeed4 	.word	0xffffeed4
 808f454:	ffffee80 	.word	0xffffee80

0808f458 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808f458:	b510      	push	{r4, lr}
    if( ctx->buf != NULL )
 808f45a:	6803      	ldr	r3, [r0, #0]

    return( 0 );
}

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808f45c:	4604      	mov	r4, r0
    if( ctx->buf != NULL )
 808f45e:	b13b      	cbz	r3, 808f470 <mbedtls_pem_free+0x18>
 808f460:	6842      	ldr	r2, [r0, #4]
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f462:	2100      	movs	r1, #0
 808f464:	441a      	add	r2, r3
 808f466:	429a      	cmp	r2, r3
 808f468:	d002      	beq.n	808f470 <mbedtls_pem_free+0x18>
 808f46a:	7019      	strb	r1, [r3, #0]
 808f46c:	3301      	adds	r3, #1
 808f46e:	e7fa      	b.n	808f466 <mbedtls_pem_free+0xe>

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
    if( ctx->buf != NULL )
        mbedtls_zeroize( ctx->buf, ctx->buflen );
    mbedtls_free( ctx->buf );
 808f470:	6820      	ldr	r0, [r4, #0]
 808f472:	f002 f909 	bl	8091688 <free>
    mbedtls_free( ctx->info );
 808f476:	68a0      	ldr	r0, [r4, #8]
 808f478:	f002 f906 	bl	8091688 <free>
 808f47c:	f104 020c 	add.w	r2, r4, #12
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f480:	2300      	movs	r3, #0
 808f482:	4294      	cmp	r4, r2
 808f484:	d002      	beq.n	808f48c <mbedtls_pem_free+0x34>
 808f486:	7023      	strb	r3, [r4, #0]
 808f488:	3401      	adds	r4, #1
 808f48a:	e7fa      	b.n	808f482 <mbedtls_pem_free+0x2a>
 808f48c:	bd10      	pop	{r4, pc}
	...

0808f490 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808f490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808f494:	4606      	mov	r6, r0
 808f496:	4688      	mov	r8, r1
 808f498:	b096      	sub	sp, #88	; 0x58
 808f49a:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808f49c:	4b79      	ldr	r3, [pc, #484]	; (808f684 <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808f49e:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 808f4a2:	4615      	mov	r5, r2
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808f4a4:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 808f4a8:	aa08      	add	r2, sp, #32
 808f4aa:	4614      	mov	r4, r2
 808f4ac:	6818      	ldr	r0, [r3, #0]
 808f4ae:	6859      	ldr	r1, [r3, #4]
 808f4b0:	3308      	adds	r3, #8
 808f4b2:	c403      	stmia	r4!, {r0, r1}
 808f4b4:	4573      	cmp	r3, lr
 808f4b6:	4622      	mov	r2, r4
 808f4b8:	d1f7      	bne.n	808f4aa <mbedtls_rsa_deduce_primes+0x1a>
 808f4ba:	6818      	ldr	r0, [r3, #0]
 808f4bc:	889b      	ldrh	r3, [r3, #4]
 808f4be:	6020      	str	r0, [r4, #0]
 808f4c0:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 808f4c2:	2f00      	cmp	r7, #0
 808f4c4:	f000 80b8 	beq.w	808f638 <mbedtls_rsa_deduce_primes+0x1a8>
 808f4c8:	f1b9 0f00 	cmp.w	r9, #0
 808f4cc:	f000 80b4 	beq.w	808f638 <mbedtls_rsa_deduce_primes+0x1a8>
 808f4d0:	68bb      	ldr	r3, [r7, #8]
 808f4d2:	2b00      	cmp	r3, #0
 808f4d4:	f040 80b0 	bne.w	808f638 <mbedtls_rsa_deduce_primes+0x1a8>
 808f4d8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 808f4dc:	2900      	cmp	r1, #0
 808f4de:	f040 80ab 	bne.w	808f638 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808f4e2:	4630      	mov	r0, r6
 808f4e4:	f7fc fd6e 	bl	808bfc4 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f4e8:	2800      	cmp	r0, #0
 808f4ea:	f340 80a5 	ble.w	808f638 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808f4ee:	2101      	movs	r1, #1
 808f4f0:	4628      	mov	r0, r5
 808f4f2:	f7fc fd67 	bl	808bfc4 <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808f4f6:	2800      	cmp	r0, #0
 808f4f8:	f340 809e 	ble.w	808f638 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f4fc:	4631      	mov	r1, r6
 808f4fe:	4628      	mov	r0, r5
 808f500:	f7fc fd1b 	bl	808bf3a <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808f504:	2800      	cmp	r0, #0
 808f506:	f280 8097 	bge.w	808f638 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f50a:	2101      	movs	r1, #1
 808f50c:	4640      	mov	r0, r8
 808f50e:	f7fc fd59 	bl	808bfc4 <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f512:	2800      	cmp	r0, #0
 808f514:	f340 8090 	ble.w	808f638 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808f518:	4631      	mov	r1, r6
 808f51a:	4640      	mov	r0, r8
 808f51c:	f7fc fd0d 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f520:	2800      	cmp	r0, #0
 808f522:	f280 8089 	bge.w	808f638 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 808f526:	a805      	add	r0, sp, #20
 808f528:	f7fc faa2 	bl	808ba70 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 808f52c:	a802      	add	r0, sp, #8
 808f52e:	f7fc fa9f 	bl	808ba70 <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 808f532:	4642      	mov	r2, r8
 808f534:	4629      	mov	r1, r5
 808f536:	a802      	add	r0, sp, #8
 808f538:	f7fc fe63 	bl	808c202 <mbedtls_mpi_mul_mpi>
 808f53c:	4604      	mov	r4, r0
 808f53e:	2800      	cmp	r0, #0
 808f540:	d172      	bne.n	808f628 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 808f542:	a902      	add	r1, sp, #8
 808f544:	2201      	movs	r2, #1
 808f546:	4608      	mov	r0, r1
 808f548:	f7fc fe45 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808f54c:	4604      	mov	r4, r0
 808f54e:	2800      	cmp	r0, #0
 808f550:	d16a      	bne.n	808f628 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 808f552:	a802      	add	r0, sp, #8
 808f554:	f7fc fb2c 	bl	808bbb0 <mbedtls_mpi_lsb>
 808f558:	fa1f fa80 	uxth.w	sl, r0
 808f55c:	f1ba 0f00 	cmp.w	sl, #0
 808f560:	d102      	bne.n	808f568 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 808f562:	f06f 0403 	mvn.w	r4, #3
 808f566:	e05f      	b.n	808f628 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 808f568:	4651      	mov	r1, sl
 808f56a:	a802      	add	r0, sp, #8
 808f56c:	f7fc fc06 	bl	808bd7c <mbedtls_mpi_shift_r>
 808f570:	4604      	mov	r4, r0
 808f572:	2800      	cmp	r0, #0
 808f574:	d158      	bne.n	808f628 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
 808f576:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
 808f578:	681d      	ldr	r5, [r3, #0]
 808f57a:	f005 0507 	and.w	r5, r5, #7
 808f57e:	1e6b      	subs	r3, r5, #1
 808f580:	425d      	negs	r5, r3
 808f582:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 808f584:	ab16      	add	r3, sp, #88	; 0x58
 808f586:	442b      	add	r3, r5
 808f588:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 808f58c:	a805      	add	r0, sp, #20
 808f58e:	f7fc fae2 	bl	808bb56 <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808f592:	4632      	mov	r2, r6
 808f594:	a905      	add	r1, sp, #20
 808f596:	4638      	mov	r0, r7
 808f598:	f7fd fac0 	bl	808cb1c <mbedtls_mpi_gcd>
 808f59c:	4604      	mov	r4, r0
 808f59e:	2800      	cmp	r0, #0
 808f5a0:	d142      	bne.n	808f628 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 808f5a2:	2101      	movs	r1, #1
 808f5a4:	4638      	mov	r0, r7
 808f5a6:	f7fc fd0d 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f5aa:	b120      	cbz	r0, 808f5b6 <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
 808f5ac:	3501      	adds	r5, #1
 808f5ae:	b2ad      	uxth	r5, r5
 808f5b0:	2d36      	cmp	r5, #54	; 0x36
 808f5b2:	d1e7      	bne.n	808f584 <mbedtls_rsa_deduce_primes+0xf4>
 808f5b4:	e7d5      	b.n	808f562 <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 808f5b6:	a905      	add	r1, sp, #20
 808f5b8:	f8cd 9000 	str.w	r9, [sp]
 808f5bc:	4633      	mov	r3, r6
 808f5be:	aa02      	add	r2, sp, #8
 808f5c0:	4608      	mov	r0, r1
 808f5c2:	f7fd f88c 	bl	808c6de <mbedtls_mpi_exp_mod>
 808f5c6:	4604      	mov	r4, r0
 808f5c8:	bb70      	cbnz	r0, 808f628 <mbedtls_rsa_deduce_primes+0x198>
 808f5ca:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 808f5ce:	2101      	movs	r1, #1
 808f5d0:	a805      	add	r0, sp, #20
 808f5d2:	f7fc fcf7 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f5d6:	b930      	cbnz	r0, 808f5e6 <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 808f5d8:	2101      	movs	r1, #1
 808f5da:	a805      	add	r0, sp, #20
 808f5dc:	f7fc fcf2 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f5e0:	2800      	cmp	r0, #0
 808f5e2:	d0e3      	beq.n	808f5ac <mbedtls_rsa_deduce_primes+0x11c>
 808f5e4:	e7bd      	b.n	808f562 <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 808f5e6:	a905      	add	r1, sp, #20
 808f5e8:	2201      	movs	r2, #1
 808f5ea:	4608      	mov	r0, r1
 808f5ec:	f7fc fddd 	bl	808c1aa <mbedtls_mpi_add_int>
 808f5f0:	4604      	mov	r4, r0
 808f5f2:	b9c8      	cbnz	r0, 808f628 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808f5f4:	4632      	mov	r2, r6
 808f5f6:	a905      	add	r1, sp, #20
 808f5f8:	4638      	mov	r0, r7
 808f5fa:	f7fd fa8f 	bl	808cb1c <mbedtls_mpi_gcd>
 808f5fe:	4604      	mov	r4, r0
 808f600:	b990      	cbnz	r0, 808f628 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808f602:	2101      	movs	r1, #1
 808f604:	4638      	mov	r0, r7
 808f606:	f7fc fcdd 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f60a:	2801      	cmp	r0, #1
 808f60c:	d117      	bne.n	808f63e <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 808f60e:	4631      	mov	r1, r6
 808f610:	4638      	mov	r0, r7
 808f612:	f7fc fc92 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808f616:	3001      	adds	r0, #1
 808f618:	d111      	bne.n	808f63e <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 808f61a:	4621      	mov	r1, r4
 808f61c:	463b      	mov	r3, r7
 808f61e:	4632      	mov	r2, r6
 808f620:	4648      	mov	r0, r9
 808f622:	f7fc fe6a 	bl	808c2fa <mbedtls_mpi_div_mpi>
 808f626:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
 808f628:	a805      	add	r0, sp, #20
 808f62a:	f7fc fa28 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 808f62e:	a802      	add	r0, sp, #8
 808f630:	f7fc fa25 	bl	808ba7e <mbedtls_mpi_free>
    return( ret );
 808f634:	4620      	mov	r0, r4
 808f636:	e021      	b.n	808f67c <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808f638:	f06f 0003 	mvn.w	r0, #3
 808f63c:	e01e      	b.n	808f67c <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f63e:	a905      	add	r1, sp, #20
 808f640:	2201      	movs	r2, #1
 808f642:	4608      	mov	r0, r1
 808f644:	f7fc fdc7 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808f648:	4604      	mov	r4, r0
 808f64a:	2800      	cmp	r0, #0
 808f64c:	d1ec      	bne.n	808f628 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 808f64e:	aa05      	add	r2, sp, #20
 808f650:	4611      	mov	r1, r2
 808f652:	4610      	mov	r0, r2
 808f654:	f7fc fdd5 	bl	808c202 <mbedtls_mpi_mul_mpi>
 808f658:	4604      	mov	r4, r0
 808f65a:	2800      	cmp	r0, #0
 808f65c:	d1e4      	bne.n	808f628 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 808f65e:	a905      	add	r1, sp, #20
 808f660:	4632      	mov	r2, r6
 808f662:	4608      	mov	r0, r1
 808f664:	f7fd f809 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808f668:	4604      	mov	r4, r0
 808f66a:	2800      	cmp	r0, #0
 808f66c:	d1dc      	bne.n	808f628 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 808f66e:	f108 0801 	add.w	r8, r8, #1
 808f672:	fa1f f888 	uxth.w	r8, r8
 808f676:	45c2      	cmp	sl, r8
 808f678:	d2a9      	bcs.n	808f5ce <mbedtls_rsa_deduce_primes+0x13e>
 808f67a:	e7ad      	b.n	808f5d8 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 808f67c:	b016      	add	sp, #88	; 0x58
 808f67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808f682:	bf00      	nop
 808f684:	0809614f 	.word	0x0809614f

0808f688 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 808f688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808f68c:	4604      	mov	r4, r0
 808f68e:	b086      	sub	sp, #24
 808f690:	460e      	mov	r6, r1
 808f692:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 808f694:	461d      	mov	r5, r3
 808f696:	b18b      	cbz	r3, 808f6bc <mbedtls_rsa_deduce_private_exponent+0x34>
 808f698:	2100      	movs	r1, #0
 808f69a:	4618      	mov	r0, r3
 808f69c:	f7fc fc92 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f6a0:	4680      	mov	r8, r0
 808f6a2:	b958      	cbnz	r0, 808f6bc <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f6a4:	2101      	movs	r1, #1
 808f6a6:	4620      	mov	r0, r4
 808f6a8:	f7fc fc8c 	bl	808bfc4 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808f6ac:	2800      	cmp	r0, #0
 808f6ae:	dd05      	ble.n	808f6bc <mbedtls_rsa_deduce_private_exponent+0x34>
 808f6b0:	2101      	movs	r1, #1
 808f6b2:	4630      	mov	r0, r6
 808f6b4:	f7fc fc86 	bl	808bfc4 <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f6b8:	2800      	cmp	r0, #0
 808f6ba:	dc02      	bgt.n	808f6c2 <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808f6bc:	f06f 0003 	mvn.w	r0, #3
 808f6c0:	e03c      	b.n	808f73c <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 808f6c2:	4641      	mov	r1, r8
 808f6c4:	4638      	mov	r0, r7
 808f6c6:	f7fc fc7d 	bl	808bfc4 <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808f6ca:	2800      	cmp	r0, #0
 808f6cc:	d0f6      	beq.n	808f6bc <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
 808f6ce:	4668      	mov	r0, sp
 808f6d0:	f7fc f9ce 	bl	808ba70 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808f6d4:	a803      	add	r0, sp, #12
 808f6d6:	f7fc f9cb 	bl	808ba70 <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808f6da:	4621      	mov	r1, r4
 808f6dc:	2201      	movs	r2, #1
 808f6de:	4668      	mov	r0, sp
 808f6e0:	f7fc fd79 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808f6e4:	4604      	mov	r4, r0
 808f6e6:	bb10      	cbnz	r0, 808f72e <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808f6e8:	2201      	movs	r2, #1
 808f6ea:	4631      	mov	r1, r6
 808f6ec:	a803      	add	r0, sp, #12
 808f6ee:	f7fc fd72 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808f6f2:	4604      	mov	r4, r0
 808f6f4:	b9d8      	cbnz	r0, 808f72e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 808f6f6:	aa03      	add	r2, sp, #12
 808f6f8:	4669      	mov	r1, sp
 808f6fa:	4628      	mov	r0, r5
 808f6fc:	f7fd fa0e 	bl	808cb1c <mbedtls_mpi_gcd>
 808f700:	4604      	mov	r4, r0
 808f702:	b9a0      	cbnz	r0, 808f72e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 808f704:	aa03      	add	r2, sp, #12
 808f706:	4669      	mov	r1, sp
 808f708:	4668      	mov	r0, sp
 808f70a:	f7fc fd7a 	bl	808c202 <mbedtls_mpi_mul_mpi>
 808f70e:	4604      	mov	r4, r0
 808f710:	b968      	cbnz	r0, 808f72e <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 808f712:	4601      	mov	r1, r0
 808f714:	462b      	mov	r3, r5
 808f716:	466a      	mov	r2, sp
 808f718:	4668      	mov	r0, sp
 808f71a:	f7fc fdee 	bl	808c2fa <mbedtls_mpi_div_mpi>
 808f71e:	4604      	mov	r4, r0
 808f720:	b928      	cbnz	r0, 808f72e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 808f722:	466a      	mov	r2, sp
 808f724:	4639      	mov	r1, r7
 808f726:	4628      	mov	r0, r5
 808f728:	f7fd faa0 	bl	808cc6c <mbedtls_mpi_inv_mod>
 808f72c:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
 808f72e:	4668      	mov	r0, sp
 808f730:	f7fc f9a5 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808f734:	a803      	add	r0, sp, #12
 808f736:	f7fc f9a2 	bl	808ba7e <mbedtls_mpi_free>

    return( ret );
 808f73a:	4620      	mov	r0, r4
}
 808f73c:	b006      	add	sp, #24
 808f73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808f744 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808f748:	4699      	mov	r9, r3
 808f74a:	b087      	sub	sp, #28
 808f74c:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808f74e:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f750:	460d      	mov	r5, r1
 808f752:	4690      	mov	r8, r2
 808f754:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 808f756:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808f758:	f7fc f98a 	bl	808ba70 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808f75c:	a803      	add	r0, sp, #12
 808f75e:	f7fc f987 	bl	808ba70 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 808f762:	f1b9 0f00 	cmp.w	r9, #0
 808f766:	d101      	bne.n	808f76c <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 808f768:	b9f7      	cbnz	r7, 808f7a8 <mbedtls_rsa_validate_crt+0x64>
 808f76a:	e035      	b.n	808f7d8 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
 808f76c:	2c00      	cmp	r4, #0
 808f76e:	d058      	beq.n	808f822 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808f770:	2201      	movs	r2, #1
 808f772:	4621      	mov	r1, r4
 808f774:	4668      	mov	r0, sp
 808f776:	f7fc fd2e 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808f77a:	2800      	cmp	r0, #0
 808f77c:	d148      	bne.n	808f810 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 808f77e:	4642      	mov	r2, r8
 808f780:	4649      	mov	r1, r9
 808f782:	a803      	add	r0, sp, #12
 808f784:	f7fc fcef 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808f788:	2800      	cmp	r0, #0
 808f78a:	d141      	bne.n	808f810 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808f78c:	a903      	add	r1, sp, #12
 808f78e:	466a      	mov	r2, sp
 808f790:	4608      	mov	r0, r1
 808f792:	f7fc ff72 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808f796:	2800      	cmp	r0, #0
 808f798:	d13a      	bne.n	808f810 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808f79a:	4601      	mov	r1, r0
 808f79c:	a803      	add	r0, sp, #12
 808f79e:	f7fc fc11 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f7a2:	2800      	cmp	r0, #0
 808f7a4:	d13f      	bne.n	808f826 <mbedtls_rsa_validate_crt+0xe2>
 808f7a6:	e7df      	b.n	808f768 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
 808f7a8:	b3dd      	cbz	r5, 808f822 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 808f7aa:	2201      	movs	r2, #1
 808f7ac:	4629      	mov	r1, r5
 808f7ae:	4668      	mov	r0, sp
 808f7b0:	f7fc fd11 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808f7b4:	bb60      	cbnz	r0, 808f810 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 808f7b6:	4642      	mov	r2, r8
 808f7b8:	4639      	mov	r1, r7
 808f7ba:	a803      	add	r0, sp, #12
 808f7bc:	f7fc fcd3 	bl	808c166 <mbedtls_mpi_sub_mpi>
 808f7c0:	bb30      	cbnz	r0, 808f810 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808f7c2:	a903      	add	r1, sp, #12
 808f7c4:	466a      	mov	r2, sp
 808f7c6:	4608      	mov	r0, r1
 808f7c8:	f7fc ff57 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808f7cc:	bb00      	cbnz	r0, 808f810 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808f7ce:	4601      	mov	r1, r0
 808f7d0:	a803      	add	r0, sp, #12
 808f7d2:	f7fc fbf7 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f7d6:	bb30      	cbnz	r0, 808f826 <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 808f7d8:	b1c6      	cbz	r6, 808f80c <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
 808f7da:	b314      	cbz	r4, 808f822 <mbedtls_rsa_validate_crt+0xde>
 808f7dc:	b30d      	cbz	r5, 808f822 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 808f7de:	462a      	mov	r2, r5
 808f7e0:	4631      	mov	r1, r6
 808f7e2:	4668      	mov	r0, sp
 808f7e4:	f7fc fd0d 	bl	808c202 <mbedtls_mpi_mul_mpi>
 808f7e8:	b990      	cbnz	r0, 808f810 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f7ea:	2201      	movs	r2, #1
 808f7ec:	4669      	mov	r1, sp
 808f7ee:	4668      	mov	r0, sp
 808f7f0:	f7fc fcf1 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808f7f4:	b960      	cbnz	r0, 808f810 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 808f7f6:	4622      	mov	r2, r4
 808f7f8:	4669      	mov	r1, sp
 808f7fa:	4668      	mov	r0, sp
 808f7fc:	f7fc ff3d 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808f800:	b930      	cbnz	r0, 808f810 <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808f802:	4601      	mov	r1, r0
 808f804:	4668      	mov	r0, sp
 808f806:	f7fc fbdd 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f80a:	b960      	cbnz	r0, 808f826 <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f80c:	2400      	movs	r4, #0
 808f80e:	e00b      	b.n	808f828 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 808f810:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 808f814:	d007      	beq.n	808f826 <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 808f816:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 808f81a:	d002      	beq.n	808f822 <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f81c:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 808f820:	e002      	b.n	808f828 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f822:	4c06      	ldr	r4, [pc, #24]	; (808f83c <mbedtls_rsa_validate_crt+0xf8>)
 808f824:	e000      	b.n	808f828 <mbedtls_rsa_validate_crt+0xe4>
 808f826:	4c06      	ldr	r4, [pc, #24]	; (808f840 <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 808f828:	4668      	mov	r0, sp
 808f82a:	f7fc f928 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808f82e:	a803      	add	r0, sp, #12
 808f830:	f7fc f925 	bl	808ba7e <mbedtls_mpi_free>

    return( ret );
}
 808f834:	4620      	mov	r0, r4
 808f836:	b007      	add	sp, #28
 808f838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808f83c:	ffffbf80 	.word	0xffffbf80
 808f840:	ffffbe00 	.word	0xffffbe00

0808f844 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808f844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808f848:	4688      	mov	r8, r1
 808f84a:	b087      	sub	sp, #28
 808f84c:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808f84e:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808f850:	4691      	mov	r9, r2
 808f852:	461e      	mov	r6, r3
 808f854:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808f856:	f7fc f90b 	bl	808ba70 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808f85a:	a803      	add	r0, sp, #12
 808f85c:	f7fc f908 	bl	808ba70 <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 808f860:	f1b8 0f00 	cmp.w	r8, #0
 808f864:	d018      	beq.n	808f898 <mbedtls_rsa_validate_params+0x54>
 808f866:	f1b9 0f00 	cmp.w	r9, #0
 808f86a:	d015      	beq.n	808f898 <mbedtls_rsa_validate_params+0x54>
 808f86c:	b90d      	cbnz	r5, 808f872 <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f86e:	b9de      	cbnz	r6, 808f8a8 <mbedtls_rsa_validate_params+0x64>
 808f870:	e018      	b.n	808f8a4 <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 808f872:	464a      	mov	r2, r9
 808f874:	4641      	mov	r1, r8
 808f876:	4668      	mov	r0, sp
 808f878:	f7fc fcc3 	bl	808c202 <mbedtls_mpi_mul_mpi>
 808f87c:	4604      	mov	r4, r0
 808f87e:	bb68      	cbnz	r0, 808f8dc <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808f880:	2101      	movs	r1, #1
 808f882:	4628      	mov	r0, r5
 808f884:	f7fc fb9e 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f888:	2800      	cmp	r0, #0
 808f88a:	dd26      	ble.n	808f8da <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 808f88c:	4629      	mov	r1, r5
 808f88e:	4668      	mov	r0, sp
 808f890:	f7fc fb53 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808f894:	bb08      	cbnz	r0, 808f8da <mbedtls_rsa_validate_params+0x96>
 808f896:	e016      	b.n	808f8c6 <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808f898:	b125      	cbz	r5, 808f8a4 <mbedtls_rsa_validate_params+0x60>
 808f89a:	b9b6      	cbnz	r6, 808f8ca <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f89c:	f1b8 0f00 	cmp.w	r8, #0
 808f8a0:	f040 808a 	bne.w	808f9b8 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f8a4:	2400      	movs	r4, #0
 808f8a6:	e019      	b.n	808f8dc <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f8a8:	2f00      	cmp	r7, #0
 808f8aa:	d0fb      	beq.n	808f8a4 <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f8ac:	2101      	movs	r1, #1
 808f8ae:	4640      	mov	r0, r8
 808f8b0:	f7fc fb88 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f8b4:	2800      	cmp	r0, #0
 808f8b6:	dd10      	ble.n	808f8da <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 808f8b8:	2101      	movs	r1, #1
 808f8ba:	4648      	mov	r0, r9
 808f8bc:	f7fc fb82 	bl	808bfc4 <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f8c0:	2800      	cmp	r0, #0
 808f8c2:	dc19      	bgt.n	808f8f8 <mbedtls_rsa_validate_params+0xb4>
 808f8c4:	e009      	b.n	808f8da <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808f8c6:	2e00      	cmp	r6, #0
 808f8c8:	d0ec      	beq.n	808f8a4 <mbedtls_rsa_validate_params+0x60>
 808f8ca:	2f00      	cmp	r7, #0
 808f8cc:	d0e6      	beq.n	808f89c <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808f8ce:	2101      	movs	r1, #1
 808f8d0:	4630      	mov	r0, r6
 808f8d2:	f7fc fb77 	bl	808bfc4 <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f8d6:	2800      	cmp	r0, #0
 808f8d8:	dc5b      	bgt.n	808f992 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f8da:	4c3c      	ldr	r4, [pc, #240]	; (808f9cc <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 808f8dc:	4668      	mov	r0, sp
 808f8de:	f7fc f8ce 	bl	808ba7e <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808f8e2:	a803      	add	r0, sp, #12
 808f8e4:	f7fc f8cb 	bl	808ba7e <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 808f8e8:	2c00      	cmp	r4, #0
 808f8ea:	d06a      	beq.n	808f9c2 <mbedtls_rsa_validate_params+0x17e>
 808f8ec:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 808f8f0:	d067      	beq.n	808f9c2 <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f8f2:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
 808f8f6:	e064      	b.n	808f9c2 <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808f8f8:	463a      	mov	r2, r7
 808f8fa:	4631      	mov	r1, r6
 808f8fc:	4668      	mov	r0, sp
 808f8fe:	f7fc fc80 	bl	808c202 <mbedtls_mpi_mul_mpi>
 808f902:	4604      	mov	r4, r0
 808f904:	2800      	cmp	r0, #0
 808f906:	d1e9      	bne.n	808f8dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f908:	2201      	movs	r2, #1
 808f90a:	4669      	mov	r1, sp
 808f90c:	4668      	mov	r0, sp
 808f90e:	f7fc fc62 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808f912:	4604      	mov	r4, r0
 808f914:	2800      	cmp	r0, #0
 808f916:	d1e1      	bne.n	808f8dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 808f918:	2201      	movs	r2, #1
 808f91a:	4641      	mov	r1, r8
 808f91c:	a803      	add	r0, sp, #12
 808f91e:	f7fc fc5a 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808f922:	4604      	mov	r4, r0
 808f924:	2800      	cmp	r0, #0
 808f926:	d1d9      	bne.n	808f8dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808f928:	aa03      	add	r2, sp, #12
 808f92a:	4669      	mov	r1, sp
 808f92c:	4668      	mov	r0, sp
 808f92e:	f7fc fea4 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808f932:	4604      	mov	r4, r0
 808f934:	2800      	cmp	r0, #0
 808f936:	d1d1      	bne.n	808f8dc <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808f938:	4601      	mov	r1, r0
 808f93a:	4668      	mov	r0, sp
 808f93c:	f7fc fb42 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f940:	2800      	cmp	r0, #0
 808f942:	d1ca      	bne.n	808f8da <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808f944:	463a      	mov	r2, r7
 808f946:	4631      	mov	r1, r6
 808f948:	4668      	mov	r0, sp
 808f94a:	f7fc fc5a 	bl	808c202 <mbedtls_mpi_mul_mpi>
 808f94e:	4604      	mov	r4, r0
 808f950:	2800      	cmp	r0, #0
 808f952:	d1c3      	bne.n	808f8dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f954:	2201      	movs	r2, #1
 808f956:	4669      	mov	r1, sp
 808f958:	4668      	mov	r0, sp
 808f95a:	f7fc fc3c 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808f95e:	4604      	mov	r4, r0
 808f960:	2800      	cmp	r0, #0
 808f962:	d1bb      	bne.n	808f8dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808f964:	2201      	movs	r2, #1
 808f966:	4649      	mov	r1, r9
 808f968:	a803      	add	r0, sp, #12
 808f96a:	f7fc fc34 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808f96e:	4604      	mov	r4, r0
 808f970:	2800      	cmp	r0, #0
 808f972:	d1b3      	bne.n	808f8dc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808f974:	aa03      	add	r2, sp, #12
 808f976:	4669      	mov	r1, sp
 808f978:	4668      	mov	r0, sp
 808f97a:	f7fc fe7e 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808f97e:	4604      	mov	r4, r0
 808f980:	2800      	cmp	r0, #0
 808f982:	d1ab      	bne.n	808f8dc <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808f984:	4601      	mov	r1, r0
 808f986:	4668      	mov	r0, sp
 808f988:	f7fc fb1c 	bl	808bfc4 <mbedtls_mpi_cmp_int>
 808f98c:	2800      	cmp	r0, #0
 808f98e:	d089      	beq.n	808f8a4 <mbedtls_rsa_validate_params+0x60>
 808f990:	e7a3      	b.n	808f8da <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f992:	2101      	movs	r1, #1
 808f994:	4638      	mov	r0, r7
 808f996:	f7fc fb15 	bl	808bfc4 <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808f99a:	2800      	cmp	r0, #0
 808f99c:	dd9d      	ble.n	808f8da <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f99e:	4629      	mov	r1, r5
 808f9a0:	4630      	mov	r0, r6
 808f9a2:	f7fc faca 	bl	808bf3a <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f9a6:	2800      	cmp	r0, #0
 808f9a8:	da97      	bge.n	808f8da <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808f9aa:	4629      	mov	r1, r5
 808f9ac:	4638      	mov	r0, r7
 808f9ae:	f7fc fac4 	bl	808bf3a <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f9b2:	2800      	cmp	r0, #0
 808f9b4:	da91      	bge.n	808f8da <mbedtls_rsa_validate_params+0x96>
 808f9b6:	e771      	b.n	808f89c <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f9b8:	f1b9 0f00 	cmp.w	r9, #0
 808f9bc:	f47f af57 	bne.w	808f86e <mbedtls_rsa_validate_params+0x2a>
 808f9c0:	e770      	b.n	808f8a4 <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
 808f9c2:	4620      	mov	r0, r4
 808f9c4:	b007      	add	sp, #28
 808f9c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808f9ca:	bf00      	nop
 808f9cc:	ffffbe00 	.word	0xffffbe00

0808f9d0 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808f9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 808f9d4:	469a      	mov	sl, r3
 808f9d6:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808f9d8:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808f9da:	460e      	mov	r6, r1
 808f9dc:	4691      	mov	r9, r2
 808f9de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 808f9e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808f9e4:	f7fc f844 	bl	808ba70 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 808f9e8:	f1ba 0f00 	cmp.w	sl, #0
 808f9ec:	d103      	bne.n	808f9f6 <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 808f9ee:	f1b8 0f00 	cmp.w	r8, #0
 808f9f2:	d110      	bne.n	808fa16 <mbedtls_rsa_deduce_crt+0x46>
 808f9f4:	e01d      	b.n	808fa32 <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 808f9f6:	2201      	movs	r2, #1
 808f9f8:	4639      	mov	r1, r7
 808f9fa:	a801      	add	r0, sp, #4
 808f9fc:	f7fc fbeb 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808fa00:	4604      	mov	r4, r0
 808fa02:	b9f8      	cbnz	r0, 808fa44 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 808fa04:	aa01      	add	r2, sp, #4
 808fa06:	4649      	mov	r1, r9
 808fa08:	4650      	mov	r0, sl
 808fa0a:	f7fc fe36 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808fa0e:	4604      	mov	r4, r0
 808fa10:	2800      	cmp	r0, #0
 808fa12:	d0ec      	beq.n	808f9ee <mbedtls_rsa_deduce_crt+0x1e>
 808fa14:	e016      	b.n	808fa44 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 808fa16:	2201      	movs	r2, #1
 808fa18:	4631      	mov	r1, r6
 808fa1a:	a801      	add	r0, sp, #4
 808fa1c:	f7fc fbdb 	bl	808c1d6 <mbedtls_mpi_sub_int>
 808fa20:	4604      	mov	r4, r0
 808fa22:	b978      	cbnz	r0, 808fa44 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 808fa24:	aa01      	add	r2, sp, #4
 808fa26:	4649      	mov	r1, r9
 808fa28:	4640      	mov	r0, r8
 808fa2a:	f7fc fe26 	bl	808c67a <mbedtls_mpi_mod_mpi>
 808fa2e:	4604      	mov	r4, r0
 808fa30:	b940      	cbnz	r0, 808fa44 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 808fa32:	b90d      	cbnz	r5, 808fa38 <mbedtls_rsa_deduce_crt+0x68>
 808fa34:	462c      	mov	r4, r5
 808fa36:	e005      	b.n	808fa44 <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 808fa38:	463a      	mov	r2, r7
 808fa3a:	4631      	mov	r1, r6
 808fa3c:	4628      	mov	r0, r5
 808fa3e:	f7fd f915 	bl	808cc6c <mbedtls_mpi_inv_mod>
 808fa42:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
 808fa44:	a801      	add	r0, sp, #4
 808fa46:	f7fc f81a 	bl	808ba7e <mbedtls_mpi_free>

    return( ret );
}
 808fa4a:	4620      	mov	r0, r4
 808fa4c:	b004      	add	sp, #16
 808fa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808fa52 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808fa52:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808fa54:	b10b      	cbz	r3, 808fa5a <mbedtls_ssl_own_key+0x8>
 808fa56:	685b      	ldr	r3, [r3, #4]
 808fa58:	b913      	cbnz	r3, 808fa60 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808fa5a:	6803      	ldr	r3, [r0, #0]
 808fa5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->key );
 808fa5e:	b10b      	cbz	r3, 808fa64 <mbedtls_ssl_own_key+0x12>
 808fa60:	6858      	ldr	r0, [r3, #4]
 808fa62:	4770      	bx	lr
 808fa64:	4618      	mov	r0, r3
}
 808fa66:	4770      	bx	lr

0808fa68 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808fa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808fa6c:	6843      	ldr	r3, [r0, #4]

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808fa6e:	b095      	sub	sp, #84	; 0x54
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808fa70:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808fa72:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808fa74:	f000 80c1 	beq.w	808fbfa <mbedtls_ssl_handshake_client_step+0x192>
 808fa78:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808fa7a:	2b00      	cmp	r3, #0
 808fa7c:	f000 80bd 	beq.w	808fbfa <mbedtls_ssl_handshake_client_step+0x192>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808fa80:	f7fa fbd6 	bl	808a230 <mbedtls_ssl_flush_output>
 808fa84:	2800      	cmp	r0, #0
 808fa86:	f040 8514 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808fa8a:	6863      	ldr	r3, [r4, #4]
 808fa8c:	2b0c      	cmp	r3, #12
 808fa8e:	d105      	bne.n	808fa9c <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
 808fa90:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808fa92:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 808fa96:	b10b      	cbz	r3, 808fa9c <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 808fa98:	2311      	movs	r3, #17
 808fa9a:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 808fa9c:	6860      	ldr	r0, [r4, #4]
 808fa9e:	2811      	cmp	r0, #17
 808faa0:	f200 80ab 	bhi.w	808fbfa <mbedtls_ssl_handshake_client_step+0x192>
 808faa4:	e8df f010 	tbh	[pc, r0, lsl #1]
 808faa8:	00140012 	.word	0x00140012
 808faac:	00dc004b 	.word	0x00dc004b
 808fab0:	010500e1 	.word	0x010500e1
 808fab4:	012b0117 	.word	0x012b0117
 808fab8:	0190012f 	.word	0x0190012f
 808fabc:	020201fe 	.word	0x020201fe
 808fac0:	02290225 	.word	0x02290225
 808fac4:	022f022d 	.word	0x022f022d
 808fac8:	020c00a9 	.word	0x020c00a9
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 808facc:	2301      	movs	r3, #1
 808face:	e0ed      	b.n	808fcac <mbedtls_ssl_handshake_client_step+0x244>
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
 808fad0:	6821      	ldr	r1, [r4, #0]
 808fad2:	698b      	ldr	r3, [r1, #24]
 808fad4:	2b00      	cmp	r3, #0
 808fad6:	f000 821a 	beq.w	808ff0e <mbedtls_ssl_handshake_client_step+0x4a6>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 808fada:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
 808fade:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 808fae0:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
 808fae4:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 808fae6:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 808faea:	2800      	cmp	r0, #0
 808faec:	f000 8085 	beq.w	808fbfa <mbedtls_ssl_handshake_client_step+0x192>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808faf0:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 808faf4:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808faf8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808fafc:	1d33      	adds	r3, r6, #4
 808fafe:	f891 105d 	ldrb.w	r1, [r1, #93]	; 0x5d
 808fb02:	f7fb fdb7 	bl	808b674 <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808fb06:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 808fb08:	6b25      	ldr	r5, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808fb0a:	699f      	ldr	r7, [r3, #24]
 808fb0c:	2204      	movs	r2, #4
 808fb0e:	f505 71ba 	add.w	r1, r5, #372	; 0x174
 808fb12:	69d8      	ldr	r0, [r3, #28]
 808fb14:	47b8      	blx	r7
 808fb16:	2800      	cmp	r0, #0
 808fb18:	f040 84cb 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 808fb1c:	6823      	ldr	r3, [r4, #0]
 808fb1e:	221c      	movs	r2, #28
 808fb20:	699f      	ldr	r7, [r3, #24]
 808fb22:	f505 71bc 	add.w	r1, r5, #376	; 0x178
 808fb26:	69d8      	ldr	r0, [r3, #28]
 808fb28:	47b8      	blx	r7
 808fb2a:	2800      	cmp	r0, #0
 808fb2c:	f040 84c1 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 808fb30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808fb32:	1db1      	adds	r1, r6, #6
 808fb34:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 808fb38:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808fb3c:	e1eb      	b.n	808ff16 <mbedtls_ssl_handshake_client_step+0x4ae>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808fb3e:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
 808fb40:	6e65      	ldr	r5, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808fb42:	f7fa ffaf 	bl	808aaa4 <mbedtls_ssl_read_record>
 808fb46:	2800      	cmp	r0, #0
 808fb48:	f040 84b3 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808fb4c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808fb4e:	2b16      	cmp	r3, #22
 808fb50:	d006      	beq.n	808fb60 <mbedtls_ssl_handshake_client_step+0xf8>
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808fb52:	220a      	movs	r2, #10
 808fb54:	2102      	movs	r1, #2
 808fb56:	4620      	mov	r0, r4
 808fb58:	f7fa fd56 	bl	808a608 <mbedtls_ssl_send_alert_message>
 808fb5c:	f000 bc5b 	b.w	8090416 <mbedtls_ssl_handshake_client_step+0x9ae>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 808fb60:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808fb62:	2b29      	cmp	r3, #41	; 0x29
 808fb64:	d938      	bls.n	808fbd8 <mbedtls_ssl_handshake_client_step+0x170>
 808fb66:	782b      	ldrb	r3, [r5, #0]
 808fb68:	2b02      	cmp	r3, #2
 808fb6a:	d135      	bne.n	808fbd8 <mbedtls_ssl_handshake_client_step+0x170>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808fb6c:	4621      	mov	r1, r4
 808fb6e:	f851 3b0c 	ldr.w	r3, [r1], #12
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 808fb72:	f105 0804 	add.w	r8, r5, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808fb76:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808fb7a:	f104 0008 	add.w	r0, r4, #8
 808fb7e:	4643      	mov	r3, r8
 808fb80:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808fb84:	f7fb fd79 	bl	808b67a <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808fb88:	6823      	ldr	r3, [r4, #0]
 808fb8a:	68a2      	ldr	r2, [r4, #8]
 808fb8c:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 808fb90:	428a      	cmp	r2, r1
 808fb92:	f2c0 830f 	blt.w	80901b4 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808fb96:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808fb98:	f893 005f 	ldrb.w	r0, [r3, #95]	; 0x5f
 808fb9c:	4281      	cmp	r1, r0
 808fb9e:	f2c0 8309 	blt.w	80901b4 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808fba2:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 808fba6:	4282      	cmp	r2, r0
 808fba8:	f300 8304 	bgt.w	80901b4 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->major_ver > ssl->conf->max_major_ver ||
 808fbac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 808fbb0:	4299      	cmp	r1, r3
 808fbb2:	f300 82ff 	bgt.w	80901b4 <mbedtls_ssl_handshake_client_step+0x74c>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 808fbb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808fbb8:	1daa      	adds	r2, r5, #6
 808fbba:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808fbbe:	f105 0126 	add.w	r1, r5, #38	; 0x26
 808fbc2:	f852 0b04 	ldr.w	r0, [r2], #4
 808fbc6:	428a      	cmp	r2, r1
 808fbc8:	f843 0b04 	str.w	r0, [r3], #4
 808fbcc:	d1f9      	bne.n	808fbc2 <mbedtls_ssl_handshake_client_step+0x15a>

    n = buf[34];
 808fbce:	f895 6026 	ldrb.w	r6, [r5, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
 808fbd2:	2e20      	cmp	r6, #32
 808fbd4:	f240 82f5 	bls.w	80901c2 <mbedtls_ssl_handshake_client_step+0x75a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808fbd8:	2232      	movs	r2, #50	; 0x32
 808fbda:	e03a      	b.n	808fc52 <mbedtls_ssl_handshake_client_step+0x1ea>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 808fbdc:	4648      	mov	r0, r9
 808fbde:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 808fbe2:	f7f7 f809 	bl	8086bf8 <mbedtls_ssl_ciphersuite_from_id>
 808fbe6:	f8ca 0000 	str.w	r0, [sl]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 808fbea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808fbec:	6819      	ldr	r1, [r3, #0]
 808fbee:	b939      	cbnz	r1, 808fc00 <mbedtls_ssl_handshake_client_step+0x198>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808fbf0:	2250      	movs	r2, #80	; 0x50
 808fbf2:	2102      	movs	r1, #2
 808fbf4:	4620      	mov	r0, r4
 808fbf6:	f7fa fd07 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808fbfa:	48ae      	ldr	r0, [pc, #696]	; (808feb4 <mbedtls_ssl_handshake_client_step+0x44c>)
 808fbfc:	f000 bc59 	b.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 808fc00:	4620      	mov	r0, r4
 808fc02:	f7fb f81b 	bl	808ac3c <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808fc06:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 808fc0a:	3527      	adds	r5, #39	; 0x27
 808fc0c:	f8da 31e4 	ldr.w	r3, [sl, #484]	; 0x1e4
 808fc10:	2b00      	cmp	r3, #0
 808fc12:	f040 8311 	bne.w	8090238 <mbedtls_ssl_handshake_client_step+0x7d0>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808fc16:	6863      	ldr	r3, [r4, #4]
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808fc18:	4629      	mov	r1, r5
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808fc1a:	3301      	adds	r3, #1
 808fc1c:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
 808fc1e:	2300      	movs	r3, #0
 808fc20:	f8ca 31e4 	str.w	r3, [sl, #484]	; 0x1e4
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 808fc24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808fc26:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
 808fc2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808fc2c:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
 808fc2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808fc30:	4632      	mov	r2, r6
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
 808fc32:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808fc34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808fc36:	300c      	adds	r0, #12
 808fc38:	f003 fc8b 	bl	8093552 <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 808fc3c:	6823      	ldr	r3, [r4, #0]
 808fc3e:	68e2      	ldr	r2, [r4, #12]
 808fc40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808fc44:	3b04      	subs	r3, #4
 808fc46:	f853 0f04 	ldr.w	r0, [r3, #4]!
 808fc4a:	2800      	cmp	r0, #0
 808fc4c:	f040 831b 	bne.w	8090286 <mbedtls_ssl_handshake_client_step+0x81e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 808fc50:	222f      	movs	r2, #47	; 0x2f
 808fc52:	2102      	movs	r1, #2
 808fc54:	4620      	mov	r0, r4
 808fc56:	f7fa fcd7 	bl	808a608 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 808fc5a:	4897      	ldr	r0, [pc, #604]	; (808feb8 <mbedtls_ssl_handshake_client_step+0x450>)
 808fc5c:	f000 bc29 	b.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 808fc60:	4620      	mov	r0, r4
 808fc62:	f7fb fc01 	bl	808b468 <mbedtls_ssl_parse_certificate>
           break;
 808fc66:	f000 bc24 	b.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808fc6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808fc6c:	681d      	ldr	r5, [r3, #0]
    unsigned char *p = NULL, *end = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808fc6e:	7aab      	ldrb	r3, [r5, #10]
 808fc70:	2b01      	cmp	r3, #1
 808fc72:	d101      	bne.n	808fc78 <mbedtls_ssl_handshake_client_step+0x210>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
 808fc74:	2305      	movs	r3, #5
 808fc76:	e386      	b.n	8090386 <mbedtls_ssl_handshake_client_step+0x91e>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808fc78:	4620      	mov	r0, r4
 808fc7a:	f7fa ff13 	bl	808aaa4 <mbedtls_ssl_read_record>
 808fc7e:	2800      	cmp	r0, #0
 808fc80:	f040 8417 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808fc84:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808fc86:	2b16      	cmp	r3, #22
 808fc88:	f47f af63 	bne.w	808fb52 <mbedtls_ssl_handshake_client_step+0xea>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 808fc8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808fc8e:	781b      	ldrb	r3, [r3, #0]
 808fc90:	2b0c      	cmp	r3, #12
 808fc92:	f000 813e 	beq.w	808ff12 <mbedtls_ssl_handshake_client_step+0x4aa>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808fc96:	7aab      	ldrb	r3, [r5, #10]
 808fc98:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 808fc9c:	2b05      	cmp	r3, #5
 808fc9e:	f47f af58 	bne.w	808fb52 <mbedtls_ssl_handshake_client_step+0xea>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 808fca2:	2301      	movs	r3, #1
 808fca4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 808fca8:	6863      	ldr	r3, [r4, #4]
 808fcaa:	3301      	adds	r3, #1
 808fcac:	6063      	str	r3, [r4, #4]
 808fcae:	f000 bc00 	b.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808fcb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808fcb4:	681b      	ldr	r3, [r3, #0]
 808fcb6:	7a9b      	ldrb	r3, [r3, #10]
 808fcb8:	3b01      	subs	r3, #1
 808fcba:	b2db      	uxtb	r3, r3
 808fcbc:	2b09      	cmp	r3, #9
 808fcbe:	f200 8361 	bhi.w	8090384 <mbedtls_ssl_handshake_client_step+0x91c>
 808fcc2:	f240 320f 	movw	r2, #783	; 0x30f
 808fcc6:	2501      	movs	r5, #1
 808fcc8:	fa05 f303 	lsl.w	r3, r5, r3
 808fccc:	401a      	ands	r2, r3
 808fcce:	2a00      	cmp	r2, #0
 808fcd0:	f000 8358 	beq.w	8090384 <mbedtls_ssl_handshake_client_step+0x91c>
 808fcd4:	e35a      	b.n	809038c <mbedtls_ssl_handshake_client_step+0x924>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808fcd6:	4620      	mov	r0, r4
 808fcd8:	f7fa fee4 	bl	808aaa4 <mbedtls_ssl_read_record>
 808fcdc:	2800      	cmp	r0, #0
 808fcde:	f040 83e8 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808fce2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808fce4:	2b16      	cmp	r3, #22
 808fce6:	f040 8396 	bne.w	8090416 <mbedtls_ssl_handshake_client_step+0x9ae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808fcea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808fcec:	2b04      	cmp	r3, #4
 808fcee:	f040 838b 	bne.w	8090408 <mbedtls_ssl_handshake_client_step+0x9a0>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 808fcf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808fcf4:	781b      	ldrb	r3, [r3, #0]
 808fcf6:	2b0e      	cmp	r3, #14
 808fcf8:	f040 8386 	bne.w	8090408 <mbedtls_ssl_handshake_client_step+0x9a0>
 808fcfc:	e7d4      	b.n	808fca8 <mbedtls_ssl_handshake_client_step+0x240>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 808fcfe:	4620      	mov	r0, r4
 808fd00:	f7fa feee 	bl	808aae0 <mbedtls_ssl_write_certificate>
           break;
 808fd04:	e3d5      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808fd06:	6c23      	ldr	r3, [r4, #64]	; 0x40
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808fd08:	681b      	ldr	r3, [r3, #0]
 808fd0a:	7a9f      	ldrb	r7, [r3, #10]
 808fd0c:	2f01      	cmp	r7, #1
 808fd0e:	f040 8100 	bne.w	808ff12 <mbedtls_ssl_handshake_client_step+0x4aa>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 808fd12:	6820      	ldr	r0, [r4, #0]
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808fd14:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808fd18:	68e3      	ldr	r3, [r4, #12]
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808fd1a:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808fd1e:	f508 76da 	add.w	r6, r8, #436	; 0x1b4
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808fd22:	2b00      	cmp	r3, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808fd24:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 808fd28:	4633      	mov	r3, r6
 808fd2a:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808fd2e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808fd32:	bf14      	ite	ne
 808fd34:	2502      	movne	r5, #2
 808fd36:	2500      	moveq	r5, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808fd38:	f7fb fc9c 	bl	808b674 <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 808fd3c:	6823      	ldr	r3, [r4, #0]
 808fd3e:	222e      	movs	r2, #46	; 0x2e
 808fd40:	f8d3 9018 	ldr.w	r9, [r3, #24]
 808fd44:	f508 71db 	add.w	r1, r8, #438	; 0x1b6
 808fd48:	69d8      	ldr	r0, [r3, #28]
 808fd4a:	47c8      	blx	r9
 808fd4c:	2800      	cmp	r0, #0
 808fd4e:	f040 83b0 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
 808fd52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808fd54:	2230      	movs	r2, #48	; 0x30
 808fd56:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    if( ssl->session_negotiate->peer_cert == NULL )
 808fd5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808fd5c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808fd5e:	2800      	cmp	r0, #0
 808fd60:	f000 8359 	beq.w	8090416 <mbedtls_ssl_handshake_client_step+0x9ae>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 808fd64:	4639      	mov	r1, r7
 808fd66:	30bc      	adds	r0, #188	; 0xbc
 808fd68:	f7fd f912 	bl	808cf90 <mbedtls_pk_can_do>
 808fd6c:	2800      	cmp	r0, #0
 808fd6e:	f000 8354 	beq.w	809041a <mbedtls_ssl_handshake_client_step+0x9b2>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 808fd72:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 808fd74:	6b21      	ldr	r1, [r4, #48]	; 0x30
 808fd76:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808fd78:	9104      	str	r1, [sp, #16]
 808fd7a:	69d1      	ldr	r1, [r2, #28]
 808fd7c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808fd7e:	9103      	str	r1, [sp, #12]
 808fd80:	6992      	ldr	r2, [r2, #24]
 808fd82:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 808fd86:	9202      	str	r2, [sp, #8]
 808fd88:	f5c5 52ff 	rsb	r2, r5, #8160	; 0x1fe0
 808fd8c:	321c      	adds	r2, #28
 808fd8e:	9201      	str	r2, [sp, #4]
 808fd90:	aa08      	add	r2, sp, #32
 808fd92:	9200      	str	r2, [sp, #0]
 808fd94:	9a04      	ldr	r2, [sp, #16]
 808fd96:	1d2b      	adds	r3, r5, #4
 808fd98:	443b      	add	r3, r7
 808fd9a:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 808fd9e:	4631      	mov	r1, r6
 808fda0:	30bc      	adds	r0, #188	; 0xbc
 808fda2:	f7fd f95f 	bl	808d064 <mbedtls_pk_encrypt>
 808fda6:	2800      	cmp	r0, #0
 808fda8:	f040 8383 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 808fdac:	2d00      	cmp	r5, #0
 808fdae:	f000 8336 	beq.w	809041e <mbedtls_ssl_handshake_client_step+0x9b6>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 808fdb2:	9b08      	ldr	r3, [sp, #32]
 808fdb4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808fdb8:	0a19      	lsrs	r1, r3, #8
 808fdba:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 808fdbc:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808fdc0:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 808fdc2:	3302      	adds	r3, #2
 808fdc4:	9308      	str	r3, [sp, #32]
 808fdc6:	e32a      	b.n	809041e <mbedtls_ssl_handshake_client_step+0x9b6>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808fdc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808fdca:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808fdcc:	681d      	ldr	r5, [r3, #0]
    size_t n = 0, offset = 0;
 808fdce:	2300      	movs	r3, #0
 808fdd0:	9307      	str	r3, [sp, #28]
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808fdd2:	f7fa f879 	bl	8089ec8 <mbedtls_ssl_derive_keys>
 808fdd6:	2800      	cmp	r0, #0
 808fdd8:	f040 836b 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808fddc:	7aab      	ldrb	r3, [r5, #10]
 808fdde:	1f5a      	subs	r2, r3, #5
 808fde0:	2a03      	cmp	r2, #3
 808fde2:	d901      	bls.n	808fde8 <mbedtls_ssl_handshake_client_step+0x380>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 808fde4:	2b0b      	cmp	r3, #11
 808fde6:	d102      	bne.n	808fdee <mbedtls_ssl_handshake_client_step+0x386>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
 808fde8:	6863      	ldr	r3, [r4, #4]
 808fdea:	3301      	adds	r3, #1
 808fdec:	e2cb      	b.n	8090386 <mbedtls_ssl_handshake_client_step+0x91e>
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 808fdee:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 808fdf2:	2b00      	cmp	r3, #0
 808fdf4:	d0f8      	beq.n	808fde8 <mbedtls_ssl_handshake_client_step+0x380>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808fdf6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 808fdf8:	b10d      	cbz	r5, 808fdfe <mbedtls_ssl_handshake_client_step+0x396>
 808fdfa:	686b      	ldr	r3, [r5, #4]
 808fdfc:	b91b      	cbnz	r3, 808fe06 <mbedtls_ssl_handshake_client_step+0x39e>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808fdfe:	6823      	ldr	r3, [r4, #0]
 808fe00:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 808fe02:	2b00      	cmp	r3, #0
 808fe04:	d0f0      	beq.n	808fde8 <mbedtls_ssl_handshake_client_step+0x380>
 808fe06:	681b      	ldr	r3, [r3, #0]
 808fe08:	2b00      	cmp	r3, #0
 808fe0a:	d0ed      	beq.n	808fde8 <mbedtls_ssl_handshake_client_step+0x380>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 808fe0c:	4620      	mov	r0, r4
 808fe0e:	f7ff fe20 	bl	808fa52 <mbedtls_ssl_own_key>
 808fe12:	2800      	cmp	r0, #0
 808fe14:	d044      	beq.n	808fea0 <mbedtls_ssl_handshake_client_step+0x438>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
 808fe16:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
 808fe1a:	a908      	add	r1, sp, #32
 808fe1c:	4620      	mov	r0, r4
 808fe1e:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 808fe20:	68e3      	ldr	r3, [r4, #12]
 808fe22:	2b03      	cmp	r3, #3
 808fe24:	d175      	bne.n	808ff12 <mbedtls_ssl_handshake_client_step+0x4aa>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 808fe26:	6c23      	ldr	r3, [r4, #64]	; 0x40
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 808fe28:	4620      	mov	r0, r4
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 808fe2a:	681b      	ldr	r3, [r3, #0]
 808fe2c:	7a5d      	ldrb	r5, [r3, #9]
 808fe2e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808fe32:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 808fe34:	bf0b      	itete	eq
 808fe36:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 808fe38:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 808fe3a:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 808fe3c:	711a      	strbne	r2, [r3, #4]
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 808fe3e:	bf18      	it	ne
 808fe40:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 808fe42:	f7ff fe06 	bl	808fa52 <mbedtls_ssl_own_key>
 808fe46:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 808fe4a:	f7fb fad4 	bl	808b3f6 <mbedtls_ssl_sig_from_pk>
 808fe4e:	7170      	strb	r0, [r6, #5]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 808fe50:	4620      	mov	r0, r4
 808fe52:	f7ff fdfe 	bl	808fa52 <mbedtls_ssl_own_key>
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 808fe56:	6823      	ldr	r3, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 808fe58:	4629      	mov	r1, r5
 808fe5a:	69da      	ldr	r2, [r3, #28]
 808fe5c:	9203      	str	r2, [sp, #12]
 808fe5e:	699b      	ldr	r3, [r3, #24]
 808fe60:	aa08      	add	r2, sp, #32
 808fe62:	9302      	str	r3, [sp, #8]
 808fe64:	ab07      	add	r3, sp, #28
 808fe66:	9301      	str	r3, [sp, #4]
 808fe68:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808fe6c:	3308      	adds	r3, #8
 808fe6e:	9300      	str	r3, [sp, #0]
 808fe70:	2300      	movs	r3, #0
 808fe72:	f7fd f8c3 	bl	808cffc <mbedtls_pk_sign>
 808fe76:	2800      	cmp	r0, #0
 808fe78:	f040 831b 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 808fe7c:	9b07      	ldr	r3, [sp, #28]
 808fe7e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808fe82:	0a19      	lsrs	r1, r3, #8
 808fe84:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 808fe86:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808fe8a:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
 808fe8c:	3308      	adds	r3, #8
 808fe8e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808fe92:	2316      	movs	r3, #22
 808fe94:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 808fe98:	220f      	movs	r2, #15
 808fe9a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808fe9e:	e2c8      	b.n	8090432 <mbedtls_ssl_handshake_client_step+0x9ca>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 808fea0:	4806      	ldr	r0, [pc, #24]	; (808febc <mbedtls_ssl_handshake_client_step+0x454>)
 808fea2:	e306      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 808fea4:	4620      	mov	r0, r4
 808fea6:	f7fa fe7f 	bl	808aba8 <mbedtls_ssl_write_change_cipher_spec>
           break;
 808feaa:	e302      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 808feac:	4620      	mov	r0, r4
 808feae:	f7fa fed3 	bl	808ac58 <mbedtls_ssl_write_finished>
           break;
 808feb2:	e2fe      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
 808feb4:	ffff8f00 	.word	0xffff8f00
 808feb8:	ffff8680 	.word	0xffff8680
 808febc:	ffff8a00 	.word	0xffff8a00
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808fec0:	4620      	mov	r0, r4
 808fec2:	f7fa fdef 	bl	808aaa4 <mbedtls_ssl_read_record>
 808fec6:	2800      	cmp	r0, #0
 808fec8:	f040 82f3 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808fecc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808fece:	2b16      	cmp	r3, #22
 808fed0:	f47f ae3f 	bne.w	808fb52 <mbedtls_ssl_handshake_client_step+0xea>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 808fed4:	6e67      	ldr	r7, [r4, #100]	; 0x64
 808fed6:	783b      	ldrb	r3, [r7, #0]
 808fed8:	2b04      	cmp	r3, #4
 808feda:	d103      	bne.n	808fee4 <mbedtls_ssl_handshake_client_step+0x47c>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 808fedc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 808fede:	2b09      	cmp	r3, #9
 808fee0:	f200 82af 	bhi.w	8090442 <mbedtls_ssl_handshake_client_step+0x9da>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808fee4:	2232      	movs	r2, #50	; 0x32
 808fee6:	2102      	movs	r1, #2
 808fee8:	4620      	mov	r0, r4
 808feea:	f7fa fb8d 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 808feee:	48c1      	ldr	r0, [pc, #772]	; (80901f4 <mbedtls_ssl_handshake_client_step+0x78c>)
 808fef0:	e2df      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 808fef2:	4620      	mov	r0, r4
 808fef4:	f7fa fe66 	bl	808abc4 <mbedtls_ssl_parse_change_cipher_spec>
           break;
 808fef8:	e2db      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 808fefa:	4620      	mov	r0, r4
 808fefc:	f7fa fef4 	bl	808ace8 <mbedtls_ssl_parse_finished>
           break;
 808ff00:	e2d7      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 808ff02:	230f      	movs	r3, #15
 808ff04:	e23f      	b.n	8090386 <mbedtls_ssl_handshake_client_step+0x91e>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 808ff06:	4620      	mov	r0, r4
 808ff08:	f7fb f8f0 	bl	808b0ec <mbedtls_ssl_handshake_wrapup>
 808ff0c:	e23c      	b.n	8090388 <mbedtls_ssl_handshake_client_step+0x920>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
 808ff0e:	48ba      	ldr	r0, [pc, #744]	; (80901f8 <mbedtls_ssl_handshake_client_step+0x790>)
 808ff10:	e2cf      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808ff12:	48ba      	ldr	r0, [pc, #744]	; (80901fc <mbedtls_ssl_handshake_client_step+0x794>)
 808ff14:	e2cd      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 808ff16:	f852 0b04 	ldr.w	r0, [r2], #4
 808ff1a:	429a      	cmp	r2, r3
 808ff1c:	f841 0b04 	str.w	r0, [r1], #4
 808ff20:	d1f9      	bne.n	808ff16 <mbedtls_ssl_handshake_client_step+0x4ae>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 808ff22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808ff24:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
 808ff26:	f1a3 0210 	sub.w	r2, r3, #16
 808ff2a:	2a10      	cmp	r2, #16
 808ff2c:	d806      	bhi.n	808ff3c <mbedtls_ssl_handshake_client_step+0x4d4>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 808ff2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
 808ff30:	f8d2 21e4 	ldr.w	r2, [r2, #484]	; 0x1e4
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
 808ff34:	2a00      	cmp	r2, #0
 808ff36:	bf08      	it	eq
 808ff38:	2300      	moveq	r3, #0
 808ff3a:	e000      	b.n	808ff3e <mbedtls_ssl_handshake_client_step+0x4d6>
 808ff3c:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
 808ff3e:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 808ff40:	b16a      	cbz	r2, 808ff5e <mbedtls_ssl_handshake_client_step+0x4f6>
 808ff42:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 808ff44:	b15a      	cbz	r2, 808ff5e <mbedtls_ssl_handshake_client_step+0x4f6>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 808ff46:	6823      	ldr	r3, [r4, #0]
 808ff48:	2220      	movs	r2, #32
 808ff4a:	699d      	ldr	r5, [r3, #24]
 808ff4c:	310c      	adds	r1, #12
 808ff4e:	69d8      	ldr	r0, [r3, #28]
 808ff50:	47a8      	blx	r5

            if( ret != 0 )
 808ff52:	2800      	cmp	r0, #0
 808ff54:	f040 82ad 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
 808ff58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808ff5a:	2320      	movs	r3, #32
 808ff5c:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 808ff5e:	f106 0527 	add.w	r5, r6, #39	; 0x27
 808ff62:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26

    for( i = 0; i < n; i++ )
 808ff66:	2200      	movs	r2, #0
 808ff68:	4293      	cmp	r3, r2
 808ff6a:	d005      	beq.n	808ff78 <mbedtls_ssl_handshake_client_step+0x510>
        *p++ = ssl->session_negotiate->id[i];
 808ff6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808ff6e:	4411      	add	r1, r2
 808ff70:	7b09      	ldrb	r1, [r1, #12]
 808ff72:	54a9      	strb	r1, [r5, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
 808ff74:	3201      	adds	r2, #1
 808ff76:	e7f7      	b.n	808ff68 <mbedtls_ssl_handshake_client_step+0x500>
 808ff78:	441d      	add	r5, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 808ff7a:	68e2      	ldr	r2, [r4, #12]
 808ff7c:	6823      	ldr	r3, [r4, #0]

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
 808ff7e:	f105 0902 	add.w	r9, r5, #2
 808ff82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
 808ff86:	2700      	movs	r7, #0
 808ff88:	f1a3 0804 	sub.w	r8, r3, #4
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
 808ff8c:	f858 bf04 	ldr.w	fp, [r8, #4]!
 808ff90:	f1bb 0f00 	cmp.w	fp, #0
 808ff94:	d01c      	beq.n	808ffd0 <mbedtls_ssl_handshake_client_step+0x568>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 808ff96:	4658      	mov	r0, fp
 808ff98:	f7f6 fe2e 	bl	8086bf8 <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
 808ff9c:	6822      	ldr	r2, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 808ff9e:	f892 105d 	ldrb.w	r1, [r2, #93]	; 0x5d
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 808ffa2:	2800      	cmp	r0, #0
 808ffa4:	d0f2      	beq.n	808ff8c <mbedtls_ssl_handshake_client_step+0x524>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 808ffa6:	6903      	ldr	r3, [r0, #16]
 808ffa8:	4299      	cmp	r1, r3
 808ffaa:	dbef      	blt.n	808ff8c <mbedtls_ssl_handshake_client_step+0x524>
 808ffac:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 808ffb0:	6983      	ldr	r3, [r0, #24]
 808ffb2:	429a      	cmp	r2, r3
 808ffb4:	dcea      	bgt.n	808ff8c <mbedtls_ssl_handshake_client_step+0x524>

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 808ffb6:	f8d8 3000 	ldr.w	r3, [r8]
            continue;

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
 808ffba:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 808ffbc:	121a      	asrs	r2, r3, #8
 808ffbe:	464b      	mov	r3, r9
 808ffc0:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 808ffc4:	f8d8 2000 	ldr.w	r2, [r8]
 808ffc8:	f889 2001 	strb.w	r2, [r9, #1]
 808ffcc:	4699      	mov	r9, r3
 808ffce:	e7dd      	b.n	808ff8c <mbedtls_ssl_handshake_client_step+0x524>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 808ffd0:	23ff      	movs	r3, #255	; 0xff
        n++;
 808ffd2:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 808ffd4:	f889 3001 	strb.w	r3, [r9, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 808ffd8:	09fb      	lsrs	r3, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 808ffda:	f889 b000 	strb.w	fp, [r9]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 808ffde:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 808ffe0:	702b      	strb	r3, [r5, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 808ffe2:	2301      	movs	r3, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 808ffe4:	706f      	strb	r7, [r5, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 808ffe6:	f889 3002 	strb.w	r3, [r9, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 808ffea:	f889 b003 	strb.w	fp, [r9, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808ffee:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 808fff2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 808fff6:	f109 0704 	add.w	r7, r9, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 808fffa:	f109 0806 	add.w	r8, r9, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808fffe:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 8090002:	b358      	cbz	r0, 809005c <mbedtls_ssl_handshake_client_step+0x5f4>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 8090004:	f003 faf3 	bl	80935ee <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 8090008:	45a8      	cmp	r8, r5
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 809000a:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 809000c:	d828      	bhi.n	8090060 <mbedtls_ssl_handshake_client_step+0x5f8>
 809000e:	f100 0a09 	add.w	sl, r0, #9
 8090012:	ebc8 0505 	rsb	r5, r8, r5
 8090016:	4555      	cmp	r5, sl
 8090018:	d322      	bcc.n	8090060 <mbedtls_ssl_handshake_client_step+0x5f8>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 809001a:	1d43      	adds	r3, r0, #5
 809001c:	0a1b      	lsrs	r3, r3, #8
 809001e:	f889 3008 	strb.w	r3, [r9, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 8090022:	b2c3      	uxtb	r3, r0
 8090024:	1d59      	adds	r1, r3, #5
 8090026:	f889 1009 	strb.w	r1, [r9, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 809002a:	1cc1      	adds	r1, r0, #3
 809002c:	0a09      	lsrs	r1, r1, #8
 809002e:	f889 100a 	strb.w	r1, [r9, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 8090032:	1cd9      	adds	r1, r3, #3
 8090034:	f889 100b 	strb.w	r1, [r9, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 8090038:	0a01      	lsrs	r1, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 809003a:	f889 b006 	strb.w	fp, [r9, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 809003e:	f889 b007 	strb.w	fp, [r9, #7]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 8090042:	f889 b00c 	strb.w	fp, [r9, #12]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 8090046:	f889 100d 	strb.w	r1, [r9, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 809004a:	f889 300e 	strb.w	r3, [r9, #14]

    memcpy( p, ssl->hostname, hostname_len );
 809004e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8090052:	f109 000f 	add.w	r0, r9, #15
 8090056:	f003 fa7c 	bl	8093552 <memcpy>
 809005a:	e002      	b.n	8090062 <mbedtls_ssl_handshake_client_step+0x5fa>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
 809005c:	4682      	mov	sl, r0
 809005e:	e000      	b.n	8090062 <mbedtls_ssl_handshake_client_step+0x5fa>
 8090060:	46da      	mov	sl, fp
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 8090062:	6823      	ldr	r3, [r4, #0]
 8090064:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8090068:	2a03      	cmp	r2, #3
 809006a:	d13c      	bne.n	80900e6 <mbedtls_ssl_handshake_client_step+0x67e>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 809006c:	6d59      	ldr	r1, [r3, #84]	; 0x54
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t sig_alg_len = 0;
 809006e:	2000      	movs	r0, #0
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8090070:	f851 3010 	ldr.w	r3, [r1, r0, lsl #1]
 8090074:	b10b      	cbz	r3, 809007a <mbedtls_ssl_handshake_client_step+0x612>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
 8090076:	3002      	adds	r0, #2
 8090078:	e7fa      	b.n	8090070 <mbedtls_ssl_handshake_client_step+0x608>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 809007a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 809007e:	f10a 0b02 	add.w	fp, sl, #2
 8090082:	44bb      	add	fp, r7
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 8090084:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 8090088:	4593      	cmp	fp, r2
 809008a:	d82d      	bhi.n	80900e8 <mbedtls_ssl_handshake_client_step+0x680>
 809008c:	ebcb 0202 	rsb	r2, fp, r2
 8090090:	3006      	adds	r0, #6
 8090092:	4282      	cmp	r2, r0
 8090094:	d328      	bcc.n	80900e8 <mbedtls_ssl_handshake_client_step+0x680>
 8090096:	461d      	mov	r5, r3
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8090098:	f851 0015 	ldr.w	r0, [r1, r5, lsl #1]
 809009c:	9105      	str	r1, [sp, #20]
 809009e:	1caa      	adds	r2, r5, #2
 80900a0:	b170      	cbz	r0, 80900c0 <mbedtls_ssl_handshake_client_step+0x658>
 80900a2:	9204      	str	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80900a4:	f7fb f9b0 	bl	808b408 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 80900a8:	9a04      	ldr	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80900aa:	eb0b 0305 	add.w	r3, fp, r5
 80900ae:	7198      	strb	r0, [r3, #6]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 80900b0:	4615      	mov	r5, r2
 80900b2:	eb0b 0302 	add.w	r3, fp, r2
 80900b6:	f04f 0201 	mov.w	r2, #1
 80900ba:	9905      	ldr	r1, [sp, #20]
 80900bc:	715a      	strb	r2, [r3, #5]
 80900be:	e7eb      	b.n	8090098 <mbedtls_ssl_handshake_client_step+0x630>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 80900c0:	230d      	movs	r3, #13
 80900c2:	f88b 3001 	strb.w	r3, [fp, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 80900c6:	0a13      	lsrs	r3, r2, #8
 80900c8:	f88b 3002 	strb.w	r3, [fp, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 80900cc:	b2eb      	uxtb	r3, r5
 80900ce:	1c9a      	adds	r2, r3, #2
 80900d0:	f88b 2003 	strb.w	r2, [fp, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 80900d4:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 80900d6:	f88b 3005 	strb.w	r3, [fp, #5]
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 80900da:	f88b 0000 	strb.w	r0, [fp]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 80900de:	f88b 2004 	strb.w	r2, [fp, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );

    *olen = 6 + sig_alg_len;
 80900e2:	1dab      	adds	r3, r5, #6
 80900e4:	e000      	b.n	80900e8 <mbedtls_ssl_handshake_client_step+0x680>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
 80900e6:	2300      	movs	r3, #0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 80900e8:	6822      	ldr	r2, [r4, #0]
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 80900ea:	4453      	add	r3, sl
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 80900ec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80900f0:	f412 72e0 	ands.w	r2, r2, #448	; 0x1c0
 80900f4:	d018      	beq.n	8090128 <mbedtls_ssl_handshake_client_step+0x6c0>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80900f6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 80900fa:	1c99      	adds	r1, r3, #2
 80900fc:	4439      	add	r1, r7
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80900fe:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
 8090102:	4281      	cmp	r1, r0
 8090104:	f04f 0200 	mov.w	r2, #0
 8090108:	d80e      	bhi.n	8090128 <mbedtls_ssl_handshake_client_step+0x6c0>
 809010a:	1a40      	subs	r0, r0, r1
 809010c:	2804      	cmp	r0, #4
 809010e:	d90b      	bls.n	8090128 <mbedtls_ssl_handshake_client_step+0x6c0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 8090110:	2001      	movs	r0, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 8090112:	700a      	strb	r2, [r1, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 8090114:	7048      	strb	r0, [r1, #1]

    *p++ = 0x00;
 8090116:	708a      	strb	r2, [r1, #2]
    *p++ = 1;
 8090118:	70c8      	strb	r0, [r1, #3]

    *p++ = ssl->conf->mfl_code;
 809011a:	6822      	ldr	r2, [r4, #0]
 809011c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8090120:	f3c2 1282 	ubfx	r2, r2, #6, #3
 8090124:	710a      	strb	r2, [r1, #4]

    *olen = 5;
 8090126:	2205      	movs	r2, #5
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 8090128:	189d      	adds	r5, r3, r2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 809012a:	6823      	ldr	r3, [r4, #0]
 809012c:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 8090130:	f001 0102 	and.w	r1, r1, #2
 8090134:	f001 0aff 	and.w	sl, r1, #255	; 0xff
 8090138:	b329      	cbz	r1, 8090186 <mbedtls_ssl_handshake_client_step+0x71e>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 809013a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 809013e:	1ca8      	adds	r0, r5, #2
 8090140:	4438      	add	r0, r7
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 8090142:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 8090146:	4298      	cmp	r0, r3
 8090148:	d816      	bhi.n	8090178 <mbedtls_ssl_handshake_client_step+0x710>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 809014a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 809014c:	1a1b      	subs	r3, r3, r0
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 809014e:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 8090150:	f102 0a04 	add.w	sl, r2, #4
 8090154:	4553      	cmp	r3, sl
 8090156:	f04f 0300 	mov.w	r3, #0
 809015a:	d310      	bcc.n	809017e <mbedtls_ssl_handshake_client_step+0x716>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 809015c:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 809015e:	2323      	movs	r3, #35	; 0x23
 8090160:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 8090162:	0a13      	lsrs	r3, r2, #8
 8090164:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 8090166:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 8090168:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 809016a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 809016c:	b149      	cbz	r1, 8090182 <mbedtls_ssl_handshake_client_step+0x71a>
 809016e:	b142      	cbz	r2, 8090182 <mbedtls_ssl_handshake_client_step+0x71a>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
 8090170:	3004      	adds	r0, #4
 8090172:	f003 f9ee 	bl	8093552 <memcpy>
 8090176:	e006      	b.n	8090186 <mbedtls_ssl_handshake_client_step+0x71e>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
 8090178:	f04f 0a00 	mov.w	sl, #0
 809017c:	e003      	b.n	8090186 <mbedtls_ssl_handshake_client_step+0x71e>
 809017e:	469a      	mov	sl, r3
 8090180:	e001      	b.n	8090186 <mbedtls_ssl_handshake_client_step+0x71e>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
 8090182:	f04f 0a04 	mov.w	sl, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
 8090186:	eb15 030a 	adds.w	r3, r5, sl
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 809018a:	bf1f      	itttt	ne
 809018c:	0a1a      	lsrne	r2, r3, #8
 809018e:	f889 2004 	strbne.w	r2, [r9, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 8090192:	f889 3005 	strbne.w	r3, [r9, #5]
        p += ext_len;
 8090196:	eb08 0703 	addne.w	r7, r8, r3
    }

    ssl->out_msglen  = p - buf;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 809019a:	2316      	movs	r3, #22
 809019c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 80901a0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80901a4:	2201      	movs	r2, #1
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
 80901a6:	1bbe      	subs	r6, r7, r6
 80901a8:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 80901ac:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 80901ae:	6863      	ldr	r3, [r4, #4]
 80901b0:	4413      	add	r3, r2
 80901b2:	e141      	b.n	8090438 <mbedtls_ssl_handshake_client_step+0x9d0>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
 80901b4:	2246      	movs	r2, #70	; 0x46
 80901b6:	2102      	movs	r1, #2
 80901b8:	4620      	mov	r0, r4
 80901ba:	f7fa fa25 	bl	808a608 <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 80901be:	4810      	ldr	r0, [pc, #64]	; (8090200 <mbedtls_ssl_handshake_client_step+0x798>)
 80901c0:	e177      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 80901c2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80901c4:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 80901c8:	4293      	cmp	r3, r2
 80901ca:	d91b      	bls.n	8090204 <mbedtls_ssl_handshake_client_step+0x79c>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 80901cc:	eb08 0206 	add.w	r2, r8, r6
                  | ( buf[39 + n]       ) );
 80901d0:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
 80901d4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80901d8:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
 80901dc:	1e7a      	subs	r2, r7, #1
 80901de:	2a02      	cmp	r2, #2
 80901e0:	f67f acfa 	bls.w	808fbd8 <mbedtls_ssl_handshake_client_step+0x170>
 80901e4:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 80901e8:	443a      	add	r2, r7
 80901ea:	4293      	cmp	r3, r2
 80901ec:	f47f acf4 	bne.w	808fbd8 <mbedtls_ssl_handshake_client_step+0x170>
 80901f0:	e00e      	b.n	8090210 <mbedtls_ssl_handshake_client_step+0x7a8>
 80901f2:	bf00      	nop
 80901f4:	ffff9200 	.word	0xffff9200
 80901f8:	ffff8c00 	.word	0xffff8c00
 80901fc:	ffff9400 	.word	0xffff9400
 8090200:	ffff9180 	.word	0xffff9180
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 8090204:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 8090208:	4293      	cmp	r3, r2
 809020a:	f47f ace5 	bne.w	808fbd8 <mbedtls_ssl_handshake_client_step+0x170>
    {
        ext_len = 0;
 809020e:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 8090210:	eb08 0306 	add.w	r3, r8, r6
 8090214:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 8090218:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 809021c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 8090220:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 8090224:	2b00      	cmp	r3, #0
 8090226:	f43f acd9 	beq.w	808fbdc <mbedtls_ssl_handshake_client_step+0x174>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 809022a:	222f      	movs	r2, #47	; 0x2f
 809022c:	2102      	movs	r1, #2
 809022e:	4620      	mov	r0, r4
 8090230:	f7fa f9ea 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 8090234:	48a0      	ldr	r0, [pc, #640]	; (80904b8 <mbedtls_ssl_handshake_client_step+0xa50>)
 8090236:	e13c      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 8090238:	2e00      	cmp	r6, #0
 809023a:	f43f acec 	beq.w	808fc16 <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 809023e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 8090240:	6803      	ldr	r3, [r0, #0]
 8090242:	4599      	cmp	r9, r3
 8090244:	f47f ace7 	bne.w	808fc16 <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 8090248:	6843      	ldr	r3, [r0, #4]
 809024a:	2b00      	cmp	r3, #0
 809024c:	f47f ace3 	bne.w	808fc16 <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->compression != comp ||
 8090250:	6883      	ldr	r3, [r0, #8]
 8090252:	429e      	cmp	r6, r3
 8090254:	f47f acdf 	bne.w	808fc16 <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 8090258:	4632      	mov	r2, r6
 809025a:	4629      	mov	r1, r5
 809025c:	300c      	adds	r0, #12
 809025e:	f003 f969 	bl	8093534 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
 8090262:	2800      	cmp	r0, #0
 8090264:	f47f acd7 	bne.w	808fc16 <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 8090268:	230c      	movs	r3, #12
 809026a:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 809026c:	4620      	mov	r0, r4
 809026e:	f7f9 fe2b 	bl	8089ec8 <mbedtls_ssl_derive_keys>
 8090272:	4605      	mov	r5, r0
 8090274:	2800      	cmp	r0, #0
 8090276:	f43f ace1 	beq.w	808fc3c <mbedtls_ssl_handshake_client_step+0x1d4>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 809027a:	2250      	movs	r2, #80	; 0x50
 809027c:	2102      	movs	r1, #2
 809027e:	4620      	mov	r0, r4
 8090280:	f7fa f9c2 	bl	808a608 <mbedtls_ssl_send_alert_message>
 8090284:	e07c      	b.n	8090380 <mbedtls_ssl_handshake_client_step+0x918>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
 8090286:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8090288:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 809028a:	4290      	cmp	r0, r2
 809028c:	f47f acdb 	bne.w	808fc46 <mbedtls_ssl_handshake_client_step+0x1de>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 8090290:	f7f6 fcb2 	bl	8086bf8 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
 8090294:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 8090296:	2800      	cmp	r0, #0
 8090298:	f43f acda 	beq.w	808fc50 <mbedtls_ssl_handshake_client_step+0x1e8>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 809029c:	6902      	ldr	r2, [r0, #16]
 809029e:	429a      	cmp	r2, r3
 80902a0:	f73f acd6 	bgt.w	808fc50 <mbedtls_ssl_handshake_client_step+0x1e8>
 80902a4:	6982      	ldr	r2, [r0, #24]
 80902a6:	4293      	cmp	r3, r2
 80902a8:	f73f acd2 	bgt.w	808fc50 <mbedtls_ssl_handshake_client_step+0x1e8>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 80902ac:	f64f 7001 	movw	r0, #65281	; 0xff01
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 80902b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80902b2:	2200      	movs	r2, #0

    ext = buf + 40 + n;
 80902b4:	3628      	adds	r6, #40	; 0x28
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 80902b6:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 80902b8:	4446      	add	r6, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 80902ba:	2501      	movs	r5, #1

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
 80902bc:	2f00      	cmp	r7, #0
 80902be:	d03d      	beq.n	809033c <mbedtls_ssl_handshake_client_step+0x8d4>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 80902c0:	7873      	ldrb	r3, [r6, #1]
 80902c2:	7832      	ldrb	r2, [r6, #0]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 80902c4:	78b1      	ldrb	r1, [r6, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 80902c6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 80902ca:	78f3      	ldrb	r3, [r6, #3]
 80902cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

        if( ext_size + 4 > ext_len )
 80902d0:	1d19      	adds	r1, r3, #4
 80902d2:	428f      	cmp	r7, r1
 80902d4:	f4ff ac80 	bcc.w	808fbd8 <mbedtls_ssl_handshake_client_step+0x170>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 80902d8:	2a23      	cmp	r2, #35	; 0x23
 80902da:	d01e      	beq.n	809031a <mbedtls_ssl_handshake_client_step+0x8b2>
 80902dc:	4282      	cmp	r2, r0
 80902de:	d002      	beq.n	80902e6 <mbedtls_ssl_handshake_client_step+0x87e>
 80902e0:	2a01      	cmp	r2, #1
 80902e2:	d124      	bne.n	809032e <mbedtls_ssl_handshake_client_step+0x8c6>
 80902e4:	e008      	b.n	80902f8 <mbedtls_ssl_handshake_client_step+0x890>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 80902e6:	2b01      	cmp	r3, #1
 80902e8:	d101      	bne.n	80902ee <mbedtls_ssl_handshake_client_step+0x886>
 80902ea:	7932      	ldrb	r2, [r6, #4]
 80902ec:	b10a      	cbz	r2, 80902f2 <mbedtls_ssl_handshake_client_step+0x88a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 80902ee:	2228      	movs	r2, #40	; 0x28
 80902f0:	e4af      	b.n	808fc52 <mbedtls_ssl_handshake_client_step+0x1ea>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 80902f2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80902f6:	e01a      	b.n	809032e <mbedtls_ssl_handshake_client_step+0x8c6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 80902f8:	6822      	ldr	r2, [r4, #0]
 80902fa:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80902fe:	f402 7ee0 	and.w	lr, r2, #448	; 0x1c0
 8090302:	f1be 0f00 	cmp.w	lr, #0
 8090306:	d0f2      	beq.n	80902ee <mbedtls_ssl_handshake_client_step+0x886>
 8090308:	2b01      	cmp	r3, #1
 809030a:	d1f0      	bne.n	80902ee <mbedtls_ssl_handshake_client_step+0x886>
        len != 1 ||
 809030c:	f896 e004 	ldrb.w	lr, [r6, #4]
 8090310:	f3c2 1282 	ubfx	r2, r2, #6, #3
 8090314:	4596      	cmp	lr, r2
 8090316:	d00a      	beq.n	809032e <mbedtls_ssl_handshake_client_step+0x8c6>
 8090318:	e7e9      	b.n	80902ee <mbedtls_ssl_handshake_client_step+0x886>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 809031a:	6822      	ldr	r2, [r4, #0]
 809031c:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8090320:	0792      	lsls	r2, r2, #30
 8090322:	d5e4      	bpl.n	80902ee <mbedtls_ssl_handshake_client_step+0x886>
 8090324:	2b00      	cmp	r3, #0
 8090326:	d1e2      	bne.n	80902ee <mbedtls_ssl_handshake_client_step+0x886>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 8090328:	6b22      	ldr	r2, [r4, #48]	; 0x30
 809032a:	f8c2 51f4 	str.w	r5, [r2, #500]	; 0x1f4
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 809032e:	1afb      	subs	r3, r7, r3
 8090330:	1f1f      	subs	r7, r3, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
 8090332:	3b05      	subs	r3, #5
 8090334:	2b02      	cmp	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
 8090336:	440e      	add	r6, r1

        if( ext_len > 0 && ext_len < 4 )
 8090338:	d8c0      	bhi.n	80902bc <mbedtls_ssl_handshake_client_step+0x854>
 809033a:	e48e      	b.n	808fc5a <mbedtls_ssl_handshake_client_step+0x1f2>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 809033c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8090340:	bb13      	cbnz	r3, 8090388 <mbedtls_ssl_handshake_client_step+0x920>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 8090342:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 8090344:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8090348:	f003 0330 	and.w	r3, r3, #48	; 0x30
 809034c:	2b20      	cmp	r3, #32
 809034e:	d11b      	bne.n	8090388 <mbedtls_ssl_handshake_client_step+0x920>
 8090350:	e7cd      	b.n	80902ee <mbedtls_ssl_handshake_client_step+0x886>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );
 8090352:	465a      	mov	r2, fp
 8090354:	f107 010a 	add.w	r1, r7, #10
 8090358:	9004      	str	r0, [sp, #16]
 809035a:	f003 f8fa 	bl	8093552 <memcpy>

    ssl->session_negotiate->ticket = ticket;
 809035e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8090360:	9b04      	ldr	r3, [sp, #16]
    ssl->session_negotiate->ticket_len = ticket_len;
    ssl->session_negotiate->ticket_lifetime = lifetime;
 8090362:	0436      	lsls	r6, r6, #16
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
 8090364:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
 8090366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_lifetime = lifetime;
 8090368:	ea46 660a 	orr.w	r6, r6, sl, lsl #24
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
    ssl->session_negotiate->ticket_len = ticket_len;
 809036c:	f8c3 b068 	str.w	fp, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
 8090370:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8090372:	ea46 0808 	orr.w	r8, r6, r8
 8090376:	ea48 2609 	orr.w	r6, r8, r9, lsl #8
 809037a:	66de      	str	r6, [r3, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
 809037c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 809037e:	609d      	str	r5, [r3, #8]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );

    return( 0 );
 8090380:	4628      	mov	r0, r5
 8090382:	e096      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
 8090384:	2306      	movs	r3, #6
 8090386:	6063      	str	r3, [r4, #4]
        return( 0 );
 8090388:	2000      	movs	r0, #0
 809038a:	e092      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 809038c:	4620      	mov	r0, r4
 809038e:	f7fa fb89 	bl	808aaa4 <mbedtls_ssl_read_record>
 8090392:	2800      	cmp	r0, #0
 8090394:	f040 808d 	bne.w	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8090398:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 809039a:	2b16      	cmp	r3, #22
 809039c:	f47f abd9 	bne.w	808fb52 <mbedtls_ssl_handshake_client_step+0xea>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 80903a0:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 80903a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 80903a4:	3301      	adds	r3, #1
 80903a6:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 80903a8:	7813      	ldrb	r3, [r2, #0]
 80903aa:	2b0d      	cmp	r3, #13
 80903ac:	bf0c      	ite	eq
 80903ae:	2301      	moveq	r3, #1
 80903b0:	2300      	movne	r3, #0
 80903b2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 80903b6:	d002      	beq.n	80903be <mbedtls_ssl_handshake_client_step+0x956>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 80903b8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80903bc:	e079      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 80903be:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80903c0:	2904      	cmp	r1, #4
 80903c2:	d806      	bhi.n	80903d2 <mbedtls_ssl_handshake_client_step+0x96a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80903c4:	2232      	movs	r2, #50	; 0x32
 80903c6:	2102      	movs	r1, #2
 80903c8:	4620      	mov	r0, r4
 80903ca:	f7fa f91d 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 80903ce:	483b      	ldr	r0, [pc, #236]	; (80904bc <mbedtls_ssl_handshake_client_step+0xa54>)
 80903d0:	e06f      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 80903d2:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80903d4:	1ddd      	adds	r5, r3, #7
 80903d6:	42a9      	cmp	r1, r5
 80903d8:	d9f4      	bls.n	80903c4 <mbedtls_ssl_handshake_client_step+0x95c>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80903da:	68e0      	ldr	r0, [r4, #12]
 80903dc:	2803      	cmp	r0, #3
 80903de:	d109      	bne.n	80903f4 <mbedtls_ssl_handshake_client_step+0x98c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80903e0:	18d6      	adds	r6, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 80903e2:	7977      	ldrb	r7, [r6, #5]
 80903e4:	79b0      	ldrb	r0, [r6, #6]
 80903e6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 80903ea:	4405      	add	r5, r0
 80903ec:	42a9      	cmp	r1, r5
 80903ee:	d9e9      	bls.n	80903c4 <mbedtls_ssl_handshake_client_step+0x95c>
 80903f0:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 80903f2:	4403      	add	r3, r0
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80903f4:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80903f6:	7950      	ldrb	r0, [r2, #5]
 80903f8:	7992      	ldrb	r2, [r2, #6]
 80903fa:	3307      	adds	r3, #7
 80903fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8090400:	4413      	add	r3, r2
 8090402:	4299      	cmp	r1, r3
 8090404:	d0c0      	beq.n	8090388 <mbedtls_ssl_handshake_client_step+0x920>
 8090406:	e7dd      	b.n	80903c4 <mbedtls_ssl_handshake_client_step+0x95c>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 8090408:	2232      	movs	r2, #50	; 0x32
 809040a:	2102      	movs	r1, #2
 809040c:	4620      	mov	r0, r4
 809040e:	f7fa f8fb 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 8090412:	482b      	ldr	r0, [pc, #172]	; (80904c0 <mbedtls_ssl_handshake_client_step+0xa58>)
 8090414:	e04d      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8090416:	482b      	ldr	r0, [pc, #172]	; (80904c4 <mbedtls_ssl_handshake_client_step+0xa5c>)
 8090418:	e04b      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 809041a:	482b      	ldr	r0, [pc, #172]	; (80904c8 <mbedtls_ssl_handshake_client_step+0xa60>)
 809041c:	e049      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 809041e:	9b08      	ldr	r3, [sp, #32]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 8090420:	2210      	movs	r2, #16
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 8090422:	3304      	adds	r3, #4
 8090424:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8090428:	2316      	movs	r3, #22
 809042a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 809042e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8090432:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 8090434:	6863      	ldr	r3, [r4, #4]
 8090436:	3301      	adds	r3, #1
 8090438:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 809043a:	4620      	mov	r0, r4
 809043c:	f7f9 ff30 	bl	808a2a0 <mbedtls_ssl_write_record>
 8090440:	e037      	b.n	80904b2 <mbedtls_ssl_handshake_client_step+0xa4a>
    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 8090442:	7a7a      	ldrb	r2, [r7, #9]
 8090444:	f897 b008 	ldrb.w	fp, [r7, #8]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 8090448:	f897 a004 	ldrb.w	sl, [r7, #4]
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 809044c:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 8090450:	f10b 020a 	add.w	r2, fp, #10
 8090454:	4293      	cmp	r3, r2
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 8090456:	797e      	ldrb	r6, [r7, #5]
               ( msg[2] <<  8 ) | ( msg[3]       );
 8090458:	f897 9006 	ldrb.w	r9, [r7, #6]
 809045c:	f897 8007 	ldrb.w	r8, [r7, #7]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 8090460:	f47f ad40 	bne.w	808fee4 <mbedtls_ssl_handshake_client_step+0x47c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
 8090464:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8090466:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 809046a:	230c      	movs	r3, #12
 809046c:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
 809046e:	f1bb 0f00 	cmp.w	fp, #0
 8090472:	d089      	beq.n	8090388 <mbedtls_ssl_handshake_client_step+0x920>
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
 8090474:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8090476:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8090478:	6e92      	ldr	r2, [r2, #104]	; 0x68
 809047a:	441a      	add	r2, r3
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 809047c:	429a      	cmp	r2, r3
 809047e:	d002      	beq.n	8090486 <mbedtls_ssl_handshake_client_step+0xa1e>
 8090480:	7018      	strb	r0, [r3, #0]
 8090482:	3301      	adds	r3, #1
 8090484:	e7fa      	b.n	809047c <mbedtls_ssl_handshake_client_step+0xa14>
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 8090486:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket = NULL;
 8090488:	2500      	movs	r5, #0
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 809048a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 809048c:	f001 f8fc 	bl	8091688 <free>
    ssl->session_negotiate->ticket = NULL;
 8090490:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_len = 0;

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 8090492:	4659      	mov	r1, fp
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
 8090494:	665d      	str	r5, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
 8090496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 8090498:	2001      	movs	r0, #1

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
 809049a:	669d      	str	r5, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 809049c:	f002 ff3c 	bl	8093318 <calloc>
 80904a0:	2800      	cmp	r0, #0
 80904a2:	f47f af56 	bne.w	8090352 <mbedtls_ssl_handshake_client_step+0x8ea>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80904a6:	2250      	movs	r2, #80	; 0x50
 80904a8:	2102      	movs	r1, #2
 80904aa:	4620      	mov	r0, r4
 80904ac:	f7fa f8ac 	bl	808a608 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80904b0:	4806      	ldr	r0, [pc, #24]	; (80904cc <mbedtls_ssl_handshake_client_step+0xa64>)
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 80904b2:	b015      	add	sp, #84	; 0x54
 80904b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80904b8:	ffff8f80 	.word	0xffff8f80
 80904bc:	ffff8580 	.word	0xffff8580
 80904c0:	ffff8480 	.word	0xffff8480
 80904c4:	ffff8900 	.word	0xffff8900
 80904c8:	ffff9300 	.word	0xffff9300
 80904cc:	ffff8100 	.word	0xffff8100

080904d0 <_ZN5CryptC1Ev>:
#include "Crypt.h"
#include "application.h"
Crypt::Crypt(){
 80904d0:	b570      	push	{r4, r5, r6, lr}
 80904d2:	4604      	mov	r4, r0
 80904d4:	4b35      	ldr	r3, [pc, #212]	; (80905ac <_ZN5CryptC1Ev+0xdc>)
 80904d6:	2220      	movs	r2, #32
 80904d8:	6003      	str	r3, [r0, #0]
 80904da:	2100      	movs	r1, #0
 80904dc:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80904e0:	f003 f85d 	bl	809359e <memset>
 80904e4:	2266      	movs	r2, #102	; 0x66
 80904e6:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
 80904ea:	224a      	movs	r2, #74	; 0x4a
 80904ec:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
 80904f0:	2201      	movs	r2, #1
 80904f2:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238
 80904f6:	2263      	movs	r2, #99	; 0x63
 80904f8:	f884 2239 	strb.w	r2, [r4, #569]	; 0x239
 80904fc:	2279      	movs	r2, #121	; 0x79
 80904fe:	f884 223a 	strb.w	r2, [r4, #570]	; 0x23a
 8090502:	2262      	movs	r2, #98	; 0x62
 8090504:	f884 223b 	strb.w	r2, [r4, #571]	; 0x23b
 8090508:	2224      	movs	r2, #36	; 0x24
 809050a:	f884 223d 	strb.w	r2, [r4, #573]	; 0x23d
 809050e:	2253      	movs	r2, #83	; 0x53
 8090510:	f884 223e 	strb.w	r2, [r4, #574]	; 0x23e
 8090514:	2235      	movs	r2, #53	; 0x35
 8090516:	230c      	movs	r3, #12
 8090518:	205b      	movs	r0, #91	; 0x5b
 809051a:	f884 223f 	strb.w	r2, [r4, #575]	; 0x23f
 809051e:	2202      	movs	r2, #2
 8090520:	f884 3235 	strb.w	r3, [r4, #565]	; 0x235
 8090524:	f884 323c 	strb.w	r3, [r4, #572]	; 0x23c
 8090528:	f884 2240 	strb.w	r2, [r4, #576]	; 0x240
 809052c:	f884 0245 	strb.w	r0, [r4, #581]	; 0x245
 8090530:	2205      	movs	r2, #5
 8090532:	2037      	movs	r0, #55	; 0x37
 8090534:	f884 324e 	strb.w	r3, [r4, #590]	; 0x24e
 8090538:	232d      	movs	r3, #45	; 0x2d
 809053a:	2143      	movs	r1, #67	; 0x43
 809053c:	f884 2241 	strb.w	r2, [r4, #577]	; 0x241
 8090540:	f884 024a 	strb.w	r0, [r4, #586]	; 0x24a
 8090544:	2222      	movs	r2, #34	; 0x22
 8090546:	2064      	movs	r0, #100	; 0x64
 8090548:	f884 324f 	strb.w	r3, [r4, #591]	; 0x24f
 809054c:	231d      	movs	r3, #29
 809054e:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
 8090552:	f884 2242 	strb.w	r2, [r4, #578]	; 0x242
 8090556:	f884 1246 	strb.w	r1, [r4, #582]	; 0x246
 809055a:	2265      	movs	r2, #101	; 0x65
 809055c:	212b      	movs	r1, #43	; 0x2b
 809055e:	f884 024b 	strb.w	r0, [r4, #587]	; 0x24b
 8090562:	f884 3250 	strb.w	r3, [r4, #592]	; 0x250
 8090566:	2041      	movs	r0, #65	; 0x41
 8090568:	4b11      	ldr	r3, [pc, #68]	; (80905b0 <_ZN5CryptC1Ev+0xe0>)
 809056a:	f884 2243 	strb.w	r2, [r4, #579]	; 0x243
 809056e:	f884 1247 	strb.w	r1, [r4, #583]	; 0x247
 8090572:	2252      	movs	r2, #82	; 0x52
 8090574:	216e      	movs	r1, #110	; 0x6e
 8090576:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
 809057a:	200d      	movs	r0, #13
 809057c:	f884 2244 	strb.w	r2, [r4, #580]	; 0x244
 8090580:	f884 1248 	strb.w	r1, [r4, #584]	; 0x248
 8090584:	f884 024d 	strb.w	r0, [r4, #589]	; 0x24d
 8090588:	f884 1251 	strb.w	r1, [r4, #593]	; 0x251
 809058c:	f884 2252 	strb.w	r2, [r4, #594]	; 0x252
 8090590:	f504 7519 	add.w	r5, r4, #612	; 0x264
 8090594:	f103 0610 	add.w	r6, r3, #16
 8090598:	462a      	mov	r2, r5
 809059a:	6818      	ldr	r0, [r3, #0]
 809059c:	6859      	ldr	r1, [r3, #4]
 809059e:	3308      	adds	r3, #8
 80905a0:	c203      	stmia	r2!, {r0, r1}
 80905a2:	42b3      	cmp	r3, r6
 80905a4:	4615      	mov	r5, r2
 80905a6:	d1f7      	bne.n	8090598 <_ZN5CryptC1Ev+0xc8>

}
 80905a8:	4620      	mov	r0, r4
 80905aa:	bd70      	pop	{r4, r5, r6, pc}
 80905ac:	08096195 	.word	0x08096195
 80905b0:	08096185 	.word	0x08096185

080905b4 <_ZN5Crypt11generateKeyEv>:


//generate key
int Crypt::generateKey(){
 80905b4:	b570      	push	{r4, r5, r6, lr}
 80905b6:	4604      	mov	r4, r0
    int ret=0;

    mbedtls_aes_init(&aes_in);
 80905b8:	1d06      	adds	r6, r0, #4
 80905ba:	4630      	mov	r0, r6
    mbedtls_aes_init(&aes_out);
 80905bc:	f504 758e 	add.w	r5, r4, #284	; 0x11c

//generate key
int Crypt::generateKey(){
    int ret=0;

    mbedtls_aes_init(&aes_in);
 80905c0:	f7fc fed6 	bl	808d370 <mbedtls_aes_init>
    mbedtls_aes_init(&aes_out);
 80905c4:	4628      	mov	r0, r5
 80905c6:	f7fc fed3 	bl	808d370 <mbedtls_aes_init>
    memcpy(iv,ogiv,16);
 80905ca:	f504 7319 	add.w	r3, r4, #612	; 0x264
 80905ce:	f504 7215 	add.w	r2, r4, #596	; 0x254
 80905d2:	f504 711d 	add.w	r1, r4, #628	; 0x274
 80905d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80905da:	428b      	cmp	r3, r1
 80905dc:	f842 0b04 	str.w	r0, [r2], #4
 80905e0:	d1f9      	bne.n	80905d6 <_ZN5Crypt11generateKeyEv+0x22>
    
    mbedtls_aes_setkey_enc( &aes_in, key, 256 );
 80905e2:	f504 740d 	add.w	r4, r4, #564	; 0x234
 80905e6:	4621      	mov	r1, r4
 80905e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80905ec:	4630      	mov	r0, r6
 80905ee:	f7fc fecf 	bl	808d390 <mbedtls_aes_setkey_enc>
    mbedtls_aes_setkey_dec( &aes_out, key, 256 );
 80905f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80905f6:	4621      	mov	r1, r4
 80905f8:	4628      	mov	r0, r5
 80905fa:	f7fc ffc5 	bl	808d588 <mbedtls_aes_setkey_dec>

    return ret;
}
 80905fe:	2000      	movs	r0, #0
 8090600:	bd70      	pop	{r4, r5, r6, pc}

08090602 <_ZN5Crypt11encryptDataEPhS0_>:

//encrypt stuff
int Crypt::encryptData(unsigned char* input,unsigned char* output){
 8090602:	b507      	push	{r0, r1, r2, lr}
    int ret=0;
    
    ret = mbedtls_aes_crypt_cbc( &aes_in, MBEDTLS_AES_ENCRYPT, 128, iv, input, output );
 8090604:	f500 7315 	add.w	r3, r0, #596	; 0x254
 8090608:	e88d 0006 	stmia.w	sp, {r1, r2}
 809060c:	3004      	adds	r0, #4
 809060e:	2280      	movs	r2, #128	; 0x80
 8090610:	2101      	movs	r1, #1
 8090612:	f7fd fbcf 	bl	808ddb4 <mbedtls_aes_crypt_cbc>

    return ret;
}
 8090616:	b003      	add	sp, #12
 8090618:	f85d fb04 	ldr.w	pc, [sp], #4

0809061c <_ZN5Crypt11decryptDataEPhS0_>:

//decrypt stuff
int Crypt::decryptData(unsigned char* input,unsigned char* output){
 809061c:	b507      	push	{r0, r1, r2, lr}
    int ret=0;

    ret = mbedtls_aes_crypt_cbc( &aes_out, MBEDTLS_AES_DECRYPT, 128, ogiv, input, output );  
 809061e:	f500 7319 	add.w	r3, r0, #612	; 0x264
 8090622:	e88d 0006 	stmia.w	sp, {r1, r2}
 8090626:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 809062a:	2280      	movs	r2, #128	; 0x80
 809062c:	2100      	movs	r1, #0
 809062e:	f7fd fbc1 	bl	808ddb4 <mbedtls_aes_crypt_cbc>

    return ret;

 8090632:	b003      	add	sp, #12
 8090634:	f85d fb04 	ldr.w	pc, [sp], #4

08090638 <_GLOBAL__sub_I__ZN5CryptC2Ev>:
 8090638:	f000 bd76 	b.w	8091128 <HAL_Pin_Map>

0809063c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 809063c:	4770      	bx	lr

0809063e <_ZN11USARTSerialD0Ev>:
 809063e:	b510      	push	{r4, lr}
 8090640:	4604      	mov	r4, r0
 8090642:	f7ef fd2e 	bl	80800a2 <_ZdlPv>
 8090646:	4620      	mov	r0, r4
 8090648:	bd10      	pop	{r4, pc}
	...

0809064c <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 809064c:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 809064e:	4c0c      	ldr	r4, [pc, #48]	; (8090680 <_Z22__fetch_global_Serial5v+0x34>)
 8090650:	6823      	ldr	r3, [r4, #0]
 8090652:	07db      	lsls	r3, r3, #31
 8090654:	d411      	bmi.n	809067a <_Z22__fetch_global_Serial5v+0x2e>
 8090656:	4620      	mov	r0, r4
 8090658:	f7ef fd27 	bl	80800aa <__cxa_guard_acquire>
 809065c:	b168      	cbz	r0, 809067a <_Z22__fetch_global_Serial5v+0x2e>
 809065e:	4a09      	ldr	r2, [pc, #36]	; (8090684 <_Z22__fetch_global_Serial5v+0x38>)
 8090660:	2104      	movs	r1, #4
 8090662:	4b09      	ldr	r3, [pc, #36]	; (8090688 <_Z22__fetch_global_Serial5v+0x3c>)
 8090664:	4809      	ldr	r0, [pc, #36]	; (809068c <_Z22__fetch_global_Serial5v+0x40>)
 8090666:	f001 ff83 	bl	8092570 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 809066a:	4620      	mov	r0, r4
 809066c:	f7ef fd22 	bl	80800b4 <__cxa_guard_release>
 8090670:	4a07      	ldr	r2, [pc, #28]	; (8090690 <_Z22__fetch_global_Serial5v+0x44>)
 8090672:	4908      	ldr	r1, [pc, #32]	; (8090694 <_Z22__fetch_global_Serial5v+0x48>)
 8090674:	4805      	ldr	r0, [pc, #20]	; (809068c <_Z22__fetch_global_Serial5v+0x40>)
 8090676:	f002 f8d5 	bl	8092824 <__aeabi_atexit>
	return serial5;
}
 809067a:	4804      	ldr	r0, [pc, #16]	; (809068c <_Z22__fetch_global_Serial5v+0x40>)
 809067c:	bd10      	pop	{r4, pc}
 809067e:	bf00      	nop
 8090680:	2000275c 	.word	0x2000275c
 8090684:	20002760 	.word	0x20002760
 8090688:	200027f8 	.word	0x200027f8
 809068c:	200027e4 	.word	0x200027e4
 8090690:	200004f8 	.word	0x200004f8
 8090694:	0809063d 	.word	0x0809063d

08090698 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8090698:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 809069a:	f7ff ffd7 	bl	809064c <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 809069e:	4b07      	ldr	r3, [pc, #28]	; (80906bc <_Z15serialEventRun5v+0x24>)
 80906a0:	4604      	mov	r4, r0
 80906a2:	b153      	cbz	r3, 80906ba <_Z15serialEventRun5v+0x22>
 80906a4:	f001 ff81 	bl	80925aa <_ZN11USARTSerial9isEnabledEv>
 80906a8:	b138      	cbz	r0, 80906ba <_Z15serialEventRun5v+0x22>
 80906aa:	6823      	ldr	r3, [r4, #0]
 80906ac:	4620      	mov	r0, r4
 80906ae:	691b      	ldr	r3, [r3, #16]
 80906b0:	4798      	blx	r3
 80906b2:	2800      	cmp	r0, #0
 80906b4:	dd01      	ble.n	80906ba <_Z15serialEventRun5v+0x22>
        handler();
 80906b6:	f3af 8000 	nop.w
 80906ba:	bd10      	pop	{r4, pc}
 80906bc:	00000000 	.word	0x00000000

080906c0 <_ZN3CANC1Ev>:
#include "Serial5/Serial5.h"

CAN::CAN() 
{
    //initialization parameters
}
 80906c0:	4770      	bx	lr

080906c2 <_GLOBAL__sub_I__Z22__fetch_global_Serial5v>:
 80906c2:	f000 bd31 	b.w	8091128 <HAL_Pin_Map>

080906c6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80906c6:	6803      	ldr	r3, [r0, #0]
 80906c8:	4718      	bx	r3

080906ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80906ca:	2a01      	cmp	r2, #1
 80906cc:	d002      	beq.n	80906d4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80906ce:	2a02      	cmp	r2, #2
 80906d0:	d002      	beq.n	80906d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80906d2:	e004      	b.n	80906de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80906d4:	6001      	str	r1, [r0, #0]
	      break;
 80906d6:	e002      	b.n	80906de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80906d8:	680b      	ldr	r3, [r1, #0]
 80906da:	b100      	cbz	r0, 80906de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80906dc:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80906de:	2000      	movs	r0, #0
 80906e0:	4770      	bx	lr
	...

080906e4 <_Z8callbackPcPhj>:
#endif

// recieve message handler for server_thread
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
 80906e4:	b5b0      	push	{r4, r5, r7, lr}
 80906e6:	4615      	mov	r5, r2
    char p[length + 1];
 80906e8:	f102 0308 	add.w	r3, r2, #8
 80906ec:	f023 0307 	bic.w	r3, r3, #7
#endif

// recieve message handler for server_thread
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
 80906f0:	b084      	sub	sp, #16
 80906f2:	af00      	add	r7, sp, #0
    char p[length + 1];
 80906f4:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
 80906f8:	4668      	mov	r0, sp
 80906fa:	f002 ff2a 	bl	8093552 <memcpy>
    p[length] = NULL;
 80906fe:	2400      	movs	r4, #0
    String message(p);
 8090700:	4669      	mov	r1, sp
 8090702:	4638      	mov	r0, r7
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
 8090704:	f80d 4005 	strb.w	r4, [sp, r5]
    String message(p);
 8090708:	f001 fb61 	bl	8091dce <_ZN6StringC1EPK19__FlashStringHelper>

    if (message.equals("RED"))
 809070c:	4914      	ldr	r1, [pc, #80]	; (8090760 <_Z8callbackPcPhj+0x7c>)
 809070e:	4638      	mov	r0, r7
 8090710:	f001 fbe3 	bl	8091eda <_ZNK6String6equalsEPKc>
 8090714:	4605      	mov	r5, r0
 8090716:	b118      	cbz	r0, 8090720 <_Z8callbackPcPhj+0x3c>
        RGB.color(255, 0, 0);
 8090718:	4622      	mov	r2, r4
 809071a:	4621      	mov	r1, r4
 809071c:	20ff      	movs	r0, #255	; 0xff
 809071e:	e013      	b.n	8090748 <_Z8callbackPcPhj+0x64>
    else if (message.equals("GREEN"))
 8090720:	4910      	ldr	r1, [pc, #64]	; (8090764 <_Z8callbackPcPhj+0x80>)
 8090722:	4638      	mov	r0, r7
 8090724:	f001 fbd9 	bl	8091eda <_ZNK6String6equalsEPKc>
 8090728:	4604      	mov	r4, r0
 809072a:	b110      	cbz	r0, 8090732 <_Z8callbackPcPhj+0x4e>
        RGB.color(0, 255, 0);
 809072c:	462a      	mov	r2, r5
 809072e:	21ff      	movs	r1, #255	; 0xff
 8090730:	e009      	b.n	8090746 <_Z8callbackPcPhj+0x62>
    else if (message.equals("BLUE"))
 8090732:	490d      	ldr	r1, [pc, #52]	; (8090768 <_Z8callbackPcPhj+0x84>)
 8090734:	4638      	mov	r0, r7
 8090736:	f001 fbd0 	bl	8091eda <_ZNK6String6equalsEPKc>
        RGB.color(0, 0, 255);
 809073a:	22ff      	movs	r2, #255	; 0xff

    if (message.equals("RED"))
        RGB.color(255, 0, 0);
    else if (message.equals("GREEN"))
        RGB.color(0, 255, 0);
    else if (message.equals("BLUE"))
 809073c:	b110      	cbz	r0, 8090744 <_Z8callbackPcPhj+0x60>
        RGB.color(0, 0, 255);
 809073e:	4621      	mov	r1, r4
 8090740:	4620      	mov	r0, r4
 8090742:	e001      	b.n	8090748 <_Z8callbackPcPhj+0x64>
    else
        RGB.color(255, 255, 255);
 8090744:	4611      	mov	r1, r2
 8090746:	4610      	mov	r0, r2
 8090748:	f001 fcf5 	bl	8092136 <_ZN8RGBClass5colorEiii>
    delay(1000);
 809074c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8090750:	f001 fcd8 	bl	8092104 <delay>
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    String message(p);
 8090754:	4638      	mov	r0, r7
 8090756:	f001 faf3 	bl	8091d40 <_ZN6StringD1Ev>
    else if (message.equals("BLUE"))
        RGB.color(0, 0, 255);
    else
        RGB.color(255, 255, 255);
    delay(1000);
}
 809075a:	3710      	adds	r7, #16
 809075c:	46bd      	mov	sp, r7
 809075e:	bdb0      	pop	{r4, r5, r7, pc}
 8090760:	0809619f 	.word	0x0809619f
 8090764:	080961a3 	.word	0x080961a3
 8090768:	080961a9 	.word	0x080961a9

0809076c <_Z24internal_thread_functionv>:
        os_mutex_unlock(can_recv_mutex);
    }
}

//does not require cell connection
void internal_thread_function(void){
 809076c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    //setup gps and dof
    _gps->begin(9600);   //setup GPS   
    dof->begin();        //DOF begin 

    float* temp_dof_buffer[9];
    dof_frames_in_buffer = 0;
 8090770:	4c2b      	ldr	r4, [pc, #172]	; (8090820 <_Z24internal_thread_functionv+0xb4>)
    //never return
    while(1){

        if(!new_dof_flag)
 8090772:	4e2c      	ldr	r6, [pc, #176]	; (8090824 <_Z24internal_thread_functionv+0xb8>)
        } 
        else
        {  
            dof_frames_in_buffer++;      //increase number of records in buffer by one        
        }
        realloc(temp_dof_buffer,sizeof(float*)*dof_frames_in_buffer);
 8090774:	46a0      	mov	r8, r4
 8090776:	4637      	mov	r7, r6

//does not require cell connection
void internal_thread_function(void){

    //setup gps and dof
    _gps->begin(9600);   //setup GPS   
 8090778:	4b2b      	ldr	r3, [pc, #172]	; (8090828 <_Z24internal_thread_functionv+0xbc>)
    dof->begin();        //DOF begin 
 809077a:	4d2c      	ldr	r5, [pc, #176]	; (809082c <_Z24internal_thread_functionv+0xc0>)

//does not require cell connection
void internal_thread_function(void){

    //setup gps and dof
    _gps->begin(9600);   //setup GPS   
 809077c:	6818      	ldr	r0, [r3, #0]
        os_mutex_unlock(can_recv_mutex);
    }
}

//does not require cell connection
void internal_thread_function(void){
 809077e:	b093      	sub	sp, #76	; 0x4c

    //setup gps and dof
    _gps->begin(9600);   //setup GPS   
 8090780:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8090784:	f7ef fdde 	bl	8080344 <_ZN3Gps5beginEm>
    dof->begin();        //DOF begin 
 8090788:	6828      	ldr	r0, [r5, #0]
 809078a:	f000 fb7b 	bl	8090e84 <_ZN3DOF5beginEv>

    float* temp_dof_buffer[9];
    dof_frames_in_buffer = 0;
 809078e:	2300      	movs	r3, #0
 8090790:	6023      	str	r3, [r4, #0]
    //never return
    while(1){

        if(!new_dof_flag)
 8090792:	7833      	ldrb	r3, [r6, #0]
 8090794:	b90b      	cbnz	r3, 809079a <_Z24internal_thread_functionv+0x2e>
        {
            dof_frames_in_buffer = 1;   //start as first frame read in buffer    
 8090796:	2301      	movs	r3, #1
 8090798:	e001      	b.n	809079e <_Z24internal_thread_functionv+0x32>
        } 
        else
        {  
            dof_frames_in_buffer++;      //increase number of records in buffer by one        
 809079a:	6823      	ldr	r3, [r4, #0]
 809079c:	3301      	adds	r3, #1
 809079e:	6023      	str	r3, [r4, #0]
        }
        realloc(temp_dof_buffer,sizeof(float*)*dof_frames_in_buffer);
 80907a0:	6821      	ldr	r1, [r4, #0]
 80907a2:	4668      	mov	r0, sp
 80907a4:	0089      	lsls	r1, r1, #2
 80907a6:	f000 ff77 	bl	8091698 <realloc>

        //dof read all 9 degrees
        dof->getAll();
 80907aa:	6829      	ldr	r1, [r5, #0]
 80907ac:	a809      	add	r0, sp, #36	; 0x24
 80907ae:	f000 fb75 	bl	8090e9c <_ZN3DOF6getAllEv>
 80907b2:	a809      	add	r0, sp, #36	; 0x24
 80907b4:	f001 fac4 	bl	8091d40 <_ZN6StringD1Ev>
        float temp[9] = {dof->GX,dof->GY,dof->GZ,dof->AX,dof->AY,dof->AZ,dof->MX,dof->MY,dof->MZ};
 80907b8:	682b      	ldr	r3, [r5, #0]
        memcpy(temp_dof_buffer[dof_frames_in_buffer-1],temp,9);

        if(os_mutex_trylock(dof_recv_mutex))
        {
 80907ba:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8090834 <_Z24internal_thread_functionv+0xc8>
        }
        realloc(temp_dof_buffer,sizeof(float*)*dof_frames_in_buffer);

        //dof read all 9 degrees
        dof->getAll();
        float temp[9] = {dof->GX,dof->GY,dof->GZ,dof->AX,dof->AY,dof->AZ,dof->MX,dof->MY,dof->MZ};
 80907be:	681a      	ldr	r2, [r3, #0]
 80907c0:	9209      	str	r2, [sp, #36]	; 0x24
 80907c2:	685a      	ldr	r2, [r3, #4]
 80907c4:	920a      	str	r2, [sp, #40]	; 0x28
 80907c6:	689a      	ldr	r2, [r3, #8]
 80907c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80907ca:	68da      	ldr	r2, [r3, #12]
 80907cc:	920c      	str	r2, [sp, #48]	; 0x30
 80907ce:	691a      	ldr	r2, [r3, #16]
 80907d0:	920d      	str	r2, [sp, #52]	; 0x34
 80907d2:	695a      	ldr	r2, [r3, #20]
 80907d4:	920e      	str	r2, [sp, #56]	; 0x38
 80907d6:	699a      	ldr	r2, [r3, #24]
 80907d8:	920f      	str	r2, [sp, #60]	; 0x3c
 80907da:	69da      	ldr	r2, [r3, #28]
 80907dc:	9210      	str	r2, [sp, #64]	; 0x40
 80907de:	6a1b      	ldr	r3, [r3, #32]
        memcpy(temp_dof_buffer[dof_frames_in_buffer-1],temp,9);

 80907e0:	aa12      	add	r2, sp, #72	; 0x48
        }
        realloc(temp_dof_buffer,sizeof(float*)*dof_frames_in_buffer);

        //dof read all 9 degrees
        dof->getAll();
        float temp[9] = {dof->GX,dof->GY,dof->GZ,dof->AX,dof->AY,dof->AZ,dof->MX,dof->MY,dof->MZ};
 80907e2:	9311      	str	r3, [sp, #68]	; 0x44
        memcpy(temp_dof_buffer[dof_frames_in_buffer-1],temp,9);

 80907e4:	6823      	ldr	r3, [r4, #0]
 80907e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80907ea:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80907ee:	ab09      	add	r3, sp, #36	; 0x24
 80907f0:	cb03      	ldmia	r3!, {r0, r1}
 80907f2:	6010      	str	r0, [r2, #0]
 80907f4:	6051      	str	r1, [r2, #4]
 80907f6:	781b      	ldrb	r3, [r3, #0]
        if(os_mutex_trylock(dof_recv_mutex))
        {
 80907f8:	f8d9 0000 	ldr.w	r0, [r9]

        //dof read all 9 degrees
        dof->getAll();
        float temp[9] = {dof->GX,dof->GY,dof->GZ,dof->AX,dof->AY,dof->AZ,dof->MX,dof->MY,dof->MZ};
        memcpy(temp_dof_buffer[dof_frames_in_buffer-1],temp,9);

 80907fc:	7213      	strb	r3, [r2, #8]
        if(os_mutex_trylock(dof_recv_mutex))
        {
 80907fe:	f000 fd63 	bl	80912c8 <os_mutex_trylock>
 8090802:	2800      	cmp	r0, #0
 8090804:	d0c5      	beq.n	8090792 <_Z24internal_thread_functionv+0x26>
            //copy temp_dof_buffer to dof_recv_buffer
            memcpy(dof_recv_buffer,temp_dof_buffer,dof_frames_in_buffer);
            new_dof_flag = true;
 8090806:	f8d8 2000 	ldr.w	r2, [r8]
 809080a:	4669      	mov	r1, sp
 809080c:	4808      	ldr	r0, [pc, #32]	; (8090830 <_Z24internal_thread_functionv+0xc4>)
 809080e:	f002 fea0 	bl	8093552 <memcpy>
            os_mutex_lock(dof_recv_mutex);
 8090812:	2301      	movs	r3, #1
        }
 8090814:	f8d9 0000 	ldr.w	r0, [r9]
        if(os_mutex_trylock(dof_recv_mutex))
        {
            //copy temp_dof_buffer to dof_recv_buffer
            memcpy(dof_recv_buffer,temp_dof_buffer,dof_frames_in_buffer);
            new_dof_flag = true;
            os_mutex_lock(dof_recv_mutex);
 8090818:	703b      	strb	r3, [r7, #0]
        }
 809081a:	f000 fd4d 	bl	80912b8 <os_mutex_lock>
    dof->begin();        //DOF begin 

    float* temp_dof_buffer[9];
    dof_frames_in_buffer = 0;
    //never return
    while(1){
 809081e:	e7b8      	b.n	8090792 <_Z24internal_thread_functionv+0x26>
 8090820:	20002914 	.word	0x20002914
 8090824:	200028bc 	.word	0x200028bc
 8090828:	200028a8 	.word	0x200028a8
 809082c:	200028a4 	.word	0x200028a4
 8090830:	200028f0 	.word	0x200028f0
 8090834:	20002898 	.word	0x20002898

08090838 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 8090838:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
 809083a:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 809083c:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
 809083e:	b10b      	cbz	r3, 8090844 <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
 8090840:	68c0      	ldr	r0, [r0, #12]
 8090842:	e006      	b.n	8090852 <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
 8090844:	6840      	ldr	r0, [r0, #4]
 8090846:	b128      	cbz	r0, 8090854 <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8090848:	6883      	ldr	r3, [r0, #8]
 809084a:	b90b      	cbnz	r3, 8090850 <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
 809084c:	f001 ffef 	bl	809282e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8090850:	68c3      	ldr	r3, [r0, #12]
 8090852:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
 8090854:	2301      	movs	r3, #1
 8090856:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
 8090858:	2000      	movs	r0, #0
    }
 809085a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
 809085e:	f000 bd53 	b.w	8091308 <os_thread_exit>
	...

08090864 <_Z22server_thread_functionv>:
    //startup complete               
}

//AWS server thread that poles for MQTT requests on different subscribed nodes
//requires cell connection
void server_thread_function(void) {
 8090864:	b580      	push	{r7, lr}
 8090866:	4d21      	ldr	r5, [pc, #132]	; (80908ec <_Z22server_thread_functionv+0x88>)
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8090868:	2200      	movs	r2, #0
 809086a:	4611      	mov	r1, r2
 809086c:	4610      	mov	r0, r2
 809086e:	f000 fee3 	bl	8091638 <network_ready>
 8090872:	4c1e      	ldr	r4, [pc, #120]	; (80908ec <_Z22server_thread_functionv+0x88>)
  
    while(!Cellular.ready())
 8090874:	b920      	cbnz	r0, 8090880 <_Z22server_thread_functionv+0x1c>
    awsiot->connect("sparkclient");     //setup AWS connection
 8090876:	491e      	ldr	r1, [pc, #120]	; (80908f0 <_Z22server_thread_functionv+0x8c>)
 8090878:	6828      	ldr	r0, [r5, #0]
 809087a:	f000 fa15 	bl	8090ca8 <_ZN3AWS7connectEPKc>

//AWS server thread that poles for MQTT requests on different subscribed nodes
//requires cell connection
void server_thread_function(void) {
  
    while(!Cellular.ready())
 809087e:	e7f3      	b.n	8090868 <_Z22server_thread_functionv+0x4>
    awsiot->connect("sparkclient");     //setup AWS connection
        if (awsiot->isConnected()) {
 8090880:	6820      	ldr	r0, [r4, #0]
 8090882:	f000 fa09 	bl	8090c98 <_ZN3AWS11isConnectedEv>
 8090886:	b140      	cbz	r0, 809089a <_Z22server_thread_functionv+0x36>
            awsiot->publish("outTopic/message", "hello world");
 8090888:	491a      	ldr	r1, [pc, #104]	; (80908f4 <_Z22server_thread_functionv+0x90>)
 809088a:	4a1b      	ldr	r2, [pc, #108]	; (80908f8 <_Z22server_thread_functionv+0x94>)
 809088c:	6820      	ldr	r0, [r4, #0]
 809088e:	f000 fa05 	bl	8090c9c <_ZN3AWS7publishEPKcS1_>
            awsiot->subscribe("inTopic/message");
 8090892:	491a      	ldr	r1, [pc, #104]	; (80908fc <_Z22server_thread_functionv+0x98>)
 8090894:	6820      	ldr	r0, [r4, #0]
 8090896:	f000 fa03 	bl	8090ca0 <_ZN3AWS9subscribeEPKc>
        }
    os_mutex_unlock(mqtt_mutex);
 809089a:	4b19      	ldr	r3, [pc, #100]	; (8090900 <_Z22server_thread_functionv+0x9c>)
	while(true) { 
        //check for any new recieve messages      
        os_mutex_lock(mqtt_recv_mutex);       
 809089c:	4e19      	ldr	r6, [pc, #100]	; (8090904 <_Z22server_thread_functionv+0xa0>)
    awsiot->connect("sparkclient");     //setup AWS connection
        if (awsiot->isConnected()) {
            awsiot->publish("outTopic/message", "hello world");
            awsiot->subscribe("inTopic/message");
        }
    os_mutex_unlock(mqtt_mutex);
 809089e:	6818      	ldr	r0, [r3, #0]
 80908a0:	f000 fd1a 	bl	80912d8 <os_mutex_unlock>
 80908a4:	46b0      	mov	r8, r6
	while(true) { 
        //check for any new recieve messages      
        os_mutex_lock(mqtt_recv_mutex);       
        if (awsiot->isConnected()) {
 80908a6:	4f11      	ldr	r7, [pc, #68]	; (80908ec <_Z22server_thread_functionv+0x88>)
            awsiot->subscribe("inTopic/message");
        }
    os_mutex_unlock(mqtt_mutex);
	while(true) { 
        //check for any new recieve messages      
        os_mutex_lock(mqtt_recv_mutex);       
 80908a8:	6830      	ldr	r0, [r6, #0]
 80908aa:	f000 fd05 	bl	80912b8 <os_mutex_lock>
        if (awsiot->isConnected()) {
 80908ae:	6820      	ldr	r0, [r4, #0]
 80908b0:	f000 f9f2 	bl	8090c98 <_ZN3AWS11isConnectedEv>
 80908b4:	b110      	cbz	r0, 80908bc <_Z22server_thread_functionv+0x58>
            
            awsiot->loop();
 80908b6:	6838      	ldr	r0, [r7, #0]
 80908b8:	f000 f9f4 	bl	8090ca4 <_ZN3AWS4loopEv>
        }
        os_mutex_unlock(mqtt_recv_mutex);

        //publish new message
        os_mutex_lock(mqtt_send_mutex);
 80908bc:	4d12      	ldr	r5, [pc, #72]	; (8090908 <_Z22server_thread_functionv+0xa4>)
        os_mutex_lock(mqtt_recv_mutex);       
        if (awsiot->isConnected()) {
            
            awsiot->loop();
        }
        os_mutex_unlock(mqtt_recv_mutex);
 80908be:	f8d8 0000 	ldr.w	r0, [r8]
 80908c2:	f000 fd09 	bl	80912d8 <os_mutex_unlock>

        //publish new message
        os_mutex_lock(mqtt_send_mutex);
 80908c6:	6828      	ldr	r0, [r5, #0]
 80908c8:	f000 fcf6 	bl	80912b8 <os_mutex_lock>
        if (strlen(mqtt_send_buffer) > 0){
 80908cc:	4b0f      	ldr	r3, [pc, #60]	; (809090c <_Z22server_thread_functionv+0xa8>)
 80908ce:	681a      	ldr	r2, [r3, #0]
 80908d0:	7813      	ldrb	r3, [r2, #0]
 80908d2:	b11b      	cbz	r3, 80908dc <_Z22server_thread_functionv+0x78>
            awsiot->publish("cart/2",mqtt_send_buffer);
 80908d4:	490e      	ldr	r1, [pc, #56]	; (8090910 <_Z22server_thread_functionv+0xac>)
 80908d6:	6820      	ldr	r0, [r4, #0]
 80908d8:	f000 f9e0 	bl	8090c9c <_ZN3AWS7publishEPKcS1_>
        }   
        os_mutex_unlock(mqtt_send_mutex);    
 80908dc:	6828      	ldr	r0, [r5, #0]
 80908de:	f000 fcfb 	bl	80912d8 <os_mutex_unlock>

        os_thread_delay_until(&lastThreadTime, 10);
 80908e2:	210a      	movs	r1, #10
 80908e4:	480b      	ldr	r0, [pc, #44]	; (8090914 <_Z22server_thread_functionv+0xb0>)
 80908e6:	f000 fcd7 	bl	8091298 <os_thread_delay_until>
        if (awsiot->isConnected()) {
            awsiot->publish("outTopic/message", "hello world");
            awsiot->subscribe("inTopic/message");
        }
    os_mutex_unlock(mqtt_mutex);
	while(true) { 
 80908ea:	e7dd      	b.n	80908a8 <_Z22server_thread_functionv+0x44>
 80908ec:	200028e8 	.word	0x200028e8
 80908f0:	080961ae 	.word	0x080961ae
 80908f4:	080961c6 	.word	0x080961c6
 80908f8:	080961ba 	.word	0x080961ba
 80908fc:	080961d7 	.word	0x080961d7
 8090900:	20002894 	.word	0x20002894
 8090904:	2000289c 	.word	0x2000289c
 8090908:	200028a0 	.word	0x200028a0
 809090c:	200028c4 	.word	0x200028c4
 8090910:	080961e7 	.word	0x080961e7
 8090914:	200028b0 	.word	0x200028b0

08090918 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8090918:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 809091a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 809091c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 809091e:	b113      	cbz	r3, 8090926 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8090920:	2203      	movs	r2, #3
 8090922:	4601      	mov	r1, r0
 8090924:	4798      	blx	r3
    }
 8090926:	4620      	mov	r0, r4
 8090928:	bd10      	pop	{r4, pc}

0809092a <_ZN6ThreadD1Ev>:
            wrapper = new wiring_thread_fn_t(function);
            os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
        }
    }

    ~Thread()
 809092a:	b538      	push	{r3, r4, r5, lr}
 809092c:	4604      	mov	r4, r0
 809092e:	6800      	ldr	r0, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (!is_valid())
 8090930:	b1a8      	cbz	r0, 809095e <_ZN6ThreadD1Ev+0x34>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
 8090932:	f000 fc99 	bl	8091268 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
 8090936:	b990      	cbnz	r0, 809095e <_ZN6ThreadD1Ev+0x34>
            return;

        if (!exited_) {
 8090938:	7c23      	ldrb	r3, [r4, #16]
 809093a:	b91b      	cbnz	r3, 8090944 <_ZN6ThreadD1Ev+0x1a>
 809093c:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
 809093e:	b108      	cbz	r0, 8090944 <_ZN6ThreadD1Ev+0x1a>
 8090940:	f000 fc9a 	bl	8091278 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
 8090944:	6865      	ldr	r5, [r4, #4]
 8090946:	b13d      	cbz	r5, 8090958 <_ZN6ThreadD1Ev+0x2e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8090948:	4628      	mov	r0, r5
 809094a:	f7ff ffe5 	bl	8090918 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 809094e:	4628      	mov	r0, r5
 8090950:	f7ef fba7 	bl	80800a2 <_ZdlPv>
            wrapper = NULL;
 8090954:	2300      	movs	r3, #0
 8090956:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
 8090958:	6820      	ldr	r0, [r4, #0]
 809095a:	f000 fc95 	bl	8091288 <os_thread_cleanup>
    }

    ~Thread()
    {
        dispose();
    }
 809095e:	4620      	mov	r0, r4
 8090960:	bd38      	pop	{r3, r4, r5, pc}
	...

08090964 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
          func_param_(function_param)
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
    }

    Thread(const char *name, wiring_thread_fn_t function,
 8090964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : handle(OS_THREAD_INVALID_HANDLE), wrapper(NULL)
 8090968:	2500      	movs	r5, #0
 809096a:	6005      	str	r5, [r0, #0]
 809096c:	6045      	str	r5, [r0, #4]
 809096e:	6085      	str	r5, [r0, #8]
 8090970:	60c5      	str	r5, [r0, #12]
 8090972:	7405      	strb	r5, [r0, #16]
          func_param_(function_param)
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
    }

    Thread(const char *name, wiring_thread_fn_t function,
 8090974:	4699      	mov	r9, r3
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : handle(OS_THREAD_INVALID_HANDLE), wrapper(NULL)
    {
        if(function) {
 8090976:	6893      	ldr	r3, [r2, #8]
          func_param_(function_param)
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
    }

    Thread(const char *name, wiring_thread_fn_t function,
 8090978:	4604      	mov	r4, r0
 809097a:	4688      	mov	r8, r1
 809097c:	4616      	mov	r6, r2
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : handle(OS_THREAD_INVALID_HANDLE), wrapper(NULL)
    {
        if(function) {
 809097e:	b1c3      	cbz	r3, 80909b2 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x4e>
            wrapper = new wiring_thread_fn_t(function);
 8090980:	2010      	movs	r0, #16
 8090982:	f7ef fb8a 	bl	808009a <_Znwj>
 8090986:	4607      	mov	r7, r0
 8090988:	b148      	cbz	r0, 809099e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x3a>
 809098a:	68b3      	ldr	r3, [r6, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 809098c:	6085      	str	r5, [r0, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 809098e:	b133      	cbz	r3, 809099e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8090990:	2202      	movs	r2, #2
 8090992:	4631      	mov	r1, r6
 8090994:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8090996:	68f3      	ldr	r3, [r6, #12]
 8090998:	60fb      	str	r3, [r7, #12]
	  _M_manager = __x._M_manager;
 809099a:	68b3      	ldr	r3, [r6, #8]
 809099c:	60bb      	str	r3, [r7, #8]
            os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 809099e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    Thread(const char *name, wiring_thread_fn_t function,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : handle(OS_THREAD_INVALID_HANDLE), wrapper(NULL)
    {
        if(function) {
            wrapper = new wiring_thread_fn_t(function);
 80909a0:	6067      	str	r7, [r4, #4]
            os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 80909a2:	9301      	str	r3, [sp, #4]
 80909a4:	9400      	str	r4, [sp, #0]
 80909a6:	4b05      	ldr	r3, [pc, #20]	; (80909bc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x58>)
 80909a8:	464a      	mov	r2, r9
 80909aa:	4641      	mov	r1, r8
 80909ac:	4620      	mov	r0, r4
 80909ae:	f000 fc53 	bl	8091258 <os_thread_create>
        }
    }
 80909b2:	4620      	mov	r0, r4
 80909b4:	b003      	add	sp, #12
 80909b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80909ba:	bf00      	nop
 80909bc:	08090839 	.word	0x08090839

080909c0 <_Z16startup_functionv>:
    delay(1000);
}

//use for thread setup
//use for connection setup
void startup_function() {
 80909c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
 80909c4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8090a74 <_Z16startup_functionv+0xb4>
	os_mutex_create(&mqtt_recv_mutex);
 80909c8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8090a78 <_Z16startup_functionv+0xb8>
    os_mutex_create(&mqtt_send_mutex);
 80909cc:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8090a7c <_Z16startup_functionv+0xbc>
//use for thread setup
//use for connection setup
void startup_function() {

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
 80909d0:	4650      	mov	r0, sl
	os_mutex_create(&mqtt_recv_mutex);
    os_mutex_create(&mqtt_send_mutex);
    os_mutex_create(&can_recv_mutex);
 80909d2:	4f24      	ldr	r7, [pc, #144]	; (8090a64 <_Z16startup_functionv+0xa4>)
//use for thread setup
//use for connection setup
void startup_function() {

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
 80909d4:	f000 fc68 	bl	80912a8 <os_mutex_create>
	os_mutex_create(&mqtt_recv_mutex);
 80909d8:	4648      	mov	r0, r9
    os_mutex_create(&mqtt_send_mutex);
    os_mutex_create(&can_recv_mutex);
    os_mutex_create(&can_send_mutex);
 80909da:	4e23      	ldr	r6, [pc, #140]	; (8090a68 <_Z16startup_functionv+0xa8>)
//use for connection setup
void startup_function() {

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
	os_mutex_create(&mqtt_recv_mutex);
 80909dc:	f000 fc64 	bl	80912a8 <os_mutex_create>
    os_mutex_create(&mqtt_send_mutex);
 80909e0:	4640      	mov	r0, r8
    os_mutex_create(&can_recv_mutex);
    os_mutex_create(&can_send_mutex);
    os_mutex_create(&gps_recv_mutex);
 80909e2:	4d22      	ldr	r5, [pc, #136]	; (8090a6c <_Z16startup_functionv+0xac>)
void startup_function() {

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
	os_mutex_create(&mqtt_recv_mutex);
    os_mutex_create(&mqtt_send_mutex);
 80909e4:	f000 fc60 	bl	80912a8 <os_mutex_create>
    os_mutex_create(&can_recv_mutex);
 80909e8:	4638      	mov	r0, r7
    os_mutex_create(&can_send_mutex);
    os_mutex_create(&gps_recv_mutex);
    os_mutex_create(&dof_recv_mutex);
 80909ea:	4c21      	ldr	r4, [pc, #132]	; (8090a70 <_Z16startup_functionv+0xb0>)

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
	os_mutex_create(&mqtt_recv_mutex);
    os_mutex_create(&mqtt_send_mutex);
    os_mutex_create(&can_recv_mutex);
 80909ec:	f000 fc5c 	bl	80912a8 <os_mutex_create>
    os_mutex_create(&can_send_mutex);
 80909f0:	4630      	mov	r0, r6
 80909f2:	f000 fc59 	bl	80912a8 <os_mutex_create>
    os_mutex_create(&gps_recv_mutex);
 80909f6:	4628      	mov	r0, r5
 80909f8:	f000 fc56 	bl	80912a8 <os_mutex_create>
    os_mutex_create(&dof_recv_mutex);
 80909fc:	4620      	mov	r0, r4
 80909fe:	f000 fc53 	bl	80912a8 <os_mutex_create>

    //lock mutex
    os_mutex_lock(mqtt_mutex);
 8090a02:	f8da 0000 	ldr.w	r0, [sl]
 8090a06:	f000 fc57 	bl	80912b8 <os_mutex_lock>
	os_mutex_lock(mqtt_recv_mutex);
 8090a0a:	f8d9 0000 	ldr.w	r0, [r9]
 8090a0e:	f000 fc53 	bl	80912b8 <os_mutex_lock>
    os_mutex_lock(mqtt_send_mutex);
 8090a12:	f8d8 0000 	ldr.w	r0, [r8]
 8090a16:	f000 fc4f 	bl	80912b8 <os_mutex_lock>
    os_mutex_lock(can_recv_mutex);
 8090a1a:	6838      	ldr	r0, [r7, #0]
 8090a1c:	f000 fc4c 	bl	80912b8 <os_mutex_lock>
    os_mutex_lock(can_send_mutex);
 8090a20:	6830      	ldr	r0, [r6, #0]
 8090a22:	f000 fc49 	bl	80912b8 <os_mutex_lock>
    os_mutex_lock(gps_recv_mutex);
 8090a26:	6828      	ldr	r0, [r5, #0]
 8090a28:	f000 fc46 	bl	80912b8 <os_mutex_lock>
    os_mutex_lock(dof_recv_mutex);
 8090a2c:	6820      	ldr	r0, [r4, #0]
 8090a2e:	f000 fc43 	bl	80912b8 <os_mutex_lock>
    cellular_credentials_set("wireless.twilio.com", "", "", NULL);  //setup to work twilio sim
    Cellular.on();                                                  //turn on celluar modem
    Cellular.connect();                                             //connect using twillio
    while(!Cellular.ready());                                       //wait until connected
#endif
    RGB.control(true);
 8090a32:	2001      	movs	r0, #1
 8090a34:	f001 fb6f 	bl	8092116 <_ZN8RGBClass7controlEb>

    //unlock mutex
	os_mutex_unlock(mqtt_recv_mutex);
 8090a38:	f8d9 0000 	ldr.w	r0, [r9]
 8090a3c:	f000 fc4c 	bl	80912d8 <os_mutex_unlock>
    os_mutex_unlock(mqtt_send_mutex);
 8090a40:	f8d8 0000 	ldr.w	r0, [r8]
 8090a44:	f000 fc48 	bl	80912d8 <os_mutex_unlock>
    os_mutex_unlock(can_recv_mutex);
 8090a48:	6838      	ldr	r0, [r7, #0]
 8090a4a:	f000 fc45 	bl	80912d8 <os_mutex_unlock>
    os_mutex_unlock(can_send_mutex);
 8090a4e:	6830      	ldr	r0, [r6, #0]
 8090a50:	f000 fc42 	bl	80912d8 <os_mutex_unlock>
    os_mutex_unlock(gps_recv_mutex);
 8090a54:	6828      	ldr	r0, [r5, #0]
 8090a56:	f000 fc3f 	bl	80912d8 <os_mutex_unlock>
    os_mutex_unlock(dof_recv_mutex);
 8090a5a:	6820      	ldr	r0, [r4, #0]
    //startup complete               
}
 8090a5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	os_mutex_unlock(mqtt_recv_mutex);
    os_mutex_unlock(mqtt_send_mutex);
    os_mutex_unlock(can_recv_mutex);
    os_mutex_unlock(can_send_mutex);
    os_mutex_unlock(gps_recv_mutex);
    os_mutex_unlock(dof_recv_mutex);
 8090a60:	f000 bc3a 	b.w	80912d8 <os_mutex_unlock>
 8090a64:	200028c0 	.word	0x200028c0
 8090a68:	200028e4 	.word	0x200028e4
 8090a6c:	200028ec 	.word	0x200028ec
 8090a70:	20002898 	.word	0x20002898
 8090a74:	20002894 	.word	0x20002894
 8090a78:	2000289c 	.word	0x2000289c
 8090a7c:	200028a0 	.word	0x200028a0

08090a80 <_GLOBAL__sub_I_lastThreadTime>:
*/
void CarT::doit()
{
    Serial.println("called doit");
}
 8090a80:	b530      	push	{r4, r5, lr}
 8090a82:	b087      	sub	sp, #28
 8090a84:	f000 fb50 	bl	8091128 <HAL_Pin_Map>
os_mutex_t can_recv_mutex;    
os_mutex_t can_send_mutex;    
os_mutex_t gps_recv_mutex;     
os_mutex_t dof_recv_mutex;

CAN* stn = new CAN();
 8090a88:	2001      	movs	r0, #1
 8090a8a:	f7ef fb06 	bl	808009a <_Znwj>
 8090a8e:	4604      	mov	r4, r0
 8090a90:	b108      	cbz	r0, 8090a96 <_GLOBAL__sub_I_lastThreadTime+0x16>
 8090a92:	f7ff fe15 	bl	80906c0 <_ZN3CANC1Ev>
 8090a96:	4b34      	ldr	r3, [pc, #208]	; (8090b68 <_GLOBAL__sub_I_lastThreadTime+0xe8>)
DOF* dof = new DOF();
 8090a98:	20b8      	movs	r0, #184	; 0xb8
os_mutex_t can_recv_mutex;    
os_mutex_t can_send_mutex;    
os_mutex_t gps_recv_mutex;     
os_mutex_t dof_recv_mutex;

CAN* stn = new CAN();
 8090a9a:	601c      	str	r4, [r3, #0]
DOF* dof = new DOF();
 8090a9c:	f7ef fafd 	bl	808009a <_Znwj>
 8090aa0:	4604      	mov	r4, r0
 8090aa2:	b108      	cbz	r0, 8090aa8 <_GLOBAL__sub_I_lastThreadTime+0x28>
 8090aa4:	f000 f9e7 	bl	8090e76 <_ZN3DOFC1Ev>
 8090aa8:	4b30      	ldr	r3, [pc, #192]	; (8090b6c <_GLOBAL__sub_I_lastThreadTime+0xec>)
SD* sd_storage = new SD();
 8090aaa:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
os_mutex_t can_send_mutex;    
os_mutex_t gps_recv_mutex;     
os_mutex_t dof_recv_mutex;

CAN* stn = new CAN();
DOF* dof = new DOF();
 8090aae:	601c      	str	r4, [r3, #0]
SD* sd_storage = new SD();
 8090ab0:	f7ef faf3 	bl	808009a <_Znwj>
 8090ab4:	4604      	mov	r4, r0
 8090ab6:	b108      	cbz	r0, 8090abc <_GLOBAL__sub_I_lastThreadTime+0x3c>
 8090ab8:	f000 f8c8 	bl	8090c4c <_ZN2SDC1Ev>
 8090abc:	4b2c      	ldr	r3, [pc, #176]	; (8090b70 <_GLOBAL__sub_I_lastThreadTime+0xf0>)
Crypt* secretStuff = new Crypt();
 8090abe:	f44f 701d 	mov.w	r0, #628	; 0x274
os_mutex_t gps_recv_mutex;     
os_mutex_t dof_recv_mutex;

CAN* stn = new CAN();
DOF* dof = new DOF();
SD* sd_storage = new SD();
 8090ac2:	601c      	str	r4, [r3, #0]
Crypt* secretStuff = new Crypt();
 8090ac4:	f7ef fae9 	bl	808009a <_Znwj>
 8090ac8:	4604      	mov	r4, r0
 8090aca:	b108      	cbz	r0, 8090ad0 <_GLOBAL__sub_I_lastThreadTime+0x50>
 8090acc:	f7ff fd00 	bl	80904d0 <_ZN5CryptC1Ev>
 8090ad0:	4b28      	ldr	r3, [pc, #160]	; (8090b74 <_GLOBAL__sub_I_lastThreadTime+0xf4>)
 8090ad2:	601c      	str	r4, [r3, #0]
Gps* _gps = new Gps(&Serial1);
 8090ad4:	f001 fd6c 	bl	80925b0 <_Z22__fetch_global_Serial1v>
 8090ad8:	4605      	mov	r5, r0
 8090ada:	20fc      	movs	r0, #252	; 0xfc
 8090adc:	f7ef fadd 	bl	808009a <_Znwj>
 8090ae0:	4604      	mov	r4, r0
 8090ae2:	b110      	cbz	r0, 8090aea <_GLOBAL__sub_I_lastThreadTime+0x6a>
 8090ae4:	4629      	mov	r1, r5
 8090ae6:	f7ef fc17 	bl	8080318 <_ZN3GpsC1EP11USARTSerial>
 8090aea:	4b23      	ldr	r3, [pc, #140]	; (8090b78 <_GLOBAL__sub_I_lastThreadTime+0xf8>)
//Gga* gga = new Gga(*_gps);
AWS* awsiot = new AWS("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 8090aec:	f640 2098 	movw	r0, #2712	; 0xa98

CAN* stn = new CAN();
DOF* dof = new DOF();
SD* sd_storage = new SD();
Crypt* secretStuff = new Crypt();
Gps* _gps = new Gps(&Serial1);
 8090af0:	601c      	str	r4, [r3, #0]
//Gga* gga = new Gga(*_gps);
AWS* awsiot = new AWS("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 8090af2:	f7ef fad2 	bl	808009a <_Znwj>
 8090af6:	4604      	mov	r4, r0
 8090af8:	b128      	cbz	r0, 8090b06 <_GLOBAL__sub_I_lastThreadTime+0x86>
 8090afa:	4b20      	ldr	r3, [pc, #128]	; (8090b7c <_GLOBAL__sub_I_lastThreadTime+0xfc>)
 8090afc:	f242 22b3 	movw	r2, #8883	; 0x22b3
 8090b00:	491f      	ldr	r1, [pc, #124]	; (8090b80 <_GLOBAL__sub_I_lastThreadTime+0x100>)
 8090b02:	f000 f9a9 	bl	8090e58 <_ZN3AWSC1EPctPFvS0_PhjE>
 8090b06:	4b1f      	ldr	r3, [pc, #124]	; (8090b84 <_GLOBAL__sub_I_lastThreadTime+0x104>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8090b08:	4d1f      	ldr	r5, [pc, #124]	; (8090b88 <_GLOBAL__sub_I_lastThreadTime+0x108>)
 8090b0a:	601c      	str	r4, [r3, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8090b0c:	4b1f      	ldr	r3, [pc, #124]	; (8090b8c <_GLOBAL__sub_I_lastThreadTime+0x10c>)

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 8090b0e:	4c20      	ldr	r4, [pc, #128]	; (8090b90 <_GLOBAL__sub_I_lastThreadTime+0x110>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8090b10:	9302      	str	r3, [sp, #8]

//setup threads
#if MQTT_STATUS
Thread server_thread("server_thread", server_thread_function, OS_THREAD_PRIORITY_DEFAULT,6*1024);
 8090b12:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8090b16:	aa02      	add	r2, sp, #8
 8090b18:	9300      	str	r3, [sp, #0]
 8090b1a:	491e      	ldr	r1, [pc, #120]	; (8090b94 <_GLOBAL__sub_I_lastThreadTime+0x114>)
 8090b1c:	2302      	movs	r3, #2
 8090b1e:	481e      	ldr	r0, [pc, #120]	; (8090b98 <_GLOBAL__sub_I_lastThreadTime+0x118>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8090b20:	9505      	str	r5, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8090b22:	9404      	str	r4, [sp, #16]
 8090b24:	f7ff ff1e 	bl	8090964 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8090b28:	a802      	add	r0, sp, #8
 8090b2a:	f7ff fef5 	bl	8090918 <_ZNSt14_Function_baseD1Ev>
 8090b2e:	4a1b      	ldr	r2, [pc, #108]	; (8090b9c <_GLOBAL__sub_I_lastThreadTime+0x11c>)
 8090b30:	491b      	ldr	r1, [pc, #108]	; (8090ba0 <_GLOBAL__sub_I_lastThreadTime+0x120>)
 8090b32:	4819      	ldr	r0, [pc, #100]	; (8090b98 <_GLOBAL__sub_I_lastThreadTime+0x118>)
 8090b34:	f001 fe76 	bl	8092824 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8090b38:	4b1a      	ldr	r3, [pc, #104]	; (8090ba4 <_GLOBAL__sub_I_lastThreadTime+0x124>)
#endif
#if CAN_STATUS
Thread CAN_thread("CAN_thread", CAN_thread_function, OS_THREAD_PRIORITY_DEFAULT,3*1024);
#endif
#if DOF_STATUS || GPS_STATUS
Thread internal_thread("Internal_thread", internal_thread_function, OS_THREAD_PRIORITY_DEFAULT,3*1024);
 8090b3a:	aa02      	add	r2, sp, #8
 8090b3c:	9302      	str	r3, [sp, #8]
 8090b3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8090b42:	9300      	str	r3, [sp, #0]
 8090b44:	4918      	ldr	r1, [pc, #96]	; (8090ba8 <_GLOBAL__sub_I_lastThreadTime+0x128>)
 8090b46:	2302      	movs	r3, #2
 8090b48:	4818      	ldr	r0, [pc, #96]	; (8090bac <_GLOBAL__sub_I_lastThreadTime+0x12c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8090b4a:	9505      	str	r5, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8090b4c:	9404      	str	r4, [sp, #16]
 8090b4e:	f7ff ff09 	bl	8090964 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8090b52:	a802      	add	r0, sp, #8
 8090b54:	f7ff fee0 	bl	8090918 <_ZNSt14_Function_baseD1Ev>
 8090b58:	4a10      	ldr	r2, [pc, #64]	; (8090b9c <_GLOBAL__sub_I_lastThreadTime+0x11c>)
 8090b5a:	4911      	ldr	r1, [pc, #68]	; (8090ba0 <_GLOBAL__sub_I_lastThreadTime+0x120>)
 8090b5c:	4813      	ldr	r0, [pc, #76]	; (8090bac <_GLOBAL__sub_I_lastThreadTime+0x12c>)
 8090b5e:	f001 fe61 	bl	8092824 <__aeabi_atexit>
*/
void CarT::doit()
{
    Serial.println("called doit");
}
 8090b62:	b007      	add	sp, #28
 8090b64:	bd30      	pop	{r4, r5, pc}
 8090b66:	bf00      	nop
 8090b68:	200028e0 	.word	0x200028e0
 8090b6c:	200028a4 	.word	0x200028a4
 8090b70:	200028b4 	.word	0x200028b4
 8090b74:	200028ac 	.word	0x200028ac
 8090b78:	200028a8 	.word	0x200028a8
 8090b7c:	080906e5 	.word	0x080906e5
 8090b80:	08096216 	.word	0x08096216
 8090b84:	200028e8 	.word	0x200028e8
 8090b88:	080906c7 	.word	0x080906c7
 8090b8c:	08090865 	.word	0x08090865
 8090b90:	080906cb 	.word	0x080906cb
 8090b94:	08096241 	.word	0x08096241
 8090b98:	200028c8 	.word	0x200028c8
 8090b9c:	200004f8 	.word	0x200004f8
 8090ba0:	0809092b 	.word	0x0809092b
 8090ba4:	0809076d 	.word	0x0809076d
 8090ba8:	0809624f 	.word	0x0809624f
 8090bac:	2000287c 	.word	0x2000287c

08090bb0 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8090bb0:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8090bb2:	4602      	mov	r2, r0
 8090bb4:	f003 0308 	and.w	r3, r3, #8
 8090bb8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8090bbc:	b12b      	cbz	r3, 8090bca <_ZN4File9availableEv+0x1a>
 8090bbe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8090bc0:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8090bc2:	1a18      	subs	r0, r3, r0
 8090bc4:	bf48      	it	mi
 8090bc6:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 8090bca:	4770      	bx	lr

08090bcc <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 8090bcc:	4770      	bx	lr

08090bce <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8090bce:	3010      	adds	r0, #16
 8090bd0:	f7f0 bf46 	b.w	8081a60 <_ZN7FatFile4syncEv>

08090bd4 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 8090bd4:	3010      	adds	r0, #16
 8090bd6:	f7f0 be72 	b.w	80818be <_ZN7FatFile4peekEv>

08090bda <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8090bda:	3010      	adds	r0, #16
 8090bdc:	f7f0 bfcc 	b.w	8081b78 <_ZN7FatFile5writeEPKvj>

08090be0 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8090be0:	b507      	push	{r0, r1, r2, lr}
 8090be2:	ab02      	add	r3, sp, #8
 8090be4:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8090be8:	2201      	movs	r2, #1
 8090bea:	4619      	mov	r1, r3
 8090bec:	3010      	adds	r0, #16
 8090bee:	f7f0 ffc3 	bl	8081b78 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8090bf2:	b003      	add	sp, #12
 8090bf4:	f85d fb04 	ldr.w	pc, [sp], #4

08090bf8 <_ZN4FileD0Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 8090bf8:	b510      	push	{r4, lr}
 8090bfa:	4604      	mov	r4, r0
 8090bfc:	f7ef fa51 	bl	80800a2 <_ZdlPv>
 8090c00:	4620      	mov	r0, r4
 8090c02:	bd10      	pop	{r4, pc}

08090c04 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 8090c04:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8090c08:	f7f0 bc6d 	b.w	80814e6 <_ZN9SdSpiCard11writeBlocksEmPKhj>

08090c0c <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 8090c0c:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8090c10:	f7f0 bba1 	b.w	8081356 <_ZN9SdSpiCard10readBlocksEmPhj>

08090c14 <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 8090c14:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8090c18:	f7f0 bbe0 	b.w	80813dc <_ZN9SdSpiCard10writeBlockEmPKh>

08090c1c <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 8090c1c:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8090c20:	f7f0 bb51 	b.w	80812c6 <_ZN9SdSpiCard9readBlockEmPh>

08090c24 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
 8090c24:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8090c26:	2201      	movs	r2, #1
 8090c28:	f10d 0107 	add.w	r1, sp, #7
 8090c2c:	f7f0 fd93 	bl	8081756 <_ZN7FatFile4readEPvj>
 8090c30:	2801      	cmp	r0, #1
 8090c32:	bf0c      	ite	eq
 8090c34:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8090c38:	f04f 30ff 	movne.w	r0, #4294967295
  }
 8090c3c:	b003      	add	sp, #12
 8090c3e:	f85d fb04 	ldr.w	pc, [sp], #4

08090c42 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8090c42:	b508      	push	{r3, lr}
    return FatFile::read();
 8090c44:	3010      	adds	r0, #16
 8090c46:	f7ff ffed 	bl	8090c24 <_ZN7FatFile4readEv>
  }
 8090c4a:	bd08      	pop	{r3, pc}

08090c4c <_ZN2SDC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8090c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8090c50:	6081      	str	r1, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 8090c52:	490d      	ldr	r1, [pc, #52]	; (8090c88 <_ZN2SDC1Ev+0x3c>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8090c54:	2200      	movs	r2, #0
 8090c56:	6001      	str	r1, [r0, #0]
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8090c58:	2119      	movs	r1, #25
 8090c5a:	f880 149e 	strb.w	r1, [r0, #1182]	; 0x49e
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 8090c5e:	490b      	ldr	r1, [pc, #44]	; (8090c8c <_ZN2SDC1Ev+0x40>)
 8090c60:	7402      	strb	r2, [r0, #16]
 8090c62:	6341      	str	r1, [r0, #52]	; 0x34
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8090c64:	490a      	ldr	r1, [pc, #40]	; (8090c90 <_ZN2SDC1Ev+0x44>)
 8090c66:	7442      	strb	r2, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8090c68:	6042      	str	r2, [r0, #4]
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8090c6a:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
 8090c6e:	f880 2474 	strb.w	r2, [r0, #1140]	; 0x474
 8090c72:	f880 2475 	strb.w	r2, [r0, #1141]	; 0x475
 8090c76:	f880 249c 	strb.w	r2, [r0, #1180]	; 0x49c
 8090c7a:	f880 24a1 	strb.w	r2, [r0, #1185]	; 0x4a1
 8090c7e:	f8c0 14a4 	str.w	r1, [r0, #1188]	; 0x4a4
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8090c82:	f880 24a8 	strb.w	r2, [r0, #1192]	; 0x4a8
#include "SD.h"

SD::SD()
{
    //initialize variables
}
 8090c86:	4770      	bx	lr
 8090c88:	08096268 	.word	0x08096268
 8090c8c:	08096290 	.word	0x08096290
 8090c90:	08093eec 	.word	0x08093eec

08090c94 <_GLOBAL__sub_I__ZN2SDC2Ev>:
 8090c94:	f000 ba48 	b.w	8091128 <HAL_Pin_Map>

08090c98 <_ZN3AWS11isConnectedEv>:
AWS::AWS(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)){
    setupCon(domain,port,callbackRef);
}

bool AWS::isConnected(){
    return (awsMqtt.isConnected());
 8090c98:	f7f1 bb45 	b.w	8082326 <_ZN4MQTT11isConnectedEv>

08090c9c <_ZN3AWS7publishEPKcS1_>:
}

bool AWS::publish(const char * topic, const char *message){
    return (awsMqtt.publish(topic, message));
 8090c9c:	f7f1 bbbd 	b.w	808241a <_ZN4MQTT7publishEPKcS1_>

08090ca0 <_ZN3AWS9subscribeEPKc>:
}

bool AWS::subscribe(const char * topic){
    return (awsMqtt.subscribe(topic));
 8090ca0:	f7f1 bbf7 	b.w	8082492 <_ZN4MQTT9subscribeEPKc>

08090ca4 <_ZN3AWS4loopEv>:
}

bool AWS::loop(){
    awsMqtt.loop();
 8090ca4:	f7f1 bc13 	b.w	80824ce <_ZN4MQTT4loopEv>

08090ca8 <_ZN3AWS7connectEPKc>:
}

bool AWS::connect(const char * ID){
    clientID = ID;   
 8090ca8:	f8c0 1688 	str.w	r1, [r0, #1672]	; 0x688
    return(awsMqtt.connect(clientID));  
 8090cac:	f7f1 beca 	b.w	8082a44 <_ZN4MQTT7connectEPKc>

08090cb0 <_ZN3AWS8setupConEPctPFvS0_PhjE>:
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090cb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090cb4:	4d5a      	ldr	r5, [pc, #360]	; (8090e20 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x170>)
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090cb6:	4698      	mov	r8, r3
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090cb8:	682b      	ldr	r3, [r5, #0]
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090cba:	4604      	mov	r4, r0
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090cbc:	07db      	lsls	r3, r3, #31
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090cbe:	460e      	mov	r6, r1
 8090cc0:	4617      	mov	r7, r2
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090cc2:	d411      	bmi.n	8090ce8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x38>
 8090cc4:	4628      	mov	r0, r5
 8090cc6:	f7ef f9f0 	bl	80800aa <__cxa_guard_acquire>
 8090cca:	b168      	cbz	r0, 8090ce8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x38>
 8090ccc:	463a      	mov	r2, r7
 8090cce:	4631      	mov	r1, r6
 8090cd0:	4643      	mov	r3, r8
 8090cd2:	4854      	ldr	r0, [pc, #336]	; (8090e24 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 8090cd4:	f7f1 f9f8 	bl	80820c8 <_ZN4MQTTC1EPctPFvS0_PhjE>
 8090cd8:	4628      	mov	r0, r5
 8090cda:	f7ef f9eb 	bl	80800b4 <__cxa_guard_release>
 8090cde:	4a52      	ldr	r2, [pc, #328]	; (8090e28 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x178>)
 8090ce0:	4952      	ldr	r1, [pc, #328]	; (8090e2c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x17c>)
 8090ce2:	4850      	ldr	r0, [pc, #320]	; (8090e24 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 8090ce4:	f001 fd9e 	bl	8092824 <__aeabi_atexit>
 8090ce8:	4d4e      	ldr	r5, [pc, #312]	; (8090e24 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 8090cea:	686b      	ldr	r3, [r5, #4]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 8090cec:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 8090cee:	68ab      	ldr	r3, [r5, #8]
 8090cf0:	60a3      	str	r3, [r4, #8]
 8090cf2:	68eb      	ldr	r3, [r5, #12]
 8090cf4:	60e3      	str	r3, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 8090cf6:	692b      	ldr	r3, [r5, #16]
 8090cf8:	6123      	str	r3, [r4, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 8090cfa:	696b      	ldr	r3, [r5, #20]
 8090cfc:	6163      	str	r3, [r4, #20]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8090cfe:	69af      	ldr	r7, [r5, #24]
	if (__tmp != _M_pi)
 8090d00:	69a3      	ldr	r3, [r4, #24]
 8090d02:	429f      	cmp	r7, r3
 8090d04:	d016      	beq.n	8090d34 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x84>
	  {
	    if (__tmp != 0)
 8090d06:	b117      	cbz	r7, 8090d0e <_ZN3AWS8setupConEPctPFvS0_PhjE+0x5e>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8090d08:	687b      	ldr	r3, [r7, #4]
 8090d0a:	3301      	adds	r3, #1
 8090d0c:	607b      	str	r3, [r7, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 8090d0e:	69a6      	ldr	r6, [r4, #24]
 8090d10:	b17e      	cbz	r6, 8090d32 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8090d12:	6873      	ldr	r3, [r6, #4]
 8090d14:	3b01      	subs	r3, #1
 8090d16:	6073      	str	r3, [r6, #4]
 8090d18:	b95b      	cbnz	r3, 8090d32 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>
        {
          _M_dispose();
 8090d1a:	6833      	ldr	r3, [r6, #0]
 8090d1c:	4630      	mov	r0, r6
 8090d1e:	689b      	ldr	r3, [r3, #8]
 8090d20:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8090d22:	68b3      	ldr	r3, [r6, #8]
 8090d24:	3b01      	subs	r3, #1
 8090d26:	60b3      	str	r3, [r6, #8]
 8090d28:	b91b      	cbnz	r3, 8090d32 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>
            _M_destroy();
 8090d2a:	6833      	ldr	r3, [r6, #0]
 8090d2c:	4630      	mov	r0, r6
 8090d2e:	68db      	ldr	r3, [r3, #12]
 8090d30:	4798      	blx	r3
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 8090d32:	61a7      	str	r7, [r4, #24]
#define MQTTPINGREQ     12 << 4 // PING Request
#define MQTTPINGRESP    13 << 4 // PING Response
#define MQTTDISCONNECT  14 << 4 // Client is Disconnecting
#define MQTTReserved    15 << 4 // Reserved

class MQTT {
 8090d34:	69eb      	ldr	r3, [r5, #28]
 8090d36:	493e      	ldr	r1, [pc, #248]	; (8090e30 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x180>)
 8090d38:	61e3      	str	r3, [r4, #28]
 8090d3a:	8c2b      	ldrh	r3, [r5, #32]
 8090d3c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8090d40:	8423      	strh	r3, [r4, #32]
 8090d42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8090d44:	4e3b      	ldr	r6, [pc, #236]	; (8090e34 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x184>)
 8090d46:	6263      	str	r3, [r4, #36]	; 0x24
 8090d48:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8090d4a:	f504 67cb 	add.w	r7, r4, #1624	; 0x658
 8090d4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8090d50:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8090d54:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8090d58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8090d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8090d5c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8090d5e:	6363      	str	r3, [r4, #52]	; 0x34
 8090d60:	f001 f848 	bl	8091df4 <_ZN6StringaSERKS_>
 8090d64:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8090d66:	f44f 721e 	mov.w	r2, #632	; 0x278
 8090d6a:	64a3      	str	r3, [r4, #72]	; 0x48
 8090d6c:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
 8090d70:	4931      	ldr	r1, [pc, #196]	; (8090e38 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x188>)
 8090d72:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8090d76:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8090d78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8090d7c:	6523      	str	r3, [r4, #80]	; 0x50
 8090d7e:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 8090d82:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8090d86:	f002 fbe4 	bl	8093552 <memcpy>
 8090d8a:	22b4      	movs	r2, #180	; 0xb4
 8090d8c:	492b      	ldr	r1, [pc, #172]	; (8090e3c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x18c>)
 8090d8e:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8090d92:	f002 fbde 	bl	8093552 <memcpy>
 8090d96:	2264      	movs	r2, #100	; 0x64
 8090d98:	4929      	ldr	r1, [pc, #164]	; (8090e40 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x190>)
 8090d9a:	f504 7061 	add.w	r0, r4, #900	; 0x384
 8090d9e:	f002 fbd8 	bl	8093552 <memcpy>
 8090da2:	f44f 729a 	mov.w	r2, #308	; 0x134
 8090da6:	4927      	ldr	r1, [pc, #156]	; (8090e44 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x194>)
 8090da8:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8090dac:	f002 fbd1 	bl	8093552 <memcpy>
 8090db0:	f44f 729a 	mov.w	r2, #308	; 0x134
 8090db4:	4924      	ldr	r1, [pc, #144]	; (8090e48 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x198>)
 8090db6:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 8090dba:	f002 fbca 	bl	8093552 <memcpy>
 8090dbe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8090dc2:	f504 63ca 	add.w	r3, r4, #1616	; 0x650
 8090dc6:	e883 0003 	stmia.w	r3, {r0, r1}
 8090dca:	3608      	adds	r6, #8
 8090dcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8090dce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8090dd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8090dd2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8090dd4:	e896 0003 	ldmia.w	r6, {r0, r1}
 8090dd8:	e887 0003 	stmia.w	r7, {r0, r1}
 8090ddc:	f895 3680 	ldrb.w	r3, [r5, #1664]	; 0x680
    awsMqtt = temp;
    ret = awsMqtt.enableTls(amazonIoTRootCaPem, sizeof(amazonIoTRootCaPem),
 8090de0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8090de4:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
 8090de8:	f895 3681 	ldrb.w	r3, [r5, #1665]	; 0x681
 8090dec:	4917      	ldr	r1, [pc, #92]	; (8090e4c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x19c>)
 8090dee:	f884 3681 	strb.w	r3, [r4, #1665]	; 0x681
 8090df2:	f895 3682 	ldrb.w	r3, [r5, #1666]	; 0x682
 8090df6:	4620      	mov	r0, r4
 8090df8:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
 8090dfc:	f240 63a6 	movw	r3, #1702	; 0x6a6
 8090e00:	9302      	str	r3, [sp, #8]
 8090e02:	4b13      	ldr	r3, [pc, #76]	; (8090e50 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x1a0>)
 8090e04:	9301      	str	r3, [sp, #4]
 8090e06:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 8090e0a:	9300      	str	r3, [sp, #0]
 8090e0c:	4b11      	ldr	r3, [pc, #68]	; (8090e54 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x1a4>)
 8090e0e:	f7f1 fc2d 	bl	808266c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>
                     clientKeyCrtPem, sizeof(clientKeyCrtPem),
                     clientKeyPem, sizeof(clientKeyPem));            
    return(ret);  
}
 8090e12:	3000      	adds	r0, #0
 8090e14:	bf18      	it	ne
 8090e16:	2001      	movne	r0, #1
 8090e18:	b004      	add	sp, #16
 8090e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8090e1e:	bf00      	nop
 8090e20:	2000291c 	.word	0x2000291c
 8090e24:	20002920 	.word	0x20002920
 8090e28:	200004f8 	.word	0x200004f8
 8090e2c:	08082499 	.word	0x08082499
 8090e30:	20002958 	.word	0x20002958
 8090e34:	20002f70 	.word	0x20002f70
 8090e38:	20002978 	.word	0x20002978
 8090e3c:	20002bf0 	.word	0x20002bf0
 8090e40:	20002ca4 	.word	0x20002ca4
 8090e44:	20002d08 	.word	0x20002d08
 8090e48:	20002e3c 	.word	0x20002e3c
 8090e4c:	08096778 	.word	0x08096778
 8090e50:	08096e58 	.word	0x08096e58
 8090e54:	080962a0 	.word	0x080962a0

08090e58 <_ZN3AWSC1EPctPFvS0_PhjE>:

AWS::AWS() {
    //add initializations for default case
}

AWS::AWS(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)){
 8090e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8090e5a:	4604      	mov	r4, r0
 8090e5c:	460d      	mov	r5, r1
 8090e5e:	4616      	mov	r6, r2
 8090e60:	461f      	mov	r7, r3
 8090e62:	f7f1 f8f9 	bl	8082058 <_ZN4MQTTC1Ev>
    setupCon(domain,port,callbackRef);
 8090e66:	463b      	mov	r3, r7
 8090e68:	4632      	mov	r2, r6
 8090e6a:	4629      	mov	r1, r5
 8090e6c:	4620      	mov	r0, r4
 8090e6e:	f7ff ff1f 	bl	8090cb0 <_ZN3AWS8setupConEPctPFvS0_PhjE>
}
 8090e72:	4620      	mov	r0, r4
 8090e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08090e76 <_ZN3DOFC1Ev>:
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -7.140 // Declination (degrees) in Columbus, OH.
//In future 


DOF::DOF()
 8090e76:	b510      	push	{r4, lr}
 8090e78:	4604      	mov	r4, r0
 8090e7a:	3034      	adds	r0, #52	; 0x34
 8090e7c:	f7ef fae0 	bl	8080440 <_ZN7LSM9DS1C1Ev>
{
  //initialize variables
} 
 8090e80:	4620      	mov	r0, r4
 8090e82:	bd10      	pop	{r4, pc}

08090e84 <_ZN3DOF5beginEv>:


void DOF::begin() 
{
  imu.settings.device.commInterface = IMU_MODE_I2C;
 8090e84:	2301      	movs	r3, #1
 8090e86:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  imu.settings.device.mAddress = LSM9DS1_M;
 8090e8a:	231e      	movs	r3, #30
 8090e8c:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  imu.settings.device.agAddress = LSM9DS1_AG;
 8090e90:	236b      	movs	r3, #107	; 0x6b
 8090e92:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  imu.begin();
 8090e96:	3034      	adds	r0, #52	; 0x34
 8090e98:	f7ef bd1b 	b.w	80808d2 <_ZN7LSM9DS15beginEv>

08090e9c <_ZN3DOF6getAllEv>:
  pitch *= 180.0 / M_PI;
  roll  *= 180.0 / M_PI;
}

String DOF::getAll()
{ 
 8090e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	imu.readAccel();
 8090e9e:	f101 0534 	add.w	r5, r1, #52	; 0x34
  pitch *= 180.0 / M_PI;
  roll  *= 180.0 / M_PI;
}

String DOF::getAll()
{ 
 8090ea2:	b0b1      	sub	sp, #196	; 0xc4
 8090ea4:	4606      	mov	r6, r0
	imu.readAccel();
 8090ea6:	4628      	mov	r0, r5
  pitch *= 180.0 / M_PI;
  roll  *= 180.0 / M_PI;
}

String DOF::getAll()
{ 
 8090ea8:	460c      	mov	r4, r1
	imu.readAccel();
 8090eaa:	f7ef fdaa 	bl	8080a02 <_ZN7LSM9DS19readAccelEv>
	imu.readMag(); 
 8090eae:	4628      	mov	r0, r5
 8090eb0:	f7ef fe31 	bl	8080b16 <_ZN7LSM9DS17readMagEv>
	imu.readTemp();
 8090eb4:	4628      	mov	r0, r5
 8090eb6:	f7ef fdd5 	bl	8080a64 <_ZN7LSM9DS18readTempEv>
	imu.readGyro();
 8090eba:	4628      	mov	r0, r5
 8090ebc:	f7ef fde3 	bl	8080a86 <_ZN7LSM9DS18readGyroEv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8090ec0:	4973      	ldr	r1, [pc, #460]	; (8091090 <_ZN3DOF6getAllEv+0x1f4>)
 8090ec2:	a804      	add	r0, sp, #16
 8090ec4:	f000 ff83 	bl	8091dce <_ZN6StringC1EPK19__FlashStringHelper>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8090ec8:	f001 f90b 	bl	80920e2 <_ZN9TimeClass3nowEv>

	
	String returnstring= "{\t\"dofData\":{"
               "\"time\":" +  String(Time.timeStr()) + ", " +
 8090ecc:	4d71      	ldr	r5, [pc, #452]	; (8091094 <_ZN3DOF6getAllEv+0x1f8>)
 8090ece:	4601      	mov	r1, r0
 8090ed0:	4668      	mov	r0, sp
 8090ed2:	f001 f8c3 	bl	809205c <_ZN9TimeClass7timeStrEl>
 8090ed6:	4669      	mov	r1, sp
 8090ed8:	a804      	add	r0, sp, #16
 8090eda:	f000 ffe0 	bl	8091e9e <_ZplRK15StringSumHelperRK6String>
 8090ede:	4629      	mov	r1, r5
 8090ee0:	f000 ffe9 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
               "\"ax\":" +  String(imu.ax) + ", " +
 8090ee4:	496c      	ldr	r1, [pc, #432]	; (8091098 <_ZN3DOF6getAllEv+0x1fc>)
 8090ee6:	f000 ffe6 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
 8090eea:	4607      	mov	r7, r0
 8090eec:	220a      	movs	r2, #10
 8090eee:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8090ef2:	a808      	add	r0, sp, #32
 8090ef4:	f000 ffa9 	bl	8091e4a <_ZN6StringC1Eih>
 8090ef8:	a908      	add	r1, sp, #32
 8090efa:	4638      	mov	r0, r7
 8090efc:	f000 ffcf 	bl	8091e9e <_ZplRK15StringSumHelperRK6String>
 8090f00:	4629      	mov	r1, r5
 8090f02:	f000 ffd8 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
               "\"ay\":" +  String(imu.ay) + ", " +
 8090f06:	4965      	ldr	r1, [pc, #404]	; (809109c <_ZN3DOF6getAllEv+0x200>)
 8090f08:	f000 ffd5 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
 8090f0c:	4607      	mov	r7, r0
 8090f0e:	220a      	movs	r2, #10
 8090f10:	f9b4 1064 	ldrsh.w	r1, [r4, #100]	; 0x64
 8090f14:	a80c      	add	r0, sp, #48	; 0x30
 8090f16:	f000 ff98 	bl	8091e4a <_ZN6StringC1Eih>
 8090f1a:	a90c      	add	r1, sp, #48	; 0x30
 8090f1c:	4638      	mov	r0, r7
 8090f1e:	f000 ffbe 	bl	8091e9e <_ZplRK15StringSumHelperRK6String>
 8090f22:	4629      	mov	r1, r5
 8090f24:	f000 ffc7 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
               "\"az\":" + String(imu.az) + ", " +
 8090f28:	495d      	ldr	r1, [pc, #372]	; (80910a0 <_ZN3DOF6getAllEv+0x204>)
 8090f2a:	f000 ffc4 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
 8090f2e:	4607      	mov	r7, r0
 8090f30:	220a      	movs	r2, #10
 8090f32:	f9b4 1066 	ldrsh.w	r1, [r4, #102]	; 0x66
 8090f36:	a810      	add	r0, sp, #64	; 0x40
 8090f38:	f000 ff87 	bl	8091e4a <_ZN6StringC1Eih>
 8090f3c:	a910      	add	r1, sp, #64	; 0x40
 8090f3e:	4638      	mov	r0, r7
 8090f40:	f000 ffad 	bl	8091e9e <_ZplRK15StringSumHelperRK6String>
 8090f44:	4629      	mov	r1, r5
 8090f46:	f000 ffb6 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
               "\"mx\":" + String(imu.mx) + ", " +
 8090f4a:	4956      	ldr	r1, [pc, #344]	; (80910a4 <_ZN3DOF6getAllEv+0x208>)
 8090f4c:	f000 ffb3 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
 8090f50:	4607      	mov	r7, r0
 8090f52:	220a      	movs	r2, #10
 8090f54:	f9b4 1068 	ldrsh.w	r1, [r4, #104]	; 0x68
 8090f58:	a814      	add	r0, sp, #80	; 0x50
 8090f5a:	f000 ff76 	bl	8091e4a <_ZN6StringC1Eih>
 8090f5e:	a914      	add	r1, sp, #80	; 0x50
 8090f60:	4638      	mov	r0, r7
 8090f62:	f000 ff9c 	bl	8091e9e <_ZplRK15StringSumHelperRK6String>
 8090f66:	4629      	mov	r1, r5
 8090f68:	f000 ffa5 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
               "\"my\":" + String(imu.my) + ", " +
 8090f6c:	494e      	ldr	r1, [pc, #312]	; (80910a8 <_ZN3DOF6getAllEv+0x20c>)
 8090f6e:	f000 ffa2 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
 8090f72:	4607      	mov	r7, r0
 8090f74:	220a      	movs	r2, #10
 8090f76:	f9b4 106a 	ldrsh.w	r1, [r4, #106]	; 0x6a
 8090f7a:	a818      	add	r0, sp, #96	; 0x60
 8090f7c:	f000 ff65 	bl	8091e4a <_ZN6StringC1Eih>
 8090f80:	a918      	add	r1, sp, #96	; 0x60
 8090f82:	4638      	mov	r0, r7
 8090f84:	f000 ff8b 	bl	8091e9e <_ZplRK15StringSumHelperRK6String>
 8090f88:	4629      	mov	r1, r5
 8090f8a:	f000 ff94 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
               "\"mz\":" + String(imu.mz) + ", " +
 8090f8e:	4947      	ldr	r1, [pc, #284]	; (80910ac <_ZN3DOF6getAllEv+0x210>)
 8090f90:	f000 ff91 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
 8090f94:	4607      	mov	r7, r0
 8090f96:	220a      	movs	r2, #10
 8090f98:	f9b4 106c 	ldrsh.w	r1, [r4, #108]	; 0x6c
 8090f9c:	a81c      	add	r0, sp, #112	; 0x70
 8090f9e:	f000 ff54 	bl	8091e4a <_ZN6StringC1Eih>
 8090fa2:	a91c      	add	r1, sp, #112	; 0x70
 8090fa4:	4638      	mov	r0, r7
 8090fa6:	f000 ff7a 	bl	8091e9e <_ZplRK15StringSumHelperRK6String>
 8090faa:	4629      	mov	r1, r5
 8090fac:	f000 ff83 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
               "\"gx\":" +  String(imu.gx) + ", " +
 8090fb0:	493f      	ldr	r1, [pc, #252]	; (80910b0 <_ZN3DOF6getAllEv+0x214>)
 8090fb2:	f000 ff80 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
 8090fb6:	4607      	mov	r7, r0
 8090fb8:	220a      	movs	r2, #10
 8090fba:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 8090fbe:	a820      	add	r0, sp, #128	; 0x80
 8090fc0:	f000 ff43 	bl	8091e4a <_ZN6StringC1Eih>
 8090fc4:	a920      	add	r1, sp, #128	; 0x80
 8090fc6:	4638      	mov	r0, r7
 8090fc8:	f000 ff69 	bl	8091e9e <_ZplRK15StringSumHelperRK6String>
 8090fcc:	4629      	mov	r1, r5
 8090fce:	f000 ff72 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
               "\"gy\":" +  String(imu.gy) + ", " +
 8090fd2:	4938      	ldr	r1, [pc, #224]	; (80910b4 <_ZN3DOF6getAllEv+0x218>)
 8090fd4:	f000 ff6f 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
 8090fd8:	4607      	mov	r7, r0
 8090fda:	220a      	movs	r2, #10
 8090fdc:	f9b4 105e 	ldrsh.w	r1, [r4, #94]	; 0x5e
 8090fe0:	a824      	add	r0, sp, #144	; 0x90
 8090fe2:	f000 ff32 	bl	8091e4a <_ZN6StringC1Eih>
 8090fe6:	a924      	add	r1, sp, #144	; 0x90
 8090fe8:	4638      	mov	r0, r7
 8090fea:	f000 ff58 	bl	8091e9e <_ZplRK15StringSumHelperRK6String>
 8090fee:	4629      	mov	r1, r5
 8090ff0:	f000 ff61 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
               "\"gz\":" + String(imu.gz) + ", " +
 8090ff4:	4930      	ldr	r1, [pc, #192]	; (80910b8 <_ZN3DOF6getAllEv+0x21c>)
 8090ff6:	f000 ff5e 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
 8090ffa:	4607      	mov	r7, r0
 8090ffc:	220a      	movs	r2, #10
 8090ffe:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	; 0x60
 8091002:	a828      	add	r0, sp, #160	; 0xa0
 8091004:	f000 ff21 	bl	8091e4a <_ZN6StringC1Eih>
 8091008:	a928      	add	r1, sp, #160	; 0xa0
 809100a:	4638      	mov	r0, r7
 809100c:	f000 ff47 	bl	8091e9e <_ZplRK15StringSumHelperRK6String>
 8091010:	4629      	mov	r1, r5
 8091012:	f000 ff50 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
               "\"temp\":" + String(imu.temperature) + "}"
 8091016:	4929      	ldr	r1, [pc, #164]	; (80910bc <_ZN3DOF6getAllEv+0x220>)
 8091018:	f000 ff4d 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
 809101c:	4605      	mov	r5, r0
 809101e:	220a      	movs	r2, #10
 8091020:	f9b4 106e 	ldrsh.w	r1, [r4, #110]	; 0x6e
 8091024:	a82c      	add	r0, sp, #176	; 0xb0
 8091026:	f000 ff10 	bl	8091e4a <_ZN6StringC1Eih>
 809102a:	a92c      	add	r1, sp, #176	; 0xb0
 809102c:	4628      	mov	r0, r5
 809102e:	f000 ff36 	bl	8091e9e <_ZplRK15StringSumHelperRK6String>
               "\n}";
 8091032:	4923      	ldr	r1, [pc, #140]	; (80910c0 <_ZN3DOF6getAllEv+0x224>)
 8091034:	f000 ff3f 	bl	8091eb6 <_ZplRK15StringSumHelperPKc>
 8091038:	4601      	mov	r1, r0
 809103a:	4630      	mov	r0, r6
 809103c:	f000 fee9 	bl	8091e12 <_ZN6StringC1ERKS_>
 8091040:	a82c      	add	r0, sp, #176	; 0xb0
 8091042:	f000 fe7d 	bl	8091d40 <_ZN6StringD1Ev>
 8091046:	a828      	add	r0, sp, #160	; 0xa0
 8091048:	f000 fe7a 	bl	8091d40 <_ZN6StringD1Ev>
 809104c:	a824      	add	r0, sp, #144	; 0x90
 809104e:	f000 fe77 	bl	8091d40 <_ZN6StringD1Ev>
 8091052:	a820      	add	r0, sp, #128	; 0x80
 8091054:	f000 fe74 	bl	8091d40 <_ZN6StringD1Ev>
 8091058:	a81c      	add	r0, sp, #112	; 0x70
 809105a:	f000 fe71 	bl	8091d40 <_ZN6StringD1Ev>
 809105e:	a818      	add	r0, sp, #96	; 0x60
 8091060:	f000 fe6e 	bl	8091d40 <_ZN6StringD1Ev>
 8091064:	a814      	add	r0, sp, #80	; 0x50
 8091066:	f000 fe6b 	bl	8091d40 <_ZN6StringD1Ev>
 809106a:	a810      	add	r0, sp, #64	; 0x40
 809106c:	f000 fe68 	bl	8091d40 <_ZN6StringD1Ev>
 8091070:	a80c      	add	r0, sp, #48	; 0x30
 8091072:	f000 fe65 	bl	8091d40 <_ZN6StringD1Ev>
 8091076:	a808      	add	r0, sp, #32
 8091078:	f000 fe62 	bl	8091d40 <_ZN6StringD1Ev>
 809107c:	4668      	mov	r0, sp
 809107e:	f000 fe5f 	bl	8091d40 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8091082:	a804      	add	r0, sp, #16
 8091084:	f000 fe5c 	bl	8091d40 <_ZN6StringD1Ev>
			
			
	return returnstring;
}
 8091088:	4630      	mov	r0, r6
 809108a:	b031      	add	sp, #196	; 0xc4
 809108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 809108e:	bf00      	nop
 8091090:	080974fe 	.word	0x080974fe
 8091094:	08095428 	.word	0x08095428
 8091098:	08097513 	.word	0x08097513
 809109c:	08097519 	.word	0x08097519
 80910a0:	0809751f 	.word	0x0809751f
 80910a4:	08097525 	.word	0x08097525
 80910a8:	0809752b 	.word	0x0809752b
 80910ac:	08097531 	.word	0x08097531
 80910b0:	08097537 	.word	0x08097537
 80910b4:	0809753d 	.word	0x0809753d
 80910b8:	08097543 	.word	0x08097543
 80910bc:	08097549 	.word	0x08097549
 80910c0:	08097551 	.word	0x08097551

080910c4 <_GLOBAL__sub_I__ZN3DOFC2Ev>:
 80910c4:	f000 b830 	b.w	8091128 <HAL_Pin_Map>

080910c8 <_GLOBAL__sub_I__ZN4TgpsC2Ev>:
 80910c8:	f000 b82e 	b.w	8091128 <HAL_Pin_Map>

080910cc <_GLOBAL__sub_I__ZN11ArduinoJson9JsonArray8_invalidE>:

    writer.writeComma();
  }

  writer.endArray();
}
 80910cc:	b508      	push	{r3, lr}
 80910ce:	f000 f82b 	bl	8091128 <HAL_Pin_Map>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
 80910d2:	4b02      	ldr	r3, [pc, #8]	; (80910dc <_GLOBAL__sub_I__ZN11ArduinoJson9JsonArray8_invalidE+0x10>)
 80910d4:	2200      	movs	r2, #0
 80910d6:	601a      	str	r2, [r3, #0]
 80910d8:	605a      	str	r2, [r3, #4]
 80910da:	bd08      	pop	{r3, pc}
 80910dc:	20002fa8 	.word	0x20002fa8

080910e0 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals10JsonParser10skipSpacesEv>:
 80910e0:	f000 b822 	b.w	8091128 <HAL_Pin_Map>

080910e4 <_GLOBAL__sub_I_List.cpp>:
 80910e4:	f000 b820 	b.w	8091128 <HAL_Pin_Map>

080910e8 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals12QuotedString7printToEPKcR5Print>:
 80910e8:	f000 b81e 	b.w	8091128 <HAL_Pin_Map>

080910ec <_GLOBAL__sub_I__ZN11ArduinoJson9Internals10Prettyfier5writeEh>:
 80910ec:	f000 b81c 	b.w	8091128 <HAL_Pin_Map>

080910f0 <_GLOBAL__sub_I_SparkJson.cpp>:
 80910f0:	f000 b81a 	b.w	8091128 <HAL_Pin_Map>

080910f4 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals13IndentedPrint5writeEh>:
 80910f4:	f000 b818 	b.w	8091128 <HAL_Pin_Map>

080910f8 <_GLOBAL__sub_I__ZN11ArduinoJson10JsonObject8_invalidE>:

    writer.writeComma();
  }

  writer.endObject();
}
 80910f8:	b508      	push	{r3, lr}
 80910fa:	f000 f815 	bl	8091128 <HAL_Pin_Map>
 80910fe:	4b02      	ldr	r3, [pc, #8]	; (8091108 <_GLOBAL__sub_I__ZN11ArduinoJson10JsonObject8_invalidE+0x10>)
 8091100:	2200      	movs	r2, #0
 8091102:	601a      	str	r2, [r3, #0]
 8091104:	605a      	str	r2, [r3, #4]
 8091106:	bd08      	pop	{r3, pc}
 8091108:	20002fb0 	.word	0x20002fb0

0809110c <_GLOBAL__sub_I__ZN11ArduinoJson10JsonBuffer11createArrayEv>:
 809110c:	f000 b80c 	b.w	8091128 <HAL_Pin_Map>

08091110 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals13StringBuilder5writeEh>:
 8091110:	f000 b80a 	b.w	8091128 <HAL_Pin_Map>

08091114 <_GLOBAL__sub_I__ZN11ArduinoJson11JsonVariant8_invalidE>:
    writer.writeBoolean(as<bool>());
  else if (is<double>()) {
    uint8_t decimals = static_cast<uint8_t>(_type - JSON_DOUBLE_0_DECIMALS);
    writer.writeDouble(as<double>(), decimals);
  }
}
 8091114:	b508      	push	{r3, lr}
 8091116:	f000 f807 	bl	8091128 <HAL_Pin_Map>
  // Return JsonVariant::invalid() if the variant is not an object.
  JsonVariant &operator[](const char *key);

 private:
  // Special constructor used only to create _invalid.
  explicit JsonVariant(Internals::JsonVariantType type) : _type(type) {}
 809111a:	4b02      	ldr	r3, [pc, #8]	; (8091124 <_GLOBAL__sub_I__ZN11ArduinoJson11JsonVariant8_invalidE+0x10>)
 809111c:	2200      	movs	r2, #0
 809111e:	701a      	strb	r2, [r3, #0]
 8091120:	bd08      	pop	{r3, pc}
 8091122:	bf00      	nop
 8091124:	20002fb8 	.word	0x20002fb8

08091128 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8091128:	b508      	push	{r3, lr}
 809112a:	4b02      	ldr	r3, [pc, #8]	; (8091134 <HAL_Pin_Map+0xc>)
 809112c:	681b      	ldr	r3, [r3, #0]
 809112e:	681b      	ldr	r3, [r3, #0]
 8091130:	9301      	str	r3, [sp, #4]
 8091132:	bd08      	pop	{r3, pc}
 8091134:	080401b0 	.word	0x080401b0

08091138 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8091138:	b508      	push	{r3, lr}
 809113a:	4b02      	ldr	r3, [pc, #8]	; (8091144 <HAL_Pin_Mode+0xc>)
 809113c:	681b      	ldr	r3, [r3, #0]
 809113e:	689b      	ldr	r3, [r3, #8]
 8091140:	9301      	str	r3, [sp, #4]
 8091142:	bd08      	pop	{r3, pc}
 8091144:	080401b0 	.word	0x080401b0

08091148 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8091148:	b508      	push	{r3, lr}
 809114a:	4b02      	ldr	r3, [pc, #8]	; (8091154 <HAL_Get_Pin_Mode+0xc>)
 809114c:	681b      	ldr	r3, [r3, #0]
 809114e:	68db      	ldr	r3, [r3, #12]
 8091150:	9301      	str	r3, [sp, #4]
 8091152:	bd08      	pop	{r3, pc}
 8091154:	080401b0 	.word	0x080401b0

08091158 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8091158:	b508      	push	{r3, lr}
 809115a:	4b02      	ldr	r3, [pc, #8]	; (8091164 <HAL_GPIO_Write+0xc>)
 809115c:	681b      	ldr	r3, [r3, #0]
 809115e:	691b      	ldr	r3, [r3, #16]
 8091160:	9301      	str	r3, [sp, #4]
 8091162:	bd08      	pop	{r3, pc}
 8091164:	080401b0 	.word	0x080401b0

08091168 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8091168:	b508      	push	{r3, lr}
 809116a:	4b02      	ldr	r3, [pc, #8]	; (8091174 <HAL_SPI_Begin+0xc>)
 809116c:	681b      	ldr	r3, [r3, #0]
 809116e:	681b      	ldr	r3, [r3, #0]
 8091170:	9301      	str	r3, [sp, #4]
 8091172:	bd08      	pop	{r3, pc}
 8091174:	080401b4 	.word	0x080401b4

08091178 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 8091178:	b508      	push	{r3, lr}
 809117a:	4b02      	ldr	r3, [pc, #8]	; (8091184 <HAL_SPI_Set_Bit_Order+0xc>)
 809117c:	681b      	ldr	r3, [r3, #0]
 809117e:	689b      	ldr	r3, [r3, #8]
 8091180:	9301      	str	r3, [sp, #4]
 8091182:	bd08      	pop	{r3, pc}
 8091184:	080401b4 	.word	0x080401b4

08091188 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 8091188:	b508      	push	{r3, lr}
 809118a:	4b02      	ldr	r3, [pc, #8]	; (8091194 <HAL_SPI_Set_Data_Mode+0xc>)
 809118c:	681b      	ldr	r3, [r3, #0]
 809118e:	68db      	ldr	r3, [r3, #12]
 8091190:	9301      	str	r3, [sp, #4]
 8091192:	bd08      	pop	{r3, pc}
 8091194:	080401b4 	.word	0x080401b4

08091198 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 8091198:	b508      	push	{r3, lr}
 809119a:	4b02      	ldr	r3, [pc, #8]	; (80911a4 <HAL_SPI_Set_Clock_Divider+0xc>)
 809119c:	681b      	ldr	r3, [r3, #0]
 809119e:	691b      	ldr	r3, [r3, #16]
 80911a0:	9301      	str	r3, [sp, #4]
 80911a2:	bd08      	pop	{r3, pc}
 80911a4:	080401b4 	.word	0x080401b4

080911a8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80911a8:	b508      	push	{r3, lr}
 80911aa:	4b02      	ldr	r3, [pc, #8]	; (80911b4 <HAL_SPI_Send_Receive_Data+0xc>)
 80911ac:	681b      	ldr	r3, [r3, #0]
 80911ae:	695b      	ldr	r3, [r3, #20]
 80911b0:	9301      	str	r3, [sp, #4]
 80911b2:	bd08      	pop	{r3, pc}
 80911b4:	080401b4 	.word	0x080401b4

080911b8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80911b8:	b508      	push	{r3, lr}
 80911ba:	4b02      	ldr	r3, [pc, #8]	; (80911c4 <HAL_SPI_Init+0xc>)
 80911bc:	681b      	ldr	r3, [r3, #0]
 80911be:	69db      	ldr	r3, [r3, #28]
 80911c0:	9301      	str	r3, [sp, #4]
 80911c2:	bd08      	pop	{r3, pc}
 80911c4:	080401b4 	.word	0x080401b4

080911c8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80911c8:	b508      	push	{r3, lr}
 80911ca:	4b02      	ldr	r3, [pc, #8]	; (80911d4 <HAL_SPI_Is_Enabled+0xc>)
 80911cc:	681b      	ldr	r3, [r3, #0]
 80911ce:	6a1b      	ldr	r3, [r3, #32]
 80911d0:	9301      	str	r3, [sp, #4]
 80911d2:	bd08      	pop	{r3, pc}
 80911d4:	080401b4 	.word	0x080401b4

080911d8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80911d8:	b508      	push	{r3, lr}
 80911da:	4b02      	ldr	r3, [pc, #8]	; (80911e4 <HAL_SPI_Info+0xc>)
 80911dc:	681b      	ldr	r3, [r3, #0]
 80911de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80911e0:	9301      	str	r3, [sp, #4]
 80911e2:	bd08      	pop	{r3, pc}
 80911e4:	080401b4 	.word	0x080401b4

080911e8 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 80911e8:	b508      	push	{r3, lr}
 80911ea:	4b02      	ldr	r3, [pc, #8]	; (80911f4 <HAL_SPI_DMA_Transfer+0xc>)
 80911ec:	681b      	ldr	r3, [r3, #0]
 80911ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80911f0:	9301      	str	r3, [sp, #4]
 80911f2:	bd08      	pop	{r3, pc}
 80911f4:	080401b4 	.word	0x080401b4

080911f8 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 80911f8:	b508      	push	{r3, lr}
 80911fa:	4b02      	ldr	r3, [pc, #8]	; (8091204 <HAL_SPI_DMA_Transfer_Status+0xc>)
 80911fc:	681b      	ldr	r3, [r3, #0]
 80911fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8091200:	9301      	str	r3, [sp, #4]
 8091202:	bd08      	pop	{r3, pc}
 8091204:	080401b4 	.word	0x080401b4

08091208 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8091208:	b508      	push	{r3, lr}
 809120a:	4b02      	ldr	r3, [pc, #8]	; (8091214 <HAL_RNG_GetRandomNumber+0xc>)
 809120c:	681b      	ldr	r3, [r3, #0]
 809120e:	685b      	ldr	r3, [r3, #4]
 8091210:	9301      	str	r3, [sp, #4]
 8091212:	bd08      	pop	{r3, pc}
 8091214:	0804019c 	.word	0x0804019c

08091218 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8091218:	b508      	push	{r3, lr}
 809121a:	4b02      	ldr	r3, [pc, #8]	; (8091224 <HAL_Delay_Microseconds+0xc>)
 809121c:	681b      	ldr	r3, [r3, #0]
 809121e:	68db      	ldr	r3, [r3, #12]
 8091220:	9301      	str	r3, [sp, #4]
 8091222:	bd08      	pop	{r3, pc}
 8091224:	0804019c 	.word	0x0804019c

08091228 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8091228:	b508      	push	{r3, lr}
 809122a:	4b02      	ldr	r3, [pc, #8]	; (8091234 <HAL_Timer_Get_Milli_Seconds+0xc>)
 809122c:	681b      	ldr	r3, [r3, #0]
 809122e:	695b      	ldr	r3, [r3, #20]
 8091230:	9301      	str	r3, [sp, #4]
 8091232:	bd08      	pop	{r3, pc}
 8091234:	0804019c 	.word	0x0804019c

08091238 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8091238:	b508      	push	{r3, lr}
 809123a:	4b02      	ldr	r3, [pc, #8]	; (8091244 <HAL_RTC_Get_UnixTime+0xc>)
 809123c:	681b      	ldr	r3, [r3, #0]
 809123e:	69db      	ldr	r3, [r3, #28]
 8091240:	9301      	str	r3, [sp, #4]
 8091242:	bd08      	pop	{r3, pc}
 8091244:	0804019c 	.word	0x0804019c

08091248 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8091248:	b508      	push	{r3, lr}
 809124a:	4b02      	ldr	r3, [pc, #8]	; (8091254 <HAL_RTC_Time_Is_Valid+0xc>)
 809124c:	681b      	ldr	r3, [r3, #0]
 809124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8091250:	9301      	str	r3, [sp, #4]
 8091252:	bd08      	pop	{r3, pc}
 8091254:	0804019c 	.word	0x0804019c

08091258 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8091258:	b508      	push	{r3, lr}
 809125a:	4b02      	ldr	r3, [pc, #8]	; (8091264 <os_thread_create+0xc>)
 809125c:	681b      	ldr	r3, [r3, #0]
 809125e:	685b      	ldr	r3, [r3, #4]
 8091260:	9301      	str	r3, [sp, #4]
 8091262:	bd08      	pop	{r3, pc}
 8091264:	080401d0 	.word	0x080401d0

08091268 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 8091268:	b508      	push	{r3, lr}
 809126a:	4b02      	ldr	r3, [pc, #8]	; (8091274 <os_thread_is_current+0xc>)
 809126c:	681b      	ldr	r3, [r3, #0]
 809126e:	689b      	ldr	r3, [r3, #8]
 8091270:	9301      	str	r3, [sp, #4]
 8091272:	bd08      	pop	{r3, pc}
 8091274:	080401d0 	.word	0x080401d0

08091278 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 8091278:	b508      	push	{r3, lr}
 809127a:	4b02      	ldr	r3, [pc, #8]	; (8091284 <os_thread_join+0xc>)
 809127c:	681b      	ldr	r3, [r3, #0]
 809127e:	691b      	ldr	r3, [r3, #16]
 8091280:	9301      	str	r3, [sp, #4]
 8091282:	bd08      	pop	{r3, pc}
 8091284:	080401d0 	.word	0x080401d0

08091288 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 8091288:	b508      	push	{r3, lr}
 809128a:	4b02      	ldr	r3, [pc, #8]	; (8091294 <os_thread_cleanup+0xc>)
 809128c:	681b      	ldr	r3, [r3, #0]
 809128e:	695b      	ldr	r3, [r3, #20]
 8091290:	9301      	str	r3, [sp, #4]
 8091292:	bd08      	pop	{r3, pc}
 8091294:	080401d0 	.word	0x080401d0

08091298 <os_thread_delay_until>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
 8091298:	b508      	push	{r3, lr}
 809129a:	4b02      	ldr	r3, [pc, #8]	; (80912a4 <os_thread_delay_until+0xc>)
 809129c:	681b      	ldr	r3, [r3, #0]
 809129e:	699b      	ldr	r3, [r3, #24]
 80912a0:	9301      	str	r3, [sp, #4]
 80912a2:	bd08      	pop	{r3, pc}
 80912a4:	080401d0 	.word	0x080401d0

080912a8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80912a8:	b508      	push	{r3, lr}
 80912aa:	4b02      	ldr	r3, [pc, #8]	; (80912b4 <os_mutex_create+0xc>)
 80912ac:	681b      	ldr	r3, [r3, #0]
 80912ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80912b0:	9301      	str	r3, [sp, #4]
 80912b2:	bd08      	pop	{r3, pc}
 80912b4:	080401d0 	.word	0x080401d0

080912b8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80912b8:	b508      	push	{r3, lr}
 80912ba:	4b02      	ldr	r3, [pc, #8]	; (80912c4 <os_mutex_lock+0xc>)
 80912bc:	681b      	ldr	r3, [r3, #0]
 80912be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80912c0:	9301      	str	r3, [sp, #4]
 80912c2:	bd08      	pop	{r3, pc}
 80912c4:	080401d0 	.word	0x080401d0

080912c8 <os_mutex_trylock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
 80912c8:	b508      	push	{r3, lr}
 80912ca:	4b02      	ldr	r3, [pc, #8]	; (80912d4 <os_mutex_trylock+0xc>)
 80912cc:	681b      	ldr	r3, [r3, #0]
 80912ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80912d0:	9301      	str	r3, [sp, #4]
 80912d2:	bd08      	pop	{r3, pc}
 80912d4:	080401d0 	.word	0x080401d0

080912d8 <os_mutex_unlock>:
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80912d8:	b508      	push	{r3, lr}
 80912da:	4b02      	ldr	r3, [pc, #8]	; (80912e4 <os_mutex_unlock+0xc>)
 80912dc:	681b      	ldr	r3, [r3, #0]
 80912de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80912e0:	9301      	str	r3, [sp, #4]
 80912e2:	bd08      	pop	{r3, pc}
 80912e4:	080401d0 	.word	0x080401d0

080912e8 <os_mutex_recursive_lock>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80912e8:	b508      	push	{r3, lr}
 80912ea:	4b02      	ldr	r3, [pc, #8]	; (80912f4 <os_mutex_recursive_lock+0xc>)
 80912ec:	681b      	ldr	r3, [r3, #0]
 80912ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80912f0:	9301      	str	r3, [sp, #4]
 80912f2:	bd08      	pop	{r3, pc}
 80912f4:	080401d0 	.word	0x080401d0

080912f8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80912f8:	b508      	push	{r3, lr}
 80912fa:	4b02      	ldr	r3, [pc, #8]	; (8091304 <os_mutex_recursive_unlock+0xc>)
 80912fc:	681b      	ldr	r3, [r3, #0]
 80912fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8091300:	9301      	str	r3, [sp, #4]
 8091302:	bd08      	pop	{r3, pc}
 8091304:	080401d0 	.word	0x080401d0

08091308 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8091308:	b508      	push	{r3, lr}
 809130a:	4b02      	ldr	r3, [pc, #8]	; (8091314 <os_thread_exit+0xc>)
 809130c:	681b      	ldr	r3, [r3, #0]
 809130e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8091310:	9301      	str	r3, [sp, #4]
 8091312:	bd08      	pop	{r3, pc}
 8091314:	080401d0 	.word	0x080401d0

08091318 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8091318:	b508      	push	{r3, lr}
 809131a:	4b02      	ldr	r3, [pc, #8]	; (8091324 <HAL_USART_Init+0xc>)
 809131c:	681b      	ldr	r3, [r3, #0]
 809131e:	699b      	ldr	r3, [r3, #24]
 8091320:	9301      	str	r3, [sp, #4]
 8091322:	bd08      	pop	{r3, pc}
 8091324:	080401c4 	.word	0x080401c4

08091328 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8091328:	b508      	push	{r3, lr}
 809132a:	4b02      	ldr	r3, [pc, #8]	; (8091334 <HAL_USART_Write_Data+0xc>)
 809132c:	681b      	ldr	r3, [r3, #0]
 809132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8091330:	9301      	str	r3, [sp, #4]
 8091332:	bd08      	pop	{r3, pc}
 8091334:	080401c4 	.word	0x080401c4

08091338 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8091338:	b508      	push	{r3, lr}
 809133a:	4b02      	ldr	r3, [pc, #8]	; (8091344 <HAL_USART_Available_Data+0xc>)
 809133c:	681b      	ldr	r3, [r3, #0]
 809133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8091340:	9301      	str	r3, [sp, #4]
 8091342:	bd08      	pop	{r3, pc}
 8091344:	080401c4 	.word	0x080401c4

08091348 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8091348:	b508      	push	{r3, lr}
 809134a:	4b02      	ldr	r3, [pc, #8]	; (8091354 <HAL_USART_Read_Data+0xc>)
 809134c:	681b      	ldr	r3, [r3, #0]
 809134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8091350:	9301      	str	r3, [sp, #4]
 8091352:	bd08      	pop	{r3, pc}
 8091354:	080401c4 	.word	0x080401c4

08091358 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8091358:	b508      	push	{r3, lr}
 809135a:	4b02      	ldr	r3, [pc, #8]	; (8091364 <HAL_USART_Peek_Data+0xc>)
 809135c:	681b      	ldr	r3, [r3, #0]
 809135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8091360:	9301      	str	r3, [sp, #4]
 8091362:	bd08      	pop	{r3, pc}
 8091364:	080401c4 	.word	0x080401c4

08091368 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8091368:	b508      	push	{r3, lr}
 809136a:	4b02      	ldr	r3, [pc, #8]	; (8091374 <HAL_USART_Flush_Data+0xc>)
 809136c:	681b      	ldr	r3, [r3, #0]
 809136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8091370:	9301      	str	r3, [sp, #4]
 8091372:	bd08      	pop	{r3, pc}
 8091374:	080401c4 	.word	0x080401c4

08091378 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8091378:	b508      	push	{r3, lr}
 809137a:	4b02      	ldr	r3, [pc, #8]	; (8091384 <HAL_USART_Is_Enabled+0xc>)
 809137c:	681b      	ldr	r3, [r3, #0]
 809137e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8091380:	9301      	str	r3, [sp, #4]
 8091382:	bd08      	pop	{r3, pc}
 8091384:	080401c4 	.word	0x080401c4

08091388 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8091388:	b508      	push	{r3, lr}
 809138a:	4b02      	ldr	r3, [pc, #8]	; (8091394 <HAL_USART_Available_Data_For_Write+0xc>)
 809138c:	681b      	ldr	r3, [r3, #0]
 809138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8091390:	9301      	str	r3, [sp, #4]
 8091392:	bd08      	pop	{r3, pc}
 8091394:	080401c4 	.word	0x080401c4

08091398 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8091398:	b508      	push	{r3, lr}
 809139a:	4b02      	ldr	r3, [pc, #8]	; (80913a4 <HAL_USART_BeginConfig+0xc>)
 809139c:	681b      	ldr	r3, [r3, #0]
 809139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80913a0:	9301      	str	r3, [sp, #4]
 80913a2:	bd08      	pop	{r3, pc}
 80913a4:	080401c4 	.word	0x080401c4

080913a8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80913a8:	b508      	push	{r3, lr}
 80913aa:	4b02      	ldr	r3, [pc, #8]	; (80913b4 <HAL_I2C_Begin+0xc>)
 80913ac:	681b      	ldr	r3, [r3, #0]
 80913ae:	68db      	ldr	r3, [r3, #12]
 80913b0:	9301      	str	r3, [sp, #4]
 80913b2:	bd08      	pop	{r3, pc}
 80913b4:	080401ac 	.word	0x080401ac

080913b8 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80913b8:	b508      	push	{r3, lr}
 80913ba:	4b02      	ldr	r3, [pc, #8]	; (80913c4 <HAL_I2C_Request_Data+0xc>)
 80913bc:	681b      	ldr	r3, [r3, #0]
 80913be:	695b      	ldr	r3, [r3, #20]
 80913c0:	9301      	str	r3, [sp, #4]
 80913c2:	bd08      	pop	{r3, pc}
 80913c4:	080401ac 	.word	0x080401ac

080913c8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80913c8:	b508      	push	{r3, lr}
 80913ca:	4b02      	ldr	r3, [pc, #8]	; (80913d4 <HAL_I2C_Begin_Transmission+0xc>)
 80913cc:	681b      	ldr	r3, [r3, #0]
 80913ce:	699b      	ldr	r3, [r3, #24]
 80913d0:	9301      	str	r3, [sp, #4]
 80913d2:	bd08      	pop	{r3, pc}
 80913d4:	080401ac 	.word	0x080401ac

080913d8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80913d8:	b508      	push	{r3, lr}
 80913da:	4b02      	ldr	r3, [pc, #8]	; (80913e4 <HAL_I2C_End_Transmission+0xc>)
 80913dc:	681b      	ldr	r3, [r3, #0]
 80913de:	69db      	ldr	r3, [r3, #28]
 80913e0:	9301      	str	r3, [sp, #4]
 80913e2:	bd08      	pop	{r3, pc}
 80913e4:	080401ac 	.word	0x080401ac

080913e8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80913e8:	b508      	push	{r3, lr}
 80913ea:	4b02      	ldr	r3, [pc, #8]	; (80913f4 <HAL_I2C_Write_Data+0xc>)
 80913ec:	681b      	ldr	r3, [r3, #0]
 80913ee:	6a1b      	ldr	r3, [r3, #32]
 80913f0:	9301      	str	r3, [sp, #4]
 80913f2:	bd08      	pop	{r3, pc}
 80913f4:	080401ac 	.word	0x080401ac

080913f8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80913f8:	b508      	push	{r3, lr}
 80913fa:	4b02      	ldr	r3, [pc, #8]	; (8091404 <HAL_I2C_Available_Data+0xc>)
 80913fc:	681b      	ldr	r3, [r3, #0]
 80913fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8091400:	9301      	str	r3, [sp, #4]
 8091402:	bd08      	pop	{r3, pc}
 8091404:	080401ac 	.word	0x080401ac

08091408 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8091408:	b508      	push	{r3, lr}
 809140a:	4b02      	ldr	r3, [pc, #8]	; (8091414 <HAL_I2C_Read_Data+0xc>)
 809140c:	681b      	ldr	r3, [r3, #0]
 809140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8091410:	9301      	str	r3, [sp, #4]
 8091412:	bd08      	pop	{r3, pc}
 8091414:	080401ac 	.word	0x080401ac

08091418 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8091418:	b508      	push	{r3, lr}
 809141a:	4b02      	ldr	r3, [pc, #8]	; (8091424 <HAL_I2C_Peek_Data+0xc>)
 809141c:	681b      	ldr	r3, [r3, #0]
 809141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8091420:	9301      	str	r3, [sp, #4]
 8091422:	bd08      	pop	{r3, pc}
 8091424:	080401ac 	.word	0x080401ac

08091428 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8091428:	b508      	push	{r3, lr}
 809142a:	4b02      	ldr	r3, [pc, #8]	; (8091434 <HAL_I2C_Flush_Data+0xc>)
 809142c:	681b      	ldr	r3, [r3, #0]
 809142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8091430:	9301      	str	r3, [sp, #4]
 8091432:	bd08      	pop	{r3, pc}
 8091434:	080401ac 	.word	0x080401ac

08091438 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8091438:	b508      	push	{r3, lr}
 809143a:	4b02      	ldr	r3, [pc, #8]	; (8091444 <HAL_I2C_Is_Enabled+0xc>)
 809143c:	681b      	ldr	r3, [r3, #0]
 809143e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8091440:	9301      	str	r3, [sp, #4]
 8091442:	bd08      	pop	{r3, pc}
 8091444:	080401ac 	.word	0x080401ac

08091448 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8091448:	b508      	push	{r3, lr}
 809144a:	4b02      	ldr	r3, [pc, #8]	; (8091454 <HAL_I2C_Init+0xc>)
 809144c:	681b      	ldr	r3, [r3, #0]
 809144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8091450:	9301      	str	r3, [sp, #4]
 8091452:	bd08      	pop	{r3, pc}
 8091454:	080401ac 	.word	0x080401ac

08091458 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 8091458:	b508      	push	{r3, lr}
 809145a:	4b02      	ldr	r3, [pc, #8]	; (8091464 <socket_active_status+0xc>)
 809145c:	681b      	ldr	r3, [r3, #0]
 809145e:	681b      	ldr	r3, [r3, #0]
 8091460:	9301      	str	r3, [sp, #4]
 8091462:	bd08      	pop	{r3, pc}
 8091464:	08060024 	.word	0x08060024

08091468 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 8091468:	b508      	push	{r3, lr}
 809146a:	4b02      	ldr	r3, [pc, #8]	; (8091474 <socket_handle_valid+0xc>)
 809146c:	681b      	ldr	r3, [r3, #0]
 809146e:	685b      	ldr	r3, [r3, #4]
 8091470:	9301      	str	r3, [sp, #4]
 8091472:	bd08      	pop	{r3, pc}
 8091474:	08060024 	.word	0x08060024

08091478 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 8091478:	b508      	push	{r3, lr}
 809147a:	4b02      	ldr	r3, [pc, #8]	; (8091484 <socket_create+0xc>)
 809147c:	681b      	ldr	r3, [r3, #0]
 809147e:	689b      	ldr	r3, [r3, #8]
 8091480:	9301      	str	r3, [sp, #4]
 8091482:	bd08      	pop	{r3, pc}
 8091484:	08060024 	.word	0x08060024

08091488 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 8091488:	b508      	push	{r3, lr}
 809148a:	4b02      	ldr	r3, [pc, #8]	; (8091494 <socket_connect+0xc>)
 809148c:	681b      	ldr	r3, [r3, #0]
 809148e:	68db      	ldr	r3, [r3, #12]
 8091490:	9301      	str	r3, [sp, #4]
 8091492:	bd08      	pop	{r3, pc}
 8091494:	08060024 	.word	0x08060024

08091498 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 8091498:	b508      	push	{r3, lr}
 809149a:	4b02      	ldr	r3, [pc, #8]	; (80914a4 <socket_receive+0xc>)
 809149c:	681b      	ldr	r3, [r3, #0]
 809149e:	691b      	ldr	r3, [r3, #16]
 80914a0:	9301      	str	r3, [sp, #4]
 80914a2:	bd08      	pop	{r3, pc}
 80914a4:	08060024 	.word	0x08060024

080914a8 <socket_send>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
 80914a8:	b508      	push	{r3, lr}
 80914aa:	4b02      	ldr	r3, [pc, #8]	; (80914b4 <socket_send+0xc>)
 80914ac:	681b      	ldr	r3, [r3, #0]
 80914ae:	699b      	ldr	r3, [r3, #24]
 80914b0:	9301      	str	r3, [sp, #4]
 80914b2:	bd08      	pop	{r3, pc}
 80914b4:	08060024 	.word	0x08060024

080914b8 <socket_close>:
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80914b8:	b508      	push	{r3, lr}
 80914ba:	4b02      	ldr	r3, [pc, #8]	; (80914c4 <socket_close+0xc>)
 80914bc:	681b      	ldr	r3, [r3, #0]
 80914be:	6a1b      	ldr	r3, [r3, #32]
 80914c0:	9301      	str	r3, [sp, #4]
 80914c2:	bd08      	pop	{r3, pc}
 80914c4:	08060024 	.word	0x08060024

080914c8 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80914c8:	b508      	push	{r3, lr}
 80914ca:	4b02      	ldr	r3, [pc, #8]	; (80914d4 <socket_handle_invalid+0xc>)
 80914cc:	681b      	ldr	r3, [r3, #0]
 80914ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80914d0:	9301      	str	r3, [sp, #4]
 80914d2:	bd08      	pop	{r3, pc}
 80914d4:	08060024 	.word	0x08060024

080914d8 <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80914d8:	b508      	push	{r3, lr}
 80914da:	4b02      	ldr	r3, [pc, #8]	; (80914e4 <HAL_NET_SetNetWatchDog+0xc>)
 80914dc:	681b      	ldr	r3, [r3, #0]
 80914de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80914e0:	9301      	str	r3, [sp, #4]
 80914e2:	bd08      	pop	{r3, pc}
 80914e4:	08060020 	.word	0x08060020

080914e8 <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80914e8:	b508      	push	{r3, lr}
 80914ea:	4b02      	ldr	r3, [pc, #8]	; (80914f4 <inet_gethostbyname+0xc>)
 80914ec:	681b      	ldr	r3, [r3, #0]
 80914ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80914f0:	9301      	str	r3, [sp, #4]
 80914f2:	bd08      	pop	{r3, pc}
 80914f4:	08060020 	.word	0x08060020

080914f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80914f8:	b508      	push	{r3, lr}
 80914fa:	4b02      	ldr	r3, [pc, #8]	; (8091504 <HAL_USB_USART_Init+0xc>)
 80914fc:	681b      	ldr	r3, [r3, #0]
 80914fe:	681b      	ldr	r3, [r3, #0]
 8091500:	9301      	str	r3, [sp, #4]
 8091502:	bd08      	pop	{r3, pc}
 8091504:	0806001c 	.word	0x0806001c

08091508 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8091508:	b508      	push	{r3, lr}
 809150a:	4b02      	ldr	r3, [pc, #8]	; (8091514 <HAL_USB_USART_Begin+0xc>)
 809150c:	681b      	ldr	r3, [r3, #0]
 809150e:	685b      	ldr	r3, [r3, #4]
 8091510:	9301      	str	r3, [sp, #4]
 8091512:	bd08      	pop	{r3, pc}
 8091514:	0806001c 	.word	0x0806001c

08091518 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8091518:	b508      	push	{r3, lr}
 809151a:	4b02      	ldr	r3, [pc, #8]	; (8091524 <HAL_USB_USART_Available_Data+0xc>)
 809151c:	681b      	ldr	r3, [r3, #0]
 809151e:	691b      	ldr	r3, [r3, #16]
 8091520:	9301      	str	r3, [sp, #4]
 8091522:	bd08      	pop	{r3, pc}
 8091524:	0806001c 	.word	0x0806001c

08091528 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8091528:	b508      	push	{r3, lr}
 809152a:	4b02      	ldr	r3, [pc, #8]	; (8091534 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 809152c:	681b      	ldr	r3, [r3, #0]
 809152e:	695b      	ldr	r3, [r3, #20]
 8091530:	9301      	str	r3, [sp, #4]
 8091532:	bd08      	pop	{r3, pc}
 8091534:	0806001c 	.word	0x0806001c

08091538 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8091538:	b508      	push	{r3, lr}
 809153a:	4b02      	ldr	r3, [pc, #8]	; (8091544 <HAL_USB_USART_Receive_Data+0xc>)
 809153c:	681b      	ldr	r3, [r3, #0]
 809153e:	699b      	ldr	r3, [r3, #24]
 8091540:	9301      	str	r3, [sp, #4]
 8091542:	bd08      	pop	{r3, pc}
 8091544:	0806001c 	.word	0x0806001c

08091548 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8091548:	b508      	push	{r3, lr}
 809154a:	4b02      	ldr	r3, [pc, #8]	; (8091554 <HAL_USB_USART_Send_Data+0xc>)
 809154c:	681b      	ldr	r3, [r3, #0]
 809154e:	69db      	ldr	r3, [r3, #28]
 8091550:	9301      	str	r3, [sp, #4]
 8091552:	bd08      	pop	{r3, pc}
 8091554:	0806001c 	.word	0x0806001c

08091558 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8091558:	b508      	push	{r3, lr}
 809155a:	4b02      	ldr	r3, [pc, #8]	; (8091564 <HAL_USB_USART_Flush_Data+0xc>)
 809155c:	681b      	ldr	r3, [r3, #0]
 809155e:	6a1b      	ldr	r3, [r3, #32]
 8091560:	9301      	str	r3, [sp, #4]
 8091562:	bd08      	pop	{r3, pc}
 8091564:	0806001c 	.word	0x0806001c

08091568 <LED_SetSignalingColor>:
#include "dynalib.h"

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 8091568:	b508      	push	{r3, lr}
 809156a:	4b02      	ldr	r3, [pc, #8]	; (8091574 <LED_SetSignalingColor+0xc>)
 809156c:	681b      	ldr	r3, [r3, #0]
 809156e:	685b      	ldr	r3, [r3, #4]
 8091570:	9301      	str	r3, [sp, #4]
 8091572:	bd08      	pop	{r3, pc}
 8091574:	080201a0 	.word	0x080201a0

08091578 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 8091578:	b508      	push	{r3, lr}
 809157a:	4b02      	ldr	r3, [pc, #8]	; (8091584 <LED_Signaling_Start+0xc>)
 809157c:	681b      	ldr	r3, [r3, #0]
 809157e:	689b      	ldr	r3, [r3, #8]
 8091580:	9301      	str	r3, [sp, #4]
 8091582:	bd08      	pop	{r3, pc}
 8091584:	080201a0 	.word	0x080201a0

08091588 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 8091588:	b508      	push	{r3, lr}
 809158a:	4b02      	ldr	r3, [pc, #8]	; (8091594 <LED_Signaling_Stop+0xc>)
 809158c:	681b      	ldr	r3, [r3, #0]
 809158e:	68db      	ldr	r3, [r3, #12]
 8091590:	9301      	str	r3, [sp, #4]
 8091592:	bd08      	pop	{r3, pc}
 8091594:	080201a0 	.word	0x080201a0

08091598 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 8091598:	b508      	push	{r3, lr}
 809159a:	4b02      	ldr	r3, [pc, #8]	; (80915a4 <LED_RGB_IsOverRidden+0xc>)
 809159c:	681b      	ldr	r3, [r3, #0]
 809159e:	699b      	ldr	r3, [r3, #24]
 80915a0:	9301      	str	r3, [sp, #4]
 80915a2:	bd08      	pop	{r3, pc}
 80915a4:	080201a0 	.word	0x080201a0

080915a8 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80915a8:	b508      	push	{r3, lr}
 80915aa:	4b02      	ldr	r3, [pc, #8]	; (80915b4 <LED_On+0xc>)
 80915ac:	681b      	ldr	r3, [r3, #0]
 80915ae:	69db      	ldr	r3, [r3, #28]
 80915b0:	9301      	str	r3, [sp, #4]
 80915b2:	bd08      	pop	{r3, pc}
 80915b4:	080201a0 	.word	0x080201a0

080915b8 <system_mode>:
#include "system_led_signal.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80915b8:	b508      	push	{r3, lr}
 80915ba:	4b02      	ldr	r3, [pc, #8]	; (80915c4 <system_mode+0xc>)
 80915bc:	681b      	ldr	r3, [r3, #0]
 80915be:	681b      	ldr	r3, [r3, #0]
 80915c0:	9301      	str	r3, [sp, #4]
 80915c2:	bd08      	pop	{r3, pc}
 80915c4:	080401a4 	.word	0x080401a4

080915c8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80915c8:	b508      	push	{r3, lr}
 80915ca:	4b02      	ldr	r3, [pc, #8]	; (80915d4 <set_system_mode+0xc>)
 80915cc:	681b      	ldr	r3, [r3, #0]
 80915ce:	685b      	ldr	r3, [r3, #4]
 80915d0:	9301      	str	r3, [sp, #4]
 80915d2:	bd08      	pop	{r3, pc}
 80915d4:	080401a4 	.word	0x080401a4

080915d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80915d8:	b508      	push	{r3, lr}
 80915da:	4b02      	ldr	r3, [pc, #8]	; (80915e4 <system_delay_ms+0xc>)
 80915dc:	681b      	ldr	r3, [r3, #0]
 80915de:	695b      	ldr	r3, [r3, #20]
 80915e0:	9301      	str	r3, [sp, #4]
 80915e2:	bd08      	pop	{r3, pc}
 80915e4:	080401a4 	.word	0x080401a4

080915e8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80915e8:	b508      	push	{r3, lr}
 80915ea:	4b02      	ldr	r3, [pc, #8]	; (80915f4 <system_thread_set_state+0xc>)
 80915ec:	681b      	ldr	r3, [r3, #0]
 80915ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80915f0:	9301      	str	r3, [sp, #4]
 80915f2:	bd08      	pop	{r3, pc}
 80915f4:	080401a4 	.word	0x080401a4

080915f8 <system_internal>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
 80915f8:	b508      	push	{r3, lr}
 80915fa:	4b02      	ldr	r3, [pc, #8]	; (8091604 <system_internal+0xc>)
 80915fc:	681b      	ldr	r3, [r3, #0]
 80915fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8091600:	9301      	str	r3, [sp, #4]
 8091602:	bd08      	pop	{r3, pc}
 8091604:	080401a4 	.word	0x080401a4

08091608 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8091608:	b508      	push	{r3, lr}
 809160a:	4b02      	ldr	r3, [pc, #8]	; (8091614 <system_thread_get_state+0xc>)
 809160c:	681b      	ldr	r3, [r3, #0]
 809160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8091610:	9301      	str	r3, [sp, #4]
 8091612:	bd08      	pop	{r3, pc}
 8091614:	080401a4 	.word	0x080401a4

08091618 <system_set_usb_request_app_handler>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 8091618:	b508      	push	{r3, lr}
 809161a:	4b02      	ldr	r3, [pc, #8]	; (8091624 <system_set_usb_request_app_handler+0xc>)
 809161c:	681b      	ldr	r3, [r3, #0]
 809161e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8091620:	9301      	str	r3, [sp, #4]
 8091622:	bd08      	pop	{r3, pc}
 8091624:	080401a4 	.word	0x080401a4

08091628 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 8091628:	b508      	push	{r3, lr}
 809162a:	4b02      	ldr	r3, [pc, #8]	; (8091634 <system_set_usb_request_result+0xc>)
 809162c:	681b      	ldr	r3, [r3, #0]
 809162e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8091630:	9301      	str	r3, [sp, #4]
 8091632:	bd08      	pop	{r3, pc}
 8091634:	080401a4 	.word	0x080401a4

08091638 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8091638:	b508      	push	{r3, lr}
 809163a:	4b02      	ldr	r3, [pc, #8]	; (8091644 <network_ready+0xc>)
 809163c:	681b      	ldr	r3, [r3, #0]
 809163e:	691b      	ldr	r3, [r3, #16]
 8091640:	9301      	str	r3, [sp, #4]
 8091642:	bd08      	pop	{r3, pc}
 8091644:	080401c8 	.word	0x080401c8

08091648 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8091648:	b508      	push	{r3, lr}
 809164a:	4b02      	ldr	r3, [pc, #8]	; (8091654 <spark_process+0xc>)
 809164c:	681b      	ldr	r3, [r3, #0]
 809164e:	689b      	ldr	r3, [r3, #8]
 8091650:	9301      	str	r3, [sp, #4]
 8091652:	bd08      	pop	{r3, pc}
 8091654:	080401cc 	.word	0x080401cc

08091658 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8091658:	b508      	push	{r3, lr}
 809165a:	4b02      	ldr	r3, [pc, #8]	; (8091664 <spark_cloud_flag_connected+0xc>)
 809165c:	681b      	ldr	r3, [r3, #0]
 809165e:	695b      	ldr	r3, [r3, #20]
 8091660:	9301      	str	r3, [sp, #4]
 8091662:	bd08      	pop	{r3, pc}
 8091664:	080401cc 	.word	0x080401cc

08091668 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8091668:	b508      	push	{r3, lr}
 809166a:	4b02      	ldr	r3, [pc, #8]	; (8091674 <spark_sync_time_pending+0xc>)
 809166c:	681b      	ldr	r3, [r3, #0]
 809166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8091670:	9301      	str	r3, [sp, #4]
 8091672:	bd08      	pop	{r3, pc}
 8091674:	080401cc 	.word	0x080401cc

08091678 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8091678:	b508      	push	{r3, lr}
 809167a:	4b02      	ldr	r3, [pc, #8]	; (8091684 <malloc+0xc>)
 809167c:	681b      	ldr	r3, [r3, #0]
 809167e:	681b      	ldr	r3, [r3, #0]
 8091680:	9301      	str	r3, [sp, #4]
 8091682:	bd08      	pop	{r3, pc}
 8091684:	080401a0 	.word	0x080401a0

08091688 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8091688:	b508      	push	{r3, lr}
 809168a:	4b02      	ldr	r3, [pc, #8]	; (8091694 <free+0xc>)
 809168c:	681b      	ldr	r3, [r3, #0]
 809168e:	685b      	ldr	r3, [r3, #4]
 8091690:	9301      	str	r3, [sp, #4]
 8091692:	bd08      	pop	{r3, pc}
 8091694:	080401a0 	.word	0x080401a0

08091698 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8091698:	b508      	push	{r3, lr}
 809169a:	4b02      	ldr	r3, [pc, #8]	; (80916a4 <realloc+0xc>)
 809169c:	681b      	ldr	r3, [r3, #0]
 809169e:	689b      	ldr	r3, [r3, #8]
 80916a0:	9301      	str	r3, [sp, #4]
 80916a2:	bd08      	pop	{r3, pc}
 80916a4:	080401a0 	.word	0x080401a0

080916a8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80916a8:	b508      	push	{r3, lr}
 80916aa:	4b02      	ldr	r3, [pc, #8]	; (80916b4 <sprintf+0xc>)
 80916ac:	681b      	ldr	r3, [r3, #0]
 80916ae:	68db      	ldr	r3, [r3, #12]
 80916b0:	9301      	str	r3, [sp, #4]
 80916b2:	bd08      	pop	{r3, pc}
 80916b4:	080401a0 	.word	0x080401a0

080916b8 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80916b8:	b508      	push	{r3, lr}
 80916ba:	4b02      	ldr	r3, [pc, #8]	; (80916c4 <siprintf+0xc>)
 80916bc:	681b      	ldr	r3, [r3, #0]
 80916be:	691b      	ldr	r3, [r3, #16]
 80916c0:	9301      	str	r3, [sp, #4]
 80916c2:	bd08      	pop	{r3, pc}
 80916c4:	080401a0 	.word	0x080401a0

080916c8 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80916c8:	b508      	push	{r3, lr}
 80916ca:	4b02      	ldr	r3, [pc, #8]	; (80916d4 <siscanf+0xc>)
 80916cc:	681b      	ldr	r3, [r3, #0]
 80916ce:	699b      	ldr	r3, [r3, #24]
 80916d0:	9301      	str	r3, [sp, #4]
 80916d2:	bd08      	pop	{r3, pc}
 80916d4:	080401a0 	.word	0x080401a0

080916d8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80916d8:	b508      	push	{r3, lr}
 80916da:	4b02      	ldr	r3, [pc, #8]	; (80916e4 <snprintf+0xc>)
 80916dc:	681b      	ldr	r3, [r3, #0]
 80916de:	69db      	ldr	r3, [r3, #28]
 80916e0:	9301      	str	r3, [sp, #4]
 80916e2:	bd08      	pop	{r3, pc}
 80916e4:	080401a0 	.word	0x080401a0

080916e8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80916e8:	b508      	push	{r3, lr}
 80916ea:	4b02      	ldr	r3, [pc, #8]	; (80916f4 <vsnprintf+0xc>)
 80916ec:	681b      	ldr	r3, [r3, #0]
 80916ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80916f0:	9301      	str	r3, [sp, #4]
 80916f2:	bd08      	pop	{r3, pc}
 80916f4:	080401a0 	.word	0x080401a0

080916f8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80916f8:	b508      	push	{r3, lr}
 80916fa:	4b02      	ldr	r3, [pc, #8]	; (8091704 <abort+0xc>)
 80916fc:	681b      	ldr	r3, [r3, #0]
 80916fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8091700:	9301      	str	r3, [sp, #4]
 8091702:	bd08      	pop	{r3, pc}
 8091704:	080401a0 	.word	0x080401a0

08091708 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8091708:	b508      	push	{r3, lr}
 809170a:	4b02      	ldr	r3, [pc, #8]	; (8091714 <_malloc_r+0xc>)
 809170c:	681b      	ldr	r3, [r3, #0]
 809170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8091710:	9301      	str	r3, [sp, #4]
 8091712:	bd08      	pop	{r3, pc}
 8091714:	080401a0 	.word	0x080401a0

08091718 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8091718:	4770      	bx	lr

0809171a <_ZN8SPIClassD0Ev>:
 809171a:	b510      	push	{r4, lr}
 809171c:	4604      	mov	r4, r0
 809171e:	f7ee fcc0 	bl	80800a2 <_ZdlPv>
 8091722:	4620      	mov	r0, r4
 8091724:	bd10      	pop	{r4, pc}
	...

08091728 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8091728:	b570      	push	{r4, r5, r6, lr}
 809172a:	4604      	mov	r4, r0
 809172c:	460e      	mov	r6, r1
 809172e:	4b07      	ldr	r3, [pc, #28]	; (809174c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8091730:	2500      	movs	r5, #0
 8091732:	6003      	str	r3, [r0, #0]
 8091734:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8091738:	f7ff fdb6 	bl	80912a8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 809173c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 809173e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8091740:	f7ff fd3a 	bl	80911b8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8091744:	60a5      	str	r5, [r4, #8]
}
 8091746:	4620      	mov	r0, r4
 8091748:	bd70      	pop	{r4, r5, r6, pc}
 809174a:	bf00      	nop
 809174c:	08097560 	.word	0x08097560

08091750 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8091750:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8091754:	7900      	ldrb	r0, [r0, #4]
 8091756:	f7ff bd07 	b.w	8091168 <HAL_SPI_Begin>

0809175a <_ZN8SPIClass5beginEt>:
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 809175a:	292e      	cmp	r1, #46	; 0x2e
 809175c:	d802      	bhi.n	8091764 <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 809175e:	7900      	ldrb	r0, [r0, #4]
 8091760:	f7ff bd02 	b.w	8091168 <HAL_SPI_Begin>
 8091764:	4770      	bx	lr

08091766 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 8091766:	7900      	ldrb	r0, [r0, #4]
 8091768:	f7ff bd06 	b.w	8091178 <HAL_SPI_Set_Bit_Order>

0809176c <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 809176c:	7900      	ldrb	r0, [r0, #4]
 809176e:	f7ff bd0b 	b.w	8091188 <HAL_SPI_Set_Data_Mode>
	...

08091774 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8091774:	4a05      	ldr	r2, [pc, #20]	; (809178c <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 8091776:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8091778:	5c99      	ldrb	r1, [r3, r2]
 809177a:	4281      	cmp	r1, r0
 809177c:	d002      	beq.n	8091784 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 809177e:	3301      	adds	r3, #1
 8091780:	2b08      	cmp	r3, #8
 8091782:	d1f9      	bne.n	8091778 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8091784:	1c58      	adds	r0, r3, #1
}
 8091786:	b2c0      	uxtb	r0, r0
 8091788:	4770      	bx	lr
 809178a:	bf00      	nop
 809178c:	08097568 	.word	0x08097568

08091790 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8091790:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8091792:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8091794:	6018      	str	r0, [r3, #0]
 8091796:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8091798:	6818      	ldr	r0, [r3, #0]
 809179a:	b2e5      	uxtb	r5, r4
 809179c:	4288      	cmp	r0, r1
 809179e:	d906      	bls.n	80917ae <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80917a0:	3401      	adds	r4, #1
 80917a2:	2c08      	cmp	r4, #8
 80917a4:	d002      	beq.n	80917ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80917a6:	0840      	lsrs	r0, r0, #1
 80917a8:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80917aa:	e7f5      	b.n	8091798 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80917ac:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80917ae:	4b02      	ldr	r3, [pc, #8]	; (80917b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80917b0:	5d5b      	ldrb	r3, [r3, r5]
 80917b2:	7013      	strb	r3, [r2, #0]
 80917b4:	bd30      	pop	{r4, r5, pc}
 80917b6:	bf00      	nop
 80917b8:	08097568 	.word	0x08097568

080917bc <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80917bc:	b570      	push	{r4, r5, r6, lr}
 80917be:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80917c0:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80917c4:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80917c6:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80917c8:	2214      	movs	r2, #20
 80917ca:	2100      	movs	r1, #0
 80917cc:	a803      	add	r0, sp, #12
 80917ce:	f001 fee6 	bl	809359e <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80917d2:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80917d4:	a903      	add	r1, sp, #12
 80917d6:	4630      	mov	r0, r6
 80917d8:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80917da:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80917de:	f7ff fcfb 	bl	80911d8 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80917e2:	ab02      	add	r3, sp, #8
 80917e4:	f10d 0207 	add.w	r2, sp, #7
 80917e8:	4629      	mov	r1, r5
 80917ea:	9804      	ldr	r0, [sp, #16]
 80917ec:	f7ff ffd0 	bl	8091790 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80917f0:	7920      	ldrb	r0, [r4, #4]
 80917f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80917f6:	f7ff fccf 	bl	8091198 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80917fa:	9802      	ldr	r0, [sp, #8]
 80917fc:	b008      	add	sp, #32
 80917fe:	bd70      	pop	{r4, r5, r6, pc}

08091800 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8091800:	b538      	push	{r3, r4, r5, lr}
 8091802:	4604      	mov	r4, r0
    if (dividerReference)
 8091804:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8091806:	4608      	mov	r0, r1
    if (dividerReference)
 8091808:	b14d      	cbz	r5, 809181e <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 809180a:	f7ff ffb3 	bl	8091774 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 809180e:	2201      	movs	r2, #1
 8091810:	fa25 f100 	lsr.w	r1, r5, r0
 8091814:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 8091816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 809181a:	f7ff bfcf 	b.w	80917bc <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 809181e:	7920      	ldrb	r0, [r4, #4]
    }
}
 8091820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8091824:	f7ff bcb8 	b.w	8091198 <HAL_SPI_Set_Clock_Divider>

08091828 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8091828:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 809182a:	7900      	ldrb	r0, [r0, #4]
 809182c:	f7ff fcbc 	bl	80911a8 <HAL_SPI_Send_Receive_Data>
}
 8091830:	b2c0      	uxtb	r0, r0
 8091832:	bd08      	pop	{r3, pc}

08091834 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8091834:	b530      	push	{r4, r5, lr}
 8091836:	b087      	sub	sp, #28
 8091838:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 809183a:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 809183c:	7900      	ldrb	r0, [r0, #4]
 809183e:	9500      	str	r5, [sp, #0]
 8091840:	f7ff fcd2 	bl	80911e8 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 8091844:	b93d      	cbnz	r5, 8091856 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8091846:	a902      	add	r1, sp, #8
 8091848:	7920      	ldrb	r0, [r4, #4]
 809184a:	f7ff fcd5 	bl	80911f8 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 809184e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8091852:	07db      	lsls	r3, r3, #31
 8091854:	d4f7      	bmi.n	8091846 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 8091856:	b007      	add	sp, #28
 8091858:	bd30      	pop	{r4, r5, pc}

0809185a <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 809185a:	7900      	ldrb	r0, [r0, #4]
 809185c:	f7ff bcb4 	b.w	80911c8 <HAL_SPI_Is_Enabled>

08091860 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8091860:	2000      	movs	r0, #0
 8091862:	f7ff beb1 	b.w	80915c8 <set_system_mode>

08091866 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
void str_reverse(char* buffer){
 8091866:	b510      	push	{r4, lr}
 8091868:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 809186a:	f001 fec0 	bl	80935ee <strlen>
 809186e:	3801      	subs	r0, #1
 8091870:	1823      	adds	r3, r4, r0
 8091872:	4620      	mov	r0, r4
	while(i<j){
 8091874:	4298      	cmp	r0, r3
 8091876:	d206      	bcs.n	8091886 <_Z11str_reversePc+0x20>
		c = *i;
 8091878:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 809187a:	7819      	ldrb	r1, [r3, #0]
 809187c:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8091880:	f803 2901 	strb.w	r2, [r3], #-1
void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8091884:	e7f6      	b.n	8091874 <_Z11str_reversePc+0xe>
 8091886:	bd10      	pop	{r4, pc}

08091888 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8091888:	b570      	push	{r4, r5, r6, lr}
 809188a:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 809188c:	1e91      	subs	r1, r2, #2
 809188e:	2922      	cmp	r1, #34	; 0x22
 8091890:	d820      	bhi.n	80918d4 <ultoa+0x4c>
 8091892:	4625      	mov	r5, r4
 8091894:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8091896:	b910      	cbnz	r0, 809189e <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8091898:	4423      	add	r3, r4
            *ptr++ = '0';
 809189a:	2230      	movs	r2, #48	; 0x30
 809189c:	e00e      	b.n	80918bc <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 809189e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80918a2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80918a6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80918a8:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80918aa:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80918ae:	bf94      	ite	ls
 80918b0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80918b2:	3157      	addhi	r1, #87	; 0x57
 80918b4:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80918b8:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80918ba:	e7eb      	b.n	8091894 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80918bc:	4299      	cmp	r1, r3
 80918be:	d202      	bcs.n	80918c6 <ultoa+0x3e>
            *ptr++ = '0';
 80918c0:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80918c4:	e7fa      	b.n	80918bc <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80918c6:	2300      	movs	r3, #0
	str_reverse(buffer);
 80918c8:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80918ca:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80918cc:	f7ff ffcb 	bl	8091866 <_Z11str_reversePc>
	return buffer;
 80918d0:	4620      	mov	r0, r4
 80918d2:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80918d4:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80918d6:	bd70      	pop	{r4, r5, r6, pc}

080918d8 <itoa>:

char* itoa(int a, char* buffer, int radix){
 80918d8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80918da:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

char* itoa(int a, char* buffer, int radix){
 80918dc:	460c      	mov	r4, r1
 80918de:	4615      	mov	r5, r2
	if(a<0){
 80918e0:	da0b      	bge.n	80918fa <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80918e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80918e6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80918ea:	bf14      	ite	ne
 80918ec:	4258      	negne	r0, r3
 80918ee:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80918f0:	2301      	movs	r3, #1
	return buffer;
}

char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80918f2:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80918f4:	462a      	mov	r2, r5
 80918f6:	4419      	add	r1, r3
 80918f8:	e000      	b.n	80918fc <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80918fa:	2301      	movs	r3, #1
 80918fc:	f7ff ffc4 	bl	8091888 <ultoa>
	}
	return buffer;
}
 8091900:	4620      	mov	r0, r4
 8091902:	bd38      	pop	{r3, r4, r5, pc}

08091904 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8091904:	b513      	push	{r0, r1, r4, lr}
 8091906:	ab02      	add	r3, sp, #8
        return write(&b, 1);
 8091908:	6802      	ldr	r2, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 809190a:	f803 1d01 	strb.w	r1, [r3, #-1]!
        return write(&b, 1);
 809190e:	68d4      	ldr	r4, [r2, #12]
 8091910:	4619      	mov	r1, r3
 8091912:	2201      	movs	r2, #1
 8091914:	47a0      	blx	r4
}
 8091916:	b002      	add	sp, #8
 8091918:	bd10      	pop	{r4, pc}

0809191a <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 809191a:	4770      	bx	lr

0809191c <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 809191c:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 809191e:	4903      	ldr	r1, [pc, #12]	; (809192c <_ZN9TCPClient8remoteIPEv+0x10>)
 8091920:	6001      	str	r1, [r0, #0]
 8091922:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8091926:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 8091928:	4770      	bx	lr
 809192a:	bf00      	nop
 809192c:	080976d4 	.word	0x080976d4

08091930 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8091930:	4770      	bx	lr

08091932 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 8091932:	2000      	movs	r0, #0
 8091934:	4770      	bx	lr

08091936 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8091936:	b510      	push	{r4, lr}
 8091938:	4604      	mov	r4, r0
 809193a:	f7ee fbb2 	bl	80800a2 <_ZdlPv>
 809193e:	4620      	mov	r0, r4
 8091940:	bd10      	pop	{r4, pc}

08091942 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8091942:	f7ee bbae 	b.w	80800a2 <_ZdlPv>
	...

08091948 <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8091948:	b5f0      	push	{r4, r5, r6, r7, lr}
 809194a:	461d      	mov	r5, r3
    stop();
 809194c:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 809194e:	b087      	sub	sp, #28
    stop();
 8091950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8091952:	4604      	mov	r4, r0
 8091954:	460e      	mov	r6, r1
 8091956:	4617      	mov	r7, r2
    stop();
 8091958:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 809195a:	4b11      	ldr	r3, [pc, #68]	; (80919a0 <_ZN9TCPClient7connectEPKctm+0x58>)
 809195c:	6818      	ldr	r0, [r3, #0]
 809195e:	6803      	ldr	r3, [r0, #0]
 8091960:	681b      	ldr	r3, [r3, #0]
 8091962:	4798      	blx	r3
 8091964:	b1c8      	cbz	r0, 809199a <_ZN9TCPClient7connectEPKctm+0x52>
      {
        IPAddress ip_addr;
 8091966:	a802      	add	r0, sp, #8
 8091968:	f000 fcca 	bl	8092300 <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 809196c:	4630      	mov	r0, r6
 809196e:	f001 fe3e 	bl	80935ee <strlen>
 8091972:	2300      	movs	r3, #0
 8091974:	9300      	str	r3, [sp, #0]
 8091976:	b281      	uxth	r1, r0
 8091978:	462b      	mov	r3, r5
 809197a:	aa03      	add	r2, sp, #12
 809197c:	4630      	mov	r0, r6
 809197e:	f7ff fdb3 	bl	80914e8 <inet_gethostbyname>
 8091982:	b950      	cbnz	r0, 809199a <_ZN9TCPClient7connectEPKctm+0x52>
        {
                return connect(ip_addr, port, nif);
 8091984:	6823      	ldr	r3, [r4, #0]
 8091986:	463a      	mov	r2, r7
 8091988:	6a1e      	ldr	r6, [r3, #32]
 809198a:	4b06      	ldr	r3, [pc, #24]	; (80919a4 <_ZN9TCPClient7connectEPKctm+0x5c>)
 809198c:	a904      	add	r1, sp, #16
 809198e:	9304      	str	r3, [sp, #16]
 8091990:	9b03      	ldr	r3, [sp, #12]
 8091992:	4620      	mov	r0, r4
 8091994:	9305      	str	r3, [sp, #20]
 8091996:	462b      	mov	r3, r5
 8091998:	47b0      	blx	r6
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 809199a:	b007      	add	sp, #28
 809199c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 809199e:	bf00      	nop
 80919a0:	0809771c 	.word	0x0809771c
 80919a4:	080976d4 	.word	0x080976d4

080919a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80919a8:	b510      	push	{r4, lr}
 80919aa:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80919ac:	6803      	ldr	r3, [r0, #0]
 80919ae:	689b      	ldr	r3, [r3, #8]
 80919b0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80919b2:	68a3      	ldr	r3, [r4, #8]
 80919b4:	3b01      	subs	r3, #1
 80919b6:	60a3      	str	r3, [r4, #8]
 80919b8:	b92b      	cbnz	r3, 80919c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32+0x1e>
            _M_destroy();
 80919ba:	6823      	ldr	r3, [r4, #0]
 80919bc:	4620      	mov	r0, r4
        }
    }
 80919be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80919c2:	68db      	ldr	r3, [r3, #12]
 80919c4:	4718      	bx	r3
 80919c6:	bd10      	pop	{r4, pc}

080919c8 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80919c8:	b510      	push	{r4, lr}
 80919ca:	6943      	ldr	r3, [r0, #20]
 80919cc:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80919ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80919d2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80919d6:	429a      	cmp	r2, r3
 80919d8:	d005      	beq.n	80919e6 <_ZN9TCPClient4peekEv+0x1e>
 80919da:	6962      	ldr	r2, [r4, #20]
 80919dc:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80919e0:	4413      	add	r3, r2
 80919e2:	7918      	ldrb	r0, [r3, #4]
 80919e4:	bd10      	pop	{r4, pc}
 80919e6:	6803      	ldr	r3, [r0, #0]
 80919e8:	691b      	ldr	r3, [r3, #16]
 80919ea:	4798      	blx	r3
 80919ec:	2800      	cmp	r0, #0
 80919ee:	d1f4      	bne.n	80919da <_ZN9TCPClient4peekEv+0x12>
 80919f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80919f4:	bd10      	pop	{r4, pc}

080919f6 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80919f6:	b510      	push	{r4, lr}
 80919f8:	6943      	ldr	r3, [r0, #20]
 80919fa:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80919fc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8091a00:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8091a04:	429a      	cmp	r2, r3
 8091a06:	d008      	beq.n	8091a1a <_ZN9TCPClient4readEv+0x24>
 8091a08:	6962      	ldr	r2, [r4, #20]
 8091a0a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8091a0e:	1c59      	adds	r1, r3, #1
 8091a10:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8091a14:	4413      	add	r3, r2
 8091a16:	7918      	ldrb	r0, [r3, #4]
 8091a18:	bd10      	pop	{r4, pc}
 8091a1a:	6803      	ldr	r3, [r0, #0]
 8091a1c:	691b      	ldr	r3, [r3, #16]
 8091a1e:	4798      	blx	r3
 8091a20:	2800      	cmp	r0, #0
 8091a22:	d1f1      	bne.n	8091a08 <_ZN9TCPClient4readEv+0x12>
 8091a24:	f04f 30ff 	mov.w	r0, #4294967295
}
 8091a28:	bd10      	pop	{r4, pc}

08091a2a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 8091a2a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8091a2c:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 8091a2e:	6820      	ldr	r0, [r4, #0]
 8091a30:	f7ff fd1a 	bl	8091468 <socket_handle_valid>
 8091a34:	b110      	cbz	r0, 8091a3c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 8091a36:	6820      	ldr	r0, [r4, #0]
 8091a38:	f7ff fd3e 	bl	80914b8 <socket_close>
 8091a3c:	4620      	mov	r0, r4
 8091a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8091a42:	f7ee bb2e 	b.w	80800a2 <_ZdlPv>

08091a46 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8091a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8091a48:	6943      	ldr	r3, [r0, #20]
 8091a4a:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 8091a4c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8091a50:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8091a54:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 8091a56:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8091a58:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 8091a5a:	d106      	bne.n	8091a6a <_ZN9TCPClient4readEPhj+0x24>
 8091a5c:	6803      	ldr	r3, [r0, #0]
 8091a5e:	691b      	ldr	r3, [r3, #16]
 8091a60:	4798      	blx	r3
 8091a62:	b910      	cbnz	r0, 8091a6a <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 8091a64:	f04f 34ff 	mov.w	r4, #4294967295
 8091a68:	e014      	b.n	8091a94 <_ZN9TCPClient4readEPhj+0x4e>
 8091a6a:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8091a6c:	4630      	mov	r0, r6
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8091a6e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 8091a72:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8091a76:	4419      	add	r1, r3
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8091a78:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 8091a7a:	42bc      	cmp	r4, r7
 8091a7c:	bf28      	it	cs
 8091a7e:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8091a80:	3104      	adds	r1, #4
 8091a82:	4622      	mov	r2, r4
 8091a84:	f001 fd65 	bl	8093552 <memcpy>
 8091a88:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 8091a8a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8091a8e:	4423      	add	r3, r4
 8091a90:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 8091a94:	4620      	mov	r0, r4
 8091a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08091a98 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 8091a98:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 8091a9a:	2300      	movs	r3, #0
 8091a9c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 8091aa0:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 8091aa2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 8091aa6:	4770      	bx	lr

08091aa8 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 8091aa8:	b538      	push	{r3, r4, r5, lr}
 8091aaa:	6942      	ldr	r2, [r0, #20]
 8091aac:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 8091aae:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8091ab2:	b11b      	cbz	r3, 8091abc <_ZN9TCPClient9availableEv+0x14>
 8091ab4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8091ab8:	429a      	cmp	r2, r3
 8091aba:	d00b      	beq.n	8091ad4 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 8091abc:	4b18      	ldr	r3, [pc, #96]	; (8091b20 <_ZN9TCPClient9availableEv+0x78>)
 8091abe:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8091ac0:	6803      	ldr	r3, [r0, #0]
 8091ac2:	681b      	ldr	r3, [r3, #0]
 8091ac4:	4798      	blx	r3
 8091ac6:	b318      	cbz	r0, 8091b10 <_ZN9TCPClient9availableEv+0x68>
 8091ac8:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8091aca:	6818      	ldr	r0, [r3, #0]
 8091acc:	f7ff fccc 	bl	8091468 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8091ad0:	b918      	cbnz	r0, 8091ada <_ZN9TCPClient9availableEv+0x32>
 8091ad2:	e01d      	b.n	8091b10 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 8091ad4:	f7ff ffe0 	bl	8091a98 <_ZN9TCPClient12flush_bufferEv>
 8091ad8:	e7f0      	b.n	8091abc <_ZN9TCPClient9availableEv+0x14>
 8091ada:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 8091adc:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 8091ae0:	297f      	cmp	r1, #127	; 0x7f
 8091ae2:	d815      	bhi.n	8091b10 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 8091ae4:	1d05      	adds	r5, r0, #4
 8091ae6:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 8091aea:	2300      	movs	r3, #0
 8091aec:	4429      	add	r1, r5
 8091aee:	6800      	ldr	r0, [r0, #0]
 8091af0:	f7ff fcd2 	bl	8091498 <socket_receive>
            if (ret > 0)
 8091af4:	2800      	cmp	r0, #0
 8091af6:	dd0b      	ble.n	8091b10 <_ZN9TCPClient9availableEv+0x68>
 8091af8:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 8091afa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8091afe:	b90a      	cbnz	r2, 8091b04 <_ZN9TCPClient9availableEv+0x5c>
 8091b00:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8091b04:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 8091b06:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8091b0a:	4418      	add	r0, r3
 8091b0c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 8091b10:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 8091b12:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8091b16:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 8091b1a:	1a18      	subs	r0, r3, r0
}
 8091b1c:	bd38      	pop	{r3, r4, r5, pc}
 8091b1e:	bf00      	nop
 8091b20:	0809771c 	.word	0x0809771c

08091b24 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 8091b24:	b538      	push	{r3, r4, r5, lr}
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 8091b26:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 8091b28:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8091b2a:	6818      	ldr	r0, [r3, #0]
 8091b2c:	f7ff fc9c 	bl	8091468 <socket_handle_valid>

void TCPClient::stop()
{
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 8091b30:	b118      	cbz	r0, 8091b3a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 8091b32:	6963      	ldr	r3, [r4, #20]
 8091b34:	6818      	ldr	r0, [r3, #0]
 8091b36:	f7ff fcbf 	bl	80914b8 <socket_close>
 8091b3a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 8091b3c:	f7ff fcc4 	bl	80914c8 <socket_handle_invalid>
 8091b40:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8091b42:	6963      	ldr	r3, [r4, #20]
 8091b44:	2200      	movs	r2, #0
 8091b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 8091b4a:	4620      	mov	r0, r4
}
 8091b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 8091b50:	f7ff bfa2 	b.w	8091a98 <_ZN9TCPClient12flush_bufferEv>

08091b54 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8091b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8091b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8091b5a:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 8091b5c:	4b17      	ldr	r3, [pc, #92]	; (8091bbc <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8091b5e:	2600      	movs	r6, #0
 8091b60:	6046      	str	r6, [r0, #4]
 8091b62:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 8091b64:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 8091b66:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8091b68:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8091b6a:	2090      	movs	r0, #144	; 0x90
 8091b6c:	460f      	mov	r7, r1
 8091b6e:	f7ee fa94 	bl	808009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8091b72:	4605      	mov	r5, r0
 8091b74:	b138      	cbz	r0, 8091b86 <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 8091b76:	6007      	str	r7, [r0, #0]
 8091b78:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 8091b7c:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 8091b80:	3088      	adds	r0, #136	; 0x88
 8091b82:	f000 fbbd 	bl	8092300 <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8091b86:	2014      	movs	r0, #20
 8091b88:	f7ee fa87 	bl	808009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8091b8c:	4603      	mov	r3, r0
 8091b8e:	b128      	cbz	r0, 8091b9c <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8091b90:	2201      	movs	r2, #1
 8091b92:	6042      	str	r2, [r0, #4]
 8091b94:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8091b96:	4a0a      	ldr	r2, [pc, #40]	; (8091bc0 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 8091b98:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8091b9a:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8091b9c:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 8091b9e:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8091ba0:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8091ba2:	b128      	cbz	r0, 8091bb0 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8091ba4:	6843      	ldr	r3, [r0, #4]
 8091ba6:	3b01      	subs	r3, #1
 8091ba8:	6043      	str	r3, [r0, #4]
 8091baa:	b90b      	cbnz	r3, 8091bb0 <_ZN9TCPClientC1Em+0x5c>
 8091bac:	f7ff fefc 	bl	80919a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 8091bb0:	4620      	mov	r0, r4
 8091bb2:	f7ff ff71 	bl	8091a98 <_ZN9TCPClient12flush_bufferEv>
}
 8091bb6:	4620      	mov	r0, r4
 8091bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8091bba:	bf00      	nop
 8091bbc:	08097594 	.word	0x08097594
 8091bc0:	08097578 	.word	0x08097578

08091bc4 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 8091bc4:	b510      	push	{r4, lr}
 8091bc6:	4604      	mov	r4, r0
 8091bc8:	f7ff fc7e 	bl	80914c8 <socket_handle_invalid>
 8091bcc:	4601      	mov	r1, r0
 8091bce:	4620      	mov	r0, r4
 8091bd0:	f7ff ffc0 	bl	8091b54 <_ZN9TCPClientC1Em>
{
}
 8091bd4:	4620      	mov	r0, r4
 8091bd6:	bd10      	pop	{r4, pc}

08091bd8 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8091bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8091bdc:	4698      	mov	r8, r3
    stop();
 8091bde:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8091be0:	b086      	sub	sp, #24
    stop();
 8091be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8091be4:	4604      	mov	r4, r0
 8091be6:	460d      	mov	r5, r1
 8091be8:	4616      	mov	r6, r2
    stop();
 8091bea:	4798      	blx	r3
 8091bec:	4b25      	ldr	r3, [pc, #148]	; (8091c84 <_ZN9TCPClient7connectE9IPAddresstm+0xac>)
 8091bee:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 8091bf0:	6803      	ldr	r3, [r0, #0]
 8091bf2:	681b      	ldr	r3, [r3, #0]
 8091bf4:	4798      	blx	r3
 8091bf6:	2800      	cmp	r0, #0
 8091bf8:	d040      	beq.n	8091c7c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8091bfa:	4633      	mov	r3, r6
 8091bfc:	f8cd 8000 	str.w	r8, [sp]
 8091c00:	2206      	movs	r2, #6
 8091c02:	2101      	movs	r1, #1
 8091c04:	2002      	movs	r0, #2
 8091c06:	6967      	ldr	r7, [r4, #20]
 8091c08:	f7ff fc36 	bl	8091478 <socket_create>
 8091c0c:	6038      	str	r0, [r7, #0]
          DEBUG("socket=%d",d_->sock);

          if (socket_handle_valid(d_->sock))
 8091c0e:	6963      	ldr	r3, [r4, #20]
 8091c10:	6818      	ldr	r0, [r3, #0]
 8091c12:	f7ff fc29 	bl	8091468 <socket_handle_valid>
 8091c16:	b388      	cbz	r0, 8091c7c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
          {
            flush_buffer();
 8091c18:	4620      	mov	r0, r4
 8091c1a:	f7ff ff3d 	bl	8091a98 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 8091c1e:	2302      	movs	r3, #2
 8091c20:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8091c24:	0a33      	lsrs	r3, r6, #8
 8091c26:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8091c2a:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8091c2c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8091c30:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 8091c34:	79ab      	ldrb	r3, [r5, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 8091c36:	f88d 600b 	strb.w	r6, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 8091c3a:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 8091c3e:	796b      	ldrb	r3, [r5, #5]
 8091c40:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 8091c44:	792b      	ldrb	r3, [r5, #4]
 8091c46:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8091c4a:	f7ff fc45 	bl	80914d8 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8091c4e:	6963      	ldr	r3, [r4, #20]
 8091c50:	2210      	movs	r2, #16
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8091c52:	4607      	mov	r7, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8091c54:	a902      	add	r1, sp, #8
 8091c56:	6818      	ldr	r0, [r3, #0]
 8091c58:	f7ff fc16 	bl	8091488 <socket_connect>
 8091c5c:	4606      	mov	r6, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 8091c5e:	4638      	mov	r0, r7
 8091c60:	f7ff fc3a 	bl	80914d8 <HAL_NET_SetNetWatchDog>
 8091c64:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8091c66:	686a      	ldr	r2, [r5, #4]
 8091c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 8091c6c:	b12e      	cbz	r6, 8091c7a <_ZN9TCPClient7connectE9IPAddresstm+0xa2>
            {
                stop();
 8091c6e:	6823      	ldr	r3, [r4, #0]
 8091c70:	4620      	mov	r0, r4
 8091c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8091c74:	4798      	blx	r3
 8091c76:	2000      	movs	r0, #0
 8091c78:	e000      	b.n	8091c7c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 8091c7a:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 8091c7c:	b006      	add	sp, #24
 8091c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8091c82:	bf00      	nop
 8091c84:	0809771c 	.word	0x0809771c

08091c88 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8091c88:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8091c8a:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8091c8c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8091c8e:	6818      	ldr	r0, [r3, #0]
 8091c90:	f7ff fbea 	bl	8091468 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8091c94:	b908      	cbnz	r0, 8091c9a <_ZN9TCPClient6statusEv+0x12>
 8091c96:	2000      	movs	r0, #0
 8091c98:	bd10      	pop	{r4, pc}
 8091c9a:	4b07      	ldr	r3, [pc, #28]	; (8091cb8 <_ZN9TCPClient6statusEv+0x30>)
 8091c9c:	6818      	ldr	r0, [r3, #0]
 8091c9e:	6803      	ldr	r3, [r0, #0]
 8091ca0:	681b      	ldr	r3, [r3, #0]
 8091ca2:	4798      	blx	r3
 8091ca4:	2800      	cmp	r0, #0
 8091ca6:	d0f6      	beq.n	8091c96 <_ZN9TCPClient6statusEv+0xe>
 8091ca8:	6963      	ldr	r3, [r4, #20]
 8091caa:	6818      	ldr	r0, [r3, #0]
 8091cac:	f7ff fbd4 	bl	8091458 <socket_active_status>
 8091cb0:	fab0 f080 	clz	r0, r0
 8091cb4:	0940      	lsrs	r0, r0, #5
}
 8091cb6:	bd10      	pop	{r4, pc}
 8091cb8:	0809771c 	.word	0x0809771c

08091cbc <_ZN9TCPClient5writeEPKhj>:
{
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 8091cbc:	b570      	push	{r4, r5, r6, lr}
 8091cbe:	4606      	mov	r6, r0
 8091cc0:	460c      	mov	r4, r1
 8091cc2:	4615      	mov	r5, r2
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 8091cc4:	f7ff ffe0 	bl	8091c88 <_ZN9TCPClient6statusEv>
 8091cc8:	b138      	cbz	r0, 8091cda <_ZN9TCPClient5writeEPKhj+0x1e>
 8091cca:	6973      	ldr	r3, [r6, #20]
 8091ccc:	462a      	mov	r2, r5
 8091cce:	4621      	mov	r1, r4
}
 8091cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 8091cd4:	6818      	ldr	r0, [r3, #0]
 8091cd6:	f7ff bbe7 	b.w	80914a8 <socket_send>
}
 8091cda:	f04f 30ff 	mov.w	r0, #4294967295
 8091cde:	bd70      	pop	{r4, r5, r6, pc}

08091ce0 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 8091ce0:	b538      	push	{r3, r4, r5, lr}
 8091ce2:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 8091ce4:	f7ff ffd0 	bl	8091c88 <_ZN9TCPClient6statusEv>
 8091ce8:	bb00      	cbnz	r0, 8091d2c <_ZN9TCPClient9connectedEv+0x4c>
 8091cea:	6963      	ldr	r3, [r4, #20]
 8091cec:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8091cf0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8091cf4:	4291      	cmp	r1, r2
 8091cf6:	d119      	bne.n	8091d2c <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8091cf8:	6818      	ldr	r0, [r3, #0]
 8091cfa:	f7ff fbb5 	bl	8091468 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 8091cfe:	b128      	cbz	r0, 8091d0c <_ZN9TCPClient9connectedEv+0x2c>
 8091d00:	6963      	ldr	r3, [r4, #20]
 8091d02:	6818      	ldr	r0, [r3, #0]
 8091d04:	f7ff fba8 	bl	8091458 <socket_active_status>
 8091d08:	2801      	cmp	r0, #1
 8091d0a:	d001      	beq.n	8091d10 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 8091d0c:	2500      	movs	r5, #0
 8091d0e:	e00e      	b.n	8091d2e <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 8091d10:	6823      	ldr	r3, [r4, #0]
 8091d12:	4620      	mov	r0, r4
 8091d14:	691b      	ldr	r3, [r3, #16]
 8091d16:	4798      	blx	r3
 8091d18:	2800      	cmp	r0, #0
 8091d1a:	bf14      	ite	ne
 8091d1c:	2501      	movne	r5, #1
 8091d1e:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 8091d20:	d105      	bne.n	8091d2e <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 8091d22:	6823      	ldr	r3, [r4, #0]
 8091d24:	4620      	mov	r0, r4
 8091d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8091d28:	4798      	blx	r3
 8091d2a:	e000      	b.n	8091d2e <_ZN9TCPClient9connectedEv+0x4e>
 8091d2c:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 8091d2e:	4628      	mov	r0, r5
 8091d30:	bd38      	pop	{r3, r4, r5, pc}

08091d32 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 8091d32:	b508      	push	{r3, lr}
   return (status()!=0);
 8091d34:	f7ff ffa8 	bl	8091c88 <_ZN9TCPClient6statusEv>
}
 8091d38:	3000      	adds	r0, #0
 8091d3a:	bf18      	it	ne
 8091d3c:	2001      	movne	r0, #1
 8091d3e:	bd08      	pop	{r3, pc}

08091d40 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8091d40:	b510      	push	{r4, lr}
 8091d42:	4604      	mov	r4, r0
{
	free(buffer);
 8091d44:	6800      	ldr	r0, [r0, #0]
 8091d46:	f7ff fc9f 	bl	8091688 <free>
}
 8091d4a:	4620      	mov	r0, r4
 8091d4c:	bd10      	pop	{r4, pc}

08091d4e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8091d4e:	b510      	push	{r4, lr}
 8091d50:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8091d52:	6800      	ldr	r0, [r0, #0]
 8091d54:	b108      	cbz	r0, 8091d5a <_ZN6String10invalidateEv+0xc>
 8091d56:	f7ff fc97 	bl	8091688 <free>
	buffer = NULL;
 8091d5a:	2300      	movs	r3, #0
 8091d5c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8091d5e:	60a3      	str	r3, [r4, #8]
 8091d60:	6063      	str	r3, [r4, #4]
 8091d62:	bd10      	pop	{r4, pc}

08091d64 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8091d64:	b538      	push	{r3, r4, r5, lr}
 8091d66:	4604      	mov	r4, r0
 8091d68:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8091d6a:	6800      	ldr	r0, [r0, #0]
 8091d6c:	3101      	adds	r1, #1
 8091d6e:	f7ff fc93 	bl	8091698 <realloc>
	if (newbuffer) {
 8091d72:	b110      	cbz	r0, 8091d7a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8091d74:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8091d78:	2001      	movs	r0, #1
	}
	return 0;
}
 8091d7a:	bd38      	pop	{r3, r4, r5, pc}

08091d7c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8091d7c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8091d7e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8091d80:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8091d82:	b113      	cbz	r3, 8091d8a <_ZN6String7reserveEj+0xe>
 8091d84:	6843      	ldr	r3, [r0, #4]
 8091d86:	428b      	cmp	r3, r1
 8091d88:	d207      	bcs.n	8091d9a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8091d8a:	4620      	mov	r0, r4
 8091d8c:	f7ff ffea 	bl	8091d64 <_ZN6String12changeBufferEj>
 8091d90:	b120      	cbz	r0, 8091d9c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8091d92:	68a3      	ldr	r3, [r4, #8]
 8091d94:	b90b      	cbnz	r3, 8091d9a <_ZN6String7reserveEj+0x1e>
 8091d96:	6822      	ldr	r2, [r4, #0]
 8091d98:	7013      	strb	r3, [r2, #0]
 8091d9a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8091d9c:	bd10      	pop	{r4, pc}

08091d9e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8091d9e:	b570      	push	{r4, r5, r6, lr}
 8091da0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8091da2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8091da4:	4604      	mov	r4, r0
 8091da6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8091da8:	f7ff ffe8 	bl	8091d7c <_ZN6String7reserveEj>
 8091dac:	b918      	cbnz	r0, 8091db6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8091dae:	4620      	mov	r0, r4
 8091db0:	f7ff ffcd 	bl	8091d4e <_ZN6String10invalidateEv>
		return *this;
 8091db4:	e009      	b.n	8091dca <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8091db6:	462a      	mov	r2, r5
 8091db8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8091dba:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8091dbc:	6820      	ldr	r0, [r4, #0]
 8091dbe:	f001 fbc8 	bl	8093552 <memcpy>
	buffer[len] = 0;
 8091dc2:	6822      	ldr	r2, [r4, #0]
 8091dc4:	68a3      	ldr	r3, [r4, #8]
 8091dc6:	2100      	movs	r1, #0
 8091dc8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8091dca:	4620      	mov	r0, r4
 8091dcc:	bd70      	pop	{r4, r5, r6, pc}

08091dce <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8091dce:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091dd0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8091dd2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091dd4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8091dd6:	6043      	str	r3, [r0, #4]
	len = 0;
 8091dd8:	6083      	str	r3, [r0, #8]
	flags = 0;
 8091dda:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8091ddc:	460d      	mov	r5, r1
 8091dde:	b139      	cbz	r1, 8091df0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8091de0:	4608      	mov	r0, r1
 8091de2:	f001 fc04 	bl	80935ee <strlen>
 8091de6:	4629      	mov	r1, r5
 8091de8:	4602      	mov	r2, r0
 8091dea:	4620      	mov	r0, r4
 8091dec:	f7ff ffd7 	bl	8091d9e <_ZN6String4copyEPKcj>
}
 8091df0:	4620      	mov	r0, r4
 8091df2:	bd38      	pop	{r3, r4, r5, pc}

08091df4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8091df4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8091df6:	b510      	push	{r4, lr}
 8091df8:	460b      	mov	r3, r1
 8091dfa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8091dfc:	d007      	beq.n	8091e0e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8091dfe:	6809      	ldr	r1, [r1, #0]
 8091e00:	b119      	cbz	r1, 8091e0a <_ZN6StringaSERKS_+0x16>
 8091e02:	689a      	ldr	r2, [r3, #8]
 8091e04:	f7ff ffcb 	bl	8091d9e <_ZN6String4copyEPKcj>
 8091e08:	e001      	b.n	8091e0e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8091e0a:	f7ff ffa0 	bl	8091d4e <_ZN6String10invalidateEv>

	return *this;
}
 8091e0e:	4620      	mov	r0, r4
 8091e10:	bd10      	pop	{r4, pc}

08091e12 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8091e12:	b510      	push	{r4, lr}
 8091e14:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091e16:	2300      	movs	r3, #0
 8091e18:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8091e1a:	6043      	str	r3, [r0, #4]
	len = 0;
 8091e1c:	6083      	str	r3, [r0, #8]
	flags = 0;
 8091e1e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8091e20:	f7ff ffe8 	bl	8091df4 <_ZN6StringaSERKS_>
}
 8091e24:	4620      	mov	r0, r4
 8091e26:	bd10      	pop	{r4, pc}

08091e28 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8091e28:	b538      	push	{r3, r4, r5, lr}
 8091e2a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8091e2c:	460c      	mov	r4, r1
 8091e2e:	b141      	cbz	r1, 8091e42 <_ZN6StringaSEPKc+0x1a>
 8091e30:	4608      	mov	r0, r1
 8091e32:	f001 fbdc 	bl	80935ee <strlen>
 8091e36:	4621      	mov	r1, r4
 8091e38:	4602      	mov	r2, r0
 8091e3a:	4628      	mov	r0, r5
 8091e3c:	f7ff ffaf 	bl	8091d9e <_ZN6String4copyEPKcj>
 8091e40:	e001      	b.n	8091e46 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8091e42:	f7ff ff84 	bl	8091d4e <_ZN6String10invalidateEv>

	return *this;
}
 8091e46:	4628      	mov	r0, r5
 8091e48:	bd38      	pop	{r3, r4, r5, pc}

08091e4a <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8091e4a:	b510      	push	{r4, lr}
 8091e4c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091e4e:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8091e50:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091e52:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8091e54:	6063      	str	r3, [r4, #4]
	len = 0;
 8091e56:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8091e58:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8091e5a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8091e5c:	a901      	add	r1, sp, #4
 8091e5e:	f7ff fd3b 	bl	80918d8 <itoa>
	*this = buf;
 8091e62:	a901      	add	r1, sp, #4
 8091e64:	4620      	mov	r0, r4
 8091e66:	f7ff ffdf 	bl	8091e28 <_ZN6StringaSEPKc>
}
 8091e6a:	4620      	mov	r0, r4
 8091e6c:	b00a      	add	sp, #40	; 0x28
 8091e6e:	bd10      	pop	{r4, pc}

08091e70 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8091e70:	b570      	push	{r4, r5, r6, lr}
 8091e72:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8091e74:	460e      	mov	r6, r1
 8091e76:	b909      	cbnz	r1, 8091e7c <_ZN6String6concatEPKcj+0xc>
 8091e78:	2000      	movs	r0, #0
 8091e7a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8091e7c:	b16a      	cbz	r2, 8091e9a <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8091e7e:	6883      	ldr	r3, [r0, #8]
 8091e80:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8091e82:	4629      	mov	r1, r5
 8091e84:	f7ff ff7a 	bl	8091d7c <_ZN6String7reserveEj>
 8091e88:	2800      	cmp	r0, #0
 8091e8a:	d0f5      	beq.n	8091e78 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8091e8c:	6820      	ldr	r0, [r4, #0]
 8091e8e:	68a3      	ldr	r3, [r4, #8]
 8091e90:	4631      	mov	r1, r6
 8091e92:	4418      	add	r0, r3
 8091e94:	f001 fba3 	bl	80935de <strcpy>
	len = newlen;
 8091e98:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8091e9a:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8091e9c:	bd70      	pop	{r4, r5, r6, pc}

08091e9e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8091e9e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8091ea0:	688a      	ldr	r2, [r1, #8]
 8091ea2:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8091ea4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8091ea6:	f7ff ffe3 	bl	8091e70 <_ZN6String6concatEPKcj>
 8091eaa:	b910      	cbnz	r0, 8091eb2 <_ZplRK15StringSumHelperRK6String+0x14>
 8091eac:	4620      	mov	r0, r4
 8091eae:	f7ff ff4e 	bl	8091d4e <_ZN6String10invalidateEv>
	return a;
}
 8091eb2:	4620      	mov	r0, r4
 8091eb4:	bd10      	pop	{r4, pc}

08091eb6 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8091eb6:	b538      	push	{r3, r4, r5, lr}
 8091eb8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8091eba:	460d      	mov	r5, r1
 8091ebc:	b141      	cbz	r1, 8091ed0 <_ZplRK15StringSumHelperPKc+0x1a>
 8091ebe:	4608      	mov	r0, r1
 8091ec0:	f001 fb95 	bl	80935ee <strlen>
 8091ec4:	4629      	mov	r1, r5
 8091ec6:	4602      	mov	r2, r0
 8091ec8:	4620      	mov	r0, r4
 8091eca:	f7ff ffd1 	bl	8091e70 <_ZN6String6concatEPKcj>
 8091ece:	b910      	cbnz	r0, 8091ed6 <_ZplRK15StringSumHelperPKc+0x20>
 8091ed0:	4620      	mov	r0, r4
 8091ed2:	f7ff ff3c 	bl	8091d4e <_ZN6String10invalidateEv>
	return a;
}
 8091ed6:	4620      	mov	r0, r4
 8091ed8:	bd38      	pop	{r3, r4, r5, pc}

08091eda <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8091eda:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8091edc:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8091ede:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8091ee0:	b912      	cbnz	r2, 8091ee8 <_ZNK6String6equalsEPKc+0xe>
 8091ee2:	b919      	cbnz	r1, 8091eec <_ZNK6String6equalsEPKc+0x12>
 8091ee4:	2001      	movs	r0, #1
 8091ee6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8091ee8:	b911      	cbnz	r1, 8091ef0 <_ZNK6String6equalsEPKc+0x16>
 8091eea:	6803      	ldr	r3, [r0, #0]
 8091eec:	7818      	ldrb	r0, [r3, #0]
 8091eee:	e002      	b.n	8091ef6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8091ef0:	6800      	ldr	r0, [r0, #0]
 8091ef2:	f001 fb6a 	bl	80935ca <strcmp>
 8091ef6:	fab0 f080 	clz	r0, r0
 8091efa:	0940      	lsrs	r0, r0, #5
}
 8091efc:	bd08      	pop	{r3, pc}

08091efe <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8091efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8091f00:	4606      	mov	r6, r0
 8091f02:	460d      	mov	r5, r1
 8091f04:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8091f06:	2400      	movs	r4, #0
  while (size--) {
 8091f08:	42bd      	cmp	r5, r7
 8091f0a:	d00c      	beq.n	8091f26 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8091f0c:	6833      	ldr	r3, [r6, #0]
 8091f0e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8091f12:	689b      	ldr	r3, [r3, #8]
 8091f14:	4630      	mov	r0, r6
 8091f16:	4798      	blx	r3
     if (chunk>=0)
 8091f18:	2800      	cmp	r0, #0
 8091f1a:	db01      	blt.n	8091f20 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8091f1c:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8091f1e:	e7f3      	b.n	8091f08 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8091f20:	2c00      	cmp	r4, #0
 8091f22:	bf08      	it	eq
 8091f24:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8091f26:	4620      	mov	r0, r4
 8091f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08091f2a <_ZN5Print5printEPKc>:
 8091f2a:	b508      	push	{r3, lr}
 8091f2c:	f7ef fef2 	bl	8081d14 <_ZN5Print5writeEPKc>
 8091f30:	bd08      	pop	{r3, pc}

08091f32 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8091f32:	6803      	ldr	r3, [r0, #0]
 8091f34:	689b      	ldr	r3, [r3, #8]
 8091f36:	4718      	bx	r3

08091f38 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8091f38:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8091f3a:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8091f3c:	4605      	mov	r5, r0
  size_t n = print('\r');
 8091f3e:	f7ff fff8 	bl	8091f32 <_ZN5Print5printEc>
  n += print('\n');
 8091f42:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8091f44:	4604      	mov	r4, r0
  n += print('\n');
 8091f46:	4628      	mov	r0, r5
 8091f48:	f7ff fff3 	bl	8091f32 <_ZN5Print5printEc>
  return n;
}
 8091f4c:	4420      	add	r0, r4
 8091f4e:	bd38      	pop	{r3, r4, r5, pc}

08091f50 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8091f50:	b538      	push	{r3, r4, r5, lr}
 8091f52:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091f54:	f7ef fede 	bl	8081d14 <_ZN5Print5writeEPKc>
 8091f58:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8091f5a:	4628      	mov	r0, r5
 8091f5c:	f7ff ffec 	bl	8091f38 <_ZN5Print7printlnEv>
  return n;
}
 8091f60:	4420      	add	r0, r4
 8091f62:	bd38      	pop	{r3, r4, r5, pc}

08091f64 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8091f64:	2a01      	cmp	r2, #1
 8091f66:	bf98      	it	ls
 8091f68:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8091f6a:	b530      	push	{r4, r5, lr}
 8091f6c:	460b      	mov	r3, r1
 8091f6e:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8091f70:	2100      	movs	r1, #0
 8091f72:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8091f76:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8091f7a:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8091f7e:	fb05 3312 	mls	r3, r5, r2, r3
 8091f82:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8091f84:	2b09      	cmp	r3, #9
 8091f86:	bf94      	ite	ls
 8091f88:	3330      	addls	r3, #48	; 0x30
 8091f8a:	3337      	addhi	r3, #55	; 0x37
 8091f8c:	b2db      	uxtb	r3, r3
 8091f8e:	4621      	mov	r1, r4
 8091f90:	f804 3901 	strb.w	r3, [r4], #-1
 8091f94:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8091f96:	2d00      	cmp	r5, #0
 8091f98:	d1ef      	bne.n	8091f7a <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8091f9a:	f7ef febb 	bl	8081d14 <_ZN5Print5writeEPKc>
}
 8091f9e:	b00b      	add	sp, #44	; 0x2c
 8091fa0:	bd30      	pop	{r4, r5, pc}

08091fa2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8091fa2:	b410      	push	{r4}
  if (base == 0) return write(n);
 8091fa4:	b922      	cbnz	r2, 8091fb0 <_ZN5Print5printEmi+0xe>
 8091fa6:	6803      	ldr	r3, [r0, #0]
 8091fa8:	b2c9      	uxtb	r1, r1
 8091faa:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8091fac:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8091fae:	4718      	bx	r3
  else return printNumber(n, base);
 8091fb0:	b2d2      	uxtb	r2, r2
}
 8091fb2:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8091fb4:	f7ff bfd6 	b.w	8091f64 <_ZN5Print11printNumberEmh>

08091fb8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8091fb8:	f7ff bff3 	b.w	8091fa2 <_ZN5Print5printEmi>

08091fbc <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8091fbc:	b40c      	push	{r2, r3}
 8091fbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8091fc2:	b087      	sub	sp, #28
 8091fc4:	af00      	add	r7, sp, #0
 8091fc6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8091fca:	f854 9b04 	ldr.w	r9, [r4], #4
 8091fce:	4605      	mov	r5, r0
 8091fd0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8091fd2:	4623      	mov	r3, r4
 8091fd4:	464a      	mov	r2, r9
 8091fd6:	2114      	movs	r1, #20
 8091fd8:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 8091fda:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8091fdc:	f7ff fb84 	bl	80916e8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8091fe0:	2813      	cmp	r0, #19
 8091fe2:	d805      	bhi.n	8091ff0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091fe4:	1d39      	adds	r1, r7, #4
 8091fe6:	4628      	mov	r0, r5
 8091fe8:	f7ef fe94 	bl	8081d14 <_ZN5Print5writeEPKc>
 8091fec:	4604      	mov	r4, r0
 8091fee:	e013      	b.n	8092018 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8091ff0:	f100 0308 	add.w	r3, r0, #8
 8091ff4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8091ff8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8091ffa:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 8091ffe:	1c41      	adds	r1, r0, #1
 8092000:	4623      	mov	r3, r4
 8092002:	464a      	mov	r2, r9
 8092004:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8092006:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8092008:	f7ff fb6e 	bl	80916e8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 809200c:	4669      	mov	r1, sp
 809200e:	4628      	mov	r0, r5
 8092010:	f7ef fe80 	bl	8081d14 <_ZN5Print5writeEPKc>
 8092014:	4604      	mov	r4, r0
 8092016:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8092018:	b11e      	cbz	r6, 8092022 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 809201a:	4628      	mov	r0, r5
 809201c:	f7ff ff8c 	bl	8091f38 <_ZN5Print7printlnEv>
 8092020:	4404      	add	r4, r0
    return n;
}
 8092022:	4620      	mov	r0, r4
 8092024:	371c      	adds	r7, #28
 8092026:	46bd      	mov	sp, r7
 8092028:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 809202c:	b002      	add	sp, #8
 809202e:	4770      	bx	lr

08092030 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8092030:	4a01      	ldr	r2, [pc, #4]	; (8092038 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8092032:	4b02      	ldr	r3, [pc, #8]	; (809203c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8092034:	601a      	str	r2, [r3, #0]
 8092036:	4770      	bx	lr
 8092038:	0809767b 	.word	0x0809767b
 809203c:	20002fc8 	.word	0x20002fc8

08092040 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8092040:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8092042:	2000      	movs	r0, #0
 8092044:	f7ff fb10 	bl	8091668 <spark_sync_time_pending>
 8092048:	b128      	cbz	r0, 8092056 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 809204a:	f7ff fb05 	bl	8091658 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 809204e:	f080 0001 	eor.w	r0, r0, #1
 8092052:	b2c0      	uxtb	r0, r0
 8092054:	bd08      	pop	{r3, pc}
 8092056:	2001      	movs	r0, #1
    }
 8092058:	bd08      	pop	{r3, pc}
	...

0809205c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 809205c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 809205e:	4b0e      	ldr	r3, [pc, #56]	; (8092098 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8092060:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8092062:	681b      	ldr	r3, [r3, #0]
 8092064:	a802      	add	r0, sp, #8
 8092066:	4419      	add	r1, r3
 8092068:	4b0c      	ldr	r3, [pc, #48]	; (809209c <_ZN9TimeClass7timeStrEl+0x40>)
 809206a:	681b      	ldr	r3, [r3, #0]
 809206c:	4419      	add	r1, r3
 809206e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8092072:	f001 f967 	bl	8093344 <localtime>
        char* ascstr = asctime(calendar_time);
 8092076:	f001 f913 	bl	80932a0 <asctime>
 809207a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 809207c:	f001 fab7 	bl	80935ee <strlen>
        ascstr[len-1] = 0; // remove final newline
 8092080:	2300      	movs	r3, #0
 8092082:	4428      	add	r0, r5
 8092084:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8092088:	4629      	mov	r1, r5
 809208a:	4620      	mov	r0, r4
 809208c:	f7ff fe9f 	bl	8091dce <_ZN6StringC1EPK19__FlashStringHelper>
}
 8092090:	4620      	mov	r0, r4
 8092092:	b003      	add	sp, #12
 8092094:	bd30      	pop	{r4, r5, pc}
 8092096:	bf00      	nop
 8092098:	20002fd4 	.word	0x20002fd4
 809209c:	20002fd0 	.word	0x20002fd0

080920a0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80920a0:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80920a2:	2000      	movs	r0, #0
 80920a4:	f7ff f8d0 	bl	8091248 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80920a8:	4604      	mov	r4, r0
 80920aa:	b968      	cbnz	r0, 80920c8 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80920ac:	f7ff fa84 	bl	80915b8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80920b0:	2801      	cmp	r0, #1
 80920b2:	d10b      	bne.n	80920cc <_ZN9TimeClass7isValidEv+0x2c>
 80920b4:	4620      	mov	r0, r4
 80920b6:	f7ff faa7 	bl	8091608 <system_thread_get_state>
 80920ba:	b938      	cbnz	r0, 80920cc <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80920bc:	f7ff ffc0 	bl	8092040 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80920c0:	b930      	cbnz	r0, 80920d0 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80920c2:	f7ff fac1 	bl	8091648 <spark_process>
 80920c6:	e7f9      	b.n	80920bc <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80920c8:	2001      	movs	r0, #1
 80920ca:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80920cc:	2000      	movs	r0, #0
 80920ce:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80920d0:	f7ff ffb6 	bl	8092040 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80920d4:	2000      	movs	r0, #0
 80920d6:	f7ff f8b7 	bl	8091248 <HAL_RTC_Time_Is_Valid>
 80920da:	3000      	adds	r0, #0
 80920dc:	bf18      	it	ne
 80920de:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80920e0:	bd10      	pop	{r4, pc}

080920e2 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80920e2:	b508      	push	{r3, lr}
    (void)isValid();
 80920e4:	f7ff ffdc 	bl	80920a0 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80920e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80920ec:	f7ff b8a4 	b.w	8091238 <HAL_RTC_Get_UnixTime>

080920f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80920f0:	4b02      	ldr	r3, [pc, #8]	; (80920fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80920f2:	681a      	ldr	r2, [r3, #0]
 80920f4:	4b02      	ldr	r3, [pc, #8]	; (8092100 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80920f6:	601a      	str	r2, [r3, #0]
 80920f8:	4770      	bx	lr
 80920fa:	bf00      	nop
 80920fc:	20000440 	.word	0x20000440
 8092100:	20002fcc 	.word	0x20002fcc

08092104 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8092104:	2100      	movs	r1, #0
 8092106:	f7ff ba67 	b.w	80915d8 <system_delay_ms>

0809210a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 809210a:	b510      	push	{r4, lr}
 809210c:	4604      	mov	r4, r0
 809210e:	f7fe fc03 	bl	8090918 <_ZNSt14_Function_baseD1Ev>
 8092112:	4620      	mov	r0, r4
 8092114:	bd10      	pop	{r4, pc}

08092116 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 8092116:	b510      	push	{r4, lr}
 8092118:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 809211a:	f7ff fa3d 	bl	8091598 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
 809211e:	4284      	cmp	r4, r0
 8092120:	d008      	beq.n	8092134 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 8092122:	b11c      	cbz	r4, 809212c <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 8092124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
 8092128:	f7ff ba26 	b.w	8091578 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
 809212c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
 8092130:	f7ff ba2a 	b.w	8091588 <LED_Signaling_Stop>
 8092134:	bd10      	pop	{r4, pc}

08092136 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 8092136:	b570      	push	{r4, r5, r6, lr}
 8092138:	4605      	mov	r5, r0
 809213a:	460e      	mov	r6, r1
 809213c:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 809213e:	f7ff fa2b 	bl	8091598 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
 8092142:	b150      	cbz	r0, 809215a <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 8092144:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 8092148:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 809214c:	f7ff fa0c 	bl	8091568 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 8092150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
 8092154:	20e7      	movs	r0, #231	; 0xe7
 8092156:	f7ff ba27 	b.w	80915a8 <LED_On>
 809215a:	bd70      	pop	{r4, r5, r6, pc}

0809215c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 809215c:	4803      	ldr	r0, [pc, #12]	; (809216c <_GLOBAL__sub_I_RGB+0x10>)
 809215e:	2300      	movs	r3, #0
 8092160:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8092162:	4a03      	ldr	r2, [pc, #12]	; (8092170 <_GLOBAL__sub_I_RGB+0x14>)
 8092164:	4903      	ldr	r1, [pc, #12]	; (8092174 <_GLOBAL__sub_I_RGB+0x18>)
 8092166:	f000 bb5d 	b.w	8092824 <__aeabi_atexit>
 809216a:	bf00      	nop
 809216c:	20002fd8 	.word	0x20002fd8
 8092170:	200004f8 	.word	0x200004f8
 8092174:	0809210b 	.word	0x0809210b

08092178 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8092178:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 809217a:	4b18      	ldr	r3, [pc, #96]	; (80921dc <serialEventRun+0x64>)
 809217c:	b133      	cbz	r3, 809218c <serialEventRun+0x14>
 809217e:	f000 f94d 	bl	809241c <_Z16_fetch_usbserialv>
 8092182:	6803      	ldr	r3, [r0, #0]
 8092184:	691b      	ldr	r3, [r3, #16]
 8092186:	4798      	blx	r3
 8092188:	2800      	cmp	r0, #0
 809218a:	dc1e      	bgt.n	80921ca <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 809218c:	4b14      	ldr	r3, [pc, #80]	; (80921e0 <serialEventRun+0x68>)
 809218e:	b133      	cbz	r3, 809219e <serialEventRun+0x26>
 8092190:	f000 fa0e 	bl	80925b0 <_Z22__fetch_global_Serial1v>
 8092194:	6803      	ldr	r3, [r0, #0]
 8092196:	691b      	ldr	r3, [r3, #16]
 8092198:	4798      	blx	r3
 809219a:	2800      	cmp	r0, #0
 809219c:	dc18      	bgt.n	80921d0 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 809219e:	4b11      	ldr	r3, [pc, #68]	; (80921e4 <serialEventRun+0x6c>)
 80921a0:	b10b      	cbz	r3, 80921a6 <serialEventRun+0x2e>
 80921a2:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80921a6:	4b10      	ldr	r3, [pc, #64]	; (80921e8 <serialEventRun+0x70>)
 80921a8:	b10b      	cbz	r3, 80921ae <serialEventRun+0x36>
 80921aa:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80921ae:	4b0f      	ldr	r3, [pc, #60]	; (80921ec <serialEventRun+0x74>)
 80921b0:	b10b      	cbz	r3, 80921b6 <serialEventRun+0x3e>
 80921b2:	f7fe fa71 	bl	8090698 <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80921b6:	4b0e      	ldr	r3, [pc, #56]	; (80921f0 <serialEventRun+0x78>)
 80921b8:	b17b      	cbz	r3, 80921da <serialEventRun+0x62>
 80921ba:	f000 f96b 	bl	8092494 <_Z17_fetch_usbserial1v>
 80921be:	6803      	ldr	r3, [r0, #0]
 80921c0:	691b      	ldr	r3, [r3, #16]
 80921c2:	4798      	blx	r3
 80921c4:	2800      	cmp	r0, #0
 80921c6:	dc06      	bgt.n	80921d6 <serialEventRun+0x5e>
 80921c8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80921ca:	f3af 8000 	nop.w
 80921ce:	e7dd      	b.n	809218c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80921d0:	f3af 8000 	nop.w
 80921d4:	e7e3      	b.n	809219e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80921d6:	f3af 8000 	nop.w
 80921da:	bd08      	pop	{r3, pc}
	...
 80921ec:	08090699 	.word	0x08090699
 80921f0:	00000000 	.word	0x00000000

080921f4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80921f4:	b508      	push	{r3, lr}
	serialEventRun();
 80921f6:	f7ff ffbf 	bl	8092178 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80921fa:	f7ff f815 	bl	8091228 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80921fe:	4b01      	ldr	r3, [pc, #4]	; (8092204 <_post_loop+0x10>)
 8092200:	6018      	str	r0, [r3, #0]
 8092202:	bd08      	pop	{r3, pc}
 8092204:	200034d0 	.word	0x200034d0

08092208 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8092208:	4802      	ldr	r0, [pc, #8]	; (8092214 <_Z33system_initialize_user_backup_ramv+0xc>)
 809220a:	4a03      	ldr	r2, [pc, #12]	; (8092218 <_Z33system_initialize_user_backup_ramv+0x10>)
 809220c:	4903      	ldr	r1, [pc, #12]	; (809221c <_Z33system_initialize_user_backup_ramv+0x14>)
 809220e:	1a12      	subs	r2, r2, r0
 8092210:	f001 b99f 	b.w	8093552 <memcpy>
 8092214:	40024000 	.word	0x40024000
 8092218:	40024004 	.word	0x40024004
 809221c:	08097a98 	.word	0x08097a98

08092220 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 8092220:	2000      	movs	r0, #0
 8092222:	4770      	bx	lr

08092224 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 8092224:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 8092226:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 8092228:	4604      	mov	r4, r0
    switch (req->type) {
 809222a:	2b0a      	cmp	r3, #10
 809222c:	d00e      	beq.n	809224c <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 809222e:	2b50      	cmp	r3, #80	; 0x50
 8092230:	d11c      	bne.n	809226c <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 8092232:	4b10      	ldr	r3, [pc, #64]	; (8092274 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 8092234:	681d      	ldr	r5, [r3, #0]
 8092236:	b1cd      	cbz	r5, 809226c <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 8092238:	7d03      	ldrb	r3, [r0, #20]
 809223a:	f44f 7100 	mov.w	r1, #512	; 0x200
 809223e:	9300      	str	r3, [sp, #0]
 8092240:	68c2      	ldr	r2, [r0, #12]
 8092242:	f100 0310 	add.w	r3, r0, #16
 8092246:	6880      	ldr	r0, [r0, #8]
 8092248:	47a8      	blx	r5
 809224a:	e007      	b.n	809225c <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 809224c:	f100 0310 	add.w	r3, r0, #16
 8092250:	68c2      	ldr	r2, [r0, #12]
 8092252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8092256:	6880      	ldr	r0, [r0, #8]
 8092258:	f7ff ffe2 	bl	8092220 <_Z26usb_request_custom_handlerPcjjPj>
 809225c:	b130      	cbz	r0, 809226c <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 809225e:	2200      	movs	r2, #0
 8092260:	4620      	mov	r0, r4
 8092262:	4611      	mov	r1, r2
 8092264:	f7ff f9e0 	bl	8091628 <system_set_usb_request_result>
        return true;
 8092268:	2001      	movs	r0, #1
 809226a:	e000      	b.n	809226e <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 809226c:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 809226e:	b003      	add	sp, #12
 8092270:	bd30      	pop	{r4, r5, pc}
 8092272:	bf00      	nop
 8092274:	20002fe8 	.word	0x20002fe8

08092278 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 8092278:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 809227a:	4c0c      	ldr	r4, [pc, #48]	; (80922ac <module_user_init_hook+0x34>)
 809227c:	4d0c      	ldr	r5, [pc, #48]	; (80922b0 <module_user_init_hook+0x38>)
 809227e:	6823      	ldr	r3, [r4, #0]
 8092280:	42ab      	cmp	r3, r5
 8092282:	4b0c      	ldr	r3, [pc, #48]	; (80922b4 <module_user_init_hook+0x3c>)
 8092284:	bf0c      	ite	eq
 8092286:	2201      	moveq	r2, #1
 8092288:	2200      	movne	r2, #0
 809228a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 809228c:	d002      	beq.n	8092294 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 809228e:	f7ff ffbb 	bl	8092208 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8092292:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 8092294:	4b08      	ldr	r3, [pc, #32]	; (80922b8 <module_user_init_hook+0x40>)
 8092296:	b11b      	cbz	r3, 80922a0 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 8092298:	f7fe ffb6 	bl	8091208 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 809229c:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80922a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80922a4:	2100      	movs	r1, #0
 80922a6:	4805      	ldr	r0, [pc, #20]	; (80922bc <module_user_init_hook+0x44>)
 80922a8:	f7ff b9b6 	b.w	8091618 <system_set_usb_request_app_handler>
 80922ac:	40024000 	.word	0x40024000
 80922b0:	9a271c1e 	.word	0x9a271c1e
 80922b4:	20002fec 	.word	0x20002fec
 80922b8:	00000000 	.word	0x00000000
 80922bc:	08092225 	.word	0x08092225

080922c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80922c0:	4770      	bx	lr

080922c2 <_ZN9IPAddressD0Ev>:
 80922c2:	b510      	push	{r4, lr}
 80922c4:	4604      	mov	r4, r0
 80922c6:	f7ed feec 	bl	80800a2 <_ZdlPv>
 80922ca:	4620      	mov	r0, r4
 80922cc:	bd10      	pop	{r4, pc}

080922ce <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80922ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80922d0:	460f      	mov	r7, r1
 80922d2:	f100 0608 	add.w	r6, r0, #8
 80922d6:	1d05      	adds	r5, r0, #4
 80922d8:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80922da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80922de:	220a      	movs	r2, #10
 80922e0:	4638      	mov	r0, r7
 80922e2:	f7ff fe69 	bl	8091fb8 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80922e6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80922e8:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80922ea:	d007      	beq.n	80922fc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80922ec:	2c00      	cmp	r4, #0
 80922ee:	d0f4      	beq.n	80922da <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80922f0:	212e      	movs	r1, #46	; 0x2e
 80922f2:	4638      	mov	r0, r7
 80922f4:	f7ff fe1d 	bl	8091f32 <_ZN5Print5printEc>
 80922f8:	4404      	add	r4, r0
 80922fa:	e7ee      	b.n	80922da <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80922fc:	4620      	mov	r0, r4
 80922fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08092300 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 8092300:	4a02      	ldr	r2, [pc, #8]	; (809230c <_ZN9IPAddressC1Ev+0xc>)
 8092302:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8092304:	2200      	movs	r2, #0
 8092306:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8092308:	4770      	bx	lr
 809230a:	bf00      	nop
 809230c:	080976d4 	.word	0x080976d4

08092310 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8092310:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8092312:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8092316:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 809231a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 809231e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8092322:	6041      	str	r1, [r0, #4]
 8092324:	bd10      	pop	{r4, pc}
	...

08092328 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8092328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 809232a:	4d04      	ldr	r5, [pc, #16]	; (809233c <_ZN9IPAddressC1Ehhhh+0x14>)
 809232c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 809232e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8092332:	9500      	str	r5, [sp, #0]
 8092334:	f7ff ffec 	bl	8092310 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8092338:	b003      	add	sp, #12
 809233a:	bd30      	pop	{r4, r5, pc}
 809233c:	080976d4 	.word	0x080976d4

08092340 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 8092340:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 8092342:	780d      	ldrb	r5, [r1, #0]
 8092344:	788b      	ldrb	r3, [r1, #2]
 8092346:	784a      	ldrb	r2, [r1, #1]
 8092348:	78c9      	ldrb	r1, [r1, #3]
 809234a:	9100      	str	r1, [sp, #0]
 809234c:	4629      	mov	r1, r5
 809234e:	f7ff ffdf 	bl	8092310 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 8092352:	b003      	add	sp, #12
 8092354:	bd30      	pop	{r4, r5, pc}
	...

08092358 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 8092358:	b510      	push	{r4, lr}
 809235a:	4604      	mov	r4, r0
 809235c:	4b02      	ldr	r3, [pc, #8]	; (8092368 <_ZN9IPAddressC1EPKh+0x10>)
 809235e:	6003      	str	r3, [r0, #0]
{
    *this = address;
 8092360:	f7ff ffee 	bl	8092340 <_ZN9IPAddressaSEPKh>
}
 8092364:	4620      	mov	r0, r4
 8092366:	bd10      	pop	{r4, pc}
 8092368:	080976d4 	.word	0x080976d4

0809236c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 809236c:	7441      	strb	r1, [r0, #17]
 809236e:	4770      	bx	lr

08092370 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 8092370:	4770      	bx	lr

08092372 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8092372:	2100      	movs	r1, #0
 8092374:	7c00      	ldrb	r0, [r0, #16]
 8092376:	f7ff b8df 	b.w	8091538 <HAL_USB_USART_Receive_Data>

0809237a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 809237a:	2101      	movs	r1, #1
 809237c:	7c00      	ldrb	r0, [r0, #16]
 809237e:	f7ff b8db 	b.w	8091538 <HAL_USB_USART_Receive_Data>

08092382 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8092382:	7c00      	ldrb	r0, [r0, #16]
 8092384:	f7ff b8d0 	b.w	8091528 <HAL_USB_USART_Available_Data_For_Write>

08092388 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8092388:	7c00      	ldrb	r0, [r0, #16]
 809238a:	f7ff b8c5 	b.w	8091518 <HAL_USB_USART_Available_Data>

0809238e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 809238e:	b538      	push	{r3, r4, r5, lr}
 8092390:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8092392:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8092394:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8092396:	f7ff f8c7 	bl	8091528 <HAL_USB_USART_Available_Data_For_Write>
 809239a:	2800      	cmp	r0, #0
 809239c:	dc01      	bgt.n	80923a2 <_ZN9USBSerial5writeEh+0x14>
 809239e:	7c60      	ldrb	r0, [r4, #17]
 80923a0:	b120      	cbz	r0, 80923ac <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80923a2:	4629      	mov	r1, r5
 80923a4:	7c20      	ldrb	r0, [r4, #16]
 80923a6:	f7ff f8cf 	bl	8091548 <HAL_USB_USART_Send_Data>
    return 1;
 80923aa:	2001      	movs	r0, #1
  }
  return 0;
}
 80923ac:	bd38      	pop	{r3, r4, r5, pc}

080923ae <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80923ae:	7c00      	ldrb	r0, [r0, #16]
 80923b0:	f7ff b8d2 	b.w	8091558 <HAL_USB_USART_Flush_Data>

080923b4 <_ZN9USBSerialD0Ev>:
 80923b4:	b510      	push	{r4, lr}
 80923b6:	4604      	mov	r4, r0
 80923b8:	f7ed fe73 	bl	80800a2 <_ZdlPv>
 80923bc:	4620      	mov	r0, r4
 80923be:	bd10      	pop	{r4, pc}

080923c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80923c0:	b510      	push	{r4, lr}
 80923c2:	4604      	mov	r4, r0
 80923c4:	2300      	movs	r3, #0
 80923c6:	6063      	str	r3, [r4, #4]
 80923c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80923cc:	60a3      	str	r3, [r4, #8]
 80923ce:	4b05      	ldr	r3, [pc, #20]	; (80923e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80923d0:	4608      	mov	r0, r1
 80923d2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80923d4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80923d6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80923d8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80923da:	4611      	mov	r1, r2
 80923dc:	f7ff f88c 	bl	80914f8 <HAL_USB_USART_Init>
}
 80923e0:	4620      	mov	r0, r4
 80923e2:	bd10      	pop	{r4, pc}
 80923e4:	080976e8 	.word	0x080976e8

080923e8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80923e8:	2200      	movs	r2, #0
 80923ea:	7c00      	ldrb	r0, [r0, #16]
 80923ec:	f7ff b88c 	b.w	8091508 <HAL_USB_USART_Begin>

080923f0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80923f0:	b510      	push	{r4, lr}
 80923f2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80923f4:	2214      	movs	r2, #20
 80923f6:	2100      	movs	r1, #0
 80923f8:	f001 f8d1 	bl	809359e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80923fc:	4b05      	ldr	r3, [pc, #20]	; (8092414 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80923fe:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8092400:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8092402:	4b05      	ldr	r3, [pc, #20]	; (8092418 <_Z19acquireSerialBufferv+0x28>)
 8092404:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8092406:	f240 1301 	movw	r3, #257	; 0x101
 809240a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 809240c:	2381      	movs	r3, #129	; 0x81
 809240e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8092410:	bd10      	pop	{r4, pc}
 8092412:	bf00      	nop
 8092414:	20003075 	.word	0x20003075
 8092418:	20002ff4 	.word	0x20002ff4

0809241c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 809241c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 809241e:	4d0e      	ldr	r5, [pc, #56]	; (8092458 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8092420:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8092422:	a801      	add	r0, sp, #4
 8092424:	f7ff ffe4 	bl	80923f0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8092428:	6829      	ldr	r1, [r5, #0]
 809242a:	f011 0401 	ands.w	r4, r1, #1
 809242e:	d110      	bne.n	8092452 <_Z16_fetch_usbserialv+0x36>
 8092430:	4628      	mov	r0, r5
 8092432:	f7ed fe3a 	bl	80800aa <__cxa_guard_acquire>
 8092436:	b160      	cbz	r0, 8092452 <_Z16_fetch_usbserialv+0x36>
 8092438:	aa01      	add	r2, sp, #4
 809243a:	4621      	mov	r1, r4
 809243c:	4807      	ldr	r0, [pc, #28]	; (809245c <_Z16_fetch_usbserialv+0x40>)
 809243e:	f7ff ffbf 	bl	80923c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8092442:	4628      	mov	r0, r5
 8092444:	f7ed fe36 	bl	80800b4 <__cxa_guard_release>
 8092448:	4a05      	ldr	r2, [pc, #20]	; (8092460 <_Z16_fetch_usbserialv+0x44>)
 809244a:	4906      	ldr	r1, [pc, #24]	; (8092464 <_Z16_fetch_usbserialv+0x48>)
 809244c:	4803      	ldr	r0, [pc, #12]	; (809245c <_Z16_fetch_usbserialv+0x40>)
 809244e:	f000 f9e9 	bl	8092824 <__aeabi_atexit>
	return _usbserial;
}
 8092452:	4802      	ldr	r0, [pc, #8]	; (809245c <_Z16_fetch_usbserialv+0x40>)
 8092454:	b007      	add	sp, #28
 8092456:	bd30      	pop	{r4, r5, pc}
 8092458:	20002ff0 	.word	0x20002ff0
 809245c:	20003178 	.word	0x20003178
 8092460:	200004f8 	.word	0x200004f8
 8092464:	08092371 	.word	0x08092371

08092468 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8092468:	b510      	push	{r4, lr}
 809246a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 809246c:	2214      	movs	r2, #20
 809246e:	2100      	movs	r1, #0
 8092470:	f001 f895 	bl	809359e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8092474:	4b05      	ldr	r3, [pc, #20]	; (809248c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8092476:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8092478:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 809247a:	4b05      	ldr	r3, [pc, #20]	; (8092490 <_Z23acquireUSBSerial1Bufferv+0x28>)
 809247c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 809247e:	f240 1301 	movw	r3, #257	; 0x101
 8092482:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8092484:	2381      	movs	r3, #129	; 0x81
 8092486:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8092488:	bd10      	pop	{r4, pc}
 809248a:	bf00      	nop
 809248c:	20003228 	.word	0x20003228
 8092490:	20003190 	.word	0x20003190

08092494 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8092494:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8092496:	4c0e      	ldr	r4, [pc, #56]	; (80924d0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8092498:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 809249a:	a801      	add	r0, sp, #4
 809249c:	f7ff ffe4 	bl	8092468 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80924a0:	6823      	ldr	r3, [r4, #0]
 80924a2:	07db      	lsls	r3, r3, #31
 80924a4:	d410      	bmi.n	80924c8 <_Z17_fetch_usbserial1v+0x34>
 80924a6:	4620      	mov	r0, r4
 80924a8:	f7ed fdff 	bl	80800aa <__cxa_guard_acquire>
 80924ac:	b160      	cbz	r0, 80924c8 <_Z17_fetch_usbserial1v+0x34>
 80924ae:	aa01      	add	r2, sp, #4
 80924b0:	2101      	movs	r1, #1
 80924b2:	4808      	ldr	r0, [pc, #32]	; (80924d4 <_Z17_fetch_usbserial1v+0x40>)
 80924b4:	f7ff ff84 	bl	80923c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80924b8:	4620      	mov	r0, r4
 80924ba:	f7ed fdfb 	bl	80800b4 <__cxa_guard_release>
 80924be:	4a06      	ldr	r2, [pc, #24]	; (80924d8 <_Z17_fetch_usbserial1v+0x44>)
 80924c0:	4906      	ldr	r1, [pc, #24]	; (80924dc <_Z17_fetch_usbserial1v+0x48>)
 80924c2:	4804      	ldr	r0, [pc, #16]	; (80924d4 <_Z17_fetch_usbserial1v+0x40>)
 80924c4:	f000 f9ae 	bl	8092824 <__aeabi_atexit>
  return _usbserial1;
}
 80924c8:	4802      	ldr	r0, [pc, #8]	; (80924d4 <_Z17_fetch_usbserial1v+0x40>)
 80924ca:	b006      	add	sp, #24
 80924cc:	bd10      	pop	{r4, pc}
 80924ce:	bf00      	nop
 80924d0:	2000318c 	.word	0x2000318c
 80924d4:	20003214 	.word	0x20003214
 80924d8:	200004f8 	.word	0x200004f8
 80924dc:	08092371 	.word	0x08092371

080924e0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80924e0:	2200      	movs	r2, #0
 80924e2:	4611      	mov	r1, r2
 80924e4:	4610      	mov	r0, r2
 80924e6:	f7ff b8a7 	b.w	8091638 <network_ready>
	...

080924ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 80924ec:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80924ee:	4d0b      	ldr	r5, [pc, #44]	; (809251c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 80924f0:	2428      	movs	r4, #40	; 0x28
 80924f2:	4622      	mov	r2, r4
 80924f4:	2100      	movs	r1, #0
 80924f6:	4628      	mov	r0, r5
 80924f8:	f001 f851 	bl	809359e <memset>
        cid = -1;
 80924fc:	f04f 33ff 	mov.w	r3, #4294967295
 8092500:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
 8092502:	802c      	strh	r4, [r5, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 8092504:	4d06      	ldr	r5, [pc, #24]	; (8092520 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8092506:	4b07      	ldr	r3, [pc, #28]	; (8092524 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8092508:	4628      	mov	r0, r5
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 809250a:	4622      	mov	r2, r4
 809250c:	f840 3b04 	str.w	r3, [r0], #4
 8092510:	2100      	movs	r1, #0
 8092512:	f001 f844 	bl	809359e <memset>
        size = sizeof(*this);
 8092516:	80ac      	strh	r4, [r5, #4]
 8092518:	bd38      	pop	{r3, r4, r5, pc}
 809251a:	bf00      	nop
 809251c:	20003358 	.word	0x20003358
 8092520:	2000332c 	.word	0x2000332c
 8092524:	08097718 	.word	0x08097718

08092528 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8092528:	7441      	strb	r1, [r0, #17]
 809252a:	4770      	bx	lr

0809252c <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 809252c:	7c00      	ldrb	r0, [r0, #16]
 809252e:	f7fe bf2b 	b.w	8091388 <HAL_USART_Available_Data_For_Write>

08092532 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8092532:	7c00      	ldrb	r0, [r0, #16]
 8092534:	f7fe bf00 	b.w	8091338 <HAL_USART_Available_Data>

08092538 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8092538:	7c00      	ldrb	r0, [r0, #16]
 809253a:	f7fe bf0d 	b.w	8091358 <HAL_USART_Peek_Data>

0809253e <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 809253e:	7c00      	ldrb	r0, [r0, #16]
 8092540:	f7fe bf02 	b.w	8091348 <HAL_USART_Read_Data>

08092544 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8092544:	7c00      	ldrb	r0, [r0, #16]
 8092546:	f7fe bf0f 	b.w	8091368 <HAL_USART_Flush_Data>

0809254a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 809254a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 809254c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 809254e:	4604      	mov	r4, r0
 8092550:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8092552:	b925      	cbnz	r5, 809255e <_ZN11USARTSerial5writeEh+0x14>
 8092554:	7c00      	ldrb	r0, [r0, #16]
 8092556:	f7fe ff17 	bl	8091388 <HAL_USART_Available_Data_For_Write>
 809255a:	2800      	cmp	r0, #0
 809255c:	dd05      	ble.n	809256a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 809255e:	4631      	mov	r1, r6
 8092560:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8092562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8092566:	f7fe bedf 	b.w	8091328 <HAL_USART_Write_Data>
  }
  return 0;
}
 809256a:	4628      	mov	r0, r5
 809256c:	bd70      	pop	{r4, r5, r6, pc}
	...

08092570 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8092570:	b510      	push	{r4, lr}
 8092572:	4604      	mov	r4, r0
 8092574:	4608      	mov	r0, r1
 8092576:	4611      	mov	r1, r2
 8092578:	2200      	movs	r2, #0
 809257a:	6062      	str	r2, [r4, #4]
 809257c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8092580:	60a2      	str	r2, [r4, #8]
 8092582:	4a05      	ldr	r2, [pc, #20]	; (8092598 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8092584:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8092586:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8092588:	2201      	movs	r2, #1
 809258a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 809258c:	461a      	mov	r2, r3
 809258e:	f7fe fec3 	bl	8091318 <HAL_USART_Init>
}
 8092592:	4620      	mov	r0, r4
 8092594:	bd10      	pop	{r4, pc}
 8092596:	bf00      	nop
 8092598:	08097728 	.word	0x08097728

0809259c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 809259c:	2300      	movs	r3, #0
 809259e:	7c00      	ldrb	r0, [r0, #16]
 80925a0:	f7fe befa 	b.w	8091398 <HAL_USART_BeginConfig>

080925a4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80925a4:	2200      	movs	r2, #0
 80925a6:	f7ff bff9 	b.w	809259c <_ZN11USARTSerial5beginEmm>

080925aa <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80925aa:	7c00      	ldrb	r0, [r0, #16]
 80925ac:	f7fe bee4 	b.w	8091378 <HAL_USART_Is_Enabled>

080925b0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80925b0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80925b2:	4d0c      	ldr	r5, [pc, #48]	; (80925e4 <_Z22__fetch_global_Serial1v+0x34>)
 80925b4:	6829      	ldr	r1, [r5, #0]
 80925b6:	f011 0401 	ands.w	r4, r1, #1
 80925ba:	d111      	bne.n	80925e0 <_Z22__fetch_global_Serial1v+0x30>
 80925bc:	4628      	mov	r0, r5
 80925be:	f7ed fd74 	bl	80800aa <__cxa_guard_acquire>
 80925c2:	b168      	cbz	r0, 80925e0 <_Z22__fetch_global_Serial1v+0x30>
 80925c4:	4a08      	ldr	r2, [pc, #32]	; (80925e8 <_Z22__fetch_global_Serial1v+0x38>)
 80925c6:	4621      	mov	r1, r4
 80925c8:	4b08      	ldr	r3, [pc, #32]	; (80925ec <_Z22__fetch_global_Serial1v+0x3c>)
 80925ca:	4809      	ldr	r0, [pc, #36]	; (80925f0 <_Z22__fetch_global_Serial1v+0x40>)
 80925cc:	f7ff ffd0 	bl	8092570 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80925d0:	4628      	mov	r0, r5
 80925d2:	f7ed fd6f 	bl	80800b4 <__cxa_guard_release>
 80925d6:	4a07      	ldr	r2, [pc, #28]	; (80925f4 <_Z22__fetch_global_Serial1v+0x44>)
 80925d8:	4907      	ldr	r1, [pc, #28]	; (80925f8 <_Z22__fetch_global_Serial1v+0x48>)
 80925da:	4805      	ldr	r0, [pc, #20]	; (80925f0 <_Z22__fetch_global_Serial1v+0x40>)
 80925dc:	f000 f922 	bl	8092824 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80925e0:	4803      	ldr	r0, [pc, #12]	; (80925f0 <_Z22__fetch_global_Serial1v+0x40>)
 80925e2:	bd38      	pop	{r3, r4, r5, pc}
 80925e4:	20003418 	.word	0x20003418
 80925e8:	2000341c 	.word	0x2000341c
 80925ec:	20003394 	.word	0x20003394
 80925f0:	20003380 	.word	0x20003380
 80925f4:	200004f8 	.word	0x200004f8
 80925f8:	0809063d 	.word	0x0809063d

080925fc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80925fc:	4770      	bx	lr

080925fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80925fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8092600:	4606      	mov	r6, r0
 8092602:	4615      	mov	r5, r2
 8092604:	460c      	mov	r4, r1
 8092606:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8092608:	42bc      	cmp	r4, r7
 809260a:	d006      	beq.n	809261a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 809260c:	6833      	ldr	r3, [r6, #0]
 809260e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8092612:	689b      	ldr	r3, [r3, #8]
 8092614:	4630      	mov	r0, r6
 8092616:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8092618:	e7f6      	b.n	8092608 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 809261a:	4628      	mov	r0, r5
 809261c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0809261e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 809261e:	2200      	movs	r2, #0
 8092620:	7c00      	ldrb	r0, [r0, #16]
 8092622:	f7fe bee1 	b.w	80913e8 <HAL_I2C_Write_Data>

08092626 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8092626:	2100      	movs	r1, #0
 8092628:	7c00      	ldrb	r0, [r0, #16]
 809262a:	f7fe bee5 	b.w	80913f8 <HAL_I2C_Available_Data>

0809262e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 809262e:	2100      	movs	r1, #0
 8092630:	7c00      	ldrb	r0, [r0, #16]
 8092632:	f7fe bee9 	b.w	8091408 <HAL_I2C_Read_Data>

08092636 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8092636:	2100      	movs	r1, #0
 8092638:	7c00      	ldrb	r0, [r0, #16]
 809263a:	f7fe beed 	b.w	8091418 <HAL_I2C_Peek_Data>

0809263e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 809263e:	2100      	movs	r1, #0
 8092640:	7c00      	ldrb	r0, [r0, #16]
 8092642:	f7fe bef1 	b.w	8091428 <HAL_I2C_Flush_Data>

08092646 <_ZN7TwoWireD0Ev>:
 8092646:	b510      	push	{r4, lr}
 8092648:	4604      	mov	r4, r0
 809264a:	f7ed fd2a 	bl	80800a2 <_ZdlPv>
 809264e:	4620      	mov	r0, r4
 8092650:	bd10      	pop	{r4, pc}
	...

08092654 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8092654:	b510      	push	{r4, lr}
 8092656:	4604      	mov	r4, r0
 8092658:	4608      	mov	r0, r1
 809265a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 809265e:	60a3      	str	r3, [r4, #8]
 8092660:	4b04      	ldr	r3, [pc, #16]	; (8092674 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 8092662:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8092664:	7420      	strb	r0, [r4, #16]
 8092666:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8092668:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 809266a:	f7fe feed 	bl	8091448 <HAL_I2C_Init>

}
 809266e:	4620      	mov	r0, r4
 8092670:	bd10      	pop	{r4, pc}
 8092672:	bf00      	nop
 8092674:	08097758 	.word	0x08097758

08092678 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8092678:	2300      	movs	r3, #0
 809267a:	461a      	mov	r2, r3
 809267c:	4619      	mov	r1, r3
 809267e:	7c00      	ldrb	r0, [r0, #16]
 8092680:	f7fe be92 	b.w	80913a8 <HAL_I2C_Begin>

08092684 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8092684:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 8092686:	2400      	movs	r4, #0
 8092688:	7c00      	ldrb	r0, [r0, #16]
 809268a:	9400      	str	r4, [sp, #0]
 809268c:	f7fe fe94 	bl	80913b8 <HAL_I2C_Request_Data>
  return result;
}
 8092690:	b2c0      	uxtb	r0, r0
 8092692:	b002      	add	sp, #8
 8092694:	bd10      	pop	{r4, pc}

08092696 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8092696:	2301      	movs	r3, #1
 8092698:	f7ff bff4 	b.w	8092684 <_ZN7TwoWire11requestFromEhhh>

0809269c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 809269c:	2200      	movs	r2, #0
 809269e:	7c00      	ldrb	r0, [r0, #16]
 80926a0:	f7fe be92 	b.w	80913c8 <HAL_I2C_Begin_Transmission>

080926a4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80926a4:	2200      	movs	r2, #0
 80926a6:	7c00      	ldrb	r0, [r0, #16]
 80926a8:	f7fe be96 	b.w	80913d8 <HAL_I2C_End_Transmission>

080926ac <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80926ac:	2101      	movs	r1, #1
 80926ae:	f7ff bff9 	b.w	80926a4 <_ZN7TwoWire15endTransmissionEh>

080926b2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80926b2:	2100      	movs	r1, #0
 80926b4:	7c00      	ldrb	r0, [r0, #16]
 80926b6:	f7fe bebf 	b.w	8091438 <HAL_I2C_Is_Enabled>
	...

080926bc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80926bc:	b510      	push	{r4, lr}
 80926be:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80926c0:	480f      	ldr	r0, [pc, #60]	; (8092700 <pinAvailable+0x44>)
 80926c2:	f7ff f8ca 	bl	809185a <_ZN8SPIClass9isEnabledEv>
 80926c6:	b128      	cbz	r0, 80926d4 <pinAvailable+0x18>
 80926c8:	f1a4 030d 	sub.w	r3, r4, #13
 80926cc:	2b02      	cmp	r3, #2
 80926ce:	d801      	bhi.n	80926d4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80926d0:	2000      	movs	r0, #0
 80926d2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80926d4:	f000 f886 	bl	80927e4 <_Z19__fetch_global_Wirev>
 80926d8:	f7ff ffeb 	bl	80926b2 <_ZN7TwoWire9isEnabledEv>
 80926dc:	b108      	cbz	r0, 80926e2 <pinAvailable+0x26>
 80926de:	2c01      	cmp	r4, #1
 80926e0:	d9f6      	bls.n	80926d0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80926e2:	f7ff ff65 	bl	80925b0 <_Z22__fetch_global_Serial1v>
 80926e6:	f7ff ff60 	bl	80925aa <_ZN11USARTSerial9isEnabledEv>
 80926ea:	b118      	cbz	r0, 80926f4 <pinAvailable+0x38>
 80926ec:	f1a4 0312 	sub.w	r3, r4, #18
 80926f0:	2b01      	cmp	r3, #1
 80926f2:	d9ed      	bls.n	80926d0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80926f4:	2c2e      	cmp	r4, #46	; 0x2e
 80926f6:	bf8c      	ite	hi
 80926f8:	2000      	movhi	r0, #0
 80926fa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80926fc:	bd10      	pop	{r4, pc}
 80926fe:	bf00      	nop
 8092700:	200034a0 	.word	0x200034a0

08092704 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8092704:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8092706:	b538      	push	{r3, r4, r5, lr}
 8092708:	4604      	mov	r4, r0
 809270a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 809270c:	d80a      	bhi.n	8092724 <pinMode+0x20>
 809270e:	29ff      	cmp	r1, #255	; 0xff
 8092710:	d008      	beq.n	8092724 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8092712:	f7ff ffd3 	bl	80926bc <pinAvailable>
 8092716:	b128      	cbz	r0, 8092724 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8092718:	4629      	mov	r1, r5
 809271a:	4620      	mov	r0, r4
}
 809271c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8092720:	f7fe bd0a 	b.w	8091138 <HAL_Pin_Mode>
 8092724:	bd38      	pop	{r3, r4, r5, pc}

08092726 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8092726:	b538      	push	{r3, r4, r5, lr}
 8092728:	4604      	mov	r4, r0
 809272a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 809272c:	f7fe fd0c 	bl	8091148 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8092730:	28ff      	cmp	r0, #255	; 0xff
 8092732:	d010      	beq.n	8092756 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8092734:	2806      	cmp	r0, #6
 8092736:	d804      	bhi.n	8092742 <digitalWrite+0x1c>
 8092738:	234d      	movs	r3, #77	; 0x4d
 809273a:	fa23 f000 	lsr.w	r0, r3, r0
 809273e:	07c3      	lsls	r3, r0, #31
 8092740:	d409      	bmi.n	8092756 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8092742:	4620      	mov	r0, r4
 8092744:	f7ff ffba 	bl	80926bc <pinAvailable>
 8092748:	b128      	cbz	r0, 8092756 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 809274a:	4629      	mov	r1, r5
 809274c:	4620      	mov	r0, r4
}
 809274e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8092752:	f7fe bd01 	b.w	8091158 <HAL_GPIO_Write>
 8092756:	bd38      	pop	{r3, r4, r5, pc}

08092758 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8092758:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 809275a:	4e11      	ldr	r6, [pc, #68]	; (80927a0 <_GLOBAL__sub_I_SPI+0x48>)
 809275c:	4d11      	ldr	r5, [pc, #68]	; (80927a4 <_GLOBAL__sub_I_SPI+0x4c>)
 809275e:	4c12      	ldr	r4, [pc, #72]	; (80927a8 <_GLOBAL__sub_I_SPI+0x50>)
 8092760:	2100      	movs	r1, #0
 8092762:	4630      	mov	r0, r6
 8092764:	f7fe ffe0 	bl	8091728 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8092768:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 809276a:	4e10      	ldr	r6, [pc, #64]	; (80927ac <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 809276c:	462a      	mov	r2, r5
 809276e:	4621      	mov	r1, r4
 8092770:	f000 f858 	bl	8092824 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8092774:	2101      	movs	r1, #1
 8092776:	4630      	mov	r0, r6
 8092778:	f7fe ffd6 	bl	8091728 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 809277c:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 809277e:	4e0c      	ldr	r6, [pc, #48]	; (80927b0 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8092780:	462a      	mov	r2, r5
 8092782:	4621      	mov	r1, r4
 8092784:	f000 f84e 	bl	8092824 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8092788:	2102      	movs	r1, #2
 809278a:	4630      	mov	r0, r6
 809278c:	f7fe ffcc 	bl	8091728 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8092790:	462a      	mov	r2, r5
 8092792:	4621      	mov	r1, r4
 8092794:	4630      	mov	r0, r6
 8092796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 809279a:	f000 b843 	b.w	8092824 <__aeabi_atexit>
 809279e:	bf00      	nop
 80927a0:	200034a0 	.word	0x200034a0
 80927a4:	200004f8 	.word	0x200004f8
 80927a8:	08091719 	.word	0x08091719
 80927ac:	200034b0 	.word	0x200034b0
 80927b0:	200034c0 	.word	0x200034c0

080927b4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80927b4:	b513      	push	{r0, r1, r4, lr}
 80927b6:	4c08      	ldr	r4, [pc, #32]	; (80927d8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80927b8:	2300      	movs	r3, #0
 80927ba:	461a      	mov	r2, r3
 80927bc:	4619      	mov	r1, r3
 80927be:	9300      	str	r3, [sp, #0]
 80927c0:	4620      	mov	r0, r4
 80927c2:	f7ff fdb1 	bl	8092328 <_ZN9IPAddressC1Ehhhh>
 80927c6:	4620      	mov	r0, r4
 80927c8:	4a04      	ldr	r2, [pc, #16]	; (80927dc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80927ca:	4905      	ldr	r1, [pc, #20]	; (80927e0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80927cc:	b002      	add	sp, #8
 80927ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80927d2:	f000 b827 	b.w	8092824 <__aeabi_atexit>
 80927d6:	bf00      	nop
 80927d8:	200034d4 	.word	0x200034d4
 80927dc:	200004f8 	.word	0x200004f8
 80927e0:	080922c1 	.word	0x080922c1

080927e4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80927e4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80927e6:	4d0b      	ldr	r5, [pc, #44]	; (8092814 <_Z19__fetch_global_Wirev+0x30>)
 80927e8:	6829      	ldr	r1, [r5, #0]
 80927ea:	f011 0401 	ands.w	r4, r1, #1
 80927ee:	d10f      	bne.n	8092810 <_Z19__fetch_global_Wirev+0x2c>
 80927f0:	4628      	mov	r0, r5
 80927f2:	f7ed fc5a 	bl	80800aa <__cxa_guard_acquire>
 80927f6:	b158      	cbz	r0, 8092810 <_Z19__fetch_global_Wirev+0x2c>
 80927f8:	4621      	mov	r1, r4
 80927fa:	4807      	ldr	r0, [pc, #28]	; (8092818 <_Z19__fetch_global_Wirev+0x34>)
 80927fc:	f7ff ff2a 	bl	8092654 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8092800:	4628      	mov	r0, r5
 8092802:	f7ed fc57 	bl	80800b4 <__cxa_guard_release>
 8092806:	4a05      	ldr	r2, [pc, #20]	; (809281c <_Z19__fetch_global_Wirev+0x38>)
 8092808:	4905      	ldr	r1, [pc, #20]	; (8092820 <_Z19__fetch_global_Wirev+0x3c>)
 809280a:	4803      	ldr	r0, [pc, #12]	; (8092818 <_Z19__fetch_global_Wirev+0x34>)
 809280c:	f000 f80a 	bl	8092824 <__aeabi_atexit>
	return wire;
}
 8092810:	4801      	ldr	r0, [pc, #4]	; (8092818 <_Z19__fetch_global_Wirev+0x34>)
 8092812:	bd38      	pop	{r3, r4, r5, pc}
 8092814:	200034dc 	.word	0x200034dc
 8092818:	200034e0 	.word	0x200034e0
 809281c:	200004f8 	.word	0x200004f8
 8092820:	080925fd 	.word	0x080925fd

08092824 <__aeabi_atexit>:
 8092824:	460b      	mov	r3, r1
 8092826:	4601      	mov	r1, r0
 8092828:	4618      	mov	r0, r3
 809282a:	f000 bd7d 	b.w	8093328 <__cxa_atexit>

0809282e <_ZSt25__throw_bad_function_callv>:
 809282e:	b508      	push	{r3, lr}
 8092830:	f7fe ff62 	bl	80916f8 <abort>

08092834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8092834:	4b18      	ldr	r3, [pc, #96]	; (8092898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8092836:	681a      	ldr	r2, [r3, #0]
 8092838:	07d1      	lsls	r1, r2, #31
 809283a:	bf5c      	itt	pl
 809283c:	2201      	movpl	r2, #1
 809283e:	601a      	strpl	r2, [r3, #0]
 8092840:	4b16      	ldr	r3, [pc, #88]	; (809289c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8092842:	681a      	ldr	r2, [r3, #0]
 8092844:	07d2      	lsls	r2, r2, #31
 8092846:	bf5c      	itt	pl
 8092848:	2201      	movpl	r2, #1
 809284a:	601a      	strpl	r2, [r3, #0]
 809284c:	4b14      	ldr	r3, [pc, #80]	; (80928a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 809284e:	681a      	ldr	r2, [r3, #0]
 8092850:	07d0      	lsls	r0, r2, #31
 8092852:	bf5c      	itt	pl
 8092854:	2201      	movpl	r2, #1
 8092856:	601a      	strpl	r2, [r3, #0]
 8092858:	4b12      	ldr	r3, [pc, #72]	; (80928a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 809285a:	681a      	ldr	r2, [r3, #0]
 809285c:	07d1      	lsls	r1, r2, #31
 809285e:	bf5c      	itt	pl
 8092860:	2201      	movpl	r2, #1
 8092862:	601a      	strpl	r2, [r3, #0]
 8092864:	4b10      	ldr	r3, [pc, #64]	; (80928a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8092866:	681a      	ldr	r2, [r3, #0]
 8092868:	07d2      	lsls	r2, r2, #31
 809286a:	bf5c      	itt	pl
 809286c:	2201      	movpl	r2, #1
 809286e:	601a      	strpl	r2, [r3, #0]
 8092870:	4b0e      	ldr	r3, [pc, #56]	; (80928ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8092872:	681a      	ldr	r2, [r3, #0]
 8092874:	07d0      	lsls	r0, r2, #31
 8092876:	bf5c      	itt	pl
 8092878:	2201      	movpl	r2, #1
 809287a:	601a      	strpl	r2, [r3, #0]
 809287c:	4b0c      	ldr	r3, [pc, #48]	; (80928b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 809287e:	681a      	ldr	r2, [r3, #0]
 8092880:	07d1      	lsls	r1, r2, #31
 8092882:	bf5c      	itt	pl
 8092884:	2201      	movpl	r2, #1
 8092886:	601a      	strpl	r2, [r3, #0]
 8092888:	4b0a      	ldr	r3, [pc, #40]	; (80928b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 809288a:	681a      	ldr	r2, [r3, #0]
 809288c:	07d2      	lsls	r2, r2, #31
 809288e:	bf5c      	itt	pl
 8092890:	2201      	movpl	r2, #1
 8092892:	601a      	strpl	r2, [r3, #0]
 8092894:	4770      	bx	lr
 8092896:	bf00      	nop
 8092898:	20003510 	.word	0x20003510
 809289c:	2000350c 	.word	0x2000350c
 80928a0:	20003508 	.word	0x20003508
 80928a4:	20003504 	.word	0x20003504
 80928a8:	20003500 	.word	0x20003500
 80928ac:	200034fc 	.word	0x200034fc
 80928b0:	200034f8 	.word	0x200034f8
 80928b4:	200034f4 	.word	0x200034f4

080928b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80928b8:	4b24      	ldr	r3, [pc, #144]	; (809294c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80928ba:	681a      	ldr	r2, [r3, #0]
 80928bc:	07d0      	lsls	r0, r2, #31
 80928be:	bf5c      	itt	pl
 80928c0:	2201      	movpl	r2, #1
 80928c2:	601a      	strpl	r2, [r3, #0]
 80928c4:	4b22      	ldr	r3, [pc, #136]	; (8092950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80928c6:	681a      	ldr	r2, [r3, #0]
 80928c8:	07d1      	lsls	r1, r2, #31
 80928ca:	bf5c      	itt	pl
 80928cc:	2201      	movpl	r2, #1
 80928ce:	601a      	strpl	r2, [r3, #0]
 80928d0:	4b20      	ldr	r3, [pc, #128]	; (8092954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80928d2:	681a      	ldr	r2, [r3, #0]
 80928d4:	07d2      	lsls	r2, r2, #31
 80928d6:	bf5c      	itt	pl
 80928d8:	2201      	movpl	r2, #1
 80928da:	601a      	strpl	r2, [r3, #0]
 80928dc:	4b1e      	ldr	r3, [pc, #120]	; (8092958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80928de:	681a      	ldr	r2, [r3, #0]
 80928e0:	07d0      	lsls	r0, r2, #31
 80928e2:	bf5c      	itt	pl
 80928e4:	2201      	movpl	r2, #1
 80928e6:	601a      	strpl	r2, [r3, #0]
 80928e8:	4b1c      	ldr	r3, [pc, #112]	; (809295c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80928ea:	681a      	ldr	r2, [r3, #0]
 80928ec:	07d1      	lsls	r1, r2, #31
 80928ee:	bf5c      	itt	pl
 80928f0:	2201      	movpl	r2, #1
 80928f2:	601a      	strpl	r2, [r3, #0]
 80928f4:	4b1a      	ldr	r3, [pc, #104]	; (8092960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80928f6:	681a      	ldr	r2, [r3, #0]
 80928f8:	07d2      	lsls	r2, r2, #31
 80928fa:	bf5c      	itt	pl
 80928fc:	2201      	movpl	r2, #1
 80928fe:	601a      	strpl	r2, [r3, #0]
 8092900:	4b18      	ldr	r3, [pc, #96]	; (8092964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8092902:	681a      	ldr	r2, [r3, #0]
 8092904:	07d0      	lsls	r0, r2, #31
 8092906:	bf5c      	itt	pl
 8092908:	2201      	movpl	r2, #1
 809290a:	601a      	strpl	r2, [r3, #0]
 809290c:	4b16      	ldr	r3, [pc, #88]	; (8092968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 809290e:	681a      	ldr	r2, [r3, #0]
 8092910:	07d1      	lsls	r1, r2, #31
 8092912:	bf5c      	itt	pl
 8092914:	2201      	movpl	r2, #1
 8092916:	601a      	strpl	r2, [r3, #0]
 8092918:	4b14      	ldr	r3, [pc, #80]	; (809296c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 809291a:	681a      	ldr	r2, [r3, #0]
 809291c:	07d2      	lsls	r2, r2, #31
 809291e:	bf5c      	itt	pl
 8092920:	2201      	movpl	r2, #1
 8092922:	601a      	strpl	r2, [r3, #0]
 8092924:	4b12      	ldr	r3, [pc, #72]	; (8092970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8092926:	681a      	ldr	r2, [r3, #0]
 8092928:	07d0      	lsls	r0, r2, #31
 809292a:	bf5c      	itt	pl
 809292c:	2201      	movpl	r2, #1
 809292e:	601a      	strpl	r2, [r3, #0]
 8092930:	4b10      	ldr	r3, [pc, #64]	; (8092974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8092932:	681a      	ldr	r2, [r3, #0]
 8092934:	07d1      	lsls	r1, r2, #31
 8092936:	bf5c      	itt	pl
 8092938:	2201      	movpl	r2, #1
 809293a:	601a      	strpl	r2, [r3, #0]
 809293c:	4b0e      	ldr	r3, [pc, #56]	; (8092978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 809293e:	681a      	ldr	r2, [r3, #0]
 8092940:	07d2      	lsls	r2, r2, #31
 8092942:	bf5c      	itt	pl
 8092944:	2201      	movpl	r2, #1
 8092946:	601a      	strpl	r2, [r3, #0]
 8092948:	4770      	bx	lr
 809294a:	bf00      	nop
 809294c:	20003540 	.word	0x20003540
 8092950:	2000353c 	.word	0x2000353c
 8092954:	20003538 	.word	0x20003538
 8092958:	20003534 	.word	0x20003534
 809295c:	20003530 	.word	0x20003530
 8092960:	2000352c 	.word	0x2000352c
 8092964:	20003528 	.word	0x20003528
 8092968:	20003524 	.word	0x20003524
 809296c:	20003520 	.word	0x20003520
 8092970:	2000351c 	.word	0x2000351c
 8092974:	20003518 	.word	0x20003518
 8092978:	20003514 	.word	0x20003514

0809297c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 809297c:	4b24      	ldr	r3, [pc, #144]	; (8092a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 809297e:	681a      	ldr	r2, [r3, #0]
 8092980:	07d0      	lsls	r0, r2, #31
 8092982:	bf5c      	itt	pl
 8092984:	2201      	movpl	r2, #1
 8092986:	601a      	strpl	r2, [r3, #0]
 8092988:	4b22      	ldr	r3, [pc, #136]	; (8092a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 809298a:	681a      	ldr	r2, [r3, #0]
 809298c:	07d1      	lsls	r1, r2, #31
 809298e:	bf5c      	itt	pl
 8092990:	2201      	movpl	r2, #1
 8092992:	601a      	strpl	r2, [r3, #0]
 8092994:	4b20      	ldr	r3, [pc, #128]	; (8092a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8092996:	681a      	ldr	r2, [r3, #0]
 8092998:	07d2      	lsls	r2, r2, #31
 809299a:	bf5c      	itt	pl
 809299c:	2201      	movpl	r2, #1
 809299e:	601a      	strpl	r2, [r3, #0]
 80929a0:	4b1e      	ldr	r3, [pc, #120]	; (8092a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80929a2:	681a      	ldr	r2, [r3, #0]
 80929a4:	07d0      	lsls	r0, r2, #31
 80929a6:	bf5c      	itt	pl
 80929a8:	2201      	movpl	r2, #1
 80929aa:	601a      	strpl	r2, [r3, #0]
 80929ac:	4b1c      	ldr	r3, [pc, #112]	; (8092a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80929ae:	681a      	ldr	r2, [r3, #0]
 80929b0:	07d1      	lsls	r1, r2, #31
 80929b2:	bf5c      	itt	pl
 80929b4:	2201      	movpl	r2, #1
 80929b6:	601a      	strpl	r2, [r3, #0]
 80929b8:	4b1a      	ldr	r3, [pc, #104]	; (8092a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80929ba:	681a      	ldr	r2, [r3, #0]
 80929bc:	07d2      	lsls	r2, r2, #31
 80929be:	bf5c      	itt	pl
 80929c0:	2201      	movpl	r2, #1
 80929c2:	601a      	strpl	r2, [r3, #0]
 80929c4:	4b18      	ldr	r3, [pc, #96]	; (8092a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80929c6:	681a      	ldr	r2, [r3, #0]
 80929c8:	07d0      	lsls	r0, r2, #31
 80929ca:	bf5c      	itt	pl
 80929cc:	2201      	movpl	r2, #1
 80929ce:	601a      	strpl	r2, [r3, #0]
 80929d0:	4b16      	ldr	r3, [pc, #88]	; (8092a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80929d2:	681a      	ldr	r2, [r3, #0]
 80929d4:	07d1      	lsls	r1, r2, #31
 80929d6:	bf5c      	itt	pl
 80929d8:	2201      	movpl	r2, #1
 80929da:	601a      	strpl	r2, [r3, #0]
 80929dc:	4b14      	ldr	r3, [pc, #80]	; (8092a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80929de:	681a      	ldr	r2, [r3, #0]
 80929e0:	07d2      	lsls	r2, r2, #31
 80929e2:	bf5c      	itt	pl
 80929e4:	2201      	movpl	r2, #1
 80929e6:	601a      	strpl	r2, [r3, #0]
 80929e8:	4b12      	ldr	r3, [pc, #72]	; (8092a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80929ea:	681a      	ldr	r2, [r3, #0]
 80929ec:	07d0      	lsls	r0, r2, #31
 80929ee:	bf5c      	itt	pl
 80929f0:	2201      	movpl	r2, #1
 80929f2:	601a      	strpl	r2, [r3, #0]
 80929f4:	4b10      	ldr	r3, [pc, #64]	; (8092a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80929f6:	681a      	ldr	r2, [r3, #0]
 80929f8:	07d1      	lsls	r1, r2, #31
 80929fa:	bf5c      	itt	pl
 80929fc:	2201      	movpl	r2, #1
 80929fe:	601a      	strpl	r2, [r3, #0]
 8092a00:	4b0e      	ldr	r3, [pc, #56]	; (8092a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8092a02:	681a      	ldr	r2, [r3, #0]
 8092a04:	07d2      	lsls	r2, r2, #31
 8092a06:	bf5c      	itt	pl
 8092a08:	2201      	movpl	r2, #1
 8092a0a:	601a      	strpl	r2, [r3, #0]
 8092a0c:	4770      	bx	lr
 8092a0e:	bf00      	nop
 8092a10:	20003570 	.word	0x20003570
 8092a14:	2000356c 	.word	0x2000356c
 8092a18:	20003568 	.word	0x20003568
 8092a1c:	20003564 	.word	0x20003564
 8092a20:	20003560 	.word	0x20003560
 8092a24:	2000355c 	.word	0x2000355c
 8092a28:	20003558 	.word	0x20003558
 8092a2c:	20003554 	.word	0x20003554
 8092a30:	20003550 	.word	0x20003550
 8092a34:	2000354c 	.word	0x2000354c
 8092a38:	20003548 	.word	0x20003548
 8092a3c:	20003544 	.word	0x20003544

08092a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8092a40:	4b18      	ldr	r3, [pc, #96]	; (8092aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8092a42:	681a      	ldr	r2, [r3, #0]
 8092a44:	07d1      	lsls	r1, r2, #31
 8092a46:	bf5c      	itt	pl
 8092a48:	2201      	movpl	r2, #1
 8092a4a:	601a      	strpl	r2, [r3, #0]
 8092a4c:	4b16      	ldr	r3, [pc, #88]	; (8092aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8092a4e:	681a      	ldr	r2, [r3, #0]
 8092a50:	07d2      	lsls	r2, r2, #31
 8092a52:	bf5c      	itt	pl
 8092a54:	2201      	movpl	r2, #1
 8092a56:	601a      	strpl	r2, [r3, #0]
 8092a58:	4b14      	ldr	r3, [pc, #80]	; (8092aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8092a5a:	681a      	ldr	r2, [r3, #0]
 8092a5c:	07d0      	lsls	r0, r2, #31
 8092a5e:	bf5c      	itt	pl
 8092a60:	2201      	movpl	r2, #1
 8092a62:	601a      	strpl	r2, [r3, #0]
 8092a64:	4b12      	ldr	r3, [pc, #72]	; (8092ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8092a66:	681a      	ldr	r2, [r3, #0]
 8092a68:	07d1      	lsls	r1, r2, #31
 8092a6a:	bf5c      	itt	pl
 8092a6c:	2201      	movpl	r2, #1
 8092a6e:	601a      	strpl	r2, [r3, #0]
 8092a70:	4b10      	ldr	r3, [pc, #64]	; (8092ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8092a72:	681a      	ldr	r2, [r3, #0]
 8092a74:	07d2      	lsls	r2, r2, #31
 8092a76:	bf5c      	itt	pl
 8092a78:	2201      	movpl	r2, #1
 8092a7a:	601a      	strpl	r2, [r3, #0]
 8092a7c:	4b0e      	ldr	r3, [pc, #56]	; (8092ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8092a7e:	681a      	ldr	r2, [r3, #0]
 8092a80:	07d0      	lsls	r0, r2, #31
 8092a82:	bf5c      	itt	pl
 8092a84:	2201      	movpl	r2, #1
 8092a86:	601a      	strpl	r2, [r3, #0]
 8092a88:	4b0c      	ldr	r3, [pc, #48]	; (8092abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8092a8a:	681a      	ldr	r2, [r3, #0]
 8092a8c:	07d1      	lsls	r1, r2, #31
 8092a8e:	bf5c      	itt	pl
 8092a90:	2201      	movpl	r2, #1
 8092a92:	601a      	strpl	r2, [r3, #0]
 8092a94:	4b0a      	ldr	r3, [pc, #40]	; (8092ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8092a96:	681a      	ldr	r2, [r3, #0]
 8092a98:	07d2      	lsls	r2, r2, #31
 8092a9a:	bf5c      	itt	pl
 8092a9c:	2201      	movpl	r2, #1
 8092a9e:	601a      	strpl	r2, [r3, #0]
 8092aa0:	4770      	bx	lr
 8092aa2:	bf00      	nop
 8092aa4:	20003590 	.word	0x20003590
 8092aa8:	2000358c 	.word	0x2000358c
 8092aac:	20003588 	.word	0x20003588
 8092ab0:	20003584 	.word	0x20003584
 8092ab4:	20003580 	.word	0x20003580
 8092ab8:	2000357c 	.word	0x2000357c
 8092abc:	20003578 	.word	0x20003578
 8092ac0:	20003574 	.word	0x20003574

08092ac4 <__aeabi_frsub>:
 8092ac4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8092ac8:	e002      	b.n	8092ad0 <__addsf3>
 8092aca:	bf00      	nop

08092acc <__aeabi_fsub>:
 8092acc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08092ad0 <__addsf3>:
 8092ad0:	0042      	lsls	r2, r0, #1
 8092ad2:	bf1f      	itttt	ne
 8092ad4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8092ad8:	ea92 0f03 	teqne	r2, r3
 8092adc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8092ae0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8092ae4:	d06a      	beq.n	8092bbc <__addsf3+0xec>
 8092ae6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8092aea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8092aee:	bfc1      	itttt	gt
 8092af0:	18d2      	addgt	r2, r2, r3
 8092af2:	4041      	eorgt	r1, r0
 8092af4:	4048      	eorgt	r0, r1
 8092af6:	4041      	eorgt	r1, r0
 8092af8:	bfb8      	it	lt
 8092afa:	425b      	neglt	r3, r3
 8092afc:	2b19      	cmp	r3, #25
 8092afe:	bf88      	it	hi
 8092b00:	4770      	bxhi	lr
 8092b02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8092b06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8092b0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8092b0e:	bf18      	it	ne
 8092b10:	4240      	negne	r0, r0
 8092b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8092b16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8092b1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8092b1e:	bf18      	it	ne
 8092b20:	4249      	negne	r1, r1
 8092b22:	ea92 0f03 	teq	r2, r3
 8092b26:	d03f      	beq.n	8092ba8 <__addsf3+0xd8>
 8092b28:	f1a2 0201 	sub.w	r2, r2, #1
 8092b2c:	fa41 fc03 	asr.w	ip, r1, r3
 8092b30:	eb10 000c 	adds.w	r0, r0, ip
 8092b34:	f1c3 0320 	rsb	r3, r3, #32
 8092b38:	fa01 f103 	lsl.w	r1, r1, r3
 8092b3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8092b40:	d502      	bpl.n	8092b48 <__addsf3+0x78>
 8092b42:	4249      	negs	r1, r1
 8092b44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8092b48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8092b4c:	d313      	bcc.n	8092b76 <__addsf3+0xa6>
 8092b4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8092b52:	d306      	bcc.n	8092b62 <__addsf3+0x92>
 8092b54:	0840      	lsrs	r0, r0, #1
 8092b56:	ea4f 0131 	mov.w	r1, r1, rrx
 8092b5a:	f102 0201 	add.w	r2, r2, #1
 8092b5e:	2afe      	cmp	r2, #254	; 0xfe
 8092b60:	d251      	bcs.n	8092c06 <__addsf3+0x136>
 8092b62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8092b66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8092b6a:	bf08      	it	eq
 8092b6c:	f020 0001 	biceq.w	r0, r0, #1
 8092b70:	ea40 0003 	orr.w	r0, r0, r3
 8092b74:	4770      	bx	lr
 8092b76:	0049      	lsls	r1, r1, #1
 8092b78:	eb40 0000 	adc.w	r0, r0, r0
 8092b7c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8092b80:	f1a2 0201 	sub.w	r2, r2, #1
 8092b84:	d1ed      	bne.n	8092b62 <__addsf3+0x92>
 8092b86:	fab0 fc80 	clz	ip, r0
 8092b8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8092b8e:	ebb2 020c 	subs.w	r2, r2, ip
 8092b92:	fa00 f00c 	lsl.w	r0, r0, ip
 8092b96:	bfaa      	itet	ge
 8092b98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8092b9c:	4252      	neglt	r2, r2
 8092b9e:	4318      	orrge	r0, r3
 8092ba0:	bfbc      	itt	lt
 8092ba2:	40d0      	lsrlt	r0, r2
 8092ba4:	4318      	orrlt	r0, r3
 8092ba6:	4770      	bx	lr
 8092ba8:	f092 0f00 	teq	r2, #0
 8092bac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8092bb0:	bf06      	itte	eq
 8092bb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8092bb6:	3201      	addeq	r2, #1
 8092bb8:	3b01      	subne	r3, #1
 8092bba:	e7b5      	b.n	8092b28 <__addsf3+0x58>
 8092bbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8092bc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8092bc4:	bf18      	it	ne
 8092bc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8092bca:	d021      	beq.n	8092c10 <__addsf3+0x140>
 8092bcc:	ea92 0f03 	teq	r2, r3
 8092bd0:	d004      	beq.n	8092bdc <__addsf3+0x10c>
 8092bd2:	f092 0f00 	teq	r2, #0
 8092bd6:	bf08      	it	eq
 8092bd8:	4608      	moveq	r0, r1
 8092bda:	4770      	bx	lr
 8092bdc:	ea90 0f01 	teq	r0, r1
 8092be0:	bf1c      	itt	ne
 8092be2:	2000      	movne	r0, #0
 8092be4:	4770      	bxne	lr
 8092be6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8092bea:	d104      	bne.n	8092bf6 <__addsf3+0x126>
 8092bec:	0040      	lsls	r0, r0, #1
 8092bee:	bf28      	it	cs
 8092bf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8092bf4:	4770      	bx	lr
 8092bf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8092bfa:	bf3c      	itt	cc
 8092bfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8092c00:	4770      	bxcc	lr
 8092c02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8092c06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8092c0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8092c0e:	4770      	bx	lr
 8092c10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8092c14:	bf16      	itet	ne
 8092c16:	4608      	movne	r0, r1
 8092c18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8092c1c:	4601      	movne	r1, r0
 8092c1e:	0242      	lsls	r2, r0, #9
 8092c20:	bf06      	itte	eq
 8092c22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8092c26:	ea90 0f01 	teqeq	r0, r1
 8092c2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8092c2e:	4770      	bx	lr

08092c30 <__aeabi_ui2f>:
 8092c30:	f04f 0300 	mov.w	r3, #0
 8092c34:	e004      	b.n	8092c40 <__aeabi_i2f+0x8>
 8092c36:	bf00      	nop

08092c38 <__aeabi_i2f>:
 8092c38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8092c3c:	bf48      	it	mi
 8092c3e:	4240      	negmi	r0, r0
 8092c40:	ea5f 0c00 	movs.w	ip, r0
 8092c44:	bf08      	it	eq
 8092c46:	4770      	bxeq	lr
 8092c48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8092c4c:	4601      	mov	r1, r0
 8092c4e:	f04f 0000 	mov.w	r0, #0
 8092c52:	e01c      	b.n	8092c8e <__aeabi_l2f+0x2a>

08092c54 <__aeabi_ul2f>:
 8092c54:	ea50 0201 	orrs.w	r2, r0, r1
 8092c58:	bf08      	it	eq
 8092c5a:	4770      	bxeq	lr
 8092c5c:	f04f 0300 	mov.w	r3, #0
 8092c60:	e00a      	b.n	8092c78 <__aeabi_l2f+0x14>
 8092c62:	bf00      	nop

08092c64 <__aeabi_l2f>:
 8092c64:	ea50 0201 	orrs.w	r2, r0, r1
 8092c68:	bf08      	it	eq
 8092c6a:	4770      	bxeq	lr
 8092c6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8092c70:	d502      	bpl.n	8092c78 <__aeabi_l2f+0x14>
 8092c72:	4240      	negs	r0, r0
 8092c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8092c78:	ea5f 0c01 	movs.w	ip, r1
 8092c7c:	bf02      	ittt	eq
 8092c7e:	4684      	moveq	ip, r0
 8092c80:	4601      	moveq	r1, r0
 8092c82:	2000      	moveq	r0, #0
 8092c84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8092c88:	bf08      	it	eq
 8092c8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8092c8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8092c92:	fabc f28c 	clz	r2, ip
 8092c96:	3a08      	subs	r2, #8
 8092c98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8092c9c:	db10      	blt.n	8092cc0 <__aeabi_l2f+0x5c>
 8092c9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8092ca2:	4463      	add	r3, ip
 8092ca4:	fa00 fc02 	lsl.w	ip, r0, r2
 8092ca8:	f1c2 0220 	rsb	r2, r2, #32
 8092cac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8092cb0:	fa20 f202 	lsr.w	r2, r0, r2
 8092cb4:	eb43 0002 	adc.w	r0, r3, r2
 8092cb8:	bf08      	it	eq
 8092cba:	f020 0001 	biceq.w	r0, r0, #1
 8092cbe:	4770      	bx	lr
 8092cc0:	f102 0220 	add.w	r2, r2, #32
 8092cc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8092cc8:	f1c2 0220 	rsb	r2, r2, #32
 8092ccc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8092cd0:	fa21 f202 	lsr.w	r2, r1, r2
 8092cd4:	eb43 0002 	adc.w	r0, r3, r2
 8092cd8:	bf08      	it	eq
 8092cda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8092cde:	4770      	bx	lr

08092ce0 <__aeabi_fmul>:
 8092ce0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8092ce4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8092ce8:	bf1e      	ittt	ne
 8092cea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8092cee:	ea92 0f0c 	teqne	r2, ip
 8092cf2:	ea93 0f0c 	teqne	r3, ip
 8092cf6:	d06f      	beq.n	8092dd8 <__aeabi_fmul+0xf8>
 8092cf8:	441a      	add	r2, r3
 8092cfa:	ea80 0c01 	eor.w	ip, r0, r1
 8092cfe:	0240      	lsls	r0, r0, #9
 8092d00:	bf18      	it	ne
 8092d02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8092d06:	d01e      	beq.n	8092d46 <__aeabi_fmul+0x66>
 8092d08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8092d0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8092d10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8092d14:	fba0 3101 	umull	r3, r1, r0, r1
 8092d18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8092d1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8092d20:	bf3e      	ittt	cc
 8092d22:	0049      	lslcc	r1, r1, #1
 8092d24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8092d28:	005b      	lslcc	r3, r3, #1
 8092d2a:	ea40 0001 	orr.w	r0, r0, r1
 8092d2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8092d32:	2afd      	cmp	r2, #253	; 0xfd
 8092d34:	d81d      	bhi.n	8092d72 <__aeabi_fmul+0x92>
 8092d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8092d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8092d3e:	bf08      	it	eq
 8092d40:	f020 0001 	biceq.w	r0, r0, #1
 8092d44:	4770      	bx	lr
 8092d46:	f090 0f00 	teq	r0, #0
 8092d4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8092d4e:	bf08      	it	eq
 8092d50:	0249      	lsleq	r1, r1, #9
 8092d52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8092d56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8092d5a:	3a7f      	subs	r2, #127	; 0x7f
 8092d5c:	bfc2      	ittt	gt
 8092d5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8092d62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8092d66:	4770      	bxgt	lr
 8092d68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8092d6c:	f04f 0300 	mov.w	r3, #0
 8092d70:	3a01      	subs	r2, #1
 8092d72:	dc5d      	bgt.n	8092e30 <__aeabi_fmul+0x150>
 8092d74:	f112 0f19 	cmn.w	r2, #25
 8092d78:	bfdc      	itt	le
 8092d7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8092d7e:	4770      	bxle	lr
 8092d80:	f1c2 0200 	rsb	r2, r2, #0
 8092d84:	0041      	lsls	r1, r0, #1
 8092d86:	fa21 f102 	lsr.w	r1, r1, r2
 8092d8a:	f1c2 0220 	rsb	r2, r2, #32
 8092d8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8092d92:	ea5f 0031 	movs.w	r0, r1, rrx
 8092d96:	f140 0000 	adc.w	r0, r0, #0
 8092d9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8092d9e:	bf08      	it	eq
 8092da0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8092da4:	4770      	bx	lr
 8092da6:	f092 0f00 	teq	r2, #0
 8092daa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8092dae:	bf02      	ittt	eq
 8092db0:	0040      	lsleq	r0, r0, #1
 8092db2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8092db6:	3a01      	subeq	r2, #1
 8092db8:	d0f9      	beq.n	8092dae <__aeabi_fmul+0xce>
 8092dba:	ea40 000c 	orr.w	r0, r0, ip
 8092dbe:	f093 0f00 	teq	r3, #0
 8092dc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8092dc6:	bf02      	ittt	eq
 8092dc8:	0049      	lsleq	r1, r1, #1
 8092dca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8092dce:	3b01      	subeq	r3, #1
 8092dd0:	d0f9      	beq.n	8092dc6 <__aeabi_fmul+0xe6>
 8092dd2:	ea41 010c 	orr.w	r1, r1, ip
 8092dd6:	e78f      	b.n	8092cf8 <__aeabi_fmul+0x18>
 8092dd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8092ddc:	ea92 0f0c 	teq	r2, ip
 8092de0:	bf18      	it	ne
 8092de2:	ea93 0f0c 	teqne	r3, ip
 8092de6:	d00a      	beq.n	8092dfe <__aeabi_fmul+0x11e>
 8092de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8092dec:	bf18      	it	ne
 8092dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8092df2:	d1d8      	bne.n	8092da6 <__aeabi_fmul+0xc6>
 8092df4:	ea80 0001 	eor.w	r0, r0, r1
 8092df8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8092dfc:	4770      	bx	lr
 8092dfe:	f090 0f00 	teq	r0, #0
 8092e02:	bf17      	itett	ne
 8092e04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8092e08:	4608      	moveq	r0, r1
 8092e0a:	f091 0f00 	teqne	r1, #0
 8092e0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8092e12:	d014      	beq.n	8092e3e <__aeabi_fmul+0x15e>
 8092e14:	ea92 0f0c 	teq	r2, ip
 8092e18:	d101      	bne.n	8092e1e <__aeabi_fmul+0x13e>
 8092e1a:	0242      	lsls	r2, r0, #9
 8092e1c:	d10f      	bne.n	8092e3e <__aeabi_fmul+0x15e>
 8092e1e:	ea93 0f0c 	teq	r3, ip
 8092e22:	d103      	bne.n	8092e2c <__aeabi_fmul+0x14c>
 8092e24:	024b      	lsls	r3, r1, #9
 8092e26:	bf18      	it	ne
 8092e28:	4608      	movne	r0, r1
 8092e2a:	d108      	bne.n	8092e3e <__aeabi_fmul+0x15e>
 8092e2c:	ea80 0001 	eor.w	r0, r0, r1
 8092e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8092e34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8092e38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8092e3c:	4770      	bx	lr
 8092e3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8092e42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8092e46:	4770      	bx	lr

08092e48 <__aeabi_fdiv>:
 8092e48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8092e4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8092e50:	bf1e      	ittt	ne
 8092e52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8092e56:	ea92 0f0c 	teqne	r2, ip
 8092e5a:	ea93 0f0c 	teqne	r3, ip
 8092e5e:	d069      	beq.n	8092f34 <__aeabi_fdiv+0xec>
 8092e60:	eba2 0203 	sub.w	r2, r2, r3
 8092e64:	ea80 0c01 	eor.w	ip, r0, r1
 8092e68:	0249      	lsls	r1, r1, #9
 8092e6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8092e6e:	d037      	beq.n	8092ee0 <__aeabi_fdiv+0x98>
 8092e70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8092e74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8092e78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8092e7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8092e80:	428b      	cmp	r3, r1
 8092e82:	bf38      	it	cc
 8092e84:	005b      	lslcc	r3, r3, #1
 8092e86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8092e8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8092e8e:	428b      	cmp	r3, r1
 8092e90:	bf24      	itt	cs
 8092e92:	1a5b      	subcs	r3, r3, r1
 8092e94:	ea40 000c 	orrcs.w	r0, r0, ip
 8092e98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8092e9c:	bf24      	itt	cs
 8092e9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8092ea2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8092ea6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8092eaa:	bf24      	itt	cs
 8092eac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8092eb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8092eb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8092eb8:	bf24      	itt	cs
 8092eba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8092ebe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8092ec2:	011b      	lsls	r3, r3, #4
 8092ec4:	bf18      	it	ne
 8092ec6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8092eca:	d1e0      	bne.n	8092e8e <__aeabi_fdiv+0x46>
 8092ecc:	2afd      	cmp	r2, #253	; 0xfd
 8092ece:	f63f af50 	bhi.w	8092d72 <__aeabi_fmul+0x92>
 8092ed2:	428b      	cmp	r3, r1
 8092ed4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8092ed8:	bf08      	it	eq
 8092eda:	f020 0001 	biceq.w	r0, r0, #1
 8092ede:	4770      	bx	lr
 8092ee0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8092ee4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8092ee8:	327f      	adds	r2, #127	; 0x7f
 8092eea:	bfc2      	ittt	gt
 8092eec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8092ef0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8092ef4:	4770      	bxgt	lr
 8092ef6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8092efa:	f04f 0300 	mov.w	r3, #0
 8092efe:	3a01      	subs	r2, #1
 8092f00:	e737      	b.n	8092d72 <__aeabi_fmul+0x92>
 8092f02:	f092 0f00 	teq	r2, #0
 8092f06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8092f0a:	bf02      	ittt	eq
 8092f0c:	0040      	lsleq	r0, r0, #1
 8092f0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8092f12:	3a01      	subeq	r2, #1
 8092f14:	d0f9      	beq.n	8092f0a <__aeabi_fdiv+0xc2>
 8092f16:	ea40 000c 	orr.w	r0, r0, ip
 8092f1a:	f093 0f00 	teq	r3, #0
 8092f1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8092f22:	bf02      	ittt	eq
 8092f24:	0049      	lsleq	r1, r1, #1
 8092f26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8092f2a:	3b01      	subeq	r3, #1
 8092f2c:	d0f9      	beq.n	8092f22 <__aeabi_fdiv+0xda>
 8092f2e:	ea41 010c 	orr.w	r1, r1, ip
 8092f32:	e795      	b.n	8092e60 <__aeabi_fdiv+0x18>
 8092f34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8092f38:	ea92 0f0c 	teq	r2, ip
 8092f3c:	d108      	bne.n	8092f50 <__aeabi_fdiv+0x108>
 8092f3e:	0242      	lsls	r2, r0, #9
 8092f40:	f47f af7d 	bne.w	8092e3e <__aeabi_fmul+0x15e>
 8092f44:	ea93 0f0c 	teq	r3, ip
 8092f48:	f47f af70 	bne.w	8092e2c <__aeabi_fmul+0x14c>
 8092f4c:	4608      	mov	r0, r1
 8092f4e:	e776      	b.n	8092e3e <__aeabi_fmul+0x15e>
 8092f50:	ea93 0f0c 	teq	r3, ip
 8092f54:	d104      	bne.n	8092f60 <__aeabi_fdiv+0x118>
 8092f56:	024b      	lsls	r3, r1, #9
 8092f58:	f43f af4c 	beq.w	8092df4 <__aeabi_fmul+0x114>
 8092f5c:	4608      	mov	r0, r1
 8092f5e:	e76e      	b.n	8092e3e <__aeabi_fmul+0x15e>
 8092f60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8092f64:	bf18      	it	ne
 8092f66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8092f6a:	d1ca      	bne.n	8092f02 <__aeabi_fdiv+0xba>
 8092f6c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8092f70:	f47f af5c 	bne.w	8092e2c <__aeabi_fmul+0x14c>
 8092f74:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8092f78:	f47f af3c 	bne.w	8092df4 <__aeabi_fmul+0x114>
 8092f7c:	e75f      	b.n	8092e3e <__aeabi_fmul+0x15e>
 8092f7e:	bf00      	nop

08092f80 <__aeabi_uldivmod>:
 8092f80:	b953      	cbnz	r3, 8092f98 <__aeabi_uldivmod+0x18>
 8092f82:	b94a      	cbnz	r2, 8092f98 <__aeabi_uldivmod+0x18>
 8092f84:	2900      	cmp	r1, #0
 8092f86:	bf08      	it	eq
 8092f88:	2800      	cmpeq	r0, #0
 8092f8a:	bf1c      	itt	ne
 8092f8c:	f04f 31ff 	movne.w	r1, #4294967295
 8092f90:	f04f 30ff 	movne.w	r0, #4294967295
 8092f94:	f000 b982 	b.w	809329c <__aeabi_idiv0>
 8092f98:	f1ad 0c08 	sub.w	ip, sp, #8
 8092f9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8092fa0:	f000 f806 	bl	8092fb0 <__udivmoddi4>
 8092fa4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8092fa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8092fac:	b004      	add	sp, #16
 8092fae:	4770      	bx	lr

08092fb0 <__udivmoddi4>:
 8092fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8092fb4:	468c      	mov	ip, r1
 8092fb6:	460c      	mov	r4, r1
 8092fb8:	4605      	mov	r5, r0
 8092fba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8092fbc:	2b00      	cmp	r3, #0
 8092fbe:	d14f      	bne.n	8093060 <__udivmoddi4+0xb0>
 8092fc0:	428a      	cmp	r2, r1
 8092fc2:	4617      	mov	r7, r2
 8092fc4:	d96b      	bls.n	809309e <__udivmoddi4+0xee>
 8092fc6:	fab2 fe82 	clz	lr, r2
 8092fca:	f1be 0f00 	cmp.w	lr, #0
 8092fce:	d00b      	beq.n	8092fe8 <__udivmoddi4+0x38>
 8092fd0:	f1ce 0520 	rsb	r5, lr, #32
 8092fd4:	fa20 f505 	lsr.w	r5, r0, r5
 8092fd8:	fa01 f30e 	lsl.w	r3, r1, lr
 8092fdc:	ea45 0c03 	orr.w	ip, r5, r3
 8092fe0:	fa02 f70e 	lsl.w	r7, r2, lr
 8092fe4:	fa00 f50e 	lsl.w	r5, r0, lr
 8092fe8:	0c39      	lsrs	r1, r7, #16
 8092fea:	fbbc f0f1 	udiv	r0, ip, r1
 8092fee:	b2ba      	uxth	r2, r7
 8092ff0:	fb01 c310 	mls	r3, r1, r0, ip
 8092ff4:	fb00 f802 	mul.w	r8, r0, r2
 8092ff8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8092ffc:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8093000:	45a0      	cmp	r8, r4
 8093002:	d909      	bls.n	8093018 <__udivmoddi4+0x68>
 8093004:	19e4      	adds	r4, r4, r7
 8093006:	f100 33ff 	add.w	r3, r0, #4294967295
 809300a:	f080 8128 	bcs.w	809325e <__udivmoddi4+0x2ae>
 809300e:	45a0      	cmp	r8, r4
 8093010:	f240 8125 	bls.w	809325e <__udivmoddi4+0x2ae>
 8093014:	3802      	subs	r0, #2
 8093016:	443c      	add	r4, r7
 8093018:	ebc8 0404 	rsb	r4, r8, r4
 809301c:	fbb4 f3f1 	udiv	r3, r4, r1
 8093020:	fb01 4c13 	mls	ip, r1, r3, r4
 8093024:	fb03 f202 	mul.w	r2, r3, r2
 8093028:	b2ac      	uxth	r4, r5
 809302a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 809302e:	428a      	cmp	r2, r1
 8093030:	d909      	bls.n	8093046 <__udivmoddi4+0x96>
 8093032:	19c9      	adds	r1, r1, r7
 8093034:	f103 34ff 	add.w	r4, r3, #4294967295
 8093038:	f080 810f 	bcs.w	809325a <__udivmoddi4+0x2aa>
 809303c:	428a      	cmp	r2, r1
 809303e:	f240 810c 	bls.w	809325a <__udivmoddi4+0x2aa>
 8093042:	3b02      	subs	r3, #2
 8093044:	4439      	add	r1, r7
 8093046:	1a8a      	subs	r2, r1, r2
 8093048:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 809304c:	2100      	movs	r1, #0
 809304e:	2e00      	cmp	r6, #0
 8093050:	d063      	beq.n	809311a <__udivmoddi4+0x16a>
 8093052:	fa22 f20e 	lsr.w	r2, r2, lr
 8093056:	2300      	movs	r3, #0
 8093058:	e886 000c 	stmia.w	r6, {r2, r3}
 809305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093060:	428b      	cmp	r3, r1
 8093062:	d907      	bls.n	8093074 <__udivmoddi4+0xc4>
 8093064:	2e00      	cmp	r6, #0
 8093066:	d056      	beq.n	8093116 <__udivmoddi4+0x166>
 8093068:	2100      	movs	r1, #0
 809306a:	e886 0011 	stmia.w	r6, {r0, r4}
 809306e:	4608      	mov	r0, r1
 8093070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093074:	fab3 f183 	clz	r1, r3
 8093078:	2900      	cmp	r1, #0
 809307a:	f040 8093 	bne.w	80931a4 <__udivmoddi4+0x1f4>
 809307e:	42a3      	cmp	r3, r4
 8093080:	d302      	bcc.n	8093088 <__udivmoddi4+0xd8>
 8093082:	4282      	cmp	r2, r0
 8093084:	f200 80fe 	bhi.w	8093284 <__udivmoddi4+0x2d4>
 8093088:	1a85      	subs	r5, r0, r2
 809308a:	eb64 0303 	sbc.w	r3, r4, r3
 809308e:	469c      	mov	ip, r3
 8093090:	2001      	movs	r0, #1
 8093092:	2e00      	cmp	r6, #0
 8093094:	d041      	beq.n	809311a <__udivmoddi4+0x16a>
 8093096:	e886 1020 	stmia.w	r6, {r5, ip}
 809309a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809309e:	b912      	cbnz	r2, 80930a6 <__udivmoddi4+0xf6>
 80930a0:	2701      	movs	r7, #1
 80930a2:	fbb7 f7f2 	udiv	r7, r7, r2
 80930a6:	fab7 fe87 	clz	lr, r7
 80930aa:	f1be 0f00 	cmp.w	lr, #0
 80930ae:	d136      	bne.n	809311e <__udivmoddi4+0x16e>
 80930b0:	1be4      	subs	r4, r4, r7
 80930b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80930b6:	fa1f f987 	uxth.w	r9, r7
 80930ba:	2101      	movs	r1, #1
 80930bc:	fbb4 f3f8 	udiv	r3, r4, r8
 80930c0:	fb08 4413 	mls	r4, r8, r3, r4
 80930c4:	fb09 f203 	mul.w	r2, r9, r3
 80930c8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80930cc:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80930d0:	42a2      	cmp	r2, r4
 80930d2:	d907      	bls.n	80930e4 <__udivmoddi4+0x134>
 80930d4:	19e4      	adds	r4, r4, r7
 80930d6:	f103 30ff 	add.w	r0, r3, #4294967295
 80930da:	d202      	bcs.n	80930e2 <__udivmoddi4+0x132>
 80930dc:	42a2      	cmp	r2, r4
 80930de:	f200 80d3 	bhi.w	8093288 <__udivmoddi4+0x2d8>
 80930e2:	4603      	mov	r3, r0
 80930e4:	1aa4      	subs	r4, r4, r2
 80930e6:	fbb4 f0f8 	udiv	r0, r4, r8
 80930ea:	fb08 4810 	mls	r8, r8, r0, r4
 80930ee:	fb09 f900 	mul.w	r9, r9, r0
 80930f2:	b2ac      	uxth	r4, r5
 80930f4:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80930f8:	4591      	cmp	r9, r2
 80930fa:	d907      	bls.n	809310c <__udivmoddi4+0x15c>
 80930fc:	19d2      	adds	r2, r2, r7
 80930fe:	f100 34ff 	add.w	r4, r0, #4294967295
 8093102:	d202      	bcs.n	809310a <__udivmoddi4+0x15a>
 8093104:	4591      	cmp	r9, r2
 8093106:	f200 80ba 	bhi.w	809327e <__udivmoddi4+0x2ce>
 809310a:	4620      	mov	r0, r4
 809310c:	ebc9 0202 	rsb	r2, r9, r2
 8093110:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8093114:	e79b      	b.n	809304e <__udivmoddi4+0x9e>
 8093116:	4631      	mov	r1, r6
 8093118:	4630      	mov	r0, r6
 809311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809311e:	fa07 f70e 	lsl.w	r7, r7, lr
 8093122:	f1ce 0c20 	rsb	ip, lr, #32
 8093126:	fa24 f30c 	lsr.w	r3, r4, ip
 809312a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 809312e:	fbb3 faf8 	udiv	sl, r3, r8
 8093132:	fa1f f987 	uxth.w	r9, r7
 8093136:	fb08 351a 	mls	r5, r8, sl, r3
 809313a:	fa20 fc0c 	lsr.w	ip, r0, ip
 809313e:	fa04 f40e 	lsl.w	r4, r4, lr
 8093142:	fb0a fb09 	mul.w	fp, sl, r9
 8093146:	ea4c 0c04 	orr.w	ip, ip, r4
 809314a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 809314e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8093152:	459b      	cmp	fp, r3
 8093154:	fa00 f50e 	lsl.w	r5, r0, lr
 8093158:	d90a      	bls.n	8093170 <__udivmoddi4+0x1c0>
 809315a:	19db      	adds	r3, r3, r7
 809315c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8093160:	f080 808b 	bcs.w	809327a <__udivmoddi4+0x2ca>
 8093164:	459b      	cmp	fp, r3
 8093166:	f240 8088 	bls.w	809327a <__udivmoddi4+0x2ca>
 809316a:	f1aa 0a02 	sub.w	sl, sl, #2
 809316e:	443b      	add	r3, r7
 8093170:	ebcb 0303 	rsb	r3, fp, r3
 8093174:	fbb3 f0f8 	udiv	r0, r3, r8
 8093178:	fb08 3310 	mls	r3, r8, r0, r3
 809317c:	fb00 f409 	mul.w	r4, r0, r9
 8093180:	fa1f fc8c 	uxth.w	ip, ip
 8093184:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8093188:	429c      	cmp	r4, r3
 809318a:	d907      	bls.n	809319c <__udivmoddi4+0x1ec>
 809318c:	19db      	adds	r3, r3, r7
 809318e:	f100 32ff 	add.w	r2, r0, #4294967295
 8093192:	d26e      	bcs.n	8093272 <__udivmoddi4+0x2c2>
 8093194:	429c      	cmp	r4, r3
 8093196:	d96c      	bls.n	8093272 <__udivmoddi4+0x2c2>
 8093198:	3802      	subs	r0, #2
 809319a:	443b      	add	r3, r7
 809319c:	1b1c      	subs	r4, r3, r4
 809319e:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80931a2:	e78b      	b.n	80930bc <__udivmoddi4+0x10c>
 80931a4:	f1c1 0e20 	rsb	lr, r1, #32
 80931a8:	408b      	lsls	r3, r1
 80931aa:	fa22 fc0e 	lsr.w	ip, r2, lr
 80931ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80931b2:	fa24 f70e 	lsr.w	r7, r4, lr
 80931b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80931ba:	fbb7 faf9 	udiv	sl, r7, r9
 80931be:	fa1f f38c 	uxth.w	r3, ip
 80931c2:	fb09 771a 	mls	r7, r9, sl, r7
 80931c6:	fa20 f80e 	lsr.w	r8, r0, lr
 80931ca:	408c      	lsls	r4, r1
 80931cc:	fb0a f503 	mul.w	r5, sl, r3
 80931d0:	ea48 0404 	orr.w	r4, r8, r4
 80931d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80931d8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80931dc:	42bd      	cmp	r5, r7
 80931de:	fa02 f201 	lsl.w	r2, r2, r1
 80931e2:	fa00 fb01 	lsl.w	fp, r0, r1
 80931e6:	d909      	bls.n	80931fc <__udivmoddi4+0x24c>
 80931e8:	eb17 070c 	adds.w	r7, r7, ip
 80931ec:	f10a 30ff 	add.w	r0, sl, #4294967295
 80931f0:	d241      	bcs.n	8093276 <__udivmoddi4+0x2c6>
 80931f2:	42bd      	cmp	r5, r7
 80931f4:	d93f      	bls.n	8093276 <__udivmoddi4+0x2c6>
 80931f6:	f1aa 0a02 	sub.w	sl, sl, #2
 80931fa:	4467      	add	r7, ip
 80931fc:	1b7f      	subs	r7, r7, r5
 80931fe:	fbb7 f5f9 	udiv	r5, r7, r9
 8093202:	fb09 7715 	mls	r7, r9, r5, r7
 8093206:	fb05 f303 	mul.w	r3, r5, r3
 809320a:	b2a4      	uxth	r4, r4
 809320c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8093210:	42bb      	cmp	r3, r7
 8093212:	d908      	bls.n	8093226 <__udivmoddi4+0x276>
 8093214:	eb17 070c 	adds.w	r7, r7, ip
 8093218:	f105 30ff 	add.w	r0, r5, #4294967295
 809321c:	d227      	bcs.n	809326e <__udivmoddi4+0x2be>
 809321e:	42bb      	cmp	r3, r7
 8093220:	d925      	bls.n	809326e <__udivmoddi4+0x2be>
 8093222:	3d02      	subs	r5, #2
 8093224:	4467      	add	r7, ip
 8093226:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 809322a:	fba0 8902 	umull	r8, r9, r0, r2
 809322e:	1aff      	subs	r7, r7, r3
 8093230:	454f      	cmp	r7, r9
 8093232:	4645      	mov	r5, r8
 8093234:	464c      	mov	r4, r9
 8093236:	d314      	bcc.n	8093262 <__udivmoddi4+0x2b2>
 8093238:	d029      	beq.n	809328e <__udivmoddi4+0x2de>
 809323a:	b366      	cbz	r6, 8093296 <__udivmoddi4+0x2e6>
 809323c:	ebbb 0305 	subs.w	r3, fp, r5
 8093240:	eb67 0704 	sbc.w	r7, r7, r4
 8093244:	fa07 fe0e 	lsl.w	lr, r7, lr
 8093248:	40cb      	lsrs	r3, r1
 809324a:	40cf      	lsrs	r7, r1
 809324c:	ea4e 0303 	orr.w	r3, lr, r3
 8093250:	e886 0088 	stmia.w	r6, {r3, r7}
 8093254:	2100      	movs	r1, #0
 8093256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809325a:	4623      	mov	r3, r4
 809325c:	e6f3      	b.n	8093046 <__udivmoddi4+0x96>
 809325e:	4618      	mov	r0, r3
 8093260:	e6da      	b.n	8093018 <__udivmoddi4+0x68>
 8093262:	ebb8 0502 	subs.w	r5, r8, r2
 8093266:	eb69 040c 	sbc.w	r4, r9, ip
 809326a:	3801      	subs	r0, #1
 809326c:	e7e5      	b.n	809323a <__udivmoddi4+0x28a>
 809326e:	4605      	mov	r5, r0
 8093270:	e7d9      	b.n	8093226 <__udivmoddi4+0x276>
 8093272:	4610      	mov	r0, r2
 8093274:	e792      	b.n	809319c <__udivmoddi4+0x1ec>
 8093276:	4682      	mov	sl, r0
 8093278:	e7c0      	b.n	80931fc <__udivmoddi4+0x24c>
 809327a:	4692      	mov	sl, r2
 809327c:	e778      	b.n	8093170 <__udivmoddi4+0x1c0>
 809327e:	3802      	subs	r0, #2
 8093280:	443a      	add	r2, r7
 8093282:	e743      	b.n	809310c <__udivmoddi4+0x15c>
 8093284:	4608      	mov	r0, r1
 8093286:	e704      	b.n	8093092 <__udivmoddi4+0xe2>
 8093288:	3b02      	subs	r3, #2
 809328a:	443c      	add	r4, r7
 809328c:	e72a      	b.n	80930e4 <__udivmoddi4+0x134>
 809328e:	45c3      	cmp	fp, r8
 8093290:	d3e7      	bcc.n	8093262 <__udivmoddi4+0x2b2>
 8093292:	463c      	mov	r4, r7
 8093294:	e7d1      	b.n	809323a <__udivmoddi4+0x28a>
 8093296:	4631      	mov	r1, r6
 8093298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0809329c <__aeabi_idiv0>:
 809329c:	4770      	bx	lr
 809329e:	bf00      	nop

080932a0 <asctime>:
 80932a0:	4b09      	ldr	r3, [pc, #36]	; (80932c8 <asctime+0x28>)
 80932a2:	b570      	push	{r4, r5, r6, lr}
 80932a4:	681c      	ldr	r4, [r3, #0]
 80932a6:	4606      	mov	r6, r0
 80932a8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80932aa:	b93d      	cbnz	r5, 80932bc <asctime+0x1c>
 80932ac:	201a      	movs	r0, #26
 80932ae:	f7fe f9e3 	bl	8091678 <malloc>
 80932b2:	221a      	movs	r2, #26
 80932b4:	6420      	str	r0, [r4, #64]	; 0x40
 80932b6:	4629      	mov	r1, r5
 80932b8:	f000 f971 	bl	809359e <memset>
 80932bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80932be:	4630      	mov	r0, r6
 80932c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80932c4:	f000 b802 	b.w	80932cc <asctime_r>
 80932c8:	200004a8 	.word	0x200004a8

080932cc <asctime_r>:
 80932cc:	b510      	push	{r4, lr}
 80932ce:	460c      	mov	r4, r1
 80932d0:	6941      	ldr	r1, [r0, #20]
 80932d2:	b086      	sub	sp, #24
 80932d4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80932d8:	6903      	ldr	r3, [r0, #16]
 80932da:	6982      	ldr	r2, [r0, #24]
 80932dc:	9104      	str	r1, [sp, #16]
 80932de:	6801      	ldr	r1, [r0, #0]
 80932e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80932e4:	9103      	str	r1, [sp, #12]
 80932e6:	6841      	ldr	r1, [r0, #4]
 80932e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80932ec:	9102      	str	r1, [sp, #8]
 80932ee:	6881      	ldr	r1, [r0, #8]
 80932f0:	9101      	str	r1, [sp, #4]
 80932f2:	68c1      	ldr	r1, [r0, #12]
 80932f4:	4620      	mov	r0, r4
 80932f6:	9100      	str	r1, [sp, #0]
 80932f8:	4904      	ldr	r1, [pc, #16]	; (809330c <asctime_r+0x40>)
 80932fa:	440b      	add	r3, r1
 80932fc:	4904      	ldr	r1, [pc, #16]	; (8093310 <asctime_r+0x44>)
 80932fe:	440a      	add	r2, r1
 8093300:	4904      	ldr	r1, [pc, #16]	; (8093314 <asctime_r+0x48>)
 8093302:	f7fe f9d9 	bl	80916b8 <siprintf>
 8093306:	4620      	mov	r0, r4
 8093308:	b006      	add	sp, #24
 809330a:	bd10      	pop	{r4, pc}
 809330c:	0809778d 	.word	0x0809778d
 8093310:	08097778 	.word	0x08097778
 8093314:	080977b1 	.word	0x080977b1

08093318 <calloc>:
 8093318:	4b02      	ldr	r3, [pc, #8]	; (8093324 <calloc+0xc>)
 809331a:	460a      	mov	r2, r1
 809331c:	4601      	mov	r1, r0
 809331e:	6818      	ldr	r0, [r3, #0]
 8093320:	f000 b945 	b.w	80935ae <_calloc_r>
 8093324:	200004a8 	.word	0x200004a8

08093328 <__cxa_atexit>:
 8093328:	b510      	push	{r4, lr}
 809332a:	4c05      	ldr	r4, [pc, #20]	; (8093340 <__cxa_atexit+0x18>)
 809332c:	4613      	mov	r3, r2
 809332e:	b12c      	cbz	r4, 809333c <__cxa_atexit+0x14>
 8093330:	460a      	mov	r2, r1
 8093332:	4601      	mov	r1, r0
 8093334:	2002      	movs	r0, #2
 8093336:	f3af 8000 	nop.w
 809333a:	bd10      	pop	{r4, pc}
 809333c:	4620      	mov	r0, r4
 809333e:	bd10      	pop	{r4, pc}
 8093340:	00000000 	.word	0x00000000

08093344 <localtime>:
 8093344:	b538      	push	{r3, r4, r5, lr}
 8093346:	4b07      	ldr	r3, [pc, #28]	; (8093364 <localtime+0x20>)
 8093348:	4605      	mov	r5, r0
 809334a:	681c      	ldr	r4, [r3, #0]
 809334c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 809334e:	b91b      	cbnz	r3, 8093358 <localtime+0x14>
 8093350:	2024      	movs	r0, #36	; 0x24
 8093352:	f7fe f991 	bl	8091678 <malloc>
 8093356:	63e0      	str	r0, [r4, #60]	; 0x3c
 8093358:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 809335a:	4628      	mov	r0, r5
 809335c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8093360:	f000 b802 	b.w	8093368 <localtime_r>
 8093364:	200004a8 	.word	0x200004a8

08093368 <localtime_r>:
 8093368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 809336c:	460c      	mov	r4, r1
 809336e:	4680      	mov	r8, r0
 8093370:	f000 fc8a 	bl	8093c88 <__gettzinfo>
 8093374:	4621      	mov	r1, r4
 8093376:	4607      	mov	r7, r0
 8093378:	4640      	mov	r0, r8
 809337a:	f000 fc89 	bl	8093c90 <gmtime_r>
 809337e:	6946      	ldr	r6, [r0, #20]
 8093380:	4604      	mov	r4, r0
 8093382:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8093386:	07b3      	lsls	r3, r6, #30
 8093388:	d105      	bne.n	8093396 <localtime_r+0x2e>
 809338a:	2264      	movs	r2, #100	; 0x64
 809338c:	fb96 f3f2 	sdiv	r3, r6, r2
 8093390:	fb02 6313 	mls	r3, r2, r3, r6
 8093394:	b94b      	cbnz	r3, 80933aa <localtime_r+0x42>
 8093396:	f44f 75c8 	mov.w	r5, #400	; 0x190
 809339a:	fb96 f3f5 	sdiv	r3, r6, r5
 809339e:	fb05 6513 	mls	r5, r5, r3, r6
 80933a2:	fab5 f385 	clz	r3, r5
 80933a6:	095b      	lsrs	r3, r3, #5
 80933a8:	e000      	b.n	80933ac <localtime_r+0x44>
 80933aa:	2301      	movs	r3, #1
 80933ac:	4a5f      	ldr	r2, [pc, #380]	; (809352c <localtime_r+0x1c4>)
 80933ae:	2530      	movs	r5, #48	; 0x30
 80933b0:	fb05 2503 	mla	r5, r5, r3, r2
 80933b4:	f000 fa8a 	bl	80938cc <__tz_lock>
 80933b8:	f000 fa8a 	bl	80938d0 <_tzset_unlocked>
 80933bc:	4b5c      	ldr	r3, [pc, #368]	; (8093530 <localtime_r+0x1c8>)
 80933be:	681b      	ldr	r3, [r3, #0]
 80933c0:	b1f3      	cbz	r3, 8093400 <localtime_r+0x98>
 80933c2:	687b      	ldr	r3, [r7, #4]
 80933c4:	429e      	cmp	r6, r3
 80933c6:	d105      	bne.n	80933d4 <localtime_r+0x6c>
 80933c8:	6839      	ldr	r1, [r7, #0]
 80933ca:	f8d8 3000 	ldr.w	r3, [r8]
 80933ce:	69fa      	ldr	r2, [r7, #28]
 80933d0:	b941      	cbnz	r1, 80933e4 <localtime_r+0x7c>
 80933d2:	e00a      	b.n	80933ea <localtime_r+0x82>
 80933d4:	4630      	mov	r0, r6
 80933d6:	f000 f9d1 	bl	809377c <__tzcalc_limits>
 80933da:	2800      	cmp	r0, #0
 80933dc:	d1f4      	bne.n	80933c8 <localtime_r+0x60>
 80933de:	f04f 33ff 	mov.w	r3, #4294967295
 80933e2:	e00d      	b.n	8093400 <localtime_r+0x98>
 80933e4:	4293      	cmp	r3, r2
 80933e6:	db08      	blt.n	80933fa <localtime_r+0x92>
 80933e8:	e001      	b.n	80933ee <localtime_r+0x86>
 80933ea:	4293      	cmp	r3, r2
 80933ec:	da07      	bge.n	80933fe <localtime_r+0x96>
 80933ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80933f0:	4293      	cmp	r3, r2
 80933f2:	bfac      	ite	ge
 80933f4:	2300      	movge	r3, #0
 80933f6:	2301      	movlt	r3, #1
 80933f8:	e002      	b.n	8093400 <localtime_r+0x98>
 80933fa:	2300      	movs	r3, #0
 80933fc:	e000      	b.n	8093400 <localtime_r+0x98>
 80933fe:	2301      	movs	r3, #1
 8093400:	6223      	str	r3, [r4, #32]
 8093402:	6a23      	ldr	r3, [r4, #32]
 8093404:	203c      	movs	r0, #60	; 0x3c
 8093406:	2b01      	cmp	r3, #1
 8093408:	bf0c      	ite	eq
 809340a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 809340c:	6a39      	ldrne	r1, [r7, #32]
 809340e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8093412:	fb91 f6f3 	sdiv	r6, r1, r3
 8093416:	fb03 1316 	mls	r3, r3, r6, r1
 809341a:	fb93 f2f0 	sdiv	r2, r3, r0
 809341e:	fb00 3012 	mls	r0, r0, r2, r3
 8093422:	6861      	ldr	r1, [r4, #4]
 8093424:	6823      	ldr	r3, [r4, #0]
 8093426:	1a89      	subs	r1, r1, r2
 8093428:	68a2      	ldr	r2, [r4, #8]
 809342a:	1a1b      	subs	r3, r3, r0
 809342c:	1b92      	subs	r2, r2, r6
 809342e:	2b3b      	cmp	r3, #59	; 0x3b
 8093430:	6023      	str	r3, [r4, #0]
 8093432:	6061      	str	r1, [r4, #4]
 8093434:	60a2      	str	r2, [r4, #8]
 8093436:	dd03      	ble.n	8093440 <localtime_r+0xd8>
 8093438:	3101      	adds	r1, #1
 809343a:	6061      	str	r1, [r4, #4]
 809343c:	3b3c      	subs	r3, #60	; 0x3c
 809343e:	e004      	b.n	809344a <localtime_r+0xe2>
 8093440:	2b00      	cmp	r3, #0
 8093442:	da03      	bge.n	809344c <localtime_r+0xe4>
 8093444:	3901      	subs	r1, #1
 8093446:	6061      	str	r1, [r4, #4]
 8093448:	333c      	adds	r3, #60	; 0x3c
 809344a:	6023      	str	r3, [r4, #0]
 809344c:	6863      	ldr	r3, [r4, #4]
 809344e:	2b3b      	cmp	r3, #59	; 0x3b
 8093450:	dd03      	ble.n	809345a <localtime_r+0xf2>
 8093452:	3201      	adds	r2, #1
 8093454:	60a2      	str	r2, [r4, #8]
 8093456:	3b3c      	subs	r3, #60	; 0x3c
 8093458:	e004      	b.n	8093464 <localtime_r+0xfc>
 809345a:	2b00      	cmp	r3, #0
 809345c:	da03      	bge.n	8093466 <localtime_r+0xfe>
 809345e:	3a01      	subs	r2, #1
 8093460:	60a2      	str	r2, [r4, #8]
 8093462:	333c      	adds	r3, #60	; 0x3c
 8093464:	6063      	str	r3, [r4, #4]
 8093466:	68a3      	ldr	r3, [r4, #8]
 8093468:	2b17      	cmp	r3, #23
 809346a:	dd22      	ble.n	80934b2 <localtime_r+0x14a>
 809346c:	69e2      	ldr	r2, [r4, #28]
 809346e:	3b18      	subs	r3, #24
 8093470:	3201      	adds	r2, #1
 8093472:	61e2      	str	r2, [r4, #28]
 8093474:	69a2      	ldr	r2, [r4, #24]
 8093476:	60a3      	str	r3, [r4, #8]
 8093478:	3201      	adds	r2, #1
 809347a:	2a06      	cmp	r2, #6
 809347c:	bfc8      	it	gt
 809347e:	2200      	movgt	r2, #0
 8093480:	61a2      	str	r2, [r4, #24]
 8093482:	68e2      	ldr	r2, [r4, #12]
 8093484:	6923      	ldr	r3, [r4, #16]
 8093486:	3201      	adds	r2, #1
 8093488:	60e2      	str	r2, [r4, #12]
 809348a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 809348e:	428a      	cmp	r2, r1
 8093490:	dd46      	ble.n	8093520 <localtime_r+0x1b8>
 8093492:	3301      	adds	r3, #1
 8093494:	2b0c      	cmp	r3, #12
 8093496:	bf08      	it	eq
 8093498:	6963      	ldreq	r3, [r4, #20]
 809349a:	eba2 0201 	sub.w	r2, r2, r1
 809349e:	60e2      	str	r2, [r4, #12]
 80934a0:	bf05      	ittet	eq
 80934a2:	3301      	addeq	r3, #1
 80934a4:	2200      	moveq	r2, #0
 80934a6:	6123      	strne	r3, [r4, #16]
 80934a8:	6122      	streq	r2, [r4, #16]
 80934aa:	bf04      	itt	eq
 80934ac:	6163      	streq	r3, [r4, #20]
 80934ae:	61e2      	streq	r2, [r4, #28]
 80934b0:	e036      	b.n	8093520 <localtime_r+0x1b8>
 80934b2:	2b00      	cmp	r3, #0
 80934b4:	da34      	bge.n	8093520 <localtime_r+0x1b8>
 80934b6:	69e2      	ldr	r2, [r4, #28]
 80934b8:	3318      	adds	r3, #24
 80934ba:	3a01      	subs	r2, #1
 80934bc:	61e2      	str	r2, [r4, #28]
 80934be:	69a2      	ldr	r2, [r4, #24]
 80934c0:	60a3      	str	r3, [r4, #8]
 80934c2:	3a01      	subs	r2, #1
 80934c4:	bf48      	it	mi
 80934c6:	2206      	movmi	r2, #6
 80934c8:	61a2      	str	r2, [r4, #24]
 80934ca:	68e2      	ldr	r2, [r4, #12]
 80934cc:	3a01      	subs	r2, #1
 80934ce:	60e2      	str	r2, [r4, #12]
 80934d0:	bb32      	cbnz	r2, 8093520 <localtime_r+0x1b8>
 80934d2:	6923      	ldr	r3, [r4, #16]
 80934d4:	3b01      	subs	r3, #1
 80934d6:	d401      	bmi.n	80934dc <localtime_r+0x174>
 80934d8:	6123      	str	r3, [r4, #16]
 80934da:	e01d      	b.n	8093518 <localtime_r+0x1b0>
 80934dc:	230b      	movs	r3, #11
 80934de:	6123      	str	r3, [r4, #16]
 80934e0:	6963      	ldr	r3, [r4, #20]
 80934e2:	1e5a      	subs	r2, r3, #1
 80934e4:	f012 0f03 	tst.w	r2, #3
 80934e8:	6162      	str	r2, [r4, #20]
 80934ea:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80934ee:	d105      	bne.n	80934fc <localtime_r+0x194>
 80934f0:	2164      	movs	r1, #100	; 0x64
 80934f2:	fb93 f2f1 	sdiv	r2, r3, r1
 80934f6:	fb01 3212 	mls	r2, r1, r2, r3
 80934fa:	b94a      	cbnz	r2, 8093510 <localtime_r+0x1a8>
 80934fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8093500:	fb93 f2f1 	sdiv	r2, r3, r1
 8093504:	fb01 3312 	mls	r3, r1, r2, r3
 8093508:	fab3 f383 	clz	r3, r3
 809350c:	095b      	lsrs	r3, r3, #5
 809350e:	e000      	b.n	8093512 <localtime_r+0x1aa>
 8093510:	2301      	movs	r3, #1
 8093512:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8093516:	61e3      	str	r3, [r4, #28]
 8093518:	6923      	ldr	r3, [r4, #16]
 809351a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 809351e:	60e3      	str	r3, [r4, #12]
 8093520:	f000 f9d5 	bl	80938ce <__tz_unlock>
 8093524:	4620      	mov	r0, r4
 8093526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 809352a:	bf00      	nop
 809352c:	08097934 	.word	0x08097934
 8093530:	200035b0 	.word	0x200035b0

08093534 <memcmp>:
 8093534:	b510      	push	{r4, lr}
 8093536:	3901      	subs	r1, #1
 8093538:	4402      	add	r2, r0
 809353a:	4290      	cmp	r0, r2
 809353c:	d007      	beq.n	809354e <memcmp+0x1a>
 809353e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8093542:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8093546:	42a3      	cmp	r3, r4
 8093548:	d0f7      	beq.n	809353a <memcmp+0x6>
 809354a:	1b18      	subs	r0, r3, r4
 809354c:	bd10      	pop	{r4, pc}
 809354e:	2000      	movs	r0, #0
 8093550:	bd10      	pop	{r4, pc}

08093552 <memcpy>:
 8093552:	b510      	push	{r4, lr}
 8093554:	1e43      	subs	r3, r0, #1
 8093556:	440a      	add	r2, r1
 8093558:	4291      	cmp	r1, r2
 809355a:	d004      	beq.n	8093566 <memcpy+0x14>
 809355c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8093560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8093564:	e7f8      	b.n	8093558 <memcpy+0x6>
 8093566:	bd10      	pop	{r4, pc}

08093568 <memmove>:
 8093568:	4288      	cmp	r0, r1
 809356a:	b510      	push	{r4, lr}
 809356c:	eb01 0302 	add.w	r3, r1, r2
 8093570:	d801      	bhi.n	8093576 <memmove+0xe>
 8093572:	1e42      	subs	r2, r0, #1
 8093574:	e00b      	b.n	809358e <memmove+0x26>
 8093576:	4298      	cmp	r0, r3
 8093578:	d2fb      	bcs.n	8093572 <memmove+0xa>
 809357a:	1881      	adds	r1, r0, r2
 809357c:	1ad2      	subs	r2, r2, r3
 809357e:	42d3      	cmn	r3, r2
 8093580:	d004      	beq.n	809358c <memmove+0x24>
 8093582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8093586:	f801 4d01 	strb.w	r4, [r1, #-1]!
 809358a:	e7f8      	b.n	809357e <memmove+0x16>
 809358c:	bd10      	pop	{r4, pc}
 809358e:	4299      	cmp	r1, r3
 8093590:	d004      	beq.n	809359c <memmove+0x34>
 8093592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8093596:	f802 4f01 	strb.w	r4, [r2, #1]!
 809359a:	e7f8      	b.n	809358e <memmove+0x26>
 809359c:	bd10      	pop	{r4, pc}

0809359e <memset>:
 809359e:	4603      	mov	r3, r0
 80935a0:	4402      	add	r2, r0
 80935a2:	4293      	cmp	r3, r2
 80935a4:	d002      	beq.n	80935ac <memset+0xe>
 80935a6:	f803 1b01 	strb.w	r1, [r3], #1
 80935aa:	e7fa      	b.n	80935a2 <memset+0x4>
 80935ac:	4770      	bx	lr

080935ae <_calloc_r>:
 80935ae:	b538      	push	{r3, r4, r5, lr}
 80935b0:	fb02 f401 	mul.w	r4, r2, r1
 80935b4:	4621      	mov	r1, r4
 80935b6:	f7fe f8a7 	bl	8091708 <_malloc_r>
 80935ba:	4605      	mov	r5, r0
 80935bc:	b118      	cbz	r0, 80935c6 <_calloc_r+0x18>
 80935be:	4622      	mov	r2, r4
 80935c0:	2100      	movs	r1, #0
 80935c2:	f7ff ffec 	bl	809359e <memset>
 80935c6:	4628      	mov	r0, r5
 80935c8:	bd38      	pop	{r3, r4, r5, pc}

080935ca <strcmp>:
 80935ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80935ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80935d2:	2a01      	cmp	r2, #1
 80935d4:	bf28      	it	cs
 80935d6:	429a      	cmpcs	r2, r3
 80935d8:	d0f7      	beq.n	80935ca <strcmp>
 80935da:	1ad0      	subs	r0, r2, r3
 80935dc:	4770      	bx	lr

080935de <strcpy>:
 80935de:	4603      	mov	r3, r0
 80935e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80935e4:	f803 2b01 	strb.w	r2, [r3], #1
 80935e8:	2a00      	cmp	r2, #0
 80935ea:	d1f9      	bne.n	80935e0 <strcpy+0x2>
 80935ec:	4770      	bx	lr

080935ee <strlen>:
 80935ee:	4603      	mov	r3, r0
 80935f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80935f4:	2a00      	cmp	r2, #0
 80935f6:	d1fb      	bne.n	80935f0 <strlen+0x2>
 80935f8:	1a18      	subs	r0, r3, r0
 80935fa:	3801      	subs	r0, #1
 80935fc:	4770      	bx	lr

080935fe <strncmp>:
 80935fe:	b530      	push	{r4, r5, lr}
 8093600:	b182      	cbz	r2, 8093624 <strncmp+0x26>
 8093602:	1e45      	subs	r5, r0, #1
 8093604:	3901      	subs	r1, #1
 8093606:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 809360a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 809360e:	42a3      	cmp	r3, r4
 8093610:	d106      	bne.n	8093620 <strncmp+0x22>
 8093612:	43ec      	mvns	r4, r5
 8093614:	4414      	add	r4, r2
 8093616:	42e0      	cmn	r0, r4
 8093618:	d001      	beq.n	809361e <strncmp+0x20>
 809361a:	2b00      	cmp	r3, #0
 809361c:	d1f3      	bne.n	8093606 <strncmp+0x8>
 809361e:	461c      	mov	r4, r3
 8093620:	1b18      	subs	r0, r3, r4
 8093622:	bd30      	pop	{r4, r5, pc}
 8093624:	4610      	mov	r0, r2
 8093626:	bd30      	pop	{r4, r5, pc}

08093628 <strstr>:
 8093628:	b5f0      	push	{r4, r5, r6, r7, lr}
 809362a:	7803      	ldrb	r3, [r0, #0]
 809362c:	b963      	cbnz	r3, 8093648 <strstr+0x20>
 809362e:	780b      	ldrb	r3, [r1, #0]
 8093630:	2b00      	cmp	r3, #0
 8093632:	bf18      	it	ne
 8093634:	2000      	movne	r0, #0
 8093636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8093638:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 809363c:	b162      	cbz	r2, 8093658 <strstr+0x30>
 809363e:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8093642:	4630      	mov	r0, r6
 8093644:	4297      	cmp	r7, r2
 8093646:	d0f7      	beq.n	8093638 <strstr+0x10>
 8093648:	4603      	mov	r3, r0
 809364a:	1c46      	adds	r6, r0, #1
 809364c:	7800      	ldrb	r0, [r0, #0]
 809364e:	b110      	cbz	r0, 8093656 <strstr+0x2e>
 8093650:	1e4d      	subs	r5, r1, #1
 8093652:	1e5c      	subs	r4, r3, #1
 8093654:	e7f0      	b.n	8093638 <strstr+0x10>
 8093656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8093658:	4618      	mov	r0, r3
 809365a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0809365c <_strtoul_r>:
 809365c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8093660:	460e      	mov	r6, r1
 8093662:	4680      	mov	r8, r0
 8093664:	483b      	ldr	r0, [pc, #236]	; (8093754 <_strtoul_r+0xf8>)
 8093666:	f8d0 9000 	ldr.w	r9, [r0]
 809366a:	4635      	mov	r5, r6
 809366c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8093670:	eb09 0004 	add.w	r0, r9, r4
 8093674:	7840      	ldrb	r0, [r0, #1]
 8093676:	f000 0008 	and.w	r0, r0, #8
 809367a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 809367e:	b108      	cbz	r0, 8093684 <_strtoul_r+0x28>
 8093680:	462e      	mov	r6, r5
 8093682:	e7f2      	b.n	809366a <_strtoul_r+0xe>
 8093684:	2c2d      	cmp	r4, #45	; 0x2d
 8093686:	d103      	bne.n	8093690 <_strtoul_r+0x34>
 8093688:	1cb5      	adds	r5, r6, #2
 809368a:	7874      	ldrb	r4, [r6, #1]
 809368c:	2701      	movs	r7, #1
 809368e:	e003      	b.n	8093698 <_strtoul_r+0x3c>
 8093690:	2c2b      	cmp	r4, #43	; 0x2b
 8093692:	bf04      	itt	eq
 8093694:	7874      	ldrbeq	r4, [r6, #1]
 8093696:	1cb5      	addeq	r5, r6, #2
 8093698:	b113      	cbz	r3, 80936a0 <_strtoul_r+0x44>
 809369a:	2b10      	cmp	r3, #16
 809369c:	d10a      	bne.n	80936b4 <_strtoul_r+0x58>
 809369e:	e053      	b.n	8093748 <_strtoul_r+0xec>
 80936a0:	2c30      	cmp	r4, #48	; 0x30
 80936a2:	d14f      	bne.n	8093744 <_strtoul_r+0xe8>
 80936a4:	7828      	ldrb	r0, [r5, #0]
 80936a6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80936aa:	2858      	cmp	r0, #88	; 0x58
 80936ac:	d145      	bne.n	809373a <_strtoul_r+0xde>
 80936ae:	786c      	ldrb	r4, [r5, #1]
 80936b0:	2310      	movs	r3, #16
 80936b2:	3502      	adds	r5, #2
 80936b4:	f04f 3cff 	mov.w	ip, #4294967295
 80936b8:	fbbc fcf3 	udiv	ip, ip, r3
 80936bc:	fb03 fa0c 	mul.w	sl, r3, ip
 80936c0:	2600      	movs	r6, #0
 80936c2:	ea6f 0a0a 	mvn.w	sl, sl
 80936c6:	4630      	mov	r0, r6
 80936c8:	eb09 0e04 	add.w	lr, r9, r4
 80936cc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80936d0:	f01e 0f04 	tst.w	lr, #4
 80936d4:	d001      	beq.n	80936da <_strtoul_r+0x7e>
 80936d6:	3c30      	subs	r4, #48	; 0x30
 80936d8:	e00b      	b.n	80936f2 <_strtoul_r+0x96>
 80936da:	f01e 0e03 	ands.w	lr, lr, #3
 80936de:	d01a      	beq.n	8093716 <_strtoul_r+0xba>
 80936e0:	f1be 0f01 	cmp.w	lr, #1
 80936e4:	bf0c      	ite	eq
 80936e6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80936ea:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80936ee:	ebce 0404 	rsb	r4, lr, r4
 80936f2:	42a3      	cmp	r3, r4
 80936f4:	dd0f      	ble.n	8093716 <_strtoul_r+0xba>
 80936f6:	2e00      	cmp	r6, #0
 80936f8:	db08      	blt.n	809370c <_strtoul_r+0xb0>
 80936fa:	4560      	cmp	r0, ip
 80936fc:	d806      	bhi.n	809370c <_strtoul_r+0xb0>
 80936fe:	d101      	bne.n	8093704 <_strtoul_r+0xa8>
 8093700:	4554      	cmp	r4, sl
 8093702:	dc03      	bgt.n	809370c <_strtoul_r+0xb0>
 8093704:	fb03 4000 	mla	r0, r3, r0, r4
 8093708:	2601      	movs	r6, #1
 809370a:	e001      	b.n	8093710 <_strtoul_r+0xb4>
 809370c:	f04f 36ff 	mov.w	r6, #4294967295
 8093710:	f815 4b01 	ldrb.w	r4, [r5], #1
 8093714:	e7d8      	b.n	80936c8 <_strtoul_r+0x6c>
 8093716:	2e00      	cmp	r6, #0
 8093718:	da07      	bge.n	809372a <_strtoul_r+0xce>
 809371a:	2322      	movs	r3, #34	; 0x22
 809371c:	f8c8 3000 	str.w	r3, [r8]
 8093720:	f04f 30ff 	mov.w	r0, #4294967295
 8093724:	b92a      	cbnz	r2, 8093732 <_strtoul_r+0xd6>
 8093726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809372a:	b107      	cbz	r7, 809372e <_strtoul_r+0xd2>
 809372c:	4240      	negs	r0, r0
 809372e:	b172      	cbz	r2, 809374e <_strtoul_r+0xf2>
 8093730:	b106      	cbz	r6, 8093734 <_strtoul_r+0xd8>
 8093732:	1e69      	subs	r1, r5, #1
 8093734:	6011      	str	r1, [r2, #0]
 8093736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809373a:	2430      	movs	r4, #48	; 0x30
 809373c:	2b00      	cmp	r3, #0
 809373e:	d1b9      	bne.n	80936b4 <_strtoul_r+0x58>
 8093740:	2308      	movs	r3, #8
 8093742:	e7b7      	b.n	80936b4 <_strtoul_r+0x58>
 8093744:	230a      	movs	r3, #10
 8093746:	e7b5      	b.n	80936b4 <_strtoul_r+0x58>
 8093748:	2c30      	cmp	r4, #48	; 0x30
 809374a:	d0ab      	beq.n	80936a4 <_strtoul_r+0x48>
 809374c:	e7b2      	b.n	80936b4 <_strtoul_r+0x58>
 809374e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8093752:	bf00      	nop
 8093754:	20000444 	.word	0x20000444

08093758 <strtoul>:
 8093758:	4613      	mov	r3, r2
 809375a:	460a      	mov	r2, r1
 809375c:	4601      	mov	r1, r0
 809375e:	4802      	ldr	r0, [pc, #8]	; (8093768 <strtoul+0x10>)
 8093760:	6800      	ldr	r0, [r0, #0]
 8093762:	f7ff bf7b 	b.w	809365c <_strtoul_r>
 8093766:	bf00      	nop
 8093768:	200004a8 	.word	0x200004a8

0809376c <gettimeofday>:
 809376c:	4b02      	ldr	r3, [pc, #8]	; (8093778 <gettimeofday+0xc>)
 809376e:	460a      	mov	r2, r1
 8093770:	4601      	mov	r1, r0
 8093772:	6818      	ldr	r0, [r3, #0]
 8093774:	f000 ba76 	b.w	8093c64 <_gettimeofday_r>
 8093778:	200004a8 	.word	0x200004a8

0809377c <__tzcalc_limits>:
 809377c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8093780:	4604      	mov	r4, r0
 8093782:	f000 fa81 	bl	8093c88 <__gettzinfo>
 8093786:	f240 73b1 	movw	r3, #1969	; 0x7b1
 809378a:	429c      	cmp	r4, r3
 809378c:	f340 8096 	ble.w	80938bc <__tzcalc_limits+0x140>
 8093790:	f240 156d 	movw	r5, #365	; 0x16d
 8093794:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8093798:	18e3      	adds	r3, r4, r3
 809379a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 809379e:	109b      	asrs	r3, r3, #2
 80937a0:	fb05 3502 	mla	r5, r5, r2, r3
 80937a4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80937a8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80937ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80937b0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80937b4:	442b      	add	r3, r5
 80937b6:	18a5      	adds	r5, r4, r2
 80937b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80937bc:	fb94 f7f2 	sdiv	r7, r4, r2
 80937c0:	fb95 f5f2 	sdiv	r5, r5, r2
 80937c4:	fb02 4717 	mls	r7, r2, r7, r4
 80937c8:	441d      	add	r5, r3
 80937ca:	2364      	movs	r3, #100	; 0x64
 80937cc:	fb94 f6f3 	sdiv	r6, r4, r3
 80937d0:	fab7 fe87 	clz	lr, r7
 80937d4:	4601      	mov	r1, r0
 80937d6:	fb03 4616 	mls	r6, r3, r6, r4
 80937da:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80937de:	9301      	str	r3, [sp, #4]
 80937e0:	f004 0303 	and.w	r3, r4, #3
 80937e4:	6044      	str	r4, [r0, #4]
 80937e6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80937ea:	9300      	str	r3, [sp, #0]
 80937ec:	f04f 0c07 	mov.w	ip, #7
 80937f0:	7a0b      	ldrb	r3, [r1, #8]
 80937f2:	2b4a      	cmp	r3, #74	; 0x4a
 80937f4:	d10e      	bne.n	8093814 <__tzcalc_limits+0x98>
 80937f6:	694b      	ldr	r3, [r1, #20]
 80937f8:	9a00      	ldr	r2, [sp, #0]
 80937fa:	18ec      	adds	r4, r5, r3
 80937fc:	b902      	cbnz	r2, 8093800 <__tzcalc_limits+0x84>
 80937fe:	b906      	cbnz	r6, 8093802 <__tzcalc_limits+0x86>
 8093800:	b927      	cbnz	r7, 809380c <__tzcalc_limits+0x90>
 8093802:	2b3b      	cmp	r3, #59	; 0x3b
 8093804:	bfd4      	ite	le
 8093806:	2300      	movle	r3, #0
 8093808:	2301      	movgt	r3, #1
 809380a:	e000      	b.n	809380e <__tzcalc_limits+0x92>
 809380c:	2300      	movs	r3, #0
 809380e:	4423      	add	r3, r4
 8093810:	3b01      	subs	r3, #1
 8093812:	e03f      	b.n	8093894 <__tzcalc_limits+0x118>
 8093814:	2b44      	cmp	r3, #68	; 0x44
 8093816:	d102      	bne.n	809381e <__tzcalc_limits+0xa2>
 8093818:	694b      	ldr	r3, [r1, #20]
 809381a:	442b      	add	r3, r5
 809381c:	e03a      	b.n	8093894 <__tzcalc_limits+0x118>
 809381e:	9b00      	ldr	r3, [sp, #0]
 8093820:	b92b      	cbnz	r3, 809382e <__tzcalc_limits+0xb2>
 8093822:	2e00      	cmp	r6, #0
 8093824:	bf0c      	ite	eq
 8093826:	46f0      	moveq	r8, lr
 8093828:	f04f 0801 	movne.w	r8, #1
 809382c:	e000      	b.n	8093830 <__tzcalc_limits+0xb4>
 809382e:	46f0      	mov	r8, lr
 8093830:	46a9      	mov	r9, r5
 8093832:	4b24      	ldr	r3, [pc, #144]	; (80938c4 <__tzcalc_limits+0x148>)
 8093834:	2230      	movs	r2, #48	; 0x30
 8093836:	fb02 3808 	mla	r8, r2, r8, r3
 809383a:	68cc      	ldr	r4, [r1, #12]
 809383c:	f1a8 0a04 	sub.w	sl, r8, #4
 8093840:	2301      	movs	r3, #1
 8093842:	42a3      	cmp	r3, r4
 8093844:	da04      	bge.n	8093850 <__tzcalc_limits+0xd4>
 8093846:	f85a bf04 	ldr.w	fp, [sl, #4]!
 809384a:	3301      	adds	r3, #1
 809384c:	44d9      	add	r9, fp
 809384e:	e7f8      	b.n	8093842 <__tzcalc_limits+0xc6>
 8093850:	f109 0304 	add.w	r3, r9, #4
 8093854:	fb93 fbfc 	sdiv	fp, r3, ip
 8093858:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 809385c:	ebca 0a03 	rsb	sl, sl, r3
 8093860:	694b      	ldr	r3, [r1, #20]
 8093862:	2c01      	cmp	r4, #1
 8093864:	bfb8      	it	lt
 8093866:	2401      	movlt	r4, #1
 8093868:	ebb3 0a0a 	subs.w	sl, r3, sl
 809386c:	690b      	ldr	r3, [r1, #16]
 809386e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8093872:	f103 33ff 	add.w	r3, r3, #4294967295
 8093876:	f104 34ff 	add.w	r4, r4, #4294967295
 809387a:	bf48      	it	mi
 809387c:	f10a 0a07 	addmi.w	sl, sl, #7
 8093880:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8093884:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8093888:	4453      	add	r3, sl
 809388a:	42a3      	cmp	r3, r4
 809388c:	db01      	blt.n	8093892 <__tzcalc_limits+0x116>
 809388e:	3b07      	subs	r3, #7
 8093890:	e7fb      	b.n	809388a <__tzcalc_limits+0x10e>
 8093892:	444b      	add	r3, r9
 8093894:	698c      	ldr	r4, [r1, #24]
 8093896:	4a0c      	ldr	r2, [pc, #48]	; (80938c8 <__tzcalc_limits+0x14c>)
 8093898:	fb02 4303 	mla	r3, r2, r3, r4
 809389c:	6a0c      	ldr	r4, [r1, #32]
 809389e:	4423      	add	r3, r4
 80938a0:	f841 3f1c 	str.w	r3, [r1, #28]!
 80938a4:	9b01      	ldr	r3, [sp, #4]
 80938a6:	4299      	cmp	r1, r3
 80938a8:	d1a2      	bne.n	80937f0 <__tzcalc_limits+0x74>
 80938aa:	69c3      	ldr	r3, [r0, #28]
 80938ac:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80938ae:	4293      	cmp	r3, r2
 80938b0:	bfac      	ite	ge
 80938b2:	2300      	movge	r3, #0
 80938b4:	2301      	movlt	r3, #1
 80938b6:	6003      	str	r3, [r0, #0]
 80938b8:	2001      	movs	r0, #1
 80938ba:	e000      	b.n	80938be <__tzcalc_limits+0x142>
 80938bc:	2000      	movs	r0, #0
 80938be:	b003      	add	sp, #12
 80938c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80938c4:	08097934 	.word	0x08097934
 80938c8:	00015180 	.word	0x00015180

080938cc <__tz_lock>:
 80938cc:	4770      	bx	lr

080938ce <__tz_unlock>:
 80938ce:	4770      	bx	lr

080938d0 <_tzset_unlocked>:
 80938d0:	4b01      	ldr	r3, [pc, #4]	; (80938d8 <_tzset_unlocked+0x8>)
 80938d2:	6818      	ldr	r0, [r3, #0]
 80938d4:	f000 b802 	b.w	80938dc <_tzset_unlocked_r>
 80938d8:	200004a8 	.word	0x200004a8

080938dc <_tzset_unlocked_r>:
 80938dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80938e0:	b08d      	sub	sp, #52	; 0x34
 80938e2:	4607      	mov	r7, r0
 80938e4:	f000 f9d0 	bl	8093c88 <__gettzinfo>
 80938e8:	49b0      	ldr	r1, [pc, #704]	; (8093bac <_tzset_unlocked_r+0x2d0>)
 80938ea:	4604      	mov	r4, r0
 80938ec:	4638      	mov	r0, r7
 80938ee:	f000 f9b1 	bl	8093c54 <_getenv_r>
 80938f2:	4eaf      	ldr	r6, [pc, #700]	; (8093bb0 <_tzset_unlocked_r+0x2d4>)
 80938f4:	4605      	mov	r5, r0
 80938f6:	b960      	cbnz	r0, 8093912 <_tzset_unlocked_r+0x36>
 80938f8:	4bae      	ldr	r3, [pc, #696]	; (8093bb4 <_tzset_unlocked_r+0x2d8>)
 80938fa:	4aaf      	ldr	r2, [pc, #700]	; (8093bb8 <_tzset_unlocked_r+0x2dc>)
 80938fc:	6018      	str	r0, [r3, #0]
 80938fe:	4baf      	ldr	r3, [pc, #700]	; (8093bbc <_tzset_unlocked_r+0x2e0>)
 8093900:	6018      	str	r0, [r3, #0]
 8093902:	4baf      	ldr	r3, [pc, #700]	; (8093bc0 <_tzset_unlocked_r+0x2e4>)
 8093904:	6830      	ldr	r0, [r6, #0]
 8093906:	601a      	str	r2, [r3, #0]
 8093908:	605a      	str	r2, [r3, #4]
 809390a:	f7fd febd 	bl	8091688 <free>
 809390e:	6035      	str	r5, [r6, #0]
 8093910:	e148      	b.n	8093ba4 <_tzset_unlocked_r+0x2c8>
 8093912:	6831      	ldr	r1, [r6, #0]
 8093914:	b979      	cbnz	r1, 8093936 <_tzset_unlocked_r+0x5a>
 8093916:	6830      	ldr	r0, [r6, #0]
 8093918:	f7fd feb6 	bl	8091688 <free>
 809391c:	4628      	mov	r0, r5
 809391e:	f7ff fe66 	bl	80935ee <strlen>
 8093922:	1c41      	adds	r1, r0, #1
 8093924:	4638      	mov	r0, r7
 8093926:	f7fd feef 	bl	8091708 <_malloc_r>
 809392a:	6030      	str	r0, [r6, #0]
 809392c:	b148      	cbz	r0, 8093942 <_tzset_unlocked_r+0x66>
 809392e:	4629      	mov	r1, r5
 8093930:	f7ff fe55 	bl	80935de <strcpy>
 8093934:	e005      	b.n	8093942 <_tzset_unlocked_r+0x66>
 8093936:	f7ff fe48 	bl	80935ca <strcmp>
 809393a:	2800      	cmp	r0, #0
 809393c:	f000 8132 	beq.w	8093ba4 <_tzset_unlocked_r+0x2c8>
 8093940:	e7e9      	b.n	8093916 <_tzset_unlocked_r+0x3a>
 8093942:	782b      	ldrb	r3, [r5, #0]
 8093944:	ae0a      	add	r6, sp, #40	; 0x28
 8093946:	2b3a      	cmp	r3, #58	; 0x3a
 8093948:	bf08      	it	eq
 809394a:	3501      	addeq	r5, #1
 809394c:	4633      	mov	r3, r6
 809394e:	4a9d      	ldr	r2, [pc, #628]	; (8093bc4 <_tzset_unlocked_r+0x2e8>)
 8093950:	499d      	ldr	r1, [pc, #628]	; (8093bc8 <_tzset_unlocked_r+0x2ec>)
 8093952:	4628      	mov	r0, r5
 8093954:	f7fd feb8 	bl	80916c8 <siscanf>
 8093958:	2800      	cmp	r0, #0
 809395a:	f340 8123 	ble.w	8093ba4 <_tzset_unlocked_r+0x2c8>
 809395e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8093960:	18ef      	adds	r7, r5, r3
 8093962:	5ceb      	ldrb	r3, [r5, r3]
 8093964:	2b2d      	cmp	r3, #45	; 0x2d
 8093966:	d103      	bne.n	8093970 <_tzset_unlocked_r+0x94>
 8093968:	3701      	adds	r7, #1
 809396a:	f04f 35ff 	mov.w	r5, #4294967295
 809396e:	e003      	b.n	8093978 <_tzset_unlocked_r+0x9c>
 8093970:	2b2b      	cmp	r3, #43	; 0x2b
 8093972:	bf08      	it	eq
 8093974:	3701      	addeq	r7, #1
 8093976:	2501      	movs	r5, #1
 8093978:	f10d 0a20 	add.w	sl, sp, #32
 809397c:	f10d 0b1e 	add.w	fp, sp, #30
 8093980:	f04f 0800 	mov.w	r8, #0
 8093984:	9603      	str	r6, [sp, #12]
 8093986:	f8cd a008 	str.w	sl, [sp, #8]
 809398a:	9601      	str	r6, [sp, #4]
 809398c:	f8cd b000 	str.w	fp, [sp]
 8093990:	4633      	mov	r3, r6
 8093992:	aa07      	add	r2, sp, #28
 8093994:	498d      	ldr	r1, [pc, #564]	; (8093bcc <_tzset_unlocked_r+0x2f0>)
 8093996:	4638      	mov	r0, r7
 8093998:	f8ad 801e 	strh.w	r8, [sp, #30]
 809399c:	f8ad 8020 	strh.w	r8, [sp, #32]
 80939a0:	f7fd fe92 	bl	80916c8 <siscanf>
 80939a4:	4540      	cmp	r0, r8
 80939a6:	f340 80fd 	ble.w	8093ba4 <_tzset_unlocked_r+0x2c8>
 80939aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80939ae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80939b2:	213c      	movs	r1, #60	; 0x3c
 80939b4:	fb01 3302 	mla	r3, r1, r2, r3
 80939b8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80939bc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80939c0:	fb01 3302 	mla	r3, r1, r2, r3
 80939c4:	435d      	muls	r5, r3
 80939c6:	4b7f      	ldr	r3, [pc, #508]	; (8093bc4 <_tzset_unlocked_r+0x2e8>)
 80939c8:	6225      	str	r5, [r4, #32]
 80939ca:	4d7d      	ldr	r5, [pc, #500]	; (8093bc0 <_tzset_unlocked_r+0x2e4>)
 80939cc:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8093bd8 <_tzset_unlocked_r+0x2fc>
 80939d0:	602b      	str	r3, [r5, #0]
 80939d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80939d4:	464a      	mov	r2, r9
 80939d6:	441f      	add	r7, r3
 80939d8:	497b      	ldr	r1, [pc, #492]	; (8093bc8 <_tzset_unlocked_r+0x2ec>)
 80939da:	4633      	mov	r3, r6
 80939dc:	4638      	mov	r0, r7
 80939de:	f7fd fe73 	bl	80916c8 <siscanf>
 80939e2:	4540      	cmp	r0, r8
 80939e4:	dc08      	bgt.n	80939f8 <_tzset_unlocked_r+0x11c>
 80939e6:	682b      	ldr	r3, [r5, #0]
 80939e8:	6a22      	ldr	r2, [r4, #32]
 80939ea:	606b      	str	r3, [r5, #4]
 80939ec:	4b71      	ldr	r3, [pc, #452]	; (8093bb4 <_tzset_unlocked_r+0x2d8>)
 80939ee:	601a      	str	r2, [r3, #0]
 80939f0:	4b72      	ldr	r3, [pc, #456]	; (8093bbc <_tzset_unlocked_r+0x2e0>)
 80939f2:	f8c3 8000 	str.w	r8, [r3]
 80939f6:	e0d5      	b.n	8093ba4 <_tzset_unlocked_r+0x2c8>
 80939f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80939fa:	f8c5 9004 	str.w	r9, [r5, #4]
 80939fe:	18fd      	adds	r5, r7, r3
 8093a00:	5cfb      	ldrb	r3, [r7, r3]
 8093a02:	2b2d      	cmp	r3, #45	; 0x2d
 8093a04:	d103      	bne.n	8093a0e <_tzset_unlocked_r+0x132>
 8093a06:	3501      	adds	r5, #1
 8093a08:	f04f 37ff 	mov.w	r7, #4294967295
 8093a0c:	e003      	b.n	8093a16 <_tzset_unlocked_r+0x13a>
 8093a0e:	2b2b      	cmp	r3, #43	; 0x2b
 8093a10:	bf08      	it	eq
 8093a12:	3501      	addeq	r5, #1
 8093a14:	2701      	movs	r7, #1
 8093a16:	2300      	movs	r3, #0
 8093a18:	f8ad 301c 	strh.w	r3, [sp, #28]
 8093a1c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8093a20:	f8ad 3020 	strh.w	r3, [sp, #32]
 8093a24:	930a      	str	r3, [sp, #40]	; 0x28
 8093a26:	9603      	str	r6, [sp, #12]
 8093a28:	f8cd a008 	str.w	sl, [sp, #8]
 8093a2c:	9601      	str	r6, [sp, #4]
 8093a2e:	f8cd b000 	str.w	fp, [sp]
 8093a32:	4633      	mov	r3, r6
 8093a34:	aa07      	add	r2, sp, #28
 8093a36:	4965      	ldr	r1, [pc, #404]	; (8093bcc <_tzset_unlocked_r+0x2f0>)
 8093a38:	4628      	mov	r0, r5
 8093a3a:	f7fd fe45 	bl	80916c8 <siscanf>
 8093a3e:	2800      	cmp	r0, #0
 8093a40:	dc04      	bgt.n	8093a4c <_tzset_unlocked_r+0x170>
 8093a42:	6a23      	ldr	r3, [r4, #32]
 8093a44:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8093a48:	63e3      	str	r3, [r4, #60]	; 0x3c
 8093a4a:	e00e      	b.n	8093a6a <_tzset_unlocked_r+0x18e>
 8093a4c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8093a50:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8093a54:	213c      	movs	r1, #60	; 0x3c
 8093a56:	fb01 3302 	mla	r3, r1, r2, r3
 8093a5a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8093a5e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8093a62:	fb01 3302 	mla	r3, r1, r2, r3
 8093a66:	435f      	muls	r7, r3
 8093a68:	63e7      	str	r7, [r4, #60]	; 0x3c
 8093a6a:	4627      	mov	r7, r4
 8093a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8093a6e:	f04f 0900 	mov.w	r9, #0
 8093a72:	441d      	add	r5, r3
 8093a74:	782b      	ldrb	r3, [r5, #0]
 8093a76:	2b2c      	cmp	r3, #44	; 0x2c
 8093a78:	bf08      	it	eq
 8093a7a:	3501      	addeq	r5, #1
 8093a7c:	f895 8000 	ldrb.w	r8, [r5]
 8093a80:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8093a84:	d126      	bne.n	8093ad4 <_tzset_unlocked_r+0x1f8>
 8093a86:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8093a8a:	9302      	str	r3, [sp, #8]
 8093a8c:	ab09      	add	r3, sp, #36	; 0x24
 8093a8e:	9300      	str	r3, [sp, #0]
 8093a90:	9603      	str	r6, [sp, #12]
 8093a92:	9601      	str	r6, [sp, #4]
 8093a94:	4633      	mov	r3, r6
 8093a96:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8093a9a:	494d      	ldr	r1, [pc, #308]	; (8093bd0 <_tzset_unlocked_r+0x2f4>)
 8093a9c:	4628      	mov	r0, r5
 8093a9e:	f7fd fe13 	bl	80916c8 <siscanf>
 8093aa2:	2803      	cmp	r0, #3
 8093aa4:	d17e      	bne.n	8093ba4 <_tzset_unlocked_r+0x2c8>
 8093aa6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8093aaa:	1e4b      	subs	r3, r1, #1
 8093aac:	2b0b      	cmp	r3, #11
 8093aae:	d879      	bhi.n	8093ba4 <_tzset_unlocked_r+0x2c8>
 8093ab0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8093ab4:	1e53      	subs	r3, r2, #1
 8093ab6:	2b04      	cmp	r3, #4
 8093ab8:	d874      	bhi.n	8093ba4 <_tzset_unlocked_r+0x2c8>
 8093aba:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8093abe:	2b06      	cmp	r3, #6
 8093ac0:	d870      	bhi.n	8093ba4 <_tzset_unlocked_r+0x2c8>
 8093ac2:	f887 8008 	strb.w	r8, [r7, #8]
 8093ac6:	60f9      	str	r1, [r7, #12]
 8093ac8:	613a      	str	r2, [r7, #16]
 8093aca:	617b      	str	r3, [r7, #20]
 8093acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8093ace:	eb05 0803 	add.w	r8, r5, r3
 8093ad2:	e02a      	b.n	8093b2a <_tzset_unlocked_r+0x24e>
 8093ad4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8093ad8:	bf06      	itte	eq
 8093ada:	4643      	moveq	r3, r8
 8093adc:	3501      	addeq	r5, #1
 8093ade:	2344      	movne	r3, #68	; 0x44
 8093ae0:	220a      	movs	r2, #10
 8093ae2:	a90b      	add	r1, sp, #44	; 0x2c
 8093ae4:	4628      	mov	r0, r5
 8093ae6:	9305      	str	r3, [sp, #20]
 8093ae8:	f7ff fe36 	bl	8093758 <strtoul>
 8093aec:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8093af0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8093af4:	4545      	cmp	r5, r8
 8093af6:	9b05      	ldr	r3, [sp, #20]
 8093af8:	d114      	bne.n	8093b24 <_tzset_unlocked_r+0x248>
 8093afa:	234d      	movs	r3, #77	; 0x4d
 8093afc:	f1b9 0f00 	cmp.w	r9, #0
 8093b00:	d107      	bne.n	8093b12 <_tzset_unlocked_r+0x236>
 8093b02:	7223      	strb	r3, [r4, #8]
 8093b04:	2303      	movs	r3, #3
 8093b06:	60e3      	str	r3, [r4, #12]
 8093b08:	2302      	movs	r3, #2
 8093b0a:	6123      	str	r3, [r4, #16]
 8093b0c:	f8c4 9014 	str.w	r9, [r4, #20]
 8093b10:	e00b      	b.n	8093b2a <_tzset_unlocked_r+0x24e>
 8093b12:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8093b16:	230b      	movs	r3, #11
 8093b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8093b1a:	2301      	movs	r3, #1
 8093b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8093b1e:	2300      	movs	r3, #0
 8093b20:	6323      	str	r3, [r4, #48]	; 0x30
 8093b22:	e002      	b.n	8093b2a <_tzset_unlocked_r+0x24e>
 8093b24:	b280      	uxth	r0, r0
 8093b26:	723b      	strb	r3, [r7, #8]
 8093b28:	6178      	str	r0, [r7, #20]
 8093b2a:	2302      	movs	r3, #2
 8093b2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8093b30:	2300      	movs	r3, #0
 8093b32:	f8ad 301e 	strh.w	r3, [sp, #30]
 8093b36:	f8ad 3020 	strh.w	r3, [sp, #32]
 8093b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8093b3c:	f898 3000 	ldrb.w	r3, [r8]
 8093b40:	2b2f      	cmp	r3, #47	; 0x2f
 8093b42:	d10b      	bne.n	8093b5c <_tzset_unlocked_r+0x280>
 8093b44:	9603      	str	r6, [sp, #12]
 8093b46:	f8cd a008 	str.w	sl, [sp, #8]
 8093b4a:	9601      	str	r6, [sp, #4]
 8093b4c:	f8cd b000 	str.w	fp, [sp]
 8093b50:	4633      	mov	r3, r6
 8093b52:	aa07      	add	r2, sp, #28
 8093b54:	491f      	ldr	r1, [pc, #124]	; (8093bd4 <_tzset_unlocked_r+0x2f8>)
 8093b56:	4640      	mov	r0, r8
 8093b58:	f7fd fdb6 	bl	80916c8 <siscanf>
 8093b5c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8093b60:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8093b64:	213c      	movs	r1, #60	; 0x3c
 8093b66:	fb01 3302 	mla	r3, r1, r2, r3
 8093b6a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8093b6e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8093b72:	fb01 3302 	mla	r3, r1, r2, r3
 8093b76:	61bb      	str	r3, [r7, #24]
 8093b78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8093b7a:	f109 0901 	add.w	r9, r9, #1
 8093b7e:	f1b9 0f02 	cmp.w	r9, #2
 8093b82:	4445      	add	r5, r8
 8093b84:	f107 071c 	add.w	r7, r7, #28
 8093b88:	f47f af74 	bne.w	8093a74 <_tzset_unlocked_r+0x198>
 8093b8c:	6860      	ldr	r0, [r4, #4]
 8093b8e:	f7ff fdf5 	bl	809377c <__tzcalc_limits>
 8093b92:	6a22      	ldr	r2, [r4, #32]
 8093b94:	4b07      	ldr	r3, [pc, #28]	; (8093bb4 <_tzset_unlocked_r+0x2d8>)
 8093b96:	601a      	str	r2, [r3, #0]
 8093b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8093b9a:	1a9b      	subs	r3, r3, r2
 8093b9c:	4a07      	ldr	r2, [pc, #28]	; (8093bbc <_tzset_unlocked_r+0x2e0>)
 8093b9e:	bf18      	it	ne
 8093ba0:	2301      	movne	r3, #1
 8093ba2:	6013      	str	r3, [r2, #0]
 8093ba4:	b00d      	add	sp, #52	; 0x34
 8093ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093baa:	bf00      	nop
 8093bac:	08097994 	.word	0x08097994
 8093bb0:	200035ac 	.word	0x200035ac
 8093bb4:	200035b4 	.word	0x200035b4
 8093bb8:	08097997 	.word	0x08097997
 8093bbc:	200035b0 	.word	0x200035b0
 8093bc0:	200004ac 	.word	0x200004ac
 8093bc4:	2000359f 	.word	0x2000359f
 8093bc8:	0809799b 	.word	0x0809799b
 8093bcc:	080979be 	.word	0x080979be
 8093bd0:	080979aa 	.word	0x080979aa
 8093bd4:	080979bd 	.word	0x080979bd
 8093bd8:	20003594 	.word	0x20003594

08093bdc <_findenv_r>:
 8093bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8093be0:	4607      	mov	r7, r0
 8093be2:	468b      	mov	fp, r1
 8093be4:	4690      	mov	r8, r2
 8093be6:	f000 f8e9 	bl	8093dbc <__env_lock>
 8093bea:	4b19      	ldr	r3, [pc, #100]	; (8093c50 <_findenv_r+0x74>)
 8093bec:	681d      	ldr	r5, [r3, #0]
 8093bee:	469a      	mov	sl, r3
 8093bf0:	b13d      	cbz	r5, 8093c02 <_findenv_r+0x26>
 8093bf2:	465c      	mov	r4, fp
 8093bf4:	4623      	mov	r3, r4
 8093bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8093bfa:	b142      	cbz	r2, 8093c0e <_findenv_r+0x32>
 8093bfc:	2a3d      	cmp	r2, #61	; 0x3d
 8093bfe:	461c      	mov	r4, r3
 8093c00:	d1f8      	bne.n	8093bf4 <_findenv_r+0x18>
 8093c02:	4638      	mov	r0, r7
 8093c04:	f000 f8db 	bl	8093dbe <__env_unlock>
 8093c08:	2000      	movs	r0, #0
 8093c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093c0e:	ebcb 0404 	rsb	r4, fp, r4
 8093c12:	46a9      	mov	r9, r5
 8093c14:	f859 0b04 	ldr.w	r0, [r9], #4
 8093c18:	2800      	cmp	r0, #0
 8093c1a:	d0f2      	beq.n	8093c02 <_findenv_r+0x26>
 8093c1c:	4622      	mov	r2, r4
 8093c1e:	4659      	mov	r1, fp
 8093c20:	f7ff fced 	bl	80935fe <strncmp>
 8093c24:	b988      	cbnz	r0, 8093c4a <_findenv_r+0x6e>
 8093c26:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8093c2a:	191e      	adds	r6, r3, r4
 8093c2c:	5d1b      	ldrb	r3, [r3, r4]
 8093c2e:	2b3d      	cmp	r3, #61	; 0x3d
 8093c30:	d10b      	bne.n	8093c4a <_findenv_r+0x6e>
 8093c32:	f8da 3000 	ldr.w	r3, [sl]
 8093c36:	4638      	mov	r0, r7
 8093c38:	1aed      	subs	r5, r5, r3
 8093c3a:	10ad      	asrs	r5, r5, #2
 8093c3c:	f8c8 5000 	str.w	r5, [r8]
 8093c40:	f000 f8bd 	bl	8093dbe <__env_unlock>
 8093c44:	1c70      	adds	r0, r6, #1
 8093c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093c4a:	464d      	mov	r5, r9
 8093c4c:	e7e1      	b.n	8093c12 <_findenv_r+0x36>
 8093c4e:	bf00      	nop
 8093c50:	200004f4 	.word	0x200004f4

08093c54 <_getenv_r>:
 8093c54:	b507      	push	{r0, r1, r2, lr}
 8093c56:	aa01      	add	r2, sp, #4
 8093c58:	f7ff ffc0 	bl	8093bdc <_findenv_r>
 8093c5c:	b003      	add	sp, #12
 8093c5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08093c64 <_gettimeofday_r>:
 8093c64:	b538      	push	{r3, r4, r5, lr}
 8093c66:	4c07      	ldr	r4, [pc, #28]	; (8093c84 <_gettimeofday_r+0x20>)
 8093c68:	2300      	movs	r3, #0
 8093c6a:	4605      	mov	r5, r0
 8093c6c:	4608      	mov	r0, r1
 8093c6e:	4611      	mov	r1, r2
 8093c70:	6023      	str	r3, [r4, #0]
 8093c72:	f7f2 fe94 	bl	808699e <_gettimeofday>
 8093c76:	1c43      	adds	r3, r0, #1
 8093c78:	d102      	bne.n	8093c80 <_gettimeofday_r+0x1c>
 8093c7a:	6823      	ldr	r3, [r4, #0]
 8093c7c:	b103      	cbz	r3, 8093c80 <_gettimeofday_r+0x1c>
 8093c7e:	602b      	str	r3, [r5, #0]
 8093c80:	bd38      	pop	{r3, r4, r5, pc}
 8093c82:	bf00      	nop
 8093c84:	200035bc 	.word	0x200035bc

08093c88 <__gettzinfo>:
 8093c88:	4800      	ldr	r0, [pc, #0]	; (8093c8c <__gettzinfo+0x4>)
 8093c8a:	4770      	bx	lr
 8093c8c:	200004b4 	.word	0x200004b4

08093c90 <gmtime_r>:
 8093c90:	6802      	ldr	r2, [r0, #0]
 8093c92:	4b46      	ldr	r3, [pc, #280]	; (8093dac <gmtime_r+0x11c>)
 8093c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8093c96:	fb92 f4f3 	sdiv	r4, r2, r3
 8093c9a:	fb03 2214 	mls	r2, r3, r4, r2
 8093c9e:	2a00      	cmp	r2, #0
 8093ca0:	bfbc      	itt	lt
 8093ca2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8093ca6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8093caa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8093cae:	fb92 f3f0 	sdiv	r3, r2, r0
 8093cb2:	fb00 2213 	mls	r2, r0, r3, r2
 8093cb6:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8093cba:	608b      	str	r3, [r1, #8]
 8093cbc:	fb92 f3f0 	sdiv	r3, r2, r0
 8093cc0:	fb00 2213 	mls	r2, r0, r3, r2
 8093cc4:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8093cc8:	bfac      	ite	ge
 8093cca:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8093cce:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8093cd2:	604b      	str	r3, [r1, #4]
 8093cd4:	600a      	str	r2, [r1, #0]
 8093cd6:	2307      	movs	r3, #7
 8093cd8:	1ce2      	adds	r2, r4, #3
 8093cda:	fb92 f3f3 	sdiv	r3, r2, r3
 8093cde:	4d34      	ldr	r5, [pc, #208]	; (8093db0 <gmtime_r+0x120>)
 8093ce0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8093ce4:	fb94 f5f5 	sdiv	r5, r4, r5
 8093ce8:	1ad3      	subs	r3, r2, r3
 8093cea:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8093cee:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8093cf2:	618b      	str	r3, [r1, #24]
 8093cf4:	4b2f      	ldr	r3, [pc, #188]	; (8093db4 <gmtime_r+0x124>)
 8093cf6:	4830      	ldr	r0, [pc, #192]	; (8093db8 <gmtime_r+0x128>)
 8093cf8:	fb03 4405 	mla	r4, r3, r5, r4
 8093cfc:	fbb4 f2f2 	udiv	r2, r4, r2
 8093d00:	fbb4 f3f7 	udiv	r3, r4, r7
 8093d04:	fbb4 f0f0 	udiv	r0, r4, r0
 8093d08:	4422      	add	r2, r4
 8093d0a:	1ad2      	subs	r2, r2, r3
 8093d0c:	f648 6694 	movw	r6, #36500	; 0x8e94
 8093d10:	1a13      	subs	r3, r2, r0
 8093d12:	f240 126d 	movw	r2, #365	; 0x16d
 8093d16:	fbb3 f6f6 	udiv	r6, r3, r6
 8093d1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8093d1e:	fbb3 f3f7 	udiv	r3, r3, r7
 8093d22:	4434      	add	r4, r6
 8093d24:	1ae3      	subs	r3, r4, r3
 8093d26:	fb02 3310 	mls	r3, r2, r0, r3
 8093d2a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8093d2e:	2499      	movs	r4, #153	; 0x99
 8093d30:	3202      	adds	r2, #2
 8093d32:	fbb2 f2f4 	udiv	r2, r2, r4
 8093d36:	4354      	muls	r4, r2
 8093d38:	1ca6      	adds	r6, r4, #2
 8093d3a:	2405      	movs	r4, #5
 8093d3c:	fbb6 f4f4 	udiv	r4, r6, r4
 8093d40:	2a0a      	cmp	r2, #10
 8093d42:	bf34      	ite	cc
 8093d44:	2602      	movcc	r6, #2
 8093d46:	f06f 0609 	mvncs.w	r6, #9
 8093d4a:	4416      	add	r6, r2
 8093d4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8093d50:	fb02 0505 	mla	r5, r2, r5, r0
 8093d54:	1c5f      	adds	r7, r3, #1
 8093d56:	2e01      	cmp	r6, #1
 8093d58:	bf98      	it	ls
 8093d5a:	3501      	addls	r5, #1
 8093d5c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8093d60:	eba7 0704 	sub.w	r7, r7, r4
 8093d64:	d302      	bcc.n	8093d6c <gmtime_r+0xdc>
 8093d66:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8093d6a:	e014      	b.n	8093d96 <gmtime_r+0x106>
 8093d6c:	0782      	lsls	r2, r0, #30
 8093d6e:	d105      	bne.n	8093d7c <gmtime_r+0xec>
 8093d70:	2464      	movs	r4, #100	; 0x64
 8093d72:	fbb0 f2f4 	udiv	r2, r0, r4
 8093d76:	fb04 0212 	mls	r2, r4, r2, r0
 8093d7a:	b94a      	cbnz	r2, 8093d90 <gmtime_r+0x100>
 8093d7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8093d80:	fbb0 f4f2 	udiv	r4, r0, r2
 8093d84:	fb02 0014 	mls	r0, r2, r4, r0
 8093d88:	fab0 f280 	clz	r2, r0
 8093d8c:	0952      	lsrs	r2, r2, #5
 8093d8e:	e000      	b.n	8093d92 <gmtime_r+0x102>
 8093d90:	2201      	movs	r2, #1
 8093d92:	333b      	adds	r3, #59	; 0x3b
 8093d94:	441a      	add	r2, r3
 8093d96:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8093d9a:	2300      	movs	r3, #0
 8093d9c:	61ca      	str	r2, [r1, #28]
 8093d9e:	614d      	str	r5, [r1, #20]
 8093da0:	610e      	str	r6, [r1, #16]
 8093da2:	60cf      	str	r7, [r1, #12]
 8093da4:	620b      	str	r3, [r1, #32]
 8093da6:	4608      	mov	r0, r1
 8093da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8093daa:	bf00      	nop
 8093dac:	00015180 	.word	0x00015180
 8093db0:	00023ab1 	.word	0x00023ab1
 8093db4:	fffdc54f 	.word	0xfffdc54f
 8093db8:	00023ab0 	.word	0x00023ab0

08093dbc <__env_lock>:
 8093dbc:	4770      	bx	lr

08093dbe <__env_unlock>:
 8093dbe:	4770      	bx	lr

08093dc0 <dynalib_user>:
 8093dc0:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8093dd0:	0000 0000 6568 6c6c 006f 6e45 7263 7079     ....hello.Encryp
 8093de0:	6574 2064 6144 6174 203a 4400 6365 7972     ted Data: .Decry
 8093df0:	7470 6465 4420 7461 3a61 0020 6325 7400     pted Data: .%c.t
 8093e00:	7365 2e74 7874 0074 4724 4750 4147 2400     est.txt.$GPGGA.$
 8093e10:	5047 5347 0041 4724 4750 5653 2400 5047     GPGSA.$GPGSV.$GP
 8093e20:	4d52 0043 4724 5650 4754 2400 4750 4f54     RMC.$GPVTG.$PGTO
 8093e30:	0050 5024 544d 324b 3135 392c 3036 2a30     P.$PMTK251,9600*
 8093e40:	3731 2400 4d50 4b54 3232 2c30 3035 3030     17.$PMTK220,5000
 8093e50:	312a 0042 5024 544d 334b 3030 312c 3030     *1B.$PMTK300,100
 8093e60:	2c30 2c30 2c30 2c30 2a30 4331 2400 4d50     0,0,0,0,0*1C.$PM
 8093e70:	4b54 3133 2c34 2c30 2c31 2c30 2c31 2c30     TK314,0,1,0,1,0,
 8093e80:	2c30 2c30 2c30 2c30 2c30 2c30 2c30 2c30     0,0,0,0,0,0,0,0,
 8093e90:	2c30 2c30 2c30 2c30 2c30 2a30 3832 2400     0,0,0,0,0,0*28.$
 8093ea0:	4d50 4b54 3033 2c31 2a32 4532 2400 4750     PMTK301,2*2E.$PG
 8093eb0:	4d43 2c44 3333 312c 362a 0043 7542 6666     CMD,33,1*6C.Buff
 8093ec0:	7265 4f20 6576 7572 3a6e 2720 2000               er Overun: '.

08093ecd <CSWTCH.59>:
 8093ecd:	0020 0000 0040 0000 0060 a000                     ...@...`..

08093ed8 <_ZL6spiPtr>:
 8093ed8:	34a0 2000 34b0 2000 34c0 2000               .4. .4. .4. 

08093ee4 <_ZTV5SdSpi>:
	...
 8093eec:	1535 0808 1545 0808 1531 0808 15c1 0808     5...E...1.......
 8093efc:	15e5 0808 15d5 0808 1629 0808 0600 514d     ........).....MQ
 8093f0c:	7349 7064 0003 4d04 5451 0454 2020 2021     Isdp...MQTT.  ! 
 8093f1c:	2500 2e64 6425 252e 2e64 6425 0000 0000     .%d.%d.%d.%d....

08093f2c <_ZL1K>:
 8093f2c:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 8093f3c:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 8093f4c:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 8093f5c:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 8093f6c:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 8093f7c:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 8093f8c:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 8093f9c:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 8093fac:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 8093fbc:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 8093fcc:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 8093fdc:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 8093fec:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 8093ffc:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 809400c:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 809401c:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
 809402c:	862a 8648 0df7 0501 000c 0000               *.H.........

08094038 <mbedtls_sha1_info>:
 8094038:	0004 0000 45fd 0809 0014 0000 0040 0000     .....E......@...
 8094048:	40d1 0808 40cd 0808 40c9 0808 6939 0808     .@...@...@..9i..
 8094058:	40b3 0808 40a1 0808 409d 0808 4099 0808     .@...@...@...@..

08094068 <mbedtls_sha224_info>:
 8094068:	0005 0000 446e 0809 001c 0000 0040 0000     ....nD......@...
 8094078:	4119 0808 4115 0808 4111 0808 4105 0808     .A...A...A...A..
 8094088:	40ef 0808 40dd 0808 40d9 0808 40d5 0808     .@...@...@...@..

08094098 <mbedtls_sha384_info>:
 8094098:	0007 0000 5015 0809 0030 0000 0080 0000     .....P..0.......
 80940a8:	4169 0808 4165 0808 4161 0808 4155 0808     iA..eA..aA..UA..
 80940b8:	413f 0808 412d 0808 4129 0808 4125 0808     ?A..-A..)A..%A..

080940c8 <mbedtls_sha512_info>:
 80940c8:	0008 0000 44d1 0809 0040 0000 0080 0000     .....D..@.......
 80940d8:	416f 0808 4165 0808 4161 0808 415b 0808     oA..eA..aA..[A..
 80940e8:	413f 0808 412d 0808 4129 0808 4125 0808     ?A..-A..)A..%A..

080940f8 <mbedtls_sha256_info>:
 80940f8:	0006 0000 5075 0809 0020 0000 0040 0000     ....uP.. ...@...
 8094108:	411f 0808 4115 0808 4111 0808 410b 0808     .A...A...A...A..
 8094118:	40ef 0808 40dd 0808 40d9 0808 40d5 0808     .@...@...@...@..

08094128 <_ZL18oid_x520_attr_type>:
 8094128:	48d0 0809 0003 0000 48d4 0809 48e5 0809     .H.......H...H..
 8094138:	5ad5 0809 48f1 0809 0003 0000 48f5 0809     .Z...H.......H..
 8094148:	4907 0809 3e6b 0809 490f 0809 0003 0000     .I..k>...I......
 8094158:	4913 0809 4922 0809 492b 0809 492d 0809     .I.."I..+I..-I..
 8094168:	0003 0000 4931 0809 493d 0809 4943 0809     ....1I..=I..CI..
 8094178:	4946 0809 0003 0000 494a 0809 4961 0809     FI......JI..aI..
 8094188:	496e 0809 4970 0809 0003 0000 4974 0809     nI..pI......tI..
 8094198:	4991 0809 499a 0809 499d 0809 0009 0000     .I...I...I......
 80941a8:	49a7 0809 49b4 0809 49a7 0809 49c3 0809     .I...I...I...I..
 80941b8:	0003 0000 49c7 0809 49da 0809 49cd 0809     .....I...I...I..
 80941c8:	49e8 0809 0003 0000 49ec 0809 4a00 0809     .I.......I...J..
 80941d8:	49f2 0809 4a0f 0809 0003 0000 4a13 0809     .I...J.......J..
 80941e8:	4a24 0809 4a19 0809 4a30 0809 0003 0000     $J...J..0J......
 80941f8:	4a34 0809 4a42 0809 4a4a 0809 4a4d 0809     4J..BJ..JJ..MJ..
 8094208:	0003 0000 4a51 0809 4a61 0809 4a6c 0809     ....QJ..aJ..lJ..
 8094218:	4a6f 0809 0003 0000 4a73 0809 4a82 0809     oJ......sJ...J..
 8094228:	4a79 0809 4a8b 0809 0003 0000 4a8f 0809     yJ...J.......J..
 8094238:	4aa9 0809 4a95 0809 4abe 0809 0003 0000     .J...J...J......
 8094248:	4ac2 0809 4ace 0809 4ac8 0809 4ad4 0809     .J...J...J...J..
 8094258:	0003 0000 4ad8 0809 4aea 0809 4ade 0809     .....J...J...J..
 8094268:	4b07 0809 0003 0000 4b0b 0809 4b1b 0809     .K.......K...K..
 8094278:	4b11 0809 4b25 0809 000a 0000 4b30 0809     .K..%K......0K..
 8094288:	4b43 0809 4b54 0809 4b57 0809 0003 0000     CK..TK..WK......
 8094298:	4b5b 0809 4b72 0809 4b61 0809 0000 0000     [K..rK..aK......
	...

080942b8 <_ZL17oid_ext_key_usage>:
 80942b8:	46e9 0809 0008 0000 46f2 0809 4703 0809     .F.......F...G..
 80942c8:	4721 0809 0008 0000 472a 0809 473b 0809     !G......*G..;G..
 80942d8:	4759 0809 0008 0000 4762 0809 4774 0809     YG......bG..tG..
 80942e8:	4781 0809 0008 0000 478a 0809 47a0 0809     .G.......G...G..
 80942f8:	47b2 0809 0008 0000 47bb 0809 47ce 0809     .G.......G...G..
 8094308:	47dc 0809 0008 0000 47e5 0809 47f7 0809     .G.......G...G..
	...

08094328 <_ZL10oid_pk_alg>:
 8094328:	4573 0809 0009 0000 457d 0809 458b 0809     sE......}E...E..
 8094338:	0001 0000 458f 0809 0007 0000 4597 0809     .....E.......E..
 8094348:	45a6 0809 0002 0000 45b5 0809 0005 0000     .E.......E......
 8094358:	45bb 0809 45c3 0809 0003 0000 0000 0000     .E...E..........
	...

08094378 <_ZL14oid_cipher_alg>:
 8094378:	4543 0809 0005 0000 4549 0809 441f 0809     CE......IE...D..
 8094388:	0021 0000 4550 0809 0008 0000 4559 0809     !...PE......YE..
 8094398:	4566 0809 0025 0000 0000 0000 0000 0000     fE..%...........
	...
 80943b4:	862a 8648 0df7 0c01 0301 7000 6562 6957     *.H........pbeWi
 80943c4:	6874 4853 4141 646e 2d33 654b 5479 6972     thSHAAnd3-KeyTri
 80943d4:	6c70 4465 5345 432d 4342 5000 4542 7720     pleDES-CBC.PBE w
 80943e4:	7469 2068 4853 3141 6120 646e 3320 4b2d     ith SHA1 and 3-K
 80943f4:	7965 3320 4544 0053 862a 8648 0df7 0c01     ey 3DES.*.H.....
 8094404:	0401 7000 6562 6957 6874 4853 4141 646e     ...pbeWithSHAAnd
 8094414:	2d32 654b 5479 6972 6c70 4465 5345 432d     2-KeyTripleDES-C
 8094424:	4342 5000 4542 7720 7469 2068 4853 3141     BC.PBE with SHA1
 8094434:	6120 646e 3220 4b2d 7965 3320 4544 0053      and 2-Key 3DES.
 8094444:	862a 8648 0df7 0702 6800 616d 5363 4148     *.H......hmacSHA
 8094454:	0031 4d48 4341 532d 4148 312d 2a00 4886     1.HMAC-SHA-1.*.H
 8094464:	f786 020d 0008 6d68 6361 4853 3241 3432     ......hmacSHA224
 8094474:	4800 414d 2d43 4853 2d41 3232 0034 862a     .HMAC-SHA-224.*.
 8094484:	8648 0df7 0902 6800 616d 5363 4148 3532     H......hmacSHA25
 8094494:	0036 4d48 4341 532d 4148 322d 3635 2a00     6.HMAC-SHA-256.*
 80944a4:	4886 f786 020d 000a 6d68 6361 4853 3341     .H......hmacSHA3
 80944b4:	3438 4800 414d 2d43 4853 2d41 3833 0034     84.HMAC-SHA-384.
 80944c4:	862a 8648 0df7 0b02 6800 616d 5363 4148     *.H......hmacSHA
 80944d4:	3135 0032 4d48 4341 532d 4148 352d 3231     512.HMAC-SHA-512
 80944e4:	2b00 030e 1a02 6900 2d64 6873 3161 6000     .+.....id-sha1.`
 80944f4:	4886 6501 0403 0402 6900 2d64 6873 3261     .H.e.....id-sha2
 8094504:	3432 6000 4886 6501 0403 0102 6900 2d64     24.`.H.e.....id-
 8094514:	6873 3261 3635 6000 4886 6501 0403 0202     sha256.`.H.e....
 8094524:	6900 2d64 6873 3361 3438 6000 4886 6501     .id-sha384.`.H.e
 8094534:	0403 0302 6900 2d64 6873 3561 3231 2b00     .....id-sha512.+
 8094544:	030e 0702 6400 7365 4243 0043 862a 8648     .....desCBC.*.H.
 8094554:	0df7 0703 6400 7365 652d 6564 2d33 6263     .....des-ede3-cb
 8094564:	0063 4544 2d53 4445 3345 432d 4342 2a00     c.DES-EDE3-CBC.*
 8094574:	4886 f786 010d 0101 7200 6173 6e45 7263     .H.......rsaEncr
 8094584:	7079 6974 6e6f 5200 4153 2a00 4886 3dce     yption.RSA.*.H.=
 8094594:	0102 6900 2d64 6365 7550 6c62 6369 654b     ...id-ecPublicKe
 80945a4:	0079 6547 656e 6972 2063 4345 6b20 7965     y.Generic EC key
 80945b4:	2b00 0481 0c01 6900 2d64 6365 4844 4500     .+.....id-ecDH.E
 80945c4:	2043 656b 2079 6f66 2072 4345 4844 2a00     C key for ECDH.*
 80945d4:	4886 f786 010d 0501 7300 6168 312d 6957     .H.......sha-1Wi
 80945e4:	6874 5352 4541 636e 7972 7470 6f69 006e     thRSAEncryption.
 80945f4:	5352 2041 6977 6874 5320 4148 0031 862a     RSA with SHA1.*.
 8094604:	8648 0df7 0101 000e 6873 3261 3432 6957     H.......sha224Wi
 8094614:	6874 5352 4541 636e 7972 7470 6f69 006e     thRSAEncryption.
 8094624:	5352 2041 6977 6874 5320 4148 322d 3432     RSA with SHA-224
 8094634:	2a00 4886 f786 010d 0b01 7300 6168 3532     .*.H.......sha25
 8094644:	5736 7469 5268 4153 6e45 7263 7079 6974     6WithRSAEncrypti
 8094654:	6e6f 5200 4153 7720 7469 2068 4853 2d41     on.RSA with SHA-
 8094664:	3532 0036 862a 8648 0df7 0101 000c 6873     256.*.H.......sh
 8094674:	3361 3438 6957 6874 5352 4541 636e 7972     a384WithRSAEncry
 8094684:	7470 6f69 006e 5352 2041 6977 6874 5320     ption.RSA with S
 8094694:	4148 332d 3438 2a00 4886 f786 010d 0d01     HA-384.*.H......
 80946a4:	7300 6168 3135 5732 7469 5268 4153 6e45     .sha512WithRSAEn
 80946b4:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
 80946c4:	2068 4853 2d41 3135 0032 0e2b 0203 001d     h SHA-512.+.....
 80946d4:	862a 8648 0df7 0101 000a 5352 5341 4153     *.H.......RSASSA
 80946e4:	502d 5353 2b00 0106 0505 0307 0001 6469     -PSS.+........id
 80946f4:	6b2d 2d70 6573 7672 7265 7541 6874 5400     -kp-serverAuth.T
 8094704:	534c 5720 6265 5320 7265 6576 2072 7541     LS Web Server Au
 8094714:	6874 6e65 6974 6163 6974 6e6f 2b00 0106     thentication.+..
 8094724:	0505 0307 0002 6469 6b2d 2d70 6c63 6569     ......id-kp-clie
 8094734:	746e 7541 6874 5400 534c 5720 6265 4320     ntAuth.TLS Web C
 8094744:	696c 6e65 2074 7541 6874 6e65 6974 6163     lient Authentica
 8094754:	6974 6e6f 2b00 0106 0505 0307 0003 6469     tion.+........id
 8094764:	6b2d 2d70 6f63 6564 6953 6e67 6e69 0067     -kp-codeSigning.
 8094774:	6f43 6564 5320 6769 696e 676e 2b00 0106     Code Signing.+..
 8094784:	0505 0307 0004 6469 6b2d 2d70 6d65 6961     ......id-kp-emai
 8094794:	506c 6f72 6574 7463 6f69 006e 2d45 616d     lProtection.E-ma
 80947a4:	6c69 5020 6f72 6574 7463 6f69 006e 062b     il Protection.+.
 80947b4:	0501 0705 0803 6900 2d64 706b 742d 6d69     .......id-kp-tim
 80947c4:	5365 6174 706d 6e69 0067 6954 656d 5320     eStamping.Time S
 80947d4:	6174 706d 6e69 0067 062b 0501 0705 0903     tamping.+.......
 80947e4:	6900 2d64 706b 4f2d 5343 5350 6769 696e     .id-kp-OCSPSigni
 80947f4:	676e 4f00 5343 2050 6953 6e67 6e69 0067     ng.OCSP Signing.
 8094804:	1d55 0013 6469 632d 2d65 6162 6973 4363     U...id-ce-basicC
 8094814:	6e6f 7473 6172 6e69 7374 4200 7361 6369     onstraints.Basic
 8094824:	4320 6e6f 7473 6172 6e69 7374 5500 0f1d      Constraints.U..
 8094834:	6900 2d64 6563 6b2d 7965 7355 6761 0065     .id-ce-keyUsage.
 8094844:	1d55 0025 6469 632d 2d65 7865 4b74 7965     U.%.id-ce-extKey
 8094854:	7355 6761 0065 7845 6574 646e 6465 4b20     Usage.Extended K
 8094864:	7965 5520 6173 6567 5500 111d 6900 2d64     ey Usage.U...id-
 8094874:	6563 732d 6275 656a 7463 6c41 4e74 6d61     ce-subjectAltNam
 8094884:	0065 7553 6a62 6365 2074 6c41 2074 614e     e.Subject Alt Na
 8094894:	656d 6000 4886 8601 42f8 0101 6900 2d64     me.`.H...B...id-
 80948a4:	656e 7374 6163 6570 632d 7265 7474 7079     netscape-certtyp
 80948b4:	0065 654e 7374 6163 6570 4320 7265 6974     e.Netscape Certi
 80948c4:	6966 6163 6574 5420 7079 0065 0455 0003     ficate Type.U...
 80948d4:	6469 612d 2d74 6f63 6d6d 6e6f 614e 656d     id-at-commonName
 80948e4:	4300 6d6f 6f6d 206e 614e 656d 5500 0604     .Common Name.U..
 80948f4:	6900 2d64 7461 632d 756f 746e 7972 614e     .id-at-countryNa
 8094904:	656d 4300 756f 746e 7972 5500 0704 6900     me.Country.U...i
 8094914:	2d64 7461 6c2d 636f 6c61 7469 0079 6f4c     d-at-locality.Lo
 8094924:	6163 696c 7974 4c00 5500 0804 6900 2d64     cality.L.U...id-
 8094934:	7461 732d 6174 6574 5300 6174 6574 5300     at-state.State.S
 8094944:	0054 0455 000a 6469 612d 2d74 726f 6167     T.U...id-at-orga
 8094954:	696e 617a 6974 6e6f 614e 656d 4f00 6772     nizationName.Org
 8094964:	6e61 7a69 7461 6f69 006e 004f 0455 000b     anization.O.U...
 8094974:	6469 612d 2d74 726f 6167 696e 617a 6974     id-at-organizati
 8094984:	6e6f 6c61 6e55 7469 614e 656d 4f00 6772     onalUnitName.Org
 8094994:	5520 696e 0074 554f 2a00 4886 f786 010d      Unit.OU.*.H....
 80949a4:	0109 6500 616d 6c69 6441 7264 7365 0073     ...emailAddress.
 80949b4:	2d45 616d 6c69 6120 6464 6572 7373 5500     E-mail address.U
 80949c4:	0504 6900 2d64 7461 732d 7265 6169 4e6c     ...id-at-serialN
 80949d4:	6d75 6562 0072 6553 6972 6c61 6e20 6d75     umber.Serial num
 80949e4:	6562 0072 0455 0010 6469 612d 2d74 6f70     ber.U...id-at-po
 80949f4:	7473 6c61 6441 7264 7365 0073 6f50 7473     stalAddress.Post
 8094a04:	6c61 6120 6464 6572 7373 5500 1104 6900     al address.U...i
 8094a14:	2d64 7461 702d 736f 6174 436c 646f 0065     d-at-postalCode.
 8094a24:	6f50 7473 6c61 6320 646f 0065 0455 0004     Postal code.U...
 8094a34:	6469 612d 2d74 7573 4e72 6d61 0065 7553     id-at-surName.Su
 8094a44:	6e72 6d61 0065 4e53 5500 2a04 6900 2d64     rname.SN.U.*.id-
 8094a54:	7461 672d 7669 6e65 614e 656d 4700 7669     at-givenName.Giv
 8094a64:	6e65 6e20 6d61 0065 4e47 5500 2b04 6900     en name.GN.U.+.i
 8094a74:	2d64 7461 692d 696e 6974 6c61 0073 6e49     d-at-initials.In
 8094a84:	7469 6169 736c 5500 2c04 6900 2d64 7461     itials.U.,.id-at
 8094a94:	672d 6e65 7265 7461 6f69 516e 6175 696c     -generationQuali
 8094aa4:	6966 7265 4700 6e65 7265 7461 6f69 206e     fier.Generation 
 8094ab4:	7571 6c61 6669 6569 0072 0455 000c 6469     qualifier.U...id
 8094ac4:	612d 2d74 6974 6c74 0065 6954 6c74 0065     -at-title.Title.
 8094ad4:	0455 002e 6469 612d 2d74 6e64 7551 6c61     U...id-at-dnQual
 8094ae4:	6669 6569 0072 6944 7473 6e69 7567 7369     ifier.Distinguis
 8094af4:	6568 2064 614e 656d 7120 6175 696c 6966     hed Name qualifi
 8094b04:	7265 5500 4104 6900 2d64 7461 702d 6573     er.U.A.id-at-pse
 8094b14:	6475 6e6f 6d79 5000 6573 6475 6e6f 6d79     udonym.Pseudonym
 8094b24:	0900 2692 9389 2cf2 0164 0019 6469 642d     ...&...,d...id-d
 8094b34:	6d6f 6961 436e 6d6f 6f70 656e 746e 4400     omainComponent.D
 8094b44:	6d6f 6961 206e 6f63 706d 6e6f 6e65 0074     omain component.
 8094b54:	4344 5500 2d04 6900 2d64 7461 752d 696e     DC.U.-.id-at-uni
 8094b64:	7571 4965 6564 746e 6669 6569 0072 6e55     queIdentifier.Un
 8094b74:	7169 6575 4920 6564 746e 6669 6569 0072     ique Identifier.

08094b84 <_ZL18oid_pkcs12_pbe_alg>:
 8094b84:	43b4 0809 000a 0000 43bf 0809 43df 0809     .C.......C...C..
 8094b94:	2504 0000 43fc 0809 000a 0000 4407 0809     .%...C.......D..
 8094ba4:	4427 0809 2304 0000 0000 0000 0000 0000     'D...#..........
	...

08094bc0 <_ZL10oid_md_alg>:
 8094bc0:	44e5 0809 0005 0000 44eb 0809 445b 0809     .D.......D..[D..
 8094bd0:	0004 0000 44f3 0809 0009 0000 44fd 0809     .....D.......D..
 8094be0:	462d 0809 0005 0000 4507 0809 0009 0000     -F.......E......
 8094bf0:	4511 0809 4660 0809 0006 0000 451b 0809     .E..`F.......E..
 8094c00:	0009 0000 4525 0809 4693 0809 0007 0000     ....%E...F......
 8094c10:	452f 0809 0009 0000 4539 0809 46c6 0809     /E......9E...F..
 8094c20:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

08094c38 <_ZL11oid_sig_alg>:
 8094c38:	45d3 0809 0009 0000 45dd 0809 45f4 0809     .E.......E...E..
 8094c48:	0104 0000 4602 0809 0009 0000 460c 0809     .....F.......F..
 8094c58:	4624 0809 0105 0000 4635 0809 0009 0000     $F......5F......
 8094c68:	463f 0809 4657 0809 0106 0000 4668 0809     ?F..WF......hF..
 8094c78:	0009 0000 4672 0809 468a 0809 0107 0000     ....rF...F......
 8094c88:	469b 0809 0009 0000 46a5 0809 46bd 0809     .F.......F...F..
 8094c98:	0108 0000 46ce 0809 0005 0000 45dd 0809     .....F.......E..
 8094ca8:	45f4 0809 0104 0000 46d4 0809 0009 0000     .E.......F......
 8094cb8:	46de 0809 46de 0809 0600 0000 0000 0000     .F...F..........
	...

08094cd8 <_ZL11oid_md_hmac>:
 8094cd8:	4444 0809 0008 0000 444d 0809 4456 0809     DD......MD..VD..
 8094ce8:	0004 0000 4461 0809 0008 0000 446a 0809     ....aD......jD..
 8094cf8:	4475 0809 0005 0000 4482 0809 0008 0000     uD.......D......
 8094d08:	448b 0809 4496 0809 0006 0000 44a3 0809     .D...D.......D..
 8094d18:	0008 0000 44ac 0809 44b7 0809 0007 0000     .....D...D......
 8094d28:	44c4 0809 0008 0000 44cd 0809 44d8 0809     .D.......D...D..
 8094d38:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

08094d50 <_ZL12oid_x509_ext>:
 8094d50:	4804 0809 0003 0000 4808 0809 481f 0809     .H.......H...H..
 8094d60:	0100 0000 4831 0809 0003 0000 4835 0809     ....1H......5H..
 8094d70:	4863 0809 0004 0000 4844 0809 0003 0000     cH......DH......
 8094d80:	4848 0809 485a 0809 0800 0000 486d 0809     HH..ZH......mH..
 8094d90:	0003 0000 4871 0809 4886 0809 0020 0000     ....qH...H.. ...
 8094da0:	4897 0809 0009 0000 48a1 0809 48b6 0809     .H.......H...H..
 8094db0:	0000 0001 0000 0000 0000 0000 0000 0000     ................
	...

08094dc8 <_ZL16aes_192_cbc_info>:
 8094dc8:	0206 0000 00c0 0000 4ef0 0809 0010 0000     .........N......
 8094dd8:	0000 0000 0010 0000 4f80 0809               .........O..

08094de4 <_ZL16aes_256_ecb_info>:
 8094de4:	0104 0000 0100 0000 4f08 0809 0010 0000     .........O......
 8094df4:	0000 0000 0010 0000 4f80 0809               .........O..

08094e00 <_ZL16aes_128_ecb_info>:
 8094e00:	0102 0000 0080 0000 4f20 0809 0010 0000     ........ O......
 8094e10:	0000 0000 0010 0000 4f80 0809               .........O..

08094e1c <_ZL12gcm_aes_info>:
 8094e1c:	0002 0000 0000 0000 0000 0000 6a23 0808     ............#j..
 8094e2c:	6a23 0808 6a0b 0808 69f9 0808               #j...j...i..

08094e38 <mbedtls_cipher_definitions>:
 8094e38:	0002 0000 4e00 0809 0003 0000 4f48 0809     .....N......HO..
 8094e48:	0004 0000 4de4 0809 0005 0000 4ea4 0809     .....M.......N..
 8094e58:	0006 0000 4dc8 0809 0007 0000 4f2c 0809     .....M......,O..
 8094e68:	000e 0000 4f64 0809 000f 0000 4e88 0809     ....dO.......N..
 8094e78:	0010 0000 4f9c 0809 0000 0000 0000 0000     .....O..........

08094e88 <_ZL16aes_192_gcm_info>:
 8094e88:	060f 0000 00c0 0000 4ecc 0809 000c 0000     .........N......
 8094e98:	0001 0000 0010 0000 4e1c 0809               .........N..

08094ea4 <_ZL16aes_128_cbc_info>:
 8094ea4:	0205 0000 0080 0000 4efc 0809 0010 0000     .........N......
 8094eb4:	0000 0000 0010 0000 4f80 0809 4541 2d53     .........O..AES-
 8094ec4:	3532 2d36 4347 004d 4541 2d53 3931 2d32     256-GCM.AES-192-
 8094ed4:	4347 004d 4541 2d53 3231 2d38 4347 004d     GCM.AES-128-GCM.
 8094ee4:	4541 2d53 3532 2d36 4243 0043 4541 2d53     AES-256-CBC.AES-
 8094ef4:	3931 2d32 4243 0043 4541 2d53 3231 2d38     192-CBC.AES-128-
 8094f04:	4243 0043 4541 2d53 3532 2d36 4345 0042     CBC.AES-256-ECB.
 8094f14:	4541 2d53 3931 2d32 4345 0042 4541 2d53     AES-192-ECB.AES-
 8094f24:	3231 2d38 4345 0042                         128-ECB.

08094f2c <_ZL16aes_256_cbc_info>:
 8094f2c:	0207 0000 0100 0000 4ee4 0809 0010 0000     .........N......
 8094f3c:	0000 0000 0010 0000 4f80 0809               .........O..

08094f48 <_ZL16aes_192_ecb_info>:
 8094f48:	0103 0000 00c0 0000 4f14 0809 0010 0000     .........O......
 8094f58:	0000 0000 0010 0000 4f80 0809               .........O..

08094f64 <_ZL16aes_128_gcm_info>:
 8094f64:	060e 0000 0080 0000 4ed8 0809 000c 0000     .........N......
 8094f74:	0001 0000 0010 0000 4e1c 0809               .........N..

08094f80 <_ZL8aes_info>:
 8094f80:	0002 0000 6a67 0808 6a5f 0808 6a5b 0808     ....gj.._j..[j..
 8094f90:	6a57 0808 6a3f 0808 6a2d 0808               Wj..?j..-j..

08094f9c <_ZL16aes_256_gcm_info>:
 8094f9c:	0610 0000 0100 0000 4ec0 0809 000c 0000     .........N......
 8094fac:	0001 0000 0010 0000 4e1c 0809 7372 2e61     .........N..rsa.
 8094fbc:	004e 7372 2e61 0045                         N.rsa.E.

08094fc4 <mbedtls_rsa_info>:
 8094fc4:	0001 0000 458b 0809 6acd 0808 6a6b 0808     .....E...j..kj..
 8094fd4:	6bb1 0808 6b71 0808 6b25 0808 6ad9 0808     .k..qk..%k...j..
 8094fe4:	6ac9 0808 6aaf 0808 6a9d 0808 6a79 0808     .j...j...j..yj..
 8094ff4:	6e75 6e6b 776f 006e 4c54 2d53 5352 2d41     unknown.TLS-RSA-
 8095004:	4957 4854 412d 5345 322d 3635 472d 4d43     WITH-AES-256-GCM
 8095014:	532d 4148 3833 0034 4c54 2d53 5352 2d41     -SHA384.TLS-RSA-
 8095024:	4957 4854 412d 5345 312d 3832 472d 4d43     WITH-AES-128-GCM
 8095034:	532d 4148 3532 0036 4c54 2d53 5352 2d41     -SHA256.TLS-RSA-
 8095044:	4957 4854 412d 5345 312d 3832 432d 4342     WITH-AES-128-CBC
 8095054:	532d 4148 3532 0036 4c54 2d53 5352 2d41     -SHA256.TLS-RSA-
 8095064:	4957 4854 412d 5345 322d 3635 432d 4342     WITH-AES-256-CBC
 8095074:	532d 4148 3532 0036 4c54 2d53 5352 2d41     -SHA256.TLS-RSA-
 8095084:	4957 4854 412d 5345 312d 3832 432d 4342     WITH-AES-128-CBC
 8095094:	532d 4148 5400 534c 522d 4153 572d 5449     -SHA.TLS-RSA-WIT
 80950a4:	2d48 4541 2d53 3532 2d36 4243 2d43 4853     H-AES-256-CBC-SH
 80950b4:	0041 0000                                   A...

080950b8 <_ZL23ciphersuite_definitions>:
 80950b8:	009d 0000 4ffc 0809 0710 0001 0003 0000     .....O..........
 80950c8:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80950d8:	009c 0000 501c 0809 060e 0001 0003 0000     .....P..........
 80950e8:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80950f8:	003c 0000 503c 0809 0605 0001 0003 0000     <...<P..........
 8095108:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 8095118:	003d 0000 505c 0809 0607 0001 0003 0000     =...\P..........
 8095128:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 8095138:	002f 0000 507c 0809 0405 0001 0003 0000     /...|P..........
 8095148:	0000 0000 0003 0000 0003 0000 0000 0000     ................
 8095158:	0035 0000 5099 0809 0407 0001 0003 0000     5....P..........
 8095168:	0000 0000 0003 0000 0003 0000 0000 0000     ................
 8095178:	0000 0000 457c 0809 0000 0000 0000 0000     ....|E..........
	...

08095198 <_ZL22ciphersuite_preference>:
 8095198:	c02c 0000 c030 0000 009f 0000 c0ad 0000     ,...0...........
 80951a8:	c09f 0000 c024 0000 c028 0000 006b 0000     ....$...(...k...
 80951b8:	c00a 0000 c014 0000 0039 0000 c0af 0000     ........9.......
 80951c8:	c0a3 0000 c087 0000 c08b 0000 c07d 0000     ............}...
 80951d8:	c073 0000 c077 0000 00c4 0000 0088 0000     s...w...........
 80951e8:	c02b 0000 c02f 0000 009e 0000 c0ac 0000     +.../...........
 80951f8:	c09e 0000 c023 0000 c027 0000 0067 0000     ....#...'...g...
 8095208:	c009 0000 c013 0000 0033 0000 c0ae 0000     ........3.......
 8095218:	c0a2 0000 c086 0000 c08a 0000 c07c 0000     ............|...
 8095228:	c072 0000 c076 0000 00be 0000 0045 0000     r...v.......E...
 8095238:	c008 0000 c012 0000 0016 0000 00ab 0000     ................
 8095248:	c0a7 0000 c038 0000 00b3 0000 c036 0000     ....8.......6...
 8095258:	0091 0000 c091 0000 c09b 0000 c097 0000     ................
 8095268:	c0ab 0000 00aa 0000 c0a6 0000 c037 0000     ............7...
 8095278:	00b2 0000 c035 0000 0090 0000 c090 0000     ....5...........
 8095288:	c096 0000 c09a 0000 c0aa 0000 c034 0000     ............4...
 8095298:	008f 0000 c0ff 0000 009d 0000 c09d 0000     ................
 80952a8:	003d 0000 0035 0000 c032 0000 c02a 0000     =...5...2...*...
 80952b8:	c00f 0000 c02e 0000 c026 0000 c005 0000     ........&.......
 80952c8:	c0a1 0000 c07b 0000 00c0 0000 0084 0000     ....{...........
 80952d8:	c08d 0000 c079 0000 c089 0000 c075 0000     ....y.......u...
 80952e8:	009c 0000 c09c 0000 003c 0000 002f 0000     ........<.../...
 80952f8:	c031 0000 c029 0000 c00e 0000 c02d 0000     1...).......-...
 8095308:	c025 0000 c004 0000 c0a0 0000 c07a 0000     %...........z...
 8095318:	00ba 0000 0041 0000 c08c 0000 c078 0000     ....A.......x...
 8095328:	c088 0000 c074 0000 000a 0000 c00d 0000     ....t...........
 8095338:	c003 0000 00ad 0000 00b7 0000 0095 0000     ................
 8095348:	c093 0000 c099 0000 00ac 0000 00b6 0000     ................
 8095358:	0094 0000 c092 0000 c098 0000 0093 0000     ................
 8095368:	00a9 0000 c0a5 0000 00af 0000 008d 0000     ................
 8095378:	c08f 0000 c095 0000 c0a9 0000 00a8 0000     ................
 8095388:	c0a4 0000 00ae 0000 008c 0000 c08e 0000     ................
 8095398:	c094 0000 c0a8 0000 008b 0000 c007 0000     ................
 80953a8:	c011 0000 c033 0000 008e 0000 0005 0000     ....3...........
 80953b8:	0004 0000 c00c 0000 c002 0000 0092 0000     ................
 80953c8:	008a 0000 0015 0000 0009 0000 c006 0000     ................
 80953d8:	c010 0000 c03b 0000 c03a 0000 c039 0000     ....;...:...9...
 80953e8:	00b5 0000 00b4 0000 002d 0000 003b 0000     ........-...;...
 80953f8:	0002 0000 0001 0000 c00b 0000 c001 0000     ................
 8095408:	00b9 0000 00b8 0000 002e 0000 00b1 0000     ................
 8095418:	00b0 0000 002c 0000 0000 0000 2b20 0020     ....,....... + .
 8095428:	202c 2500 3d73 3f00 3d3f 2500 3230 2558     , .%s=.??=.%02X%
 8095438:	0073 2e2e 2e2e 3f00 3f3f 2500 2073 656b     s......???.%s ke
 8095448:	2079 6973 657a 2a00 4886 f786 010d 010c     y size.*.H......
 8095458:	0001 862a 8648 0df7 0501 000d 2d2d 2d2d     ..*.H.......----
 8095468:	452d 444e 5220 4153 5020 4952 4156 4554     -END RSA PRIVATE
 8095478:	4b20 5945 2d2d 2d2d 002d 2d2d 2d2d 422d      KEY-----.-----B
 8095488:	4745 4e49 5220 4153 5020 4952 4156 4554     EGIN RSA PRIVATE
 8095498:	4b20 5945 2d2d 2d2d 002d 2d2d 2d2d 452d      KEY-----.-----E
 80954a8:	444e 5020 4952 4156 4554 4b20 5945 2d2d     ND PRIVATE KEY--
 80954b8:	2d2d 002d 2d2d 2d2d 422d 4745 4e49 5020     ---.-----BEGIN P
 80954c8:	4952 4156 4554 4b20 5945 2d2d 2d2d 002d     RIVATE KEY-----.
 80954d8:	2d2d 2d2d 452d 444e 4520 434e 5952 5450     -----END ENCRYPT
 80954e8:	4445 5020 4952 4156 4554 4b20 5945 2d2d     ED PRIVATE KEY--
 80954f8:	2d2d 002d 2d2d 2d2d 422d 4745 4e49 4520     ---.-----BEGIN E
 8095508:	434e 5952 5450 4445 5020 4952 4156 4554     NCRYPTED PRIVATE
 8095518:	4b20 5945 2d2d 2d2d 002d 2d2d 2d2d 452d      KEY-----.-----E
 8095528:	444e 5020 4255 494c 2043 454b 2d59 2d2d     ND PUBLIC KEY---
 8095538:	2d2d 2d00 2d2d 2d2d 4542 4947 204e 5550     --.-----BEGIN PU
 8095548:	4c42 4349 4b20 5945 2d2d 2d2d 002d 0000     BLIC KEY-----...

08095558 <_ZL5last4>:
	...
 8095560:	1c20 0000 0000 0000 3840 0000 0000 0000      .......@8......
 8095570:	2460 0000 0000 0000 7080 0000 0000 0000     `$.......p......
 8095580:	6ca0 0000 0000 0000 48c0 0000 0000 0000     .l.......H......
 8095590:	54e0 0000 0000 0000 e100 0000 0000 0000     .T..............
 80955a0:	fd20 0000 0000 0000 d940 0000 0000 0000      .......@.......
 80955b0:	c560 0000 0000 0000 9180 0000 0000 0000     `...............
 80955c0:	8da0 0000 0000 0000 a9c0 0000 0000 0000     ................
 80955d0:	b5e0 0000 0000 0000                         ........

080955d8 <_ZL14base64_dec_map>:
 80955d8:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
 80955e8:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
 80955f8:	7f7f 7f7f 7f7f 7f7f 7f7f 3e7f 7f7f 3f7f     ...........>...?
 8095608:	3534 3736 3938 3b3a 3d3c 7f7f 407f 7f7f     456789:;<=...@..
 8095618:	007f 0201 0403 0605 0807 0a09 0c0b 0e0d     ................
 8095628:	100f 1211 1413 1615 1817 7f19 7f7f 7f7f     ................
 8095638:	1a7f 1c1b 1e1d 201f 2221 2423 2625 2827     ....... !"#$%&'(
 8095648:	2a29 2c2b 2e2d 302f 3231 7f33 7f7f 7f7f     )*+,-./0123.....

08095658 <CSWTCH.21>:
 8095658:	4038 0809 4068 0809 40f8 0809 4098 0809     8@..h@...@...@..
 8095668:	40c8 0809                                   .@..

0809566c <_ZL23x509_crt_verify_strings>:
 809566c:	0001 0000 5a3f 0809 0002 0000 5a64 0809     ....?Z......dZ..
 809567c:	0004 0000 5a93 0809 0008 0000 5ad8 0809     .....Z.......Z..
 809568c:	0010 0000 5b12 0809 0020 0000 5b44 0809     .....[.. ...D[..
 809569c:	0040 0000 5b57 0809 0080 0000 5b6f 0809     @...W[......o[..
 80956ac:	0100 0000 5b94 0809 0200 0000 5bc2 0809     .....[.......[..
 80956bc:	0400 0000 5bf0 0809 0800 0000 5c0b 0809     .....[.......\..
 80956cc:	1000 0000 5c37 0809 2000 0000 5c6b 0809     ....7\... ..k\..
 80956dc:	4000 0000 5c99 0809 8000 0000 5cce 0809     .@...\.......\..
 80956ec:	0000 0001 5d17 0809 0000 0002 5d69 0809     .....]......i]..
 80956fc:	0000 0004 5d96 0809 0000 0008 5dd7 0809     .....].......]..
	...

08095714 <mbedtls_x509_crt_profile_default>:
 8095714:	00f0 0000 ffff 0fff ffff 0fff 0800 0000     ................
 8095724:	7274 6575 6600 6c61 6573 0a00 6543 7472     true.false..Cert
 8095734:	6669 6369 7461 2065 7369 7520 696e 696e     ificate is unini
 8095744:	6974 6c61 7369 6465 0a21 2500 6373 7265     tialised!..%scer
 8095754:	2e74 7620 7265 6973 6e6f 2020 2020 3a20     t. version     :
 8095764:	2520 0a64 2500 7373 7265 6169 206c 756e      %d..%sserial nu
 8095774:	626d 7265 2020 2020 3a20 0020 250a 6973     mber     : ..%si
 8095784:	7373 6575 2072 616e 656d 2020 2020 2020     ssuer name      
 8095794:	3a20 0020 250a 7373 6275 656a 7463 6e20      : ..%ssubject n
 80957a4:	6d61 2065 2020 2020 3a20 0020 250a 6973     ame      : ..%si
 80957b4:	7373 6575 2064 6f20 206e 2020 2020 2020     ssued  on       
 80957c4:	3a20 2520 3430 2d64 3025 6432 252d 3230      : %04d-%02d-%02
 80957d4:	2064 3025 6432 253a 3230 3a64 3025 6432     d %02d:%02d:%02d
 80957e4:	0a00 7325 7865 6970 6572 2073 6e6f 2020     ..%sexpires on  
 80957f4:	2020 2020 2020 203a 3025 6434 252d 3230           : %04d-%02
 8095804:	2d64 3025 6432 2520 3230 3a64 3025 6432     d-%02d %02d:%02d
 8095814:	253a 3230 0064 250a 7373 6769 656e 2064     :%02d..%ssigned 
 8095824:	7375 6e69 2067 2020 2020 3a20 0020 250a     using      : ..%
 8095834:	2573 312d 7338 203a 6425 6220 7469 0073     s%-18s: %d bits.
 8095844:	250a 6273 7361 6369 6320 6e6f 7473 6172     .%sbasic constra
 8095854:	6e69 7374 3a20 4320 3d41 7325 2c00 6d20     ints : CA=%s., m
 8095864:	7861 705f 7461 6c68 6e65 253d 0064 250a     ax_pathlen=%d..%
 8095874:	7373 6275 656a 7463 6120 746c 6e20 6d61     ssubject alt nam
 8095884:	2065 3a20 0020 250a 6373 7265 2e74 7420     e  : ..%scert. t
 8095894:	7079 2065 2020 2020 2020 3a20 0020 7325     ype        : .%s
 80958a4:	5353 204c 6c43 6569 746e 2500 5373 4c53     SSL Client.%sSSL
 80958b4:	5320 7265 6576 0072 7325 6d45 6961 006c      Server.%sEmail.
 80958c4:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
 80958d4:	2500 5273 7365 7265 6576 0064 7325 5353     .%sReserved.%sSS
 80958e4:	204c 4143 2500 4573 616d 6c69 4320 0041     L CA.%sEmail CA.
 80958f4:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
 8095904:	4320 0041 250a 6b73 7965 7520 6173 6567      CA..%skey usage
 8095914:	2020 2020 2020 2020 3a20 0020 7325 6944              : .%sDi
 8095924:	6967 6174 206c 6953 6e67 7461 7275 0065     gital Signature.
 8095934:	7325 6f4e 206e 6552 7570 6964 7461 6f69     %sNon Repudiatio
 8095944:	006e 7325 654b 2079 6e45 6963 6870 7265     n.%sKey Encipher
 8095954:	656d 746e 2500 4473 7461 2061 6e45 6963     ment.%sData Enci
 8095964:	6870 7265 656d 746e 2500 4b73 7965 4120     pherment.%sKey A
 8095974:	7267 6565 656d 746e 2500 4b73 7965 4320     greement.%sKey C
 8095984:	7265 2074 6953 6e67 2500 4373 4c52 5320     ert Sign.%sCRL S
 8095994:	6769 006e 7325 6e45 6963 6870 7265 4f20     ign.%sEncipher O
 80959a4:	6c6e 0079 7325 6544 6963 6870 7265 4f20     nly.%sDecipher O
 80959b4:	6c6e 0079 250a 6573 7478 6b20 7965 7520     nly..%sext key u
 80959c4:	6173 6567 2020 2020 3a20 0020 7325 7325     sage     : .%s%s
 80959d4:	2500 2573 0a73 2500 5573 6b6e 6f6e 6e77     .%s%s..%sUnknown
 80959e4:	7220 6165 6f73 206e 7428 6968 2073 6873      reason (this sh
 80959f4:	756f 646c 6e20 746f 6820 7061 6570 296e     ould not happen)
 8095a04:	000a 2e2a 2d00 2d2d 2d2d 4542 4947 204e     ..*..-----BEGIN 
 8095a14:	4543 5452 4649 4349 5441 2d45 2d2d 2d2d     CERTIFICATE-----
 8095a24:	2d00 2d2d 2d2d 4e45 2044 4543 5452 4649     .-----END CERTIF
 8095a34:	4349 5441 2d45 2d2d 2d2d 5400 6568 6320     ICATE-----.The c
 8095a44:	7265 6974 6966 6163 6574 7620 6c61 6469     ertificate valid
 8095a54:	7469 2079 6168 2073 7865 6970 6572 0064     ity has expired.
 8095a64:	6854 2065 6563 7472 6669 6369 7461 2065     The certificate 
 8095a74:	6168 2073 6562 6e65 7220 7665 6b6f 6465     has been revoked
 8095a84:	2820 7369 6f20 206e 2061 5243 294c 5400      (is on a CRL).T
 8095a94:	6568 6320 7265 6974 6966 6163 6574 4320     he certificate C
 8095aa4:	6d6f 6f6d 206e 614e 656d 2820 4e43 2029     ommon Name (CN) 
 8095ab4:	6f64 7365 6e20 746f 6d20 7461 6863 7720     does not match w
 8095ac4:	7469 2068 6874 2065 7865 6570 7463 6465     ith the expected
 8095ad4:	4320 004e 6854 2065 6563 7472 6669 6369      CN.The certific
 8095ae4:	7461 2065 7369 6e20 746f 6320 726f 6572     ate is not corre
 8095af4:	7463 796c 7320 6769 656e 2064 7962 7420     ctly signed by t
 8095b04:	6568 7420 7572 7473 6465 4320 0041 6854     he trusted CA.Th
 8095b14:	2065 5243 204c 7369 6e20 746f 6320 726f     e CRL is not cor
 8095b24:	6572 7463 796c 7320 6769 656e 2064 7962     rectly signed by
 8095b34:	7420 6568 7420 7572 7473 6465 4320 0041      the trusted CA.
 8095b44:	6854 2065 5243 204c 7369 6520 7078 7269     The CRL is expir
 8095b54:	6465 4300 7265 6974 6966 6163 6574 7720     ed.Certificate w
 8095b64:	7361 6d20 7369 6973 676e 4300 7265 6974     as missing.Certi
 8095b74:	6966 6163 6574 7620 7265 6669 6369 7461     ficate verificat
 8095b84:	6f69 206e 6177 2073 6b73 7069 6570 0064     ion was skipped.
 8095b94:	744f 6568 2072 6572 7361 6e6f 2820 6163     Other reason (ca
 8095ba4:	206e 6562 7520 6573 2064 7962 7620 7265     n be used by ver
 8095bb4:	6669 2079 6163 6c6c 6162 6b63 0029 6854     ify callback).Th
 8095bc4:	2065 6563 7472 6669 6369 7461 2065 6176     e certificate va
 8095bd4:	696c 6964 7974 7320 6174 7472 2073 6e69     lidity starts in
 8095be4:	7420 6568 6620 7475 7275 0065 6854 2065      the future.The 
 8095bf4:	5243 204c 7369 6620 6f72 206d 6874 2065     CRL is from the 
 8095c04:	7566 7574 6572 5500 6173 6567 6420 656f     future.Usage doe
 8095c14:	2073 6f6e 2074 616d 6374 2068 6874 2065     s not match the 
 8095c24:	656b 5579 6173 6567 6520 7478 6e65 6973     keyUsage extensi
 8095c34:	6e6f 5500 6173 6567 6420 656f 2073 6f6e     on.Usage does no
 8095c44:	2074 616d 6374 2068 6874 2065 7865 6574     t match the exte
 8095c54:	646e 6465 654b 5579 6173 6567 6520 7478     ndedKeyUsage ext
 8095c64:	6e65 6973 6e6f 5500 6173 6567 6420 656f     ension.Usage doe
 8095c74:	2073 6f6e 2074 616d 6374 2068 6874 2065     s not match the 
 8095c84:	736e 6543 7472 7954 6570 6520 7478 6e65     nsCertType exten
 8095c94:	6973 6e6f 5400 6568 6320 7265 6974 6966     sion.The certifi
 8095ca4:	6163 6574 6920 2073 6973 6e67 6465 7720     cate is signed w
 8095cb4:	7469 2068 6e61 7520 616e 6363 7065 6174     ith an unaccepta
 8095cc4:	6c62 2065 6168 6873 002e 6854 2065 6563     ble hash..The ce
 8095cd4:	7472 6669 6369 7461 2065 7369 7320 6769     rtificate is sig
 8095ce4:	656e 2064 6977 6874 6120 206e 6e75 6361     ned with an unac
 8095cf4:	6563 7470 6261 656c 5020 204b 6c61 2067     ceptable PK alg 
 8095d04:	6528 2067 5352 2041 7376 4520 4443 4153     (eg RSA vs ECDSA
 8095d14:	2e29 5400 6568 6320 7265 6974 6966 6163     )..The certifica
 8095d24:	6574 6920 2073 6973 6e67 6465 7720 7469     te is signed wit
 8095d34:	2068 6e61 7520 616e 6363 7065 6174 6c62     h an unacceptabl
 8095d44:	2065 656b 2079 6528 2067 6162 2064 7563     e key (eg bad cu
 8095d54:	7672 2c65 5220 4153 7420 6f6f 7320 6f68     rve, RSA too sho
 8095d64:	7472 2e29 5400 6568 4320 4c52 6920 2073     rt)..The CRL is 
 8095d74:	6973 6e67 6465 7720 7469 2068 6e61 7520     signed with an u
 8095d84:	616e 6363 7065 6174 6c62 2065 6168 6873     nacceptable hash
 8095d94:	002e 6854 2065 5243 204c 7369 7320 6769     ..The CRL is sig
 8095da4:	656e 2064 6977 6874 6120 206e 6e75 6361     ned with an unac
 8095db4:	6563 7470 6261 656c 5020 204b 6c61 2067     ceptable PK alg 
 8095dc4:	6528 2067 5352 2041 7376 4520 4443 4153     (eg RSA vs ECDSA
 8095dd4:	2e29 5400 6568 4320 4c52 6920 2073 6973     )..The CRL is si
 8095de4:	6e67 6465 7720 7469 2068 6e61 7520 616e     gned with an una
 8095df4:	6363 7065 6174 6c62 2065 656b 2079 6528     cceptable key (e
 8095e04:	2067 6162 2064 7563 7672 2c65 5220 4153     g bad curve, RSA
 8095e14:	7420 6f6f 7320 6f68 7472 2e29 0000 0000      too short).....

08095e24 <mbedtls_x509_crt_profile_suiteb>:
 8095e24:	0060 0000 000a 0000 0000 0000 0000 0000     `...............

08095e34 <CSWTCH.205>:
 8095e34:	0302 0504 6306 696c 6e65 2074 6966 696e     .....client fini
 8095e44:	6873 6465 7300 7265 6576 2072 6966 696e     shed.server fini
 8095e54:	6873 6465 6d00 7361 6574 2072 6573 7263     shed.master secr
 8095e64:	7465 6b00 7965 6520 7078 6e61 6973 6e6f     et.key expansion
 8095e74:	5300 4c53 3376 302e 5400 534c 3176 302e     .SSLv3.0.TLSv1.0
 8095e84:	5400 534c 3176 312e 5400 534c 3176 322e     .TLSv1.1.TLSv1.2
 8095e94:	0000 0000                                   ....

08095e98 <_ZL18mfl_code_to_length>:
 8095e98:	2000 0000 0200 0000 0400 0000 0800 0000     . ..............
 8095ea8:	1000 0000 6e69 6176 696c 2064 4b50 0000     ....invalid PK..

08095eb8 <_ZL1K>:
 8095eb8:	ae22 d728 2f98 428a 65cd 23ef 4491 7137     ".(../.B.e.#.D7q
 8095ec8:	3b2f ec4d fbcf b5c0 dbbc 8189 dba5 e9b5     /;M.............
 8095ed8:	b538 f348 c25b 3956 d019 b605 11f1 59f1     8.H.[.V9.......Y
 8095ee8:	4f9b af19 82a4 923f 8118 da6d 5ed5 ab1c     .O....?...m..^..
 8095ef8:	0242 a303 aa98 d807 6fbe 4570 5b01 1283     B........opE.[..
 8095f08:	b28c 4ee4 85be 2431 b4e2 d5ff 7dc3 550c     ...N..1$.....}.U
 8095f18:	896f f27b 5d74 72be 96b1 3b16 b1fe 80de     o.{.t].r...;....
 8095f28:	1235 25c7 06a7 9bdc 2694 cf69 f174 c19b     5..%.....&i.t...
 8095f38:	4ad2 9ef1 69c1 e49b 25e3 384f 4786 efbe     .J...i...%O8.G..
 8095f48:	d5b5 8b8c 9dc6 0fc1 9c65 77ac a1cc 240c     ........e..w...$
 8095f58:	0275 592b 2c6f 2de9 e483 6ea6 84aa 4a74     u.+Yo,.-...n..tJ
 8095f68:	fbd4 bd41 a9dc 5cb0 53b5 8311 88da 76f9     ..A....\.S.....v
 8095f78:	dfab ee66 5152 983e 3210 2db4 c66d a831     ..f.RQ>..2.-m.1.
 8095f88:	213f 98fb 27c8 b003 0ee4 beef 7fc7 bf59     ?!...'........Y.
 8095f98:	8fc2 3da8 0bf3 c6e0 a725 930a 9147 d5a7     ...=....%...G...
 8095fa8:	826f e003 6351 06ca 6e70 0a0e 2967 1429     o...Qc..pn..g)).
 8095fb8:	2ffc 46d2 0a85 27b7 c926 5c26 2138 2e1b     ./.F...'&.&\8!..
 8095fc8:	2aed 5ac4 6dfc 4d2c b3df 9d95 0d13 5338     .*.Z.m,M......8S
 8095fd8:	63de 8baf 7354 650a b2a8 3c77 0abb 766a     .c..Ts.e..w<..jv
 8095fe8:	aee6 47ed c92e 81c2 353b 1482 2c85 9272     ...G....;5...,r.
 8095ff8:	0364 4cf1 e8a1 a2bf 3001 bc42 664b a81a     d..L.....0B.Kf..
 8096008:	9791 d0f8 8b70 c24b be30 0654 51a3 c76c     ....p.K.0.T..Ql.
 8096018:	5218 d6ef e819 d192 a910 5565 0624 d699     .R........eU$...
 8096028:	202a 5771 3585 f40e d1b8 32bb a070 106a     * qW.5.....2p.j.
 8096038:	d0c8 b8d2 c116 19a4 ab53 5141 6c08 1e37     ........S.AQ.l7.
 8096048:	eb99 df8e 774c 2748 48a8 e19b bcb5 34b0     ....LwH'.H.....4
 8096058:	5a63 c5c9 0cb3 391c 8acb e341 aa4a 4ed8     cZ.....9..A.J..N
 8096068:	e373 7763 ca4f 5b9c b8a3 d6b2 6ff3 682e     s.cwO..[.....o.h
 8096078:	b2fc 5def 82ee 748f 2f60 4317 636f 78a5     ...]...t`/.Coc.x
 8096088:	ab72 a1f0 7814 84c8 39ec 1a64 0208 8cc7     r....x...9d.....
 8096098:	1e28 2363 fffa 90be bde9 de82 6ceb a450     (.c#.........lP.
 80960a8:	7915 b2c6 a3f7 bef9 532b e372 78f2 c671     .y......+Sr..xq.
 80960b8:	619c ea26 3ece ca27 c207 21c0 b8c7 d186     .a&..>'....!....
 80960c8:	eb1e cde0 7dd6 eada d178 ee6e 4f7f f57d     .....}..x.n..O}.
 80960d8:	6fba 7217 67aa 06f0 98a6 a2c8 7dc5 0a63     .o.r.g.......}c.
 80960e8:	0dae bef9 9804 113f 471b 131c 0b35 1b71     ......?..G..5.q.
 80960f8:	7d84 2304 77f5 28db 2493 40c7 ab7b 32ca     .}.#.w.(.$.@{..2
 8096108:	bebc 15c9 be0a 3c9e 0d4c 9c10 67c4 431d     .......<L....g.C
 8096118:	42b6 cb3e d4be 4cc5 7e2a fc65 299c 597f     .B>....L*~e..).Y
 8096128:	faec 3ad6 6fab 5fcb 5817 4a47 198c 6c44     ...:.o._.XGJ..Dl
 8096138:	7250 636f 542d 7079 3a65 3420 452c 434e     Proc-Type: 4,ENC
 8096148:	5952 5450 4445 0200 0503 0b07 110d 1713     RYPTED..........
 8096158:	1f1d 2925 2f2b 3b35 433d 4947 534f 6159     ..%)+/5;=CGIOSYa
 8096168:	6765 6d6b 7f71 8983 958b 9d97 a7a3 b3ad     egkmq...........
 8096178:	bfb5 c5c1 d3c7 e3df e9e5 f1ef 0efb 061f     ................
 8096188:	127e 240c 6446 2a09 6f33 0354 4319 6279     ~..$Fd.*3oT..Cyb
 8096198:	7265 7541 6f74 5200 4445 4700 4552 4e45     erAuto.RED.GREEN
 80961a8:	4200 554c 0045 7073 7261 636b 696c 6e65     .BLUE.sparkclien
 80961b8:	0074 6568 6c6c 206f 6f77 6c72 0064 756f     t.hello world.ou
 80961c8:	5474 706f 6369 6d2f 7365 6173 6567 6900     tTopic/message.i
 80961d8:	546e 706f 6369 6d2f 7365 6173 6567 6300     nTopic/message.c
 80961e8:	7261 2f74 0032 6163 6c6c 6465 6220 6765     art/2.called beg
 80961f8:	6e69 6300 6c61 656c 2064 6f64 7469 6300     in.called doit.c
 8096208:	6c61 656c 2064 7270 636f 7365 0073 3361     alled process.a3
 8096218:	626d 6d30 367a 656c 6267 3873 692e 746f     mb0mz6legbs8.iot
 8096228:	752e 2d73 6165 7473 322d 612e 616d 6f7a     .us-east-2.amazo
 8096238:	616e 7377 632e 6d6f 7300 7265 6576 5f72     naws.com.server_
 8096248:	6874 6572 6461 4900 746e 7265 616e 5f6c     thread.Internal_
 8096258:	6874 6572 6461 0000                         thread..

08096260 <_ZTV4File>:
	...
 8096268:	0bcd 0809 0bf9 0809 0be1 0809 0bdb 0809     ................
 8096278:	0bb1 0809 0c43 0809 0bd5 0809 0bcf 0809     ....C...........

08096288 <_ZTV5SdFat>:
	...
 8096290:	0c1d 0809 0c15 0809 0c0d 0809 0c05 0809     ................

080962a0 <_ZL15clientKeyCrtPem>:
 80962a0:	2d2d 2d2d 422d 4745 4e49 4320 5245 4954     -----BEGIN CERTI
 80962b0:	4946 4143 4554 2d2d 2d2d 202d 0a0d 494d     FICATE----- ..MI
 80962c0:	4449 5457 4343 6b41 6747 7741 4249 6741     IDWTCCAkGgAwIBAg
 80962d0:	5549 3251 412f 4168 497a 522f 5451 6947     IUQ2/AhAzI/RQTGi
 80962e0:	7278 466e 352f 7569 336f 7541 7749 5144     xrnF/5iuo3AuIwDQ
 80962f0:	4a59 6f4b 495a 7668 4e63 5141 4c45 0a0d     YJKoZIhvcNAQEL..
 8096300:	5142 7741 5454 4c46 454d 476b 3141 4555     BQAwTTFLMEkGA1UE
 8096310:	7743 4378 5751 6831 6d65 7539 4649 6c64     CwxCQW1hem9uIFdl
 8096320:	6959 5442 585a 324a 5761 6c4e 7963 5042     YiBTZXJ2aWNlcyBP
 8096330:	5550 7446 5859 7670 6962 6a35 3262 6730     PUFtYXpvbi5jb20g
 8096340:	0a0d 5753 6a35 694c 4d42 5650 6c4e 5859     ..SW5jLiBMPVNlYX
 8096350:	3052 4762 6755 3155 3951 3256 7a46 4761     R0bGUgU1Q9V2FzaG
 8096360:	756c 335a 7652 6962 4442 5650 5456 424d     luZ3RvbiBDPVVTMB
 8096370:	5834 5444 3445 444d 796b 444f 3245 544e     4XDTE4MDkyODE2NT
 8096380:	7a51 0a0d 6c4e 586f 5444 3551 544d 7a49     Qz..NloXDTQ5MTIz
 8096390:	544d 7a49 544e 316b 564f 776f 6a48 6345     MTIzNTk1OVowHjEc
 80963a0:	424d 476f 3141 4555 7741 5477 5651 5464     MBoGA1UEAwwTQVdT
 80963b0:	4549 766c 4356 4442 585a 304a 5761 705a     IElvVCBDZXJ0aWZp
 80963c0:	3259 3046 0a0d 545a 4343 5341 7749 5144     Y2F0..ZTCCASIwDQ
 80963d0:	4a59 6f4b 495a 7668 4e63 5141 4245 5142     YJKoZIhvcNAQEBBQ
 80963e0:	4441 6767 5045 4441 4343 5141 436f 6767     ADggEPADCCAQoCgg
 80963f0:	4245 4d41 7278 6542 5554 5073 4c6d 395a     EBAMxrBeTUsPmLZ9
 8096400:	5036 4559 6b6a 0a0d 6762 4177 4364 7466     6PYEjk..bgwAdCft
 8096410:	7170 634c 6d41 2b41 752f 545a 4548 6441     pqLcAmA+/uZTHEAd
 8096420:	4b2b 646b 7532 6438 5256 7238 4766 4239     +Kkd2u8dVR8rfG9B
 8096430:	5977 6438 5734 4371 5271 4845 484f 3641     wY8d4WqCqREHOHA6
 8096440:	7531 774d 4c6d 5279 0a0d 542b 4f76 5850     1uMwmLyR..+TvOPX
 8096450:	4c4a 6154 6d36 6574 3146 567a 724a 536f     JLTa6mteF1zVJroS
 8096460:	6876 3252 2f4c 5a6d 524f 3037 4e77 3142     vhR2L/mZOR70wNB1
 8096470:	3475 6b43 6b52 3835 7432 556e 5830 4f2f     u4CkRk582tnU0X/O
 8096480:	516d 7151 4e2f 754f 6d77 0a0d 3663 616b     mQQq/NOuwm..c6ka
 8096490:	5948 7173 7178 644f 6b32 5233 4955 7a41     HYsqxqOd2k3RUIAz
 80964a0:	546f 4862 3544 372f 2b59 2f50 2b30 7475     oTbHD5/7Y+P/0+ut
 80964b0:	4d57 5866 4f67 3751 4b30 476e 4839 4367     WMfXgOQ70KnG9HgC
 80964c0:	3266 2f34 5052 5a79 6867 5279 0a0d 7332     f24/RPyZghyR..2s
 80964d0:	6a68 5438 5a6d 6d7a 5746 566e 4944 5764     hj8TmZzmFWnVDIdW
 80964e0:	6356 3666 724b 3779 664e 344a 5974 6145     Vcf6Kry7NfJ4tYEa
 80964f0:	4261 2b78 3849 5347 6570 4930 4e52 7859     aBx+I8GSpe0IRNYx
 8096500:	4674 457a 3078 776d 3756 5454 7277 0a0d     tFzEx0mwV7TTwr..
 8096510:	686f 4151 5837 7077 6a64 4e7a 3365 3542     ohQA7XwpdjzNe3B5
 8096520:	4b66 6e6f 726a 7a46 457a 6c6a 4453 574d     fKonjrFzzEjlSDMW
 8096530:	466d 7333 3848 4b4e 4273 5375 6f67 3576     mF3sH8NKsBuSgov5
 8096540:	5066 7262 456e 6b39 6547 434f 6349 3834     fPbrnE9kGeOCIc48
 8096550:	0a0d 7878 4330 7741 4145 6141 674e 464d     ..xx0CAwEAAaNgMF
 8096560:	7734 7748 4459 5256 6a30 4242 7767 6f46     4wHwYDVR0jBBgwFo
 8096570:	5541 6967 4f47 5676 4254 3846 5550 704e     AUgiGOvVTBF8PUNp
 8096580:	6462 4f38 4653 4d72 3059 3756 776b 5148     bd8OSFrMY0V7kwHQ
 8096590:	4459 0a0d 5256 4f30 4242 4559 4446 3648     YD..VR0OBBYEFDH6
 80965a0:	5837 3546 7957 6952 6d6f 6741 7243 5656     7XF5WyRiomAgCrVV
 80965b0:	5335 2b76 5a46 502f 414d 4777 3141 6455     5Sv+FZ/PMAwGA1Ud
 80965c0:	7745 4245 772f 4351 414d 7741 6744 4459     EwEB/wQCMAAwDgYD
 80965d0:	5256 5030 0a0d 5141 2f48 4142 4451 6741     VR0P..AQH/BAQDAg
 80965e0:	4165 414d 4730 5343 4771 4953 3362 5144     eAMA0GCSqGSIb3DQ
 80965f0:	4245 7743 4155 3441 4249 5141 6441 4d79     EBCwUAA4IBAQAdyM
 8096600:	5244 4979 7269 5630 644f 3761 4931 7759     DRyIir0VOda71IYw
 8096610:	5432 7167 5362 0a0d 7a38 6b44 384c 5552     2TgqbS..8zDkL8RU
 8096620:	4d72 616e 5549 3078 6973 3636 4b56 7170     rMnaIUx0si66VKpq
 8096630:	5166 4b65 554b 4476 4170 6d72 6a38 654c     fQeKKUvDpArm8jLe
 8096640:	6a4e 3643 494f 7753 5553 5473 7449 455a     NjC6OISwSUsTItZE
 8096650:	6f47 4a74 6b36 3942 0a0d 3059 4341 7059     GotJ6kB9..Y0ACYp
 8096660:	7370 3667 5834 3638 525a 4555 6271 4239     psg64X86ZRUEqb9B
 8096670:	692f 4161 6b67 7a48 496b 3678 6238 6830     /iaAgkHzkIx68b0h
 8096680:	5736 6e44 4146 4739 6757 755a 766f 4150     6WDnFA9GWgZuovPA
 8096690:	4653 5454 4a6f 4438 3539 0a0d 6531 6941     SFTToJ8D95..1eAi
 80966a0:	5a55 6275 4933 7050 6e36 666b 7350 386c     UZub3IPp6nkfPsl8
 80966b0:	2b6c 634b 6b56 396a 4c79 2b78 6433 4a4d     l+KcVkj9yLx+3dMJ
 80966c0:	7170 422b 3633 7251 4a76 4156 3979 4842     pq+B36QrvJVAy9BH
 80966d0:	4e61 4e73 4d46 3834 6c45 4863 0a0d 2b4f     aNsNFM48ElcH..O+
 80966e0:	394a 5949 796b 672f 7944 4a45 5241 784b     J9IYky/gDyEJARKx
 80966f0:	4234 6344 7574 6f41 6b6b 3350 4c52 472f     4BDctuAokkP3RL/G
 8096700:	2f6a 4e38 584b 4c4c 2b67 7536 4d30 6443     j/8NKXLLg+6u0MCd
 8096710:	3147 346b 6958 6548 656a 3243 7634 0a0d     G1k4XiHejeC24v..
 8096720:	476b 5a51 4b4f 5537 7461 675a 4735 2b50     kGQZOK7UatZg5GP+
 8096730:	6d6f 6464 4534 6551 3436 376a 5570 7746     omdd4EQe64j7pUFw
 8096740:	6e6d 4b77 5a55 5750 7877 4b61 3264 3962     mnwKUZPWwxaKd2b9
 8096750:	474d 6633 744c 4b4e 7341 5442 0a0d 2d2d     MG3fLtNKAsBT..--
 8096760:	2d2d 452d 444e 4320 5245 4954 4946 4143     ---END CERTIFICA
 8096770:	4554 2d2d 2d2d 002d                         TE-----.

08096778 <_ZL18amazonIoTRootCaPem>:
 8096778:	2d2d 2d2d 422d 4745 4e49 4320 5245 4954     -----BEGIN CERTI
 8096788:	4946 4143 4554 2d2d 2d2d 202d 0a0d 494d     FICATE----- ..MI
 8096798:	4549 7a30 4343 3741 6775 7741 4249 6741     IE0zCCA7ugAwIBAg
 80967a8:	5149 4e47 5272 696e 395a 4c36 4b74 5649     IQGNrRniZ96LtKIV
 80967b8:	4e6a 477a 3773 6a53 4e41 6742 716b 6b68     jNzGs7SjANBgkqhk
 80967c8:	4769 7739 4230 5141 4655 4441 4243 0a0d     iG9w0BAQUFADCB..
 80967d8:	6a79 4c45 414d 476b 3141 4555 6842 434d     yjELMAkGA1UEBhMC
 80967e8:	5656 784d 7a46 5641 6742 564e 4142 546f     VVMxFzAVBgNVBAoT
 80967f8:	6c44 6c5a 6d63 546c 5761 7564 434c 4a42     DlZlcmlTaWduLCBJ
 8096808:	6d62 754d 524d 7738 5148 4459 5156 4c51     bmMuMR8wHQYDVQQL
 8096818:	0a0d 7845 575a 585a 704a 3255 6e6c 6962     ..ExZWZXJpU2lnbi
 8096828:	5542 6e63 7a56 4364 4f42 585a 3352 3362     BUcnVzdCBOZXR3b3
 8096838:	724a 544d 776f 414f 4459 5156 4c51 7a45     JrMTowOAYDVQQLEz
 8096848:	6f45 7959 676b 6a4d 7741 694e 5742 585a     EoYykgMjAwNiBWZX
 8096858:	704a 0a0d 3255 6e6c 6962 6777 5753 6a35     Jp..U2lnbiwgSW5j
 8096868:	694c 7441 4549 765a 6963 6842 5864 6f52     LiAtIEZvciBhdXRo
 8096878:	3362 704a 6d65 6b56 4849 7a56 535a 7642     b3JpemVkIHVzZSBv
 8096888:	6d62 3578 554d 7755 7751 4459 5156 4451     bmx5MUUwQwYDVQQD
 8096898:	7a45 5778 0a0d 585a 704a 3255 6e6c 6962     EzxW..ZXJpU2lnbi
 80968a8:	4442 4762 7a46 7963 7a41 4649 3142 6d59     BDbGFzcyAzIFB1Ym
 80968b8:	7078 7959 5142 6d63 746c 5859 354a 4549     xpYyBQcmltYXJ5IE
 80968c8:	6c4e 6e63 7052 6d5a 6a6c 5859 7052 3262     NlcnRpZmljYXRpb2
 80968d8:	6734 5851 3056 0a0d 4761 7939 5861 3552     4gQXV0..aG9yaXR5
 80968e8:	4349 6730 7a52 7755 6848 4e63 444d 7859     IC0gRzUwHhcNMDYx
 80968f8:	544d 3441 444d 7741 444d 7741 6857 4e63     MTA4MDAwMDAwWhcN
 8096908:	7a4d 7759 7a4e 3245 6a4d 314d 544f 3555     MzYwNzE2MjM1OTU5
 8096918:	6a57 4243 6a79 4c45 0a0d 414d 476b 3141     WjCByjEL..MAkGA1
 8096928:	4555 6842 434d 5656 784d 7a46 5641 6742     UEBhMCVVMxFzAVBg
 8096938:	564e 4142 546f 6c44 6c5a 6d63 546c 5761     NVBAoTDlZlcmlTaW
 8096948:	7564 434c 4a42 6d62 754d 524d 7738 5148     duLCBJbmMuMR8wHQ
 8096958:	4459 5156 4c51 7845 575a 0a0d 585a 704a     YDVQQLExZW..ZXJp
 8096968:	3255 6e6c 6962 5542 6e63 7a56 4364 4f42     U2lnbiBUcnVzdCBO
 8096978:	585a 3352 3362 724a 544d 776f 414f 4459     ZXR3b3JrMTowOAYD
 8096988:	5156 4c51 7a45 6f45 7959 676b 6a4d 7741     VQQLEzEoYykgMjAw
 8096998:	694e 5742 585a 704a 3255 6e6c 0a0d 6962     NiBWZXJpU2ln..bi
 80969a8:	6777 5753 6a35 694c 7441 4549 765a 6963     wgSW5jLiAtIEZvci
 80969b8:	6842 5864 6f52 3362 704a 6d65 6b56 4849     BhdXRob3JpemVkIH
 80969c8:	7a56 535a 7642 6d62 3578 554d 7755 7751     VzZSBvbmx5MUUwQw
 80969d8:	4459 5156 4451 7a45 5778 585a 704a 0a0d     YDVQQDEzxWZXJp..
 80969e8:	3255 6e6c 6962 4442 4762 7a46 7963 7a41     U2lnbiBDbGFzcyAz
 80969f8:	4649 3142 6d59 7078 7959 5142 6d63 746c     IFB1YmxpYyBQcmlt
 8096a08:	5859 354a 4549 6c4e 6e63 7052 6d5a 6a6c     YXJ5IENlcnRpZmlj
 8096a18:	5859 7052 3262 6734 5851 3056 4761 7939     YXRpb24gQXV0aG9y
 8096a28:	0a0d 5861 3552 4349 6730 7a52 7755 6767     ..aXR5IC0gRzUwgg
 8096a38:	6945 414d 4730 5343 4771 4953 3362 5144     EiMA0GCSqGSIb3DQ
 8096a48:	4245 5141 4155 3441 4249 7744 7741 6767     EBAQUAA4IBDwAwgg
 8096a58:	4b45 6f41 4249 5141 7643 414a 4967 584b     EKAoIBAQCvJAgIKX
 8096a68:	316f 0a0d 6d6e 4d41 7571 4c64 304f 6337     o1..nmAMqudLO07c
 8096a78:	4c66 3877 5252 3779 2b4b 2b44 514b 354c     fLw8RRy7K+D+KQL5
 8096a88:	7756 6a69 495a 5655 2f4a 7858 6372 7867     VwijZIUVJ/Xxrcgx
 8096a98:	5669 6930 4336 7171 6b70 7a4b 2f6a 3569     iV0i6CqqpkKzj/i5
 8096aa8:	6256 7865 0a0d 3074 7a75 6f2f 2b39 3142     Vbex..t0uz/o9+B1
 8096ab8:	7366 3037 6250 6d5a 5649 6359 6739 6144     fs70PbZmIVYc9gDa
 8096ac8:	5954 7633 676a 3277 4949 5650 5451 3036     TY3vjgw2IIPVQT60
 8096ad8:	4b6e 5657 4653 754a 7255 786a 6675 2f36     nKWVSFJuUrjxuf6/
 8096ae8:	6857 636b 7a49 0a0d 6453 4468 3259 5370     WhkcIz..SdhDY2pS
 8096af8:	3953 504b 4836 5242 6454 4a47 5861 4876     S9KP6HBRTdGJaXvH
 8096b08:	5063 7a61 4233 304a 3332 6474 3153 5462     cPaz3BJ023tdS1bT
 8096b18:	726c 5638 3664 7747 4b39 6c49 7138 6338     lr8Vd6Gw9KIl8q8c
 8096b28:	6d6b 5963 6635 4751 0a0d 4f42 512b 6575     kmcY5fQG..BO+Que
 8096b38:	4151 4e35 3630 5274 2f6e 7241 3072 4f50     QA5N06tRn/Arr0PO
 8096b48:	6737 2b69 3373 2b69 307a 3631 797a 7639     7gi+s3i+z016zy9v
 8096b58:	3941 3972 3131 546b 5a4d 5248 4178 3379     A9r911kTMZHRxAy3
 8096b68:	6b51 5347 5447 5232 2b54 0a0d 4372 5370     QkGSGT2RT+..rCpS
 8096b78:	3478 562f 4542 6b6e 576a 484e 4469 7078     x4/VBEnkjWNHiDxp
 8096b88:	3867 2b76 3752 7230 6b66 462f 616c 4f34     g8v+R70rfk/Fla4O
 8096b98:	646e 5254 3851 6e42 2b63 554d 4843 6c37     ndTRQ8Bnc+MUCH7l
 8096ba8:	3550 7a39 4475 4b4d 317a 2f30 0a0d 494e     P59zuDMKz10/..NI
 8096bb8:	5765 7569 5435 4336 5655 6741 424d 4141     eWiu5T6CUVAgMBAA
 8096bc8:	6a47 6267 7749 6167 7738 7744 4459 5256     GjgbIwga8wDwYDVR
 8096bd8:	5430 5141 2f48 4142 7755 7741 4245 7a2f     0TAQH/BAUwAwEB/z
 8096be8:	4f41 6742 564e 5148 4238 6641 4538 0a0d     AOBgNVHQ8BAf8E..
 8096bf8:	4142 434d 5141 7759 5162 4959 774b 4259     BAMCAQYwbQYIKwYB
 8096c08:	5142 4855 5141 4577 5459 6642 566f 6732     BQUHAQwEYTBfoV2g
 8096c18:	7a57 5a42 464d 7763 5256 4a59 5761 6831     WzBZMFcwVRYJaW1h
 8096c28:	325a 7655 325a 6d6c 434d 7745 7a48 4841     Z2UvZ2lmMCEwHzAH
 8096c38:	0a0d 6742 7255 6744 434d 6747 5551 2b6a     ..BgUrDgMCGgQUj+
 8096c48:	5458 6f47 7361 596a 7235 3877 412b 7461     XTGoasjY5rw8+Aat
 8096c58:	4952 4347 3778 5347 7734 524a 6a59 4861     RIGCx7GS4wJRYjaH
 8096c68:	3052 4463 766f 324c 7678 325a 7538 6d64     R0cDovL2xvZ28udm
 8096c78:	7956 0a0d 5861 704e 325a 7534 3259 7439     Vy..aXNpZ24uY29t
 8096c88:	334c 7a5a 4762 6e39 7962 6e35 5761 7759     L3ZzbG9nby5naWYw
 8096c98:	5148 4459 5256 4f30 4242 4559 4846 542f     HQYDVR0OBBYEFH/T
 8096ca8:	615a 4366 6533 3779 4438 4a41 3038 354d     ZafC3ey78DAJ80M5
 8096cb8:	672b 764b 0a0d 7a4d 7a45 414d 4730 5343     +gKv..MzEzMA0GCS
 8096cc8:	4771 4953 3362 5144 4245 5142 4155 3441     qGSIb3DQEBBQUAA4
 8096cd8:	4249 5141 5443 454a 776f 3258 504c 4232     IBAQCTJEowX2LP2B
 8096ce8:	5971 7a4c 7133 4a33 746b 5876 3266 5870     qYLz3q3JktvXf2pX
 8096cf8:	696b 4f4f 457a 0a0d 3670 3442 7145 6931     kiOOzE..p6B4Eq1i
 8096d08:	6b44 7756 4d5a 6e58 326c 7459 416d 2b6c     DkVwZMXnl2YtmAl+
 8096d18:	3658 572f 437a 6c68 6738 7147 4243 4870     X6/WzChl8gGqCBpH
 8096d28:	7633 356e 4a66 614a 4743 676b 6444 2b6b     3vn5fJJaCGkgDdk+
 8096d38:	5762 3834 5744 5937 0a0d 6735 5261 4251     bW48DW7Y..5gaRQB
 8096d48:	3569 4d2b 7448 3933 4274 7571 5743 4d49     i5+MHt39tBquCWIM
 8096d58:	4e6e 425a 3455 6367 556d 7137 454b 514b     nNZBU4gcmU7qKEKQ
 8096d68:	5473 3462 6237 4e44 6c30 7441 6b75 7869     sTb47bDN0lAtukix
 8096d78:	456c 6b30 3646 5742 4b6c 0a0d 4557 6739     lE0kF6BWlK..WE9g
 8096d88:	6e79 4336 6761 4373 6971 5855 624f 6258     yn6CagsCqiUXObXb
 8096d98:	2b66 4565 535a 5671 7269 4732 6c33 4236     f+eEZSqVir2G3l6B
 8096da8:	6f46 744d 4d45 657a 612f 4369 6d4b 6f30     FoMtEMze/aiCKm0o
 8096db8:	7748 4c30 4f78 6e58 6947 5a59 0a0d 6634     Hw0LxOXnGiYZ..4f
 8096dc8:	5251 7862 3143 666c 6e7a 6751 7955 3832     QRbxC1lfznQgUy28
 8096dd8:	6436 5655 6f34 7074 4636 3130 7676 5870     6dUV4otp6F01vvpX
 8096de8:	4631 4851 4f4b 7774 7235 6744 3762 7a4d     1FQHKOtw5rDgb7Mz
 8096df8:	4956 6263 6469 344a 4576 565a 4e38 0a0d     VIcbidJ4vEZV8N..
 8096e08:	6e68 6361 4852 3272 566c 327a 5458 4949     hnacRHr2lVz2XTII
 8096e18:	364d 5552 6874 2f67 4661 797a 6b51 4671     M6RUthg/aFzyQkqF
 8096e28:	464f 4453 3958 6f48 504c 734b 6445 6f61     OFSDX9HoLPKsEdao
 8096e38:	5737 714e 0a0d 2d2d 2d2d 452d 444e 4320     7WNq..-----END C
 8096e48:	5245 4954 4946 4143 4554 2d2d 2d2d 002d     ERTIFICATE-----.

08096e58 <_ZL12clientKeyPem>:
 8096e58:	2d2d 2d2d 422d 4745 4e49 5220 4153 5020     -----BEGIN RSA P
 8096e68:	4952 4156 4554 4b20 5945 2d2d 2d2d 202d     RIVATE KEY----- 
 8096e78:	0a0d 494d 4549 776f 4249 4141 434b 5141     ..MIIEowIBAAKCAQ
 8096e88:	4145 477a 4673 4e35 7753 592b 6e74 6f33     EAzGsF5NSw+Ytn3o
 8096e98:	6739 4f53 7552 4144 3042 2b4a 6d32 746f     9gSORuDAB0J+2mot
 8096ea8:	4377 4459 2b37 6c35 634d 4251 3433 5271     wCYD7+5lMcQB34qR
 8096eb8:	6133 0a0d 7837 5631 7948 3874 3062 4248     3a..7x1VHyt8b0HB
 8096ec8:	786a 6833 6f61 704b 5145 3463 4463 5772     jx3haoKpEQc4cDrW
 8096ed8:	7a34 5943 4a76 3548 384f 3934 6b63 4e74     4zCYvJH5O849cktN
 8096ee8:	7172 3161 5834 4e58 6d55 6875 2b4b 4846     rqa14XXNUmuhK+FH
 8096ef8:	7659 5a2b 0a0d 356b 7648 4154 4830 3757     Yv+Z..k5HvTA0HW7
 8096f08:	4b67 4752 6e54 617a 6432 5254 3866 5a36     gKRGTnza2dTRf86Z
 8096f18:	4342 3872 3630 4337 7a5a 5271 646f 7969     BCr8067CZzqRodiy
 8096f28:	4772 356f 6133 6454 5146 4467 684f 734e     rGo53aTdFQgDOhNs
 8096f38:	5063 2f6e 6a74 0a0d 2f34 542f 3636 5931     cPn/tj..4//T661Y
 8096f48:	3978 4165 4435 5176 6371 3062 4165 2f4a     x9eA5DvQqcb0eAJ/
 8096f58:	6a62 4539 4a2f 436d 4a48 6148 4779 7850     bj9E/JmCHJHayGPx
 8096f68:	5a4f 4f6e 5659 6461 4d55 3168 565a 2f78     OZnOYVadUMh1ZVx/
 8096f78:	716f 4c76 3173 6e38 0a0d 3169 5267 6f70     oqvLs18n..i1gRpo
 8096f88:	4848 6a34 5a77 6c4b 5137 4568 6a31 3047     HH4jwZKl7QhE1jG0
 8096f98:	4d58 4854 6253 5842 4e74 4350 6975 4146     XMTHSbBXtNPCuiFA
 8096fa8:	7444 4366 326c 4d50 3731 4863 386c 6971     DtfCl2PM17cHl8qi
 8096fb8:	4f65 5873 4d50 4f53 4956 0a0d 784d 5961     eOsXPMSOVI..MxaY
 8096fc8:	6558 6677 3077 7771 3547 434b 2f69 386c     Xewfw0qwG5KCi/l8
 8096fd8:	7539 6375 3254 5a51 3434 6849 6a7a 487a     9uucT2QZ44IhzjzH
 8096fe8:	5148 4449 5141 4241 6f41 4249 4841 5569     HQIDAQABAoIBAHiU
 8096ff8:	4c51 4576 6b67 5167 5535 786f 0a0d 4c42     QLvEgkgQ5Uox..BL
 8097008:	3669 666c 6164 535a 516f 7855 4a55 6839     i6lfdaZSoQUxUJ9h
 8097018:	5454 4131 4551 6b7a 3773 7134 5076 6f51     TT1AQEzks74qvPQo
 8097028:	3939 2f6d 774a 6b38 6d75 4158 5269 5a74     99m/Jw8kumXAiRtZ
 8097038:	672f 7452 5734 6b68 6449 7855 6368 0a0d     /gRt4WhkIdUxhc..
 8097048:	4257 5477 7864 434c 7843 616a 6f4e 7035     WBwTdxLCCxjaNo5p
 8097058:	434a 4578 7345 6c4d 6358 474c 6864 3964     JCxEEsMlXcLGdhd9
 8097068:	6863 4d66 3349 5732 6479 6570 7961 4141     chfMI32WydpeayAA
 8097078:	5937 7a4d 2f66 7a41 4330 746e 4977 3268     7YMzf/Az0CntwIh2
 8097088:	0a0d 4f35 6254 616f 456f 3544 4231 4474     ..5OTboaoED51BtD
 8097098:	6235 4b4a 3252 6162 5266 4b7a 457a 4448     5bJKR2bafRzKzEHD
 80970a8:	4462 6b4d 3962 447a 4779 6437 3976 7a68     bDMkb9zDyG7dv9hz
 80970b8:	5643 3370 637a 5332 615a 2f4f 3077 542f     CVp3zc2SZaO/w0/T
 80970c8:	364b 0a0d 4d66 7843 5144 6f4f 7739 4c58     K6..fMCxDQOo9wXL
 80970d8:	7238 612f 716d 304f 4a6c 7043 7550 7644     8r/amqO0lJCpPuDv
 80970e8:	4973 494b 4161 6c39 6170 6131 6d77 4a48     sIKIaA9lpa1awmHJ
 80970f8:	526b 596a 3463 6c6f 7a31 4156 5144 394b     kRjYc4ol1zVADQK9
 8097108:	7a54 3170 0a0d 3834 4d35 4e47 3048 4652     Tzp1..485MGNH0RF
 8097118:	7a6e 5735 3769 2b41 7533 562f 2b78 4136     nz5Wi7A+3u/Vx+6A
 8097128:	5171 4343 4a34 444a 4c49 5041 766b 3649     qQCC4JJDILAPkvI6
 8097138:	5069 4367 6170 6769 6a73 3454 6d43 4353     iPgCpaigsjT4CmSC
 8097148:	316b 5168 6a6d 0a0d 3561 5671 5837 436b     k1hQmj..a5qV7XkC
 8097158:	5967 4145 462b 4c78 4973 4670 6152 746e     gYEA+FxLsIpFRant
 8097168:	4d6e 482f 5933 5866 6663 5a51 4171 3236     nM/H3YfXcfQZqA62
 8097178:	756c 4b59 334a 6357 5438 5654 6e76 6439     luYKJ3Wc8TTVvn9d
 8097188:	2f56 4d74 4f67 6c5a 0a0d 6175 6545 4355     V/tMgOZl..uaEeUC
 8097198:	4774 3937 472b 3743 7672 6d71 3744 4c4a     tG79+GC7rvqmD7JL
 80971a8:	426c 504e 2f73 2f2f 3539 685a 3159 6871     lBNPs///95ZhY1qh
 80971b8:	4b5a 2b76 487a 416f 7859 3072 4a41 6256     ZKv+zHoAYxr0AJVb
 80971c8:	3337 3478 3736 5033 726e 0a0d 7354 5436     73x4673Pnr..Ts6T
 80971d8:	4b4b 6139 4633 5350 7552 324c 5948 6439     KK9a3FPSRuL2HY9d
 80971e8:	3575 3565 554a 4a6a 4259 4c47 4f37 626d     u5e5JUjJYBGL7Omb
 80971f8:	2b43 756e 7879 4a75 4471 3132 5132 4243     C+nuyxuJqD212QCB
 8097208:	4134 434d 5967 4145 7230 3053 0a0d 6853     4AMCgYEA0rS0..Sh
 8097218:	5477 325a 5156 4b79 6d61 6d38 4e33 4468     wTZ2VQyKam8m3NhD
 8097228:	5141 4731 3156 5373 4f65 526d 3379 5454     AQ1GV1sSeOmRy3TT
 8097238:	3645 316e 3769 4731 416f 3165 436a 3839     E6n1i71GoAe1jC98
 8097248:	6a31 6e33 7435 7549 6145 374e 557a 0a0d     1j3n5tIuEaN7zU..
 8097258:	6c63 6469 364f 6347 7159 706d 4b37 5531     clidO6GcYqmp7K1U
 8097268:	5157 7279 5833 4b4b 6139 5235 7169 6c78     WQyr3XKK9a5Riqxl
 8097278:	2f6f 5147 547a 725a 4b76 342b 366c 5165     o/GQzTZrvK+4l6eQ
 8097288:	4763 6b6b 4151 334b 7979 6c6d 6565 316f     cGkkQAK3yymleeo1
 8097298:	0a0d 5578 7a6b 6979 6e6f 7053 5555 414d     ..xUkzyionSpUUMA
 80972a8:	7971 7454 7738 4d39 4735 6636 4d6b 6737     qyTt8w9M5G6fkM7g
 80972b8:	4553 6c76 5949 6c34 4338 5967 4145 3239     SEvlIY4l8CgYEA92
 80972c8:	436e 5367 4e6b 7a6e 4d75 5347 6f59 666e     nCgSkNnzuMGSYonf
 80972d8:	416a 0a0d 4b57 7158 536c 722b 3646 7349     jA..WKXqlS+rF6Is
 80972e8:	5778 3268 7849 5767 6f51 514c 3138 462f     xWh2IxgWQoLQ81/F
 80972f8:	3773 5264 5636 6e32 4150 5167 387a 6c39     s7dR6V2nPAgQz89l
 8097308:	7630 7a4f 3534 6642 4251 494e 5538 4758     0vOz45BfQBNI8UXG
 8097318:	5057 676b 0a0d 2b37 3644 754c 736d 344a     WPkg..7+D6LumsJ4
 8097328:	7976 6578 466a 4377 5462 6435 7261 654d     vyxejFwCbT5darMe
 8097338:	774a 634a 572f 5261 4469 7749 6c6d 3051     JwJc/WaRiDIwmlQ0
 8097348:	4235 5263 5371 5a51 6270 7872 5443 6167     5BcRqSQZpbrxCTga
 8097358:	4441 4339 6d38 0a0d 4b72 2f6c 704b 7477     AD9C8m..rKl/Kpwt
 8097368:	6170 5770 514e 634c 4530 674f 6748 4338     papWNQLc0EOgHg8C
 8097378:	5967 4e41 332b 666e 5256 672b 2b67 704f     gYAN+3nfVR+gg+Op
 8097388:	5166 6c32 7346 4635 466b 3937 5569 5849     fQ2lFs5FkF79iUIX
 8097398:	4849 6858 5443 4d76 0a0d 7076 5343 4856     IHXhCTvM..vpCSVH
 80973a8:	6151 3363 574a 5276 7277 3544 7145 5a43     Qac3JWvRwrD5EqCZ
 80973b8:	362b 6361 772b 546c 504a 4436 2b74 6f34     +6ac+wlTJP6Dt+4o
 80973c8:	626d 6f4c 6445 4a4f 5a39 5854 324c 6750     mbLoEdOJ9ZTXL2Pg
 80973d8:	6b79 776f 3832 784d 4861 0a0d 356d 7463     ykow28MxaH..m5ct
 80973e8:	7756 7467 4550 3266 476f 414d 7159 4b6e     VwgtPEf2oGMAYqnK
 80973f8:	614b 4351 6c73 4e2f 4679 4c49 6f4a 7546     KaQCsl/NyFILJoFu
 8097408:	2f54 4e2f 6a66 5a6b 7775 3876 6547 496d     T//NfjkZuwv8GemI
 8097418:	5578 4675 5561 4861 5059 6974 0a0d 6447     xUuFaUaHYPti..Gd
 8097428:	5761 7735 424b 4467 364c 4661 4633 4352     aW5wKBgDL6aF3FRC
 8097438:	774f 4f59 4e73 5a6e 6d58 354a 7149 7661     OwYOsNnZXmJ5Iqav
 8097448:	7a30 4c64 6362 4e67 4e51 4e76 794d 4935     0zdLbcgNQNvNMy5I
 8097458:	5258 754b 4a37 6946 3373 532b 6931 0a0d     XRKu7JFis3+S1i..
 8097468:	657a 4664 666e 6d63 4741 2b70 4271 4553     zedFnfcmAGp+qBSE
 8097478:	6457 6a76 4743 6838 784a 304b 3863 6d57     WdvjCG8hJxK0c8Wm
 8097488:	702f 3048 6434 6766 426e 3656 5361 4639     /pH04dfgnBV6aS9F
 8097498:	6155 4f4b 436c 6647 3336 6c6b 6651 7579     UaKOlCGf63klQfyu
 80974a8:	0a0d 2b4a 5236 3245 4b53 5065 634a 6872     ..J+6RE2SKePJcrh
 80974b8:	4f46 3671 666f 4768 4336 3570 7449 5677     FOq6ofhG6Cp5ItwV
 80974c8:	6e48 4244 334f 3352 7537 734a 7852 7342     HnDBO3R37uJsRxBs
 80974d8:	796b 6267 4a43 0a0d 2d2d 2d2d 452d 444e     kygbCJ..-----END
 80974e8:	5220 4153 5020 4952 4156 4554 4b20 5945      RSA PRIVATE KEY
 80974f8:	2d2d 2d2d 002d 097b 6422 666f 6144 6174     -----.{."dofData
 8097508:	3a22 227b 6974 656d 3a22 2200 7861 3a22     ":{"time":."ax":
 8097518:	2200 7961 3a22 2200 7a61 3a22 2200 786d     ."ay":."az":."mx
 8097528:	3a22 2200 796d 3a22 2200 7a6d 3a22 2200     ":."my":."mz":."
 8097538:	7867 3a22 2200 7967 3a22 2200 7a67 3a22     gx":."gy":."gz":
 8097548:	2200 6574 706d 3a22 7d00 7d0a 0000 0000     ."temp":.}.}....

08097558 <_ZTV8SPIClass>:
	...
 8097560:	1719 0809 171b 0809                         ........

08097568 <_ZL14clock_divisors>:
 8097568:	0800 1810 2820 3830                         .... (08

08097570 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 8097578:	1931 0809 1937 0809 1a2b 0809 1943 0809     1...7...+...C...
 8097588:	1933 0809                                   3...

0809758c <_ZTV9TCPClient>:
	...
 8097594:	2011 0808 2045 0808 1905 0809 1cbd 0809     . ..E ..........
 80975a4:	1aa9 0809 19f7 0809 19c9 0809 191b 0809     ................
 80975b4:	1bd9 0809 1949 0809 1a47 0809 1b25 0809     ....I...G...%...
 80975c4:	1ce1 0809 1d33 0809 191d 0809 0066 6e6c     ....3.......f.ln
 80975d4:	6600 006e 6564 6174 6c69 0d00 000a 3025     .fn.detail....%0
 80975e4:	3031 2075 5d00 0020 2928 203a 2000 005b     10u .] .(): . [.
 80975f4:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 8097604:	736c 3d20 0020 6162 6475 5300 7265 6169     ls = .baud.Seria
 8097614:	006c 5355 5342 7265 6169 316c 7000 7261     l.USBSerial1.par
 8097624:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 8097634:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 8097644:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 8097654:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 8097664:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 8097674:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 8097684:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 8097694:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
 80976a4:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
 80976b4:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
 80976c4:	6373 6974 656d 0000                         sctime..

080976cc <_ZTV9IPAddress>:
	...
 80976d4:	22cf 0809 22c1 0809 22c3 0809               ."..."..."..

080976e0 <_ZTV9USBSerial>:
	...
 80976e8:	2371 0809 23b5 0809 238f 0809 1eff 0809     q#...#...#......
 80976f8:	2389 0809 2373 0809 237b 0809 23af 0809     .#..s#..{#...#..
 8097708:	2383 0809 236d 0809                         .#..m#..

08097710 <_ZTVN5spark13CellularClassE>:
	...
 8097718:	24e1 0809                                   .$..

0809771c <_ZN5spark7NetworkE>:
 809771c:	332c 2000                                   ,3. 

08097720 <_ZTV11USARTSerial>:
	...
 8097728:	063d 0809 063f 0809 254b 0809 1eff 0809     =...?...K%......
 8097738:	2533 0809 253f 0809 2539 0809 2545 0809     3%..?%..9%..E%..
 8097748:	2529 0809 252d 0809                         )%..-%..

08097750 <_ZTV7TwoWire>:
	...
 8097758:	25fd 0809 2647 0809 261f 0809 25ff 0809     .%..G&...&...%..
 8097768:	2627 0809 262f 0809 2637 0809 263f 0809     '&../&..7&..?&..

08097778 <day_name.4723>:
 8097778:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8097788:	6972 6153 4a74                                   riSat

0809778d <mon_name.4724>:
 809778d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 809779d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80977ad:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80977bd:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80977cd:	6425 000a                                   %d..

080977d1 <_ctype_>:
 80977d1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80977e1:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80977f1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8097801:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8097811:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8097821:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8097831:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8097841:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8097851:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080978d4 <__sf_fake_stdin>:
	...

080978f4 <__sf_fake_stdout>:
	...

08097914 <__sf_fake_stderr>:
	...

08097934 <__month_lengths>:
 8097934:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8097944:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8097954:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8097964:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8097974:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8097984:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8097994:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80979a4:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80979b4:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80979c4:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080979d0 <link_const_variable_data_end>:
 80979d0:	080802c5 	.word	0x080802c5
 80979d4:	080802ed 	.word	0x080802ed
 80979d8:	08080311 	.word	0x08080311
 80979dc:	08080315 	.word	0x08080315
 80979e0:	080803a5 	.word	0x080803a5
 80979e4:	08080b55 	.word	0x08080b55
 80979e8:	08080b59 	.word	0x08080b59
 80979ec:	08081171 	.word	0x08081171
 80979f0:	08081175 	.word	0x08081175
 80979f4:	08081179 	.word	0x08081179
 80979f8:	0808117d 	.word	0x0808117d
 80979fc:	0808151f 	.word	0x0808151f
 8097a00:	08081671 	.word	0x08081671
 8097a04:	08081d11 	.word	0x08081d11
 8097a08:	08081d35 	.word	0x08081d35
 8097a0c:	08081d39 	.word	0x08081d39
 8097a10:	08081f49 	.word	0x08081f49
 8097a14:	08081f4d 	.word	0x08081f4d
 8097a18:	08082a65 	.word	0x08082a65
 8097a1c:	08090639 	.word	0x08090639
 8097a20:	080906c3 	.word	0x080906c3
 8097a24:	08090a81 	.word	0x08090a81
 8097a28:	08090c95 	.word	0x08090c95
 8097a2c:	080910c5 	.word	0x080910c5
 8097a30:	080910c9 	.word	0x080910c9
 8097a34:	080910cd 	.word	0x080910cd
 8097a38:	080910e1 	.word	0x080910e1
 8097a3c:	080910e5 	.word	0x080910e5
 8097a40:	080910e9 	.word	0x080910e9
 8097a44:	080910ed 	.word	0x080910ed
 8097a48:	080910f1 	.word	0x080910f1
 8097a4c:	080910f5 	.word	0x080910f5
 8097a50:	080910f9 	.word	0x080910f9
 8097a54:	0809110d 	.word	0x0809110d
 8097a58:	08091111 	.word	0x08091111
 8097a5c:	08091115 	.word	0x08091115
 8097a60:	08091861 	.word	0x08091861
 8097a64:	08092031 	.word	0x08092031
 8097a68:	080920f1 	.word	0x080920f1
 8097a6c:	0809215d 	.word	0x0809215d
 8097a70:	080924ed 	.word	0x080924ed
 8097a74:	08092759 	.word	0x08092759
 8097a78:	080927b5 	.word	0x080927b5
 8097a7c:	08092835 	.word	0x08092835
 8097a80:	080928b9 	.word	0x080928b9
 8097a84:	0809297d 	.word	0x0809297d
 8097a88:	08092a41 	.word	0x08092a41

08097a8c <link_constructors_end>:
 8097a8c:	00000000 	.word	0x00000000
